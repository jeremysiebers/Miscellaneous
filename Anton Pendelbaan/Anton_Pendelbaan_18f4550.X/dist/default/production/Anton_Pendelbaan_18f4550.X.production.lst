

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Oct 18 23:22:08 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	idataBANK0
    57  003CB0                     __pidataBANK0:
    58                           	opt stack 0
    59                           
    60                           ;initializer for Junction@Return_Val
    61  003CB0  01                 	db	1
    62                           
    63                           ;initializer for Left_Mountain_From_The_Left@Return_Val
    64  003CB1  01                 	db	1
    65                           
    66                           ;initializer for Left_Mountain_From_The_Right@Return_Val
    67  003CB2  01                 	db	1
    68                           
    69                           ;initializer for Right_Mountain_From_The_Left@Return_Val
    70  003CB3  01                 	db	1
    71                           
    72                           ;initializer for Right_Mountain_From_The_Right@Return_Val
    73  003CB4  01                 	db	1
    74                           
    75                           ;initializer for Train_Move_Left_Brake@Return_Val
    76  003CB5  01                 	db	1
    77                           
    78                           ;initializer for Train_Move_Left_Start@Return_Val
    79  003CB6  01                 	db	1
    80                           
    81                           ;initializer for Train_Move_Right_Brake@Return_Val
    82  003CB7  01                 	db	1
    83                           
    84                           ;initializer for Train_Move_Right_Start@Return_Val
    85  003CB8  01                 	db	1
    86                           
    87                           ;initializer for Train_Path@Return_Val
    88  003CB9  01                 	db	1
    89                           
    90                           	psect	smallconst
    91  000800                     __psmallconst:
    92                           	opt stack 0
    93  000800  00                 	db	0
    94  000801                     _hexpowers:
    95                           	opt stack 0
    96  000801  0001               	dw	1
    97  000803  0010               	dw	16
    98  000805  0100               	dw	256
    99  000807  1000               	dw	4096
   100  000809                     __end_of_hexpowers:
   101                           	opt stack 0
   102  000809  0A                 	db	10
   103  00080A                     __end_of_DataLen:
   104                           	opt stack 0
   105  0000                     _ADCON1	set	4033
   106  0000                     _BAUDCONbits	set	4024
   107  0000                     _CCP1CON	set	4029
   108  0000                     _CCPR1L	set	4030
   109  0000                     _CMCON	set	4020
   110  0000                     _EEADR	set	4009
   111  0000                     _EECON1bits	set	4006
   112  0000                     _EECON2	set	4007
   113  0000                     _EEDATA	set	4008
   114  0000                     _INTCON	set	4082
   115  0000                     _INTCON2	set	4081
   116  0000                     _INTCONbits	set	4082
   117  0000                     _PIE1bits	set	3997
   118  0000                     _PIR1bits	set	3998
   119  0000                     _PIR2bits	set	4001
   120  0000                     _PORTAbits	set	3968
   121  0000                     _PORTBbits	set	3969
   122  0000                     _PORTCbits	set	3970
   123  0000                     _PORTDbits	set	3971
   124  0000                     _PORTEbits	set	3972
   125  0000                     _PR2	set	4043
   126  0000                     _RCONbits	set	4048
   127  0000                     _RCREG1	set	4014
   128  0000                     _RCSTA1bits	set	4011
   129  0000                     _RCSTAbits	set	4011
   130  0000                     _SPBRG	set	4015
   131  0000                     _SPBRGH	set	4016
   132  0000                     _T0CON	set	4053
   133  0000                     _T2CON	set	4042
   134  0000                     _TMR0H	set	4055
   135  0000                     _TMR0L	set	4054
   136  0000                     _TRISA	set	3986
   137  0000                     _TRISAbits	set	3986
   138  0000                     _TRISB	set	3987
   139  0000                     _TRISBbits	set	3987
   140  0000                     _TRISC	set	3988
   141  0000                     _TRISCbits	set	3988
   142  0000                     _TRISD	set	3989
   143  0000                     _TRISDbits	set	3989
   144  0000                     _TRISE	set	3990
   145  0000                     _TRISEbits	set	3990
   146  0000                     _TXREG1	set	4013
   147  0000                     _TXSTAbits	set	4012
   148  0000                     _TXIF	set	31988
   149  00080A                     STR_3:
   150  00080A  30                 	db	48	;'0'
   151  00080B  31                 	db	49	;'1'
   152  00080C  32                 	db	50	;'2'
   153  00080D  33                 	db	51	;'3'
   154  00080E  34                 	db	52	;'4'
   155  00080F  35                 	db	53	;'5'
   156  000810  36                 	db	54	;'6'
   157  000811  37                 	db	55	;'7'
   158  000812  38                 	db	56	;'8'
   159  000813  39                 	db	57	;'9'
   160  000814  61                 	db	97	;'a'
   161  000815  62                 	db	98	;'b'
   162  000816  63                 	db	99	;'c'
   163  000817  64                 	db	100	;'d'
   164  000818  65                 	db	101	;'e'
   165  000819  66                 	db	102	;'f'
   166  00081A  00                 	db	0
   167  00081B                     STR_2:
   168  00081B  0D                 	db	13
   169  00081C  0A                 	db	10
   170  00081D  4D                 	db	77	;'M'
   171  00081E  23                 	db	35
   172  00081F  25                 	db	37
   173  000820  78                 	db	120	;'x'
   174  000821  20                 	db	32
   175  000822  25                 	db	37
   176  000823  78                 	db	120	;'x'
   177  000824  25                 	db	37
   178  000825  78                 	db	120	;'x'
   179  000826  0D                 	db	13
   180  000827  0A                 	db	10
   181  000828  00                 	db	0
   182  000829                     STR_1:
   183  000829  0D                 	db	13
   184  00082A  58                 	db	88	;'X'
   185  00082B  30                 	db	48	;'0'
   186  00082C  0D                 	db	13
   187  00082D  0A                 	db	10
   188  00082E  00                 	db	0
   189                           
   190                           ; #config settings
   191  00082F  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  0039E0                     __pcinit:
   195                           	opt stack 0
   196  0039E0                     start_initialization:
   197                           	opt stack 0
   198  0039E0                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Clear objects allocated to BIGRAM (1020 bytes)
   202  0039E0  EE01  F0FC         	lfsr	0,__pbssBIGRAM
   203  0039E4  EE13 F0FC          	lfsr	1,1020
   204  0039E8                     clear_0:
   205  0039E8  6AEE               	clrf	postinc0,c
   206  0039EA  50E5               	movf	postdec1,w,c
   207  0039EC  50E1               	movf	fsr1l,w,c
   208  0039EE  E1FC               	bnz	clear_0
   209  0039F0  50E2               	movf	fsr1h,w,c
   210  0039F2  E1FA               	bnz	clear_0
   211                           
   212                           ; Clear objects allocated to BANK1 (252 bytes)
   213  0039F4  EE01  F000         	lfsr	0,__pbssBANK1
   214  0039F8  0EFC               	movlw	252
   215  0039FA                     clear_1:
   216  0039FA  6AEE               	clrf	postinc0,c
   217  0039FC  06E8               	decf	wreg,f,c
   218  0039FE  E1FD               	bnz	clear_1
   219                           
   220                           ; Clear objects allocated to BANK0 (44 bytes)
   221  003A00  EE00  F08D         	lfsr	0,__pbssBANK0
   222  003A04  0E2C               	movlw	44
   223  003A06                     clear_2:
   224  003A06  6AEE               	clrf	postinc0,c
   225  003A08  06E8               	decf	wreg,f,c
   226  003A0A  E1FD               	bnz	clear_2
   227                           
   228                           ; Clear objects allocated to COMRAM (31 bytes)
   229  003A0C  EE00  F021         	lfsr	0,__pbssCOMRAM
   230  003A10  0E1F               	movlw	31
   231  003A12                     clear_3:
   232  003A12  6AEE               	clrf	postinc0,c
   233  003A14  06E8               	decf	wreg,f,c
   234  003A16  E1FD               	bnz	clear_3
   235                           
   236                           ; Initialize objects allocated to BANK0 (10 bytes)
   237                           ; load TBLPTR registers with __pidataBANK0
   238  003A18  0EB0               	movlw	low __pidataBANK0
   239  003A1A  6EF6               	movwf	tblptrl,c
   240  003A1C  0E3C               	movlw	high __pidataBANK0
   241  003A1E  6EF7               	movwf	tblptrh,c
   242  003A20  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   243  003A22  6EF8               	movwf	tblptru,c
   244  003A24  EE00  F0B9         	lfsr	0,__pdataBANK0
   245  003A28  EE10 F00A          	lfsr	1,10
   246  003A2C                     copy_data0:
   247  003A2C  0009               	tblrd		*+
   248  003A2E  CFF5 FFEE          	movff	tablat,postinc0
   249  003A32  50E5               	movf	postdec1,w,c
   250  003A34  50E1               	movf	fsr1l,w,c
   251  003A36  E1FA               	bnz	copy_data0
   252  003A38                     end_of_initialization:
   253                           	opt stack 0
   254  003A38                     __end_of__initialization:
   255                           	opt stack 0
   256  003A38  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   257  003A3A  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   258  003A3C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   259  003A3E  6EF8               	movwf	tblptru,c
   260  003A40  0100               	movlb	0
   261  003A42  EFB6  F01C         	goto	_main	;jump to C main() function
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           postdec1	equ	0xFE5
   269                           fsr1h	equ	0xFE2
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	bssCOMRAM
   273  000021                     __pbssCOMRAM:
   274                           	opt stack 0
   275  000021                     _Green_Led_Counter:
   276                           	opt stack 0
   277  000021                     	ds	2
   278  000023                     _Led1_Counter:
   279                           	opt stack 0
   280  000023                     	ds	2
   281  000025                     _Red_Led_Counter:
   282                           	opt stack 0
   283  000025                     	ds	2
   284  000027                     _pData:
   285                           	opt stack 0
   286  000027                     	ds	2
   287  000029                     _Button_Contact_Counter_LB:
   288                           	opt stack 0
   289  000029                     	ds	1
   290  00002A                     _Button_Contact_Counter_LF:
   291                           	opt stack 0
   292  00002A                     	ds	1
   293  00002B                     _Button_Contact_Counter_Middle:
   294                           	opt stack 0
   295  00002B                     	ds	1
   296  00002C                     _Button_Contact_Counter_RB:
   297                           	opt stack 0
   298  00002C                     	ds	1
   299  00002D                     _Button_Contact_Counter_RF:
   300                           	opt stack 0
   301  00002D                     	ds	1
   302  00002E                     _Button_Contact_Counter_Start:
   303                           	opt stack 0
   304  00002E                     	ds	1
   305  00002F                     _Button_Contact_Counter_Stop:
   306                           	opt stack 0
   307  00002F                     	ds	1
   308  000030                     _Received_Data:
   309                           	opt stack 0
   310  000030                     	ds	1
   311  000031                     _Reed_Contact_LB_Counter:
   312                           	opt stack 0
   313  000031                     	ds	1
   314  000032                     _Reed_Contact_LF_Counter:
   315                           	opt stack 0
   316  000032                     	ds	1
   317  000033                     _Reed_Contact_LMD_Counter:
   318                           	opt stack 0
   319  000033                     	ds	1
   320  000034                     _Reed_Contact_LMU_Counter:
   321                           	opt stack 0
   322  000034                     	ds	1
   323  000035                     _Reed_Contact_RB_Counter:
   324                           	opt stack 0
   325  000035                     	ds	1
   326  000036                     _Reed_Contact_RF_Counter:
   327                           	opt stack 0
   328  000036                     	ds	1
   329  000037                     _Reed_Contact_RMD_Counter:
   330                           	opt stack 0
   331  000037                     	ds	1
   332  000038                     _Reed_Contact_RMU_Counter:
   333                           	opt stack 0
   334  000038                     	ds	1
   335  000039                     _RxSwitch:
   336                           	opt stack 0
   337  000039                     	ds	1
   338  00003A                     _eusart1RxCount:
   339                           	opt stack 0
   340  00003A                     	ds	1
   341  00003B                     _eusart1RxHead:
   342                           	opt stack 0
   343  00003B                     	ds	1
   344  00003C                     _eusart1RxTail:
   345                           	opt stack 0
   346  00003C                     	ds	1
   347  00003D                     _eusart1TxBufferRemaining:
   348                           	opt stack 0
   349  00003D                     	ds	1
   350  00003E                     _eusart1TxHead:
   351                           	opt stack 0
   352  00003E                     	ds	1
   353  00003F                     _eusart1TxTail:
   354                           	opt stack 0
   355  00003F                     	ds	1
   356                           tblptru	equ	0xFF8
   357                           tblptrh	equ	0xFF7
   358                           tblptrl	equ	0xFF6
   359                           tablat	equ	0xFF5
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           postdec1	equ	0xFE5
   363                           fsr1h	equ	0xFE2
   364                           fsr1l	equ	0xFE1
   365                           
   366                           	psect	bssBANK0
   367  00008D                     __pbssBANK0:
   368                           	opt stack 0
   369  00008D                     Junction@Junction_Switch_Time:
   370                           	opt stack 0
   371  00008D                     	ds	2
   372  00008F                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   373                           	opt stack 0
   374  00008F                     	ds	2
   375  000091                     Train_Move_Left_Start@Train_Move_Wait_Time:
   376                           	opt stack 0
   377  000091                     	ds	2
   378  000093                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   379                           	opt stack 0
   380  000093                     	ds	2
   381  000095                     Train_Move_Right_Start@Train_Move_Wait_Time:
   382                           	opt stack 0
   383  000095                     	ds	2
   384  000097                     _Activate_Controls_Counter:
   385                           	opt stack 0
   386  000097                     	ds	2
   387  000099                     _Adjust_Counter:
   388                           	opt stack 0
   389  000099                     	ds	2
   390  00009B                     _Mountain_Delay_Counter:
   391                           	opt stack 0
   392  00009B                     	ds	2
   393  00009D                     _Train_Move_Pwm_Count:
   394                           	opt stack 0
   395  00009D                     	ds	2
   396  00009F                     _Train_Move_Pwm_Fast_Count:
   397                           	opt stack 0
   398  00009F                     	ds	2
   399  0000A1                     _Stop_Program:
   400                           	opt stack 0
   401  0000A1                     	ds	1
   402  0000A2                     _Switch_Activate_Controls:
   403                           	opt stack 0
   404  0000A2                     	ds	1
   405  0000A3                     _Switch_Adjust_LB:
   406                           	opt stack 0
   407  0000A3                     	ds	1
   408  0000A4                     _Switch_Adjust_LF:
   409                           	opt stack 0
   410  0000A4                     	ds	1
   411  0000A5                     _Switch_Adjust_RB:
   412                           	opt stack 0
   413  0000A5                     	ds	1
   414  0000A6                     _Switch_Adjust_RF:
   415                           	opt stack 0
   416  0000A6                     	ds	1
   417  0000A7                     _Switch_Init:
   418                           	opt stack 0
   419  0000A7                     	ds	1
   420  0000A8                     _Switch_Junction:
   421                           	opt stack 0
   422  0000A8                     	ds	1
   423  0000A9                     _Switch_Main:
   424                           	opt stack 0
   425  0000A9                     	ds	1
   426  0000AA                     _Switch_Moutain:
   427                           	opt stack 0
   428  0000AA                     	ds	1
   429  0000AB                     _Switch_Program:
   430                           	opt stack 0
   431  0000AB                     	ds	1
   432  0000AC                     _Switch_Train_Move:
   433                           	opt stack 0
   434  0000AC                     	ds	1
   435  0000AD                     _Switch_Train_Path:
   436                           	opt stack 0
   437  0000AD                     	ds	1
   438  0000AE                     _Update_State_Machine:
   439                           	opt stack 0
   440  0000AE                     	ds	1
   441  0000AF                     _Data:
   442                           	opt stack 0
   443  0000AF                     	ds	10
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1h	equ	0xFE2
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	dataBANK0
   455  0000B9                     __pdataBANK0:
   456                           	opt stack 0
   457  0000B9                     Junction@Return_Val:
   458                           	opt stack 0
   459  0000B9                     	ds	1
   460  0000BA                     Left_Mountain_From_The_Left@Return_Val:
   461                           	opt stack 0
   462  0000BA                     	ds	1
   463  0000BB                     Left_Mountain_From_The_Right@Return_Val:
   464                           	opt stack 0
   465  0000BB                     	ds	1
   466  0000BC                     Right_Mountain_From_The_Left@Return_Val:
   467                           	opt stack 0
   468  0000BC                     	ds	1
   469  0000BD                     Right_Mountain_From_The_Right@Return_Val:
   470                           	opt stack 0
   471  0000BD                     	ds	1
   472  0000BE                     Train_Move_Left_Brake@Return_Val:
   473                           	opt stack 0
   474  0000BE                     	ds	1
   475  0000BF                     Train_Move_Left_Start@Return_Val:
   476                           	opt stack 0
   477  0000BF                     	ds	1
   478  0000C0                     Train_Move_Right_Brake@Return_Val:
   479                           	opt stack 0
   480  0000C0                     	ds	1
   481  0000C1                     Train_Move_Right_Start@Return_Val:
   482                           	opt stack 0
   483  0000C1                     	ds	1
   484  0000C2                     Train_Path@Return_Val:
   485                           	opt stack 0
   486  0000C2                     	ds	1
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           postdec1	equ	0xFE5
   494                           fsr1h	equ	0xFE2
   495                           fsr1l	equ	0xFE1
   496                           
   497                           	psect	bssBANK1
   498  000100                     __pbssBANK1:
   499                           	opt stack 0
   500  000100                     _eusart1RxBuffer:
   501                           	opt stack 0
   502  000100                     	ds	126
   503  00017E                     _eusart1TxBuffer:
   504                           	opt stack 0
   505  00017E                     	ds	126
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1h	equ	0xFE2
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	bssBIGRAM
   517  0001FC                     __pbssBIGRAM:
   518                           	opt stack 0
   519  0001FC                     _API:
   520                           	opt stack 0
   521  0001FC                     	ds	510
   522  0003FA                     _API_RW:
   523                           	opt stack 0
   524  0003FA                     	ds	510
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1h	equ	0xFE2
   533                           fsr1l	equ	0xFE1
   534                           
   535                           	psect	cstackBANK0
   536  000060                     __pcstackBANK0:
   537                           	opt stack 0
   538  000060                     ?_GETxAPIxVAL:
   539                           	opt stack 0
   540  000060                     ?___lwdiv:
   541                           	opt stack 0
   542  000060                     EUSART1_Initialize@baud_rate:
   543                           	opt stack 0
   544  000060                     APIxInitialize@i:
   545                           	opt stack 0
   546  000060                     ___lwdiv@dividend:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x0
   550  000060                     	ds	2
   551  000062                     SetDCPWM1@dutycycle:
   552                           	opt stack 0
   553  000062                     ___lwdiv@divisor:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x2
   557  000062                     	ds	2
   558  000064                     ??_SetDCPWM1:
   559  000064                     ___lwdiv@counter:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x4
   563  000064                     	ds	1
   564  000065                     ___lwdiv@quotient:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x5
   568  000065                     	ds	1
   569  000066                     SetDCPWM1@DCycle:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x6
   573  000066                     	ds	1
   574  000067                     ?_printf:
   575                           	opt stack 0
   576  000067                     printf@f:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x7
   580  000067                     	ds	8
   581  00006F                     printf@flag:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0xF
   585  00006F                     	ds	1
   586  000070                     printf@idx:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x10
   590  000070                     	ds	1
   591  000071                     printf@ap:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x11
   595  000071                     	ds	2
   596  000073                     printf@val:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x13
   600  000073                     	ds	2
   601  000075                     printf@prec:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x15
   605  000075                     	ds	1
   606  000076                     printf@c:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x16
   610  000076                     	ds	1
   611  000077                     SENDxMESSAGE@value:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x17
   615  000077                     	ds	2
   616  000079                     SENDxMESSAGE@index:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x19
   620  000079                     	ds	1
   621  00007A                     SENDxMESSAGE@high:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x1A
   625  00007A                     	ds	1
   626  00007B                     SENDxMESSAGE@low:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x1B
   630  00007B                     	ds	1
   631  00007C                     SETxAPIxVAL@value:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x1C
   635  00007C                     	ds	2
   636  00007E                     
   637                           ; 1 bytes @ 0x1E
   638  00007E                     	ds	2
   639  000080                     SETxAPIxVAL@index:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x20
   643  000080                     	ds	1
   644  000081                     ??_Debounce_Inputs:
   645  000081                     Junction@Straight_Bend:
   646                           	opt stack 0
   647  000081                     INCRxAPIxVAL@value:
   648                           	opt stack 0
   649  000081                     DECRxAPIxVAL@value:
   650                           	opt stack 0
   651  000081                     SETxPWM@speed:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x21
   655  000081                     	ds	1
   656  000082                     Junction@Junction_Left_Right:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x22
   660  000082                     	ds	1
   661  000083                     INCRxAPIxVAL@index:
   662                           	opt stack 0
   663  000083                     DECRxAPIxVAL@index:
   664                           	opt stack 0
   665  000083                     SETxPWM@direction:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x23
   669  000083                     	ds	1
   670  000084                     ??_SETxPWM:
   671                           
   672                           ; 1 bytes @ 0x24
   673  000084                     	ds	2
   674  000086                     SETxPWM@pwm_speed:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x26
   678  000086                     	ds	2
   679  000088                     Right_Mountain_From_The_Right@rc:
   680                           	opt stack 0
   681  000088                     Left_Mountain_From_The_Right@rc:
   682                           	opt stack 0
   683  000088                     Left_Mountain_From_The_Left@rc:
   684                           	opt stack 0
   685  000088                     Right_Mountain_From_The_Left@rc:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x28
   689  000088                     	ds	1
   690  000089                     Train_Path@To:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x29
   694  000089                     	ds	1
   695  00008A                     Train_Path@From:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x2A
   699  00008A                     	ds	1
   700  00008B                     ??_Update_StateMchn:
   701                           
   702                           ; 1 bytes @ 0x2B
   703  00008B                     	ds	2
   704                           tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           postdec1	equ	0xFE5
   711                           fsr1h	equ	0xFE2
   712                           fsr1l	equ	0xFE1
   713                           
   714                           	psect	cstackCOMRAM
   715  000001                     __pcstackCOMRAM:
   716                           	opt stack 0
   717  000001                     ??_tc_high:
   718  000001                     
   719                           ; 1 bytes @ 0x0
   720  000001                     	ds	14
   721  00000F                     ??_tc_low:
   722                           
   723                           ; 1 bytes @ 0xE
   724  00000F                     	ds	17
   725  000020                     EUSART1_Read@readValue:
   726                           	opt stack 0
   727  000020                     putch@data:
   728                           	opt stack 0
   729  000020                     GETxAPIxVAL@index:
   730                           	opt stack 0
   731  000020                     Green_Led@Operation:
   732                           	opt stack 0
   733  000020                     Red_Led@Operation:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x1F
   737  000020                     	ds	1
   738  000021                     tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1h	equ	0xFE2
   746                           fsr1l	equ	0xFE1
   747                           
   748                           ; 1 bytes @ 0x20
   749 ;;
   750 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   751 ;;
   752 ;; *************** function _main *****************
   753 ;; Defined at:
   754 ;;		line 105 in file "../Main.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;		None
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   768 ;;      Params:         0       0       0       0       0       0       0       0       0
   769 ;;      Locals:         0       0       0       0       0       0       0       0       0
   770 ;;      Temps:          0       0       0       0       0       0       0       0       0
   771 ;;      Totals:         0       0       0       0       0       0       0       0       0
   772 ;;Total ram usage:        0 bytes
   773 ;; Hardware stack levels required when called:   11
   774 ;; This function calls:
   775 ;;		_APIxInitialize
   776 ;;		_EUSART1_Initialize
   777 ;;		_Init_Pwm
   778 ;;		_Init_Timers
   779 ;;		_READxRECEIVEDxMESSAGE
   780 ;;		_Update_StateMchn
   781 ;; This function is called by:
   782 ;;		Startup code after reset
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text0
   787  00396C                     __ptext0:
   788                           	opt stack 0
   789  00396C                     _main:
   790                           	opt stack 20
   791                           
   792                           ;Main.c: 107: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
   793                           
   794                           ;incstack = 0
   795  00396C  6892               	setf	3986,c	;volatile
   796  00396E  6893               	setf	3987,c	;volatile
   797  003970  6894               	setf	3988,c	;volatile
   798  003972  6895               	setf	3989,c	;volatile
   799  003974  6896               	setf	3990,c	;volatile
   800                           
   801                           ;Main.c: 108: ADCON1=0x0F;
   802  003976  0E0F               	movlw	15
   803  003978  6EC1               	movwf	4033,c	;volatile
   804                           
   805                           ;Main.c: 109: CMCON=0x07;
   806  00397A  0E07               	movlw	7
   807  00397C  6EB4               	movwf	4020,c	;volatile
   808                           
   809                           ;Main.c: 110: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
   810  00397E  9892               	bcf	3986,4,c	;volatile
   811  003980  9A95               	bcf	3989,5,c	;volatile
   812  003982  9C95               	bcf	3989,6,c	;volatile
   813                           
   814                           ;Main.c: 111: PORTAbits.RA4 = 0;
   815  003984  9880               	bcf	3968,4,c	;volatile
   816                           
   817                           ;Main.c: 112: PORTDbits.RD6 = 0;
   818  003986  9C83               	bcf	3971,6,c	;volatile
   819                           
   820                           ;Main.c: 113: PORTDbits.RD5 = 0;
   821  003988  9A83               	bcf	3971,5,c	;volatile
   822                           
   823                           ;Main.c: 115: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
   824  00398A  9092               	bcf	3986,0,c	;volatile
   825  00398C  9292               	bcf	3986,1,c	;volatile
   826  00398E  9492               	bcf	3986,2,c	;volatile
   827  003990  9692               	bcf	3986,3,c	;volatile
   828                           
   829                           ;Main.c: 116: PORTAbits.RA3 = 0;
   830  003992  9680               	bcf	3968,3,c	;volatile
   831                           
   832                           ;Main.c: 117: PORTAbits.RA2 = 0;
   833  003994  9480               	bcf	3968,2,c	;volatile
   834                           
   835                           ;Main.c: 118: PORTAbits.RA1 = 0;
   836  003996  9280               	bcf	3968,1,c	;volatile
   837                           
   838                           ;Main.c: 119: PORTAbits.RA0 = 0;
   839  003998  9080               	bcf	3968,0,c	;volatile
   840                           
   841                           ;Main.c: 121: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
   842  00399A  8495               	bsf	3989,2,c	;volatile
   843  00399C  8695               	bsf	3989,3,c	;volatile
   844  00399E  8095               	bsf	3989,0,c	;volatile
   845  0039A0  8295               	bsf	3989,1,c	;volatile
   846  0039A2  8294               	bsf	3988,1,c	;volatile
   847  0039A4  8895               	bsf	3989,4,c	;volatile
   848  0039A6  8096               	bsf	3990,0,c	;volatile
   849  0039A8  8296               	bsf	3990,1,c	;volatile
   850                           
   851                           ;Main.c: 122: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
   852  0039AA  8093               	bsf	3987,0,c	;volatile
   853  0039AC  8293               	bsf	3987,1,c	;volatile
   854  0039AE  8493               	bsf	3987,2,c	;volatile
   855  0039B0  8693               	bsf	3987,3,c	;volatile
   856  0039B2  8893               	bsf	3987,4,c	;volatile
   857  0039B4  8A93               	bsf	3987,5,c	;volatile
   858  0039B6  8E95               	bsf	3989,7,c	;volatile
   859                           
   860                           ;Main.c: 123: APIxInitialize();
   861  0039B8  ECEA  F00F         	call	_APIxInitialize	;wreg free
   862                           
   863                           ;Main.c: 124: Init_Pwm();
   864  0039BC  EC26  F01E         	call	_Init_Pwm	;wreg free
   865                           
   866                           ;Main.c: 125: Init_Timers();
   867  0039C0  EC46  F01E         	call	_Init_Timers	;wreg free
   868                           
   869                           ;Main.c: 126: EUSART1_Initialize();
   870  0039C4  EC4D  F01D         	call	_EUSART1_Initialize	;wreg free
   871  0039C8                     l9344:
   872                           
   873                           ;Main.c: 129: {
   874                           ;Main.c: 130: if (1 == Update_State_Machine)
   875  0039C8  0100               	movlb	0	; () banked
   876  0039CA  05AE               	decf	_Update_State_Machine& (0+255),w,b
   877  0039CC  A4D8               	btfss	status,2,c
   878  0039CE  D005               	goto	l9350
   879                           
   880                           ; BSR set to: 0
   881                           ;Main.c: 131: {
   882                           ;Main.c: 132: Update_State_Machine = 0;
   883  0039D0  0E00               	movlw	0
   884  0039D2  0100               	movlb	0	; () banked
   885  0039D4  6FAE               	movwf	_Update_State_Machine& (0+255),b
   886                           
   887                           ; BSR set to: 0
   888                           ;Main.c: 133: Update_StateMchn();
   889  0039D6  EC18  F004         	call	_Update_StateMchn	;wreg free
   890  0039DA                     l9350:
   891                           
   892                           ;Main.c: 134: }
   893                           ;Main.c: 136: READxRECEIVEDxMESSAGE();
   894  0039DA  ECF2  F01A         	call	_READxRECEIVEDxMESSAGE	;wreg free
   895  0039DE  D7F4               	goto	l9344
   896  0039E0                     __end_of_main:
   897                           	opt stack 0
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1h	equ	0xFE2
   906                           fsr1l	equ	0xFE1
   907                           status	equ	0xFD8
   908                           
   909 ;; *************** function _Update_StateMchn *****************
   910 ;; Defined at:
   911 ;;		line 40 in file "../State_Mchn.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;		None
   914 ;; Auto vars:     Size  Location     Type
   915 ;;		None
   916 ;; Return value:  Size  Location     Type
   917 ;;                  1    wreg      void 
   918 ;; Registers used:
   919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   925 ;;      Params:         0       0       0       0       0       0       0       0       0
   926 ;;      Locals:         0       0       0       0       0       0       0       0       0
   927 ;;      Temps:          0       2       0       0       0       0       0       0       0
   928 ;;      Totals:         0       2       0       0       0       0       0       0       0
   929 ;;Total ram usage:        2 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; Hardware stack levels required when called:   10
   932 ;; This function calls:
   933 ;;		_DECRxAPIxVAL
   934 ;;		_Debounce_Inputs
   935 ;;		_Eeprom_Store
   936 ;;		_GETxAPIxVAL
   937 ;;		_Green_Led
   938 ;;		_INCRxAPIxVAL
   939 ;;		_Red_Led
   940 ;;		_SETxAPIxVAL
   941 ;;		_Train_Path
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text1
   948  000830                     __ptext1:
   949                           	opt stack 0
   950  000830                     _Update_StateMchn:
   951                           	opt stack 20
   952                           
   953                           ;State_Mchn.c: 42: Debounce_Inputs();
   954                           
   955                           ;incstack = 0
   956  000830  EC32  F00C         	call	_Debounce_Inputs	;wreg free
   957                           
   958                           ;State_Mchn.c: 44: switch (Switch_Main)
   959  000834  EF1D  F00C         	goto	l9158
   960  000838                     l8394:
   961  000838  0E00               	movlw	0
   962  00083A  EC3A  F01C         	call	_Green_Led
   963                           
   964                           ;State_Mchn.c: 49: Red_Led(0);
   965  00083E  0E00               	movlw	0
   966  000840  ECFA  F01B         	call	_Red_Led
   967                           
   968                           ;State_Mchn.c: 50: Switch_Init = 1;
   969  000844  0E01               	movlw	1
   970  000846  D012               	goto	L1
   971  000848                     l8398:
   972                           
   973                           ; BSR set to: 0
   974  000848  0E23               	movlw	35
   975  00084A  EC38  F01E         	call	_GETxAPIxVAL
   976  00084E  0100               	movlb	0	; () banked
   977  000850  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
   978  000852  0100               	movlb	0	; () banked
   979  000854  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   980  000856  B4D8               	btfsc	status,2,c
   981  000858  D00D               	goto	l8404
   982                           
   983                           ; BSR set to: 0
   984                           ;State_Mchn.c: 54: {
   985                           ;State_Mchn.c: 55: SETxAPIxVAL(0x27, 0);
   986  00085A  0E00               	movlw	0
   987  00085C  0100               	movlb	0	; () banked
   988  00085E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   989  000860  0E00               	movlw	0
   990  000862  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
   991  000864  0E27               	movlw	39
   992  000866  EC23  F01D         	call	_SETxAPIxVAL
   993  00086A  D04B               	goto	l8426
   994  00086C                     L1:
   995  00086C  0100               	movlb	0	; () banked
   996  00086E  6FA7               	movwf	_Switch_Init& (0+255),b
   997                           
   998                           ;State_Mchn.c: 57: break;
   999  000870  EF2A  F00C         	goto	l9160
  1000  000874                     l8404:
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;State_Mchn.c: 58: }
  1004                           ;State_Mchn.c: 59: if(GETxAPIxVAL(0x24))
  1005  000874  0E24               	movlw	36
  1006  000876  EC38  F01E         	call	_GETxAPIxVAL
  1007  00087A  0100               	movlb	0	; () banked
  1008  00087C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1009  00087E  0100               	movlb	0	; () banked
  1010  000880  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1011  000882  B4D8               	btfsc	status,2,c
  1012  000884  D009               	goto	l8410
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;State_Mchn.c: 60: {
  1016                           ;State_Mchn.c: 61: SETxAPIxVAL(0x27, 1);
  1017  000886  0E00               	movlw	0
  1018  000888  0100               	movlb	0	; () banked
  1019  00088A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1020  00088C  0E01               	movlw	1
  1021  00088E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1022  000890  0E27               	movlw	39
  1023  000892  EC23  F01D         	call	_SETxAPIxVAL
  1024  000896  D035               	goto	l8426
  1025  000898                     l8410:
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;State_Mchn.c: 64: }
  1029                           ;State_Mchn.c: 65: if(GETxAPIxVAL(0x25))
  1030  000898  0E25               	movlw	37
  1031  00089A  EC38  F01E         	call	_GETxAPIxVAL
  1032  00089E  0100               	movlb	0	; () banked
  1033  0008A0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1034  0008A2  0100               	movlb	0	; () banked
  1035  0008A4  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1036  0008A6  B4D8               	btfsc	status,2,c
  1037  0008A8  D009               	goto	l8416
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;State_Mchn.c: 66: {
  1041                           ;State_Mchn.c: 67: SETxAPIxVAL(0x27, 2);
  1042  0008AA  0E00               	movlw	0
  1043  0008AC  0100               	movlb	0	; () banked
  1044  0008AE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1045  0008B0  0E02               	movlw	2
  1046  0008B2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1047  0008B4  0E27               	movlw	39
  1048  0008B6  EC23  F01D         	call	_SETxAPIxVAL
  1049  0008BA  D023               	goto	l8426
  1050  0008BC                     l8416:
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;State_Mchn.c: 70: }
  1054                           ;State_Mchn.c: 71: if(GETxAPIxVAL(0x26))
  1055  0008BC  0E26               	movlw	38
  1056  0008BE  EC38  F01E         	call	_GETxAPIxVAL
  1057  0008C2  0100               	movlb	0	; () banked
  1058  0008C4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1059  0008C6  0100               	movlb	0	; () banked
  1060  0008C8  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1061  0008CA  B4D8               	btfsc	status,2,c
  1062  0008CC  D009               	goto	l8422
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;State_Mchn.c: 72: {
  1066                           ;State_Mchn.c: 73: SETxAPIxVAL(0x27, 3);
  1067  0008CE  0E00               	movlw	0
  1068  0008D0  0100               	movlb	0	; () banked
  1069  0008D2  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1070  0008D4  0E03               	movlw	3
  1071  0008D6  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1072  0008D8  0E27               	movlw	39
  1073  0008DA  EC23  F01D         	call	_SETxAPIxVAL
  1074  0008DE  D011               	goto	l8426
  1075  0008E0                     l8422:
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;State_Mchn.c: 76: }
  1079                           ;State_Mchn.c: 77: if(GETxAPIxVAL(0x22))
  1080  0008E0  0E22               	movlw	34
  1081  0008E2  EC38  F01E         	call	_GETxAPIxVAL
  1082  0008E6  0100               	movlb	0	; () banked
  1083  0008E8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1084  0008EA  0100               	movlb	0	; () banked
  1085  0008EC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1086  0008EE  B4D8               	btfsc	status,2,c
  1087  0008F0  D00A               	goto	l8428
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;State_Mchn.c: 78: {
  1091                           ;State_Mchn.c: 79: SETxAPIxVAL(0x27, 4);
  1092  0008F2  0E00               	movlw	0
  1093  0008F4  0100               	movlb	0	; () banked
  1094  0008F6  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1095  0008F8  0E04               	movlw	4
  1096  0008FA  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1097  0008FC  0E27               	movlw	39
  1098  0008FE  EC23  F01D         	call	_SETxAPIxVAL
  1099  000902                     l8426:
  1100                           
  1101                           ;State_Mchn.c: 80: Switch_Init = 2;
  1102  000902  0E02               	movlw	2
  1103  000904  D7B3               	goto	L1
  1104  000906                     l8428:
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;State_Mchn.c: 82: }
  1108                           ;State_Mchn.c: 83: Switch_Init = 1;
  1109  000906  0E01               	movlw	1
  1110  000908  0100               	movlb	0	; () banked
  1111  00090A  6FA7               	movwf	_Switch_Init& (0+255),b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;State_Mchn.c: 84: Green_Led(2);
  1115  00090C  0E02               	movlw	2
  1116  00090E  EC3A  F01C         	call	_Green_Led
  1117                           
  1118                           ;State_Mchn.c: 85: break;
  1119  000912  EF2A  F00C         	goto	l9160
  1120  000916                     l8432:
  1121  000916  0E23               	movlw	35
  1122  000918  EC38  F01E         	call	_GETxAPIxVAL
  1123  00091C  0100               	movlb	0	; () banked
  1124  00091E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1125  000920  0100               	movlb	0	; () banked
  1126  000922  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1127  000924  A4D8               	btfss	status,2,c
  1128  000926  D030               	goto	l8446
  1129                           
  1130                           ; BSR set to: 0
  1131  000928  0E24               	movlw	36
  1132  00092A  EC38  F01E         	call	_GETxAPIxVAL
  1133  00092E  0100               	movlb	0	; () banked
  1134  000930  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1135  000932  0100               	movlb	0	; () banked
  1136  000934  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1137  000936  A4D8               	btfss	status,2,c
  1138  000938  D027               	goto	l8446
  1139                           
  1140                           ; BSR set to: 0
  1141  00093A  0E25               	movlw	37
  1142  00093C  EC38  F01E         	call	_GETxAPIxVAL
  1143  000940  0100               	movlb	0	; () banked
  1144  000942  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1145  000944  0100               	movlb	0	; () banked
  1146  000946  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1147  000948  A4D8               	btfss	status,2,c
  1148  00094A  D01E               	goto	l8446
  1149                           
  1150                           ; BSR set to: 0
  1151  00094C  0E26               	movlw	38
  1152  00094E  EC38  F01E         	call	_GETxAPIxVAL
  1153  000952  0100               	movlb	0	; () banked
  1154  000954  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1155  000956  0100               	movlb	0	; () banked
  1156  000958  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1157  00095A  A4D8               	btfss	status,2,c
  1158  00095C  D015               	goto	l8446
  1159                           
  1160                           ; BSR set to: 0
  1161  00095E  0E22               	movlw	34
  1162  000960  EC38  F01E         	call	_GETxAPIxVAL
  1163  000964  0100               	movlb	0	; () banked
  1164  000966  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1165  000968  0100               	movlb	0	; () banked
  1166  00096A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1167  00096C  A4D8               	btfss	status,2,c
  1168  00096E  D00C               	goto	l8446
  1169                           
  1170                           ; BSR set to: 0
  1171  000970  0E20               	movlw	32
  1172  000972  EC38  F01E         	call	_GETxAPIxVAL
  1173  000976  0100               	movlb	0	; () banked
  1174  000978  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1175  00097A  0100               	movlb	0	; () banked
  1176  00097C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1177  00097E  A4D8               	btfss	status,2,c
  1178  000980  D003               	goto	l8446
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;State_Mchn.c: 88: {
  1182                           ;State_Mchn.c: 89: Switch_Init = 3;
  1183  000982  0E03               	movlw	3
  1184  000984  0100               	movlb	0	; () banked
  1185  000986  6FA7               	movwf	_Switch_Init& (0+255),b
  1186  000988                     l8446:
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;State_Mchn.c: 90: }
  1190                           ;State_Mchn.c: 91: Red_Led(0);
  1191  000988  0E00               	movlw	0
  1192  00098A  ECFA  F01B         	call	_Red_Led
  1193                           
  1194                           ;State_Mchn.c: 92: Green_Led(2);
  1195  00098E  0E02               	movlw	2
  1196  000990  EC3A  F01C         	call	_Green_Led
  1197                           
  1198                           ;State_Mchn.c: 93: break;
  1199  000994  EF2A  F00C         	goto	l9160
  1200  000998                     l8450:
  1201  000998  0E23               	movlw	35
  1202  00099A  EC38  F01E         	call	_GETxAPIxVAL
  1203  00099E  0100               	movlb	0	; () banked
  1204  0009A0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1205  0009A2  0100               	movlb	0	; () banked
  1206  0009A4  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1207  0009A6  B4D8               	btfsc	status,2,c
  1208  0009A8  D009               	goto	l8456
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;State_Mchn.c: 96: {
  1212                           ;State_Mchn.c: 97: SETxAPIxVAL(0x28, 0);
  1213  0009AA  0E00               	movlw	0
  1214  0009AC  0100               	movlb	0	; () banked
  1215  0009AE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1216  0009B0  0E00               	movlw	0
  1217  0009B2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1218  0009B4  0E28               	movlw	40
  1219  0009B6  EC23  F01D         	call	_SETxAPIxVAL
  1220  0009BA  D059               	goto	l8484
  1221  0009BC                     l8456:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;State_Mchn.c: 100: }
  1225                           ;State_Mchn.c: 101: if(GETxAPIxVAL(0x24))
  1226  0009BC  0E24               	movlw	36
  1227  0009BE  EC38  F01E         	call	_GETxAPIxVAL
  1228  0009C2  0100               	movlb	0	; () banked
  1229  0009C4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1230  0009C6  0100               	movlb	0	; () banked
  1231  0009C8  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1232  0009CA  B4D8               	btfsc	status,2,c
  1233  0009CC  D009               	goto	l8462
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;State_Mchn.c: 102: {
  1237                           ;State_Mchn.c: 103: SETxAPIxVAL(0x28, 1);
  1238  0009CE  0E00               	movlw	0
  1239  0009D0  0100               	movlb	0	; () banked
  1240  0009D2  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1241  0009D4  0E01               	movlw	1
  1242  0009D6  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1243  0009D8  0E28               	movlw	40
  1244  0009DA  EC23  F01D         	call	_SETxAPIxVAL
  1245  0009DE  D047               	goto	l8484
  1246  0009E0                     l8462:
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;State_Mchn.c: 106: }
  1250                           ;State_Mchn.c: 107: if(GETxAPIxVAL(0x25))
  1251  0009E0  0E25               	movlw	37
  1252  0009E2  EC38  F01E         	call	_GETxAPIxVAL
  1253  0009E6  0100               	movlb	0	; () banked
  1254  0009E8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1255  0009EA  0100               	movlb	0	; () banked
  1256  0009EC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1257  0009EE  B4D8               	btfsc	status,2,c
  1258  0009F0  D009               	goto	l8468
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;State_Mchn.c: 108: {
  1262                           ;State_Mchn.c: 109: SETxAPIxVAL(0x28, 2);
  1263  0009F2  0E00               	movlw	0
  1264  0009F4  0100               	movlb	0	; () banked
  1265  0009F6  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1266  0009F8  0E02               	movlw	2
  1267  0009FA  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1268  0009FC  0E28               	movlw	40
  1269  0009FE  EC23  F01D         	call	_SETxAPIxVAL
  1270  000A02  D035               	goto	l8484
  1271  000A04                     l8468:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;State_Mchn.c: 112: }
  1275                           ;State_Mchn.c: 113: if(GETxAPIxVAL(0x26))
  1276  000A04  0E26               	movlw	38
  1277  000A06  EC38  F01E         	call	_GETxAPIxVAL
  1278  000A0A  0100               	movlb	0	; () banked
  1279  000A0C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1280  000A0E  0100               	movlb	0	; () banked
  1281  000A10  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1282  000A12  B4D8               	btfsc	status,2,c
  1283  000A14  D009               	goto	l8474
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;State_Mchn.c: 114: {
  1287                           ;State_Mchn.c: 115: SETxAPIxVAL(0x28, 3);
  1288  000A16  0E00               	movlw	0
  1289  000A18  0100               	movlb	0	; () banked
  1290  000A1A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1291  000A1C  0E03               	movlw	3
  1292  000A1E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1293  000A20  0E28               	movlw	40
  1294  000A22  EC23  F01D         	call	_SETxAPIxVAL
  1295  000A26  D023               	goto	l8484
  1296  000A28                     l8474:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;State_Mchn.c: 118: }
  1300                           ;State_Mchn.c: 119: if(GETxAPIxVAL(0x22))
  1301  000A28  0E22               	movlw	34
  1302  000A2A  EC38  F01E         	call	_GETxAPIxVAL
  1303  000A2E  0100               	movlb	0	; () banked
  1304  000A30  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1305  000A32  0100               	movlb	0	; () banked
  1306  000A34  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1307  000A36  B4D8               	btfsc	status,2,c
  1308  000A38  D009               	goto	l8480
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;State_Mchn.c: 120: {
  1312                           ;State_Mchn.c: 121: SETxAPIxVAL(0x28, 4);
  1313  000A3A  0E00               	movlw	0
  1314  000A3C  0100               	movlb	0	; () banked
  1315  000A3E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1316  000A40  0E04               	movlw	4
  1317  000A42  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1318  000A44  0E28               	movlw	40
  1319  000A46  EC23  F01D         	call	_SETxAPIxVAL
  1320  000A4A  D011               	goto	l8484
  1321  000A4C                     l8480:
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;State_Mchn.c: 124: }
  1325                           ;State_Mchn.c: 125: if(GETxAPIxVAL(0x20))
  1326  000A4C  0E20               	movlw	32
  1327  000A4E  EC38  F01E         	call	_GETxAPIxVAL
  1328  000A52  0100               	movlb	0	; () banked
  1329  000A54  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1330  000A56  0100               	movlb	0	; () banked
  1331  000A58  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1332  000A5A  B4D8               	btfsc	status,2,c
  1333  000A5C  D00A               	goto	l8486
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;State_Mchn.c: 126: {
  1337                           ;State_Mchn.c: 127: SETxAPIxVAL(0x28, 9);
  1338  000A5E  0E00               	movlw	0
  1339  000A60  0100               	movlb	0	; () banked
  1340  000A62  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1341  000A64  0E09               	movlw	9
  1342  000A66  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1343  000A68  0E28               	movlw	40
  1344  000A6A  EC23  F01D         	call	_SETxAPIxVAL
  1345  000A6E                     l8484:
  1346                           
  1347                           ;State_Mchn.c: 128: Switch_Init = 4;
  1348  000A6E  0E04               	movlw	4
  1349  000A70  D6FD               	goto	L1
  1350  000A72                     l8486:
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;State_Mchn.c: 130: }
  1354                           ;State_Mchn.c: 131: Green_Led(2);
  1355  000A72  0E02               	movlw	2
  1356  000A74  EC3A  F01C         	call	_Green_Led
  1357                           
  1358                           ;State_Mchn.c: 132: Switch_Init = 3;
  1359  000A78  0E03               	movlw	3
  1360  000A7A  D6F8               	goto	L1
  1361  000A7C                     l8490:
  1362                           
  1363                           ; BSR set to: 0
  1364  000A7C  0E23               	movlw	35
  1365  000A7E  EC38  F01E         	call	_GETxAPIxVAL
  1366  000A82  0100               	movlb	0	; () banked
  1367  000A84  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1368  000A86  0100               	movlb	0	; () banked
  1369  000A88  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1370  000A8A  A4D8               	btfss	status,2,c
  1371  000A8C  D060               	goto	l8512
  1372                           
  1373                           ; BSR set to: 0
  1374  000A8E  0E24               	movlw	36
  1375  000A90  EC38  F01E         	call	_GETxAPIxVAL
  1376  000A94  0100               	movlb	0	; () banked
  1377  000A96  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1378  000A98  0100               	movlb	0	; () banked
  1379  000A9A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1380  000A9C  A4D8               	btfss	status,2,c
  1381  000A9E  D057               	goto	l8512
  1382                           
  1383                           ; BSR set to: 0
  1384  000AA0  0E25               	movlw	37
  1385  000AA2  EC38  F01E         	call	_GETxAPIxVAL
  1386  000AA6  0100               	movlb	0	; () banked
  1387  000AA8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1388  000AAA  0100               	movlb	0	; () banked
  1389  000AAC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1390  000AAE  A4D8               	btfss	status,2,c
  1391  000AB0  D04E               	goto	l8512
  1392                           
  1393                           ; BSR set to: 0
  1394  000AB2  0E26               	movlw	38
  1395  000AB4  EC38  F01E         	call	_GETxAPIxVAL
  1396  000AB8  0100               	movlb	0	; () banked
  1397  000ABA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1398  000ABC  0100               	movlb	0	; () banked
  1399  000ABE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1400  000AC0  A4D8               	btfss	status,2,c
  1401  000AC2  D045               	goto	l8512
  1402                           
  1403                           ; BSR set to: 0
  1404  000AC4  0E22               	movlw	34
  1405  000AC6  EC38  F01E         	call	_GETxAPIxVAL
  1406  000ACA  0100               	movlb	0	; () banked
  1407  000ACC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1408  000ACE  0100               	movlb	0	; () banked
  1409  000AD0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1410  000AD2  A4D8               	btfss	status,2,c
  1411  000AD4  D03C               	goto	l8512
  1412                           
  1413                           ; BSR set to: 0
  1414  000AD6  0E20               	movlw	32
  1415  000AD8  EC38  F01E         	call	_GETxAPIxVAL
  1416  000ADC  0100               	movlb	0	; () banked
  1417  000ADE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1418  000AE0  0100               	movlb	0	; () banked
  1419  000AE2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1420  000AE4  A4D8               	btfss	status,2,c
  1421  000AE6  D033               	goto	l8512
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;State_Mchn.c: 136: {
  1425                           ;State_Mchn.c: 137: if(GETxAPIxVAL(0x27) == GETxAPIxVAL(0x28))
  1426  000AE8  0E27               	movlw	39
  1427  000AEA  EC38  F01E         	call	_GETxAPIxVAL
  1428  000AEE  C060  F08B         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1429  000AF2  C061  F08C         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1430  000AF6  0E28               	movlw	40
  1431  000AF8  EC38  F01E         	call	_GETxAPIxVAL
  1432  000AFC  0100               	movlb	0	; () banked
  1433  000AFE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1434  000B00  0100               	movlb	0	; () banked
  1435  000B02  198B               	xorwf	??_Update_StateMchn& (0+255),w,b
  1436  000B04  E10C               	bnz	l8508
  1437  000B06  0100               	movlb	0	; () banked
  1438  000B08  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1439  000B0A  0100               	movlb	0	; () banked
  1440  000B0C  198C               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1441  000B0E  A4D8               	btfss	status,2,c
  1442  000B10  D006               	goto	l8508
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;State_Mchn.c: 138: {
  1446                           ;State_Mchn.c: 139: Red_Led(1);
  1447  000B12  0E01               	movlw	1
  1448  000B14  ECFA  F01B         	call	_Red_Led
  1449                           
  1450                           ;State_Mchn.c: 140: Switch_Init = 1;
  1451  000B18  0E01               	movlw	1
  1452  000B1A  0100               	movlb	0	; () banked
  1453  000B1C  6FA7               	movwf	_Switch_Init& (0+255),b
  1454  000B1E                     l8508:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;State_Mchn.c: 141: }
  1458                           ;State_Mchn.c: 142: if(GETxAPIxVAL(0x27) != GETxAPIxVAL(0x28))
  1459  000B1E  0E27               	movlw	39
  1460  000B20  EC38  F01E         	call	_GETxAPIxVAL
  1461  000B24  C060  F08B         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1462  000B28  C061  F08C         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1463  000B2C  0E28               	movlw	40
  1464  000B2E  EC38  F01E         	call	_GETxAPIxVAL
  1465  000B32  0100               	movlb	0	; () banked
  1466  000B34  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1467  000B36  0100               	movlb	0	; () banked
  1468  000B38  198B               	xorwf	??_Update_StateMchn& (0+255),w,b
  1469  000B3A  E106               	bnz	u7790
  1470  000B3C  0100               	movlb	0	; () banked
  1471  000B3E  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1472  000B40  0100               	movlb	0	; () banked
  1473  000B42  198C               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1474  000B44  B4D8               	btfsc	status,2,c
  1475  000B46  D003               	goto	l8512
  1476  000B48                     u7790:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;State_Mchn.c: 143: {
  1480                           ;State_Mchn.c: 144: Switch_Init = 5;
  1481  000B48  0E05               	movlw	5
  1482  000B4A  0100               	movlb	0	; () banked
  1483  000B4C  6FA7               	movwf	_Switch_Init& (0+255),b
  1484  000B4E                     l8512:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;State_Mchn.c: 145: }
  1488                           ;State_Mchn.c: 146: }
  1489                           ;State_Mchn.c: 147: Green_Led(2);
  1490  000B4E  0E02               	movlw	2
  1491  000B50  EC3A  F01C         	call	_Green_Led
  1492                           
  1493                           ;State_Mchn.c: 148: break;
  1494  000B54  EF2A  F00C         	goto	l9160
  1495  000B58                     l8514:
  1496  000B58  0E28               	movlw	40
  1497  000B5A  EC38  F01E         	call	_GETxAPIxVAL
  1498  000B5E  0E09               	movlw	9
  1499  000B60  0100               	movlb	0	; () banked
  1500  000B62  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1501  000B64  0100               	movlb	0	; () banked
  1502  000B66  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1503  000B68  B4D8               	btfsc	status,2,c
  1504  000B6A  D003               	goto	l8518
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;State_Mchn.c: 151: {
  1508                           ;State_Mchn.c: 152: Switch_Init = 6;
  1509  000B6C  0E06               	movlw	6
  1510  000B6E  0100               	movlb	0	; () banked
  1511  000B70  6FA7               	movwf	_Switch_Init& (0+255),b
  1512  000B72                     l8518:
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;State_Mchn.c: 153: }
  1516                           ;State_Mchn.c: 154: if(GETxAPIxVAL(0x28) == 9)
  1517  000B72  0E28               	movlw	40
  1518  000B74  EC38  F01E         	call	_GETxAPIxVAL
  1519  000B78  0E09               	movlw	9
  1520  000B7A  0100               	movlb	0	; () banked
  1521  000B7C  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1522  000B7E  0100               	movlb	0	; () banked
  1523  000B80  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1524  000B82  A4D8               	btfss	status,2,c
  1525  000B84  EF2A  F00C         	goto	l9160
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;State_Mchn.c: 155: {
  1529                           ;State_Mchn.c: 156: Switch_Init = 9;
  1530  000B88  0E09               	movlw	9
  1531  000B8A  D670               	goto	L1
  1532  000B8C                     l8522:
  1533                           
  1534                           ; BSR set to: 0
  1535  000B8C  0E08               	movlw	8
  1536  000B8E  D66E               	goto	L1
  1537  000B90                     l8524:
  1538                           
  1539                           ; BSR set to: 0
  1540  000B90  0E20               	movlw	32
  1541  000B92  EC38  F01E         	call	_GETxAPIxVAL
  1542  000B96  0100               	movlb	0	; () banked
  1543  000B98  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1544  000B9A  0100               	movlb	0	; () banked
  1545  000B9C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1546  000B9E  B4D8               	btfsc	status,2,c
  1547  000BA0  D009               	goto	l8528
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;State_Mchn.c: 164: {
  1551                           ;State_Mchn.c: 165: Switch_Main = 1;
  1552  000BA2  0E01               	movlw	1
  1553  000BA4  0100               	movlb	0	; () banked
  1554  000BA6  6FA9               	movwf	_Switch_Main& (0+255),b
  1555                           
  1556                           ;State_Mchn.c: 166: Switch_Init = 0;
  1557  000BA8  0E00               	movlw	0
  1558  000BAA  0100               	movlb	0	; () banked
  1559  000BAC  6FA7               	movwf	_Switch_Init& (0+255),b
  1560                           
  1561                           ;State_Mchn.c: 167: Stop_Program = 0;
  1562  000BAE  0E00               	movlw	0
  1563  000BB0  0100               	movlb	0	; () banked
  1564  000BB2  6FA1               	movwf	_Stop_Program& (0+255),b
  1565  000BB4                     l8528:
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;State_Mchn.c: 168: }
  1569                           ;State_Mchn.c: 169: Green_Led(3);
  1570  000BB4  0E03               	movlw	3
  1571  000BB6  EC3A  F01C         	call	_Green_Led
  1572                           
  1573                           ;State_Mchn.c: 170: Red_Led(0);
  1574  000BBA  0E00               	movlw	0
  1575  000BBC  ECFA  F01B         	call	_Red_Led
  1576                           
  1577                           ;State_Mchn.c: 171: break;
  1578  000BC0  EF2A  F00C         	goto	l9160
  1579  000BC4                     l8532:
  1580  000BC4  0E27               	movlw	39
  1581  000BC6  EC38  F01E         	call	_GETxAPIxVAL
  1582  000BCA  0E04               	movlw	4
  1583  000BCC  0100               	movlb	0	; () banked
  1584  000BCE  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1585  000BD0  0100               	movlb	0	; () banked
  1586  000BD2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1587  000BD4  B4D8               	btfsc	status,2,c
  1588  000BD6  D015               	goto	l8550
  1589  000BD8  D02B               	goto	l8552
  1590  000BDA                     l8536:
  1591                           
  1592                           ; BSR set to: 0
  1593  000BDA  0E01               	movlw	1
  1594  000BDC  D005               	goto	L4
  1595  000BDE                     l8538:
  1596                           
  1597                           ; BSR set to: 0
  1598  000BDE  0E05               	movlw	5
  1599  000BE0  D003               	goto	L4
  1600  000BE2                     l8540:
  1601                           
  1602                           ; BSR set to: 0
  1603  000BE2  0E02               	movlw	2
  1604  000BE4  D001               	goto	L4
  1605  000BE6                     l8542:
  1606                           
  1607                           ; BSR set to: 0
  1608  000BE6  0E03               	movlw	3
  1609  000BE8                     L4:
  1610  000BE8  0100               	movlb	0	; () banked
  1611  000BEA  6FAB               	movwf	_Switch_Program& (0+255),b
  1612                           
  1613                           ;State_Mchn.c: 187: Switch_Init = 7;
  1614  000BEC  0E07               	movlw	7
  1615  000BEE  0100               	movlb	0	; () banked
  1616  000BF0  6FA7               	movwf	_Switch_Init& (0+255),b
  1617                           
  1618                           ;State_Mchn.c: 188: break;
  1619  000BF2  D01E               	goto	l8552
  1620  000BF4                     l8544:
  1621                           
  1622                           ; BSR set to: 0
  1623  000BF4  0E08               	movlw	8
  1624  000BF6  0100               	movlb	0	; () banked
  1625  000BF8  6FA7               	movwf	_Switch_Init& (0+255),b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;State_Mchn.c: 190: Red_Led(1);
  1629  000BFA  0E01               	movlw	1
  1630  000BFC  ECFA  F01B         	call	_Red_Led
  1631                           
  1632                           ;State_Mchn.c: 192: }
  1633                           
  1634                           ;State_Mchn.c: 191: break;
  1635  000C00  D017               	goto	l8552
  1636  000C02                     l8550:
  1637  000C02  0E28               	movlw	40
  1638  000C04  EC38  F01E         	call	_GETxAPIxVAL
  1639                           
  1640                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1641                           ; Switch size 1, requested type "space"
  1642                           ; Number of cases is 1, Range of values is 0 to 0
  1643                           ; switch strategies available:
  1644                           ; Name         Instructions Cycles
  1645                           ; simple_byte            4     3 (average)
  1646                           ;	Chosen strategy is simple_byte
  1647  000C08  0100               	movlb	0	; () banked
  1648  000C0A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1649  000C0C  0A00               	xorlw	0	; case 0
  1650  000C0E  A4D8               	btfss	status,2,c
  1651  000C10  D7F1               	goto	l8544
  1652                           
  1653                           ; BSR set to: 0
  1654                           ; Switch size 1, requested type "space"
  1655                           ; Number of cases is 4, Range of values is 0 to 3
  1656                           ; switch strategies available:
  1657                           ; Name         Instructions Cycles
  1658                           ; simple_byte           13     7 (average)
  1659                           ;	Chosen strategy is simple_byte
  1660  000C12  0100               	movlb	0	; () banked
  1661  000C14  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1662  000C16  0A00               	xorlw	0	; case 0
  1663  000C18  B4D8               	btfsc	status,2,c
  1664  000C1A  D7DF               	goto	l8536
  1665  000C1C  0A01               	xorlw	1	; case 1
  1666  000C1E  B4D8               	btfsc	status,2,c
  1667  000C20  D7DE               	goto	l8538
  1668  000C22  0A03               	xorlw	3	; case 2
  1669  000C24  B4D8               	btfsc	status,2,c
  1670  000C26  D7DD               	goto	l8540
  1671  000C28  0A01               	xorlw	1	; case 3
  1672  000C2A  B4D8               	btfsc	status,2,c
  1673  000C2C  D7DC               	goto	l8542
  1674  000C2E  D7E2               	goto	l8544
  1675  000C30                     l8552:
  1676                           
  1677                           ;State_Mchn.c: 193: }
  1678                           ;State_Mchn.c: 194: if(GETxAPIxVAL(0x28) == 4)
  1679  000C30  0E28               	movlw	40
  1680  000C32  EC38  F01E         	call	_GETxAPIxVAL
  1681  000C36  0E04               	movlw	4
  1682  000C38  0100               	movlb	0	; () banked
  1683  000C3A  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1684  000C3C  0100               	movlb	0	; () banked
  1685  000C3E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1686  000C40  B4D8               	btfsc	status,2,c
  1687  000C42  D015               	goto	l8570
  1688  000C44  D02B               	goto	l8572
  1689  000C46                     l8556:
  1690                           
  1691                           ; BSR set to: 0
  1692  000C46  0E01               	movlw	1
  1693  000C48  D005               	goto	L7
  1694  000C4A                     l8558:
  1695                           
  1696                           ; BSR set to: 0
  1697  000C4A  0E05               	movlw	5
  1698  000C4C  D003               	goto	L7
  1699  000C4E                     l8560:
  1700                           
  1701                           ; BSR set to: 0
  1702  000C4E  0E02               	movlw	2
  1703  000C50  D001               	goto	L7
  1704  000C52                     l8562:
  1705                           
  1706                           ; BSR set to: 0
  1707  000C52  0E03               	movlw	3
  1708  000C54                     L7:
  1709  000C54  0100               	movlb	0	; () banked
  1710  000C56  6FAB               	movwf	_Switch_Program& (0+255),b
  1711                           
  1712                           ;State_Mchn.c: 208: Switch_Init = 7;
  1713  000C58  0E07               	movlw	7
  1714  000C5A  0100               	movlb	0	; () banked
  1715  000C5C  6FA7               	movwf	_Switch_Init& (0+255),b
  1716                           
  1717                           ;State_Mchn.c: 209: break;
  1718  000C5E  D01E               	goto	l8572
  1719  000C60                     l8564:
  1720                           
  1721                           ; BSR set to: 0
  1722  000C60  0E08               	movlw	8
  1723  000C62  0100               	movlb	0	; () banked
  1724  000C64  6FA7               	movwf	_Switch_Init& (0+255),b
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;State_Mchn.c: 211: Red_Led(1);
  1728  000C66  0E01               	movlw	1
  1729  000C68  ECFA  F01B         	call	_Red_Led
  1730                           
  1731                           ;State_Mchn.c: 213: }
  1732                           
  1733                           ;State_Mchn.c: 212: break;
  1734  000C6C  D017               	goto	l8572
  1735  000C6E                     l8570:
  1736  000C6E  0E27               	movlw	39
  1737  000C70  EC38  F01E         	call	_GETxAPIxVAL
  1738                           
  1739                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1740                           ; Switch size 1, requested type "space"
  1741                           ; Number of cases is 1, Range of values is 0 to 0
  1742                           ; switch strategies available:
  1743                           ; Name         Instructions Cycles
  1744                           ; simple_byte            4     3 (average)
  1745                           ;	Chosen strategy is simple_byte
  1746  000C74  0100               	movlb	0	; () banked
  1747  000C76  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1748  000C78  0A00               	xorlw	0	; case 0
  1749  000C7A  A4D8               	btfss	status,2,c
  1750  000C7C  D7F1               	goto	l8564
  1751                           
  1752                           ; BSR set to: 0
  1753                           ; Switch size 1, requested type "space"
  1754                           ; Number of cases is 4, Range of values is 0 to 3
  1755                           ; switch strategies available:
  1756                           ; Name         Instructions Cycles
  1757                           ; simple_byte           13     7 (average)
  1758                           ;	Chosen strategy is simple_byte
  1759  000C7E  0100               	movlb	0	; () banked
  1760  000C80  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1761  000C82  0A00               	xorlw	0	; case 0
  1762  000C84  B4D8               	btfsc	status,2,c
  1763  000C86  D7DF               	goto	l8556
  1764  000C88  0A01               	xorlw	1	; case 1
  1765  000C8A  B4D8               	btfsc	status,2,c
  1766  000C8C  D7DE               	goto	l8558
  1767  000C8E  0A03               	xorlw	3	; case 2
  1768  000C90  B4D8               	btfsc	status,2,c
  1769  000C92  D7DD               	goto	l8560
  1770  000C94  0A01               	xorlw	1	; case 3
  1771  000C96  B4D8               	btfsc	status,2,c
  1772  000C98  D7DC               	goto	l8562
  1773  000C9A  D7E2               	goto	l8564
  1774  000C9C                     l8572:
  1775                           
  1776                           ;State_Mchn.c: 214: }
  1777                           ;State_Mchn.c: 215: if((GETxAPIxVAL(0x27) != 4) && (GETxAPIxVAL(0x28) != 4))
  1778  000C9C  0E27               	movlw	39
  1779  000C9E  EC38  F01E         	call	_GETxAPIxVAL
  1780  000CA2  0E04               	movlw	4
  1781  000CA4  0100               	movlb	0	; () banked
  1782  000CA6  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1783  000CA8  0100               	movlb	0	; () banked
  1784  000CAA  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1785  000CAC  B4D8               	btfsc	status,2,c
  1786  000CAE  EF2A  F00C         	goto	l9160
  1787                           
  1788                           ; BSR set to: 0
  1789  000CB2  0E28               	movlw	40
  1790  000CB4  EC38  F01E         	call	_GETxAPIxVAL
  1791  000CB8  0E04               	movlw	4
  1792  000CBA  0100               	movlb	0	; () banked
  1793  000CBC  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1794  000CBE  0100               	movlb	0	; () banked
  1795  000CC0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1796  000CC2  A4D8               	btfss	status,2,c
  1797  000CC4  D097               	goto	l8648
  1798  000CC6  EF2A  F00C         	goto	l9160
  1799  000CCA                     l8580:
  1800                           
  1801                           ; BSR set to: 0
  1802  000CCA  0E01               	movlw	1
  1803  000CCC  D066               	goto	L34
  1804  000CCE                     l8582:
  1805                           
  1806                           ; BSR set to: 0
  1807  000CCE  0E02               	movlw	2
  1808  000CD0  D064               	goto	L34
  1809  000CD2                     l8584:
  1810                           
  1811                           ; BSR set to: 0
  1812  000CD2  0E04               	movlw	4
  1813  000CD4  D062               	goto	L34
  1814  000CD6                     l8586:
  1815                           
  1816                           ; BSR set to: 0
  1817  000CD6  0E08               	movlw	8
  1818  000CD8  0100               	movlb	0	; () banked
  1819  000CDA  6FA7               	movwf	_Switch_Init& (0+255),b
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;State_Mchn.c: 233: Red_Led(1);
  1823  000CDC  0E01               	movlw	1
  1824  000CDE  ECFA  F01B         	call	_Red_Led
  1825                           
  1826                           ;State_Mchn.c: 235: }
  1827                           
  1828                           ;State_Mchn.c: 234: break;
  1829  000CE2  EF2A  F00C         	goto	l9160
  1830  000CE6                     l8592:
  1831  000CE6  0E28               	movlw	40
  1832  000CE8  EC38  F01E         	call	_GETxAPIxVAL
  1833                           
  1834                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1835                           ; Switch size 1, requested type "space"
  1836                           ; Number of cases is 1, Range of values is 0 to 0
  1837                           ; switch strategies available:
  1838                           ; Name         Instructions Cycles
  1839                           ; simple_byte            4     3 (average)
  1840                           ;	Chosen strategy is simple_byte
  1841  000CEC  0100               	movlb	0	; () banked
  1842  000CEE  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1843  000CF0  0A00               	xorlw	0	; case 0
  1844  000CF2  A4D8               	btfss	status,2,c
  1845  000CF4  D7F0               	goto	l8586
  1846                           
  1847                           ; BSR set to: 0
  1848                           ; Switch size 1, requested type "space"
  1849                           ; Number of cases is 4, Range of values is 0 to 3
  1850                           ; switch strategies available:
  1851                           ; Name         Instructions Cycles
  1852                           ; simple_byte           13     7 (average)
  1853                           ;	Chosen strategy is simple_byte
  1854  000CF6  0100               	movlb	0	; () banked
  1855  000CF8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1856  000CFA  0A00               	xorlw	0	; case 0
  1857  000CFC  B4D8               	btfsc	status,2,c
  1858  000CFE  D051               	goto	l8632
  1859  000D00  0A01               	xorlw	1	; case 1
  1860  000D02  B4D8               	btfsc	status,2,c
  1861  000D04  D7E2               	goto	l8580
  1862  000D06  0A03               	xorlw	3	; case 2
  1863  000D08  B4D8               	btfsc	status,2,c
  1864  000D0A  D7E1               	goto	l8582
  1865  000D0C  0A01               	xorlw	1	; case 3
  1866  000D0E  B4D8               	btfsc	status,2,c
  1867  000D10  D7E0               	goto	l8584
  1868  000D12  D7E1               	goto	l8586
  1869  000D14                     l8598:
  1870                           
  1871                           ; BSR set to: 0
  1872  000D14  0E00               	movlw	0
  1873  000D16  D041               	goto	L34
  1874  000D18                     l8602:
  1875                           
  1876                           ; BSR set to: 0
  1877  000D18  0E08               	movlw	8
  1878  000D1A  0100               	movlb	0	; () banked
  1879  000D1C  6FA7               	movwf	_Switch_Init& (0+255),b
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;State_Mchn.c: 251: Red_Led(1);
  1883  000D1E  0E01               	movlw	1
  1884  000D20  ECFA  F01B         	call	_Red_Led
  1885                           
  1886                           ;State_Mchn.c: 253: }
  1887                           
  1888                           ;State_Mchn.c: 252: break;
  1889  000D24  EF2A  F00C         	goto	l9160
  1890  000D28                     l8608:
  1891  000D28  0E28               	movlw	40
  1892  000D2A  EC38  F01E         	call	_GETxAPIxVAL
  1893                           
  1894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1895                           ; Switch size 1, requested type "space"
  1896                           ; Number of cases is 1, Range of values is 0 to 0
  1897                           ; switch strategies available:
  1898                           ; Name         Instructions Cycles
  1899                           ; simple_byte            4     3 (average)
  1900                           ;	Chosen strategy is simple_byte
  1901  000D2E  0100               	movlb	0	; () banked
  1902  000D30  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1903  000D32  0A00               	xorlw	0	; case 0
  1904  000D34  A4D8               	btfss	status,2,c
  1905  000D36  D7F0               	goto	l8602
  1906                           
  1907                           ; BSR set to: 0
  1908                           ; Switch size 1, requested type "space"
  1909                           ; Number of cases is 4, Range of values is 0 to 3
  1910                           ; switch strategies available:
  1911                           ; Name         Instructions Cycles
  1912                           ; simple_byte           13     7 (average)
  1913                           ;	Chosen strategy is simple_byte
  1914  000D38  0100               	movlb	0	; () banked
  1915  000D3A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1916  000D3C  0A00               	xorlw	0	; case 0
  1917  000D3E  B4D8               	btfsc	status,2,c
  1918  000D40  D7C4               	goto	l8580
  1919  000D42  0A01               	xorlw	1	; case 1
  1920  000D44  B4D8               	btfsc	status,2,c
  1921  000D46  D02D               	goto	l8632
  1922  000D48  0A03               	xorlw	3	; case 2
  1923  000D4A  B4D8               	btfsc	status,2,c
  1924  000D4C  D7E3               	goto	l8598
  1925  000D4E  0A01               	xorlw	1	; case 3
  1926  000D50  B4D8               	btfsc	status,2,c
  1927  000D52  D020               	goto	l8628
  1928  000D54  D7E1               	goto	l8602
  1929  000D56                     l8618:
  1930                           
  1931                           ; BSR set to: 0
  1932  000D56  0E08               	movlw	8
  1933  000D58  0100               	movlb	0	; () banked
  1934  000D5A  6FA7               	movwf	_Switch_Init& (0+255),b
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;State_Mchn.c: 269: Red_Led(1);
  1938  000D5C  0E01               	movlw	1
  1939  000D5E  ECFA  F01B         	call	_Red_Led
  1940                           
  1941                           ;State_Mchn.c: 271: }
  1942                           
  1943                           ;State_Mchn.c: 270: break;
  1944  000D62  EF2A  F00C         	goto	l9160
  1945  000D66                     l8624:
  1946  000D66  0E28               	movlw	40
  1947  000D68  EC38  F01E         	call	_GETxAPIxVAL
  1948                           
  1949                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1950                           ; Switch size 1, requested type "space"
  1951                           ; Number of cases is 1, Range of values is 0 to 0
  1952                           ; switch strategies available:
  1953                           ; Name         Instructions Cycles
  1954                           ; simple_byte            4     3 (average)
  1955                           ;	Chosen strategy is simple_byte
  1956  000D6C  0100               	movlb	0	; () banked
  1957  000D6E  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1958  000D70  0A00               	xorlw	0	; case 0
  1959  000D72  A4D8               	btfss	status,2,c
  1960  000D74  D7F0               	goto	l8618
  1961                           
  1962                           ; BSR set to: 0
  1963                           ; Switch size 1, requested type "space"
  1964                           ; Number of cases is 4, Range of values is 0 to 3
  1965                           ; switch strategies available:
  1966                           ; Name         Instructions Cycles
  1967                           ; simple_byte           13     7 (average)
  1968                           ;	Chosen strategy is simple_byte
  1969  000D76  0100               	movlb	0	; () banked
  1970  000D78  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1971  000D7A  0A00               	xorlw	0	; case 0
  1972  000D7C  B4D8               	btfsc	status,2,c
  1973  000D7E  D7A7               	goto	l8582
  1974  000D80  0A01               	xorlw	1	; case 1
  1975  000D82  B4D8               	btfsc	status,2,c
  1976  000D84  D7C7               	goto	l8598
  1977  000D86  0A03               	xorlw	3	; case 2
  1978  000D88  B4D8               	btfsc	status,2,c
  1979  000D8A  D00B               	goto	l8632
  1980  000D8C  0A01               	xorlw	1	; case 3
  1981  000D8E  B4D8               	btfsc	status,2,c
  1982  000D90  D003               	goto	l8630
  1983  000D92  D7E1               	goto	l8618
  1984  000D94                     l8628:
  1985                           
  1986                           ; BSR set to: 0
  1987  000D94  0E06               	movlw	6
  1988  000D96  D001               	goto	L34
  1989  000D98                     l8630:
  1990                           
  1991                           ; BSR set to: 0
  1992  000D98  0E03               	movlw	3
  1993  000D9A                     L34:
  1994  000D9A  0100               	movlb	0	; () banked
  1995  000D9C  6FAB               	movwf	_Switch_Program& (0+255),b
  1996                           
  1997                           ;State_Mchn.c: 282: Switch_Init = 7;
  1998  000D9E  0E07               	movlw	7
  1999  000DA0  D565               	goto	L1
  2000  000DA2                     l8632:
  2001                           
  2002                           ; BSR set to: 0
  2003  000DA2  0E00               	movlw	0
  2004  000DA4  D563               	goto	L1
  2005  000DA6                     l8634:
  2006                           
  2007                           ; BSR set to: 0
  2008  000DA6  0E08               	movlw	8
  2009  000DA8  0100               	movlb	0	; () banked
  2010  000DAA  6FA7               	movwf	_Switch_Init& (0+255),b
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;State_Mchn.c: 287: Red_Led(1);
  2014  000DAC  0E01               	movlw	1
  2015  000DAE  ECFA  F01B         	call	_Red_Led
  2016                           
  2017                           ;State_Mchn.c: 289: }
  2018                           
  2019                           ;State_Mchn.c: 288: break;
  2020  000DB2  EF2A  F00C         	goto	l9160
  2021  000DB6                     l8640:
  2022  000DB6  0E28               	movlw	40
  2023  000DB8  EC38  F01E         	call	_GETxAPIxVAL
  2024                           
  2025                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2026                           ; Switch size 1, requested type "space"
  2027                           ; Number of cases is 1, Range of values is 0 to 0
  2028                           ; switch strategies available:
  2029                           ; Name         Instructions Cycles
  2030                           ; simple_byte            4     3 (average)
  2031                           ;	Chosen strategy is simple_byte
  2032  000DBC  0100               	movlb	0	; () banked
  2033  000DBE  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2034  000DC0  0A00               	xorlw	0	; case 0
  2035  000DC2  A4D8               	btfss	status,2,c
  2036  000DC4  D7F0               	goto	l8634
  2037                           
  2038                           ; BSR set to: 0
  2039                           ; Switch size 1, requested type "space"
  2040                           ; Number of cases is 4, Range of values is 0 to 3
  2041                           ; switch strategies available:
  2042                           ; Name         Instructions Cycles
  2043                           ; simple_byte           13     7 (average)
  2044                           ;	Chosen strategy is simple_byte
  2045  000DC6  0100               	movlb	0	; () banked
  2046  000DC8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2047  000DCA  0A00               	xorlw	0	; case 0
  2048  000DCC  B4D8               	btfsc	status,2,c
  2049  000DCE  D781               	goto	l8584
  2050  000DD0  0A01               	xorlw	1	; case 1
  2051  000DD2  B4D8               	btfsc	status,2,c
  2052  000DD4  D7DF               	goto	l8628
  2053  000DD6  0A03               	xorlw	3	; case 2
  2054  000DD8  B4D8               	btfsc	status,2,c
  2055  000DDA  D7DE               	goto	l8630
  2056  000DDC  0A01               	xorlw	1	; case 3
  2057  000DDE  B4D8               	btfsc	status,2,c
  2058  000DE0  D7E0               	goto	l8632
  2059  000DE2  D7E1               	goto	l8634
  2060  000DE4                     l8642:
  2061                           
  2062                           ; BSR set to: 0
  2063  000DE4  0E08               	movlw	8
  2064  000DE6  0100               	movlb	0	; () banked
  2065  000DE8  6FA7               	movwf	_Switch_Init& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;State_Mchn.c: 292: Red_Led(1);
  2069  000DEA  0E01               	movlw	1
  2070  000DEC  ECFA  F01B         	call	_Red_Led
  2071                           
  2072                           ;State_Mchn.c: 294: }
  2073                           
  2074                           ;State_Mchn.c: 293: break;
  2075  000DF0  EF2A  F00C         	goto	l9160
  2076  000DF4                     l8648:
  2077  000DF4  0E27               	movlw	39
  2078  000DF6  EC38  F01E         	call	_GETxAPIxVAL
  2079                           
  2080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2081                           ; Switch size 1, requested type "space"
  2082                           ; Number of cases is 1, Range of values is 0 to 0
  2083                           ; switch strategies available:
  2084                           ; Name         Instructions Cycles
  2085                           ; simple_byte            4     3 (average)
  2086                           ;	Chosen strategy is simple_byte
  2087  000DFA  0100               	movlb	0	; () banked
  2088  000DFC  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2089  000DFE  0A00               	xorlw	0	; case 0
  2090  000E00  A4D8               	btfss	status,2,c
  2091  000E02  D7F0               	goto	l8642
  2092                           
  2093                           ; BSR set to: 0
  2094                           ; Switch size 1, requested type "space"
  2095                           ; Number of cases is 4, Range of values is 0 to 3
  2096                           ; switch strategies available:
  2097                           ; Name         Instructions Cycles
  2098                           ; simple_byte           13     7 (average)
  2099                           ;	Chosen strategy is simple_byte
  2100  000E04  0100               	movlb	0	; () banked
  2101  000E06  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2102  000E08  0A00               	xorlw	0	; case 0
  2103  000E0A  B4D8               	btfsc	status,2,c
  2104  000E0C  D76C               	goto	l8592
  2105  000E0E  0A01               	xorlw	1	; case 1
  2106  000E10  B4D8               	btfsc	status,2,c
  2107  000E12  D78A               	goto	l8608
  2108  000E14  0A03               	xorlw	3	; case 2
  2109  000E16  B4D8               	btfsc	status,2,c
  2110  000E18  D7A6               	goto	l8624
  2111  000E1A  0A01               	xorlw	1	; case 3
  2112  000E1C  B4D8               	btfsc	status,2,c
  2113  000E1E  D7CB               	goto	l8640
  2114  000E20  D7E1               	goto	l8642
  2115  000E22                     l8650:
  2116                           
  2117                           ; BSR set to: 0
  2118  000E22  0E0B               	movlw	11
  2119  000E24  D523               	goto	L1
  2120  000E26                     l8652:
  2121                           
  2122                           ; BSR set to: 0
  2123  000E26  0E20               	movlw	32
  2124  000E28  EC38  F01E         	call	_GETxAPIxVAL
  2125  000E2C  0100               	movlb	0	; () banked
  2126  000E2E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2127  000E30  0100               	movlb	0	; () banked
  2128  000E32  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2129  000E34  B4D8               	btfsc	status,2,c
  2130  000E36  D009               	goto	l8656
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;State_Mchn.c: 302: {
  2134                           ;State_Mchn.c: 303: Switch_Main = 2;
  2135  000E38  0E02               	movlw	2
  2136  000E3A  0100               	movlb	0	; () banked
  2137  000E3C  6FA9               	movwf	_Switch_Main& (0+255),b
  2138                           
  2139                           ;State_Mchn.c: 304: Switch_Init = 0;
  2140  000E3E  0E00               	movlw	0
  2141  000E40  0100               	movlb	0	; () banked
  2142  000E42  6FA7               	movwf	_Switch_Init& (0+255),b
  2143                           
  2144                           ;State_Mchn.c: 305: Stop_Program = 0;
  2145  000E44  0E00               	movlw	0
  2146  000E46  0100               	movlb	0	; () banked
  2147  000E48  6FA1               	movwf	_Stop_Program& (0+255),b
  2148  000E4A                     l8656:
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;State_Mchn.c: 306: }
  2152                           ;State_Mchn.c: 307: Green_Led(3);
  2153  000E4A  0E03               	movlw	3
  2154  000E4C  EC3A  F01C         	call	_Green_Led
  2155                           
  2156                           ;State_Mchn.c: 308: Red_Led(0);
  2157  000E50  0E00               	movlw	0
  2158  000E52  ECFA  F01B         	call	_Red_Led
  2159                           
  2160                           ;State_Mchn.c: 309: break;
  2161  000E56  EF2A  F00C         	goto	l9160
  2162  000E5A                     l8660:
  2163  000E5A  0E27               	movlw	39
  2164  000E5C  EC38  F01E         	call	_GETxAPIxVAL
  2165  000E60  0E04               	movlw	4
  2166  000E62  0100               	movlb	0	; () banked
  2167  000E64  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2168  000E66  0100               	movlb	0	; () banked
  2169  000E68  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2170  000E6A  A4D8               	btfss	status,2,c
  2171  000E6C  D013               	goto	l8678
  2172  000E6E                     l8662:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;State_Mchn.c: 312: {
  2176                           ;State_Mchn.c: 313: Switch_Program = 0;
  2177  000E6E  0E00               	movlw	0
  2178  000E70  D005               	goto	L38
  2179  000E72                     l8664:
  2180                           
  2181                           ; BSR set to: 0
  2182  000E72  0E01               	movlw	1
  2183  000E74  D003               	goto	L38
  2184  000E76                     l8666:
  2185                           
  2186                           ; BSR set to: 0
  2187  000E76  0E03               	movlw	3
  2188  000E78  D001               	goto	L38
  2189  000E7A                     l8670:
  2190                           
  2191                           ; BSR set to: 0
  2192  000E7A  0E02               	movlw	2
  2193  000E7C                     L38:
  2194  000E7C  0100               	movlb	0	; () banked
  2195  000E7E  6FAB               	movwf	_Switch_Program& (0+255),b
  2196  000E80  0E0A               	movlw	10
  2197  000E82  D4F4               	goto	L1
  2198  000E84                     l8672:
  2199                           
  2200                           ; BSR set to: 0
  2201  000E84  0E0B               	movlw	11
  2202  000E86  0100               	movlb	0	; () banked
  2203  000E88  6FA7               	movwf	_Switch_Init& (0+255),b
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;State_Mchn.c: 323: Red_Led(1);
  2207  000E8A  0E01               	movlw	1
  2208  000E8C  ECFA  F01B         	call	_Red_Led
  2209                           
  2210                           ;State_Mchn.c: 325: }
  2211                           
  2212                           ;State_Mchn.c: 324: break;
  2213  000E90  EF2A  F00C         	goto	l9160
  2214  000E94                     l8678:
  2215  000E94  0E27               	movlw	39
  2216  000E96  EC38  F01E         	call	_GETxAPIxVAL
  2217                           
  2218                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2219                           ; Switch size 1, requested type "space"
  2220                           ; Number of cases is 1, Range of values is 0 to 0
  2221                           ; switch strategies available:
  2222                           ; Name         Instructions Cycles
  2223                           ; simple_byte            4     3 (average)
  2224                           ;	Chosen strategy is simple_byte
  2225  000E9A  0100               	movlb	0	; () banked
  2226  000E9C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2227  000E9E  0A00               	xorlw	0	; case 0
  2228  000EA0  A4D8               	btfss	status,2,c
  2229  000EA2  D7F0               	goto	l8672
  2230                           
  2231                           ; BSR set to: 0
  2232                           ; Switch size 1, requested type "space"
  2233                           ; Number of cases is 4, Range of values is 0 to 3
  2234                           ; switch strategies available:
  2235                           ; Name         Instructions Cycles
  2236                           ; simple_byte           13     7 (average)
  2237                           ;	Chosen strategy is simple_byte
  2238  000EA4  0100               	movlb	0	; () banked
  2239  000EA6  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2240  000EA8  0A00               	xorlw	0	; case 0
  2241  000EAA  B4D8               	btfsc	status,2,c
  2242  000EAC  D7E2               	goto	l8664
  2243  000EAE  0A01               	xorlw	1	; case 1
  2244  000EB0  B4D8               	btfsc	status,2,c
  2245  000EB2  D7E1               	goto	l8666
  2246  000EB4  0A03               	xorlw	3	; case 2
  2247  000EB6  B4D8               	btfsc	status,2,c
  2248  000EB8  D7DA               	goto	l8662
  2249  000EBA  0A01               	xorlw	1	; case 3
  2250  000EBC  B4D8               	btfsc	status,2,c
  2251  000EBE  D7DD               	goto	l8670
  2252  000EC0  D7E1               	goto	l8672
  2253  000EC2                     l8680:
  2254                           
  2255                           ; BSR set to: 0
  2256  000EC2  0E00               	movlw	0
  2257  000EC4  0100               	movlb	0	; () banked
  2258  000EC6  6FA7               	movwf	_Switch_Init& (0+255),b
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;State_Mchn.c: 329: Red_Led(1);
  2262  000EC8  0E01               	movlw	1
  2263  000ECA  ECFA  F01B         	call	_Red_Led
  2264                           
  2265                           ;State_Mchn.c: 331: }
  2266                           
  2267                           ;State_Mchn.c: 330: break;
  2268  000ECE  EF2A  F00C         	goto	l9160
  2269  000ED2                     l8686:
  2270  000ED2  0100               	movlb	0	; () banked
  2271  000ED4  51A7               	movf	_Switch_Init& (0+255),w,b
  2272                           
  2273                           ; Switch size 1, requested type "space"
  2274                           ; Number of cases is 12, Range of values is 0 to 11
  2275                           ; switch strategies available:
  2276                           ; Name         Instructions Cycles
  2277                           ; simple_byte           37    19 (average)
  2278                           ;	Chosen strategy is simple_byte
  2279  000ED6  0A00               	xorlw	0	; case 0
  2280  000ED8  B4D8               	btfsc	status,2,c
  2281  000EDA  D4AE               	goto	l8394
  2282  000EDC  0A01               	xorlw	1	; case 1
  2283  000EDE  B4D8               	btfsc	status,2,c
  2284  000EE0  D4B3               	goto	l8398
  2285  000EE2  0A03               	xorlw	3	; case 2
  2286  000EE4  B4D8               	btfsc	status,2,c
  2287  000EE6  D517               	goto	l8432
  2288  000EE8  0A01               	xorlw	1	; case 3
  2289  000EEA  B4D8               	btfsc	status,2,c
  2290  000EEC  D555               	goto	l8450
  2291  000EEE  0A07               	xorlw	7	; case 4
  2292  000EF0  B4D8               	btfsc	status,2,c
  2293  000EF2  D5C4               	goto	l8490
  2294  000EF4  0A01               	xorlw	1	; case 5
  2295  000EF6  B4D8               	btfsc	status,2,c
  2296  000EF8  D62F               	goto	l8514
  2297  000EFA  0A03               	xorlw	3	; case 6
  2298  000EFC  B4D8               	btfsc	status,2,c
  2299  000EFE  D646               	goto	l8522
  2300  000F00  0A01               	xorlw	1	; case 7
  2301  000F02  B4D8               	btfsc	status,2,c
  2302  000F04  D645               	goto	l8524
  2303  000F06  0A0F               	xorlw	15	; case 8
  2304  000F08  B4D8               	btfsc	status,2,c
  2305  000F0A  D65C               	goto	l8532
  2306  000F0C  0A01               	xorlw	1	; case 9
  2307  000F0E  B4D8               	btfsc	status,2,c
  2308  000F10  D788               	goto	l8650
  2309  000F12  0A03               	xorlw	3	; case 10
  2310  000F14  B4D8               	btfsc	status,2,c
  2311  000F16  D787               	goto	l8652
  2312  000F18  0A01               	xorlw	1	; case 11
  2313  000F1A  B4D8               	btfsc	status,2,c
  2314  000F1C  D79E               	goto	l8660
  2315  000F1E  D7D1               	goto	l8680
  2316  000F20                     l8688:
  2317                           
  2318                           ; BSR set to: 0
  2319  000F20  0E00               	movlw	0
  2320  000F22  0100               	movlb	0	; () banked
  2321  000F24  6F89               	movwf	Train_Path@To& (0+255),b
  2322  000F26  0E02               	movlw	2
  2323  000F28  EC92  F012         	call	_Train_Path
  2324  000F2C  0900               	iorlw	0
  2325  000F2E  A4D8               	btfss	status,2,c
  2326  000F30  D24A               	goto	l8936
  2327                           
  2328                           ;State_Mchn.c: 337: {
  2329                           ;State_Mchn.c: 338: Switch_Program = 1;
  2330  000F32  0E01               	movlw	1
  2331  000F34  0100               	movlb	0	; () banked
  2332  000F36  6FAB               	movwf	_Switch_Program& (0+255),b
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;State_Mchn.c: 339: Eeprom_Store();
  2336  000F38  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2337  000F3C                     l8694:
  2338                           
  2339                           ;State_Mchn.c: 340: if(Stop_Program == 1)
  2340  000F3C  0100               	movlb	0	; () banked
  2341  000F3E  05A1               	decf	_Stop_Program& (0+255),w,b
  2342  000F40  A4D8               	btfss	status,2,c
  2343  000F42  D241               	goto	l8936
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;State_Mchn.c: 341: {
  2347                           ;State_Mchn.c: 342: Switch_Main = 0;
  2348  000F44  0E00               	movlw	0
  2349  000F46  0100               	movlb	0	; () banked
  2350  000F48  6FA9               	movwf	_Switch_Main& (0+255),b
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;State_Mchn.c: 344: }
  2354                           ;State_Mchn.c: 345: }
  2355                           ;State_Mchn.c: 346: break;
  2356                           
  2357                           ; BSR set to: 0
  2358  000F4A  D23D               	goto	l8936
  2359  000F4C                     l8698:
  2360                           
  2361                           ; BSR set to: 0
  2362  000F4C  0E02               	movlw	2
  2363  000F4E  0100               	movlb	0	; () banked
  2364  000F50  6F89               	movwf	Train_Path@To& (0+255),b
  2365  000F52  0E01               	movlw	1
  2366  000F54  EC92  F012         	call	_Train_Path
  2367  000F58  0900               	iorlw	0
  2368  000F5A  A4D8               	btfss	status,2,c
  2369  000F5C  D234               	goto	l8936
  2370                           
  2371                           ;State_Mchn.c: 349: {
  2372                           ;State_Mchn.c: 350: Switch_Program = 2;
  2373  000F5E  0E02               	movlw	2
  2374  000F60  0100               	movlb	0	; () banked
  2375  000F62  6FAB               	movwf	_Switch_Program& (0+255),b
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;State_Mchn.c: 351: Eeprom_Store();
  2379  000F64  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2380  000F68  D7E9               	goto	l8694
  2381  000F6A                     l8708:
  2382                           
  2383                           ; BSR set to: 0
  2384  000F6A  0E03               	movlw	3
  2385  000F6C  0100               	movlb	0	; () banked
  2386  000F6E  6F89               	movwf	Train_Path@To& (0+255),b
  2387  000F70  0E00               	movlw	0
  2388  000F72  EC92  F012         	call	_Train_Path
  2389  000F76  0900               	iorlw	0
  2390  000F78  A4D8               	btfss	status,2,c
  2391  000F7A  D225               	goto	l8936
  2392                           
  2393                           ;State_Mchn.c: 361: {
  2394                           ;State_Mchn.c: 362: Switch_Program = 3;
  2395  000F7C  0E03               	movlw	3
  2396  000F7E  0100               	movlb	0	; () banked
  2397  000F80  6FAB               	movwf	_Switch_Program& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;State_Mchn.c: 363: Eeprom_Store();
  2401  000F82  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2402  000F86  D7DA               	goto	l8694
  2403  000F88                     l8718:
  2404                           
  2405                           ; BSR set to: 0
  2406  000F88  0E00               	movlw	0
  2407  000F8A  0100               	movlb	0	; () banked
  2408  000F8C  6F89               	movwf	Train_Path@To& (0+255),b
  2409  000F8E  0E02               	movlw	2
  2410  000F90  EC92  F012         	call	_Train_Path
  2411  000F94  0900               	iorlw	0
  2412  000F96  A4D8               	btfss	status,2,c
  2413  000F98  D216               	goto	l8936
  2414                           
  2415                           ;State_Mchn.c: 373: {
  2416                           ;State_Mchn.c: 374: Switch_Program = 4;
  2417  000F9A  0E04               	movlw	4
  2418  000F9C  0100               	movlb	0	; () banked
  2419  000F9E  6FAB               	movwf	_Switch_Program& (0+255),b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;State_Mchn.c: 375: Eeprom_Store();
  2423  000FA0  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2424  000FA4  D7CB               	goto	l8694
  2425  000FA6                     l8728:
  2426                           
  2427                           ; BSR set to: 0
  2428  000FA6  0E01               	movlw	1
  2429  000FA8  0100               	movlb	0	; () banked
  2430  000FAA  6F89               	movwf	Train_Path@To& (0+255),b
  2431  000FAC  0E03               	movlw	3
  2432  000FAE  EC92  F012         	call	_Train_Path
  2433  000FB2  0900               	iorlw	0
  2434  000FB4  A4D8               	btfss	status,2,c
  2435  000FB6  D207               	goto	l8936
  2436                           
  2437                           ;State_Mchn.c: 385: {
  2438                           ;State_Mchn.c: 386: Switch_Program = 5;
  2439  000FB8  0E05               	movlw	5
  2440  000FBA  0100               	movlb	0	; () banked
  2441  000FBC  6FAB               	movwf	_Switch_Program& (0+255),b
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;State_Mchn.c: 387: Eeprom_Store();
  2445  000FBE  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2446  000FC2  D7BC               	goto	l8694
  2447  000FC4                     l8738:
  2448                           
  2449                           ; BSR set to: 0
  2450  000FC4  0E03               	movlw	3
  2451  000FC6  0100               	movlb	0	; () banked
  2452  000FC8  6F89               	movwf	Train_Path@To& (0+255),b
  2453  000FCA  0E00               	movlw	0
  2454  000FCC  EC92  F012         	call	_Train_Path
  2455  000FD0  0900               	iorlw	0
  2456  000FD2  A4D8               	btfss	status,2,c
  2457  000FD4  D1F8               	goto	l8936
  2458                           
  2459                           ;State_Mchn.c: 397: {
  2460                           ;State_Mchn.c: 398: Switch_Program = 6;
  2461  000FD6  0E06               	movlw	6
  2462  000FD8  0100               	movlb	0	; () banked
  2463  000FDA  6FAB               	movwf	_Switch_Program& (0+255),b
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;State_Mchn.c: 399: Eeprom_Store();
  2467  000FDC  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2468  000FE0  D7AD               	goto	l8694
  2469  000FE2                     l8748:
  2470                           
  2471                           ; BSR set to: 0
  2472  000FE2  0E02               	movlw	2
  2473  000FE4  0100               	movlb	0	; () banked
  2474  000FE6  6F89               	movwf	Train_Path@To& (0+255),b
  2475  000FE8  0E01               	movlw	1
  2476  000FEA  EC92  F012         	call	_Train_Path
  2477  000FEE  0900               	iorlw	0
  2478  000FF0  A4D8               	btfss	status,2,c
  2479  000FF2  D1E9               	goto	l8936
  2480                           
  2481                           ;State_Mchn.c: 409: {
  2482                           ;State_Mchn.c: 410: Switch_Program = 7;
  2483  000FF4  0E07               	movlw	7
  2484  000FF6  0100               	movlb	0	; () banked
  2485  000FF8  6FAB               	movwf	_Switch_Program& (0+255),b
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;State_Mchn.c: 411: Eeprom_Store();
  2489  000FFA  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2490  000FFE  D79E               	goto	l8694
  2491  001000                     l8758:
  2492                           
  2493                           ; BSR set to: 0
  2494  001000  0E01               	movlw	1
  2495  001002  0100               	movlb	0	; () banked
  2496  001004  6F89               	movwf	Train_Path@To& (0+255),b
  2497  001006  0E03               	movlw	3
  2498  001008  EC92  F012         	call	_Train_Path
  2499  00100C  0900               	iorlw	0
  2500  00100E  A4D8               	btfss	status,2,c
  2501  001010  D1DA               	goto	l8936
  2502                           
  2503                           ;State_Mchn.c: 421: {
  2504                           ;State_Mchn.c: 422: Switch_Program = 0;
  2505  001012  0E00               	movlw	0
  2506  001014  0100               	movlb	0	; () banked
  2507  001016  6FAB               	movwf	_Switch_Program& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;State_Mchn.c: 423: Eeprom_Store();
  2511  001018  EC89  F01A         	call	_Eeprom_Store	;wreg free
  2512  00101C  D78F               	goto	l8694
  2513  00101E                     l8770:
  2514                           
  2515                           ; BSR set to: 0
  2516  00101E  0100               	movlb	0	; () banked
  2517  001020  51AB               	movf	_Switch_Program& (0+255),w,b
  2518                           
  2519                           ; Switch size 1, requested type "space"
  2520                           ; Number of cases is 8, Range of values is 0 to 7
  2521                           ; switch strategies available:
  2522                           ; Name         Instructions Cycles
  2523                           ; simple_byte           25    13 (average)
  2524                           ;	Chosen strategy is simple_byte
  2525  001022  0A00               	xorlw	0	; case 0
  2526  001024  B4D8               	btfsc	status,2,c
  2527  001026  D77C               	goto	l8688
  2528  001028  0A01               	xorlw	1	; case 1
  2529  00102A  B4D8               	btfsc	status,2,c
  2530  00102C  D78F               	goto	l8698
  2531  00102E  0A03               	xorlw	3	; case 2
  2532  001030  B4D8               	btfsc	status,2,c
  2533  001032  D79B               	goto	l8708
  2534  001034  0A01               	xorlw	1	; case 3
  2535  001036  B4D8               	btfsc	status,2,c
  2536  001038  D7A7               	goto	l8718
  2537  00103A  0A07               	xorlw	7	; case 4
  2538  00103C  B4D8               	btfsc	status,2,c
  2539  00103E  D7B3               	goto	l8728
  2540  001040  0A01               	xorlw	1	; case 5
  2541  001042  B4D8               	btfsc	status,2,c
  2542  001044  D7BF               	goto	l8738
  2543  001046  0A03               	xorlw	3	; case 6
  2544  001048  B4D8               	btfsc	status,2,c
  2545  00104A  D7CB               	goto	l8748
  2546  00104C  0A01               	xorlw	1	; case 7
  2547  00104E  B4D8               	btfsc	status,2,c
  2548  001050  D7D7               	goto	l8758
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;State_Mchn.c: 437: switch(Switch_Activate_Controls)
  2552  001052  D1B9               	goto	l8936
  2553  001054                     l8772:
  2554                           
  2555                           ; BSR set to: 0
  2556  001054  0E24               	movlw	36
  2557  001056  EC38  F01E         	call	_GETxAPIxVAL
  2558  00105A  0100               	movlb	0	; () banked
  2559  00105C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2560  00105E  0100               	movlb	0	; () banked
  2561  001060  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2562  001062  B4D8               	btfsc	status,2,c
  2563  001064  D010               	goto	l8780
  2564                           
  2565                           ; BSR set to: 0
  2566  001066  0E26               	movlw	38
  2567  001068  EC38  F01E         	call	_GETxAPIxVAL
  2568  00106C  0100               	movlb	0	; () banked
  2569  00106E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2570  001070  0100               	movlb	0	; () banked
  2571  001072  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2572  001074  B4D8               	btfsc	status,2,c
  2573  001076  D007               	goto	l8780
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;State_Mchn.c: 440: {
  2577                           ;State_Mchn.c: 441: Switch_Activate_Controls = 1;
  2578  001078  0E01               	movlw	1
  2579  00107A  0100               	movlb	0	; () banked
  2580  00107C  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;State_Mchn.c: 442: Red_Led(3);
  2584  00107E  0E03               	movlw	3
  2585  001080  ECFA  F01B         	call	_Red_Led
  2586                           
  2587                           ;State_Mchn.c: 443: }
  2588  001084  D1AC               	goto	l8938
  2589  001086                     l8780:
  2590                           
  2591                           ;State_Mchn.c: 444: else
  2592                           ;State_Mchn.c: 445: {
  2593                           ;State_Mchn.c: 446: Switch_Activate_Controls = 0;
  2594  001086  0E00               	movlw	0
  2595  001088  0100               	movlb	0	; () banked
  2596  00108A  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;State_Mchn.c: 447: Red_Led(0);
  2600  00108C  0E00               	movlw	0
  2601  00108E  ECFA  F01B         	call	_Red_Led
  2602                           
  2603                           ;State_Mchn.c: 448: }
  2604                           ;State_Mchn.c: 449: break;
  2605  001092  D1A5               	goto	l8938
  2606  001094                     l8784:
  2607  001094  0E24               	movlw	36
  2608  001096  EC38  F01E         	call	_GETxAPIxVAL
  2609  00109A  0100               	movlb	0	; () banked
  2610  00109C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2611  00109E  0100               	movlb	0	; () banked
  2612  0010A0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2613  0010A2  A4D8               	btfss	status,2,c
  2614  0010A4  D010               	goto	l8792
  2615                           
  2616                           ; BSR set to: 0
  2617  0010A6  0E26               	movlw	38
  2618  0010A8  EC38  F01E         	call	_GETxAPIxVAL
  2619  0010AC  0100               	movlb	0	; () banked
  2620  0010AE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2621  0010B0  0100               	movlb	0	; () banked
  2622  0010B2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2623  0010B4  A4D8               	btfss	status,2,c
  2624  0010B6  D007               	goto	l8792
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;State_Mchn.c: 452: {
  2628                           ;State_Mchn.c: 453: Switch_Activate_Controls = 2;
  2629  0010B8  0E02               	movlw	2
  2630  0010BA  0100               	movlb	0	; () banked
  2631  0010BC  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;State_Mchn.c: 454: Red_Led(3);
  2635  0010BE  0E03               	movlw	3
  2636  0010C0  ECFA  F01B         	call	_Red_Led
  2637                           
  2638                           ;State_Mchn.c: 455: }
  2639  0010C4  D006               	goto	l8796
  2640  0010C6                     l8792:
  2641                           
  2642                           ;State_Mchn.c: 456: else
  2643                           ;State_Mchn.c: 457: {
  2644                           ;State_Mchn.c: 458: Switch_Activate_Controls = 1;
  2645  0010C6  0E01               	movlw	1
  2646  0010C8  0100               	movlb	0	; () banked
  2647  0010CA  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;State_Mchn.c: 459: Red_Led(3);
  2651  0010CC  0E03               	movlw	3
  2652  0010CE  ECFA  F01B         	call	_Red_Led
  2653  0010D2                     l8796:
  2654                           
  2655                           ;State_Mchn.c: 460: }
  2656                           ;State_Mchn.c: 461: Activate_Controls_Counter = 10000;
  2657  0010D2  0E27               	movlw	39
  2658  0010D4  0100               	movlb	0	; () banked
  2659  0010D6  6F98               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2660  0010D8  0E10               	movlw	16
  2661  0010DA  6F97               	movwf	_Activate_Controls_Counter& (0+255),b
  2662                           
  2663                           ;State_Mchn.c: 462: break;
  2664  0010DC  D180               	goto	l8938
  2665  0010DE                     l8798:
  2666                           
  2667                           ; BSR set to: 0
  2668  0010DE  0E24               	movlw	36
  2669  0010E0  EC38  F01E         	call	_GETxAPIxVAL
  2670  0010E4  0100               	movlb	0	; () banked
  2671  0010E6  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2672  0010E8  0100               	movlb	0	; () banked
  2673  0010EA  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2674  0010EC  A4D8               	btfss	status,2,c
  2675  0010EE  D020               	goto	l8808
  2676                           
  2677                           ; BSR set to: 0
  2678  0010F0  0E26               	movlw	38
  2679  0010F2  EC38  F01E         	call	_GETxAPIxVAL
  2680  0010F6  0100               	movlb	0	; () banked
  2681  0010F8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2682  0010FA  0100               	movlb	0	; () banked
  2683  0010FC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2684  0010FE  A4D8               	btfss	status,2,c
  2685  001100  D017               	goto	l8808
  2686                           
  2687                           ; BSR set to: 0
  2688  001102  0E25               	movlw	37
  2689  001104  EC38  F01E         	call	_GETxAPIxVAL
  2690  001108  0100               	movlb	0	; () banked
  2691  00110A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2692  00110C  0100               	movlb	0	; () banked
  2693  00110E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2694  001110  A4D8               	btfss	status,2,c
  2695  001112  D00E               	goto	l8808
  2696                           
  2697                           ; BSR set to: 0
  2698  001114  0E23               	movlw	35
  2699  001116  EC38  F01E         	call	_GETxAPIxVAL
  2700  00111A  0100               	movlb	0	; () banked
  2701  00111C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2702  00111E  0100               	movlb	0	; () banked
  2703  001120  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2704  001122  A4D8               	btfss	status,2,c
  2705  001124  D005               	goto	l8808
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;State_Mchn.c: 465: {
  2709                           ;State_Mchn.c: 466: Activate_Controls_Counter--;
  2710  001126  0100               	movlb	0	; () banked
  2711  001128  0797               	decf	_Activate_Controls_Counter& (0+255),f,b
  2712  00112A  A0D8               	btfss	status,0,c
  2713  00112C  0798               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  2714                           
  2715                           ;State_Mchn.c: 467: }
  2716  00112E  D005               	goto	l8810
  2717  001130                     l8808:
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;State_Mchn.c: 468: else
  2721                           ;State_Mchn.c: 469: {
  2722                           ;State_Mchn.c: 470: Activate_Controls_Counter = 10000;
  2723  001130  0E27               	movlw	39
  2724  001132  0100               	movlb	0	; () banked
  2725  001134  6F98               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2726  001136  0E10               	movlw	16
  2727  001138  6F97               	movwf	_Activate_Controls_Counter& (0+255),b
  2728  00113A                     l8810:
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;State_Mchn.c: 471: }
  2732                           ;State_Mchn.c: 473: Red_Led(3);
  2733  00113A  0E03               	movlw	3
  2734  00113C  ECFA  F01B         	call	_Red_Led
  2735                           
  2736                           ;State_Mchn.c: 475: switch(GETxAPIxVAL(0x23))
  2737  001140  D050               	goto	l8840
  2738  001142                     l8812:
  2739  001142  0E00               	movlw	0
  2740  001144  D03E               	goto	L9
  2741  001146                     l8814:
  2742                           
  2743                           ; BSR set to: 0
  2744  001146  0E17               	movlw	23
  2745  001148  EC38  F01E         	call	_GETxAPIxVAL
  2746  00114C  C060  F08B         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2747  001150  C061  F08C         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2748  001154  0E16               	movlw	22
  2749  001156  EC38  F01E         	call	_GETxAPIxVAL
  2750  00115A  0100               	movlb	0	; () banked
  2751  00115C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2752  00115E  0100               	movlb	0	; () banked
  2753  001160  5D8B               	subwf	??_Update_StateMchn& (0+255),w,b
  2754  001162  0100               	movlb	0	; () banked
  2755  001164  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2756  001166  0100               	movlb	0	; () banked
  2757  001168  598C               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  2758  00116A  A0D8               	btfss	status,0,c
  2759  00116C  D003               	goto	l8818
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;State_Mchn.c: 483: {
  2763                           ;State_Mchn.c: 484: DECRxAPIxVAL(0x17);
  2764  00116E  0E17               	movlw	23
  2765  001170  ECCC  F01D         	call	_DECRxAPIxVAL
  2766  001174                     l8818:
  2767                           
  2768                           ;State_Mchn.c: 485: }
  2769                           ;State_Mchn.c: 486: if(GETxAPIxVAL(0x18) <= GETxAPIxVAL(0x15))
  2770  001174  0E15               	movlw	21
  2771  001176  EC38  F01E         	call	_GETxAPIxVAL
  2772  00117A  C060  F08B         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2773  00117E  C061  F08C         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2774  001182  0E18               	movlw	24
  2775  001184  EC38  F01E         	call	_GETxAPIxVAL
  2776  001188  0100               	movlb	0	; () banked
  2777  00118A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2778  00118C  0100               	movlb	0	; () banked
  2779  00118E  5D8B               	subwf	??_Update_StateMchn& (0+255),w,b
  2780  001190  0100               	movlb	0	; () banked
  2781  001192  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2782  001194  0100               	movlb	0	; () banked
  2783  001196  598C               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  2784  001198  A0D8               	btfss	status,0,c
  2785  00119A  D003               	goto	l8822
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;State_Mchn.c: 487: {
  2789                           ;State_Mchn.c: 488: INCRxAPIxVAL(0x18);
  2790  00119C  0E18               	movlw	24
  2791  00119E  ECFA  F01D         	call	_INCRxAPIxVAL
  2792  0011A2                     l8822:
  2793                           
  2794                           ;State_Mchn.c: 489: }
  2795                           ;State_Mchn.c: 490: Switch_Adjust_LB = 1;
  2796  0011A2  0E01               	movlw	1
  2797  0011A4  D00E               	goto	L9
  2798  0011A6                     l8824:
  2799                           
  2800                           ; BSR set to: 0
  2801  0011A6  0100               	movlb	0	; () banked
  2802  0011A8  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  2803  0011AA  E105               	bnz	u8150
  2804  0011AC  0E14               	movlw	20
  2805  0011AE  0100               	movlb	0	; () banked
  2806  0011B0  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  2807  0011B2  A0D8               	btfss	status,0,c
  2808  0011B4  D009               	goto	l8830
  2809  0011B6                     u8150:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;State_Mchn.c: 494: {
  2813                           ;State_Mchn.c: 495: Adjust_Counter = 0;
  2814  0011B6  0E00               	movlw	0
  2815  0011B8  0100               	movlb	0	; () banked
  2816  0011BA  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  2817  0011BC  0E00               	movlw	0
  2818  0011BE  6F99               	movwf	_Adjust_Counter& (0+255),b
  2819  0011C0  D7C0               	goto	l8812
  2820  0011C2                     L9:
  2821  0011C2  0100               	movlb	0	; () banked
  2822  0011C4  6FA3               	movwf	_Switch_Adjust_LB& (0+255),b
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;State_Mchn.c: 498: }
  2826                           
  2827                           ;State_Mchn.c: 497: break;
  2828  0011C6  D059               	goto	l8870
  2829  0011C8                     l8830:
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;State_Mchn.c: 499: else {Adjust_Counter++;}
  2833  0011C8  0100               	movlb	0	; () banked
  2834  0011CA  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  2835  0011CC  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;State_Mchn.c: 500: break;
  2839  0011CE  D055               	goto	l8870
  2840  0011D0                     l8836:
  2841                           
  2842                           ; BSR set to: 0
  2843  0011D0  0100               	movlb	0	; () banked
  2844  0011D2  51A3               	movf	_Switch_Adjust_LB& (0+255),w,b
  2845                           
  2846                           ; Switch size 1, requested type "space"
  2847                           ; Number of cases is 2, Range of values is 0 to 1
  2848                           ; switch strategies available:
  2849                           ; Name         Instructions Cycles
  2850                           ; simple_byte            7     4 (average)
  2851                           ;	Chosen strategy is simple_byte
  2852  0011D4  0A00               	xorlw	0	; case 0
  2853  0011D6  B4D8               	btfsc	status,2,c
  2854  0011D8  D7B6               	goto	l8814
  2855  0011DA  0A01               	xorlw	1	; case 1
  2856  0011DC  B4D8               	btfsc	status,2,c
  2857  0011DE  D7E3               	goto	l8824
  2858  0011E0  D7B0               	goto	l8812
  2859  0011E2                     l8840:
  2860  0011E2  0E23               	movlw	35
  2861  0011E4  EC38  F01E         	call	_GETxAPIxVAL
  2862                           
  2863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2864                           ; Switch size 1, requested type "space"
  2865                           ; Number of cases is 1, Range of values is 0 to 0
  2866                           ; switch strategies available:
  2867                           ; Name         Instructions Cycles
  2868                           ; simple_byte            4     3 (average)
  2869                           ;	Chosen strategy is simple_byte
  2870  0011E8  0100               	movlb	0	; () banked
  2871  0011EA  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2872  0011EC  0A00               	xorlw	0	; case 0
  2873  0011EE  A4D8               	btfss	status,2,c
  2874  0011F0  D044               	goto	l8870
  2875                           
  2876                           ; BSR set to: 0
  2877                           ; Switch size 1, requested type "space"
  2878                           ; Number of cases is 2, Range of values is 0 to 1
  2879                           ; switch strategies available:
  2880                           ; Name         Instructions Cycles
  2881                           ; simple_byte            7     4 (average)
  2882                           ;	Chosen strategy is simple_byte
  2883  0011F2  0100               	movlb	0	; () banked
  2884  0011F4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2885  0011F6  0A00               	xorlw	0	; case 0
  2886  0011F8  B4D8               	btfsc	status,2,c
  2887  0011FA  D7A3               	goto	l8812
  2888  0011FC  0A01               	xorlw	1	; case 1
  2889  0011FE  B4D8               	btfsc	status,2,c
  2890  001200  D7E7               	goto	l8836
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;State_Mchn.c: 511: switch(GETxAPIxVAL(0x24))
  2894  001202  D03B               	goto	l8870
  2895  001204                     l8842:
  2896                           
  2897                           ; BSR set to: 0
  2898  001204  0E00               	movlw	0
  2899  001206  D029               	goto	L11
  2900  001208                     l8844:
  2901                           
  2902                           ; BSR set to: 0
  2903  001208  0E17               	movlw	23
  2904  00120A  EC38  F01E         	call	_GETxAPIxVAL
  2905  00120E  0100               	movlb	0	; () banked
  2906  001210  2960               	incf	?_GETxAPIxVAL& (0+255),w,b
  2907  001212  0E03               	movlw	3
  2908  001214  0100               	movlb	0	; () banked
  2909  001216  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  2910  001218  B0D8               	btfsc	status,0,c
  2911  00121A  D003               	goto	l8848
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;State_Mchn.c: 519: {
  2915                           ;State_Mchn.c: 520: INCRxAPIxVAL(0x17);
  2916  00121C  0E17               	movlw	23
  2917  00121E  ECFA  F01D         	call	_INCRxAPIxVAL
  2918  001222                     l8848:
  2919                           
  2920                           ;State_Mchn.c: 521: }
  2921                           ;State_Mchn.c: 522: if(GETxAPIxVAL(0x18) >= 1)
  2922  001222  0E18               	movlw	24
  2923  001224  EC38  F01E         	call	_GETxAPIxVAL
  2924  001228  0100               	movlb	0	; () banked
  2925  00122A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2926  00122C  0100               	movlb	0	; () banked
  2927  00122E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2928  001230  B4D8               	btfsc	status,2,c
  2929  001232  D003               	goto	l8852
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;State_Mchn.c: 523: {
  2933                           ;State_Mchn.c: 524: DECRxAPIxVAL(0x18);
  2934  001234  0E18               	movlw	24
  2935  001236  ECCC  F01D         	call	_DECRxAPIxVAL
  2936  00123A                     l8852:
  2937                           
  2938                           ;State_Mchn.c: 525: }
  2939                           ;State_Mchn.c: 526: Switch_Adjust_LF = 1;
  2940  00123A  0E01               	movlw	1
  2941  00123C  D00E               	goto	L11
  2942  00123E                     l8854:
  2943                           
  2944                           ; BSR set to: 0
  2945  00123E  0100               	movlb	0	; () banked
  2946  001240  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  2947  001242  E105               	bnz	u8180
  2948  001244  0E14               	movlw	20
  2949  001246  0100               	movlb	0	; () banked
  2950  001248  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  2951  00124A  A0D8               	btfss	status,0,c
  2952  00124C  D009               	goto	l8860
  2953  00124E                     u8180:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;State_Mchn.c: 530: {
  2957                           ;State_Mchn.c: 531: Adjust_Counter = 0;
  2958  00124E  0E00               	movlw	0
  2959  001250  0100               	movlb	0	; () banked
  2960  001252  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  2961  001254  0E00               	movlw	0
  2962  001256  6F99               	movwf	_Adjust_Counter& (0+255),b
  2963  001258  D7D5               	goto	l8842
  2964  00125A                     L11:
  2965  00125A  0100               	movlb	0	; () banked
  2966  00125C  6FA4               	movwf	_Switch_Adjust_LF& (0+255),b
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;State_Mchn.c: 534: }
  2970                           
  2971                           ;State_Mchn.c: 533: break;
  2972  00125E  D04E               	goto	l8896
  2973  001260                     l8860:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;State_Mchn.c: 535: else {Adjust_Counter++;}
  2977  001260  0100               	movlb	0	; () banked
  2978  001262  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  2979  001264  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;State_Mchn.c: 536: break;
  2983  001266  D04A               	goto	l8896
  2984  001268                     l8866:
  2985                           
  2986                           ; BSR set to: 0
  2987  001268  0100               	movlb	0	; () banked
  2988  00126A  51A4               	movf	_Switch_Adjust_LF& (0+255),w,b
  2989                           
  2990                           ; Switch size 1, requested type "space"
  2991                           ; Number of cases is 2, Range of values is 0 to 1
  2992                           ; switch strategies available:
  2993                           ; Name         Instructions Cycles
  2994                           ; simple_byte            7     4 (average)
  2995                           ;	Chosen strategy is simple_byte
  2996  00126C  0A00               	xorlw	0	; case 0
  2997  00126E  B4D8               	btfsc	status,2,c
  2998  001270  D7CB               	goto	l8844
  2999  001272  0A01               	xorlw	1	; case 1
  3000  001274  B4D8               	btfsc	status,2,c
  3001  001276  D7E3               	goto	l8854
  3002  001278  D7C5               	goto	l8842
  3003  00127A                     l8870:
  3004                           
  3005                           ; BSR set to: 0
  3006  00127A  0E24               	movlw	36
  3007  00127C  EC38  F01E         	call	_GETxAPIxVAL
  3008                           
  3009                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3010                           ; Switch size 1, requested type "space"
  3011                           ; Number of cases is 1, Range of values is 0 to 0
  3012                           ; switch strategies available:
  3013                           ; Name         Instructions Cycles
  3014                           ; simple_byte            4     3 (average)
  3015                           ;	Chosen strategy is simple_byte
  3016  001280  0100               	movlb	0	; () banked
  3017  001282  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3018  001284  0A00               	xorlw	0	; case 0
  3019  001286  A4D8               	btfss	status,2,c
  3020  001288  D039               	goto	l8896
  3021                           
  3022                           ; BSR set to: 0
  3023                           ; Switch size 1, requested type "space"
  3024                           ; Number of cases is 2, Range of values is 0 to 1
  3025                           ; switch strategies available:
  3026                           ; Name         Instructions Cycles
  3027                           ; simple_byte            7     4 (average)
  3028                           ;	Chosen strategy is simple_byte
  3029  00128A  0100               	movlb	0	; () banked
  3030  00128C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3031  00128E  0A00               	xorlw	0	; case 0
  3032  001290  B4D8               	btfsc	status,2,c
  3033  001292  D7B8               	goto	l8842
  3034  001294  0A01               	xorlw	1	; case 1
  3035  001296  B4D8               	btfsc	status,2,c
  3036  001298  D7E7               	goto	l8866
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;State_Mchn.c: 546: switch(GETxAPIxVAL(0x25))
  3040  00129A  D030               	goto	l8896
  3041  00129C                     l8872:
  3042                           
  3043                           ; BSR set to: 0
  3044  00129C  0E00               	movlw	0
  3045  00129E  D01E               	goto	L13
  3046  0012A0                     l8874:
  3047                           
  3048                           ; BSR set to: 0
  3049  0012A0  0E19               	movlw	25
  3050  0012A2  EC38  F01E         	call	_GETxAPIxVAL
  3051  0012A6  0100               	movlb	0	; () banked
  3052  0012A8  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3053  0012AA  E108               	bnz	l8878
  3054  0012AC  0EFB               	movlw	251
  3055  0012AE  0100               	movlb	0	; () banked
  3056  0012B0  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  3057  0012B2  B0D8               	btfsc	status,0,c
  3058  0012B4  D003               	goto	l8878
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;State_Mchn.c: 554: {
  3062                           ;State_Mchn.c: 555: INCRxAPIxVAL(0x19);
  3063  0012B6  0E19               	movlw	25
  3064  0012B8  ECFA  F01D         	call	_INCRxAPIxVAL
  3065  0012BC                     l8878:
  3066                           
  3067                           ;State_Mchn.c: 556: }
  3068                           ;State_Mchn.c: 557: Switch_Adjust_RB = 1;
  3069  0012BC  0E01               	movlw	1
  3070  0012BE  D00E               	goto	L13
  3071  0012C0                     l8880:
  3072                           
  3073                           ; BSR set to: 0
  3074  0012C0  0100               	movlb	0	; () banked
  3075  0012C2  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  3076  0012C4  E105               	bnz	u8200
  3077  0012C6  0E14               	movlw	20
  3078  0012C8  0100               	movlb	0	; () banked
  3079  0012CA  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  3080  0012CC  A0D8               	btfss	status,0,c
  3081  0012CE  D009               	goto	l8886
  3082  0012D0                     u8200:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;State_Mchn.c: 561: {
  3086                           ;State_Mchn.c: 562: Adjust_Counter = 0;
  3087  0012D0  0E00               	movlw	0
  3088  0012D2  0100               	movlb	0	; () banked
  3089  0012D4  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  3090  0012D6  0E00               	movlw	0
  3091  0012D8  6F99               	movwf	_Adjust_Counter& (0+255),b
  3092  0012DA  D7E0               	goto	l8872
  3093  0012DC                     L13:
  3094  0012DC  0100               	movlb	0	; () banked
  3095  0012DE  6FA5               	movwf	_Switch_Adjust_RB& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;State_Mchn.c: 565: }
  3099                           
  3100                           ;State_Mchn.c: 564: break;
  3101  0012E0  D04C               	goto	l8922
  3102  0012E2                     l8886:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;State_Mchn.c: 566: else {Adjust_Counter++;}
  3106  0012E2  0100               	movlb	0	; () banked
  3107  0012E4  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  3108  0012E6  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;State_Mchn.c: 567: break;
  3112  0012E8  D048               	goto	l8922
  3113  0012EA                     l8892:
  3114                           
  3115                           ; BSR set to: 0
  3116  0012EA  0100               	movlb	0	; () banked
  3117  0012EC  51A5               	movf	_Switch_Adjust_RB& (0+255),w,b
  3118                           
  3119                           ; Switch size 1, requested type "space"
  3120                           ; Number of cases is 2, Range of values is 0 to 1
  3121                           ; switch strategies available:
  3122                           ; Name         Instructions Cycles
  3123                           ; simple_byte            7     4 (average)
  3124                           ;	Chosen strategy is simple_byte
  3125  0012EE  0A00               	xorlw	0	; case 0
  3126  0012F0  B4D8               	btfsc	status,2,c
  3127  0012F2  D7D6               	goto	l8874
  3128  0012F4  0A01               	xorlw	1	; case 1
  3129  0012F6  B4D8               	btfsc	status,2,c
  3130  0012F8  D7E3               	goto	l8880
  3131  0012FA  D7D0               	goto	l8872
  3132  0012FC                     l8896:
  3133                           
  3134                           ; BSR set to: 0
  3135  0012FC  0E25               	movlw	37
  3136  0012FE  EC38  F01E         	call	_GETxAPIxVAL
  3137                           
  3138                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3139                           ; Switch size 1, requested type "space"
  3140                           ; Number of cases is 1, Range of values is 0 to 0
  3141                           ; switch strategies available:
  3142                           ; Name         Instructions Cycles
  3143                           ; simple_byte            4     3 (average)
  3144                           ;	Chosen strategy is simple_byte
  3145  001302  0100               	movlb	0	; () banked
  3146  001304  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3147  001306  0A00               	xorlw	0	; case 0
  3148  001308  A4D8               	btfss	status,2,c
  3149  00130A  D037               	goto	l8922
  3150                           
  3151                           ; BSR set to: 0
  3152                           ; Switch size 1, requested type "space"
  3153                           ; Number of cases is 2, Range of values is 0 to 1
  3154                           ; switch strategies available:
  3155                           ; Name         Instructions Cycles
  3156                           ; simple_byte            7     4 (average)
  3157                           ;	Chosen strategy is simple_byte
  3158  00130C  0100               	movlb	0	; () banked
  3159  00130E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3160  001310  0A00               	xorlw	0	; case 0
  3161  001312  B4D8               	btfsc	status,2,c
  3162  001314  D7C3               	goto	l8872
  3163  001316  0A01               	xorlw	1	; case 1
  3164  001318  B4D8               	btfsc	status,2,c
  3165  00131A  D7E7               	goto	l8892
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;State_Mchn.c: 578: switch(GETxAPIxVAL(0x26))
  3169  00131C  D02E               	goto	l8922
  3170  00131E                     l8898:
  3171                           
  3172                           ; BSR set to: 0
  3173  00131E  0E00               	movlw	0
  3174  001320  D01C               	goto	L15
  3175  001322                     l8900:
  3176                           
  3177                           ; BSR set to: 0
  3178  001322  0E19               	movlw	25
  3179  001324  EC38  F01E         	call	_GETxAPIxVAL
  3180  001328  0100               	movlb	0	; () banked
  3181  00132A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3182  00132C  0100               	movlb	0	; () banked
  3183  00132E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3184  001330  B4D8               	btfsc	status,2,c
  3185  001332  D003               	goto	l8904
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;State_Mchn.c: 586: {
  3189                           ;State_Mchn.c: 587: DECRxAPIxVAL(0x19);
  3190  001334  0E19               	movlw	25
  3191  001336  ECCC  F01D         	call	_DECRxAPIxVAL
  3192  00133A                     l8904:
  3193                           
  3194                           ;State_Mchn.c: 588: } Switch_Adjust_RF = 1;
  3195  00133A  0E01               	movlw	1
  3196  00133C  D00E               	goto	L15
  3197  00133E                     l8906:
  3198                           
  3199                           ; BSR set to: 0
  3200  00133E  0100               	movlb	0	; () banked
  3201  001340  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  3202  001342  E105               	bnz	u8220
  3203  001344  0E14               	movlw	20
  3204  001346  0100               	movlb	0	; () banked
  3205  001348  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  3206  00134A  A0D8               	btfss	status,0,c
  3207  00134C  D009               	goto	l8912
  3208  00134E                     u8220:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;State_Mchn.c: 592: {
  3212                           ;State_Mchn.c: 593: Adjust_Counter = 0;
  3213  00134E  0E00               	movlw	0
  3214  001350  0100               	movlb	0	; () banked
  3215  001352  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  3216  001354  0E00               	movlw	0
  3217  001356  6F99               	movwf	_Adjust_Counter& (0+255),b
  3218  001358  D7E2               	goto	l8898
  3219  00135A                     L15:
  3220  00135A  0100               	movlb	0	; () banked
  3221  00135C  6FA6               	movwf	_Switch_Adjust_RF& (0+255),b
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;State_Mchn.c: 596: }
  3225                           
  3226                           ;State_Mchn.c: 595: break;
  3227  00135E  D01D               	goto	l8924
  3228  001360                     l8912:
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;State_Mchn.c: 597: else {Adjust_Counter++;}
  3232  001360  0100               	movlb	0	; () banked
  3233  001362  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  3234  001364  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;State_Mchn.c: 598: break;
  3238  001366  D019               	goto	l8924
  3239  001368                     l8918:
  3240                           
  3241                           ; BSR set to: 0
  3242  001368  0100               	movlb	0	; () banked
  3243  00136A  51A6               	movf	_Switch_Adjust_RF& (0+255),w,b
  3244                           
  3245                           ; Switch size 1, requested type "space"
  3246                           ; Number of cases is 2, Range of values is 0 to 1
  3247                           ; switch strategies available:
  3248                           ; Name         Instructions Cycles
  3249                           ; simple_byte            7     4 (average)
  3250                           ;	Chosen strategy is simple_byte
  3251  00136C  0A00               	xorlw	0	; case 0
  3252  00136E  B4D8               	btfsc	status,2,c
  3253  001370  D7D8               	goto	l8900
  3254  001372  0A01               	xorlw	1	; case 1
  3255  001374  B4D8               	btfsc	status,2,c
  3256  001376  D7E3               	goto	l8906
  3257  001378  D7D2               	goto	l8898
  3258  00137A                     l8922:
  3259                           
  3260                           ; BSR set to: 0
  3261  00137A  0E26               	movlw	38
  3262  00137C  EC38  F01E         	call	_GETxAPIxVAL
  3263                           
  3264                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3265                           ; Switch size 1, requested type "space"
  3266                           ; Number of cases is 1, Range of values is 0 to 0
  3267                           ; switch strategies available:
  3268                           ; Name         Instructions Cycles
  3269                           ; simple_byte            4     3 (average)
  3270                           ;	Chosen strategy is simple_byte
  3271  001380  0100               	movlb	0	; () banked
  3272  001382  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3273  001384  0A00               	xorlw	0	; case 0
  3274  001386  A4D8               	btfss	status,2,c
  3275  001388  D008               	goto	l8924
  3276                           
  3277                           ; BSR set to: 0
  3278                           ; Switch size 1, requested type "space"
  3279                           ; Number of cases is 2, Range of values is 0 to 1
  3280                           ; switch strategies available:
  3281                           ; Name         Instructions Cycles
  3282                           ; simple_byte            7     4 (average)
  3283                           ;	Chosen strategy is simple_byte
  3284  00138A  0100               	movlb	0	; () banked
  3285  00138C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3286  00138E  0A00               	xorlw	0	; case 0
  3287  001390  B4D8               	btfsc	status,2,c
  3288  001392  D7C5               	goto	l8898
  3289  001394  0A01               	xorlw	1	; case 1
  3290  001396  B4D8               	btfsc	status,2,c
  3291  001398  D7E7               	goto	l8918
  3292  00139A                     l8924:
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;State_Mchn.c: 607: if(Activate_Controls_Counter <= 1)
  3296  00139A  0100               	movlb	0	; () banked
  3297  00139C  5198               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  3298  00139E  E11F               	bnz	l8938
  3299  0013A0  0E02               	movlw	2
  3300  0013A2  0100               	movlb	0	; () banked
  3301  0013A4  5D97               	subwf	_Activate_Controls_Counter& (0+255),w,b
  3302  0013A6  B0D8               	btfsc	status,0,c
  3303  0013A8  D01A               	goto	l8938
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;State_Mchn.c: 608: {
  3307                           ;State_Mchn.c: 609: Switch_Activate_Controls = 0;
  3308  0013AA  0E00               	movlw	0
  3309  0013AC  0100               	movlb	0	; () banked
  3310  0013AE  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;State_Mchn.c: 610: Red_Led(0);
  3314  0013B0  0E00               	movlw	0
  3315  0013B2  ECFA  F01B         	call	_Red_Led
  3316                           
  3317                           ;State_Mchn.c: 611: }
  3318                           ;State_Mchn.c: 612: break;
  3319  0013B6  D013               	goto	l8938
  3320  0013B8                     l8930:
  3321  0013B8  0E00               	movlw	0
  3322  0013BA  0100               	movlb	0	; () banked
  3323  0013BC  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;State_Mchn.c: 615: Red_Led(0);
  3327  0013BE  0E00               	movlw	0
  3328  0013C0  ECFA  F01B         	call	_Red_Led
  3329                           
  3330                           ;State_Mchn.c: 617: }
  3331                           
  3332                           ;State_Mchn.c: 616: break;
  3333  0013C4  D00C               	goto	l8938
  3334  0013C6                     l8936:
  3335  0013C6  0100               	movlb	0	; () banked
  3336  0013C8  51A2               	movf	_Switch_Activate_Controls& (0+255),w,b
  3337                           
  3338                           ; Switch size 1, requested type "space"
  3339                           ; Number of cases is 3, Range of values is 0 to 2
  3340                           ; switch strategies available:
  3341                           ; Name         Instructions Cycles
  3342                           ; simple_byte           10     6 (average)
  3343                           ;	Chosen strategy is simple_byte
  3344  0013CA  0A00               	xorlw	0	; case 0
  3345  0013CC  B4D8               	btfsc	status,2,c
  3346  0013CE  D642               	goto	l8772
  3347  0013D0  0A01               	xorlw	1	; case 1
  3348  0013D2  B4D8               	btfsc	status,2,c
  3349  0013D4  D65F               	goto	l8784
  3350  0013D6  0A03               	xorlw	3	; case 2
  3351  0013D8  B4D8               	btfsc	status,2,c
  3352  0013DA  D681               	goto	l8798
  3353  0013DC  D7ED               	goto	l8930
  3354  0013DE                     l8938:
  3355                           
  3356                           ;State_Mchn.c: 619: if(GETxAPIxVAL(0x21))
  3357  0013DE  0E21               	movlw	33
  3358  0013E0  EC38  F01E         	call	_GETxAPIxVAL
  3359  0013E4  0100               	movlb	0	; () banked
  3360  0013E6  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3361  0013E8  0100               	movlb	0	; () banked
  3362  0013EA  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3363  0013EC  B4D8               	btfsc	status,2,c
  3364  0013EE  D003               	goto	l8942
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;State_Mchn.c: 620: {
  3368                           ;State_Mchn.c: 621: Stop_Program = 1;
  3369  0013F0  0E01               	movlw	1
  3370  0013F2  0100               	movlb	0	; () banked
  3371  0013F4  6FA1               	movwf	_Stop_Program& (0+255),b
  3372  0013F6                     l8942:
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;State_Mchn.c: 622: }
  3376                           ;State_Mchn.c: 624: if(Stop_Program == 1)
  3377  0013F6  0100               	movlb	0	; () banked
  3378  0013F8  05A1               	decf	_Stop_Program& (0+255),w,b
  3379  0013FA  A4D8               	btfss	status,2,c
  3380  0013FC  D003               	goto	l362
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;State_Mchn.c: 625: {
  3384                           ;State_Mchn.c: 626: Red_Led(2);
  3385  0013FE  0E02               	movlw	2
  3386  001400  ECFA  F01B         	call	_Red_Led
  3387  001404                     l362:
  3388                           
  3389                           ;State_Mchn.c: 627: }
  3390                           ;State_Mchn.c: 629: Green_Led(1);
  3391  001404  0E01               	movlw	1
  3392  001406  EC3A  F01C         	call	_Green_Led
  3393                           
  3394                           ;State_Mchn.c: 631: break;
  3395  00140A  D224               	goto	l9160
  3396  00140C                     l8946:
  3397  00140C  0E00               	movlw	0
  3398  00140E  0100               	movlb	0	; () banked
  3399  001410  6F89               	movwf	Train_Path@To& (0+255),b
  3400  001412  0E02               	movlw	2
  3401  001414  EC92  F012         	call	_Train_Path
  3402  001418  0900               	iorlw	0
  3403  00141A  A4D8               	btfss	status,2,c
  3404  00141C  D202               	goto	l9154
  3405                           
  3406                           ;State_Mchn.c: 637: {
  3407                           ;State_Mchn.c: 638: Switch_Program = 1;
  3408  00141E  0E01               	movlw	1
  3409  001420  0100               	movlb	0	; () banked
  3410  001422  6FAB               	movwf	_Switch_Program& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;State_Mchn.c: 639: Eeprom_Store();
  3414  001424  EC89  F01A         	call	_Eeprom_Store	;wreg free
  3415  001428                     l8952:
  3416                           
  3417                           ;State_Mchn.c: 640: if(Stop_Program == 1)
  3418  001428  0100               	movlb	0	; () banked
  3419  00142A  05A1               	decf	_Stop_Program& (0+255),w,b
  3420  00142C  A4D8               	btfss	status,2,c
  3421  00142E  D1F9               	goto	l9154
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;State_Mchn.c: 641: {
  3425                           ;State_Mchn.c: 642: Switch_Main = 0;
  3426  001430  0E00               	movlw	0
  3427  001432  0100               	movlb	0	; () banked
  3428  001434  6FA9               	movwf	_Switch_Main& (0+255),b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;State_Mchn.c: 644: }
  3432                           ;State_Mchn.c: 645: }
  3433                           ;State_Mchn.c: 646: break;
  3434                           
  3435                           ; BSR set to: 0
  3436  001436  D1F5               	goto	l9154
  3437  001438                     l8956:
  3438                           
  3439                           ; BSR set to: 0
  3440  001438  0E03               	movlw	3
  3441  00143A  0100               	movlb	0	; () banked
  3442  00143C  6F89               	movwf	Train_Path@To& (0+255),b
  3443  00143E  0E00               	movlw	0
  3444  001440  EC92  F012         	call	_Train_Path
  3445  001444  0900               	iorlw	0
  3446  001446  A4D8               	btfss	status,2,c
  3447  001448  D1EC               	goto	l9154
  3448                           
  3449                           ;State_Mchn.c: 649: {
  3450                           ;State_Mchn.c: 650: Switch_Program = 2;
  3451  00144A  0E02               	movlw	2
  3452  00144C  0100               	movlb	0	; () banked
  3453  00144E  6FAB               	movwf	_Switch_Program& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;State_Mchn.c: 651: Eeprom_Store();
  3457  001450  EC89  F01A         	call	_Eeprom_Store	;wreg free
  3458  001454  D7E9               	goto	l8952
  3459  001456                     l8966:
  3460                           
  3461                           ; BSR set to: 0
  3462  001456  0E01               	movlw	1
  3463  001458  0100               	movlb	0	; () banked
  3464  00145A  6F89               	movwf	Train_Path@To& (0+255),b
  3465  00145C  0E03               	movlw	3
  3466  00145E  EC92  F012         	call	_Train_Path
  3467  001462  0900               	iorlw	0
  3468  001464  A4D8               	btfss	status,2,c
  3469  001466  D1DD               	goto	l9154
  3470                           
  3471                           ;State_Mchn.c: 661: {
  3472                           ;State_Mchn.c: 662: Switch_Program = 3;
  3473  001468  0E03               	movlw	3
  3474  00146A  0100               	movlb	0	; () banked
  3475  00146C  6FAB               	movwf	_Switch_Program& (0+255),b
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;State_Mchn.c: 663: Eeprom_Store();
  3479  00146E  EC89  F01A         	call	_Eeprom_Store	;wreg free
  3480  001472  D7DA               	goto	l8952
  3481  001474                     l8976:
  3482                           
  3483                           ; BSR set to: 0
  3484  001474  0E02               	movlw	2
  3485  001476  0100               	movlb	0	; () banked
  3486  001478  6F89               	movwf	Train_Path@To& (0+255),b
  3487  00147A  0E01               	movlw	1
  3488  00147C  EC92  F012         	call	_Train_Path
  3489  001480  0900               	iorlw	0
  3490  001482  A4D8               	btfss	status,2,c
  3491  001484  D1CE               	goto	l9154
  3492                           
  3493                           ;State_Mchn.c: 673: {
  3494                           ;State_Mchn.c: 674: Switch_Program = 0;
  3495  001486  0E00               	movlw	0
  3496  001488  0100               	movlb	0	; () banked
  3497  00148A  6FAB               	movwf	_Switch_Program& (0+255),b
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;State_Mchn.c: 675: Eeprom_Store();
  3501  00148C  EC89  F01A         	call	_Eeprom_Store	;wreg free
  3502  001490  D7CB               	goto	l8952
  3503  001492                     l8988:
  3504  001492  0100               	movlb	0	; () banked
  3505  001494  51AB               	movf	_Switch_Program& (0+255),w,b
  3506                           
  3507                           ; Switch size 1, requested type "space"
  3508                           ; Number of cases is 4, Range of values is 0 to 3
  3509                           ; switch strategies available:
  3510                           ; Name         Instructions Cycles
  3511                           ; simple_byte           13     7 (average)
  3512                           ;	Chosen strategy is simple_byte
  3513  001496  0A00               	xorlw	0	; case 0
  3514  001498  B4D8               	btfsc	status,2,c
  3515  00149A  D7B8               	goto	l8946
  3516  00149C  0A01               	xorlw	1	; case 1
  3517  00149E  B4D8               	btfsc	status,2,c
  3518  0014A0  D7CB               	goto	l8956
  3519  0014A2  0A03               	xorlw	3	; case 2
  3520  0014A4  B4D8               	btfsc	status,2,c
  3521  0014A6  D7D7               	goto	l8966
  3522  0014A8  0A01               	xorlw	1	; case 3
  3523  0014AA  B4D8               	btfsc	status,2,c
  3524  0014AC  D7E3               	goto	l8976
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;State_Mchn.c: 687: switch(Switch_Activate_Controls)
  3528  0014AE  D1B9               	goto	l9154
  3529  0014B0                     l8990:
  3530                           
  3531                           ; BSR set to: 0
  3532  0014B0  0E24               	movlw	36
  3533  0014B2  EC38  F01E         	call	_GETxAPIxVAL
  3534  0014B6  0100               	movlb	0	; () banked
  3535  0014B8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3536  0014BA  0100               	movlb	0	; () banked
  3537  0014BC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3538  0014BE  B4D8               	btfsc	status,2,c
  3539  0014C0  D010               	goto	l8998
  3540                           
  3541                           ; BSR set to: 0
  3542  0014C2  0E26               	movlw	38
  3543  0014C4  EC38  F01E         	call	_GETxAPIxVAL
  3544  0014C8  0100               	movlb	0	; () banked
  3545  0014CA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3546  0014CC  0100               	movlb	0	; () banked
  3547  0014CE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3548  0014D0  B4D8               	btfsc	status,2,c
  3549  0014D2  D007               	goto	l8998
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;State_Mchn.c: 690: {
  3553                           ;State_Mchn.c: 691: Switch_Activate_Controls = 1;
  3554  0014D4  0E01               	movlw	1
  3555  0014D6  0100               	movlb	0	; () banked
  3556  0014D8  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;State_Mchn.c: 692: Red_Led(3);
  3560  0014DA  0E03               	movlw	3
  3561  0014DC  ECFA  F01B         	call	_Red_Led
  3562                           
  3563                           ;State_Mchn.c: 693: }
  3564  0014E0  D1B9               	goto	l9160
  3565  0014E2                     l8998:
  3566                           
  3567                           ;State_Mchn.c: 694: else
  3568                           ;State_Mchn.c: 695: {
  3569                           ;State_Mchn.c: 696: Switch_Activate_Controls = 0;
  3570  0014E2  0E00               	movlw	0
  3571  0014E4  0100               	movlb	0	; () banked
  3572  0014E6  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;State_Mchn.c: 697: Red_Led(0);
  3576  0014E8  0E00               	movlw	0
  3577  0014EA  ECFA  F01B         	call	_Red_Led
  3578                           
  3579                           ;State_Mchn.c: 698: }
  3580                           ;State_Mchn.c: 699: break;
  3581  0014EE  D1B2               	goto	l9160
  3582  0014F0                     l9002:
  3583  0014F0  0E24               	movlw	36
  3584  0014F2  EC38  F01E         	call	_GETxAPIxVAL
  3585  0014F6  0100               	movlb	0	; () banked
  3586  0014F8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3587  0014FA  0100               	movlb	0	; () banked
  3588  0014FC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3589  0014FE  A4D8               	btfss	status,2,c
  3590  001500  D010               	goto	l9010
  3591                           
  3592                           ; BSR set to: 0
  3593  001502  0E26               	movlw	38
  3594  001504  EC38  F01E         	call	_GETxAPIxVAL
  3595  001508  0100               	movlb	0	; () banked
  3596  00150A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3597  00150C  0100               	movlb	0	; () banked
  3598  00150E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3599  001510  A4D8               	btfss	status,2,c
  3600  001512  D007               	goto	l9010
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;State_Mchn.c: 702: {
  3604                           ;State_Mchn.c: 703: Switch_Activate_Controls = 2;
  3605  001514  0E02               	movlw	2
  3606  001516  0100               	movlb	0	; () banked
  3607  001518  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;State_Mchn.c: 704: Red_Led(3);
  3611  00151A  0E03               	movlw	3
  3612  00151C  ECFA  F01B         	call	_Red_Led
  3613                           
  3614                           ;State_Mchn.c: 705: }
  3615  001520  D006               	goto	l9014
  3616  001522                     l9010:
  3617                           
  3618                           ;State_Mchn.c: 706: else
  3619                           ;State_Mchn.c: 707: {
  3620                           ;State_Mchn.c: 708: Switch_Activate_Controls = 1;
  3621  001522  0E01               	movlw	1
  3622  001524  0100               	movlb	0	; () banked
  3623  001526  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;State_Mchn.c: 709: Red_Led(3);
  3627  001528  0E03               	movlw	3
  3628  00152A  ECFA  F01B         	call	_Red_Led
  3629  00152E                     l9014:
  3630                           
  3631                           ;State_Mchn.c: 710: }
  3632                           ;State_Mchn.c: 711: Activate_Controls_Counter = 10000;
  3633  00152E  0E27               	movlw	39
  3634  001530  0100               	movlb	0	; () banked
  3635  001532  6F98               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3636  001534  0E10               	movlw	16
  3637  001536  6F97               	movwf	_Activate_Controls_Counter& (0+255),b
  3638                           
  3639                           ;State_Mchn.c: 712: break;
  3640  001538  D18D               	goto	l9160
  3641  00153A                     l9016:
  3642                           
  3643                           ; BSR set to: 0
  3644  00153A  0E24               	movlw	36
  3645  00153C  EC38  F01E         	call	_GETxAPIxVAL
  3646  001540  0100               	movlb	0	; () banked
  3647  001542  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3648  001544  0100               	movlb	0	; () banked
  3649  001546  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3650  001548  A4D8               	btfss	status,2,c
  3651  00154A  D020               	goto	l9026
  3652                           
  3653                           ; BSR set to: 0
  3654  00154C  0E26               	movlw	38
  3655  00154E  EC38  F01E         	call	_GETxAPIxVAL
  3656  001552  0100               	movlb	0	; () banked
  3657  001554  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3658  001556  0100               	movlb	0	; () banked
  3659  001558  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3660  00155A  A4D8               	btfss	status,2,c
  3661  00155C  D017               	goto	l9026
  3662                           
  3663                           ; BSR set to: 0
  3664  00155E  0E25               	movlw	37
  3665  001560  EC38  F01E         	call	_GETxAPIxVAL
  3666  001564  0100               	movlb	0	; () banked
  3667  001566  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3668  001568  0100               	movlb	0	; () banked
  3669  00156A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3670  00156C  A4D8               	btfss	status,2,c
  3671  00156E  D00E               	goto	l9026
  3672                           
  3673                           ; BSR set to: 0
  3674  001570  0E23               	movlw	35
  3675  001572  EC38  F01E         	call	_GETxAPIxVAL
  3676  001576  0100               	movlb	0	; () banked
  3677  001578  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3678  00157A  0100               	movlb	0	; () banked
  3679  00157C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3680  00157E  A4D8               	btfss	status,2,c
  3681  001580  D005               	goto	l9026
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;State_Mchn.c: 715: {
  3685                           ;State_Mchn.c: 716: Activate_Controls_Counter--;
  3686  001582  0100               	movlb	0	; () banked
  3687  001584  0797               	decf	_Activate_Controls_Counter& (0+255),f,b
  3688  001586  A0D8               	btfss	status,0,c
  3689  001588  0798               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  3690                           
  3691                           ;State_Mchn.c: 717: }
  3692  00158A  D005               	goto	l9028
  3693  00158C                     l9026:
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;State_Mchn.c: 718: else
  3697                           ;State_Mchn.c: 719: {
  3698                           ;State_Mchn.c: 720: Activate_Controls_Counter = 10000;
  3699  00158C  0E27               	movlw	39
  3700  00158E  0100               	movlb	0	; () banked
  3701  001590  6F98               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3702  001592  0E10               	movlw	16
  3703  001594  6F97               	movwf	_Activate_Controls_Counter& (0+255),b
  3704  001596                     l9028:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;State_Mchn.c: 721: }
  3708                           ;State_Mchn.c: 723: Red_Led(3);
  3709  001596  0E03               	movlw	3
  3710  001598  ECFA  F01B         	call	_Red_Led
  3711                           
  3712                           ;State_Mchn.c: 725: switch(GETxAPIxVAL(0x23))
  3713  00159C  D050               	goto	l9058
  3714  00159E                     l9030:
  3715  00159E  0E00               	movlw	0
  3716  0015A0  D03E               	goto	L17
  3717  0015A2                     l9032:
  3718                           
  3719                           ; BSR set to: 0
  3720  0015A2  0E17               	movlw	23
  3721  0015A4  EC38  F01E         	call	_GETxAPIxVAL
  3722  0015A8  C060  F08B         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3723  0015AC  C061  F08C         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3724  0015B0  0E16               	movlw	22
  3725  0015B2  EC38  F01E         	call	_GETxAPIxVAL
  3726  0015B6  0100               	movlb	0	; () banked
  3727  0015B8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3728  0015BA  0100               	movlb	0	; () banked
  3729  0015BC  5D8B               	subwf	??_Update_StateMchn& (0+255),w,b
  3730  0015BE  0100               	movlb	0	; () banked
  3731  0015C0  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3732  0015C2  0100               	movlb	0	; () banked
  3733  0015C4  598C               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  3734  0015C6  A0D8               	btfss	status,0,c
  3735  0015C8  D003               	goto	l9036
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;State_Mchn.c: 733: {
  3739                           ;State_Mchn.c: 734: DECRxAPIxVAL(0x17);
  3740  0015CA  0E17               	movlw	23
  3741  0015CC  ECCC  F01D         	call	_DECRxAPIxVAL
  3742  0015D0                     l9036:
  3743                           
  3744                           ;State_Mchn.c: 735: }
  3745                           ;State_Mchn.c: 736: if(GETxAPIxVAL(0x18) <= GETxAPIxVAL(0x15))
  3746  0015D0  0E15               	movlw	21
  3747  0015D2  EC38  F01E         	call	_GETxAPIxVAL
  3748  0015D6  C060  F08B         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3749  0015DA  C061  F08C         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3750  0015DE  0E18               	movlw	24
  3751  0015E0  EC38  F01E         	call	_GETxAPIxVAL
  3752  0015E4  0100               	movlb	0	; () banked
  3753  0015E6  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3754  0015E8  0100               	movlb	0	; () banked
  3755  0015EA  5D8B               	subwf	??_Update_StateMchn& (0+255),w,b
  3756  0015EC  0100               	movlb	0	; () banked
  3757  0015EE  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3758  0015F0  0100               	movlb	0	; () banked
  3759  0015F2  598C               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  3760  0015F4  A0D8               	btfss	status,0,c
  3761  0015F6  D003               	goto	l9040
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;State_Mchn.c: 737: {
  3765                           ;State_Mchn.c: 738: INCRxAPIxVAL(0x18);
  3766  0015F8  0E18               	movlw	24
  3767  0015FA  ECFA  F01D         	call	_INCRxAPIxVAL
  3768  0015FE                     l9040:
  3769                           
  3770                           ;State_Mchn.c: 739: }
  3771                           ;State_Mchn.c: 740: Switch_Adjust_LB = 1;
  3772  0015FE  0E01               	movlw	1
  3773  001600  D00E               	goto	L17
  3774  001602                     l9042:
  3775                           
  3776                           ; BSR set to: 0
  3777  001602  0100               	movlb	0	; () banked
  3778  001604  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  3779  001606  E105               	bnz	u8440
  3780  001608  0E14               	movlw	20
  3781  00160A  0100               	movlb	0	; () banked
  3782  00160C  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  3783  00160E  A0D8               	btfss	status,0,c
  3784  001610  D009               	goto	l9048
  3785  001612                     u8440:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;State_Mchn.c: 744: {
  3789                           ;State_Mchn.c: 745: Adjust_Counter = 0;
  3790  001612  0E00               	movlw	0
  3791  001614  0100               	movlb	0	; () banked
  3792  001616  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  3793  001618  0E00               	movlw	0
  3794  00161A  6F99               	movwf	_Adjust_Counter& (0+255),b
  3795  00161C  D7C0               	goto	l9030
  3796  00161E                     L17:
  3797  00161E  0100               	movlb	0	; () banked
  3798  001620  6FA3               	movwf	_Switch_Adjust_LB& (0+255),b
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;State_Mchn.c: 748: }
  3802                           
  3803                           ;State_Mchn.c: 747: break;
  3804  001622  D059               	goto	l9088
  3805  001624                     l9048:
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;State_Mchn.c: 749: else {Adjust_Counter++;}
  3809  001624  0100               	movlb	0	; () banked
  3810  001626  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  3811  001628  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;State_Mchn.c: 750: break;
  3815  00162A  D055               	goto	l9088
  3816  00162C                     l9054:
  3817                           
  3818                           ; BSR set to: 0
  3819  00162C  0100               	movlb	0	; () banked
  3820  00162E  51A3               	movf	_Switch_Adjust_LB& (0+255),w,b
  3821                           
  3822                           ; Switch size 1, requested type "space"
  3823                           ; Number of cases is 2, Range of values is 0 to 1
  3824                           ; switch strategies available:
  3825                           ; Name         Instructions Cycles
  3826                           ; simple_byte            7     4 (average)
  3827                           ;	Chosen strategy is simple_byte
  3828  001630  0A00               	xorlw	0	; case 0
  3829  001632  B4D8               	btfsc	status,2,c
  3830  001634  D7B6               	goto	l9032
  3831  001636  0A01               	xorlw	1	; case 1
  3832  001638  B4D8               	btfsc	status,2,c
  3833  00163A  D7E3               	goto	l9042
  3834  00163C  D7B0               	goto	l9030
  3835  00163E                     l9058:
  3836  00163E  0E23               	movlw	35
  3837  001640  EC38  F01E         	call	_GETxAPIxVAL
  3838                           
  3839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3840                           ; Switch size 1, requested type "space"
  3841                           ; Number of cases is 1, Range of values is 0 to 0
  3842                           ; switch strategies available:
  3843                           ; Name         Instructions Cycles
  3844                           ; simple_byte            4     3 (average)
  3845                           ;	Chosen strategy is simple_byte
  3846  001644  0100               	movlb	0	; () banked
  3847  001646  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3848  001648  0A00               	xorlw	0	; case 0
  3849  00164A  A4D8               	btfss	status,2,c
  3850  00164C  D044               	goto	l9088
  3851                           
  3852                           ; BSR set to: 0
  3853                           ; Switch size 1, requested type "space"
  3854                           ; Number of cases is 2, Range of values is 0 to 1
  3855                           ; switch strategies available:
  3856                           ; Name         Instructions Cycles
  3857                           ; simple_byte            7     4 (average)
  3858                           ;	Chosen strategy is simple_byte
  3859  00164E  0100               	movlb	0	; () banked
  3860  001650  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3861  001652  0A00               	xorlw	0	; case 0
  3862  001654  B4D8               	btfsc	status,2,c
  3863  001656  D7A3               	goto	l9030
  3864  001658  0A01               	xorlw	1	; case 1
  3865  00165A  B4D8               	btfsc	status,2,c
  3866  00165C  D7E7               	goto	l9054
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;State_Mchn.c: 761: switch(GETxAPIxVAL(0x24))
  3870  00165E  D03B               	goto	l9088
  3871  001660                     l9060:
  3872                           
  3873                           ; BSR set to: 0
  3874  001660  0E00               	movlw	0
  3875  001662  D029               	goto	L19
  3876  001664                     l9062:
  3877                           
  3878                           ; BSR set to: 0
  3879  001664  0E17               	movlw	23
  3880  001666  EC38  F01E         	call	_GETxAPIxVAL
  3881  00166A  0100               	movlb	0	; () banked
  3882  00166C  2960               	incf	?_GETxAPIxVAL& (0+255),w,b
  3883  00166E  0E03               	movlw	3
  3884  001670  0100               	movlb	0	; () banked
  3885  001672  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  3886  001674  B0D8               	btfsc	status,0,c
  3887  001676  D003               	goto	l9066
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;State_Mchn.c: 769: {
  3891                           ;State_Mchn.c: 770: INCRxAPIxVAL(0x17);
  3892  001678  0E17               	movlw	23
  3893  00167A  ECFA  F01D         	call	_INCRxAPIxVAL
  3894  00167E                     l9066:
  3895                           
  3896                           ;State_Mchn.c: 771: }
  3897                           ;State_Mchn.c: 772: if(GETxAPIxVAL(0x18) >= 1)
  3898  00167E  0E18               	movlw	24
  3899  001680  EC38  F01E         	call	_GETxAPIxVAL
  3900  001684  0100               	movlb	0	; () banked
  3901  001686  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3902  001688  0100               	movlb	0	; () banked
  3903  00168A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3904  00168C  B4D8               	btfsc	status,2,c
  3905  00168E  D003               	goto	l9070
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;State_Mchn.c: 773: {
  3909                           ;State_Mchn.c: 774: DECRxAPIxVAL(0x18);
  3910  001690  0E18               	movlw	24
  3911  001692  ECCC  F01D         	call	_DECRxAPIxVAL
  3912  001696                     l9070:
  3913                           
  3914                           ;State_Mchn.c: 775: }
  3915                           ;State_Mchn.c: 776: Switch_Adjust_LF = 1;
  3916  001696  0E01               	movlw	1
  3917  001698  D00E               	goto	L19
  3918  00169A                     l9072:
  3919                           
  3920                           ; BSR set to: 0
  3921  00169A  0100               	movlb	0	; () banked
  3922  00169C  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  3923  00169E  E105               	bnz	u8470
  3924  0016A0  0E14               	movlw	20
  3925  0016A2  0100               	movlb	0	; () banked
  3926  0016A4  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  3927  0016A6  A0D8               	btfss	status,0,c
  3928  0016A8  D009               	goto	l9078
  3929  0016AA                     u8470:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;State_Mchn.c: 780: {
  3933                           ;State_Mchn.c: 781: Adjust_Counter = 0;
  3934  0016AA  0E00               	movlw	0
  3935  0016AC  0100               	movlb	0	; () banked
  3936  0016AE  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  3937  0016B0  0E00               	movlw	0
  3938  0016B2  6F99               	movwf	_Adjust_Counter& (0+255),b
  3939  0016B4  D7D5               	goto	l9060
  3940  0016B6                     L19:
  3941  0016B6  0100               	movlb	0	; () banked
  3942  0016B8  6FA4               	movwf	_Switch_Adjust_LF& (0+255),b
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;State_Mchn.c: 784: }
  3946                           
  3947                           ;State_Mchn.c: 783: break;
  3948  0016BA  D04E               	goto	l9114
  3949  0016BC                     l9078:
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;State_Mchn.c: 785: else {Adjust_Counter++;}
  3953  0016BC  0100               	movlb	0	; () banked
  3954  0016BE  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  3955  0016C0  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;State_Mchn.c: 786: break;
  3959  0016C2  D04A               	goto	l9114
  3960  0016C4                     l9084:
  3961                           
  3962                           ; BSR set to: 0
  3963  0016C4  0100               	movlb	0	; () banked
  3964  0016C6  51A4               	movf	_Switch_Adjust_LF& (0+255),w,b
  3965                           
  3966                           ; Switch size 1, requested type "space"
  3967                           ; Number of cases is 2, Range of values is 0 to 1
  3968                           ; switch strategies available:
  3969                           ; Name         Instructions Cycles
  3970                           ; simple_byte            7     4 (average)
  3971                           ;	Chosen strategy is simple_byte
  3972  0016C8  0A00               	xorlw	0	; case 0
  3973  0016CA  B4D8               	btfsc	status,2,c
  3974  0016CC  D7CB               	goto	l9062
  3975  0016CE  0A01               	xorlw	1	; case 1
  3976  0016D0  B4D8               	btfsc	status,2,c
  3977  0016D2  D7E3               	goto	l9072
  3978  0016D4  D7C5               	goto	l9060
  3979  0016D6                     l9088:
  3980                           
  3981                           ; BSR set to: 0
  3982  0016D6  0E24               	movlw	36
  3983  0016D8  EC38  F01E         	call	_GETxAPIxVAL
  3984                           
  3985                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3986                           ; Switch size 1, requested type "space"
  3987                           ; Number of cases is 1, Range of values is 0 to 0
  3988                           ; switch strategies available:
  3989                           ; Name         Instructions Cycles
  3990                           ; simple_byte            4     3 (average)
  3991                           ;	Chosen strategy is simple_byte
  3992  0016DC  0100               	movlb	0	; () banked
  3993  0016DE  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3994  0016E0  0A00               	xorlw	0	; case 0
  3995  0016E2  A4D8               	btfss	status,2,c
  3996  0016E4  D039               	goto	l9114
  3997                           
  3998                           ; BSR set to: 0
  3999                           ; Switch size 1, requested type "space"
  4000                           ; Number of cases is 2, Range of values is 0 to 1
  4001                           ; switch strategies available:
  4002                           ; Name         Instructions Cycles
  4003                           ; simple_byte            7     4 (average)
  4004                           ;	Chosen strategy is simple_byte
  4005  0016E6  0100               	movlb	0	; () banked
  4006  0016E8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4007  0016EA  0A00               	xorlw	0	; case 0
  4008  0016EC  B4D8               	btfsc	status,2,c
  4009  0016EE  D7B8               	goto	l9060
  4010  0016F0  0A01               	xorlw	1	; case 1
  4011  0016F2  B4D8               	btfsc	status,2,c
  4012  0016F4  D7E7               	goto	l9084
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;State_Mchn.c: 796: switch(GETxAPIxVAL(0x25))
  4016  0016F6  D030               	goto	l9114
  4017  0016F8                     l9090:
  4018                           
  4019                           ; BSR set to: 0
  4020  0016F8  0E00               	movlw	0
  4021  0016FA  D01E               	goto	L21
  4022  0016FC                     l9092:
  4023                           
  4024                           ; BSR set to: 0
  4025  0016FC  0E19               	movlw	25
  4026  0016FE  EC38  F01E         	call	_GETxAPIxVAL
  4027  001702  0100               	movlb	0	; () banked
  4028  001704  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4029  001706  E108               	bnz	l9096
  4030  001708  0EFB               	movlw	251
  4031  00170A  0100               	movlb	0	; () banked
  4032  00170C  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  4033  00170E  B0D8               	btfsc	status,0,c
  4034  001710  D003               	goto	l9096
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;State_Mchn.c: 804: {
  4038                           ;State_Mchn.c: 805: INCRxAPIxVAL(0x19);
  4039  001712  0E19               	movlw	25
  4040  001714  ECFA  F01D         	call	_INCRxAPIxVAL
  4041  001718                     l9096:
  4042                           
  4043                           ;State_Mchn.c: 806: }
  4044                           ;State_Mchn.c: 807: Switch_Adjust_RB = 1;
  4045  001718  0E01               	movlw	1
  4046  00171A  D00E               	goto	L21
  4047  00171C                     l9098:
  4048                           
  4049                           ; BSR set to: 0
  4050  00171C  0100               	movlb	0	; () banked
  4051  00171E  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  4052  001720  E105               	bnz	u8490
  4053  001722  0E14               	movlw	20
  4054  001724  0100               	movlb	0	; () banked
  4055  001726  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  4056  001728  A0D8               	btfss	status,0,c
  4057  00172A  D009               	goto	l9104
  4058  00172C                     u8490:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;State_Mchn.c: 811: {
  4062                           ;State_Mchn.c: 812: Adjust_Counter = 0;
  4063  00172C  0E00               	movlw	0
  4064  00172E  0100               	movlb	0	; () banked
  4065  001730  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  4066  001732  0E00               	movlw	0
  4067  001734  6F99               	movwf	_Adjust_Counter& (0+255),b
  4068  001736  D7E0               	goto	l9090
  4069  001738                     L21:
  4070  001738  0100               	movlb	0	; () banked
  4071  00173A  6FA5               	movwf	_Switch_Adjust_RB& (0+255),b
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;State_Mchn.c: 815: }
  4075                           
  4076                           ;State_Mchn.c: 814: break;
  4077  00173C  D04C               	goto	l9140
  4078  00173E                     l9104:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;State_Mchn.c: 816: else {Adjust_Counter++;}
  4082  00173E  0100               	movlb	0	; () banked
  4083  001740  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  4084  001742  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;State_Mchn.c: 817: break;
  4088  001744  D048               	goto	l9140
  4089  001746                     l9110:
  4090                           
  4091                           ; BSR set to: 0
  4092  001746  0100               	movlb	0	; () banked
  4093  001748  51A5               	movf	_Switch_Adjust_RB& (0+255),w,b
  4094                           
  4095                           ; Switch size 1, requested type "space"
  4096                           ; Number of cases is 2, Range of values is 0 to 1
  4097                           ; switch strategies available:
  4098                           ; Name         Instructions Cycles
  4099                           ; simple_byte            7     4 (average)
  4100                           ;	Chosen strategy is simple_byte
  4101  00174A  0A00               	xorlw	0	; case 0
  4102  00174C  B4D8               	btfsc	status,2,c
  4103  00174E  D7D6               	goto	l9092
  4104  001750  0A01               	xorlw	1	; case 1
  4105  001752  B4D8               	btfsc	status,2,c
  4106  001754  D7E3               	goto	l9098
  4107  001756  D7D0               	goto	l9090
  4108  001758                     l9114:
  4109                           
  4110                           ; BSR set to: 0
  4111  001758  0E25               	movlw	37
  4112  00175A  EC38  F01E         	call	_GETxAPIxVAL
  4113                           
  4114                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4115                           ; Switch size 1, requested type "space"
  4116                           ; Number of cases is 1, Range of values is 0 to 0
  4117                           ; switch strategies available:
  4118                           ; Name         Instructions Cycles
  4119                           ; simple_byte            4     3 (average)
  4120                           ;	Chosen strategy is simple_byte
  4121  00175E  0100               	movlb	0	; () banked
  4122  001760  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4123  001762  0A00               	xorlw	0	; case 0
  4124  001764  A4D8               	btfss	status,2,c
  4125  001766  D037               	goto	l9140
  4126                           
  4127                           ; BSR set to: 0
  4128                           ; Switch size 1, requested type "space"
  4129                           ; Number of cases is 2, Range of values is 0 to 1
  4130                           ; switch strategies available:
  4131                           ; Name         Instructions Cycles
  4132                           ; simple_byte            7     4 (average)
  4133                           ;	Chosen strategy is simple_byte
  4134  001768  0100               	movlb	0	; () banked
  4135  00176A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4136  00176C  0A00               	xorlw	0	; case 0
  4137  00176E  B4D8               	btfsc	status,2,c
  4138  001770  D7C3               	goto	l9090
  4139  001772  0A01               	xorlw	1	; case 1
  4140  001774  B4D8               	btfsc	status,2,c
  4141  001776  D7E7               	goto	l9110
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;State_Mchn.c: 828: switch(GETxAPIxVAL(0x26))
  4145  001778  D02E               	goto	l9140
  4146  00177A                     l9116:
  4147                           
  4148                           ; BSR set to: 0
  4149  00177A  0E00               	movlw	0
  4150  00177C  D01C               	goto	L23
  4151  00177E                     l9118:
  4152                           
  4153                           ; BSR set to: 0
  4154  00177E  0E19               	movlw	25
  4155  001780  EC38  F01E         	call	_GETxAPIxVAL
  4156  001784  0100               	movlb	0	; () banked
  4157  001786  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4158  001788  0100               	movlb	0	; () banked
  4159  00178A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4160  00178C  B4D8               	btfsc	status,2,c
  4161  00178E  D003               	goto	l9122
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;State_Mchn.c: 836: {
  4165                           ;State_Mchn.c: 837: DECRxAPIxVAL(0x19);
  4166  001790  0E19               	movlw	25
  4167  001792  ECCC  F01D         	call	_DECRxAPIxVAL
  4168  001796                     l9122:
  4169                           
  4170                           ;State_Mchn.c: 838: }
  4171                           ;State_Mchn.c: 839: Switch_Adjust_RF = 1;
  4172  001796  0E01               	movlw	1
  4173  001798  D00E               	goto	L23
  4174  00179A                     l9124:
  4175                           
  4176                           ; BSR set to: 0
  4177  00179A  0100               	movlb	0	; () banked
  4178  00179C  519A               	movf	(_Adjust_Counter+1)& (0+255),w,b
  4179  00179E  E105               	bnz	u8510
  4180  0017A0  0E14               	movlw	20
  4181  0017A2  0100               	movlb	0	; () banked
  4182  0017A4  5D99               	subwf	_Adjust_Counter& (0+255),w,b
  4183  0017A6  A0D8               	btfss	status,0,c
  4184  0017A8  D009               	goto	l9130
  4185  0017AA                     u8510:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;State_Mchn.c: 843: {
  4189                           ;State_Mchn.c: 844: Adjust_Counter = 0;
  4190  0017AA  0E00               	movlw	0
  4191  0017AC  0100               	movlb	0	; () banked
  4192  0017AE  6F9A               	movwf	(_Adjust_Counter+1)& (0+255),b
  4193  0017B0  0E00               	movlw	0
  4194  0017B2  6F99               	movwf	_Adjust_Counter& (0+255),b
  4195  0017B4  D7E2               	goto	l9116
  4196  0017B6                     L23:
  4197  0017B6  0100               	movlb	0	; () banked
  4198  0017B8  6FA6               	movwf	_Switch_Adjust_RF& (0+255),b
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;State_Mchn.c: 847: }
  4202                           
  4203                           ;State_Mchn.c: 846: break;
  4204  0017BA  D01D               	goto	l9142
  4205  0017BC                     l9130:
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;State_Mchn.c: 848: else {Adjust_Counter++;}
  4209  0017BC  0100               	movlb	0	; () banked
  4210  0017BE  4B99               	infsnz	_Adjust_Counter& (0+255),f,b
  4211  0017C0  2B9A               	incf	(_Adjust_Counter+1)& (0+255),f,b
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;State_Mchn.c: 849: break;
  4215  0017C2  D019               	goto	l9142
  4216  0017C4                     l9136:
  4217                           
  4218                           ; BSR set to: 0
  4219  0017C4  0100               	movlb	0	; () banked
  4220  0017C6  51A6               	movf	_Switch_Adjust_RF& (0+255),w,b
  4221                           
  4222                           ; Switch size 1, requested type "space"
  4223                           ; Number of cases is 2, Range of values is 0 to 1
  4224                           ; switch strategies available:
  4225                           ; Name         Instructions Cycles
  4226                           ; simple_byte            7     4 (average)
  4227                           ;	Chosen strategy is simple_byte
  4228  0017C8  0A00               	xorlw	0	; case 0
  4229  0017CA  B4D8               	btfsc	status,2,c
  4230  0017CC  D7D8               	goto	l9118
  4231  0017CE  0A01               	xorlw	1	; case 1
  4232  0017D0  B4D8               	btfsc	status,2,c
  4233  0017D2  D7E3               	goto	l9124
  4234  0017D4  D7D2               	goto	l9116
  4235  0017D6                     l9140:
  4236                           
  4237                           ; BSR set to: 0
  4238  0017D6  0E26               	movlw	38
  4239  0017D8  EC38  F01E         	call	_GETxAPIxVAL
  4240                           
  4241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4242                           ; Switch size 1, requested type "space"
  4243                           ; Number of cases is 1, Range of values is 0 to 0
  4244                           ; switch strategies available:
  4245                           ; Name         Instructions Cycles
  4246                           ; simple_byte            4     3 (average)
  4247                           ;	Chosen strategy is simple_byte
  4248  0017DC  0100               	movlb	0	; () banked
  4249  0017DE  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4250  0017E0  0A00               	xorlw	0	; case 0
  4251  0017E2  A4D8               	btfss	status,2,c
  4252  0017E4  D008               	goto	l9142
  4253                           
  4254                           ; BSR set to: 0
  4255                           ; Switch size 1, requested type "space"
  4256                           ; Number of cases is 2, Range of values is 0 to 1
  4257                           ; switch strategies available:
  4258                           ; Name         Instructions Cycles
  4259                           ; simple_byte            7     4 (average)
  4260                           ;	Chosen strategy is simple_byte
  4261  0017E6  0100               	movlb	0	; () banked
  4262  0017E8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4263  0017EA  0A00               	xorlw	0	; case 0
  4264  0017EC  B4D8               	btfsc	status,2,c
  4265  0017EE  D7C5               	goto	l9116
  4266  0017F0  0A01               	xorlw	1	; case 1
  4267  0017F2  B4D8               	btfsc	status,2,c
  4268  0017F4  D7E7               	goto	l9136
  4269  0017F6                     l9142:
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;State_Mchn.c: 858: if(Activate_Controls_Counter <= 1)
  4273  0017F6  0100               	movlb	0	; () banked
  4274  0017F8  5198               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  4275  0017FA  E12C               	bnz	l9160
  4276  0017FC  0E02               	movlw	2
  4277  0017FE  0100               	movlb	0	; () banked
  4278  001800  5D97               	subwf	_Activate_Controls_Counter& (0+255),w,b
  4279  001802  B0D8               	btfsc	status,0,c
  4280  001804  D027               	goto	l9160
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;State_Mchn.c: 859: {
  4284                           ;State_Mchn.c: 860: Switch_Activate_Controls = 0;
  4285  001806  0E00               	movlw	0
  4286  001808  0100               	movlb	0	; () banked
  4287  00180A  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;State_Mchn.c: 861: Red_Led(0);
  4291  00180C  0E00               	movlw	0
  4292  00180E  ECFA  F01B         	call	_Red_Led
  4293                           
  4294                           ;State_Mchn.c: 862: }
  4295                           ;State_Mchn.c: 863: break;
  4296  001812  D020               	goto	l9160
  4297  001814                     l9148:
  4298  001814  0E00               	movlw	0
  4299  001816  0100               	movlb	0	; () banked
  4300  001818  6FA2               	movwf	_Switch_Activate_Controls& (0+255),b
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;State_Mchn.c: 866: Red_Led(0);
  4304  00181A  0E00               	movlw	0
  4305  00181C  ECFA  F01B         	call	_Red_Led
  4306                           
  4307                           ;State_Mchn.c: 868: }
  4308                           
  4309                           ;State_Mchn.c: 867: break;
  4310  001820  D019               	goto	l9160
  4311  001822                     l9154:
  4312  001822  0100               	movlb	0	; () banked
  4313  001824  51A2               	movf	_Switch_Activate_Controls& (0+255),w,b
  4314                           
  4315                           ; Switch size 1, requested type "space"
  4316                           ; Number of cases is 3, Range of values is 0 to 2
  4317                           ; switch strategies available:
  4318                           ; Name         Instructions Cycles
  4319                           ; simple_byte           10     6 (average)
  4320                           ;	Chosen strategy is simple_byte
  4321  001826  0A00               	xorlw	0	; case 0
  4322  001828  B4D8               	btfsc	status,2,c
  4323  00182A  D642               	goto	l8990
  4324  00182C  0A01               	xorlw	1	; case 1
  4325  00182E  B4D8               	btfsc	status,2,c
  4326  001830  D65F               	goto	l9002
  4327  001832  0A03               	xorlw	3	; case 2
  4328  001834  B4D8               	btfsc	status,2,c
  4329  001836  D681               	goto	l9016
  4330  001838  D7ED               	goto	l9148
  4331  00183A                     l9158:
  4332  00183A  0100               	movlb	0	; () banked
  4333  00183C  51A9               	movf	_Switch_Main& (0+255),w,b
  4334                           
  4335                           ; Switch size 1, requested type "space"
  4336                           ; Number of cases is 3, Range of values is 0 to 2
  4337                           ; switch strategies available:
  4338                           ; Name         Instructions Cycles
  4339                           ; simple_byte           10     6 (average)
  4340                           ;	Chosen strategy is simple_byte
  4341  00183E  0A00               	xorlw	0	; case 0
  4342  001840  B4D8               	btfsc	status,2,c
  4343  001842  EF69  F007         	goto	l8686
  4344  001846  0A01               	xorlw	1	; case 1
  4345  001848  B4D8               	btfsc	status,2,c
  4346  00184A  EF0F  F008         	goto	l8770
  4347  00184E  0A03               	xorlw	3	; case 2
  4348  001850  B4D8               	btfsc	status,2,c
  4349  001852  D61F               	goto	l8988
  4350  001854                     l9160:
  4351                           
  4352                           ;State_Mchn.c: 872: SETxAPIxVAL(0x3F, Switch_Main);
  4353  001854  C0A9  F07C         	movff	_Switch_Main,SETxAPIxVAL@value
  4354  001858  0100               	movlb	0	; () banked
  4355  00185A  6B7D               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  4356  00185C  0E3F               	movlw	63
  4357  00185E  EC23  F01D         	call	_SETxAPIxVAL
  4358  001862  0012               	return		;funcret
  4359  001864                     __end_of_Update_StateMchn:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           fsr1h	equ	0xFE2
  4369                           fsr1l	equ	0xFE1
  4370                           status	equ	0xFD8
  4371                           
  4372 ;; *************** function _Train_Path *****************
  4373 ;; Defined at:
  4374 ;;		line 890 in file "../State_Mchn.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;  From            1    wreg     unsigned char 
  4377 ;;  To              1   41[BANK0 ] unsigned char 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;  From            1   42[BANK0 ] unsigned char 
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      unsigned char 
  4382 ;; Registers used:
  4383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4389 ;;      Params:         0       1       0       0       0       0       0       0       0
  4390 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4391 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4392 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4393 ;;Total ram usage:        2 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    9
  4396 ;; This function calls:
  4397 ;;		_GETxAPIxVAL
  4398 ;;		_Junction
  4399 ;;		_Left_Mountain_From_The_Left
  4400 ;;		_Left_Mountain_From_The_Right
  4401 ;;		_Right_Mountain_From_The_Left
  4402 ;;		_Right_Mountain_From_The_Right
  4403 ;;		_SETxAPIxVAL
  4404 ;;		_Train_Move_Left_Brake
  4405 ;;		_Train_Move_Left_Start
  4406 ;;		_Train_Move_Right_Brake
  4407 ;;		_Train_Move_Right_Start
  4408 ;; This function is called by:
  4409 ;;		_Update_StateMchn
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text2
  4414  002524                     __ptext2:
  4415                           	opt stack 0
  4416  002524                     _Train_Path:
  4417                           	opt stack 20
  4418                           
  4419                           ;incstack = 0
  4420                           ;Train_Path@From stored from wreg
  4421  002524  0100               	movlb	0	; () banked
  4422  002526  6F8A               	movwf	Train_Path@From& (0+255),b
  4423                           
  4424                           ;State_Mchn.c: 892: static char Return_Val = 1;
  4425                           ;State_Mchn.c: 894: SETxAPIxVAL(0x3D, From);
  4426  002528  C08A  F07C         	movff	Train_Path@From,SETxAPIxVAL@value
  4427  00252C  0100               	movlb	0	; () banked
  4428  00252E  6B7D               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  4429  002530  0E3D               	movlw	61
  4430  002532  EC23  F01D         	call	_SETxAPIxVAL
  4431                           
  4432                           ;State_Mchn.c: 895: SETxAPIxVAL(0x3E, To);
  4433  002536  C089  F07C         	movff	Train_Path@To,SETxAPIxVAL@value
  4434  00253A  0100               	movlb	0	; () banked
  4435  00253C  6B7D               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  4436  00253E  0E3E               	movlw	62
  4437  002540  EC23  F01D         	call	_SETxAPIxVAL
  4438                           
  4439                           ;State_Mchn.c: 897: switch(Switch_Train_Path)
  4440  002544  D1A1               	goto	l8284
  4441  002546                     l8076:
  4442  002546  0E00               	movlw	0
  4443  002548  0100               	movlb	0	; () banked
  4444  00254A  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4445  00254C  0E01               	movlw	1
  4446  00254E  ECB8  F015         	call	_Junction
  4447  002552  0900               	iorlw	0
  4448  002554  B4D8               	btfsc	status,2,c
  4449  002556  D01B               	goto	l8090
  4450  002558                     l456:
  4451                           
  4452                           ;State_Mchn.c: 905: }
  4453                           ;State_Mchn.c: 906: Return_Val = 1;
  4454  002558  0E01               	movlw	1
  4455  00255A                     L55:
  4456  00255A  0100               	movlb	0	; () banked
  4457  00255C  6FC2               	movwf	Train_Path@Return_Val& (0+255),b
  4458                           
  4459                           ;State_Mchn.c: 907: break;
  4460  00255E  D1BE               	goto	l8286
  4461  002560                     l8080:
  4462                           
  4463                           ; BSR set to: 0
  4464  002560  0E01               	movlw	1
  4465  002562  0100               	movlb	0	; () banked
  4466  002564  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4467  002566  0E01               	movlw	1
  4468  002568  ECB8  F015         	call	_Junction
  4469  00256C  D7F2               	goto	L74
  4470  00256E                     l8084:
  4471                           
  4472                           ; BSR set to: 0
  4473  00256E  0E01               	movlw	1
  4474  002570  0100               	movlb	0	; () banked
  4475  002572  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4476  002574  0E00               	movlw	0
  4477  002576  ECB8  F015         	call	_Junction
  4478  00257A  D7EB               	goto	L74
  4479  00257C                     l8088:
  4480                           
  4481                           ; BSR set to: 0
  4482  00257C  0E00               	movlw	0
  4483  00257E  0100               	movlb	0	; () banked
  4484  002580  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4485  002582  0E00               	movlw	0
  4486  002584  ECB8  F015         	call	_Junction
  4487  002588  0900               	iorlw	0
  4488  00258A  A4D8               	btfss	status,2,c
  4489  00258C  D7E5               	goto	l456
  4490  00258E                     l8090:
  4491                           
  4492                           ;State_Mchn.c: 923: {
  4493                           ;State_Mchn.c: 924: Switch_Train_Path = 1;
  4494  00258E  0E01               	movlw	1
  4495  002590  D016               	goto	L56
  4496  002592                     l8094:
  4497  002592  0100               	movlb	0	; () banked
  4498  002594  518A               	movf	Train_Path@From& (0+255),w,b
  4499                           
  4500                           ; Switch size 1, requested type "space"
  4501                           ; Number of cases is 4, Range of values is 0 to 3
  4502                           ; switch strategies available:
  4503                           ; Name         Instructions Cycles
  4504                           ; simple_byte           13     7 (average)
  4505                           ;	Chosen strategy is simple_byte
  4506  002596  0A00               	xorlw	0	; case 0
  4507  002598  B4D8               	btfsc	status,2,c
  4508  00259A  D7E9               	goto	l8084
  4509  00259C  0A01               	xorlw	1	; case 1
  4510  00259E  B4D8               	btfsc	status,2,c
  4511  0025A0  D7ED               	goto	l8088
  4512  0025A2  0A03               	xorlw	3	; case 2
  4513  0025A4  B4D8               	btfsc	status,2,c
  4514  0025A6  D7CF               	goto	l8076
  4515  0025A8  0A01               	xorlw	1	; case 3
  4516  0025AA  B4D8               	btfsc	status,2,c
  4517  0025AC  D7D9               	goto	l8080
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;State_Mchn.c: 931: break;
  4521  0025AE  D196               	goto	l8286
  4522  0025B0                     l8096:
  4523                           
  4524                           ; BSR set to: 0
  4525  0025B0  0E00               	movlw	0
  4526  0025B2  0100               	movlb	0	; () banked
  4527  0025B4  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4528  0025B6  0E01               	movlw	1
  4529  0025B8  ECB8  F015         	call	_Junction
  4530  0025BC  D01A               	goto	L61
  4531  0025BE                     L56:
  4532  0025BE  0100               	movlb	0	; () banked
  4533  0025C0  6FAD               	movwf	_Switch_Train_Path& (0+255),b
  4534                           
  4535                           ;State_Mchn.c: 938: Return_Val = 1;
  4536  0025C2  0E01               	movlw	1
  4537  0025C4  0100               	movlb	0	; () banked
  4538  0025C6  6FC2               	movwf	Train_Path@Return_Val& (0+255),b
  4539  0025C8  D7C7               	goto	l456
  4540  0025CA                     l8100:
  4541                           
  4542                           ; BSR set to: 0
  4543  0025CA  0E01               	movlw	1
  4544  0025CC  0100               	movlb	0	; () banked
  4545  0025CE  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4546  0025D0  0E01               	movlw	1
  4547  0025D2  ECB8  F015         	call	_Junction
  4548  0025D6  D00D               	goto	L61
  4549  0025D8                     l8104:
  4550                           
  4551                           ; BSR set to: 0
  4552  0025D8  0E01               	movlw	1
  4553  0025DA  0100               	movlb	0	; () banked
  4554  0025DC  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4555  0025DE  0E00               	movlw	0
  4556  0025E0  ECB8  F015         	call	_Junction
  4557  0025E4  D006               	goto	L61
  4558  0025E6                     l8108:
  4559                           
  4560                           ; BSR set to: 0
  4561  0025E6  0E00               	movlw	0
  4562  0025E8  0100               	movlb	0	; () banked
  4563  0025EA  6F81               	movwf	Junction@Straight_Bend& (0+255),b
  4564  0025EC  0E00               	movlw	0
  4565  0025EE  ECB8  F015         	call	_Junction
  4566  0025F2                     L61:
  4567  0025F2  0900               	iorlw	0
  4568  0025F4  A4D8               	btfss	status,2,c
  4569  0025F6  D7B0               	goto	l456
  4570                           
  4571                           ;State_Mchn.c: 957: {
  4572                           ;State_Mchn.c: 958: Switch_Train_Path = 2;
  4573  0025F8  0E02               	movlw	2
  4574  0025FA  D7E1               	goto	L56
  4575  0025FC                     l8114:
  4576                           
  4577                           ; BSR set to: 0
  4578  0025FC  0100               	movlb	0	; () banked
  4579  0025FE  5189               	movf	Train_Path@To& (0+255),w,b
  4580                           
  4581                           ; Switch size 1, requested type "space"
  4582                           ; Number of cases is 4, Range of values is 0 to 3
  4583                           ; switch strategies available:
  4584                           ; Name         Instructions Cycles
  4585                           ; simple_byte           13     7 (average)
  4586                           ;	Chosen strategy is simple_byte
  4587  002600  0A00               	xorlw	0	; case 0
  4588  002602  B4D8               	btfsc	status,2,c
  4589  002604  D7E9               	goto	l8104
  4590  002606  0A01               	xorlw	1	; case 1
  4591  002608  B4D8               	btfsc	status,2,c
  4592  00260A  D7ED               	goto	l8108
  4593  00260C  0A03               	xorlw	3	; case 2
  4594  00260E  B4D8               	btfsc	status,2,c
  4595  002610  D7CF               	goto	l8096
  4596  002612  0A01               	xorlw	1	; case 3
  4597  002614  B4D8               	btfsc	status,2,c
  4598  002616  D7D9               	goto	l8100
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;State_Mchn.c: 965: break;
  4602  002618  D161               	goto	l8286
  4603  00261A                     l8116:
  4604                           
  4605                           ; BSR set to: 0
  4606  00261A  EC57  F016         	call	_Train_Move_Right_Start	;wreg free
  4607  00261E  D008               	goto	L64
  4608  002620                     l8120:
  4609                           
  4610                           ; BSR set to: 0
  4611  002620  EC57  F016         	call	_Train_Move_Right_Start	;wreg free
  4612  002624  D005               	goto	L64
  4613  002626                     l8124:
  4614                           
  4615                           ; BSR set to: 0
  4616  002626  ECF5  F016         	call	_Train_Move_Left_Start	;wreg free
  4617  00262A  D002               	goto	L64
  4618  00262C                     l8128:
  4619                           
  4620                           ; BSR set to: 0
  4621  00262C  ECF5  F016         	call	_Train_Move_Left_Start	;wreg free
  4622  002630                     L64:
  4623  002630  0900               	iorlw	0
  4624  002632  A4D8               	btfss	status,2,c
  4625  002634  D791               	goto	l456
  4626                           
  4627                           ;State_Mchn.c: 991: {
  4628                           ;State_Mchn.c: 992: Switch_Train_Path = 3;
  4629  002636  0E03               	movlw	3
  4630  002638  D7C2               	goto	L56
  4631  00263A                     l8134:
  4632                           
  4633                           ; BSR set to: 0
  4634  00263A  0100               	movlb	0	; () banked
  4635  00263C  5189               	movf	Train_Path@To& (0+255),w,b
  4636                           
  4637                           ; Switch size 1, requested type "space"
  4638                           ; Number of cases is 4, Range of values is 0 to 3
  4639                           ; switch strategies available:
  4640                           ; Name         Instructions Cycles
  4641                           ; simple_byte           13     7 (average)
  4642                           ;	Chosen strategy is simple_byte
  4643  00263E  0A00               	xorlw	0	; case 0
  4644  002640  B4D8               	btfsc	status,2,c
  4645  002642  D7F1               	goto	l8124
  4646  002644  0A01               	xorlw	1	; case 1
  4647  002646  B4D8               	btfsc	status,2,c
  4648  002648  D7F1               	goto	l8128
  4649  00264A  0A03               	xorlw	3	; case 2
  4650  00264C  B4D8               	btfsc	status,2,c
  4651  00264E  D7E5               	goto	l8116
  4652  002650  0A01               	xorlw	1	; case 3
  4653  002652  B4D8               	btfsc	status,2,c
  4654  002654  D7E5               	goto	l8120
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;State_Mchn.c: 999: break;
  4658  002656  D142               	goto	l8286
  4659  002658                     l8136:
  4660                           
  4661                           ; BSR set to: 0
  4662  002658  0E1C               	movlw	28
  4663  00265A  EC38  F01E         	call	_GETxAPIxVAL
  4664  00265E  0100               	movlb	0	; () banked
  4665  002660  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4666  002662  0100               	movlb	0	; () banked
  4667  002664  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4668  002666  B4D8               	btfsc	status,2,c
  4669  002668  D088               	goto	l8198
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;State_Mchn.c: 1006: else if(GETxAPIxVAL(0x29) == 1){
  4673                           
  4674                           ; BSR set to: 0
  4675                           
  4676                           ;State_Mchn.c: 1005: }
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;State_Mchn.c: 1004: Switch_Train_Path = 4;
  4680  00266A  0E29               	movlw	41
  4681  00266C  EC38  F01E         	call	_GETxAPIxVAL
  4682  002670  0100               	movlb	0	; () banked
  4683  002672  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4684  002674  0100               	movlb	0	; () banked
  4685  002676  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4686  002678  A4D8               	btfss	status,2,c
  4687  00267A  D002               	goto	l8144
  4688  00267C                     
  4689                           ; BSR set to: 0
  4690                           ;State_Mchn.c: 1007: Switch_Train_Path = 5;
  4691  00267C  0E05               	movlw	5
  4692  00267E  D049               	goto	L46
  4693  002680                     l8144:
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;State_Mchn.c: 1009: else if(GETxAPIxVAL(0x2A) == 1){
  4697  002680  0E2A               	movlw	42
  4698  002682  EC38  F01E         	call	_GETxAPIxVAL
  4699  002686  0100               	movlb	0	; () banked
  4700  002688  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4701  00268A  0100               	movlb	0	; () banked
  4702  00268C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4703  00268E  A4D8               	btfss	status,2,c
  4704  002690  D002               	goto	l8148
  4705  002692                     
  4706                           ; BSR set to: 0
  4707                           ;State_Mchn.c: 1010: Switch_Train_Path = 6;
  4708  002692  0E06               	movlw	6
  4709  002694  D03E               	goto	L46
  4710  002696                     l8148:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;State_Mchn.c: 1012: else if(GETxAPIxVAL(0x2C) == 1){
  4714  002696  0E2C               	movlw	44
  4715  002698  EC38  F01E         	call	_GETxAPIxVAL
  4716  00269C  0100               	movlb	0	; () banked
  4717  00269E  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4718  0026A0  0100               	movlb	0	; () banked
  4719  0026A2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4720  0026A4  A4D8               	btfss	status,2,c
  4721  0026A6  D002               	goto	l8152
  4722  0026A8                     
  4723                           ; BSR set to: 0
  4724                           ;State_Mchn.c: 1013: Switch_Train_Path = 7;
  4725  0026A8  0E07               	movlw	7
  4726  0026AA  D033               	goto	L46
  4727  0026AC                     l8152:
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;State_Mchn.c: 1015: else if(GETxAPIxVAL(0x2B) == 1){
  4731  0026AC  0E2B               	movlw	43
  4732  0026AE  EC38  F01E         	call	_GETxAPIxVAL
  4733  0026B2  0100               	movlb	0	; () banked
  4734  0026B4  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4735  0026B6  0100               	movlb	0	; () banked
  4736  0026B8  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4737  0026BA  A4D8               	btfss	status,2,c
  4738  0026BC  D74D               	goto	l456
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;State_Mchn.c: 1016: Switch_Train_Path = 8;
  4742  0026BE  0E08               	movlw	8
  4743  0026C0  D028               	goto	L46
  4744  0026C2                     l8156:
  4745                           
  4746                           ; BSR set to: 0
  4747  0026C2  0E1D               	movlw	29
  4748  0026C4  EC38  F01E         	call	_GETxAPIxVAL
  4749  0026C8  0100               	movlb	0	; () banked
  4750  0026CA  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4751  0026CC  0100               	movlb	0	; () banked
  4752  0026CE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4753  0026D0  B4D8               	btfsc	status,2,c
  4754  0026D2  D053               	goto	l8198
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;State_Mchn.c: 1023: else if(GETxAPIxVAL(0x29) == 1){
  4758                           
  4759                           ; BSR set to: 0
  4760                           
  4761                           ;State_Mchn.c: 1022: }
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;State_Mchn.c: 1021: Switch_Train_Path = 4;
  4765  0026D4  0E29               	movlw	41
  4766  0026D6  EC38  F01E         	call	_GETxAPIxVAL
  4767  0026DA  0100               	movlb	0	; () banked
  4768  0026DC  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4769  0026DE  0100               	movlb	0	; () banked
  4770  0026E0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4771  0026E2  B4D8               	btfsc	status,2,c
  4772  0026E4  D7CB               	goto	L107
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;State_Mchn.c: 1026: else if(GETxAPIxVAL(0x2A) == 1){
  4776                           
  4777                           ; BSR set to: 0
  4778                           
  4779                           ;State_Mchn.c: 1025: }
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;State_Mchn.c: 1024: Switch_Train_Path = 5;
  4783  0026E6  0E2A               	movlw	42
  4784  0026E8  EC38  F01E         	call	_GETxAPIxVAL
  4785  0026EC  0100               	movlb	0	; () banked
  4786  0026EE  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4787  0026F0  0100               	movlb	0	; () banked
  4788  0026F2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4789  0026F4  B4D8               	btfsc	status,2,c
  4790  0026F6  D7CD               	goto	L108
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;State_Mchn.c: 1029: else if(GETxAPIxVAL(0x2C) == 1){
  4794                           
  4795                           ; BSR set to: 0
  4796                           
  4797                           ;State_Mchn.c: 1028: }
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;State_Mchn.c: 1027: Switch_Train_Path = 6;
  4801  0026F8  0E2C               	movlw	44
  4802  0026FA  EC38  F01E         	call	_GETxAPIxVAL
  4803  0026FE  0100               	movlb	0	; () banked
  4804  002700  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4805  002702  0100               	movlb	0	; () banked
  4806  002704  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4807  002706  B4D8               	btfsc	status,2,c
  4808  002708  D7CF               	goto	L109
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;State_Mchn.c: 1032: else if(GETxAPIxVAL(0x2B) == 1){
  4812                           
  4813                           ; BSR set to: 0
  4814                           
  4815                           ;State_Mchn.c: 1031: }
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;State_Mchn.c: 1030: Switch_Train_Path = 7;
  4819  00270A  0E2B               	movlw	43
  4820  00270C  EC38  F01E         	call	_GETxAPIxVAL
  4821  002710  D7D0               	goto	L57
  4822  002712                     L46:
  4823  002712  0100               	movlb	0	; () banked
  4824  002714  6FAD               	movwf	_Switch_Train_Path& (0+255),b
  4825                           
  4826                           ; BSR set to: 0
  4827                           
  4828                           ; BSR set to: 0
  4829                           
  4830                           ; BSR set to: 0
  4831  002716  D720               	goto	l456
  4832  002718                     l8176:
  4833                           
  4834                           ; BSR set to: 0
  4835  002718  0E1E               	movlw	30
  4836  00271A  EC38  F01E         	call	_GETxAPIxVAL
  4837  00271E  0100               	movlb	0	; () banked
  4838  002720  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4839  002722  0100               	movlb	0	; () banked
  4840  002724  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4841  002726  B4D8               	btfsc	status,2,c
  4842  002728  D028               	goto	l8198
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;State_Mchn.c: 1041: else if(GETxAPIxVAL(0x29) == 1){
  4846                           
  4847                           ; BSR set to: 0
  4848                           
  4849                           ;State_Mchn.c: 1040: }
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;State_Mchn.c: 1038: {
  4853                           ;State_Mchn.c: 1039: Switch_Train_Path = 4;
  4854  00272A  0E29               	movlw	41
  4855  00272C  EC38  F01E         	call	_GETxAPIxVAL
  4856  002730  0100               	movlb	0	; () banked
  4857  002732  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4858  002734  0100               	movlb	0	; () banked
  4859  002736  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4860  002738  B4D8               	btfsc	status,2,c
  4861  00273A  D02A               	goto	l8202
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;State_Mchn.c: 1044: else if(GETxAPIxVAL(0x2A) == 1){
  4865                           
  4866                           ; BSR set to: 0
  4867                           
  4868                           ;State_Mchn.c: 1043: }
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;State_Mchn.c: 1042: Switch_Train_Path = 12;
  4872  00273C  0E2A               	movlw	42
  4873  00273E  EC38  F01E         	call	_GETxAPIxVAL
  4874  002742  0100               	movlb	0	; () banked
  4875  002744  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4876  002746  0100               	movlb	0	; () banked
  4877  002748  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4878  00274A  B4D8               	btfsc	status,2,c
  4879  00274C  D02C               	goto	l8206
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;State_Mchn.c: 1047: else if(GETxAPIxVAL(0x2C) == 1){
  4883                           
  4884                           ; BSR set to: 0
  4885                           
  4886                           ;State_Mchn.c: 1046: }
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;State_Mchn.c: 1045: Switch_Train_Path = 11;
  4890  00274E  0E2C               	movlw	44
  4891  002750  EC38  F01E         	call	_GETxAPIxVAL
  4892  002754  0100               	movlb	0	; () banked
  4893  002756  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4894  002758  0100               	movlb	0	; () banked
  4895  00275A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4896  00275C  B4D8               	btfsc	status,2,c
  4897  00275E  D02E               	goto	l8210
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;State_Mchn.c: 1050: else if(GETxAPIxVAL(0x2B) == 1){
  4901                           
  4902                           ; BSR set to: 0
  4903                           
  4904                           ;State_Mchn.c: 1049: }
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;State_Mchn.c: 1048: Switch_Train_Path = 10;
  4908  002760  0E2B               	movlw	43
  4909  002762  EC38  F01E         	call	_GETxAPIxVAL
  4910  002766  D02F               	goto	L65
  4911  002768                     l8196:
  4912                           
  4913                           ; BSR set to: 0
  4914  002768  0E1F               	movlw	31
  4915  00276A  EC38  F01E         	call	_GETxAPIxVAL
  4916  00276E  0100               	movlb	0	; () banked
  4917  002770  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4918  002772  0100               	movlb	0	; () banked
  4919  002774  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4920  002776  A4D8               	btfss	status,2,c
  4921  002778  D002               	goto	l8200
  4922  00277A                     l8198:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;State_Mchn.c: 1056: {
  4926                           ;State_Mchn.c: 1057: Switch_Train_Path = 4;
  4927  00277A  0E04               	movlw	4
  4928  00277C  D7CA               	goto	L46
  4929  00277E                     l8200:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;State_Mchn.c: 1059: else if(GETxAPIxVAL(0x29) == 1){
  4933  00277E  0E29               	movlw	41
  4934  002780  EC38  F01E         	call	_GETxAPIxVAL
  4935  002784  0100               	movlb	0	; () banked
  4936  002786  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4937  002788  0100               	movlb	0	; () banked
  4938  00278A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4939  00278C  A4D8               	btfss	status,2,c
  4940  00278E  D002               	goto	l8204
  4941  002790                     l8202:
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;State_Mchn.c: 1060: Switch_Train_Path = 12;
  4945  002790  0E0C               	movlw	12
  4946  002792  D7BF               	goto	L46
  4947  002794                     l8204:
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;State_Mchn.c: 1062: else if(GETxAPIxVAL(0x2A) == 1){
  4951  002794  0E2A               	movlw	42
  4952  002796  EC38  F01E         	call	_GETxAPIxVAL
  4953  00279A  0100               	movlb	0	; () banked
  4954  00279C  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4955  00279E  0100               	movlb	0	; () banked
  4956  0027A0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4957  0027A2  A4D8               	btfss	status,2,c
  4958  0027A4  D002               	goto	l8208
  4959  0027A6                     l8206:
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;State_Mchn.c: 1063: Switch_Train_Path = 11;
  4963  0027A6  0E0B               	movlw	11
  4964  0027A8  D7B4               	goto	L46
  4965  0027AA                     l8208:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;State_Mchn.c: 1065: else if(GETxAPIxVAL(0x2C) == 1){
  4969  0027AA  0E2C               	movlw	44
  4970  0027AC  EC38  F01E         	call	_GETxAPIxVAL
  4971  0027B0  0100               	movlb	0	; () banked
  4972  0027B2  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4973  0027B4  0100               	movlb	0	; () banked
  4974  0027B6  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4975  0027B8  A4D8               	btfss	status,2,c
  4976  0027BA  D002               	goto	l8212
  4977  0027BC                     l8210:
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;State_Mchn.c: 1066: Switch_Train_Path = 10;
  4981  0027BC  0E0A               	movlw	10
  4982  0027BE  D7A9               	goto	L46
  4983  0027C0                     l8212:
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;State_Mchn.c: 1068: else if(GETxAPIxVAL(0x2B) == 1){
  4987  0027C0  0E2B               	movlw	43
  4988  0027C2  EC38  F01E         	call	_GETxAPIxVAL
  4989  0027C6                     L65:
  4990  0027C6  0100               	movlb	0	; () banked
  4991  0027C8  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4992  0027CA  0100               	movlb	0	; () banked
  4993  0027CC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4994  0027CE  A4D8               	btfss	status,2,c
  4995  0027D0  D6C3               	goto	l456
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;State_Mchn.c: 1069: Switch_Train_Path = 9;
  4999  0027D2  0E09               	movlw	9
  5000  0027D4  D79E               	goto	L46
  5001  0027D6                     l8218:
  5002                           
  5003                           ; BSR set to: 0
  5004  0027D6  0100               	movlb	0	; () banked
  5005  0027D8  5189               	movf	Train_Path@To& (0+255),w,b
  5006                           
  5007                           ; Switch size 1, requested type "space"
  5008                           ; Number of cases is 4, Range of values is 0 to 3
  5009                           ; switch strategies available:
  5010                           ; Name         Instructions Cycles
  5011                           ; simple_byte           13     7 (average)
  5012                           ;	Chosen strategy is simple_byte
  5013  0027DA  0A00               	xorlw	0	; case 0
  5014  0027DC  B4D8               	btfsc	status,2,c
  5015  0027DE  D79C               	goto	l8176
  5016  0027E0  0A01               	xorlw	1	; case 1
  5017  0027E2  B4D8               	btfsc	status,2,c
  5018  0027E4  D7C1               	goto	l8196
  5019  0027E6  0A03               	xorlw	3	; case 2
  5020  0027E8  B4D8               	btfsc	status,2,c
  5021  0027EA  D736               	goto	l8136
  5022  0027EC  0A01               	xorlw	1	; case 3
  5023  0027EE  B4D8               	btfsc	status,2,c
  5024  0027F0  D768               	goto	l8156
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;State_Mchn.c: 1075: break;
  5028  0027F2  D074               	goto	l8286
  5029  0027F4                     l8220:
  5030                           
  5031                           ; BSR set to: 0
  5032  0027F4  EC16  F015         	call	_Train_Move_Right_Brake	;wreg free
  5033  0027F8  D008               	goto	L105
  5034  0027FA                     l8226:
  5035                           
  5036                           ; BSR set to: 0
  5037  0027FA  EC16  F015         	call	_Train_Move_Right_Brake	;wreg free
  5038  0027FE  D005               	goto	L105
  5039  002800                     l8232:
  5040                           
  5041                           ; BSR set to: 0
  5042  002800  EC71  F014         	call	_Train_Move_Left_Brake	;wreg free
  5043  002804  D002               	goto	L105
  5044  002806                     l8238:
  5045                           
  5046                           ; BSR set to: 0
  5047  002806  EC71  F014         	call	_Train_Move_Left_Brake	;wreg free
  5048  00280A                     L105:
  5049  00280A  0900               	iorlw	0
  5050  00280C  A4D8               	btfss	status,2,c
  5051  00280E  D6A4               	goto	l456
  5052                           
  5053                           ;State_Mchn.c: 1104: {
  5054                           ;State_Mchn.c: 1105: Switch_Train_Path = 0;
  5055  002810  0E00               	movlw	0
  5056  002812  0100               	movlb	0	; () banked
  5057  002814  6FAD               	movwf	_Switch_Train_Path& (0+255),b
  5058                           
  5059                           ;State_Mchn.c: 1106: Return_Val = 0;
  5060  002816  0E00               	movlw	0
  5061  002818  D6A0               	goto	L55
  5062  00281A                     l8246:
  5063                           
  5064                           ; BSR set to: 0
  5065  00281A  0100               	movlb	0	; () banked
  5066  00281C  5189               	movf	Train_Path@To& (0+255),w,b
  5067                           
  5068                           ; Switch size 1, requested type "space"
  5069                           ; Number of cases is 4, Range of values is 0 to 3
  5070                           ; switch strategies available:
  5071                           ; Name         Instructions Cycles
  5072                           ; simple_byte           13     7 (average)
  5073                           ;	Chosen strategy is simple_byte
  5074  00281E  0A00               	xorlw	0	; case 0
  5075  002820  B4D8               	btfsc	status,2,c
  5076  002822  D7EE               	goto	l8232
  5077  002824  0A01               	xorlw	1	; case 1
  5078  002826  B4D8               	btfsc	status,2,c
  5079  002828  D7EE               	goto	l8238
  5080  00282A  0A03               	xorlw	3	; case 2
  5081  00282C  B4D8               	btfsc	status,2,c
  5082  00282E  D7E2               	goto	l8220
  5083  002830  0A01               	xorlw	1	; case 3
  5084  002832  B4D8               	btfsc	status,2,c
  5085  002834  D7E2               	goto	l8226
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;State_Mchn.c: 1113: break;
  5089  002836  D052               	goto	l8286
  5090  002838                     l8248:
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;State_Mchn.c: 1116: if(Left_Mountain_From_The_Left(1) == 0){
  5094  002838  0E01               	movlw	1
  5095  00283A  ECC5  F018         	call	_Left_Mountain_From_The_Left
  5096  00283E  D01B               	goto	L106
  5097  002840                     l8252:
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;State_Mchn.c: 1123: if(Left_Mountain_From_The_Left(2) == 0){
  5101  002840  0E02               	movlw	2
  5102  002842  ECC5  F018         	call	_Left_Mountain_From_The_Left
  5103  002846  D017               	goto	L106
  5104  002848                     l8256:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;State_Mchn.c: 1130: if(Right_Mountain_From_The_Left(3) == 0){
  5108  002848  0E03               	movlw	3
  5109  00284A  EC2B  F018         	call	_Right_Mountain_From_The_Left
  5110  00284E  D013               	goto	L106
  5111  002850                     l8260:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;State_Mchn.c: 1137: if(Right_Mountain_From_The_Left(4) == 0){
  5115  002850  0E04               	movlw	4
  5116  002852  EC2B  F018         	call	_Right_Mountain_From_The_Left
  5117  002856  D00F               	goto	L106
  5118  002858                     l8264:
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;State_Mchn.c: 1144: if(Right_Mountain_From_The_Right(4) == 0){
  5122  002858  0E04               	movlw	4
  5123  00285A  EC91  F017         	call	_Right_Mountain_From_The_Right
  5124  00285E  D00B               	goto	L106
  5125  002860                     l8268:
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;State_Mchn.c: 1151: if(Right_Mountain_From_The_Right(3) == 0){
  5129  002860  0E03               	movlw	3
  5130  002862  EC91  F017         	call	_Right_Mountain_From_The_Right
  5131  002866  D007               	goto	L106
  5132  002868                     l8272:
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;State_Mchn.c: 1158: if(Left_Mountain_From_The_Right(2) == 0){
  5136  002868  0E02               	movlw	2
  5137  00286A  EC5E  F019         	call	_Left_Mountain_From_The_Right
  5138  00286E  D003               	goto	L106
  5139  002870                     l8276:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;State_Mchn.c: 1165: if(Left_Mountain_From_The_Right(1) == 0){
  5143  002870  0E01               	movlw	1
  5144  002872  EC5E  F019         	call	_Left_Mountain_From_The_Right
  5145  002876                     L106:
  5146  002876  0900               	iorlw	0
  5147  002878  A4D8               	btfss	status,2,c
  5148  00287A  D66E               	goto	l456
  5149                           
  5150                           ;State_Mchn.c: 1166: Switch_Train_Path = 3;
  5151  00287C  0E03               	movlw	3
  5152  00287E  D001               	goto	L58
  5153  002880                     l8280:
  5154                           
  5155                           ; BSR set to: 0
  5156  002880  0E00               	movlw	0
  5157  002882                     L58:
  5158  002882  0100               	movlb	0	; () banked
  5159  002884  6FAD               	movwf	_Switch_Train_Path& (0+255),b
  5160  002886  D668               	goto	l456
  5161  002888                     l8284:
  5162  002888  0100               	movlb	0	; () banked
  5163  00288A  51AD               	movf	_Switch_Train_Path& (0+255),w,b
  5164                           
  5165                           ; Switch size 1, requested type "space"
  5166                           ; Number of cases is 13, Range of values is 0 to 12
  5167                           ; switch strategies available:
  5168                           ; Name         Instructions Cycles
  5169                           ; simple_byte           40    21 (average)
  5170                           ;	Chosen strategy is simple_byte
  5171  00288C  0A00               	xorlw	0	; case 0
  5172  00288E  B4D8               	btfsc	status,2,c
  5173  002890  D680               	goto	l8094
  5174  002892  0A01               	xorlw	1	; case 1
  5175  002894  B4D8               	btfsc	status,2,c
  5176  002896  D6B2               	goto	l8114
  5177  002898  0A03               	xorlw	3	; case 2
  5178  00289A  B4D8               	btfsc	status,2,c
  5179  00289C  D6CE               	goto	l8134
  5180  00289E  0A01               	xorlw	1	; case 3
  5181  0028A0  B4D8               	btfsc	status,2,c
  5182  0028A2  D799               	goto	l8218
  5183  0028A4  0A07               	xorlw	7	; case 4
  5184  0028A6  B4D8               	btfsc	status,2,c
  5185  0028A8  D7B8               	goto	l8246
  5186  0028AA  0A01               	xorlw	1	; case 5
  5187  0028AC  B4D8               	btfsc	status,2,c
  5188  0028AE  D7C4               	goto	l8248
  5189  0028B0  0A03               	xorlw	3	; case 6
  5190  0028B2  B4D8               	btfsc	status,2,c
  5191  0028B4  D7C5               	goto	l8252
  5192  0028B6  0A01               	xorlw	1	; case 7
  5193  0028B8  B4D8               	btfsc	status,2,c
  5194  0028BA  D7C6               	goto	l8256
  5195  0028BC  0A0F               	xorlw	15	; case 8
  5196  0028BE  B4D8               	btfsc	status,2,c
  5197  0028C0  D7C7               	goto	l8260
  5198  0028C2  0A01               	xorlw	1	; case 9
  5199  0028C4  B4D8               	btfsc	status,2,c
  5200  0028C6  D7C8               	goto	l8264
  5201  0028C8  0A03               	xorlw	3	; case 10
  5202  0028CA  B4D8               	btfsc	status,2,c
  5203  0028CC  D7C9               	goto	l8268
  5204  0028CE  0A01               	xorlw	1	; case 11
  5205  0028D0  B4D8               	btfsc	status,2,c
  5206  0028D2  D7CA               	goto	l8272
  5207  0028D4  0A07               	xorlw	7	; case 12
  5208  0028D6  B4D8               	btfsc	status,2,c
  5209  0028D8  D7CB               	goto	l8276
  5210  0028DA  D7D2               	goto	l8280
  5211  0028DC                     l8286:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;State_Mchn.c: 1174: return(Return_Val);
  5215  0028DC  0100               	movlb	0	; () banked
  5216  0028DE  51C2               	movf	Train_Path@Return_Val& (0+255),w,b
  5217  0028E0  0012               	return	
  5218  0028E2                     __end_of_Train_Path:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           postinc0	equ	0xFEE
  5225                           wreg	equ	0xFE8
  5226                           postdec1	equ	0xFE5
  5227                           fsr1h	equ	0xFE2
  5228                           fsr1l	equ	0xFE1
  5229                           status	equ	0xFD8
  5230                           
  5231 ;; *************** function _Train_Move_Right_Start *****************
  5232 ;; Defined at:
  5233 ;;		line 27 in file "../train_move_right.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      unsigned char 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5247 ;;      Params:         0       0       0       0       0       0       0       0       0
  5248 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5250 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5251 ;;Total ram usage:        0 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    8
  5254 ;; This function calls:
  5255 ;;		_GETxAPIxVAL
  5256 ;;		_SETxAPIxVAL
  5257 ;;		_SETxPWM
  5258 ;; This function is called by:
  5259 ;;		_Train_Path
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text3
  5264  002CAE                     __ptext3:
  5265                           	opt stack 0
  5266  002CAE                     _Train_Move_Right_Start:
  5267                           	opt stack 20
  5268                           
  5269                           ;train_move_right.c: 29: static char Return_Val = 1;
  5270                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5271                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;incstack = 0
  5275  002CAE  D08C               	goto	l7328
  5276  002CB0                     l7282:
  5277  002CB0  0E14               	movlw	20
  5278  002CB2  EC38  F01E         	call	_GETxAPIxVAL
  5279  002CB6  0100               	movlb	0	; () banked
  5280  002CB8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5281  002CBA  0100               	movlb	0	; () banked
  5282  002CBC  5D95               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  5283  002CBE  0100               	movlb	0	; () banked
  5284  002CC0  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5285  002CC2  0100               	movlb	0	; () banked
  5286  002CC4  5996               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5287  002CC6  A0D8               	btfss	status,0,c
  5288  002CC8  D002               	goto	l7286
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;train_move_right.c: 37: {
  5292                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  5293  002CCA  0E01               	movlw	1
  5294  002CCC  D034               	goto	L78
  5295  002CCE                     l7286:
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;train_move_right.c: 42: }
  5299                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  5300  002CCE  0100               	movlb	0	; () banked
  5301  002CD0  4B95               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  5302  002CD2  2B96               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  5306  002CD4  0E00               	movlw	0
  5307  002CD6  0100               	movlb	0	; () banked
  5308  002CD8  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5309  002CDA  D072               	goto	L79
  5310  002CDC                     l7292:
  5311                           
  5312                           ; BSR set to: 0
  5313  002CDC  0E16               	movlw	22
  5314  002CDE  EC38  F01E         	call	_GETxAPIxVAL
  5315  002CE2  C060  F081         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5316  002CE6  C061  F082         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5317  002CEA  0E01               	movlw	1
  5318  002CEC  0100               	movlb	0	; () banked
  5319  002CEE  6F83               	movwf	SETxPWM@direction& (0+255),b
  5320  002CF0  ECB4  F01B         	call	_SETxPWM	;wreg free
  5321                           
  5322                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(0x16);
  5323  002CF4  0E16               	movlw	22
  5324  002CF6  EC38  F01E         	call	_GETxAPIxVAL
  5325  002CFA  C060  F09D         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5326  002CFE  C061  F09E         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5327                           
  5328                           ;train_move_right.c: 50: SETxAPIxVAL(0x45, 0);;
  5329  002D02  0E00               	movlw	0
  5330  002D04  0100               	movlb	0	; () banked
  5331  002D06  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  5332  002D08  0E00               	movlw	0
  5333  002D0A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  5334  002D0C  0E45               	movlw	69
  5335  002D0E  EC23  F01D         	call	_SETxAPIxVAL
  5336                           
  5337                           ;train_move_right.c: 51: Return_Val = 1;
  5338  002D12  0E01               	movlw	1
  5339  002D14  0100               	movlb	0	; () banked
  5340  002D16  6FC1               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5341  002D18  D01C               	goto	l7310
  5342  002D1A                     l7302:
  5343                           
  5344                           ; BSR set to: 0
  5345  002D1A  0E12               	movlw	18
  5346  002D1C  EC38  F01E         	call	_GETxAPIxVAL
  5347  002D20  0100               	movlb	0	; () banked
  5348  002D22  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5349  002D24  0100               	movlb	0	; () banked
  5350  002D26  5D95               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  5351  002D28  0100               	movlb	0	; () banked
  5352  002D2A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5353  002D2C  0100               	movlb	0	; () banked
  5354  002D2E  5996               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5355  002D30  A0D8               	btfss	status,0,c
  5356  002D32  D009               	goto	l7306
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;train_move_right.c: 56: {
  5360                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  5361  002D34  0E03               	movlw	3
  5362  002D36                     L78:
  5363  002D36  0100               	movlb	0	; () banked
  5364  002D38  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5365                           
  5366                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  5367  002D3A  0E00               	movlw	0
  5368  002D3C  0100               	movlb	0	; () banked
  5369  002D3E  6F96               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  5370  002D40  0E00               	movlw	0
  5371  002D42  6F95               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  5372  002D44  D03D               	goto	L79
  5373  002D46                     l7306:
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;train_move_right.c: 61: }
  5377                           ;train_move_right.c: 62: Return_Val = 1;
  5378  002D46  0E01               	movlw	1
  5379  002D48  0100               	movlb	0	; () banked
  5380  002D4A  6FC1               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  5384  002D4C  0100               	movlb	0	; () banked
  5385  002D4E  4B95               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  5386  002D50  2B96               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5387  002D52                     l7310:
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  5391  002D52  0E02               	movlw	2
  5392  002D54  0100               	movlb	0	; () banked
  5393  002D56  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5394                           
  5395                           ;train_move_right.c: 65: break;
  5396  002D58  D045               	goto	l7330
  5397  002D5A                     l7312:
  5398                           
  5399                           ; BSR set to: 0
  5400  002D5A  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5401  002D5E  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5402  002D62  0E01               	movlw	1
  5403  002D64  0100               	movlb	0	; () banked
  5404  002D66  6F83               	movwf	SETxPWM@direction& (0+255),b
  5405  002D68  ECB4  F01B         	call	_SETxPWM	;wreg free
  5406                           
  5407                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(0x17))
  5408  002D6C  0E17               	movlw	23
  5409  002D6E  EC38  F01E         	call	_GETxAPIxVAL
  5410  002D72  0100               	movlb	0	; () banked
  5411  002D74  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5412  002D76  0100               	movlb	0	; () banked
  5413  002D78  5D9D               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5414  002D7A  0100               	movlb	0	; () banked
  5415  002D7C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5416  002D7E  0100               	movlb	0	; () banked
  5417  002D80  599E               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5418  002D82  A0D8               	btfss	status,0,c
  5419  002D84  D005               	goto	l7318
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;train_move_right.c: 69: {
  5423                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  5424  002D86  0E00               	movlw	0
  5425  002D88  0100               	movlb	0	; () banked
  5426  002D8A  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5427                           
  5428                           ;train_move_right.c: 71: Return_Val = 0;
  5429  002D8C  0E00               	movlw	0
  5430  002D8E  D019               	goto	L77
  5431  002D90                     l7318:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;train_move_right.c: 73: }
  5435                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  5436  002D90  0E1A               	movlw	26
  5437  002D92  EC38  F01E         	call	_GETxAPIxVAL
  5438  002D96  0100               	movlb	0	; () banked
  5439  002D98  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5440  002D9A  0100               	movlb	0	; () banked
  5441  002D9C  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5442  002D9E  0100               	movlb	0	; () banked
  5443  002DA0  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5444  002DA2  0100               	movlb	0	; () banked
  5445  002DA4  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5446  002DA6  A0D8               	btfss	status,0,c
  5447  002DA8  D008               	goto	l7324
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;train_move_right.c: 75: {
  5451                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  5452  002DAA  0100               	movlb	0	; () banked
  5453  002DAC  4B9D               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5454  002DAE  2B9E               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  5458  002DB0  0E00               	movlw	0
  5459  002DB2  0100               	movlb	0	; () banked
  5460  002DB4  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5461  002DB6  0E00               	movlw	0
  5462  002DB8  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5463  002DBA                     l7324:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;train_move_right.c: 78: }
  5467                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  5468  002DBA  0100               	movlb	0	; () banked
  5469  002DBC  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5470  002DBE  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5471  002DC0                     L79:
  5472                           
  5473                           ;train_move_right.c: 80: Return_Val = 1;
  5474  002DC0  0E01               	movlw	1
  5475  002DC2                     L77:
  5476  002DC2  0100               	movlb	0	; () banked
  5477  002DC4  6FC1               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;train_move_right.c: 84: }
  5481                           
  5482                           ; BSR set to: 0
  5483                           
  5484                           ;train_move_right.c: 83: default : break;
  5485                           
  5486                           ;train_move_right.c: 81: break;
  5487  002DC6  D00E               	goto	l7330
  5488  002DC8                     l7328:
  5489  002DC8  0100               	movlb	0	; () banked
  5490  002DCA  51AC               	movf	_Switch_Train_Move& (0+255),w,b
  5491                           
  5492                           ; Switch size 1, requested type "space"
  5493                           ; Number of cases is 4, Range of values is 0 to 3
  5494                           ; switch strategies available:
  5495                           ; Name         Instructions Cycles
  5496                           ; simple_byte           13     7 (average)
  5497                           ;	Chosen strategy is simple_byte
  5498  002DCC  0A00               	xorlw	0	; case 0
  5499  002DCE  B4D8               	btfsc	status,2,c
  5500  002DD0  D76F               	goto	l7282
  5501  002DD2  0A01               	xorlw	1	; case 1
  5502  002DD4  B4D8               	btfsc	status,2,c
  5503  002DD6  D782               	goto	l7292
  5504  002DD8  0A03               	xorlw	3	; case 2
  5505  002DDA  B4D8               	btfsc	status,2,c
  5506  002DDC  D79E               	goto	l7302
  5507  002DDE  0A01               	xorlw	1	; case 3
  5508  002DE0  B4D8               	btfsc	status,2,c
  5509  002DE2  D7BB               	goto	l7312
  5510  002DE4                     l7330:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;train_move_right.c: 86: return(Return_Val);
  5514  002DE4  0100               	movlb	0	; () banked
  5515  002DE6  51C1               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  5516  002DE8  0012               	return	
  5517  002DEA                     __end_of_Train_Move_Right_Start:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           postdec1	equ	0xFE5
  5526                           fsr1h	equ	0xFE2
  5527                           fsr1l	equ	0xFE1
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function _Train_Move_Right_Brake *****************
  5531 ;; Defined at:
  5532 ;;		line 254 in file "../train_move_right.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;		None
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;		None
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      unsigned char 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5546 ;;      Params:         0       0       0       0       0       0       0       0       0
  5547 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5549 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5550 ;;Total ram usage:        0 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    8
  5553 ;; This function calls:
  5554 ;;		_GETxAPIxVAL
  5555 ;;		_SETxAPIxVAL
  5556 ;;		_SETxPWM
  5557 ;; This function is called by:
  5558 ;;		_Train_Path
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text4
  5563  002A2C                     __ptext4:
  5564                           	opt stack 0
  5565  002A2C                     _Train_Move_Right_Brake:
  5566                           	opt stack 20
  5567                           
  5568                           ;train_move_right.c: 256: static char Return_Val = 1;
  5569                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5570                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;incstack = 0
  5574  002A2C  D090               	goto	l7440
  5575  002A2E                     l7394:
  5576  002A2E  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5577  002A32  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5578  002A36  0E01               	movlw	1
  5579  002A38  0100               	movlb	0	; () banked
  5580  002A3A  6F83               	movwf	SETxPWM@direction& (0+255),b
  5581  002A3C  ECB4  F01B         	call	_SETxPWM	;wreg free
  5582                           
  5583                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(0x16))
  5584  002A40  0E16               	movlw	22
  5585  002A42  EC38  F01E         	call	_GETxAPIxVAL
  5586  002A46  0100               	movlb	0	; () banked
  5587  002A48  519D               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5588  002A4A  0100               	movlb	0	; () banked
  5589  002A4C  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5590  002A4E  0100               	movlb	0	; () banked
  5591  002A50  519E               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5592  002A52  0100               	movlb	0	; () banked
  5593  002A54  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5594  002A56  A0D8               	btfss	status,0,c
  5595  002A58  D002               	goto	l7400
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;train_move_right.c: 263: {
  5599                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  5600  002A5A  0E01               	movlw	1
  5601  002A5C  D072               	goto	L84
  5602  002A5E                     l7400:
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;train_move_right.c: 267: }
  5606                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x19))
  5607  002A5E  0E19               	movlw	25
  5608  002A60  EC38  F01E         	call	_GETxAPIxVAL
  5609  002A64  0100               	movlb	0	; () banked
  5610  002A66  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5611  002A68  0100               	movlb	0	; () banked
  5612  002A6A  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5613  002A6C  0100               	movlb	0	; () banked
  5614  002A6E  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5615  002A70  0100               	movlb	0	; () banked
  5616  002A72  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5617  002A74  A0D8               	btfss	status,0,c
  5618  002A76  D00A               	goto	l7406
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;train_move_right.c: 269: {
  5622                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  5623  002A78  0100               	movlb	0	; () banked
  5624  002A7A  079D               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5625  002A7C  A0D8               	btfss	status,0,c
  5626  002A7E  079E               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  5630  002A80  0E00               	movlw	0
  5631  002A82  0100               	movlb	0	; () banked
  5632  002A84  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5633  002A86  0E00               	movlw	0
  5634  002A88  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5635                           
  5636                           ;train_move_right.c: 272: }
  5637  002A8A  D05D               	goto	l7436
  5638  002A8C                     l7406:
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  5642  002A8C  0100               	movlb	0	; () banked
  5643  002A8E  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5644  002A90  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5645  002A92  D059               	goto	l7436
  5646  002A94                     l7410:
  5647                           
  5648                           ; BSR set to: 0
  5649  002A94  0E12               	movlw	18
  5650  002A96  EC38  F01E         	call	_GETxAPIxVAL
  5651  002A9A  0100               	movlb	0	; () banked
  5652  002A9C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5653  002A9E  0100               	movlb	0	; () banked
  5654  002AA0  5D93               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5655  002AA2  0100               	movlb	0	; () banked
  5656  002AA4  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5657  002AA6  0100               	movlb	0	; () banked
  5658  002AA8  5994               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5659  002AAA  A0D8               	btfss	status,0,c
  5660  002AAC  D009               	goto	l7414
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;train_move_right.c: 278: {
  5664                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  5665  002AAE  0E02               	movlw	2
  5666  002AB0  0100               	movlb	0	; () banked
  5667  002AB2  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5668                           
  5669                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  5670  002AB4  0E00               	movlw	0
  5671  002AB6  0100               	movlb	0	; () banked
  5672  002AB8  6F94               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5673  002ABA  0E00               	movlw	0
  5674  002ABC  6F93               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5675  002ABE  D043               	goto	l7436
  5676  002AC0                     l7414:
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;train_move_right.c: 283: }
  5680                           ;train_move_right.c: 284: Return_Val = 1;
  5681  002AC0  0E01               	movlw	1
  5682  002AC2  0100               	movlb	0	; () banked
  5683  002AC4  6FC0               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  5687  002AC6  0100               	movlb	0	; () banked
  5688  002AC8  4B93               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5689  002ACA  2B94               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  5693  002ACC  0E01               	movlw	1
  5694  002ACE  0100               	movlb	0	; () banked
  5695  002AD0  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5696                           
  5697                           ;train_move_right.c: 287: break;
  5698  002AD2  D04B               	goto	l7442
  5699  002AD4                     l7420:
  5700                           
  5701                           ; BSR set to: 0
  5702  002AD4  0E16               	movlw	22
  5703  002AD6  EC38  F01E         	call	_GETxAPIxVAL
  5704  002ADA  C060  F081         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5705  002ADE  C061  F082         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5706  002AE2  0E01               	movlw	1
  5707  002AE4  0100               	movlb	0	; () banked
  5708  002AE6  6F83               	movwf	SETxPWM@direction& (0+255),b
  5709  002AE8  ECB4  F01B         	call	_SETxPWM	;wreg free
  5710                           
  5711                           ;train_move_right.c: 290: SETxAPIxVAL(0x45, 1);;
  5712  002AEC  0E00               	movlw	0
  5713  002AEE  0100               	movlb	0	; () banked
  5714  002AF0  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  5715  002AF2  0E01               	movlw	1
  5716  002AF4  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  5717  002AF6  0E45               	movlw	69
  5718  002AF8  EC23  F01D         	call	_SETxAPIxVAL
  5719                           
  5720                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(0x16);
  5721  002AFC  0E16               	movlw	22
  5722  002AFE  EC38  F01E         	call	_GETxAPIxVAL
  5723  002B02  C060  F09D         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5724  002B06  C061  F09E         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5725  002B0A  D01A               	goto	l7434
  5726  002B0C                     l7428:
  5727                           
  5728                           ; BSR set to: 0
  5729  002B0C  0E14               	movlw	20
  5730  002B0E  EC38  F01E         	call	_GETxAPIxVAL
  5731  002B12  0100               	movlb	0	; () banked
  5732  002B14  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5733  002B16  0100               	movlb	0	; () banked
  5734  002B18  5D93               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5735  002B1A  0100               	movlb	0	; () banked
  5736  002B1C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5737  002B1E  0100               	movlb	0	; () banked
  5738  002B20  5994               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5739  002B22  A0D8               	btfss	status,0,c
  5740  002B24  D00A               	goto	l7432
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;train_move_right.c: 297: {
  5744                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5745  002B26  0E00               	movlw	0
  5746  002B28  0100               	movlb	0	; () banked
  5747  002B2A  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5748                           
  5749                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5750  002B2C  0E00               	movlw	0
  5751  002B2E  0100               	movlb	0	; () banked
  5752  002B30  6F94               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5753  002B32  0E00               	movlw	0
  5754  002B34  6F93               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5755                           
  5756                           ;train_move_right.c: 300: Return_Val = 0;
  5757  002B36  0E00               	movlw	0
  5758  002B38  D007               	goto	L82
  5759  002B3A                     l7432:
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;train_move_right.c: 302: }
  5763                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5764  002B3A  0100               	movlb	0	; () banked
  5765  002B3C  4B93               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5766  002B3E  2B94               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5767  002B40                     l7434:
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5771  002B40  0E03               	movlw	3
  5772  002B42                     L84:
  5773  002B42  0100               	movlb	0	; () banked
  5774  002B44  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5775  002B46                     l7436:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;train_move_right.c: 305: Return_Val = 1;
  5779  002B46  0E01               	movlw	1
  5780  002B48                     L82:
  5781  002B48  0100               	movlb	0	; () banked
  5782  002B4A  6FC0               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;train_move_right.c: 309: }
  5786                           
  5787                           ; BSR set to: 0
  5788                           
  5789                           ;train_move_right.c: 308: default : break;
  5790                           
  5791                           ;train_move_right.c: 306: break;
  5792  002B4C  D00E               	goto	l7442
  5793  002B4E                     l7440:
  5794  002B4E  0100               	movlb	0	; () banked
  5795  002B50  51AC               	movf	_Switch_Train_Move& (0+255),w,b
  5796                           
  5797                           ; Switch size 1, requested type "space"
  5798                           ; Number of cases is 4, Range of values is 0 to 3
  5799                           ; switch strategies available:
  5800                           ; Name         Instructions Cycles
  5801                           ; simple_byte           13     7 (average)
  5802                           ;	Chosen strategy is simple_byte
  5803  002B52  0A00               	xorlw	0	; case 0
  5804  002B54  B4D8               	btfsc	status,2,c
  5805  002B56  D76B               	goto	l7394
  5806  002B58  0A01               	xorlw	1	; case 1
  5807  002B5A  B4D8               	btfsc	status,2,c
  5808  002B5C  D79B               	goto	l7410
  5809  002B5E  0A03               	xorlw	3	; case 2
  5810  002B60  B4D8               	btfsc	status,2,c
  5811  002B62  D7B8               	goto	l7420
  5812  002B64  0A01               	xorlw	1	; case 3
  5813  002B66  B4D8               	btfsc	status,2,c
  5814  002B68  D7D1               	goto	l7428
  5815  002B6A                     l7442:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;train_move_right.c: 311: return(Return_Val);
  5819  002B6A  0100               	movlb	0	; () banked
  5820  002B6C  51C0               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5821  002B6E  0012               	return	
  5822  002B70                     __end_of_Train_Move_Right_Brake:
  5823                           	opt stack 0
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           postdec1	equ	0xFE5
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           status	equ	0xFD8
  5834                           
  5835 ;; *************** function _Train_Move_Left_Start *****************
  5836 ;; Defined at:
  5837 ;;		line 27 in file "../train_move_left.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;		None
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;		None
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      unsigned char 
  5844 ;; Registers used:
  5845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5851 ;;      Params:         0       0       0       0       0       0       0       0       0
  5852 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5854 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5855 ;;Total ram usage:        0 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:    8
  5858 ;; This function calls:
  5859 ;;		_GETxAPIxVAL
  5860 ;;		_SETxAPIxVAL
  5861 ;;		_SETxPWM
  5862 ;; This function is called by:
  5863 ;;		_Train_Path
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text5
  5868  002DEA                     __ptext5:
  5869                           	opt stack 0
  5870  002DEA                     _Train_Move_Left_Start:
  5871                           	opt stack 20
  5872                           
  5873                           ;train_move_left.c: 29: static char Return_Val = 1;
  5874                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5875                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;incstack = 0
  5879  002DEA  D08A               	goto	l7386
  5880  002DEC                     l7336:
  5881  002DEC  0E14               	movlw	20
  5882  002DEE  EC38  F01E         	call	_GETxAPIxVAL
  5883  002DF2  0100               	movlb	0	; () banked
  5884  002DF4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5885  002DF6  0100               	movlb	0	; () banked
  5886  002DF8  5D91               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5887  002DFA  0100               	movlb	0	; () banked
  5888  002DFC  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5889  002DFE  0100               	movlb	0	; () banked
  5890  002E00  5992               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5891  002E02  A0D8               	btfss	status,0,c
  5892  002E04  D002               	goto	l7340
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;train_move_left.c: 37: {
  5896                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5897  002E06  0E01               	movlw	1
  5898  002E08  D036               	goto	L87
  5899  002E0A                     l7340:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;train_move_left.c: 42: }
  5903                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5904  002E0A  0100               	movlb	0	; () banked
  5905  002E0C  4B91               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5906  002E0E  2B92               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5910  002E10  0E00               	movlw	0
  5911  002E12  D020               	goto	L85
  5912  002E14                     l7344:
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;train_move_left.c: 45: Return_Val = 1;
  5916  002E14  0E01               	movlw	1
  5917  002E16  0100               	movlb	0	; () banked
  5918  002E18  6FBF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5919                           
  5920                           ;train_move_left.c: 46: break;
  5921  002E1A  D080               	goto	l7388
  5922  002E1C                     l7346:
  5923                           
  5924                           ; BSR set to: 0
  5925  002E1C  0E15               	movlw	21
  5926  002E1E  EC38  F01E         	call	_GETxAPIxVAL
  5927  002E22  C060  F081         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5928  002E26  C061  F082         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5929  002E2A  0E00               	movlw	0
  5930  002E2C  0100               	movlb	0	; () banked
  5931  002E2E  6F83               	movwf	SETxPWM@direction& (0+255),b
  5932  002E30  ECB4  F01B         	call	_SETxPWM	;wreg free
  5933                           
  5934                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(0x15);
  5935  002E34  0E15               	movlw	21
  5936  002E36  EC38  F01E         	call	_GETxAPIxVAL
  5937  002E3A  C060  F09D         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5938  002E3E  C061  F09E         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5939                           
  5940                           ;train_move_left.c: 50: SETxAPIxVAL(0x45, 0);
  5941  002E42  0E00               	movlw	0
  5942  002E44  0100               	movlb	0	; () banked
  5943  002E46  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  5944  002E48  0E00               	movlw	0
  5945  002E4A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  5946  002E4C  0E45               	movlw	69
  5947  002E4E  EC23  F01D         	call	_SETxAPIxVAL
  5948  002E52  D01C               	goto	l7362
  5949  002E54                     L85:
  5950  002E54  0100               	movlb	0	; () banked
  5951  002E56  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5952  002E58  D7DD               	goto	l7344
  5953  002E5A                     l7356:
  5954                           
  5955                           ; BSR set to: 0
  5956  002E5A  0E12               	movlw	18
  5957  002E5C  EC38  F01E         	call	_GETxAPIxVAL
  5958  002E60  0100               	movlb	0	; () banked
  5959  002E62  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5960  002E64  0100               	movlb	0	; () banked
  5961  002E66  5D91               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5962  002E68  0100               	movlb	0	; () banked
  5963  002E6A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5964  002E6C  0100               	movlb	0	; () banked
  5965  002E6E  5992               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5966  002E70  A0D8               	btfss	status,0,c
  5967  002E72  D009               	goto	l7360
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;train_move_left.c: 56: {
  5971                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5972  002E74  0E03               	movlw	3
  5973  002E76                     L87:
  5974  002E76  0100               	movlb	0	; () banked
  5975  002E78  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  5976                           
  5977                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5978  002E7A  0E00               	movlw	0
  5979  002E7C  0100               	movlb	0	; () banked
  5980  002E7E  6F92               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5981  002E80  0E00               	movlw	0
  5982  002E82  6F91               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5983  002E84  D7C7               	goto	l7344
  5984  002E86                     l7360:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;train_move_left.c: 61: }
  5988                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5989  002E86  0100               	movlb	0	; () banked
  5990  002E88  4B91               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5991  002E8A  2B92               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5992  002E8C                     l7362:
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5996  002E8C  0E02               	movlw	2
  5997  002E8E  D7E2               	goto	L85
  5998  002E90                     l7366:
  5999                           
  6000                           ; BSR set to: 0
  6001  002E90  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6002  002E94  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6003  002E98  0E00               	movlw	0
  6004  002E9A  0100               	movlb	0	; () banked
  6005  002E9C  6F83               	movwf	SETxPWM@direction& (0+255),b
  6006  002E9E  ECB4  F01B         	call	_SETxPWM	;wreg free
  6007                           
  6008                           ;train_move_left.c: 68: Return_Val = 1;
  6009  002EA2  0E01               	movlw	1
  6010  002EA4  0100               	movlb	0	; () banked
  6011  002EA6  6FBF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(0x18))
  6015  002EA8  0E18               	movlw	24
  6016  002EAA  EC38  F01E         	call	_GETxAPIxVAL
  6017  002EAE  0100               	movlb	0	; () banked
  6018  002EB0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6019  002EB2  0100               	movlb	0	; () banked
  6020  002EB4  5D9D               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6021  002EB6  0100               	movlb	0	; () banked
  6022  002EB8  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6023  002EBA  0100               	movlb	0	; () banked
  6024  002EBC  599E               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6025  002EBE  A0D8               	btfss	status,0,c
  6026  002EC0  D005               	goto	l7376
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;train_move_left.c: 70: {
  6030                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  6031  002EC2  0E00               	movlw	0
  6032  002EC4  0100               	movlb	0	; () banked
  6033  002EC6  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  6034                           
  6035                           ;train_move_left.c: 72: Return_Val = 0;
  6036  002EC8  0E00               	movlw	0
  6037  002ECA  D7A5               	goto	L86
  6038  002ECC                     l7376:
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  6042  002ECC  0E1A               	movlw	26
  6043  002ECE  EC38  F01E         	call	_GETxAPIxVAL
  6044  002ED2  0100               	movlb	0	; () banked
  6045  002ED4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6046  002ED6  0100               	movlb	0	; () banked
  6047  002ED8  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6048  002EDA  0100               	movlb	0	; () banked
  6049  002EDC  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6050  002EDE  0100               	movlb	0	; () banked
  6051  002EE0  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6052  002EE2  A0D8               	btfss	status,0,c
  6053  002EE4  D009               	goto	l7382
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;train_move_left.c: 76: {
  6057                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  6058  002EE6  0100               	movlb	0	; () banked
  6059  002EE8  4B9D               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6060  002EEA  2B9E               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  6064  002EEC  0E00               	movlw	0
  6065  002EEE  0100               	movlb	0	; () banked
  6066  002EF0  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6067  002EF2  0E00               	movlw	0
  6068  002EF4  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6069                           
  6070                           ;train_move_left.c: 79: }
  6071  002EF6  D012               	goto	l7388
  6072  002EF8                     l7382:
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  6076  002EF8  0100               	movlb	0	; () banked
  6077  002EFA  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6078  002EFC  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;train_move_left.c: 83: }
  6082                           
  6083                           ; BSR set to: 0
  6084                           
  6085                           ;train_move_left.c: 82: default : break;
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;train_move_left.c: 81: break;
  6089                           
  6090                           ; BSR set to: 0
  6091  002EFE  D00E               	goto	l7388
  6092  002F00                     l7386:
  6093  002F00  0100               	movlb	0	; () banked
  6094  002F02  51AC               	movf	_Switch_Train_Move& (0+255),w,b
  6095                           
  6096                           ; Switch size 1, requested type "space"
  6097                           ; Number of cases is 4, Range of values is 0 to 3
  6098                           ; switch strategies available:
  6099                           ; Name         Instructions Cycles
  6100                           ; simple_byte           13     7 (average)
  6101                           ;	Chosen strategy is simple_byte
  6102  002F04  0A00               	xorlw	0	; case 0
  6103  002F06  B4D8               	btfsc	status,2,c
  6104  002F08  D771               	goto	l7336
  6105  002F0A  0A01               	xorlw	1	; case 1
  6106  002F0C  B4D8               	btfsc	status,2,c
  6107  002F0E  D786               	goto	l7346
  6108  002F10  0A03               	xorlw	3	; case 2
  6109  002F12  B4D8               	btfsc	status,2,c
  6110  002F14  D7A2               	goto	l7356
  6111  002F16  0A01               	xorlw	1	; case 3
  6112  002F18  B4D8               	btfsc	status,2,c
  6113  002F1A  D7BA               	goto	l7366
  6114  002F1C                     l7388:
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;train_move_left.c: 85: return(Return_Val);
  6118  002F1C  0100               	movlb	0	; () banked
  6119  002F1E  51BF               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  6120  002F20  0012               	return	
  6121  002F22                     __end_of_Train_Move_Left_Start:
  6122                           	opt stack 0
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           postinc0	equ	0xFEE
  6128                           wreg	equ	0xFE8
  6129                           postdec1	equ	0xFE5
  6130                           fsr1h	equ	0xFE2
  6131                           fsr1l	equ	0xFE1
  6132                           status	equ	0xFD8
  6133                           
  6134 ;; *************** function _Train_Move_Left_Brake *****************
  6135 ;; Defined at:
  6136 ;;		line 254 in file "../train_move_left.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;		None
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;		None
  6141 ;; Return value:  Size  Location     Type
  6142 ;;                  1    wreg      unsigned char 
  6143 ;; Registers used:
  6144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0
  6151 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6153 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6154 ;;Total ram usage:        0 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:    8
  6157 ;; This function calls:
  6158 ;;		_GETxAPIxVAL
  6159 ;;		_SETxAPIxVAL
  6160 ;;		_SETxPWM
  6161 ;; This function is called by:
  6162 ;;		_Train_Path
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text6
  6167  0028E2                     __ptext6:
  6168                           	opt stack 0
  6169  0028E2                     _Train_Move_Left_Brake:
  6170                           	opt stack 20
  6171                           
  6172                           ;train_move_left.c: 256: static char Return_Val = 1;
  6173                           ;train_move_left.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  6174                           ;train_move_left.c: 259: switch(Switch_Train_Move)
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;incstack = 0
  6178  0028E2  D093               	goto	l7494
  6179  0028E4                     l7448:
  6180  0028E4  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6181  0028E8  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6182  0028EC  0E00               	movlw	0
  6183  0028EE  0100               	movlb	0	; () banked
  6184  0028F0  6F83               	movwf	SETxPWM@direction& (0+255),b
  6185  0028F2  ECB4  F01B         	call	_SETxPWM	;wreg free
  6186                           
  6187                           ;train_move_left.c: 262: Return_Val = 1;
  6188  0028F6  0E01               	movlw	1
  6189  0028F8  0100               	movlb	0	; () banked
  6190  0028FA  6FBE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;train_move_left.c: 263: if (Train_Move_Pwm_Count <= GETxAPIxVAL(0x15))
  6194  0028FC  0E15               	movlw	21
  6195  0028FE  EC38  F01E         	call	_GETxAPIxVAL
  6196  002902  0100               	movlb	0	; () banked
  6197  002904  519D               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6198  002906  0100               	movlb	0	; () banked
  6199  002908  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6200  00290A  0100               	movlb	0	; () banked
  6201  00290C  519E               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6202  00290E  0100               	movlb	0	; () banked
  6203  002910  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6204  002912  A0D8               	btfss	status,0,c
  6205  002914  D002               	goto	l7456
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;train_move_left.c: 264: {
  6209                           ;train_move_left.c: 265: Switch_Train_Move = 1;
  6210  002916  0E01               	movlw	1
  6211  002918  D072               	goto	L110
  6212  00291A                     l7456:
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;train_move_left.c: 268: }
  6216                           ;train_move_left.c: 269: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x19))
  6217  00291A  0E19               	movlw	25
  6218  00291C  EC38  F01E         	call	_GETxAPIxVAL
  6219  002920  0100               	movlb	0	; () banked
  6220  002922  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6221  002924  0100               	movlb	0	; () banked
  6222  002926  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6223  002928  0100               	movlb	0	; () banked
  6224  00292A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6225  00292C  0100               	movlb	0	; () banked
  6226  00292E  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6227  002930  A0D8               	btfss	status,0,c
  6228  002932  D00A               	goto	l7462
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;train_move_left.c: 270: {
  6232                           ;train_move_left.c: 271: Train_Move_Pwm_Count--;
  6233  002934  0100               	movlb	0	; () banked
  6234  002936  079D               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6235  002938  A0D8               	btfss	status,0,c
  6236  00293A  079E               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;train_move_left.c: 272: Train_Move_Pwm_Fast_Count = 0;
  6240  00293C  0E00               	movlw	0
  6241  00293E  0100               	movlb	0	; () banked
  6242  002940  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6243  002942  0E00               	movlw	0
  6244  002944  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6245                           
  6246                           ;train_move_left.c: 273: }
  6247  002946  D06F               	goto	l7496
  6248  002948                     l7462:
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;train_move_left.c: 274: else{Train_Move_Pwm_Fast_Count++;}
  6252  002948  0100               	movlb	0	; () banked
  6253  00294A  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6254  00294C  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;train_move_left.c: 275: break;
  6258  00294E  D06B               	goto	l7496
  6259  002950                     l7464:
  6260                           
  6261                           ; BSR set to: 0
  6262  002950  0E12               	movlw	18
  6263  002952  EC38  F01E         	call	_GETxAPIxVAL
  6264  002956  0100               	movlb	0	; () banked
  6265  002958  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6266  00295A  0100               	movlb	0	; () banked
  6267  00295C  5D8F               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  6268  00295E  0100               	movlb	0	; () banked
  6269  002960  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6270  002962  0100               	movlb	0	; () banked
  6271  002964  5990               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  6272  002966  A0D8               	btfss	status,0,c
  6273  002968  D009               	goto	l7468
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;train_move_left.c: 278: {
  6277                           ;train_move_left.c: 279: Switch_Train_Move = 2;
  6278  00296A  0E02               	movlw	2
  6279  00296C  0100               	movlb	0	; () banked
  6280  00296E  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  6281                           
  6282                           ;train_move_left.c: 280: Train_Move_Wait_Time = 0;
  6283  002970  0E00               	movlw	0
  6284  002972  0100               	movlb	0	; () banked
  6285  002974  6F90               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  6286  002976  0E00               	movlw	0
  6287  002978  6F8F               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  6288  00297A  D043               	goto	l7490
  6289  00297C                     l7468:
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;train_move_left.c: 283: }
  6293                           ;train_move_left.c: 284: Return_Val = 1;
  6294  00297C  0E01               	movlw	1
  6295  00297E  0100               	movlb	0	; () banked
  6296  002980  6FBE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;train_move_left.c: 285: Train_Move_Wait_Time++;
  6300  002982  0100               	movlb	0	; () banked
  6301  002984  4B8F               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  6302  002986  2B90               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;train_move_left.c: 286: Switch_Train_Move = 1;
  6306  002988  0E01               	movlw	1
  6307  00298A  0100               	movlb	0	; () banked
  6308  00298C  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  6309                           
  6310                           ;train_move_left.c: 287: break;
  6311  00298E  D04B               	goto	l7496
  6312  002990                     l7474:
  6313                           
  6314                           ; BSR set to: 0
  6315  002990  0E15               	movlw	21
  6316  002992  EC38  F01E         	call	_GETxAPIxVAL
  6317  002996  C060  F081         	movff	?_GETxAPIxVAL,SETxPWM@speed
  6318  00299A  C061  F082         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  6319  00299E  0E00               	movlw	0
  6320  0029A0  0100               	movlb	0	; () banked
  6321  0029A2  6F83               	movwf	SETxPWM@direction& (0+255),b
  6322  0029A4  ECB4  F01B         	call	_SETxPWM	;wreg free
  6323                           
  6324                           ;train_move_left.c: 290: SETxAPIxVAL(0x45, 1);;
  6325  0029A8  0E00               	movlw	0
  6326  0029AA  0100               	movlb	0	; () banked
  6327  0029AC  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6328  0029AE  0E01               	movlw	1
  6329  0029B0  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  6330  0029B2  0E45               	movlw	69
  6331  0029B4  EC23  F01D         	call	_SETxAPIxVAL
  6332                           
  6333                           ;train_move_left.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(0x15);
  6334  0029B8  0E15               	movlw	21
  6335  0029BA  EC38  F01E         	call	_GETxAPIxVAL
  6336  0029BE  C060  F09D         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  6337  0029C2  C061  F09E         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  6338  0029C6  D01A               	goto	L111
  6339  0029C8                     l7482:
  6340                           
  6341                           ; BSR set to: 0
  6342  0029C8  0E14               	movlw	20
  6343  0029CA  EC38  F01E         	call	_GETxAPIxVAL
  6344  0029CE  0100               	movlb	0	; () banked
  6345  0029D0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6346  0029D2  0100               	movlb	0	; () banked
  6347  0029D4  5D8F               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  6348  0029D6  0100               	movlb	0	; () banked
  6349  0029D8  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6350  0029DA  0100               	movlb	0	; () banked
  6351  0029DC  5990               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  6352  0029DE  A0D8               	btfss	status,0,c
  6353  0029E0  D00A               	goto	l7486
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;train_move_left.c: 297: {
  6357                           ;train_move_left.c: 298: Switch_Train_Move = 0;
  6358  0029E2  0E00               	movlw	0
  6359  0029E4  0100               	movlb	0	; () banked
  6360  0029E6  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  6361                           
  6362                           ;train_move_left.c: 299: Train_Move_Wait_Time = 0;
  6363  0029E8  0E00               	movlw	0
  6364  0029EA  0100               	movlb	0	; () banked
  6365  0029EC  6F90               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  6366  0029EE  0E00               	movlw	0
  6367  0029F0  6F8F               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  6368                           
  6369                           ;train_move_left.c: 300: Return_Val = 0;
  6370  0029F2  0E00               	movlw	0
  6371  0029F4  D007               	goto	L90
  6372  0029F6                     l7486:
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;train_move_left.c: 302: }
  6376                           ;train_move_left.c: 303: Train_Move_Wait_Time++;
  6377  0029F6  0100               	movlb	0	; () banked
  6378  0029F8  4B8F               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  6379  0029FA  2B90               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  6380  0029FC                     L111:
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;train_move_left.c: 304: Switch_Train_Move = 3;
  6384  0029FC  0E03               	movlw	3
  6385  0029FE                     L110:
  6386  0029FE  0100               	movlb	0	; () banked
  6387  002A00  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  6388  002A02                     l7490:
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;train_move_left.c: 305: Return_Val = 1;
  6392  002A02  0E01               	movlw	1
  6393  002A04                     L90:
  6394  002A04  0100               	movlb	0	; () banked
  6395  002A06  6FBE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;train_move_left.c: 309: }
  6399                           
  6400                           ; BSR set to: 0
  6401                           
  6402                           ;train_move_left.c: 308: default : break;
  6403                           
  6404                           ;train_move_left.c: 306: break;
  6405  002A08  D00E               	goto	l7496
  6406  002A0A                     l7494:
  6407  002A0A  0100               	movlb	0	; () banked
  6408  002A0C  51AC               	movf	_Switch_Train_Move& (0+255),w,b
  6409                           
  6410                           ; Switch size 1, requested type "space"
  6411                           ; Number of cases is 4, Range of values is 0 to 3
  6412                           ; switch strategies available:
  6413                           ; Name         Instructions Cycles
  6414                           ; simple_byte           13     7 (average)
  6415                           ;	Chosen strategy is simple_byte
  6416  002A0E  0A00               	xorlw	0	; case 0
  6417  002A10  B4D8               	btfsc	status,2,c
  6418  002A12  D768               	goto	l7448
  6419  002A14  0A01               	xorlw	1	; case 1
  6420  002A16  B4D8               	btfsc	status,2,c
  6421  002A18  D79B               	goto	l7464
  6422  002A1A  0A03               	xorlw	3	; case 2
  6423  002A1C  B4D8               	btfsc	status,2,c
  6424  002A1E  D7B8               	goto	l7474
  6425  002A20  0A01               	xorlw	1	; case 3
  6426  002A22  B4D8               	btfsc	status,2,c
  6427  002A24  D7D1               	goto	l7482
  6428  002A26                     l7496:
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;train_move_left.c: 311: return(Return_Val);
  6432  002A26  0100               	movlb	0	; () banked
  6433  002A28  51BE               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  6434  002A2A  0012               	return	
  6435  002A2C                     __end_of_Train_Move_Left_Brake:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           postinc0	equ	0xFEE
  6442                           wreg	equ	0xFE8
  6443                           postdec1	equ	0xFE5
  6444                           fsr1h	equ	0xFE2
  6445                           fsr1l	equ	0xFE1
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function _Right_Mountain_From_The_Right *****************
  6449 ;; Defined at:
  6450 ;;		line 103 in file "../train_move_left.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  rc              1    wreg     unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  rc              1   40[BANK0 ] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      unsigned char 
  6457 ;; Registers used:
  6458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6464 ;;      Params:         0       0       0       0       0       0       0       0       0
  6465 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6467 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6468 ;;Total ram usage:        1 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    8
  6471 ;; This function calls:
  6472 ;;		_GETxAPIxVAL
  6473 ;;		_SETxPWM
  6474 ;; This function is called by:
  6475 ;;		_Train_Path
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text7
  6480  002F22                     __ptext7:
  6481                           	opt stack 0
  6482  002F22                     _Right_Mountain_From_The_Right:
  6483                           	opt stack 20
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;incstack = 0
  6487                           ;Right_Mountain_From_The_Right@rc stored from wreg
  6488  002F22  0100               	movlb	0	; () banked
  6489  002F24  6F88               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  6490                           
  6491                           ;train_move_left.c: 105: static char Return_Val = 1;
  6492                           ;train_move_left.c: 107: switch (Switch_Moutain){
  6493  002F26  D08C               	goto	l7674
  6494  002F28                     l7622:
  6495  002F28  0E03               	movlw	3
  6496  002F2A  0100               	movlb	0	; () banked
  6497  002F2C  1988               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6498  002F2E  B4D8               	btfsc	status,2,c
  6499  002F30  D00D               	goto	l7628
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(0x35)){
  6503                           
  6504                           ; BSR set to: 0
  6505                           
  6506                           ;train_move_left.c: 111: }
  6507                           
  6508                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;train_move_left.c: 109: Switch_Moutain = 1;
  6512  002F32  0E35               	movlw	53
  6513  002F34  EC38  F01E         	call	_GETxAPIxVAL
  6514  002F38  0100               	movlb	0	; () banked
  6515  002F3A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6516  002F3C  0100               	movlb	0	; () banked
  6517  002F3E  5D9B               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6518  002F40  0100               	movlb	0	; () banked
  6519  002F42  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6520  002F44  0100               	movlb	0	; () banked
  6521  002F46  599C               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6522  002F48  A0D8               	btfss	status,0,c
  6523  002F4A  D009               	goto	l7630
  6524  002F4C                     l7628:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;train_move_left.c: 113: Switch_Moutain = 1;
  6528  002F4C  0E01               	movlw	1
  6529  002F4E  0100               	movlb	0	; () banked
  6530  002F50  6FAA               	movwf	_Switch_Moutain& (0+255),b
  6531                           
  6532                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  6533  002F52  0E00               	movlw	0
  6534  002F54  0100               	movlb	0	; () banked
  6535  002F56  6F9C               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6536  002F58  0E00               	movlw	0
  6537  002F5A  6F9B               	movwf	_Mountain_Delay_Counter& (0+255),b
  6538                           
  6539                           ;train_move_left.c: 115: }
  6540  002F5C  D06D               	goto	l7670
  6541  002F5E                     l7630:
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;train_move_left.c: 116: else{
  6545                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  6546  002F5E  0100               	movlb	0	; () banked
  6547  002F60  4B9B               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6548  002F62  2B9C               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6549                           
  6550                           ; BSR set to: 0
  6551  002F64  D069               	goto	l7670
  6552  002F66                     l7634:
  6553                           
  6554                           ; BSR set to: 0
  6555  002F66  0E04               	movlw	4
  6556  002F68  0100               	movlb	0	; () banked
  6557  002F6A  1988               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6558  002F6C  A4D8               	btfss	status,2,c
  6559  002F6E  D028               	goto	l7652
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;train_move_left.c: 123: SETxPWM(Train_Move_Pwm_Count, 0);
  6563  002F70  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6564  002F74  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6565  002F78  0E00               	movlw	0
  6566  002F7A  0100               	movlb	0	; () banked
  6567  002F7C  6F83               	movwf	SETxPWM@direction& (0+255),b
  6568  002F7E  ECB4  F01B         	call	_SETxPWM	;wreg free
  6569                           
  6570                           ;train_move_left.c: 124: if (Train_Move_Pwm_Count <= GETxAPIxVAL(0x2E))
  6571  002F82  0E2E               	movlw	46
  6572  002F84  EC38  F01E         	call	_GETxAPIxVAL
  6573  002F88  0100               	movlb	0	; () banked
  6574  002F8A  519D               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6575  002F8C  0100               	movlb	0	; () banked
  6576  002F8E  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6577  002F90  0100               	movlb	0	; () banked
  6578  002F92  519E               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6579  002F94  0100               	movlb	0	; () banked
  6580  002F96  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6581  002F98  B0D8               	btfsc	status,0,c
  6582  002F9A  D02D               	goto	l7658
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;train_move_left.c: 131: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  6586                           
  6587                           ; BSR set to: 0
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;train_move_left.c: 130: }
  6591                           
  6592                           ;train_move_left.c: 129: break;
  6593                           
  6594                           ;train_move_left.c: 128: Return_Val = 0;
  6595                           
  6596                           ;train_move_left.c: 127: Switch_Moutain = 0;
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;train_move_left.c: 125: {
  6600                           ;train_move_left.c: 126: Switch_Train_Move = 0;
  6601  002F9C  0E1A               	movlw	26
  6602  002F9E  EC38  F01E         	call	_GETxAPIxVAL
  6603  002FA2  0100               	movlb	0	; () banked
  6604  002FA4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6605  002FA6  0100               	movlb	0	; () banked
  6606  002FA8  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6607  002FAA  0100               	movlb	0	; () banked
  6608  002FAC  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6609  002FAE  0100               	movlb	0	; () banked
  6610  002FB0  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6611  002FB2  A0D8               	btfss	status,0,c
  6612  002FB4  D03E               	goto	l7668
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;train_move_left.c: 132: {
  6616                           ;train_move_left.c: 133: Train_Move_Pwm_Count--;
  6617  002FB6  0100               	movlb	0	; () banked
  6618  002FB8  079D               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6619  002FBA  A0D8               	btfss	status,0,c
  6620  002FBC  079E               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6621  002FBE  D033               	goto	l7666
  6622  002FC0                     l7652:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;train_move_left.c: 138: else if (rc == 3){
  6626  002FC0  0E03               	movlw	3
  6627  002FC2  0100               	movlb	0	; () banked
  6628  002FC4  1988               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6629  002FC6  A4D8               	btfss	status,2,c
  6630  002FC8  D037               	goto	l7670
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;train_move_left.c: 139: SETxPWM(Train_Move_Pwm_Count, 0);
  6634  002FCA  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6635  002FCE  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6636  002FD2  0E00               	movlw	0
  6637  002FD4  0100               	movlb	0	; () banked
  6638  002FD6  6F83               	movwf	SETxPWM@direction& (0+255),b
  6639  002FD8  ECB4  F01B         	call	_SETxPWM	;wreg free
  6640                           
  6641                           ;train_move_left.c: 140: if (Train_Move_Pwm_Count >= GETxAPIxVAL(0x18))
  6642  002FDC  0E18               	movlw	24
  6643  002FDE  EC38  F01E         	call	_GETxAPIxVAL
  6644  002FE2  0100               	movlb	0	; () banked
  6645  002FE4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6646  002FE6  0100               	movlb	0	; () banked
  6647  002FE8  5D9D               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6648  002FEA  0100               	movlb	0	; () banked
  6649  002FEC  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6650  002FEE  0100               	movlb	0	; () banked
  6651  002FF0  599E               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6652  002FF2  A0D8               	btfss	status,0,c
  6653  002FF4  D008               	goto	l7662
  6654  002FF6                     l7658:
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;train_move_left.c: 141: {
  6658                           ;train_move_left.c: 142: Switch_Train_Move = 0;
  6659  002FF6  0E00               	movlw	0
  6660  002FF8  0100               	movlb	0	; () banked
  6661  002FFA  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  6662                           
  6663                           ;train_move_left.c: 143: Switch_Moutain = 0;
  6664  002FFC  0E00               	movlw	0
  6665  002FFE  0100               	movlb	0	; () banked
  6666  003000  6FAA               	movwf	_Switch_Moutain& (0+255),b
  6667                           
  6668                           ;train_move_left.c: 144: Return_Val = 0;
  6669  003002  0E00               	movlw	0
  6670  003004  D01A               	goto	L94
  6671  003006                     l7662:
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;train_move_left.c: 147: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  6675  003006  0E1A               	movlw	26
  6676  003008  EC38  F01E         	call	_GETxAPIxVAL
  6677  00300C  0100               	movlb	0	; () banked
  6678  00300E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6679  003010  0100               	movlb	0	; () banked
  6680  003012  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6681  003014  0100               	movlb	0	; () banked
  6682  003016  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6683  003018  0100               	movlb	0	; () banked
  6684  00301A  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6685  00301C  A0D8               	btfss	status,0,c
  6686  00301E  D009               	goto	l7668
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;train_move_left.c: 148: {
  6690                           ;train_move_left.c: 149: Train_Move_Pwm_Count++;
  6691  003020  0100               	movlb	0	; () banked
  6692  003022  4B9D               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6693  003024  2B9E               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6694  003026                     l7666:
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;train_move_left.c: 150: Train_Move_Pwm_Fast_Count = 0;
  6698  003026  0E00               	movlw	0
  6699  003028  0100               	movlb	0	; () banked
  6700  00302A  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6701  00302C  0E00               	movlw	0
  6702  00302E  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6703                           
  6704                           ;train_move_left.c: 151: }
  6705  003030  D003               	goto	l7670
  6706  003032                     l7668:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;train_move_left.c: 152: else{Train_Move_Pwm_Fast_Count++;}
  6710  003032  0100               	movlb	0	; () banked
  6711  003034  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6712  003036  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6713  003038                     l7670:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;train_move_left.c: 153: }
  6717                           ;train_move_left.c: 154: Return_Val = 1;
  6718  003038  0E01               	movlw	1
  6719  00303A                     L94:
  6720  00303A  0100               	movlb	0	; () banked
  6721  00303C  6FBD               	movwf	Right_Mountain_From_The_Right@Return_Val& (0+255),b
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;train_move_left.c: 159: }
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;train_move_left.c: 158: break;
  6728                           
  6729                           ;train_move_left.c: 157: default:
  6730                           
  6731                           ;train_move_left.c: 155: break;
  6732  00303E  D008               	goto	l7676
  6733  003040                     l7674:
  6734  003040  0100               	movlb	0	; () banked
  6735  003042  51AA               	movf	_Switch_Moutain& (0+255),w,b
  6736                           
  6737                           ; Switch size 1, requested type "space"
  6738                           ; Number of cases is 2, Range of values is 0 to 1
  6739                           ; switch strategies available:
  6740                           ; Name         Instructions Cycles
  6741                           ; simple_byte            7     4 (average)
  6742                           ;	Chosen strategy is simple_byte
  6743  003044  0A00               	xorlw	0	; case 0
  6744  003046  B4D8               	btfsc	status,2,c
  6745  003048  D76F               	goto	l7622
  6746  00304A  0A01               	xorlw	1	; case 1
  6747  00304C  B4D8               	btfsc	status,2,c
  6748  00304E  D78B               	goto	l7634
  6749  003050                     l7676:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;train_move_left.c: 161: return(Return_Val);
  6753  003050  0100               	movlb	0	; () banked
  6754  003052  51BD               	movf	Right_Mountain_From_The_Right@Return_Val& (0+255),w,b
  6755  003054  0012               	return	
  6756  003056                     __end_of_Right_Mountain_From_The_Right:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           postinc0	equ	0xFEE
  6763                           wreg	equ	0xFE8
  6764                           postdec1	equ	0xFE5
  6765                           fsr1h	equ	0xFE2
  6766                           fsr1l	equ	0xFE1
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _Right_Mountain_From_The_Left *****************
  6770 ;; Defined at:
  6771 ;;		line 179 in file "../train_move_right.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  rc              1    wreg     unsigned char 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  rc              1   40[BANK0 ] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      unsigned char 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0
  6786 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6788 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6789 ;;Total ram usage:        1 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    8
  6792 ;; This function calls:
  6793 ;;		_GETxAPIxVAL
  6794 ;;		_SETxPWM
  6795 ;; This function is called by:
  6796 ;;		_Train_Path
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text8
  6801  003056                     __ptext8:
  6802                           	opt stack 0
  6803  003056                     _Right_Mountain_From_The_Left:
  6804                           	opt stack 20
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;incstack = 0
  6808                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6809  003056  0100               	movlb	0	; () banked
  6810  003058  6F88               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6811                           
  6812                           ;train_move_right.c: 181: static char Return_Val = 1;
  6813                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6814  00305A  D08C               	goto	l7614
  6815  00305C                     l7562:
  6816  00305C  0E04               	movlw	4
  6817  00305E  0100               	movlb	0	; () banked
  6818  003060  1988               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6819  003062  B4D8               	btfsc	status,2,c
  6820  003064  D00D               	goto	l7568
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(0x38)){
  6824                           
  6825                           ; BSR set to: 0
  6826                           
  6827                           ;train_move_right.c: 187: }
  6828                           
  6829                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6833  003066  0E38               	movlw	56
  6834  003068  EC38  F01E         	call	_GETxAPIxVAL
  6835  00306C  0100               	movlb	0	; () banked
  6836  00306E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6837  003070  0100               	movlb	0	; () banked
  6838  003072  5D9B               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6839  003074  0100               	movlb	0	; () banked
  6840  003076  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6841  003078  0100               	movlb	0	; () banked
  6842  00307A  599C               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6843  00307C  A0D8               	btfss	status,0,c
  6844  00307E  D009               	goto	l7570
  6845  003080                     l7568:
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6849  003080  0E01               	movlw	1
  6850  003082  0100               	movlb	0	; () banked
  6851  003084  6FAA               	movwf	_Switch_Moutain& (0+255),b
  6852                           
  6853                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6854  003086  0E00               	movlw	0
  6855  003088  0100               	movlb	0	; () banked
  6856  00308A  6F9C               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6857  00308C  0E00               	movlw	0
  6858  00308E  6F9B               	movwf	_Mountain_Delay_Counter& (0+255),b
  6859                           
  6860                           ;train_move_right.c: 191: }
  6861  003090  D06D               	goto	l7610
  6862  003092                     l7570:
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;train_move_right.c: 192: else{
  6866                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6867  003092  0100               	movlb	0	; () banked
  6868  003094  4B9B               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6869  003096  2B9C               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6870                           
  6871                           ; BSR set to: 0
  6872  003098  D069               	goto	l7610
  6873  00309A                     l7574:
  6874                           
  6875                           ; BSR set to: 0
  6876  00309A  0E03               	movlw	3
  6877  00309C  0100               	movlb	0	; () banked
  6878  00309E  1988               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6879  0030A0  A4D8               	btfss	status,2,c
  6880  0030A2  D027               	goto	l7592
  6881                           
  6882                           ; BSR set to: 0
  6883                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6884  0030A4  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6885  0030A8  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6886  0030AC  0E01               	movlw	1
  6887  0030AE  0100               	movlb	0	; () banked
  6888  0030B0  6F83               	movwf	SETxPWM@direction& (0+255),b
  6889  0030B2  ECB4  F01B         	call	_SETxPWM	;wreg free
  6890                           
  6891                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(0x2F))
  6892  0030B6  0E2F               	movlw	47
  6893  0030B8  EC38  F01E         	call	_GETxAPIxVAL
  6894  0030BC  0100               	movlb	0	; () banked
  6895  0030BE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6896  0030C0  0100               	movlb	0	; () banked
  6897  0030C2  5D9D               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6898  0030C4  0100               	movlb	0	; () banked
  6899  0030C6  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6900  0030C8  0100               	movlb	0	; () banked
  6901  0030CA  599E               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6902  0030CC  B0D8               	btfsc	status,0,c
  6903  0030CE  D02C               	goto	l7598
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  6907                           
  6908                           ; BSR set to: 0
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;train_move_right.c: 206: }
  6912                           
  6913                           ;train_move_right.c: 205: break;
  6914                           
  6915                           ;train_move_right.c: 204: Return_Val = 0;
  6916                           
  6917                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;train_move_right.c: 201: {
  6921                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6922  0030D0  0E1A               	movlw	26
  6923  0030D2  EC38  F01E         	call	_GETxAPIxVAL
  6924  0030D6  0100               	movlb	0	; () banked
  6925  0030D8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6926  0030DA  0100               	movlb	0	; () banked
  6927  0030DC  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6928  0030DE  0100               	movlb	0	; () banked
  6929  0030E0  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6930  0030E2  0100               	movlb	0	; () banked
  6931  0030E4  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6932  0030E6  A0D8               	btfss	status,0,c
  6933  0030E8  D03E               	goto	l7608
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;train_move_right.c: 208: {
  6937                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6938  0030EA  0100               	movlb	0	; () banked
  6939  0030EC  4B9D               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6940  0030EE  2B9E               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6941  0030F0  D034               	goto	l7606
  6942  0030F2                     l7592:
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;train_move_right.c: 214: else if (rc == 4){
  6946  0030F2  0E04               	movlw	4
  6947  0030F4  0100               	movlb	0	; () banked
  6948  0030F6  1988               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6949  0030F8  A4D8               	btfss	status,2,c
  6950  0030FA  D038               	goto	l7610
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6954  0030FC  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6955  003100  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6956  003104  0E01               	movlw	1
  6957  003106  0100               	movlb	0	; () banked
  6958  003108  6F83               	movwf	SETxPWM@direction& (0+255),b
  6959  00310A  ECB4  F01B         	call	_SETxPWM	;wreg free
  6960                           
  6961                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(0x17))
  6962  00310E  0E17               	movlw	23
  6963  003110  EC38  F01E         	call	_GETxAPIxVAL
  6964  003114  0100               	movlb	0	; () banked
  6965  003116  519D               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6966  003118  0100               	movlb	0	; () banked
  6967  00311A  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6968  00311C  0100               	movlb	0	; () banked
  6969  00311E  519E               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6970  003120  0100               	movlb	0	; () banked
  6971  003122  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6972  003124  A0D8               	btfss	status,0,c
  6973  003126  D008               	goto	l7602
  6974  003128                     l7598:
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;train_move_right.c: 217: {
  6978                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6979  003128  0E00               	movlw	0
  6980  00312A  0100               	movlb	0	; () banked
  6981  00312C  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  6982                           
  6983                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6984  00312E  0E00               	movlw	0
  6985  003130  0100               	movlb	0	; () banked
  6986  003132  6FAA               	movwf	_Switch_Moutain& (0+255),b
  6987                           
  6988                           ;train_move_right.c: 220: Return_Val = 0;
  6989  003134  0E00               	movlw	0
  6990  003136  D01B               	goto	L97
  6991  003138                     l7602:
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  6995  003138  0E1A               	movlw	26
  6996  00313A  EC38  F01E         	call	_GETxAPIxVAL
  6997  00313E  0100               	movlb	0	; () banked
  6998  003140  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6999  003142  0100               	movlb	0	; () banked
  7000  003144  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7001  003146  0100               	movlb	0	; () banked
  7002  003148  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7003  00314A  0100               	movlb	0	; () banked
  7004  00314C  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7005  00314E  A0D8               	btfss	status,0,c
  7006  003150  D00A               	goto	l7608
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;train_move_right.c: 224: {
  7010                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  7011  003152  0100               	movlb	0	; () banked
  7012  003154  079D               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  7013  003156  A0D8               	btfss	status,0,c
  7014  003158  079E               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7015  00315A                     l7606:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  7019  00315A  0E00               	movlw	0
  7020  00315C  0100               	movlb	0	; () banked
  7021  00315E  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  7022  003160  0E00               	movlw	0
  7023  003162  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  7024                           
  7025                           ;train_move_right.c: 227: }
  7026  003164  D003               	goto	l7610
  7027  003166                     l7608:
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  7031  003166  0100               	movlb	0	; () banked
  7032  003168  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  7033  00316A  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  7034  00316C                     l7610:
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;train_move_right.c: 229: }
  7038                           ;train_move_right.c: 230: Return_Val = 1;
  7039  00316C  0E01               	movlw	1
  7040  00316E                     L97:
  7041  00316E  0100               	movlb	0	; () banked
  7042  003170  6FBC               	movwf	Right_Mountain_From_The_Left@Return_Val& (0+255),b
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;train_move_right.c: 235: }
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;train_move_right.c: 234: break;
  7049                           
  7050                           ;train_move_right.c: 233: default:
  7051                           
  7052                           ;train_move_right.c: 231: break;
  7053  003172  D008               	goto	l7616
  7054  003174                     l7614:
  7055  003174  0100               	movlb	0	; () banked
  7056  003176  51AA               	movf	_Switch_Moutain& (0+255),w,b
  7057                           
  7058                           ; Switch size 1, requested type "space"
  7059                           ; Number of cases is 2, Range of values is 0 to 1
  7060                           ; switch strategies available:
  7061                           ; Name         Instructions Cycles
  7062                           ; simple_byte            7     4 (average)
  7063                           ;	Chosen strategy is simple_byte
  7064  003178  0A00               	xorlw	0	; case 0
  7065  00317A  B4D8               	btfsc	status,2,c
  7066  00317C  D76F               	goto	l7562
  7067  00317E  0A01               	xorlw	1	; case 1
  7068  003180  B4D8               	btfsc	status,2,c
  7069  003182  D78B               	goto	l7574
  7070  003184                     l7616:
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;train_move_right.c: 237: return(Return_Val);
  7074  003184  0100               	movlb	0	; () banked
  7075  003186  51BC               	movf	Right_Mountain_From_The_Left@Return_Val& (0+255),w,b
  7076  003188  0012               	return	
  7077  00318A                     __end_of_Right_Mountain_From_The_Left:
  7078                           	opt stack 0
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           postinc0	equ	0xFEE
  7084                           wreg	equ	0xFE8
  7085                           postdec1	equ	0xFE5
  7086                           fsr1h	equ	0xFE2
  7087                           fsr1l	equ	0xFE1
  7088                           status	equ	0xFD8
  7089                           
  7090 ;; *************** function _Left_Mountain_From_The_Right *****************
  7091 ;; Defined at:
  7092 ;;		line 178 in file "../train_move_left.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;  rc              1    wreg     unsigned char 
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;  rc              1   40[BANK0 ] unsigned char 
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      unsigned char 
  7099 ;; Registers used:
  7100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7106 ;;      Params:         0       0       0       0       0       0       0       0       0
  7107 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7108 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7109 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7110 ;;Total ram usage:        1 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:    8
  7113 ;; This function calls:
  7114 ;;		_GETxAPIxVAL
  7115 ;;		_SETxPWM
  7116 ;; This function is called by:
  7117 ;;		_Train_Path
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           	psect	text9
  7122  0032BC                     __ptext9:
  7123                           	opt stack 0
  7124  0032BC                     _Left_Mountain_From_The_Right:
  7125                           	opt stack 20
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;incstack = 0
  7129                           ;Left_Mountain_From_The_Right@rc stored from wreg
  7130  0032BC  0100               	movlb	0	; () banked
  7131  0032BE  6F88               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  7132                           
  7133                           ;train_move_left.c: 180: static char Return_Val = 1;
  7134                           ;train_move_left.c: 182: switch (Switch_Moutain){
  7135  0032C0  D08A               	goto	l7734
  7136  0032C2                     l7682:
  7137  0032C2  0100               	movlb	0	; () banked
  7138  0032C4  0588               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  7139  0032C6  B4D8               	btfsc	status,2,c
  7140  0032C8  D00D               	goto	l7688
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;train_move_left.c: 187: else if(Mountain_Delay_Counter >= GETxAPIxVAL(0x3A)){
  7144                           
  7145                           ; BSR set to: 0
  7146                           
  7147                           ;train_move_left.c: 186: }
  7148                           
  7149                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;train_move_left.c: 184: Switch_Moutain = 1;
  7153  0032CA  0E3A               	movlw	58
  7154  0032CC  EC38  F01E         	call	_GETxAPIxVAL
  7155  0032D0  0100               	movlb	0	; () banked
  7156  0032D2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7157  0032D4  0100               	movlb	0	; () banked
  7158  0032D6  5D9B               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  7159  0032D8  0100               	movlb	0	; () banked
  7160  0032DA  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7161  0032DC  0100               	movlb	0	; () banked
  7162  0032DE  599C               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  7163  0032E0  A0D8               	btfss	status,0,c
  7164  0032E2  D009               	goto	l7690
  7165  0032E4                     l7688:
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;train_move_left.c: 188: Switch_Moutain = 1;
  7169  0032E4  0E01               	movlw	1
  7170  0032E6  0100               	movlb	0	; () banked
  7171  0032E8  6FAA               	movwf	_Switch_Moutain& (0+255),b
  7172                           
  7173                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  7174  0032EA  0E00               	movlw	0
  7175  0032EC  0100               	movlb	0	; () banked
  7176  0032EE  6F9C               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  7177  0032F0  0E00               	movlw	0
  7178  0032F2  6F9B               	movwf	_Mountain_Delay_Counter& (0+255),b
  7179                           
  7180                           ;train_move_left.c: 190: }
  7181  0032F4  D06C               	goto	l7730
  7182  0032F6                     l7690:
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;train_move_left.c: 191: else{
  7186                           ;train_move_left.c: 192: Mountain_Delay_Counter++;
  7187  0032F6  0100               	movlb	0	; () banked
  7188  0032F8  4B9B               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  7189  0032FA  2B9C               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  7190                           
  7191                           ; BSR set to: 0
  7192  0032FC  D068               	goto	l7730
  7193  0032FE                     l7694:
  7194                           
  7195                           ; BSR set to: 0
  7196  0032FE  0E02               	movlw	2
  7197  003300  0100               	movlb	0	; () banked
  7198  003302  1988               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  7199  003304  A4D8               	btfss	status,2,c
  7200  003306  D027               	goto	l7712
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;train_move_left.c: 198: SETxPWM(Train_Move_Pwm_Count, 0);
  7204  003308  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7205  00330C  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7206  003310  0E00               	movlw	0
  7207  003312  0100               	movlb	0	; () banked
  7208  003314  6F83               	movwf	SETxPWM@direction& (0+255),b
  7209  003316  ECB4  F01B         	call	_SETxPWM	;wreg free
  7210                           
  7211                           ;train_move_left.c: 199: if (Train_Move_Pwm_Count >= GETxAPIxVAL(0x34))
  7212  00331A  0E34               	movlw	52
  7213  00331C  EC38  F01E         	call	_GETxAPIxVAL
  7214  003320  0100               	movlb	0	; () banked
  7215  003322  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7216  003324  0100               	movlb	0	; () banked
  7217  003326  5D9D               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  7218  003328  0100               	movlb	0	; () banked
  7219  00332A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7220  00332C  0100               	movlb	0	; () banked
  7221  00332E  599E               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7222  003330  B0D8               	btfsc	status,0,c
  7223  003332  D02B               	goto	l7718
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;train_move_left.c: 206: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  7227                           
  7228                           ; BSR set to: 0
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;train_move_left.c: 205: }
  7232                           
  7233                           ;train_move_left.c: 204: break;
  7234                           
  7235                           ;train_move_left.c: 203: Return_Val = 0;
  7236                           
  7237                           ;train_move_left.c: 202: Switch_Moutain = 0;
  7238                           
  7239                           ; BSR set to: 0
  7240                           ;train_move_left.c: 200: {
  7241                           ;train_move_left.c: 201: Switch_Train_Move = 0;
  7242  003334  0E1A               	movlw	26
  7243  003336  EC38  F01E         	call	_GETxAPIxVAL
  7244  00333A  0100               	movlb	0	; () banked
  7245  00333C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7246  00333E  0100               	movlb	0	; () banked
  7247  003340  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7248  003342  0100               	movlb	0	; () banked
  7249  003344  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7250  003346  0100               	movlb	0	; () banked
  7251  003348  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7252  00334A  A0D8               	btfss	status,0,c
  7253  00334C  D03D               	goto	l7728
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;train_move_left.c: 207: {
  7257                           ;train_move_left.c: 208: Train_Move_Pwm_Count++;
  7258  00334E  0100               	movlb	0	; () banked
  7259  003350  4B9D               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  7260  003352  2B9E               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7261  003354  D033               	goto	l7726
  7262  003356                     l7712:
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;train_move_left.c: 213: else if (rc == 1){
  7266  003356  0100               	movlb	0	; () banked
  7267  003358  0588               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  7268  00335A  A4D8               	btfss	status,2,c
  7269  00335C  D038               	goto	l7730
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;train_move_left.c: 214: SETxPWM(Train_Move_Pwm_Count, 0);
  7273  00335E  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7274  003362  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7275  003366  0E00               	movlw	0
  7276  003368  0100               	movlb	0	; () banked
  7277  00336A  6F83               	movwf	SETxPWM@direction& (0+255),b
  7278  00336C  ECB4  F01B         	call	_SETxPWM	;wreg free
  7279                           
  7280                           ;train_move_left.c: 215: if (Train_Move_Pwm_Count <= GETxAPIxVAL(0x18))
  7281  003370  0E18               	movlw	24
  7282  003372  EC38  F01E         	call	_GETxAPIxVAL
  7283  003376  0100               	movlb	0	; () banked
  7284  003378  519D               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  7285  00337A  0100               	movlb	0	; () banked
  7286  00337C  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7287  00337E  0100               	movlb	0	; () banked
  7288  003380  519E               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7289  003382  0100               	movlb	0	; () banked
  7290  003384  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7291  003386  A0D8               	btfss	status,0,c
  7292  003388  D008               	goto	l7722
  7293  00338A                     l7718:
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;train_move_left.c: 216: {
  7297                           ;train_move_left.c: 217: Switch_Train_Move = 0;
  7298  00338A  0E00               	movlw	0
  7299  00338C  0100               	movlb	0	; () banked
  7300  00338E  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  7301                           
  7302                           ;train_move_left.c: 218: Switch_Moutain = 0;
  7303  003390  0E00               	movlw	0
  7304  003392  0100               	movlb	0	; () banked
  7305  003394  6FAA               	movwf	_Switch_Moutain& (0+255),b
  7306                           
  7307                           ;train_move_left.c: 219: Return_Val = 0;
  7308  003396  0E00               	movlw	0
  7309  003398  D01B               	goto	L100
  7310  00339A                     l7722:
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;train_move_left.c: 222: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  7314  00339A  0E1A               	movlw	26
  7315  00339C  EC38  F01E         	call	_GETxAPIxVAL
  7316  0033A0  0100               	movlb	0	; () banked
  7317  0033A2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7318  0033A4  0100               	movlb	0	; () banked
  7319  0033A6  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7320  0033A8  0100               	movlb	0	; () banked
  7321  0033AA  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7322  0033AC  0100               	movlb	0	; () banked
  7323  0033AE  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7324  0033B0  A0D8               	btfss	status,0,c
  7325  0033B2  D00A               	goto	l7728
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;train_move_left.c: 223: {
  7329                           ;train_move_left.c: 224: Train_Move_Pwm_Count--;
  7330  0033B4  0100               	movlb	0	; () banked
  7331  0033B6  079D               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  7332  0033B8  A0D8               	btfss	status,0,c
  7333  0033BA  079E               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7334  0033BC                     l7726:
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;train_move_left.c: 225: Train_Move_Pwm_Fast_Count = 0;
  7338  0033BC  0E00               	movlw	0
  7339  0033BE  0100               	movlb	0	; () banked
  7340  0033C0  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  7341  0033C2  0E00               	movlw	0
  7342  0033C4  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  7343                           
  7344                           ;train_move_left.c: 226: }
  7345  0033C6  D003               	goto	l7730
  7346  0033C8                     l7728:
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;train_move_left.c: 227: else{Train_Move_Pwm_Fast_Count++;}
  7350  0033C8  0100               	movlb	0	; () banked
  7351  0033CA  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  7352  0033CC  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  7353  0033CE                     l7730:
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;train_move_left.c: 228: }
  7357                           ;train_move_left.c: 229: Return_Val = 1;
  7358  0033CE  0E01               	movlw	1
  7359  0033D0                     L100:
  7360  0033D0  0100               	movlb	0	; () banked
  7361  0033D2  6FBB               	movwf	Left_Mountain_From_The_Right@Return_Val& (0+255),b
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;train_move_left.c: 234: }
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;train_move_left.c: 233: break;
  7368                           
  7369                           ;train_move_left.c: 232: default:
  7370                           
  7371                           ;train_move_left.c: 230: break;
  7372  0033D4  D008               	goto	l7736
  7373  0033D6                     l7734:
  7374  0033D6  0100               	movlb	0	; () banked
  7375  0033D8  51AA               	movf	_Switch_Moutain& (0+255),w,b
  7376                           
  7377                           ; Switch size 1, requested type "space"
  7378                           ; Number of cases is 2, Range of values is 0 to 1
  7379                           ; switch strategies available:
  7380                           ; Name         Instructions Cycles
  7381                           ; simple_byte            7     4 (average)
  7382                           ;	Chosen strategy is simple_byte
  7383  0033DA  0A00               	xorlw	0	; case 0
  7384  0033DC  B4D8               	btfsc	status,2,c
  7385  0033DE  D771               	goto	l7682
  7386  0033E0  0A01               	xorlw	1	; case 1
  7387  0033E2  B4D8               	btfsc	status,2,c
  7388  0033E4  D78C               	goto	l7694
  7389  0033E6                     l7736:
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;train_move_left.c: 236: return(Return_Val);
  7393  0033E6  0100               	movlb	0	; () banked
  7394  0033E8  51BB               	movf	Left_Mountain_From_The_Right@Return_Val& (0+255),w,b
  7395  0033EA  0012               	return	
  7396  0033EC                     __end_of_Left_Mountain_From_The_Right:
  7397                           	opt stack 0
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           postinc0	equ	0xFEE
  7403                           wreg	equ	0xFE8
  7404                           postdec1	equ	0xFE5
  7405                           fsr1h	equ	0xFE2
  7406                           fsr1l	equ	0xFE1
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function _Left_Mountain_From_The_Left *****************
  7410 ;; Defined at:
  7411 ;;		line 104 in file "../train_move_right.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  rc              1    wreg     unsigned char 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  rc              1   40[BANK0 ] unsigned char 
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      unsigned char 
  7418 ;; Registers used:
  7419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0
  7426 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7428 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7429 ;;Total ram usage:        1 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    8
  7432 ;; This function calls:
  7433 ;;		_GETxAPIxVAL
  7434 ;;		_SETxPWM
  7435 ;; This function is called by:
  7436 ;;		_Train_Path
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text10
  7441  00318A                     __ptext10:
  7442                           	opt stack 0
  7443  00318A                     _Left_Mountain_From_The_Left:
  7444                           	opt stack 20
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;incstack = 0
  7448                           ;Left_Mountain_From_The_Left@rc stored from wreg
  7449  00318A  0100               	movlb	0	; () banked
  7450  00318C  6F88               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  7451                           
  7452                           ;train_move_right.c: 106: static char Return_Val = 1;
  7453                           ;train_move_right.c: 108: switch (Switch_Moutain){
  7454  00318E  D08B               	goto	l7554
  7455  003190                     l7502:
  7456  003190  0E02               	movlw	2
  7457  003192  0100               	movlb	0	; () banked
  7458  003194  1988               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7459  003196  B4D8               	btfsc	status,2,c
  7460  003198  D00D               	goto	l7508
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(0x3B)){
  7464                           
  7465                           ; BSR set to: 0
  7466                           
  7467                           ;train_move_right.c: 112: }
  7468                           
  7469                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;train_move_right.c: 110: Switch_Moutain = 1;
  7473  00319A  0E3B               	movlw	59
  7474  00319C  EC38  F01E         	call	_GETxAPIxVAL
  7475  0031A0  0100               	movlb	0	; () banked
  7476  0031A2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7477  0031A4  0100               	movlb	0	; () banked
  7478  0031A6  5D9B               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  7479  0031A8  0100               	movlb	0	; () banked
  7480  0031AA  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7481  0031AC  0100               	movlb	0	; () banked
  7482  0031AE  599C               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  7483  0031B0  A0D8               	btfss	status,0,c
  7484  0031B2  D009               	goto	l7510
  7485  0031B4                     l7508:
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;train_move_right.c: 114: Switch_Moutain = 1;
  7489  0031B4  0E01               	movlw	1
  7490  0031B6  0100               	movlb	0	; () banked
  7491  0031B8  6FAA               	movwf	_Switch_Moutain& (0+255),b
  7492                           
  7493                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  7494  0031BA  0E00               	movlw	0
  7495  0031BC  0100               	movlb	0	; () banked
  7496  0031BE  6F9C               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  7497  0031C0  0E00               	movlw	0
  7498  0031C2  6F9B               	movwf	_Mountain_Delay_Counter& (0+255),b
  7499                           
  7500                           ;train_move_right.c: 116: }
  7501  0031C4  D06C               	goto	l7550
  7502  0031C6                     l7510:
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;train_move_right.c: 117: else{
  7506                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  7507  0031C6  0100               	movlb	0	; () banked
  7508  0031C8  4B9B               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  7509  0031CA  2B9C               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  7510                           
  7511                           ; BSR set to: 0
  7512  0031CC  D068               	goto	l7550
  7513  0031CE                     l7514:
  7514                           
  7515                           ; BSR set to: 0
  7516  0031CE  0100               	movlb	0	; () banked
  7517  0031D0  0588               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7518  0031D2  A4D8               	btfss	status,2,c
  7519  0031D4  D028               	goto	l7532
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  7523  0031D6  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7524  0031DA  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7525  0031DE  0E01               	movlw	1
  7526  0031E0  0100               	movlb	0	; () banked
  7527  0031E2  6F83               	movwf	SETxPWM@direction& (0+255),b
  7528  0031E4  ECB4  F01B         	call	_SETxPWM	;wreg free
  7529                           
  7530                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(0x31))
  7531  0031E8  0E31               	movlw	49
  7532  0031EA  EC38  F01E         	call	_GETxAPIxVAL
  7533  0031EE  0100               	movlb	0	; () banked
  7534  0031F0  519D               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  7535  0031F2  0100               	movlb	0	; () banked
  7536  0031F4  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7537  0031F6  0100               	movlb	0	; () banked
  7538  0031F8  519E               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7539  0031FA  0100               	movlb	0	; () banked
  7540  0031FC  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7541  0031FE  B0D8               	btfsc	status,0,c
  7542  003200  D02D               	goto	l7538
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  7546                           
  7547                           ; BSR set to: 0
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;train_move_right.c: 131: }
  7551                           
  7552                           ;train_move_right.c: 130: break;
  7553                           
  7554                           ;train_move_right.c: 129: Return_Val = 0;
  7555                           
  7556                           ;train_move_right.c: 128: Switch_Moutain = 0;
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;train_move_right.c: 126: {
  7560                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  7561  003202  0E1A               	movlw	26
  7562  003204  EC38  F01E         	call	_GETxAPIxVAL
  7563  003208  0100               	movlb	0	; () banked
  7564  00320A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7565  00320C  0100               	movlb	0	; () banked
  7566  00320E  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7567  003210  0100               	movlb	0	; () banked
  7568  003212  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7569  003214  0100               	movlb	0	; () banked
  7570  003216  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7571  003218  A0D8               	btfss	status,0,c
  7572  00321A  D03E               	goto	l7548
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;train_move_right.c: 133: {
  7576                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  7577  00321C  0100               	movlb	0	; () banked
  7578  00321E  079D               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  7579  003220  A0D8               	btfss	status,0,c
  7580  003222  079E               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7581  003224  D033               	goto	l7546
  7582  003226                     l7532:
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;train_move_right.c: 139: else if (rc == 2){
  7586  003226  0E02               	movlw	2
  7587  003228  0100               	movlb	0	; () banked
  7588  00322A  1988               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7589  00322C  A4D8               	btfss	status,2,c
  7590  00322E  D037               	goto	l7550
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  7594  003230  C09D  F081         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7595  003234  C09E  F082         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7596  003238  0E01               	movlw	1
  7597  00323A  0100               	movlb	0	; () banked
  7598  00323C  6F83               	movwf	SETxPWM@direction& (0+255),b
  7599  00323E  ECB4  F01B         	call	_SETxPWM	;wreg free
  7600                           
  7601                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(0x17))
  7602  003242  0E17               	movlw	23
  7603  003244  EC38  F01E         	call	_GETxAPIxVAL
  7604  003248  0100               	movlb	0	; () banked
  7605  00324A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7606  00324C  0100               	movlb	0	; () banked
  7607  00324E  5D9D               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  7608  003250  0100               	movlb	0	; () banked
  7609  003252  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7610  003254  0100               	movlb	0	; () banked
  7611  003256  599E               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7612  003258  A0D8               	btfss	status,0,c
  7613  00325A  D008               	goto	l7542
  7614  00325C                     l7538:
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;train_move_right.c: 142: {
  7618                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  7619  00325C  0E00               	movlw	0
  7620  00325E  0100               	movlb	0	; () banked
  7621  003260  6FAC               	movwf	_Switch_Train_Move& (0+255),b
  7622                           
  7623                           ;train_move_right.c: 144: Switch_Moutain = 0;
  7624  003262  0E00               	movlw	0
  7625  003264  0100               	movlb	0	; () banked
  7626  003266  6FAA               	movwf	_Switch_Moutain& (0+255),b
  7627                           
  7628                           ;train_move_right.c: 145: Return_Val = 0;
  7629  003268  0E00               	movlw	0
  7630  00326A  D01A               	goto	L103
  7631  00326C                     l7542:
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(0x1A))
  7635  00326C  0E1A               	movlw	26
  7636  00326E  EC38  F01E         	call	_GETxAPIxVAL
  7637  003272  0100               	movlb	0	; () banked
  7638  003274  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7639  003276  0100               	movlb	0	; () banked
  7640  003278  5D9F               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7641  00327A  0100               	movlb	0	; () banked
  7642  00327C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7643  00327E  0100               	movlb	0	; () banked
  7644  003280  59A0               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7645  003282  A0D8               	btfss	status,0,c
  7646  003284  D009               	goto	l7548
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;train_move_right.c: 149: {
  7650                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  7651  003286  0100               	movlb	0	; () banked
  7652  003288  4B9D               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  7653  00328A  2B9E               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7654  00328C                     l7546:
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  7658  00328C  0E00               	movlw	0
  7659  00328E  0100               	movlb	0	; () banked
  7660  003290  6FA0               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  7661  003292  0E00               	movlw	0
  7662  003294  6F9F               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  7663                           
  7664                           ;train_move_right.c: 152: }
  7665  003296  D003               	goto	l7550
  7666  003298                     l7548:
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  7670  003298  0100               	movlb	0	; () banked
  7671  00329A  4B9F               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  7672  00329C  2BA0               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  7673  00329E                     l7550:
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;train_move_right.c: 154: }
  7677                           ;train_move_right.c: 155: Return_Val = 1;
  7678  00329E  0E01               	movlw	1
  7679  0032A0                     L103:
  7680  0032A0  0100               	movlb	0	; () banked
  7681  0032A2  6FBA               	movwf	Left_Mountain_From_The_Left@Return_Val& (0+255),b
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;train_move_right.c: 160: }
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;train_move_right.c: 159: break;
  7688                           
  7689                           ;train_move_right.c: 158: default:
  7690                           
  7691                           ;train_move_right.c: 156: break;
  7692  0032A4  D008               	goto	l7556
  7693  0032A6                     l7554:
  7694  0032A6  0100               	movlb	0	; () banked
  7695  0032A8  51AA               	movf	_Switch_Moutain& (0+255),w,b
  7696                           
  7697                           ; Switch size 1, requested type "space"
  7698                           ; Number of cases is 2, Range of values is 0 to 1
  7699                           ; switch strategies available:
  7700                           ; Name         Instructions Cycles
  7701                           ; simple_byte            7     4 (average)
  7702                           ;	Chosen strategy is simple_byte
  7703  0032AA  0A00               	xorlw	0	; case 0
  7704  0032AC  B4D8               	btfsc	status,2,c
  7705  0032AE  D770               	goto	l7502
  7706  0032B0  0A01               	xorlw	1	; case 1
  7707  0032B2  B4D8               	btfsc	status,2,c
  7708  0032B4  D78C               	goto	l7514
  7709  0032B6                     l7556:
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;train_move_right.c: 162: return(Return_Val);
  7713  0032B6  0100               	movlb	0	; () banked
  7714  0032B8  51BA               	movf	Left_Mountain_From_The_Left@Return_Val& (0+255),w,b
  7715  0032BA  0012               	return	
  7716  0032BC                     __end_of_Left_Mountain_From_The_Left:
  7717                           	opt stack 0
  7718                           tblptru	equ	0xFF8
  7719                           tblptrh	equ	0xFF7
  7720                           tblptrl	equ	0xFF6
  7721                           tablat	equ	0xFF5
  7722                           postinc0	equ	0xFEE
  7723                           wreg	equ	0xFE8
  7724                           postdec1	equ	0xFE5
  7725                           fsr1h	equ	0xFE2
  7726                           fsr1l	equ	0xFE1
  7727                           status	equ	0xFD8
  7728                           
  7729 ;; *************** function _SETxPWM *****************
  7730 ;; Defined at:
  7731 ;;		line 20 in file "../set_pwm.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;  speed           2   33[BANK0 ] unsigned int 
  7734 ;;  direction       1   35[BANK0 ] unsigned char 
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  pwm_speed       2   38[BANK0 ] unsigned int 
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      void 
  7739 ;; Registers used:
  7740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7746 ;;      Params:         0       3       0       0       0       0       0       0       0
  7747 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7748 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7749 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7750 ;;Total ram usage:        7 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    7
  7753 ;; This function calls:
  7754 ;;		_SETxAPIxVAL
  7755 ;; This function is called by:
  7756 ;;		_Train_Move_Left_Start
  7757 ;;		_Right_Mountain_From_The_Right
  7758 ;;		_Left_Mountain_From_The_Right
  7759 ;;		_Train_Move_Left_Brake
  7760 ;;		_Train_Move_Right_Start
  7761 ;;		_Left_Mountain_From_The_Left
  7762 ;;		_Right_Mountain_From_The_Left
  7763 ;;		_Train_Move_Right_Brake
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text11
  7768  003768                     __ptext11:
  7769                           	opt stack 0
  7770  003768                     _SETxPWM:
  7771                           	opt stack 20
  7772                           
  7773                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;incstack = 0
  7777  003768  0E01               	movlw	1
  7778  00376A  0100               	movlb	0	; () banked
  7779  00376C  6F87               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7780  00376E  6986               	setf	SETxPWM@pwm_speed& (0+255),b
  7781                           
  7782                           ;set_pwm.c: 24: if (direction == 0){
  7783  003770  0100               	movlb	0	; () banked
  7784  003772  5183               	movf	SETxPWM@direction& (0+255),w,b
  7785  003774  0100               	movlb	0	; () banked
  7786  003776  A4D8               	btfss	status,2,c
  7787  003778  D01F               	goto	l7226
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;set_pwm.c: 25: pwm_speed = 511 - (speed * 2);
  7791  00377A  C081  F084         	movff	SETxPWM@speed,??_SETxPWM
  7792  00377E  C082  F085         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7793  003782  90D8               	bcf	status,0,c
  7794  003784  0100               	movlb	0	; () banked
  7795  003786  3784               	rlcf	??_SETxPWM& (0+255),f,b
  7796  003788  3785               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  7797  00378A  0100               	movlb	0	; () banked
  7798  00378C  1F84               	comf	??_SETxPWM& (0+255),f,b
  7799  00378E  1F85               	comf	(??_SETxPWM+1)& (0+255),f,b
  7800  003790  4B84               	infsnz	??_SETxPWM& (0+255),f,b
  7801  003792  2B85               	incf	(??_SETxPWM+1)& (0+255),f,b
  7802  003794  0EFF               	movlw	255
  7803  003796  0100               	movlb	0	; () banked
  7804  003798  2584               	addwf	??_SETxPWM& (0+255),w,b
  7805  00379A  0100               	movlb	0	; () banked
  7806  00379C  6F86               	movwf	SETxPWM@pwm_speed& (0+255),b
  7807  00379E  0E01               	movlw	1
  7808  0037A0  0100               	movlb	0	; () banked
  7809  0037A2  2185               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  7810  0037A4  0100               	movlb	0	; () banked
  7811  0037A6  6F87               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7812                           
  7813                           ; BSR set to: 0
  7814                           ;set_pwm.c: 26: SETxAPIxVAL(0x44, pwm_speed);
  7815  0037A8  C086  F07C         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7816  0037AC  C087  F07D         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7817  0037B0  0E44               	movlw	68
  7818  0037B2  EC23  F01D         	call	_SETxAPIxVAL
  7819                           
  7820                           ;set_pwm.c: 28: }
  7821  0037B6  0012               	return	
  7822  0037B8                     l7226:
  7823                           
  7824                           ;set_pwm.c: 29: else if (direction == 1){
  7825  0037B8  0100               	movlb	0	; () banked
  7826  0037BA  0583               	decf	SETxPWM@direction& (0+255),w,b
  7827  0037BC  A4D8               	btfss	status,2,c
  7828  0037BE  0012               	return	
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;set_pwm.c: 30: pwm_speed = 511 + (speed * 2);
  7832  0037C0  C081  F084         	movff	SETxPWM@speed,??_SETxPWM
  7833  0037C4  C082  F085         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7834  0037C8  90D8               	bcf	status,0,c
  7835  0037CA  0100               	movlb	0	; () banked
  7836  0037CC  3784               	rlcf	??_SETxPWM& (0+255),f,b
  7837  0037CE  3785               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  7838  0037D0  0EFF               	movlw	255
  7839  0037D2  0100               	movlb	0	; () banked
  7840  0037D4  2584               	addwf	??_SETxPWM& (0+255),w,b
  7841  0037D6  0100               	movlb	0	; () banked
  7842  0037D8  6F86               	movwf	SETxPWM@pwm_speed& (0+255),b
  7843  0037DA  0E01               	movlw	1
  7844  0037DC  0100               	movlb	0	; () banked
  7845  0037DE  2185               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  7846  0037E0  0100               	movlb	0	; () banked
  7847  0037E2  6F87               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;set_pwm.c: 31: SETxAPIxVAL(0x44, pwm_speed);
  7851  0037E4  C086  F07C         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7852  0037E8  C087  F07D         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7853  0037EC  0E44               	movlw	68
  7854  0037EE  EC23  F01D         	call	_SETxAPIxVAL
  7855  0037F2  0012               	return	
  7856  0037F4                     __end_of_SETxPWM:
  7857                           	opt stack 0
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           postinc0	equ	0xFEE
  7863                           wreg	equ	0xFE8
  7864                           postdec1	equ	0xFE5
  7865                           fsr1h	equ	0xFE2
  7866                           fsr1l	equ	0xFE1
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function _Junction *****************
  7870 ;; Defined at:
  7871 ;;		line 23 in file "../junction.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  Junction_Lef    1    wreg     unsigned char 
  7874 ;;  Straight_Ben    1   33[BANK0 ] unsigned char 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  Junction_Lef    1   34[BANK0 ] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      unsigned char 
  7879 ;; Registers used:
  7880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7886 ;;      Params:         0       1       0       0       0       0       0       0       0
  7887 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7889 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7890 ;;Total ram usage:        2 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    7
  7893 ;; This function calls:
  7894 ;;		_GETxAPIxVAL
  7895 ;;		_SETxAPIxVAL
  7896 ;; This function is called by:
  7897 ;;		_Train_Path
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text12
  7902  002B70                     __ptext12:
  7903                           	opt stack 0
  7904  002B70                     _Junction:
  7905                           	opt stack 21
  7906                           
  7907                           ;incstack = 0
  7908                           ;Junction@Junction_Left_Right stored from wreg
  7909  002B70  0100               	movlb	0	; () banked
  7910  002B72  6F82               	movwf	Junction@Junction_Left_Right& (0+255),b
  7911                           
  7912                           ;junction.c: 25: static char Return_Val = 1;
  7913                           ;junction.c: 26: static unsigned int Junction_Switch_Time = 0;
  7914                           ;junction.c: 28: switch (Switch_Junction)
  7915  002B74  D08E               	goto	l7274
  7916  002B76                     l7234:
  7917  002B76  0E01               	movlw	1
  7918  002B78  0100               	movlb	0	; () banked
  7919  002B7A  6FB9               	movwf	Junction@Return_Val& (0+255),b
  7920                           
  7921                           ;junction.c: 31: switch (Junction_Left_Right)
  7922  002B7C  D036               	goto	l7254
  7923  002B7E                     l7236:
  7924                           
  7925                           ; BSR set to: 0
  7926  002B7E  0E00               	movlw	0
  7927  002B80  0100               	movlb	0	; () banked
  7928  002B82  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7929  002B84  0E01               	movlw	1
  7930  002B86  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  7931  002B88  0E40               	movlw	64
  7932  002B8A  EC23  F01D         	call	_SETxAPIxVAL
  7933  002B8E  D035               	goto	l7256
  7934  002B90                     l7238:
  7935  002B90  0E00               	movlw	0
  7936  002B92  0100               	movlb	0	; () banked
  7937  002B94  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7938  002B96  0E01               	movlw	1
  7939  002B98  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  7940  002B9A  0E41               	movlw	65
  7941  002B9C  EC23  F01D         	call	_SETxAPIxVAL
  7942                           
  7943                           ;junction.c: 38: }
  7944                           
  7945                           ;junction.c: 37: default : break;
  7946  002BA0  D02C               	goto	l7256
  7947  002BA2                     l7242:
  7948  002BA2  0100               	movlb	0	; () banked
  7949  002BA4  5181               	movf	Junction@Straight_Bend& (0+255),w,b
  7950                           
  7951                           ; Switch size 1, requested type "space"
  7952                           ; Number of cases is 2, Range of values is 0 to 1
  7953                           ; switch strategies available:
  7954                           ; Name         Instructions Cycles
  7955                           ; simple_byte            7     4 (average)
  7956                           ;	Chosen strategy is simple_byte
  7957  002BA6  0A00               	xorlw	0	; case 0
  7958  002BA8  B4D8               	btfsc	status,2,c
  7959  002BAA  D7E9               	goto	l7236
  7960  002BAC  0A01               	xorlw	1	; case 1
  7961  002BAE  B4D8               	btfsc	status,2,c
  7962  002BB0  D7EF               	goto	l7238
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;junction.c: 39: break;
  7966  002BB2  D023               	goto	l7256
  7967  002BB4                     l7244:
  7968                           
  7969                           ; BSR set to: 0
  7970  002BB4  0E00               	movlw	0
  7971  002BB6  0100               	movlb	0	; () banked
  7972  002BB8  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7973  002BBA  0E01               	movlw	1
  7974  002BBC  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  7975  002BBE  0E42               	movlw	66
  7976  002BC0  EC23  F01D         	call	_SETxAPIxVAL
  7977  002BC4  D01A               	goto	l7256
  7978  002BC6                     l7246:
  7979  002BC6  0E00               	movlw	0
  7980  002BC8  0100               	movlb	0	; () banked
  7981  002BCA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7982  002BCC  0E01               	movlw	1
  7983  002BCE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  7984  002BD0  0E43               	movlw	67
  7985  002BD2  EC23  F01D         	call	_SETxAPIxVAL
  7986                           
  7987                           ;junction.c: 46: }
  7988                           
  7989                           ;junction.c: 45: default : break;
  7990  002BD6  D011               	goto	l7256
  7991  002BD8                     l7250:
  7992  002BD8  0100               	movlb	0	; () banked
  7993  002BDA  5181               	movf	Junction@Straight_Bend& (0+255),w,b
  7994                           
  7995                           ; Switch size 1, requested type "space"
  7996                           ; Number of cases is 2, Range of values is 0 to 1
  7997                           ; switch strategies available:
  7998                           ; Name         Instructions Cycles
  7999                           ; simple_byte            7     4 (average)
  8000                           ;	Chosen strategy is simple_byte
  8001  002BDC  0A00               	xorlw	0	; case 0
  8002  002BDE  B4D8               	btfsc	status,2,c
  8003  002BE0  D7E9               	goto	l7244
  8004  002BE2  0A01               	xorlw	1	; case 1
  8005  002BE4  B4D8               	btfsc	status,2,c
  8006  002BE6  D7EF               	goto	l7246
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;junction.c: 50: }
  8010                           
  8011                           ; BSR set to: 0
  8012                           
  8013                           ;junction.c: 49: default : break;
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;junction.c: 47: break;
  8017  002BE8  D008               	goto	l7256
  8018  002BEA                     l7254:
  8019                           
  8020                           ; BSR set to: 0
  8021  002BEA  0100               	movlb	0	; () banked
  8022  002BEC  5182               	movf	Junction@Junction_Left_Right& (0+255),w,b
  8023                           
  8024                           ; Switch size 1, requested type "space"
  8025                           ; Number of cases is 2, Range of values is 0 to 1
  8026                           ; switch strategies available:
  8027                           ; Name         Instructions Cycles
  8028                           ; simple_byte            7     4 (average)
  8029                           ;	Chosen strategy is simple_byte
  8030  002BEE  0A00               	xorlw	0	; case 0
  8031  002BF0  B4D8               	btfsc	status,2,c
  8032  002BF2  D7D7               	goto	l7242
  8033  002BF4  0A01               	xorlw	1	; case 1
  8034  002BF6  B4D8               	btfsc	status,2,c
  8035  002BF8  D7EF               	goto	l7250
  8036  002BFA                     l7256:
  8037                           
  8038                           ;junction.c: 51: Switch_Junction = 1;
  8039  002BFA  0E01               	movlw	1
  8040  002BFC  0100               	movlb	0	; () banked
  8041  002BFE  6FA8               	movwf	_Switch_Junction& (0+255),b
  8042                           
  8043                           ;junction.c: 52: break;
  8044  002C00  D053               	goto	l7276
  8045  002C02                     l7258:
  8046                           
  8047                           ; BSR set to: 0
  8048  002C02  0E13               	movlw	19
  8049  002C04  EC38  F01E         	call	_GETxAPIxVAL
  8050  002C08  0100               	movlb	0	; () banked
  8051  002C0A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8052  002C0C  0100               	movlb	0	; () banked
  8053  002C0E  5D8D               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  8054  002C10  0100               	movlb	0	; () banked
  8055  002C12  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  8056  002C14  0100               	movlb	0	; () banked
  8057  002C16  598E               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  8058  002C18  A0D8               	btfss	status,0,c
  8059  002C1A  D00A               	goto	l7262
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;junction.c: 55: {
  8063                           ;junction.c: 56: Switch_Junction = 2;
  8064  002C1C  0E02               	movlw	2
  8065  002C1E  0100               	movlb	0	; () banked
  8066  002C20  6FA8               	movwf	_Switch_Junction& (0+255),b
  8067                           
  8068                           ;junction.c: 57: Junction_Switch_Time = 0;
  8069  002C22  0E00               	movlw	0
  8070  002C24  0100               	movlb	0	; () banked
  8071  002C26  6F8E               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  8072  002C28  0E00               	movlw	0
  8073  002C2A  6F8D               	movwf	Junction@Junction_Switch_Time& (0+255),b
  8074                           
  8075                           ;junction.c: 58: Return_Val = 1;
  8076  002C2C  0E01               	movlw	1
  8077  002C2E  D02E               	goto	L104
  8078  002C30                     l7262:
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;junction.c: 60: }
  8082                           ;junction.c: 61: Return_Val = 1;
  8083  002C30  0E01               	movlw	1
  8084  002C32  0100               	movlb	0	; () banked
  8085  002C34  6FB9               	movwf	Junction@Return_Val& (0+255),b
  8086                           
  8087                           ;junction.c: 62: Switch_Junction = 1;
  8088  002C36  0E01               	movlw	1
  8089  002C38  0100               	movlb	0	; () banked
  8090  002C3A  6FA8               	movwf	_Switch_Junction& (0+255),b
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;junction.c: 63: Junction_Switch_Time++;
  8094  002C3C  0100               	movlb	0	; () banked
  8095  002C3E  4B8D               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  8096  002C40  2B8E               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  8097                           
  8098                           ;junction.c: 64: break;
  8099  002C42  D032               	goto	l7276
  8100  002C44                     l7266:
  8101                           
  8102                           ; BSR set to: 0
  8103  002C44  0E00               	movlw	0
  8104  002C46  0100               	movlb	0	; () banked
  8105  002C48  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8106  002C4A  0E00               	movlw	0
  8107  002C4C  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8108  002C4E  0E40               	movlw	64
  8109  002C50  EC23  F01D         	call	_SETxAPIxVAL
  8110                           
  8111                           ;junction.c: 67: SETxAPIxVAL(0x41, 0);
  8112  002C54  0E00               	movlw	0
  8113  002C56  0100               	movlb	0	; () banked
  8114  002C58  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8115  002C5A  0E00               	movlw	0
  8116  002C5C  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8117  002C5E  0E41               	movlw	65
  8118  002C60  EC23  F01D         	call	_SETxAPIxVAL
  8119                           
  8120                           ;junction.c: 68: SETxAPIxVAL(0x42,0);
  8121  002C64  0E00               	movlw	0
  8122  002C66  0100               	movlb	0	; () banked
  8123  002C68  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8124  002C6A  0E00               	movlw	0
  8125  002C6C  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8126  002C6E  0E42               	movlw	66
  8127  002C70  EC23  F01D         	call	_SETxAPIxVAL
  8128                           
  8129                           ;junction.c: 69: SETxAPIxVAL(0x43,0);
  8130  002C74  0E00               	movlw	0
  8131  002C76  0100               	movlb	0	; () banked
  8132  002C78  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8133  002C7A  0E00               	movlw	0
  8134  002C7C  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8135  002C7E  0E43               	movlw	67
  8136  002C80  EC23  F01D         	call	_SETxAPIxVAL
  8137                           
  8138                           ;junction.c: 70: Switch_Junction = 0;
  8139  002C84  0E00               	movlw	0
  8140  002C86  0100               	movlb	0	; () banked
  8141  002C88  6FA8               	movwf	_Switch_Junction& (0+255),b
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;junction.c: 71: Return_Val = 0;
  8145  002C8A  0E00               	movlw	0
  8146  002C8C                     L104:
  8147  002C8C  0100               	movlb	0	; () banked
  8148  002C8E  6FB9               	movwf	Junction@Return_Val& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;junction.c: 75: }
  8152                           
  8153                           ; BSR set to: 0
  8154                           
  8155                           ;junction.c: 74: default : break;
  8156                           
  8157                           ;junction.c: 72: break;
  8158  002C90  D00B               	goto	l7276
  8159  002C92                     l7274:
  8160  002C92  0100               	movlb	0	; () banked
  8161  002C94  51A8               	movf	_Switch_Junction& (0+255),w,b
  8162                           
  8163                           ; Switch size 1, requested type "space"
  8164                           ; Number of cases is 3, Range of values is 0 to 2
  8165                           ; switch strategies available:
  8166                           ; Name         Instructions Cycles
  8167                           ; simple_byte           10     6 (average)
  8168                           ;	Chosen strategy is simple_byte
  8169  002C96  0A00               	xorlw	0	; case 0
  8170  002C98  B4D8               	btfsc	status,2,c
  8171  002C9A  D76D               	goto	l7234
  8172  002C9C  0A01               	xorlw	1	; case 1
  8173  002C9E  B4D8               	btfsc	status,2,c
  8174  002CA0  D7B0               	goto	l7258
  8175  002CA2  0A03               	xorlw	3	; case 2
  8176  002CA4  B4D8               	btfsc	status,2,c
  8177  002CA6  D7CE               	goto	l7266
  8178  002CA8                     l7276:
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;junction.c: 77: return (Return_Val);
  8182  002CA8  0100               	movlb	0	; () banked
  8183  002CAA  51B9               	movf	Junction@Return_Val& (0+255),w,b
  8184  002CAC  0012               	return	
  8185  002CAE                     __end_of_Junction:
  8186                           	opt stack 0
  8187                           tblptru	equ	0xFF8
  8188                           tblptrh	equ	0xFF7
  8189                           tblptrl	equ	0xFF6
  8190                           tablat	equ	0xFF5
  8191                           postinc0	equ	0xFEE
  8192                           wreg	equ	0xFE8
  8193                           postdec1	equ	0xFE5
  8194                           fsr1h	equ	0xFE2
  8195                           fsr1l	equ	0xFE1
  8196                           status	equ	0xFD8
  8197                           
  8198 ;; *************** function _Red_Led *****************
  8199 ;; Defined at:
  8200 ;;		line 97 in file "../io.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;  Operation       1    wreg     unsigned char 
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  Operation       1   31[COMRAM] unsigned char 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		wreg, status,2, status,0
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8214 ;;      Params:         0       0       0       0       0       0       0       0       0
  8215 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8217 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8218 ;;Total ram usage:        1 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    3
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		_Update_StateMchn
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text13
  8229  0037F4                     __ptext13:
  8230                           	opt stack 0
  8231  0037F4                     _Red_Led:
  8232                           	opt stack 26
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;incstack = 0
  8236                           ;Red_Led@Operation stored from wreg
  8237  0037F4  6E20               	movwf	Red_Led@Operation,c
  8238                           
  8239                           ;io.c: 99: switch(Operation)
  8240  0037F6  D030               	goto	l5302
  8241  0037F8                     l807:
  8242  0037F8  9A83               	bcf	3971,5,c	;volatile
  8243  0037FA  0012               	return	
  8244  0037FC                     l809:
  8245  0037FC  8A83               	bsf	3971,5,c	;volatile
  8246  0037FE  0012               	return	
  8247  003800                     l5280:
  8248  003800  4A25               	infsnz	_Red_Led_Counter,f,c
  8249  003802  2A26               	incf	_Red_Led_Counter+1,f,c
  8250                           
  8251                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  8252  003804  0EB8               	movlw	184
  8253  003806  5C25               	subwf	_Red_Led_Counter,w,c
  8254  003808  0E0B               	movlw	11
  8255  00380A  5826               	subwfb	_Red_Led_Counter+1,w,c
  8256  00380C  A0D8               	btfss	status,0,c
  8257  00380E  D004               	goto	l5286
  8258                           
  8259                           ;io.c: 107: {
  8260                           ;io.c: 108: Red_Led_Counter = 0;
  8261  003810  0E00               	movlw	0
  8262  003812  6E26               	movwf	_Red_Led_Counter+1,c
  8263  003814  0E00               	movlw	0
  8264  003816  6E25               	movwf	_Red_Led_Counter,c
  8265  003818                     l5286:
  8266                           
  8267                           ;io.c: 109: }
  8268                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  8269  003818  0EDC               	movlw	220
  8270  00381A  5C25               	subwf	_Red_Led_Counter,w,c
  8271  00381C  0E05               	movlw	5
  8272  00381E  5826               	subwfb	_Red_Led_Counter+1,w,c
  8273  003820  A0D8               	btfss	status,0,c
  8274  003822  D002               	goto	l812
  8275                           
  8276                           ;io.c: 111: {
  8277                           ;io.c: 112: PORTDbits.RD5 = 1;
  8278  003824  8A83               	bsf	3971,5,c	;volatile
  8279                           
  8280                           ;io.c: 113: }
  8281  003826  0012               	return	
  8282  003828                     l812:
  8283                           
  8284                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  8285  003828  9A83               	bcf	3971,5,c	;volatile
  8286                           
  8287                           ;io.c: 115: break;
  8288  00382A  0012               	return	
  8289  00382C                     l5290:
  8290  00382C  4A25               	infsnz	_Red_Led_Counter,f,c
  8291  00382E  2A26               	incf	_Red_Led_Counter+1,f,c
  8292                           
  8293                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  8294  003830  0EE8               	movlw	232
  8295  003832  5C25               	subwf	_Red_Led_Counter,w,c
  8296  003834  0E03               	movlw	3
  8297  003836  5826               	subwfb	_Red_Led_Counter+1,w,c
  8298  003838  A0D8               	btfss	status,0,c
  8299  00383A  D004               	goto	l5296
  8300                           
  8301                           ;io.c: 119: {
  8302                           ;io.c: 120: Red_Led_Counter = 0;
  8303  00383C  0E00               	movlw	0
  8304  00383E  6E26               	movwf	_Red_Led_Counter+1,c
  8305  003840  0E00               	movlw	0
  8306  003842  6E25               	movwf	_Red_Led_Counter,c
  8307  003844                     l5296:
  8308                           
  8309                           ;io.c: 121: }
  8310                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  8311  003844  0EF4               	movlw	244
  8312  003846  5C25               	subwf	_Red_Led_Counter,w,c
  8313  003848  0E01               	movlw	1
  8314  00384A  5826               	subwfb	_Red_Led_Counter+1,w,c
  8315  00384C  A0D8               	btfss	status,0,c
  8316  00384E  D002               	goto	l816
  8317                           
  8318                           ;io.c: 123: {
  8319                           ;io.c: 124: PORTDbits.RD5 = 1;
  8320  003850  8A83               	bsf	3971,5,c	;volatile
  8321                           
  8322                           ;io.c: 125: }
  8323  003852  0012               	return	
  8324  003854                     l816:
  8325                           
  8326                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  8327  003854  9A83               	bcf	3971,5,c	;volatile
  8328                           
  8329                           ;io.c: 130: }
  8330                           
  8331                           ;io.c: 129: default : break;
  8332                           
  8333                           ;io.c: 127: break;
  8334  003856  0012               	return	
  8335  003858                     l5302:
  8336  003858  5020               	movf	Red_Led@Operation,w,c
  8337                           
  8338                           ; Switch size 1, requested type "space"
  8339                           ; Number of cases is 4, Range of values is 0 to 3
  8340                           ; switch strategies available:
  8341                           ; Name         Instructions Cycles
  8342                           ; simple_byte           13     7 (average)
  8343                           ;	Chosen strategy is simple_byte
  8344  00385A  0A00               	xorlw	0	; case 0
  8345  00385C  B4D8               	btfsc	status,2,c
  8346  00385E  D7CC               	goto	l807
  8347  003860  0A01               	xorlw	1	; case 1
  8348  003862  B4D8               	btfsc	status,2,c
  8349  003864  D7CB               	goto	l809
  8350  003866  0A03               	xorlw	3	; case 2
  8351  003868  B4D8               	btfsc	status,2,c
  8352  00386A  D7CA               	goto	l5280
  8353  00386C  0A01               	xorlw	1	; case 3
  8354  00386E  A4D8               	btfss	status,2,c
  8355  003870  0012               	return	
  8356  003872  D7DC               	goto	l5290
  8357  003874                     __end_of_Red_Led:
  8358                           	opt stack 0
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postdec1	equ	0xFE5
  8366                           fsr1h	equ	0xFE2
  8367                           fsr1l	equ	0xFE1
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function _INCRxAPIxVAL *****************
  8371 ;; Defined at:
  8372 ;;		line 184 in file "../api.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  index           1    wreg     unsigned char 
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  index           1   35[BANK0 ] unsigned char 
  8377 ;;  value           2   33[BANK0 ] unsigned int 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  1    wreg      void 
  8380 ;; Registers used:
  8381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0
  8388 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8390 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8391 ;;Total ram usage:        3 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    7
  8394 ;; This function calls:
  8395 ;;		_GETxAPIxVAL
  8396 ;;		_SETxAPIxVAL
  8397 ;; This function is called by:
  8398 ;;		_Update_StateMchn
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           	psect	text14
  8403  003BF4                     __ptext14:
  8404                           	opt stack 0
  8405  003BF4                     _INCRxAPIxVAL:
  8406                           	opt stack 22
  8407                           
  8408                           ;incstack = 0
  8409                           ;INCRxAPIxVAL@index stored from wreg
  8410  003BF4  0100               	movlb	0	; () banked
  8411  003BF6  6F83               	movwf	INCRxAPIxVAL@index& (0+255),b
  8412                           
  8413                           ;api.c: 185: unsigned int value;
  8414                           ;api.c: 186: value = GETxAPIxVAL(index);
  8415  003BF8  0100               	movlb	0	; () banked
  8416  003BFA  5183               	movf	INCRxAPIxVAL@index& (0+255),w,b
  8417  003BFC  EC38  F01E         	call	_GETxAPIxVAL
  8418  003C00  C060  F081         	movff	?_GETxAPIxVAL,INCRxAPIxVAL@value
  8419  003C04  C061  F082         	movff	?_GETxAPIxVAL+1,INCRxAPIxVAL@value+1
  8420                           
  8421                           ;api.c: 187: value++;
  8422  003C08  0100               	movlb	0	; () banked
  8423  003C0A  4B81               	infsnz	INCRxAPIxVAL@value& (0+255),f,b
  8424  003C0C  2B82               	incf	(INCRxAPIxVAL@value+1)& (0+255),f,b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;api.c: 188: SETxAPIxVAL(index, value);
  8428  003C0E  C081  F07C         	movff	INCRxAPIxVAL@value,SETxAPIxVAL@value
  8429  003C12  C082  F07D         	movff	INCRxAPIxVAL@value+1,SETxAPIxVAL@value+1
  8430  003C16  0100               	movlb	0	; () banked
  8431  003C18  5183               	movf	INCRxAPIxVAL@index& (0+255),w,b
  8432  003C1A  EC23  F01D         	call	_SETxAPIxVAL
  8433  003C1E  0012               	return		;funcret
  8434  003C20                     __end_of_INCRxAPIxVAL:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           postinc0	equ	0xFEE
  8441                           wreg	equ	0xFE8
  8442                           postdec1	equ	0xFE5
  8443                           fsr1h	equ	0xFE2
  8444                           fsr1l	equ	0xFE1
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _Green_Led *****************
  8448 ;; Defined at:
  8449 ;;		line 47 in file "../io.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;  Operation       1    wreg     unsigned char 
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  Operation       1   31[COMRAM] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      void 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8463 ;;      Params:         0       0       0       0       0       0       0       0       0
  8464 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8466 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8467 ;;Total ram usage:        1 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    3
  8470 ;; This function calls:
  8471 ;;		Nothing
  8472 ;; This function is called by:
  8473 ;;		_Update_StateMchn
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           	psect	text15
  8478  003874                     __ptext15:
  8479                           	opt stack 0
  8480  003874                     _Green_Led:
  8481                           	opt stack 26
  8482                           
  8483                           ;incstack = 0
  8484                           ;Green_Led@Operation stored from wreg
  8485  003874  6E20               	movwf	Green_Led@Operation,c
  8486                           
  8487                           ;io.c: 49: switch(Operation)
  8488  003876  D030               	goto	l5276
  8489  003878                     l791:
  8490  003878  9C83               	bcf	3971,6,c	;volatile
  8491  00387A  0012               	return	
  8492  00387C                     l793:
  8493  00387C  8C83               	bsf	3971,6,c	;volatile
  8494  00387E  0012               	return	
  8495  003880                     l5254:
  8496  003880  4A21               	infsnz	_Green_Led_Counter,f,c
  8497  003882  2A22               	incf	_Green_Led_Counter+1,f,c
  8498                           
  8499                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  8500  003884  0EB8               	movlw	184
  8501  003886  5C21               	subwf	_Green_Led_Counter,w,c
  8502  003888  0E0B               	movlw	11
  8503  00388A  5822               	subwfb	_Green_Led_Counter+1,w,c
  8504  00388C  A0D8               	btfss	status,0,c
  8505  00388E  D004               	goto	l5260
  8506                           
  8507                           ;io.c: 57: {
  8508                           ;io.c: 58: Green_Led_Counter = 0;
  8509  003890  0E00               	movlw	0
  8510  003892  6E22               	movwf	_Green_Led_Counter+1,c
  8511  003894  0E00               	movlw	0
  8512  003896  6E21               	movwf	_Green_Led_Counter,c
  8513  003898                     l5260:
  8514                           
  8515                           ;io.c: 59: }
  8516                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  8517  003898  0EDC               	movlw	220
  8518  00389A  5C21               	subwf	_Green_Led_Counter,w,c
  8519  00389C  0E05               	movlw	5
  8520  00389E  5822               	subwfb	_Green_Led_Counter+1,w,c
  8521  0038A0  A0D8               	btfss	status,0,c
  8522  0038A2  D002               	goto	l796
  8523                           
  8524                           ;io.c: 61: {
  8525                           ;io.c: 62: PORTDbits.RD6 = 1;
  8526  0038A4  8C83               	bsf	3971,6,c	;volatile
  8527                           
  8528                           ;io.c: 63: }
  8529  0038A6  0012               	return	
  8530  0038A8                     l796:
  8531                           
  8532                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  8533  0038A8  9C83               	bcf	3971,6,c	;volatile
  8534                           
  8535                           ;io.c: 65: break;
  8536  0038AA  0012               	return	
  8537  0038AC                     l5264:
  8538  0038AC  4A21               	infsnz	_Green_Led_Counter,f,c
  8539  0038AE  2A22               	incf	_Green_Led_Counter+1,f,c
  8540                           
  8541                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  8542  0038B0  0EE8               	movlw	232
  8543  0038B2  5C21               	subwf	_Green_Led_Counter,w,c
  8544  0038B4  0E03               	movlw	3
  8545  0038B6  5822               	subwfb	_Green_Led_Counter+1,w,c
  8546  0038B8  A0D8               	btfss	status,0,c
  8547  0038BA  D004               	goto	l5270
  8548                           
  8549                           ;io.c: 69: {
  8550                           ;io.c: 70: Green_Led_Counter = 0;
  8551  0038BC  0E00               	movlw	0
  8552  0038BE  6E22               	movwf	_Green_Led_Counter+1,c
  8553  0038C0  0E00               	movlw	0
  8554  0038C2  6E21               	movwf	_Green_Led_Counter,c
  8555  0038C4                     l5270:
  8556                           
  8557                           ;io.c: 71: }
  8558                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  8559  0038C4  0EF4               	movlw	244
  8560  0038C6  5C21               	subwf	_Green_Led_Counter,w,c
  8561  0038C8  0E01               	movlw	1
  8562  0038CA  5822               	subwfb	_Green_Led_Counter+1,w,c
  8563  0038CC  A0D8               	btfss	status,0,c
  8564  0038CE  D002               	goto	l800
  8565                           
  8566                           ;io.c: 73: {
  8567                           ;io.c: 74: PORTDbits.RD6 = 1;
  8568  0038D0  8C83               	bsf	3971,6,c	;volatile
  8569                           
  8570                           ;io.c: 75: }
  8571  0038D2  0012               	return	
  8572  0038D4                     l800:
  8573                           
  8574                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  8575  0038D4  9C83               	bcf	3971,6,c	;volatile
  8576                           
  8577                           ;io.c: 80: }
  8578                           
  8579                           ;io.c: 79: default : break;
  8580                           
  8581                           ;io.c: 77: break;
  8582  0038D6  0012               	return	
  8583  0038D8                     l5276:
  8584  0038D8  5020               	movf	Green_Led@Operation,w,c
  8585                           
  8586                           ; Switch size 1, requested type "space"
  8587                           ; Number of cases is 4, Range of values is 0 to 3
  8588                           ; switch strategies available:
  8589                           ; Name         Instructions Cycles
  8590                           ; simple_byte           13     7 (average)
  8591                           ;	Chosen strategy is simple_byte
  8592  0038DA  0A00               	xorlw	0	; case 0
  8593  0038DC  B4D8               	btfsc	status,2,c
  8594  0038DE  D7CC               	goto	l791
  8595  0038E0  0A01               	xorlw	1	; case 1
  8596  0038E2  B4D8               	btfsc	status,2,c
  8597  0038E4  D7CB               	goto	l793
  8598  0038E6  0A03               	xorlw	3	; case 2
  8599  0038E8  B4D8               	btfsc	status,2,c
  8600  0038EA  D7CA               	goto	l5254
  8601  0038EC  0A01               	xorlw	1	; case 3
  8602  0038EE  A4D8               	btfss	status,2,c
  8603  0038F0  0012               	return	
  8604  0038F2  D7DC               	goto	l5264
  8605  0038F4                     __end_of_Green_Led:
  8606                           	opt stack 0
  8607                           tblptru	equ	0xFF8
  8608                           tblptrh	equ	0xFF7
  8609                           tblptrl	equ	0xFF6
  8610                           tablat	equ	0xFF5
  8611                           postinc0	equ	0xFEE
  8612                           wreg	equ	0xFE8
  8613                           postdec1	equ	0xFE5
  8614                           fsr1h	equ	0xFE2
  8615                           fsr1l	equ	0xFE1
  8616                           status	equ	0xFD8
  8617                           
  8618 ;; *************** function _Eeprom_Store *****************
  8619 ;; Defined at:
  8620 ;;		line 21 in file "../eeprom_settings.c"
  8621 ;; Parameters:    Size  Location     Type
  8622 ;;		None
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;		None
  8625 ;; Return value:  Size  Location     Type
  8626 ;;                  1    wreg      void 
  8627 ;; Registers used:
  8628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8629 ;; Tracked objects:
  8630 ;;		On entry : 0/0
  8631 ;;		On exit  : 0/0
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8634 ;;      Params:         0       0       0       0       0       0       0       0       0
  8635 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8637 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8638 ;;Total ram usage:        0 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    4
  8641 ;; This function calls:
  8642 ;;		_GETxAPIxVAL
  8643 ;; This function is called by:
  8644 ;;		_Update_StateMchn
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           	psect	text16
  8649  003512                     __ptext16:
  8650                           	opt stack 0
  8651  003512                     _Eeprom_Store:
  8652                           	opt stack 25
  8653                           
  8654                           ;eeprom_settings.c: 23: INTCON = 0x00;
  8655                           
  8656                           ;incstack = 0
  8657  003512  0E00               	movlw	0
  8658  003514  6EF2               	movwf	intcon,c	;volatile
  8659                           
  8660                           ;eeprom_settings.c: 25: EECON1bits.EEPGD = 0;
  8661  003516  9EA6               	bcf	4006,7,c	;volatile
  8662                           
  8663                           ;eeprom_settings.c: 26: EECON1bits.WREN = 1;
  8664  003518  84A6               	bsf	4006,2,c	;volatile
  8665                           
  8666                           ;eeprom_settings.c: 27: EEADR = 0x01;
  8667  00351A  0E01               	movlw	1
  8668  00351C  6EA9               	movwf	4009,c	;volatile
  8669                           
  8670                           ;eeprom_settings.c: 28: EEDATA = GETxAPIxVAL(0x17);
  8671  00351E  0E17               	movlw	23
  8672  003520  EC38  F01E         	call	_GETxAPIxVAL
  8673  003524  0100               	movlb	0	; () banked
  8674  003526  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8675  003528  6EA8               	movwf	4008,c	;volatile
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;eeprom_settings.c: 29: EECON2 = 0x55;
  8679  00352A  0E55               	movlw	85
  8680  00352C  6EA7               	movwf	4007,c	;volatile
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;eeprom_settings.c: 30: EECON2 = 0xaa;
  8684  00352E  0EAA               	movlw	170
  8685  003530  6EA7               	movwf	4007,c	;volatile
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;eeprom_settings.c: 31: EECON1bits.WR = 1;
  8689  003532  82A6               	bsf	4006,1,c	;volatile
  8690  003534                     l720:
  8691  003534  A8A1               	btfss	4001,4,c	;volatile
  8692  003536  D7FE               	goto	l720
  8693                           
  8694                           ;eeprom_settings.c: 33: PIR2bits.EEIF = 0;
  8695  003538  98A1               	bcf	4001,4,c	;volatile
  8696                           
  8697                           ;eeprom_settings.c: 35: EECON1bits.EEPGD = 0;
  8698  00353A  9EA6               	bcf	4006,7,c	;volatile
  8699                           
  8700                           ;eeprom_settings.c: 36: EECON1bits.WREN = 1;
  8701  00353C  84A6               	bsf	4006,2,c	;volatile
  8702                           
  8703                           ;eeprom_settings.c: 37: EEADR = 0x00;
  8704  00353E  0E00               	movlw	0
  8705  003540  6EA9               	movwf	4009,c	;volatile
  8706                           
  8707                           ;eeprom_settings.c: 38: EEDATA = GETxAPIxVAL(0x17)>>8;
  8708  003542  0E17               	movlw	23
  8709  003544  EC38  F01E         	call	_GETxAPIxVAL
  8710  003548  0100               	movlb	0	; () banked
  8711  00354A  C061  F060         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  8712  00354E  0100               	movlb	0	; () banked
  8713  003550  6B61               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  8714  003552  0100               	movlb	0	; () banked
  8715  003554  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8716  003556  6EA8               	movwf	4008,c	;volatile
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;eeprom_settings.c: 39: EECON2 = 0x55;
  8720  003558  0E55               	movlw	85
  8721  00355A  6EA7               	movwf	4007,c	;volatile
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;eeprom_settings.c: 40: EECON2 = 0xaa;
  8725  00355C  0EAA               	movlw	170
  8726  00355E  6EA7               	movwf	4007,c	;volatile
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;eeprom_settings.c: 41: EECON1bits.WR = 1;
  8730  003560  82A6               	bsf	4006,1,c	;volatile
  8731  003562                     l723:
  8732  003562  A8A1               	btfss	4001,4,c	;volatile
  8733  003564  D7FE               	goto	l723
  8734                           
  8735                           ;eeprom_settings.c: 43: PIR2bits.EEIF = 0;
  8736  003566  98A1               	bcf	4001,4,c	;volatile
  8737                           
  8738                           ;eeprom_settings.c: 45: EECON1bits.EEPGD = 0;
  8739  003568  9EA6               	bcf	4006,7,c	;volatile
  8740                           
  8741                           ;eeprom_settings.c: 46: EECON1bits.WREN = 1;
  8742  00356A  84A6               	bsf	4006,2,c	;volatile
  8743                           
  8744                           ;eeprom_settings.c: 47: EEADR = 0x03;
  8745  00356C  0E03               	movlw	3
  8746  00356E  6EA9               	movwf	4009,c	;volatile
  8747                           
  8748                           ;eeprom_settings.c: 48: EEDATA = GETxAPIxVAL(0x18);
  8749  003570  0E18               	movlw	24
  8750  003572  EC38  F01E         	call	_GETxAPIxVAL
  8751  003576  0100               	movlb	0	; () banked
  8752  003578  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8753  00357A  6EA8               	movwf	4008,c	;volatile
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;eeprom_settings.c: 49: EECON2 = 0x55;
  8757  00357C  0E55               	movlw	85
  8758  00357E  6EA7               	movwf	4007,c	;volatile
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;eeprom_settings.c: 50: EECON2 = 0xaa;
  8762  003580  0EAA               	movlw	170
  8763  003582  6EA7               	movwf	4007,c	;volatile
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;eeprom_settings.c: 51: EECON1bits.WR = 1;
  8767  003584  82A6               	bsf	4006,1,c	;volatile
  8768  003586                     l726:
  8769  003586  A8A1               	btfss	4001,4,c	;volatile
  8770  003588  D7FE               	goto	l726
  8771                           
  8772                           ;eeprom_settings.c: 53: PIR2bits.EEIF = 0;
  8773  00358A  98A1               	bcf	4001,4,c	;volatile
  8774                           
  8775                           ;eeprom_settings.c: 55: EECON1bits.EEPGD = 0;
  8776  00358C  9EA6               	bcf	4006,7,c	;volatile
  8777                           
  8778                           ;eeprom_settings.c: 56: EECON1bits.WREN = 1;
  8779  00358E  84A6               	bsf	4006,2,c	;volatile
  8780                           
  8781                           ;eeprom_settings.c: 57: EEADR = 0x02;
  8782  003590  0E02               	movlw	2
  8783  003592  6EA9               	movwf	4009,c	;volatile
  8784                           
  8785                           ;eeprom_settings.c: 58: EEDATA = GETxAPIxVAL(0x18)>>8;
  8786  003594  0E18               	movlw	24
  8787  003596  EC38  F01E         	call	_GETxAPIxVAL
  8788  00359A  0100               	movlb	0	; () banked
  8789  00359C  C061  F060         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  8790  0035A0  0100               	movlb	0	; () banked
  8791  0035A2  6B61               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  8792  0035A4  0100               	movlb	0	; () banked
  8793  0035A6  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8794  0035A8  6EA8               	movwf	4008,c	;volatile
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;eeprom_settings.c: 59: EECON2 = 0x55;
  8798  0035AA  0E55               	movlw	85
  8799  0035AC  6EA7               	movwf	4007,c	;volatile
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;eeprom_settings.c: 60: EECON2 = 0xaa;
  8803  0035AE  0EAA               	movlw	170
  8804  0035B0  6EA7               	movwf	4007,c	;volatile
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;eeprom_settings.c: 61: EECON1bits.WR = 1;
  8808  0035B2  82A6               	bsf	4006,1,c	;volatile
  8809  0035B4                     l729:
  8810  0035B4  A8A1               	btfss	4001,4,c	;volatile
  8811  0035B6  D7FE               	goto	l729
  8812                           
  8813                           ;eeprom_settings.c: 63: PIR2bits.EEIF = 0;
  8814  0035B8  98A1               	bcf	4001,4,c	;volatile
  8815                           
  8816                           ;eeprom_settings.c: 65: EECON1bits.EEPGD = 0;
  8817  0035BA  9EA6               	bcf	4006,7,c	;volatile
  8818                           
  8819                           ;eeprom_settings.c: 66: EECON1bits.WREN = 1;
  8820  0035BC  84A6               	bsf	4006,2,c	;volatile
  8821                           
  8822                           ;eeprom_settings.c: 67: EEADR = 0x04;
  8823  0035BE  0E04               	movlw	4
  8824  0035C0  6EA9               	movwf	4009,c	;volatile
  8825                           
  8826                           ;eeprom_settings.c: 68: EEDATA = GETxAPIxVAL(0x19);
  8827  0035C2  0E19               	movlw	25
  8828  0035C4  EC38  F01E         	call	_GETxAPIxVAL
  8829  0035C8  0100               	movlb	0	; () banked
  8830  0035CA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8831  0035CC  6EA8               	movwf	4008,c	;volatile
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;eeprom_settings.c: 69: EECON2 = 0x55;
  8835  0035CE  0E55               	movlw	85
  8836  0035D0  6EA7               	movwf	4007,c	;volatile
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;eeprom_settings.c: 70: EECON2 = 0xaa;
  8840  0035D2  0EAA               	movlw	170
  8841  0035D4  6EA7               	movwf	4007,c	;volatile
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;eeprom_settings.c: 71: EECON1bits.WR = 1;
  8845  0035D6  82A6               	bsf	4006,1,c	;volatile
  8846  0035D8                     l732:
  8847  0035D8  A8A1               	btfss	4001,4,c	;volatile
  8848  0035DA  D7FE               	goto	l732
  8849                           
  8850                           ;eeprom_settings.c: 73: PIR2bits.EEIF = 0;
  8851  0035DC  98A1               	bcf	4001,4,c	;volatile
  8852                           
  8853                           ;eeprom_settings.c: 76: INTCON = 0xA0;
  8854  0035DE  0EA0               	movlw	160
  8855  0035E0  6EF2               	movwf	intcon,c	;volatile
  8856  0035E2  0012               	return		;funcret
  8857  0035E4                     __end_of_Eeprom_Store:
  8858                           	opt stack 0
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           intcon	equ	0xFF2
  8864                           postinc0	equ	0xFEE
  8865                           wreg	equ	0xFE8
  8866                           postdec1	equ	0xFE5
  8867                           fsr1h	equ	0xFE2
  8868                           fsr1l	equ	0xFE1
  8869                           status	equ	0xFD8
  8870                           
  8871 ;; *************** function _Debounce_Inputs *****************
  8872 ;; Defined at:
  8873 ;;		line 148 in file "../io.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8889 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8890 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8891 ;;Total ram usage:        2 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    7
  8894 ;; This function calls:
  8895 ;;		_GETxAPIxVAL
  8896 ;;		_SETxAPIxVAL
  8897 ;;		_SetDCPWM1
  8898 ;; This function is called by:
  8899 ;;		_Update_StateMchn
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           	psect	text17
  8904  001864                     __ptext17:
  8905                           	opt stack 0
  8906  001864                     _Debounce_Inputs:
  8907                           	opt stack 22
  8908                           
  8909                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(0x40);
  8910                           
  8911                           ;incstack = 0
  8912  001864  0E40               	movlw	64
  8913  001866  EC38  F01E         	call	_GETxAPIxVAL
  8914  00186A  0100               	movlb	0	; () banked
  8915  00186C  4760               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  8916  00186E  0100               	movlb	0	; () banked
  8917  001870  4760               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  8918  001872  0100               	movlb	0	; () banked
  8919  001874  4760               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  8920  001876  5080               	movf	3968,w,c	;volatile
  8921  001878  0100               	movlb	0	; () banked
  8922  00187A  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8923  00187C  0BF7               	andlw	-9
  8924  00187E  0100               	movlb	0	; () banked
  8925  001880  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8926  001882  6E80               	movwf	3968,c	;volatile
  8927                           
  8928                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(0x41);
  8929  001884  0E41               	movlw	65
  8930  001886  EC38  F01E         	call	_GETxAPIxVAL
  8931  00188A  0100               	movlb	0	; () banked
  8932  00188C  4760               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  8933  00188E  0100               	movlb	0	; () banked
  8934  001890  4760               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  8935  001892  5080               	movf	3968,w,c	;volatile
  8936  001894  0100               	movlb	0	; () banked
  8937  001896  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8938  001898  0BFB               	andlw	-5
  8939  00189A  0100               	movlb	0	; () banked
  8940  00189C  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8941  00189E  6E80               	movwf	3968,c	;volatile
  8942                           
  8943                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(0x42);
  8944  0018A0  0E42               	movlw	66
  8945  0018A2  EC38  F01E         	call	_GETxAPIxVAL
  8946  0018A6  0100               	movlb	0	; () banked
  8947  0018A8  4760               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  8948  0018AA  5080               	movf	3968,w,c	;volatile
  8949  0018AC  0100               	movlb	0	; () banked
  8950  0018AE  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8951  0018B0  0BFD               	andlw	-3
  8952  0018B2  0100               	movlb	0	; () banked
  8953  0018B4  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8954  0018B6  6E80               	movwf	3968,c	;volatile
  8955                           
  8956                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(0x43);
  8957  0018B8  0E43               	movlw	67
  8958  0018BA  EC38  F01E         	call	_GETxAPIxVAL
  8959  0018BE  5080               	movf	3968,w,c	;volatile
  8960  0018C0  0100               	movlb	0	; () banked
  8961  0018C2  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8962  0018C4  0BFE               	andlw	-2
  8963  0018C6  0100               	movlb	0	; () banked
  8964  0018C8  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8965  0018CA  6E80               	movwf	3968,c	;volatile
  8966                           
  8967                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(0x45);
  8968  0018CC  0E45               	movlw	69
  8969  0018CE  EC38  F01E         	call	_GETxAPIxVAL
  8970  0018D2  5082               	movf	3970,w,c	;volatile
  8971  0018D4  0100               	movlb	0	; () banked
  8972  0018D6  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8973  0018D8  0BFE               	andlw	-2
  8974  0018DA  0100               	movlb	0	; () banked
  8975  0018DC  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  8976  0018DE  6E82               	movwf	3970,c	;volatile
  8977                           
  8978                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(0x44));
  8979  0018E0  0E44               	movlw	68
  8980  0018E2  EC38  F01E         	call	_GETxAPIxVAL
  8981  0018E6  C060  F062         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8982  0018EA  C061  F063         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8983  0018EE  EC73  F01D         	call	_SetDCPWM1	;wreg free
  8984                           
  8985                           ;io.c: 157: switch(PORTDbits.RD1)
  8986  0018F2  D02A               	goto	l7764
  8987  0018F4                     l7746:
  8988  0018F4  5032               	movf	_Reed_Contact_LF_Counter,w,c
  8989  0018F6  B4D8               	btfsc	status,2,c
  8990  0018F8  D002               	goto	l7752
  8991                           
  8992                           ;io.c: 160: {
  8993                           ;io.c: 161: Reed_Contact_LF_Counter--;
  8994  0018FA  0632               	decf	_Reed_Contact_LF_Counter,f,c
  8995                           
  8996                           ;io.c: 163: }
  8997                           
  8998                           ;io.c: 162: break;
  8999  0018FC  D05B               	goto	l7784
  9000  0018FE                     l7752:
  9001                           
  9002                           ;io.c: 164: else {SETxAPIxVAL(0x1F, 0);}
  9003  0018FE  0E00               	movlw	0
  9004  001900  0100               	movlb	0	; () banked
  9005  001902  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9006  001904  0E00               	movlw	0
  9007  001906  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9008  001908  0E1F               	movlw	31
  9009  00190A  EC23  F01D         	call	_SETxAPIxVAL
  9010                           
  9011                           ;io.c: 165: break;
  9012  00190E  D052               	goto	l7784
  9013  001910                     l7754:
  9014  001910  5032               	movf	_Reed_Contact_LF_Counter,w,c
  9015  001912  0100               	movlb	0	; () banked
  9016  001914  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9017  001916  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9018  001918  0E1B               	movlw	27
  9019  00191A  EC38  F01E         	call	_GETxAPIxVAL
  9020  00191E  0100               	movlb	0	; () banked
  9021  001920  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9022  001922  0100               	movlb	0	; () banked
  9023  001924  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9024  001926  0100               	movlb	0	; () banked
  9025  001928  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9026  00192A  0100               	movlb	0	; () banked
  9027  00192C  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9028  00192E  A0D8               	btfss	status,0,c
  9029  001930  D002               	goto	l7760
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;io.c: 168: {
  9033                           ;io.c: 169: Reed_Contact_LF_Counter++;
  9034  001932  2A32               	incf	_Reed_Contact_LF_Counter,f,c
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;io.c: 171: }
  9038                           
  9039                           ;io.c: 170: break;
  9040  001934  D03F               	goto	l7784
  9041  001936                     l7760:
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;io.c: 172: else {SETxAPIxVAL(0x1F, 1);}
  9045  001936  0E00               	movlw	0
  9046  001938  0100               	movlb	0	; () banked
  9047  00193A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9048  00193C  0E01               	movlw	1
  9049  00193E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9050  001940  0E1F               	movlw	31
  9051  001942  EC23  F01D         	call	_SETxAPIxVAL
  9052                           
  9053                           ;io.c: 176: }
  9054                           
  9055                           ;io.c: 175: default : break;
  9056                           
  9057                           ;io.c: 173: break;
  9058  001946  D036               	goto	l7784
  9059  001948                     l7764:
  9060  001948  A283               	btfss	3971,1,c	;volatile
  9061  00194A  D002               	goto	u6540
  9062  00194C  0E01               	movlw	1
  9063  00194E  D001               	goto	u6546
  9064  001950                     u6540:
  9065  001950  0E00               	movlw	0
  9066  001952                     u6546:
  9067                           
  9068                           ; Switch size 1, requested type "space"
  9069                           ; Number of cases is 2, Range of values is 0 to 1
  9070                           ; switch strategies available:
  9071                           ; Name         Instructions Cycles
  9072                           ; simple_byte            7     4 (average)
  9073                           ;	Chosen strategy is simple_byte
  9074  001952  0A00               	xorlw	0	; case 0
  9075  001954  B4D8               	btfsc	status,2,c
  9076  001956  D7DC               	goto	l7754
  9077  001958  0A01               	xorlw	1	; case 1
  9078  00195A  B4D8               	btfsc	status,2,c
  9079  00195C  D7CB               	goto	l7746
  9080                           
  9081                           ;io.c: 179: switch(PORTDbits.RD0)
  9082  00195E  D02A               	goto	l7784
  9083  001960                     l7766:
  9084  001960  5031               	movf	_Reed_Contact_LB_Counter,w,c
  9085  001962  B4D8               	btfsc	status,2,c
  9086  001964  D002               	goto	l7772
  9087                           
  9088                           ;io.c: 182: {
  9089                           ;io.c: 183: Reed_Contact_LB_Counter--;
  9090  001966  0631               	decf	_Reed_Contact_LB_Counter,f,c
  9091                           
  9092                           ;io.c: 185: }
  9093                           
  9094                           ;io.c: 184: break;
  9095  001968  D05B               	goto	l7804
  9096  00196A                     l7772:
  9097                           
  9098                           ;io.c: 186: else {SETxAPIxVAL(0x1E, 0);}
  9099  00196A  0E00               	movlw	0
  9100  00196C  0100               	movlb	0	; () banked
  9101  00196E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9102  001970  0E00               	movlw	0
  9103  001972  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9104  001974  0E1E               	movlw	30
  9105  001976  EC23  F01D         	call	_SETxAPIxVAL
  9106                           
  9107                           ;io.c: 187: break;
  9108  00197A  D052               	goto	l7804
  9109  00197C                     l7774:
  9110  00197C  5031               	movf	_Reed_Contact_LB_Counter,w,c
  9111  00197E  0100               	movlb	0	; () banked
  9112  001980  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9113  001982  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9114  001984  0E1B               	movlw	27
  9115  001986  EC38  F01E         	call	_GETxAPIxVAL
  9116  00198A  0100               	movlb	0	; () banked
  9117  00198C  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9118  00198E  0100               	movlb	0	; () banked
  9119  001990  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9120  001992  0100               	movlb	0	; () banked
  9121  001994  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9122  001996  0100               	movlb	0	; () banked
  9123  001998  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9124  00199A  A0D8               	btfss	status,0,c
  9125  00199C  D002               	goto	l7780
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;io.c: 190: {
  9129                           ;io.c: 191: Reed_Contact_LB_Counter++;
  9130  00199E  2A31               	incf	_Reed_Contact_LB_Counter,f,c
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;io.c: 193: }
  9134                           
  9135                           ;io.c: 192: break;
  9136  0019A0  D03F               	goto	l7804
  9137  0019A2                     l7780:
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;io.c: 194: else {SETxAPIxVAL(0x1E, 1);}
  9141  0019A2  0E00               	movlw	0
  9142  0019A4  0100               	movlb	0	; () banked
  9143  0019A6  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9144  0019A8  0E01               	movlw	1
  9145  0019AA  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9146  0019AC  0E1E               	movlw	30
  9147  0019AE  EC23  F01D         	call	_SETxAPIxVAL
  9148                           
  9149                           ;io.c: 198: }
  9150                           
  9151                           ;io.c: 197: default : break;
  9152                           
  9153                           ;io.c: 195: break;
  9154  0019B2  D036               	goto	l7804
  9155  0019B4                     l7784:
  9156  0019B4  A083               	btfss	3971,0,c	;volatile
  9157  0019B6  D002               	goto	u6570
  9158  0019B8  0E01               	movlw	1
  9159  0019BA  D001               	goto	u6576
  9160  0019BC                     u6570:
  9161  0019BC  0E00               	movlw	0
  9162  0019BE                     u6576:
  9163                           
  9164                           ; Switch size 1, requested type "space"
  9165                           ; Number of cases is 2, Range of values is 0 to 1
  9166                           ; switch strategies available:
  9167                           ; Name         Instructions Cycles
  9168                           ; simple_byte            7     4 (average)
  9169                           ;	Chosen strategy is simple_byte
  9170  0019BE  0A00               	xorlw	0	; case 0
  9171  0019C0  B4D8               	btfsc	status,2,c
  9172  0019C2  D7DC               	goto	l7774
  9173  0019C4  0A01               	xorlw	1	; case 1
  9174  0019C6  B4D8               	btfsc	status,2,c
  9175  0019C8  D7CB               	goto	l7766
  9176                           
  9177                           ;io.c: 201: switch(PORTDbits.RD3)
  9178  0019CA  D02A               	goto	l7804
  9179  0019CC                     l7786:
  9180  0019CC  5036               	movf	_Reed_Contact_RF_Counter,w,c
  9181  0019CE  B4D8               	btfsc	status,2,c
  9182  0019D0  D002               	goto	l7792
  9183                           
  9184                           ;io.c: 204: {
  9185                           ;io.c: 205: Reed_Contact_RF_Counter--;
  9186  0019D2  0636               	decf	_Reed_Contact_RF_Counter,f,c
  9187                           
  9188                           ;io.c: 207: }
  9189                           
  9190                           ;io.c: 206: break;
  9191  0019D4  D05B               	goto	l7824
  9192  0019D6                     l7792:
  9193                           
  9194                           ;io.c: 208: else {SETxAPIxVAL(0x1D, 0);}
  9195  0019D6  0E00               	movlw	0
  9196  0019D8  0100               	movlb	0	; () banked
  9197  0019DA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9198  0019DC  0E00               	movlw	0
  9199  0019DE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9200  0019E0  0E1D               	movlw	29
  9201  0019E2  EC23  F01D         	call	_SETxAPIxVAL
  9202                           
  9203                           ;io.c: 209: break;
  9204  0019E6  D052               	goto	l7824
  9205  0019E8                     l7794:
  9206  0019E8  5036               	movf	_Reed_Contact_RF_Counter,w,c
  9207  0019EA  0100               	movlb	0	; () banked
  9208  0019EC  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9209  0019EE  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9210  0019F0  0E1B               	movlw	27
  9211  0019F2  EC38  F01E         	call	_GETxAPIxVAL
  9212  0019F6  0100               	movlb	0	; () banked
  9213  0019F8  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9214  0019FA  0100               	movlb	0	; () banked
  9215  0019FC  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9216  0019FE  0100               	movlb	0	; () banked
  9217  001A00  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9218  001A02  0100               	movlb	0	; () banked
  9219  001A04  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9220  001A06  A0D8               	btfss	status,0,c
  9221  001A08  D002               	goto	l7800
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;io.c: 212: {
  9225                           ;io.c: 213: Reed_Contact_RF_Counter++;
  9226  001A0A  2A36               	incf	_Reed_Contact_RF_Counter,f,c
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;io.c: 215: }
  9230                           
  9231                           ;io.c: 214: break;
  9232  001A0C  D03F               	goto	l7824
  9233  001A0E                     l7800:
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;io.c: 216: else {SETxAPIxVAL(0x1D, 1);}
  9237  001A0E  0E00               	movlw	0
  9238  001A10  0100               	movlb	0	; () banked
  9239  001A12  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9240  001A14  0E01               	movlw	1
  9241  001A16  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9242  001A18  0E1D               	movlw	29
  9243  001A1A  EC23  F01D         	call	_SETxAPIxVAL
  9244                           
  9245                           ;io.c: 220: }
  9246                           
  9247                           ;io.c: 219: default : break;
  9248                           
  9249                           ;io.c: 217: break;
  9250  001A1E  D036               	goto	l7824
  9251  001A20                     l7804:
  9252  001A20  A683               	btfss	3971,3,c	;volatile
  9253  001A22  D002               	goto	u6600
  9254  001A24  0E01               	movlw	1
  9255  001A26  D001               	goto	u6606
  9256  001A28                     u6600:
  9257  001A28  0E00               	movlw	0
  9258  001A2A                     u6606:
  9259                           
  9260                           ; Switch size 1, requested type "space"
  9261                           ; Number of cases is 2, Range of values is 0 to 1
  9262                           ; switch strategies available:
  9263                           ; Name         Instructions Cycles
  9264                           ; simple_byte            7     4 (average)
  9265                           ;	Chosen strategy is simple_byte
  9266  001A2A  0A00               	xorlw	0	; case 0
  9267  001A2C  B4D8               	btfsc	status,2,c
  9268  001A2E  D7DC               	goto	l7794
  9269  001A30  0A01               	xorlw	1	; case 1
  9270  001A32  B4D8               	btfsc	status,2,c
  9271  001A34  D7CB               	goto	l7786
  9272                           
  9273                           ;io.c: 223: switch(PORTDbits.RD2)
  9274  001A36  D02A               	goto	l7824
  9275  001A38                     l7806:
  9276  001A38  5035               	movf	_Reed_Contact_RB_Counter,w,c
  9277  001A3A  B4D8               	btfsc	status,2,c
  9278  001A3C  D002               	goto	l7812
  9279                           
  9280                           ;io.c: 226: {
  9281                           ;io.c: 227: Reed_Contact_RB_Counter--;
  9282  001A3E  0635               	decf	_Reed_Contact_RB_Counter,f,c
  9283                           
  9284                           ;io.c: 229: }
  9285                           
  9286                           ;io.c: 228: break;
  9287  001A40  D05B               	goto	l7844
  9288  001A42                     l7812:
  9289                           
  9290                           ;io.c: 230: else {SETxAPIxVAL(0x1C, 0);}
  9291  001A42  0E00               	movlw	0
  9292  001A44  0100               	movlb	0	; () banked
  9293  001A46  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9294  001A48  0E00               	movlw	0
  9295  001A4A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9296  001A4C  0E1C               	movlw	28
  9297  001A4E  EC23  F01D         	call	_SETxAPIxVAL
  9298                           
  9299                           ;io.c: 231: break;
  9300  001A52  D052               	goto	l7844
  9301  001A54                     l7814:
  9302  001A54  5035               	movf	_Reed_Contact_RB_Counter,w,c
  9303  001A56  0100               	movlb	0	; () banked
  9304  001A58  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9305  001A5A  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9306  001A5C  0E1B               	movlw	27
  9307  001A5E  EC38  F01E         	call	_GETxAPIxVAL
  9308  001A62  0100               	movlb	0	; () banked
  9309  001A64  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9310  001A66  0100               	movlb	0	; () banked
  9311  001A68  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9312  001A6A  0100               	movlb	0	; () banked
  9313  001A6C  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9314  001A6E  0100               	movlb	0	; () banked
  9315  001A70  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9316  001A72  A0D8               	btfss	status,0,c
  9317  001A74  D002               	goto	l7820
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;io.c: 234: {
  9321                           ;io.c: 235: Reed_Contact_RB_Counter++;
  9322  001A76  2A35               	incf	_Reed_Contact_RB_Counter,f,c
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;io.c: 237: }
  9326                           
  9327                           ;io.c: 236: break;
  9328  001A78  D03F               	goto	l7844
  9329  001A7A                     l7820:
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;io.c: 238: else {SETxAPIxVAL(0x1C, 1);}
  9333  001A7A  0E00               	movlw	0
  9334  001A7C  0100               	movlb	0	; () banked
  9335  001A7E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9336  001A80  0E01               	movlw	1
  9337  001A82  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9338  001A84  0E1C               	movlw	28
  9339  001A86  EC23  F01D         	call	_SETxAPIxVAL
  9340                           
  9341                           ;io.c: 242: }
  9342                           
  9343                           ;io.c: 241: default : break;
  9344                           
  9345                           ;io.c: 239: break;
  9346  001A8A  D036               	goto	l7844
  9347  001A8C                     l7824:
  9348  001A8C  A483               	btfss	3971,2,c	;volatile
  9349  001A8E  D002               	goto	u6630
  9350  001A90  0E01               	movlw	1
  9351  001A92  D001               	goto	u6636
  9352  001A94                     u6630:
  9353  001A94  0E00               	movlw	0
  9354  001A96                     u6636:
  9355                           
  9356                           ; Switch size 1, requested type "space"
  9357                           ; Number of cases is 2, Range of values is 0 to 1
  9358                           ; switch strategies available:
  9359                           ; Name         Instructions Cycles
  9360                           ; simple_byte            7     4 (average)
  9361                           ;	Chosen strategy is simple_byte
  9362  001A96  0A00               	xorlw	0	; case 0
  9363  001A98  B4D8               	btfsc	status,2,c
  9364  001A9A  D7DC               	goto	l7814
  9365  001A9C  0A01               	xorlw	1	; case 1
  9366  001A9E  B4D8               	btfsc	status,2,c
  9367  001AA0  D7CB               	goto	l7806
  9368                           
  9369                           ;io.c: 245: switch(!PORTBbits.RB0)
  9370  001AA2  D02A               	goto	l7844
  9371  001AA4                     l7826:
  9372  001AA4  502E               	movf	_Button_Contact_Counter_Start,w,c
  9373  001AA6  0100               	movlb	0	; () banked
  9374  001AA8  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9375  001AAA  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9376  001AAC  0E1B               	movlw	27
  9377  001AAE  EC38  F01E         	call	_GETxAPIxVAL
  9378  001AB2  0100               	movlb	0	; () banked
  9379  001AB4  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9380  001AB6  0100               	movlb	0	; () banked
  9381  001AB8  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9382  001ABA  0100               	movlb	0	; () banked
  9383  001ABC  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9384  001ABE  0100               	movlb	0	; () banked
  9385  001AC0  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9386  001AC2  A0D8               	btfss	status,0,c
  9387  001AC4  D002               	goto	l7832
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;io.c: 248: {
  9391                           ;io.c: 249: Button_Contact_Counter_Start++;
  9392  001AC6  2A2E               	incf	_Button_Contact_Counter_Start,f,c
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;io.c: 251: }
  9396                           
  9397                           ;io.c: 250: break;
  9398  001AC8  D057               	goto	l7864
  9399  001ACA                     l7832:
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;io.c: 252: else {SETxAPIxVAL(0x20, 1); }
  9403  001ACA  0E00               	movlw	0
  9404  001ACC  0100               	movlb	0	; () banked
  9405  001ACE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9406  001AD0  0E01               	movlw	1
  9407  001AD2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9408  001AD4  0E20               	movlw	32
  9409  001AD6  EC23  F01D         	call	_SETxAPIxVAL
  9410                           
  9411                           ;io.c: 253: break;
  9412  001ADA  D04E               	goto	l7864
  9413  001ADC                     l7834:
  9414  001ADC  502E               	movf	_Button_Contact_Counter_Start,w,c
  9415  001ADE  B4D8               	btfsc	status,2,c
  9416  001AE0  D002               	goto	l7840
  9417                           
  9418                           ;io.c: 256: {
  9419                           ;io.c: 257: Button_Contact_Counter_Start--;
  9420  001AE2  062E               	decf	_Button_Contact_Counter_Start,f,c
  9421                           
  9422                           ;io.c: 259: }
  9423                           
  9424                           ;io.c: 258: break;
  9425  001AE4  D049               	goto	l7864
  9426  001AE6                     l7840:
  9427                           
  9428                           ;io.c: 260: else {SETxAPIxVAL(0x20, 0);}
  9429  001AE6  0E00               	movlw	0
  9430  001AE8  0100               	movlb	0	; () banked
  9431  001AEA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9432  001AEC  0E00               	movlw	0
  9433  001AEE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9434  001AF0  0E20               	movlw	32
  9435  001AF2  EC23  F01D         	call	_SETxAPIxVAL
  9436                           
  9437                           ;io.c: 264: }
  9438                           
  9439                           ;io.c: 263: default : break;
  9440                           
  9441                           ;io.c: 261: break;
  9442  001AF6  D040               	goto	l7864
  9443  001AF8                     l7844:
  9444  001AF8  B081               	btfsc	3969,0,c	;volatile
  9445  001AFA  D002               	goto	u6660
  9446  001AFC  0E01               	movlw	1
  9447  001AFE  D001               	goto	u6670
  9448  001B00                     u6660:
  9449  001B00  0E00               	movlw	0
  9450  001B02                     u6670:
  9451  001B02  0100               	movlb	0	; () banked
  9452  001B04  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9453  001B06  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9454                           
  9455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9456                           ; Switch size 1, requested type "space"
  9457                           ; Number of cases is 1, Range of values is 0 to 0
  9458                           ; switch strategies available:
  9459                           ; Name         Instructions Cycles
  9460                           ; simple_byte            4     3 (average)
  9461                           ;	Chosen strategy is simple_byte
  9462  001B08  0100               	movlb	0	; () banked
  9463  001B0A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9464  001B0C  0A00               	xorlw	0	; case 0
  9465  001B0E  A4D8               	btfss	status,2,c
  9466  001B10  D033               	goto	l7864
  9467                           
  9468                           ; BSR set to: 0
  9469                           ; Switch size 1, requested type "space"
  9470                           ; Number of cases is 2, Range of values is 0 to 1
  9471                           ; switch strategies available:
  9472                           ; Name         Instructions Cycles
  9473                           ; simple_byte            7     4 (average)
  9474                           ;	Chosen strategy is simple_byte
  9475  001B12  0100               	movlb	0	; () banked
  9476  001B14  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9477  001B16  0A00               	xorlw	0	; case 0
  9478  001B18  B4D8               	btfsc	status,2,c
  9479  001B1A  D7E0               	goto	l7834
  9480  001B1C  0A01               	xorlw	1	; case 1
  9481  001B1E  B4D8               	btfsc	status,2,c
  9482  001B20  D7C1               	goto	l7826
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;io.c: 267: switch(!PORTDbits.RD7)
  9486  001B22  D02A               	goto	l7864
  9487  001B24                     l7846:
  9488                           
  9489                           ; BSR set to: 0
  9490  001B24  502F               	movf	_Button_Contact_Counter_Stop,w,c
  9491  001B26  0100               	movlb	0	; () banked
  9492  001B28  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9493  001B2A  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9494  001B2C  0E1B               	movlw	27
  9495  001B2E  EC38  F01E         	call	_GETxAPIxVAL
  9496  001B32  0100               	movlb	0	; () banked
  9497  001B34  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9498  001B36  0100               	movlb	0	; () banked
  9499  001B38  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9500  001B3A  0100               	movlb	0	; () banked
  9501  001B3C  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9502  001B3E  0100               	movlb	0	; () banked
  9503  001B40  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9504  001B42  A0D8               	btfss	status,0,c
  9505  001B44  D002               	goto	l7852
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;io.c: 270: {
  9509                           ;io.c: 271: Button_Contact_Counter_Stop++;
  9510  001B46  2A2F               	incf	_Button_Contact_Counter_Stop,f,c
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;io.c: 273: }
  9514                           
  9515                           ;io.c: 272: break;
  9516  001B48  D057               	goto	l7884
  9517  001B4A                     l7852:
  9518                           
  9519                           ; BSR set to: 0
  9520                           ;io.c: 274: else {SETxAPIxVAL(0x21, 1); }
  9521  001B4A  0E00               	movlw	0
  9522  001B4C  0100               	movlb	0	; () banked
  9523  001B4E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9524  001B50  0E01               	movlw	1
  9525  001B52  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9526  001B54  0E21               	movlw	33
  9527  001B56  EC23  F01D         	call	_SETxAPIxVAL
  9528                           
  9529                           ;io.c: 275: break;
  9530  001B5A  D04E               	goto	l7884
  9531  001B5C                     l7854:
  9532  001B5C  502F               	movf	_Button_Contact_Counter_Stop,w,c
  9533  001B5E  B4D8               	btfsc	status,2,c
  9534  001B60  D002               	goto	l7860
  9535                           
  9536                           ;io.c: 278: {
  9537                           ;io.c: 279: Button_Contact_Counter_Stop--;
  9538  001B62  062F               	decf	_Button_Contact_Counter_Stop,f,c
  9539                           
  9540                           ;io.c: 281: }
  9541                           
  9542                           ;io.c: 280: break;
  9543  001B64  D049               	goto	l7884
  9544  001B66                     l7860:
  9545                           
  9546                           ;io.c: 282: else {SETxAPIxVAL(0x21, 0);}
  9547  001B66  0E00               	movlw	0
  9548  001B68  0100               	movlb	0	; () banked
  9549  001B6A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9550  001B6C  0E00               	movlw	0
  9551  001B6E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9552  001B70  0E21               	movlw	33
  9553  001B72  EC23  F01D         	call	_SETxAPIxVAL
  9554                           
  9555                           ;io.c: 286: }
  9556                           
  9557                           ;io.c: 285: default : break;
  9558                           
  9559                           ;io.c: 283: break;
  9560  001B76  D040               	goto	l7884
  9561  001B78                     l7864:
  9562  001B78  BE83               	btfsc	3971,7,c	;volatile
  9563  001B7A  D002               	goto	u6700
  9564  001B7C  0E01               	movlw	1
  9565  001B7E  D001               	goto	u6710
  9566  001B80                     u6700:
  9567  001B80  0E00               	movlw	0
  9568  001B82                     u6710:
  9569  001B82  0100               	movlb	0	; () banked
  9570  001B84  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9571  001B86  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9572                           
  9573                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9574                           ; Switch size 1, requested type "space"
  9575                           ; Number of cases is 1, Range of values is 0 to 0
  9576                           ; switch strategies available:
  9577                           ; Name         Instructions Cycles
  9578                           ; simple_byte            4     3 (average)
  9579                           ;	Chosen strategy is simple_byte
  9580  001B88  0100               	movlb	0	; () banked
  9581  001B8A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9582  001B8C  0A00               	xorlw	0	; case 0
  9583  001B8E  A4D8               	btfss	status,2,c
  9584  001B90  D033               	goto	l7884
  9585                           
  9586                           ; BSR set to: 0
  9587                           ; Switch size 1, requested type "space"
  9588                           ; Number of cases is 2, Range of values is 0 to 1
  9589                           ; switch strategies available:
  9590                           ; Name         Instructions Cycles
  9591                           ; simple_byte            7     4 (average)
  9592                           ;	Chosen strategy is simple_byte
  9593  001B92  0100               	movlb	0	; () banked
  9594  001B94  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9595  001B96  0A00               	xorlw	0	; case 0
  9596  001B98  B4D8               	btfsc	status,2,c
  9597  001B9A  D7E0               	goto	l7854
  9598  001B9C  0A01               	xorlw	1	; case 1
  9599  001B9E  B4D8               	btfsc	status,2,c
  9600  001BA0  D7C1               	goto	l7846
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;io.c: 289: switch(!PORTBbits.RB1)
  9604  001BA2  D02A               	goto	l7884
  9605  001BA4                     l7866:
  9606                           
  9607                           ; BSR set to: 0
  9608  001BA4  502B               	movf	_Button_Contact_Counter_Middle,w,c
  9609  001BA6  0100               	movlb	0	; () banked
  9610  001BA8  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9611  001BAA  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9612  001BAC  0E1B               	movlw	27
  9613  001BAE  EC38  F01E         	call	_GETxAPIxVAL
  9614  001BB2  0100               	movlb	0	; () banked
  9615  001BB4  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9616  001BB6  0100               	movlb	0	; () banked
  9617  001BB8  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9618  001BBA  0100               	movlb	0	; () banked
  9619  001BBC  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9620  001BBE  0100               	movlb	0	; () banked
  9621  001BC0  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9622  001BC2  A0D8               	btfss	status,0,c
  9623  001BC4  D002               	goto	l7872
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;io.c: 292: {
  9627                           ;io.c: 293: Button_Contact_Counter_Middle++;
  9628  001BC6  2A2B               	incf	_Button_Contact_Counter_Middle,f,c
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;io.c: 295: }
  9632                           
  9633                           ;io.c: 294: break;
  9634  001BC8  D057               	goto	l7904
  9635  001BCA                     l7872:
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;io.c: 296: else {SETxAPIxVAL(0x22, 1); }
  9639  001BCA  0E00               	movlw	0
  9640  001BCC  0100               	movlb	0	; () banked
  9641  001BCE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9642  001BD0  0E01               	movlw	1
  9643  001BD2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9644  001BD4  0E22               	movlw	34
  9645  001BD6  EC23  F01D         	call	_SETxAPIxVAL
  9646                           
  9647                           ;io.c: 297: break;
  9648  001BDA  D04E               	goto	l7904
  9649  001BDC                     l7874:
  9650  001BDC  502B               	movf	_Button_Contact_Counter_Middle,w,c
  9651  001BDE  B4D8               	btfsc	status,2,c
  9652  001BE0  D002               	goto	l7880
  9653                           
  9654                           ;io.c: 300: {
  9655                           ;io.c: 301: Button_Contact_Counter_Middle--;
  9656  001BE2  062B               	decf	_Button_Contact_Counter_Middle,f,c
  9657                           
  9658                           ;io.c: 303: }
  9659                           
  9660                           ;io.c: 302: break;
  9661  001BE4  D049               	goto	l7904
  9662  001BE6                     l7880:
  9663                           
  9664                           ;io.c: 304: else {SETxAPIxVAL(0x22, 0);}
  9665  001BE6  0E00               	movlw	0
  9666  001BE8  0100               	movlb	0	; () banked
  9667  001BEA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9668  001BEC  0E00               	movlw	0
  9669  001BEE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9670  001BF0  0E22               	movlw	34
  9671  001BF2  EC23  F01D         	call	_SETxAPIxVAL
  9672                           
  9673                           ;io.c: 308: }
  9674                           
  9675                           ;io.c: 307: default : break;
  9676                           
  9677                           ;io.c: 305: break;
  9678  001BF6  D040               	goto	l7904
  9679  001BF8                     l7884:
  9680  001BF8  B281               	btfsc	3969,1,c	;volatile
  9681  001BFA  D002               	goto	u6740
  9682  001BFC  0E01               	movlw	1
  9683  001BFE  D001               	goto	u6750
  9684  001C00                     u6740:
  9685  001C00  0E00               	movlw	0
  9686  001C02                     u6750:
  9687  001C02  0100               	movlb	0	; () banked
  9688  001C04  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9689  001C06  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9690                           
  9691                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9692                           ; Switch size 1, requested type "space"
  9693                           ; Number of cases is 1, Range of values is 0 to 0
  9694                           ; switch strategies available:
  9695                           ; Name         Instructions Cycles
  9696                           ; simple_byte            4     3 (average)
  9697                           ;	Chosen strategy is simple_byte
  9698  001C08  0100               	movlb	0	; () banked
  9699  001C0A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9700  001C0C  0A00               	xorlw	0	; case 0
  9701  001C0E  A4D8               	btfss	status,2,c
  9702  001C10  D033               	goto	l7904
  9703                           
  9704                           ; BSR set to: 0
  9705                           ; Switch size 1, requested type "space"
  9706                           ; Number of cases is 2, Range of values is 0 to 1
  9707                           ; switch strategies available:
  9708                           ; Name         Instructions Cycles
  9709                           ; simple_byte            7     4 (average)
  9710                           ;	Chosen strategy is simple_byte
  9711  001C12  0100               	movlb	0	; () banked
  9712  001C14  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9713  001C16  0A00               	xorlw	0	; case 0
  9714  001C18  B4D8               	btfsc	status,2,c
  9715  001C1A  D7E0               	goto	l7874
  9716  001C1C  0A01               	xorlw	1	; case 1
  9717  001C1E  B4D8               	btfsc	status,2,c
  9718  001C20  D7C1               	goto	l7866
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;io.c: 311: switch(!PORTBbits.RB5)
  9722  001C22  D02A               	goto	l7904
  9723  001C24                     l7886:
  9724                           
  9725                           ; BSR set to: 0
  9726  001C24  5029               	movf	_Button_Contact_Counter_LB,w,c
  9727  001C26  0100               	movlb	0	; () banked
  9728  001C28  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9729  001C2A  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9730  001C2C  0E1B               	movlw	27
  9731  001C2E  EC38  F01E         	call	_GETxAPIxVAL
  9732  001C32  0100               	movlb	0	; () banked
  9733  001C34  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9734  001C36  0100               	movlb	0	; () banked
  9735  001C38  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9736  001C3A  0100               	movlb	0	; () banked
  9737  001C3C  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9738  001C3E  0100               	movlb	0	; () banked
  9739  001C40  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9740  001C42  A0D8               	btfss	status,0,c
  9741  001C44  D002               	goto	l7892
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;io.c: 314: {
  9745                           ;io.c: 315: Button_Contact_Counter_LB++;
  9746  001C46  2A29               	incf	_Button_Contact_Counter_LB,f,c
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;io.c: 317: }
  9750                           
  9751                           ;io.c: 316: break;
  9752  001C48  D057               	goto	l7924
  9753  001C4A                     l7892:
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;io.c: 318: else {SETxAPIxVAL(0x23, 1); }
  9757  001C4A  0E00               	movlw	0
  9758  001C4C  0100               	movlb	0	; () banked
  9759  001C4E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9760  001C50  0E01               	movlw	1
  9761  001C52  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9762  001C54  0E23               	movlw	35
  9763  001C56  EC23  F01D         	call	_SETxAPIxVAL
  9764                           
  9765                           ;io.c: 319: break;
  9766  001C5A  D04E               	goto	l7924
  9767  001C5C                     l7894:
  9768  001C5C  5029               	movf	_Button_Contact_Counter_LB,w,c
  9769  001C5E  B4D8               	btfsc	status,2,c
  9770  001C60  D002               	goto	l7900
  9771                           
  9772                           ;io.c: 322: {
  9773                           ;io.c: 323: Button_Contact_Counter_LB--;
  9774  001C62  0629               	decf	_Button_Contact_Counter_LB,f,c
  9775                           
  9776                           ;io.c: 325: }
  9777                           
  9778                           ;io.c: 324: break;
  9779  001C64  D049               	goto	l7924
  9780  001C66                     l7900:
  9781                           
  9782                           ;io.c: 326: else {SETxAPIxVAL(0x23, 0);}
  9783  001C66  0E00               	movlw	0
  9784  001C68  0100               	movlb	0	; () banked
  9785  001C6A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9786  001C6C  0E00               	movlw	0
  9787  001C6E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9788  001C70  0E23               	movlw	35
  9789  001C72  EC23  F01D         	call	_SETxAPIxVAL
  9790                           
  9791                           ;io.c: 330: }
  9792                           
  9793                           ;io.c: 329: default : break;
  9794                           
  9795                           ;io.c: 327: break;
  9796  001C76  D040               	goto	l7924
  9797  001C78                     l7904:
  9798  001C78  BA81               	btfsc	3969,5,c	;volatile
  9799  001C7A  D002               	goto	u6780
  9800  001C7C  0E01               	movlw	1
  9801  001C7E  D001               	goto	u6790
  9802  001C80                     u6780:
  9803  001C80  0E00               	movlw	0
  9804  001C82                     u6790:
  9805  001C82  0100               	movlb	0	; () banked
  9806  001C84  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9807  001C86  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9808                           
  9809                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9810                           ; Switch size 1, requested type "space"
  9811                           ; Number of cases is 1, Range of values is 0 to 0
  9812                           ; switch strategies available:
  9813                           ; Name         Instructions Cycles
  9814                           ; simple_byte            4     3 (average)
  9815                           ;	Chosen strategy is simple_byte
  9816  001C88  0100               	movlb	0	; () banked
  9817  001C8A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9818  001C8C  0A00               	xorlw	0	; case 0
  9819  001C8E  A4D8               	btfss	status,2,c
  9820  001C90  D033               	goto	l7924
  9821                           
  9822                           ; BSR set to: 0
  9823                           ; Switch size 1, requested type "space"
  9824                           ; Number of cases is 2, Range of values is 0 to 1
  9825                           ; switch strategies available:
  9826                           ; Name         Instructions Cycles
  9827                           ; simple_byte            7     4 (average)
  9828                           ;	Chosen strategy is simple_byte
  9829  001C92  0100               	movlb	0	; () banked
  9830  001C94  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9831  001C96  0A00               	xorlw	0	; case 0
  9832  001C98  B4D8               	btfsc	status,2,c
  9833  001C9A  D7E0               	goto	l7894
  9834  001C9C  0A01               	xorlw	1	; case 1
  9835  001C9E  B4D8               	btfsc	status,2,c
  9836  001CA0  D7C1               	goto	l7886
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;io.c: 333: switch(!PORTBbits.RB4)
  9840  001CA2  D02A               	goto	l7924
  9841  001CA4                     l7906:
  9842                           
  9843                           ; BSR set to: 0
  9844  001CA4  502A               	movf	_Button_Contact_Counter_LF,w,c
  9845  001CA6  0100               	movlb	0	; () banked
  9846  001CA8  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9847  001CAA  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9848  001CAC  0E1B               	movlw	27
  9849  001CAE  EC38  F01E         	call	_GETxAPIxVAL
  9850  001CB2  0100               	movlb	0	; () banked
  9851  001CB4  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9852  001CB6  0100               	movlb	0	; () banked
  9853  001CB8  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9854  001CBA  0100               	movlb	0	; () banked
  9855  001CBC  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9856  001CBE  0100               	movlb	0	; () banked
  9857  001CC0  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9858  001CC2  A0D8               	btfss	status,0,c
  9859  001CC4  D002               	goto	l7912
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;io.c: 336: {
  9863                           ;io.c: 337: Button_Contact_Counter_LF++;
  9864  001CC6  2A2A               	incf	_Button_Contact_Counter_LF,f,c
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;io.c: 339: }
  9868                           
  9869                           ;io.c: 338: break;
  9870  001CC8  D057               	goto	l7944
  9871  001CCA                     l7912:
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;io.c: 340: else {SETxAPIxVAL(0x24, 1); }
  9875  001CCA  0E00               	movlw	0
  9876  001CCC  0100               	movlb	0	; () banked
  9877  001CCE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9878  001CD0  0E01               	movlw	1
  9879  001CD2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9880  001CD4  0E24               	movlw	36
  9881  001CD6  EC23  F01D         	call	_SETxAPIxVAL
  9882                           
  9883                           ;io.c: 341: break;
  9884  001CDA  D04E               	goto	l7944
  9885  001CDC                     l7914:
  9886  001CDC  502A               	movf	_Button_Contact_Counter_LF,w,c
  9887  001CDE  B4D8               	btfsc	status,2,c
  9888  001CE0  D002               	goto	l7920
  9889                           
  9890                           ;io.c: 344: {
  9891                           ;io.c: 345: Button_Contact_Counter_LF--;
  9892  001CE2  062A               	decf	_Button_Contact_Counter_LF,f,c
  9893                           
  9894                           ;io.c: 347: }
  9895                           
  9896                           ;io.c: 346: break;
  9897  001CE4  D049               	goto	l7944
  9898  001CE6                     l7920:
  9899                           
  9900                           ;io.c: 348: else {SETxAPIxVAL(0x24, 0);}
  9901  001CE6  0E00               	movlw	0
  9902  001CE8  0100               	movlb	0	; () banked
  9903  001CEA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9904  001CEC  0E00               	movlw	0
  9905  001CEE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9906  001CF0  0E24               	movlw	36
  9907  001CF2  EC23  F01D         	call	_SETxAPIxVAL
  9908                           
  9909                           ;io.c: 352: }
  9910                           
  9911                           ;io.c: 351: default : break;
  9912                           
  9913                           ;io.c: 349: break;
  9914  001CF6  D040               	goto	l7944
  9915  001CF8                     l7924:
  9916  001CF8  B881               	btfsc	3969,4,c	;volatile
  9917  001CFA  D002               	goto	u6820
  9918  001CFC  0E01               	movlw	1
  9919  001CFE  D001               	goto	u6830
  9920  001D00                     u6820:
  9921  001D00  0E00               	movlw	0
  9922  001D02                     u6830:
  9923  001D02  0100               	movlb	0	; () banked
  9924  001D04  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9925  001D06  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9926                           
  9927                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9928                           ; Switch size 1, requested type "space"
  9929                           ; Number of cases is 1, Range of values is 0 to 0
  9930                           ; switch strategies available:
  9931                           ; Name         Instructions Cycles
  9932                           ; simple_byte            4     3 (average)
  9933                           ;	Chosen strategy is simple_byte
  9934  001D08  0100               	movlb	0	; () banked
  9935  001D0A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9936  001D0C  0A00               	xorlw	0	; case 0
  9937  001D0E  A4D8               	btfss	status,2,c
  9938  001D10  D033               	goto	l7944
  9939                           
  9940                           ; BSR set to: 0
  9941                           ; Switch size 1, requested type "space"
  9942                           ; Number of cases is 2, Range of values is 0 to 1
  9943                           ; switch strategies available:
  9944                           ; Name         Instructions Cycles
  9945                           ; simple_byte            7     4 (average)
  9946                           ;	Chosen strategy is simple_byte
  9947  001D12  0100               	movlb	0	; () banked
  9948  001D14  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9949  001D16  0A00               	xorlw	0	; case 0
  9950  001D18  B4D8               	btfsc	status,2,c
  9951  001D1A  D7E0               	goto	l7914
  9952  001D1C  0A01               	xorlw	1	; case 1
  9953  001D1E  B4D8               	btfsc	status,2,c
  9954  001D20  D7C1               	goto	l7906
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;io.c: 355: switch(!PORTBbits.RB3)
  9958  001D22  D02A               	goto	l7944
  9959  001D24                     l7926:
  9960                           
  9961                           ; BSR set to: 0
  9962  001D24  502C               	movf	_Button_Contact_Counter_RB,w,c
  9963  001D26  0100               	movlb	0	; () banked
  9964  001D28  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9965  001D2A  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9966  001D2C  0E1B               	movlw	27
  9967  001D2E  EC38  F01E         	call	_GETxAPIxVAL
  9968  001D32  0100               	movlb	0	; () banked
  9969  001D34  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9970  001D36  0100               	movlb	0	; () banked
  9971  001D38  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9972  001D3A  0100               	movlb	0	; () banked
  9973  001D3C  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9974  001D3E  0100               	movlb	0	; () banked
  9975  001D40  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9976  001D42  A0D8               	btfss	status,0,c
  9977  001D44  D002               	goto	l7932
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;io.c: 358: {
  9981                           ;io.c: 359: Button_Contact_Counter_RB++;
  9982  001D46  2A2C               	incf	_Button_Contact_Counter_RB,f,c
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;io.c: 361: }
  9986                           
  9987                           ;io.c: 360: break;
  9988  001D48  D057               	goto	l7964
  9989  001D4A                     l7932:
  9990                           
  9991                           ; BSR set to: 0
  9992                           ;io.c: 362: else {SETxAPIxVAL(0x25, 1); }
  9993  001D4A  0E00               	movlw	0
  9994  001D4C  0100               	movlb	0	; () banked
  9995  001D4E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9996  001D50  0E01               	movlw	1
  9997  001D52  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9998  001D54  0E25               	movlw	37
  9999  001D56  EC23  F01D         	call	_SETxAPIxVAL
 10000                           
 10001                           ;io.c: 363: break;
 10002  001D5A  D04E               	goto	l7964
 10003  001D5C                     l7934:
 10004  001D5C  502C               	movf	_Button_Contact_Counter_RB,w,c
 10005  001D5E  B4D8               	btfsc	status,2,c
 10006  001D60  D002               	goto	l7940
 10007                           
 10008                           ;io.c: 366: {
 10009                           ;io.c: 367: Button_Contact_Counter_RB--;
 10010  001D62  062C               	decf	_Button_Contact_Counter_RB,f,c
 10011                           
 10012                           ;io.c: 369: }
 10013                           
 10014                           ;io.c: 368: break;
 10015  001D64  D049               	goto	l7964
 10016  001D66                     l7940:
 10017                           
 10018                           ;io.c: 370: else {SETxAPIxVAL(0x25, 0);}
 10019  001D66  0E00               	movlw	0
 10020  001D68  0100               	movlb	0	; () banked
 10021  001D6A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10022  001D6C  0E00               	movlw	0
 10023  001D6E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10024  001D70  0E25               	movlw	37
 10025  001D72  EC23  F01D         	call	_SETxAPIxVAL
 10026                           
 10027                           ;io.c: 374: }
 10028                           
 10029                           ;io.c: 373: default : break;
 10030                           
 10031                           ;io.c: 371: break;
 10032  001D76  D040               	goto	l7964
 10033  001D78                     l7944:
 10034  001D78  B681               	btfsc	3969,3,c	;volatile
 10035  001D7A  D002               	goto	u6860
 10036  001D7C  0E01               	movlw	1
 10037  001D7E  D001               	goto	u6870
 10038  001D80                     u6860:
 10039  001D80  0E00               	movlw	0
 10040  001D82                     u6870:
 10041  001D82  0100               	movlb	0	; () banked
 10042  001D84  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10043  001D86  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10044                           
 10045                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10046                           ; Switch size 1, requested type "space"
 10047                           ; Number of cases is 1, Range of values is 0 to 0
 10048                           ; switch strategies available:
 10049                           ; Name         Instructions Cycles
 10050                           ; simple_byte            4     3 (average)
 10051                           ;	Chosen strategy is simple_byte
 10052  001D88  0100               	movlb	0	; () banked
 10053  001D8A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10054  001D8C  0A00               	xorlw	0	; case 0
 10055  001D8E  A4D8               	btfss	status,2,c
 10056  001D90  D033               	goto	l7964
 10057                           
 10058                           ; BSR set to: 0
 10059                           ; Switch size 1, requested type "space"
 10060                           ; Number of cases is 2, Range of values is 0 to 1
 10061                           ; switch strategies available:
 10062                           ; Name         Instructions Cycles
 10063                           ; simple_byte            7     4 (average)
 10064                           ;	Chosen strategy is simple_byte
 10065  001D92  0100               	movlb	0	; () banked
 10066  001D94  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10067  001D96  0A00               	xorlw	0	; case 0
 10068  001D98  B4D8               	btfsc	status,2,c
 10069  001D9A  D7E0               	goto	l7934
 10070  001D9C  0A01               	xorlw	1	; case 1
 10071  001D9E  B4D8               	btfsc	status,2,c
 10072  001DA0  D7C1               	goto	l7926
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;io.c: 377: switch(!PORTBbits.RB2)
 10076  001DA2  D02A               	goto	l7964
 10077  001DA4                     l7946:
 10078                           
 10079                           ; BSR set to: 0
 10080  001DA4  502D               	movf	_Button_Contact_Counter_RF,w,c
 10081  001DA6  0100               	movlb	0	; () banked
 10082  001DA8  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10083  001DAA  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10084  001DAC  0E1B               	movlw	27
 10085  001DAE  EC38  F01E         	call	_GETxAPIxVAL
 10086  001DB2  0100               	movlb	0	; () banked
 10087  001DB4  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10088  001DB6  0100               	movlb	0	; () banked
 10089  001DB8  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10090  001DBA  0100               	movlb	0	; () banked
 10091  001DBC  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10092  001DBE  0100               	movlb	0	; () banked
 10093  001DC0  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10094  001DC2  A0D8               	btfss	status,0,c
 10095  001DC4  D002               	goto	l7952
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;io.c: 380: {
 10099                           ;io.c: 381: Button_Contact_Counter_RF++;
 10100  001DC6  2A2D               	incf	_Button_Contact_Counter_RF,f,c
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;io.c: 383: }
 10104                           
 10105                           ;io.c: 382: break;
 10106  001DC8  D057               	goto	l7984
 10107  001DCA                     l7952:
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;io.c: 384: else {SETxAPIxVAL(0x26, 1); }
 10111  001DCA  0E00               	movlw	0
 10112  001DCC  0100               	movlb	0	; () banked
 10113  001DCE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10114  001DD0  0E01               	movlw	1
 10115  001DD2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10116  001DD4  0E26               	movlw	38
 10117  001DD6  EC23  F01D         	call	_SETxAPIxVAL
 10118                           
 10119                           ;io.c: 385: break;
 10120  001DDA  D04E               	goto	l7984
 10121  001DDC                     l7954:
 10122  001DDC  502D               	movf	_Button_Contact_Counter_RF,w,c
 10123  001DDE  B4D8               	btfsc	status,2,c
 10124  001DE0  D002               	goto	l7960
 10125                           
 10126                           ;io.c: 388: {
 10127                           ;io.c: 389: Button_Contact_Counter_RF--;
 10128  001DE2  062D               	decf	_Button_Contact_Counter_RF,f,c
 10129                           
 10130                           ;io.c: 391: }
 10131                           
 10132                           ;io.c: 390: break;
 10133  001DE4  D049               	goto	l7984
 10134  001DE6                     l7960:
 10135                           
 10136                           ;io.c: 392: else {SETxAPIxVAL(0x26, 0);}
 10137  001DE6  0E00               	movlw	0
 10138  001DE8  0100               	movlb	0	; () banked
 10139  001DEA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10140  001DEC  0E00               	movlw	0
 10141  001DEE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10142  001DF0  0E26               	movlw	38
 10143  001DF2  EC23  F01D         	call	_SETxAPIxVAL
 10144                           
 10145                           ;io.c: 396: }
 10146                           
 10147                           ;io.c: 395: default : break;
 10148                           
 10149                           ;io.c: 393: break;
 10150  001DF6  D040               	goto	l7984
 10151  001DF8                     l7964:
 10152  001DF8  B481               	btfsc	3969,2,c	;volatile
 10153  001DFA  D002               	goto	u6900
 10154  001DFC  0E01               	movlw	1
 10155  001DFE  D001               	goto	u6910
 10156  001E00                     u6900:
 10157  001E00  0E00               	movlw	0
 10158  001E02                     u6910:
 10159  001E02  0100               	movlb	0	; () banked
 10160  001E04  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10161  001E06  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10162                           
 10163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10164                           ; Switch size 1, requested type "space"
 10165                           ; Number of cases is 1, Range of values is 0 to 0
 10166                           ; switch strategies available:
 10167                           ; Name         Instructions Cycles
 10168                           ; simple_byte            4     3 (average)
 10169                           ;	Chosen strategy is simple_byte
 10170  001E08  0100               	movlb	0	; () banked
 10171  001E0A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10172  001E0C  0A00               	xorlw	0	; case 0
 10173  001E0E  A4D8               	btfss	status,2,c
 10174  001E10  D033               	goto	l7984
 10175                           
 10176                           ; BSR set to: 0
 10177                           ; Switch size 1, requested type "space"
 10178                           ; Number of cases is 2, Range of values is 0 to 1
 10179                           ; switch strategies available:
 10180                           ; Name         Instructions Cycles
 10181                           ; simple_byte            7     4 (average)
 10182                           ;	Chosen strategy is simple_byte
 10183  001E12  0100               	movlb	0	; () banked
 10184  001E14  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10185  001E16  0A00               	xorlw	0	; case 0
 10186  001E18  B4D8               	btfsc	status,2,c
 10187  001E1A  D7E0               	goto	l7954
 10188  001E1C  0A01               	xorlw	1	; case 1
 10189  001E1E  B4D8               	btfsc	status,2,c
 10190  001E20  D7C1               	goto	l7946
 10191                           
 10192                           ; BSR set to: 0
 10193                           ;io.c: 399: switch(PORTCbits.RC1)
 10194  001E22  D02A               	goto	l7984
 10195  001E24                     l7966:
 10196  001E24  5034               	movf	_Reed_Contact_LMU_Counter,w,c
 10197  001E26  0100               	movlb	0	; () banked
 10198  001E28  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10199  001E2A  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10200  001E2C  0E1B               	movlw	27
 10201  001E2E  EC38  F01E         	call	_GETxAPIxVAL
 10202  001E32  0100               	movlb	0	; () banked
 10203  001E34  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10204  001E36  0100               	movlb	0	; () banked
 10205  001E38  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10206  001E3A  0100               	movlb	0	; () banked
 10207  001E3C  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10208  001E3E  0100               	movlb	0	; () banked
 10209  001E40  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10210  001E42  A0D8               	btfss	status,0,c
 10211  001E44  D002               	goto	l7972
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;io.c: 402: {
 10215                           ;io.c: 403: Reed_Contact_LMU_Counter++;
 10216  001E46  2A34               	incf	_Reed_Contact_LMU_Counter,f,c
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;io.c: 405: }
 10220                           
 10221                           ;io.c: 404: break;
 10222  001E48  D04D               	goto	l8004
 10223  001E4A                     l7972:
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;io.c: 406: else {SETxAPIxVAL(0x29, 1); }
 10227  001E4A  0E00               	movlw	0
 10228  001E4C  0100               	movlb	0	; () banked
 10229  001E4E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10230  001E50  0E01               	movlw	1
 10231  001E52  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10232  001E54  0E29               	movlw	41
 10233  001E56  EC23  F01D         	call	_SETxAPIxVAL
 10234                           
 10235                           ;io.c: 407: break;
 10236  001E5A  D044               	goto	l8004
 10237  001E5C                     l7974:
 10238  001E5C  5034               	movf	_Reed_Contact_LMU_Counter,w,c
 10239  001E5E  B4D8               	btfsc	status,2,c
 10240  001E60  D002               	goto	l7980
 10241                           
 10242                           ;io.c: 410: {
 10243                           ;io.c: 411: Reed_Contact_LMU_Counter--;
 10244  001E62  0634               	decf	_Reed_Contact_LMU_Counter,f,c
 10245                           
 10246                           ;io.c: 413: }
 10247                           
 10248                           ;io.c: 412: break;
 10249  001E64  D03F               	goto	l8004
 10250  001E66                     l7980:
 10251                           
 10252                           ;io.c: 414: else {SETxAPIxVAL(0x29, 0);}
 10253  001E66  0E00               	movlw	0
 10254  001E68  0100               	movlb	0	; () banked
 10255  001E6A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10256  001E6C  0E00               	movlw	0
 10257  001E6E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10258  001E70  0E29               	movlw	41
 10259  001E72  EC23  F01D         	call	_SETxAPIxVAL
 10260                           
 10261                           ;io.c: 418: }
 10262                           
 10263                           ;io.c: 417: default : break;
 10264                           
 10265                           ;io.c: 415: break;
 10266  001E76  D036               	goto	l8004
 10267  001E78                     l7984:
 10268  001E78  A282               	btfss	3970,1,c	;volatile
 10269  001E7A  D002               	goto	u6940
 10270  001E7C  0E01               	movlw	1
 10271  001E7E  D001               	goto	u6946
 10272  001E80                     u6940:
 10273  001E80  0E00               	movlw	0
 10274  001E82                     u6946:
 10275                           
 10276                           ; Switch size 1, requested type "space"
 10277                           ; Number of cases is 2, Range of values is 0 to 1
 10278                           ; switch strategies available:
 10279                           ; Name         Instructions Cycles
 10280                           ; simple_byte            7     4 (average)
 10281                           ;	Chosen strategy is simple_byte
 10282  001E82  0A00               	xorlw	0	; case 0
 10283  001E84  B4D8               	btfsc	status,2,c
 10284  001E86  D7CE               	goto	l7966
 10285  001E88  0A01               	xorlw	1	; case 1
 10286  001E8A  B4D8               	btfsc	status,2,c
 10287  001E8C  D7E7               	goto	l7974
 10288                           
 10289                           ;io.c: 421: switch(PORTDbits.RD4)
 10290  001E8E  D02A               	goto	l8004
 10291  001E90                     l7986:
 10292  001E90  5033               	movf	_Reed_Contact_LMD_Counter,w,c
 10293  001E92  0100               	movlb	0	; () banked
 10294  001E94  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10295  001E96  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10296  001E98  0E1B               	movlw	27
 10297  001E9A  EC38  F01E         	call	_GETxAPIxVAL
 10298  001E9E  0100               	movlb	0	; () banked
 10299  001EA0  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10300  001EA2  0100               	movlb	0	; () banked
 10301  001EA4  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10302  001EA6  0100               	movlb	0	; () banked
 10303  001EA8  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10304  001EAA  0100               	movlb	0	; () banked
 10305  001EAC  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10306  001EAE  A0D8               	btfss	status,0,c
 10307  001EB0  D002               	goto	l7992
 10308                           
 10309                           ; BSR set to: 0
 10310                           ;io.c: 424: {
 10311                           ;io.c: 425: Reed_Contact_LMD_Counter++;
 10312  001EB2  2A33               	incf	_Reed_Contact_LMD_Counter,f,c
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;io.c: 427: }
 10316                           
 10317                           ;io.c: 426: break;
 10318  001EB4  D04D               	goto	l8024
 10319  001EB6                     l7992:
 10320                           
 10321                           ; BSR set to: 0
 10322                           ;io.c: 428: else {SETxAPIxVAL(0x2A, 1); }
 10323  001EB6  0E00               	movlw	0
 10324  001EB8  0100               	movlb	0	; () banked
 10325  001EBA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10326  001EBC  0E01               	movlw	1
 10327  001EBE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10328  001EC0  0E2A               	movlw	42
 10329  001EC2  EC23  F01D         	call	_SETxAPIxVAL
 10330                           
 10331                           ;io.c: 429: break;
 10332  001EC6  D044               	goto	l8024
 10333  001EC8                     l7994:
 10334  001EC8  5033               	movf	_Reed_Contact_LMD_Counter,w,c
 10335  001ECA  B4D8               	btfsc	status,2,c
 10336  001ECC  D002               	goto	l8000
 10337                           
 10338                           ;io.c: 432: {
 10339                           ;io.c: 433: Reed_Contact_LMD_Counter--;
 10340  001ECE  0633               	decf	_Reed_Contact_LMD_Counter,f,c
 10341                           
 10342                           ;io.c: 435: }
 10343                           
 10344                           ;io.c: 434: break;
 10345  001ED0  D03F               	goto	l8024
 10346  001ED2                     l8000:
 10347                           
 10348                           ;io.c: 436: else {SETxAPIxVAL(0x2A, 0);}
 10349  001ED2  0E00               	movlw	0
 10350  001ED4  0100               	movlb	0	; () banked
 10351  001ED6  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10352  001ED8  0E00               	movlw	0
 10353  001EDA  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10354  001EDC  0E2A               	movlw	42
 10355  001EDE  EC23  F01D         	call	_SETxAPIxVAL
 10356                           
 10357                           ;io.c: 440: }
 10358                           
 10359                           ;io.c: 439: default : break;
 10360                           
 10361                           ;io.c: 437: break;
 10362  001EE2  D036               	goto	l8024
 10363  001EE4                     l8004:
 10364  001EE4  A883               	btfss	3971,4,c	;volatile
 10365  001EE6  D002               	goto	u6970
 10366  001EE8  0E01               	movlw	1
 10367  001EEA  D001               	goto	u6976
 10368  001EEC                     u6970:
 10369  001EEC  0E00               	movlw	0
 10370  001EEE                     u6976:
 10371                           
 10372                           ; Switch size 1, requested type "space"
 10373                           ; Number of cases is 2, Range of values is 0 to 1
 10374                           ; switch strategies available:
 10375                           ; Name         Instructions Cycles
 10376                           ; simple_byte            7     4 (average)
 10377                           ;	Chosen strategy is simple_byte
 10378  001EEE  0A00               	xorlw	0	; case 0
 10379  001EF0  B4D8               	btfsc	status,2,c
 10380  001EF2  D7CE               	goto	l7986
 10381  001EF4  0A01               	xorlw	1	; case 1
 10382  001EF6  B4D8               	btfsc	status,2,c
 10383  001EF8  D7E7               	goto	l7994
 10384                           
 10385                           ;io.c: 443: switch(PORTEbits.RE1)
 10386  001EFA  D02A               	goto	l8024
 10387  001EFC                     l8006:
 10388  001EFC  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10389  001EFE  0100               	movlb	0	; () banked
 10390  001F00  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10391  001F02  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10392  001F04  0E1B               	movlw	27
 10393  001F06  EC38  F01E         	call	_GETxAPIxVAL
 10394  001F0A  0100               	movlb	0	; () banked
 10395  001F0C  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10396  001F0E  0100               	movlb	0	; () banked
 10397  001F10  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10398  001F12  0100               	movlb	0	; () banked
 10399  001F14  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10400  001F16  0100               	movlb	0	; () banked
 10401  001F18  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10402  001F1A  A0D8               	btfss	status,0,c
 10403  001F1C  D002               	goto	l8012
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;io.c: 446: {
 10407                           ;io.c: 447: Reed_Contact_RMU_Counter++;
 10408  001F1E  2A38               	incf	_Reed_Contact_RMU_Counter,f,c
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;io.c: 449: }
 10412                           
 10413                           ;io.c: 448: break;
 10414  001F20  D04D               	goto	l8044
 10415  001F22                     l8012:
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;io.c: 450: else {SETxAPIxVAL(0x2B, 1); }
 10419  001F22  0E00               	movlw	0
 10420  001F24  0100               	movlb	0	; () banked
 10421  001F26  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10422  001F28  0E01               	movlw	1
 10423  001F2A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10424  001F2C  0E2B               	movlw	43
 10425  001F2E  EC23  F01D         	call	_SETxAPIxVAL
 10426                           
 10427                           ;io.c: 451: break;
 10428  001F32  D044               	goto	l8044
 10429  001F34                     l8014:
 10430  001F34  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10431  001F36  B4D8               	btfsc	status,2,c
 10432  001F38  D002               	goto	l8020
 10433                           
 10434                           ;io.c: 454: {
 10435                           ;io.c: 455: Reed_Contact_RMU_Counter--;
 10436  001F3A  0638               	decf	_Reed_Contact_RMU_Counter,f,c
 10437                           
 10438                           ;io.c: 457: }
 10439                           
 10440                           ;io.c: 456: break;
 10441  001F3C  D03F               	goto	l8044
 10442  001F3E                     l8020:
 10443                           
 10444                           ;io.c: 458: else {SETxAPIxVAL(0x2B, 0);}
 10445  001F3E  0E00               	movlw	0
 10446  001F40  0100               	movlb	0	; () banked
 10447  001F42  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10448  001F44  0E00               	movlw	0
 10449  001F46  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10450  001F48  0E2B               	movlw	43
 10451  001F4A  EC23  F01D         	call	_SETxAPIxVAL
 10452                           
 10453                           ;io.c: 462: }
 10454                           
 10455                           ;io.c: 461: default : break;
 10456                           
 10457                           ;io.c: 459: break;
 10458  001F4E  D036               	goto	l8044
 10459  001F50                     l8024:
 10460  001F50  A284               	btfss	3972,1,c	;volatile
 10461  001F52  D002               	goto	u7000
 10462  001F54  0E01               	movlw	1
 10463  001F56  D001               	goto	u7006
 10464  001F58                     u7000:
 10465  001F58  0E00               	movlw	0
 10466  001F5A                     u7006:
 10467                           
 10468                           ; Switch size 1, requested type "space"
 10469                           ; Number of cases is 2, Range of values is 0 to 1
 10470                           ; switch strategies available:
 10471                           ; Name         Instructions Cycles
 10472                           ; simple_byte            7     4 (average)
 10473                           ;	Chosen strategy is simple_byte
 10474  001F5A  0A00               	xorlw	0	; case 0
 10475  001F5C  B4D8               	btfsc	status,2,c
 10476  001F5E  D7CE               	goto	l8006
 10477  001F60  0A01               	xorlw	1	; case 1
 10478  001F62  B4D8               	btfsc	status,2,c
 10479  001F64  D7E7               	goto	l8014
 10480                           
 10481                           ;io.c: 465: switch(PORTEbits.RE0)
 10482  001F66  D02A               	goto	l8044
 10483  001F68                     l8026:
 10484  001F68  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10485  001F6A  0100               	movlb	0	; () banked
 10486  001F6C  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10487  001F6E  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10488  001F70  0E1B               	movlw	27
 10489  001F72  EC38  F01E         	call	_GETxAPIxVAL
 10490  001F76  0100               	movlb	0	; () banked
 10491  001F78  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10492  001F7A  0100               	movlb	0	; () banked
 10493  001F7C  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10494  001F7E  0100               	movlb	0	; () banked
 10495  001F80  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10496  001F82  0100               	movlb	0	; () banked
 10497  001F84  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10498  001F86  A0D8               	btfss	status,0,c
 10499  001F88  D002               	goto	l8032
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;io.c: 468: {
 10503                           ;io.c: 469: Reed_Contact_RMD_Counter++;
 10504  001F8A  2A37               	incf	_Reed_Contact_RMD_Counter,f,c
 10505                           
 10506                           ; BSR set to: 0
 10507                           ;io.c: 471: }
 10508                           
 10509                           ;io.c: 470: break;
 10510  001F8C  0012               	return	
 10511  001F8E                     l8032:
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;io.c: 472: else {SETxAPIxVAL(0x2C, 1); }
 10515  001F8E  0E00               	movlw	0
 10516  001F90  0100               	movlb	0	; () banked
 10517  001F92  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10518  001F94  0E01               	movlw	1
 10519  001F96  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10520  001F98  0E2C               	movlw	44
 10521  001F9A  EC23  F01D         	call	_SETxAPIxVAL
 10522                           
 10523                           ;io.c: 473: break;
 10524  001F9E  0012               	return	
 10525  001FA0                     l8034:
 10526  001FA0  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10527  001FA2  B4D8               	btfsc	status,2,c
 10528  001FA4  D002               	goto	l8040
 10529                           
 10530                           ;io.c: 476: {
 10531                           ;io.c: 477: Reed_Contact_RMD_Counter--;
 10532  001FA6  0637               	decf	_Reed_Contact_RMD_Counter,f,c
 10533                           
 10534                           ;io.c: 479: }
 10535                           
 10536                           ;io.c: 478: break;
 10537  001FA8  0012               	return	
 10538  001FAA                     l8040:
 10539                           
 10540                           ;io.c: 480: else {SETxAPIxVAL(0x2C, 0);}
 10541  001FAA  0E00               	movlw	0
 10542  001FAC  0100               	movlb	0	; () banked
 10543  001FAE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10544  001FB0  0E00               	movlw	0
 10545  001FB2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10546  001FB4  0E2C               	movlw	44
 10547  001FB6  EC23  F01D         	call	_SETxAPIxVAL
 10548                           
 10549                           ;io.c: 484: }
 10550                           
 10551                           ;io.c: 483: default : break;
 10552                           
 10553                           ;io.c: 481: break;
 10554  001FBA  0012               	return	
 10555  001FBC                     l8044:
 10556  001FBC  A084               	btfss	3972,0,c	;volatile
 10557  001FBE  D002               	goto	u7030
 10558  001FC0  0E01               	movlw	1
 10559  001FC2  D001               	goto	u7036
 10560  001FC4                     u7030:
 10561  001FC4  0E00               	movlw	0
 10562  001FC6                     u7036:
 10563                           
 10564                           ; Switch size 1, requested type "space"
 10565                           ; Number of cases is 2, Range of values is 0 to 1
 10566                           ; switch strategies available:
 10567                           ; Name         Instructions Cycles
 10568                           ; simple_byte            7     4 (average)
 10569                           ;	Chosen strategy is simple_byte
 10570  001FC6  0A00               	xorlw	0	; case 0
 10571  001FC8  B4D8               	btfsc	status,2,c
 10572  001FCA  D7CE               	goto	l8026
 10573  001FCC  0A01               	xorlw	1	; case 1
 10574  001FCE  A4D8               	btfss	status,2,c
 10575  001FD0  0012               	return	
 10576  001FD2  D7E6               	goto	l8034
 10577  001FD4                     __end_of_Debounce_Inputs:
 10578                           	opt stack 0
 10579                           tblptru	equ	0xFF8
 10580                           tblptrh	equ	0xFF7
 10581                           tblptrl	equ	0xFF6
 10582                           tablat	equ	0xFF5
 10583                           intcon	equ	0xFF2
 10584                           postinc0	equ	0xFEE
 10585                           wreg	equ	0xFE8
 10586                           postdec1	equ	0xFE5
 10587                           fsr1h	equ	0xFE2
 10588                           fsr1l	equ	0xFE1
 10589                           status	equ	0xFD8
 10590                           
 10591 ;; *************** function _SetDCPWM1 *****************
 10592 ;; Defined at:
 10593 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic18\plib\PWM\pw1setdc.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;  dutycycle       2    2[BANK0 ] unsigned int 
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;  DCycle          2    6[BANK0 ] struct PWMDC
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  1    wreg      void 
 10600 ;; Registers used:
 10601 ;;		wreg, status,2, status,0
 10602 ;; Tracked objects:
 10603 ;;		On entry : 0/0
 10604 ;;		On exit  : 0/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10607 ;;      Params:         0       2       0       0       0       0       0       0       0
 10608 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10609 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10610 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10611 ;;Total ram usage:        6 bytes
 10612 ;; Hardware stack levels used:    1
 10613 ;; Hardware stack levels required when called:    3
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_Debounce_Inputs
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           	psect	text18
 10622  003AE6                     __ptext18:
 10623                           	opt stack 0
 10624  003AE6                     _SetDCPWM1:
 10625                           	opt stack 25
 10626                           
 10627                           ;incstack = 0
 10628  003AE6  C062  F064         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
 10629  003AEA  C063  F065         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
 10630  003AEE  0E06               	movlw	6
 10631  003AF0                     u6515:
 10632  003AF0  90D8               	bcf	status,0,c
 10633  003AF2  0100               	movlb	0	; () banked
 10634  003AF4  3764               	rlcf	??_SetDCPWM1& (0+255),f,b
 10635  003AF6  3765               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
 10636  003AF8  2EE8               	decfsz	wreg,f,c
 10637  003AFA  D7FA               	goto	u6515
 10638  003AFC  C064  F066         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
 10639  003B00  C065  F067         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
 10640                           
 10641                           ; BSR set to: 0
 10642  003B04  C067  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
 10643  003B08  C066  F064         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
 10644  003B0C  0100               	movlb	0	; () banked
 10645  003B0E  90D8               	bcf	status,0,c
 10646  003B10  3364               	rrcf	??_SetDCPWM1& (0+255),f,b
 10647  003B12  0100               	movlb	0	; () banked
 10648  003B14  90D8               	bcf	status,0,c
 10649  003B16  3364               	rrcf	??_SetDCPWM1& (0+255),f,b
 10650  003B18  0E30               	movlw	48
 10651  003B1A  0100               	movlb	0	; () banked
 10652  003B1C  1764               	andwf	??_SetDCPWM1& (0+255),f,b
 10653  003B1E  50BD               	movf	4029,w,c	;volatile
 10654  003B20  0BCF               	andlw	207
 10655  003B22  0100               	movlb	0	; () banked
 10656  003B24  1164               	iorwf	??_SetDCPWM1& (0+255),w,b
 10657  003B26  6EBD               	movwf	4029,c	;volatile
 10658                           
 10659                           ; BSR set to: 0
 10660  003B28  0012               	return		;funcret
 10661  003B2A                     __end_of_SetDCPWM1:
 10662                           	opt stack 0
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           intcon	equ	0xFF2
 10668                           postinc0	equ	0xFEE
 10669                           wreg	equ	0xFE8
 10670                           postdec1	equ	0xFE5
 10671                           fsr1h	equ	0xFE2
 10672                           fsr1l	equ	0xFE1
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function _DECRxAPIxVAL *****************
 10676 ;; Defined at:
 10677 ;;		line 191 in file "../api.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;  index           1    wreg     unsigned char 
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;  index           1   35[BANK0 ] unsigned char 
 10682 ;;  value           2   33[BANK0 ] unsigned int 
 10683 ;; Return value:  Size  Location     Type
 10684 ;;                  1    wreg      void 
 10685 ;; Registers used:
 10686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10692 ;;      Params:         0       0       0       0       0       0       0       0       0
 10693 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10694 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10695 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10696 ;;Total ram usage:        3 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    7
 10699 ;; This function calls:
 10700 ;;		_GETxAPIxVAL
 10701 ;;		_SETxAPIxVAL
 10702 ;; This function is called by:
 10703 ;;		_Update_StateMchn
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           	psect	text19
 10708  003B98                     __ptext19:
 10709                           	opt stack 0
 10710  003B98                     _DECRxAPIxVAL:
 10711                           	opt stack 22
 10712                           
 10713                           ; BSR set to: 0
 10714                           ;incstack = 0
 10715                           ;DECRxAPIxVAL@index stored from wreg
 10716  003B98  0100               	movlb	0	; () banked
 10717  003B9A  6F83               	movwf	DECRxAPIxVAL@index& (0+255),b
 10718                           
 10719                           ;api.c: 192: unsigned int value;
 10720                           ;api.c: 193: value = GETxAPIxVAL(index);
 10721  003B9C  0100               	movlb	0	; () banked
 10722  003B9E  5183               	movf	DECRxAPIxVAL@index& (0+255),w,b
 10723  003BA0  EC38  F01E         	call	_GETxAPIxVAL
 10724  003BA4  C060  F081         	movff	?_GETxAPIxVAL,DECRxAPIxVAL@value
 10725  003BA8  C061  F082         	movff	?_GETxAPIxVAL+1,DECRxAPIxVAL@value+1
 10726                           
 10727                           ;api.c: 194: value--;
 10728  003BAC  0100               	movlb	0	; () banked
 10729  003BAE  0781               	decf	DECRxAPIxVAL@value& (0+255),f,b
 10730  003BB0  A0D8               	btfss	status,0,c
 10731  003BB2  0782               	decf	(DECRxAPIxVAL@value+1)& (0+255),f,b
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;api.c: 195: SETxAPIxVAL(index, value);
 10735  003BB4  C081  F07C         	movff	DECRxAPIxVAL@value,SETxAPIxVAL@value
 10736  003BB8  C082  F07D         	movff	DECRxAPIxVAL@value+1,SETxAPIxVAL@value+1
 10737  003BBC  0100               	movlb	0	; () banked
 10738  003BBE  5183               	movf	DECRxAPIxVAL@index& (0+255),w,b
 10739  003BC0  EC23  F01D         	call	_SETxAPIxVAL
 10740  003BC4  0012               	return		;funcret
 10741  003BC6                     __end_of_DECRxAPIxVAL:
 10742                           	opt stack 0
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           intcon	equ	0xFF2
 10748                           postinc0	equ	0xFEE
 10749                           wreg	equ	0xFE8
 10750                           postdec1	equ	0xFE5
 10751                           fsr1h	equ	0xFE2
 10752                           fsr1l	equ	0xFE1
 10753                           status	equ	0xFD8
 10754                           
 10755 ;; *************** function _GETxAPIxVAL *****************
 10756 ;; Defined at:
 10757 ;;		line 180 in file "../api.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;  index           1    wreg     unsigned char 
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;  index           1   31[COMRAM] unsigned char 
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  2    0[BANK0 ] unsigned int 
 10764 ;; Registers used:
 10765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10771 ;;      Params:         0       2       0       0       0       0       0       0       0
 10772 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10773 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10774 ;;      Totals:         1       2       0       0       0       0       0       0       0
 10775 ;;Total ram usage:        3 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    3
 10778 ;; This function calls:
 10779 ;;		Nothing
 10780 ;; This function is called by:
 10781 ;;		_Update_StateMchn
 10782 ;;		_Train_Path
 10783 ;;		_INCRxAPIxVAL
 10784 ;;		_DECRxAPIxVAL
 10785 ;;		_Eeprom_Store
 10786 ;;		_Debounce_Inputs
 10787 ;;		_Junction
 10788 ;;		_Train_Move_Left_Start
 10789 ;;		_Right_Mountain_From_The_Right
 10790 ;;		_Left_Mountain_From_The_Right
 10791 ;;		_Train_Move_Left_Brake
 10792 ;;		_Train_Move_Right_Start
 10793 ;;		_Left_Mountain_From_The_Left
 10794 ;;		_Right_Mountain_From_The_Left
 10795 ;;		_Train_Move_Right_Brake
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           	psect	text20
 10800  003C70                     __ptext20:
 10801                           	opt stack 0
 10802  003C70                     _GETxAPIxVAL:
 10803                           	opt stack 24
 10804                           
 10805                           ;incstack = 0
 10806                           ;GETxAPIxVAL@index stored from wreg
 10807  003C70  6E20               	movwf	GETxAPIxVAL@index,c
 10808                           
 10809                           ;api.c: 181: return API[index];
 10810  003C72  5020               	movf	GETxAPIxVAL@index,w,c
 10811  003C74  0D02               	mullw	2
 10812  003C76  0EFC               	movlw	low _API
 10813  003C78  24F3               	addwf	prodl,w,c
 10814  003C7A  6ED9               	movwf	fsr2l,c
 10815  003C7C  0E01               	movlw	high _API
 10816  003C7E  20F4               	addwfc	prodh,w,c
 10817  003C80  6EDA               	movwf	fsr2h,c
 10818  003C82  CFDE F060          	movff	postinc2,?_GETxAPIxVAL
 10819  003C86  CFDD F061          	movff	postdec2,?_GETxAPIxVAL+1
 10820  003C8A  0012               	return	
 10821  003C8C                     __end_of_GETxAPIxVAL:
 10822                           	opt stack 0
 10823                           tblptru	equ	0xFF8
 10824                           tblptrh	equ	0xFF7
 10825                           tblptrl	equ	0xFF6
 10826                           tablat	equ	0xFF5
 10827                           prodh	equ	0xFF4
 10828                           prodl	equ	0xFF3
 10829                           intcon	equ	0xFF2
 10830                           postinc0	equ	0xFEE
 10831                           wreg	equ	0xFE8
 10832                           postdec1	equ	0xFE5
 10833                           fsr1h	equ	0xFE2
 10834                           fsr1l	equ	0xFE1
 10835                           postinc2	equ	0xFDE
 10836                           postdec2	equ	0xFDD
 10837                           fsr2h	equ	0xFDA
 10838                           fsr2l	equ	0xFD9
 10839                           status	equ	0xFD8
 10840                           
 10841 ;; *************** function _READxRECEIVEDxMESSAGE *****************
 10842 ;; Defined at:
 10843 ;;		line 26 in file "../terminal.c"
 10844 ;; Parameters:    Size  Location     Type
 10845 ;;		None
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;		None
 10848 ;; Return value:  Size  Location     Type
 10849 ;;                  1    wreg      void 
 10850 ;; Registers used:
 10851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10852 ;; Tracked objects:
 10853 ;;		On entry : 0/0
 10854 ;;		On exit  : 0/0
 10855 ;;		Unchanged: 0/0
 10856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10857 ;;      Params:         0       0       0       0       0       0       0       0       0
 10858 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10859 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10860 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10861 ;;Total ram usage:        0 bytes
 10862 ;; Hardware stack levels used:    1
 10863 ;; Hardware stack levels required when called:    5
 10864 ;; This function calls:
 10865 ;;		_EUSART1_Read
 10866 ;;		_printf
 10867 ;; This function is called by:
 10868 ;;		_main
 10869 ;; This function uses a non-reentrant model
 10870 ;;
 10871                           
 10872                           	psect	text21
 10873  0035E4                     __ptext21:
 10874                           	opt stack 0
 10875  0035E4                     _READxRECEIVEDxMESSAGE:
 10876                           	opt stack 25
 10877                           
 10878                           ;terminal.c: 28: if ((eusart1RxCount) > 0){
 10879                           
 10880                           ;incstack = 0
 10881  0035E4  503A               	movf	_eusart1RxCount,w,c	;volatile
 10882  0035E6  B4D8               	btfsc	status,2,c
 10883  0035E8  0012               	return	
 10884                           
 10885                           ;terminal.c: 31: Received_Data = EUSART1_Read();
 10886  0035EA  ECB2  F01D         	call	_EUSART1_Read	;wreg free
 10887  0035EE  6E30               	movwf	_Received_Data,c
 10888                           
 10889                           ;terminal.c: 33: switch (RxSwitch){
 10890  0035F0  D054               	goto	l9272
 10891  0035F2                     l9230:
 10892                           
 10893                           ;terminal.c: 35: pData = &Data[0];
 10894  0035F2  0EAF               	movlw	low _Data
 10895  0035F4  6E27               	movwf	_pData,c
 10896  0035F6  0E00               	movlw	high _Data
 10897  0035F8  6E28               	movwf	_pData+1,c
 10898                           
 10899                           ;terminal.c: 36: if (Received_Data == 's' || Received_Data == 'g'){
 10900  0035FA  0E73               	movlw	115
 10901  0035FC  1830               	xorwf	_Received_Data,w,c
 10902  0035FE  B4D8               	btfsc	status,2,c
 10903  003600  D004               	goto	l9234
 10904  003602  0E67               	movlw	103
 10905  003604  1830               	xorwf	_Received_Data,w,c
 10906  003606  A4D8               	btfss	status,2,c
 10907  003608  D00B               	goto	l9240
 10908  00360A                     l9234:
 10909                           
 10910                           ;terminal.c: 37: *pData = Received_Data;
 10911  00360A  C027  FFD9         	movff	_pData,fsr2l
 10912  00360E  C028  FFDA         	movff	_pData+1,fsr2h
 10913  003612  C030  FFDF         	movff	_Received_Data,indf2
 10914                           
 10915                           ;terminal.c: 38: *pData++;
 10916  003616  4A27               	infsnz	_pData,f,c
 10917  003618  2A28               	incf	_pData+1,f,c
 10918                           
 10919                           ;terminal.c: 39: RxSwitch = 1;
 10920  00361A  0E01               	movlw	1
 10921  00361C  6E39               	movwf	_RxSwitch,c
 10922                           
 10923                           ;terminal.c: 40: }
 10924  00361E  0012               	return	
 10925  003620                     l9240:
 10926                           
 10927                           ;terminal.c: 41: else{
 10928                           ;terminal.c: 42: RxSwitch = 0;
 10929  003620  0E00               	movlw	0
 10930  003622  6E39               	movwf	_RxSwitch,c
 10931                           
 10932                           ;terminal.c: 43: }
 10933                           ;terminal.c: 44: break;
 10934  003624  0012               	return	
 10935  003626                     l9242:
 10936                           
 10937                           ;terminal.c: 47: if (Received_Data == 'x'){
 10938  003626  0E78               	movlw	120
 10939  003628  1830               	xorwf	_Received_Data,w,c
 10940  00362A  A4D8               	btfss	status,2,c
 10941  00362C  D00B               	goto	l9250
 10942                           
 10943                           ;terminal.c: 48: *pData = Received_Data;
 10944  00362E  C027  FFD9         	movff	_pData,fsr2l
 10945  003632  C028  FFDA         	movff	_pData+1,fsr2h
 10946  003636  C030  FFDF         	movff	_Received_Data,indf2
 10947                           
 10948                           ;terminal.c: 49: *pData++;
 10949  00363A  4A27               	infsnz	_pData,f,c
 10950  00363C  2A28               	incf	_pData+1,f,c
 10951                           
 10952                           ;terminal.c: 50: RxSwitch = 2;
 10953  00363E  0E02               	movlw	2
 10954  003640  6E39               	movwf	_RxSwitch,c
 10955                           
 10956                           ;terminal.c: 51: }
 10957  003642  0012               	return	
 10958  003644                     l9250:
 10959                           
 10960                           ;terminal.c: 52: else{
 10961                           ;terminal.c: 53: RxSwitch = 0;
 10962  003644  0E00               	movlw	0
 10963  003646  6E39               	movwf	_RxSwitch,c
 10964                           
 10965                           ;terminal.c: 54: }
 10966                           ;terminal.c: 55: break;
 10967  003648  0012               	return	
 10968  00364A                     l9252:
 10969                           
 10970                           ;terminal.c: 58: if (Received_Data == 'G'){
 10971  00364A  0E47               	movlw	71
 10972  00364C  1830               	xorwf	_Received_Data,w,c
 10973  00364E  A4D8               	btfss	status,2,c
 10974  003650  D019               	goto	l9264
 10975                           
 10976                           ;terminal.c: 59: *pData = Received_Data;
 10977  003652  C027  FFD9         	movff	_pData,fsr2l
 10978  003656  C028  FFDA         	movff	_pData+1,fsr2h
 10979  00365A  C030  FFDF         	movff	_Received_Data,indf2
 10980                           
 10981                           ;terminal.c: 60: pData++;
 10982  00365E  4A27               	infsnz	_pData,f,c
 10983  003660  2A28               	incf	_pData+1,f,c
 10984                           
 10985                           ;terminal.c: 61: *pData = '\0';
 10986  003662  C027  FFD9         	movff	_pData,fsr2l
 10987  003666  C028  FFDA         	movff	_pData+1,fsr2h
 10988  00366A  0E00               	movlw	0
 10989  00366C  6EDF               	movwf	indf2,c
 10990                           
 10991                           ;terminal.c: 62: printf("\r\X0\r\n");
 10992  00366E  0E29               	movlw	low STR_1
 10993  003670  0100               	movlb	0	; () banked
 10994  003672  6F67               	movwf	printf@f& (0+255),b
 10995  003674  0E08               	movlw	high STR_1
 10996  003676  0100               	movlb	0	; () banked
 10997  003678  6F68               	movwf	(printf@f+1)& (0+255),b
 10998  00367A  ECF6  F019         	call	_printf	;wreg free
 10999                           
 11000                           ;terminal.c: 63: RxSwitch = 0;
 11001  00367E  0E00               	movlw	0
 11002  003680  6E39               	movwf	_RxSwitch,c
 11003                           
 11004                           ;terminal.c: 64: }
 11005  003682  0012               	return	
 11006  003684                     l9264:
 11007                           
 11008                           ;terminal.c: 65: else{
 11009                           ;terminal.c: 66: *pData = Received_Data;
 11010  003684  C027  FFD9         	movff	_pData,fsr2l
 11011  003688  C028  FFDA         	movff	_pData+1,fsr2h
 11012  00368C  C030  FFDF         	movff	_Received_Data,indf2
 11013                           
 11014                           ;terminal.c: 67: pData++;
 11015  003690  4A27               	infsnz	_pData,f,c
 11016  003692  2A28               	incf	_pData+1,f,c
 11017                           
 11018                           ;terminal.c: 68: RxSwitch = 2;
 11019  003694  0E02               	movlw	2
 11020  003696  6E39               	movwf	_RxSwitch,c
 11021                           
 11022                           ;terminal.c: 74: }
 11023                           
 11024                           ;terminal.c: 73: break;
 11025                           
 11026                           ;terminal.c: 72: default :
 11027                           
 11028                           ;terminal.c: 69: }
 11029                           ;terminal.c: 70: break;
 11030  003698  0012               	return	
 11031  00369A                     l9272:
 11032  00369A  5039               	movf	_RxSwitch,w,c
 11033                           
 11034                           ; Switch size 1, requested type "space"
 11035                           ; Number of cases is 3, Range of values is 0 to 2
 11036                           ; switch strategies available:
 11037                           ; Name         Instructions Cycles
 11038                           ; simple_byte           10     6 (average)
 11039                           ;	Chosen strategy is simple_byte
 11040  00369C  0A00               	xorlw	0	; case 0
 11041  00369E  B4D8               	btfsc	status,2,c
 11042  0036A0  D7A8               	goto	l9230
 11043  0036A2  0A01               	xorlw	1	; case 1
 11044  0036A4  B4D8               	btfsc	status,2,c
 11045  0036A6  D7BF               	goto	l9242
 11046  0036A8  0A03               	xorlw	3	; case 2
 11047  0036AA  A4D8               	btfss	status,2,c
 11048  0036AC  0012               	return	
 11049  0036AE  D7CD               	goto	l9252
 11050  0036B0                     __end_of_READxRECEIVEDxMESSAGE:
 11051                           	opt stack 0
 11052                           tblptru	equ	0xFF8
 11053                           tblptrh	equ	0xFF7
 11054                           tblptrl	equ	0xFF6
 11055                           tablat	equ	0xFF5
 11056                           prodh	equ	0xFF4
 11057                           prodl	equ	0xFF3
 11058                           intcon	equ	0xFF2
 11059                           postinc0	equ	0xFEE
 11060                           wreg	equ	0xFE8
 11061                           postdec1	equ	0xFE5
 11062                           fsr1h	equ	0xFE2
 11063                           fsr1l	equ	0xFE1
 11064                           indf2	equ	0xFDF
 11065                           postinc2	equ	0xFDE
 11066                           postdec2	equ	0xFDD
 11067                           fsr2h	equ	0xFDA
 11068                           fsr2l	equ	0xFD9
 11069                           status	equ	0xFD8
 11070                           
 11071 ;; *************** function _EUSART1_Read *****************
 11072 ;; Defined at:
 11073 ;;		line 142 in file "../eusart1.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;  readValue       1   31[COMRAM] unsigned char 
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  1    wreg      unsigned char 
 11080 ;; Registers used:
 11081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11087 ;;      Params:         0       0       0       0       0       0       0       0       0
 11088 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11089 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11090 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11091 ;;Total ram usage:        1 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    3
 11094 ;; This function calls:
 11095 ;;		Nothing
 11096 ;; This function is called by:
 11097 ;;		_READxRECEIVEDxMESSAGE
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           	psect	text22
 11102  003B64                     __ptext22:
 11103                           	opt stack 0
 11104  003B64                     _EUSART1_Read:
 11105                           	opt stack 26
 11106                           
 11107                           ;eusart1.c: 143: uint8_t readValue = 0;
 11108                           
 11109                           ;incstack = 0
 11110  003B64  0E00               	movlw	0
 11111  003B66  6E20               	movwf	EUSART1_Read@readValue,c
 11112  003B68                     l5590:
 11113  003B68  503A               	movf	_eusart1RxCount,w,c	;volatile
 11114  003B6A  B4D8               	btfsc	status,2,c
 11115  003B6C  D7FD               	goto	l5590
 11116                           
 11117                           ;eusart1.c: 146: }
 11118                           ;eusart1.c: 148: PIE1bits.RC1IE = 0;
 11119  003B6E  9A9D               	bcf	3997,5,c	;volatile
 11120                           
 11121                           ;eusart1.c: 150: readValue = eusart1RxBuffer[eusart1RxTail++];
 11122  003B70  503C               	movf	_eusart1RxTail,w,c
 11123  003B72  0D01               	mullw	1
 11124  003B74  0E00               	movlw	low _eusart1RxBuffer
 11125  003B76  24F3               	addwf	prodl,w,c
 11126  003B78  6ED9               	movwf	fsr2l,c
 11127  003B7A  0E01               	movlw	high _eusart1RxBuffer
 11128  003B7C  20F4               	addwfc	prodh,w,c
 11129  003B7E  6EDA               	movwf	fsr2h,c
 11130  003B80  50DF               	movf	indf2,w,c
 11131  003B82  6E20               	movwf	EUSART1_Read@readValue,c
 11132  003B84  2A3C               	incf	_eusart1RxTail,f,c
 11133                           
 11134                           ;eusart1.c: 151: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11135  003B86  0E7D               	movlw	125
 11136  003B88  643C               	cpfsgt	_eusart1RxTail,c
 11137  003B8A  D002               	goto	l5600
 11138                           
 11139                           ;eusart1.c: 152: eusart1RxTail = 0;
 11140  003B8C  0E00               	movlw	0
 11141  003B8E  6E3C               	movwf	_eusart1RxTail,c
 11142  003B90                     l5600:
 11143                           
 11144                           ;eusart1.c: 153: }
 11145                           ;eusart1.c: 154: eusart1RxCount--;
 11146  003B90  063A               	decf	_eusart1RxCount,f,c	;volatile
 11147                           
 11148                           ;eusart1.c: 155: PIE1bits.RC1IE = 1;
 11149  003B92  8A9D               	bsf	3997,5,c	;volatile
 11150                           
 11151                           ;eusart1.c: 157: return readValue;
 11152  003B94  5020               	movf	EUSART1_Read@readValue,w,c
 11153  003B96  0012               	return	
 11154  003B98                     __end_of_EUSART1_Read:
 11155                           	opt stack 0
 11156                           tblptru	equ	0xFF8
 11157                           tblptrh	equ	0xFF7
 11158                           tblptrl	equ	0xFF6
 11159                           tablat	equ	0xFF5
 11160                           prodh	equ	0xFF4
 11161                           prodl	equ	0xFF3
 11162                           intcon	equ	0xFF2
 11163                           postinc0	equ	0xFEE
 11164                           wreg	equ	0xFE8
 11165                           postdec1	equ	0xFE5
 11166                           fsr1h	equ	0xFE2
 11167                           fsr1l	equ	0xFE1
 11168                           indf2	equ	0xFDF
 11169                           postinc2	equ	0xFDE
 11170                           postdec2	equ	0xFDD
 11171                           fsr2h	equ	0xFDA
 11172                           fsr2l	equ	0xFD9
 11173                           status	equ	0xFD8
 11174                           
 11175 ;; *************** function _Init_Timers *****************
 11176 ;; Defined at:
 11177 ;;		line 181 in file "../Main.c"
 11178 ;; Parameters:    Size  Location     Type
 11179 ;;		None
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;		None
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      void 
 11184 ;; Registers used:
 11185 ;;		wreg, status,2
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11191 ;;      Params:         0       0       0       0       0       0       0       0       0
 11192 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11194 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11195 ;;Total ram usage:        0 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    3
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_main
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205                           	psect	text23
 11206  003C8C                     __ptext23:
 11207                           	opt stack 0
 11208  003C8C                     _Init_Timers:
 11209                           	opt stack 27
 11210                           
 11211                           ;Main.c: 183: RCONbits.IPEN = 1;
 11212                           
 11213                           ;incstack = 0
 11214  003C8C  8ED0               	bsf	4048,7,c	;volatile
 11215                           
 11216                           ;Main.c: 184: INTCON = 0xA0;
 11217  003C8E  0EA0               	movlw	160
 11218  003C90  6EF2               	movwf	intcon,c	;volatile
 11219                           
 11220                           ;Main.c: 185: INTCON2 = 0x84;
 11221  003C92  0E84               	movlw	132
 11222  003C94  6EF1               	movwf	intcon2,c	;volatile
 11223                           
 11224                           ;Main.c: 186: TMR0H = 0x0;
 11225  003C96  0E00               	movlw	0
 11226  003C98  6ED7               	movwf	4055,c	;volatile
 11227                           
 11228                           ;Main.c: 187: TMR0L = 0x0;
 11229  003C9A  0E00               	movlw	0
 11230  003C9C  6ED6               	movwf	4054,c	;volatile
 11231                           
 11232                           ;Main.c: 188: T0CON = 0xC3;
 11233  003C9E  0EC3               	movlw	195
 11234  003CA0  6ED5               	movwf	4053,c	;volatile
 11235  003CA2  0012               	return		;funcret
 11236  003CA4                     __end_of_Init_Timers:
 11237                           	opt stack 0
 11238                           tblptru	equ	0xFF8
 11239                           tblptrh	equ	0xFF7
 11240                           tblptrl	equ	0xFF6
 11241                           tablat	equ	0xFF5
 11242                           prodh	equ	0xFF4
 11243                           prodl	equ	0xFF3
 11244                           intcon	equ	0xFF2
 11245                           intcon2	equ	0xFF1
 11246                           postinc0	equ	0xFEE
 11247                           wreg	equ	0xFE8
 11248                           postdec1	equ	0xFE5
 11249                           fsr1h	equ	0xFE2
 11250                           fsr1l	equ	0xFE1
 11251                           indf2	equ	0xFDF
 11252                           postinc2	equ	0xFDE
 11253                           postdec2	equ	0xFDD
 11254                           fsr2h	equ	0xFDA
 11255                           fsr2l	equ	0xFD9
 11256                           status	equ	0xFD8
 11257                           
 11258 ;; *************** function _Init_Pwm *****************
 11259 ;; Defined at:
 11260 ;;		line 194 in file "../Main.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;		None
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;		None
 11265 ;; Return value:  Size  Location     Type
 11266 ;;                  1    wreg      void 
 11267 ;; Registers used:
 11268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11274 ;;      Params:         0       0       0       0       0       0       0       0       0
 11275 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11276 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11277 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11278 ;;Total ram usage:        0 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    7
 11281 ;; This function calls:
 11282 ;;		_SETxAPIxVAL
 11283 ;; This function is called by:
 11284 ;;		_main
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text24
 11289  003C4C                     __ptext24:
 11290                           	opt stack 0
 11291  003C4C                     _Init_Pwm:
 11292                           	opt stack 23
 11293                           
 11294                           ;Main.c: 197: SETxAPIxVAL(0x45, 1);
 11295                           
 11296                           ;incstack = 0
 11297  003C4C  0E00               	movlw	0
 11298  003C4E  0100               	movlb	0	; () banked
 11299  003C50  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 11300  003C52  0E01               	movlw	1
 11301  003C54  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 11302  003C56  0E45               	movlw	69
 11303  003C58  EC23  F01D         	call	_SETxAPIxVAL
 11304                           
 11305                           ;Main.c: 198: PR2=0xFF;
 11306  003C5C  68CB               	setf	4043,c	;volatile
 11307                           
 11308                           ;Main.c: 199: CCPR1L = 0x7F;
 11309  003C5E  0E7F               	movlw	127
 11310  003C60  6EBE               	movwf	4030,c	;volatile
 11311                           
 11312                           ;Main.c: 200: CCP1CON = 0x0F;
 11313  003C62  0E0F               	movlw	15
 11314  003C64  6EBD               	movwf	4029,c	;volatile
 11315                           
 11316                           ;Main.c: 201: T2CON = 0x04;
 11317  003C66  0E04               	movlw	4
 11318  003C68  6ECA               	movwf	4042,c	;volatile
 11319                           
 11320                           ;Main.c: 202: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11321  003C6A  9494               	bcf	3988,2,c	;volatile
 11322  003C6C  9094               	bcf	3988,0,c	;volatile
 11323  003C6E  0012               	return		;funcret
 11324  003C70                     __end_of_Init_Pwm:
 11325                           	opt stack 0
 11326                           tblptru	equ	0xFF8
 11327                           tblptrh	equ	0xFF7
 11328                           tblptrl	equ	0xFF6
 11329                           tablat	equ	0xFF5
 11330                           prodh	equ	0xFF4
 11331                           prodl	equ	0xFF3
 11332                           intcon	equ	0xFF2
 11333                           intcon2	equ	0xFF1
 11334                           postinc0	equ	0xFEE
 11335                           wreg	equ	0xFE8
 11336                           postdec1	equ	0xFE5
 11337                           fsr1h	equ	0xFE2
 11338                           fsr1l	equ	0xFE1
 11339                           indf2	equ	0xFDF
 11340                           postinc2	equ	0xFDE
 11341                           postdec2	equ	0xFDD
 11342                           fsr2h	equ	0xFDA
 11343                           fsr2l	equ	0xFD9
 11344                           status	equ	0xFD8
 11345                           
 11346 ;; *************** function _SETxAPIxVAL *****************
 11347 ;; Defined at:
 11348 ;;		line 174 in file "../api.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;  index           1    wreg     unsigned char 
 11351 ;;  value           2   28[BANK0 ] unsigned int 
 11352 ;; Auto vars:     Size  Location     Type
 11353 ;;  index           1   32[BANK0 ] unsigned char 
 11354 ;; Return value:  Size  Location     Type
 11355 ;;                  1    wreg      void 
 11356 ;; Registers used:
 11357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11358 ;; Tracked objects:
 11359 ;;		On entry : 0/0
 11360 ;;		On exit  : 0/0
 11361 ;;		Unchanged: 0/0
 11362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11363 ;;      Params:         0       2       0       0       0       0       0       0       0
 11364 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11365 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11366 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11367 ;;Total ram usage:        5 bytes
 11368 ;; Hardware stack levels used:    1
 11369 ;; Hardware stack levels required when called:    6
 11370 ;; This function calls:
 11371 ;;		_SENDxMESSAGE
 11372 ;; This function is called by:
 11373 ;;		_Init_Pwm
 11374 ;;		_Update_StateMchn
 11375 ;;		_Train_Path
 11376 ;;		_INCRxAPIxVAL
 11377 ;;		_DECRxAPIxVAL
 11378 ;;		_Debounce_Inputs
 11379 ;;		_Junction
 11380 ;;		_Train_Move_Left_Start
 11381 ;;		_Train_Move_Left_Brake
 11382 ;;		_Train_Move_Right_Start
 11383 ;;		_Train_Move_Right_Brake
 11384 ;;		_SETxPWM
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           	psect	text25
 11389  003A46                     __ptext25:
 11390                           	opt stack 0
 11391  003A46                     _SETxAPIxVAL:
 11392                           	opt stack 20
 11393                           
 11394                           ;incstack = 0
 11395                           ;SETxAPIxVAL@index stored from wreg
 11396  003A46  0100               	movlb	0	; () banked
 11397  003A48  6F80               	movwf	SETxAPIxVAL@index& (0+255),b
 11398                           
 11399                           ;api.c: 175: if(API[index] != value){
 11400  003A4A  0100               	movlb	0	; () banked
 11401  003A4C  5180               	movf	SETxAPIxVAL@index& (0+255),w,b
 11402  003A4E  0D02               	mullw	2
 11403  003A50  0EFC               	movlw	low _API
 11404  003A52  24F3               	addwf	prodl,w,c
 11405  003A54  6ED9               	movwf	fsr2l,c
 11406  003A56  0E01               	movlw	high _API
 11407  003A58  20F4               	addwfc	prodh,w,c
 11408  003A5A  6EDA               	movwf	fsr2h,c
 11409  003A5C  0100               	movlb	0	; () banked
 11410  003A5E  517C               	movf	SETxAPIxVAL@value& (0+255),w,b
 11411  003A60  18DE               	xorwf	postinc2,w,c
 11412  003A62  E105               	bnz	u5990
 11413  003A64  0100               	movlb	0	; () banked
 11414  003A66  517D               	movf	(SETxAPIxVAL@value+1)& (0+255),w,b
 11415  003A68  18DE               	xorwf	postinc2,w,c
 11416  003A6A  B4D8               	btfsc	status,2,c
 11417  003A6C  0012               	return	
 11418  003A6E                     u5990:
 11419                           
 11420                           ; BSR set to: 0
 11421                           ;api.c: 176: API[index] = value;
 11422  003A6E  0100               	movlb	0	; () banked
 11423  003A70  5180               	movf	SETxAPIxVAL@index& (0+255),w,b
 11424  003A72  0D02               	mullw	2
 11425  003A74  0EFC               	movlw	low _API
 11426  003A76  24F3               	addwf	prodl,w,c
 11427  003A78  6ED9               	movwf	fsr2l,c
 11428  003A7A  0E01               	movlw	high _API
 11429  003A7C  20F4               	addwfc	prodh,w,c
 11430  003A7E  6EDA               	movwf	fsr2h,c
 11431  003A80  C07C  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11432  003A84  C07D  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;api.c: 177: SENDxMESSAGE(index, value);
 11436  003A88  C07C  F077         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11437  003A8C  C07D  F078         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11438  003A90  0100               	movlb	0	; () banked
 11439  003A92  5180               	movf	SETxAPIxVAL@index& (0+255),w,b
 11440  003A94  EC95  F01D         	call	_SENDxMESSAGE
 11441  003A98  0012               	return	
 11442  003A9A                     __end_of_SETxAPIxVAL:
 11443                           	opt stack 0
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           intcon2	equ	0xFF1
 11452                           postinc0	equ	0xFEE
 11453                           wreg	equ	0xFE8
 11454                           postdec1	equ	0xFE5
 11455                           fsr1h	equ	0xFE2
 11456                           fsr1l	equ	0xFE1
 11457                           indf2	equ	0xFDF
 11458                           postinc2	equ	0xFDE
 11459                           postdec2	equ	0xFDD
 11460                           fsr2h	equ	0xFDA
 11461                           fsr2l	equ	0xFD9
 11462                           status	equ	0xFD8
 11463                           
 11464 ;; *************** function _SENDxMESSAGE *****************
 11465 ;; Defined at:
 11466 ;;		line 94 in file "../terminal.c"
 11467 ;; Parameters:    Size  Location     Type
 11468 ;;  index           1    wreg     unsigned char 
 11469 ;;  value           2   23[BANK0 ] unsigned int 
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;  index           1   25[BANK0 ] unsigned char 
 11472 ;;  low             1   27[BANK0 ] unsigned char 
 11473 ;;  high            1   26[BANK0 ] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  1    wreg      void 
 11476 ;; Registers used:
 11477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11483 ;;      Params:         0       2       0       0       0       0       0       0       0
 11484 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11485 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11486 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11487 ;;Total ram usage:        5 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    5
 11490 ;; This function calls:
 11491 ;;		_printf
 11492 ;; This function is called by:
 11493 ;;		_SETxAPIxVAL
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           	psect	text26
 11498  003B2A                     __ptext26:
 11499                           	opt stack 0
 11500  003B2A                     _SENDxMESSAGE:
 11501                           	opt stack 20
 11502                           
 11503                           ;incstack = 0
 11504                           ;SENDxMESSAGE@index stored from wreg
 11505  003B2A  0100               	movlb	0	; () banked
 11506  003B2C  6F79               	movwf	SENDxMESSAGE@index& (0+255),b
 11507                           
 11508                           ;terminal.c: 96: unsigned char high = value >> 8;
 11509  003B2E  0100               	movlb	0	; () banked
 11510  003B30  5178               	movf	(SENDxMESSAGE@value+1)& (0+255),w,b
 11511  003B32  0100               	movlb	0	; () banked
 11512  003B34  6F7A               	movwf	SENDxMESSAGE@high& (0+255),b
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;terminal.c: 97: unsigned char low = value;
 11516  003B36  C077  F07B         	movff	SENDxMESSAGE@value,SENDxMESSAGE@low
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;terminal.c: 99: printf("\r\nM#%x %x%x\r\n", index, high, low);
 11520  003B3A  0E1B               	movlw	low STR_2
 11521  003B3C  0100               	movlb	0	; () banked
 11522  003B3E  6F67               	movwf	printf@f& (0+255),b
 11523  003B40  0E08               	movlw	high STR_2
 11524  003B42  0100               	movlb	0	; () banked
 11525  003B44  6F68               	movwf	(printf@f+1)& (0+255),b
 11526  003B46  C079  F069         	movff	SENDxMESSAGE@index,?_printf+2
 11527  003B4A  0100               	movlb	0	; () banked
 11528  003B4C  6B6A               	clrf	(?_printf+3)& (0+255),b
 11529  003B4E  C07A  F06B         	movff	SENDxMESSAGE@high,?_printf+4
 11530  003B52  0100               	movlb	0	; () banked
 11531  003B54  6B6C               	clrf	(?_printf+5)& (0+255),b
 11532  003B56  C07B  F06D         	movff	SENDxMESSAGE@low,?_printf+6
 11533  003B5A  0100               	movlb	0	; () banked
 11534  003B5C  6B6E               	clrf	(?_printf+7)& (0+255),b
 11535  003B5E  ECF6  F019         	call	_printf	;wreg free
 11536  003B62  0012               	return		;funcret
 11537  003B64                     __end_of_SENDxMESSAGE:
 11538                           	opt stack 0
 11539                           tblptru	equ	0xFF8
 11540                           tblptrh	equ	0xFF7
 11541                           tblptrl	equ	0xFF6
 11542                           tablat	equ	0xFF5
 11543                           prodh	equ	0xFF4
 11544                           prodl	equ	0xFF3
 11545                           intcon	equ	0xFF2
 11546                           intcon2	equ	0xFF1
 11547                           postinc0	equ	0xFEE
 11548                           wreg	equ	0xFE8
 11549                           postdec1	equ	0xFE5
 11550                           fsr1h	equ	0xFE2
 11551                           fsr1l	equ	0xFE1
 11552                           indf2	equ	0xFDF
 11553                           postinc2	equ	0xFDE
 11554                           postdec2	equ	0xFDD
 11555                           fsr2h	equ	0xFDA
 11556                           fsr2l	equ	0xFD9
 11557                           status	equ	0xFD8
 11558                           
 11559 ;; *************** function _printf *****************
 11560 ;; Defined at:
 11561 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;  f               2    7[BANK0 ] PTR const unsigned char 
 11564 ;;		 -> STR_2(14), STR_1(6), 
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;  idx             1   16[BANK0 ] unsigned char 
 11567 ;;  tmpval          4    0        struct .
 11568 ;;  cp              3    0        PTR const unsigned char 
 11569 ;;  val             2   19[BANK0 ] unsigned int 
 11570 ;;  ap              2   17[BANK0 ] PTR void [1]
 11571 ;;		 -> ?_printf(2), 
 11572 ;;  len             2    0        unsigned int 
 11573 ;;  c               1   22[BANK0 ] char 
 11574 ;;  prec            1   21[BANK0 ] char 
 11575 ;;  flag            1   15[BANK0 ] unsigned char 
 11576 ;; Return value:  Size  Location     Type
 11577 ;;                  2    7[BANK0 ] int 
 11578 ;; Registers used:
 11579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11585 ;;      Params:         0       8       0       0       0       0       0       0       0
 11586 ;;      Locals:         0       8       0       0       0       0       0       0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11588 ;;      Totals:         0      16       0       0       0       0       0       0       0
 11589 ;;Total ram usage:       16 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    4
 11592 ;; This function calls:
 11593 ;;		___lwdiv
 11594 ;;		_putch
 11595 ;; This function is called by:
 11596 ;;		_READxRECEIVEDxMESSAGE
 11597 ;;		_SENDxMESSAGE
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text27
 11602  0033EC                     __ptext27:
 11603                           	opt stack 0
 11604  0033EC                     _printf:
 11605                           	opt stack 20
 11606                           
 11607                           ;doprnt.c: 466: va_list ap;
 11608                           ;doprnt.c: 499: signed char c;
 11609                           ;doprnt.c: 506: signed char prec;
 11610                           ;doprnt.c: 508: unsigned char flag;
 11611                           ;doprnt.c: 523: union {
 11612                           ;doprnt.c: 524: unsigned long vd;
 11613                           ;doprnt.c: 525: double integ;
 11614                           ;doprnt.c: 526: } tmpval;
 11615                           ;doprnt.c: 528: unsigned int val;
 11616                           ;doprnt.c: 529: unsigned len;
 11617                           ;doprnt.c: 530: const char * cp;
 11618                           ;doprnt.c: 533: *ap = __va_start();
 11619                           
 11620                           ;incstack = 0
 11621  0033EC  0E69               	movlw	low (?_printf+2)
 11622  0033EE  0100               	movlb	0	; () banked
 11623  0033F0  6F71               	movwf	printf@ap& (0+255),b
 11624  0033F2  0E00               	movlw	high (?_printf+2)
 11625  0033F4  0100               	movlb	0	; () banked
 11626  0033F6  6F72               	movwf	(printf@ap+1)& (0+255),b
 11627                           
 11628                           ;doprnt.c: 536: while(c = *f++) {
 11629  0033F8  D07D               	goto	l7202
 11630  0033FA                     l7166:
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;doprnt.c: 538: if(c != '%')
 11634  0033FA  0E25               	movlw	37
 11635  0033FC  0100               	movlb	0	; () banked
 11636  0033FE  1976               	xorwf	printf@c& (0+255),w,b
 11637  003400  B4D8               	btfsc	status,2,c
 11638  003402  D005               	goto	l7170
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;doprnt.c: 540: {
 11642                           ;doprnt.c: 541: (putch(c) );
 11643  003404  0100               	movlb	0	; () banked
 11644  003406  5176               	movf	printf@c& (0+255),w,b
 11645  003408  EC52  F01E         	call	_putch
 11646                           
 11647                           ;doprnt.c: 542: continue;
 11648  00340C  D073               	goto	l7202
 11649  00340E                     l7170:
 11650                           
 11651                           ;doprnt.c: 543: }
 11652                           ;doprnt.c: 548: flag = 0;
 11653  00340E  0E00               	movlw	0
 11654  003410  0100               	movlb	0	; () banked
 11655  003412  6F6F               	movwf	printf@flag& (0+255),b
 11656                           
 11657                           ; BSR set to: 0
 11658                           
 11659                           ; BSR set to: 0
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;doprnt.c: 822: }
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;doprnt.c: 813: continue;
 11666                           
 11667                           ;doprnt.c: 802: default:
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;doprnt.c: 723: break;
 11671                           
 11672                           ;doprnt.c: 718: case 'x':
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;doprnt.c: 638: goto alldone;
 11676                           
 11677                           ;doprnt.c: 637: case 0:
 11678                           
 11679                           ;doprnt.c: 635: switch(c = *f++) {
 11680  003414  C067  FFF6         	movff	printf@f,tblptrl
 11681  003418  C068  FFF7         	movff	printf@f+1,tblptrh
 11682  00341C  0100               	movlb	0	; () banked
 11683  00341E  4B67               	infsnz	printf@f& (0+255),f,b
 11684  003420  2B68               	incf	(printf@f+1)& (0+255),f,b
 11685  003422                     	if	0	;tblptru may be non-zero
 11686  003422                     	endif
 11687  003422                     	if	0	;tblptru may be non-zero
 11688  003422                     	endif
 11689  003422  0008               	tblrd		*
 11690  003424  CFF5 F076          	movff	tablat,printf@c
 11691  003428  0100               	movlb	0	; () banked
 11692  00342A  5176               	movf	printf@c& (0+255),w,b
 11693                           
 11694                           ; Switch size 1, requested type "space"
 11695                           ; Number of cases is 2, Range of values is 0 to 120
 11696                           ; switch strategies available:
 11697                           ; Name         Instructions Cycles
 11698                           ; simple_byte            7     4 (average)
 11699                           ;	Chosen strategy is simple_byte
 11700  00342C  0A00               	xorlw	0	; case 0
 11701  00342E  B4D8               	btfsc	status,2,c
 11702  003430  0012               	return	
 11703  003432  0A78               	xorlw	120	; case 120
 11704  003434  A4D8               	btfss	status,2,c
 11705  003436  D05E               	goto	l7202
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;doprnt.c: 1273: {
 11709                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11710                           
 11711                           ; BSR set to: 0
 11712  003438  C071  FFD9         	movff	printf@ap,fsr2l
 11713  00343C  C072  FFDA         	movff	printf@ap+1,fsr2h
 11714  003440  CFDE F073          	movff	postinc2,printf@val
 11715  003444  CFDD F074          	movff	postdec2,printf@val+1
 11716                           
 11717                           ; BSR set to: 0
 11718  003448  0E02               	movlw	2
 11719  00344A  0100               	movlb	0	; () banked
 11720  00344C  2771               	addwf	printf@ap& (0+255),f,b
 11721  00344E  0E00               	movlw	0
 11722  003450  2372               	addwfc	(printf@ap+1)& (0+255),f,b
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;doprnt.c: 1287: }
 11726                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11727  003452  0E01               	movlw	1
 11728  003454  0100               	movlb	0	; () banked
 11729  003456  6F76               	movwf	printf@c& (0+255),b
 11730  003458                     l7182:
 11731                           
 11732                           ; BSR set to: 0
 11733  003458  0E04               	movlw	4
 11734  00345A  0100               	movlb	0	; () banked
 11735  00345C  1976               	xorwf	printf@c& (0+255),w,b
 11736  00345E  B4D8               	btfsc	status,2,c
 11737  003460  D016               	goto	l1233
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11741                           
 11742                           ; BSR set to: 0
 11743                           
 11744                           ; BSR set to: 0
 11745  003462  0100               	movlb	0	; () banked
 11746  003464  5176               	movf	printf@c& (0+255),w,b
 11747  003466  0D02               	mullw	2
 11748  003468  0E01               	movlw	low _hexpowers
 11749  00346A  24F3               	addwf	prodl,w,c
 11750  00346C  6EF6               	movwf	tblptrl,c
 11751  00346E  0E08               	movlw	high _hexpowers
 11752  003470  20F4               	addwfc	prodh,w,c
 11753  003472  6EF7               	movwf	tblptrh,c
 11754  003474                     	if	0	;There are less than 3 active tblptr bytes
 11755  003474                     	endif
 11756  003474  0009               	tblrd		*+
 11757  003476  50F5               	movf	tablat,w,c
 11758  003478  0100               	movlb	0	; () banked
 11759  00347A  5D73               	subwf	printf@val& (0+255),w,b
 11760  00347C  0009               	tblrd		*+
 11761  00347E  50F5               	movf	tablat,w,c
 11762  003480  0100               	movlb	0	; () banked
 11763  003482  5974               	subwfb	(printf@val+1)& (0+255),w,b
 11764  003484  A0D8               	btfss	status,0,c
 11765  003486  D003               	goto	l1233
 11766                           
 11767                           ; BSR set to: 0
 11768                           
 11769                           ; BSR set to: 0
 11770                           
 11771                           ; BSR set to: 0
 11772                           ;doprnt.c: 1318: break;
 11773  003488  0100               	movlb	0	; () banked
 11774  00348A  2B76               	incf	printf@c& (0+255),f,b
 11775  00348C  D7E5               	goto	l7182
 11776  00348E                     l1233:
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;doprnt.c: 1422: {
 11780                           ;doprnt.c: 1469: }
 11781                           ;doprnt.c: 1472: prec = c;
 11782  00348E  C076  F075         	movff	printf@c,printf@prec
 11783                           
 11784                           ;doprnt.c: 1474: while(prec--) {
 11785  003492  D02A               	goto	l7200
 11786  003494                     l7194:
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;doprnt.c: 1478: {
 11790                           ;doprnt.c: 1499: {
 11791                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11792  003494  C073  F060         	movff	printf@val,___lwdiv@dividend
 11793  003498  C074  F061         	movff	printf@val+1,___lwdiv@dividend+1
 11794  00349C  0100               	movlb	0	; () banked
 11795  00349E  5175               	movf	printf@prec& (0+255),w,b
 11796  0034A0  0D02               	mullw	2
 11797  0034A2  0E01               	movlw	low _hexpowers
 11798  0034A4  24F3               	addwf	prodl,w,c
 11799  0034A6  6EF6               	movwf	tblptrl,c
 11800  0034A8  0E08               	movlw	high _hexpowers
 11801  0034AA  20F4               	addwfc	prodh,w,c
 11802  0034AC  6EF7               	movwf	tblptrh,c
 11803  0034AE                     	if	0	;There are less than 3 active tblptr bytes
 11804  0034AE                     	endif
 11805  0034AE  0009               	tblrd		*+
 11806  0034B0  CFF5 F062          	movff	tablat,___lwdiv@divisor
 11807  0034B4  000A               	tblrd		*-
 11808  0034B6  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 11809  0034BA  EC7A  F01C         	call	___lwdiv	;wreg free
 11810  0034BE  0100               	movlb	0	; () banked
 11811  0034C0  5160               	movf	?___lwdiv& (0+255),w,b
 11812  0034C2  0B0F               	andlw	15
 11813  0034C4  0100               	movlb	0	; () banked
 11814  0034C6  6F70               	movwf	printf@idx& (0+255),b
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11818  0034C8  0100               	movlb	0	; () banked
 11819  0034CA  5170               	movf	printf@idx& (0+255),w,b
 11820  0034CC  0D01               	mullw	1
 11821  0034CE  0E0A               	movlw	low STR_3
 11822  0034D0  24F3               	addwf	prodl,w,c
 11823  0034D2  6EF6               	movwf	tblptrl,c
 11824  0034D4  0E08               	movlw	high STR_3
 11825  0034D6  20F4               	addwfc	prodh,w,c
 11826  0034D8  6EF7               	movwf	tblptrh,c
 11827  0034DA                     	if	0	;There are less than 3 active tblptr bytes
 11828  0034DA                     	endif
 11829  0034DA  0008               	tblrd		*
 11830  0034DC  CFF5 F076          	movff	tablat,printf@c
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;doprnt.c: 1508: }
 11834                           ;doprnt.c: 1523: }
 11835                           ;doprnt.c: 1524: (putch(c) );
 11836  0034E0  0100               	movlb	0	; () banked
 11837  0034E2  5176               	movf	printf@c& (0+255),w,b
 11838  0034E4  EC52  F01E         	call	_putch
 11839  0034E8                     l7200:
 11840  0034E8  0100               	movlb	0	; () banked
 11841  0034EA  0775               	decf	printf@prec& (0+255),f,b
 11842  0034EC  0100               	movlb	0	; () banked
 11843  0034EE  2975               	incf	printf@prec& (0+255),w,b
 11844  0034F0  A4D8               	btfss	status,2,c
 11845  0034F2  D7D0               	goto	l7194
 11846  0034F4                     l7202:
 11847  0034F4  C067  FFF6         	movff	printf@f,tblptrl
 11848  0034F8  C068  FFF7         	movff	printf@f+1,tblptrh
 11849  0034FC  0100               	movlb	0	; () banked
 11850  0034FE  4B67               	infsnz	printf@f& (0+255),f,b
 11851  003500  2B68               	incf	(printf@f+1)& (0+255),f,b
 11852  003502                     	if	0	;tblptru may be non-zero
 11853  003502                     	endif
 11854  003502                     	if	0	;tblptru may be non-zero
 11855  003502                     	endif
 11856  003502  0008               	tblrd		*
 11857  003504  CFF5 F076          	movff	tablat,printf@c
 11858  003508  0100               	movlb	0	; () banked
 11859  00350A  5176               	movf	printf@c& (0+255),w,b
 11860  00350C  B4D8               	btfsc	status,2,c
 11861  00350E  0012               	return	
 11862  003510  D774               	goto	l7166
 11863  003512                     __end_of_printf:
 11864                           	opt stack 0
 11865                           tblptru	equ	0xFF8
 11866                           tblptrh	equ	0xFF7
 11867                           tblptrl	equ	0xFF6
 11868                           tablat	equ	0xFF5
 11869                           prodh	equ	0xFF4
 11870                           prodl	equ	0xFF3
 11871                           intcon	equ	0xFF2
 11872                           intcon2	equ	0xFF1
 11873                           postinc0	equ	0xFEE
 11874                           wreg	equ	0xFE8
 11875                           postdec1	equ	0xFE5
 11876                           fsr1h	equ	0xFE2
 11877                           fsr1l	equ	0xFE1
 11878                           indf2	equ	0xFDF
 11879                           postinc2	equ	0xFDE
 11880                           postdec2	equ	0xFDD
 11881                           fsr2h	equ	0xFDA
 11882                           fsr2l	equ	0xFD9
 11883                           status	equ	0xFD8
 11884                           
 11885 ;; *************** function _putch *****************
 11886 ;; Defined at:
 11887 ;;		line 177 in file "../eusart1.c"
 11888 ;; Parameters:    Size  Location     Type
 11889 ;;  data            1    wreg     unsigned char 
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;  data            1   31[COMRAM] unsigned char 
 11892 ;; Return value:  Size  Location     Type
 11893 ;;                  1    wreg      void 
 11894 ;; Registers used:
 11895 ;;		wreg
 11896 ;; Tracked objects:
 11897 ;;		On entry : 0/0
 11898 ;;		On exit  : 0/0
 11899 ;;		Unchanged: 0/0
 11900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11901 ;;      Params:         0       0       0       0       0       0       0       0       0
 11902 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11903 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11904 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11905 ;;Total ram usage:        1 bytes
 11906 ;; Hardware stack levels used:    1
 11907 ;; Hardware stack levels required when called:    3
 11908 ;; This function calls:
 11909 ;;		Nothing
 11910 ;; This function is called by:
 11911 ;;		_printf
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           	psect	text28
 11916  003CA4                     __ptext28:
 11917                           	opt stack 0
 11918  003CA4                     _putch:
 11919                           	opt stack 20
 11920                           
 11921                           ; BSR set to: 0
 11922                           ;incstack = 0
 11923                           ;putch@data stored from wreg
 11924  003CA4  6E20               	movwf	putch@data,c
 11925  003CA6                     l621:
 11926  003CA6  A89E               	btfss	3998,4,c	;volatile
 11927  003CA8  D7FE               	goto	l621
 11928                           
 11929                           ;eusart1.c: 180: TXREG1 = data;
 11930  003CAA  C020  FFAD         	movff	putch@data,4013	;volatile
 11931  003CAE  0012               	return		;funcret
 11932  003CB0                     __end_of_putch:
 11933                           	opt stack 0
 11934                           tblptru	equ	0xFF8
 11935                           tblptrh	equ	0xFF7
 11936                           tblptrl	equ	0xFF6
 11937                           tablat	equ	0xFF5
 11938                           prodh	equ	0xFF4
 11939                           prodl	equ	0xFF3
 11940                           intcon	equ	0xFF2
 11941                           intcon2	equ	0xFF1
 11942                           postinc0	equ	0xFEE
 11943                           wreg	equ	0xFE8
 11944                           postdec1	equ	0xFE5
 11945                           fsr1h	equ	0xFE2
 11946                           fsr1l	equ	0xFE1
 11947                           indf2	equ	0xFDF
 11948                           postinc2	equ	0xFDE
 11949                           postdec2	equ	0xFDD
 11950                           fsr2h	equ	0xFDA
 11951                           fsr2l	equ	0xFD9
 11952                           status	equ	0xFD8
 11953                           
 11954 ;; *************** function ___lwdiv *****************
 11955 ;; Defined at:
 11956 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;  dividend        2    0[BANK0 ] unsigned int 
 11959 ;;  divisor         2    2[BANK0 ] unsigned int 
 11960 ;; Auto vars:     Size  Location     Type
 11961 ;;  quotient        2    5[BANK0 ] unsigned int 
 11962 ;;  counter         1    4[BANK0 ] unsigned char 
 11963 ;; Return value:  Size  Location     Type
 11964 ;;                  2    0[BANK0 ] unsigned int 
 11965 ;; Registers used:
 11966 ;;		wreg, status,2, status,0
 11967 ;; Tracked objects:
 11968 ;;		On entry : 0/0
 11969 ;;		On exit  : 0/0
 11970 ;;		Unchanged: 0/0
 11971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11972 ;;      Params:         0       4       0       0       0       0       0       0       0
 11973 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11974 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11975 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11976 ;;Total ram usage:        7 bytes
 11977 ;; Hardware stack levels used:    1
 11978 ;; Hardware stack levels required when called:    3
 11979 ;; This function calls:
 11980 ;;		Nothing
 11981 ;; This function is called by:
 11982 ;;		_printf
 11983 ;; This function uses a non-reentrant model
 11984 ;;
 11985                           
 11986                           	psect	text29
 11987  0038F4                     __ptext29:
 11988                           	opt stack 0
 11989  0038F4                     ___lwdiv:
 11990                           	opt stack 20
 11991                           
 11992                           ;incstack = 0
 11993  0038F4  0E00               	movlw	0
 11994  0038F6  0100               	movlb	0	; () banked
 11995  0038F8  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11996  0038FA  0E00               	movlw	0
 11997  0038FC  6F65               	movwf	___lwdiv@quotient& (0+255),b
 11998                           
 11999                           ; BSR set to: 0
 12000  0038FE  0100               	movlb	0	; () banked
 12001  003900  5162               	movf	___lwdiv@divisor& (0+255),w,b
 12002  003902  0100               	movlb	0	; () banked
 12003  003904  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12004  003906  B4D8               	btfsc	status,2,c
 12005  003908  D02C               	goto	l1649
 12006                           
 12007                           ; BSR set to: 0
 12008  00390A  0E01               	movlw	1
 12009  00390C  0100               	movlb	0	; () banked
 12010  00390E  6F64               	movwf	___lwdiv@counter& (0+255),b
 12011  003910  D006               	goto	l7150
 12012  003912                     l7148:
 12013                           
 12014                           ; BSR set to: 0
 12015  003912  0100               	movlb	0	; () banked
 12016  003914  90D8               	bcf	status,0,c
 12017  003916  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 12018  003918  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12019  00391A  0100               	movlb	0	; () banked
 12020  00391C  2B64               	incf	___lwdiv@counter& (0+255),f,b
 12021  00391E                     l7150:
 12022                           
 12023                           ; BSR set to: 0
 12024  00391E  0100               	movlb	0	; () banked
 12025  003920  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12026  003922  D7F7               	goto	l7148
 12027  003924                     l7152:
 12028                           
 12029                           ; BSR set to: 0
 12030  003924  0100               	movlb	0	; () banked
 12031  003926  90D8               	bcf	status,0,c
 12032  003928  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 12033  00392A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12034                           
 12035                           ; BSR set to: 0
 12036  00392C  0100               	movlb	0	; () banked
 12037  00392E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 12038  003930  0100               	movlb	0	; () banked
 12039  003932  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 12040  003934  0100               	movlb	0	; () banked
 12041  003936  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12042  003938  0100               	movlb	0	; () banked
 12043  00393A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12044  00393C  A0D8               	btfss	status,0,c
 12045  00393E  D00A               	goto	l7160
 12046                           
 12047                           ; BSR set to: 0
 12048  003940  0100               	movlb	0	; () banked
 12049  003942  5162               	movf	___lwdiv@divisor& (0+255),w,b
 12050  003944  0100               	movlb	0	; () banked
 12051  003946  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 12052  003948  0100               	movlb	0	; () banked
 12053  00394A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12054  00394C  0100               	movlb	0	; () banked
 12055  00394E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12056                           
 12057                           ; BSR set to: 0
 12058  003950  0100               	movlb	0	; () banked
 12059  003952  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 12060  003954                     l7160:
 12061                           
 12062                           ; BSR set to: 0
 12063  003954  0100               	movlb	0	; () banked
 12064  003956  90D8               	bcf	status,0,c
 12065  003958  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12066  00395A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 12067                           
 12068                           ; BSR set to: 0
 12069  00395C  0100               	movlb	0	; () banked
 12070  00395E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 12071  003960  D7E1               	goto	l7152
 12072  003962                     l1649:
 12073                           
 12074                           ; BSR set to: 0
 12075  003962  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 12076  003966  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12077                           
 12078                           ; BSR set to: 0
 12079  00396A  0012               	return		;funcret
 12080  00396C                     __end_of___lwdiv:
 12081                           	opt stack 0
 12082                           tblptru	equ	0xFF8
 12083                           tblptrh	equ	0xFF7
 12084                           tblptrl	equ	0xFF6
 12085                           tablat	equ	0xFF5
 12086                           prodh	equ	0xFF4
 12087                           prodl	equ	0xFF3
 12088                           intcon	equ	0xFF2
 12089                           intcon2	equ	0xFF1
 12090                           postinc0	equ	0xFEE
 12091                           wreg	equ	0xFE8
 12092                           postdec1	equ	0xFE5
 12093                           fsr1h	equ	0xFE2
 12094                           fsr1l	equ	0xFE1
 12095                           indf2	equ	0xFDF
 12096                           postinc2	equ	0xFDE
 12097                           postdec2	equ	0xFDD
 12098                           fsr2h	equ	0xFDA
 12099                           fsr2l	equ	0xFD9
 12100                           status	equ	0xFD8
 12101                           
 12102 ;; *************** function _EUSART1_Initialize *****************
 12103 ;; Defined at:
 12104 ;;		line 77 in file "../eusart1.c"
 12105 ;; Parameters:    Size  Location     Type
 12106 ;;		None
 12107 ;; Auto vars:     Size  Location     Type
 12108 ;;  baud_rate       2    0[BANK0 ] unsigned int 
 12109 ;; Return value:  Size  Location     Type
 12110 ;;                  1    wreg      void 
 12111 ;; Registers used:
 12112 ;;		wreg, status,2
 12113 ;; Tracked objects:
 12114 ;;		On entry : 0/0
 12115 ;;		On exit  : 0/0
 12116 ;;		Unchanged: 0/0
 12117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12118 ;;      Params:         0       0       0       0       0       0       0       0       0
 12119 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12120 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12121 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12122 ;;Total ram usage:        2 bytes
 12123 ;; Hardware stack levels used:    1
 12124 ;; Hardware stack levels required when called:    3
 12125 ;; This function calls:
 12126 ;;		Nothing
 12127 ;; This function is called by:
 12128 ;;		_main
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           	psect	text30
 12133  003A9A                     __ptext30:
 12134                           	opt stack 0
 12135  003A9A                     _EUSART1_Initialize:
 12136                           	opt stack 27
 12137                           
 12138                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;incstack = 0
 12142  003A9A  9A9D               	bcf	3997,5,c	;volatile
 12143                           
 12144                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 12145  003A9C  989D               	bcf	3997,4,c	;volatile
 12146                           
 12147                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 12148  003A9E  86B8               	bsf	4024,3,c	;volatile
 12149                           
 12150                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 12151  003AA0  8EAB               	bsf	4011,7,c	;volatile
 12152                           
 12153                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 12154  003AA2  9CAB               	bcf	4011,6,c	;volatile
 12155                           
 12156                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 12157  003AA4  88AB               	bsf	4011,4,c	;volatile
 12158                           
 12159                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 12160  003AA6  96AB               	bcf	4011,3,c	;volatile
 12161                           
 12162                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 12163  003AA8  9CAC               	bcf	4012,6,c	;volatile
 12164                           
 12165                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 12166  003AAA  8AAC               	bsf	4012,5,c	;volatile
 12167                           
 12168                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 12169  003AAC  98AC               	bcf	4012,4,c	;volatile
 12170                           
 12171                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 12172  003AAE  96AC               	bcf	4012,3,c	;volatile
 12173                           
 12174                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 12175  003AB0  84AC               	bsf	4012,2,c	;volatile
 12176                           
 12177                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 12178  003AB2  82AC               	bsf	4012,1,c	;volatile
 12179                           
 12180                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 12181  003AB4  90AC               	bcf	4012,0,c	;volatile
 12182                           
 12183                           ;eusart1.c: 99: unsigned int baud_rate;
 12184                           ;eusart1.c: 101: baud_rate = 417;
 12185  003AB6  0E01               	movlw	1
 12186  003AB8  0100               	movlb	0	; () banked
 12187  003ABA  6F61               	movwf	(EUSART1_Initialize@baud_rate+1)& (0+255),b
 12188  003ABC  0EA1               	movlw	161
 12189  003ABE  6F60               	movwf	EUSART1_Initialize@baud_rate& (0+255),b
 12190                           
 12191                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 12192  003AC0  0100               	movlb	0	; () banked
 12193  003AC2  5161               	movf	(EUSART1_Initialize@baud_rate+1)& (0+255),w,b
 12194  003AC4  6EB0               	movwf	4016,c	;volatile
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;eusart1.c: 104: SPBRG = baud_rate;
 12198  003AC6  C060  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12199                           
 12200                           ;eusart1.c: 108: eusart1TxHead = 0;
 12201  003ACA  0E00               	movlw	0
 12202  003ACC  6E3E               	movwf	_eusart1TxHead,c
 12203                           
 12204                           ;eusart1.c: 109: eusart1TxTail = 0;
 12205  003ACE  0E00               	movlw	0
 12206  003AD0  6E3F               	movwf	_eusart1TxTail,c
 12207                           
 12208                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12209  003AD2  0E7E               	movlw	126
 12210  003AD4  6E3D               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12211                           
 12212                           ;eusart1.c: 112: eusart1RxHead = 0;
 12213  003AD6  0E00               	movlw	0
 12214  003AD8  6E3B               	movwf	_eusart1RxHead,c
 12215                           
 12216                           ;eusart1.c: 113: eusart1RxTail = 0;
 12217  003ADA  0E00               	movlw	0
 12218  003ADC  6E3C               	movwf	_eusart1RxTail,c
 12219                           
 12220                           ;eusart1.c: 114: eusart1RxCount = 0;
 12221  003ADE  0E00               	movlw	0
 12222  003AE0  6E3A               	movwf	_eusart1RxCount,c	;volatile
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 12226  003AE2  8A9D               	bsf	3997,5,c	;volatile
 12227                           
 12228                           ; BSR set to: 0
 12229  003AE4  0012               	return		;funcret
 12230  003AE6                     __end_of_EUSART1_Initialize:
 12231                           	opt stack 0
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           intcon2	equ	0xFF1
 12240                           postinc0	equ	0xFEE
 12241                           wreg	equ	0xFE8
 12242                           postdec1	equ	0xFE5
 12243                           fsr1h	equ	0xFE2
 12244                           fsr1l	equ	0xFE1
 12245                           indf2	equ	0xFDF
 12246                           postinc2	equ	0xFDE
 12247                           postdec2	equ	0xFDD
 12248                           fsr2h	equ	0xFDA
 12249                           fsr2l	equ	0xFD9
 12250                           status	equ	0xFD8
 12251                           
 12252 ;; *************** function _APIxInitialize *****************
 12253 ;; Defined at:
 12254 ;;		line 32 in file "../api.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;		None
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;  i               2    0[BANK0 ] unsigned int 
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  1    wreg      void 
 12261 ;; Registers used:
 12262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12268 ;;      Params:         0       0       0       0       0       0       0       0       0
 12269 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12270 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12271 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12272 ;;Total ram usage:        2 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    3
 12275 ;; This function calls:
 12276 ;;		Nothing
 12277 ;; This function is called by:
 12278 ;;		_main
 12279 ;; This function uses a non-reentrant model
 12280 ;;
 12281                           
 12282                           	psect	text31
 12283  001FD4                     __ptext31:
 12284                           	opt stack 0
 12285  001FD4                     _APIxInitialize:
 12286                           	opt stack 27
 12287                           
 12288                           ;api.c: 34: unsigned int i;
 12289                           ;api.c: 35: for(i = 0; i < (0xFF + 1); i++ )
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;incstack = 0
 12293  001FD4  0E00               	movlw	0
 12294  001FD6  0100               	movlb	0	; () banked
 12295  001FD8  6F61               	movwf	(APIxInitialize@i+1)& (0+255),b
 12296  001FDA  0E00               	movlw	0
 12297  001FDC  6F60               	movwf	APIxInitialize@i& (0+255),b
 12298  001FDE                     l8360:
 12299                           
 12300                           ; BSR set to: 0
 12301  001FDE  0100               	movlb	0	; () banked
 12302  001FE0  0561               	decf	(APIxInitialize@i+1)& (0+255),w,b
 12303  001FE2  B0D8               	btfsc	status,0,c
 12304  001FE4  D022               	goto	l684
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;api.c: 36: {
 12308                           ;api.c: 37: API_RW[i] = 0;
 12309                           
 12310                           ; BSR set to: 0
 12311                           
 12312                           ; BSR set to: 0
 12313  001FE6  90D8               	bcf	status,0,c
 12314  001FE8  0100               	movlb	0	; () banked
 12315  001FEA  3560               	rlcf	APIxInitialize@i& (0+255),w,b
 12316  001FEC  6ED9               	movwf	fsr2l,c
 12317  001FEE  0100               	movlb	0	; () banked
 12318  001FF0  3561               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 12319  001FF2  6EDA               	movwf	fsr2h,c
 12320  001FF4  0EFA               	movlw	low _API_RW
 12321  001FF6  26D9               	addwf	fsr2l,f,c
 12322  001FF8  0E03               	movlw	high _API_RW
 12323  001FFA  22DA               	addwfc	fsr2h,f,c
 12324  001FFC  0E00               	movlw	0
 12325  001FFE  6EDE               	movwf	postinc2,c
 12326  002000  0E00               	movlw	0
 12327  002002  6EDD               	movwf	postdec2,c
 12328                           
 12329                           ;api.c: 38: API[i] = 0;
 12330  002004  90D8               	bcf	status,0,c
 12331  002006  0100               	movlb	0	; () banked
 12332  002008  3560               	rlcf	APIxInitialize@i& (0+255),w,b
 12333  00200A  6ED9               	movwf	fsr2l,c
 12334  00200C  0100               	movlb	0	; () banked
 12335  00200E  3561               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 12336  002010  6EDA               	movwf	fsr2h,c
 12337  002012  0EFC               	movlw	low _API
 12338  002014  26D9               	addwf	fsr2l,f,c
 12339  002016  0E01               	movlw	high _API
 12340  002018  22DA               	addwfc	fsr2h,f,c
 12341  00201A  0E00               	movlw	0
 12342  00201C  6EDE               	movwf	postinc2,c
 12343  00201E  0E00               	movlw	0
 12344  002020  6EDD               	movwf	postdec2,c
 12345                           
 12346                           ; BSR set to: 0
 12347  002022  0100               	movlb	0	; () banked
 12348  002024  4B60               	infsnz	APIxInitialize@i& (0+255),f,b
 12349  002026  2B61               	incf	(APIxInitialize@i+1)& (0+255),f,b
 12350  002028  D7DA               	goto	l8360
 12351  00202A                     l684:
 12352                           
 12353                           ; BSR set to: 0
 12354                           ;api.c: 39: }
 12355                           ;api.c: 42: API_RW[0x10] = 0;
 12356  00202A  0E00               	movlw	0
 12357  00202C  CFE8 F41A          	movff	wreg,_API_RW+32
 12358  002030  0E00               	movlw	0
 12359  002032  CFE8 F41B          	movff	wreg,_API_RW+33
 12360                           
 12361                           ;api.c: 43: API_RW[0x12] = 1;
 12362  002036  0E01               	movlw	1
 12363  002038  CFE8 F41E          	movff	wreg,_API_RW+36
 12364  00203C  0E00               	movlw	0
 12365  00203E  CFE8 F41F          	movff	wreg,_API_RW+37
 12366                           
 12367                           ;api.c: 44: API_RW[0x13] = 1;
 12368  002042  0E01               	movlw	1
 12369  002044  CFE8 F420          	movff	wreg,_API_RW+38
 12370  002048  0E00               	movlw	0
 12371  00204A  CFE8 F421          	movff	wreg,_API_RW+39
 12372                           
 12373                           ;api.c: 45: API_RW[0x14] = 1;
 12374  00204E  0E01               	movlw	1
 12375  002050  CFE8 F422          	movff	wreg,_API_RW+40
 12376  002054  0E00               	movlw	0
 12377  002056  CFE8 F423          	movff	wreg,_API_RW+41
 12378                           
 12379                           ;api.c: 46: API_RW[0x15] = 1;
 12380  00205A  0E01               	movlw	1
 12381  00205C  CFE8 F424          	movff	wreg,_API_RW+42
 12382  002060  0E00               	movlw	0
 12383  002062  CFE8 F425          	movff	wreg,_API_RW+43
 12384                           
 12385                           ;api.c: 47: API_RW[0x16] = 1;
 12386  002066  0E01               	movlw	1
 12387  002068  CFE8 F426          	movff	wreg,_API_RW+44
 12388  00206C  0E00               	movlw	0
 12389  00206E  CFE8 F427          	movff	wreg,_API_RW+45
 12390                           
 12391                           ;api.c: 48: API_RW[0x17] = 1;
 12392  002072  0E01               	movlw	1
 12393  002074  CFE8 F428          	movff	wreg,_API_RW+46
 12394  002078  0E00               	movlw	0
 12395  00207A  CFE8 F429          	movff	wreg,_API_RW+47
 12396                           
 12397                           ;api.c: 49: API_RW[0x18] = 1;
 12398  00207E  0E01               	movlw	1
 12399  002080  CFE8 F42A          	movff	wreg,_API_RW+48
 12400  002084  0E00               	movlw	0
 12401  002086  CFE8 F42B          	movff	wreg,_API_RW+49
 12402                           
 12403                           ;api.c: 50: API_RW[0x19] = 1;
 12404  00208A  0E01               	movlw	1
 12405  00208C  CFE8 F42C          	movff	wreg,_API_RW+50
 12406  002090  0E00               	movlw	0
 12407  002092  CFE8 F42D          	movff	wreg,_API_RW+51
 12408                           
 12409                           ;api.c: 51: API_RW[0x1A] = 1;
 12410  002096  0E01               	movlw	1
 12411  002098  CFE8 F42E          	movff	wreg,_API_RW+52
 12412  00209C  0E00               	movlw	0
 12413  00209E  CFE8 F42F          	movff	wreg,_API_RW+53
 12414                           
 12415                           ;api.c: 52: API_RW[0x1B] = 1;
 12416  0020A2  0E01               	movlw	1
 12417  0020A4  CFE8 F430          	movff	wreg,_API_RW+54
 12418  0020A8  0E00               	movlw	0
 12419  0020AA  CFE8 F431          	movff	wreg,_API_RW+55
 12420                           
 12421                           ;api.c: 53: API_RW[0x1C] = 0;
 12422  0020AE  0E00               	movlw	0
 12423  0020B0  CFE8 F432          	movff	wreg,_API_RW+56
 12424  0020B4  0E00               	movlw	0
 12425  0020B6  CFE8 F433          	movff	wreg,_API_RW+57
 12426                           
 12427                           ;api.c: 54: API_RW[0x1D] = 0;
 12428  0020BA  0E00               	movlw	0
 12429  0020BC  CFE8 F434          	movff	wreg,_API_RW+58
 12430  0020C0  0E00               	movlw	0
 12431  0020C2  CFE8 F435          	movff	wreg,_API_RW+59
 12432                           
 12433                           ;api.c: 55: API_RW[0x1E] = 0;
 12434  0020C6  0E00               	movlw	0
 12435  0020C8  CFE8 F436          	movff	wreg,_API_RW+60
 12436  0020CC  0E00               	movlw	0
 12437  0020CE  CFE8 F437          	movff	wreg,_API_RW+61
 12438                           
 12439                           ;api.c: 56: API_RW[0x1F] = 0;
 12440  0020D2  0E00               	movlw	0
 12441  0020D4  CFE8 F438          	movff	wreg,_API_RW+62
 12442  0020D8  0E00               	movlw	0
 12443  0020DA  CFE8 F439          	movff	wreg,_API_RW+63
 12444                           
 12445                           ;api.c: 57: API_RW[0x20] = 0;
 12446  0020DE  0E00               	movlw	0
 12447  0020E0  CFE8 F43A          	movff	wreg,_API_RW+64
 12448  0020E4  0E00               	movlw	0
 12449  0020E6  CFE8 F43B          	movff	wreg,_API_RW+65
 12450                           
 12451                           ;api.c: 58: API_RW[0x21] = 0;
 12452  0020EA  0E00               	movlw	0
 12453  0020EC  CFE8 F43C          	movff	wreg,_API_RW+66
 12454  0020F0  0E00               	movlw	0
 12455  0020F2  CFE8 F43D          	movff	wreg,_API_RW+67
 12456                           
 12457                           ;api.c: 59: API_RW[0x22] = 0;
 12458  0020F6  0E00               	movlw	0
 12459  0020F8  CFE8 F43E          	movff	wreg,_API_RW+68
 12460  0020FC  0E00               	movlw	0
 12461  0020FE  CFE8 F43F          	movff	wreg,_API_RW+69
 12462                           
 12463                           ;api.c: 60: API_RW[0x23] = 0;
 12464  002102  0E00               	movlw	0
 12465  002104  CFE8 F440          	movff	wreg,_API_RW+70
 12466  002108  0E00               	movlw	0
 12467  00210A  CFE8 F441          	movff	wreg,_API_RW+71
 12468                           
 12469                           ;api.c: 61: API_RW[0x24] = 0;
 12470  00210E  0E00               	movlw	0
 12471  002110  CFE8 F442          	movff	wreg,_API_RW+72
 12472  002114  0E00               	movlw	0
 12473  002116  CFE8 F443          	movff	wreg,_API_RW+73
 12474                           
 12475                           ;api.c: 62: API_RW[0x25] = 0;
 12476  00211A  0E00               	movlw	0
 12477  00211C  CFE8 F444          	movff	wreg,_API_RW+74
 12478  002120  0E00               	movlw	0
 12479  002122  CFE8 F445          	movff	wreg,_API_RW+75
 12480                           
 12481                           ;api.c: 63: API_RW[0x26] = 0;
 12482  002126  0E00               	movlw	0
 12483  002128  CFE8 F446          	movff	wreg,_API_RW+76
 12484  00212C  0E00               	movlw	0
 12485  00212E  CFE8 F447          	movff	wreg,_API_RW+77
 12486                           
 12487                           ;api.c: 64: API_RW[0x27] = 1;
 12488  002132  0E01               	movlw	1
 12489  002134  CFE8 F448          	movff	wreg,_API_RW+78
 12490  002138  0E00               	movlw	0
 12491  00213A  CFE8 F449          	movff	wreg,_API_RW+79
 12492                           
 12493                           ;api.c: 65: API_RW[0x28] = 1;
 12494  00213E  0E01               	movlw	1
 12495  002140  CFE8 F44A          	movff	wreg,_API_RW+80
 12496  002144  0E00               	movlw	0
 12497  002146  CFE8 F44B          	movff	wreg,_API_RW+81
 12498                           
 12499                           ;api.c: 66: API_RW[0x29] = 0;
 12500  00214A  0E00               	movlw	0
 12501  00214C  CFE8 F44C          	movff	wreg,_API_RW+82
 12502  002150  0E00               	movlw	0
 12503  002152  CFE8 F44D          	movff	wreg,_API_RW+83
 12504                           
 12505                           ;api.c: 67: API_RW[0x2A] = 0;
 12506  002156  0E00               	movlw	0
 12507  002158  CFE8 F44E          	movff	wreg,_API_RW+84
 12508  00215C  0E00               	movlw	0
 12509  00215E  CFE8 F44F          	movff	wreg,_API_RW+85
 12510                           
 12511                           ;api.c: 68: API_RW[0x2B] = 0;
 12512  002162  0E00               	movlw	0
 12513  002164  CFE8 F450          	movff	wreg,_API_RW+86
 12514  002168  0E00               	movlw	0
 12515  00216A  CFE8 F451          	movff	wreg,_API_RW+87
 12516                           
 12517                           ;api.c: 69: API_RW[0x2C] = 0;
 12518  00216E  0E00               	movlw	0
 12519  002170  CFE8 F452          	movff	wreg,_API_RW+88
 12520  002174  0E00               	movlw	0
 12521  002176  CFE8 F453          	movff	wreg,_API_RW+89
 12522                           
 12523                           ;api.c: 70: API_RW[0x2D] = 1;
 12524  00217A  0E01               	movlw	1
 12525  00217C  CFE8 F454          	movff	wreg,_API_RW+90
 12526  002180  0E00               	movlw	0
 12527  002182  CFE8 F455          	movff	wreg,_API_RW+91
 12528                           
 12529                           ;api.c: 71: API_RW[0x2E] = 1;
 12530  002186  0E01               	movlw	1
 12531  002188  CFE8 F456          	movff	wreg,_API_RW+92
 12532  00218C  0E00               	movlw	0
 12533  00218E  CFE8 F457          	movff	wreg,_API_RW+93
 12534                           
 12535                           ;api.c: 72: API_RW[0x2F] = 1;
 12536  002192  0E01               	movlw	1
 12537  002194  CFE8 F458          	movff	wreg,_API_RW+94
 12538  002198  0E00               	movlw	0
 12539  00219A  CFE8 F459          	movff	wreg,_API_RW+95
 12540                           
 12541                           ;api.c: 73: API_RW[0x30] = 1;
 12542  00219E  0E01               	movlw	1
 12543  0021A0  CFE8 F45A          	movff	wreg,_API_RW+96
 12544  0021A4  0E00               	movlw	0
 12545  0021A6  CFE8 F45B          	movff	wreg,_API_RW+97
 12546                           
 12547                           ;api.c: 74: API_RW[0x31] = 1;
 12548  0021AA  0E01               	movlw	1
 12549  0021AC  CFE8 F45C          	movff	wreg,_API_RW+98
 12550  0021B0  0E00               	movlw	0
 12551  0021B2  CFE8 F45D          	movff	wreg,_API_RW+99
 12552                           
 12553                           ;api.c: 75: API_RW[0x32] = 1;
 12554  0021B6  0E01               	movlw	1
 12555  0021B8  CFE8 F45E          	movff	wreg,_API_RW+100
 12556  0021BC  0E00               	movlw	0
 12557  0021BE  CFE8 F45F          	movff	wreg,_API_RW+101
 12558                           
 12559                           ;api.c: 76: API_RW[0x33] = 1;
 12560  0021C2  0E01               	movlw	1
 12561  0021C4  CFE8 F460          	movff	wreg,_API_RW+102
 12562  0021C8  0E00               	movlw	0
 12563  0021CA  CFE8 F461          	movff	wreg,_API_RW+103
 12564                           
 12565                           ;api.c: 77: API_RW[0x34] = 1;
 12566  0021CE  0E01               	movlw	1
 12567  0021D0  CFE8 F462          	movff	wreg,_API_RW+104
 12568  0021D4  0E00               	movlw	0
 12569  0021D6  CFE8 F463          	movff	wreg,_API_RW+105
 12570                           
 12571                           ;api.c: 78: API_RW[0x35] = 1;
 12572  0021DA  0E01               	movlw	1
 12573  0021DC  CFE8 F464          	movff	wreg,_API_RW+106
 12574  0021E0  0E00               	movlw	0
 12575  0021E2  CFE8 F465          	movff	wreg,_API_RW+107
 12576                           
 12577                           ;api.c: 79: API_RW[0x36] = 1;
 12578  0021E6  0E01               	movlw	1
 12579  0021E8  CFE8 F466          	movff	wreg,_API_RW+108
 12580  0021EC  0E00               	movlw	0
 12581  0021EE  CFE8 F467          	movff	wreg,_API_RW+109
 12582                           
 12583                           ;api.c: 80: API_RW[0x37] = 1;
 12584  0021F2  0E01               	movlw	1
 12585  0021F4  CFE8 F468          	movff	wreg,_API_RW+110
 12586  0021F8  0E00               	movlw	0
 12587  0021FA  CFE8 F469          	movff	wreg,_API_RW+111
 12588                           
 12589                           ;api.c: 81: API_RW[0x38] = 1;
 12590  0021FE  0E01               	movlw	1
 12591  002200  CFE8 F46A          	movff	wreg,_API_RW+112
 12592  002204  0E00               	movlw	0
 12593  002206  CFE8 F46B          	movff	wreg,_API_RW+113
 12594                           
 12595                           ;api.c: 82: API_RW[0x39] = 1;
 12596  00220A  0E01               	movlw	1
 12597  00220C  CFE8 F46C          	movff	wreg,_API_RW+114
 12598  002210  0E00               	movlw	0
 12599  002212  CFE8 F46D          	movff	wreg,_API_RW+115
 12600                           
 12601                           ;api.c: 83: API_RW[0x3A] = 1;
 12602  002216  0E01               	movlw	1
 12603  002218  CFE8 F46E          	movff	wreg,_API_RW+116
 12604  00221C  0E00               	movlw	0
 12605  00221E  CFE8 F46F          	movff	wreg,_API_RW+117
 12606                           
 12607                           ;api.c: 84: API_RW[0x3B] = 1;
 12608  002222  0E01               	movlw	1
 12609  002224  CFE8 F470          	movff	wreg,_API_RW+118
 12610  002228  0E00               	movlw	0
 12611  00222A  CFE8 F471          	movff	wreg,_API_RW+119
 12612                           
 12613                           ;api.c: 85: API_RW[0x3C] = 1;
 12614  00222E  0E01               	movlw	1
 12615  002230  CFE8 F472          	movff	wreg,_API_RW+120
 12616  002234  0E00               	movlw	0
 12617  002236  CFE8 F473          	movff	wreg,_API_RW+121
 12618                           
 12619                           ;api.c: 86: API_RW[0x3D] = 0;
 12620  00223A  0E00               	movlw	0
 12621  00223C  CFE8 F474          	movff	wreg,_API_RW+122
 12622  002240  0E00               	movlw	0
 12623  002242  CFE8 F475          	movff	wreg,_API_RW+123
 12624                           
 12625                           ;api.c: 87: API_RW[0x3E] = 0;
 12626  002246  0E00               	movlw	0
 12627  002248  CFE8 F476          	movff	wreg,_API_RW+124
 12628  00224C  0E00               	movlw	0
 12629  00224E  CFE8 F477          	movff	wreg,_API_RW+125
 12630                           
 12631                           ;api.c: 88: API_RW[0x3F] = 0;
 12632  002252  0E00               	movlw	0
 12633  002254  CFE8 F478          	movff	wreg,_API_RW+126
 12634  002258  0E00               	movlw	0
 12635  00225A  CFE8 F479          	movff	wreg,_API_RW+127
 12636                           
 12637                           ;api.c: 89: API_RW[0x40] = 1;
 12638  00225E  0E01               	movlw	1
 12639  002260  CFE8 F47A          	movff	wreg,_API_RW+128
 12640  002264  0E00               	movlw	0
 12641  002266  CFE8 F47B          	movff	wreg,_API_RW+129
 12642                           
 12643                           ;api.c: 90: API_RW[0x41] = 1;
 12644  00226A  0E01               	movlw	1
 12645  00226C  CFE8 F47C          	movff	wreg,_API_RW+130
 12646  002270  0E00               	movlw	0
 12647  002272  CFE8 F47D          	movff	wreg,_API_RW+131
 12648                           
 12649                           ;api.c: 91: API_RW[0x42] = 1;
 12650  002276  0E01               	movlw	1
 12651  002278  CFE8 F47E          	movff	wreg,_API_RW+132
 12652  00227C  0E00               	movlw	0
 12653  00227E  CFE8 F47F          	movff	wreg,_API_RW+133
 12654                           
 12655                           ;api.c: 92: API_RW[0x43] = 1;
 12656  002282  0E01               	movlw	1
 12657  002284  CFE8 F480          	movff	wreg,_API_RW+134
 12658  002288  0E00               	movlw	0
 12659  00228A  CFE8 F481          	movff	wreg,_API_RW+135
 12660                           
 12661                           ;api.c: 93: API_RW[0x44] = 1;
 12662  00228E  0E01               	movlw	1
 12663  002290  CFE8 F482          	movff	wreg,_API_RW+136
 12664  002294  0E00               	movlw	0
 12665  002296  CFE8 F483          	movff	wreg,_API_RW+137
 12666                           
 12667                           ;api.c: 94: API_RW[0x45] = 1;
 12668  00229A  0E01               	movlw	1
 12669  00229C  CFE8 F484          	movff	wreg,_API_RW+138
 12670  0022A0  0E00               	movlw	0
 12671  0022A2  CFE8 F485          	movff	wreg,_API_RW+139
 12672                           
 12673                           ;api.c: 100: API[0x10] = 0xFF;
 12674  0022A6  0EFF               	movlw	255
 12675  0022A8  CFE8 F21C          	movff	wreg,_API+32
 12676  0022AC  0E00               	movlw	0
 12677  0022AE  CFE8 F21D          	movff	wreg,_API+33
 12678                           
 12679                           ;api.c: 101: API[0x12] = 10000;
 12680  0022B2  0E10               	movlw	16
 12681  0022B4  CFE8 F220          	movff	wreg,_API+36
 12682  0022B8  0E27               	movlw	39
 12683  0022BA  CFE8 F221          	movff	wreg,_API+37
 12684                           
 12685                           ;api.c: 102: API[0x13] = 800;
 12686  0022BE  0E20               	movlw	32
 12687  0022C0  CFE8 F222          	movff	wreg,_API+38
 12688  0022C4  0E03               	movlw	3
 12689  0022C6  CFE8 F223          	movff	wreg,_API+39
 12690                           
 12691                           ;api.c: 103: API[0x14] = 5000;
 12692  0022CA  0E88               	movlw	136
 12693  0022CC  CFE8 F224          	movff	wreg,_API+40
 12694  0022D0  0E13               	movlw	19
 12695  0022D2  CFE8 F225          	movff	wreg,_API+41
 12696                           
 12697                           ;api.c: 104: API[0x15] = 20;
 12698  0022D6  0E14               	movlw	20
 12699  0022D8  CFE8 F226          	movff	wreg,_API+42
 12700  0022DC  0E00               	movlw	0
 12701  0022DE  CFE8 F227          	movff	wreg,_API+43
 12702                           
 12703                           ;api.c: 105: API[0x16] = 20;
 12704  0022E2  0E14               	movlw	20
 12705  0022E4  CFE8 F228          	movff	wreg,_API+44
 12706  0022E8  0E00               	movlw	0
 12707  0022EA  CFE8 F229          	movff	wreg,_API+45
 12708                           
 12709                           ;api.c: 106: API[0x17] = 107;
 12710  0022EE  0E6B               	movlw	107
 12711  0022F0  CFE8 F22A          	movff	wreg,_API+46
 12712  0022F4  0E00               	movlw	0
 12713  0022F6  CFE8 F22B          	movff	wreg,_API+47
 12714                           
 12715                           ;api.c: 107: API[0x18] = 107;
 12716  0022FA  0E6B               	movlw	107
 12717  0022FC  CFE8 F22C          	movff	wreg,_API+48
 12718  002300  0E00               	movlw	0
 12719  002302  CFE8 F22D          	movff	wreg,_API+49
 12720                           
 12721                           ;api.c: 108: API[0x19] = 80;
 12722  002306  0E50               	movlw	80
 12723  002308  CFE8 F22E          	movff	wreg,_API+50
 12724  00230C  0E00               	movlw	0
 12725  00230E  CFE8 F22F          	movff	wreg,_API+51
 12726                           
 12727                           ;api.c: 109: API[0x1A] = 45;
 12728  002312  0E2D               	movlw	45
 12729  002314  CFE8 F230          	movff	wreg,_API+52
 12730  002318  0E00               	movlw	0
 12731  00231A  CFE8 F231          	movff	wreg,_API+53
 12732                           
 12733                           ;api.c: 110: API[0x1B] = 20;
 12734  00231E  0E14               	movlw	20
 12735  002320  CFE8 F232          	movff	wreg,_API+54
 12736  002324  0E00               	movlw	0
 12737  002326  CFE8 F233          	movff	wreg,_API+55
 12738                           
 12739                           ;api.c: 111: API[0x1C] = 0;
 12740  00232A  0E00               	movlw	0
 12741  00232C  CFE8 F234          	movff	wreg,_API+56
 12742  002330  0E00               	movlw	0
 12743  002332  CFE8 F235          	movff	wreg,_API+57
 12744                           
 12745                           ;api.c: 112: API[0x1D] = 0;
 12746  002336  0E00               	movlw	0
 12747  002338  CFE8 F236          	movff	wreg,_API+58
 12748  00233C  0E00               	movlw	0
 12749  00233E  CFE8 F237          	movff	wreg,_API+59
 12750                           
 12751                           ;api.c: 113: API[0x1E] = 0;
 12752  002342  0E00               	movlw	0
 12753  002344  CFE8 F238          	movff	wreg,_API+60
 12754  002348  0E00               	movlw	0
 12755  00234A  CFE8 F239          	movff	wreg,_API+61
 12756                           
 12757                           ;api.c: 114: API[0x1F] = 0;
 12758  00234E  0E00               	movlw	0
 12759  002350  CFE8 F23A          	movff	wreg,_API+62
 12760  002354  0E00               	movlw	0
 12761  002356  CFE8 F23B          	movff	wreg,_API+63
 12762                           
 12763                           ;api.c: 115: API[0x20] = 0;
 12764  00235A  0E00               	movlw	0
 12765  00235C  CFE8 F23C          	movff	wreg,_API+64
 12766  002360  0E00               	movlw	0
 12767  002362  CFE8 F23D          	movff	wreg,_API+65
 12768                           
 12769                           ;api.c: 116: API[0x21] = 0;
 12770  002366  0E00               	movlw	0
 12771  002368  CFE8 F23E          	movff	wreg,_API+66
 12772  00236C  0E00               	movlw	0
 12773  00236E  CFE8 F23F          	movff	wreg,_API+67
 12774                           
 12775                           ;api.c: 117: API[0x22] = 0;
 12776  002372  0E00               	movlw	0
 12777  002374  CFE8 F240          	movff	wreg,_API+68
 12778  002378  0E00               	movlw	0
 12779  00237A  CFE8 F241          	movff	wreg,_API+69
 12780                           
 12781                           ;api.c: 118: API[0x23] = 0;
 12782  00237E  0E00               	movlw	0
 12783  002380  CFE8 F242          	movff	wreg,_API+70
 12784  002384  0E00               	movlw	0
 12785  002386  CFE8 F243          	movff	wreg,_API+71
 12786                           
 12787                           ;api.c: 119: API[0x24] = 0;
 12788  00238A  0E00               	movlw	0
 12789  00238C  CFE8 F244          	movff	wreg,_API+72
 12790  002390  0E00               	movlw	0
 12791  002392  CFE8 F245          	movff	wreg,_API+73
 12792                           
 12793                           ;api.c: 120: API[0x25] = 0;
 12794  002396  0E00               	movlw	0
 12795  002398  CFE8 F246          	movff	wreg,_API+74
 12796  00239C  0E00               	movlw	0
 12797  00239E  CFE8 F247          	movff	wreg,_API+75
 12798                           
 12799                           ;api.c: 121: API[0x26] = 0;
 12800  0023A2  0E00               	movlw	0
 12801  0023A4  CFE8 F248          	movff	wreg,_API+76
 12802  0023A8  0E00               	movlw	0
 12803  0023AA  CFE8 F249          	movff	wreg,_API+77
 12804                           
 12805                           ;api.c: 122: API[0x27] = 9;
 12806  0023AE  0E09               	movlw	9
 12807  0023B0  CFE8 F24A          	movff	wreg,_API+78
 12808  0023B4  0E00               	movlw	0
 12809  0023B6  CFE8 F24B          	movff	wreg,_API+79
 12810                           
 12811                           ;api.c: 123: API[0x28] = 9;
 12812  0023BA  0E09               	movlw	9
 12813  0023BC  CFE8 F24C          	movff	wreg,_API+80
 12814  0023C0  0E00               	movlw	0
 12815  0023C2  CFE8 F24D          	movff	wreg,_API+81
 12816                           
 12817                           ;api.c: 124: API[0x29] = 0;
 12818  0023C6  0E00               	movlw	0
 12819  0023C8  CFE8 F24E          	movff	wreg,_API+82
 12820  0023CC  0E00               	movlw	0
 12821  0023CE  CFE8 F24F          	movff	wreg,_API+83
 12822                           
 12823                           ;api.c: 125: API[0x2A] = 0;
 12824  0023D2  0E00               	movlw	0
 12825  0023D4  CFE8 F250          	movff	wreg,_API+84
 12826  0023D8  0E00               	movlw	0
 12827  0023DA  CFE8 F251          	movff	wreg,_API+85
 12828                           
 12829                           ;api.c: 126: API[0x2B] = 0;
 12830  0023DE  0E00               	movlw	0
 12831  0023E0  CFE8 F252          	movff	wreg,_API+86
 12832  0023E4  0E00               	movlw	0
 12833  0023E6  CFE8 F253          	movff	wreg,_API+87
 12834                           
 12835                           ;api.c: 127: API[0x2C] = 0;
 12836  0023EA  0E00               	movlw	0
 12837  0023EC  CFE8 F254          	movff	wreg,_API+88
 12838  0023F0  0E00               	movlw	0
 12839  0023F2  CFE8 F255          	movff	wreg,_API+89
 12840                           
 12841                           ;api.c: 128: API[0x2D] = 0;
 12842  0023F6  0E00               	movlw	0
 12843  0023F8  CFE8 F256          	movff	wreg,_API+90
 12844  0023FC  0E00               	movlw	0
 12845  0023FE  CFE8 F257          	movff	wreg,_API+91
 12846                           
 12847                           ;api.c: 129: API[0x2E] = 80;
 12848  002402  0E50               	movlw	80
 12849  002404  CFE8 F258          	movff	wreg,_API+92
 12850  002408  0E00               	movlw	0
 12851  00240A  CFE8 F259          	movff	wreg,_API+93
 12852                           
 12853                           ;api.c: 130: API[0x2F] = 120;
 12854  00240E  0E78               	movlw	120
 12855  002410  CFE8 F25A          	movff	wreg,_API+94
 12856  002414  0E00               	movlw	0
 12857  002416  CFE8 F25B          	movff	wreg,_API+95
 12858                           
 12859                           ;api.c: 131: API[0x30] = 0;
 12860  00241A  0E00               	movlw	0
 12861  00241C  CFE8 F25C          	movff	wreg,_API+96
 12862  002420  0E00               	movlw	0
 12863  002422  CFE8 F25D          	movff	wreg,_API+97
 12864                           
 12865                           ;api.c: 132: API[0x31] = 80;
 12866  002426  0E50               	movlw	80
 12867  002428  CFE8 F25E          	movff	wreg,_API+98
 12868  00242C  0E00               	movlw	0
 12869  00242E  CFE8 F25F          	movff	wreg,_API+99
 12870                           
 12871                           ;api.c: 133: API[0x32] = 0;
 12872  002432  0E00               	movlw	0
 12873  002434  CFE8 F260          	movff	wreg,_API+100
 12874  002438  0E00               	movlw	0
 12875  00243A  CFE8 F261          	movff	wreg,_API+101
 12876                           
 12877                           ;api.c: 134: API[0x33] = 0;
 12878  00243E  0E00               	movlw	0
 12879  002440  CFE8 F262          	movff	wreg,_API+102
 12880  002444  0E00               	movlw	0
 12881  002446  CFE8 F263          	movff	wreg,_API+103
 12882                           
 12883                           ;api.c: 135: API[0x34] = 120;
 12884  00244A  0E78               	movlw	120
 12885  00244C  CFE8 F264          	movff	wreg,_API+104
 12886  002450  0E00               	movlw	0
 12887  002452  CFE8 F265          	movff	wreg,_API+105
 12888                           
 12889                           ;api.c: 136: API[0x35] = 100;
 12890  002456  0E64               	movlw	100
 12891  002458  CFE8 F266          	movff	wreg,_API+106
 12892  00245C  0E00               	movlw	0
 12893  00245E  CFE8 F267          	movff	wreg,_API+107
 12894                           
 12895                           ;api.c: 137: API[0x36] = 100;
 12896  002462  0E64               	movlw	100
 12897  002464  CFE8 F268          	movff	wreg,_API+108
 12898  002468  0E00               	movlw	0
 12899  00246A  CFE8 F269          	movff	wreg,_API+109
 12900                           
 12901                           ;api.c: 138: API[0x37] = 100;
 12902  00246E  0E64               	movlw	100
 12903  002470  CFE8 F26A          	movff	wreg,_API+110
 12904  002474  0E00               	movlw	0
 12905  002476  CFE8 F26B          	movff	wreg,_API+111
 12906                           
 12907                           ;api.c: 139: API[0x38] = 100;
 12908  00247A  0E64               	movlw	100
 12909  00247C  CFE8 F26C          	movff	wreg,_API+112
 12910  002480  0E00               	movlw	0
 12911  002482  CFE8 F26D          	movff	wreg,_API+113
 12912                           
 12913                           ;api.c: 140: API[0x39] = 100;
 12914  002486  0E64               	movlw	100
 12915  002488  CFE8 F26E          	movff	wreg,_API+114
 12916  00248C  0E00               	movlw	0
 12917  00248E  CFE8 F26F          	movff	wreg,_API+115
 12918                           
 12919                           ;api.c: 141: API[0x3A] = 100;
 12920  002492  0E64               	movlw	100
 12921  002494  CFE8 F270          	movff	wreg,_API+116
 12922  002498  0E00               	movlw	0
 12923  00249A  CFE8 F271          	movff	wreg,_API+117
 12924                           
 12925                           ;api.c: 142: API[0x3B] = 100;
 12926  00249E  0E64               	movlw	100
 12927  0024A0  CFE8 F272          	movff	wreg,_API+118
 12928  0024A4  0E00               	movlw	0
 12929  0024A6  CFE8 F273          	movff	wreg,_API+119
 12930                           
 12931                           ;api.c: 143: API[0x3C] = 100;
 12932  0024AA  0E64               	movlw	100
 12933  0024AC  CFE8 F274          	movff	wreg,_API+120
 12934  0024B0  0E00               	movlw	0
 12935  0024B2  CFE8 F275          	movff	wreg,_API+121
 12936                           
 12937                           ;api.c: 144: API[0x3D] = 0;
 12938  0024B6  0E00               	movlw	0
 12939  0024B8  CFE8 F276          	movff	wreg,_API+122
 12940  0024BC  0E00               	movlw	0
 12941  0024BE  CFE8 F277          	movff	wreg,_API+123
 12942                           
 12943                           ;api.c: 145: API[0x3E] = 0;
 12944  0024C2  0E00               	movlw	0
 12945  0024C4  CFE8 F278          	movff	wreg,_API+124
 12946  0024C8  0E00               	movlw	0
 12947  0024CA  CFE8 F279          	movff	wreg,_API+125
 12948                           
 12949                           ;api.c: 146: API[0x3F] = 0;
 12950  0024CE  0E00               	movlw	0
 12951  0024D0  CFE8 F27A          	movff	wreg,_API+126
 12952  0024D4  0E00               	movlw	0
 12953  0024D6  CFE8 F27B          	movff	wreg,_API+127
 12954                           
 12955                           ;api.c: 147: API[0x40] = 0;
 12956  0024DA  0E00               	movlw	0
 12957  0024DC  CFE8 F27C          	movff	wreg,_API+128
 12958  0024E0  0E00               	movlw	0
 12959  0024E2  CFE8 F27D          	movff	wreg,_API+129
 12960                           
 12961                           ;api.c: 148: API[0x41] = 0;
 12962  0024E6  0E00               	movlw	0
 12963  0024E8  CFE8 F27E          	movff	wreg,_API+130
 12964  0024EC  0E00               	movlw	0
 12965  0024EE  CFE8 F27F          	movff	wreg,_API+131
 12966                           
 12967                           ;api.c: 149: API[0x42] = 0;
 12968  0024F2  0E00               	movlw	0
 12969  0024F4  CFE8 F280          	movff	wreg,_API+132
 12970  0024F8  0E00               	movlw	0
 12971  0024FA  CFE8 F281          	movff	wreg,_API+133
 12972                           
 12973                           ;api.c: 150: API[0x43] = 0;
 12974  0024FE  0E00               	movlw	0
 12975  002500  CFE8 F282          	movff	wreg,_API+134
 12976  002504  0E00               	movlw	0
 12977  002506  CFE8 F283          	movff	wreg,_API+135
 12978                           
 12979                           ;api.c: 151: API[0x44] = 511;
 12980  00250A  0EFF               	movlw	255
 12981  00250C  CFE8 F284          	movff	wreg,_API+136
 12982  002510  0E01               	movlw	1
 12983  002512  CFE8 F285          	movff	wreg,_API+137
 12984                           
 12985                           ;api.c: 152: API[0x45] = 1;
 12986  002516  0E01               	movlw	1
 12987  002518  CFE8 F286          	movff	wreg,_API+138
 12988  00251C  0E00               	movlw	0
 12989  00251E  CFE8 F287          	movff	wreg,_API+139
 12990                           
 12991                           ; BSR set to: 0
 12992  002522  0012               	return		;funcret
 12993  002524                     __end_of_APIxInitialize:
 12994                           	opt stack 0
 12995                           tblptru	equ	0xFF8
 12996                           tblptrh	equ	0xFF7
 12997                           tblptrl	equ	0xFF6
 12998                           tablat	equ	0xFF5
 12999                           prodh	equ	0xFF4
 13000                           prodl	equ	0xFF3
 13001                           intcon	equ	0xFF2
 13002                           intcon2	equ	0xFF1
 13003                           postinc0	equ	0xFEE
 13004                           wreg	equ	0xFE8
 13005                           postdec1	equ	0xFE5
 13006                           fsr1h	equ	0xFE2
 13007                           fsr1l	equ	0xFE1
 13008                           indf2	equ	0xFDF
 13009                           postinc2	equ	0xFDE
 13010                           postdec2	equ	0xFDD
 13011                           fsr2h	equ	0xFDA
 13012                           fsr2l	equ	0xFD9
 13013                           status	equ	0xFD8
 13014                           
 13015 ;; *************** function _tc_low *****************
 13016 ;; Defined at:
 13017 ;;		line 146 in file "../Main.c"
 13018 ;; Parameters:    Size  Location     Type
 13019 ;;		None
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;		None
 13022 ;; Return value:  Size  Location     Type
 13023 ;;                  1    wreg      void 
 13024 ;; Registers used:
 13025 ;;		None
 13026 ;; Tracked objects:
 13027 ;;		On entry : 0/0
 13028 ;;		On exit  : 0/0
 13029 ;;		Unchanged: 0/0
 13030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13031 ;;      Params:         0       0       0       0       0       0       0       0       0
 13032 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13033 ;;      Temps:         17       0       0       0       0       0       0       0       0
 13034 ;;      Totals:        17       0       0       0       0       0       0       0       0
 13035 ;;Total ram usage:       17 bytes
 13036 ;; Hardware stack levels used:    1
 13037 ;; Hardware stack levels required when called:    2
 13038 ;; This function calls:
 13039 ;;		Nothing
 13040 ;; This function is called by:
 13041 ;;		Interrupt level 1
 13042 ;; This function uses a non-reentrant model
 13043 ;;
 13044                           
 13045                           	psect	intcodelo
 13046  000018                     __pintcodelo:
 13047                           	opt stack 0
 13048  000018                     _tc_low:
 13049                           	opt stack 20
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;incstack = 0
 13053  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13054  00001A  CFD8 F00F          	movff	status,??_tc_low
 13055  00001E  CFE8 F010          	movff	wreg,??_tc_low+1
 13056  000022  CFE0 F011          	movff	bsr,??_tc_low+2
 13057  000026  CFFA F012          	movff	pclath,??_tc_low+3
 13058  00002A  CFFB F013          	movff	pclatu,??_tc_low+4
 13059  00002E  CFE9 F014          	movff	fsr0l,??_tc_low+5
 13060  000032  CFEA F015          	movff	fsr0h,??_tc_low+6
 13061  000036  CFE1 F016          	movff	fsr1l,??_tc_low+7
 13062  00003A  CFE2 F017          	movff	fsr1h,??_tc_low+8
 13063  00003E  CFD9 F018          	movff	fsr2l,??_tc_low+9
 13064  000042  CFDA F019          	movff	fsr2h,??_tc_low+10
 13065  000046  CFF3 F01A          	movff	prodl,??_tc_low+11
 13066  00004A  CFF4 F01B          	movff	prodh,??_tc_low+12
 13067  00004E  CFF6 F01C          	movff	tblptrl,??_tc_low+13
 13068  000052  CFF7 F01D          	movff	tblptrh,??_tc_low+14
 13069  000056  CFF8 F01E          	movff	tblptru,??_tc_low+15
 13070  00005A  CFF5 F01F          	movff	tablat,??_tc_low+16
 13071  00005E  C01F  FFF5         	movff	??_tc_low+16,tablat
 13072  000062  C01E  FFF8         	movff	??_tc_low+15,tblptru
 13073  000066  C01D  FFF7         	movff	??_tc_low+14,tblptrh
 13074  00006A  C01C  FFF6         	movff	??_tc_low+13,tblptrl
 13075  00006E  C01B  FFF4         	movff	??_tc_low+12,prodh
 13076  000072  C01A  FFF3         	movff	??_tc_low+11,prodl
 13077  000076  C019  FFDA         	movff	??_tc_low+10,fsr2h
 13078  00007A  C018  FFD9         	movff	??_tc_low+9,fsr2l
 13079  00007E  C017  FFE2         	movff	??_tc_low+8,fsr1h
 13080  000082  C016  FFE1         	movff	??_tc_low+7,fsr1l
 13081  000086  C015  FFEA         	movff	??_tc_low+6,fsr0h
 13082  00008A  C014  FFE9         	movff	??_tc_low+5,fsr0l
 13083  00008E  C013  FFFB         	movff	??_tc_low+4,pclatu
 13084  000092  C012  FFFA         	movff	??_tc_low+3,pclath
 13085  000096  C011  FFE0         	movff	??_tc_low+2,bsr
 13086  00009A  C010  FFE8         	movff	??_tc_low+1,wreg
 13087  00009E  C00F  FFD8         	movff	??_tc_low,status
 13088  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13089  0000A4  0010               	retfie	
 13090  0000A6                     __end_of_tc_low:
 13091                           	opt stack 0
 13092                           pclatu	equ	0xFFB
 13093                           pclath	equ	0xFFA
 13094                           tblptru	equ	0xFF8
 13095                           tblptrh	equ	0xFF7
 13096                           tblptrl	equ	0xFF6
 13097                           tablat	equ	0xFF5
 13098                           prodh	equ	0xFF4
 13099                           prodl	equ	0xFF3
 13100                           intcon	equ	0xFF2
 13101                           intcon2	equ	0xFF1
 13102                           postinc0	equ	0xFEE
 13103                           fsr0h	equ	0xFEA
 13104                           fsr0l	equ	0xFE9
 13105                           wreg	equ	0xFE8
 13106                           postdec1	equ	0xFE5
 13107                           fsr1h	equ	0xFE2
 13108                           fsr1l	equ	0xFE1
 13109                           bsr	equ	0xFE0
 13110                           indf2	equ	0xFDF
 13111                           postinc2	equ	0xFDE
 13112                           postdec2	equ	0xFDD
 13113                           fsr2h	equ	0xFDA
 13114                           fsr2l	equ	0xFD9
 13115                           status	equ	0xFD8
 13116                           
 13117 ;; *************** function _tc_high *****************
 13118 ;; Defined at:
 13119 ;;		line 150 in file "../Main.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;		None
 13122 ;; Auto vars:     Size  Location     Type
 13123 ;;		None
 13124 ;; Return value:  Size  Location     Type
 13125 ;;                  1    wreg      void 
 13126 ;; Registers used:
 13127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13128 ;; Tracked objects:
 13129 ;;		On entry : 0/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13133 ;;      Params:         0       0       0       0       0       0       0       0       0
 13134 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13135 ;;      Temps:         14       0       0       0       0       0       0       0       0
 13136 ;;      Totals:        14       0       0       0       0       0       0       0       0
 13137 ;;Total ram usage:       14 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:    1
 13140 ;; This function calls:
 13141 ;;		_EUSART1_Receive_ISR
 13142 ;;		_EUSART1_Transmit_ISR
 13143 ;; This function is called by:
 13144 ;;		Interrupt level 2
 13145 ;; This function uses a non-reentrant model
 13146 ;;
 13147                           
 13148                           	psect	intcode
 13149  000008                     __pintcode:
 13150                           	opt stack 0
 13151  000008                     _tc_high:
 13152                           	opt stack 20
 13153                           
 13154                           ;incstack = 0
 13155  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13156  00000A  CFFA F001          	movff	pclath,??_tc_high
 13157  00000E  CFFB F002          	movff	pclatu,??_tc_high+1
 13158  000012  ED58  F01B         	call	int_func,f	;refresh shadow registers
 13159                           pclatu	equ	0xFFB
 13160                           pclath	equ	0xFFA
 13161                           tblptru	equ	0xFF8
 13162                           tblptrh	equ	0xFF7
 13163                           tblptrl	equ	0xFF6
 13164                           tablat	equ	0xFF5
 13165                           prodh	equ	0xFF4
 13166                           prodl	equ	0xFF3
 13167                           intcon	equ	0xFF2
 13168                           intcon2	equ	0xFF1
 13169                           postinc0	equ	0xFEE
 13170                           fsr0h	equ	0xFEA
 13171                           fsr0l	equ	0xFE9
 13172                           wreg	equ	0xFE8
 13173                           postdec1	equ	0xFE5
 13174                           fsr1h	equ	0xFE2
 13175                           fsr1l	equ	0xFE1
 13176                           bsr	equ	0xFE0
 13177                           indf2	equ	0xFDF
 13178                           postinc2	equ	0xFDE
 13179                           postdec2	equ	0xFDD
 13180                           fsr2h	equ	0xFDA
 13181                           fsr2l	equ	0xFD9
 13182                           status	equ	0xFD8
 13183                           
 13184                           	psect	intcode_body
 13185  0036B0                     __pintcode_body:
 13186                           	opt stack 20
 13187  0036B0                     int_func:
 13188                           	opt stack 20
 13189  0036B0  0006               	pop		; remove dummy address from shadow register refresh
 13190  0036B2  CFE9 F003          	movff	fsr0l,??_tc_high+2
 13191  0036B6  CFEA F004          	movff	fsr0h,??_tc_high+3
 13192  0036BA  CFE1 F005          	movff	fsr1l,??_tc_high+4
 13193  0036BE  CFE2 F006          	movff	fsr1h,??_tc_high+5
 13194  0036C2  CFD9 F007          	movff	fsr2l,??_tc_high+6
 13195  0036C6  CFDA F008          	movff	fsr2h,??_tc_high+7
 13196  0036CA  CFF3 F009          	movff	prodl,??_tc_high+8
 13197  0036CE  CFF4 F00A          	movff	prodh,??_tc_high+9
 13198  0036D2  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 13199  0036D6  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 13200  0036DA  CFF8 F00D          	movff	tblptru,??_tc_high+12
 13201  0036DE  CFF5 F00E          	movff	tablat,??_tc_high+13
 13202                           
 13203                           ;Main.c: 152: if (INTCONbits.TMR0IF)
 13204  0036E2  A4F2               	btfss	intcon,2,c	;volatile
 13205  0036E4  D019               	goto	i2l6648
 13206                           
 13207                           ;Main.c: 153: {
 13208                           ;Main.c: 154: if(Led1_Counter <= 100)
 13209  0036E6  5024               	movf	_Led1_Counter+1,w,c
 13210  0036E8  E106               	bnz	i2l92
 13211  0036EA  0E65               	movlw	101
 13212  0036EC  5C23               	subwf	_Led1_Counter,w,c
 13213  0036EE  B0D8               	btfsc	status,0,c
 13214  0036F0  D002               	goto	i2l92
 13215                           
 13216                           ;Main.c: 155: {
 13217                           ;Main.c: 156: PORTAbits.RA4 = 1;
 13218  0036F2  8880               	bsf	3968,4,c	;volatile
 13219                           
 13220                           ;Main.c: 157: }
 13221  0036F4  D001               	goto	i2l6638
 13222  0036F6                     i2l92:
 13223                           
 13224                           ;Main.c: 158: else
 13225                           ;Main.c: 159: {
 13226                           ;Main.c: 160: PORTAbits.RA4 = 0;
 13227  0036F6  9880               	bcf	3968,4,c	;volatile
 13228  0036F8                     i2l6638:
 13229                           
 13230                           ;Main.c: 161: }
 13231                           ;Main.c: 162: if(Led1_Counter >= 700)
 13232  0036F8  0EBC               	movlw	188
 13233  0036FA  5C23               	subwf	_Led1_Counter,w,c
 13234  0036FC  0E02               	movlw	2
 13235  0036FE  5824               	subwfb	_Led1_Counter+1,w,c
 13236  003700  A0D8               	btfss	status,0,c
 13237  003702  D004               	goto	i2l6642
 13238                           
 13239                           ;Main.c: 163: {
 13240                           ;Main.c: 164: Led1_Counter = 0;
 13241  003704  0E00               	movlw	0
 13242  003706  6E24               	movwf	_Led1_Counter+1,c
 13243  003708  0E00               	movlw	0
 13244  00370A  6E23               	movwf	_Led1_Counter,c
 13245  00370C                     i2l6642:
 13246                           
 13247                           ;Main.c: 165: }
 13248                           ;Main.c: 166: Led1_Counter++;
 13249  00370C  4A23               	infsnz	_Led1_Counter,f,c
 13250  00370E  2A24               	incf	_Led1_Counter+1,f,c
 13251                           
 13252                           ;Main.c: 167: Update_State_Machine = 1;
 13253  003710  0E01               	movlw	1
 13254  003712  0100               	movlb	0	; () banked
 13255  003714  6FAE               	movwf	_Update_State_Machine& (0+255),b
 13256                           
 13257                           ; BSR set to: 0
 13258                           ;Main.c: 168: INTCONbits.TMR0IF = 0;
 13259  003716  94F2               	bcf	intcon,2,c	;volatile
 13260  003718                     i2l6648:
 13261                           
 13262                           ;Main.c: 169: }
 13263                           ;Main.c: 171: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 13264  003718  BA9D               	btfsc	3997,5,c	;volatile
 13265  00371A  AA9E               	btfss	3998,5,c	;volatile
 13266  00371C  D002               	goto	i2l6654
 13267                           
 13268                           ;Main.c: 172: EUSART1_Receive_ISR();
 13269  00371E  EC10  F01E         	call	_EUSART1_Receive_ISR	;wreg free
 13270  003722                     i2l6654:
 13271                           
 13272                           ;Main.c: 173: }
 13273                           ;Main.c: 174: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 13274  003722  B89D               	btfsc	3997,4,c	;volatile
 13275  003724  A89E               	btfss	3998,4,c	;volatile
 13276  003726  D002               	goto	i2l97
 13277                           
 13278                           ;Main.c: 175: EUSART1_Transmit_ISR();
 13279  003728  ECE3  F01D         	call	_EUSART1_Transmit_ISR	;wreg free
 13280  00372C                     i2l97:
 13281  00372C  C00E  FFF5         	movff	??_tc_high+13,tablat
 13282  003730  C00D  FFF8         	movff	??_tc_high+12,tblptru
 13283  003734  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 13284  003738  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 13285  00373C  C00A  FFF4         	movff	??_tc_high+9,prodh
 13286  003740  C009  FFF3         	movff	??_tc_high+8,prodl
 13287  003744  C008  FFDA         	movff	??_tc_high+7,fsr2h
 13288  003748  C007  FFD9         	movff	??_tc_high+6,fsr2l
 13289  00374C  C006  FFE2         	movff	??_tc_high+5,fsr1h
 13290  003750  C005  FFE1         	movff	??_tc_high+4,fsr1l
 13291  003754  C004  FFEA         	movff	??_tc_high+3,fsr0h
 13292  003758  C003  FFE9         	movff	??_tc_high+2,fsr0l
 13293  00375C  C002  FFFB         	movff	??_tc_high+1,pclatu
 13294  003760  C001  FFFA         	movff	??_tc_high,pclath
 13295  003764  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13296  003766  0011               	retfie		f
 13297  003768                     __end_of_tc_high:
 13298                           	opt stack 0
 13299                           pclatu	equ	0xFFB
 13300                           pclath	equ	0xFFA
 13301                           tblptru	equ	0xFF8
 13302                           tblptrh	equ	0xFF7
 13303                           tblptrl	equ	0xFF6
 13304                           tablat	equ	0xFF5
 13305                           prodh	equ	0xFF4
 13306                           prodl	equ	0xFF3
 13307                           intcon	equ	0xFF2
 13308                           intcon2	equ	0xFF1
 13309                           postinc0	equ	0xFEE
 13310                           fsr0h	equ	0xFEA
 13311                           fsr0l	equ	0xFE9
 13312                           wreg	equ	0xFE8
 13313                           postdec1	equ	0xFE5
 13314                           fsr1h	equ	0xFE2
 13315                           fsr1l	equ	0xFE1
 13316                           bsr	equ	0xFE0
 13317                           indf2	equ	0xFDF
 13318                           postinc2	equ	0xFDE
 13319                           postdec2	equ	0xFDD
 13320                           fsr2h	equ	0xFDA
 13321                           fsr2l	equ	0xFD9
 13322                           status	equ	0xFD8
 13323                           
 13324 ;; *************** function _EUSART1_Transmit_ISR *****************
 13325 ;; Defined at:
 13326 ;;		line 183 in file "../eusart1.c"
 13327 ;; Parameters:    Size  Location     Type
 13328 ;;		None
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;		None
 13331 ;; Return value:  Size  Location     Type
 13332 ;;                  1    wreg      void 
 13333 ;; Registers used:
 13334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13335 ;; Tracked objects:
 13336 ;;		On entry : 0/0
 13337 ;;		On exit  : 0/0
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13340 ;;      Params:         0       0       0       0       0       0       0       0       0
 13341 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13342 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13343 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13344 ;;Total ram usage:        0 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; This function calls:
 13347 ;;		Nothing
 13348 ;; This function is called by:
 13349 ;;		_tc_high
 13350 ;; This function uses a non-reentrant model
 13351 ;;
 13352                           
 13353                           	psect	text34
 13354  003BC6                     __ptext34:
 13355                           	opt stack 0
 13356  003BC6                     _EUSART1_Transmit_ISR:
 13357                           	opt stack 20
 13358                           
 13359                           ;eusart1.c: 186: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 13360                           
 13361                           ;incstack = 0
 13362  003BC6  0E7E               	movlw	126
 13363  003BC8  603D               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 13364  003BCA  D012               	goto	i2l627
 13365                           
 13366                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 13367  003BCC  503F               	movf	_eusart1TxTail,w,c
 13368  003BCE  0D01               	mullw	1
 13369  003BD0  0E7E               	movlw	low _eusart1TxBuffer
 13370  003BD2  24F3               	addwf	prodl,w,c
 13371  003BD4  6ED9               	movwf	fsr2l,c
 13372  003BD6  0E01               	movlw	high _eusart1TxBuffer
 13373  003BD8  20F4               	addwfc	prodh,w,c
 13374  003BDA  6EDA               	movwf	fsr2h,c
 13375  003BDC  50DF               	movf	indf2,w,c
 13376  003BDE  6EAD               	movwf	4013,c	;volatile
 13377  003BE0  2A3F               	incf	_eusart1TxTail,f,c
 13378                           
 13379                           ;eusart1.c: 188: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 13380  003BE2  0E7D               	movlw	125
 13381  003BE4  643F               	cpfsgt	_eusart1TxTail,c
 13382  003BE6  D002               	goto	i2l6552
 13383                           
 13384                           ;eusart1.c: 189: eusart1TxTail = 0;
 13385  003BE8  0E00               	movlw	0
 13386  003BEA  6E3F               	movwf	_eusart1TxTail,c
 13387  003BEC                     i2l6552:
 13388                           
 13389                           ;eusart1.c: 190: }
 13390                           ;eusart1.c: 191: eusart1TxBufferRemaining++;
 13391  003BEC  2A3D               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 13392                           
 13393                           ;eusart1.c: 192: } else {
 13394  003BEE  0012               	return	
 13395  003BF0                     i2l627:
 13396                           
 13397                           ;eusart1.c: 193: PIE1bits.TX1IE = 0;
 13398  003BF0  989D               	bcf	3997,4,c	;volatile
 13399  003BF2  0012               	return	
 13400  003BF4                     __end_of_EUSART1_Transmit_ISR:
 13401                           	opt stack 0
 13402                           pclatu	equ	0xFFB
 13403                           pclath	equ	0xFFA
 13404                           tblptru	equ	0xFF8
 13405                           tblptrh	equ	0xFF7
 13406                           tblptrl	equ	0xFF6
 13407                           tablat	equ	0xFF5
 13408                           prodh	equ	0xFF4
 13409                           prodl	equ	0xFF3
 13410                           intcon	equ	0xFF2
 13411                           intcon2	equ	0xFF1
 13412                           postinc0	equ	0xFEE
 13413                           fsr0h	equ	0xFEA
 13414                           fsr0l	equ	0xFE9
 13415                           wreg	equ	0xFE8
 13416                           postdec1	equ	0xFE5
 13417                           fsr1h	equ	0xFE2
 13418                           fsr1l	equ	0xFE1
 13419                           bsr	equ	0xFE0
 13420                           indf2	equ	0xFDF
 13421                           postinc2	equ	0xFDE
 13422                           postdec2	equ	0xFDD
 13423                           fsr2h	equ	0xFDA
 13424                           fsr2l	equ	0xFD9
 13425                           status	equ	0xFD8
 13426                           
 13427 ;; *************** function _EUSART1_Receive_ISR *****************
 13428 ;; Defined at:
 13429 ;;		line 197 in file "../eusart1.c"
 13430 ;; Parameters:    Size  Location     Type
 13431 ;;		None
 13432 ;; Auto vars:     Size  Location     Type
 13433 ;;		None
 13434 ;; Return value:  Size  Location     Type
 13435 ;;                  1    wreg      void 
 13436 ;; Registers used:
 13437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13438 ;; Tracked objects:
 13439 ;;		On entry : 0/0
 13440 ;;		On exit  : 0/0
 13441 ;;		Unchanged: 0/0
 13442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13443 ;;      Params:         0       0       0       0       0       0       0       0       0
 13444 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13445 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13446 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13447 ;;Total ram usage:        0 bytes
 13448 ;; Hardware stack levels used:    1
 13449 ;; This function calls:
 13450 ;;		Nothing
 13451 ;; This function is called by:
 13452 ;;		_tc_high
 13453 ;; This function uses a non-reentrant model
 13454 ;;
 13455                           
 13456                           	psect	text35
 13457  003C20                     __ptext35:
 13458                           	opt stack 0
 13459  003C20                     _EUSART1_Receive_ISR:
 13460                           	opt stack 20
 13461                           
 13462                           ;eusart1.c: 198: if (1 == RCSTA1bits.OERR) {
 13463                           
 13464                           ;incstack = 0
 13465  003C20  A2AB               	btfss	4011,1,c	;volatile
 13466  003C22  D002               	goto	i2l6532
 13467                           
 13468                           ;eusart1.c: 201: RCSTA1bits.CREN = 0;
 13469  003C24  98AB               	bcf	4011,4,c	;volatile
 13470                           
 13471                           ;eusart1.c: 202: RCSTA1bits.CREN = 1;
 13472  003C26  88AB               	bsf	4011,4,c	;volatile
 13473  003C28                     i2l6532:
 13474                           
 13475                           ;eusart1.c: 203: }
 13476                           ;eusart1.c: 206: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 13477  003C28  503B               	movf	_eusart1RxHead,w,c
 13478  003C2A  0D01               	mullw	1
 13479  003C2C  0E00               	movlw	low _eusart1RxBuffer
 13480  003C2E  24F3               	addwf	prodl,w,c
 13481  003C30  6ED9               	movwf	fsr2l,c
 13482  003C32  0E01               	movlw	high _eusart1RxBuffer
 13483  003C34  20F4               	addwfc	prodh,w,c
 13484  003C36  6EDA               	movwf	fsr2h,c
 13485  003C38  CFAE FFDF          	movff	4014,indf2	;volatile
 13486  003C3C  2A3B               	incf	_eusart1RxHead,f,c
 13487                           
 13488                           ;eusart1.c: 207: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 13489  003C3E  0E7D               	movlw	125
 13490  003C40  643B               	cpfsgt	_eusart1RxHead,c
 13491  003C42  D002               	goto	i2l6540
 13492                           
 13493                           ;eusart1.c: 208: eusart1RxHead = 0;
 13494  003C44  0E00               	movlw	0
 13495  003C46  6E3B               	movwf	_eusart1RxHead,c
 13496  003C48                     i2l6540:
 13497                           
 13498                           ;eusart1.c: 209: }
 13499                           ;eusart1.c: 210: eusart1RxCount++;
 13500  003C48  2A3A               	incf	_eusart1RxCount,f,c	;volatile
 13501  003C4A  0012               	return		;funcret
 13502  003C4C                     __end_of_EUSART1_Receive_ISR:
 13503                           	opt stack 0
 13504                           pclatu	equ	0xFFB
 13505                           pclath	equ	0xFFA
 13506                           tblptru	equ	0xFF8
 13507                           tblptrh	equ	0xFF7
 13508                           tblptrl	equ	0xFF6
 13509                           tablat	equ	0xFF5
 13510                           prodh	equ	0xFF4
 13511                           prodl	equ	0xFF3
 13512                           intcon	equ	0xFF2
 13513                           intcon2	equ	0xFF1
 13514                           postinc0	equ	0xFEE
 13515                           fsr0h	equ	0xFEA
 13516                           fsr0l	equ	0xFE9
 13517                           wreg	equ	0xFE8
 13518                           postdec1	equ	0xFE5
 13519                           fsr1h	equ	0xFE2
 13520                           fsr1l	equ	0xFE1
 13521                           bsr	equ	0xFE0
 13522                           indf2	equ	0xFDF
 13523                           postinc2	equ	0xFDE
 13524                           postdec2	equ	0xFDD
 13525                           fsr2h	equ	0xFDA
 13526                           fsr2l	equ	0xFD9
 13527                           status	equ	0xFD8
 13528                           pclatu	equ	0xFFB
 13529                           pclath	equ	0xFFA
 13530                           tblptru	equ	0xFF8
 13531                           tblptrh	equ	0xFF7
 13532                           tblptrl	equ	0xFF6
 13533                           tablat	equ	0xFF5
 13534                           prodh	equ	0xFF4
 13535                           prodl	equ	0xFF3
 13536                           intcon	equ	0xFF2
 13537                           intcon2	equ	0xFF1
 13538                           postinc0	equ	0xFEE
 13539                           fsr0h	equ	0xFEA
 13540                           fsr0l	equ	0xFE9
 13541                           wreg	equ	0xFE8
 13542                           postdec1	equ	0xFE5
 13543                           fsr1h	equ	0xFE2
 13544                           fsr1l	equ	0xFE1
 13545                           bsr	equ	0xFE0
 13546                           indf2	equ	0xFDF
 13547                           postinc2	equ	0xFDE
 13548                           postdec2	equ	0xFDD
 13549                           fsr2h	equ	0xFDA
 13550                           fsr2l	equ	0xFD9
 13551                           status	equ	0xFD8
 13552                           
 13553                           	psect	rparam
 13554  0000                     pclatu	equ	0xFFB
 13555                           pclath	equ	0xFFA
 13556                           tblptru	equ	0xFF8
 13557                           tblptrh	equ	0xFF7
 13558                           tblptrl	equ	0xFF6
 13559                           tablat	equ	0xFF5
 13560                           prodh	equ	0xFF4
 13561                           prodl	equ	0xFF3
 13562                           intcon	equ	0xFF2
 13563                           intcon2	equ	0xFF1
 13564                           postinc0	equ	0xFEE
 13565                           fsr0h	equ	0xFEA
 13566                           fsr0l	equ	0xFE9
 13567                           wreg	equ	0xFE8
 13568                           postdec1	equ	0xFE5
 13569                           fsr1h	equ	0xFE2
 13570                           fsr1l	equ	0xFE1
 13571                           bsr	equ	0xFE0
 13572                           indf2	equ	0xFDF
 13573                           postinc2	equ	0xFDE
 13574                           postdec2	equ	0xFDD
 13575                           fsr2h	equ	0xFDA
 13576                           fsr2l	equ	0xFD9
 13577                           status	equ	0xFD8
 13578                           
 13579                           	psect	temp
 13580  000040                     btemp:
 13581                           	opt stack 0
 13582  000040                     	ds	1
 13583  0000                     int$flags	set	btemp
 13584                           pclatu	equ	0xFFB
 13585                           pclath	equ	0xFFA
 13586                           tblptru	equ	0xFF8
 13587                           tblptrh	equ	0xFF7
 13588                           tblptrl	equ	0xFF6
 13589                           tablat	equ	0xFF5
 13590                           prodh	equ	0xFF4
 13591                           prodl	equ	0xFF3
 13592                           intcon	equ	0xFF2
 13593                           intcon2	equ	0xFF1
 13594                           postinc0	equ	0xFEE
 13595                           fsr0h	equ	0xFEA
 13596                           fsr0l	equ	0xFE9
 13597                           wreg	equ	0xFE8
 13598                           postdec1	equ	0xFE5
 13599                           fsr1h	equ	0xFE2
 13600                           fsr1l	equ	0xFE1
 13601                           bsr	equ	0xFE0
 13602                           indf2	equ	0xFDF
 13603                           postinc2	equ	0xFDE
 13604                           postdec2	equ	0xFDD
 13605                           fsr2h	equ	0xFDA
 13606                           fsr2l	equ	0xFD9
 13607                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    9
    Data        10
    BSS         1347
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160     45      99
    BANK1           256      0     252
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[6]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_GETxAPIxVAL
    _Update_StateMchn->_Green_Led
    _Update_StateMchn->_Red_Led
    _Train_Path->_GETxAPIxVAL
    _Train_Move_Right_Start->_GETxAPIxVAL
    _Train_Move_Right_Brake->_GETxAPIxVAL
    _Train_Move_Left_Start->_GETxAPIxVAL
    _Train_Move_Left_Brake->_GETxAPIxVAL
    _Right_Mountain_From_The_Right->_GETxAPIxVAL
    _Right_Mountain_From_The_Left->_GETxAPIxVAL
    _Left_Mountain_From_The_Right->_GETxAPIxVAL
    _Left_Mountain_From_The_Left->_GETxAPIxVAL
    _SETxPWM->_GETxAPIxVAL
    _Junction->_GETxAPIxVAL
    _INCRxAPIxVAL->_GETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_GETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _DECRxAPIxVAL->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_EUSART1_Read
    _printf->_putch

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Update_StateMchn
    _Update_StateMchn->_Train_Path
    _Train_Path->_Left_Mountain_From_The_Left
    _Train_Path->_Left_Mountain_From_The_Right
    _Train_Path->_Right_Mountain_From_The_Left
    _Train_Path->_Right_Mountain_From_The_Right
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _INCRxAPIxVAL->_SETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _DECRxAPIxVAL->_SETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_printf
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _SENDxMESSAGE->_printf
    _printf->___lwdiv

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  143455
                     _APIxInitialize
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     2     2      0  135959
                                             43 BANK0      2     2      0
                       _DECRxAPIxVAL
                    _Debounce_Inputs
                       _Eeprom_Store
                        _GETxAPIxVAL
                          _Green_Led
                       _INCRxAPIxVAL
                            _Red_Led
                        _SETxAPIxVAL
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  110590
                                             41 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               0     0      0   15088
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               0     0      0   15088
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                0     0      0   15088
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                0     0      0   15088
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0    8982
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0    8982
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0    8982
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0    8982
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3    8858
                                             33 BANK0      7     4      3
                        _GETxAPIxVAL (ARG)
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1    6939
                                             33 BANK0      2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _INCRxAPIxVAL                                         3     3      0    6329
                                             33 BANK0      3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Store                                         0     0      0      31
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0    6406
                                             33 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     176
                                              2 BANK0      6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (2) _DECRxAPIxVAL                                         3     3      0    6329
                                             33 BANK0      3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (4) _GETxAPIxVAL                                          3     1      2      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                0     0      0    1102
                       _EUSART1_Read
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0    6199
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          5     3      2    6199
                                             28 BANK0      5     3      2
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         5     3      2    1316
                                             23 BANK0      5     3      2
                             _printf
 ---------------------------------------------------------------------------------
 (7) _printf                                              25    17      8    1078
                                              7 BANK0     16     8      8
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _tc_low                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_high                                            14    14      0       0
                                              0 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           _putch
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _printf
       ___lwdiv
       _putch
   _Update_StateMchn
     _DECRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             _putch
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             _putch
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _Eeprom_Store
       _GETxAPIxVAL
     _GETxAPIxVAL
     _Green_Led
     _INCRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             _putch
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           _putch
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               _putch
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             _putch
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 _putch

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     3FC      21       49.8%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      63       5       61.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     19E      20        0.0%
DATA                 0      0     59A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Oct 18 23:22:08 2017

                  _eusart1TxBufferRemaining 003D                                          bsr 000FE0  
                               __CFG_BORV$3 000000                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l362 1404  
                                       l621 3CA6                                         l720 3534  
                                       l800 38D4                                         l456 2558  
                                       l723 3562                                         l732 35D8  
                                       l812 3828                                         l726 3586  
                                       l807 37F8                                         l816 3854  
                                       l729 35B4                                         l809 37FC  
                                       l684 202A                                         l791 3878  
                                       l793 387C                                         l796 38A8  
                                       _API 01FC                                __CFG_CPB$OFF 000000  
                              _Stop_Program 00A1                                         _PR2 000FCB  
                              __CFG_CPD$OFF 000000                                __CFG_BOR$OFF 000000  
                                       prod 000FF3                                         wreg 000FE8  
                    ?_READxRECEIVEDxMESSAGE 0001            Train_Move_Right_Start@Return_Val 00C1  
                              ?_GETxAPIxVAL 0060                             APIxInitialize@i 0060  
                              __CFG_LVP$OFF 000000         __end_of_Left_Mountain_From_The_Left 32BC  
               _Left_Mountain_From_The_Left 318A                                __CFG_WDT$OFF 000000  
     __end_of_Right_Mountain_From_The_Right 3056      __size_of_Right_Mountain_From_The_Right 0134  
             _Right_Mountain_From_The_Right 2F22                                        l1233 348E  
                                      l1649 3962                                        l5302 3858  
                                      l5260 3898                                        l5270 38C4  
                                      l5254 3880                                        l7200 34E8  
                                      l5600 3B90                                        l8000 1ED2  
                                      l5264 38AC                                        l5280 3800  
                                      l7202 34F4                                        l5290 382C  
                                      l8020 1F3E                                        l8012 1F22  
                                      l8004 1EE4                                        l5276 38D8  
                                      l8100 25CA                                        l7150 391E  
                                      l8014 1F34                                        l8006 1EFC  
                                      l5286 3818                                        l7310 2D52  
                                      l7302 2D1A                                        l7160 3954  
                                      l7152 3924                                        l8040 1FAA  
                                      l8032 1F8E                                        l8024 1F50  
                                      l5296 3844                                        l7400 2A5E  
                                      l7312 2D5A                                        l8200 277E  
                                      l8120 2620                                        l8104 25D8  
                                      l7170 340E                                        l8034 1FA0  
                                      l8026 1F68                                        l7250 2BD8  
                                      l7242 2BA2                                        l7234 2B76  
                                      l7226 37B8                                        l7410 2A94  
                                      l7306 2D46                                        l7330 2DE4  
                                      l8210 27BC                                        l8202 2790  
                                      l8114 25FC                                        l9010 1522  
                                      l9002 14F0                                        l7148 3912  
                                      l8044 1FBC                                        l7244 2BB4  
                                      l7236 2B7E                                        l7340 2E0A  
                                      l7420 2AD4                                        l7324 2DBA  
                                      l8220 27F4                                        l8212 27C0  
                                      l8204 2794                                        l8124 2626  
                                      l8116 261A                                        l8108 25E6  
                                      l7182 3458                                        l7166 33FA  
                                      l5590 3B68                                        l7262 2C30  
                                      l7246 2BC6                                        l7238 2B90  
                                      l7254 2BEA                                        l7510 31C6  
                                      l7502 3190                                        l7414 2AC0  
                                      l7406 2A8C                                        l7318 2D90  
                                      l8206 27A6                                        l8134 263A  
                                      l9110 1746                                        l9030 159E  
                                      l9014 152E                                        l7256 2BFA  
                                      l7360 2E86                                        l7344 2E14  
                                      l7336 2DEC                                        l7432 2B3A  
                                      l7440 2B4E                                        l7328 2DC8  
                                      l8232 2800                                        l8208 27AA  
                                      l8152 26AC                                        l8144 2680  
                                      l8136 2658                                        l8128 262C  
                                      l8080 2560                                        l9104 173E  
                                      l9040 15FE                                        l9032 15A2  
                                      l9016 153A                                        l7194 3494  
                                      l7266 2C44                                        l7258 2C02  
                                      l7274 2C92                                        l7514 31CE  
                                      l7602 3138                                        l7610 316C  
                                      l7362 2E8C                                        l7346 2E1C  
                                      l7434 2B40                                        l7442 2B6A  
                                      l7282 2CB0                                        l8226 27FA  
                                      l8218 27D6                                        l8090 258E  
                                      l9130 17BC                                        l9122 1796  
                                      l9114 1758                                        l9042 1602  
                                      l9026 158C                                        l8410 0898  
                                      l7276 2CA8                                        l7532 3226  
                                      l7508 31B4                                        l7356 2E5A  
                                      l7436 2B46                                        l7428 2B0C  
                                      l7292 2CDC                                        l8260 2850  
                                      l8252 2840                                        l8156 26C2  
                                      l8148 2696                                        l8084 256E  
                                      l8076 2546                                        l9124 179A  
                                      l9116 177A                                        l9140 17D6  
                                      l9060 1660                                        l9036 15D0  
                                      l9028 1596                                        l8404 0874  
                                      l9230 35F2                                        l7542 326C  
                                      l7550 329E                                        l7606 315A  
                                      l7614 3174                                        l7630 2F5E  
                                      l7622 2F28                                        l7462 2948  
                                      l7382 2EF8                                        l7366 2E90  
                                      l7286 2CCE                                        l8238 2806  
                                      l8246 281A                                        l8094 2592  
                                      l9118 177E                                        l9142 17F6  
                                      l9070 1696                                        l9062 1664  
                                      l9054 162C                                        l8422 08E0  
                                      l8360 1FDE                                        l9240 3620  
                                      l7800 1A0E                                        l7712 3356  
                                      l7608 3166                                        l7616 3184  
                                      l7464 2950                                        l7456 291A  
                                      l7448 28E4                                        l7376 2ECC  
                                      l8280 2880                                        l8272 2868  
                                      l8264 2858                                        l8256 2848  
                                      l8248 2838                                        l8176 2718  
                                      l8096 25B0                                        l8088 257C  
                                      l9136 17C4                                        l9072 169A  
                                      l9048 1624                                        l8512 0B4E  
                                      l8432 0916                                        l8416 08BC  
                                      l9160 1854                                        l9250 3644  
                                      l9242 3626                                        l9234 360A  
                                      l7546 328C                                        l7538 325C  
                                      l7554 32A6                                        l7722 339A  
                                      l7730 33CE                                        l7570 3092  
                                      l7562 305C                                        l7634 2F66  
                                      l7490 2A02                                        l7482 29C8  
                                      l7474 2990                                        l7386 2F00  
                                      l7394 2A2E                                        l9090 16F8  
                                      l9066 167E                                        l9058 163E  
                                      l9154 1822                                        l8602 0D18  
                                      l8522 0B8C                                        l8514 0B58  
                                      l8450 0998                                        l8426 0902  
                                      l9252 364A                                        l7900 1C66  
                                      l7820 1A7A                                        l7812 1A42  
                                      l7804 1A20                                        l7548 3298  
                                      l7556 32B6                                        l7652 2FC0  
                                      l7628 2F4C                                        l7468 297C  
                                      l7388 2F1C                                        l8276 2870  
                                      l8268 2860                                        l8196 2768  
                                      l8284 2888                                        l9148 1814  
                                      l9092 16FC                                        l9084 16C4  
                                      l8540 0BE2                                        l8532 0BC4  
                                      l8524 0B90                                        l8508 0B1E  
                                      l8428 0906                                        l7814 1A54  
                                      l7806 1A38                                        l7726 33BC  
                                      l7718 338A                                        l7734 33D6  
                                      l7574 309A                                        l7662 3006  
                                      l7670 3038                                        l7486 29F6  
                                      l7494 2A0A                                        l8198 277A  
                                      l8286 28DC                                        l9078 16BC  
                                      l8630 0D98                                        l8542 0BE6  
                                      l8550 0C02                                        l8518 0B72  
                                      l8462 09E0                                        l8446 0988  
                                      l9158 183A                                        l9350 39DA  
                                      l9264 3684                                        l9272 369A  
                                      l7920 1CE6                                        l7912 1CCA  
                                      l7904 1C78                                        l7840 1AE6  
                                      l7832 1ACA                                        l7824 1A8C  
                                      l7760 1936                                        l7752 18FE  
                                      l7728 33C8                                        l7736 33E6  
                                      l7592 30F2                                        l7568 3080  
                                      l7496 2A26                                        l9096 1718  
                                      l9088 16D6                                        l8632 0DA2  
                                      l8640 0DB6                                        l8624 0D66  
                                      l8608 0D28                                        l8560 0C4E  
                                      l8544 0BF4                                        l8536 0BDA  
                                      l8552 0C30                                        l8528 0BB4  
                                      l8480 0A4C                                        l8456 09BC  
                                      l9344 39C8                                        l7914 1CDC  
                                      l7906 1CA4                                        l7834 1ADC  
                                      l7826 1AA4                                        l7754 1910  
                                      l7746 18F4                                        l7690 32F6  
                                      l7682 32C2                                        l7666 3026  
                                      l7658 2FF6                                        l7674 3040  
                                      l9098 171C                                        l8810 113A  
                                      l8650 0E22                                        l8642 0DE4  
                                      l8634 0DA6                                        l8618 0D56  
                                      l8562 0C52                                        l8570 0C6E  
                                      l8538 0BDE                                        l8490 0A7C  
                                      l8474 0A28                                        l8394 0838  
                                      l7940 1D66                                        l7932 1D4A  
                                      l7924 1CF8                                        l7860 1B66  
                                      l7852 1B4A                                        l7844 1AF8  
                                      l7780 19A2                                        l7772 196A  
                                      l7764 1948                                        l7668 3032  
                                      l7676 3050                                        l8900 1322  
                                      l8812 1142                                        l8708 0F6A  
                                      l8660 0E5A                                        l8652 0E26  
                                      l8628 0D94                                        l8580 0CCA  
                                      l8564 0C60                                        l8556 0C46  
                                      l8572 0C9C                                        l8484 0A6E  
                                      l8468 0A04                                        l7934 1D5C  
                                      l7926 1D24                                        l7854 1B5C  
                                      l7846 1B24                                        l7774 197C  
                                      l7766 1960                                        l7694 32FE  
                                      l7598 3128                                        l8830 11C8  
                                      l8822 11A2                                        l8814 1146  
                                      l8718 0F88                                        l8670 0E7A  
                                      l8662 0E6E                                        l8582 0CCE  
                                      l8558 0C4A                                        l8486 0A72  
                                      l8398 0848                                        l7960 1DE6  
                                      l7952 1DCA                                        l7944 1D78  
                                      l7880 1BE6                                        l7872 1BCA  
                                      l7864 1B78                                        l7792 19D6  
                                      l7784 19B4                                        l7688 32E4  
                                      l8912 1360                                        l8904 133A  
                                      l8824 11A6                                        l8840 11E2  
                                      l8808 1130                                        l8728 0FA6  
                                      l8680 0EC2                                        l8672 0E84  
                                      l8664 0E72                                        l8656 0E4A  
                                      l8584 0CD2                                        l8592 0CE6  
                                      l8648 0DF4                                        l7954 1DDC  
                                      l7946 1DA4                                        l7874 1BDC  
                                      l7866 1BA4                                        l7794 19E8  
                                      l7786 19CC                                        l8930 13B8  
                                      l8906 133E                                        l8922 137A  
                                      l8842 1204                                        l8818 1174  
                                      l8738 0FC4                                        l8770 101E  
                                      l8666 0E76                                        l8586 0CD6  
                                      l7980 1E66                                        l7972 1E4A  
                                      l7964 1DF8                                        l7892 1C4A  
                                      l7884 1BF8                                        l8924 139A  
                                      l8860 1260                                        l8852 123A  
                                      l8844 1208                                        l8836 11D0  
                                      l8780 1086                                        l8772 1054  
                                      l8748 0FE2                                        l7974 1E5C  
                                      l7966 1E24                                        l7894 1C5C  
                                      l7886 1C24                                        l8942 13F6  
                                      l8918 1368                                        l8854 123E  
                                      l8870 127A                                        l8758 1000  
                                      l8694 0F3C                                        l8678 0E94  
                                      l8598 0D14                                        l8686 0ED2  
                                      l7992 1EB6                                        l7984 1E78  
                                      l8952 1428                                        l8880 12C0  
                                      l8872 129C                                        l8848 1222  
                                      l8792 10C6                                        l8784 1094  
                                      l8936 13C6                                        l8688 0F20  
                                      l7994 1EC8                                        l7986 1E90  
                                      l8946 140C                                        l8874 12A0  
                                      l8866 1268                                        l8938 13DE  
                                      l8698 0F4C                                        l8956 1438  
                                      l8892 12EA                                        l8796 10D2  
                                      l8990 14B0                                        l8966 1456  
                                      l8886 12E2                                        l8878 12BC  
                                      l8798 10DE                                        STR_1 0829  
                                      l8976 1474                                        l8896 12FC  
                                      STR_2 081B                                        STR_3 080A  
                                      l8898 131E                                        l8988 1492  
                                      l8998 14E2              Right_Mountain_From_The_Left@rc 0088  
                                      u7000 1F58                                        u7030 1FC4  
                                      u7006 1F5A                                        u7036 1FC6  
                                      u6600 1A28                                        u8200 12D0  
                                      u6515 3AF0                                        u6700 1B80  
                                      u6540 1950                                        u8220 134E  
                                      u6710 1B82                                        u6630 1A94  
                                      u6606 1A2A                                        u8150 11B6  
                                      u6570 19BC                                        u6546 1952  
                                      i2l92 36F6                                        u6900 1E00  
                                      u6820 1D00                                        u6740 1C00  
                                      u6660 1B00                                        u6636 1A96  
                                      u8180 124E                                        u6910 1E02  
                                      u6830 1D02                                        u6750 1C02  
                                      u6670 1B02                                        u8510 17AA  
                                      u6576 19BE                                        u8440 1612  
                                      i2l97 372C                                        u6940 1E80  
                                      u6860 1D80                                        u6780 1C80  
                                      u5990 3A6E                                        u6870 1D82  
                                      u6790 1C82                                        u8470 16AA  
                                      u6970 1EEC                                        u6946 1E82  
                                      u8490 172C                                        u7790 0B48  
                                      u6976 1EEE                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                        _Data 00AF  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 2524  
            __size_of_Train_Move_Left_Brake 014A               __end_of_Train_Move_Left_Brake 2A2C  
                                      _main 396C                               ?_EUSART1_Read 0001  
            __size_of_Train_Move_Left_Start 0138                             __end_of_SETxPWM 37F4  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                                        btemp 0040  
             __end_of_Train_Move_Left_Start 2F22                                        pclat 000FFA  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 00A6                             __end_of_DataLen 080A  
                             __CFG_IESO$OFF 000000                 EUSART1_Initialize@baud_rate 0060  
                        Green_Led@Operation 0020                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000010                               ??_Init_Timers 0020  
                           __end_of_Red_Led 3874                               __CFG_PLLDIV$5 000000  
                             ?_INCRxAPIxVAL 0001                              __CFG_CCP2MX$ON 000000  
                                     ?_main 0001                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 0020  
                                     _T0CON 000FD5                                       _T2CON 000FCA  
                           __end_of___lwdiv 396C                                SETxPWM@speed 0081  
                                     i2l627 3BF0                                       _TMR0H 000FD7  
                                     _TMR0L 000FD6                                       _SPBRG 000FAF  
                             __CFG_USBDIV$2 000000                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                             __CFG_WRT0$OFF 000000                               __CFG_WRT1$OFF 000000  
                             __CFG_WRT2$OFF 000000                               __CFG_WRT3$OFF 000000  
                      _EUSART1_Transmit_ISR 3BC6                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                                       _pData 0027  
                            __CFG_EBTRB$OFF 000000                             __end_of_tc_high 3768  
                                     _putch 3CA4                                       tablat 000FF5  
                           ?_APIxInitialize 0001                              ??_EUSART1_Read 0020  
                                     status 000FD8   Train_Move_Left_Brake@Train_Move_Wait_Time 008F  
                            __CFG_ICPRT$OFF 000000                        __end_of_Eeprom_Store 35E4  
                           __initialization 39E0                  __end_of_EUSART1_Initialize 3AE6  
                              __end_of_main 39E0                              ??_INCRxAPIxVAL 0021  
                          __end_of_Init_Pwm 3C70                                      ??_main 0021  
                       __end_of_Init_Timers 3CA4                               __activetblptr 000002  
                          __end_of_Junction 2CAE                                _Led1_Counter 0023  
                         _Green_Led_Counter 0021                       ?_EUSART1_Transmit_ISR 0001  
                         ?_Update_StateMchn 0001                          ??_Update_StateMchn 008B  
                                    _ADCON1 000FC1                                      _EEDATA 000FA8  
                                    _CCPR1L 000FBE                                   ??_SETxPWM 0084  
                                    _EECON2 000FA7                                      ?_putch 0001  
                                    _API_RW 03FA                          __size_of_Green_Led 0080  
                     __size_of_DECRxAPIxVAL 002E                                      _INTCON 000FF2  
                                    i2l6540 3C48                                      i2l6532 3C28  
                                    i2l6552 3BEC                                      i2l6642 370C  
                                    i2l6654 3722                                      i2l6638 36F8  
                                    i2l6648 3718                     ?_Train_Move_Right_Brake 0001  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 0044                     ?_Train_Move_Right_Start 0001  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 0001  
                                 ??_Red_Led 0020                              __CFG_XINST$OFF 000000  
           Train_Move_Left_Brake@Return_Val 00BE                              __CFG_STVREN$ON 000000  
                                 ??___lwdiv 0020                                      clear_0 39E8  
                                    clear_1 39FA                                      clear_2 3A06  
                                    clear_3 3A12                                      _tc_low 0018  
                                    _printf 33EC                              _Switch_Moutain 00AA  
                                _Train_Path 2524     Right_Mountain_From_The_Right@Return_Val 00BD  
    Left_Mountain_From_The_Right@Return_Val 00BB                              _Switch_Program 00AB  
                              _DECRxAPIxVAL 3B98                                   ??_tc_high 0001  
                 _Activate_Controls_Counter 0097                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 007C  
                 _Button_Contact_Counter_LB 0029                   _Button_Contact_Counter_LF 002A  
                 _Button_Contact_Counter_RB 002C                   _Button_Contact_Counter_RF 002D  
            __end_of_Train_Move_Right_Brake 2B70                             _eusart1RxBuffer 0100  
                      __size_of_GETxAPIxVAL 001C                             _eusart1TxBuffer 017E  
            __end_of_Train_Move_Right_Start 2DEA                        _Train_Move_Pwm_Count 009D  
                                __accesstop 0060                     __end_of__initialization 3A38  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                             _Received_Data 0030                              __pcstackCOMRAM 0001  
                              __pidataBANK0 3CB0                                 _Init_Timers 3C8C  
                             __end_of_putch 3CB0                           __end_of_Green_Led 38F4  
                   ??_READxRECEIVEDxMESSAGE 0021                        __end_of_EUSART1_Read 3B98  
                         __end_of_SetDCPWM1 3B2A                             _Red_Led_Counter 0025  
                    ??_EUSART1_Transmit_ISR 0001  Train_Move_Right_Start@Train_Move_Wait_Time 0095  
                  __size_of_Debounce_Inputs 0770                 __end_of_EUSART1_Receive_ISR 3C4C  
          Train_Move_Right_Brake@Return_Val 00C0                               ?_SENDxMESSAGE 0077  
                                   ??_putch 0020                               _eusart1RxHead 003B  
                             _eusart1TxHead 003E                       __size_of_Eeprom_Store 00D2  
               Junction@Junction_Left_Right 0082                               _eusart1RxTail 003C  
                                __pbssBANK0 008D                                  __pbssBANK1 0100  
                             _eusart1TxTail 003F                        __end_of_INCRxAPIxVAL 3C20  
                                 ?_Init_Pwm 0001                            GETxAPIxVAL@index 0020  
                          SETxAPIxVAL@index 0080                                   ?_Junction 0081  
                          SETxAPIxVAL@value 007C        __size_of_Left_Mountain_From_The_Left 0132  
                                   _CCP1CON 000FBD                                     ?_tc_low 0001  
                                   ?_printf 0067                                 ?_Train_Path 0089  
                              _Eeprom_Store 3512                                     _INTCON2 000FF1  
 Train_Move_Left_Start@Train_Move_Wait_Time 0091                              ??_SENDxMESSAGE 0021  
                          ??_APIxInitialize 0020                                     _SETxPWM 3768  
                          SETxPWM@direction 0083                                     _DataLen 0809  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 0021  
                                   _Red_Led 37F4                       _Train_Move_Left_Brake 28E2  
                                ??_Junction 0021                                     __Hparam 0000  
                     _Train_Move_Left_Start 2DEA                                     __Lparam 0000  
                                   ___lwdiv 38F4                                __psmallconst 0800  
                                   __pcinit 39E0                                     __ramtop 0800  
                           __size_of_tc_low 008E                                     __ptext0 396C  
                                   __ptext1 0830                                     __ptext2 2524  
                                   __ptext3 2CAE                                     __ptext4 2A2C  
                                   __ptext5 2DEA                                     __ptext6 28E2  
                                   __ptext7 2F22                                     __ptext8 3056  
                                   __ptext9 32BC                        Train_Path@Return_Val 00C2  
                           __size_of_printf 0126                           __end_of_hexpowers 0809  
                                   _tc_high 0008                          _EUSART1_Initialize 3A9A  
                           SENDxMESSAGE@low 007B                   _Train_Move_Pwm_Fast_Count 009F  
                            __pintcode_body 36B0                        end_of_initialization 3A38  
                           _Switch_Junction 00A8                           ??_Debounce_Inputs 0081  
                       ?_EUSART1_Initialize 0001                        __size_of_SETxAPIxVAL 0054  
                             __Lmediumconst 0000                                     int_func 36B0  
                          SETxPWM@pwm_speed 0086                           INCRxAPIxVAL@index 0083  
                 __size_of_Update_StateMchn 1034                           INCRxAPIxVAL@value 0081  
                       __size_of_Train_Path 03BE                                   _RCSTAbits 000FAB  
                                   printf@c 0076                                     printf@f 0067  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc2 000FDE  
                     __size_of_EUSART1_Read 0034              Left_Mountain_From_The_Right@rc 0088  
                      ??_EUSART1_Initialize 0020                                   _PORTAbits 000F80  
                                 _PORTBbits 000F81                                   _PORTCbits 000F82  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                                 _TRISEbits 000F96                       __size_of_INCRxAPIxVAL 002C  
              Junction@Junction_Switch_Time 008D                      ?_Train_Move_Left_Brake 0001  
                              _EUSART1_Read 3B64                                   _TXSTAbits 000FAC  
                    ?_Train_Move_Left_Start 0001                                 _Switch_Main 00A9  
                               _Switch_Init 00A7                        __end_of_SENDxMESSAGE 3B64  
                              ?_Init_Timers 0001                          Junction@Return_Val 00B9  
                               _BAUDCONbits 000FB8                                _INCRxAPIxVAL 3BF4  
                      _Update_State_Machine 00AE                              __end_of_tc_low 00A6  
               _Button_Contact_Counter_Stop 002F                              __end_of_printf 3512  
            __size_of_READxRECEIVEDxMESSAGE 00CC                                   _Green_Led 3874  
             __end_of_READxRECEIVEDxMESSAGE 36B0                         start_initialization 39E0  
                             ??_GETxAPIxVAL 0020                                   _SetDCPWM1 3AE6  
                           SetDCPWM1@DCycle 0066                      _Mountain_Delay_Counter 009B  
              ?_Left_Mountain_From_The_Left 0001                           __size_of_Init_Pwm 0024  
                         __size_of_Junction 013E                                 __pdataBANK0 00B9  
                          __CFG_LPT1OSC$OFF 000000                                    ??_tc_low 000F  
                                  ??_printf 0021                              _eusart1RxCount 003A  
                              ??_Train_Path 0021                                  ?_Green_Led 0001  
                               __pbssBIGRAM 01FC                                 __pbssCOMRAM 0021  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 0060  
                                ?_SetDCPWM1 0062  Train_Move_Right_Brake@Train_Move_Wait_Time 0093  
                                  ?_SETxPWM 0081                __size_of_EUSART1_Receive_ISR 002C  
                       __end_of_GETxAPIxVAL 3C8C               ??_Left_Mountain_From_The_Left 0021  
                                  ?_Red_Led 0001                            _Update_StateMchn 0830  
                          ___lwdiv@dividend 0060      Right_Mountain_From_The_Left@Return_Val 00BC  
     Left_Mountain_From_The_Left@Return_Val 00BA                          __end_of_Train_Path 28E2  
                                 __pintcode 0008                                    ?___lwdiv 0060  
      __end_of_Left_Mountain_From_The_Right 33EC       __size_of_Left_Mountain_From_The_Right 0130  
              _Left_Mountain_From_The_Right 32BC                                 __pintcodelo 0018  
                           _Debounce_Inputs 1864                                 __smallconst 0800  
                  ??_Train_Move_Right_Brake 0021                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 0088                    ??_Train_Move_Right_Start 0021  
                     Junction@Straight_Bend 0081                                   _hexpowers 0801  
              _Button_Contact_Counter_Start 002E                    _Reed_Contact_LMD_Counter 0033  
                          ___lwdiv@quotient 0065                              __size_of_putch 000C  
                     __size_of_SENDxMESSAGE 003A        __end_of_Right_Mountain_From_The_Left 318A  
     __size_of_Right_Mountain_From_The_Left 0134                _Right_Mountain_From_The_Left 3056  
                                  _PIE1bits 000F9D                              _Adjust_Counter 0099  
             Left_Mountain_From_The_Left@rc 0088                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1                                    _RCONbits 000FD0  
                            Train_Path@From 008A                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           SENDxMESSAGE@index 0079  
                         SENDxMESSAGE@value 0077                                 ??_Green_Led 0020  
                                printf@flag 006F                               ?_DECRxAPIxVAL 0001  
                                printf@prec 0075                                 ??_SetDCPWM1 0064  
                               _GETxAPIxVAL 3C70                               ??_SETxAPIxVAL 007E  
                              _SENDxMESSAGE 3B2A                                   copy_data0 3A2C  
                   ??_Train_Move_Left_Brake 0021                    _Reed_Contact_LMU_Counter 0034  
                          __size_of_SETxPWM 008C                     ??_Train_Move_Left_Start 0021  
                        SetDCPWM1@dutycycle 0062                                    _Init_Pwm 3C4C  
                     EUSART1_Read@readValue 0020                                  _EECON1bits 000FA6  
                   __size_of_APIxInitialize 0550                                    __Hrparam 0000  
                                  _Junction 2B70                            __size_of_Red_Led 0080  
             ?_Right_Mountain_From_The_Left 0001                                    __Lrparam 0000  
                                  _RxSwitch 0039                    _Reed_Contact_RMD_Counter 0037  
                   __end_of_Debounce_Inputs 1FD4                 __size_of_EUSART1_Initialize 004C  
                          __size_of___lwdiv 0078                           _Switch_Train_Path 00AD  
                         _Switch_Train_Move 00AC                            _Switch_Adjust_LB 00A3  
                          _Switch_Adjust_LF 00A4                            _Switch_Adjust_RB 00A5  
                          _Switch_Adjust_RF 00A6                              ??_DECRxAPIxVAL 0021  
           __size_of_Train_Move_Right_Brake 0144                            __size_of_tc_high 3760  
                           ___lwdiv@divisor 0062             __size_of_Train_Move_Right_Start 013C  
                           ___lwdiv@counter 0064                                    __ptext10 318A  
                                  __ptext11 3768                                    __ptext20 3C70  
                                  __ptext12 2B70                                    __ptext21 35E4  
                                  __ptext13 37F4                                    __ptext30 3A9A  
                                  __ptext22 3B64                                    __ptext14 3BF4  
                                  __ptext31 1FD4                                    __ptext23 3C8C  
                                  __ptext15 3874                                    __ptext24 3C4C  
                                  __ptext16 3512                                    __ptext25 3A46  
                                  __ptext17 1864                                    __ptext34 3BC6  
                                  __ptext26 3B2A                                    __ptext18 3AE6  
                                  __ptext35 3C20                                    __ptext27 33EC  
                                  __ptext19 3B98                                    __ptext28 3CA4  
                                  __ptext29 38F4                               __size_of_main 0074  
                       __end_of_SETxAPIxVAL 3A9A                     _Reed_Contact_LB_Counter 0031  
                                  int$flags 0040                     _Reed_Contact_LF_Counter 0032  
                         DECRxAPIxVAL@index 0083                            SENDxMESSAGE@high 007A  
                         DECRxAPIxVAL@value 0081                    _Reed_Contact_RMU_Counter 0038  
                                 printf@idx 0070                                   printf@val 0073  
                       _EUSART1_Receive_ISR 3C20                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0020                               ?_Eeprom_Store 0001  
                  __end_of_Update_StateMchn 1864                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0021              ??_Left_Mountain_From_The_Right 0021  
                     _READxRECEIVEDxMESSAGE 35E4                     _Reed_Contact_RB_Counter 0035  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 0036                      _Train_Move_Right_Brake 2A2C  
              __end_of_EUSART1_Transmit_ISR 3BF4                      _Train_Move_Right_Start 2CAE  
           Train_Move_Left_Start@Return_Val 00BF                                Train_Path@To 0089  
                                  printf@ap 0071                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 00A2              ??_Right_Mountain_From_The_Left 0021  
                            ??_Eeprom_Store 0021                                 _SETxAPIxVAL 3A46  
                        __CFG_FOSC$HSPLL_HS 000000                       ??_EUSART1_Receive_ISR 0001  
                            _APIxInitialize 1FD4               _Button_Contact_Counter_Middle 002B  
                      __end_of_DECRxAPIxVAL 3BC6  
