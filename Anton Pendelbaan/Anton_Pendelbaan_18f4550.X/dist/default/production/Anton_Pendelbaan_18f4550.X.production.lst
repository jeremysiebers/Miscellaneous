

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Oct 24 23:06:25 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataBANK0
    61  003D08                     __pidataBANK0:
    62                           	opt stack 0
    63                           
    64                           ;initializer for Junction@Return_Val
    65  003D08  01                 	db	1
    66                           
    67                           ;initializer for Left_Mountain_From_The_Left@Return_Val
    68  003D09  01                 	db	1
    69                           
    70                           ;initializer for Left_Mountain_From_The_Right@Return_Val
    71  003D0A  01                 	db	1
    72                           
    73                           ;initializer for Right_Mountain_From_The_Left@Return_Val
    74  003D0B  01                 	db	1
    75                           
    76                           ;initializer for Right_Mountain_From_The_Right@Return_Val
    77  003D0C  01                 	db	1
    78                           
    79                           ;initializer for Train_Move_Left_Brake@Return_Val
    80  003D0D  01                 	db	1
    81                           
    82                           ;initializer for Train_Move_Left_Start@Return_Val
    83  003D0E  01                 	db	1
    84                           
    85                           ;initializer for Train_Move_Right_Brake@Return_Val
    86  003D0F  01                 	db	1
    87                           
    88                           ;initializer for Train_Move_Right_Start@Return_Val
    89  003D10  01                 	db	1
    90                           
    91                           ;initializer for Train_Path@Return_Val
    92  003D11  01                 	db	1
    93                           
    94                           	psect	smallconst
    95  000800                     __psmallconst:
    96                           	opt stack 0
    97  000800  00                 	db	0
    98  000801                     _dpowers:
    99                           	opt stack 0
   100  000801  0001               	dw	1
   101  000803  000A               	dw	10
   102  000805  0064               	dw	100
   103  000807  03E8               	dw	1000
   104  000809  2710               	dw	10000
   105  00080B                     __end_of_dpowers:
   106                           	opt stack 0
   107  00080B                     _DataLen:
   108                           	opt stack 0
   109  00080B  0A                 	db	10
   110  00080C                     __end_of_DataLen:
   111                           	opt stack 0
   112  0000                     _ADCON1	set	4033
   113  0000                     _BAUDCONbits	set	4024
   114  0000                     _CCP1CON	set	4029
   115  0000                     _CCPR1L	set	4030
   116  0000                     _CMCON	set	4020
   117  0000                     _EEADR	set	4009
   118  0000                     _EECON1bits	set	4006
   119  0000                     _EECON2	set	4007
   120  0000                     _EEDATA	set	4008
   121  0000                     _INTCON	set	4082
   122  0000                     _INTCON2	set	4081
   123  0000                     _INTCONbits	set	4082
   124  0000                     _PIE1bits	set	3997
   125  0000                     _PIR1bits	set	3998
   126  0000                     _PIR2bits	set	4001
   127  0000                     _PORTAbits	set	3968
   128  0000                     _PORTBbits	set	3969
   129  0000                     _PORTCbits	set	3970
   130  0000                     _PORTDbits	set	3971
   131  0000                     _PORTEbits	set	3972
   132  0000                     _PR2	set	4043
   133  0000                     _RCONbits	set	4048
   134  0000                     _RCREG1	set	4014
   135  0000                     _RCSTA1bits	set	4011
   136  0000                     _RCSTAbits	set	4011
   137  0000                     _SPBRG	set	4015
   138  0000                     _SPBRGH	set	4016
   139  0000                     _T0CON	set	4053
   140  0000                     _T2CON	set	4042
   141  0000                     _TMR0H	set	4055
   142  0000                     _TMR0L	set	4054
   143  0000                     _TRISA	set	3986
   144  0000                     _TRISAbits	set	3986
   145  0000                     _TRISB	set	3987
   146  0000                     _TRISBbits	set	3987
   147  0000                     _TRISC	set	3988
   148  0000                     _TRISCbits	set	3988
   149  0000                     _TRISD	set	3989
   150  0000                     _TRISDbits	set	3989
   151  0000                     _TRISE	set	3990
   152  0000                     _TRISEbits	set	3990
   153  0000                     _TXREG1	set	4013
   154  0000                     _TXSTAbits	set	4012
   155  0000                     _TXIF	set	31988
   156  00080C                     STR_9:
   157  00080C  0D                 	db	13
   158  00080D  0A                 	db	10
   159  00080E  4D                 	db	77	;'M'
   160  00080F  23                 	db	35
   161  000810  25                 	db	37
   162  000811  64                 	db	100	;'d'
   163  000812  20                 	db	32
   164  000813  25                 	db	37
   165  000814  64                 	db	100	;'d'
   166  000815  0D                 	db	13
   167  000816  0A                 	db	10
   168  000817  00                 	db	0
   169  000818                     STR_2:
   170  000818  0D                 	db	13
   171  000819  0A                 	db	10
   172  00081A  45                 	db	69	;'E'
   173  00081B  23                 	db	35
   174  00081C  31                 	db	49	;'1'
   175  00081D  30                 	db	48	;'0'
   176  00081E  0D                 	db	13
   177  00081F  0A                 	db	10
   178  000820  00                 	db	0
   179  000821                     STR_3:
   180  000821  0D                 	db	13
   181  000822  0A                 	db	10
   182  000823  45                 	db	69	;'E'
   183  000824  23                 	db	35
   184  000825  31                 	db	49	;'1'
   185  000826  31                 	db	49	;'1'
   186  000827  0D                 	db	13
   187  000828  0A                 	db	10
   188  000829  00                 	db	0
   189  00082A                     STR_4:
   190  00082A  0D                 	db	13
   191  00082B  0A                 	db	10
   192  00082C  45                 	db	69	;'E'
   193  00082D  23                 	db	35
   194  00082E  31                 	db	49	;'1'
   195  00082F  32                 	db	50	;'2'
   196  000830  0D                 	db	13
   197  000831  0A                 	db	10
   198  000832  00                 	db	0
   199  000833                     STR_5:
   200  000833  0D                 	db	13
   201  000834  0A                 	db	10
   202  000835  45                 	db	69	;'E'
   203  000836  23                 	db	35
   204  000837  31                 	db	49	;'1'
   205  000838  33                 	db	51	;'3'
   206  000839  0D                 	db	13
   207  00083A  0A                 	db	10
   208  00083B  00                 	db	0
   209  00083C                     STR_6:
   210  00083C  0D                 	db	13
   211  00083D  0A                 	db	10
   212  00083E  45                 	db	69	;'E'
   213  00083F  23                 	db	35
   214  000840  31                 	db	49	;'1'
   215  000841  34                 	db	52	;'4'
   216  000842  0D                 	db	13
   217  000843  0A                 	db	10
   218  000844  00                 	db	0
   219  000845                     STR_1:
   220  000845  0D                 	db	13
   221  000846  0A                 	db	10
   222  000847  58                 	db	88	;'X'
   223  000848  30                 	db	48	;'0'
   224  000849  0D                 	db	13
   225  00084A  0A                 	db	10
   226  00084B  00                 	db	0
   227  0000                     
   228                           ; #config settings
   229  00084C  00                 	db	0	; dummy byte at the end
   230  0000                     
   231                           	psect	cinit
   232  0039D0                     __pcinit:
   233                           	opt stack 0
   234  0039D0                     start_initialization:
   235                           	opt stack 0
   236  0039D0                     __initialization:
   237                           	opt stack 0
   238                           
   239                           ; Clear objects allocated to BIGRAM (576 bytes)
   240  0039D0  EE01  F0FC         	lfsr	0,__pbssBIGRAM
   241  0039D4  EE12 F040          	lfsr	1,576
   242  0039D8                     clear_0:
   243  0039D8  6AEE               	clrf	postinc0,c
   244  0039DA  50E5               	movf	postdec1,w,c
   245  0039DC  50E1               	movf	fsr1l,w,c
   246  0039DE  E1FC               	bnz	clear_0
   247  0039E0  50E2               	movf	fsr1h,w,c
   248  0039E2  E1FA               	bnz	clear_0
   249                           
   250                           ; Clear objects allocated to BANK1 (252 bytes)
   251  0039E4  EE01  F000         	lfsr	0,__pbssBANK1
   252  0039E8  0EFC               	movlw	252
   253  0039EA                     clear_1:
   254  0039EA  6AEE               	clrf	postinc0,c
   255  0039EC  06E8               	decf	wreg,f,c
   256  0039EE  E1FD               	bnz	clear_1
   257                           
   258                           ; Clear objects allocated to BANK0 (48 bytes)
   259  0039F0  EE00  F060         	lfsr	0,__pbssBANK0
   260  0039F4  0E30               	movlw	48
   261  0039F6                     clear_2:
   262  0039F6  6AEE               	clrf	postinc0,c
   263  0039F8  06E8               	decf	wreg,f,c
   264  0039FA  E1FD               	bnz	clear_2
   265                           
   266                           ; Clear objects allocated to COMRAM (31 bytes)
   267  0039FC  EE00  F021         	lfsr	0,__pbssCOMRAM
   268  003A00  0E1F               	movlw	31
   269  003A02                     clear_3:
   270  003A02  6AEE               	clrf	postinc0,c
   271  003A04  06E8               	decf	wreg,f,c
   272  003A06  E1FD               	bnz	clear_3
   273                           
   274                           ; Initialize objects allocated to BANK0 (10 bytes)
   275                           ; load TBLPTR registers with __pidataBANK0
   276  003A08  0E08               	movlw	low __pidataBANK0
   277  003A0A  6EF6               	movwf	tblptrl,c
   278  003A0C  0E3D               	movlw	high __pidataBANK0
   279  003A0E  6EF7               	movwf	tblptrh,c
   280  003A10  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   281  003A12  6EF8               	movwf	tblptru,c
   282  003A14  EE00  F0BD         	lfsr	0,__pdataBANK0
   283  003A18  EE10 F00A          	lfsr	1,10
   284  003A1C                     copy_data0:
   285  003A1C  0009               	tblrd		*+
   286  003A1E  CFF5 FFEE          	movff	tablat,postinc0
   287  003A22  50E5               	movf	postdec1,w,c
   288  003A24  50E1               	movf	fsr1l,w,c
   289  003A26  E1FA               	bnz	copy_data0
   290  003A28                     end_of_initialization:
   291                           	opt stack 0
   292  003A28                     __end_of__initialization:
   293                           	opt stack 0
   294  003A28  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   295  003A2A  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   296  003A2C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   297  003A2E  6EF8               	movwf	tblptru,c
   298  003A30  0100               	movlb	0
   299  003A32  EFAE  F01C         	goto	_main	;jump to C main() function
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           postdec1	equ	0xFE5
   307                           fsr1h	equ	0xFE2
   308                           fsr1l	equ	0xFE1
   309                           
   310                           	psect	bssCOMRAM
   311  000021                     __pbssCOMRAM:
   312                           	opt stack 0
   313  000021                     _Green_Led_Counter:
   314                           	opt stack 0
   315  000021                     	ds	2
   316  000023                     _Red_Led_Counter:
   317                           	opt stack 0
   318  000023                     	ds	2
   319  000025                     _Button_Contact_Counter_LB:
   320                           	opt stack 0
   321  000025                     	ds	1
   322  000026                     _Button_Contact_Counter_LF:
   323                           	opt stack 0
   324  000026                     	ds	1
   325  000027                     _Button_Contact_Counter_Middle:
   326                           	opt stack 0
   327  000027                     	ds	1
   328  000028                     _Button_Contact_Counter_RB:
   329                           	opt stack 0
   330  000028                     	ds	1
   331  000029                     _Button_Contact_Counter_RF:
   332                           	opt stack 0
   333  000029                     	ds	1
   334  00002A                     _Button_Contact_Counter_Start:
   335                           	opt stack 0
   336  00002A                     	ds	1
   337  00002B                     _Button_Contact_Counter_Stop:
   338                           	opt stack 0
   339  00002B                     	ds	1
   340  00002C                     _Reed_Contact_LB_Counter:
   341                           	opt stack 0
   342  00002C                     	ds	1
   343  00002D                     _Reed_Contact_LF_Counter:
   344                           	opt stack 0
   345  00002D                     	ds	1
   346  00002E                     _Reed_Contact_LMD_Counter:
   347                           	opt stack 0
   348  00002E                     	ds	1
   349  00002F                     _Reed_Contact_LMU_Counter:
   350                           	opt stack 0
   351  00002F                     	ds	1
   352  000030                     _Reed_Contact_RB_Counter:
   353                           	opt stack 0
   354  000030                     	ds	1
   355  000031                     _Reed_Contact_RF_Counter:
   356                           	opt stack 0
   357  000031                     	ds	1
   358  000032                     _Reed_Contact_RMD_Counter:
   359                           	opt stack 0
   360  000032                     	ds	1
   361  000033                     _Reed_Contact_RMU_Counter:
   362                           	opt stack 0
   363  000033                     	ds	1
   364  000034                     _Switch_Activate_Controls:
   365                           	opt stack 0
   366  000034                     	ds	1
   367  000035                     _Switch_Adjust_LB:
   368                           	opt stack 0
   369  000035                     	ds	1
   370  000036                     _Switch_Adjust_LF:
   371                           	opt stack 0
   372  000036                     	ds	1
   373  000037                     _Switch_Adjust_RB:
   374                           	opt stack 0
   375  000037                     	ds	1
   376  000038                     _Switch_Adjust_RF:
   377                           	opt stack 0
   378  000038                     	ds	1
   379  000039                     _TrSwitch:
   380                           	opt stack 0
   381  000039                     	ds	1
   382  00003A                     _eusart1RxCount:
   383                           	opt stack 0
   384  00003A                     	ds	1
   385  00003B                     _eusart1RxHead:
   386                           	opt stack 0
   387  00003B                     	ds	1
   388  00003C                     _eusart1RxTail:
   389                           	opt stack 0
   390  00003C                     	ds	1
   391  00003D                     _eusart1TxBufferRemaining:
   392                           	opt stack 0
   393  00003D                     	ds	1
   394  00003E                     _eusart1TxHead:
   395                           	opt stack 0
   396  00003E                     	ds	1
   397  00003F                     _eusart1TxTail:
   398                           	opt stack 0
   399  00003F                     	ds	1
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           postdec1	equ	0xFE5
   407                           fsr1h	equ	0xFE2
   408                           fsr1l	equ	0xFE1
   409                           
   410                           	psect	bssBANK0
   411  000060                     __pbssBANK0:
   412                           	opt stack 0
   413  000060                     Junction@Junction_Switch_Time:
   414                           	opt stack 0
   415  000060                     	ds	2
   416  000062                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   417                           	opt stack 0
   418  000062                     	ds	2
   419  000064                     Train_Move_Left_Start@Train_Move_Wait_Time:
   420                           	opt stack 0
   421  000064                     	ds	2
   422  000066                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   423                           	opt stack 0
   424  000066                     	ds	2
   425  000068                     Train_Move_Right_Start@Train_Move_Wait_Time:
   426                           	opt stack 0
   427  000068                     	ds	2
   428  00006A                     _Activate_Controls_Counter:
   429                           	opt stack 0
   430  00006A                     	ds	2
   431  00006C                     _Adjust_Counter:
   432                           	opt stack 0
   433  00006C                     	ds	2
   434  00006E                     _Led1_Counter:
   435                           	opt stack 0
   436  00006E                     	ds	2
   437  000070                     _Mountain_Delay_Counter:
   438                           	opt stack 0
   439  000070                     	ds	2
   440  000072                     _Train_Move_Pwm_Count:
   441                           	opt stack 0
   442  000072                     	ds	2
   443  000074                     _Train_Move_Pwm_Fast_Count:
   444                           	opt stack 0
   445  000074                     	ds	2
   446  000076                     _pData:
   447                           	opt stack 0
   448  000076                     	ds	2
   449  000078                     _pLen:
   450                           	opt stack 0
   451  000078                     	ds	2
   452  00007A                     _Message_To_Translate:
   453                           	opt stack 0
   454  00007A                     	ds	1
   455  00007B                     _Received_Data:
   456                           	opt stack 0
   457  00007B                     	ds	1
   458  00007C                     _RxSwitch:
   459                           	opt stack 0
   460  00007C                     	ds	1
   461  00007D                     _Stop_Program:
   462                           	opt stack 0
   463  00007D                     	ds	1
   464  00007E                     _Switch_Init:
   465                           	opt stack 0
   466  00007E                     	ds	1
   467  00007F                     _Switch_Junction:
   468                           	opt stack 0
   469  00007F                     	ds	1
   470  000080                     _Switch_Main:
   471                           	opt stack 0
   472  000080                     	ds	1
   473  000081                     _Switch_Moutain:
   474                           	opt stack 0
   475  000081                     	ds	1
   476  000082                     _Switch_Program:
   477                           	opt stack 0
   478  000082                     	ds	1
   479  000083                     _Switch_Train_Move:
   480                           	opt stack 0
   481  000083                     	ds	1
   482  000084                     _Switch_Train_Path:
   483                           	opt stack 0
   484  000084                     	ds	1
   485  000085                     _Update_State_Machine:
   486                           	opt stack 0
   487  000085                     	ds	1
   488  000086                     _Data:
   489                           	opt stack 0
   490  000086                     	ds	10
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           postdec1	equ	0xFE5
   498                           fsr1h	equ	0xFE2
   499                           fsr1l	equ	0xFE1
   500                           
   501                           	psect	dataBANK0
   502  0000BD                     __pdataBANK0:
   503                           	opt stack 0
   504  0000BD                     Junction@Return_Val:
   505                           	opt stack 0
   506  0000BD                     	ds	1
   507  0000BE                     Left_Mountain_From_The_Left@Return_Val:
   508                           	opt stack 0
   509  0000BE                     	ds	1
   510  0000BF                     Left_Mountain_From_The_Right@Return_Val:
   511                           	opt stack 0
   512  0000BF                     	ds	1
   513  0000C0                     Right_Mountain_From_The_Left@Return_Val:
   514                           	opt stack 0
   515  0000C0                     	ds	1
   516  0000C1                     Right_Mountain_From_The_Right@Return_Val:
   517                           	opt stack 0
   518  0000C1                     	ds	1
   519  0000C2                     Train_Move_Left_Brake@Return_Val:
   520                           	opt stack 0
   521  0000C2                     	ds	1
   522  0000C3                     Train_Move_Left_Start@Return_Val:
   523                           	opt stack 0
   524  0000C3                     	ds	1
   525  0000C4                     Train_Move_Right_Brake@Return_Val:
   526                           	opt stack 0
   527  0000C4                     	ds	1
   528  0000C5                     Train_Move_Right_Start@Return_Val:
   529                           	opt stack 0
   530  0000C5                     	ds	1
   531  0000C6                     Train_Path@Return_Val:
   532                           	opt stack 0
   533  0000C6                     	ds	1
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1h	equ	0xFE2
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	bssBANK1
   545  000100                     __pbssBANK1:
   546                           	opt stack 0
   547  000100                     _eusart1RxBuffer:
   548                           	opt stack 0
   549  000100                     	ds	126
   550  00017E                     _eusart1TxBuffer:
   551                           	opt stack 0
   552  00017E                     	ds	126
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1h	equ	0xFE2
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	bssBIGRAM
   564  0001FC                     __pbssBIGRAM:
   565                           	opt stack 0
   566  0001FC                     _API:
   567                           	opt stack 0
   568  0001FC                     	ds	288
   569  00031C                     _API_RW:
   570                           	opt stack 0
   571  00031C                     	ds	288
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1h	equ	0xFE2
   580                           fsr1l	equ	0xFE1
   581                           
   582                           	psect	cstackBANK0
   583  000090                     __pcstackBANK0:
   584                           	opt stack 0
   585  000090                     ?_GETxAPIxVAL:
   586                           	opt stack 0
   587  000090                     ?_GETxAPIxRW:
   588                           	opt stack 0
   589  000090                     ?___wmul:
   590                           	opt stack 0
   591  000090                     ?___lwdiv:
   592                           	opt stack 0
   593  000090                     _isdigit$1860:
   594                           	opt stack 0
   595  000090                     EUSART1_Initialize@baud_rate:
   596                           	opt stack 0
   597  000090                     APIxInitialize@i:
   598                           	opt stack 0
   599  000090                     ___wmul@multiplier:
   600                           	opt stack 0
   601  000090                     ___lwdiv@dividend:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x0
   605  000090                     	ds	1
   606  000091                     isdigit@c:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x1
   610  000091                     	ds	1
   611  000092                     SetDCPWM1@dutycycle:
   612                           	opt stack 0
   613  000092                     ___wmul@multiplicand:
   614                           	opt stack 0
   615  000092                     ___lwdiv@divisor:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x2
   619  000092                     	ds	2
   620  000094                     ??_SetDCPWM1:
   621  000094                     ___lwdiv@counter:
   622                           	opt stack 0
   623  000094                     ___wmul@product:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x4
   627  000094                     	ds	1
   628  000095                     ___lwdiv@quotient:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x5
   632  000095                     	ds	1
   633  000096                     ?_atoi:
   634                           	opt stack 0
   635  000096                     SetDCPWM1@DCycle:
   636                           	opt stack 0
   637  000096                     atoi@s:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x6
   641  000096                     	ds	1
   642  000097                     ?___lwmod:
   643                           	opt stack 0
   644  000097                     ___lwmod@dividend:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x7
   648  000097                     	ds	1
   649  000098                     ??_atoi:
   650                           
   651                           ; 1 bytes @ 0x8
   652  000098                     	ds	1
   653  000099                     ___lwmod@divisor:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x9
   657  000099                     	ds	1
   658  00009A                     atoi@sign:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0xA
   662  00009A                     	ds	1
   663  00009B                     ?_printf:
   664                           	opt stack 0
   665  00009B                     printf@f:
   666                           	opt stack 0
   667  00009B                     atoi@a:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0xB
   671  00009B                     	ds	6
   672  0000A1                     ??_printf:
   673                           
   674                           ; 1 bytes @ 0x11
   675  0000A1                     	ds	1
   676  0000A2                     printf@ap:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x12
   680  0000A2                     	ds	2
   681  0000A4                     printf@flag:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x14
   685  0000A4                     	ds	1
   686  0000A5                     printf@prec:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x15
   690  0000A5                     	ds	1
   691  0000A6                     printf@val:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x16
   695  0000A6                     	ds	2
   696  0000A8                     printf@c:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x18
   700  0000A8                     	ds	1
   701  0000A9                     SENDxMESSAGE@value:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x19
   705  0000A9                     	ds	2
   706  0000AB                     SENDxMESSAGE@index:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x1B
   710  0000AB                     	ds	1
   711  0000AC                     SETxAPIxVAL@value:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x1C
   715  0000AC                     	ds	2
   716  0000AE                     
   717                           ; 1 bytes @ 0x1E
   718  0000AE                     	ds	2
   719  0000B0                     SETxAPIxVAL@index:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x20
   723  0000B0                     	ds	1
   724  0000B1                     ??_Debounce_Inputs:
   725  0000B1                     Junction@Straight_Bend:
   726                           	opt stack 0
   727  0000B1                     TranslateMessage@Value:
   728                           	opt stack 0
   729  0000B1                     SETxPWM@speed:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x21
   733  0000B1                     	ds	1
   734  0000B2                     Junction@Junction_Left_Right:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x22
   738  0000B2                     	ds	1
   739  0000B3                     SETxPWM@direction:
   740                           	opt stack 0
   741  0000B3                     TranslateMessage@Index:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x23
   745  0000B3                     	ds	1
   746  0000B4                     ??_SETxPWM:
   747                           
   748                           ; 1 bytes @ 0x24
   749  0000B4                     	ds	1
   750  0000B5                     ??_READxRECEIVEDxMESSAGE:
   751                           
   752                           ; 1 bytes @ 0x25
   753  0000B5                     	ds	1
   754  0000B6                     SETxPWM@pwm_speed:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x26
   758  0000B6                     	ds	2
   759  0000B8                     Right_Mountain_From_The_Right@rc:
   760                           	opt stack 0
   761  0000B8                     Left_Mountain_From_The_Right@rc:
   762                           	opt stack 0
   763  0000B8                     Left_Mountain_From_The_Left@rc:
   764                           	opt stack 0
   765  0000B8                     Right_Mountain_From_The_Left@rc:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x28
   769  0000B8                     	ds	1
   770  0000B9                     Train_Path@To:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x29
   774  0000B9                     	ds	1
   775  0000BA                     Train_Path@From:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x2A
   779  0000BA                     	ds	1
   780  0000BB                     ??_Update_StateMchn:
   781                           
   782                           ; 1 bytes @ 0x2B
   783  0000BB                     	ds	2
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1h	equ	0xFE2
   792                           fsr1l	equ	0xFE1
   793                           
   794                           	psect	cstackCOMRAM
   795  000001                     __pcstackCOMRAM:
   796                           	opt stack 0
   797  000001                     ??_tc_high:
   798  000001                     
   799                           ; 1 bytes @ 0x0
   800  000001                     	ds	14
   801  00000F                     ??_tc_low:
   802                           
   803                           ; 1 bytes @ 0xE
   804  00000F                     	ds	17
   805  000020                     ??_isdigit:
   806  000020                     EUSART1_Read@readValue:
   807                           	opt stack 0
   808  000020                     putch@data:
   809                           	opt stack 0
   810  000020                     GETxAPIxRW@index:
   811                           	opt stack 0
   812  000020                     GETxAPIxVAL@index:
   813                           	opt stack 0
   814  000020                     Green_Led@Operation:
   815                           	opt stack 0
   816  000020                     Red_Led@Operation:
   817                           	opt stack 0
   818  000020                     ___lwmod@counter:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x1F
   822  000020                     	ds	1
   823  000021                     tblptru	equ	0xFF8
   824                           tblptrh	equ	0xFF7
   825                           tblptrl	equ	0xFF6
   826                           tablat	equ	0xFF5
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           postdec1	equ	0xFE5
   830                           fsr1h	equ	0xFE2
   831                           fsr1l	equ	0xFE1
   832                           
   833                           ; 1 bytes @ 0x20
   834 ;;
   835 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   836 ;;
   837 ;; *************** function _main *****************
   838 ;; Defined at:
   839 ;;		line 105 in file "../Main.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;		None
   844 ;; Return value:  Size  Location     Type
   845 ;;                  1    wreg      void 
   846 ;; Registers used:
   847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   853 ;;      Params:         0       0       0       0       0       0       0       0       0
   854 ;;      Locals:         0       0       0       0       0       0       0       0       0
   855 ;;      Temps:          0       0       0       0       0       0       0       0       0
   856 ;;      Totals:         0       0       0       0       0       0       0       0       0
   857 ;;Total ram usage:        0 bytes
   858 ;; Hardware stack levels required when called:   11
   859 ;; This function calls:
   860 ;;		_APIxInitialize
   861 ;;		_EUSART1_Initialize
   862 ;;		_Init_Pwm
   863 ;;		_Init_Timers
   864 ;;		_READxRECEIVEDxMESSAGE
   865 ;;		_Update_StateMchn
   866 ;; This function is called by:
   867 ;;		Startup code after reset
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text0
   872  00395C                     __ptext0:
   873                           	opt stack 0
   874  00395C                     _main:
   875                           	opt stack 20
   876                           
   877                           ;Main.c: 107: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
   878                           
   879                           ;incstack = 0
   880  00395C  6892               	setf	3986,c	;volatile
   881  00395E  6893               	setf	3987,c	;volatile
   882  003960  6894               	setf	3988,c	;volatile
   883  003962  6895               	setf	3989,c	;volatile
   884  003964  6896               	setf	3990,c	;volatile
   885                           
   886                           ;Main.c: 108: ADCON1=0x0F;
   887  003966  0E0F               	movlw	15
   888  003968  6EC1               	movwf	4033,c	;volatile
   889                           
   890                           ;Main.c: 109: CMCON=0x07;
   891  00396A  0E07               	movlw	7
   892  00396C  6EB4               	movwf	4020,c	;volatile
   893                           
   894                           ;Main.c: 110: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
   895  00396E  9892               	bcf	3986,4,c	;volatile
   896  003970  9A95               	bcf	3989,5,c	;volatile
   897  003972  9C95               	bcf	3989,6,c	;volatile
   898                           
   899                           ;Main.c: 111: PORTAbits.RA4 = 0;
   900  003974  9880               	bcf	3968,4,c	;volatile
   901                           
   902                           ;Main.c: 112: PORTDbits.RD6 = 0;
   903  003976  9C83               	bcf	3971,6,c	;volatile
   904                           
   905                           ;Main.c: 113: PORTDbits.RD5 = 0;
   906  003978  9A83               	bcf	3971,5,c	;volatile
   907                           
   908                           ;Main.c: 115: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
   909  00397A  9092               	bcf	3986,0,c	;volatile
   910  00397C  9292               	bcf	3986,1,c	;volatile
   911  00397E  9492               	bcf	3986,2,c	;volatile
   912  003980  9692               	bcf	3986,3,c	;volatile
   913                           
   914                           ;Main.c: 116: PORTAbits.RA3 = 0;
   915  003982  9680               	bcf	3968,3,c	;volatile
   916                           
   917                           ;Main.c: 117: PORTAbits.RA2 = 0;
   918  003984  9480               	bcf	3968,2,c	;volatile
   919                           
   920                           ;Main.c: 118: PORTAbits.RA1 = 0;
   921  003986  9280               	bcf	3968,1,c	;volatile
   922                           
   923                           ;Main.c: 119: PORTAbits.RA0 = 0;
   924  003988  9080               	bcf	3968,0,c	;volatile
   925                           
   926                           ;Main.c: 121: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
   927  00398A  8495               	bsf	3989,2,c	;volatile
   928  00398C  8695               	bsf	3989,3,c	;volatile
   929  00398E  8095               	bsf	3989,0,c	;volatile
   930  003990  8295               	bsf	3989,1,c	;volatile
   931  003992  8294               	bsf	3988,1,c	;volatile
   932  003994  8895               	bsf	3989,4,c	;volatile
   933  003996  8096               	bsf	3990,0,c	;volatile
   934  003998  8296               	bsf	3990,1,c	;volatile
   935                           
   936                           ;Main.c: 122: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
   937  00399A  8093               	bsf	3987,0,c	;volatile
   938  00399C  8293               	bsf	3987,1,c	;volatile
   939  00399E  8493               	bsf	3987,2,c	;volatile
   940  0039A0  8693               	bsf	3987,3,c	;volatile
   941  0039A2  8893               	bsf	3987,4,c	;volatile
   942  0039A4  8A93               	bsf	3987,5,c	;volatile
   943  0039A6  8E95               	bsf	3989,7,c	;volatile
   944                           
   945                           ;Main.c: 123: APIxInitialize();
   946  0039A8  ECC4  F00D         	call	_APIxInitialize	;wreg free
   947                           
   948                           ;Main.c: 124: Init_Pwm();
   949  0039AC  EC44  F01E         	call	_Init_Pwm	;wreg free
   950                           
   951                           ;Main.c: 125: Init_Timers();
   952  0039B0  EC72  F01E         	call	_Init_Timers	;wreg free
   953                           
   954                           ;Main.c: 126: EUSART1_Initialize();
   955  0039B4  EC73  F01D         	call	_EUSART1_Initialize	;wreg free
   956  0039B8                     l8645:
   957                           
   958                           ;Main.c: 129: {
   959                           ;Main.c: 130: if (1 == Update_State_Machine)
   960  0039B8  0100               	movlb	0	; () banked
   961  0039BA  0585               	decf	_Update_State_Machine& (0+255),w,b
   962  0039BC  A4D8               	btfss	status,2,c
   963  0039BE  D005               	goto	l8651
   964                           
   965                           ; BSR set to: 0
   966                           ;Main.c: 131: {
   967                           ;Main.c: 132: Update_State_Machine = 0;
   968  0039C0  0E00               	movlw	0
   969  0039C2  0100               	movlb	0	; () banked
   970  0039C4  6F85               	movwf	_Update_State_Machine& (0+255),b
   971                           
   972                           ; BSR set to: 0
   973                           ;Main.c: 133: Update_StateMchn();
   974  0039C6  EC27  F004         	call	_Update_StateMchn	;wreg free
   975  0039CA                     l8651:
   976                           
   977                           ;Main.c: 134: }
   978                           ;Main.c: 136: READxRECEIVEDxMESSAGE();
   979  0039CA  EC85  F013         	call	_READxRECEIVEDxMESSAGE	;wreg free
   980  0039CE  D7F4               	goto	l8645
   981  0039D0                     __end_of_main:
   982                           	opt stack 0
   983                           tblptru	equ	0xFF8
   984                           tblptrh	equ	0xFF7
   985                           tblptrl	equ	0xFF6
   986                           tablat	equ	0xFF5
   987                           postinc0	equ	0xFEE
   988                           wreg	equ	0xFE8
   989                           postdec1	equ	0xFE5
   990                           fsr1h	equ	0xFE2
   991                           fsr1l	equ	0xFE1
   992                           status	equ	0xFD8
   993                           
   994 ;; *************** function _Update_StateMchn *****************
   995 ;; Defined at:
   996 ;;		line 40 in file "../State_Mchn.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1010 ;;      Params:         0       0       0       0       0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1012 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1013 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1014 ;;Total ram usage:        2 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:   10
  1017 ;; This function calls:
  1018 ;;		_Debounce_Inputs
  1019 ;;		_Eeprom_Store
  1020 ;;		_GETxAPIxVAL
  1021 ;;		_Green_Led
  1022 ;;		_Junction
  1023 ;;		_Red_Led
  1024 ;;		_SETxAPIxVAL
  1025 ;;		_Train_Path
  1026 ;; This function is called by:
  1027 ;;		_main
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text1
  1032  00084E                     __ptext1:
  1033                           	opt stack 0
  1034  00084E                     _Update_StateMchn:
  1035                           	opt stack 20
  1036                           
  1037                           ;State_Mchn.c: 42: if (GETxAPIxVAL(72)){
  1038                           
  1039                           ;incstack = 0
  1040  00084E  0E48               	movlw	72
  1041  000850  EC56  F01E         	call	_GETxAPIxVAL
  1042  000854  0100               	movlb	0	; () banked
  1043  000856  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1044  000858  0100               	movlb	0	; () banked
  1045  00085A  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1046  00085C  B4D8               	btfsc	status,2,c
  1047  00085E  D009               	goto	l164
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;State_Mchn.c: 43: SETxAPIxVAL(72, 0);
  1051  000860  0E00               	movlw	0
  1052  000862  0100               	movlb	0	; () banked
  1053  000864  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1054  000866  0E00               	movlw	0
  1055  000868  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1056  00086A  0E48               	movlw	72
  1057  00086C  EC49  F01D         	call	_SETxAPIxVAL
  1058  000870  00FF               	reset		;# 
  1059  000872                     l164:
  1060                           
  1061                           ;State_Mchn.c: 45: }
  1062                           ;State_Mchn.c: 47: Debounce_Inputs();
  1063  000872  EC0C  F00A         	call	_Debounce_Inputs	;wreg free
  1064                           
  1065                           ;State_Mchn.c: 49: switch (Switch_Main)
  1066  000876  EFF8  F009         	goto	l8469
  1067  00087A                     l7965:
  1068                           
  1069                           ;State_Mchn.c: 52: if (GETxAPIxVAL(74)){
  1070  00087A  0E4A               	movlw	74
  1071  00087C  EC56  F01E         	call	_GETxAPIxVAL
  1072  000880  0100               	movlb	0	; () banked
  1073  000882  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1074  000884  0100               	movlb	0	; () banked
  1075  000886  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1076  000888  B4D8               	btfsc	status,2,c
  1077  00088A  D014               	goto	l7971
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;State_Mchn.c: 53: if(Junction(0, 1) == 0){
  1081  00088C  0E01               	movlw	1
  1082  00088E  0100               	movlb	0	; () banked
  1083  000890  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  1084  000892  0E00               	movlw	0
  1085  000894  EC2A  F016         	call	_Junction
  1086  000898  0900               	iorlw	0
  1087  00089A  A4D8               	btfss	status,2,c
  1088  00089C  EF04  F00A         	goto	l8471
  1089                           
  1090                           ;State_Mchn.c: 54: SETxAPIxVAL(74, 0);
  1091  0008A0  0E00               	movlw	0
  1092  0008A2  0100               	movlb	0	; () banked
  1093  0008A4  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1094  0008A6  0E00               	movlw	0
  1095  0008A8  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1096  0008AA  0E4A               	movlw	74
  1097  0008AC  EC49  F01D         	call	_SETxAPIxVAL
  1098                           
  1099                           ;State_Mchn.c: 55: }
  1100                           ;State_Mchn.c: 56: }
  1101  0008B0  EF04  F00A         	goto	l8471
  1102  0008B4                     l7971:
  1103                           
  1104                           ;State_Mchn.c: 57: else if (GETxAPIxVAL(73)){
  1105  0008B4  0E49               	movlw	73
  1106  0008B6  EC56  F01E         	call	_GETxAPIxVAL
  1107  0008BA  0100               	movlb	0	; () banked
  1108  0008BC  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1109  0008BE  0100               	movlb	0	; () banked
  1110  0008C0  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1111  0008C2  B4D8               	btfsc	status,2,c
  1112  0008C4  D014               	goto	l7977
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;State_Mchn.c: 58: if(Junction(0, 0) == 0){
  1116  0008C6  0E00               	movlw	0
  1117  0008C8  0100               	movlb	0	; () banked
  1118  0008CA  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  1119  0008CC  0E00               	movlw	0
  1120  0008CE  EC2A  F016         	call	_Junction
  1121  0008D2  0900               	iorlw	0
  1122  0008D4  A4D8               	btfss	status,2,c
  1123  0008D6  EF04  F00A         	goto	l8471
  1124                           
  1125                           ;State_Mchn.c: 59: SETxAPIxVAL(73, 0);
  1126  0008DA  0E00               	movlw	0
  1127  0008DC  0100               	movlb	0	; () banked
  1128  0008DE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1129  0008E0  0E00               	movlw	0
  1130  0008E2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1131  0008E4  0E49               	movlw	73
  1132  0008E6  EC49  F01D         	call	_SETxAPIxVAL
  1133                           
  1134                           ;State_Mchn.c: 60: }
  1135                           ;State_Mchn.c: 61: }
  1136  0008EA  EF04  F00A         	goto	l8471
  1137  0008EE                     l7977:
  1138                           
  1139                           ;State_Mchn.c: 62: else if (GETxAPIxVAL(76)){
  1140  0008EE  0E4C               	movlw	76
  1141  0008F0  EC56  F01E         	call	_GETxAPIxVAL
  1142  0008F4  0100               	movlb	0	; () banked
  1143  0008F6  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1144  0008F8  0100               	movlb	0	; () banked
  1145  0008FA  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1146  0008FC  B4D8               	btfsc	status,2,c
  1147  0008FE  D014               	goto	l7983
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;State_Mchn.c: 63: if(Junction(1, 1) == 0){
  1151  000900  0E01               	movlw	1
  1152  000902  0100               	movlb	0	; () banked
  1153  000904  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  1154  000906  0E01               	movlw	1
  1155  000908  EC2A  F016         	call	_Junction
  1156  00090C  0900               	iorlw	0
  1157  00090E  A4D8               	btfss	status,2,c
  1158  000910  EF04  F00A         	goto	l8471
  1159                           
  1160                           ;State_Mchn.c: 64: SETxAPIxVAL(76, 0);
  1161  000914  0E00               	movlw	0
  1162  000916  0100               	movlb	0	; () banked
  1163  000918  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1164  00091A  0E00               	movlw	0
  1165  00091C  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1166  00091E  0E4C               	movlw	76
  1167  000920  EC49  F01D         	call	_SETxAPIxVAL
  1168                           
  1169                           ;State_Mchn.c: 65: }
  1170                           ;State_Mchn.c: 66: }
  1171  000924  EF04  F00A         	goto	l8471
  1172  000928                     l7983:
  1173                           
  1174                           ;State_Mchn.c: 67: else if (GETxAPIxVAL(75)){
  1175  000928  0E4B               	movlw	75
  1176  00092A  EC56  F01E         	call	_GETxAPIxVAL
  1177  00092E  0100               	movlb	0	; () banked
  1178  000930  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1179  000932  0100               	movlb	0	; () banked
  1180  000934  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1181  000936  B4D8               	btfsc	status,2,c
  1182  000938  D014               	goto	l7989
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;State_Mchn.c: 68: if(Junction(1, 0) == 0){
  1186  00093A  0E00               	movlw	0
  1187  00093C  0100               	movlb	0	; () banked
  1188  00093E  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  1189  000940  0E01               	movlw	1
  1190  000942  EC2A  F016         	call	_Junction
  1191  000946  0900               	iorlw	0
  1192  000948  A4D8               	btfss	status,2,c
  1193  00094A  EF04  F00A         	goto	l8471
  1194                           
  1195                           ;State_Mchn.c: 69: SETxAPIxVAL(75, 0);
  1196  00094E  0E00               	movlw	0
  1197  000950  0100               	movlb	0	; () banked
  1198  000952  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1199  000954  0E00               	movlw	0
  1200  000956  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1201  000958  0E4B               	movlw	75
  1202  00095A  EC49  F01D         	call	_SETxAPIxVAL
  1203                           
  1204                           ;State_Mchn.c: 70: }
  1205                           ;State_Mchn.c: 71: }
  1206  00095E  EF04  F00A         	goto	l8471
  1207  000962                     l7989:
  1208                           
  1209                           ;State_Mchn.c: 72: else if (GETxAPIxVAL(77)){
  1210  000962  0E4D               	movlw	77
  1211  000964  EC56  F01E         	call	_GETxAPIxVAL
  1212  000968  0100               	movlb	0	; () banked
  1213  00096A  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1214  00096C  0100               	movlb	0	; () banked
  1215  00096E  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1216  000970  B4D8               	btfsc	status,2,c
  1217  000972  D012               	goto	l7993
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;State_Mchn.c: 73: SETxAPIxVAL(69, 1);
  1221  000974  0E00               	movlw	0
  1222  000976  0100               	movlb	0	; () banked
  1223  000978  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1224  00097A  0E01               	movlw	1
  1225  00097C  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1226  00097E  0E45               	movlw	69
  1227  000980  EC49  F01D         	call	_SETxAPIxVAL
  1228                           
  1229                           ;State_Mchn.c: 74: SETxAPIxVAL(77, 0);
  1230  000984  0E00               	movlw	0
  1231  000986  0100               	movlb	0	; () banked
  1232  000988  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1233  00098A  0E00               	movlw	0
  1234  00098C  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1235  00098E  0E4D               	movlw	77
  1236  000990  EC49  F01D         	call	_SETxAPIxVAL
  1237                           
  1238                           ;State_Mchn.c: 75: }
  1239  000994  EF04  F00A         	goto	l8471
  1240  000998                     l7993:
  1241                           
  1242                           ;State_Mchn.c: 76: else if (GETxAPIxVAL(78)){
  1243  000998  0E4E               	movlw	78
  1244  00099A  EC56  F01E         	call	_GETxAPIxVAL
  1245  00099E  0100               	movlb	0	; () banked
  1246  0009A0  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1247  0009A2  0100               	movlb	0	; () banked
  1248  0009A4  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1249  0009A6  B4D8               	btfsc	status,2,c
  1250  0009A8  D012               	goto	l7997
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;State_Mchn.c: 77: SETxAPIxVAL(69, 0);
  1254  0009AA  0E00               	movlw	0
  1255  0009AC  0100               	movlb	0	; () banked
  1256  0009AE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1257  0009B0  0E00               	movlw	0
  1258  0009B2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1259  0009B4  0E45               	movlw	69
  1260  0009B6  EC49  F01D         	call	_SETxAPIxVAL
  1261                           
  1262                           ;State_Mchn.c: 78: SETxAPIxVAL(78, 0);
  1263  0009BA  0E00               	movlw	0
  1264  0009BC  0100               	movlb	0	; () banked
  1265  0009BE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1266  0009C0  0E00               	movlw	0
  1267  0009C2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1268  0009C4  0E4E               	movlw	78
  1269  0009C6  EC49  F01D         	call	_SETxAPIxVAL
  1270                           
  1271                           ;State_Mchn.c: 79: }
  1272  0009CA  EF04  F00A         	goto	l8471
  1273  0009CE                     l7997:
  1274                           
  1275                           ;State_Mchn.c: 80: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1276  0009CE  0E44               	movlw	68
  1277  0009D0  EC56  F01E         	call	_GETxAPIxVAL
  1278  0009D4  C090  F0BB         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1279  0009D8  C091  F0BC         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1280  0009DC  0E4F               	movlw	79
  1281  0009DE  EC56  F01E         	call	_GETxAPIxVAL
  1282  0009E2  0100               	movlb	0	; () banked
  1283  0009E4  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1284  0009E6  0100               	movlb	0	; () banked
  1285  0009E8  19BB               	xorwf	??_Update_StateMchn& (0+255),w,b
  1286  0009EA  E106               	bnz	u8030
  1287  0009EC  0100               	movlb	0	; () banked
  1288  0009EE  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1289  0009F0  0100               	movlb	0	; () banked
  1290  0009F2  19BC               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1291  0009F4  B4D8               	btfsc	status,2,c
  1292  0009F6  D39B               	goto	l8313
  1293  0009F8                     u8030:
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;State_Mchn.c: 81: SETxAPIxVAL(68, GETxAPIxVAL(79));
  1297  0009F8  0E4F               	movlw	79
  1298  0009FA  EC56  F01E         	call	_GETxAPIxVAL
  1299  0009FE  C090  F0AC         	movff	?_GETxAPIxVAL,SETxAPIxVAL@value
  1300  000A02  C091  F0AD         	movff	?_GETxAPIxVAL+1,SETxAPIxVAL@value+1
  1301  000A06  0E44               	movlw	68
  1302  000A08  EC49  F01D         	call	_SETxAPIxVAL
  1303                           
  1304                           ;State_Mchn.c: 82: }
  1305  000A0C  EF04  F00A         	goto	l8471
  1306  000A10                     l8001:
  1307  000A10  0E00               	movlw	0
  1308  000A12  EC32  F01C         	call	_Green_Led
  1309                           
  1310                           ;State_Mchn.c: 88: Red_Led(0);
  1311  000A16  0E00               	movlw	0
  1312  000A18  ECF2  F01B         	call	_Red_Led
  1313                           
  1314                           ;State_Mchn.c: 89: Switch_Init = 1;
  1315  000A1C  0E01               	movlw	1
  1316  000A1E  D012               	goto	L1
  1317  000A20                     l8005:
  1318                           
  1319                           ; BSR set to: 0
  1320  000A20  0E23               	movlw	35
  1321  000A22  EC56  F01E         	call	_GETxAPIxVAL
  1322  000A26  0100               	movlb	0	; () banked
  1323  000A28  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1324  000A2A  0100               	movlb	0	; () banked
  1325  000A2C  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1326  000A2E  B4D8               	btfsc	status,2,c
  1327  000A30  D00D               	goto	l8011
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;State_Mchn.c: 93: {
  1331                           ;State_Mchn.c: 94: SETxAPIxVAL(39, 1);
  1332  000A32  0E00               	movlw	0
  1333  000A34  0100               	movlb	0	; () banked
  1334  000A36  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1335  000A38  0E01               	movlw	1
  1336  000A3A  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1337  000A3C  0E27               	movlw	39
  1338  000A3E  EC49  F01D         	call	_SETxAPIxVAL
  1339  000A42  D04B               	goto	l8033
  1340  000A44                     L1:
  1341  000A44  0100               	movlb	0	; () banked
  1342  000A46  6F7E               	movwf	_Switch_Init& (0+255),b
  1343                           
  1344                           ;State_Mchn.c: 96: break;
  1345  000A48  EF04  F00A         	goto	l8471
  1346  000A4C                     l8011:
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;State_Mchn.c: 97: }
  1350                           ;State_Mchn.c: 98: if(GETxAPIxVAL(36))
  1351  000A4C  0E24               	movlw	36
  1352  000A4E  EC56  F01E         	call	_GETxAPIxVAL
  1353  000A52  0100               	movlb	0	; () banked
  1354  000A54  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1355  000A56  0100               	movlb	0	; () banked
  1356  000A58  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1357  000A5A  B4D8               	btfsc	status,2,c
  1358  000A5C  D009               	goto	l8017
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;State_Mchn.c: 99: {
  1362                           ;State_Mchn.c: 100: SETxAPIxVAL(39, 2);
  1363  000A5E  0E00               	movlw	0
  1364  000A60  0100               	movlb	0	; () banked
  1365  000A62  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1366  000A64  0E02               	movlw	2
  1367  000A66  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1368  000A68  0E27               	movlw	39
  1369  000A6A  EC49  F01D         	call	_SETxAPIxVAL
  1370  000A6E  D035               	goto	l8033
  1371  000A70                     l8017:
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;State_Mchn.c: 103: }
  1375                           ;State_Mchn.c: 104: if(GETxAPIxVAL(37))
  1376  000A70  0E25               	movlw	37
  1377  000A72  EC56  F01E         	call	_GETxAPIxVAL
  1378  000A76  0100               	movlb	0	; () banked
  1379  000A78  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1380  000A7A  0100               	movlb	0	; () banked
  1381  000A7C  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1382  000A7E  B4D8               	btfsc	status,2,c
  1383  000A80  D009               	goto	l8023
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;State_Mchn.c: 105: {
  1387                           ;State_Mchn.c: 106: SETxAPIxVAL(39, 3);
  1388  000A82  0E00               	movlw	0
  1389  000A84  0100               	movlb	0	; () banked
  1390  000A86  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1391  000A88  0E03               	movlw	3
  1392  000A8A  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1393  000A8C  0E27               	movlw	39
  1394  000A8E  EC49  F01D         	call	_SETxAPIxVAL
  1395  000A92  D023               	goto	l8033
  1396  000A94                     l8023:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;State_Mchn.c: 109: }
  1400                           ;State_Mchn.c: 110: if(GETxAPIxVAL(38))
  1401  000A94  0E26               	movlw	38
  1402  000A96  EC56  F01E         	call	_GETxAPIxVAL
  1403  000A9A  0100               	movlb	0	; () banked
  1404  000A9C  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1405  000A9E  0100               	movlb	0	; () banked
  1406  000AA0  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1407  000AA2  B4D8               	btfsc	status,2,c
  1408  000AA4  D009               	goto	l8029
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;State_Mchn.c: 111: {
  1412                           ;State_Mchn.c: 112: SETxAPIxVAL(39, 4);
  1413  000AA6  0E00               	movlw	0
  1414  000AA8  0100               	movlb	0	; () banked
  1415  000AAA  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1416  000AAC  0E04               	movlw	4
  1417  000AAE  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1418  000AB0  0E27               	movlw	39
  1419  000AB2  EC49  F01D         	call	_SETxAPIxVAL
  1420  000AB6  D011               	goto	l8033
  1421  000AB8                     l8029:
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;State_Mchn.c: 115: }
  1425                           ;State_Mchn.c: 116: if(GETxAPIxVAL(34))
  1426  000AB8  0E22               	movlw	34
  1427  000ABA  EC56  F01E         	call	_GETxAPIxVAL
  1428  000ABE  0100               	movlb	0	; () banked
  1429  000AC0  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1430  000AC2  0100               	movlb	0	; () banked
  1431  000AC4  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1432  000AC6  B4D8               	btfsc	status,2,c
  1433  000AC8  D00A               	goto	l8035
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;State_Mchn.c: 117: {
  1437                           ;State_Mchn.c: 118: SETxAPIxVAL(39, 5);
  1438  000ACA  0E00               	movlw	0
  1439  000ACC  0100               	movlb	0	; () banked
  1440  000ACE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1441  000AD0  0E05               	movlw	5
  1442  000AD2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1443  000AD4  0E27               	movlw	39
  1444  000AD6  EC49  F01D         	call	_SETxAPIxVAL
  1445  000ADA                     l8033:
  1446                           
  1447                           ;State_Mchn.c: 119: Switch_Init = 2;
  1448  000ADA  0E02               	movlw	2
  1449  000ADC  D7B3               	goto	L1
  1450  000ADE                     l8035:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;State_Mchn.c: 121: }
  1454                           ;State_Mchn.c: 122: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1455  000ADE  0E27               	movlw	39
  1456  000AE0  EC56  F01E         	call	_GETxAPIxVAL
  1457  000AE4  0100               	movlb	0	; () banked
  1458  000AE6  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1459  000AE8  0100               	movlb	0	; () banked
  1460  000AEA  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1461  000AEC  B4D8               	btfsc	status,2,c
  1462  000AEE  D009               	goto	l8041
  1463                           
  1464                           ; BSR set to: 0
  1465  000AF0  0E28               	movlw	40
  1466  000AF2  EC56  F01E         	call	_GETxAPIxVAL
  1467  000AF6  0100               	movlb	0	; () banked
  1468  000AF8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1469  000AFA  0100               	movlb	0	; () banked
  1470  000AFC  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1471  000AFE  A4D8               	btfss	status,2,c
  1472  000B00  D0C7               	goto	l8103
  1473  000B02                     l8041:
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;State_Mchn.c: 125: }
  1477                           ;State_Mchn.c: 126: Switch_Init = 1;
  1478  000B02  0E01               	movlw	1
  1479  000B04  0100               	movlb	0	; () banked
  1480  000B06  6F7E               	movwf	_Switch_Init& (0+255),b
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;State_Mchn.c: 127: Green_Led(2);
  1484  000B08  0E02               	movlw	2
  1485  000B0A  EC32  F01C         	call	_Green_Led
  1486                           
  1487                           ;State_Mchn.c: 128: break;
  1488  000B0E  EF04  F00A         	goto	l8471
  1489  000B12                     l8045:
  1490  000B12  0E23               	movlw	35
  1491  000B14  EC56  F01E         	call	_GETxAPIxVAL
  1492  000B18  0100               	movlb	0	; () banked
  1493  000B1A  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1494  000B1C  0100               	movlb	0	; () banked
  1495  000B1E  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1496  000B20  A4D8               	btfss	status,2,c
  1497  000B22  D030               	goto	l8059
  1498                           
  1499                           ; BSR set to: 0
  1500  000B24  0E24               	movlw	36
  1501  000B26  EC56  F01E         	call	_GETxAPIxVAL
  1502  000B2A  0100               	movlb	0	; () banked
  1503  000B2C  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1504  000B2E  0100               	movlb	0	; () banked
  1505  000B30  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1506  000B32  A4D8               	btfss	status,2,c
  1507  000B34  D027               	goto	l8059
  1508                           
  1509                           ; BSR set to: 0
  1510  000B36  0E25               	movlw	37
  1511  000B38  EC56  F01E         	call	_GETxAPIxVAL
  1512  000B3C  0100               	movlb	0	; () banked
  1513  000B3E  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1514  000B40  0100               	movlb	0	; () banked
  1515  000B42  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1516  000B44  A4D8               	btfss	status,2,c
  1517  000B46  D01E               	goto	l8059
  1518                           
  1519                           ; BSR set to: 0
  1520  000B48  0E26               	movlw	38
  1521  000B4A  EC56  F01E         	call	_GETxAPIxVAL
  1522  000B4E  0100               	movlb	0	; () banked
  1523  000B50  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1524  000B52  0100               	movlb	0	; () banked
  1525  000B54  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1526  000B56  A4D8               	btfss	status,2,c
  1527  000B58  D015               	goto	l8059
  1528                           
  1529                           ; BSR set to: 0
  1530  000B5A  0E22               	movlw	34
  1531  000B5C  EC56  F01E         	call	_GETxAPIxVAL
  1532  000B60  0100               	movlb	0	; () banked
  1533  000B62  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1534  000B64  0100               	movlb	0	; () banked
  1535  000B66  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1536  000B68  A4D8               	btfss	status,2,c
  1537  000B6A  D00C               	goto	l8059
  1538                           
  1539                           ; BSR set to: 0
  1540  000B6C  0E20               	movlw	32
  1541  000B6E  EC56  F01E         	call	_GETxAPIxVAL
  1542  000B72  0100               	movlb	0	; () banked
  1543  000B74  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1544  000B76  0100               	movlb	0	; () banked
  1545  000B78  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1546  000B7A  A4D8               	btfss	status,2,c
  1547  000B7C  D003               	goto	l8059
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;State_Mchn.c: 131: {
  1551                           ;State_Mchn.c: 132: Switch_Init = 3;
  1552  000B7E  0E03               	movlw	3
  1553  000B80  0100               	movlb	0	; () banked
  1554  000B82  6F7E               	movwf	_Switch_Init& (0+255),b
  1555  000B84                     l8059:
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;State_Mchn.c: 133: }
  1559                           ;State_Mchn.c: 134: Red_Led(0);
  1560  000B84  0E00               	movlw	0
  1561  000B86  ECF2  F01B         	call	_Red_Led
  1562                           
  1563                           ;State_Mchn.c: 135: Green_Led(2);
  1564  000B8A  0E02               	movlw	2
  1565  000B8C  EC32  F01C         	call	_Green_Led
  1566                           
  1567                           ;State_Mchn.c: 136: break;
  1568  000B90  EF04  F00A         	goto	l8471
  1569  000B94                     l8063:
  1570  000B94  0E23               	movlw	35
  1571  000B96  EC56  F01E         	call	_GETxAPIxVAL
  1572  000B9A  0100               	movlb	0	; () banked
  1573  000B9C  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1574  000B9E  0100               	movlb	0	; () banked
  1575  000BA0  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1576  000BA2  B4D8               	btfsc	status,2,c
  1577  000BA4  D009               	goto	l8069
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;State_Mchn.c: 139: {
  1581                           ;State_Mchn.c: 140: SETxAPIxVAL(40, 1);
  1582  000BA6  0E00               	movlw	0
  1583  000BA8  0100               	movlb	0	; () banked
  1584  000BAA  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1585  000BAC  0E01               	movlw	1
  1586  000BAE  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1587  000BB0  0E28               	movlw	40
  1588  000BB2  EC49  F01D         	call	_SETxAPIxVAL
  1589  000BB6  D06C               	goto	l8103
  1590  000BB8                     l8069:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;State_Mchn.c: 143: }
  1594                           ;State_Mchn.c: 144: if(GETxAPIxVAL(36))
  1595  000BB8  0E24               	movlw	36
  1596  000BBA  EC56  F01E         	call	_GETxAPIxVAL
  1597  000BBE  0100               	movlb	0	; () banked
  1598  000BC0  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1599  000BC2  0100               	movlb	0	; () banked
  1600  000BC4  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1601  000BC6  B4D8               	btfsc	status,2,c
  1602  000BC8  D009               	goto	l8075
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;State_Mchn.c: 145: {
  1606                           ;State_Mchn.c: 146: SETxAPIxVAL(40, 2);
  1607  000BCA  0E00               	movlw	0
  1608  000BCC  0100               	movlb	0	; () banked
  1609  000BCE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1610  000BD0  0E02               	movlw	2
  1611  000BD2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1612  000BD4  0E28               	movlw	40
  1613  000BD6  EC49  F01D         	call	_SETxAPIxVAL
  1614  000BDA  D05A               	goto	l8103
  1615  000BDC                     l8075:
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;State_Mchn.c: 149: }
  1619                           ;State_Mchn.c: 150: if(GETxAPIxVAL(37))
  1620  000BDC  0E25               	movlw	37
  1621  000BDE  EC56  F01E         	call	_GETxAPIxVAL
  1622  000BE2  0100               	movlb	0	; () banked
  1623  000BE4  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1624  000BE6  0100               	movlb	0	; () banked
  1625  000BE8  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1626  000BEA  B4D8               	btfsc	status,2,c
  1627  000BEC  D009               	goto	l8081
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;State_Mchn.c: 151: {
  1631                           ;State_Mchn.c: 152: SETxAPIxVAL(40, 3);
  1632  000BEE  0E00               	movlw	0
  1633  000BF0  0100               	movlb	0	; () banked
  1634  000BF2  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1635  000BF4  0E03               	movlw	3
  1636  000BF6  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1637  000BF8  0E28               	movlw	40
  1638  000BFA  EC49  F01D         	call	_SETxAPIxVAL
  1639  000BFE  D048               	goto	l8103
  1640  000C00                     l8081:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;State_Mchn.c: 155: }
  1644                           ;State_Mchn.c: 156: if(GETxAPIxVAL(38))
  1645  000C00  0E26               	movlw	38
  1646  000C02  EC56  F01E         	call	_GETxAPIxVAL
  1647  000C06  0100               	movlb	0	; () banked
  1648  000C08  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1649  000C0A  0100               	movlb	0	; () banked
  1650  000C0C  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1651  000C0E  B4D8               	btfsc	status,2,c
  1652  000C10  D009               	goto	l8087
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;State_Mchn.c: 157: {
  1656                           ;State_Mchn.c: 158: SETxAPIxVAL(40, 4);
  1657  000C12  0E00               	movlw	0
  1658  000C14  0100               	movlb	0	; () banked
  1659  000C16  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1660  000C18  0E04               	movlw	4
  1661  000C1A  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1662  000C1C  0E28               	movlw	40
  1663  000C1E  EC49  F01D         	call	_SETxAPIxVAL
  1664  000C22  D036               	goto	l8103
  1665  000C24                     l8087:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;State_Mchn.c: 161: }
  1669                           ;State_Mchn.c: 162: if(GETxAPIxVAL(34))
  1670  000C24  0E22               	movlw	34
  1671  000C26  EC56  F01E         	call	_GETxAPIxVAL
  1672  000C2A  0100               	movlb	0	; () banked
  1673  000C2C  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1674  000C2E  0100               	movlb	0	; () banked
  1675  000C30  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1676  000C32  B4D8               	btfsc	status,2,c
  1677  000C34  D009               	goto	l8093
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;State_Mchn.c: 163: {
  1681                           ;State_Mchn.c: 164: SETxAPIxVAL(40, 5);
  1682  000C36  0E00               	movlw	0
  1683  000C38  0100               	movlb	0	; () banked
  1684  000C3A  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1685  000C3C  0E05               	movlw	5
  1686  000C3E  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1687  000C40  0E28               	movlw	40
  1688  000C42  EC49  F01D         	call	_SETxAPIxVAL
  1689  000C46  D024               	goto	l8103
  1690  000C48                     l8093:
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;State_Mchn.c: 167: }
  1694                           ;State_Mchn.c: 168: if(GETxAPIxVAL(32))
  1695  000C48  0E20               	movlw	32
  1696  000C4A  EC56  F01E         	call	_GETxAPIxVAL
  1697  000C4E  0100               	movlb	0	; () banked
  1698  000C50  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1699  000C52  0100               	movlb	0	; () banked
  1700  000C54  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1701  000C56  B4D8               	btfsc	status,2,c
  1702  000C58  D009               	goto	l8099
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;State_Mchn.c: 169: {
  1706                           ;State_Mchn.c: 170: SETxAPIxVAL(40, 9);
  1707  000C5A  0E00               	movlw	0
  1708  000C5C  0100               	movlb	0	; () banked
  1709  000C5E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1710  000C60  0E09               	movlw	9
  1711  000C62  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1712  000C64  0E28               	movlw	40
  1713  000C66  EC49  F01D         	call	_SETxAPIxVAL
  1714  000C6A  D012               	goto	l8103
  1715  000C6C                     l8099:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;State_Mchn.c: 173: }
  1719                           ;State_Mchn.c: 174: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1720  000C6C  0E27               	movlw	39
  1721  000C6E  EC56  F01E         	call	_GETxAPIxVAL
  1722  000C72  0100               	movlb	0	; () banked
  1723  000C74  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1724  000C76  0100               	movlb	0	; () banked
  1725  000C78  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1726  000C7A  B4D8               	btfsc	status,2,c
  1727  000C7C  D00B               	goto	l8105
  1728                           
  1729                           ; BSR set to: 0
  1730  000C7E  0E28               	movlw	40
  1731  000C80  EC56  F01E         	call	_GETxAPIxVAL
  1732  000C84  0100               	movlb	0	; () banked
  1733  000C86  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1734  000C88  0100               	movlb	0	; () banked
  1735  000C8A  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1736  000C8C  B4D8               	btfsc	status,2,c
  1737  000C8E  D002               	goto	l8105
  1738  000C90                     l8103:
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;State_Mchn.c: 175: Switch_Init = 4;
  1742  000C90  0E04               	movlw	4
  1743  000C92  D6D8               	goto	L1
  1744  000C94                     l8105:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;State_Mchn.c: 177: }
  1748                           ;State_Mchn.c: 178: Green_Led(2);
  1749  000C94  0E02               	movlw	2
  1750  000C96  EC32  F01C         	call	_Green_Led
  1751                           
  1752                           ;State_Mchn.c: 179: Switch_Init = 3;
  1753  000C9A  0E03               	movlw	3
  1754  000C9C  D6D3               	goto	L1
  1755  000C9E                     l8109:
  1756                           
  1757                           ; BSR set to: 0
  1758  000C9E  0E23               	movlw	35
  1759  000CA0  EC56  F01E         	call	_GETxAPIxVAL
  1760  000CA4  0100               	movlb	0	; () banked
  1761  000CA6  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1762  000CA8  0100               	movlb	0	; () banked
  1763  000CAA  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1764  000CAC  A4D8               	btfss	status,2,c
  1765  000CAE  D070               	goto	l8133
  1766                           
  1767                           ; BSR set to: 0
  1768  000CB0  0E24               	movlw	36
  1769  000CB2  EC56  F01E         	call	_GETxAPIxVAL
  1770  000CB6  0100               	movlb	0	; () banked
  1771  000CB8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1772  000CBA  0100               	movlb	0	; () banked
  1773  000CBC  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1774  000CBE  A4D8               	btfss	status,2,c
  1775  000CC0  D067               	goto	l8133
  1776                           
  1777                           ; BSR set to: 0
  1778  000CC2  0E25               	movlw	37
  1779  000CC4  EC56  F01E         	call	_GETxAPIxVAL
  1780  000CC8  0100               	movlb	0	; () banked
  1781  000CCA  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1782  000CCC  0100               	movlb	0	; () banked
  1783  000CCE  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1784  000CD0  A4D8               	btfss	status,2,c
  1785  000CD2  D05E               	goto	l8133
  1786                           
  1787                           ; BSR set to: 0
  1788  000CD4  0E26               	movlw	38
  1789  000CD6  EC56  F01E         	call	_GETxAPIxVAL
  1790  000CDA  0100               	movlb	0	; () banked
  1791  000CDC  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1792  000CDE  0100               	movlb	0	; () banked
  1793  000CE0  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1794  000CE2  A4D8               	btfss	status,2,c
  1795  000CE4  D055               	goto	l8133
  1796                           
  1797                           ; BSR set to: 0
  1798  000CE6  0E22               	movlw	34
  1799  000CE8  EC56  F01E         	call	_GETxAPIxVAL
  1800  000CEC  0100               	movlb	0	; () banked
  1801  000CEE  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1802  000CF0  0100               	movlb	0	; () banked
  1803  000CF2  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1804  000CF4  A4D8               	btfss	status,2,c
  1805  000CF6  D04C               	goto	l8133
  1806                           
  1807                           ; BSR set to: 0
  1808  000CF8  0E20               	movlw	32
  1809  000CFA  EC56  F01E         	call	_GETxAPIxVAL
  1810  000CFE  0100               	movlb	0	; () banked
  1811  000D00  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1812  000D02  0100               	movlb	0	; () banked
  1813  000D04  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1814  000D06  A4D8               	btfss	status,2,c
  1815  000D08  D043               	goto	l8133
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;State_Mchn.c: 183: {
  1819                           ;State_Mchn.c: 184: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  1820  000D0A  0E27               	movlw	39
  1821  000D0C  EC56  F01E         	call	_GETxAPIxVAL
  1822  000D10  C090  F0BB         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1823  000D14  C091  F0BC         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1824  000D18  0E28               	movlw	40
  1825  000D1A  EC56  F01E         	call	_GETxAPIxVAL
  1826  000D1E  0100               	movlb	0	; () banked
  1827  000D20  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1828  000D22  0100               	movlb	0	; () banked
  1829  000D24  19BB               	xorwf	??_Update_StateMchn& (0+255),w,b
  1830  000D26  E11C               	bnz	l8129
  1831  000D28  0100               	movlb	0	; () banked
  1832  000D2A  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1833  000D2C  0100               	movlb	0	; () banked
  1834  000D2E  19BC               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1835  000D30  A4D8               	btfss	status,2,c
  1836  000D32  D016               	goto	l8129
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;State_Mchn.c: 185: {
  1840                           ;State_Mchn.c: 186: SETxAPIxVAL(40, 0);
  1841  000D34  0E00               	movlw	0
  1842  000D36  0100               	movlb	0	; () banked
  1843  000D38  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1844  000D3A  0E00               	movlw	0
  1845  000D3C  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1846  000D3E  0E28               	movlw	40
  1847  000D40  EC49  F01D         	call	_SETxAPIxVAL
  1848                           
  1849                           ;State_Mchn.c: 187: SETxAPIxVAL(39, 0);
  1850  000D44  0E00               	movlw	0
  1851  000D46  0100               	movlb	0	; () banked
  1852  000D48  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1853  000D4A  0E00               	movlw	0
  1854  000D4C  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1855  000D4E  0E27               	movlw	39
  1856  000D50  EC49  F01D         	call	_SETxAPIxVAL
  1857                           
  1858                           ;State_Mchn.c: 188: Red_Led(1);
  1859  000D54  0E01               	movlw	1
  1860  000D56  ECF2  F01B         	call	_Red_Led
  1861                           
  1862                           ;State_Mchn.c: 189: Switch_Init = 1;
  1863  000D5A  0E01               	movlw	1
  1864  000D5C  0100               	movlb	0	; () banked
  1865  000D5E  6F7E               	movwf	_Switch_Init& (0+255),b
  1866  000D60                     l8129:
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;State_Mchn.c: 191: }
  1870                           ;State_Mchn.c: 192: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  1871  000D60  0E27               	movlw	39
  1872  000D62  EC56  F01E         	call	_GETxAPIxVAL
  1873  000D66  C090  F0BB         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1874  000D6A  C091  F0BC         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1875  000D6E  0E28               	movlw	40
  1876  000D70  EC56  F01E         	call	_GETxAPIxVAL
  1877  000D74  0100               	movlb	0	; () banked
  1878  000D76  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1879  000D78  0100               	movlb	0	; () banked
  1880  000D7A  19BB               	xorwf	??_Update_StateMchn& (0+255),w,b
  1881  000D7C  E106               	bnz	u8320
  1882  000D7E  0100               	movlb	0	; () banked
  1883  000D80  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1884  000D82  0100               	movlb	0	; () banked
  1885  000D84  19BC               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1886  000D86  B4D8               	btfsc	status,2,c
  1887  000D88  D003               	goto	l8133
  1888  000D8A                     u8320:
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;State_Mchn.c: 193: {
  1892                           ;State_Mchn.c: 194: Switch_Init = 5;
  1893  000D8A  0E05               	movlw	5
  1894  000D8C  0100               	movlb	0	; () banked
  1895  000D8E  6F7E               	movwf	_Switch_Init& (0+255),b
  1896  000D90                     l8133:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;State_Mchn.c: 195: }
  1900                           ;State_Mchn.c: 196: }
  1901                           ;State_Mchn.c: 197: Green_Led(2);
  1902  000D90  0E02               	movlw	2
  1903  000D92  EC32  F01C         	call	_Green_Led
  1904                           
  1905                           ;State_Mchn.c: 198: break;
  1906  000D96  D338               	goto	l8471
  1907  000D98                     l8135:
  1908  000D98  0E28               	movlw	40
  1909  000D9A  EC56  F01E         	call	_GETxAPIxVAL
  1910  000D9E  0E09               	movlw	9
  1911  000DA0  0100               	movlb	0	; () banked
  1912  000DA2  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1913  000DA4  0100               	movlb	0	; () banked
  1914  000DA6  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1915  000DA8  B4D8               	btfsc	status,2,c
  1916  000DAA  D003               	goto	l8139
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;State_Mchn.c: 201: {
  1920                           ;State_Mchn.c: 202: Switch_Init = 6;
  1921  000DAC  0E06               	movlw	6
  1922  000DAE  0100               	movlb	0	; () banked
  1923  000DB0  6F7E               	movwf	_Switch_Init& (0+255),b
  1924  000DB2                     l8139:
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;State_Mchn.c: 203: }
  1928                           ;State_Mchn.c: 204: if(GETxAPIxVAL(40) == 9)
  1929  000DB2  0E28               	movlw	40
  1930  000DB4  EC56  F01E         	call	_GETxAPIxVAL
  1931  000DB8  0E09               	movlw	9
  1932  000DBA  0100               	movlb	0	; () banked
  1933  000DBC  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1934  000DBE  0100               	movlb	0	; () banked
  1935  000DC0  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1936  000DC2  A4D8               	btfss	status,2,c
  1937  000DC4  D321               	goto	l8471
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;State_Mchn.c: 205: {
  1941                           ;State_Mchn.c: 206: Switch_Init = 9;
  1942  000DC6  0E09               	movlw	9
  1943  000DC8  D63D               	goto	L1
  1944  000DCA                     l8143:
  1945                           
  1946                           ; BSR set to: 0
  1947  000DCA  0E08               	movlw	8
  1948  000DCC  D63B               	goto	L1
  1949  000DCE                     l8145:
  1950                           
  1951                           ; BSR set to: 0
  1952  000DCE  0E20               	movlw	32
  1953  000DD0  EC56  F01E         	call	_GETxAPIxVAL
  1954  000DD4  0100               	movlb	0	; () banked
  1955  000DD6  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1956  000DD8  0100               	movlb	0	; () banked
  1957  000DDA  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1958  000DDC  A4D8               	btfss	status,2,c
  1959  000DDE  D009               	goto	l8149
  1960                           
  1961                           ; BSR set to: 0
  1962  000DE0  0E46               	movlw	70
  1963  000DE2  EC56  F01E         	call	_GETxAPIxVAL
  1964  000DE6  0100               	movlb	0	; () banked
  1965  000DE8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  1966  000DEA  0100               	movlb	0	; () banked
  1967  000DEC  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1968  000DEE  B4D8               	btfsc	status,2,c
  1969  000DF0  D011               	goto	l8153
  1970  000DF2                     l8149:
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;State_Mchn.c: 214: {
  1974                           ;State_Mchn.c: 215: Switch_Main = 1;
  1975  000DF2  0E01               	movlw	1
  1976  000DF4  0100               	movlb	0	; () banked
  1977  000DF6  6F80               	movwf	_Switch_Main& (0+255),b
  1978                           
  1979                           ;State_Mchn.c: 216: Switch_Init = 0;
  1980  000DF8  0E00               	movlw	0
  1981  000DFA  0100               	movlb	0	; () banked
  1982  000DFC  6F7E               	movwf	_Switch_Init& (0+255),b
  1983                           
  1984                           ;State_Mchn.c: 217: Stop_Program = 0;
  1985  000DFE  0E00               	movlw	0
  1986  000E00  0100               	movlb	0	; () banked
  1987  000E02  6F7D               	movwf	_Stop_Program& (0+255),b
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;State_Mchn.c: 218: SETxAPIxVAL(70, 0);
  1991  000E04  0E00               	movlw	0
  1992  000E06  0100               	movlb	0	; () banked
  1993  000E08  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1994  000E0A  0E00               	movlw	0
  1995  000E0C  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  1996  000E0E  0E46               	movlw	70
  1997  000E10  EC49  F01D         	call	_SETxAPIxVAL
  1998  000E14                     l8153:
  1999                           
  2000                           ;State_Mchn.c: 219: }
  2001                           ;State_Mchn.c: 220: Green_Led(3);
  2002  000E14  0E03               	movlw	3
  2003  000E16  EC32  F01C         	call	_Green_Led
  2004                           
  2005                           ;State_Mchn.c: 221: Red_Led(0);
  2006  000E1A  0E00               	movlw	0
  2007  000E1C  ECF2  F01B         	call	_Red_Led
  2008                           
  2009                           ;State_Mchn.c: 222: break;
  2010  000E20  D2F3               	goto	l8471
  2011  000E22                     l8157:
  2012  000E22  0E27               	movlw	39
  2013  000E24  EC56  F01E         	call	_GETxAPIxVAL
  2014  000E28  0E05               	movlw	5
  2015  000E2A  0100               	movlb	0	; () banked
  2016  000E2C  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2017  000E2E  0100               	movlb	0	; () banked
  2018  000E30  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2019  000E32  B4D8               	btfsc	status,2,c
  2020  000E34  D015               	goto	l8175
  2021  000E36  D02B               	goto	l8177
  2022  000E38                     l8161:
  2023                           
  2024                           ; BSR set to: 0
  2025  000E38  0E01               	movlw	1
  2026  000E3A  D005               	goto	L4
  2027  000E3C                     l8163:
  2028                           
  2029                           ; BSR set to: 0
  2030  000E3C  0E05               	movlw	5
  2031  000E3E  D003               	goto	L4
  2032  000E40                     l8165:
  2033                           
  2034                           ; BSR set to: 0
  2035  000E40  0E02               	movlw	2
  2036  000E42  D001               	goto	L4
  2037  000E44                     l8167:
  2038                           
  2039                           ; BSR set to: 0
  2040  000E44  0E03               	movlw	3
  2041  000E46                     L4:
  2042  000E46  0100               	movlb	0	; () banked
  2043  000E48  6F82               	movwf	_Switch_Program& (0+255),b
  2044                           
  2045                           ;State_Mchn.c: 238: Switch_Init = 7;
  2046  000E4A  0E07               	movlw	7
  2047  000E4C  0100               	movlb	0	; () banked
  2048  000E4E  6F7E               	movwf	_Switch_Init& (0+255),b
  2049                           
  2050                           ;State_Mchn.c: 239: break;
  2051  000E50  D01E               	goto	l8177
  2052  000E52                     l8169:
  2053                           
  2054                           ; BSR set to: 0
  2055  000E52  0E08               	movlw	8
  2056  000E54  0100               	movlb	0	; () banked
  2057  000E56  6F7E               	movwf	_Switch_Init& (0+255),b
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;State_Mchn.c: 241: Red_Led(1);
  2061  000E58  0E01               	movlw	1
  2062  000E5A  ECF2  F01B         	call	_Red_Led
  2063                           
  2064                           ;State_Mchn.c: 243: }
  2065                           
  2066                           ;State_Mchn.c: 242: break;
  2067  000E5E  D017               	goto	l8177
  2068  000E60                     l8175:
  2069  000E60  0E28               	movlw	40
  2070  000E62  EC56  F01E         	call	_GETxAPIxVAL
  2071                           
  2072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2073                           ; Switch size 1, requested type "space"
  2074                           ; Number of cases is 1, Range of values is 0 to 0
  2075                           ; switch strategies available:
  2076                           ; Name         Instructions Cycles
  2077                           ; simple_byte            4     3 (average)
  2078                           ;	Chosen strategy is simple_byte
  2079  000E66  0100               	movlb	0	; () banked
  2080  000E68  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2081  000E6A  0A00               	xorlw	0	; case 0
  2082  000E6C  A4D8               	btfss	status,2,c
  2083  000E6E  D7F1               	goto	l8169
  2084                           
  2085                           ; BSR set to: 0
  2086                           ; Switch size 1, requested type "space"
  2087                           ; Number of cases is 4, Range of values is 1 to 4
  2088                           ; switch strategies available:
  2089                           ; Name         Instructions Cycles
  2090                           ; simple_byte           13     7 (average)
  2091                           ;	Chosen strategy is simple_byte
  2092  000E70  0100               	movlb	0	; () banked
  2093  000E72  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2094  000E74  0A01               	xorlw	1	; case 1
  2095  000E76  B4D8               	btfsc	status,2,c
  2096  000E78  D7DF               	goto	l8161
  2097  000E7A  0A03               	xorlw	3	; case 2
  2098  000E7C  B4D8               	btfsc	status,2,c
  2099  000E7E  D7DE               	goto	l8163
  2100  000E80  0A01               	xorlw	1	; case 3
  2101  000E82  B4D8               	btfsc	status,2,c
  2102  000E84  D7DD               	goto	l8165
  2103  000E86  0A07               	xorlw	7	; case 4
  2104  000E88  B4D8               	btfsc	status,2,c
  2105  000E8A  D7DC               	goto	l8167
  2106  000E8C  D7E2               	goto	l8169
  2107  000E8E                     l8177:
  2108                           
  2109                           ;State_Mchn.c: 244: }
  2110                           ;State_Mchn.c: 245: if(GETxAPIxVAL(40) == 5)
  2111  000E8E  0E28               	movlw	40
  2112  000E90  EC56  F01E         	call	_GETxAPIxVAL
  2113  000E94  0E05               	movlw	5
  2114  000E96  0100               	movlb	0	; () banked
  2115  000E98  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2116  000E9A  0100               	movlb	0	; () banked
  2117  000E9C  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2118  000E9E  B4D8               	btfsc	status,2,c
  2119  000EA0  D015               	goto	l8195
  2120  000EA2  D02B               	goto	l8197
  2121  000EA4                     l8181:
  2122                           
  2123                           ; BSR set to: 0
  2124  000EA4  0E01               	movlw	1
  2125  000EA6  D005               	goto	L7
  2126  000EA8                     l8183:
  2127                           
  2128                           ; BSR set to: 0
  2129  000EA8  0E05               	movlw	5
  2130  000EAA  D003               	goto	L7
  2131  000EAC                     l8185:
  2132                           
  2133                           ; BSR set to: 0
  2134  000EAC  0E02               	movlw	2
  2135  000EAE  D001               	goto	L7
  2136  000EB0                     l8187:
  2137                           
  2138                           ; BSR set to: 0
  2139  000EB0  0E03               	movlw	3
  2140  000EB2                     L7:
  2141  000EB2  0100               	movlb	0	; () banked
  2142  000EB4  6F82               	movwf	_Switch_Program& (0+255),b
  2143                           
  2144                           ;State_Mchn.c: 259: Switch_Init = 7;
  2145  000EB6  0E07               	movlw	7
  2146  000EB8  0100               	movlb	0	; () banked
  2147  000EBA  6F7E               	movwf	_Switch_Init& (0+255),b
  2148                           
  2149                           ;State_Mchn.c: 260: break;
  2150  000EBC  D01E               	goto	l8197
  2151  000EBE                     l8189:
  2152                           
  2153                           ; BSR set to: 0
  2154  000EBE  0E08               	movlw	8
  2155  000EC0  0100               	movlb	0	; () banked
  2156  000EC2  6F7E               	movwf	_Switch_Init& (0+255),b
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;State_Mchn.c: 262: Red_Led(1);
  2160  000EC4  0E01               	movlw	1
  2161  000EC6  ECF2  F01B         	call	_Red_Led
  2162                           
  2163                           ;State_Mchn.c: 264: }
  2164                           
  2165                           ;State_Mchn.c: 263: break;
  2166  000ECA  D017               	goto	l8197
  2167  000ECC                     l8195:
  2168  000ECC  0E27               	movlw	39
  2169  000ECE  EC56  F01E         	call	_GETxAPIxVAL
  2170                           
  2171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2172                           ; Switch size 1, requested type "space"
  2173                           ; Number of cases is 1, Range of values is 0 to 0
  2174                           ; switch strategies available:
  2175                           ; Name         Instructions Cycles
  2176                           ; simple_byte            4     3 (average)
  2177                           ;	Chosen strategy is simple_byte
  2178  000ED2  0100               	movlb	0	; () banked
  2179  000ED4  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2180  000ED6  0A00               	xorlw	0	; case 0
  2181  000ED8  A4D8               	btfss	status,2,c
  2182  000EDA  D7F1               	goto	l8189
  2183                           
  2184                           ; BSR set to: 0
  2185                           ; Switch size 1, requested type "space"
  2186                           ; Number of cases is 4, Range of values is 1 to 4
  2187                           ; switch strategies available:
  2188                           ; Name         Instructions Cycles
  2189                           ; simple_byte           13     7 (average)
  2190                           ;	Chosen strategy is simple_byte
  2191  000EDC  0100               	movlb	0	; () banked
  2192  000EDE  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2193  000EE0  0A01               	xorlw	1	; case 1
  2194  000EE2  B4D8               	btfsc	status,2,c
  2195  000EE4  D7DF               	goto	l8181
  2196  000EE6  0A03               	xorlw	3	; case 2
  2197  000EE8  B4D8               	btfsc	status,2,c
  2198  000EEA  D7DE               	goto	l8183
  2199  000EEC  0A01               	xorlw	1	; case 3
  2200  000EEE  B4D8               	btfsc	status,2,c
  2201  000EF0  D7DD               	goto	l8185
  2202  000EF2  0A07               	xorlw	7	; case 4
  2203  000EF4  B4D8               	btfsc	status,2,c
  2204  000EF6  D7DC               	goto	l8187
  2205  000EF8  D7E2               	goto	l8189
  2206  000EFA                     l8197:
  2207                           
  2208                           ;State_Mchn.c: 265: }
  2209                           ;State_Mchn.c: 266: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2210  000EFA  0E27               	movlw	39
  2211  000EFC  EC56  F01E         	call	_GETxAPIxVAL
  2212  000F00  0E05               	movlw	5
  2213  000F02  0100               	movlb	0	; () banked
  2214  000F04  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2215  000F06  0100               	movlb	0	; () banked
  2216  000F08  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2217  000F0A  B4D8               	btfsc	status,2,c
  2218  000F0C  D27D               	goto	l8471
  2219                           
  2220                           ; BSR set to: 0
  2221  000F0E  0E28               	movlw	40
  2222  000F10  EC56  F01E         	call	_GETxAPIxVAL
  2223  000F14  0E05               	movlw	5
  2224  000F16  0100               	movlb	0	; () banked
  2225  000F18  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2226  000F1A  0100               	movlb	0	; () banked
  2227  000F1C  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2228  000F1E  A4D8               	btfss	status,2,c
  2229  000F20  D091               	goto	l8273
  2230  000F22  D272               	goto	l8471
  2231  000F24                     l8205:
  2232                           
  2233                           ; BSR set to: 0
  2234  000F24  0E01               	movlw	1
  2235  000F26  D063               	goto	L18
  2236  000F28                     l8207:
  2237                           
  2238                           ; BSR set to: 0
  2239  000F28  0E02               	movlw	2
  2240  000F2A  D061               	goto	L18
  2241  000F2C                     l8209:
  2242                           
  2243                           ; BSR set to: 0
  2244  000F2C  0E04               	movlw	4
  2245  000F2E  D05F               	goto	L18
  2246  000F30                     l8211:
  2247                           
  2248                           ; BSR set to: 0
  2249  000F30  0E08               	movlw	8
  2250  000F32  0100               	movlb	0	; () banked
  2251  000F34  6F7E               	movwf	_Switch_Init& (0+255),b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;State_Mchn.c: 284: Red_Led(1);
  2255  000F36  0E01               	movlw	1
  2256  000F38  ECF2  F01B         	call	_Red_Led
  2257                           
  2258                           ;State_Mchn.c: 286: }
  2259                           
  2260                           ;State_Mchn.c: 285: break;
  2261  000F3C  D265               	goto	l8471
  2262  000F3E                     l8217:
  2263  000F3E  0E28               	movlw	40
  2264  000F40  EC56  F01E         	call	_GETxAPIxVAL
  2265                           
  2266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2267                           ; Switch size 1, requested type "space"
  2268                           ; Number of cases is 1, Range of values is 0 to 0
  2269                           ; switch strategies available:
  2270                           ; Name         Instructions Cycles
  2271                           ; simple_byte            4     3 (average)
  2272                           ;	Chosen strategy is simple_byte
  2273  000F44  0100               	movlb	0	; () banked
  2274  000F46  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2275  000F48  0A00               	xorlw	0	; case 0
  2276  000F4A  A4D8               	btfss	status,2,c
  2277  000F4C  D7F1               	goto	l8211
  2278                           
  2279                           ; BSR set to: 0
  2280                           ; Switch size 1, requested type "space"
  2281                           ; Number of cases is 4, Range of values is 1 to 4
  2282                           ; switch strategies available:
  2283                           ; Name         Instructions Cycles
  2284                           ; simple_byte           13     7 (average)
  2285                           ;	Chosen strategy is simple_byte
  2286  000F4E  0100               	movlb	0	; () banked
  2287  000F50  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2288  000F52  0A01               	xorlw	1	; case 1
  2289  000F54  B4D8               	btfsc	status,2,c
  2290  000F56  D04F               	goto	l8257
  2291  000F58  0A03               	xorlw	3	; case 2
  2292  000F5A  B4D8               	btfsc	status,2,c
  2293  000F5C  D7E3               	goto	l8205
  2294  000F5E  0A01               	xorlw	1	; case 3
  2295  000F60  B4D8               	btfsc	status,2,c
  2296  000F62  D7E2               	goto	l8207
  2297  000F64  0A07               	xorlw	7	; case 4
  2298  000F66  B4D8               	btfsc	status,2,c
  2299  000F68  D7E1               	goto	l8209
  2300  000F6A  D7E2               	goto	l8211
  2301  000F6C                     l8223:
  2302                           
  2303                           ; BSR set to: 0
  2304  000F6C  0E00               	movlw	0
  2305  000F6E  D03F               	goto	L18
  2306  000F70                     l8227:
  2307                           
  2308                           ; BSR set to: 0
  2309  000F70  0E08               	movlw	8
  2310  000F72  0100               	movlb	0	; () banked
  2311  000F74  6F7E               	movwf	_Switch_Init& (0+255),b
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;State_Mchn.c: 302: Red_Led(1);
  2315  000F76  0E01               	movlw	1
  2316  000F78  ECF2  F01B         	call	_Red_Led
  2317                           
  2318                           ;State_Mchn.c: 304: }
  2319                           
  2320                           ;State_Mchn.c: 303: break;
  2321  000F7C  D245               	goto	l8471
  2322  000F7E                     l8233:
  2323  000F7E  0E28               	movlw	40
  2324  000F80  EC56  F01E         	call	_GETxAPIxVAL
  2325                           
  2326                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2327                           ; Switch size 1, requested type "space"
  2328                           ; Number of cases is 1, Range of values is 0 to 0
  2329                           ; switch strategies available:
  2330                           ; Name         Instructions Cycles
  2331                           ; simple_byte            4     3 (average)
  2332                           ;	Chosen strategy is simple_byte
  2333  000F84  0100               	movlb	0	; () banked
  2334  000F86  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2335  000F88  0A00               	xorlw	0	; case 0
  2336  000F8A  A4D8               	btfss	status,2,c
  2337  000F8C  D7F1               	goto	l8227
  2338                           
  2339                           ; BSR set to: 0
  2340                           ; Switch size 1, requested type "space"
  2341                           ; Number of cases is 4, Range of values is 1 to 4
  2342                           ; switch strategies available:
  2343                           ; Name         Instructions Cycles
  2344                           ; simple_byte           13     7 (average)
  2345                           ;	Chosen strategy is simple_byte
  2346  000F8E  0100               	movlb	0	; () banked
  2347  000F90  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2348  000F92  0A01               	xorlw	1	; case 1
  2349  000F94  B4D8               	btfsc	status,2,c
  2350  000F96  D7C6               	goto	l8205
  2351  000F98  0A03               	xorlw	3	; case 2
  2352  000F9A  B4D8               	btfsc	status,2,c
  2353  000F9C  D02C               	goto	l8257
  2354  000F9E  0A01               	xorlw	1	; case 3
  2355  000FA0  B4D8               	btfsc	status,2,c
  2356  000FA2  D7E4               	goto	l8223
  2357  000FA4  0A07               	xorlw	7	; case 4
  2358  000FA6  B4D8               	btfsc	status,2,c
  2359  000FA8  D01F               	goto	l8253
  2360  000FAA  D7E2               	goto	l8227
  2361  000FAC                     l8243:
  2362                           
  2363                           ; BSR set to: 0
  2364  000FAC  0E08               	movlw	8
  2365  000FAE  0100               	movlb	0	; () banked
  2366  000FB0  6F7E               	movwf	_Switch_Init& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;State_Mchn.c: 320: Red_Led(1);
  2370  000FB2  0E01               	movlw	1
  2371  000FB4  ECF2  F01B         	call	_Red_Led
  2372                           
  2373                           ;State_Mchn.c: 322: }
  2374                           
  2375                           ;State_Mchn.c: 321: break;
  2376  000FB8  D227               	goto	l8471
  2377  000FBA                     l8249:
  2378  000FBA  0E28               	movlw	40
  2379  000FBC  EC56  F01E         	call	_GETxAPIxVAL
  2380                           
  2381                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2382                           ; Switch size 1, requested type "space"
  2383                           ; Number of cases is 1, Range of values is 0 to 0
  2384                           ; switch strategies available:
  2385                           ; Name         Instructions Cycles
  2386                           ; simple_byte            4     3 (average)
  2387                           ;	Chosen strategy is simple_byte
  2388  000FC0  0100               	movlb	0	; () banked
  2389  000FC2  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2390  000FC4  0A00               	xorlw	0	; case 0
  2391  000FC6  A4D8               	btfss	status,2,c
  2392  000FC8  D7F1               	goto	l8243
  2393                           
  2394                           ; BSR set to: 0
  2395                           ; Switch size 1, requested type "space"
  2396                           ; Number of cases is 4, Range of values is 1 to 4
  2397                           ; switch strategies available:
  2398                           ; Name         Instructions Cycles
  2399                           ; simple_byte           13     7 (average)
  2400                           ;	Chosen strategy is simple_byte
  2401  000FCA  0100               	movlb	0	; () banked
  2402  000FCC  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2403  000FCE  0A01               	xorlw	1	; case 1
  2404  000FD0  B4D8               	btfsc	status,2,c
  2405  000FD2  D7AA               	goto	l8207
  2406  000FD4  0A03               	xorlw	3	; case 2
  2407  000FD6  B4D8               	btfsc	status,2,c
  2408  000FD8  D7C9               	goto	l8223
  2409  000FDA  0A01               	xorlw	1	; case 3
  2410  000FDC  B4D8               	btfsc	status,2,c
  2411  000FDE  D00B               	goto	l8257
  2412  000FE0  0A07               	xorlw	7	; case 4
  2413  000FE2  B4D8               	btfsc	status,2,c
  2414  000FE4  D003               	goto	l8255
  2415  000FE6  D7E2               	goto	l8243
  2416  000FE8                     l8253:
  2417                           
  2418                           ; BSR set to: 0
  2419  000FE8  0E06               	movlw	6
  2420  000FEA  D001               	goto	L18
  2421  000FEC                     l8255:
  2422                           
  2423                           ; BSR set to: 0
  2424  000FEC  0E03               	movlw	3
  2425  000FEE                     L18:
  2426  000FEE  0100               	movlb	0	; () banked
  2427  000FF0  6F82               	movwf	_Switch_Program& (0+255),b
  2428                           
  2429                           ;State_Mchn.c: 333: Switch_Init = 7;
  2430  000FF2  0E07               	movlw	7
  2431  000FF4  D527               	goto	L1
  2432  000FF6                     l8257:
  2433                           
  2434                           ; BSR set to: 0
  2435  000FF6  0E00               	movlw	0
  2436  000FF8  D525               	goto	L1
  2437  000FFA                     l8259:
  2438                           
  2439                           ; BSR set to: 0
  2440  000FFA  0E08               	movlw	8
  2441  000FFC  0100               	movlb	0	; () banked
  2442  000FFE  6F7E               	movwf	_Switch_Init& (0+255),b
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;State_Mchn.c: 338: Red_Led(1);
  2446  001000  0E01               	movlw	1
  2447  001002  ECF2  F01B         	call	_Red_Led
  2448                           
  2449                           ;State_Mchn.c: 340: }
  2450                           
  2451                           ;State_Mchn.c: 339: break;
  2452  001006  D200               	goto	l8471
  2453  001008                     l8265:
  2454  001008  0E28               	movlw	40
  2455  00100A  EC56  F01E         	call	_GETxAPIxVAL
  2456                           
  2457                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2458                           ; Switch size 1, requested type "space"
  2459                           ; Number of cases is 1, Range of values is 0 to 0
  2460                           ; switch strategies available:
  2461                           ; Name         Instructions Cycles
  2462                           ; simple_byte            4     3 (average)
  2463                           ;	Chosen strategy is simple_byte
  2464  00100E  0100               	movlb	0	; () banked
  2465  001010  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2466  001012  0A00               	xorlw	0	; case 0
  2467  001014  A4D8               	btfss	status,2,c
  2468  001016  D7F1               	goto	l8259
  2469                           
  2470                           ; BSR set to: 0
  2471                           ; Switch size 1, requested type "space"
  2472                           ; Number of cases is 4, Range of values is 1 to 4
  2473                           ; switch strategies available:
  2474                           ; Name         Instructions Cycles
  2475                           ; simple_byte           13     7 (average)
  2476                           ;	Chosen strategy is simple_byte
  2477  001018  0100               	movlb	0	; () banked
  2478  00101A  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2479  00101C  0A01               	xorlw	1	; case 1
  2480  00101E  B4D8               	btfsc	status,2,c
  2481  001020  D785               	goto	l8209
  2482  001022  0A03               	xorlw	3	; case 2
  2483  001024  B4D8               	btfsc	status,2,c
  2484  001026  D7E0               	goto	l8253
  2485  001028  0A01               	xorlw	1	; case 3
  2486  00102A  B4D8               	btfsc	status,2,c
  2487  00102C  D7DF               	goto	l8255
  2488  00102E  0A07               	xorlw	7	; case 4
  2489  001030  B4D8               	btfsc	status,2,c
  2490  001032  D7E1               	goto	l8257
  2491  001034  D7E2               	goto	l8259
  2492  001036                     l8267:
  2493                           
  2494                           ; BSR set to: 0
  2495  001036  0E08               	movlw	8
  2496  001038  0100               	movlb	0	; () banked
  2497  00103A  6F7E               	movwf	_Switch_Init& (0+255),b
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;State_Mchn.c: 343: Red_Led(1);
  2501  00103C  0E01               	movlw	1
  2502  00103E  ECF2  F01B         	call	_Red_Led
  2503                           
  2504                           ;State_Mchn.c: 345: }
  2505                           
  2506                           ;State_Mchn.c: 344: break;
  2507  001042  D1E2               	goto	l8471
  2508  001044                     l8273:
  2509  001044  0E27               	movlw	39
  2510  001046  EC56  F01E         	call	_GETxAPIxVAL
  2511                           
  2512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2513                           ; Switch size 1, requested type "space"
  2514                           ; Number of cases is 1, Range of values is 0 to 0
  2515                           ; switch strategies available:
  2516                           ; Name         Instructions Cycles
  2517                           ; simple_byte            4     3 (average)
  2518                           ;	Chosen strategy is simple_byte
  2519  00104A  0100               	movlb	0	; () banked
  2520  00104C  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2521  00104E  0A00               	xorlw	0	; case 0
  2522  001050  A4D8               	btfss	status,2,c
  2523  001052  D7F1               	goto	l8267
  2524                           
  2525                           ; BSR set to: 0
  2526                           ; Switch size 1, requested type "space"
  2527                           ; Number of cases is 4, Range of values is 1 to 4
  2528                           ; switch strategies available:
  2529                           ; Name         Instructions Cycles
  2530                           ; simple_byte           13     7 (average)
  2531                           ;	Chosen strategy is simple_byte
  2532  001054  0100               	movlb	0	; () banked
  2533  001056  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2534  001058  0A01               	xorlw	1	; case 1
  2535  00105A  B4D8               	btfsc	status,2,c
  2536  00105C  D770               	goto	l8217
  2537  00105E  0A03               	xorlw	3	; case 2
  2538  001060  B4D8               	btfsc	status,2,c
  2539  001062  D78D               	goto	l8233
  2540  001064  0A01               	xorlw	1	; case 3
  2541  001066  B4D8               	btfsc	status,2,c
  2542  001068  D7A8               	goto	l8249
  2543  00106A  0A07               	xorlw	7	; case 4
  2544  00106C  B4D8               	btfsc	status,2,c
  2545  00106E  D7CC               	goto	l8265
  2546  001070  D7E2               	goto	l8267
  2547  001072                     l8275:
  2548                           
  2549                           ; BSR set to: 0
  2550  001072  0E0B               	movlw	11
  2551  001074  D4E7               	goto	L1
  2552  001076                     l8277:
  2553                           
  2554                           ; BSR set to: 0
  2555  001076  0E20               	movlw	32
  2556  001078  EC56  F01E         	call	_GETxAPIxVAL
  2557  00107C  0100               	movlb	0	; () banked
  2558  00107E  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2559  001080  0100               	movlb	0	; () banked
  2560  001082  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2561  001084  A4D8               	btfss	status,2,c
  2562  001086  D009               	goto	l8281
  2563                           
  2564                           ; BSR set to: 0
  2565  001088  0E46               	movlw	70
  2566  00108A  EC56  F01E         	call	_GETxAPIxVAL
  2567  00108E  0100               	movlb	0	; () banked
  2568  001090  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2569  001092  0100               	movlb	0	; () banked
  2570  001094  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2571  001096  B4D8               	btfsc	status,2,c
  2572  001098  D009               	goto	l8283
  2573  00109A                     l8281:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;State_Mchn.c: 353: {
  2577                           ;State_Mchn.c: 354: Switch_Main = 2;
  2578  00109A  0E02               	movlw	2
  2579  00109C  0100               	movlb	0	; () banked
  2580  00109E  6F80               	movwf	_Switch_Main& (0+255),b
  2581                           
  2582                           ;State_Mchn.c: 355: Switch_Init = 0;
  2583  0010A0  0E00               	movlw	0
  2584  0010A2  0100               	movlb	0	; () banked
  2585  0010A4  6F7E               	movwf	_Switch_Init& (0+255),b
  2586                           
  2587                           ;State_Mchn.c: 356: Stop_Program = 0;
  2588  0010A6  0E00               	movlw	0
  2589  0010A8  0100               	movlb	0	; () banked
  2590  0010AA  6F7D               	movwf	_Stop_Program& (0+255),b
  2591  0010AC                     l8283:
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;State_Mchn.c: 357: }
  2595                           ;State_Mchn.c: 358: Green_Led(3);
  2596  0010AC  0E03               	movlw	3
  2597  0010AE  EC32  F01C         	call	_Green_Led
  2598                           
  2599                           ;State_Mchn.c: 359: Red_Led(0);
  2600  0010B2  0E00               	movlw	0
  2601  0010B4  ECF2  F01B         	call	_Red_Led
  2602                           
  2603                           ;State_Mchn.c: 360: break;
  2604  0010B8  D1A7               	goto	l8471
  2605  0010BA                     l8287:
  2606  0010BA  0E27               	movlw	39
  2607  0010BC  EC56  F01E         	call	_GETxAPIxVAL
  2608  0010C0  0E05               	movlw	5
  2609  0010C2  0100               	movlb	0	; () banked
  2610  0010C4  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2611  0010C6  0100               	movlb	0	; () banked
  2612  0010C8  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2613  0010CA  A4D8               	btfss	status,2,c
  2614  0010CC  D012               	goto	l8305
  2615  0010CE                     l8289:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;State_Mchn.c: 363: {
  2619                           ;State_Mchn.c: 364: Switch_Program = 0;
  2620  0010CE  0E00               	movlw	0
  2621  0010D0  D005               	goto	L22
  2622  0010D2                     l8291:
  2623                           
  2624                           ; BSR set to: 0
  2625  0010D2  0E01               	movlw	1
  2626  0010D4  D003               	goto	L22
  2627  0010D6                     l8293:
  2628                           
  2629                           ; BSR set to: 0
  2630  0010D6  0E03               	movlw	3
  2631  0010D8  D001               	goto	L22
  2632  0010DA                     l8297:
  2633                           
  2634                           ; BSR set to: 0
  2635  0010DA  0E02               	movlw	2
  2636  0010DC                     L22:
  2637  0010DC  0100               	movlb	0	; () banked
  2638  0010DE  6F82               	movwf	_Switch_Program& (0+255),b
  2639  0010E0  0E0A               	movlw	10
  2640  0010E2  D4B0               	goto	L1
  2641  0010E4                     l8299:
  2642                           
  2643                           ; BSR set to: 0
  2644  0010E4  0E0B               	movlw	11
  2645  0010E6  0100               	movlb	0	; () banked
  2646  0010E8  6F7E               	movwf	_Switch_Init& (0+255),b
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;State_Mchn.c: 374: Red_Led(1);
  2650  0010EA  0E01               	movlw	1
  2651  0010EC  ECF2  F01B         	call	_Red_Led
  2652                           
  2653                           ;State_Mchn.c: 376: }
  2654                           
  2655                           ;State_Mchn.c: 375: break;
  2656  0010F0  D18B               	goto	l8471
  2657  0010F2                     l8305:
  2658  0010F2  0E27               	movlw	39
  2659  0010F4  EC56  F01E         	call	_GETxAPIxVAL
  2660                           
  2661                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2662                           ; Switch size 1, requested type "space"
  2663                           ; Number of cases is 1, Range of values is 0 to 0
  2664                           ; switch strategies available:
  2665                           ; Name         Instructions Cycles
  2666                           ; simple_byte            4     3 (average)
  2667                           ;	Chosen strategy is simple_byte
  2668  0010F8  0100               	movlb	0	; () banked
  2669  0010FA  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2670  0010FC  0A00               	xorlw	0	; case 0
  2671  0010FE  A4D8               	btfss	status,2,c
  2672  001100  D7F1               	goto	l8299
  2673                           
  2674                           ; BSR set to: 0
  2675                           ; Switch size 1, requested type "space"
  2676                           ; Number of cases is 4, Range of values is 1 to 4
  2677                           ; switch strategies available:
  2678                           ; Name         Instructions Cycles
  2679                           ; simple_byte           13     7 (average)
  2680                           ;	Chosen strategy is simple_byte
  2681  001102  0100               	movlb	0	; () banked
  2682  001104  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2683  001106  0A01               	xorlw	1	; case 1
  2684  001108  B4D8               	btfsc	status,2,c
  2685  00110A  D7E3               	goto	l8291
  2686  00110C  0A03               	xorlw	3	; case 2
  2687  00110E  B4D8               	btfsc	status,2,c
  2688  001110  D7E2               	goto	l8293
  2689  001112  0A01               	xorlw	1	; case 3
  2690  001114  B4D8               	btfsc	status,2,c
  2691  001116  D7DB               	goto	l8289
  2692  001118  0A07               	xorlw	7	; case 4
  2693  00111A  B4D8               	btfsc	status,2,c
  2694  00111C  D7DE               	goto	l8297
  2695  00111E  D7E2               	goto	l8299
  2696  001120                     l8307:
  2697                           
  2698                           ; BSR set to: 0
  2699  001120  0E00               	movlw	0
  2700  001122  0100               	movlb	0	; () banked
  2701  001124  6F7E               	movwf	_Switch_Init& (0+255),b
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;State_Mchn.c: 380: Red_Led(1);
  2705  001126  0E01               	movlw	1
  2706  001128  ECF2  F01B         	call	_Red_Led
  2707                           
  2708                           ;State_Mchn.c: 382: }
  2709                           
  2710                           ;State_Mchn.c: 381: break;
  2711  00112C  D16D               	goto	l8471
  2712  00112E                     l8313:
  2713  00112E  0100               	movlb	0	; () banked
  2714  001130  517E               	movf	_Switch_Init& (0+255),w,b
  2715                           
  2716                           ; Switch size 1, requested type "space"
  2717                           ; Number of cases is 12, Range of values is 0 to 11
  2718                           ; switch strategies available:
  2719                           ; Name         Instructions Cycles
  2720                           ; simple_byte           37    19 (average)
  2721                           ;	Chosen strategy is simple_byte
  2722  001132  0A00               	xorlw	0	; case 0
  2723  001134  B4D8               	btfsc	status,2,c
  2724  001136  D46C               	goto	l8001
  2725  001138  0A01               	xorlw	1	; case 1
  2726  00113A  B4D8               	btfsc	status,2,c
  2727  00113C  D471               	goto	l8005
  2728  00113E  0A03               	xorlw	3	; case 2
  2729  001140  B4D8               	btfsc	status,2,c
  2730  001142  D4E7               	goto	l8045
  2731  001144  0A01               	xorlw	1	; case 3
  2732  001146  B4D8               	btfsc	status,2,c
  2733  001148  D525               	goto	l8063
  2734  00114A  0A07               	xorlw	7	; case 4
  2735  00114C  B4D8               	btfsc	status,2,c
  2736  00114E  D5A7               	goto	l8109
  2737  001150  0A01               	xorlw	1	; case 5
  2738  001152  B4D8               	btfsc	status,2,c
  2739  001154  D621               	goto	l8135
  2740  001156  0A03               	xorlw	3	; case 6
  2741  001158  B4D8               	btfsc	status,2,c
  2742  00115A  D637               	goto	l8143
  2743  00115C  0A01               	xorlw	1	; case 7
  2744  00115E  B4D8               	btfsc	status,2,c
  2745  001160  D636               	goto	l8145
  2746  001162  0A0F               	xorlw	15	; case 8
  2747  001164  B4D8               	btfsc	status,2,c
  2748  001166  D65D               	goto	l8157
  2749  001168  0A01               	xorlw	1	; case 9
  2750  00116A  B4D8               	btfsc	status,2,c
  2751  00116C  D782               	goto	l8275
  2752  00116E  0A03               	xorlw	3	; case 10
  2753  001170  B4D8               	btfsc	status,2,c
  2754  001172  D781               	goto	l8277
  2755  001174  0A01               	xorlw	1	; case 11
  2756  001176  B4D8               	btfsc	status,2,c
  2757  001178  D7A0               	goto	l8287
  2758  00117A  D7D2               	goto	l8307
  2759  00117C                     l8315:
  2760                           
  2761                           ; BSR set to: 0
  2762  00117C  0E01               	movlw	1
  2763  00117E  0100               	movlb	0	; () banked
  2764  001180  6FB9               	movwf	Train_Path@To& (0+255),b
  2765  001182  0E03               	movlw	3
  2766  001184  ECEB  F010         	call	_Train_Path
  2767  001188  0900               	iorlw	0
  2768  00118A  A4D8               	btfss	status,2,c
  2769  00118C  D090               	goto	l8399
  2770                           
  2771                           ;State_Mchn.c: 389: {
  2772                           ;State_Mchn.c: 390: Switch_Program = 1;
  2773  00118E  0E01               	movlw	1
  2774  001190  0100               	movlb	0	; () banked
  2775  001192  6F82               	movwf	_Switch_Program& (0+255),b
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;State_Mchn.c: 391: Eeprom_Store();
  2779  001194  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2780  001198                     l8321:
  2781                           
  2782                           ;State_Mchn.c: 392: if(Stop_Program == 1)
  2783  001198  0100               	movlb	0	; () banked
  2784  00119A  057D               	decf	_Stop_Program& (0+255),w,b
  2785  00119C  A4D8               	btfss	status,2,c
  2786  00119E  D087               	goto	l8399
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;State_Mchn.c: 393: {
  2790                           ;State_Mchn.c: 394: Switch_Main = 0;
  2791  0011A0  0E00               	movlw	0
  2792  0011A2  0100               	movlb	0	; () banked
  2793  0011A4  6F80               	movwf	_Switch_Main& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;State_Mchn.c: 396: }
  2797                           ;State_Mchn.c: 397: }
  2798                           ;State_Mchn.c: 398: break;
  2799                           
  2800                           ; BSR set to: 0
  2801  0011A6  D083               	goto	l8399
  2802  0011A8                     l8325:
  2803                           
  2804                           ; BSR set to: 0
  2805  0011A8  0E03               	movlw	3
  2806  0011AA  0100               	movlb	0	; () banked
  2807  0011AC  6FB9               	movwf	Train_Path@To& (0+255),b
  2808  0011AE  0E02               	movlw	2
  2809  0011B0  ECEB  F010         	call	_Train_Path
  2810  0011B4  0900               	iorlw	0
  2811  0011B6  A4D8               	btfss	status,2,c
  2812  0011B8  D07A               	goto	l8399
  2813                           
  2814                           ;State_Mchn.c: 401: {
  2815                           ;State_Mchn.c: 402: Switch_Program = 2;
  2816  0011BA  0E02               	movlw	2
  2817  0011BC  0100               	movlb	0	; () banked
  2818  0011BE  6F82               	movwf	_Switch_Program& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;State_Mchn.c: 403: Eeprom_Store();
  2822  0011C0  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2823  0011C4  D7E9               	goto	l8321
  2824  0011C6                     l8335:
  2825                           
  2826                           ; BSR set to: 0
  2827  0011C6  0E04               	movlw	4
  2828  0011C8  0100               	movlb	0	; () banked
  2829  0011CA  6FB9               	movwf	Train_Path@To& (0+255),b
  2830  0011CC  0E01               	movlw	1
  2831  0011CE  ECEB  F010         	call	_Train_Path
  2832  0011D2  0900               	iorlw	0
  2833  0011D4  A4D8               	btfss	status,2,c
  2834  0011D6  D06B               	goto	l8399
  2835                           
  2836                           ;State_Mchn.c: 413: {
  2837                           ;State_Mchn.c: 414: Switch_Program = 3;
  2838  0011D8  0E03               	movlw	3
  2839  0011DA  0100               	movlb	0	; () banked
  2840  0011DC  6F82               	movwf	_Switch_Program& (0+255),b
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;State_Mchn.c: 415: Eeprom_Store();
  2844  0011DE  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2845  0011E2  D7DA               	goto	l8321
  2846  0011E4                     l8345:
  2847                           
  2848                           ; BSR set to: 0
  2849  0011E4  0E01               	movlw	1
  2850  0011E6  0100               	movlb	0	; () banked
  2851  0011E8  6FB9               	movwf	Train_Path@To& (0+255),b
  2852  0011EA  0E03               	movlw	3
  2853  0011EC  ECEB  F010         	call	_Train_Path
  2854  0011F0  0900               	iorlw	0
  2855  0011F2  A4D8               	btfss	status,2,c
  2856  0011F4  D05C               	goto	l8399
  2857                           
  2858                           ;State_Mchn.c: 425: {
  2859                           ;State_Mchn.c: 426: Switch_Program = 4;
  2860  0011F6  0E04               	movlw	4
  2861  0011F8  0100               	movlb	0	; () banked
  2862  0011FA  6F82               	movwf	_Switch_Program& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;State_Mchn.c: 427: Eeprom_Store();
  2866  0011FC  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2867  001200  D7CB               	goto	l8321
  2868  001202                     l8355:
  2869                           
  2870                           ; BSR set to: 0
  2871  001202  0E02               	movlw	2
  2872  001204  0100               	movlb	0	; () banked
  2873  001206  6FB9               	movwf	Train_Path@To& (0+255),b
  2874  001208  0E04               	movlw	4
  2875  00120A  ECEB  F010         	call	_Train_Path
  2876  00120E  0900               	iorlw	0
  2877  001210  A4D8               	btfss	status,2,c
  2878  001212  D04D               	goto	l8399
  2879                           
  2880                           ;State_Mchn.c: 437: {
  2881                           ;State_Mchn.c: 438: Switch_Program = 5;
  2882  001214  0E05               	movlw	5
  2883  001216  0100               	movlb	0	; () banked
  2884  001218  6F82               	movwf	_Switch_Program& (0+255),b
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;State_Mchn.c: 439: Eeprom_Store();
  2888  00121A  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2889  00121E  D7BC               	goto	l8321
  2890  001220                     l8365:
  2891                           
  2892                           ; BSR set to: 0
  2893  001220  0E04               	movlw	4
  2894  001222  0100               	movlb	0	; () banked
  2895  001224  6FB9               	movwf	Train_Path@To& (0+255),b
  2896  001226  0E01               	movlw	1
  2897  001228  ECEB  F010         	call	_Train_Path
  2898  00122C  0900               	iorlw	0
  2899  00122E  A4D8               	btfss	status,2,c
  2900  001230  D03E               	goto	l8399
  2901                           
  2902                           ;State_Mchn.c: 449: {
  2903                           ;State_Mchn.c: 450: Switch_Program = 6;
  2904  001232  0E06               	movlw	6
  2905  001234  0100               	movlb	0	; () banked
  2906  001236  6F82               	movwf	_Switch_Program& (0+255),b
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;State_Mchn.c: 451: Eeprom_Store();
  2910  001238  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2911  00123C  D7AD               	goto	l8321
  2912  00123E                     l8375:
  2913                           
  2914                           ; BSR set to: 0
  2915  00123E  0E03               	movlw	3
  2916  001240  0100               	movlb	0	; () banked
  2917  001242  6FB9               	movwf	Train_Path@To& (0+255),b
  2918  001244  0E02               	movlw	2
  2919  001246  ECEB  F010         	call	_Train_Path
  2920  00124A  0900               	iorlw	0
  2921  00124C  A4D8               	btfss	status,2,c
  2922  00124E  D02F               	goto	l8399
  2923                           
  2924                           ;State_Mchn.c: 461: {
  2925                           ;State_Mchn.c: 462: Switch_Program = 7;
  2926  001250  0E07               	movlw	7
  2927  001252  0100               	movlb	0	; () banked
  2928  001254  6F82               	movwf	_Switch_Program& (0+255),b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;State_Mchn.c: 463: Eeprom_Store();
  2932  001256  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2933  00125A  D79E               	goto	l8321
  2934  00125C                     l8385:
  2935                           
  2936                           ; BSR set to: 0
  2937  00125C  0E02               	movlw	2
  2938  00125E  0100               	movlb	0	; () banked
  2939  001260  6FB9               	movwf	Train_Path@To& (0+255),b
  2940  001262  0E04               	movlw	4
  2941  001264  ECEB  F010         	call	_Train_Path
  2942  001268  0900               	iorlw	0
  2943  00126A  A4D8               	btfss	status,2,c
  2944  00126C  D020               	goto	l8399
  2945                           
  2946                           ;State_Mchn.c: 473: {
  2947                           ;State_Mchn.c: 474: Switch_Program = 0;
  2948  00126E  0E00               	movlw	0
  2949  001270  0100               	movlb	0	; () banked
  2950  001272  6F82               	movwf	_Switch_Program& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;State_Mchn.c: 475: Eeprom_Store();
  2954  001274  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  2955  001278  D78F               	goto	l8321
  2956  00127A                     l8397:
  2957                           
  2958                           ; BSR set to: 0
  2959  00127A  0100               	movlb	0	; () banked
  2960  00127C  5182               	movf	_Switch_Program& (0+255),w,b
  2961                           
  2962                           ; Switch size 1, requested type "space"
  2963                           ; Number of cases is 8, Range of values is 0 to 7
  2964                           ; switch strategies available:
  2965                           ; Name         Instructions Cycles
  2966                           ; simple_byte           25    13 (average)
  2967                           ;	Chosen strategy is simple_byte
  2968  00127E  0A00               	xorlw	0	; case 0
  2969  001280  B4D8               	btfsc	status,2,c
  2970  001282  D77C               	goto	l8315
  2971  001284  0A01               	xorlw	1	; case 1
  2972  001286  B4D8               	btfsc	status,2,c
  2973  001288  D78F               	goto	l8325
  2974  00128A  0A03               	xorlw	3	; case 2
  2975  00128C  B4D8               	btfsc	status,2,c
  2976  00128E  D79B               	goto	l8335
  2977  001290  0A01               	xorlw	1	; case 3
  2978  001292  B4D8               	btfsc	status,2,c
  2979  001294  D7A7               	goto	l8345
  2980  001296  0A07               	xorlw	7	; case 4
  2981  001298  B4D8               	btfsc	status,2,c
  2982  00129A  D7B3               	goto	l8355
  2983  00129C  0A01               	xorlw	1	; case 5
  2984  00129E  B4D8               	btfsc	status,2,c
  2985  0012A0  D7BF               	goto	l8365
  2986  0012A2  0A03               	xorlw	3	; case 6
  2987  0012A4  B4D8               	btfsc	status,2,c
  2988  0012A6  D7CB               	goto	l8375
  2989  0012A8  0A01               	xorlw	1	; case 7
  2990  0012AA  B4D8               	btfsc	status,2,c
  2991  0012AC  D7D7               	goto	l8385
  2992  0012AE                     l8399:
  2993                           
  2994                           ;State_Mchn.c: 671: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  2995  0012AE  0E21               	movlw	33
  2996  0012B0  EC56  F01E         	call	_GETxAPIxVAL
  2997  0012B4  0100               	movlb	0	; () banked
  2998  0012B6  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  2999  0012B8  0100               	movlb	0	; () banked
  3000  0012BA  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3001  0012BC  A4D8               	btfss	status,2,c
  3002  0012BE  D009               	goto	l8403
  3003                           
  3004                           ; BSR set to: 0
  3005  0012C0  0E47               	movlw	71
  3006  0012C2  EC56  F01E         	call	_GETxAPIxVAL
  3007  0012C6  0100               	movlb	0	; () banked
  3008  0012C8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  3009  0012CA  0100               	movlb	0	; () banked
  3010  0012CC  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3011  0012CE  B4D8               	btfsc	status,2,c
  3012  0012D0  D00B               	goto	l8407
  3013  0012D2                     l8403:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;State_Mchn.c: 672: {
  3017                           ;State_Mchn.c: 673: Stop_Program = 1;
  3018  0012D2  0E01               	movlw	1
  3019  0012D4  0100               	movlb	0	; () banked
  3020  0012D6  6F7D               	movwf	_Stop_Program& (0+255),b
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;State_Mchn.c: 674: SETxAPIxVAL(71, 0);
  3024  0012D8  0E00               	movlw	0
  3025  0012DA  0100               	movlb	0	; () banked
  3026  0012DC  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  3027  0012DE  0E00               	movlw	0
  3028  0012E0  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  3029  0012E2  0E47               	movlw	71
  3030  0012E4  EC49  F01D         	call	_SETxAPIxVAL
  3031  0012E8                     l8407:
  3032                           
  3033                           ;State_Mchn.c: 675: }
  3034                           ;State_Mchn.c: 677: if(Stop_Program == 1)
  3035  0012E8  0100               	movlb	0	; () banked
  3036  0012EA  057D               	decf	_Stop_Program& (0+255),w,b
  3037  0012EC  A4D8               	btfss	status,2,c
  3038  0012EE  D003               	goto	l318
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;State_Mchn.c: 678: {
  3042                           ;State_Mchn.c: 679: Red_Led(2);
  3043  0012F0  0E02               	movlw	2
  3044  0012F2  ECF2  F01B         	call	_Red_Led
  3045  0012F6                     l318:
  3046                           
  3047                           ;State_Mchn.c: 680: }
  3048                           ;State_Mchn.c: 682: Green_Led(1);
  3049  0012F6  0E01               	movlw	1
  3050  0012F8  EC32  F01C         	call	_Green_Led
  3051                           
  3052                           ;State_Mchn.c: 684: break;
  3053  0012FC  D085               	goto	l8471
  3054  0012FE                     l8411:
  3055  0012FE  0E01               	movlw	1
  3056  001300  0100               	movlb	0	; () banked
  3057  001302  6FB9               	movwf	Train_Path@To& (0+255),b
  3058  001304  0E03               	movlw	3
  3059  001306  ECEB  F010         	call	_Train_Path
  3060  00130A  0900               	iorlw	0
  3061  00130C  A4D8               	btfss	status,2,c
  3062  00130E  D048               	goto	l8455
  3063                           
  3064                           ;State_Mchn.c: 690: {
  3065                           ;State_Mchn.c: 691: Switch_Program = 1;
  3066  001310  0E01               	movlw	1
  3067  001312  0100               	movlb	0	; () banked
  3068  001314  6F82               	movwf	_Switch_Program& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;State_Mchn.c: 692: Eeprom_Store();
  3072  001316  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  3073  00131A                     l8417:
  3074                           
  3075                           ;State_Mchn.c: 693: if(Stop_Program == 1)
  3076  00131A  0100               	movlb	0	; () banked
  3077  00131C  057D               	decf	_Stop_Program& (0+255),w,b
  3078  00131E  A4D8               	btfss	status,2,c
  3079  001320  D03F               	goto	l8455
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;State_Mchn.c: 694: {
  3083                           ;State_Mchn.c: 695: Switch_Main = 0;
  3084  001322  0E00               	movlw	0
  3085  001324  0100               	movlb	0	; () banked
  3086  001326  6F80               	movwf	_Switch_Main& (0+255),b
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;State_Mchn.c: 697: }
  3090                           ;State_Mchn.c: 698: }
  3091                           ;State_Mchn.c: 699: break;
  3092                           
  3093                           ; BSR set to: 0
  3094  001328  D03B               	goto	l8455
  3095  00132A                     l8421:
  3096                           
  3097                           ; BSR set to: 0
  3098  00132A  0E04               	movlw	4
  3099  00132C  0100               	movlb	0	; () banked
  3100  00132E  6FB9               	movwf	Train_Path@To& (0+255),b
  3101  001330  0E01               	movlw	1
  3102  001332  ECEB  F010         	call	_Train_Path
  3103  001336  0900               	iorlw	0
  3104  001338  A4D8               	btfss	status,2,c
  3105  00133A  D032               	goto	l8455
  3106                           
  3107                           ;State_Mchn.c: 702: {
  3108                           ;State_Mchn.c: 703: Switch_Program = 2;
  3109  00133C  0E02               	movlw	2
  3110  00133E  0100               	movlb	0	; () banked
  3111  001340  6F82               	movwf	_Switch_Program& (0+255),b
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;State_Mchn.c: 704: Eeprom_Store();
  3115  001342  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  3116  001346  D7E9               	goto	l8417
  3117  001348                     l8431:
  3118                           
  3119                           ; BSR set to: 0
  3120  001348  0E02               	movlw	2
  3121  00134A  0100               	movlb	0	; () banked
  3122  00134C  6FB9               	movwf	Train_Path@To& (0+255),b
  3123  00134E  0E04               	movlw	4
  3124  001350  ECEB  F010         	call	_Train_Path
  3125  001354  0900               	iorlw	0
  3126  001356  A4D8               	btfss	status,2,c
  3127  001358  D023               	goto	l8455
  3128                           
  3129                           ;State_Mchn.c: 714: {
  3130                           ;State_Mchn.c: 715: Switch_Program = 3;
  3131  00135A  0E03               	movlw	3
  3132  00135C  0100               	movlb	0	; () banked
  3133  00135E  6F82               	movwf	_Switch_Program& (0+255),b
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;State_Mchn.c: 716: Eeprom_Store();
  3137  001360  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  3138  001364  D7DA               	goto	l8417
  3139  001366                     l8441:
  3140                           
  3141                           ; BSR set to: 0
  3142  001366  0E03               	movlw	3
  3143  001368  0100               	movlb	0	; () banked
  3144  00136A  6FB9               	movwf	Train_Path@To& (0+255),b
  3145  00136C  0E02               	movlw	2
  3146  00136E  ECEB  F010         	call	_Train_Path
  3147  001372  0900               	iorlw	0
  3148  001374  A4D8               	btfss	status,2,c
  3149  001376  D014               	goto	l8455
  3150                           
  3151                           ;State_Mchn.c: 726: {
  3152                           ;State_Mchn.c: 727: Switch_Program = 0;
  3153  001378  0E00               	movlw	0
  3154  00137A  0100               	movlb	0	; () banked
  3155  00137C  6F82               	movwf	_Switch_Program& (0+255),b
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;State_Mchn.c: 728: Eeprom_Store();
  3159  00137E  ECE1  F01A         	call	_Eeprom_Store	;wreg free
  3160  001382  D7CB               	goto	l8417
  3161  001384                     l8453:
  3162  001384  0100               	movlb	0	; () banked
  3163  001386  5182               	movf	_Switch_Program& (0+255),w,b
  3164                           
  3165                           ; Switch size 1, requested type "space"
  3166                           ; Number of cases is 4, Range of values is 0 to 3
  3167                           ; switch strategies available:
  3168                           ; Name         Instructions Cycles
  3169                           ; simple_byte           13     7 (average)
  3170                           ;	Chosen strategy is simple_byte
  3171  001388  0A00               	xorlw	0	; case 0
  3172  00138A  B4D8               	btfsc	status,2,c
  3173  00138C  D7B8               	goto	l8411
  3174  00138E  0A01               	xorlw	1	; case 1
  3175  001390  B4D8               	btfsc	status,2,c
  3176  001392  D7CB               	goto	l8421
  3177  001394  0A03               	xorlw	3	; case 2
  3178  001396  B4D8               	btfsc	status,2,c
  3179  001398  D7D7               	goto	l8431
  3180  00139A  0A01               	xorlw	1	; case 3
  3181  00139C  B4D8               	btfsc	status,2,c
  3182  00139E  D7E3               	goto	l8441
  3183  0013A0                     l8455:
  3184                           
  3185                           ;State_Mchn.c: 922: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3186  0013A0  0E21               	movlw	33
  3187  0013A2  EC56  F01E         	call	_GETxAPIxVAL
  3188  0013A6  0100               	movlb	0	; () banked
  3189  0013A8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  3190  0013AA  0100               	movlb	0	; () banked
  3191  0013AC  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3192  0013AE  A4D8               	btfss	status,2,c
  3193  0013B0  D009               	goto	l8459
  3194                           
  3195                           ; BSR set to: 0
  3196  0013B2  0E47               	movlw	71
  3197  0013B4  EC56  F01E         	call	_GETxAPIxVAL
  3198  0013B8  0100               	movlb	0	; () banked
  3199  0013BA  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  3200  0013BC  0100               	movlb	0	; () banked
  3201  0013BE  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3202  0013C0  B4D8               	btfsc	status,2,c
  3203  0013C2  D00B               	goto	l8463
  3204  0013C4                     l8459:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;State_Mchn.c: 923: {
  3208                           ;State_Mchn.c: 924: Stop_Program = 1;
  3209  0013C4  0E01               	movlw	1
  3210  0013C6  0100               	movlb	0	; () banked
  3211  0013C8  6F7D               	movwf	_Stop_Program& (0+255),b
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;State_Mchn.c: 925: SETxAPIxVAL(71, 0);
  3215  0013CA  0E00               	movlw	0
  3216  0013CC  0100               	movlb	0	; () banked
  3217  0013CE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  3218  0013D0  0E00               	movlw	0
  3219  0013D2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  3220  0013D4  0E47               	movlw	71
  3221  0013D6  EC49  F01D         	call	_SETxAPIxVAL
  3222  0013DA                     l8463:
  3223                           
  3224                           ;State_Mchn.c: 926: }
  3225                           ;State_Mchn.c: 928: if(Stop_Program == 1)
  3226  0013DA  0100               	movlb	0	; () banked
  3227  0013DC  057D               	decf	_Stop_Program& (0+255),w,b
  3228  0013DE  A4D8               	btfss	status,2,c
  3229  0013E0  D003               	goto	l338
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;State_Mchn.c: 929: {
  3233                           ;State_Mchn.c: 930: Red_Led(2);
  3234  0013E2  0E02               	movlw	2
  3235  0013E4  ECF2  F01B         	call	_Red_Led
  3236  0013E8                     l338:
  3237                           
  3238                           ;State_Mchn.c: 931: }
  3239                           ;State_Mchn.c: 933: Green_Led(1);
  3240  0013E8  0E01               	movlw	1
  3241  0013EA  EC32  F01C         	call	_Green_Led
  3242                           
  3243                           ;State_Mchn.c: 938: }
  3244                           
  3245                           ;State_Mchn.c: 937: default : break;
  3246                           
  3247                           ;State_Mchn.c: 935: break;
  3248  0013EE  D00C               	goto	l8471
  3249  0013F0                     l8469:
  3250  0013F0  0100               	movlb	0	; () banked
  3251  0013F2  5180               	movf	_Switch_Main& (0+255),w,b
  3252                           
  3253                           ; Switch size 1, requested type "space"
  3254                           ; Number of cases is 3, Range of values is 0 to 2
  3255                           ; switch strategies available:
  3256                           ; Name         Instructions Cycles
  3257                           ; simple_byte           10     6 (average)
  3258                           ;	Chosen strategy is simple_byte
  3259  0013F4  0A00               	xorlw	0	; case 0
  3260  0013F6  B4D8               	btfsc	status,2,c
  3261  0013F8  EF3D  F004         	goto	l7965
  3262  0013FC  0A01               	xorlw	1	; case 1
  3263  0013FE  B4D8               	btfsc	status,2,c
  3264  001400  D73C               	goto	l8397
  3265  001402  0A03               	xorlw	3	; case 2
  3266  001404  B4D8               	btfsc	status,2,c
  3267  001406  D7BE               	goto	l8453
  3268  001408                     l8471:
  3269                           
  3270                           ;State_Mchn.c: 939: SETxAPIxVAL(63, Switch_Main);
  3271  001408  C080  F0AC         	movff	_Switch_Main,SETxAPIxVAL@value
  3272  00140C  0100               	movlb	0	; () banked
  3273  00140E  6BAD               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3274  001410  0E3F               	movlw	63
  3275  001412  EC49  F01D         	call	_SETxAPIxVAL
  3276  001416  0012               	return		;funcret
  3277  001418                     __end_of_Update_StateMchn:
  3278                           	opt stack 0
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           postinc0	equ	0xFEE
  3284                           wreg	equ	0xFE8
  3285                           postdec1	equ	0xFE5
  3286                           fsr1h	equ	0xFE2
  3287                           fsr1l	equ	0xFE1
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _Train_Path *****************
  3291 ;; Defined at:
  3292 ;;		line 957 in file "../State_Mchn.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  From            1    wreg     unsigned char 
  3295 ;;  To              1   41[BANK0 ] unsigned char 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  From            1   42[BANK0 ] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      unsigned char 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3307 ;;      Params:         0       1       0       0       0       0       0       0       0
  3308 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3310 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3311 ;;Total ram usage:        2 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    9
  3314 ;; This function calls:
  3315 ;;		_GETxAPIxVAL
  3316 ;;		_Junction
  3317 ;;		_Left_Mountain_From_The_Left
  3318 ;;		_Left_Mountain_From_The_Right
  3319 ;;		_Right_Mountain_From_The_Left
  3320 ;;		_Right_Mountain_From_The_Right
  3321 ;;		_SETxAPIxVAL
  3322 ;;		_Train_Move_Left_Brake
  3323 ;;		_Train_Move_Left_Start
  3324 ;;		_Train_Move_Right_Brake
  3325 ;;		_Train_Move_Right_Start
  3326 ;; This function is called by:
  3327 ;;		_Update_StateMchn
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text2
  3332  0021D6                     __ptext2:
  3333                           	opt stack 0
  3334  0021D6                     _Train_Path:
  3335                           	opt stack 20
  3336                           
  3337                           ;incstack = 0
  3338                           ;Train_Path@From stored from wreg
  3339  0021D6  0100               	movlb	0	; () banked
  3340  0021D8  6FBA               	movwf	Train_Path@From& (0+255),b
  3341                           
  3342                           ;State_Mchn.c: 959: static char Return_Val = 1;
  3343                           ;State_Mchn.c: 961: SETxAPIxVAL(61, From);
  3344  0021DA  C0BA  F0AC         	movff	Train_Path@From,SETxAPIxVAL@value
  3345  0021DE  0100               	movlb	0	; () banked
  3346  0021E0  6BAD               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3347  0021E2  0E3D               	movlw	61
  3348  0021E4  EC49  F01D         	call	_SETxAPIxVAL
  3349                           
  3350                           ;State_Mchn.c: 962: SETxAPIxVAL(62, To);
  3351  0021E8  C0B9  F0AC         	movff	Train_Path@To,SETxAPIxVAL@value
  3352  0021EC  0100               	movlb	0	; () banked
  3353  0021EE  6BAD               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3354  0021F0  0E3E               	movlw	62
  3355  0021F2  EC49  F01D         	call	_SETxAPIxVAL
  3356                           
  3357                           ;State_Mchn.c: 964: switch(Switch_Train_Path)
  3358  0021F6  D1A1               	goto	l7823
  3359  0021F8                     l7615:
  3360  0021F8  0E00               	movlw	0
  3361  0021FA  0100               	movlb	0	; () banked
  3362  0021FC  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3363  0021FE  0E01               	movlw	1
  3364  002200  EC2A  F016         	call	_Junction
  3365  002204  0900               	iorlw	0
  3366  002206  B4D8               	btfsc	status,2,c
  3367  002208  D01B               	goto	l7629
  3368  00220A                     l349:
  3369                           
  3370                           ;State_Mchn.c: 972: }
  3371                           ;State_Mchn.c: 973: Return_Val = 1;
  3372  00220A  0E01               	movlw	1
  3373  00220C                     L39:
  3374  00220C  0100               	movlb	0	; () banked
  3375  00220E  6FC6               	movwf	Train_Path@Return_Val& (0+255),b
  3376                           
  3377                           ;State_Mchn.c: 974: break;
  3378  002210  D1BE               	goto	l7825
  3379  002212                     l7619:
  3380                           
  3381                           ; BSR set to: 0
  3382  002212  0E01               	movlw	1
  3383  002214  0100               	movlb	0	; () banked
  3384  002216  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3385  002218  0E01               	movlw	1
  3386  00221A  EC2A  F016         	call	_Junction
  3387  00221E  D7F2               	goto	L58
  3388  002220                     l7623:
  3389                           
  3390                           ; BSR set to: 0
  3391  002220  0E01               	movlw	1
  3392  002222  0100               	movlb	0	; () banked
  3393  002224  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3394  002226  0E00               	movlw	0
  3395  002228  EC2A  F016         	call	_Junction
  3396  00222C  D7EB               	goto	L58
  3397  00222E                     l7627:
  3398                           
  3399                           ; BSR set to: 0
  3400  00222E  0E00               	movlw	0
  3401  002230  0100               	movlb	0	; () banked
  3402  002232  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3403  002234  0E00               	movlw	0
  3404  002236  EC2A  F016         	call	_Junction
  3405  00223A  0900               	iorlw	0
  3406  00223C  A4D8               	btfss	status,2,c
  3407  00223E  D7E5               	goto	l349
  3408  002240                     l7629:
  3409                           
  3410                           ;State_Mchn.c: 990: {
  3411                           ;State_Mchn.c: 991: Switch_Train_Path = 1;
  3412  002240  0E01               	movlw	1
  3413  002242  D016               	goto	L40
  3414  002244                     l7633:
  3415  002244  0100               	movlb	0	; () banked
  3416  002246  51BA               	movf	Train_Path@From& (0+255),w,b
  3417                           
  3418                           ; Switch size 1, requested type "space"
  3419                           ; Number of cases is 4, Range of values is 1 to 4
  3420                           ; switch strategies available:
  3421                           ; Name         Instructions Cycles
  3422                           ; simple_byte           13     7 (average)
  3423                           ;	Chosen strategy is simple_byte
  3424  002248  0A01               	xorlw	1	; case 1
  3425  00224A  B4D8               	btfsc	status,2,c
  3426  00224C  D7E9               	goto	l7623
  3427  00224E  0A03               	xorlw	3	; case 2
  3428  002250  B4D8               	btfsc	status,2,c
  3429  002252  D7ED               	goto	l7627
  3430  002254  0A01               	xorlw	1	; case 3
  3431  002256  B4D8               	btfsc	status,2,c
  3432  002258  D7CF               	goto	l7615
  3433  00225A  0A07               	xorlw	7	; case 4
  3434  00225C  B4D8               	btfsc	status,2,c
  3435  00225E  D7D9               	goto	l7619
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;State_Mchn.c: 998: break;
  3439  002260  D196               	goto	l7825
  3440  002262                     l7635:
  3441                           
  3442                           ; BSR set to: 0
  3443  002262  0E00               	movlw	0
  3444  002264  0100               	movlb	0	; () banked
  3445  002266  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3446  002268  0E01               	movlw	1
  3447  00226A  EC2A  F016         	call	_Junction
  3448  00226E  D01A               	goto	L45
  3449  002270                     L40:
  3450  002270  0100               	movlb	0	; () banked
  3451  002272  6F84               	movwf	_Switch_Train_Path& (0+255),b
  3452                           
  3453                           ;State_Mchn.c: 1005: Return_Val = 1;
  3454  002274  0E01               	movlw	1
  3455  002276  0100               	movlb	0	; () banked
  3456  002278  6FC6               	movwf	Train_Path@Return_Val& (0+255),b
  3457  00227A  D7C7               	goto	l349
  3458  00227C                     l7639:
  3459                           
  3460                           ; BSR set to: 0
  3461  00227C  0E01               	movlw	1
  3462  00227E  0100               	movlb	0	; () banked
  3463  002280  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3464  002282  0E01               	movlw	1
  3465  002284  EC2A  F016         	call	_Junction
  3466  002288  D00D               	goto	L45
  3467  00228A                     l7643:
  3468                           
  3469                           ; BSR set to: 0
  3470  00228A  0E01               	movlw	1
  3471  00228C  0100               	movlb	0	; () banked
  3472  00228E  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3473  002290  0E00               	movlw	0
  3474  002292  EC2A  F016         	call	_Junction
  3475  002296  D006               	goto	L45
  3476  002298                     l7647:
  3477                           
  3478                           ; BSR set to: 0
  3479  002298  0E00               	movlw	0
  3480  00229A  0100               	movlb	0	; () banked
  3481  00229C  6FB1               	movwf	Junction@Straight_Bend& (0+255),b
  3482  00229E  0E00               	movlw	0
  3483  0022A0  EC2A  F016         	call	_Junction
  3484  0022A4                     L45:
  3485  0022A4  0900               	iorlw	0
  3486  0022A6  A4D8               	btfss	status,2,c
  3487  0022A8  D7B0               	goto	l349
  3488                           
  3489                           ;State_Mchn.c: 1024: {
  3490                           ;State_Mchn.c: 1025: Switch_Train_Path = 2;
  3491  0022AA  0E02               	movlw	2
  3492  0022AC  D7E1               	goto	L40
  3493  0022AE                     l7653:
  3494                           
  3495                           ; BSR set to: 0
  3496  0022AE  0100               	movlb	0	; () banked
  3497  0022B0  51B9               	movf	Train_Path@To& (0+255),w,b
  3498                           
  3499                           ; Switch size 1, requested type "space"
  3500                           ; Number of cases is 4, Range of values is 1 to 4
  3501                           ; switch strategies available:
  3502                           ; Name         Instructions Cycles
  3503                           ; simple_byte           13     7 (average)
  3504                           ;	Chosen strategy is simple_byte
  3505  0022B2  0A01               	xorlw	1	; case 1
  3506  0022B4  B4D8               	btfsc	status,2,c
  3507  0022B6  D7E9               	goto	l7643
  3508  0022B8  0A03               	xorlw	3	; case 2
  3509  0022BA  B4D8               	btfsc	status,2,c
  3510  0022BC  D7ED               	goto	l7647
  3511  0022BE  0A01               	xorlw	1	; case 3
  3512  0022C0  B4D8               	btfsc	status,2,c
  3513  0022C2  D7CF               	goto	l7635
  3514  0022C4  0A07               	xorlw	7	; case 4
  3515  0022C6  B4D8               	btfsc	status,2,c
  3516  0022C8  D7D9               	goto	l7639
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;State_Mchn.c: 1032: break;
  3520  0022CA  D161               	goto	l7825
  3521  0022CC                     l7655:
  3522                           
  3523                           ; BSR set to: 0
  3524  0022CC  ECC9  F016         	call	_Train_Move_Right_Start	;wreg free
  3525  0022D0  D008               	goto	L48
  3526  0022D2                     l7659:
  3527                           
  3528                           ; BSR set to: 0
  3529  0022D2  ECC9  F016         	call	_Train_Move_Right_Start	;wreg free
  3530  0022D6  D005               	goto	L48
  3531  0022D8                     l7663:
  3532                           
  3533                           ; BSR set to: 0
  3534  0022D8  EC67  F017         	call	_Train_Move_Left_Start	;wreg free
  3535  0022DC  D002               	goto	L48
  3536  0022DE                     l7667:
  3537                           
  3538                           ; BSR set to: 0
  3539  0022DE  EC67  F017         	call	_Train_Move_Left_Start	;wreg free
  3540  0022E2                     L48:
  3541  0022E2  0900               	iorlw	0
  3542  0022E4  A4D8               	btfss	status,2,c
  3543  0022E6  D791               	goto	l349
  3544                           
  3545                           ;State_Mchn.c: 1058: {
  3546                           ;State_Mchn.c: 1059: Switch_Train_Path = 3;
  3547  0022E8  0E03               	movlw	3
  3548  0022EA  D7C2               	goto	L40
  3549  0022EC                     l7673:
  3550                           
  3551                           ; BSR set to: 0
  3552  0022EC  0100               	movlb	0	; () banked
  3553  0022EE  51B9               	movf	Train_Path@To& (0+255),w,b
  3554                           
  3555                           ; Switch size 1, requested type "space"
  3556                           ; Number of cases is 4, Range of values is 1 to 4
  3557                           ; switch strategies available:
  3558                           ; Name         Instructions Cycles
  3559                           ; simple_byte           13     7 (average)
  3560                           ;	Chosen strategy is simple_byte
  3561  0022F0  0A01               	xorlw	1	; case 1
  3562  0022F2  B4D8               	btfsc	status,2,c
  3563  0022F4  D7F1               	goto	l7663
  3564  0022F6  0A03               	xorlw	3	; case 2
  3565  0022F8  B4D8               	btfsc	status,2,c
  3566  0022FA  D7F1               	goto	l7667
  3567  0022FC  0A01               	xorlw	1	; case 3
  3568  0022FE  B4D8               	btfsc	status,2,c
  3569  002300  D7E5               	goto	l7655
  3570  002302  0A07               	xorlw	7	; case 4
  3571  002304  B4D8               	btfsc	status,2,c
  3572  002306  D7E5               	goto	l7659
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;State_Mchn.c: 1066: break;
  3576  002308  D142               	goto	l7825
  3577  00230A                     l7675:
  3578                           
  3579                           ; BSR set to: 0
  3580  00230A  0E1C               	movlw	28
  3581  00230C  EC56  F01E         	call	_GETxAPIxVAL
  3582  002310  0100               	movlb	0	; () banked
  3583  002312  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3584  002314  0100               	movlb	0	; () banked
  3585  002316  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3586  002318  B4D8               	btfsc	status,2,c
  3587  00231A  D088               	goto	l7737
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;State_Mchn.c: 1073: else if(GETxAPIxVAL(41) == 1){
  3591                           
  3592                           ; BSR set to: 0
  3593                           
  3594                           ;State_Mchn.c: 1072: }
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;State_Mchn.c: 1071: Switch_Train_Path = 4;
  3598  00231C  0E29               	movlw	41
  3599  00231E  EC56  F01E         	call	_GETxAPIxVAL
  3600  002322  0100               	movlb	0	; () banked
  3601  002324  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3602  002326  0100               	movlb	0	; () banked
  3603  002328  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3604  00232A  A4D8               	btfss	status,2,c
  3605  00232C  D002               	goto	l7683
  3606  00232E                     
  3607                           ; BSR set to: 0
  3608                           ;State_Mchn.c: 1074: Switch_Train_Path = 5;
  3609  00232E  0E05               	movlw	5
  3610  002330  D049               	goto	L30
  3611  002332                     l7683:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;State_Mchn.c: 1076: else if(GETxAPIxVAL(42) == 1){
  3615  002332  0E2A               	movlw	42
  3616  002334  EC56  F01E         	call	_GETxAPIxVAL
  3617  002338  0100               	movlb	0	; () banked
  3618  00233A  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3619  00233C  0100               	movlb	0	; () banked
  3620  00233E  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3621  002340  A4D8               	btfss	status,2,c
  3622  002342  D002               	goto	l7687
  3623  002344                     
  3624                           ; BSR set to: 0
  3625                           ;State_Mchn.c: 1077: Switch_Train_Path = 6;
  3626  002344  0E06               	movlw	6
  3627  002346  D03E               	goto	L30
  3628  002348                     l7687:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;State_Mchn.c: 1079: else if(GETxAPIxVAL(44) == 1){
  3632  002348  0E2C               	movlw	44
  3633  00234A  EC56  F01E         	call	_GETxAPIxVAL
  3634  00234E  0100               	movlb	0	; () banked
  3635  002350  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3636  002352  0100               	movlb	0	; () banked
  3637  002354  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3638  002356  A4D8               	btfss	status,2,c
  3639  002358  D002               	goto	l7691
  3640  00235A                     
  3641                           ; BSR set to: 0
  3642                           ;State_Mchn.c: 1080: Switch_Train_Path = 7;
  3643  00235A  0E07               	movlw	7
  3644  00235C  D033               	goto	L30
  3645  00235E                     l7691:
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;State_Mchn.c: 1082: else if(GETxAPIxVAL(43) == 1){
  3649  00235E  0E2B               	movlw	43
  3650  002360  EC56  F01E         	call	_GETxAPIxVAL
  3651  002364  0100               	movlb	0	; () banked
  3652  002366  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3653  002368  0100               	movlb	0	; () banked
  3654  00236A  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3655  00236C  A4D8               	btfss	status,2,c
  3656  00236E  D74D               	goto	l349
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;State_Mchn.c: 1083: Switch_Train_Path = 8;
  3660  002370  0E08               	movlw	8
  3661  002372  D028               	goto	L30
  3662  002374                     l7695:
  3663                           
  3664                           ; BSR set to: 0
  3665  002374  0E1D               	movlw	29
  3666  002376  EC56  F01E         	call	_GETxAPIxVAL
  3667  00237A  0100               	movlb	0	; () banked
  3668  00237C  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3669  00237E  0100               	movlb	0	; () banked
  3670  002380  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3671  002382  B4D8               	btfsc	status,2,c
  3672  002384  D053               	goto	l7737
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;State_Mchn.c: 1090: else if(GETxAPIxVAL(41) == 1){
  3676                           
  3677                           ; BSR set to: 0
  3678                           
  3679                           ;State_Mchn.c: 1089: }
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;State_Mchn.c: 1088: Switch_Train_Path = 4;
  3683  002386  0E29               	movlw	41
  3684  002388  EC56  F01E         	call	_GETxAPIxVAL
  3685  00238C  0100               	movlb	0	; () banked
  3686  00238E  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3687  002390  0100               	movlb	0	; () banked
  3688  002392  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3689  002394  B4D8               	btfsc	status,2,c
  3690  002396  D7CB               	goto	L95
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;State_Mchn.c: 1093: else if(GETxAPIxVAL(42) == 1){
  3694                           
  3695                           ; BSR set to: 0
  3696                           
  3697                           ;State_Mchn.c: 1092: }
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;State_Mchn.c: 1091: Switch_Train_Path = 5;
  3701  002398  0E2A               	movlw	42
  3702  00239A  EC56  F01E         	call	_GETxAPIxVAL
  3703  00239E  0100               	movlb	0	; () banked
  3704  0023A0  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3705  0023A2  0100               	movlb	0	; () banked
  3706  0023A4  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3707  0023A6  B4D8               	btfsc	status,2,c
  3708  0023A8  D7CD               	goto	L96
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;State_Mchn.c: 1096: else if(GETxAPIxVAL(44) == 1){
  3712                           
  3713                           ; BSR set to: 0
  3714                           
  3715                           ;State_Mchn.c: 1095: }
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;State_Mchn.c: 1094: Switch_Train_Path = 6;
  3719  0023AA  0E2C               	movlw	44
  3720  0023AC  EC56  F01E         	call	_GETxAPIxVAL
  3721  0023B0  0100               	movlb	0	; () banked
  3722  0023B2  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3723  0023B4  0100               	movlb	0	; () banked
  3724  0023B6  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3725  0023B8  B4D8               	btfsc	status,2,c
  3726  0023BA  D7CF               	goto	L97
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;State_Mchn.c: 1099: else if(GETxAPIxVAL(43) == 1){
  3730                           
  3731                           ; BSR set to: 0
  3732                           
  3733                           ;State_Mchn.c: 1098: }
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;State_Mchn.c: 1097: Switch_Train_Path = 7;
  3737  0023BC  0E2B               	movlw	43
  3738  0023BE  EC56  F01E         	call	_GETxAPIxVAL
  3739  0023C2  D7D0               	goto	L41
  3740  0023C4                     L30:
  3741  0023C4  0100               	movlb	0	; () banked
  3742  0023C6  6F84               	movwf	_Switch_Train_Path& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           
  3746                           ; BSR set to: 0
  3747                           
  3748                           ; BSR set to: 0
  3749  0023C8  D720               	goto	l349
  3750  0023CA                     l7715:
  3751                           
  3752                           ; BSR set to: 0
  3753  0023CA  0E1E               	movlw	30
  3754  0023CC  EC56  F01E         	call	_GETxAPIxVAL
  3755  0023D0  0100               	movlb	0	; () banked
  3756  0023D2  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3757  0023D4  0100               	movlb	0	; () banked
  3758  0023D6  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3759  0023D8  B4D8               	btfsc	status,2,c
  3760  0023DA  D028               	goto	l7737
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;State_Mchn.c: 1108: else if(GETxAPIxVAL(41) == 1){
  3764                           
  3765                           ; BSR set to: 0
  3766                           
  3767                           ;State_Mchn.c: 1107: }
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;State_Mchn.c: 1105: {
  3771                           ;State_Mchn.c: 1106: Switch_Train_Path = 4;
  3772  0023DC  0E29               	movlw	41
  3773  0023DE  EC56  F01E         	call	_GETxAPIxVAL
  3774  0023E2  0100               	movlb	0	; () banked
  3775  0023E4  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3776  0023E6  0100               	movlb	0	; () banked
  3777  0023E8  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3778  0023EA  B4D8               	btfsc	status,2,c
  3779  0023EC  D02A               	goto	l7741
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;State_Mchn.c: 1111: else if(GETxAPIxVAL(42) == 1){
  3783                           
  3784                           ; BSR set to: 0
  3785                           
  3786                           ;State_Mchn.c: 1110: }
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;State_Mchn.c: 1109: Switch_Train_Path = 12;
  3790  0023EE  0E2A               	movlw	42
  3791  0023F0  EC56  F01E         	call	_GETxAPIxVAL
  3792  0023F4  0100               	movlb	0	; () banked
  3793  0023F6  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3794  0023F8  0100               	movlb	0	; () banked
  3795  0023FA  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3796  0023FC  B4D8               	btfsc	status,2,c
  3797  0023FE  D02C               	goto	l7745
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;State_Mchn.c: 1114: else if(GETxAPIxVAL(44) == 1){
  3801                           
  3802                           ; BSR set to: 0
  3803                           
  3804                           ;State_Mchn.c: 1113: }
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;State_Mchn.c: 1112: Switch_Train_Path = 11;
  3808  002400  0E2C               	movlw	44
  3809  002402  EC56  F01E         	call	_GETxAPIxVAL
  3810  002406  0100               	movlb	0	; () banked
  3811  002408  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3812  00240A  0100               	movlb	0	; () banked
  3813  00240C  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3814  00240E  B4D8               	btfsc	status,2,c
  3815  002410  D02E               	goto	l7749
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;State_Mchn.c: 1117: else if(GETxAPIxVAL(43) == 1){
  3819                           
  3820                           ; BSR set to: 0
  3821                           
  3822                           ;State_Mchn.c: 1116: }
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;State_Mchn.c: 1115: Switch_Train_Path = 10;
  3826  002412  0E2B               	movlw	43
  3827  002414  EC56  F01E         	call	_GETxAPIxVAL
  3828  002418  D02F               	goto	L49
  3829  00241A                     l7735:
  3830                           
  3831                           ; BSR set to: 0
  3832  00241A  0E1F               	movlw	31
  3833  00241C  EC56  F01E         	call	_GETxAPIxVAL
  3834  002420  0100               	movlb	0	; () banked
  3835  002422  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3836  002424  0100               	movlb	0	; () banked
  3837  002426  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3838  002428  A4D8               	btfss	status,2,c
  3839  00242A  D002               	goto	l7739
  3840  00242C                     l7737:
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;State_Mchn.c: 1123: {
  3844                           ;State_Mchn.c: 1124: Switch_Train_Path = 4;
  3845  00242C  0E04               	movlw	4
  3846  00242E  D7CA               	goto	L30
  3847  002430                     l7739:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;State_Mchn.c: 1126: else if(GETxAPIxVAL(41) == 1){
  3851  002430  0E29               	movlw	41
  3852  002432  EC56  F01E         	call	_GETxAPIxVAL
  3853  002436  0100               	movlb	0	; () banked
  3854  002438  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3855  00243A  0100               	movlb	0	; () banked
  3856  00243C  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3857  00243E  A4D8               	btfss	status,2,c
  3858  002440  D002               	goto	l7743
  3859  002442                     l7741:
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;State_Mchn.c: 1127: Switch_Train_Path = 12;
  3863  002442  0E0C               	movlw	12
  3864  002444  D7BF               	goto	L30
  3865  002446                     l7743:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;State_Mchn.c: 1129: else if(GETxAPIxVAL(42) == 1){
  3869  002446  0E2A               	movlw	42
  3870  002448  EC56  F01E         	call	_GETxAPIxVAL
  3871  00244C  0100               	movlb	0	; () banked
  3872  00244E  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3873  002450  0100               	movlb	0	; () banked
  3874  002452  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3875  002454  A4D8               	btfss	status,2,c
  3876  002456  D002               	goto	l7747
  3877  002458                     l7745:
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;State_Mchn.c: 1130: Switch_Train_Path = 11;
  3881  002458  0E0B               	movlw	11
  3882  00245A  D7B4               	goto	L30
  3883  00245C                     l7747:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;State_Mchn.c: 1132: else if(GETxAPIxVAL(44) == 1){
  3887  00245C  0E2C               	movlw	44
  3888  00245E  EC56  F01E         	call	_GETxAPIxVAL
  3889  002462  0100               	movlb	0	; () banked
  3890  002464  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3891  002466  0100               	movlb	0	; () banked
  3892  002468  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3893  00246A  A4D8               	btfss	status,2,c
  3894  00246C  D002               	goto	l7751
  3895  00246E                     l7749:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;State_Mchn.c: 1133: Switch_Train_Path = 10;
  3899  00246E  0E0A               	movlw	10
  3900  002470  D7A9               	goto	L30
  3901  002472                     l7751:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;State_Mchn.c: 1135: else if(GETxAPIxVAL(43) == 1){
  3905  002472  0E2B               	movlw	43
  3906  002474  EC56  F01E         	call	_GETxAPIxVAL
  3907  002478                     L49:
  3908  002478  0100               	movlb	0	; () banked
  3909  00247A  0590               	decf	?_GETxAPIxVAL& (0+255),w,b
  3910  00247C  0100               	movlb	0	; () banked
  3911  00247E  1191               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3912  002480  A4D8               	btfss	status,2,c
  3913  002482  D6C3               	goto	l349
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;State_Mchn.c: 1136: Switch_Train_Path = 9;
  3917  002484  0E09               	movlw	9
  3918  002486  D79E               	goto	L30
  3919  002488                     l7757:
  3920                           
  3921                           ; BSR set to: 0
  3922  002488  0100               	movlb	0	; () banked
  3923  00248A  51B9               	movf	Train_Path@To& (0+255),w,b
  3924                           
  3925                           ; Switch size 1, requested type "space"
  3926                           ; Number of cases is 4, Range of values is 1 to 4
  3927                           ; switch strategies available:
  3928                           ; Name         Instructions Cycles
  3929                           ; simple_byte           13     7 (average)
  3930                           ;	Chosen strategy is simple_byte
  3931  00248C  0A01               	xorlw	1	; case 1
  3932  00248E  B4D8               	btfsc	status,2,c
  3933  002490  D79C               	goto	l7715
  3934  002492  0A03               	xorlw	3	; case 2
  3935  002494  B4D8               	btfsc	status,2,c
  3936  002496  D7C1               	goto	l7735
  3937  002498  0A01               	xorlw	1	; case 3
  3938  00249A  B4D8               	btfsc	status,2,c
  3939  00249C  D736               	goto	l7675
  3940  00249E  0A07               	xorlw	7	; case 4
  3941  0024A0  B4D8               	btfsc	status,2,c
  3942  0024A2  D768               	goto	l7695
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;State_Mchn.c: 1142: break;
  3946  0024A4  D074               	goto	l7825
  3947  0024A6                     l7759:
  3948                           
  3949                           ; BSR set to: 0
  3950  0024A6  EC88  F015         	call	_Train_Move_Right_Brake	;wreg free
  3951  0024AA  D008               	goto	L93
  3952  0024AC                     l7765:
  3953                           
  3954                           ; BSR set to: 0
  3955  0024AC  EC88  F015         	call	_Train_Move_Right_Brake	;wreg free
  3956  0024B0  D005               	goto	L93
  3957  0024B2                     l7771:
  3958                           
  3959                           ; BSR set to: 0
  3960  0024B2  ECE3  F014         	call	_Train_Move_Left_Brake	;wreg free
  3961  0024B6  D002               	goto	L93
  3962  0024B8                     l7777:
  3963                           
  3964                           ; BSR set to: 0
  3965  0024B8  ECE3  F014         	call	_Train_Move_Left_Brake	;wreg free
  3966  0024BC                     L93:
  3967  0024BC  0900               	iorlw	0
  3968  0024BE  A4D8               	btfss	status,2,c
  3969  0024C0  D6A4               	goto	l349
  3970                           
  3971                           ;State_Mchn.c: 1171: {
  3972                           ;State_Mchn.c: 1172: Switch_Train_Path = 0;
  3973  0024C2  0E00               	movlw	0
  3974  0024C4  0100               	movlb	0	; () banked
  3975  0024C6  6F84               	movwf	_Switch_Train_Path& (0+255),b
  3976                           
  3977                           ;State_Mchn.c: 1173: Return_Val = 0;
  3978  0024C8  0E00               	movlw	0
  3979  0024CA  D6A0               	goto	L39
  3980  0024CC                     l7785:
  3981                           
  3982                           ; BSR set to: 0
  3983  0024CC  0100               	movlb	0	; () banked
  3984  0024CE  51B9               	movf	Train_Path@To& (0+255),w,b
  3985                           
  3986                           ; Switch size 1, requested type "space"
  3987                           ; Number of cases is 4, Range of values is 1 to 4
  3988                           ; switch strategies available:
  3989                           ; Name         Instructions Cycles
  3990                           ; simple_byte           13     7 (average)
  3991                           ;	Chosen strategy is simple_byte
  3992  0024D0  0A01               	xorlw	1	; case 1
  3993  0024D2  B4D8               	btfsc	status,2,c
  3994  0024D4  D7EE               	goto	l7771
  3995  0024D6  0A03               	xorlw	3	; case 2
  3996  0024D8  B4D8               	btfsc	status,2,c
  3997  0024DA  D7EE               	goto	l7777
  3998  0024DC  0A01               	xorlw	1	; case 3
  3999  0024DE  B4D8               	btfsc	status,2,c
  4000  0024E0  D7E2               	goto	l7759
  4001  0024E2  0A07               	xorlw	7	; case 4
  4002  0024E4  B4D8               	btfsc	status,2,c
  4003  0024E6  D7E2               	goto	l7765
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;State_Mchn.c: 1180: break;
  4007  0024E8  D052               	goto	l7825
  4008  0024EA                     l7787:
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;State_Mchn.c: 1183: if(Left_Mountain_From_The_Left(1) == 0){
  4012  0024EA  0E01               	movlw	1
  4013  0024EC  EC37  F019         	call	_Left_Mountain_From_The_Left
  4014  0024F0  D01B               	goto	L94
  4015  0024F2                     l7791:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;State_Mchn.c: 1190: if(Left_Mountain_From_The_Left(2) == 0){
  4019  0024F2  0E02               	movlw	2
  4020  0024F4  EC37  F019         	call	_Left_Mountain_From_The_Left
  4021  0024F8  D017               	goto	L94
  4022  0024FA                     l7795:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;State_Mchn.c: 1197: if(Right_Mountain_From_The_Left(3) == 0){
  4026  0024FA  0E03               	movlw	3
  4027  0024FC  EC9D  F018         	call	_Right_Mountain_From_The_Left
  4028  002500  D013               	goto	L94
  4029  002502                     l7799:
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;State_Mchn.c: 1204: if(Right_Mountain_From_The_Left(4) == 0){
  4033  002502  0E04               	movlw	4
  4034  002504  EC9D  F018         	call	_Right_Mountain_From_The_Left
  4035  002508  D00F               	goto	L94
  4036  00250A                     l7803:
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;State_Mchn.c: 1211: if(Right_Mountain_From_The_Right(4) == 0){
  4040  00250A  0E04               	movlw	4
  4041  00250C  EC03  F018         	call	_Right_Mountain_From_The_Right
  4042  002510  D00B               	goto	L94
  4043  002512                     l7807:
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;State_Mchn.c: 1218: if(Right_Mountain_From_The_Right(3) == 0){
  4047  002512  0E03               	movlw	3
  4048  002514  EC03  F018         	call	_Right_Mountain_From_The_Right
  4049  002518  D007               	goto	L94
  4050  00251A                     l7811:
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;State_Mchn.c: 1225: if(Left_Mountain_From_The_Right(2) == 0){
  4054  00251A  0E02               	movlw	2
  4055  00251C  ECD0  F019         	call	_Left_Mountain_From_The_Right
  4056  002520  D003               	goto	L94
  4057  002522                     l7815:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;State_Mchn.c: 1232: if(Left_Mountain_From_The_Right(1) == 0){
  4061  002522  0E01               	movlw	1
  4062  002524  ECD0  F019         	call	_Left_Mountain_From_The_Right
  4063  002528                     L94:
  4064  002528  0900               	iorlw	0
  4065  00252A  A4D8               	btfss	status,2,c
  4066  00252C  D66E               	goto	l349
  4067                           
  4068                           ;State_Mchn.c: 1233: Switch_Train_Path = 3;
  4069  00252E  0E03               	movlw	3
  4070  002530  D001               	goto	L42
  4071  002532                     l7819:
  4072                           
  4073                           ; BSR set to: 0
  4074  002532  0E00               	movlw	0
  4075  002534                     L42:
  4076  002534  0100               	movlb	0	; () banked
  4077  002536  6F84               	movwf	_Switch_Train_Path& (0+255),b
  4078  002538  D668               	goto	l349
  4079  00253A                     l7823:
  4080  00253A  0100               	movlb	0	; () banked
  4081  00253C  5184               	movf	_Switch_Train_Path& (0+255),w,b
  4082                           
  4083                           ; Switch size 1, requested type "space"
  4084                           ; Number of cases is 13, Range of values is 0 to 12
  4085                           ; switch strategies available:
  4086                           ; Name         Instructions Cycles
  4087                           ; simple_byte           40    21 (average)
  4088                           ;	Chosen strategy is simple_byte
  4089  00253E  0A00               	xorlw	0	; case 0
  4090  002540  B4D8               	btfsc	status,2,c
  4091  002542  D680               	goto	l7633
  4092  002544  0A01               	xorlw	1	; case 1
  4093  002546  B4D8               	btfsc	status,2,c
  4094  002548  D6B2               	goto	l7653
  4095  00254A  0A03               	xorlw	3	; case 2
  4096  00254C  B4D8               	btfsc	status,2,c
  4097  00254E  D6CE               	goto	l7673
  4098  002550  0A01               	xorlw	1	; case 3
  4099  002552  B4D8               	btfsc	status,2,c
  4100  002554  D799               	goto	l7757
  4101  002556  0A07               	xorlw	7	; case 4
  4102  002558  B4D8               	btfsc	status,2,c
  4103  00255A  D7B8               	goto	l7785
  4104  00255C  0A01               	xorlw	1	; case 5
  4105  00255E  B4D8               	btfsc	status,2,c
  4106  002560  D7C4               	goto	l7787
  4107  002562  0A03               	xorlw	3	; case 6
  4108  002564  B4D8               	btfsc	status,2,c
  4109  002566  D7C5               	goto	l7791
  4110  002568  0A01               	xorlw	1	; case 7
  4111  00256A  B4D8               	btfsc	status,2,c
  4112  00256C  D7C6               	goto	l7795
  4113  00256E  0A0F               	xorlw	15	; case 8
  4114  002570  B4D8               	btfsc	status,2,c
  4115  002572  D7C7               	goto	l7799
  4116  002574  0A01               	xorlw	1	; case 9
  4117  002576  B4D8               	btfsc	status,2,c
  4118  002578  D7C8               	goto	l7803
  4119  00257A  0A03               	xorlw	3	; case 10
  4120  00257C  B4D8               	btfsc	status,2,c
  4121  00257E  D7C9               	goto	l7807
  4122  002580  0A01               	xorlw	1	; case 11
  4123  002582  B4D8               	btfsc	status,2,c
  4124  002584  D7CA               	goto	l7811
  4125  002586  0A07               	xorlw	7	; case 12
  4126  002588  B4D8               	btfsc	status,2,c
  4127  00258A  D7CB               	goto	l7815
  4128  00258C  D7D2               	goto	l7819
  4129  00258E                     l7825:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;State_Mchn.c: 1241: return(Return_Val);
  4133  00258E  0100               	movlb	0	; () banked
  4134  002590  51C6               	movf	Train_Path@Return_Val& (0+255),w,b
  4135  002592  0012               	return	
  4136  002594                     __end_of_Train_Path:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           postinc0	equ	0xFEE
  4143                           wreg	equ	0xFE8
  4144                           postdec1	equ	0xFE5
  4145                           fsr1h	equ	0xFE2
  4146                           fsr1l	equ	0xFE1
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _Train_Move_Right_Start *****************
  4150 ;; Defined at:
  4151 ;;		line 27 in file "../train_move_right.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4165 ;;      Params:         0       0       0       0       0       0       0       0       0
  4166 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4168 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4169 ;;Total ram usage:        0 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    8
  4172 ;; This function calls:
  4173 ;;		_GETxAPIxVAL
  4174 ;;		_SETxAPIxVAL
  4175 ;;		_SETxPWM
  4176 ;; This function is called by:
  4177 ;;		_Train_Path
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text3
  4182  002D92                     __ptext3:
  4183                           	opt stack 0
  4184  002D92                     _Train_Move_Right_Start:
  4185                           	opt stack 20
  4186                           
  4187                           ;train_move_right.c: 29: static char Return_Val = 1;
  4188                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4189                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;incstack = 0
  4193  002D92  D08C               	goto	l6835
  4194  002D94                     l6789:
  4195  002D94  0E14               	movlw	20
  4196  002D96  EC56  F01E         	call	_GETxAPIxVAL
  4197  002D9A  0100               	movlb	0	; () banked
  4198  002D9C  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4199  002D9E  0100               	movlb	0	; () banked
  4200  002DA0  5D68               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4201  002DA2  0100               	movlb	0	; () banked
  4202  002DA4  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4203  002DA6  0100               	movlb	0	; () banked
  4204  002DA8  5969               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4205  002DAA  A0D8               	btfss	status,0,c
  4206  002DAC  D002               	goto	l6793
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;train_move_right.c: 37: {
  4210                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4211  002DAE  0E01               	movlw	1
  4212  002DB0  D034               	goto	L62
  4213  002DB2                     l6793:
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;train_move_right.c: 42: }
  4217                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4218  002DB2  0100               	movlb	0	; () banked
  4219  002DB4  4B68               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4220  002DB6  2B69               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4224  002DB8  0E00               	movlw	0
  4225  002DBA  0100               	movlb	0	; () banked
  4226  002DBC  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4227  002DBE  D072               	goto	L63
  4228  002DC0                     l6799:
  4229                           
  4230                           ; BSR set to: 0
  4231  002DC0  0E16               	movlw	22
  4232  002DC2  EC56  F01E         	call	_GETxAPIxVAL
  4233  002DC6  C090  F0B1         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4234  002DCA  C091  F0B2         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4235  002DCE  0E01               	movlw	1
  4236  002DD0  0100               	movlb	0	; () banked
  4237  002DD2  6FB3               	movwf	SETxPWM@direction& (0+255),b
  4238  002DD4  ECAC  F01B         	call	_SETxPWM	;wreg free
  4239                           
  4240                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4241  002DD8  0E16               	movlw	22
  4242  002DDA  EC56  F01E         	call	_GETxAPIxVAL
  4243  002DDE  C090  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4244  002DE2  C091  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4245                           
  4246                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4247  002DE6  0E00               	movlw	0
  4248  002DE8  0100               	movlb	0	; () banked
  4249  002DEA  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4250  002DEC  0E00               	movlw	0
  4251  002DEE  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  4252  002DF0  0E45               	movlw	69
  4253  002DF2  EC49  F01D         	call	_SETxAPIxVAL
  4254                           
  4255                           ;train_move_right.c: 51: Return_Val = 1;
  4256  002DF6  0E01               	movlw	1
  4257  002DF8  0100               	movlb	0	; () banked
  4258  002DFA  6FC5               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4259  002DFC  D01C               	goto	l6817
  4260  002DFE                     l6809:
  4261                           
  4262                           ; BSR set to: 0
  4263  002DFE  0E12               	movlw	18
  4264  002E00  EC56  F01E         	call	_GETxAPIxVAL
  4265  002E04  0100               	movlb	0	; () banked
  4266  002E06  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4267  002E08  0100               	movlb	0	; () banked
  4268  002E0A  5D68               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4269  002E0C  0100               	movlb	0	; () banked
  4270  002E0E  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4271  002E10  0100               	movlb	0	; () banked
  4272  002E12  5969               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4273  002E14  A0D8               	btfss	status,0,c
  4274  002E16  D009               	goto	l6813
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;train_move_right.c: 56: {
  4278                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4279  002E18  0E03               	movlw	3
  4280  002E1A                     L62:
  4281  002E1A  0100               	movlb	0	; () banked
  4282  002E1C  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4283                           
  4284                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4285  002E1E  0E00               	movlw	0
  4286  002E20  0100               	movlb	0	; () banked
  4287  002E22  6F69               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4288  002E24  0E00               	movlw	0
  4289  002E26  6F68               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4290  002E28  D03D               	goto	L63
  4291  002E2A                     l6813:
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;train_move_right.c: 61: }
  4295                           ;train_move_right.c: 62: Return_Val = 1;
  4296  002E2A  0E01               	movlw	1
  4297  002E2C  0100               	movlb	0	; () banked
  4298  002E2E  6FC5               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4302  002E30  0100               	movlb	0	; () banked
  4303  002E32  4B68               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4304  002E34  2B69               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4305  002E36                     l6817:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4309  002E36  0E02               	movlw	2
  4310  002E38  0100               	movlb	0	; () banked
  4311  002E3A  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4312                           
  4313                           ;train_move_right.c: 65: break;
  4314  002E3C  D045               	goto	l6837
  4315  002E3E                     l6819:
  4316                           
  4317                           ; BSR set to: 0
  4318  002E3E  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4319  002E42  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4320  002E46  0E01               	movlw	1
  4321  002E48  0100               	movlb	0	; () banked
  4322  002E4A  6FB3               	movwf	SETxPWM@direction& (0+255),b
  4323  002E4C  ECAC  F01B         	call	_SETxPWM	;wreg free
  4324                           
  4325                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4326  002E50  0E17               	movlw	23
  4327  002E52  EC56  F01E         	call	_GETxAPIxVAL
  4328  002E56  0100               	movlb	0	; () banked
  4329  002E58  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4330  002E5A  0100               	movlb	0	; () banked
  4331  002E5C  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4332  002E5E  0100               	movlb	0	; () banked
  4333  002E60  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4334  002E62  0100               	movlb	0	; () banked
  4335  002E64  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4336  002E66  A0D8               	btfss	status,0,c
  4337  002E68  D005               	goto	l6825
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;train_move_right.c: 69: {
  4341                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4342  002E6A  0E00               	movlw	0
  4343  002E6C  0100               	movlb	0	; () banked
  4344  002E6E  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4345                           
  4346                           ;train_move_right.c: 71: Return_Val = 0;
  4347  002E70  0E00               	movlw	0
  4348  002E72  D019               	goto	L61
  4349  002E74                     l6825:
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;train_move_right.c: 73: }
  4353                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4354  002E74  0E1A               	movlw	26
  4355  002E76  EC56  F01E         	call	_GETxAPIxVAL
  4356  002E7A  0100               	movlb	0	; () banked
  4357  002E7C  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4358  002E7E  0100               	movlb	0	; () banked
  4359  002E80  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4360  002E82  0100               	movlb	0	; () banked
  4361  002E84  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4362  002E86  0100               	movlb	0	; () banked
  4363  002E88  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4364  002E8A  A0D8               	btfss	status,0,c
  4365  002E8C  D008               	goto	l6831
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;train_move_right.c: 75: {
  4369                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4370  002E8E  0100               	movlb	0	; () banked
  4371  002E90  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4372  002E92  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4376  002E94  0E00               	movlw	0
  4377  002E96  0100               	movlb	0	; () banked
  4378  002E98  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4379  002E9A  0E00               	movlw	0
  4380  002E9C  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4381  002E9E                     l6831:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;train_move_right.c: 78: }
  4385                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4386  002E9E  0100               	movlb	0	; () banked
  4387  002EA0  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4388  002EA2  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4389  002EA4                     L63:
  4390                           
  4391                           ;train_move_right.c: 80: Return_Val = 1;
  4392  002EA4  0E01               	movlw	1
  4393  002EA6                     L61:
  4394  002EA6  0100               	movlb	0	; () banked
  4395  002EA8  6FC5               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;train_move_right.c: 84: }
  4399                           
  4400                           ; BSR set to: 0
  4401                           
  4402                           ;train_move_right.c: 83: default : break;
  4403                           
  4404                           ;train_move_right.c: 81: break;
  4405  002EAA  D00E               	goto	l6837
  4406  002EAC                     l6835:
  4407  002EAC  0100               	movlb	0	; () banked
  4408  002EAE  5183               	movf	_Switch_Train_Move& (0+255),w,b
  4409                           
  4410                           ; Switch size 1, requested type "space"
  4411                           ; Number of cases is 4, Range of values is 0 to 3
  4412                           ; switch strategies available:
  4413                           ; Name         Instructions Cycles
  4414                           ; simple_byte           13     7 (average)
  4415                           ;	Chosen strategy is simple_byte
  4416  002EB0  0A00               	xorlw	0	; case 0
  4417  002EB2  B4D8               	btfsc	status,2,c
  4418  002EB4  D76F               	goto	l6789
  4419  002EB6  0A01               	xorlw	1	; case 1
  4420  002EB8  B4D8               	btfsc	status,2,c
  4421  002EBA  D782               	goto	l6799
  4422  002EBC  0A03               	xorlw	3	; case 2
  4423  002EBE  B4D8               	btfsc	status,2,c
  4424  002EC0  D79E               	goto	l6809
  4425  002EC2  0A01               	xorlw	1	; case 3
  4426  002EC4  B4D8               	btfsc	status,2,c
  4427  002EC6  D7BB               	goto	l6819
  4428  002EC8                     l6837:
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;train_move_right.c: 86: return(Return_Val);
  4432  002EC8  0100               	movlb	0	; () banked
  4433  002ECA  51C5               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4434  002ECC  0012               	return	
  4435  002ECE                     __end_of_Train_Move_Right_Start:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           fsr1h	equ	0xFE2
  4445                           fsr1l	equ	0xFE1
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _Train_Move_Right_Brake *****************
  4449 ;; Defined at:
  4450 ;;		line 254 in file "../train_move_right.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      unsigned char 
  4457 ;; Registers used:
  4458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    8
  4471 ;; This function calls:
  4472 ;;		_GETxAPIxVAL
  4473 ;;		_SETxAPIxVAL
  4474 ;;		_SETxPWM
  4475 ;; This function is called by:
  4476 ;;		_Train_Path
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text4
  4481  002B10                     __ptext4:
  4482                           	opt stack 0
  4483  002B10                     _Train_Move_Right_Brake:
  4484                           	opt stack 20
  4485                           
  4486                           ;train_move_right.c: 256: static char Return_Val = 1;
  4487                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4488                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;incstack = 0
  4492  002B10  D090               	goto	l6947
  4493  002B12                     l6901:
  4494  002B12  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4495  002B16  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4496  002B1A  0E01               	movlw	1
  4497  002B1C  0100               	movlb	0	; () banked
  4498  002B1E  6FB3               	movwf	SETxPWM@direction& (0+255),b
  4499  002B20  ECAC  F01B         	call	_SETxPWM	;wreg free
  4500                           
  4501                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  4502  002B24  0E16               	movlw	22
  4503  002B26  EC56  F01E         	call	_GETxAPIxVAL
  4504  002B2A  0100               	movlb	0	; () banked
  4505  002B2C  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  4506  002B2E  0100               	movlb	0	; () banked
  4507  002B30  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  4508  002B32  0100               	movlb	0	; () banked
  4509  002B34  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4510  002B36  0100               	movlb	0	; () banked
  4511  002B38  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  4512  002B3A  A0D8               	btfss	status,0,c
  4513  002B3C  D002               	goto	l6907
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;train_move_right.c: 263: {
  4517                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  4518  002B3E  0E01               	movlw	1
  4519  002B40  D072               	goto	L68
  4520  002B42                     l6907:
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;train_move_right.c: 267: }
  4524                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4525  002B42  0E19               	movlw	25
  4526  002B44  EC56  F01E         	call	_GETxAPIxVAL
  4527  002B48  0100               	movlb	0	; () banked
  4528  002B4A  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4529  002B4C  0100               	movlb	0	; () banked
  4530  002B4E  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4531  002B50  0100               	movlb	0	; () banked
  4532  002B52  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4533  002B54  0100               	movlb	0	; () banked
  4534  002B56  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4535  002B58  A0D8               	btfss	status,0,c
  4536  002B5A  D00A               	goto	l6913
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;train_move_right.c: 269: {
  4540                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  4541  002B5C  0100               	movlb	0	; () banked
  4542  002B5E  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  4543  002B60  A0D8               	btfss	status,0,c
  4544  002B62  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  4548  002B64  0E00               	movlw	0
  4549  002B66  0100               	movlb	0	; () banked
  4550  002B68  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4551  002B6A  0E00               	movlw	0
  4552  002B6C  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4553                           
  4554                           ;train_move_right.c: 272: }
  4555  002B6E  D05D               	goto	l6943
  4556  002B70                     l6913:
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  4560  002B70  0100               	movlb	0	; () banked
  4561  002B72  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4562  002B74  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4563  002B76  D059               	goto	l6943
  4564  002B78                     l6917:
  4565                           
  4566                           ; BSR set to: 0
  4567  002B78  0E12               	movlw	18
  4568  002B7A  EC56  F01E         	call	_GETxAPIxVAL
  4569  002B7E  0100               	movlb	0	; () banked
  4570  002B80  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4571  002B82  0100               	movlb	0	; () banked
  4572  002B84  5D66               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4573  002B86  0100               	movlb	0	; () banked
  4574  002B88  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4575  002B8A  0100               	movlb	0	; () banked
  4576  002B8C  5967               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4577  002B8E  A0D8               	btfss	status,0,c
  4578  002B90  D009               	goto	l6921
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;train_move_right.c: 278: {
  4582                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  4583  002B92  0E02               	movlw	2
  4584  002B94  0100               	movlb	0	; () banked
  4585  002B96  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4586                           
  4587                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  4588  002B98  0E00               	movlw	0
  4589  002B9A  0100               	movlb	0	; () banked
  4590  002B9C  6F67               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4591  002B9E  0E00               	movlw	0
  4592  002BA0  6F66               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4593  002BA2  D043               	goto	l6943
  4594  002BA4                     l6921:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;train_move_right.c: 283: }
  4598                           ;train_move_right.c: 284: Return_Val = 1;
  4599  002BA4  0E01               	movlw	1
  4600  002BA6  0100               	movlb	0	; () banked
  4601  002BA8  6FC4               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  4605  002BAA  0100               	movlb	0	; () banked
  4606  002BAC  4B66               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4607  002BAE  2B67               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  4611  002BB0  0E01               	movlw	1
  4612  002BB2  0100               	movlb	0	; () banked
  4613  002BB4  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4614                           
  4615                           ;train_move_right.c: 287: break;
  4616  002BB6  D04B               	goto	l6949
  4617  002BB8                     l6927:
  4618                           
  4619                           ; BSR set to: 0
  4620  002BB8  0E16               	movlw	22
  4621  002BBA  EC56  F01E         	call	_GETxAPIxVAL
  4622  002BBE  C090  F0B1         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4623  002BC2  C091  F0B2         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4624  002BC6  0E01               	movlw	1
  4625  002BC8  0100               	movlb	0	; () banked
  4626  002BCA  6FB3               	movwf	SETxPWM@direction& (0+255),b
  4627  002BCC  ECAC  F01B         	call	_SETxPWM	;wreg free
  4628                           
  4629                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  4630  002BD0  0E00               	movlw	0
  4631  002BD2  0100               	movlb	0	; () banked
  4632  002BD4  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4633  002BD6  0E01               	movlw	1
  4634  002BD8  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  4635  002BDA  0E45               	movlw	69
  4636  002BDC  EC49  F01D         	call	_SETxAPIxVAL
  4637                           
  4638                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4639  002BE0  0E16               	movlw	22
  4640  002BE2  EC56  F01E         	call	_GETxAPIxVAL
  4641  002BE6  C090  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4642  002BEA  C091  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4643  002BEE  D01A               	goto	l6941
  4644  002BF0                     l6935:
  4645                           
  4646                           ; BSR set to: 0
  4647  002BF0  0E14               	movlw	20
  4648  002BF2  EC56  F01E         	call	_GETxAPIxVAL
  4649  002BF6  0100               	movlb	0	; () banked
  4650  002BF8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4651  002BFA  0100               	movlb	0	; () banked
  4652  002BFC  5D66               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4653  002BFE  0100               	movlb	0	; () banked
  4654  002C00  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4655  002C02  0100               	movlb	0	; () banked
  4656  002C04  5967               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4657  002C06  A0D8               	btfss	status,0,c
  4658  002C08  D00A               	goto	l6939
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;train_move_right.c: 297: {
  4662                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  4663  002C0A  0E00               	movlw	0
  4664  002C0C  0100               	movlb	0	; () banked
  4665  002C0E  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4666                           
  4667                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  4668  002C10  0E00               	movlw	0
  4669  002C12  0100               	movlb	0	; () banked
  4670  002C14  6F67               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4671  002C16  0E00               	movlw	0
  4672  002C18  6F66               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4673                           
  4674                           ;train_move_right.c: 300: Return_Val = 0;
  4675  002C1A  0E00               	movlw	0
  4676  002C1C  D007               	goto	L66
  4677  002C1E                     l6939:
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;train_move_right.c: 302: }
  4681                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  4682  002C1E  0100               	movlb	0	; () banked
  4683  002C20  4B66               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4684  002C22  2B67               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4685  002C24                     l6941:
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  4689  002C24  0E03               	movlw	3
  4690  002C26                     L68:
  4691  002C26  0100               	movlb	0	; () banked
  4692  002C28  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4693  002C2A                     l6943:
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;train_move_right.c: 305: Return_Val = 1;
  4697  002C2A  0E01               	movlw	1
  4698  002C2C                     L66:
  4699  002C2C  0100               	movlb	0	; () banked
  4700  002C2E  6FC4               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;train_move_right.c: 309: }
  4704                           
  4705                           ; BSR set to: 0
  4706                           
  4707                           ;train_move_right.c: 308: default : break;
  4708                           
  4709                           ;train_move_right.c: 306: break;
  4710  002C30  D00E               	goto	l6949
  4711  002C32                     l6947:
  4712  002C32  0100               	movlb	0	; () banked
  4713  002C34  5183               	movf	_Switch_Train_Move& (0+255),w,b
  4714                           
  4715                           ; Switch size 1, requested type "space"
  4716                           ; Number of cases is 4, Range of values is 0 to 3
  4717                           ; switch strategies available:
  4718                           ; Name         Instructions Cycles
  4719                           ; simple_byte           13     7 (average)
  4720                           ;	Chosen strategy is simple_byte
  4721  002C36  0A00               	xorlw	0	; case 0
  4722  002C38  B4D8               	btfsc	status,2,c
  4723  002C3A  D76B               	goto	l6901
  4724  002C3C  0A01               	xorlw	1	; case 1
  4725  002C3E  B4D8               	btfsc	status,2,c
  4726  002C40  D79B               	goto	l6917
  4727  002C42  0A03               	xorlw	3	; case 2
  4728  002C44  B4D8               	btfsc	status,2,c
  4729  002C46  D7B8               	goto	l6927
  4730  002C48  0A01               	xorlw	1	; case 3
  4731  002C4A  B4D8               	btfsc	status,2,c
  4732  002C4C  D7D1               	goto	l6935
  4733  002C4E                     l6949:
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;train_move_right.c: 311: return(Return_Val);
  4737  002C4E  0100               	movlb	0	; () banked
  4738  002C50  51C4               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  4739  002C52  0012               	return	
  4740  002C54                     __end_of_Train_Move_Right_Brake:
  4741                           	opt stack 0
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           postdec1	equ	0xFE5
  4749                           fsr1h	equ	0xFE2
  4750                           fsr1l	equ	0xFE1
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _Train_Move_Left_Start *****************
  4754 ;; Defined at:
  4755 ;;		line 27 in file "../train_move_left.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      unsigned char 
  4762 ;; Registers used:
  4763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4772 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    8
  4776 ;; This function calls:
  4777 ;;		_GETxAPIxVAL
  4778 ;;		_SETxAPIxVAL
  4779 ;;		_SETxPWM
  4780 ;; This function is called by:
  4781 ;;		_Train_Path
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text5
  4786  002ECE                     __ptext5:
  4787                           	opt stack 0
  4788  002ECE                     _Train_Move_Left_Start:
  4789                           	opt stack 20
  4790                           
  4791                           ;train_move_left.c: 29: static char Return_Val = 1;
  4792                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4793                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;incstack = 0
  4797  002ECE  D08A               	goto	l6893
  4798  002ED0                     l6843:
  4799  002ED0  0E14               	movlw	20
  4800  002ED2  EC56  F01E         	call	_GETxAPIxVAL
  4801  002ED6  0100               	movlb	0	; () banked
  4802  002ED8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4803  002EDA  0100               	movlb	0	; () banked
  4804  002EDC  5D64               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  4805  002EDE  0100               	movlb	0	; () banked
  4806  002EE0  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4807  002EE2  0100               	movlb	0	; () banked
  4808  002EE4  5965               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4809  002EE6  A0D8               	btfss	status,0,c
  4810  002EE8  D002               	goto	l6847
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;train_move_left.c: 37: {
  4814                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  4815  002EEA  0E01               	movlw	1
  4816  002EEC  D036               	goto	L71
  4817  002EEE                     l6847:
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;train_move_left.c: 42: }
  4821                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  4822  002EEE  0100               	movlb	0	; () banked
  4823  002EF0  4B64               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  4824  002EF2  2B65               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  4828  002EF4  0E00               	movlw	0
  4829  002EF6  D020               	goto	L69
  4830  002EF8                     l6851:
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;train_move_left.c: 45: Return_Val = 1;
  4834  002EF8  0E01               	movlw	1
  4835  002EFA  0100               	movlb	0	; () banked
  4836  002EFC  6FC3               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  4837                           
  4838                           ;train_move_left.c: 46: break;
  4839  002EFE  D080               	goto	l6895
  4840  002F00                     l6853:
  4841                           
  4842                           ; BSR set to: 0
  4843  002F00  0E15               	movlw	21
  4844  002F02  EC56  F01E         	call	_GETxAPIxVAL
  4845  002F06  C090  F0B1         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4846  002F0A  C091  F0B2         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4847  002F0E  0E00               	movlw	0
  4848  002F10  0100               	movlb	0	; () banked
  4849  002F12  6FB3               	movwf	SETxPWM@direction& (0+255),b
  4850  002F14  ECAC  F01B         	call	_SETxPWM	;wreg free
  4851                           
  4852                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  4853  002F18  0E15               	movlw	21
  4854  002F1A  EC56  F01E         	call	_GETxAPIxVAL
  4855  002F1E  C090  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4856  002F22  C091  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4857                           
  4858                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  4859  002F26  0E00               	movlw	0
  4860  002F28  0100               	movlb	0	; () banked
  4861  002F2A  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4862  002F2C  0E00               	movlw	0
  4863  002F2E  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  4864  002F30  0E45               	movlw	69
  4865  002F32  EC49  F01D         	call	_SETxAPIxVAL
  4866  002F36  D01C               	goto	l6869
  4867  002F38                     L69:
  4868  002F38  0100               	movlb	0	; () banked
  4869  002F3A  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4870  002F3C  D7DD               	goto	l6851
  4871  002F3E                     l6863:
  4872                           
  4873                           ; BSR set to: 0
  4874  002F3E  0E12               	movlw	18
  4875  002F40  EC56  F01E         	call	_GETxAPIxVAL
  4876  002F44  0100               	movlb	0	; () banked
  4877  002F46  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4878  002F48  0100               	movlb	0	; () banked
  4879  002F4A  5D64               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  4880  002F4C  0100               	movlb	0	; () banked
  4881  002F4E  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4882  002F50  0100               	movlb	0	; () banked
  4883  002F52  5965               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4884  002F54  A0D8               	btfss	status,0,c
  4885  002F56  D009               	goto	l6867
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;train_move_left.c: 56: {
  4889                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  4890  002F58  0E03               	movlw	3
  4891  002F5A                     L71:
  4892  002F5A  0100               	movlb	0	; () banked
  4893  002F5C  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4894                           
  4895                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  4896  002F5E  0E00               	movlw	0
  4897  002F60  0100               	movlb	0	; () banked
  4898  002F62  6F65               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  4899  002F64  0E00               	movlw	0
  4900  002F66  6F64               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  4901  002F68  D7C7               	goto	l6851
  4902  002F6A                     l6867:
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;train_move_left.c: 61: }
  4906                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  4907  002F6A  0100               	movlb	0	; () banked
  4908  002F6C  4B64               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  4909  002F6E  2B65               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4910  002F70                     l6869:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  4914  002F70  0E02               	movlw	2
  4915  002F72  D7E2               	goto	L69
  4916  002F74                     l6873:
  4917                           
  4918                           ; BSR set to: 0
  4919  002F74  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4920  002F78  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4921  002F7C  0E00               	movlw	0
  4922  002F7E  0100               	movlb	0	; () banked
  4923  002F80  6FB3               	movwf	SETxPWM@direction& (0+255),b
  4924  002F82  ECAC  F01B         	call	_SETxPWM	;wreg free
  4925                           
  4926                           ;train_move_left.c: 68: Return_Val = 1;
  4927  002F86  0E01               	movlw	1
  4928  002F88  0100               	movlb	0	; () banked
  4929  002F8A  6FC3               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  4933  002F8C  0E18               	movlw	24
  4934  002F8E  EC56  F01E         	call	_GETxAPIxVAL
  4935  002F92  0100               	movlb	0	; () banked
  4936  002F94  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4937  002F96  0100               	movlb	0	; () banked
  4938  002F98  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4939  002F9A  0100               	movlb	0	; () banked
  4940  002F9C  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4941  002F9E  0100               	movlb	0	; () banked
  4942  002FA0  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4943  002FA2  A0D8               	btfss	status,0,c
  4944  002FA4  D005               	goto	l6883
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;train_move_left.c: 70: {
  4948                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  4949  002FA6  0E00               	movlw	0
  4950  002FA8  0100               	movlb	0	; () banked
  4951  002FAA  6F83               	movwf	_Switch_Train_Move& (0+255),b
  4952                           
  4953                           ;train_move_left.c: 72: Return_Val = 0;
  4954  002FAC  0E00               	movlw	0
  4955  002FAE  D7A5               	goto	L70
  4956  002FB0                     l6883:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4960  002FB0  0E1A               	movlw	26
  4961  002FB2  EC56  F01E         	call	_GETxAPIxVAL
  4962  002FB6  0100               	movlb	0	; () banked
  4963  002FB8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  4964  002FBA  0100               	movlb	0	; () banked
  4965  002FBC  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4966  002FBE  0100               	movlb	0	; () banked
  4967  002FC0  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4968  002FC2  0100               	movlb	0	; () banked
  4969  002FC4  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4970  002FC6  A0D8               	btfss	status,0,c
  4971  002FC8  D009               	goto	l6889
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;train_move_left.c: 76: {
  4975                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  4976  002FCA  0100               	movlb	0	; () banked
  4977  002FCC  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4978  002FCE  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  4982  002FD0  0E00               	movlw	0
  4983  002FD2  0100               	movlb	0	; () banked
  4984  002FD4  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4985  002FD6  0E00               	movlw	0
  4986  002FD8  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4987                           
  4988                           ;train_move_left.c: 79: }
  4989  002FDA  D012               	goto	l6895
  4990  002FDC                     l6889:
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  4994  002FDC  0100               	movlb	0	; () banked
  4995  002FDE  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4996  002FE0  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;train_move_left.c: 83: }
  5000                           
  5001                           ; BSR set to: 0
  5002                           
  5003                           ;train_move_left.c: 82: default : break;
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;train_move_left.c: 81: break;
  5007                           
  5008                           ; BSR set to: 0
  5009  002FE2  D00E               	goto	l6895
  5010  002FE4                     l6893:
  5011  002FE4  0100               	movlb	0	; () banked
  5012  002FE6  5183               	movf	_Switch_Train_Move& (0+255),w,b
  5013                           
  5014                           ; Switch size 1, requested type "space"
  5015                           ; Number of cases is 4, Range of values is 0 to 3
  5016                           ; switch strategies available:
  5017                           ; Name         Instructions Cycles
  5018                           ; simple_byte           13     7 (average)
  5019                           ;	Chosen strategy is simple_byte
  5020  002FE8  0A00               	xorlw	0	; case 0
  5021  002FEA  B4D8               	btfsc	status,2,c
  5022  002FEC  D771               	goto	l6843
  5023  002FEE  0A01               	xorlw	1	; case 1
  5024  002FF0  B4D8               	btfsc	status,2,c
  5025  002FF2  D786               	goto	l6853
  5026  002FF4  0A03               	xorlw	3	; case 2
  5027  002FF6  B4D8               	btfsc	status,2,c
  5028  002FF8  D7A2               	goto	l6863
  5029  002FFA  0A01               	xorlw	1	; case 3
  5030  002FFC  B4D8               	btfsc	status,2,c
  5031  002FFE  D7BA               	goto	l6873
  5032  003000                     l6895:
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;train_move_left.c: 85: return(Return_Val);
  5036  003000  0100               	movlb	0	; () banked
  5037  003002  51C3               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5038  003004  0012               	return	
  5039  003006                     __end_of_Train_Move_Left_Start:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           postinc0	equ	0xFEE
  5046                           wreg	equ	0xFE8
  5047                           postdec1	equ	0xFE5
  5048                           fsr1h	equ	0xFE2
  5049                           fsr1l	equ	0xFE1
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _Train_Move_Left_Brake *****************
  5053 ;; Defined at:
  5054 ;;		line 254 in file "../train_move_left.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;		None
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  1    wreg      unsigned char 
  5061 ;; Registers used:
  5062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5068 ;;      Params:         0       0       0       0       0       0       0       0       0
  5069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5071 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5072 ;;Total ram usage:        0 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    8
  5075 ;; This function calls:
  5076 ;;		_GETxAPIxVAL
  5077 ;;		_SETxAPIxVAL
  5078 ;;		_SETxPWM
  5079 ;; This function is called by:
  5080 ;;		_Train_Path
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text6
  5085  0029C6                     __ptext6:
  5086                           	opt stack 0
  5087  0029C6                     _Train_Move_Left_Brake:
  5088                           	opt stack 20
  5089                           
  5090                           ;train_move_left.c: 256: static char Return_Val = 1;
  5091                           ;train_move_left.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5092                           ;train_move_left.c: 259: switch(Switch_Train_Move)
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;incstack = 0
  5096  0029C6  D093               	goto	l7001
  5097  0029C8                     l6955:
  5098  0029C8  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5099  0029CC  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5100  0029D0  0E00               	movlw	0
  5101  0029D2  0100               	movlb	0	; () banked
  5102  0029D4  6FB3               	movwf	SETxPWM@direction& (0+255),b
  5103  0029D6  ECAC  F01B         	call	_SETxPWM	;wreg free
  5104                           
  5105                           ;train_move_left.c: 262: Return_Val = 1;
  5106  0029DA  0E01               	movlw	1
  5107  0029DC  0100               	movlb	0	; () banked
  5108  0029DE  6FC2               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;train_move_left.c: 263: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5112  0029E0  0E15               	movlw	21
  5113  0029E2  EC56  F01E         	call	_GETxAPIxVAL
  5114  0029E6  0100               	movlb	0	; () banked
  5115  0029E8  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5116  0029EA  0100               	movlb	0	; () banked
  5117  0029EC  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5118  0029EE  0100               	movlb	0	; () banked
  5119  0029F0  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5120  0029F2  0100               	movlb	0	; () banked
  5121  0029F4  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5122  0029F6  A0D8               	btfss	status,0,c
  5123  0029F8  D002               	goto	l6963
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;train_move_left.c: 264: {
  5127                           ;train_move_left.c: 265: Switch_Train_Move = 1;
  5128  0029FA  0E01               	movlw	1
  5129  0029FC  D072               	goto	L98
  5130  0029FE                     l6963:
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;train_move_left.c: 268: }
  5134                           ;train_move_left.c: 269: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5135  0029FE  0E19               	movlw	25
  5136  002A00  EC56  F01E         	call	_GETxAPIxVAL
  5137  002A04  0100               	movlb	0	; () banked
  5138  002A06  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5139  002A08  0100               	movlb	0	; () banked
  5140  002A0A  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5141  002A0C  0100               	movlb	0	; () banked
  5142  002A0E  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5143  002A10  0100               	movlb	0	; () banked
  5144  002A12  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5145  002A14  A0D8               	btfss	status,0,c
  5146  002A16  D00A               	goto	l6969
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;train_move_left.c: 270: {
  5150                           ;train_move_left.c: 271: Train_Move_Pwm_Count--;
  5151  002A18  0100               	movlb	0	; () banked
  5152  002A1A  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5153  002A1C  A0D8               	btfss	status,0,c
  5154  002A1E  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;train_move_left.c: 272: Train_Move_Pwm_Fast_Count = 0;
  5158  002A20  0E00               	movlw	0
  5159  002A22  0100               	movlb	0	; () banked
  5160  002A24  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5161  002A26  0E00               	movlw	0
  5162  002A28  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5163                           
  5164                           ;train_move_left.c: 273: }
  5165  002A2A  D06F               	goto	l7003
  5166  002A2C                     l6969:
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;train_move_left.c: 274: else{Train_Move_Pwm_Fast_Count++;}
  5170  002A2C  0100               	movlb	0	; () banked
  5171  002A2E  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5172  002A30  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;train_move_left.c: 275: break;
  5176  002A32  D06B               	goto	l7003
  5177  002A34                     l6971:
  5178                           
  5179                           ; BSR set to: 0
  5180  002A34  0E12               	movlw	18
  5181  002A36  EC56  F01E         	call	_GETxAPIxVAL
  5182  002A3A  0100               	movlb	0	; () banked
  5183  002A3C  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5184  002A3E  0100               	movlb	0	; () banked
  5185  002A40  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5186  002A42  0100               	movlb	0	; () banked
  5187  002A44  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5188  002A46  0100               	movlb	0	; () banked
  5189  002A48  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5190  002A4A  A0D8               	btfss	status,0,c
  5191  002A4C  D009               	goto	l6975
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;train_move_left.c: 278: {
  5195                           ;train_move_left.c: 279: Switch_Train_Move = 2;
  5196  002A4E  0E02               	movlw	2
  5197  002A50  0100               	movlb	0	; () banked
  5198  002A52  6F83               	movwf	_Switch_Train_Move& (0+255),b
  5199                           
  5200                           ;train_move_left.c: 280: Train_Move_Wait_Time = 0;
  5201  002A54  0E00               	movlw	0
  5202  002A56  0100               	movlb	0	; () banked
  5203  002A58  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5204  002A5A  0E00               	movlw	0
  5205  002A5C  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5206  002A5E  D043               	goto	l6997
  5207  002A60                     l6975:
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;train_move_left.c: 283: }
  5211                           ;train_move_left.c: 284: Return_Val = 1;
  5212  002A60  0E01               	movlw	1
  5213  002A62  0100               	movlb	0	; () banked
  5214  002A64  6FC2               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;train_move_left.c: 285: Train_Move_Wait_Time++;
  5218  002A66  0100               	movlb	0	; () banked
  5219  002A68  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5220  002A6A  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;train_move_left.c: 286: Switch_Train_Move = 1;
  5224  002A6C  0E01               	movlw	1
  5225  002A6E  0100               	movlb	0	; () banked
  5226  002A70  6F83               	movwf	_Switch_Train_Move& (0+255),b
  5227                           
  5228                           ;train_move_left.c: 287: break;
  5229  002A72  D04B               	goto	l7003
  5230  002A74                     l6981:
  5231                           
  5232                           ; BSR set to: 0
  5233  002A74  0E15               	movlw	21
  5234  002A76  EC56  F01E         	call	_GETxAPIxVAL
  5235  002A7A  C090  F0B1         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5236  002A7E  C091  F0B2         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5237  002A82  0E00               	movlw	0
  5238  002A84  0100               	movlb	0	; () banked
  5239  002A86  6FB3               	movwf	SETxPWM@direction& (0+255),b
  5240  002A88  ECAC  F01B         	call	_SETxPWM	;wreg free
  5241                           
  5242                           ;train_move_left.c: 290: SETxAPIxVAL(69, 1);;
  5243  002A8C  0E00               	movlw	0
  5244  002A8E  0100               	movlb	0	; () banked
  5245  002A90  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  5246  002A92  0E01               	movlw	1
  5247  002A94  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  5248  002A96  0E45               	movlw	69
  5249  002A98  EC49  F01D         	call	_SETxAPIxVAL
  5250                           
  5251                           ;train_move_left.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5252  002A9C  0E15               	movlw	21
  5253  002A9E  EC56  F01E         	call	_GETxAPIxVAL
  5254  002AA2  C090  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5255  002AA6  C091  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5256  002AAA  D01A               	goto	L99
  5257  002AAC                     l6989:
  5258                           
  5259                           ; BSR set to: 0
  5260  002AAC  0E14               	movlw	20
  5261  002AAE  EC56  F01E         	call	_GETxAPIxVAL
  5262  002AB2  0100               	movlb	0	; () banked
  5263  002AB4  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5264  002AB6  0100               	movlb	0	; () banked
  5265  002AB8  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5266  002ABA  0100               	movlb	0	; () banked
  5267  002ABC  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5268  002ABE  0100               	movlb	0	; () banked
  5269  002AC0  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5270  002AC2  A0D8               	btfss	status,0,c
  5271  002AC4  D00A               	goto	l6993
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;train_move_left.c: 297: {
  5275                           ;train_move_left.c: 298: Switch_Train_Move = 0;
  5276  002AC6  0E00               	movlw	0
  5277  002AC8  0100               	movlb	0	; () banked
  5278  002ACA  6F83               	movwf	_Switch_Train_Move& (0+255),b
  5279                           
  5280                           ;train_move_left.c: 299: Train_Move_Wait_Time = 0;
  5281  002ACC  0E00               	movlw	0
  5282  002ACE  0100               	movlb	0	; () banked
  5283  002AD0  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5284  002AD2  0E00               	movlw	0
  5285  002AD4  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5286                           
  5287                           ;train_move_left.c: 300: Return_Val = 0;
  5288  002AD6  0E00               	movlw	0
  5289  002AD8  D007               	goto	L74
  5290  002ADA                     l6993:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;train_move_left.c: 302: }
  5294                           ;train_move_left.c: 303: Train_Move_Wait_Time++;
  5295  002ADA  0100               	movlb	0	; () banked
  5296  002ADC  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5297  002ADE  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5298  002AE0                     L99:
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;train_move_left.c: 304: Switch_Train_Move = 3;
  5302  002AE0  0E03               	movlw	3
  5303  002AE2                     L98:
  5304  002AE2  0100               	movlb	0	; () banked
  5305  002AE4  6F83               	movwf	_Switch_Train_Move& (0+255),b
  5306  002AE6                     l6997:
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;train_move_left.c: 305: Return_Val = 1;
  5310  002AE6  0E01               	movlw	1
  5311  002AE8                     L74:
  5312  002AE8  0100               	movlb	0	; () banked
  5313  002AEA  6FC2               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;train_move_left.c: 309: }
  5317                           
  5318                           ; BSR set to: 0
  5319                           
  5320                           ;train_move_left.c: 308: default : break;
  5321                           
  5322                           ;train_move_left.c: 306: break;
  5323  002AEC  D00E               	goto	l7003
  5324  002AEE                     l7001:
  5325  002AEE  0100               	movlb	0	; () banked
  5326  002AF0  5183               	movf	_Switch_Train_Move& (0+255),w,b
  5327                           
  5328                           ; Switch size 1, requested type "space"
  5329                           ; Number of cases is 4, Range of values is 0 to 3
  5330                           ; switch strategies available:
  5331                           ; Name         Instructions Cycles
  5332                           ; simple_byte           13     7 (average)
  5333                           ;	Chosen strategy is simple_byte
  5334  002AF2  0A00               	xorlw	0	; case 0
  5335  002AF4  B4D8               	btfsc	status,2,c
  5336  002AF6  D768               	goto	l6955
  5337  002AF8  0A01               	xorlw	1	; case 1
  5338  002AFA  B4D8               	btfsc	status,2,c
  5339  002AFC  D79B               	goto	l6971
  5340  002AFE  0A03               	xorlw	3	; case 2
  5341  002B00  B4D8               	btfsc	status,2,c
  5342  002B02  D7B8               	goto	l6981
  5343  002B04  0A01               	xorlw	1	; case 3
  5344  002B06  B4D8               	btfsc	status,2,c
  5345  002B08  D7D1               	goto	l6989
  5346  002B0A                     l7003:
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;train_move_left.c: 311: return(Return_Val);
  5350  002B0A  0100               	movlb	0	; () banked
  5351  002B0C  51C2               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5352  002B0E  0012               	return	
  5353  002B10                     __end_of_Train_Move_Left_Brake:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           postdec1	equ	0xFE5
  5362                           fsr1h	equ	0xFE2
  5363                           fsr1l	equ	0xFE1
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function _Right_Mountain_From_The_Right *****************
  5367 ;; Defined at:
  5368 ;;		line 103 in file "../train_move_left.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;  rc              1    wreg     unsigned char 
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  rc              1   40[BANK0 ] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      unsigned char 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0
  5383 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5385 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5386 ;;Total ram usage:        1 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    8
  5389 ;; This function calls:
  5390 ;;		_GETxAPIxVAL
  5391 ;;		_SETxPWM
  5392 ;; This function is called by:
  5393 ;;		_Train_Path
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           	psect	text7
  5398  003006                     __ptext7:
  5399                           	opt stack 0
  5400  003006                     _Right_Mountain_From_The_Right:
  5401                           	opt stack 20
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;incstack = 0
  5405                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5406  003006  0100               	movlb	0	; () banked
  5407  003008  6FB8               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  5408                           
  5409                           ;train_move_left.c: 105: static char Return_Val = 1;
  5410                           ;train_move_left.c: 107: switch (Switch_Moutain){
  5411  00300A  D08C               	goto	l7181
  5412  00300C                     l7129:
  5413  00300C  0E03               	movlw	3
  5414  00300E  0100               	movlb	0	; () banked
  5415  003010  19B8               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5416  003012  B4D8               	btfsc	status,2,c
  5417  003014  D00D               	goto	l7135
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  5421                           
  5422                           ; BSR set to: 0
  5423                           
  5424                           ;train_move_left.c: 111: }
  5425                           
  5426                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;train_move_left.c: 109: Switch_Moutain = 1;
  5430  003016  0E35               	movlw	53
  5431  003018  EC56  F01E         	call	_GETxAPIxVAL
  5432  00301C  0100               	movlb	0	; () banked
  5433  00301E  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5434  003020  0100               	movlb	0	; () banked
  5435  003022  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  5436  003024  0100               	movlb	0	; () banked
  5437  003026  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5438  003028  0100               	movlb	0	; () banked
  5439  00302A  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  5440  00302C  A0D8               	btfss	status,0,c
  5441  00302E  D009               	goto	l7137
  5442  003030                     l7135:
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;train_move_left.c: 113: Switch_Moutain = 1;
  5446  003030  0E01               	movlw	1
  5447  003032  0100               	movlb	0	; () banked
  5448  003034  6F81               	movwf	_Switch_Moutain& (0+255),b
  5449                           
  5450                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  5451  003036  0E00               	movlw	0
  5452  003038  0100               	movlb	0	; () banked
  5453  00303A  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  5454  00303C  0E00               	movlw	0
  5455  00303E  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  5456                           
  5457                           ;train_move_left.c: 115: }
  5458  003040  D06D               	goto	l7177
  5459  003042                     l7137:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;train_move_left.c: 116: else{
  5463                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  5464  003042  0100               	movlb	0	; () banked
  5465  003044  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  5466  003046  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  5467                           
  5468                           ; BSR set to: 0
  5469  003048  D069               	goto	l7177
  5470  00304A                     l7141:
  5471                           
  5472                           ; BSR set to: 0
  5473  00304A  0E04               	movlw	4
  5474  00304C  0100               	movlb	0	; () banked
  5475  00304E  19B8               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5476  003050  A4D8               	btfss	status,2,c
  5477  003052  D028               	goto	l7159
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;train_move_left.c: 123: SETxPWM(Train_Move_Pwm_Count, 0);
  5481  003054  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5482  003058  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5483  00305C  0E00               	movlw	0
  5484  00305E  0100               	movlb	0	; () banked
  5485  003060  6FB3               	movwf	SETxPWM@direction& (0+255),b
  5486  003062  ECAC  F01B         	call	_SETxPWM	;wreg free
  5487                           
  5488                           ;train_move_left.c: 124: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  5489  003066  0E2E               	movlw	46
  5490  003068  EC56  F01E         	call	_GETxAPIxVAL
  5491  00306C  0100               	movlb	0	; () banked
  5492  00306E  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5493  003070  0100               	movlb	0	; () banked
  5494  003072  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5495  003074  0100               	movlb	0	; () banked
  5496  003076  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5497  003078  0100               	movlb	0	; () banked
  5498  00307A  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5499  00307C  B0D8               	btfsc	status,0,c
  5500  00307E  D02D               	goto	l7165
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;train_move_left.c: 131: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5504                           
  5505                           ; BSR set to: 0
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;train_move_left.c: 130: }
  5509                           
  5510                           ;train_move_left.c: 129: break;
  5511                           
  5512                           ;train_move_left.c: 128: Return_Val = 0;
  5513                           
  5514                           ;train_move_left.c: 127: Switch_Moutain = 0;
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;train_move_left.c: 125: {
  5518                           ;train_move_left.c: 126: Switch_Train_Move = 0;
  5519  003080  0E1A               	movlw	26
  5520  003082  EC56  F01E         	call	_GETxAPIxVAL
  5521  003086  0100               	movlb	0	; () banked
  5522  003088  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5523  00308A  0100               	movlb	0	; () banked
  5524  00308C  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5525  00308E  0100               	movlb	0	; () banked
  5526  003090  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5527  003092  0100               	movlb	0	; () banked
  5528  003094  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5529  003096  A0D8               	btfss	status,0,c
  5530  003098  D03E               	goto	l7175
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;train_move_left.c: 132: {
  5534                           ;train_move_left.c: 133: Train_Move_Pwm_Count--;
  5535  00309A  0100               	movlb	0	; () banked
  5536  00309C  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5537  00309E  A0D8               	btfss	status,0,c
  5538  0030A0  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5539  0030A2  D033               	goto	l7173
  5540  0030A4                     l7159:
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;train_move_left.c: 138: else if (rc == 3){
  5544  0030A4  0E03               	movlw	3
  5545  0030A6  0100               	movlb	0	; () banked
  5546  0030A8  19B8               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5547  0030AA  A4D8               	btfss	status,2,c
  5548  0030AC  D037               	goto	l7177
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;train_move_left.c: 139: SETxPWM(Train_Move_Pwm_Count, 0);
  5552  0030AE  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5553  0030B2  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5554  0030B6  0E00               	movlw	0
  5555  0030B8  0100               	movlb	0	; () banked
  5556  0030BA  6FB3               	movwf	SETxPWM@direction& (0+255),b
  5557  0030BC  ECAC  F01B         	call	_SETxPWM	;wreg free
  5558                           
  5559                           ;train_move_left.c: 140: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5560  0030C0  0E18               	movlw	24
  5561  0030C2  EC56  F01E         	call	_GETxAPIxVAL
  5562  0030C6  0100               	movlb	0	; () banked
  5563  0030C8  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5564  0030CA  0100               	movlb	0	; () banked
  5565  0030CC  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5566  0030CE  0100               	movlb	0	; () banked
  5567  0030D0  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5568  0030D2  0100               	movlb	0	; () banked
  5569  0030D4  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5570  0030D6  A0D8               	btfss	status,0,c
  5571  0030D8  D008               	goto	l7169
  5572  0030DA                     l7165:
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;train_move_left.c: 141: {
  5576                           ;train_move_left.c: 142: Switch_Train_Move = 0;
  5577  0030DA  0E00               	movlw	0
  5578  0030DC  0100               	movlb	0	; () banked
  5579  0030DE  6F83               	movwf	_Switch_Train_Move& (0+255),b
  5580                           
  5581                           ;train_move_left.c: 143: Switch_Moutain = 0;
  5582  0030E0  0E00               	movlw	0
  5583  0030E2  0100               	movlb	0	; () banked
  5584  0030E4  6F81               	movwf	_Switch_Moutain& (0+255),b
  5585                           
  5586                           ;train_move_left.c: 144: Return_Val = 0;
  5587  0030E6  0E00               	movlw	0
  5588  0030E8  D01A               	goto	L78
  5589  0030EA                     l7169:
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;train_move_left.c: 147: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5593  0030EA  0E1A               	movlw	26
  5594  0030EC  EC56  F01E         	call	_GETxAPIxVAL
  5595  0030F0  0100               	movlb	0	; () banked
  5596  0030F2  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5597  0030F4  0100               	movlb	0	; () banked
  5598  0030F6  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5599  0030F8  0100               	movlb	0	; () banked
  5600  0030FA  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5601  0030FC  0100               	movlb	0	; () banked
  5602  0030FE  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5603  003100  A0D8               	btfss	status,0,c
  5604  003102  D009               	goto	l7175
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;train_move_left.c: 148: {
  5608                           ;train_move_left.c: 149: Train_Move_Pwm_Count++;
  5609  003104  0100               	movlb	0	; () banked
  5610  003106  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5611  003108  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5612  00310A                     l7173:
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;train_move_left.c: 150: Train_Move_Pwm_Fast_Count = 0;
  5616  00310A  0E00               	movlw	0
  5617  00310C  0100               	movlb	0	; () banked
  5618  00310E  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5619  003110  0E00               	movlw	0
  5620  003112  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5621                           
  5622                           ;train_move_left.c: 151: }
  5623  003114  D003               	goto	l7177
  5624  003116                     l7175:
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;train_move_left.c: 152: else{Train_Move_Pwm_Fast_Count++;}
  5628  003116  0100               	movlb	0	; () banked
  5629  003118  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5630  00311A  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5631  00311C                     l7177:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;train_move_left.c: 153: }
  5635                           ;train_move_left.c: 154: Return_Val = 1;
  5636  00311C  0E01               	movlw	1
  5637  00311E                     L78:
  5638  00311E  0100               	movlb	0	; () banked
  5639  003120  6FC1               	movwf	Right_Mountain_From_The_Right@Return_Val& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;train_move_left.c: 159: }
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;train_move_left.c: 158: break;
  5646                           
  5647                           ;train_move_left.c: 157: default:
  5648                           
  5649                           ;train_move_left.c: 155: break;
  5650  003122  D008               	goto	l7183
  5651  003124                     l7181:
  5652  003124  0100               	movlb	0	; () banked
  5653  003126  5181               	movf	_Switch_Moutain& (0+255),w,b
  5654                           
  5655                           ; Switch size 1, requested type "space"
  5656                           ; Number of cases is 2, Range of values is 0 to 1
  5657                           ; switch strategies available:
  5658                           ; Name         Instructions Cycles
  5659                           ; simple_byte            7     4 (average)
  5660                           ;	Chosen strategy is simple_byte
  5661  003128  0A00               	xorlw	0	; case 0
  5662  00312A  B4D8               	btfsc	status,2,c
  5663  00312C  D76F               	goto	l7129
  5664  00312E  0A01               	xorlw	1	; case 1
  5665  003130  B4D8               	btfsc	status,2,c
  5666  003132  D78B               	goto	l7141
  5667  003134                     l7183:
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;train_move_left.c: 161: return(Return_Val);
  5671  003134  0100               	movlb	0	; () banked
  5672  003136  51C1               	movf	Right_Mountain_From_The_Right@Return_Val& (0+255),w,b
  5673  003138  0012               	return	
  5674  00313A                     __end_of_Right_Mountain_From_The_Right:
  5675                           	opt stack 0
  5676                           tblptru	equ	0xFF8
  5677                           tblptrh	equ	0xFF7
  5678                           tblptrl	equ	0xFF6
  5679                           tablat	equ	0xFF5
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           postdec1	equ	0xFE5
  5683                           fsr1h	equ	0xFE2
  5684                           fsr1l	equ	0xFE1
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _Right_Mountain_From_The_Left *****************
  5688 ;; Defined at:
  5689 ;;		line 179 in file "../train_move_right.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  rc              1    wreg     unsigned char 
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;  rc              1   40[BANK0 ] unsigned char 
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      unsigned char 
  5696 ;; Registers used:
  5697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5703 ;;      Params:         0       0       0       0       0       0       0       0       0
  5704 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5706 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5707 ;;Total ram usage:        1 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    8
  5710 ;; This function calls:
  5711 ;;		_GETxAPIxVAL
  5712 ;;		_SETxPWM
  5713 ;; This function is called by:
  5714 ;;		_Train_Path
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text8
  5719  00313A                     __ptext8:
  5720                           	opt stack 0
  5721  00313A                     _Right_Mountain_From_The_Left:
  5722                           	opt stack 20
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;incstack = 0
  5726                           ;Right_Mountain_From_The_Left@rc stored from wreg
  5727  00313A  0100               	movlb	0	; () banked
  5728  00313C  6FB8               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  5729                           
  5730                           ;train_move_right.c: 181: static char Return_Val = 1;
  5731                           ;train_move_right.c: 183: switch (Switch_Moutain){
  5732  00313E  D08C               	goto	l7121
  5733  003140                     l7069:
  5734  003140  0E04               	movlw	4
  5735  003142  0100               	movlb	0	; () banked
  5736  003144  19B8               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5737  003146  B4D8               	btfsc	status,2,c
  5738  003148  D00D               	goto	l7075
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  5742                           
  5743                           ; BSR set to: 0
  5744                           
  5745                           ;train_move_right.c: 187: }
  5746                           
  5747                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;train_move_right.c: 185: Switch_Moutain = 1;
  5751  00314A  0E38               	movlw	56
  5752  00314C  EC56  F01E         	call	_GETxAPIxVAL
  5753  003150  0100               	movlb	0	; () banked
  5754  003152  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5755  003154  0100               	movlb	0	; () banked
  5756  003156  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  5757  003158  0100               	movlb	0	; () banked
  5758  00315A  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5759  00315C  0100               	movlb	0	; () banked
  5760  00315E  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  5761  003160  A0D8               	btfss	status,0,c
  5762  003162  D009               	goto	l7077
  5763  003164                     l7075:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;train_move_right.c: 189: Switch_Moutain = 1;
  5767  003164  0E01               	movlw	1
  5768  003166  0100               	movlb	0	; () banked
  5769  003168  6F81               	movwf	_Switch_Moutain& (0+255),b
  5770                           
  5771                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  5772  00316A  0E00               	movlw	0
  5773  00316C  0100               	movlb	0	; () banked
  5774  00316E  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  5775  003170  0E00               	movlw	0
  5776  003172  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  5777                           
  5778                           ;train_move_right.c: 191: }
  5779  003174  D06D               	goto	l7117
  5780  003176                     l7077:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;train_move_right.c: 192: else{
  5784                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  5785  003176  0100               	movlb	0	; () banked
  5786  003178  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  5787  00317A  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  5788                           
  5789                           ; BSR set to: 0
  5790  00317C  D069               	goto	l7117
  5791  00317E                     l7081:
  5792                           
  5793                           ; BSR set to: 0
  5794  00317E  0E03               	movlw	3
  5795  003180  0100               	movlb	0	; () banked
  5796  003182  19B8               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5797  003184  A4D8               	btfss	status,2,c
  5798  003186  D027               	goto	l7099
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  5802  003188  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5803  00318C  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5804  003190  0E01               	movlw	1
  5805  003192  0100               	movlb	0	; () banked
  5806  003194  6FB3               	movwf	SETxPWM@direction& (0+255),b
  5807  003196  ECAC  F01B         	call	_SETxPWM	;wreg free
  5808                           
  5809                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  5810  00319A  0E2F               	movlw	47
  5811  00319C  EC56  F01E         	call	_GETxAPIxVAL
  5812  0031A0  0100               	movlb	0	; () banked
  5813  0031A2  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5814  0031A4  0100               	movlb	0	; () banked
  5815  0031A6  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5816  0031A8  0100               	movlb	0	; () banked
  5817  0031AA  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5818  0031AC  0100               	movlb	0	; () banked
  5819  0031AE  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5820  0031B0  B0D8               	btfsc	status,0,c
  5821  0031B2  D02C               	goto	l7105
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5825                           
  5826                           ; BSR set to: 0
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;train_move_right.c: 206: }
  5830                           
  5831                           ;train_move_right.c: 205: break;
  5832                           
  5833                           ;train_move_right.c: 204: Return_Val = 0;
  5834                           
  5835                           ;train_move_right.c: 203: Switch_Moutain = 0;
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;train_move_right.c: 201: {
  5839                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  5840  0031B4  0E1A               	movlw	26
  5841  0031B6  EC56  F01E         	call	_GETxAPIxVAL
  5842  0031BA  0100               	movlb	0	; () banked
  5843  0031BC  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5844  0031BE  0100               	movlb	0	; () banked
  5845  0031C0  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5846  0031C2  0100               	movlb	0	; () banked
  5847  0031C4  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5848  0031C6  0100               	movlb	0	; () banked
  5849  0031C8  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5850  0031CA  A0D8               	btfss	status,0,c
  5851  0031CC  D03E               	goto	l7115
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;train_move_right.c: 208: {
  5855                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  5856  0031CE  0100               	movlb	0	; () banked
  5857  0031D0  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5858  0031D2  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5859  0031D4  D034               	goto	l7113
  5860  0031D6                     l7099:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;train_move_right.c: 214: else if (rc == 4){
  5864  0031D6  0E04               	movlw	4
  5865  0031D8  0100               	movlb	0	; () banked
  5866  0031DA  19B8               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5867  0031DC  A4D8               	btfss	status,2,c
  5868  0031DE  D038               	goto	l7117
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  5872  0031E0  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5873  0031E4  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5874  0031E8  0E01               	movlw	1
  5875  0031EA  0100               	movlb	0	; () banked
  5876  0031EC  6FB3               	movwf	SETxPWM@direction& (0+255),b
  5877  0031EE  ECAC  F01B         	call	_SETxPWM	;wreg free
  5878                           
  5879                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  5880  0031F2  0E17               	movlw	23
  5881  0031F4  EC56  F01E         	call	_GETxAPIxVAL
  5882  0031F8  0100               	movlb	0	; () banked
  5883  0031FA  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5884  0031FC  0100               	movlb	0	; () banked
  5885  0031FE  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5886  003200  0100               	movlb	0	; () banked
  5887  003202  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5888  003204  0100               	movlb	0	; () banked
  5889  003206  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5890  003208  A0D8               	btfss	status,0,c
  5891  00320A  D008               	goto	l7109
  5892  00320C                     l7105:
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;train_move_right.c: 217: {
  5896                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  5897  00320C  0E00               	movlw	0
  5898  00320E  0100               	movlb	0	; () banked
  5899  003210  6F83               	movwf	_Switch_Train_Move& (0+255),b
  5900                           
  5901                           ;train_move_right.c: 219: Switch_Moutain = 0;
  5902  003212  0E00               	movlw	0
  5903  003214  0100               	movlb	0	; () banked
  5904  003216  6F81               	movwf	_Switch_Moutain& (0+255),b
  5905                           
  5906                           ;train_move_right.c: 220: Return_Val = 0;
  5907  003218  0E00               	movlw	0
  5908  00321A  D01B               	goto	L81
  5909  00321C                     l7109:
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5913  00321C  0E1A               	movlw	26
  5914  00321E  EC56  F01E         	call	_GETxAPIxVAL
  5915  003222  0100               	movlb	0	; () banked
  5916  003224  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  5917  003226  0100               	movlb	0	; () banked
  5918  003228  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5919  00322A  0100               	movlb	0	; () banked
  5920  00322C  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5921  00322E  0100               	movlb	0	; () banked
  5922  003230  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5923  003232  A0D8               	btfss	status,0,c
  5924  003234  D00A               	goto	l7115
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;train_move_right.c: 224: {
  5928                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  5929  003236  0100               	movlb	0	; () banked
  5930  003238  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5931  00323A  A0D8               	btfss	status,0,c
  5932  00323C  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5933  00323E                     l7113:
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  5937  00323E  0E00               	movlw	0
  5938  003240  0100               	movlb	0	; () banked
  5939  003242  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5940  003244  0E00               	movlw	0
  5941  003246  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5942                           
  5943                           ;train_move_right.c: 227: }
  5944  003248  D003               	goto	l7117
  5945  00324A                     l7115:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  5949  00324A  0100               	movlb	0	; () banked
  5950  00324C  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5951  00324E  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5952  003250                     l7117:
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;train_move_right.c: 229: }
  5956                           ;train_move_right.c: 230: Return_Val = 1;
  5957  003250  0E01               	movlw	1
  5958  003252                     L81:
  5959  003252  0100               	movlb	0	; () banked
  5960  003254  6FC0               	movwf	Right_Mountain_From_The_Left@Return_Val& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;train_move_right.c: 235: }
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;train_move_right.c: 234: break;
  5967                           
  5968                           ;train_move_right.c: 233: default:
  5969                           
  5970                           ;train_move_right.c: 231: break;
  5971  003256  D008               	goto	l7123
  5972  003258                     l7121:
  5973  003258  0100               	movlb	0	; () banked
  5974  00325A  5181               	movf	_Switch_Moutain& (0+255),w,b
  5975                           
  5976                           ; Switch size 1, requested type "space"
  5977                           ; Number of cases is 2, Range of values is 0 to 1
  5978                           ; switch strategies available:
  5979                           ; Name         Instructions Cycles
  5980                           ; simple_byte            7     4 (average)
  5981                           ;	Chosen strategy is simple_byte
  5982  00325C  0A00               	xorlw	0	; case 0
  5983  00325E  B4D8               	btfsc	status,2,c
  5984  003260  D76F               	goto	l7069
  5985  003262  0A01               	xorlw	1	; case 1
  5986  003264  B4D8               	btfsc	status,2,c
  5987  003266  D78B               	goto	l7081
  5988  003268                     l7123:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;train_move_right.c: 237: return(Return_Val);
  5992  003268  0100               	movlb	0	; () banked
  5993  00326A  51C0               	movf	Right_Mountain_From_The_Left@Return_Val& (0+255),w,b
  5994  00326C  0012               	return	
  5995  00326E                     __end_of_Right_Mountain_From_The_Left:
  5996                           	opt stack 0
  5997                           tblptru	equ	0xFF8
  5998                           tblptrh	equ	0xFF7
  5999                           tblptrl	equ	0xFF6
  6000                           tablat	equ	0xFF5
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           postdec1	equ	0xFE5
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function _Left_Mountain_From_The_Right *****************
  6009 ;; Defined at:
  6010 ;;		line 178 in file "../train_move_left.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;  rc              1    wreg     unsigned char 
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;  rc              1   40[BANK0 ] unsigned char 
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      unsigned char 
  6017 ;; Registers used:
  6018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6024 ;;      Params:         0       0       0       0       0       0       0       0       0
  6025 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6026 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6027 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6028 ;;Total ram usage:        1 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; Hardware stack levels required when called:    8
  6031 ;; This function calls:
  6032 ;;		_GETxAPIxVAL
  6033 ;;		_SETxPWM
  6034 ;; This function is called by:
  6035 ;;		_Train_Path
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text9
  6040  0033A0                     __ptext9:
  6041                           	opt stack 0
  6042  0033A0                     _Left_Mountain_From_The_Right:
  6043                           	opt stack 20
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;incstack = 0
  6047                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6048  0033A0  0100               	movlb	0	; () banked
  6049  0033A2  6FB8               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6050                           
  6051                           ;train_move_left.c: 180: static char Return_Val = 1;
  6052                           ;train_move_left.c: 182: switch (Switch_Moutain){
  6053  0033A4  D08A               	goto	l7241
  6054  0033A6                     l7189:
  6055  0033A6  0100               	movlb	0	; () banked
  6056  0033A8  05B8               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6057  0033AA  B4D8               	btfsc	status,2,c
  6058  0033AC  D00D               	goto	l7195
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;train_move_left.c: 187: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6062                           
  6063                           ; BSR set to: 0
  6064                           
  6065                           ;train_move_left.c: 186: }
  6066                           
  6067                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;train_move_left.c: 184: Switch_Moutain = 1;
  6071  0033AE  0E3A               	movlw	58
  6072  0033B0  EC56  F01E         	call	_GETxAPIxVAL
  6073  0033B4  0100               	movlb	0	; () banked
  6074  0033B6  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6075  0033B8  0100               	movlb	0	; () banked
  6076  0033BA  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6077  0033BC  0100               	movlb	0	; () banked
  6078  0033BE  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6079  0033C0  0100               	movlb	0	; () banked
  6080  0033C2  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6081  0033C4  A0D8               	btfss	status,0,c
  6082  0033C6  D009               	goto	l7197
  6083  0033C8                     l7195:
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;train_move_left.c: 188: Switch_Moutain = 1;
  6087  0033C8  0E01               	movlw	1
  6088  0033CA  0100               	movlb	0	; () banked
  6089  0033CC  6F81               	movwf	_Switch_Moutain& (0+255),b
  6090                           
  6091                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  6092  0033CE  0E00               	movlw	0
  6093  0033D0  0100               	movlb	0	; () banked
  6094  0033D2  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6095  0033D4  0E00               	movlw	0
  6096  0033D6  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  6097                           
  6098                           ;train_move_left.c: 190: }
  6099  0033D8  D06C               	goto	l7237
  6100  0033DA                     l7197:
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;train_move_left.c: 191: else{
  6104                           ;train_move_left.c: 192: Mountain_Delay_Counter++;
  6105  0033DA  0100               	movlb	0	; () banked
  6106  0033DC  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6107  0033DE  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6108                           
  6109                           ; BSR set to: 0
  6110  0033E0  D068               	goto	l7237
  6111  0033E2                     l7201:
  6112                           
  6113                           ; BSR set to: 0
  6114  0033E2  0E02               	movlw	2
  6115  0033E4  0100               	movlb	0	; () banked
  6116  0033E6  19B8               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6117  0033E8  A4D8               	btfss	status,2,c
  6118  0033EA  D027               	goto	l7219
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;train_move_left.c: 198: SETxPWM(Train_Move_Pwm_Count, 0);
  6122  0033EC  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6123  0033F0  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6124  0033F4  0E00               	movlw	0
  6125  0033F6  0100               	movlb	0	; () banked
  6126  0033F8  6FB3               	movwf	SETxPWM@direction& (0+255),b
  6127  0033FA  ECAC  F01B         	call	_SETxPWM	;wreg free
  6128                           
  6129                           ;train_move_left.c: 199: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6130  0033FE  0E34               	movlw	52
  6131  003400  EC56  F01E         	call	_GETxAPIxVAL
  6132  003404  0100               	movlb	0	; () banked
  6133  003406  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6134  003408  0100               	movlb	0	; () banked
  6135  00340A  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6136  00340C  0100               	movlb	0	; () banked
  6137  00340E  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6138  003410  0100               	movlb	0	; () banked
  6139  003412  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6140  003414  B0D8               	btfsc	status,0,c
  6141  003416  D02B               	goto	l7225
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;train_move_left.c: 206: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6145                           
  6146                           ; BSR set to: 0
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;train_move_left.c: 205: }
  6150                           
  6151                           ;train_move_left.c: 204: break;
  6152                           
  6153                           ;train_move_left.c: 203: Return_Val = 0;
  6154                           
  6155                           ;train_move_left.c: 202: Switch_Moutain = 0;
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;train_move_left.c: 200: {
  6159                           ;train_move_left.c: 201: Switch_Train_Move = 0;
  6160  003418  0E1A               	movlw	26
  6161  00341A  EC56  F01E         	call	_GETxAPIxVAL
  6162  00341E  0100               	movlb	0	; () banked
  6163  003420  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6164  003422  0100               	movlb	0	; () banked
  6165  003424  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6166  003426  0100               	movlb	0	; () banked
  6167  003428  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6168  00342A  0100               	movlb	0	; () banked
  6169  00342C  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6170  00342E  A0D8               	btfss	status,0,c
  6171  003430  D03D               	goto	l7235
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;train_move_left.c: 207: {
  6175                           ;train_move_left.c: 208: Train_Move_Pwm_Count++;
  6176  003432  0100               	movlb	0	; () banked
  6177  003434  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6178  003436  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6179  003438  D033               	goto	l7233
  6180  00343A                     l7219:
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;train_move_left.c: 213: else if (rc == 1){
  6184  00343A  0100               	movlb	0	; () banked
  6185  00343C  05B8               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6186  00343E  A4D8               	btfss	status,2,c
  6187  003440  D038               	goto	l7237
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;train_move_left.c: 214: SETxPWM(Train_Move_Pwm_Count, 0);
  6191  003442  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6192  003446  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6193  00344A  0E00               	movlw	0
  6194  00344C  0100               	movlb	0	; () banked
  6195  00344E  6FB3               	movwf	SETxPWM@direction& (0+255),b
  6196  003450  ECAC  F01B         	call	_SETxPWM	;wreg free
  6197                           
  6198                           ;train_move_left.c: 215: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6199  003454  0E18               	movlw	24
  6200  003456  EC56  F01E         	call	_GETxAPIxVAL
  6201  00345A  0100               	movlb	0	; () banked
  6202  00345C  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6203  00345E  0100               	movlb	0	; () banked
  6204  003460  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6205  003462  0100               	movlb	0	; () banked
  6206  003464  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6207  003466  0100               	movlb	0	; () banked
  6208  003468  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6209  00346A  A0D8               	btfss	status,0,c
  6210  00346C  D008               	goto	l7229
  6211  00346E                     l7225:
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;train_move_left.c: 216: {
  6215                           ;train_move_left.c: 217: Switch_Train_Move = 0;
  6216  00346E  0E00               	movlw	0
  6217  003470  0100               	movlb	0	; () banked
  6218  003472  6F83               	movwf	_Switch_Train_Move& (0+255),b
  6219                           
  6220                           ;train_move_left.c: 218: Switch_Moutain = 0;
  6221  003474  0E00               	movlw	0
  6222  003476  0100               	movlb	0	; () banked
  6223  003478  6F81               	movwf	_Switch_Moutain& (0+255),b
  6224                           
  6225                           ;train_move_left.c: 219: Return_Val = 0;
  6226  00347A  0E00               	movlw	0
  6227  00347C  D01B               	goto	L84
  6228  00347E                     l7229:
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;train_move_left.c: 222: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6232  00347E  0E1A               	movlw	26
  6233  003480  EC56  F01E         	call	_GETxAPIxVAL
  6234  003484  0100               	movlb	0	; () banked
  6235  003486  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6236  003488  0100               	movlb	0	; () banked
  6237  00348A  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6238  00348C  0100               	movlb	0	; () banked
  6239  00348E  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6240  003490  0100               	movlb	0	; () banked
  6241  003492  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6242  003494  A0D8               	btfss	status,0,c
  6243  003496  D00A               	goto	l7235
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;train_move_left.c: 223: {
  6247                           ;train_move_left.c: 224: Train_Move_Pwm_Count--;
  6248  003498  0100               	movlb	0	; () banked
  6249  00349A  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6250  00349C  A0D8               	btfss	status,0,c
  6251  00349E  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6252  0034A0                     l7233:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;train_move_left.c: 225: Train_Move_Pwm_Fast_Count = 0;
  6256  0034A0  0E00               	movlw	0
  6257  0034A2  0100               	movlb	0	; () banked
  6258  0034A4  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6259  0034A6  0E00               	movlw	0
  6260  0034A8  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6261                           
  6262                           ;train_move_left.c: 226: }
  6263  0034AA  D003               	goto	l7237
  6264  0034AC                     l7235:
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;train_move_left.c: 227: else{Train_Move_Pwm_Fast_Count++;}
  6268  0034AC  0100               	movlb	0	; () banked
  6269  0034AE  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6270  0034B0  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6271  0034B2                     l7237:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;train_move_left.c: 228: }
  6275                           ;train_move_left.c: 229: Return_Val = 1;
  6276  0034B2  0E01               	movlw	1
  6277  0034B4                     L84:
  6278  0034B4  0100               	movlb	0	; () banked
  6279  0034B6  6FBF               	movwf	Left_Mountain_From_The_Right@Return_Val& (0+255),b
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;train_move_left.c: 234: }
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;train_move_left.c: 233: break;
  6286                           
  6287                           ;train_move_left.c: 232: default:
  6288                           
  6289                           ;train_move_left.c: 230: break;
  6290  0034B8  D008               	goto	l7243
  6291  0034BA                     l7241:
  6292  0034BA  0100               	movlb	0	; () banked
  6293  0034BC  5181               	movf	_Switch_Moutain& (0+255),w,b
  6294                           
  6295                           ; Switch size 1, requested type "space"
  6296                           ; Number of cases is 2, Range of values is 0 to 1
  6297                           ; switch strategies available:
  6298                           ; Name         Instructions Cycles
  6299                           ; simple_byte            7     4 (average)
  6300                           ;	Chosen strategy is simple_byte
  6301  0034BE  0A00               	xorlw	0	; case 0
  6302  0034C0  B4D8               	btfsc	status,2,c
  6303  0034C2  D771               	goto	l7189
  6304  0034C4  0A01               	xorlw	1	; case 1
  6305  0034C6  B4D8               	btfsc	status,2,c
  6306  0034C8  D78C               	goto	l7201
  6307  0034CA                     l7243:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;train_move_left.c: 236: return(Return_Val);
  6311  0034CA  0100               	movlb	0	; () banked
  6312  0034CC  51BF               	movf	Left_Mountain_From_The_Right@Return_Val& (0+255),w,b
  6313  0034CE  0012               	return	
  6314  0034D0                     __end_of_Left_Mountain_From_The_Right:
  6315                           	opt stack 0
  6316                           tblptru	equ	0xFF8
  6317                           tblptrh	equ	0xFF7
  6318                           tblptrl	equ	0xFF6
  6319                           tablat	equ	0xFF5
  6320                           postinc0	equ	0xFEE
  6321                           wreg	equ	0xFE8
  6322                           postdec1	equ	0xFE5
  6323                           fsr1h	equ	0xFE2
  6324                           fsr1l	equ	0xFE1
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _Left_Mountain_From_The_Left *****************
  6328 ;; Defined at:
  6329 ;;		line 104 in file "../train_move_right.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  rc              1    wreg     unsigned char 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  rc              1   40[BANK0 ] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;                  1    wreg      unsigned char 
  6336 ;; Registers used:
  6337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6343 ;;      Params:         0       0       0       0       0       0       0       0       0
  6344 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6345 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6346 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6347 ;;Total ram usage:        1 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    8
  6350 ;; This function calls:
  6351 ;;		_GETxAPIxVAL
  6352 ;;		_SETxPWM
  6353 ;; This function is called by:
  6354 ;;		_Train_Path
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text10
  6359  00326E                     __ptext10:
  6360                           	opt stack 0
  6361  00326E                     _Left_Mountain_From_The_Left:
  6362                           	opt stack 20
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;incstack = 0
  6366                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6367  00326E  0100               	movlb	0	; () banked
  6368  003270  6FB8               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6369                           
  6370                           ;train_move_right.c: 106: static char Return_Val = 1;
  6371                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6372  003272  D08B               	goto	l7061
  6373  003274                     l7009:
  6374  003274  0E02               	movlw	2
  6375  003276  0100               	movlb	0	; () banked
  6376  003278  19B8               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6377  00327A  B4D8               	btfsc	status,2,c
  6378  00327C  D00D               	goto	l7015
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6382                           
  6383                           ; BSR set to: 0
  6384                           
  6385                           ;train_move_right.c: 112: }
  6386                           
  6387                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6391  00327E  0E3B               	movlw	59
  6392  003280  EC56  F01E         	call	_GETxAPIxVAL
  6393  003284  0100               	movlb	0	; () banked
  6394  003286  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6395  003288  0100               	movlb	0	; () banked
  6396  00328A  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6397  00328C  0100               	movlb	0	; () banked
  6398  00328E  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6399  003290  0100               	movlb	0	; () banked
  6400  003292  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6401  003294  A0D8               	btfss	status,0,c
  6402  003296  D009               	goto	l7017
  6403  003298                     l7015:
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6407  003298  0E01               	movlw	1
  6408  00329A  0100               	movlb	0	; () banked
  6409  00329C  6F81               	movwf	_Switch_Moutain& (0+255),b
  6410                           
  6411                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6412  00329E  0E00               	movlw	0
  6413  0032A0  0100               	movlb	0	; () banked
  6414  0032A2  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6415  0032A4  0E00               	movlw	0
  6416  0032A6  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  6417                           
  6418                           ;train_move_right.c: 116: }
  6419  0032A8  D06C               	goto	l7057
  6420  0032AA                     l7017:
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;train_move_right.c: 117: else{
  6424                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  6425  0032AA  0100               	movlb	0	; () banked
  6426  0032AC  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6427  0032AE  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6428                           
  6429                           ; BSR set to: 0
  6430  0032B0  D068               	goto	l7057
  6431  0032B2                     l7021:
  6432                           
  6433                           ; BSR set to: 0
  6434  0032B2  0100               	movlb	0	; () banked
  6435  0032B4  05B8               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6436  0032B6  A4D8               	btfss	status,2,c
  6437  0032B8  D028               	goto	l7039
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  6441  0032BA  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6442  0032BE  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6443  0032C2  0E01               	movlw	1
  6444  0032C4  0100               	movlb	0	; () banked
  6445  0032C6  6FB3               	movwf	SETxPWM@direction& (0+255),b
  6446  0032C8  ECAC  F01B         	call	_SETxPWM	;wreg free
  6447                           
  6448                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  6449  0032CC  0E31               	movlw	49
  6450  0032CE  EC56  F01E         	call	_GETxAPIxVAL
  6451  0032D2  0100               	movlb	0	; () banked
  6452  0032D4  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6453  0032D6  0100               	movlb	0	; () banked
  6454  0032D8  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6455  0032DA  0100               	movlb	0	; () banked
  6456  0032DC  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6457  0032DE  0100               	movlb	0	; () banked
  6458  0032E0  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6459  0032E2  B0D8               	btfsc	status,0,c
  6460  0032E4  D02D               	goto	l7045
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6464                           
  6465                           ; BSR set to: 0
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;train_move_right.c: 131: }
  6469                           
  6470                           ;train_move_right.c: 130: break;
  6471                           
  6472                           ;train_move_right.c: 129: Return_Val = 0;
  6473                           
  6474                           ;train_move_right.c: 128: Switch_Moutain = 0;
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;train_move_right.c: 126: {
  6478                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  6479  0032E6  0E1A               	movlw	26
  6480  0032E8  EC56  F01E         	call	_GETxAPIxVAL
  6481  0032EC  0100               	movlb	0	; () banked
  6482  0032EE  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6483  0032F0  0100               	movlb	0	; () banked
  6484  0032F2  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6485  0032F4  0100               	movlb	0	; () banked
  6486  0032F6  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6487  0032F8  0100               	movlb	0	; () banked
  6488  0032FA  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6489  0032FC  A0D8               	btfss	status,0,c
  6490  0032FE  D03E               	goto	l7055
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;train_move_right.c: 133: {
  6494                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  6495  003300  0100               	movlb	0	; () banked
  6496  003302  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6497  003304  A0D8               	btfss	status,0,c
  6498  003306  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6499  003308  D033               	goto	l7053
  6500  00330A                     l7039:
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;train_move_right.c: 139: else if (rc == 2){
  6504  00330A  0E02               	movlw	2
  6505  00330C  0100               	movlb	0	; () banked
  6506  00330E  19B8               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6507  003310  A4D8               	btfss	status,2,c
  6508  003312  D037               	goto	l7057
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  6512  003314  C072  F0B1         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6513  003318  C073  F0B2         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6514  00331C  0E01               	movlw	1
  6515  00331E  0100               	movlb	0	; () banked
  6516  003320  6FB3               	movwf	SETxPWM@direction& (0+255),b
  6517  003322  ECAC  F01B         	call	_SETxPWM	;wreg free
  6518                           
  6519                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  6520  003326  0E17               	movlw	23
  6521  003328  EC56  F01E         	call	_GETxAPIxVAL
  6522  00332C  0100               	movlb	0	; () banked
  6523  00332E  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6524  003330  0100               	movlb	0	; () banked
  6525  003332  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6526  003334  0100               	movlb	0	; () banked
  6527  003336  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6528  003338  0100               	movlb	0	; () banked
  6529  00333A  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6530  00333C  A0D8               	btfss	status,0,c
  6531  00333E  D008               	goto	l7049
  6532  003340                     l7045:
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;train_move_right.c: 142: {
  6536                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  6537  003340  0E00               	movlw	0
  6538  003342  0100               	movlb	0	; () banked
  6539  003344  6F83               	movwf	_Switch_Train_Move& (0+255),b
  6540                           
  6541                           ;train_move_right.c: 144: Switch_Moutain = 0;
  6542  003346  0E00               	movlw	0
  6543  003348  0100               	movlb	0	; () banked
  6544  00334A  6F81               	movwf	_Switch_Moutain& (0+255),b
  6545                           
  6546                           ;train_move_right.c: 145: Return_Val = 0;
  6547  00334C  0E00               	movlw	0
  6548  00334E  D01A               	goto	L87
  6549  003350                     l7049:
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6553  003350  0E1A               	movlw	26
  6554  003352  EC56  F01E         	call	_GETxAPIxVAL
  6555  003356  0100               	movlb	0	; () banked
  6556  003358  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6557  00335A  0100               	movlb	0	; () banked
  6558  00335C  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6559  00335E  0100               	movlb	0	; () banked
  6560  003360  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6561  003362  0100               	movlb	0	; () banked
  6562  003364  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6563  003366  A0D8               	btfss	status,0,c
  6564  003368  D009               	goto	l7055
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;train_move_right.c: 149: {
  6568                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  6569  00336A  0100               	movlb	0	; () banked
  6570  00336C  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6571  00336E  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6572  003370                     l7053:
  6573                           
  6574                           ; BSR set to: 0
  6575                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  6576  003370  0E00               	movlw	0
  6577  003372  0100               	movlb	0	; () banked
  6578  003374  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6579  003376  0E00               	movlw	0
  6580  003378  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6581                           
  6582                           ;train_move_right.c: 152: }
  6583  00337A  D003               	goto	l7057
  6584  00337C                     l7055:
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  6588  00337C  0100               	movlb	0	; () banked
  6589  00337E  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6590  003380  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6591  003382                     l7057:
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;train_move_right.c: 154: }
  6595                           ;train_move_right.c: 155: Return_Val = 1;
  6596  003382  0E01               	movlw	1
  6597  003384                     L87:
  6598  003384  0100               	movlb	0	; () banked
  6599  003386  6FBE               	movwf	Left_Mountain_From_The_Left@Return_Val& (0+255),b
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;train_move_right.c: 160: }
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;train_move_right.c: 159: break;
  6606                           
  6607                           ;train_move_right.c: 158: default:
  6608                           
  6609                           ;train_move_right.c: 156: break;
  6610  003388  D008               	goto	l7063
  6611  00338A                     l7061:
  6612  00338A  0100               	movlb	0	; () banked
  6613  00338C  5181               	movf	_Switch_Moutain& (0+255),w,b
  6614                           
  6615                           ; Switch size 1, requested type "space"
  6616                           ; Number of cases is 2, Range of values is 0 to 1
  6617                           ; switch strategies available:
  6618                           ; Name         Instructions Cycles
  6619                           ; simple_byte            7     4 (average)
  6620                           ;	Chosen strategy is simple_byte
  6621  00338E  0A00               	xorlw	0	; case 0
  6622  003390  B4D8               	btfsc	status,2,c
  6623  003392  D770               	goto	l7009
  6624  003394  0A01               	xorlw	1	; case 1
  6625  003396  B4D8               	btfsc	status,2,c
  6626  003398  D78C               	goto	l7021
  6627  00339A                     l7063:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;train_move_right.c: 162: return(Return_Val);
  6631  00339A  0100               	movlb	0	; () banked
  6632  00339C  51BE               	movf	Left_Mountain_From_The_Left@Return_Val& (0+255),w,b
  6633  00339E  0012               	return	
  6634  0033A0                     __end_of_Left_Mountain_From_The_Left:
  6635                           	opt stack 0
  6636                           tblptru	equ	0xFF8
  6637                           tblptrh	equ	0xFF7
  6638                           tblptrl	equ	0xFF6
  6639                           tablat	equ	0xFF5
  6640                           postinc0	equ	0xFEE
  6641                           wreg	equ	0xFE8
  6642                           postdec1	equ	0xFE5
  6643                           fsr1h	equ	0xFE2
  6644                           fsr1l	equ	0xFE1
  6645                           status	equ	0xFD8
  6646                           
  6647 ;; *************** function _SETxPWM *****************
  6648 ;; Defined at:
  6649 ;;		line 20 in file "../set_pwm.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  speed           2   33[BANK0 ] unsigned int 
  6652 ;;  direction       1   35[BANK0 ] unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  pwm_speed       2   38[BANK0 ] unsigned int 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      void 
  6657 ;; Registers used:
  6658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6664 ;;      Params:         0       3       0       0       0       0       0       0       0
  6665 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6666 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6667 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6668 ;;Total ram usage:        7 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    7
  6671 ;; This function calls:
  6672 ;;		_SETxAPIxVAL
  6673 ;; This function is called by:
  6674 ;;		_Train_Move_Left_Start
  6675 ;;		_Right_Mountain_From_The_Right
  6676 ;;		_Left_Mountain_From_The_Right
  6677 ;;		_Train_Move_Left_Brake
  6678 ;;		_Train_Move_Right_Start
  6679 ;;		_Left_Mountain_From_The_Left
  6680 ;;		_Right_Mountain_From_The_Left
  6681 ;;		_Train_Move_Right_Brake
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           	psect	text11
  6686  003758                     __ptext11:
  6687                           	opt stack 0
  6688  003758                     _SETxPWM:
  6689                           	opt stack 20
  6690                           
  6691                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;incstack = 0
  6695  003758  0E01               	movlw	1
  6696  00375A  0100               	movlb	0	; () banked
  6697  00375C  6FB7               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6698  00375E  69B6               	setf	SETxPWM@pwm_speed& (0+255),b
  6699                           
  6700                           ;set_pwm.c: 24: if (direction == 0){
  6701  003760  0100               	movlb	0	; () banked
  6702  003762  51B3               	movf	SETxPWM@direction& (0+255),w,b
  6703  003764  0100               	movlb	0	; () banked
  6704  003766  A4D8               	btfss	status,2,c
  6705  003768  D01F               	goto	l6715
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;set_pwm.c: 25: pwm_speed = 511 - (speed * 2);
  6709  00376A  C0B1  F0B4         	movff	SETxPWM@speed,??_SETxPWM
  6710  00376E  C0B2  F0B5         	movff	SETxPWM@speed+1,??_SETxPWM+1
  6711  003772  90D8               	bcf	status,0,c
  6712  003774  0100               	movlb	0	; () banked
  6713  003776  37B4               	rlcf	??_SETxPWM& (0+255),f,b
  6714  003778  37B5               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  6715  00377A  0100               	movlb	0	; () banked
  6716  00377C  1FB4               	comf	??_SETxPWM& (0+255),f,b
  6717  00377E  1FB5               	comf	(??_SETxPWM+1)& (0+255),f,b
  6718  003780  4BB4               	infsnz	??_SETxPWM& (0+255),f,b
  6719  003782  2BB5               	incf	(??_SETxPWM+1)& (0+255),f,b
  6720  003784  0EFF               	movlw	255
  6721  003786  0100               	movlb	0	; () banked
  6722  003788  25B4               	addwf	??_SETxPWM& (0+255),w,b
  6723  00378A  0100               	movlb	0	; () banked
  6724  00378C  6FB6               	movwf	SETxPWM@pwm_speed& (0+255),b
  6725  00378E  0E01               	movlw	1
  6726  003790  0100               	movlb	0	; () banked
  6727  003792  21B5               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  6728  003794  0100               	movlb	0	; () banked
  6729  003796  6FB7               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;set_pwm.c: 26: SETxAPIxVAL(68, pwm_speed);
  6733  003798  C0B6  F0AC         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  6734  00379C  C0B7  F0AD         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  6735  0037A0  0E44               	movlw	68
  6736  0037A2  EC49  F01D         	call	_SETxAPIxVAL
  6737                           
  6738                           ;set_pwm.c: 28: }
  6739  0037A6  0012               	return	
  6740  0037A8                     l6715:
  6741                           
  6742                           ;set_pwm.c: 29: else if (direction == 1){
  6743  0037A8  0100               	movlb	0	; () banked
  6744  0037AA  05B3               	decf	SETxPWM@direction& (0+255),w,b
  6745  0037AC  A4D8               	btfss	status,2,c
  6746  0037AE  0012               	return	
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;set_pwm.c: 30: pwm_speed = 511 + (speed * 2);
  6750  0037B0  C0B1  F0B4         	movff	SETxPWM@speed,??_SETxPWM
  6751  0037B4  C0B2  F0B5         	movff	SETxPWM@speed+1,??_SETxPWM+1
  6752  0037B8  90D8               	bcf	status,0,c
  6753  0037BA  0100               	movlb	0	; () banked
  6754  0037BC  37B4               	rlcf	??_SETxPWM& (0+255),f,b
  6755  0037BE  37B5               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  6756  0037C0  0EFF               	movlw	255
  6757  0037C2  0100               	movlb	0	; () banked
  6758  0037C4  25B4               	addwf	??_SETxPWM& (0+255),w,b
  6759  0037C6  0100               	movlb	0	; () banked
  6760  0037C8  6FB6               	movwf	SETxPWM@pwm_speed& (0+255),b
  6761  0037CA  0E01               	movlw	1
  6762  0037CC  0100               	movlb	0	; () banked
  6763  0037CE  21B5               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  6764  0037D0  0100               	movlb	0	; () banked
  6765  0037D2  6FB7               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;set_pwm.c: 31: SETxAPIxVAL(68, pwm_speed);
  6769  0037D4  C0B6  F0AC         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  6770  0037D8  C0B7  F0AD         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  6771  0037DC  0E44               	movlw	68
  6772  0037DE  EC49  F01D         	call	_SETxAPIxVAL
  6773  0037E2  0012               	return	
  6774  0037E4                     __end_of_SETxPWM:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           postinc0	equ	0xFEE
  6781                           wreg	equ	0xFE8
  6782                           postdec1	equ	0xFE5
  6783                           fsr1h	equ	0xFE2
  6784                           fsr1l	equ	0xFE1
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _Junction *****************
  6788 ;; Defined at:
  6789 ;;		line 23 in file "../junction.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  Junction_Lef    1    wreg     unsigned char 
  6792 ;;  Straight_Ben    1   33[BANK0 ] unsigned char 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  Junction_Lef    1   34[BANK0 ] unsigned char 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      unsigned char 
  6797 ;; Registers used:
  6798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6804 ;;      Params:         0       1       0       0       0       0       0       0       0
  6805 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6807 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6808 ;;Total ram usage:        2 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    7
  6811 ;; This function calls:
  6812 ;;		_GETxAPIxVAL
  6813 ;;		_SETxAPIxVAL
  6814 ;; This function is called by:
  6815 ;;		_Update_StateMchn
  6816 ;;		_Train_Path
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text12
  6821  002C54                     __ptext12:
  6822                           	opt stack 0
  6823  002C54                     _Junction:
  6824                           	opt stack 21
  6825                           
  6826                           ;incstack = 0
  6827                           ;Junction@Junction_Left_Right stored from wreg
  6828  002C54  0100               	movlb	0	; () banked
  6829  002C56  6FB2               	movwf	Junction@Junction_Left_Right& (0+255),b
  6830                           
  6831                           ;junction.c: 25: static char Return_Val = 1;
  6832                           ;junction.c: 26: static unsigned int Junction_Switch_Time = 0;
  6833                           ;junction.c: 28: switch (Switch_Junction)
  6834  002C58  D08E               	goto	l6781
  6835  002C5A                     l6741:
  6836  002C5A  0E01               	movlw	1
  6837  002C5C  0100               	movlb	0	; () banked
  6838  002C5E  6FBD               	movwf	Junction@Return_Val& (0+255),b
  6839                           
  6840                           ;junction.c: 31: switch (Junction_Left_Right)
  6841  002C60  D036               	goto	l6761
  6842  002C62                     l6743:
  6843                           
  6844                           ; BSR set to: 0
  6845  002C62  0E00               	movlw	0
  6846  002C64  0100               	movlb	0	; () banked
  6847  002C66  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6848  002C68  0E01               	movlw	1
  6849  002C6A  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  6850  002C6C  0E40               	movlw	64
  6851  002C6E  EC49  F01D         	call	_SETxAPIxVAL
  6852  002C72  D035               	goto	l6763
  6853  002C74                     l6745:
  6854  002C74  0E00               	movlw	0
  6855  002C76  0100               	movlb	0	; () banked
  6856  002C78  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6857  002C7A  0E01               	movlw	1
  6858  002C7C  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  6859  002C7E  0E41               	movlw	65
  6860  002C80  EC49  F01D         	call	_SETxAPIxVAL
  6861                           
  6862                           ;junction.c: 38: }
  6863                           
  6864                           ;junction.c: 37: default : break;
  6865  002C84  D02C               	goto	l6763
  6866  002C86                     l6749:
  6867  002C86  0100               	movlb	0	; () banked
  6868  002C88  51B1               	movf	Junction@Straight_Bend& (0+255),w,b
  6869                           
  6870                           ; Switch size 1, requested type "space"
  6871                           ; Number of cases is 2, Range of values is 0 to 1
  6872                           ; switch strategies available:
  6873                           ; Name         Instructions Cycles
  6874                           ; simple_byte            7     4 (average)
  6875                           ;	Chosen strategy is simple_byte
  6876  002C8A  0A00               	xorlw	0	; case 0
  6877  002C8C  B4D8               	btfsc	status,2,c
  6878  002C8E  D7E9               	goto	l6743
  6879  002C90  0A01               	xorlw	1	; case 1
  6880  002C92  B4D8               	btfsc	status,2,c
  6881  002C94  D7EF               	goto	l6745
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;junction.c: 39: break;
  6885  002C96  D023               	goto	l6763
  6886  002C98                     l6751:
  6887                           
  6888                           ; BSR set to: 0
  6889  002C98  0E00               	movlw	0
  6890  002C9A  0100               	movlb	0	; () banked
  6891  002C9C  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6892  002C9E  0E01               	movlw	1
  6893  002CA0  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  6894  002CA2  0E42               	movlw	66
  6895  002CA4  EC49  F01D         	call	_SETxAPIxVAL
  6896  002CA8  D01A               	goto	l6763
  6897  002CAA                     l6753:
  6898  002CAA  0E00               	movlw	0
  6899  002CAC  0100               	movlb	0	; () banked
  6900  002CAE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6901  002CB0  0E01               	movlw	1
  6902  002CB2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  6903  002CB4  0E43               	movlw	67
  6904  002CB6  EC49  F01D         	call	_SETxAPIxVAL
  6905                           
  6906                           ;junction.c: 46: }
  6907                           
  6908                           ;junction.c: 45: default : break;
  6909  002CBA  D011               	goto	l6763
  6910  002CBC                     l6757:
  6911  002CBC  0100               	movlb	0	; () banked
  6912  002CBE  51B1               	movf	Junction@Straight_Bend& (0+255),w,b
  6913                           
  6914                           ; Switch size 1, requested type "space"
  6915                           ; Number of cases is 2, Range of values is 0 to 1
  6916                           ; switch strategies available:
  6917                           ; Name         Instructions Cycles
  6918                           ; simple_byte            7     4 (average)
  6919                           ;	Chosen strategy is simple_byte
  6920  002CC0  0A00               	xorlw	0	; case 0
  6921  002CC2  B4D8               	btfsc	status,2,c
  6922  002CC4  D7E9               	goto	l6751
  6923  002CC6  0A01               	xorlw	1	; case 1
  6924  002CC8  B4D8               	btfsc	status,2,c
  6925  002CCA  D7EF               	goto	l6753
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;junction.c: 50: }
  6929                           
  6930                           ; BSR set to: 0
  6931                           
  6932                           ;junction.c: 49: default : break;
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;junction.c: 47: break;
  6936  002CCC  D008               	goto	l6763
  6937  002CCE                     l6761:
  6938                           
  6939                           ; BSR set to: 0
  6940  002CCE  0100               	movlb	0	; () banked
  6941  002CD0  51B2               	movf	Junction@Junction_Left_Right& (0+255),w,b
  6942                           
  6943                           ; Switch size 1, requested type "space"
  6944                           ; Number of cases is 2, Range of values is 0 to 1
  6945                           ; switch strategies available:
  6946                           ; Name         Instructions Cycles
  6947                           ; simple_byte            7     4 (average)
  6948                           ;	Chosen strategy is simple_byte
  6949  002CD2  0A00               	xorlw	0	; case 0
  6950  002CD4  B4D8               	btfsc	status,2,c
  6951  002CD6  D7D7               	goto	l6749
  6952  002CD8  0A01               	xorlw	1	; case 1
  6953  002CDA  B4D8               	btfsc	status,2,c
  6954  002CDC  D7EF               	goto	l6757
  6955  002CDE                     l6763:
  6956                           
  6957                           ;junction.c: 51: Switch_Junction = 1;
  6958  002CDE  0E01               	movlw	1
  6959  002CE0  0100               	movlb	0	; () banked
  6960  002CE2  6F7F               	movwf	_Switch_Junction& (0+255),b
  6961                           
  6962                           ;junction.c: 52: break;
  6963  002CE4  D053               	goto	l6783
  6964  002CE6                     l6765:
  6965                           
  6966                           ; BSR set to: 0
  6967  002CE6  0E13               	movlw	19
  6968  002CE8  EC56  F01E         	call	_GETxAPIxVAL
  6969  002CEC  0100               	movlb	0	; () banked
  6970  002CEE  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  6971  002CF0  0100               	movlb	0	; () banked
  6972  002CF2  5D60               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  6973  002CF4  0100               	movlb	0	; () banked
  6974  002CF6  5191               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6975  002CF8  0100               	movlb	0	; () banked
  6976  002CFA  5961               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  6977  002CFC  A0D8               	btfss	status,0,c
  6978  002CFE  D00A               	goto	l6769
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;junction.c: 55: {
  6982                           ;junction.c: 56: Switch_Junction = 2;
  6983  002D00  0E02               	movlw	2
  6984  002D02  0100               	movlb	0	; () banked
  6985  002D04  6F7F               	movwf	_Switch_Junction& (0+255),b
  6986                           
  6987                           ;junction.c: 57: Junction_Switch_Time = 0;
  6988  002D06  0E00               	movlw	0
  6989  002D08  0100               	movlb	0	; () banked
  6990  002D0A  6F61               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  6991  002D0C  0E00               	movlw	0
  6992  002D0E  6F60               	movwf	Junction@Junction_Switch_Time& (0+255),b
  6993                           
  6994                           ;junction.c: 58: Return_Val = 1;
  6995  002D10  0E01               	movlw	1
  6996  002D12  D02E               	goto	L88
  6997  002D14                     l6769:
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;junction.c: 60: }
  7001                           ;junction.c: 61: Return_Val = 1;
  7002  002D14  0E01               	movlw	1
  7003  002D16  0100               	movlb	0	; () banked
  7004  002D18  6FBD               	movwf	Junction@Return_Val& (0+255),b
  7005                           
  7006                           ;junction.c: 62: Switch_Junction = 1;
  7007  002D1A  0E01               	movlw	1
  7008  002D1C  0100               	movlb	0	; () banked
  7009  002D1E  6F7F               	movwf	_Switch_Junction& (0+255),b
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;junction.c: 63: Junction_Switch_Time++;
  7013  002D20  0100               	movlb	0	; () banked
  7014  002D22  4B60               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7015  002D24  2B61               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7016                           
  7017                           ;junction.c: 64: break;
  7018  002D26  D032               	goto	l6783
  7019  002D28                     l6773:
  7020                           
  7021                           ; BSR set to: 0
  7022  002D28  0E00               	movlw	0
  7023  002D2A  0100               	movlb	0	; () banked
  7024  002D2C  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7025  002D2E  0E00               	movlw	0
  7026  002D30  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7027  002D32  0E40               	movlw	64
  7028  002D34  EC49  F01D         	call	_SETxAPIxVAL
  7029                           
  7030                           ;junction.c: 67: SETxAPIxVAL(65, 0);
  7031  002D38  0E00               	movlw	0
  7032  002D3A  0100               	movlb	0	; () banked
  7033  002D3C  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7034  002D3E  0E00               	movlw	0
  7035  002D40  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7036  002D42  0E41               	movlw	65
  7037  002D44  EC49  F01D         	call	_SETxAPIxVAL
  7038                           
  7039                           ;junction.c: 68: SETxAPIxVAL(66,0);
  7040  002D48  0E00               	movlw	0
  7041  002D4A  0100               	movlb	0	; () banked
  7042  002D4C  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7043  002D4E  0E00               	movlw	0
  7044  002D50  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7045  002D52  0E42               	movlw	66
  7046  002D54  EC49  F01D         	call	_SETxAPIxVAL
  7047                           
  7048                           ;junction.c: 69: SETxAPIxVAL(67,0);
  7049  002D58  0E00               	movlw	0
  7050  002D5A  0100               	movlb	0	; () banked
  7051  002D5C  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7052  002D5E  0E00               	movlw	0
  7053  002D60  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7054  002D62  0E43               	movlw	67
  7055  002D64  EC49  F01D         	call	_SETxAPIxVAL
  7056                           
  7057                           ;junction.c: 70: Switch_Junction = 0;
  7058  002D68  0E00               	movlw	0
  7059  002D6A  0100               	movlb	0	; () banked
  7060  002D6C  6F7F               	movwf	_Switch_Junction& (0+255),b
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;junction.c: 71: Return_Val = 0;
  7064  002D6E  0E00               	movlw	0
  7065  002D70                     L88:
  7066  002D70  0100               	movlb	0	; () banked
  7067  002D72  6FBD               	movwf	Junction@Return_Val& (0+255),b
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;junction.c: 75: }
  7071                           
  7072                           ; BSR set to: 0
  7073                           
  7074                           ;junction.c: 74: default : break;
  7075                           
  7076                           ;junction.c: 72: break;
  7077  002D74  D00B               	goto	l6783
  7078  002D76                     l6781:
  7079  002D76  0100               	movlb	0	; () banked
  7080  002D78  517F               	movf	_Switch_Junction& (0+255),w,b
  7081                           
  7082                           ; Switch size 1, requested type "space"
  7083                           ; Number of cases is 3, Range of values is 0 to 2
  7084                           ; switch strategies available:
  7085                           ; Name         Instructions Cycles
  7086                           ; simple_byte           10     6 (average)
  7087                           ;	Chosen strategy is simple_byte
  7088  002D7A  0A00               	xorlw	0	; case 0
  7089  002D7C  B4D8               	btfsc	status,2,c
  7090  002D7E  D76D               	goto	l6741
  7091  002D80  0A01               	xorlw	1	; case 1
  7092  002D82  B4D8               	btfsc	status,2,c
  7093  002D84  D7B0               	goto	l6765
  7094  002D86  0A03               	xorlw	3	; case 2
  7095  002D88  B4D8               	btfsc	status,2,c
  7096  002D8A  D7CE               	goto	l6773
  7097  002D8C                     l6783:
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;junction.c: 77: return (Return_Val);
  7101  002D8C  0100               	movlb	0	; () banked
  7102  002D8E  51BD               	movf	Junction@Return_Val& (0+255),w,b
  7103  002D90  0012               	return	
  7104  002D92                     __end_of_Junction:
  7105                           	opt stack 0
  7106                           tblptru	equ	0xFF8
  7107                           tblptrh	equ	0xFF7
  7108                           tblptrl	equ	0xFF6
  7109                           tablat	equ	0xFF5
  7110                           postinc0	equ	0xFEE
  7111                           wreg	equ	0xFE8
  7112                           postdec1	equ	0xFE5
  7113                           fsr1h	equ	0xFE2
  7114                           fsr1l	equ	0xFE1
  7115                           status	equ	0xFD8
  7116                           
  7117 ;; *************** function _Red_Led *****************
  7118 ;; Defined at:
  7119 ;;		line 97 in file "../io.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  Operation       1    wreg     unsigned char 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  Operation       1   31[COMRAM] unsigned char 
  7124 ;; Return value:  Size  Location     Type
  7125 ;;                  1    wreg      void 
  7126 ;; Registers used:
  7127 ;;		wreg, status,2, status,0
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7133 ;;      Params:         0       0       0       0       0       0       0       0       0
  7134 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7136 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7137 ;;Total ram usage:        1 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:    3
  7140 ;; This function calls:
  7141 ;;		Nothing
  7142 ;; This function is called by:
  7143 ;;		_Update_StateMchn
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           	psect	text13
  7148  0037E4                     __ptext13:
  7149                           	opt stack 0
  7150  0037E4                     _Red_Led:
  7151                           	opt stack 26
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;incstack = 0
  7155                           ;Red_Led@Operation stored from wreg
  7156  0037E4  6E20               	movwf	Red_Led@Operation,c
  7157                           
  7158                           ;io.c: 99: switch(Operation)
  7159  0037E6  D030               	goto	l5151
  7160  0037E8                     l745:
  7161  0037E8  9A83               	bcf	3971,5,c	;volatile
  7162  0037EA  0012               	return	
  7163  0037EC                     l747:
  7164  0037EC  8A83               	bsf	3971,5,c	;volatile
  7165  0037EE  0012               	return	
  7166  0037F0                     l5129:
  7167  0037F0  4A23               	infsnz	_Red_Led_Counter,f,c
  7168  0037F2  2A24               	incf	_Red_Led_Counter+1,f,c
  7169                           
  7170                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7171  0037F4  0EB8               	movlw	184
  7172  0037F6  5C23               	subwf	_Red_Led_Counter,w,c
  7173  0037F8  0E0B               	movlw	11
  7174  0037FA  5824               	subwfb	_Red_Led_Counter+1,w,c
  7175  0037FC  A0D8               	btfss	status,0,c
  7176  0037FE  D004               	goto	l5135
  7177                           
  7178                           ;io.c: 107: {
  7179                           ;io.c: 108: Red_Led_Counter = 0;
  7180  003800  0E00               	movlw	0
  7181  003802  6E24               	movwf	_Red_Led_Counter+1,c
  7182  003804  0E00               	movlw	0
  7183  003806  6E23               	movwf	_Red_Led_Counter,c
  7184  003808                     l5135:
  7185                           
  7186                           ;io.c: 109: }
  7187                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7188  003808  0EDC               	movlw	220
  7189  00380A  5C23               	subwf	_Red_Led_Counter,w,c
  7190  00380C  0E05               	movlw	5
  7191  00380E  5824               	subwfb	_Red_Led_Counter+1,w,c
  7192  003810  A0D8               	btfss	status,0,c
  7193  003812  D002               	goto	l750
  7194                           
  7195                           ;io.c: 111: {
  7196                           ;io.c: 112: PORTDbits.RD5 = 1;
  7197  003814  8A83               	bsf	3971,5,c	;volatile
  7198                           
  7199                           ;io.c: 113: }
  7200  003816  0012               	return	
  7201  003818                     l750:
  7202                           
  7203                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7204  003818  9A83               	bcf	3971,5,c	;volatile
  7205                           
  7206                           ;io.c: 115: break;
  7207  00381A  0012               	return	
  7208  00381C                     l5139:
  7209  00381C  4A23               	infsnz	_Red_Led_Counter,f,c
  7210  00381E  2A24               	incf	_Red_Led_Counter+1,f,c
  7211                           
  7212                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7213  003820  0EE8               	movlw	232
  7214  003822  5C23               	subwf	_Red_Led_Counter,w,c
  7215  003824  0E03               	movlw	3
  7216  003826  5824               	subwfb	_Red_Led_Counter+1,w,c
  7217  003828  A0D8               	btfss	status,0,c
  7218  00382A  D004               	goto	l5145
  7219                           
  7220                           ;io.c: 119: {
  7221                           ;io.c: 120: Red_Led_Counter = 0;
  7222  00382C  0E00               	movlw	0
  7223  00382E  6E24               	movwf	_Red_Led_Counter+1,c
  7224  003830  0E00               	movlw	0
  7225  003832  6E23               	movwf	_Red_Led_Counter,c
  7226  003834                     l5145:
  7227                           
  7228                           ;io.c: 121: }
  7229                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7230  003834  0EF4               	movlw	244
  7231  003836  5C23               	subwf	_Red_Led_Counter,w,c
  7232  003838  0E01               	movlw	1
  7233  00383A  5824               	subwfb	_Red_Led_Counter+1,w,c
  7234  00383C  A0D8               	btfss	status,0,c
  7235  00383E  D002               	goto	l754
  7236                           
  7237                           ;io.c: 123: {
  7238                           ;io.c: 124: PORTDbits.RD5 = 1;
  7239  003840  8A83               	bsf	3971,5,c	;volatile
  7240                           
  7241                           ;io.c: 125: }
  7242  003842  0012               	return	
  7243  003844                     l754:
  7244                           
  7245                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7246  003844  9A83               	bcf	3971,5,c	;volatile
  7247                           
  7248                           ;io.c: 130: }
  7249                           
  7250                           ;io.c: 129: default : break;
  7251                           
  7252                           ;io.c: 127: break;
  7253  003846  0012               	return	
  7254  003848                     l5151:
  7255  003848  5020               	movf	Red_Led@Operation,w,c
  7256                           
  7257                           ; Switch size 1, requested type "space"
  7258                           ; Number of cases is 4, Range of values is 0 to 3
  7259                           ; switch strategies available:
  7260                           ; Name         Instructions Cycles
  7261                           ; simple_byte           13     7 (average)
  7262                           ;	Chosen strategy is simple_byte
  7263  00384A  0A00               	xorlw	0	; case 0
  7264  00384C  B4D8               	btfsc	status,2,c
  7265  00384E  D7CC               	goto	l745
  7266  003850  0A01               	xorlw	1	; case 1
  7267  003852  B4D8               	btfsc	status,2,c
  7268  003854  D7CB               	goto	l747
  7269  003856  0A03               	xorlw	3	; case 2
  7270  003858  B4D8               	btfsc	status,2,c
  7271  00385A  D7CA               	goto	l5129
  7272  00385C  0A01               	xorlw	1	; case 3
  7273  00385E  A4D8               	btfss	status,2,c
  7274  003860  0012               	return	
  7275  003862  D7DC               	goto	l5139
  7276  003864                     __end_of_Red_Led:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           postinc0	equ	0xFEE
  7283                           wreg	equ	0xFE8
  7284                           postdec1	equ	0xFE5
  7285                           fsr1h	equ	0xFE2
  7286                           fsr1l	equ	0xFE1
  7287                           status	equ	0xFD8
  7288                           
  7289 ;; *************** function _Green_Led *****************
  7290 ;; Defined at:
  7291 ;;		line 47 in file "../io.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  Operation       1    wreg     unsigned char 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  Operation       1   31[COMRAM] unsigned char 
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  1    wreg      void 
  7298 ;; Registers used:
  7299 ;;		wreg, status,2, status,0
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7305 ;;      Params:         0       0       0       0       0       0       0       0       0
  7306 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7307 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7308 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7309 ;;Total ram usage:        1 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    3
  7312 ;; This function calls:
  7313 ;;		Nothing
  7314 ;; This function is called by:
  7315 ;;		_Update_StateMchn
  7316 ;; This function uses a non-reentrant model
  7317 ;;
  7318                           
  7319                           	psect	text14
  7320  003864                     __ptext14:
  7321                           	opt stack 0
  7322  003864                     _Green_Led:
  7323                           	opt stack 26
  7324                           
  7325                           ;incstack = 0
  7326                           ;Green_Led@Operation stored from wreg
  7327  003864  6E20               	movwf	Green_Led@Operation,c
  7328                           
  7329                           ;io.c: 49: switch(Operation)
  7330  003866  D030               	goto	l5125
  7331  003868                     l729:
  7332  003868  9C83               	bcf	3971,6,c	;volatile
  7333  00386A  0012               	return	
  7334  00386C                     l731:
  7335  00386C  8C83               	bsf	3971,6,c	;volatile
  7336  00386E  0012               	return	
  7337  003870                     l5103:
  7338  003870  4A21               	infsnz	_Green_Led_Counter,f,c
  7339  003872  2A22               	incf	_Green_Led_Counter+1,f,c
  7340                           
  7341                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7342  003874  0EB8               	movlw	184
  7343  003876  5C21               	subwf	_Green_Led_Counter,w,c
  7344  003878  0E0B               	movlw	11
  7345  00387A  5822               	subwfb	_Green_Led_Counter+1,w,c
  7346  00387C  A0D8               	btfss	status,0,c
  7347  00387E  D004               	goto	l5109
  7348                           
  7349                           ;io.c: 57: {
  7350                           ;io.c: 58: Green_Led_Counter = 0;
  7351  003880  0E00               	movlw	0
  7352  003882  6E22               	movwf	_Green_Led_Counter+1,c
  7353  003884  0E00               	movlw	0
  7354  003886  6E21               	movwf	_Green_Led_Counter,c
  7355  003888                     l5109:
  7356                           
  7357                           ;io.c: 59: }
  7358                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  7359  003888  0EDC               	movlw	220
  7360  00388A  5C21               	subwf	_Green_Led_Counter,w,c
  7361  00388C  0E05               	movlw	5
  7362  00388E  5822               	subwfb	_Green_Led_Counter+1,w,c
  7363  003890  A0D8               	btfss	status,0,c
  7364  003892  D002               	goto	l734
  7365                           
  7366                           ;io.c: 61: {
  7367                           ;io.c: 62: PORTDbits.RD6 = 1;
  7368  003894  8C83               	bsf	3971,6,c	;volatile
  7369                           
  7370                           ;io.c: 63: }
  7371  003896  0012               	return	
  7372  003898                     l734:
  7373                           
  7374                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  7375  003898  9C83               	bcf	3971,6,c	;volatile
  7376                           
  7377                           ;io.c: 65: break;
  7378  00389A  0012               	return	
  7379  00389C                     l5113:
  7380  00389C  4A21               	infsnz	_Green_Led_Counter,f,c
  7381  00389E  2A22               	incf	_Green_Led_Counter+1,f,c
  7382                           
  7383                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  7384  0038A0  0EE8               	movlw	232
  7385  0038A2  5C21               	subwf	_Green_Led_Counter,w,c
  7386  0038A4  0E03               	movlw	3
  7387  0038A6  5822               	subwfb	_Green_Led_Counter+1,w,c
  7388  0038A8  A0D8               	btfss	status,0,c
  7389  0038AA  D004               	goto	l5119
  7390                           
  7391                           ;io.c: 69: {
  7392                           ;io.c: 70: Green_Led_Counter = 0;
  7393  0038AC  0E00               	movlw	0
  7394  0038AE  6E22               	movwf	_Green_Led_Counter+1,c
  7395  0038B0  0E00               	movlw	0
  7396  0038B2  6E21               	movwf	_Green_Led_Counter,c
  7397  0038B4                     l5119:
  7398                           
  7399                           ;io.c: 71: }
  7400                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  7401  0038B4  0EF4               	movlw	244
  7402  0038B6  5C21               	subwf	_Green_Led_Counter,w,c
  7403  0038B8  0E01               	movlw	1
  7404  0038BA  5822               	subwfb	_Green_Led_Counter+1,w,c
  7405  0038BC  A0D8               	btfss	status,0,c
  7406  0038BE  D002               	goto	l738
  7407                           
  7408                           ;io.c: 73: {
  7409                           ;io.c: 74: PORTDbits.RD6 = 1;
  7410  0038C0  8C83               	bsf	3971,6,c	;volatile
  7411                           
  7412                           ;io.c: 75: }
  7413  0038C2  0012               	return	
  7414  0038C4                     l738:
  7415                           
  7416                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  7417  0038C4  9C83               	bcf	3971,6,c	;volatile
  7418                           
  7419                           ;io.c: 80: }
  7420                           
  7421                           ;io.c: 79: default : break;
  7422                           
  7423                           ;io.c: 77: break;
  7424  0038C6  0012               	return	
  7425  0038C8                     l5125:
  7426  0038C8  5020               	movf	Green_Led@Operation,w,c
  7427                           
  7428                           ; Switch size 1, requested type "space"
  7429                           ; Number of cases is 4, Range of values is 0 to 3
  7430                           ; switch strategies available:
  7431                           ; Name         Instructions Cycles
  7432                           ; simple_byte           13     7 (average)
  7433                           ;	Chosen strategy is simple_byte
  7434  0038CA  0A00               	xorlw	0	; case 0
  7435  0038CC  B4D8               	btfsc	status,2,c
  7436  0038CE  D7CC               	goto	l729
  7437  0038D0  0A01               	xorlw	1	; case 1
  7438  0038D2  B4D8               	btfsc	status,2,c
  7439  0038D4  D7CB               	goto	l731
  7440  0038D6  0A03               	xorlw	3	; case 2
  7441  0038D8  B4D8               	btfsc	status,2,c
  7442  0038DA  D7CA               	goto	l5103
  7443  0038DC  0A01               	xorlw	1	; case 3
  7444  0038DE  A4D8               	btfss	status,2,c
  7445  0038E0  0012               	return	
  7446  0038E2  D7DC               	goto	l5113
  7447  0038E4                     __end_of_Green_Led:
  7448                           	opt stack 0
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           postinc0	equ	0xFEE
  7454                           wreg	equ	0xFE8
  7455                           postdec1	equ	0xFE5
  7456                           fsr1h	equ	0xFE2
  7457                           fsr1l	equ	0xFE1
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _Eeprom_Store *****************
  7461 ;; Defined at:
  7462 ;;		line 21 in file "../eeprom_settings.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;		None
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      void 
  7469 ;; Registers used:
  7470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0
  7477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7479 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7480 ;;Total ram usage:        0 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    4
  7483 ;; This function calls:
  7484 ;;		_GETxAPIxVAL
  7485 ;; This function is called by:
  7486 ;;		_Update_StateMchn
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text15
  7491  0035C2                     __ptext15:
  7492                           	opt stack 0
  7493  0035C2                     _Eeprom_Store:
  7494                           	opt stack 25
  7495                           
  7496                           ;eeprom_settings.c: 23: INTCON = 0x00;
  7497                           
  7498                           ;incstack = 0
  7499  0035C2  0E00               	movlw	0
  7500  0035C4  6EF2               	movwf	intcon,c	;volatile
  7501                           
  7502                           ;eeprom_settings.c: 25: EECON1bits.EEPGD = 0;
  7503  0035C6  9EA6               	bcf	4006,7,c	;volatile
  7504                           
  7505                           ;eeprom_settings.c: 26: EECON1bits.WREN = 1;
  7506  0035C8  84A6               	bsf	4006,2,c	;volatile
  7507                           
  7508                           ;eeprom_settings.c: 27: EEADR = 0x01;
  7509  0035CA  0E01               	movlw	1
  7510  0035CC  6EA9               	movwf	4009,c	;volatile
  7511                           
  7512                           ;eeprom_settings.c: 28: EEDATA = GETxAPIxVAL(23);
  7513  0035CE  0E17               	movlw	23
  7514  0035D0  EC56  F01E         	call	_GETxAPIxVAL
  7515  0035D4  0100               	movlb	0	; () banked
  7516  0035D6  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  7517  0035D8  6EA8               	movwf	4008,c	;volatile
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;eeprom_settings.c: 29: EECON2 = 0x55;
  7521  0035DA  0E55               	movlw	85
  7522  0035DC  6EA7               	movwf	4007,c	;volatile
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;eeprom_settings.c: 30: EECON2 = 0xaa;
  7526  0035DE  0EAA               	movlw	170
  7527  0035E0  6EA7               	movwf	4007,c	;volatile
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;eeprom_settings.c: 31: EECON1bits.WR = 1;
  7531  0035E2  82A6               	bsf	4006,1,c	;volatile
  7532  0035E4                     l658:
  7533  0035E4  A8A1               	btfss	4001,4,c	;volatile
  7534  0035E6  D7FE               	goto	l658
  7535                           
  7536                           ;eeprom_settings.c: 33: PIR2bits.EEIF = 0;
  7537  0035E8  98A1               	bcf	4001,4,c	;volatile
  7538                           
  7539                           ;eeprom_settings.c: 35: EECON1bits.EEPGD = 0;
  7540  0035EA  9EA6               	bcf	4006,7,c	;volatile
  7541                           
  7542                           ;eeprom_settings.c: 36: EECON1bits.WREN = 1;
  7543  0035EC  84A6               	bsf	4006,2,c	;volatile
  7544                           
  7545                           ;eeprom_settings.c: 37: EEADR = 0x00;
  7546  0035EE  0E00               	movlw	0
  7547  0035F0  6EA9               	movwf	4009,c	;volatile
  7548                           
  7549                           ;eeprom_settings.c: 38: EEDATA = GETxAPIxVAL(23)>>8;
  7550  0035F2  0E17               	movlw	23
  7551  0035F4  EC56  F01E         	call	_GETxAPIxVAL
  7552  0035F8  0100               	movlb	0	; () banked
  7553  0035FA  C091  F090         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  7554  0035FE  0100               	movlb	0	; () banked
  7555  003600  6B91               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  7556  003602  0100               	movlb	0	; () banked
  7557  003604  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  7558  003606  6EA8               	movwf	4008,c	;volatile
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;eeprom_settings.c: 39: EECON2 = 0x55;
  7562  003608  0E55               	movlw	85
  7563  00360A  6EA7               	movwf	4007,c	;volatile
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;eeprom_settings.c: 40: EECON2 = 0xaa;
  7567  00360C  0EAA               	movlw	170
  7568  00360E  6EA7               	movwf	4007,c	;volatile
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;eeprom_settings.c: 41: EECON1bits.WR = 1;
  7572  003610  82A6               	bsf	4006,1,c	;volatile
  7573  003612                     l661:
  7574  003612  A8A1               	btfss	4001,4,c	;volatile
  7575  003614  D7FE               	goto	l661
  7576                           
  7577                           ;eeprom_settings.c: 43: PIR2bits.EEIF = 0;
  7578  003616  98A1               	bcf	4001,4,c	;volatile
  7579                           
  7580                           ;eeprom_settings.c: 45: EECON1bits.EEPGD = 0;
  7581  003618  9EA6               	bcf	4006,7,c	;volatile
  7582                           
  7583                           ;eeprom_settings.c: 46: EECON1bits.WREN = 1;
  7584  00361A  84A6               	bsf	4006,2,c	;volatile
  7585                           
  7586                           ;eeprom_settings.c: 47: EEADR = 0x03;
  7587  00361C  0E03               	movlw	3
  7588  00361E  6EA9               	movwf	4009,c	;volatile
  7589                           
  7590                           ;eeprom_settings.c: 48: EEDATA = GETxAPIxVAL(24);
  7591  003620  0E18               	movlw	24
  7592  003622  EC56  F01E         	call	_GETxAPIxVAL
  7593  003626  0100               	movlb	0	; () banked
  7594  003628  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  7595  00362A  6EA8               	movwf	4008,c	;volatile
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;eeprom_settings.c: 49: EECON2 = 0x55;
  7599  00362C  0E55               	movlw	85
  7600  00362E  6EA7               	movwf	4007,c	;volatile
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;eeprom_settings.c: 50: EECON2 = 0xaa;
  7604  003630  0EAA               	movlw	170
  7605  003632  6EA7               	movwf	4007,c	;volatile
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;eeprom_settings.c: 51: EECON1bits.WR = 1;
  7609  003634  82A6               	bsf	4006,1,c	;volatile
  7610  003636                     l664:
  7611  003636  A8A1               	btfss	4001,4,c	;volatile
  7612  003638  D7FE               	goto	l664
  7613                           
  7614                           ;eeprom_settings.c: 53: PIR2bits.EEIF = 0;
  7615  00363A  98A1               	bcf	4001,4,c	;volatile
  7616                           
  7617                           ;eeprom_settings.c: 55: EECON1bits.EEPGD = 0;
  7618  00363C  9EA6               	bcf	4006,7,c	;volatile
  7619                           
  7620                           ;eeprom_settings.c: 56: EECON1bits.WREN = 1;
  7621  00363E  84A6               	bsf	4006,2,c	;volatile
  7622                           
  7623                           ;eeprom_settings.c: 57: EEADR = 0x02;
  7624  003640  0E02               	movlw	2
  7625  003642  6EA9               	movwf	4009,c	;volatile
  7626                           
  7627                           ;eeprom_settings.c: 58: EEDATA = GETxAPIxVAL(24)>>8;
  7628  003644  0E18               	movlw	24
  7629  003646  EC56  F01E         	call	_GETxAPIxVAL
  7630  00364A  0100               	movlb	0	; () banked
  7631  00364C  C091  F090         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  7632  003650  0100               	movlb	0	; () banked
  7633  003652  6B91               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  7634  003654  0100               	movlb	0	; () banked
  7635  003656  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  7636  003658  6EA8               	movwf	4008,c	;volatile
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;eeprom_settings.c: 59: EECON2 = 0x55;
  7640  00365A  0E55               	movlw	85
  7641  00365C  6EA7               	movwf	4007,c	;volatile
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;eeprom_settings.c: 60: EECON2 = 0xaa;
  7645  00365E  0EAA               	movlw	170
  7646  003660  6EA7               	movwf	4007,c	;volatile
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;eeprom_settings.c: 61: EECON1bits.WR = 1;
  7650  003662  82A6               	bsf	4006,1,c	;volatile
  7651  003664                     l667:
  7652  003664  A8A1               	btfss	4001,4,c	;volatile
  7653  003666  D7FE               	goto	l667
  7654                           
  7655                           ;eeprom_settings.c: 63: PIR2bits.EEIF = 0;
  7656  003668  98A1               	bcf	4001,4,c	;volatile
  7657                           
  7658                           ;eeprom_settings.c: 65: EECON1bits.EEPGD = 0;
  7659  00366A  9EA6               	bcf	4006,7,c	;volatile
  7660                           
  7661                           ;eeprom_settings.c: 66: EECON1bits.WREN = 1;
  7662  00366C  84A6               	bsf	4006,2,c	;volatile
  7663                           
  7664                           ;eeprom_settings.c: 67: EEADR = 0x04;
  7665  00366E  0E04               	movlw	4
  7666  003670  6EA9               	movwf	4009,c	;volatile
  7667                           
  7668                           ;eeprom_settings.c: 68: EEDATA = GETxAPIxVAL(25);
  7669  003672  0E19               	movlw	25
  7670  003674  EC56  F01E         	call	_GETxAPIxVAL
  7671  003678  0100               	movlb	0	; () banked
  7672  00367A  5190               	movf	?_GETxAPIxVAL& (0+255),w,b
  7673  00367C  6EA8               	movwf	4008,c	;volatile
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;eeprom_settings.c: 69: EECON2 = 0x55;
  7677  00367E  0E55               	movlw	85
  7678  003680  6EA7               	movwf	4007,c	;volatile
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;eeprom_settings.c: 70: EECON2 = 0xaa;
  7682  003682  0EAA               	movlw	170
  7683  003684  6EA7               	movwf	4007,c	;volatile
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;eeprom_settings.c: 71: EECON1bits.WR = 1;
  7687  003686  82A6               	bsf	4006,1,c	;volatile
  7688  003688                     l670:
  7689  003688  A8A1               	btfss	4001,4,c	;volatile
  7690  00368A  D7FE               	goto	l670
  7691                           
  7692                           ;eeprom_settings.c: 73: PIR2bits.EEIF = 0;
  7693  00368C  98A1               	bcf	4001,4,c	;volatile
  7694                           
  7695                           ;eeprom_settings.c: 76: INTCON = 0xA0;
  7696  00368E  0EA0               	movlw	160
  7697  003690  6EF2               	movwf	intcon,c	;volatile
  7698  003692  0012               	return		;funcret
  7699  003694                     __end_of_Eeprom_Store:
  7700                           	opt stack 0
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           intcon	equ	0xFF2
  7706                           postinc0	equ	0xFEE
  7707                           wreg	equ	0xFE8
  7708                           postdec1	equ	0xFE5
  7709                           fsr1h	equ	0xFE2
  7710                           fsr1l	equ	0xFE1
  7711                           status	equ	0xFD8
  7712                           
  7713 ;; *************** function _Debounce_Inputs *****************
  7714 ;; Defined at:
  7715 ;;		line 148 in file "../io.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;		None
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;		None
  7720 ;; Return value:  Size  Location     Type
  7721 ;;                  1    wreg      void 
  7722 ;; Registers used:
  7723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7724 ;; Tracked objects:
  7725 ;;		On entry : 0/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7729 ;;      Params:         0       0       0       0       0       0       0       0       0
  7730 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7731 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7732 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7733 ;;Total ram usage:        2 bytes
  7734 ;; Hardware stack levels used:    1
  7735 ;; Hardware stack levels required when called:    7
  7736 ;; This function calls:
  7737 ;;		_GETxAPIxVAL
  7738 ;;		_SETxAPIxVAL
  7739 ;;		_SetDCPWM1
  7740 ;; This function is called by:
  7741 ;;		_Update_StateMchn
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text16
  7746  001418                     __ptext16:
  7747                           	opt stack 0
  7748  001418                     _Debounce_Inputs:
  7749                           	opt stack 22
  7750                           
  7751                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  7752                           
  7753                           ;incstack = 0
  7754  001418  0E40               	movlw	64
  7755  00141A  EC56  F01E         	call	_GETxAPIxVAL
  7756  00141E  0100               	movlb	0	; () banked
  7757  001420  4790               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7758  001422  0100               	movlb	0	; () banked
  7759  001424  4790               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7760  001426  0100               	movlb	0	; () banked
  7761  001428  4790               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7762  00142A  5080               	movf	3968,w,c	;volatile
  7763  00142C  0100               	movlb	0	; () banked
  7764  00142E  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7765  001430  0BF7               	andlw	-9
  7766  001432  0100               	movlb	0	; () banked
  7767  001434  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7768  001436  6E80               	movwf	3968,c	;volatile
  7769                           
  7770                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  7771  001438  0E41               	movlw	65
  7772  00143A  EC56  F01E         	call	_GETxAPIxVAL
  7773  00143E  0100               	movlb	0	; () banked
  7774  001440  4790               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7775  001442  0100               	movlb	0	; () banked
  7776  001444  4790               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7777  001446  5080               	movf	3968,w,c	;volatile
  7778  001448  0100               	movlb	0	; () banked
  7779  00144A  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7780  00144C  0BFB               	andlw	-5
  7781  00144E  0100               	movlb	0	; () banked
  7782  001450  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7783  001452  6E80               	movwf	3968,c	;volatile
  7784                           
  7785                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  7786  001454  0E42               	movlw	66
  7787  001456  EC56  F01E         	call	_GETxAPIxVAL
  7788  00145A  0100               	movlb	0	; () banked
  7789  00145C  4790               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7790  00145E  5080               	movf	3968,w,c	;volatile
  7791  001460  0100               	movlb	0	; () banked
  7792  001462  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7793  001464  0BFD               	andlw	-3
  7794  001466  0100               	movlb	0	; () banked
  7795  001468  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7796  00146A  6E80               	movwf	3968,c	;volatile
  7797                           
  7798                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  7799  00146C  0E43               	movlw	67
  7800  00146E  EC56  F01E         	call	_GETxAPIxVAL
  7801  001472  5080               	movf	3968,w,c	;volatile
  7802  001474  0100               	movlb	0	; () banked
  7803  001476  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7804  001478  0BFE               	andlw	-2
  7805  00147A  0100               	movlb	0	; () banked
  7806  00147C  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7807  00147E  6E80               	movwf	3968,c	;volatile
  7808                           
  7809                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  7810  001480  0E45               	movlw	69
  7811  001482  EC56  F01E         	call	_GETxAPIxVAL
  7812  001486  5082               	movf	3970,w,c	;volatile
  7813  001488  0100               	movlb	0	; () banked
  7814  00148A  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7815  00148C  0BFE               	andlw	-2
  7816  00148E  0100               	movlb	0	; () banked
  7817  001490  1990               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7818  001492  6E82               	movwf	3970,c	;volatile
  7819                           
  7820                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(68));
  7821  001494  0E44               	movlw	68
  7822  001496  EC56  F01E         	call	_GETxAPIxVAL
  7823  00149A  C090  F092         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  7824  00149E  C091  F093         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  7825  0014A2  EC99  F01D         	call	_SetDCPWM1	;wreg free
  7826                           
  7827                           ;io.c: 157: switch(PORTDbits.RD1)
  7828  0014A6  D02A               	goto	l7303
  7829  0014A8                     l7285:
  7830  0014A8  502D               	movf	_Reed_Contact_LF_Counter,w,c
  7831  0014AA  B4D8               	btfsc	status,2,c
  7832  0014AC  D002               	goto	l7291
  7833                           
  7834                           ;io.c: 160: {
  7835                           ;io.c: 161: Reed_Contact_LF_Counter--;
  7836  0014AE  062D               	decf	_Reed_Contact_LF_Counter,f,c
  7837                           
  7838                           ;io.c: 163: }
  7839                           
  7840                           ;io.c: 162: break;
  7841  0014B0  D05B               	goto	l7323
  7842  0014B2                     l7291:
  7843                           
  7844                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  7845  0014B2  0E00               	movlw	0
  7846  0014B4  0100               	movlb	0	; () banked
  7847  0014B6  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7848  0014B8  0E00               	movlw	0
  7849  0014BA  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7850  0014BC  0E1F               	movlw	31
  7851  0014BE  EC49  F01D         	call	_SETxAPIxVAL
  7852                           
  7853                           ;io.c: 165: break;
  7854  0014C2  D052               	goto	l7323
  7855  0014C4                     l7293:
  7856  0014C4  502D               	movf	_Reed_Contact_LF_Counter,w,c
  7857  0014C6  0100               	movlb	0	; () banked
  7858  0014C8  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  7859  0014CA  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7860  0014CC  0E1B               	movlw	27
  7861  0014CE  EC56  F01E         	call	_GETxAPIxVAL
  7862  0014D2  0100               	movlb	0	; () banked
  7863  0014D4  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  7864  0014D6  0100               	movlb	0	; () banked
  7865  0014D8  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7866  0014DA  0100               	movlb	0	; () banked
  7867  0014DC  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7868  0014DE  0100               	movlb	0	; () banked
  7869  0014E0  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7870  0014E2  A0D8               	btfss	status,0,c
  7871  0014E4  D002               	goto	l7299
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;io.c: 168: {
  7875                           ;io.c: 169: Reed_Contact_LF_Counter++;
  7876  0014E6  2A2D               	incf	_Reed_Contact_LF_Counter,f,c
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;io.c: 171: }
  7880                           
  7881                           ;io.c: 170: break;
  7882  0014E8  D03F               	goto	l7323
  7883  0014EA                     l7299:
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  7887  0014EA  0E00               	movlw	0
  7888  0014EC  0100               	movlb	0	; () banked
  7889  0014EE  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7890  0014F0  0E01               	movlw	1
  7891  0014F2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7892  0014F4  0E1F               	movlw	31
  7893  0014F6  EC49  F01D         	call	_SETxAPIxVAL
  7894                           
  7895                           ;io.c: 176: }
  7896                           
  7897                           ;io.c: 175: default : break;
  7898                           
  7899                           ;io.c: 173: break;
  7900  0014FA  D036               	goto	l7323
  7901  0014FC                     l7303:
  7902  0014FC  A283               	btfss	3971,1,c	;volatile
  7903  0014FE  D002               	goto	u6830
  7904  001500  0E01               	movlw	1
  7905  001502  D001               	goto	u6836
  7906  001504                     u6830:
  7907  001504  0E00               	movlw	0
  7908  001506                     u6836:
  7909                           
  7910                           ; Switch size 1, requested type "space"
  7911                           ; Number of cases is 2, Range of values is 0 to 1
  7912                           ; switch strategies available:
  7913                           ; Name         Instructions Cycles
  7914                           ; simple_byte            7     4 (average)
  7915                           ;	Chosen strategy is simple_byte
  7916  001506  0A00               	xorlw	0	; case 0
  7917  001508  B4D8               	btfsc	status,2,c
  7918  00150A  D7DC               	goto	l7293
  7919  00150C  0A01               	xorlw	1	; case 1
  7920  00150E  B4D8               	btfsc	status,2,c
  7921  001510  D7CB               	goto	l7285
  7922                           
  7923                           ;io.c: 179: switch(PORTDbits.RD0)
  7924  001512  D02A               	goto	l7323
  7925  001514                     l7305:
  7926  001514  502C               	movf	_Reed_Contact_LB_Counter,w,c
  7927  001516  B4D8               	btfsc	status,2,c
  7928  001518  D002               	goto	l7311
  7929                           
  7930                           ;io.c: 182: {
  7931                           ;io.c: 183: Reed_Contact_LB_Counter--;
  7932  00151A  062C               	decf	_Reed_Contact_LB_Counter,f,c
  7933                           
  7934                           ;io.c: 185: }
  7935                           
  7936                           ;io.c: 184: break;
  7937  00151C  D05B               	goto	l7343
  7938  00151E                     l7311:
  7939                           
  7940                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  7941  00151E  0E00               	movlw	0
  7942  001520  0100               	movlb	0	; () banked
  7943  001522  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7944  001524  0E00               	movlw	0
  7945  001526  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7946  001528  0E1E               	movlw	30
  7947  00152A  EC49  F01D         	call	_SETxAPIxVAL
  7948                           
  7949                           ;io.c: 187: break;
  7950  00152E  D052               	goto	l7343
  7951  001530                     l7313:
  7952  001530  502C               	movf	_Reed_Contact_LB_Counter,w,c
  7953  001532  0100               	movlb	0	; () banked
  7954  001534  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  7955  001536  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7956  001538  0E1B               	movlw	27
  7957  00153A  EC56  F01E         	call	_GETxAPIxVAL
  7958  00153E  0100               	movlb	0	; () banked
  7959  001540  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  7960  001542  0100               	movlb	0	; () banked
  7961  001544  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7962  001546  0100               	movlb	0	; () banked
  7963  001548  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7964  00154A  0100               	movlb	0	; () banked
  7965  00154C  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7966  00154E  A0D8               	btfss	status,0,c
  7967  001550  D002               	goto	l7319
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;io.c: 190: {
  7971                           ;io.c: 191: Reed_Contact_LB_Counter++;
  7972  001552  2A2C               	incf	_Reed_Contact_LB_Counter,f,c
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;io.c: 193: }
  7976                           
  7977                           ;io.c: 192: break;
  7978  001554  D03F               	goto	l7343
  7979  001556                     l7319:
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  7983  001556  0E00               	movlw	0
  7984  001558  0100               	movlb	0	; () banked
  7985  00155A  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7986  00155C  0E01               	movlw	1
  7987  00155E  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  7988  001560  0E1E               	movlw	30
  7989  001562  EC49  F01D         	call	_SETxAPIxVAL
  7990                           
  7991                           ;io.c: 198: }
  7992                           
  7993                           ;io.c: 197: default : break;
  7994                           
  7995                           ;io.c: 195: break;
  7996  001566  D036               	goto	l7343
  7997  001568                     l7323:
  7998  001568  A083               	btfss	3971,0,c	;volatile
  7999  00156A  D002               	goto	u6860
  8000  00156C  0E01               	movlw	1
  8001  00156E  D001               	goto	u6866
  8002  001570                     u6860:
  8003  001570  0E00               	movlw	0
  8004  001572                     u6866:
  8005                           
  8006                           ; Switch size 1, requested type "space"
  8007                           ; Number of cases is 2, Range of values is 0 to 1
  8008                           ; switch strategies available:
  8009                           ; Name         Instructions Cycles
  8010                           ; simple_byte            7     4 (average)
  8011                           ;	Chosen strategy is simple_byte
  8012  001572  0A00               	xorlw	0	; case 0
  8013  001574  B4D8               	btfsc	status,2,c
  8014  001576  D7DC               	goto	l7313
  8015  001578  0A01               	xorlw	1	; case 1
  8016  00157A  B4D8               	btfsc	status,2,c
  8017  00157C  D7CB               	goto	l7305
  8018                           
  8019                           ;io.c: 201: switch(PORTDbits.RD3)
  8020  00157E  D02A               	goto	l7343
  8021  001580                     l7325:
  8022  001580  5031               	movf	_Reed_Contact_RF_Counter,w,c
  8023  001582  B4D8               	btfsc	status,2,c
  8024  001584  D002               	goto	l7331
  8025                           
  8026                           ;io.c: 204: {
  8027                           ;io.c: 205: Reed_Contact_RF_Counter--;
  8028  001586  0631               	decf	_Reed_Contact_RF_Counter,f,c
  8029                           
  8030                           ;io.c: 207: }
  8031                           
  8032                           ;io.c: 206: break;
  8033  001588  D05B               	goto	l7363
  8034  00158A                     l7331:
  8035                           
  8036                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  8037  00158A  0E00               	movlw	0
  8038  00158C  0100               	movlb	0	; () banked
  8039  00158E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8040  001590  0E00               	movlw	0
  8041  001592  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8042  001594  0E1D               	movlw	29
  8043  001596  EC49  F01D         	call	_SETxAPIxVAL
  8044                           
  8045                           ;io.c: 209: break;
  8046  00159A  D052               	goto	l7363
  8047  00159C                     l7333:
  8048  00159C  5031               	movf	_Reed_Contact_RF_Counter,w,c
  8049  00159E  0100               	movlb	0	; () banked
  8050  0015A0  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8051  0015A2  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8052  0015A4  0E1B               	movlw	27
  8053  0015A6  EC56  F01E         	call	_GETxAPIxVAL
  8054  0015AA  0100               	movlb	0	; () banked
  8055  0015AC  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8056  0015AE  0100               	movlb	0	; () banked
  8057  0015B0  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8058  0015B2  0100               	movlb	0	; () banked
  8059  0015B4  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8060  0015B6  0100               	movlb	0	; () banked
  8061  0015B8  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8062  0015BA  A0D8               	btfss	status,0,c
  8063  0015BC  D002               	goto	l7339
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;io.c: 212: {
  8067                           ;io.c: 213: Reed_Contact_RF_Counter++;
  8068  0015BE  2A31               	incf	_Reed_Contact_RF_Counter,f,c
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;io.c: 215: }
  8072                           
  8073                           ;io.c: 214: break;
  8074  0015C0  D03F               	goto	l7363
  8075  0015C2                     l7339:
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  8079  0015C2  0E00               	movlw	0
  8080  0015C4  0100               	movlb	0	; () banked
  8081  0015C6  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8082  0015C8  0E01               	movlw	1
  8083  0015CA  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8084  0015CC  0E1D               	movlw	29
  8085  0015CE  EC49  F01D         	call	_SETxAPIxVAL
  8086                           
  8087                           ;io.c: 220: }
  8088                           
  8089                           ;io.c: 219: default : break;
  8090                           
  8091                           ;io.c: 217: break;
  8092  0015D2  D036               	goto	l7363
  8093  0015D4                     l7343:
  8094  0015D4  A683               	btfss	3971,3,c	;volatile
  8095  0015D6  D002               	goto	u6890
  8096  0015D8  0E01               	movlw	1
  8097  0015DA  D001               	goto	u6896
  8098  0015DC                     u6890:
  8099  0015DC  0E00               	movlw	0
  8100  0015DE                     u6896:
  8101                           
  8102                           ; Switch size 1, requested type "space"
  8103                           ; Number of cases is 2, Range of values is 0 to 1
  8104                           ; switch strategies available:
  8105                           ; Name         Instructions Cycles
  8106                           ; simple_byte            7     4 (average)
  8107                           ;	Chosen strategy is simple_byte
  8108  0015DE  0A00               	xorlw	0	; case 0
  8109  0015E0  B4D8               	btfsc	status,2,c
  8110  0015E2  D7DC               	goto	l7333
  8111  0015E4  0A01               	xorlw	1	; case 1
  8112  0015E6  B4D8               	btfsc	status,2,c
  8113  0015E8  D7CB               	goto	l7325
  8114                           
  8115                           ;io.c: 223: switch(PORTDbits.RD2)
  8116  0015EA  D02A               	goto	l7363
  8117  0015EC                     l7345:
  8118  0015EC  5030               	movf	_Reed_Contact_RB_Counter,w,c
  8119  0015EE  B4D8               	btfsc	status,2,c
  8120  0015F0  D002               	goto	l7351
  8121                           
  8122                           ;io.c: 226: {
  8123                           ;io.c: 227: Reed_Contact_RB_Counter--;
  8124  0015F2  0630               	decf	_Reed_Contact_RB_Counter,f,c
  8125                           
  8126                           ;io.c: 229: }
  8127                           
  8128                           ;io.c: 228: break;
  8129  0015F4  D05B               	goto	l7383
  8130  0015F6                     l7351:
  8131                           
  8132                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  8133  0015F6  0E00               	movlw	0
  8134  0015F8  0100               	movlb	0	; () banked
  8135  0015FA  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8136  0015FC  0E00               	movlw	0
  8137  0015FE  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8138  001600  0E1C               	movlw	28
  8139  001602  EC49  F01D         	call	_SETxAPIxVAL
  8140                           
  8141                           ;io.c: 231: break;
  8142  001606  D052               	goto	l7383
  8143  001608                     l7353:
  8144  001608  5030               	movf	_Reed_Contact_RB_Counter,w,c
  8145  00160A  0100               	movlb	0	; () banked
  8146  00160C  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8147  00160E  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8148  001610  0E1B               	movlw	27
  8149  001612  EC56  F01E         	call	_GETxAPIxVAL
  8150  001616  0100               	movlb	0	; () banked
  8151  001618  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8152  00161A  0100               	movlb	0	; () banked
  8153  00161C  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8154  00161E  0100               	movlb	0	; () banked
  8155  001620  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8156  001622  0100               	movlb	0	; () banked
  8157  001624  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8158  001626  A0D8               	btfss	status,0,c
  8159  001628  D002               	goto	l7359
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;io.c: 234: {
  8163                           ;io.c: 235: Reed_Contact_RB_Counter++;
  8164  00162A  2A30               	incf	_Reed_Contact_RB_Counter,f,c
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;io.c: 237: }
  8168                           
  8169                           ;io.c: 236: break;
  8170  00162C  D03F               	goto	l7383
  8171  00162E                     l7359:
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  8175  00162E  0E00               	movlw	0
  8176  001630  0100               	movlb	0	; () banked
  8177  001632  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8178  001634  0E01               	movlw	1
  8179  001636  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8180  001638  0E1C               	movlw	28
  8181  00163A  EC49  F01D         	call	_SETxAPIxVAL
  8182                           
  8183                           ;io.c: 242: }
  8184                           
  8185                           ;io.c: 241: default : break;
  8186                           
  8187                           ;io.c: 239: break;
  8188  00163E  D036               	goto	l7383
  8189  001640                     l7363:
  8190  001640  A483               	btfss	3971,2,c	;volatile
  8191  001642  D002               	goto	u6920
  8192  001644  0E01               	movlw	1
  8193  001646  D001               	goto	u6926
  8194  001648                     u6920:
  8195  001648  0E00               	movlw	0
  8196  00164A                     u6926:
  8197                           
  8198                           ; Switch size 1, requested type "space"
  8199                           ; Number of cases is 2, Range of values is 0 to 1
  8200                           ; switch strategies available:
  8201                           ; Name         Instructions Cycles
  8202                           ; simple_byte            7     4 (average)
  8203                           ;	Chosen strategy is simple_byte
  8204  00164A  0A00               	xorlw	0	; case 0
  8205  00164C  B4D8               	btfsc	status,2,c
  8206  00164E  D7DC               	goto	l7353
  8207  001650  0A01               	xorlw	1	; case 1
  8208  001652  B4D8               	btfsc	status,2,c
  8209  001654  D7CB               	goto	l7345
  8210                           
  8211                           ;io.c: 245: switch(!PORTBbits.RB0)
  8212  001656  D02A               	goto	l7383
  8213  001658                     l7365:
  8214  001658  502A               	movf	_Button_Contact_Counter_Start,w,c
  8215  00165A  0100               	movlb	0	; () banked
  8216  00165C  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8217  00165E  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8218  001660  0E1B               	movlw	27
  8219  001662  EC56  F01E         	call	_GETxAPIxVAL
  8220  001666  0100               	movlb	0	; () banked
  8221  001668  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8222  00166A  0100               	movlb	0	; () banked
  8223  00166C  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8224  00166E  0100               	movlb	0	; () banked
  8225  001670  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8226  001672  0100               	movlb	0	; () banked
  8227  001674  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8228  001676  A0D8               	btfss	status,0,c
  8229  001678  D002               	goto	l7371
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;io.c: 248: {
  8233                           ;io.c: 249: Button_Contact_Counter_Start++;
  8234  00167A  2A2A               	incf	_Button_Contact_Counter_Start,f,c
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;io.c: 251: }
  8238                           
  8239                           ;io.c: 250: break;
  8240  00167C  D057               	goto	l7403
  8241  00167E                     l7371:
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  8245  00167E  0E00               	movlw	0
  8246  001680  0100               	movlb	0	; () banked
  8247  001682  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8248  001684  0E01               	movlw	1
  8249  001686  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8250  001688  0E20               	movlw	32
  8251  00168A  EC49  F01D         	call	_SETxAPIxVAL
  8252                           
  8253                           ;io.c: 253: break;
  8254  00168E  D04E               	goto	l7403
  8255  001690                     l7373:
  8256  001690  502A               	movf	_Button_Contact_Counter_Start,w,c
  8257  001692  B4D8               	btfsc	status,2,c
  8258  001694  D002               	goto	l7379
  8259                           
  8260                           ;io.c: 256: {
  8261                           ;io.c: 257: Button_Contact_Counter_Start--;
  8262  001696  062A               	decf	_Button_Contact_Counter_Start,f,c
  8263                           
  8264                           ;io.c: 259: }
  8265                           
  8266                           ;io.c: 258: break;
  8267  001698  D049               	goto	l7403
  8268  00169A                     l7379:
  8269                           
  8270                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  8271  00169A  0E00               	movlw	0
  8272  00169C  0100               	movlb	0	; () banked
  8273  00169E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8274  0016A0  0E00               	movlw	0
  8275  0016A2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8276  0016A4  0E20               	movlw	32
  8277  0016A6  EC49  F01D         	call	_SETxAPIxVAL
  8278                           
  8279                           ;io.c: 264: }
  8280                           
  8281                           ;io.c: 263: default : break;
  8282                           
  8283                           ;io.c: 261: break;
  8284  0016AA  D040               	goto	l7403
  8285  0016AC                     l7383:
  8286  0016AC  B081               	btfsc	3969,0,c	;volatile
  8287  0016AE  D002               	goto	u6950
  8288  0016B0  0E01               	movlw	1
  8289  0016B2  D001               	goto	u6960
  8290  0016B4                     u6950:
  8291  0016B4  0E00               	movlw	0
  8292  0016B6                     u6960:
  8293  0016B6  0100               	movlb	0	; () banked
  8294  0016B8  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8295  0016BA  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8296                           
  8297                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8298                           ; Switch size 1, requested type "space"
  8299                           ; Number of cases is 1, Range of values is 0 to 0
  8300                           ; switch strategies available:
  8301                           ; Name         Instructions Cycles
  8302                           ; simple_byte            4     3 (average)
  8303                           ;	Chosen strategy is simple_byte
  8304  0016BC  0100               	movlb	0	; () banked
  8305  0016BE  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8306  0016C0  0A00               	xorlw	0	; case 0
  8307  0016C2  A4D8               	btfss	status,2,c
  8308  0016C4  D033               	goto	l7403
  8309                           
  8310                           ; BSR set to: 0
  8311                           ; Switch size 1, requested type "space"
  8312                           ; Number of cases is 2, Range of values is 0 to 1
  8313                           ; switch strategies available:
  8314                           ; Name         Instructions Cycles
  8315                           ; simple_byte            7     4 (average)
  8316                           ;	Chosen strategy is simple_byte
  8317  0016C6  0100               	movlb	0	; () banked
  8318  0016C8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8319  0016CA  0A00               	xorlw	0	; case 0
  8320  0016CC  B4D8               	btfsc	status,2,c
  8321  0016CE  D7E0               	goto	l7373
  8322  0016D0  0A01               	xorlw	1	; case 1
  8323  0016D2  B4D8               	btfsc	status,2,c
  8324  0016D4  D7C1               	goto	l7365
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;io.c: 267: switch(!PORTDbits.RD7)
  8328  0016D6  D02A               	goto	l7403
  8329  0016D8                     l7385:
  8330                           
  8331                           ; BSR set to: 0
  8332  0016D8  502B               	movf	_Button_Contact_Counter_Stop,w,c
  8333  0016DA  0100               	movlb	0	; () banked
  8334  0016DC  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8335  0016DE  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8336  0016E0  0E1B               	movlw	27
  8337  0016E2  EC56  F01E         	call	_GETxAPIxVAL
  8338  0016E6  0100               	movlb	0	; () banked
  8339  0016E8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8340  0016EA  0100               	movlb	0	; () banked
  8341  0016EC  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8342  0016EE  0100               	movlb	0	; () banked
  8343  0016F0  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8344  0016F2  0100               	movlb	0	; () banked
  8345  0016F4  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8346  0016F6  A0D8               	btfss	status,0,c
  8347  0016F8  D002               	goto	l7391
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;io.c: 270: {
  8351                           ;io.c: 271: Button_Contact_Counter_Stop++;
  8352  0016FA  2A2B               	incf	_Button_Contact_Counter_Stop,f,c
  8353                           
  8354                           ; BSR set to: 0
  8355                           ;io.c: 273: }
  8356                           
  8357                           ;io.c: 272: break;
  8358  0016FC  D057               	goto	l7423
  8359  0016FE                     l7391:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  8363  0016FE  0E00               	movlw	0
  8364  001700  0100               	movlb	0	; () banked
  8365  001702  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8366  001704  0E01               	movlw	1
  8367  001706  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8368  001708  0E21               	movlw	33
  8369  00170A  EC49  F01D         	call	_SETxAPIxVAL
  8370                           
  8371                           ;io.c: 275: break;
  8372  00170E  D04E               	goto	l7423
  8373  001710                     l7393:
  8374  001710  502B               	movf	_Button_Contact_Counter_Stop,w,c
  8375  001712  B4D8               	btfsc	status,2,c
  8376  001714  D002               	goto	l7399
  8377                           
  8378                           ;io.c: 278: {
  8379                           ;io.c: 279: Button_Contact_Counter_Stop--;
  8380  001716  062B               	decf	_Button_Contact_Counter_Stop,f,c
  8381                           
  8382                           ;io.c: 281: }
  8383                           
  8384                           ;io.c: 280: break;
  8385  001718  D049               	goto	l7423
  8386  00171A                     l7399:
  8387                           
  8388                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  8389  00171A  0E00               	movlw	0
  8390  00171C  0100               	movlb	0	; () banked
  8391  00171E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8392  001720  0E00               	movlw	0
  8393  001722  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8394  001724  0E21               	movlw	33
  8395  001726  EC49  F01D         	call	_SETxAPIxVAL
  8396                           
  8397                           ;io.c: 286: }
  8398                           
  8399                           ;io.c: 285: default : break;
  8400                           
  8401                           ;io.c: 283: break;
  8402  00172A  D040               	goto	l7423
  8403  00172C                     l7403:
  8404  00172C  BE83               	btfsc	3971,7,c	;volatile
  8405  00172E  D002               	goto	u6990
  8406  001730  0E01               	movlw	1
  8407  001732  D001               	goto	u7000
  8408  001734                     u6990:
  8409  001734  0E00               	movlw	0
  8410  001736                     u7000:
  8411  001736  0100               	movlb	0	; () banked
  8412  001738  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8413  00173A  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8414                           
  8415                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8416                           ; Switch size 1, requested type "space"
  8417                           ; Number of cases is 1, Range of values is 0 to 0
  8418                           ; switch strategies available:
  8419                           ; Name         Instructions Cycles
  8420                           ; simple_byte            4     3 (average)
  8421                           ;	Chosen strategy is simple_byte
  8422  00173C  0100               	movlb	0	; () banked
  8423  00173E  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8424  001740  0A00               	xorlw	0	; case 0
  8425  001742  A4D8               	btfss	status,2,c
  8426  001744  D033               	goto	l7423
  8427                           
  8428                           ; BSR set to: 0
  8429                           ; Switch size 1, requested type "space"
  8430                           ; Number of cases is 2, Range of values is 0 to 1
  8431                           ; switch strategies available:
  8432                           ; Name         Instructions Cycles
  8433                           ; simple_byte            7     4 (average)
  8434                           ;	Chosen strategy is simple_byte
  8435  001746  0100               	movlb	0	; () banked
  8436  001748  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8437  00174A  0A00               	xorlw	0	; case 0
  8438  00174C  B4D8               	btfsc	status,2,c
  8439  00174E  D7E0               	goto	l7393
  8440  001750  0A01               	xorlw	1	; case 1
  8441  001752  B4D8               	btfsc	status,2,c
  8442  001754  D7C1               	goto	l7385
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;io.c: 289: switch(!PORTBbits.RB1)
  8446  001756  D02A               	goto	l7423
  8447  001758                     l7405:
  8448                           
  8449                           ; BSR set to: 0
  8450  001758  5027               	movf	_Button_Contact_Counter_Middle,w,c
  8451  00175A  0100               	movlb	0	; () banked
  8452  00175C  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8453  00175E  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8454  001760  0E1B               	movlw	27
  8455  001762  EC56  F01E         	call	_GETxAPIxVAL
  8456  001766  0100               	movlb	0	; () banked
  8457  001768  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8458  00176A  0100               	movlb	0	; () banked
  8459  00176C  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8460  00176E  0100               	movlb	0	; () banked
  8461  001770  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8462  001772  0100               	movlb	0	; () banked
  8463  001774  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8464  001776  A0D8               	btfss	status,0,c
  8465  001778  D002               	goto	l7411
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;io.c: 292: {
  8469                           ;io.c: 293: Button_Contact_Counter_Middle++;
  8470  00177A  2A27               	incf	_Button_Contact_Counter_Middle,f,c
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;io.c: 295: }
  8474                           
  8475                           ;io.c: 294: break;
  8476  00177C  D057               	goto	l7443
  8477  00177E                     l7411:
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  8481  00177E  0E00               	movlw	0
  8482  001780  0100               	movlb	0	; () banked
  8483  001782  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8484  001784  0E01               	movlw	1
  8485  001786  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8486  001788  0E22               	movlw	34
  8487  00178A  EC49  F01D         	call	_SETxAPIxVAL
  8488                           
  8489                           ;io.c: 297: break;
  8490  00178E  D04E               	goto	l7443
  8491  001790                     l7413:
  8492  001790  5027               	movf	_Button_Contact_Counter_Middle,w,c
  8493  001792  B4D8               	btfsc	status,2,c
  8494  001794  D002               	goto	l7419
  8495                           
  8496                           ;io.c: 300: {
  8497                           ;io.c: 301: Button_Contact_Counter_Middle--;
  8498  001796  0627               	decf	_Button_Contact_Counter_Middle,f,c
  8499                           
  8500                           ;io.c: 303: }
  8501                           
  8502                           ;io.c: 302: break;
  8503  001798  D049               	goto	l7443
  8504  00179A                     l7419:
  8505                           
  8506                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  8507  00179A  0E00               	movlw	0
  8508  00179C  0100               	movlb	0	; () banked
  8509  00179E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8510  0017A0  0E00               	movlw	0
  8511  0017A2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8512  0017A4  0E22               	movlw	34
  8513  0017A6  EC49  F01D         	call	_SETxAPIxVAL
  8514                           
  8515                           ;io.c: 308: }
  8516                           
  8517                           ;io.c: 307: default : break;
  8518                           
  8519                           ;io.c: 305: break;
  8520  0017AA  D040               	goto	l7443
  8521  0017AC                     l7423:
  8522  0017AC  B281               	btfsc	3969,1,c	;volatile
  8523  0017AE  D002               	goto	u7030
  8524  0017B0  0E01               	movlw	1
  8525  0017B2  D001               	goto	u7040
  8526  0017B4                     u7030:
  8527  0017B4  0E00               	movlw	0
  8528  0017B6                     u7040:
  8529  0017B6  0100               	movlb	0	; () banked
  8530  0017B8  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8531  0017BA  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8532                           
  8533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8534                           ; Switch size 1, requested type "space"
  8535                           ; Number of cases is 1, Range of values is 0 to 0
  8536                           ; switch strategies available:
  8537                           ; Name         Instructions Cycles
  8538                           ; simple_byte            4     3 (average)
  8539                           ;	Chosen strategy is simple_byte
  8540  0017BC  0100               	movlb	0	; () banked
  8541  0017BE  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8542  0017C0  0A00               	xorlw	0	; case 0
  8543  0017C2  A4D8               	btfss	status,2,c
  8544  0017C4  D033               	goto	l7443
  8545                           
  8546                           ; BSR set to: 0
  8547                           ; Switch size 1, requested type "space"
  8548                           ; Number of cases is 2, Range of values is 0 to 1
  8549                           ; switch strategies available:
  8550                           ; Name         Instructions Cycles
  8551                           ; simple_byte            7     4 (average)
  8552                           ;	Chosen strategy is simple_byte
  8553  0017C6  0100               	movlb	0	; () banked
  8554  0017C8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8555  0017CA  0A00               	xorlw	0	; case 0
  8556  0017CC  B4D8               	btfsc	status,2,c
  8557  0017CE  D7E0               	goto	l7413
  8558  0017D0  0A01               	xorlw	1	; case 1
  8559  0017D2  B4D8               	btfsc	status,2,c
  8560  0017D4  D7C1               	goto	l7405
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;io.c: 311: switch(!PORTBbits.RB5)
  8564  0017D6  D02A               	goto	l7443
  8565  0017D8                     l7425:
  8566                           
  8567                           ; BSR set to: 0
  8568  0017D8  5025               	movf	_Button_Contact_Counter_LB,w,c
  8569  0017DA  0100               	movlb	0	; () banked
  8570  0017DC  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8571  0017DE  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8572  0017E0  0E1B               	movlw	27
  8573  0017E2  EC56  F01E         	call	_GETxAPIxVAL
  8574  0017E6  0100               	movlb	0	; () banked
  8575  0017E8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8576  0017EA  0100               	movlb	0	; () banked
  8577  0017EC  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8578  0017EE  0100               	movlb	0	; () banked
  8579  0017F0  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8580  0017F2  0100               	movlb	0	; () banked
  8581  0017F4  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8582  0017F6  A0D8               	btfss	status,0,c
  8583  0017F8  D002               	goto	l7431
  8584                           
  8585                           ; BSR set to: 0
  8586                           ;io.c: 314: {
  8587                           ;io.c: 315: Button_Contact_Counter_LB++;
  8588  0017FA  2A25               	incf	_Button_Contact_Counter_LB,f,c
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;io.c: 317: }
  8592                           
  8593                           ;io.c: 316: break;
  8594  0017FC  D057               	goto	l7463
  8595  0017FE                     l7431:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  8599  0017FE  0E00               	movlw	0
  8600  001800  0100               	movlb	0	; () banked
  8601  001802  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8602  001804  0E01               	movlw	1
  8603  001806  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8604  001808  0E23               	movlw	35
  8605  00180A  EC49  F01D         	call	_SETxAPIxVAL
  8606                           
  8607                           ;io.c: 319: break;
  8608  00180E  D04E               	goto	l7463
  8609  001810                     l7433:
  8610  001810  5025               	movf	_Button_Contact_Counter_LB,w,c
  8611  001812  B4D8               	btfsc	status,2,c
  8612  001814  D002               	goto	l7439
  8613                           
  8614                           ;io.c: 322: {
  8615                           ;io.c: 323: Button_Contact_Counter_LB--;
  8616  001816  0625               	decf	_Button_Contact_Counter_LB,f,c
  8617                           
  8618                           ;io.c: 325: }
  8619                           
  8620                           ;io.c: 324: break;
  8621  001818  D049               	goto	l7463
  8622  00181A                     l7439:
  8623                           
  8624                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  8625  00181A  0E00               	movlw	0
  8626  00181C  0100               	movlb	0	; () banked
  8627  00181E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8628  001820  0E00               	movlw	0
  8629  001822  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8630  001824  0E23               	movlw	35
  8631  001826  EC49  F01D         	call	_SETxAPIxVAL
  8632                           
  8633                           ;io.c: 330: }
  8634                           
  8635                           ;io.c: 329: default : break;
  8636                           
  8637                           ;io.c: 327: break;
  8638  00182A  D040               	goto	l7463
  8639  00182C                     l7443:
  8640  00182C  BA81               	btfsc	3969,5,c	;volatile
  8641  00182E  D002               	goto	u7070
  8642  001830  0E01               	movlw	1
  8643  001832  D001               	goto	u7080
  8644  001834                     u7070:
  8645  001834  0E00               	movlw	0
  8646  001836                     u7080:
  8647  001836  0100               	movlb	0	; () banked
  8648  001838  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8649  00183A  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8650                           
  8651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8652                           ; Switch size 1, requested type "space"
  8653                           ; Number of cases is 1, Range of values is 0 to 0
  8654                           ; switch strategies available:
  8655                           ; Name         Instructions Cycles
  8656                           ; simple_byte            4     3 (average)
  8657                           ;	Chosen strategy is simple_byte
  8658  00183C  0100               	movlb	0	; () banked
  8659  00183E  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8660  001840  0A00               	xorlw	0	; case 0
  8661  001842  A4D8               	btfss	status,2,c
  8662  001844  D033               	goto	l7463
  8663                           
  8664                           ; BSR set to: 0
  8665                           ; Switch size 1, requested type "space"
  8666                           ; Number of cases is 2, Range of values is 0 to 1
  8667                           ; switch strategies available:
  8668                           ; Name         Instructions Cycles
  8669                           ; simple_byte            7     4 (average)
  8670                           ;	Chosen strategy is simple_byte
  8671  001846  0100               	movlb	0	; () banked
  8672  001848  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8673  00184A  0A00               	xorlw	0	; case 0
  8674  00184C  B4D8               	btfsc	status,2,c
  8675  00184E  D7E0               	goto	l7433
  8676  001850  0A01               	xorlw	1	; case 1
  8677  001852  B4D8               	btfsc	status,2,c
  8678  001854  D7C1               	goto	l7425
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;io.c: 333: switch(!PORTBbits.RB4)
  8682  001856  D02A               	goto	l7463
  8683  001858                     l7445:
  8684                           
  8685                           ; BSR set to: 0
  8686  001858  5026               	movf	_Button_Contact_Counter_LF,w,c
  8687  00185A  0100               	movlb	0	; () banked
  8688  00185C  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8689  00185E  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8690  001860  0E1B               	movlw	27
  8691  001862  EC56  F01E         	call	_GETxAPIxVAL
  8692  001866  0100               	movlb	0	; () banked
  8693  001868  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8694  00186A  0100               	movlb	0	; () banked
  8695  00186C  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8696  00186E  0100               	movlb	0	; () banked
  8697  001870  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8698  001872  0100               	movlb	0	; () banked
  8699  001874  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8700  001876  A0D8               	btfss	status,0,c
  8701  001878  D002               	goto	l7451
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;io.c: 336: {
  8705                           ;io.c: 337: Button_Contact_Counter_LF++;
  8706  00187A  2A26               	incf	_Button_Contact_Counter_LF,f,c
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;io.c: 339: }
  8710                           
  8711                           ;io.c: 338: break;
  8712  00187C  D057               	goto	l7483
  8713  00187E                     l7451:
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  8717  00187E  0E00               	movlw	0
  8718  001880  0100               	movlb	0	; () banked
  8719  001882  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8720  001884  0E01               	movlw	1
  8721  001886  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8722  001888  0E24               	movlw	36
  8723  00188A  EC49  F01D         	call	_SETxAPIxVAL
  8724                           
  8725                           ;io.c: 341: break;
  8726  00188E  D04E               	goto	l7483
  8727  001890                     l7453:
  8728  001890  5026               	movf	_Button_Contact_Counter_LF,w,c
  8729  001892  B4D8               	btfsc	status,2,c
  8730  001894  D002               	goto	l7459
  8731                           
  8732                           ;io.c: 344: {
  8733                           ;io.c: 345: Button_Contact_Counter_LF--;
  8734  001896  0626               	decf	_Button_Contact_Counter_LF,f,c
  8735                           
  8736                           ;io.c: 347: }
  8737                           
  8738                           ;io.c: 346: break;
  8739  001898  D049               	goto	l7483
  8740  00189A                     l7459:
  8741                           
  8742                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  8743  00189A  0E00               	movlw	0
  8744  00189C  0100               	movlb	0	; () banked
  8745  00189E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8746  0018A0  0E00               	movlw	0
  8747  0018A2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8748  0018A4  0E24               	movlw	36
  8749  0018A6  EC49  F01D         	call	_SETxAPIxVAL
  8750                           
  8751                           ;io.c: 352: }
  8752                           
  8753                           ;io.c: 351: default : break;
  8754                           
  8755                           ;io.c: 349: break;
  8756  0018AA  D040               	goto	l7483
  8757  0018AC                     l7463:
  8758  0018AC  B881               	btfsc	3969,4,c	;volatile
  8759  0018AE  D002               	goto	u7110
  8760  0018B0  0E01               	movlw	1
  8761  0018B2  D001               	goto	u7120
  8762  0018B4                     u7110:
  8763  0018B4  0E00               	movlw	0
  8764  0018B6                     u7120:
  8765  0018B6  0100               	movlb	0	; () banked
  8766  0018B8  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8767  0018BA  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8768                           
  8769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8770                           ; Switch size 1, requested type "space"
  8771                           ; Number of cases is 1, Range of values is 0 to 0
  8772                           ; switch strategies available:
  8773                           ; Name         Instructions Cycles
  8774                           ; simple_byte            4     3 (average)
  8775                           ;	Chosen strategy is simple_byte
  8776  0018BC  0100               	movlb	0	; () banked
  8777  0018BE  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8778  0018C0  0A00               	xorlw	0	; case 0
  8779  0018C2  A4D8               	btfss	status,2,c
  8780  0018C4  D033               	goto	l7483
  8781                           
  8782                           ; BSR set to: 0
  8783                           ; Switch size 1, requested type "space"
  8784                           ; Number of cases is 2, Range of values is 0 to 1
  8785                           ; switch strategies available:
  8786                           ; Name         Instructions Cycles
  8787                           ; simple_byte            7     4 (average)
  8788                           ;	Chosen strategy is simple_byte
  8789  0018C6  0100               	movlb	0	; () banked
  8790  0018C8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8791  0018CA  0A00               	xorlw	0	; case 0
  8792  0018CC  B4D8               	btfsc	status,2,c
  8793  0018CE  D7E0               	goto	l7453
  8794  0018D0  0A01               	xorlw	1	; case 1
  8795  0018D2  B4D8               	btfsc	status,2,c
  8796  0018D4  D7C1               	goto	l7445
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;io.c: 355: switch(!PORTBbits.RB3)
  8800  0018D6  D02A               	goto	l7483
  8801  0018D8                     l7465:
  8802                           
  8803                           ; BSR set to: 0
  8804  0018D8  5028               	movf	_Button_Contact_Counter_RB,w,c
  8805  0018DA  0100               	movlb	0	; () banked
  8806  0018DC  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8807  0018DE  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8808  0018E0  0E1B               	movlw	27
  8809  0018E2  EC56  F01E         	call	_GETxAPIxVAL
  8810  0018E6  0100               	movlb	0	; () banked
  8811  0018E8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8812  0018EA  0100               	movlb	0	; () banked
  8813  0018EC  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8814  0018EE  0100               	movlb	0	; () banked
  8815  0018F0  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8816  0018F2  0100               	movlb	0	; () banked
  8817  0018F4  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8818  0018F6  A0D8               	btfss	status,0,c
  8819  0018F8  D002               	goto	l7471
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;io.c: 358: {
  8823                           ;io.c: 359: Button_Contact_Counter_RB++;
  8824  0018FA  2A28               	incf	_Button_Contact_Counter_RB,f,c
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;io.c: 361: }
  8828                           
  8829                           ;io.c: 360: break;
  8830  0018FC  D057               	goto	l7503
  8831  0018FE                     l7471:
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  8835  0018FE  0E00               	movlw	0
  8836  001900  0100               	movlb	0	; () banked
  8837  001902  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8838  001904  0E01               	movlw	1
  8839  001906  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8840  001908  0E25               	movlw	37
  8841  00190A  EC49  F01D         	call	_SETxAPIxVAL
  8842                           
  8843                           ;io.c: 363: break;
  8844  00190E  D04E               	goto	l7503
  8845  001910                     l7473:
  8846  001910  5028               	movf	_Button_Contact_Counter_RB,w,c
  8847  001912  B4D8               	btfsc	status,2,c
  8848  001914  D002               	goto	l7479
  8849                           
  8850                           ;io.c: 366: {
  8851                           ;io.c: 367: Button_Contact_Counter_RB--;
  8852  001916  0628               	decf	_Button_Contact_Counter_RB,f,c
  8853                           
  8854                           ;io.c: 369: }
  8855                           
  8856                           ;io.c: 368: break;
  8857  001918  D049               	goto	l7503
  8858  00191A                     l7479:
  8859                           
  8860                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  8861  00191A  0E00               	movlw	0
  8862  00191C  0100               	movlb	0	; () banked
  8863  00191E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8864  001920  0E00               	movlw	0
  8865  001922  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8866  001924  0E25               	movlw	37
  8867  001926  EC49  F01D         	call	_SETxAPIxVAL
  8868                           
  8869                           ;io.c: 374: }
  8870                           
  8871                           ;io.c: 373: default : break;
  8872                           
  8873                           ;io.c: 371: break;
  8874  00192A  D040               	goto	l7503
  8875  00192C                     l7483:
  8876  00192C  B681               	btfsc	3969,3,c	;volatile
  8877  00192E  D002               	goto	u7150
  8878  001930  0E01               	movlw	1
  8879  001932  D001               	goto	u7160
  8880  001934                     u7150:
  8881  001934  0E00               	movlw	0
  8882  001936                     u7160:
  8883  001936  0100               	movlb	0	; () banked
  8884  001938  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8885  00193A  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8886                           
  8887                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8888                           ; Switch size 1, requested type "space"
  8889                           ; Number of cases is 1, Range of values is 0 to 0
  8890                           ; switch strategies available:
  8891                           ; Name         Instructions Cycles
  8892                           ; simple_byte            4     3 (average)
  8893                           ;	Chosen strategy is simple_byte
  8894  00193C  0100               	movlb	0	; () banked
  8895  00193E  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8896  001940  0A00               	xorlw	0	; case 0
  8897  001942  A4D8               	btfss	status,2,c
  8898  001944  D033               	goto	l7503
  8899                           
  8900                           ; BSR set to: 0
  8901                           ; Switch size 1, requested type "space"
  8902                           ; Number of cases is 2, Range of values is 0 to 1
  8903                           ; switch strategies available:
  8904                           ; Name         Instructions Cycles
  8905                           ; simple_byte            7     4 (average)
  8906                           ;	Chosen strategy is simple_byte
  8907  001946  0100               	movlb	0	; () banked
  8908  001948  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8909  00194A  0A00               	xorlw	0	; case 0
  8910  00194C  B4D8               	btfsc	status,2,c
  8911  00194E  D7E0               	goto	l7473
  8912  001950  0A01               	xorlw	1	; case 1
  8913  001952  B4D8               	btfsc	status,2,c
  8914  001954  D7C1               	goto	l7465
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;io.c: 377: switch(!PORTBbits.RB2)
  8918  001956  D02A               	goto	l7503
  8919  001958                     l7485:
  8920                           
  8921                           ; BSR set to: 0
  8922  001958  5029               	movf	_Button_Contact_Counter_RF,w,c
  8923  00195A  0100               	movlb	0	; () banked
  8924  00195C  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  8925  00195E  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8926  001960  0E1B               	movlw	27
  8927  001962  EC56  F01E         	call	_GETxAPIxVAL
  8928  001966  0100               	movlb	0	; () banked
  8929  001968  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  8930  00196A  0100               	movlb	0	; () banked
  8931  00196C  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8932  00196E  0100               	movlb	0	; () banked
  8933  001970  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8934  001972  0100               	movlb	0	; () banked
  8935  001974  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8936  001976  A0D8               	btfss	status,0,c
  8937  001978  D002               	goto	l7491
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;io.c: 380: {
  8941                           ;io.c: 381: Button_Contact_Counter_RF++;
  8942  00197A  2A29               	incf	_Button_Contact_Counter_RF,f,c
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;io.c: 383: }
  8946                           
  8947                           ;io.c: 382: break;
  8948  00197C  D057               	goto	l7523
  8949  00197E                     l7491:
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  8953  00197E  0E00               	movlw	0
  8954  001980  0100               	movlb	0	; () banked
  8955  001982  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8956  001984  0E01               	movlw	1
  8957  001986  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8958  001988  0E26               	movlw	38
  8959  00198A  EC49  F01D         	call	_SETxAPIxVAL
  8960                           
  8961                           ;io.c: 385: break;
  8962  00198E  D04E               	goto	l7523
  8963  001990                     l7493:
  8964  001990  5029               	movf	_Button_Contact_Counter_RF,w,c
  8965  001992  B4D8               	btfsc	status,2,c
  8966  001994  D002               	goto	l7499
  8967                           
  8968                           ;io.c: 388: {
  8969                           ;io.c: 389: Button_Contact_Counter_RF--;
  8970  001996  0629               	decf	_Button_Contact_Counter_RF,f,c
  8971                           
  8972                           ;io.c: 391: }
  8973                           
  8974                           ;io.c: 390: break;
  8975  001998  D049               	goto	l7523
  8976  00199A                     l7499:
  8977                           
  8978                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  8979  00199A  0E00               	movlw	0
  8980  00199C  0100               	movlb	0	; () banked
  8981  00199E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8982  0019A0  0E00               	movlw	0
  8983  0019A2  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  8984  0019A4  0E26               	movlw	38
  8985  0019A6  EC49  F01D         	call	_SETxAPIxVAL
  8986                           
  8987                           ;io.c: 396: }
  8988                           
  8989                           ;io.c: 395: default : break;
  8990                           
  8991                           ;io.c: 393: break;
  8992  0019AA  D040               	goto	l7523
  8993  0019AC                     l7503:
  8994  0019AC  B481               	btfsc	3969,2,c	;volatile
  8995  0019AE  D002               	goto	u7190
  8996  0019B0  0E01               	movlw	1
  8997  0019B2  D001               	goto	u7200
  8998  0019B4                     u7190:
  8999  0019B4  0E00               	movlw	0
  9000  0019B6                     u7200:
  9001  0019B6  0100               	movlb	0	; () banked
  9002  0019B8  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  9003  0019BA  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9004                           
  9005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9006                           ; Switch size 1, requested type "space"
  9007                           ; Number of cases is 1, Range of values is 0 to 0
  9008                           ; switch strategies available:
  9009                           ; Name         Instructions Cycles
  9010                           ; simple_byte            4     3 (average)
  9011                           ;	Chosen strategy is simple_byte
  9012  0019BC  0100               	movlb	0	; () banked
  9013  0019BE  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9014  0019C0  0A00               	xorlw	0	; case 0
  9015  0019C2  A4D8               	btfss	status,2,c
  9016  0019C4  D033               	goto	l7523
  9017                           
  9018                           ; BSR set to: 0
  9019                           ; Switch size 1, requested type "space"
  9020                           ; Number of cases is 2, Range of values is 0 to 1
  9021                           ; switch strategies available:
  9022                           ; Name         Instructions Cycles
  9023                           ; simple_byte            7     4 (average)
  9024                           ;	Chosen strategy is simple_byte
  9025  0019C6  0100               	movlb	0	; () banked
  9026  0019C8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  9027  0019CA  0A00               	xorlw	0	; case 0
  9028  0019CC  B4D8               	btfsc	status,2,c
  9029  0019CE  D7E0               	goto	l7493
  9030  0019D0  0A01               	xorlw	1	; case 1
  9031  0019D2  B4D8               	btfsc	status,2,c
  9032  0019D4  D7C1               	goto	l7485
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;io.c: 399: switch(PORTCbits.RC1)
  9036  0019D6  D02A               	goto	l7523
  9037  0019D8                     l7505:
  9038  0019D8  502F               	movf	_Reed_Contact_LMU_Counter,w,c
  9039  0019DA  0100               	movlb	0	; () banked
  9040  0019DC  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  9041  0019DE  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9042  0019E0  0E1B               	movlw	27
  9043  0019E2  EC56  F01E         	call	_GETxAPIxVAL
  9044  0019E6  0100               	movlb	0	; () banked
  9045  0019E8  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  9046  0019EA  0100               	movlb	0	; () banked
  9047  0019EC  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9048  0019EE  0100               	movlb	0	; () banked
  9049  0019F0  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9050  0019F2  0100               	movlb	0	; () banked
  9051  0019F4  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9052  0019F6  A0D8               	btfss	status,0,c
  9053  0019F8  D002               	goto	l7511
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;io.c: 402: {
  9057                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  9058  0019FA  2A2F               	incf	_Reed_Contact_LMU_Counter,f,c
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;io.c: 405: }
  9062                           
  9063                           ;io.c: 404: break;
  9064  0019FC  D04D               	goto	l7543
  9065  0019FE                     l7511:
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  9069  0019FE  0E00               	movlw	0
  9070  001A00  0100               	movlb	0	; () banked
  9071  001A02  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9072  001A04  0E01               	movlw	1
  9073  001A06  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9074  001A08  0E29               	movlw	41
  9075  001A0A  EC49  F01D         	call	_SETxAPIxVAL
  9076                           
  9077                           ;io.c: 407: break;
  9078  001A0E  D044               	goto	l7543
  9079  001A10                     l7513:
  9080  001A10  502F               	movf	_Reed_Contact_LMU_Counter,w,c
  9081  001A12  B4D8               	btfsc	status,2,c
  9082  001A14  D002               	goto	l7519
  9083                           
  9084                           ;io.c: 410: {
  9085                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  9086  001A16  062F               	decf	_Reed_Contact_LMU_Counter,f,c
  9087                           
  9088                           ;io.c: 413: }
  9089                           
  9090                           ;io.c: 412: break;
  9091  001A18  D03F               	goto	l7543
  9092  001A1A                     l7519:
  9093                           
  9094                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  9095  001A1A  0E00               	movlw	0
  9096  001A1C  0100               	movlb	0	; () banked
  9097  001A1E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9098  001A20  0E00               	movlw	0
  9099  001A22  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9100  001A24  0E29               	movlw	41
  9101  001A26  EC49  F01D         	call	_SETxAPIxVAL
  9102                           
  9103                           ;io.c: 418: }
  9104                           
  9105                           ;io.c: 417: default : break;
  9106                           
  9107                           ;io.c: 415: break;
  9108  001A2A  D036               	goto	l7543
  9109  001A2C                     l7523:
  9110  001A2C  A282               	btfss	3970,1,c	;volatile
  9111  001A2E  D002               	goto	u7230
  9112  001A30  0E01               	movlw	1
  9113  001A32  D001               	goto	u7236
  9114  001A34                     u7230:
  9115  001A34  0E00               	movlw	0
  9116  001A36                     u7236:
  9117                           
  9118                           ; Switch size 1, requested type "space"
  9119                           ; Number of cases is 2, Range of values is 0 to 1
  9120                           ; switch strategies available:
  9121                           ; Name         Instructions Cycles
  9122                           ; simple_byte            7     4 (average)
  9123                           ;	Chosen strategy is simple_byte
  9124  001A36  0A00               	xorlw	0	; case 0
  9125  001A38  B4D8               	btfsc	status,2,c
  9126  001A3A  D7CE               	goto	l7505
  9127  001A3C  0A01               	xorlw	1	; case 1
  9128  001A3E  B4D8               	btfsc	status,2,c
  9129  001A40  D7E7               	goto	l7513
  9130                           
  9131                           ;io.c: 421: switch(PORTDbits.RD4)
  9132  001A42  D02A               	goto	l7543
  9133  001A44                     l7525:
  9134  001A44  502E               	movf	_Reed_Contact_LMD_Counter,w,c
  9135  001A46  0100               	movlb	0	; () banked
  9136  001A48  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  9137  001A4A  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9138  001A4C  0E1B               	movlw	27
  9139  001A4E  EC56  F01E         	call	_GETxAPIxVAL
  9140  001A52  0100               	movlb	0	; () banked
  9141  001A54  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  9142  001A56  0100               	movlb	0	; () banked
  9143  001A58  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9144  001A5A  0100               	movlb	0	; () banked
  9145  001A5C  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9146  001A5E  0100               	movlb	0	; () banked
  9147  001A60  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9148  001A62  A0D8               	btfss	status,0,c
  9149  001A64  D002               	goto	l7531
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;io.c: 424: {
  9153                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  9154  001A66  2A2E               	incf	_Reed_Contact_LMD_Counter,f,c
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;io.c: 427: }
  9158                           
  9159                           ;io.c: 426: break;
  9160  001A68  D04D               	goto	l7563
  9161  001A6A                     l7531:
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  9165  001A6A  0E00               	movlw	0
  9166  001A6C  0100               	movlb	0	; () banked
  9167  001A6E  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9168  001A70  0E01               	movlw	1
  9169  001A72  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9170  001A74  0E2A               	movlw	42
  9171  001A76  EC49  F01D         	call	_SETxAPIxVAL
  9172                           
  9173                           ;io.c: 429: break;
  9174  001A7A  D044               	goto	l7563
  9175  001A7C                     l7533:
  9176  001A7C  502E               	movf	_Reed_Contact_LMD_Counter,w,c
  9177  001A7E  B4D8               	btfsc	status,2,c
  9178  001A80  D002               	goto	l7539
  9179                           
  9180                           ;io.c: 432: {
  9181                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  9182  001A82  062E               	decf	_Reed_Contact_LMD_Counter,f,c
  9183                           
  9184                           ;io.c: 435: }
  9185                           
  9186                           ;io.c: 434: break;
  9187  001A84  D03F               	goto	l7563
  9188  001A86                     l7539:
  9189                           
  9190                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9191  001A86  0E00               	movlw	0
  9192  001A88  0100               	movlb	0	; () banked
  9193  001A8A  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9194  001A8C  0E00               	movlw	0
  9195  001A8E  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9196  001A90  0E2A               	movlw	42
  9197  001A92  EC49  F01D         	call	_SETxAPIxVAL
  9198                           
  9199                           ;io.c: 440: }
  9200                           
  9201                           ;io.c: 439: default : break;
  9202                           
  9203                           ;io.c: 437: break;
  9204  001A96  D036               	goto	l7563
  9205  001A98                     l7543:
  9206  001A98  A883               	btfss	3971,4,c	;volatile
  9207  001A9A  D002               	goto	u7260
  9208  001A9C  0E01               	movlw	1
  9209  001A9E  D001               	goto	u7266
  9210  001AA0                     u7260:
  9211  001AA0  0E00               	movlw	0
  9212  001AA2                     u7266:
  9213                           
  9214                           ; Switch size 1, requested type "space"
  9215                           ; Number of cases is 2, Range of values is 0 to 1
  9216                           ; switch strategies available:
  9217                           ; Name         Instructions Cycles
  9218                           ; simple_byte            7     4 (average)
  9219                           ;	Chosen strategy is simple_byte
  9220  001AA2  0A00               	xorlw	0	; case 0
  9221  001AA4  B4D8               	btfsc	status,2,c
  9222  001AA6  D7CE               	goto	l7525
  9223  001AA8  0A01               	xorlw	1	; case 1
  9224  001AAA  B4D8               	btfsc	status,2,c
  9225  001AAC  D7E7               	goto	l7533
  9226                           
  9227                           ;io.c: 443: switch(PORTEbits.RE1)
  9228  001AAE  D02A               	goto	l7563
  9229  001AB0                     l7545:
  9230  001AB0  5033               	movf	_Reed_Contact_RMU_Counter,w,c
  9231  001AB2  0100               	movlb	0	; () banked
  9232  001AB4  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  9233  001AB6  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9234  001AB8  0E1B               	movlw	27
  9235  001ABA  EC56  F01E         	call	_GETxAPIxVAL
  9236  001ABE  0100               	movlb	0	; () banked
  9237  001AC0  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  9238  001AC2  0100               	movlb	0	; () banked
  9239  001AC4  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9240  001AC6  0100               	movlb	0	; () banked
  9241  001AC8  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9242  001ACA  0100               	movlb	0	; () banked
  9243  001ACC  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9244  001ACE  A0D8               	btfss	status,0,c
  9245  001AD0  D002               	goto	l7551
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;io.c: 446: {
  9249                           ;io.c: 447: Reed_Contact_RMU_Counter++;
  9250  001AD2  2A33               	incf	_Reed_Contact_RMU_Counter,f,c
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;io.c: 449: }
  9254                           
  9255                           ;io.c: 448: break;
  9256  001AD4  D04D               	goto	l7583
  9257  001AD6                     l7551:
  9258                           
  9259                           ; BSR set to: 0
  9260                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
  9261  001AD6  0E00               	movlw	0
  9262  001AD8  0100               	movlb	0	; () banked
  9263  001ADA  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9264  001ADC  0E01               	movlw	1
  9265  001ADE  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9266  001AE0  0E2B               	movlw	43
  9267  001AE2  EC49  F01D         	call	_SETxAPIxVAL
  9268                           
  9269                           ;io.c: 451: break;
  9270  001AE6  D044               	goto	l7583
  9271  001AE8                     l7553:
  9272  001AE8  5033               	movf	_Reed_Contact_RMU_Counter,w,c
  9273  001AEA  B4D8               	btfsc	status,2,c
  9274  001AEC  D002               	goto	l7559
  9275                           
  9276                           ;io.c: 454: {
  9277                           ;io.c: 455: Reed_Contact_RMU_Counter--;
  9278  001AEE  0633               	decf	_Reed_Contact_RMU_Counter,f,c
  9279                           
  9280                           ;io.c: 457: }
  9281                           
  9282                           ;io.c: 456: break;
  9283  001AF0  D03F               	goto	l7583
  9284  001AF2                     l7559:
  9285                           
  9286                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
  9287  001AF2  0E00               	movlw	0
  9288  001AF4  0100               	movlb	0	; () banked
  9289  001AF6  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9290  001AF8  0E00               	movlw	0
  9291  001AFA  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9292  001AFC  0E2B               	movlw	43
  9293  001AFE  EC49  F01D         	call	_SETxAPIxVAL
  9294                           
  9295                           ;io.c: 462: }
  9296                           
  9297                           ;io.c: 461: default : break;
  9298                           
  9299                           ;io.c: 459: break;
  9300  001B02  D036               	goto	l7583
  9301  001B04                     l7563:
  9302  001B04  A284               	btfss	3972,1,c	;volatile
  9303  001B06  D002               	goto	u7290
  9304  001B08  0E01               	movlw	1
  9305  001B0A  D001               	goto	u7296
  9306  001B0C                     u7290:
  9307  001B0C  0E00               	movlw	0
  9308  001B0E                     u7296:
  9309                           
  9310                           ; Switch size 1, requested type "space"
  9311                           ; Number of cases is 2, Range of values is 0 to 1
  9312                           ; switch strategies available:
  9313                           ; Name         Instructions Cycles
  9314                           ; simple_byte            7     4 (average)
  9315                           ;	Chosen strategy is simple_byte
  9316  001B0E  0A00               	xorlw	0	; case 0
  9317  001B10  B4D8               	btfsc	status,2,c
  9318  001B12  D7CE               	goto	l7545
  9319  001B14  0A01               	xorlw	1	; case 1
  9320  001B16  B4D8               	btfsc	status,2,c
  9321  001B18  D7E7               	goto	l7553
  9322                           
  9323                           ;io.c: 465: switch(PORTEbits.RE0)
  9324  001B1A  D02A               	goto	l7583
  9325  001B1C                     l7565:
  9326  001B1C  5032               	movf	_Reed_Contact_RMD_Counter,w,c
  9327  001B1E  0100               	movlb	0	; () banked
  9328  001B20  6FB1               	movwf	??_Debounce_Inputs& (0+255),b
  9329  001B22  6BB2               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9330  001B24  0E1B               	movlw	27
  9331  001B26  EC56  F01E         	call	_GETxAPIxVAL
  9332  001B2A  0100               	movlb	0	; () banked
  9333  001B2C  51B1               	movf	??_Debounce_Inputs& (0+255),w,b
  9334  001B2E  0100               	movlb	0	; () banked
  9335  001B30  5D90               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9336  001B32  0100               	movlb	0	; () banked
  9337  001B34  51B2               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9338  001B36  0100               	movlb	0	; () banked
  9339  001B38  5991               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9340  001B3A  A0D8               	btfss	status,0,c
  9341  001B3C  D002               	goto	l7571
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;io.c: 468: {
  9345                           ;io.c: 469: Reed_Contact_RMD_Counter++;
  9346  001B3E  2A32               	incf	_Reed_Contact_RMD_Counter,f,c
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;io.c: 471: }
  9350                           
  9351                           ;io.c: 470: break;
  9352  001B40  0012               	return	
  9353  001B42                     l7571:
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
  9357  001B42  0E00               	movlw	0
  9358  001B44  0100               	movlb	0	; () banked
  9359  001B46  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9360  001B48  0E01               	movlw	1
  9361  001B4A  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9362  001B4C  0E2C               	movlw	44
  9363  001B4E  EC49  F01D         	call	_SETxAPIxVAL
  9364                           
  9365                           ;io.c: 473: break;
  9366  001B52  0012               	return	
  9367  001B54                     l7573:
  9368  001B54  5032               	movf	_Reed_Contact_RMD_Counter,w,c
  9369  001B56  B4D8               	btfsc	status,2,c
  9370  001B58  D002               	goto	l7579
  9371                           
  9372                           ;io.c: 476: {
  9373                           ;io.c: 477: Reed_Contact_RMD_Counter--;
  9374  001B5A  0632               	decf	_Reed_Contact_RMD_Counter,f,c
  9375                           
  9376                           ;io.c: 479: }
  9377                           
  9378                           ;io.c: 478: break;
  9379  001B5C  0012               	return	
  9380  001B5E                     l7579:
  9381                           
  9382                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
  9383  001B5E  0E00               	movlw	0
  9384  001B60  0100               	movlb	0	; () banked
  9385  001B62  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9386  001B64  0E00               	movlw	0
  9387  001B66  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
  9388  001B68  0E2C               	movlw	44
  9389  001B6A  EC49  F01D         	call	_SETxAPIxVAL
  9390                           
  9391                           ;io.c: 484: }
  9392                           
  9393                           ;io.c: 483: default : break;
  9394                           
  9395                           ;io.c: 481: break;
  9396  001B6E  0012               	return	
  9397  001B70                     l7583:
  9398  001B70  A084               	btfss	3972,0,c	;volatile
  9399  001B72  D002               	goto	u7320
  9400  001B74  0E01               	movlw	1
  9401  001B76  D001               	goto	u7326
  9402  001B78                     u7320:
  9403  001B78  0E00               	movlw	0
  9404  001B7A                     u7326:
  9405                           
  9406                           ; Switch size 1, requested type "space"
  9407                           ; Number of cases is 2, Range of values is 0 to 1
  9408                           ; switch strategies available:
  9409                           ; Name         Instructions Cycles
  9410                           ; simple_byte            7     4 (average)
  9411                           ;	Chosen strategy is simple_byte
  9412  001B7A  0A00               	xorlw	0	; case 0
  9413  001B7C  B4D8               	btfsc	status,2,c
  9414  001B7E  D7CE               	goto	l7565
  9415  001B80  0A01               	xorlw	1	; case 1
  9416  001B82  A4D8               	btfss	status,2,c
  9417  001B84  0012               	return	
  9418  001B86  D7E6               	goto	l7573
  9419  001B88                     __end_of_Debounce_Inputs:
  9420                           	opt stack 0
  9421                           tblptru	equ	0xFF8
  9422                           tblptrh	equ	0xFF7
  9423                           tblptrl	equ	0xFF6
  9424                           tablat	equ	0xFF5
  9425                           intcon	equ	0xFF2
  9426                           postinc0	equ	0xFEE
  9427                           wreg	equ	0xFE8
  9428                           postdec1	equ	0xFE5
  9429                           fsr1h	equ	0xFE2
  9430                           fsr1l	equ	0xFE1
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function _SetDCPWM1 *****************
  9434 ;; Defined at:
  9435 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic18\plib\PWM\pw1setdc.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  dutycycle       2    2[BANK0 ] unsigned int 
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  DCycle          2    6[BANK0 ] struct PWMDC
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  1    wreg      void 
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, status,0
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9449 ;;      Params:         0       2       0       0       0       0       0       0       0
  9450 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9451 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9452 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9453 ;;Total ram usage:        6 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    3
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		_Debounce_Inputs
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           	psect	text17
  9464  003B32                     __ptext17:
  9465                           	opt stack 0
  9466  003B32                     _SetDCPWM1:
  9467                           	opt stack 25
  9468                           
  9469                           ;incstack = 0
  9470  003B32  C092  F094         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9471  003B36  C093  F095         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9472  003B3A  0E06               	movlw	6
  9473  003B3C                     u6805:
  9474  003B3C  90D8               	bcf	status,0,c
  9475  003B3E  0100               	movlb	0	; () banked
  9476  003B40  3794               	rlcf	??_SetDCPWM1& (0+255),f,b
  9477  003B42  3795               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  9478  003B44  2EE8               	decfsz	wreg,f,c
  9479  003B46  D7FA               	goto	u6805
  9480  003B48  C094  F096         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9481  003B4C  C095  F097         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  9482                           
  9483                           ; BSR set to: 0
  9484  003B50  C097  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  9485  003B54  C096  F094         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  9486  003B58  0100               	movlb	0	; () banked
  9487  003B5A  90D8               	bcf	status,0,c
  9488  003B5C  3394               	rrcf	??_SetDCPWM1& (0+255),f,b
  9489  003B5E  0100               	movlb	0	; () banked
  9490  003B60  90D8               	bcf	status,0,c
  9491  003B62  3394               	rrcf	??_SetDCPWM1& (0+255),f,b
  9492  003B64  0E30               	movlw	48
  9493  003B66  0100               	movlb	0	; () banked
  9494  003B68  1794               	andwf	??_SetDCPWM1& (0+255),f,b
  9495  003B6A  50BD               	movf	4029,w,c	;volatile
  9496  003B6C  0BCF               	andlw	207
  9497  003B6E  0100               	movlb	0	; () banked
  9498  003B70  1194               	iorwf	??_SetDCPWM1& (0+255),w,b
  9499  003B72  6EBD               	movwf	4029,c	;volatile
  9500                           
  9501                           ; BSR set to: 0
  9502  003B74  0012               	return		;funcret
  9503  003B76                     __end_of_SetDCPWM1:
  9504                           	opt stack 0
  9505                           tblptru	equ	0xFF8
  9506                           tblptrh	equ	0xFF7
  9507                           tblptrl	equ	0xFF6
  9508                           tablat	equ	0xFF5
  9509                           intcon	equ	0xFF2
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           postdec1	equ	0xFE5
  9513                           fsr1h	equ	0xFE2
  9514                           fsr1l	equ	0xFE1
  9515                           status	equ	0xFD8
  9516                           
  9517 ;; *************** function _READxRECEIVEDxMESSAGE *****************
  9518 ;; Defined at:
  9519 ;;		line 32 in file "../terminal.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;		None
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;		None
  9524 ;; Return value:  Size  Location     Type
  9525 ;;                  1    wreg      void 
  9526 ;; Registers used:
  9527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9528 ;; Tracked objects:
  9529 ;;		On entry : 0/0
  9530 ;;		On exit  : 0/0
  9531 ;;		Unchanged: 0/0
  9532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9533 ;;      Params:         0       0       0       0       0       0       0       0       0
  9534 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9535 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9536 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9537 ;;Total ram usage:        4 bytes
  9538 ;; Hardware stack levels used:    1
  9539 ;; Hardware stack levels required when called:    8
  9540 ;; This function calls:
  9541 ;;		_EUSART1_Read
  9542 ;;		_TranslateMessage
  9543 ;;		_printf
  9544 ;; This function is called by:
  9545 ;;		_main
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text18
  9550  00270A                     __ptext18:
  9551                           	opt stack 0
  9552  00270A                     _READxRECEIVEDxMESSAGE:
  9553                           	opt stack 22
  9554                           
  9555                           ;terminal.c: 34: if ((eusart1RxCount) > 0){
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;incstack = 0
  9559  00270A  503A               	movf	_eusart1RxCount,w,c	;volatile
  9560  00270C  B4D8               	btfsc	status,2,c
  9561  00270E  D0A4               	goto	l8567
  9562                           
  9563                           ;terminal.c: 37: Received_Data = EUSART1_Read();
  9564  002710  ECD6  F01D         	call	_EUSART1_Read	;wreg free
  9565  002714  0100               	movlb	0	; () banked
  9566  002716  6F7B               	movwf	_Received_Data& (0+255),b
  9567                           
  9568                           ;terminal.c: 39: switch (RxSwitch){
  9569  002718  D093               	goto	l8565
  9570  00271A                     l8509:
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;terminal.c: 41: pData = &Data[0];
  9574  00271A  0E86               	movlw	low _Data
  9575  00271C  0100               	movlb	0	; () banked
  9576  00271E  6F76               	movwf	_pData& (0+255),b
  9577  002720  0E00               	movlw	high _Data
  9578  002722  0100               	movlb	0	; () banked
  9579  002724  6F77               	movwf	(_pData+1)& (0+255),b
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;terminal.c: 42: pLen = &Data[DataLen - 1];
  9583  002726  0EFF               	movlw	255
  9584  002728  0100               	movlb	0	; () banked
  9585  00272A  6FB5               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
  9586  00272C  0EFF               	movlw	255
  9587  00272E  0100               	movlb	0	; () banked
  9588  002730  6FB6               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
  9589  002732  0E0B               	movlw	low _DataLen
  9590  002734  6EF6               	movwf	tblptrl,c
  9591  002736                     	if	1	;There is more than 1 active tblptr byte
  9592  002736  0E08               	movlw	high _DataLen
  9593  002738  6EF7               	movwf	tblptrh,c
  9594  00273A                     	endif
  9595  00273A                     	if	0	;There are less than 3 active tblptr bytes
  9596  00273A                     	endif
  9597  00273A  0008               	tblrd		*
  9598  00273C  50F5               	movf	tablat,w,c
  9599  00273E  0100               	movlb	0	; () banked
  9600  002740  6FB7               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
  9601  002742  6BB8               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
  9602  002744  0100               	movlb	0	; () banked
  9603  002746  51B5               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
  9604  002748  0100               	movlb	0	; () banked
  9605  00274A  27B7               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
  9606  00274C  0100               	movlb	0	; () banked
  9607  00274E  51B6               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
  9608  002750  0100               	movlb	0	; () banked
  9609  002752  23B8               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
  9610  002754  0E86               	movlw	low _Data
  9611  002756  0100               	movlb	0	; () banked
  9612  002758  25B7               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
  9613  00275A  0100               	movlb	0	; () banked
  9614  00275C  6F78               	movwf	_pLen& (0+255),b
  9615  00275E  0E00               	movlw	high _Data
  9616  002760  0100               	movlb	0	; () banked
  9617  002762  21B8               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
  9618  002764  0100               	movlb	0	; () banked
  9619  002766  6F79               	movwf	(_pLen+1)& (0+255),b
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;terminal.c: 43: if (Received_Data == 's' || Received_Data == 'g'){
  9623  002768  0E73               	movlw	115
  9624  00276A  0100               	movlb	0	; () banked
  9625  00276C  197B               	xorwf	_Received_Data& (0+255),w,b
  9626  00276E  B4D8               	btfsc	status,2,c
  9627  002770  D005               	goto	l8517
  9628                           
  9629                           ; BSR set to: 0
  9630  002772  0E67               	movlw	103
  9631  002774  0100               	movlb	0	; () banked
  9632  002776  197B               	xorwf	_Received_Data& (0+255),w,b
  9633  002778  A4D8               	btfss	status,2,c
  9634  00277A  D00B               	goto	l8523
  9635  00277C                     l8517:
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;terminal.c: 44: *pData = Received_Data;
  9639  00277C  C076  FFD9         	movff	_pData,fsr2l
  9640  002780  C077  FFDA         	movff	_pData+1,fsr2h
  9641  002784  C07B  FFDF         	movff	_Received_Data,indf2
  9642                           
  9643                           ; BSR set to: 0
  9644                           ;terminal.c: 45: *pData++;
  9645  002788  0100               	movlb	0	; () banked
  9646  00278A  4B76               	infsnz	_pData& (0+255),f,b
  9647  00278C  2B77               	incf	(_pData+1)& (0+255),f,b
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;terminal.c: 46: RxSwitch = 1;
  9651  00278E  0E01               	movlw	1
  9652  002790  D00F               	goto	L91
  9653  002792                     l8523:
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;terminal.c: 48: else{
  9657                           ;terminal.c: 49: RxSwitch = 0;
  9658  002792  0E00               	movlw	0
  9659  002794  D00D               	goto	L91
  9660  002796                     l8525:
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;terminal.c: 54: if (Received_Data == 'x'){
  9664  002796  0E78               	movlw	120
  9665  002798  0100               	movlb	0	; () banked
  9666  00279A  197B               	xorwf	_Received_Data& (0+255),w,b
  9667  00279C  A4D8               	btfss	status,2,c
  9668  00279E  D7F9               	goto	l8523
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;terminal.c: 55: *pData = Received_Data;
  9672  0027A0  C076  FFD9         	movff	_pData,fsr2l
  9673  0027A4  C077  FFDA         	movff	_pData+1,fsr2h
  9674  0027A8  C07B  FFDF         	movff	_Received_Data,indf2
  9675  0027AC  D045               	goto	l8559
  9676  0027AE                     l8531:
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;terminal.c: 57: RxSwitch = 2;
  9680  0027AE  0E02               	movlw	2
  9681  0027B0                     L91:
  9682  0027B0  0100               	movlb	0	; () banked
  9683  0027B2  6F7C               	movwf	_RxSwitch& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;terminal.c: 61: }
  9687                           ;terminal.c: 62: break;
  9688  0027B4  D051               	goto	l8567
  9689  0027B6                     l8535:
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;terminal.c: 65: if (Received_Data == 'G'){
  9693  0027B6  0E47               	movlw	71
  9694  0027B8  0100               	movlb	0	; () banked
  9695  0027BA  197B               	xorwf	_Received_Data& (0+255),w,b
  9696  0027BC  B4D8               	btfsc	status,2,c
  9697  0027BE  D00A               	goto	l8543
  9698  0027C0  D022               	goto	l8551
  9699  0027C2                     l8539:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;terminal.c: 69: *pData = '\0';
  9703  0027C2  C076  FFD9         	movff	_pData,fsr2l
  9704  0027C6  C077  FFDA         	movff	_pData+1,fsr2h
  9705  0027CA  0E00               	movlw	0
  9706  0027CC  6EDF               	movwf	indf2,c
  9707                           
  9708                           ; BSR set to: 0
  9709                           ;terminal.c: 70: pData++;
  9710  0027CE  0100               	movlb	0	; () banked
  9711  0027D0  4B76               	infsnz	_pData& (0+255),f,b
  9712  0027D2  2B77               	incf	(_pData+1)& (0+255),f,b
  9713  0027D4                     l8543:
  9714                           
  9715                           ; BSR set to: 0
  9716  0027D4  0100               	movlb	0	; () banked
  9717  0027D6  5178               	movf	_pLen& (0+255),w,b
  9718  0027D8  0100               	movlb	0	; () banked
  9719  0027DA  5D76               	subwf	_pData& (0+255),w,b
  9720  0027DC  0100               	movlb	0	; () banked
  9721  0027DE  5179               	movf	(_pLen+1)& (0+255),w,b
  9722  0027E0  0100               	movlb	0	; () banked
  9723  0027E2  5977               	subwfb	(_pData+1)& (0+255),w,b
  9724  0027E4  A0D8               	btfss	status,0,c
  9725  0027E6  D7ED               	goto	l8539
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;terminal.c: 71: }
  9729                           ;terminal.c: 72: printf("\r\nX0\r\n");
  9730                           
  9731                           ; BSR set to: 0
  9732  0027E8  0E45               	movlw	low STR_1
  9733  0027EA  0100               	movlb	0	; () banked
  9734  0027EC  6F9B               	movwf	printf@f& (0+255),b
  9735  0027EE  0E08               	movlw	high STR_1
  9736  0027F0  0100               	movlb	0	; () banked
  9737  0027F2  6F9C               	movwf	(printf@f+1)& (0+255),b
  9738  0027F4  EC39  F014         	call	_printf	;wreg free
  9739                           
  9740                           ;terminal.c: 73: RxSwitch = 3;
  9741  0027F8  0E03               	movlw	3
  9742  0027FA  0100               	movlb	0	; () banked
  9743  0027FC  6F7C               	movwf	_RxSwitch& (0+255),b
  9744                           
  9745                           ; BSR set to: 0
  9746                           ;terminal.c: 74: Message_To_Translate = 1;
  9747  0027FE  0E01               	movlw	1
  9748  002800  0100               	movlb	0	; () banked
  9749  002802  6F7A               	movwf	_Message_To_Translate& (0+255),b
  9750                           
  9751                           ;terminal.c: 75: }
  9752  002804  D029               	goto	l8567
  9753  002806                     l8551:
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;terminal.c: 76: else{
  9757                           ;terminal.c: 77: *pData = Received_Data;
  9758  002806  C076  FFD9         	movff	_pData,fsr2l
  9759  00280A  C077  FFDA         	movff	_pData+1,fsr2h
  9760  00280E  C07B  FFDF         	movff	_Received_Data,indf2
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;terminal.c: 78: if (pData > pLen){
  9764  002812  0100               	movlb	0	; () banked
  9765  002814  5176               	movf	_pData& (0+255),w,b
  9766  002816  0100               	movlb	0	; () banked
  9767  002818  5D78               	subwf	_pLen& (0+255),w,b
  9768  00281A  0100               	movlb	0	; () banked
  9769  00281C  5177               	movf	(_pData+1)& (0+255),w,b
  9770  00281E  0100               	movlb	0	; () banked
  9771  002820  5979               	subwfb	(_pLen+1)& (0+255),w,b
  9772  002822  B0D8               	btfsc	status,0,c
  9773  002824  D009               	goto	l8559
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;terminal.c: 79: printf("\r\nE#10\r\n");
  9777  002826  0E18               	movlw	low STR_2
  9778  002828  0100               	movlb	0	; () banked
  9779  00282A  6F9B               	movwf	printf@f& (0+255),b
  9780  00282C  0E08               	movlw	high STR_2
  9781  00282E  0100               	movlb	0	; () banked
  9782  002830  6F9C               	movwf	(printf@f+1)& (0+255),b
  9783  002832  EC39  F014         	call	_printf	;wreg free
  9784  002836  D7AD               	goto	l8523
  9785  002838                     l8559:
  9786                           
  9787                           ; BSR set to: 0
  9788                           ;terminal.c: 82: else{
  9789                           ;terminal.c: 83: pData++;
  9790  002838  0100               	movlb	0	; () banked
  9791  00283A  4B76               	infsnz	_pData& (0+255),f,b
  9792  00283C  2B77               	incf	(_pData+1)& (0+255),f,b
  9793  00283E  D7B7               	goto	l8531
  9794  002840                     l8565:
  9795                           
  9796                           ; BSR set to: 0
  9797  002840  0100               	movlb	0	; () banked
  9798  002842  517C               	movf	_RxSwitch& (0+255),w,b
  9799                           
  9800                           ; Switch size 1, requested type "space"
  9801                           ; Number of cases is 4, Range of values is 0 to 3
  9802                           ; switch strategies available:
  9803                           ; Name         Instructions Cycles
  9804                           ; simple_byte           13     7 (average)
  9805                           ;	Chosen strategy is simple_byte
  9806  002844  0A00               	xorlw	0	; case 0
  9807  002846  B4D8               	btfsc	status,2,c
  9808  002848  D768               	goto	l8509
  9809  00284A  0A01               	xorlw	1	; case 1
  9810  00284C  B4D8               	btfsc	status,2,c
  9811  00284E  D7A3               	goto	l8525
  9812  002850  0A03               	xorlw	3	; case 2
  9813  002852  B4D8               	btfsc	status,2,c
  9814  002854  D7B0               	goto	l8535
  9815  002856  0A01               	xorlw	1	; case 3
  9816  002858                     l8567:
  9817                           
  9818                           ;terminal.c: 95: }
  9819                           ;terminal.c: 97: if (Message_To_Translate == 1){
  9820  002858  0100               	movlb	0	; () banked
  9821  00285A  057A               	decf	_Message_To_Translate& (0+255),w,b
  9822  00285C  A4D8               	btfss	status,2,c
  9823  00285E  0012               	return	
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;terminal.c: 98: TranslateMessage();
  9827  002860  ECCA  F012         	call	_TranslateMessage	;wreg free
  9828                           
  9829                           ;terminal.c: 99: Message_To_Translate = 0;
  9830  002864  0E00               	movlw	0
  9831  002866  0100               	movlb	0	; () banked
  9832  002868  6F7A               	movwf	_Message_To_Translate& (0+255),b
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;terminal.c: 100: RxSwitch = 0;
  9836  00286A  0E00               	movlw	0
  9837  00286C  0100               	movlb	0	; () banked
  9838  00286E  6F7C               	movwf	_RxSwitch& (0+255),b
  9839  002870  0012               	return	
  9840  002872                     __end_of_READxRECEIVEDxMESSAGE:
  9841                           	opt stack 0
  9842                           tblptru	equ	0xFF8
  9843                           tblptrh	equ	0xFF7
  9844                           tblptrl	equ	0xFF6
  9845                           tablat	equ	0xFF5
  9846                           intcon	equ	0xFF2
  9847                           postinc0	equ	0xFEE
  9848                           wreg	equ	0xFE8
  9849                           postdec1	equ	0xFE5
  9850                           fsr1h	equ	0xFE2
  9851                           fsr1l	equ	0xFE1
  9852                           indf2	equ	0xFDF
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           
  9857 ;; *************** function _TranslateMessage *****************
  9858 ;; Defined at:
  9859 ;;		line 118 in file "../terminal.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;		None
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;  Index           2   35[BANK0 ] unsigned int 
  9864 ;;  Value           2   33[BANK0 ] unsigned int 
  9865 ;; Return value:  Size  Location     Type
  9866 ;;                  1    wreg      void 
  9867 ;; Registers used:
  9868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9869 ;; Tracked objects:
  9870 ;;		On entry : 0/0
  9871 ;;		On exit  : 0/0
  9872 ;;		Unchanged: 0/0
  9873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9874 ;;      Params:         0       0       0       0       0       0       0       0       0
  9875 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9877 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9878 ;;Total ram usage:        4 bytes
  9879 ;; Hardware stack levels used:    1
  9880 ;; Hardware stack levels required when called:    7
  9881 ;; This function calls:
  9882 ;;		_GETxAPIxRW
  9883 ;;		_GETxAPIxVAL
  9884 ;;		_SENDxMESSAGE
  9885 ;;		_SETxAPIxVAL
  9886 ;;		_atoi
  9887 ;;		_printf
  9888 ;; This function is called by:
  9889 ;;		_READxRECEIVEDxMESSAGE
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           	psect	text19
  9894  002594                     __ptext19:
  9895                           	opt stack 0
  9896  002594                     _TranslateMessage:
  9897                           	opt stack 22
  9898                           
  9899                           ;terminal.c: 120: unsigned int Value, Index;
  9900                           ;terminal.c: 122: if(Data[0] == 's'){
  9901                           
  9902                           ; BSR set to: 0
  9903                           ;incstack = 0
  9904  002594  0E73               	movlw	115
  9905  002596  0100               	movlb	0	; () banked
  9906  002598  1986               	xorwf	_Data& (0+255),w,b
  9907  00259A  A4D8               	btfss	status,2,c
  9908  00259C  D06E               	goto	l7909
  9909                           
  9910                           ; BSR set to: 0
  9911                           ;terminal.c: 124: pData = &Data[2];
  9912  00259E  0E88               	movlw	low (_Data+2)
  9913  0025A0  0100               	movlb	0	; () banked
  9914  0025A2  6F76               	movwf	_pData& (0+255),b
  9915  0025A4  0E00               	movlw	high (_Data+2)
  9916  0025A6  0100               	movlb	0	; () banked
  9917  0025A8  6F77               	movwf	(_pData+1)& (0+255),b
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;terminal.c: 125: Index = atoi (pData);
  9921  0025AA  C076  F096         	movff	_pData,atoi@s
  9922  0025AE  C077  F097         	movff	_pData+1,atoi@s+1
  9923  0025B2  EC68  F01A         	call	_atoi	;wreg free
  9924  0025B6  C096  F0B3         	movff	?_atoi,TranslateMessage@Index
  9925  0025BA  C097  F0B4         	movff	?_atoi+1,TranslateMessage@Index+1
  9926                           
  9927                           ;terminal.c: 126: pData = &Data[5];
  9928  0025BE  0E8B               	movlw	low (_Data+5)
  9929  0025C0  0100               	movlb	0	; () banked
  9930  0025C2  6F76               	movwf	_pData& (0+255),b
  9931  0025C4  0E00               	movlw	high (_Data+5)
  9932  0025C6  0100               	movlb	0	; () banked
  9933  0025C8  6F77               	movwf	(_pData+1)& (0+255),b
  9934                           
  9935                           ;terminal.c: 127: Value = atoi (pData);
  9936  0025CA  C076  F096         	movff	_pData,atoi@s
  9937  0025CE  C077  F097         	movff	_pData+1,atoi@s+1
  9938  0025D2  EC68  F01A         	call	_atoi	;wreg free
  9939  0025D6  C096  F0B1         	movff	?_atoi,TranslateMessage@Value
  9940  0025DA  C097  F0B2         	movff	?_atoi+1,TranslateMessage@Value+1
  9941                           
  9942                           ;terminal.c: 129: if (GETxAPIxRW(Index) == 0){
  9943  0025DE  0100               	movlb	0	; () banked
  9944  0025E0  51B3               	movf	TranslateMessage@Index& (0+255),w,b
  9945  0025E2  EC64  F01E         	call	_GETxAPIxRW
  9946  0025E6  0100               	movlb	0	; () banked
  9947  0025E8  5190               	movf	?_GETxAPIxRW& (0+255),w,b
  9948  0025EA  0100               	movlb	0	; () banked
  9949  0025EC  1191               	iorwf	(?_GETxAPIxRW+1)& (0+255),w,b
  9950  0025EE  A4D8               	btfss	status,2,c
  9951  0025F0  D009               	goto	l7895
  9952                           
  9953                           ; BSR set to: 0
  9954                           ;terminal.c: 130: printf("\r\nE#11\r\n");
  9955  0025F2  0E21               	movlw	low STR_3
  9956  0025F4  0100               	movlb	0	; () banked
  9957  0025F6  6F9B               	movwf	printf@f& (0+255),b
  9958  0025F8  0E08               	movlw	high STR_3
  9959  0025FA  0100               	movlb	0	; () banked
  9960  0025FC  6F9C               	movwf	(printf@f+1)& (0+255),b
  9961  0025FE  EC39  F014         	call	_printf	;wreg free
  9962                           
  9963                           ;terminal.c: 131: }
  9964  002602  0012               	return	
  9965  002604                     l7895:
  9966                           
  9967                           ;terminal.c: 132: else if (Index < 0xF){
  9968  002604  0100               	movlb	0	; () banked
  9969  002606  51B4               	movf	(TranslateMessage@Index+1)& (0+255),w,b
  9970  002608  E10E               	bnz	l7899
  9971  00260A  0E0F               	movlw	15
  9972  00260C  0100               	movlb	0	; () banked
  9973  00260E  5DB3               	subwf	TranslateMessage@Index& (0+255),w,b
  9974  002610  B0D8               	btfsc	status,0,c
  9975  002612  D009               	goto	l7899
  9976                           
  9977                           ; BSR set to: 0
  9978                           ;terminal.c: 133: printf("\r\nE#12\r\n");
  9979  002614  0E2A               	movlw	low STR_4
  9980  002616  0100               	movlb	0	; () banked
  9981  002618  6F9B               	movwf	printf@f& (0+255),b
  9982  00261A  0E08               	movlw	high STR_4
  9983  00261C  0100               	movlb	0	; () banked
  9984  00261E  6F9C               	movwf	(printf@f+1)& (0+255),b
  9985  002620  EC39  F014         	call	_printf	;wreg free
  9986                           
  9987                           ;terminal.c: 134: }
  9988  002624  0012               	return	
  9989  002626                     l7899:
  9990                           
  9991                           ;terminal.c: 135: else if (Index > 0x90){
  9992  002626  0100               	movlb	0	; () banked
  9993  002628  51B4               	movf	(TranslateMessage@Index+1)& (0+255),w,b
  9994  00262A  E105               	bnz	u7850
  9995  00262C  0E91               	movlw	145
  9996  00262E  0100               	movlb	0	; () banked
  9997  002630  5DB3               	subwf	TranslateMessage@Index& (0+255),w,b
  9998  002632  A0D8               	btfss	status,0,c
  9999  002634  D009               	goto	l7903
 10000  002636                     u7850:
 10001                           
 10002                           ; BSR set to: 0
 10003                           ;terminal.c: 136: printf("\r\nE#13\r\n");
 10004  002636  0E33               	movlw	low STR_5
 10005  002638  0100               	movlb	0	; () banked
 10006  00263A  6F9B               	movwf	printf@f& (0+255),b
 10007  00263C  0E08               	movlw	high STR_5
 10008  00263E  0100               	movlb	0	; () banked
 10009  002640  6F9C               	movwf	(printf@f+1)& (0+255),b
 10010  002642  EC39  F014         	call	_printf	;wreg free
 10011                           
 10012                           ;terminal.c: 137: }
 10013  002646  0012               	return	
 10014  002648                     l7903:
 10015                           
 10016                           ;terminal.c: 138: else if (Value > 0xFFFE){
 10017  002648  0100               	movlb	0	; () banked
 10018  00264A  29B1               	incf	TranslateMessage@Value& (0+255),w,b
 10019  00264C  E10D               	bnz	l7907
 10020  00264E  0100               	movlb	0	; () banked
 10021  002650  29B2               	incf	(TranslateMessage@Value+1)& (0+255),w,b
 10022  002652  A4D8               	btfss	status,2,c
 10023  002654  D009               	goto	l7907
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;terminal.c: 139: printf("\r\nE#14\r\n");
 10027  002656  0E3C               	movlw	low STR_6
 10028  002658  0100               	movlb	0	; () banked
 10029  00265A  6F9B               	movwf	printf@f& (0+255),b
 10030  00265C  0E08               	movlw	high STR_6
 10031  00265E  0100               	movlb	0	; () banked
 10032  002660  6F9C               	movwf	(printf@f+1)& (0+255),b
 10033  002662  EC39  F014         	call	_printf	;wreg free
 10034                           
 10035                           ;terminal.c: 140: }
 10036  002666  0012               	return	
 10037  002668                     l7907:
 10038                           
 10039                           ;terminal.c: 141: else{
 10040                           ;terminal.c: 142: SETxAPIxVAL(Index, Value);
 10041  002668  C0B1  F0AC         	movff	TranslateMessage@Value,SETxAPIxVAL@value
 10042  00266C  C0B2  F0AD         	movff	TranslateMessage@Value+1,SETxAPIxVAL@value+1
 10043  002670  0100               	movlb	0	; () banked
 10044  002672  51B3               	movf	TranslateMessage@Index& (0+255),w,b
 10045  002674  EC49  F01D         	call	_SETxAPIxVAL
 10046                           
 10047                           ;terminal.c: 143: }
 10048                           ;terminal.c: 144: }
 10049  002678  0012               	return	
 10050  00267A                     l7909:
 10051                           
 10052                           ;terminal.c: 146: else if (Data[0] == 'g'){
 10053  00267A  0E67               	movlw	103
 10054  00267C  0100               	movlb	0	; () banked
 10055  00267E  1986               	xorwf	_Data& (0+255),w,b
 10056  002680  A4D8               	btfss	status,2,c
 10057  002682  0012               	return	
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;terminal.c: 148: pData = &Data[2];
 10061  002684  0E88               	movlw	low (_Data+2)
 10062  002686  0100               	movlb	0	; () banked
 10063  002688  6F76               	movwf	_pData& (0+255),b
 10064  00268A  0E00               	movlw	high (_Data+2)
 10065  00268C  0100               	movlb	0	; () banked
 10066  00268E  6F77               	movwf	(_pData+1)& (0+255),b
 10067                           
 10068                           ; BSR set to: 0
 10069                           ;terminal.c: 149: Index = atoi (pData);
 10070  002690  C076  F096         	movff	_pData,atoi@s
 10071  002694  C077  F097         	movff	_pData+1,atoi@s+1
 10072  002698  EC68  F01A         	call	_atoi	;wreg free
 10073  00269C  C096  F0B3         	movff	?_atoi,TranslateMessage@Index
 10074  0026A0  C097  F0B4         	movff	?_atoi+1,TranslateMessage@Index+1
 10075                           
 10076                           ;terminal.c: 151: if (Index < 0xF){
 10077  0026A4  0100               	movlb	0	; () banked
 10078  0026A6  51B4               	movf	(TranslateMessage@Index+1)& (0+255),w,b
 10079  0026A8  E10E               	bnz	l7919
 10080  0026AA  0E0F               	movlw	15
 10081  0026AC  0100               	movlb	0	; () banked
 10082  0026AE  5DB3               	subwf	TranslateMessage@Index& (0+255),w,b
 10083  0026B0  B0D8               	btfsc	status,0,c
 10084  0026B2  D009               	goto	l7919
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;terminal.c: 152: printf("\r\nE#12\r\n");
 10088  0026B4  0E2A               	movlw	low STR_4
 10089  0026B6  0100               	movlb	0	; () banked
 10090  0026B8  6F9B               	movwf	printf@f& (0+255),b
 10091  0026BA  0E08               	movlw	high STR_4
 10092  0026BC  0100               	movlb	0	; () banked
 10093  0026BE  6F9C               	movwf	(printf@f+1)& (0+255),b
 10094  0026C0  EC39  F014         	call	_printf	;wreg free
 10095                           
 10096                           ;terminal.c: 153: }
 10097  0026C4  0012               	return	
 10098  0026C6                     l7919:
 10099                           
 10100                           ;terminal.c: 154: else if (Index > 0x90){
 10101  0026C6  0100               	movlb	0	; () banked
 10102  0026C8  51B4               	movf	(TranslateMessage@Index+1)& (0+255),w,b
 10103  0026CA  E105               	bnz	u7890
 10104  0026CC  0E91               	movlw	145
 10105  0026CE  0100               	movlb	0	; () banked
 10106  0026D0  5DB3               	subwf	TranslateMessage@Index& (0+255),w,b
 10107  0026D2  A0D8               	btfss	status,0,c
 10108  0026D4  D009               	goto	l7923
 10109  0026D6                     u7890:
 10110                           
 10111                           ; BSR set to: 0
 10112                           ;terminal.c: 155: printf("\r\nE#13\r\n");
 10113  0026D6  0E33               	movlw	low STR_5
 10114  0026D8  0100               	movlb	0	; () banked
 10115  0026DA  6F9B               	movwf	printf@f& (0+255),b
 10116  0026DC  0E08               	movlw	high STR_5
 10117  0026DE  0100               	movlb	0	; () banked
 10118  0026E0  6F9C               	movwf	(printf@f+1)& (0+255),b
 10119  0026E2  EC39  F014         	call	_printf	;wreg free
 10120                           
 10121                           ;terminal.c: 156: }
 10122  0026E6  0012               	return	
 10123  0026E8                     l7923:
 10124                           
 10125                           ;terminal.c: 157: else{
 10126                           ;terminal.c: 158: Value = GETxAPIxVAL(Index);
 10127  0026E8  0100               	movlb	0	; () banked
 10128  0026EA  51B3               	movf	TranslateMessage@Index& (0+255),w,b
 10129  0026EC  EC56  F01E         	call	_GETxAPIxVAL
 10130  0026F0  C090  F0B1         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10131  0026F4  C091  F0B2         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10132                           
 10133                           ;terminal.c: 159: SENDxMESSAGE(Index, Value);
 10134  0026F8  C0B1  F0A9         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10135  0026FC  C0B2  F0AA         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10136  002700  0100               	movlb	0	; () banked
 10137  002702  51B3               	movf	TranslateMessage@Index& (0+255),w,b
 10138  002704  EC31  F01E         	call	_SENDxMESSAGE
 10139  002708  0012               	return	
 10140  00270A                     __end_of_TranslateMessage:
 10141                           	opt stack 0
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           intcon	equ	0xFF2
 10147                           postinc0	equ	0xFEE
 10148                           wreg	equ	0xFE8
 10149                           postdec1	equ	0xFE5
 10150                           fsr1h	equ	0xFE2
 10151                           fsr1l	equ	0xFE1
 10152                           indf2	equ	0xFDF
 10153                           fsr2h	equ	0xFDA
 10154                           fsr2l	equ	0xFD9
 10155                           status	equ	0xFD8
 10156                           
 10157 ;; *************** function _atoi *****************
 10158 ;; Defined at:
 10159 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\atoi.c"
 10160 ;; Parameters:    Size  Location     Type
 10161 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 10162 ;;		 -> NULL(0), Data(10), 
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;  a               2   11[BANK0 ] int 
 10165 ;;  sign            1   10[BANK0 ] unsigned char 
 10166 ;; Return value:  Size  Location     Type
 10167 ;;                  2    6[BANK0 ] int 
 10168 ;; Registers used:
 10169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10175 ;;      Params:         0       2       0       0       0       0       0       0       0
 10176 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10177 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10178 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10179 ;;Total ram usage:        7 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    4
 10182 ;; This function calls:
 10183 ;;		___wmul
 10184 ;;		_isdigit
 10185 ;; This function is called by:
 10186 ;;		_TranslateMessage
 10187 ;; This function uses a non-reentrant model
 10188 ;;
 10189                           
 10190                           	psect	text20
 10191  0034D0                     __ptext20:
 10192                           	opt stack 0
 10193  0034D0                     _atoi:
 10194                           	opt stack 24
 10195                           
 10196                           ;incstack = 0
 10197  0034D0  D003               	goto	l7251
 10198  0034D2                     l7249:
 10199  0034D2  0100               	movlb	0	; () banked
 10200  0034D4  4B96               	infsnz	atoi@s& (0+255),f,b
 10201  0034D6  2B97               	incf	(atoi@s+1)& (0+255),f,b
 10202  0034D8                     l7251:
 10203  0034D8  C096  FFD9         	movff	atoi@s,fsr2l
 10204  0034DC  C097  FFDA         	movff	atoi@s+1,fsr2h
 10205  0034E0  0E20               	movlw	32
 10206  0034E2  18DE               	xorwf	postinc2,w,c
 10207  0034E4  B4D8               	btfsc	status,2,c
 10208  0034E6  D7F5               	goto	l7249
 10209  0034E8  C096  FFD9         	movff	atoi@s,fsr2l
 10210  0034EC  C097  FFDA         	movff	atoi@s+1,fsr2h
 10211  0034F0  0E09               	movlw	9
 10212  0034F2  18DE               	xorwf	postinc2,w,c
 10213  0034F4  B4D8               	btfsc	status,2,c
 10214  0034F6  D7ED               	goto	l7249
 10215  0034F8  0E00               	movlw	0
 10216  0034FA  0100               	movlb	0	; () banked
 10217  0034FC  6F9C               	movwf	(atoi@a+1)& (0+255),b
 10218  0034FE  0E00               	movlw	0
 10219  003500  6F9B               	movwf	atoi@a& (0+255),b
 10220  003502  0E00               	movlw	0
 10221  003504  0100               	movlb	0	; () banked
 10222  003506  6F9A               	movwf	atoi@sign& (0+255),b
 10223                           
 10224                           ; BSR set to: 0
 10225  003508  C096  FFD9         	movff	atoi@s,fsr2l
 10226  00350C  C097  FFDA         	movff	atoi@s+1,fsr2h
 10227  003510  0E2D               	movlw	45
 10228  003512  18DE               	xorwf	postinc2,w,c
 10229  003514  A4D8               	btfss	status,2,c
 10230  003516  D003               	goto	l7261
 10231                           
 10232                           ; BSR set to: 0
 10233  003518  0100               	movlb	0	; () banked
 10234  00351A  2B9A               	incf	atoi@sign& (0+255),f,b
 10235  00351C  D02E               	goto	l7267
 10236  00351E                     l7261:
 10237                           
 10238                           ; BSR set to: 0
 10239  00351E  C096  FFD9         	movff	atoi@s,fsr2l
 10240  003522  C097  FFDA         	movff	atoi@s+1,fsr2h
 10241  003526  0E2B               	movlw	43
 10242  003528  18DE               	xorwf	postinc2,w,c
 10243  00352A  A4D8               	btfss	status,2,c
 10244  00352C  D029               	goto	l7269
 10245  00352E  D025               	goto	l7267
 10246  003530                     l7265:
 10247  003530  C09B  F090         	movff	atoi@a,___wmul@multiplier
 10248  003534  C09C  F091         	movff	atoi@a+1,___wmul@multiplier+1
 10249  003538  0E00               	movlw	0
 10250  00353A  0100               	movlb	0	; () banked
 10251  00353C  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10252  00353E  0E0A               	movlw	10
 10253  003540  6F92               	movwf	___wmul@multiplicand& (0+255),b
 10254  003542  ECBB  F01D         	call	___wmul	;wreg free
 10255  003546  C096  FFD9         	movff	atoi@s,fsr2l
 10256  00354A  C097  FFDA         	movff	atoi@s+1,fsr2h
 10257  00354E  50DF               	movf	indf2,w,c
 10258  003550  0100               	movlb	0	; () banked
 10259  003552  6F98               	movwf	??_atoi& (0+255),b
 10260  003554  6B99               	clrf	(??_atoi+1)& (0+255),b
 10261  003556  0100               	movlb	0	; () banked
 10262  003558  5190               	movf	?___wmul& (0+255),w,b
 10263  00355A  0100               	movlb	0	; () banked
 10264  00355C  2798               	addwf	??_atoi& (0+255),f,b
 10265  00355E  0100               	movlb	0	; () banked
 10266  003560  5191               	movf	(?___wmul+1)& (0+255),w,b
 10267  003562  0100               	movlb	0	; () banked
 10268  003564  2399               	addwfc	(??_atoi+1)& (0+255),f,b
 10269  003566  0ED0               	movlw	208
 10270  003568  0100               	movlb	0	; () banked
 10271  00356A  2598               	addwf	??_atoi& (0+255),w,b
 10272  00356C  0100               	movlb	0	; () banked
 10273  00356E  6F9B               	movwf	atoi@a& (0+255),b
 10274  003570  0EFF               	movlw	255
 10275  003572  0100               	movlb	0	; () banked
 10276  003574  2199               	addwfc	(??_atoi+1)& (0+255),w,b
 10277  003576  0100               	movlb	0	; () banked
 10278  003578  6F9C               	movwf	(atoi@a+1)& (0+255),b
 10279  00357A                     l7267:
 10280                           
 10281                           ; BSR set to: 0
 10282  00357A  0100               	movlb	0	; () banked
 10283  00357C  4B96               	infsnz	atoi@s& (0+255),f,b
 10284  00357E  2B97               	incf	(atoi@s+1)& (0+255),f,b
 10285  003580                     l7269:
 10286                           
 10287                           ; BSR set to: 0
 10288  003580  C096  FFD9         	movff	atoi@s,fsr2l
 10289  003584  C097  FFDA         	movff	atoi@s+1,fsr2h
 10290  003588  50DF               	movf	indf2,w,c
 10291  00358A  EC1D  F01E         	call	_isdigit
 10292  00358E  B0D8               	btfsc	status,0,c
 10293  003590  D7CF               	goto	l7265
 10294  003592  0100               	movlb	0	; () banked
 10295  003594  519A               	movf	atoi@sign& (0+255),w,b
 10296  003596  0100               	movlb	0	; () banked
 10297  003598  B4D8               	btfsc	status,2,c
 10298  00359A  D00E               	goto	l1360
 10299                           
 10300                           ; BSR set to: 0
 10301  00359C  C09B  F098         	movff	atoi@a,??_atoi
 10302  0035A0  C09C  F099         	movff	atoi@a+1,??_atoi+1
 10303  0035A4  0100               	movlb	0	; () banked
 10304  0035A6  1F98               	comf	??_atoi& (0+255),f,b
 10305  0035A8  1F99               	comf	(??_atoi+1)& (0+255),f,b
 10306  0035AA  4B98               	infsnz	??_atoi& (0+255),f,b
 10307  0035AC  2B99               	incf	(??_atoi+1)& (0+255),f,b
 10308  0035AE  C098  F096         	movff	??_atoi,?_atoi
 10309  0035B2  C099  F097         	movff	??_atoi+1,?_atoi+1
 10310  0035B6  0012               	return	
 10311  0035B8                     l1360:
 10312                           
 10313                           ; BSR set to: 0
 10314  0035B8  C09B  F096         	movff	atoi@a,?_atoi
 10315  0035BC  C09C  F097         	movff	atoi@a+1,?_atoi+1
 10316                           
 10317                           ; BSR set to: 0
 10318  0035C0  0012               	return		;funcret
 10319  0035C2                     __end_of_atoi:
 10320                           	opt stack 0
 10321                           tblptru	equ	0xFF8
 10322                           tblptrh	equ	0xFF7
 10323                           tblptrl	equ	0xFF6
 10324                           tablat	equ	0xFF5
 10325                           intcon	equ	0xFF2
 10326                           postinc0	equ	0xFEE
 10327                           wreg	equ	0xFE8
 10328                           postdec1	equ	0xFE5
 10329                           fsr1h	equ	0xFE2
 10330                           fsr1l	equ	0xFE1
 10331                           indf2	equ	0xFDF
 10332                           postinc2	equ	0xFDE
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337 ;; *************** function _isdigit *****************
 10338 ;; Defined at:
 10339 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;  c               1    wreg     unsigned char 
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  c               1    1[BANK0 ] unsigned char 
 10344 ;; Return value:  Size  Location     Type
 10345 ;;		None               void
 10346 ;; Registers used:
 10347 ;;		wreg, status,2, status,0
 10348 ;; Tracked objects:
 10349 ;;		On entry : 0/0
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10353 ;;      Params:         0       0       0       0       0       0       0       0       0
 10354 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10355 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10356 ;;      Totals:         1       2       0       0       0       0       0       0       0
 10357 ;;Total ram usage:        3 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; Hardware stack levels required when called:    3
 10360 ;; This function calls:
 10361 ;;		Nothing
 10362 ;; This function is called by:
 10363 ;;		_atoi
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           	psect	text21
 10368  003C3A                     __ptext21:
 10369                           	opt stack 0
 10370  003C3A                     _isdigit:
 10371                           	opt stack 24
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;incstack = 0
 10375                           ;isdigit@c stored from wreg
 10376  003C3A  0100               	movlb	0	; () banked
 10377  003C3C  6F91               	movwf	isdigit@c& (0+255),b
 10378  003C3E  0E00               	movlw	0
 10379  003C40  0100               	movlb	0	; () banked
 10380  003C42  6F90               	movwf	_isdigit$1860& (0+255),b
 10381                           
 10382                           ; BSR set to: 0
 10383  003C44  0E3A               	movlw	58
 10384  003C46  0100               	movlb	0	; () banked
 10385  003C48  6191               	cpfslt	isdigit@c& (0+255),b
 10386  003C4A  D007               	goto	l6735
 10387                           
 10388                           ; BSR set to: 0
 10389  003C4C  0E2F               	movlw	47
 10390  003C4E  0100               	movlb	0	; () banked
 10391  003C50  6591               	cpfsgt	isdigit@c& (0+255),b
 10392  003C52  D003               	goto	l6735
 10393                           
 10394                           ; BSR set to: 0
 10395  003C54  0E01               	movlw	1
 10396  003C56  0100               	movlb	0	; () banked
 10397  003C58  6F90               	movwf	_isdigit$1860& (0+255),b
 10398  003C5A                     l6735:
 10399                           
 10400                           ; BSR set to: 0
 10401  003C5A  C090  F020         	movff	_isdigit$1860,??_isdigit
 10402  003C5E  3020               	rrcf	??_isdigit,w,c
 10403  003C60  0012               	return	
 10404  003C62                     __end_of_isdigit:
 10405                           	opt stack 0
 10406                           tblptru	equ	0xFF8
 10407                           tblptrh	equ	0xFF7
 10408                           tblptrl	equ	0xFF6
 10409                           tablat	equ	0xFF5
 10410                           intcon	equ	0xFF2
 10411                           postinc0	equ	0xFEE
 10412                           wreg	equ	0xFE8
 10413                           postdec1	equ	0xFE5
 10414                           fsr1h	equ	0xFE2
 10415                           fsr1l	equ	0xFE1
 10416                           indf2	equ	0xFDF
 10417                           postinc2	equ	0xFDE
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8
 10421                           
 10422 ;; *************** function ___wmul *****************
 10423 ;; Defined at:
 10424 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10427 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  product         2    4[BANK0 ] unsigned int 
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  2    0[BANK0 ] unsigned int 
 10432 ;; Registers used:
 10433 ;;		wreg, status,2, status,0, prodl, prodh
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10439 ;;      Params:         0       4       0       0       0       0       0       0       0
 10440 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10441 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10442 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10443 ;;Total ram usage:        6 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:    3
 10446 ;; This function calls:
 10447 ;;		Nothing
 10448 ;; This function is called by:
 10449 ;;		_atoi
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text22
 10454  003B76                     __ptext22:
 10455                           	opt stack 0
 10456  003B76                     ___wmul:
 10457                           	opt stack 24
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;incstack = 0
 10461  003B76  0100               	movlb	0	; () banked
 10462  003B78  5190               	movf	___wmul@multiplier& (0+255),w,b
 10463  003B7A  0100               	movlb	0	; () banked
 10464  003B7C  0392               	mulwf	___wmul@multiplicand& (0+255),b
 10465  003B7E  CFF3 F094          	movff	prodl,___wmul@product
 10466  003B82  CFF4 F095          	movff	prodh,___wmul@product+1
 10467  003B86  0100               	movlb	0	; () banked
 10468  003B88  5190               	movf	___wmul@multiplier& (0+255),w,b
 10469  003B8A  0100               	movlb	0	; () banked
 10470  003B8C  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10471  003B8E  50F3               	movf	prodl,w,c
 10472  003B90  0100               	movlb	0	; () banked
 10473  003B92  2795               	addwf	(___wmul@product+1)& (0+255),f,b
 10474  003B94  0100               	movlb	0	; () banked
 10475  003B96  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10476  003B98  0100               	movlb	0	; () banked
 10477  003B9A  0392               	mulwf	___wmul@multiplicand& (0+255),b
 10478  003B9C  50F3               	movf	prodl,w,c
 10479  003B9E  0100               	movlb	0	; () banked
 10480  003BA0  2795               	addwf	(___wmul@product+1)& (0+255),f,b
 10481                           
 10482                           ; BSR set to: 0
 10483  003BA2  C094  F090         	movff	___wmul@product,?___wmul
 10484  003BA6  C095  F091         	movff	___wmul@product+1,?___wmul+1
 10485  003BAA  0012               	return	
 10486  003BAC                     __end_of___wmul:
 10487                           	opt stack 0
 10488                           tblptru	equ	0xFF8
 10489                           tblptrh	equ	0xFF7
 10490                           tblptrl	equ	0xFF6
 10491                           tablat	equ	0xFF5
 10492                           prodh	equ	0xFF4
 10493                           prodl	equ	0xFF3
 10494                           intcon	equ	0xFF2
 10495                           postinc0	equ	0xFEE
 10496                           wreg	equ	0xFE8
 10497                           postdec1	equ	0xFE5
 10498                           fsr1h	equ	0xFE2
 10499                           fsr1l	equ	0xFE1
 10500                           indf2	equ	0xFDF
 10501                           postinc2	equ	0xFDE
 10502                           fsr2h	equ	0xFDA
 10503                           fsr2l	equ	0xFD9
 10504                           status	equ	0xFD8
 10505                           
 10506 ;; *************** function _GETxAPIxVAL *****************
 10507 ;; Defined at:
 10508 ;;		line 200 in file "../api.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;  index           1    wreg     unsigned char 
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  index           1   31[COMRAM] unsigned char 
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  2    0[BANK0 ] unsigned int 
 10515 ;; Registers used:
 10516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10517 ;; Tracked objects:
 10518 ;;		On entry : 0/0
 10519 ;;		On exit  : 0/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10522 ;;      Params:         0       2       0       0       0       0       0       0       0
 10523 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10524 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10525 ;;      Totals:         1       2       0       0       0       0       0       0       0
 10526 ;;Total ram usage:        3 bytes
 10527 ;; Hardware stack levels used:    1
 10528 ;; Hardware stack levels required when called:    3
 10529 ;; This function calls:
 10530 ;;		Nothing
 10531 ;; This function is called by:
 10532 ;;		_Update_StateMchn
 10533 ;;		_Train_Path
 10534 ;;		_TranslateMessage
 10535 ;;		_Eeprom_Store
 10536 ;;		_Debounce_Inputs
 10537 ;;		_Junction
 10538 ;;		_Train_Move_Left_Start
 10539 ;;		_Right_Mountain_From_The_Right
 10540 ;;		_Left_Mountain_From_The_Right
 10541 ;;		_Train_Move_Left_Brake
 10542 ;;		_Train_Move_Right_Start
 10543 ;;		_Left_Mountain_From_The_Left
 10544 ;;		_Right_Mountain_From_The_Left
 10545 ;;		_Train_Move_Right_Brake
 10546 ;;		_INCRxAPIxVAL
 10547 ;;		_DECRxAPIxVAL
 10548 ;; This function uses a non-reentrant model
 10549 ;;
 10550                           
 10551                           	psect	text23
 10552  003CAC                     __ptext23:
 10553                           	opt stack 0
 10554  003CAC                     _GETxAPIxVAL:
 10555                           	opt stack 24
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;incstack = 0
 10559                           ;GETxAPIxVAL@index stored from wreg
 10560  003CAC  6E20               	movwf	GETxAPIxVAL@index,c
 10561                           
 10562                           ;api.c: 201: return API[index];
 10563  003CAE  5020               	movf	GETxAPIxVAL@index,w,c
 10564  003CB0  0D02               	mullw	2
 10565  003CB2  0EFC               	movlw	low _API
 10566  003CB4  24F3               	addwf	prodl,w,c
 10567  003CB6  6ED9               	movwf	fsr2l,c
 10568  003CB8  0E01               	movlw	high _API
 10569  003CBA  20F4               	addwfc	prodh,w,c
 10570  003CBC  6EDA               	movwf	fsr2h,c
 10571  003CBE  CFDE F090          	movff	postinc2,?_GETxAPIxVAL
 10572  003CC2  CFDD F091          	movff	postdec2,?_GETxAPIxVAL+1
 10573  003CC6  0012               	return	
 10574  003CC8                     __end_of_GETxAPIxVAL:
 10575                           	opt stack 0
 10576                           tblptru	equ	0xFF8
 10577                           tblptrh	equ	0xFF7
 10578                           tblptrl	equ	0xFF6
 10579                           tablat	equ	0xFF5
 10580                           prodh	equ	0xFF4
 10581                           prodl	equ	0xFF3
 10582                           intcon	equ	0xFF2
 10583                           postinc0	equ	0xFEE
 10584                           wreg	equ	0xFE8
 10585                           postdec1	equ	0xFE5
 10586                           fsr1h	equ	0xFE2
 10587                           fsr1l	equ	0xFE1
 10588                           indf2	equ	0xFDF
 10589                           postinc2	equ	0xFDE
 10590                           postdec2	equ	0xFDD
 10591                           fsr2h	equ	0xFDA
 10592                           fsr2l	equ	0xFD9
 10593                           status	equ	0xFD8
 10594                           
 10595 ;; *************** function _GETxAPIxRW *****************
 10596 ;; Defined at:
 10597 ;;		line 190 in file "../api.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;  index           1    wreg     unsigned char 
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;  index           1   31[COMRAM] unsigned char 
 10602 ;; Return value:  Size  Location     Type
 10603 ;;                  2    0[BANK0 ] unsigned int 
 10604 ;; Registers used:
 10605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10606 ;; Tracked objects:
 10607 ;;		On entry : 0/0
 10608 ;;		On exit  : 0/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10611 ;;      Params:         0       2       0       0       0       0       0       0       0
 10612 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10613 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10614 ;;      Totals:         1       2       0       0       0       0       0       0       0
 10615 ;;Total ram usage:        3 bytes
 10616 ;; Hardware stack levels used:    1
 10617 ;; Hardware stack levels required when called:    3
 10618 ;; This function calls:
 10619 ;;		Nothing
 10620 ;; This function is called by:
 10621 ;;		_TranslateMessage
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           	psect	text24
 10626  003CC8                     __ptext24:
 10627                           	opt stack 0
 10628  003CC8                     _GETxAPIxRW:
 10629                           	opt stack 25
 10630                           
 10631                           ;incstack = 0
 10632                           ;GETxAPIxRW@index stored from wreg
 10633  003CC8  6E20               	movwf	GETxAPIxRW@index,c
 10634                           
 10635                           ;api.c: 191: return API_RW[index];
 10636  003CCA  5020               	movf	GETxAPIxRW@index,w,c
 10637  003CCC  0D02               	mullw	2
 10638  003CCE  0E1C               	movlw	low _API_RW
 10639  003CD0  24F3               	addwf	prodl,w,c
 10640  003CD2  6ED9               	movwf	fsr2l,c
 10641  003CD4  0E03               	movlw	high _API_RW
 10642  003CD6  20F4               	addwfc	prodh,w,c
 10643  003CD8  6EDA               	movwf	fsr2h,c
 10644  003CDA  CFDE F090          	movff	postinc2,?_GETxAPIxRW
 10645  003CDE  CFDD F091          	movff	postdec2,?_GETxAPIxRW+1
 10646  003CE2  0012               	return	
 10647  003CE4                     __end_of_GETxAPIxRW:
 10648                           	opt stack 0
 10649                           tblptru	equ	0xFF8
 10650                           tblptrh	equ	0xFF7
 10651                           tblptrl	equ	0xFF6
 10652                           tablat	equ	0xFF5
 10653                           prodh	equ	0xFF4
 10654                           prodl	equ	0xFF3
 10655                           intcon	equ	0xFF2
 10656                           postinc0	equ	0xFEE
 10657                           wreg	equ	0xFE8
 10658                           postdec1	equ	0xFE5
 10659                           fsr1h	equ	0xFE2
 10660                           fsr1l	equ	0xFE1
 10661                           indf2	equ	0xFDF
 10662                           postinc2	equ	0xFDE
 10663                           postdec2	equ	0xFDD
 10664                           fsr2h	equ	0xFDA
 10665                           fsr2l	equ	0xFD9
 10666                           status	equ	0xFD8
 10667                           
 10668 ;; *************** function _EUSART1_Read *****************
 10669 ;; Defined at:
 10670 ;;		line 142 in file "../eusart1.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  readValue       1   31[COMRAM] unsigned char 
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      unsigned char 
 10677 ;; Registers used:
 10678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0
 10685 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10687 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10688 ;;Total ram usage:        1 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    3
 10691 ;; This function calls:
 10692 ;;		Nothing
 10693 ;; This function is called by:
 10694 ;;		_READxRECEIVEDxMESSAGE
 10695 ;; This function uses a non-reentrant model
 10696 ;;
 10697                           
 10698                           	psect	text25
 10699  003BAC                     __ptext25:
 10700                           	opt stack 0
 10701  003BAC                     _EUSART1_Read:
 10702                           	opt stack 26
 10703                           
 10704                           ;eusart1.c: 143: uint8_t readValue = 0;
 10705                           
 10706                           ;incstack = 0
 10707  003BAC  0E00               	movlw	0
 10708  003BAE  6E20               	movwf	EUSART1_Read@readValue,c
 10709  003BB0                     l5427:
 10710  003BB0  503A               	movf	_eusart1RxCount,w,c	;volatile
 10711  003BB2  B4D8               	btfsc	status,2,c
 10712  003BB4  D7FD               	goto	l5427
 10713                           
 10714                           ;eusart1.c: 146: }
 10715                           ;eusart1.c: 148: PIE1bits.RC1IE = 0;
 10716  003BB6  9A9D               	bcf	3997,5,c	;volatile
 10717                           
 10718                           ;eusart1.c: 150: readValue = eusart1RxBuffer[eusart1RxTail++];
 10719  003BB8  503C               	movf	_eusart1RxTail,w,c
 10720  003BBA  0D01               	mullw	1
 10721  003BBC  0E00               	movlw	low _eusart1RxBuffer
 10722  003BBE  24F3               	addwf	prodl,w,c
 10723  003BC0  6ED9               	movwf	fsr2l,c
 10724  003BC2  0E01               	movlw	high _eusart1RxBuffer
 10725  003BC4  20F4               	addwfc	prodh,w,c
 10726  003BC6  6EDA               	movwf	fsr2h,c
 10727  003BC8  50DF               	movf	indf2,w,c
 10728  003BCA  6E20               	movwf	EUSART1_Read@readValue,c
 10729  003BCC  2A3C               	incf	_eusart1RxTail,f,c
 10730                           
 10731                           ;eusart1.c: 151: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 10732  003BCE  0E7D               	movlw	125
 10733  003BD0  643C               	cpfsgt	_eusart1RxTail,c
 10734  003BD2  D002               	goto	l5437
 10735                           
 10736                           ;eusart1.c: 152: eusart1RxTail = 0;
 10737  003BD4  0E00               	movlw	0
 10738  003BD6  6E3C               	movwf	_eusart1RxTail,c
 10739  003BD8                     l5437:
 10740                           
 10741                           ;eusart1.c: 153: }
 10742                           ;eusart1.c: 154: eusart1RxCount--;
 10743  003BD8  063A               	decf	_eusart1RxCount,f,c	;volatile
 10744                           
 10745                           ;eusart1.c: 155: PIE1bits.RC1IE = 1;
 10746  003BDA  8A9D               	bsf	3997,5,c	;volatile
 10747                           
 10748                           ;eusart1.c: 157: return readValue;
 10749  003BDC  5020               	movf	EUSART1_Read@readValue,w,c
 10750  003BDE  0012               	return	
 10751  003BE0                     __end_of_EUSART1_Read:
 10752                           	opt stack 0
 10753                           tblptru	equ	0xFF8
 10754                           tblptrh	equ	0xFF7
 10755                           tblptrl	equ	0xFF6
 10756                           tablat	equ	0xFF5
 10757                           prodh	equ	0xFF4
 10758                           prodl	equ	0xFF3
 10759                           intcon	equ	0xFF2
 10760                           postinc0	equ	0xFEE
 10761                           wreg	equ	0xFE8
 10762                           postdec1	equ	0xFE5
 10763                           fsr1h	equ	0xFE2
 10764                           fsr1l	equ	0xFE1
 10765                           indf2	equ	0xFDF
 10766                           postinc2	equ	0xFDE
 10767                           postdec2	equ	0xFDD
 10768                           fsr2h	equ	0xFDA
 10769                           fsr2l	equ	0xFD9
 10770                           status	equ	0xFD8
 10771                           
 10772 ;; *************** function _Init_Timers *****************
 10773 ;; Defined at:
 10774 ;;		line 181 in file "../Main.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;		None
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;		None
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  1    wreg      void 
 10781 ;; Registers used:
 10782 ;;		wreg, status,2
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10788 ;;      Params:         0       0       0       0       0       0       0       0       0
 10789 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10790 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10791 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10792 ;;Total ram usage:        0 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    3
 10795 ;; This function calls:
 10796 ;;		Nothing
 10797 ;; This function is called by:
 10798 ;;		_main
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text26
 10803  003CE4                     __ptext26:
 10804                           	opt stack 0
 10805  003CE4                     _Init_Timers:
 10806                           	opt stack 27
 10807                           
 10808                           ;Main.c: 183: RCONbits.IPEN = 1;
 10809                           
 10810                           ;incstack = 0
 10811  003CE4  8ED0               	bsf	4048,7,c	;volatile
 10812                           
 10813                           ;Main.c: 184: INTCON = 0xA0;
 10814  003CE6  0EA0               	movlw	160
 10815  003CE8  6EF2               	movwf	intcon,c	;volatile
 10816                           
 10817                           ;Main.c: 185: INTCON2 = 0x84;
 10818  003CEA  0E84               	movlw	132
 10819  003CEC  6EF1               	movwf	intcon2,c	;volatile
 10820                           
 10821                           ;Main.c: 186: TMR0H = 0x0;
 10822  003CEE  0E00               	movlw	0
 10823  003CF0  6ED7               	movwf	4055,c	;volatile
 10824                           
 10825                           ;Main.c: 187: TMR0L = 0x0;
 10826  003CF2  0E00               	movlw	0
 10827  003CF4  6ED6               	movwf	4054,c	;volatile
 10828                           
 10829                           ;Main.c: 188: T0CON = 0xC3;
 10830  003CF6  0EC3               	movlw	195
 10831  003CF8  6ED5               	movwf	4053,c	;volatile
 10832  003CFA  0012               	return		;funcret
 10833  003CFC                     __end_of_Init_Timers:
 10834                           	opt stack 0
 10835                           tblptru	equ	0xFF8
 10836                           tblptrh	equ	0xFF7
 10837                           tblptrl	equ	0xFF6
 10838                           tablat	equ	0xFF5
 10839                           prodh	equ	0xFF4
 10840                           prodl	equ	0xFF3
 10841                           intcon	equ	0xFF2
 10842                           intcon2	equ	0xFF1
 10843                           postinc0	equ	0xFEE
 10844                           wreg	equ	0xFE8
 10845                           postdec1	equ	0xFE5
 10846                           fsr1h	equ	0xFE2
 10847                           fsr1l	equ	0xFE1
 10848                           indf2	equ	0xFDF
 10849                           postinc2	equ	0xFDE
 10850                           postdec2	equ	0xFDD
 10851                           fsr2h	equ	0xFDA
 10852                           fsr2l	equ	0xFD9
 10853                           status	equ	0xFD8
 10854                           
 10855 ;; *************** function _Init_Pwm *****************
 10856 ;; Defined at:
 10857 ;;		line 194 in file "../Main.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;		None
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;		None
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  1    wreg      void 
 10864 ;; Registers used:
 10865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10871 ;;      Params:         0       0       0       0       0       0       0       0       0
 10872 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10873 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10874 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10875 ;;Total ram usage:        0 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:    7
 10878 ;; This function calls:
 10879 ;;		_SETxAPIxVAL
 10880 ;; This function is called by:
 10881 ;;		_main
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text27
 10886  003C88                     __ptext27:
 10887                           	opt stack 0
 10888  003C88                     _Init_Pwm:
 10889                           	opt stack 23
 10890                           
 10891                           ;Main.c: 197: SETxAPIxVAL(69, 1);
 10892                           
 10893                           ;incstack = 0
 10894  003C88  0E00               	movlw	0
 10895  003C8A  0100               	movlb	0	; () banked
 10896  003C8C  6FAD               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10897  003C8E  0E01               	movlw	1
 10898  003C90  6FAC               	movwf	SETxAPIxVAL@value& (0+255),b
 10899  003C92  0E45               	movlw	69
 10900  003C94  EC49  F01D         	call	_SETxAPIxVAL
 10901                           
 10902                           ;Main.c: 198: PR2=0xFF;
 10903  003C98  68CB               	setf	4043,c	;volatile
 10904                           
 10905                           ;Main.c: 199: CCPR1L = 0x7F;
 10906  003C9A  0E7F               	movlw	127
 10907  003C9C  6EBE               	movwf	4030,c	;volatile
 10908                           
 10909                           ;Main.c: 200: CCP1CON = 0x0F;
 10910  003C9E  0E0F               	movlw	15
 10911  003CA0  6EBD               	movwf	4029,c	;volatile
 10912                           
 10913                           ;Main.c: 201: T2CON = 0x04;
 10914  003CA2  0E04               	movlw	4
 10915  003CA4  6ECA               	movwf	4042,c	;volatile
 10916                           
 10917                           ;Main.c: 202: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 10918  003CA6  9494               	bcf	3988,2,c	;volatile
 10919  003CA8  9094               	bcf	3988,0,c	;volatile
 10920  003CAA  0012               	return		;funcret
 10921  003CAC                     __end_of_Init_Pwm:
 10922                           	opt stack 0
 10923                           tblptru	equ	0xFF8
 10924                           tblptrh	equ	0xFF7
 10925                           tblptrl	equ	0xFF6
 10926                           tablat	equ	0xFF5
 10927                           prodh	equ	0xFF4
 10928                           prodl	equ	0xFF3
 10929                           intcon	equ	0xFF2
 10930                           intcon2	equ	0xFF1
 10931                           postinc0	equ	0xFEE
 10932                           wreg	equ	0xFE8
 10933                           postdec1	equ	0xFE5
 10934                           fsr1h	equ	0xFE2
 10935                           fsr1l	equ	0xFE1
 10936                           indf2	equ	0xFDF
 10937                           postinc2	equ	0xFDE
 10938                           postdec2	equ	0xFDD
 10939                           fsr2h	equ	0xFDA
 10940                           fsr2l	equ	0xFD9
 10941                           status	equ	0xFD8
 10942                           
 10943 ;; *************** function _SETxAPIxVAL *****************
 10944 ;; Defined at:
 10945 ;;		line 194 in file "../api.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;  index           1    wreg     unsigned char 
 10948 ;;  value           2   28[BANK0 ] unsigned int 
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  index           1   32[BANK0 ] unsigned char 
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  1    wreg      void 
 10953 ;; Registers used:
 10954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10960 ;;      Params:         0       2       0       0       0       0       0       0       0
 10961 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10962 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10963 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10964 ;;Total ram usage:        5 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    6
 10967 ;; This function calls:
 10968 ;;		_SENDxMESSAGE
 10969 ;; This function is called by:
 10970 ;;		_Init_Pwm
 10971 ;;		_Update_StateMchn
 10972 ;;		_Train_Path
 10973 ;;		_TranslateMessage
 10974 ;;		_Debounce_Inputs
 10975 ;;		_Junction
 10976 ;;		_Train_Move_Left_Start
 10977 ;;		_Train_Move_Left_Brake
 10978 ;;		_Train_Move_Right_Start
 10979 ;;		_Train_Move_Right_Brake
 10980 ;;		_SETxPWM
 10981 ;;		_INCRxAPIxVAL
 10982 ;;		_DECRxAPIxVAL
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           	psect	text28
 10987  003A92                     __ptext28:
 10988                           	opt stack 0
 10989  003A92                     _SETxAPIxVAL:
 10990                           	opt stack 20
 10991                           
 10992                           ;incstack = 0
 10993                           ;SETxAPIxVAL@index stored from wreg
 10994  003A92  0100               	movlb	0	; () banked
 10995  003A94  6FB0               	movwf	SETxAPIxVAL@index& (0+255),b
 10996                           
 10997                           ;api.c: 195: if(API[index] != value){
 10998  003A96  0100               	movlb	0	; () banked
 10999  003A98  51B0               	movf	SETxAPIxVAL@index& (0+255),w,b
 11000  003A9A  0D02               	mullw	2
 11001  003A9C  0EFC               	movlw	low _API
 11002  003A9E  24F3               	addwf	prodl,w,c
 11003  003AA0  6ED9               	movwf	fsr2l,c
 11004  003AA2  0E01               	movlw	high _API
 11005  003AA4  20F4               	addwfc	prodh,w,c
 11006  003AA6  6EDA               	movwf	fsr2h,c
 11007  003AA8  0100               	movlb	0	; () banked
 11008  003AAA  51AC               	movf	SETxAPIxVAL@value& (0+255),w,b
 11009  003AAC  18DE               	xorwf	postinc2,w,c
 11010  003AAE  E105               	bnz	u6200
 11011  003AB0  0100               	movlb	0	; () banked
 11012  003AB2  51AD               	movf	(SETxAPIxVAL@value+1)& (0+255),w,b
 11013  003AB4  18DE               	xorwf	postinc2,w,c
 11014  003AB6  B4D8               	btfsc	status,2,c
 11015  003AB8  0012               	return	
 11016  003ABA                     u6200:
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;api.c: 196: API[index] = value;
 11020  003ABA  0100               	movlb	0	; () banked
 11021  003ABC  51B0               	movf	SETxAPIxVAL@index& (0+255),w,b
 11022  003ABE  0D02               	mullw	2
 11023  003AC0  0EFC               	movlw	low _API
 11024  003AC2  24F3               	addwf	prodl,w,c
 11025  003AC4  6ED9               	movwf	fsr2l,c
 11026  003AC6  0E01               	movlw	high _API
 11027  003AC8  20F4               	addwfc	prodh,w,c
 11028  003ACA  6EDA               	movwf	fsr2h,c
 11029  003ACC  C0AC  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11030  003AD0  C0AD  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;api.c: 197: SENDxMESSAGE(index, value);
 11034  003AD4  C0AC  F0A9         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11035  003AD8  C0AD  F0AA         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11036  003ADC  0100               	movlb	0	; () banked
 11037  003ADE  51B0               	movf	SETxAPIxVAL@index& (0+255),w,b
 11038  003AE0  EC31  F01E         	call	_SENDxMESSAGE
 11039  003AE4  0012               	return	
 11040  003AE6                     __end_of_SETxAPIxVAL:
 11041                           	opt stack 0
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           intcon2	equ	0xFF1
 11050                           postinc0	equ	0xFEE
 11051                           wreg	equ	0xFE8
 11052                           postdec1	equ	0xFE5
 11053                           fsr1h	equ	0xFE2
 11054                           fsr1l	equ	0xFE1
 11055                           indf2	equ	0xFDF
 11056                           postinc2	equ	0xFDE
 11057                           postdec2	equ	0xFDD
 11058                           fsr2h	equ	0xFDA
 11059                           fsr2l	equ	0xFD9
 11060                           status	equ	0xFD8
 11061                           
 11062 ;; *************** function _SENDxMESSAGE *****************
 11063 ;; Defined at:
 11064 ;;		line 178 in file "../terminal.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;  index           1    wreg     unsigned char 
 11067 ;;  value           2   25[BANK0 ] unsigned int 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;  index           1   27[BANK0 ] unsigned char 
 11070 ;; Return value:  Size  Location     Type
 11071 ;;                  1    wreg      void 
 11072 ;; Registers used:
 11073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11074 ;; Tracked objects:
 11075 ;;		On entry : 0/0
 11076 ;;		On exit  : 0/0
 11077 ;;		Unchanged: 0/0
 11078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11079 ;;      Params:         0       2       0       0       0       0       0       0       0
 11080 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11081 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11082 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11083 ;;Total ram usage:        3 bytes
 11084 ;; Hardware stack levels used:    1
 11085 ;; Hardware stack levels required when called:    5
 11086 ;; This function calls:
 11087 ;;		_printf
 11088 ;; This function is called by:
 11089 ;;		_TranslateMessage
 11090 ;;		_SETxAPIxVAL
 11091 ;;		_INCRxAPIxVAL
 11092 ;;		_DECRxAPIxVAL
 11093 ;; This function uses a non-reentrant model
 11094 ;;
 11095                           
 11096                           	psect	text29
 11097  003C62                     __ptext29:
 11098                           	opt stack 0
 11099  003C62                     _SENDxMESSAGE:
 11100                           	opt stack 20
 11101                           
 11102                           ;incstack = 0
 11103                           ;SENDxMESSAGE@index stored from wreg
 11104  003C62  0100               	movlb	0	; () banked
 11105  003C64  6FAB               	movwf	SENDxMESSAGE@index& (0+255),b
 11106                           
 11107                           ;terminal.c: 184: printf("\r\nM#%d %d\r\n", index, value);
 11108  003C66  0E0C               	movlw	low STR_9
 11109  003C68  0100               	movlb	0	; () banked
 11110  003C6A  6F9B               	movwf	printf@f& (0+255),b
 11111  003C6C  0E08               	movlw	high STR_9
 11112  003C6E  0100               	movlb	0	; () banked
 11113  003C70  6F9C               	movwf	(printf@f+1)& (0+255),b
 11114  003C72  C0AB  F09D         	movff	SENDxMESSAGE@index,?_printf+2
 11115  003C76  0100               	movlb	0	; () banked
 11116  003C78  6B9E               	clrf	(?_printf+3)& (0+255),b
 11117  003C7A  C0A9  F09F         	movff	SENDxMESSAGE@value,?_printf+4
 11118  003C7E  C0AA  F0A0         	movff	SENDxMESSAGE@value+1,?_printf+5
 11119  003C82  EC39  F014         	call	_printf	;wreg free
 11120  003C86  0012               	return		;funcret
 11121  003C88                     __end_of_SENDxMESSAGE:
 11122                           	opt stack 0
 11123                           tblptru	equ	0xFF8
 11124                           tblptrh	equ	0xFF7
 11125                           tblptrl	equ	0xFF6
 11126                           tablat	equ	0xFF5
 11127                           prodh	equ	0xFF4
 11128                           prodl	equ	0xFF3
 11129                           intcon	equ	0xFF2
 11130                           intcon2	equ	0xFF1
 11131                           postinc0	equ	0xFEE
 11132                           wreg	equ	0xFE8
 11133                           postdec1	equ	0xFE5
 11134                           fsr1h	equ	0xFE2
 11135                           fsr1l	equ	0xFE1
 11136                           indf2	equ	0xFDF
 11137                           postinc2	equ	0xFDE
 11138                           postdec2	equ	0xFDD
 11139                           fsr2h	equ	0xFDA
 11140                           fsr2l	equ	0xFD9
 11141                           status	equ	0xFD8
 11142                           
 11143 ;; *************** function _printf *****************
 11144 ;; Defined at:
 11145 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;  f               2   11[BANK0 ] PTR const unsigned char 
 11148 ;;		 -> STR_9(12), STR_8(9), STR_7(9), STR_6(9), 
 11149 ;;		 -> STR_5(9), STR_4(9), STR_3(9), STR_2(9), 
 11150 ;;		 -> STR_1(7), 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  tmpval          4    0        struct .
 11153 ;;  cp              3    0        PTR const unsigned char 
 11154 ;;  val             2   22[BANK0 ] unsigned int 
 11155 ;;  ap              2   18[BANK0 ] PTR void [1]
 11156 ;;		 -> ?_printf(2), 
 11157 ;;  len             2    0        unsigned int 
 11158 ;;  c               1   24[BANK0 ] char 
 11159 ;;  prec            1   21[BANK0 ] char 
 11160 ;;  flag            1   20[BANK0 ] unsigned char 
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  2   11[BANK0 ] int 
 11163 ;; Registers used:
 11164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11170 ;;      Params:         0       6       0       0       0       0       0       0       0
 11171 ;;      Locals:         0       7       0       0       0       0       0       0       0
 11172 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11173 ;;      Totals:         0      14       0       0       0       0       0       0       0
 11174 ;;Total ram usage:       14 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    4
 11177 ;; This function calls:
 11178 ;;		___lwdiv
 11179 ;;		___lwmod
 11180 ;;		_putch
 11181 ;; This function is called by:
 11182 ;;		_READxRECEIVEDxMESSAGE
 11183 ;;		_TranslateMessage
 11184 ;;		_SENDxMESSAGE
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           	psect	text30
 11189  002872                     __ptext30:
 11190                           	opt stack 0
 11191  002872                     _printf:
 11192                           	opt stack 20
 11193                           
 11194                           ;doprnt.c: 466: va_list ap;
 11195                           ;doprnt.c: 499: signed char c;
 11196                           ;doprnt.c: 506: signed char prec;
 11197                           ;doprnt.c: 508: unsigned char flag;
 11198                           ;doprnt.c: 523: union {
 11199                           ;doprnt.c: 524: unsigned long vd;
 11200                           ;doprnt.c: 525: double integ;
 11201                           ;doprnt.c: 526: } tmpval;
 11202                           ;doprnt.c: 528: unsigned int val;
 11203                           ;doprnt.c: 529: unsigned len;
 11204                           ;doprnt.c: 530: const char * cp;
 11205                           ;doprnt.c: 533: *ap = __va_start();
 11206                           
 11207                           ;incstack = 0
 11208  002872  0E9D               	movlw	low (?_printf+2)
 11209  002874  0100               	movlb	0	; () banked
 11210  002876  6FA2               	movwf	printf@ap& (0+255),b
 11211  002878  0E00               	movlw	high (?_printf+2)
 11212  00287A  0100               	movlb	0	; () banked
 11213  00287C  6FA3               	movwf	(printf@ap+1)& (0+255),b
 11214                           
 11215                           ;doprnt.c: 536: while(c = *f++) {
 11216  00287E  D094               	goto	l6695
 11217  002880                     l6649:
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;doprnt.c: 538: if(c != '%')
 11221  002880  0E25               	movlw	37
 11222  002882  0100               	movlb	0	; () banked
 11223  002884  19A8               	xorwf	printf@c& (0+255),w,b
 11224  002886  B4D8               	btfsc	status,2,c
 11225  002888  D005               	goto	l6653
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;doprnt.c: 540: {
 11229                           ;doprnt.c: 541: (putch(c) );
 11230  00288A  0100               	movlb	0	; () banked
 11231  00288C  51A8               	movf	printf@c& (0+255),w,b
 11232  00288E  EC7E  F01E         	call	_putch
 11233                           
 11234                           ;doprnt.c: 542: continue;
 11235  002892  D08A               	goto	l6695
 11236  002894                     l6653:
 11237                           
 11238                           ;doprnt.c: 543: }
 11239                           ;doprnt.c: 548: flag = 0;
 11240  002894  0E00               	movlw	0
 11241  002896  0100               	movlb	0	; () banked
 11242  002898  6FA4               	movwf	printf@flag& (0+255),b
 11243                           
 11244                           ; BSR set to: 0
 11245                           
 11246                           ; BSR set to: 0
 11247                           
 11248                           ; BSR set to: 0
 11249                           ;doprnt.c: 822: }
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;doprnt.c: 813: continue;
 11253                           
 11254                           ;doprnt.c: 802: default:
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;doprnt.c: 698: case 'i':
 11258                           ;doprnt.c: 699: break;
 11259                           
 11260                           ; BSR set to: 0
 11261                           
 11262                           ;doprnt.c: 697: case 'd':
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;doprnt.c: 638: goto alldone;
 11266                           
 11267                           ;doprnt.c: 637: case 0:
 11268                           
 11269                           ;doprnt.c: 635: switch(c = *f++) {
 11270  00289A  C09B  FFF6         	movff	printf@f,tblptrl
 11271  00289E  C09C  FFF7         	movff	printf@f+1,tblptrh
 11272  0028A2  0100               	movlb	0	; () banked
 11273  0028A4  4B9B               	infsnz	printf@f& (0+255),f,b
 11274  0028A6  2B9C               	incf	(printf@f+1)& (0+255),f,b
 11275  0028A8                     	if	0	;tblptru may be non-zero
 11276  0028A8                     	endif
 11277  0028A8                     	if	0	;tblptru may be non-zero
 11278  0028A8                     	endif
 11279  0028A8  0008               	tblrd		*
 11280  0028AA  CFF5 F0A8          	movff	tablat,printf@c
 11281  0028AE  0100               	movlb	0	; () banked
 11282  0028B0  51A8               	movf	printf@c& (0+255),w,b
 11283                           
 11284                           ; Switch size 1, requested type "space"
 11285                           ; Number of cases is 3, Range of values is 0 to 105
 11286                           ; switch strategies available:
 11287                           ; Name         Instructions Cycles
 11288                           ; simple_byte           10     6 (average)
 11289                           ;	Chosen strategy is simple_byte
 11290  0028B2  0A00               	xorlw	0	; case 0
 11291  0028B4  B4D8               	btfsc	status,2,c
 11292  0028B6  0012               	return	
 11293  0028B8  0A64               	xorlw	100	; case 100
 11294  0028BA  B4D8               	btfsc	status,2,c
 11295  0028BC  D003               	goto	l6659
 11296  0028BE  0A0D               	xorlw	13	; case 105
 11297  0028C0  A4D8               	btfss	status,2,c
 11298  0028C2  D072               	goto	l6695
 11299  0028C4                     l6659:
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;doprnt.c: 1253: {
 11303                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11304  0028C4  C0A2  FFD9         	movff	printf@ap,fsr2l
 11305  0028C8  C0A3  FFDA         	movff	printf@ap+1,fsr2h
 11306  0028CC  CFDE F0A6          	movff	postinc2,printf@val
 11307  0028D0  CFDD F0A7          	movff	postdec2,printf@val+1
 11308                           
 11309                           ; BSR set to: 0
 11310  0028D4  0E02               	movlw	2
 11311  0028D6  0100               	movlb	0	; () banked
 11312  0028D8  27A2               	addwf	printf@ap& (0+255),f,b
 11313  0028DA  0E00               	movlw	0
 11314  0028DC  23A3               	addwfc	(printf@ap+1)& (0+255),f,b
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;doprnt.c: 1261: if((int)val < 0) {
 11318  0028DE  0100               	movlb	0	; () banked
 11319  0028E0  AFA7               	btfss	(printf@val+1)& (0+255),7,b
 11320  0028E2  D008               	goto	l6669
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;doprnt.c: 1262: flag |= 0x03;
 11324  0028E4  0E03               	movlw	3
 11325  0028E6  0100               	movlb	0	; () banked
 11326  0028E8  13A4               	iorwf	printf@flag& (0+255),f,b
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;doprnt.c: 1263: val = -val;
 11330  0028EA  0100               	movlb	0	; () banked
 11331  0028EC  6DA6               	negf	printf@val& (0+255),b
 11332  0028EE  1FA7               	comf	(printf@val+1)& (0+255),f,b
 11333  0028F0  B0D8               	btfsc	status,0,c
 11334  0028F2  2BA7               	incf	(printf@val+1)& (0+255),f,b
 11335  0028F4                     l6669:
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;doprnt.c: 1264: }
 11339                           ;doprnt.c: 1266: }
 11340                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11341  0028F4  0E01               	movlw	1
 11342  0028F6  0100               	movlb	0	; () banked
 11343  0028F8  6FA8               	movwf	printf@c& (0+255),b
 11344  0028FA                     l6671:
 11345                           
 11346                           ; BSR set to: 0
 11347  0028FA  0E05               	movlw	5
 11348  0028FC  0100               	movlb	0	; () banked
 11349  0028FE  19A8               	xorwf	printf@c& (0+255),w,b
 11350  002900  B4D8               	btfsc	status,2,c
 11351  002902  D016               	goto	l6683
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;doprnt.c: 1306: if(val < dpowers[c])
 11355                           
 11356                           ; BSR set to: 0
 11357                           
 11358                           ; BSR set to: 0
 11359  002904  0100               	movlb	0	; () banked
 11360  002906  51A8               	movf	printf@c& (0+255),w,b
 11361  002908  0D02               	mullw	2
 11362  00290A  0E01               	movlw	low _dpowers
 11363  00290C  24F3               	addwf	prodl,w,c
 11364  00290E  6EF6               	movwf	tblptrl,c
 11365  002910  0E08               	movlw	high _dpowers
 11366  002912  20F4               	addwfc	prodh,w,c
 11367  002914  6EF7               	movwf	tblptrh,c
 11368  002916                     	if	0	;There are less than 3 active tblptr bytes
 11369  002916                     	endif
 11370  002916  0009               	tblrd		*+
 11371  002918  50F5               	movf	tablat,w,c
 11372  00291A  0100               	movlb	0	; () banked
 11373  00291C  5DA6               	subwf	printf@val& (0+255),w,b
 11374  00291E  0009               	tblrd		*+
 11375  002920  50F5               	movf	tablat,w,c
 11376  002922  0100               	movlb	0	; () banked
 11377  002924  59A7               	subwfb	(printf@val+1)& (0+255),w,b
 11378  002926  A0D8               	btfss	status,0,c
 11379  002928  D003               	goto	l6683
 11380                           
 11381                           ; BSR set to: 0
 11382                           
 11383                           ; BSR set to: 0
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;doprnt.c: 1307: break;
 11387  00292A  0100               	movlb	0	; () banked
 11388  00292C  2BA8               	incf	printf@c& (0+255),f,b
 11389  00292E  D7E5               	goto	l6671
 11390  002930                     l6683:
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;doprnt.c: 1422: {
 11394                           ;doprnt.c: 1438: if(flag & 0x03)
 11395  002930  C0A4  F0A1         	movff	printf@flag,??_printf
 11396  002934  0E03               	movlw	3
 11397  002936  0100               	movlb	0	; () banked
 11398  002938  17A1               	andwf	??_printf& (0+255),f,b
 11399  00293A  B4D8               	btfsc	status,2,c
 11400  00293C  D003               	goto	l6687
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;doprnt.c: 1439: (putch('-') );
 11404  00293E  0E2D               	movlw	45
 11405  002940  EC7E  F01E         	call	_putch
 11406  002944                     l6687:
 11407                           
 11408                           ;doprnt.c: 1469: }
 11409                           ;doprnt.c: 1472: prec = c;
 11410  002944  C0A8  F0A5         	movff	printf@c,printf@prec
 11411                           
 11412                           ;doprnt.c: 1474: while(prec--) {
 11413  002948  D029               	goto	l6693
 11414  00294A                     l6689:
 11415                           
 11416                           ;doprnt.c: 1478: {
 11417                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11418  00294A  0100               	movlb	0	; () banked
 11419  00294C  51A5               	movf	printf@prec& (0+255),w,b
 11420  00294E  0D02               	mullw	2
 11421  002950  0E01               	movlw	low _dpowers
 11422  002952  24F3               	addwf	prodl,w,c
 11423  002954  6EF6               	movwf	tblptrl,c
 11424  002956  0E08               	movlw	high _dpowers
 11425  002958  20F4               	addwfc	prodh,w,c
 11426  00295A  6EF7               	movwf	tblptrh,c
 11427  00295C                     	if	0	;There are less than 3 active tblptr bytes
 11428  00295C                     	endif
 11429  00295C  0009               	tblrd		*+
 11430  00295E  CFF5 F092          	movff	tablat,___lwdiv@divisor
 11431  002962  000A               	tblrd		*-
 11432  002964  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
 11433  002968  C0A6  F090         	movff	printf@val,___lwdiv@dividend
 11434  00296C  C0A7  F091         	movff	printf@val+1,___lwdiv@dividend+1
 11435  002970  EC72  F01C         	call	___lwdiv	;wreg free
 11436  002974  C090  F097         	movff	?___lwdiv,___lwmod@dividend
 11437  002978  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
 11438  00297C  0E00               	movlw	0
 11439  00297E  0100               	movlb	0	; () banked
 11440  002980  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
 11441  002982  0E0A               	movlw	10
 11442  002984  6F99               	movwf	___lwmod@divisor& (0+255),b
 11443  002986  EC1B  F01D         	call	___lwmod	;wreg free
 11444  00298A  0100               	movlb	0	; () banked
 11445  00298C  5197               	movf	?___lwmod& (0+255),w,b
 11446  00298E  0F30               	addlw	48
 11447  002990  0100               	movlb	0	; () banked
 11448  002992  6FA8               	movwf	printf@c& (0+255),b
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;doprnt.c: 1523: }
 11452                           ;doprnt.c: 1524: (putch(c) );
 11453  002994  0100               	movlb	0	; () banked
 11454  002996  51A8               	movf	printf@c& (0+255),w,b
 11455  002998  EC7E  F01E         	call	_putch
 11456  00299C                     l6693:
 11457  00299C  0100               	movlb	0	; () banked
 11458  00299E  07A5               	decf	printf@prec& (0+255),f,b
 11459  0029A0  0100               	movlb	0	; () banked
 11460  0029A2  29A5               	incf	printf@prec& (0+255),w,b
 11461  0029A4  A4D8               	btfss	status,2,c
 11462  0029A6  D7D1               	goto	l6689
 11463  0029A8                     l6695:
 11464  0029A8  C09B  FFF6         	movff	printf@f,tblptrl
 11465  0029AC  C09C  FFF7         	movff	printf@f+1,tblptrh
 11466  0029B0  0100               	movlb	0	; () banked
 11467  0029B2  4B9B               	infsnz	printf@f& (0+255),f,b
 11468  0029B4  2B9C               	incf	(printf@f+1)& (0+255),f,b
 11469  0029B6                     	if	0	;tblptru may be non-zero
 11470  0029B6                     	endif
 11471  0029B6                     	if	0	;tblptru may be non-zero
 11472  0029B6                     	endif
 11473  0029B6  0008               	tblrd		*
 11474  0029B8  CFF5 F0A8          	movff	tablat,printf@c
 11475  0029BC  0100               	movlb	0	; () banked
 11476  0029BE  51A8               	movf	printf@c& (0+255),w,b
 11477  0029C0  B4D8               	btfsc	status,2,c
 11478  0029C2  0012               	return	
 11479  0029C4  D75D               	goto	l6649
 11480  0029C6                     __end_of_printf:
 11481                           	opt stack 0
 11482                           tblptru	equ	0xFF8
 11483                           tblptrh	equ	0xFF7
 11484                           tblptrl	equ	0xFF6
 11485                           tablat	equ	0xFF5
 11486                           prodh	equ	0xFF4
 11487                           prodl	equ	0xFF3
 11488                           intcon	equ	0xFF2
 11489                           intcon2	equ	0xFF1
 11490                           postinc0	equ	0xFEE
 11491                           wreg	equ	0xFE8
 11492                           postdec1	equ	0xFE5
 11493                           fsr1h	equ	0xFE2
 11494                           fsr1l	equ	0xFE1
 11495                           indf2	equ	0xFDF
 11496                           postinc2	equ	0xFDE
 11497                           postdec2	equ	0xFDD
 11498                           fsr2h	equ	0xFDA
 11499                           fsr2l	equ	0xFD9
 11500                           status	equ	0xFD8
 11501                           
 11502 ;; *************** function _putch *****************
 11503 ;; Defined at:
 11504 ;;		line 177 in file "../eusart1.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;  data            1    wreg     unsigned char 
 11507 ;; Auto vars:     Size  Location     Type
 11508 ;;  data            1   31[COMRAM] unsigned char 
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  1    wreg      void 
 11511 ;; Registers used:
 11512 ;;		wreg
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11518 ;;      Params:         0       0       0       0       0       0       0       0       0
 11519 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11520 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11521 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11522 ;;Total ram usage:        1 bytes
 11523 ;; Hardware stack levels used:    1
 11524 ;; Hardware stack levels required when called:    3
 11525 ;; This function calls:
 11526 ;;		Nothing
 11527 ;; This function is called by:
 11528 ;;		_printf
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           	psect	text31
 11533  003CFC                     __ptext31:
 11534                           	opt stack 0
 11535  003CFC                     _putch:
 11536                           	opt stack 20
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;incstack = 0
 11540                           ;putch@data stored from wreg
 11541  003CFC  6E20               	movwf	putch@data,c
 11542  003CFE                     l514:
 11543  003CFE  A89E               	btfss	3998,4,c	;volatile
 11544  003D00  D7FE               	goto	l514
 11545                           
 11546                           ;eusart1.c: 180: TXREG1 = data;
 11547  003D02  C020  FFAD         	movff	putch@data,4013	;volatile
 11548  003D06  0012               	return		;funcret
 11549  003D08                     __end_of_putch:
 11550                           	opt stack 0
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           intcon2	equ	0xFF1
 11559                           postinc0	equ	0xFEE
 11560                           wreg	equ	0xFE8
 11561                           postdec1	equ	0xFE5
 11562                           fsr1h	equ	0xFE2
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           fsr2h	equ	0xFDA
 11568                           fsr2l	equ	0xFD9
 11569                           status	equ	0xFD8
 11570                           
 11571 ;; *************** function ___lwmod *****************
 11572 ;; Defined at:
 11573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;  dividend        2    7[BANK0 ] unsigned int 
 11576 ;;  divisor         2    9[BANK0 ] unsigned int 
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;  counter         1   31[COMRAM] unsigned char 
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  2    7[BANK0 ] unsigned int 
 11581 ;; Registers used:
 11582 ;;		wreg, status,2, status,0
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11588 ;;      Params:         0       4       0       0       0       0       0       0       0
 11589 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11590 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11591 ;;      Totals:         1       4       0       0       0       0       0       0       0
 11592 ;;Total ram usage:        5 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    3
 11595 ;; This function calls:
 11596 ;;		Nothing
 11597 ;; This function is called by:
 11598 ;;		_printf
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	text32
 11603  003A36                     __ptext32:
 11604                           	opt stack 0
 11605  003A36                     ___lwmod:
 11606                           	opt stack 20
 11607                           
 11608                           ;incstack = 0
 11609  003A36  0100               	movlb	0	; () banked
 11610  003A38  5199               	movf	___lwmod@divisor& (0+255),w,b
 11611  003A3A  0100               	movlb	0	; () banked
 11612  003A3C  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 11613  003A3E  B4D8               	btfsc	status,2,c
 11614  003A40  D023               	goto	l1620
 11615                           
 11616                           ; BSR set to: 0
 11617  003A42  0E01               	movlw	1
 11618  003A44  6E20               	movwf	___lwmod@counter,c
 11619  003A46  D005               	goto	l6637
 11620  003A48                     l6635:
 11621                           
 11622                           ; BSR set to: 0
 11623  003A48  0100               	movlb	0	; () banked
 11624  003A4A  90D8               	bcf	status,0,c
 11625  003A4C  3799               	rlcf	___lwmod@divisor& (0+255),f,b
 11626  003A4E  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 11627  003A50  2A20               	incf	___lwmod@counter,f,c
 11628  003A52                     l6637:
 11629                           
 11630                           ; BSR set to: 0
 11631  003A52  0100               	movlb	0	; () banked
 11632  003A54  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 11633  003A56  D7F8               	goto	l6635
 11634  003A58                     l6639:
 11635                           
 11636                           ; BSR set to: 0
 11637  003A58  0100               	movlb	0	; () banked
 11638  003A5A  5199               	movf	___lwmod@divisor& (0+255),w,b
 11639  003A5C  0100               	movlb	0	; () banked
 11640  003A5E  5D97               	subwf	___lwmod@dividend& (0+255),w,b
 11641  003A60  0100               	movlb	0	; () banked
 11642  003A62  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11643  003A64  0100               	movlb	0	; () banked
 11644  003A66  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 11645  003A68  A0D8               	btfss	status,0,c
 11646  003A6A  D008               	goto	l6643
 11647                           
 11648                           ; BSR set to: 0
 11649  003A6C  0100               	movlb	0	; () banked
 11650  003A6E  5199               	movf	___lwmod@divisor& (0+255),w,b
 11651  003A70  0100               	movlb	0	; () banked
 11652  003A72  5F97               	subwf	___lwmod@dividend& (0+255),f,b
 11653  003A74  0100               	movlb	0	; () banked
 11654  003A76  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11655  003A78  0100               	movlb	0	; () banked
 11656  003A7A  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 11657  003A7C                     l6643:
 11658                           
 11659                           ; BSR set to: 0
 11660  003A7C  0100               	movlb	0	; () banked
 11661  003A7E  90D8               	bcf	status,0,c
 11662  003A80  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 11663  003A82  3399               	rrcf	___lwmod@divisor& (0+255),f,b
 11664                           
 11665                           ; BSR set to: 0
 11666  003A84  2E20               	decfsz	___lwmod@counter,f,c
 11667  003A86  D7E8               	goto	l6639
 11668  003A88                     l1620:
 11669                           
 11670                           ; BSR set to: 0
 11671  003A88  C097  F097         	movff	___lwmod@dividend,?___lwmod
 11672  003A8C  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
 11673                           
 11674                           ; BSR set to: 0
 11675  003A90  0012               	return		;funcret
 11676  003A92                     __end_of___lwmod:
 11677                           	opt stack 0
 11678                           tblptru	equ	0xFF8
 11679                           tblptrh	equ	0xFF7
 11680                           tblptrl	equ	0xFF6
 11681                           tablat	equ	0xFF5
 11682                           prodh	equ	0xFF4
 11683                           prodl	equ	0xFF3
 11684                           intcon	equ	0xFF2
 11685                           intcon2	equ	0xFF1
 11686                           postinc0	equ	0xFEE
 11687                           wreg	equ	0xFE8
 11688                           postdec1	equ	0xFE5
 11689                           fsr1h	equ	0xFE2
 11690                           fsr1l	equ	0xFE1
 11691                           indf2	equ	0xFDF
 11692                           postinc2	equ	0xFDE
 11693                           postdec2	equ	0xFDD
 11694                           fsr2h	equ	0xFDA
 11695                           fsr2l	equ	0xFD9
 11696                           status	equ	0xFD8
 11697                           
 11698 ;; *************** function ___lwdiv *****************
 11699 ;; Defined at:
 11700 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;  dividend        2    0[BANK0 ] unsigned int 
 11703 ;;  divisor         2    2[BANK0 ] unsigned int 
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;  quotient        2    5[BANK0 ] unsigned int 
 11706 ;;  counter         1    4[BANK0 ] unsigned char 
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  2    0[BANK0 ] unsigned int 
 11709 ;; Registers used:
 11710 ;;		wreg, status,2, status,0
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11716 ;;      Params:         0       4       0       0       0       0       0       0       0
 11717 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11719 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11720 ;;Total ram usage:        7 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; Hardware stack levels required when called:    3
 11723 ;; This function calls:
 11724 ;;		Nothing
 11725 ;; This function is called by:
 11726 ;;		_printf
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text33
 11731  0038E4                     __ptext33:
 11732                           	opt stack 0
 11733  0038E4                     ___lwdiv:
 11734                           	opt stack 20
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;incstack = 0
 11738  0038E4  0E00               	movlw	0
 11739  0038E6  0100               	movlb	0	; () banked
 11740  0038E8  6F96               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11741  0038EA  0E00               	movlw	0
 11742  0038EC  6F95               	movwf	___lwdiv@quotient& (0+255),b
 11743                           
 11744                           ; BSR set to: 0
 11745  0038EE  0100               	movlb	0	; () banked
 11746  0038F0  5192               	movf	___lwdiv@divisor& (0+255),w,b
 11747  0038F2  0100               	movlb	0	; () banked
 11748  0038F4  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11749  0038F6  B4D8               	btfsc	status,2,c
 11750  0038F8  D02C               	goto	l1610
 11751                           
 11752                           ; BSR set to: 0
 11753  0038FA  0E01               	movlw	1
 11754  0038FC  0100               	movlb	0	; () banked
 11755  0038FE  6F94               	movwf	___lwdiv@counter& (0+255),b
 11756  003900  D006               	goto	l6617
 11757  003902                     l6615:
 11758                           
 11759                           ; BSR set to: 0
 11760  003902  0100               	movlb	0	; () banked
 11761  003904  90D8               	bcf	status,0,c
 11762  003906  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
 11763  003908  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11764  00390A  0100               	movlb	0	; () banked
 11765  00390C  2B94               	incf	___lwdiv@counter& (0+255),f,b
 11766  00390E                     l6617:
 11767                           
 11768                           ; BSR set to: 0
 11769  00390E  0100               	movlb	0	; () banked
 11770  003910  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11771  003912  D7F7               	goto	l6615
 11772  003914                     l6619:
 11773                           
 11774                           ; BSR set to: 0
 11775  003914  0100               	movlb	0	; () banked
 11776  003916  90D8               	bcf	status,0,c
 11777  003918  3795               	rlcf	___lwdiv@quotient& (0+255),f,b
 11778  00391A  3796               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11779                           
 11780                           ; BSR set to: 0
 11781  00391C  0100               	movlb	0	; () banked
 11782  00391E  5192               	movf	___lwdiv@divisor& (0+255),w,b
 11783  003920  0100               	movlb	0	; () banked
 11784  003922  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
 11785  003924  0100               	movlb	0	; () banked
 11786  003926  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11787  003928  0100               	movlb	0	; () banked
 11788  00392A  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11789  00392C  A0D8               	btfss	status,0,c
 11790  00392E  D00A               	goto	l6627
 11791                           
 11792                           ; BSR set to: 0
 11793  003930  0100               	movlb	0	; () banked
 11794  003932  5192               	movf	___lwdiv@divisor& (0+255),w,b
 11795  003934  0100               	movlb	0	; () banked
 11796  003936  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
 11797  003938  0100               	movlb	0	; () banked
 11798  00393A  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11799  00393C  0100               	movlb	0	; () banked
 11800  00393E  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11801                           
 11802                           ; BSR set to: 0
 11803  003940  0100               	movlb	0	; () banked
 11804  003942  8195               	bsf	___lwdiv@quotient& (0+255),0,b
 11805  003944                     l6627:
 11806                           
 11807                           ; BSR set to: 0
 11808  003944  0100               	movlb	0	; () banked
 11809  003946  90D8               	bcf	status,0,c
 11810  003948  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11811  00394A  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
 11812                           
 11813                           ; BSR set to: 0
 11814  00394C  0100               	movlb	0	; () banked
 11815  00394E  2F94               	decfsz	___lwdiv@counter& (0+255),f,b
 11816  003950  D7E1               	goto	l6619
 11817  003952                     l1610:
 11818                           
 11819                           ; BSR set to: 0
 11820  003952  C095  F090         	movff	___lwdiv@quotient,?___lwdiv
 11821  003956  C096  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11822                           
 11823                           ; BSR set to: 0
 11824  00395A  0012               	return		;funcret
 11825  00395C                     __end_of___lwdiv:
 11826                           	opt stack 0
 11827                           tblptru	equ	0xFF8
 11828                           tblptrh	equ	0xFF7
 11829                           tblptrl	equ	0xFF6
 11830                           tablat	equ	0xFF5
 11831                           prodh	equ	0xFF4
 11832                           prodl	equ	0xFF3
 11833                           intcon	equ	0xFF2
 11834                           intcon2	equ	0xFF1
 11835                           postinc0	equ	0xFEE
 11836                           wreg	equ	0xFE8
 11837                           postdec1	equ	0xFE5
 11838                           fsr1h	equ	0xFE2
 11839                           fsr1l	equ	0xFE1
 11840                           indf2	equ	0xFDF
 11841                           postinc2	equ	0xFDE
 11842                           postdec2	equ	0xFDD
 11843                           fsr2h	equ	0xFDA
 11844                           fsr2l	equ	0xFD9
 11845                           status	equ	0xFD8
 11846                           
 11847 ;; *************** function _EUSART1_Initialize *****************
 11848 ;; Defined at:
 11849 ;;		line 77 in file "../eusart1.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;		None
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;  baud_rate       2    0[BANK0 ] unsigned int 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      void 
 11856 ;; Registers used:
 11857 ;;		wreg, status,2
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11863 ;;      Params:         0       0       0       0       0       0       0       0       0
 11864 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11866 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11867 ;;Total ram usage:        2 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    3
 11870 ;; This function calls:
 11871 ;;		Nothing
 11872 ;; This function is called by:
 11873 ;;		_main
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           	psect	text34
 11878  003AE6                     __ptext34:
 11879                           	opt stack 0
 11880  003AE6                     _EUSART1_Initialize:
 11881                           	opt stack 27
 11882                           
 11883                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 11884                           
 11885                           ; BSR set to: 0
 11886                           ;incstack = 0
 11887  003AE6  9A9D               	bcf	3997,5,c	;volatile
 11888                           
 11889                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 11890  003AE8  989D               	bcf	3997,4,c	;volatile
 11891                           
 11892                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 11893  003AEA  86B8               	bsf	4024,3,c	;volatile
 11894                           
 11895                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 11896  003AEC  8EAB               	bsf	4011,7,c	;volatile
 11897                           
 11898                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 11899  003AEE  9CAB               	bcf	4011,6,c	;volatile
 11900                           
 11901                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 11902  003AF0  88AB               	bsf	4011,4,c	;volatile
 11903                           
 11904                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 11905  003AF2  96AB               	bcf	4011,3,c	;volatile
 11906                           
 11907                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 11908  003AF4  9CAC               	bcf	4012,6,c	;volatile
 11909                           
 11910                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 11911  003AF6  8AAC               	bsf	4012,5,c	;volatile
 11912                           
 11913                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 11914  003AF8  98AC               	bcf	4012,4,c	;volatile
 11915                           
 11916                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 11917  003AFA  96AC               	bcf	4012,3,c	;volatile
 11918                           
 11919                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 11920  003AFC  84AC               	bsf	4012,2,c	;volatile
 11921                           
 11922                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 11923  003AFE  82AC               	bsf	4012,1,c	;volatile
 11924                           
 11925                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 11926  003B00  90AC               	bcf	4012,0,c	;volatile
 11927                           
 11928                           ;eusart1.c: 99: unsigned int baud_rate;
 11929                           ;eusart1.c: 101: baud_rate = 417;
 11930  003B02  0E01               	movlw	1
 11931  003B04  0100               	movlb	0	; () banked
 11932  003B06  6F91               	movwf	(EUSART1_Initialize@baud_rate+1)& (0+255),b
 11933  003B08  0EA1               	movlw	161
 11934  003B0A  6F90               	movwf	EUSART1_Initialize@baud_rate& (0+255),b
 11935                           
 11936                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 11937  003B0C  0100               	movlb	0	; () banked
 11938  003B0E  5191               	movf	(EUSART1_Initialize@baud_rate+1)& (0+255),w,b
 11939  003B10  6EB0               	movwf	4016,c	;volatile
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;eusart1.c: 104: SPBRG = baud_rate;
 11943  003B12  C090  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 11944                           
 11945                           ;eusart1.c: 108: eusart1TxHead = 0;
 11946  003B16  0E00               	movlw	0
 11947  003B18  6E3E               	movwf	_eusart1TxHead,c
 11948                           
 11949                           ;eusart1.c: 109: eusart1TxTail = 0;
 11950  003B1A  0E00               	movlw	0
 11951  003B1C  6E3F               	movwf	_eusart1TxTail,c
 11952                           
 11953                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 11954  003B1E  0E7E               	movlw	126
 11955  003B20  6E3D               	movwf	_eusart1TxBufferRemaining,c	;volatile
 11956                           
 11957                           ;eusart1.c: 112: eusart1RxHead = 0;
 11958  003B22  0E00               	movlw	0
 11959  003B24  6E3B               	movwf	_eusart1RxHead,c
 11960                           
 11961                           ;eusart1.c: 113: eusart1RxTail = 0;
 11962  003B26  0E00               	movlw	0
 11963  003B28  6E3C               	movwf	_eusart1RxTail,c
 11964                           
 11965                           ;eusart1.c: 114: eusart1RxCount = 0;
 11966  003B2A  0E00               	movlw	0
 11967  003B2C  6E3A               	movwf	_eusart1RxCount,c	;volatile
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 11971  003B2E  8A9D               	bsf	3997,5,c	;volatile
 11972                           
 11973                           ; BSR set to: 0
 11974  003B30  0012               	return		;funcret
 11975  003B32                     __end_of_EUSART1_Initialize:
 11976                           	opt stack 0
 11977                           tblptru	equ	0xFF8
 11978                           tblptrh	equ	0xFF7
 11979                           tblptrl	equ	0xFF6
 11980                           tablat	equ	0xFF5
 11981                           prodh	equ	0xFF4
 11982                           prodl	equ	0xFF3
 11983                           intcon	equ	0xFF2
 11984                           intcon2	equ	0xFF1
 11985                           postinc0	equ	0xFEE
 11986                           wreg	equ	0xFE8
 11987                           postdec1	equ	0xFE5
 11988                           fsr1h	equ	0xFE2
 11989                           fsr1l	equ	0xFE1
 11990                           indf2	equ	0xFDF
 11991                           postinc2	equ	0xFDE
 11992                           postdec2	equ	0xFDD
 11993                           fsr2h	equ	0xFDA
 11994                           fsr2l	equ	0xFD9
 11995                           status	equ	0xFD8
 11996                           
 11997 ;; *************** function _APIxInitialize *****************
 11998 ;; Defined at:
 11999 ;;		line 32 in file "../api.c"
 12000 ;; Parameters:    Size  Location     Type
 12001 ;;		None
 12002 ;; Auto vars:     Size  Location     Type
 12003 ;;  i               2    0[BANK0 ] unsigned int 
 12004 ;; Return value:  Size  Location     Type
 12005 ;;                  1    wreg      void 
 12006 ;; Registers used:
 12007 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12008 ;; Tracked objects:
 12009 ;;		On entry : 0/0
 12010 ;;		On exit  : 0/0
 12011 ;;		Unchanged: 0/0
 12012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12013 ;;      Params:         0       0       0       0       0       0       0       0       0
 12014 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12016 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12017 ;;Total ram usage:        2 bytes
 12018 ;; Hardware stack levels used:    1
 12019 ;; Hardware stack levels required when called:    3
 12020 ;; This function calls:
 12021 ;;		Nothing
 12022 ;; This function is called by:
 12023 ;;		_main
 12024 ;; This function uses a non-reentrant model
 12025 ;;
 12026                           
 12027                           	psect	text35
 12028  001B88                     __ptext35:
 12029                           	opt stack 0
 12030  001B88                     _APIxInitialize:
 12031                           	opt stack 27
 12032                           
 12033                           ;api.c: 34: unsigned int i;
 12034                           ;api.c: 35: for(i = 0; i < (0x90 + 1); i++ )
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;incstack = 0
 12038  001B88  0E00               	movlw	0
 12039  001B8A  0100               	movlb	0	; () banked
 12040  001B8C  6F91               	movwf	(APIxInitialize@i+1)& (0+255),b
 12041  001B8E  0E00               	movlw	0
 12042  001B90  6F90               	movwf	APIxInitialize@i& (0+255),b
 12043                           
 12044                           ; BSR set to: 0
 12045  001B92  0100               	movlb	0	; () banked
 12046  001B94  5191               	movf	(APIxInitialize@i+1)& (0+255),w,b
 12047  001B96  E12A               	bnz	l622
 12048  001B98  0E91               	movlw	145
 12049  001B9A  0100               	movlb	0	; () banked
 12050  001B9C  5D90               	subwf	APIxInitialize@i& (0+255),w,b
 12051  001B9E  B0D8               	btfsc	status,0,c
 12052  001BA0  D025               	goto	l622
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;api.c: 36: {
 12056                           ;api.c: 37: API_RW[i] = 0;
 12057                           
 12058                           ; BSR set to: 0
 12059                           
 12060                           ; BSR set to: 0
 12061  001BA2  90D8               	bcf	status,0,c
 12062  001BA4  0100               	movlb	0	; () banked
 12063  001BA6  3590               	rlcf	APIxInitialize@i& (0+255),w,b
 12064  001BA8  6ED9               	movwf	fsr2l,c
 12065  001BAA  0100               	movlb	0	; () banked
 12066  001BAC  3591               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 12067  001BAE  6EDA               	movwf	fsr2h,c
 12068  001BB0  0E1C               	movlw	low _API_RW
 12069  001BB2  26D9               	addwf	fsr2l,f,c
 12070  001BB4  0E03               	movlw	high _API_RW
 12071  001BB6  22DA               	addwfc	fsr2h,f,c
 12072  001BB8  0E00               	movlw	0
 12073  001BBA  6EDE               	movwf	postinc2,c
 12074  001BBC  0E00               	movlw	0
 12075  001BBE  6EDD               	movwf	postdec2,c
 12076                           
 12077                           ;api.c: 38: API[i] = 0;
 12078  001BC0  90D8               	bcf	status,0,c
 12079  001BC2  0100               	movlb	0	; () banked
 12080  001BC4  3590               	rlcf	APIxInitialize@i& (0+255),w,b
 12081  001BC6  6ED9               	movwf	fsr2l,c
 12082  001BC8  0100               	movlb	0	; () banked
 12083  001BCA  3591               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 12084  001BCC  6EDA               	movwf	fsr2h,c
 12085  001BCE  0EFC               	movlw	low _API
 12086  001BD0  26D9               	addwf	fsr2l,f,c
 12087  001BD2  0E01               	movlw	high _API
 12088  001BD4  22DA               	addwfc	fsr2h,f,c
 12089  001BD6  0E00               	movlw	0
 12090  001BD8  6EDE               	movwf	postinc2,c
 12091  001BDA  0E00               	movlw	0
 12092  001BDC  6EDD               	movwf	postdec2,c
 12093                           
 12094                           ; BSR set to: 0
 12095  001BDE  0100               	movlb	0	; () banked
 12096  001BE0  4B90               	infsnz	APIxInitialize@i& (0+255),f,b
 12097  001BE2  2B91               	incf	(APIxInitialize@i+1)& (0+255),f,b
 12098                           
 12099                           ; BSR set to: 0
 12100  001BE4  0100               	movlb	0	; () banked
 12101  001BE6  5191               	movf	(APIxInitialize@i+1)& (0+255),w,b
 12102  001BE8  E101               	bnz	u7910
 12103  001BEA  D7D6               	goto	L92
 12104  001BEC                     u7910:
 12105  001BEC                     l622:
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;api.c: 39: }
 12109                           ;api.c: 42: API_RW[16] = 0;
 12110  001BEC  0E00               	movlw	0
 12111  001BEE  CFE8 F33C          	movff	wreg,_API_RW+32
 12112  001BF2  0E00               	movlw	0
 12113  001BF4  CFE8 F33D          	movff	wreg,_API_RW+33
 12114                           
 12115                           ;api.c: 43: API_RW[18] = 1;
 12116  001BF8  0E01               	movlw	1
 12117  001BFA  CFE8 F340          	movff	wreg,_API_RW+36
 12118  001BFE  0E00               	movlw	0
 12119  001C00  CFE8 F341          	movff	wreg,_API_RW+37
 12120                           
 12121                           ;api.c: 44: API_RW[19] = 1;
 12122  001C04  0E01               	movlw	1
 12123  001C06  CFE8 F342          	movff	wreg,_API_RW+38
 12124  001C0A  0E00               	movlw	0
 12125  001C0C  CFE8 F343          	movff	wreg,_API_RW+39
 12126                           
 12127                           ;api.c: 45: API_RW[20] = 1;
 12128  001C10  0E01               	movlw	1
 12129  001C12  CFE8 F344          	movff	wreg,_API_RW+40
 12130  001C16  0E00               	movlw	0
 12131  001C18  CFE8 F345          	movff	wreg,_API_RW+41
 12132                           
 12133                           ;api.c: 46: API_RW[21] = 1;
 12134  001C1C  0E01               	movlw	1
 12135  001C1E  CFE8 F346          	movff	wreg,_API_RW+42
 12136  001C22  0E00               	movlw	0
 12137  001C24  CFE8 F347          	movff	wreg,_API_RW+43
 12138                           
 12139                           ;api.c: 47: API_RW[22] = 1;
 12140  001C28  0E01               	movlw	1
 12141  001C2A  CFE8 F348          	movff	wreg,_API_RW+44
 12142  001C2E  0E00               	movlw	0
 12143  001C30  CFE8 F349          	movff	wreg,_API_RW+45
 12144                           
 12145                           ;api.c: 48: API_RW[23] = 1;
 12146  001C34  0E01               	movlw	1
 12147  001C36  CFE8 F34A          	movff	wreg,_API_RW+46
 12148  001C3A  0E00               	movlw	0
 12149  001C3C  CFE8 F34B          	movff	wreg,_API_RW+47
 12150                           
 12151                           ;api.c: 49: API_RW[24] = 1;
 12152  001C40  0E01               	movlw	1
 12153  001C42  CFE8 F34C          	movff	wreg,_API_RW+48
 12154  001C46  0E00               	movlw	0
 12155  001C48  CFE8 F34D          	movff	wreg,_API_RW+49
 12156                           
 12157                           ;api.c: 50: API_RW[25] = 1;
 12158  001C4C  0E01               	movlw	1
 12159  001C4E  CFE8 F34E          	movff	wreg,_API_RW+50
 12160  001C52  0E00               	movlw	0
 12161  001C54  CFE8 F34F          	movff	wreg,_API_RW+51
 12162                           
 12163                           ;api.c: 51: API_RW[26] = 1;
 12164  001C58  0E01               	movlw	1
 12165  001C5A  CFE8 F350          	movff	wreg,_API_RW+52
 12166  001C5E  0E00               	movlw	0
 12167  001C60  CFE8 F351          	movff	wreg,_API_RW+53
 12168                           
 12169                           ;api.c: 52: API_RW[27] = 1;
 12170  001C64  0E01               	movlw	1
 12171  001C66  CFE8 F352          	movff	wreg,_API_RW+54
 12172  001C6A  0E00               	movlw	0
 12173  001C6C  CFE8 F353          	movff	wreg,_API_RW+55
 12174                           
 12175                           ;api.c: 53: API_RW[28] = 0;
 12176  001C70  0E00               	movlw	0
 12177  001C72  CFE8 F354          	movff	wreg,_API_RW+56
 12178  001C76  0E00               	movlw	0
 12179  001C78  CFE8 F355          	movff	wreg,_API_RW+57
 12180                           
 12181                           ;api.c: 54: API_RW[29] = 0;
 12182  001C7C  0E00               	movlw	0
 12183  001C7E  CFE8 F356          	movff	wreg,_API_RW+58
 12184  001C82  0E00               	movlw	0
 12185  001C84  CFE8 F357          	movff	wreg,_API_RW+59
 12186                           
 12187                           ;api.c: 55: API_RW[30] = 0;
 12188  001C88  0E00               	movlw	0
 12189  001C8A  CFE8 F358          	movff	wreg,_API_RW+60
 12190  001C8E  0E00               	movlw	0
 12191  001C90  CFE8 F359          	movff	wreg,_API_RW+61
 12192                           
 12193                           ;api.c: 56: API_RW[31] = 0;
 12194  001C94  0E00               	movlw	0
 12195  001C96  CFE8 F35A          	movff	wreg,_API_RW+62
 12196  001C9A  0E00               	movlw	0
 12197  001C9C  CFE8 F35B          	movff	wreg,_API_RW+63
 12198                           
 12199                           ;api.c: 57: API_RW[32] = 0;
 12200  001CA0  0E00               	movlw	0
 12201  001CA2  CFE8 F35C          	movff	wreg,_API_RW+64
 12202  001CA6  0E00               	movlw	0
 12203  001CA8  CFE8 F35D          	movff	wreg,_API_RW+65
 12204                           
 12205                           ;api.c: 58: API_RW[33] = 0;
 12206  001CAC  0E00               	movlw	0
 12207  001CAE  CFE8 F35E          	movff	wreg,_API_RW+66
 12208  001CB2  0E00               	movlw	0
 12209  001CB4  CFE8 F35F          	movff	wreg,_API_RW+67
 12210                           
 12211                           ;api.c: 59: API_RW[34] = 0;
 12212  001CB8  0E00               	movlw	0
 12213  001CBA  CFE8 F360          	movff	wreg,_API_RW+68
 12214  001CBE  0E00               	movlw	0
 12215  001CC0  CFE8 F361          	movff	wreg,_API_RW+69
 12216                           
 12217                           ;api.c: 60: API_RW[35] = 0;
 12218  001CC4  0E00               	movlw	0
 12219  001CC6  CFE8 F362          	movff	wreg,_API_RW+70
 12220  001CCA  0E00               	movlw	0
 12221  001CCC  CFE8 F363          	movff	wreg,_API_RW+71
 12222                           
 12223                           ;api.c: 61: API_RW[36] = 0;
 12224  001CD0  0E00               	movlw	0
 12225  001CD2  CFE8 F364          	movff	wreg,_API_RW+72
 12226  001CD6  0E00               	movlw	0
 12227  001CD8  CFE8 F365          	movff	wreg,_API_RW+73
 12228                           
 12229                           ;api.c: 62: API_RW[37] = 0;
 12230  001CDC  0E00               	movlw	0
 12231  001CDE  CFE8 F366          	movff	wreg,_API_RW+74
 12232  001CE2  0E00               	movlw	0
 12233  001CE4  CFE8 F367          	movff	wreg,_API_RW+75
 12234                           
 12235                           ;api.c: 63: API_RW[38] = 0;
 12236  001CE8  0E00               	movlw	0
 12237  001CEA  CFE8 F368          	movff	wreg,_API_RW+76
 12238  001CEE  0E00               	movlw	0
 12239  001CF0  CFE8 F369          	movff	wreg,_API_RW+77
 12240                           
 12241                           ;api.c: 64: API_RW[39] = 1;
 12242  001CF4  0E01               	movlw	1
 12243  001CF6  CFE8 F36A          	movff	wreg,_API_RW+78
 12244  001CFA  0E00               	movlw	0
 12245  001CFC  CFE8 F36B          	movff	wreg,_API_RW+79
 12246                           
 12247                           ;api.c: 65: API_RW[40] = 1;
 12248  001D00  0E01               	movlw	1
 12249  001D02  CFE8 F36C          	movff	wreg,_API_RW+80
 12250  001D06  0E00               	movlw	0
 12251  001D08  CFE8 F36D          	movff	wreg,_API_RW+81
 12252                           
 12253                           ;api.c: 66: API_RW[41] = 0;
 12254  001D0C  0E00               	movlw	0
 12255  001D0E  CFE8 F36E          	movff	wreg,_API_RW+82
 12256  001D12  0E00               	movlw	0
 12257  001D14  CFE8 F36F          	movff	wreg,_API_RW+83
 12258                           
 12259                           ;api.c: 67: API_RW[42] = 0;
 12260  001D18  0E00               	movlw	0
 12261  001D1A  CFE8 F370          	movff	wreg,_API_RW+84
 12262  001D1E  0E00               	movlw	0
 12263  001D20  CFE8 F371          	movff	wreg,_API_RW+85
 12264                           
 12265                           ;api.c: 68: API_RW[43] = 0;
 12266  001D24  0E00               	movlw	0
 12267  001D26  CFE8 F372          	movff	wreg,_API_RW+86
 12268  001D2A  0E00               	movlw	0
 12269  001D2C  CFE8 F373          	movff	wreg,_API_RW+87
 12270                           
 12271                           ;api.c: 69: API_RW[44] = 0;
 12272  001D30  0E00               	movlw	0
 12273  001D32  CFE8 F374          	movff	wreg,_API_RW+88
 12274  001D36  0E00               	movlw	0
 12275  001D38  CFE8 F375          	movff	wreg,_API_RW+89
 12276                           
 12277                           ;api.c: 70: API_RW[45] = 1;
 12278  001D3C  0E01               	movlw	1
 12279  001D3E  CFE8 F376          	movff	wreg,_API_RW+90
 12280  001D42  0E00               	movlw	0
 12281  001D44  CFE8 F377          	movff	wreg,_API_RW+91
 12282                           
 12283                           ;api.c: 71: API_RW[46] = 1;
 12284  001D48  0E01               	movlw	1
 12285  001D4A  CFE8 F378          	movff	wreg,_API_RW+92
 12286  001D4E  0E00               	movlw	0
 12287  001D50  CFE8 F379          	movff	wreg,_API_RW+93
 12288                           
 12289                           ;api.c: 72: API_RW[47] = 1;
 12290  001D54  0E01               	movlw	1
 12291  001D56  CFE8 F37A          	movff	wreg,_API_RW+94
 12292  001D5A  0E00               	movlw	0
 12293  001D5C  CFE8 F37B          	movff	wreg,_API_RW+95
 12294                           
 12295                           ;api.c: 73: API_RW[48] = 1;
 12296  001D60  0E01               	movlw	1
 12297  001D62  CFE8 F37C          	movff	wreg,_API_RW+96
 12298  001D66  0E00               	movlw	0
 12299  001D68  CFE8 F37D          	movff	wreg,_API_RW+97
 12300                           
 12301                           ;api.c: 74: API_RW[49] = 1;
 12302  001D6C  0E01               	movlw	1
 12303  001D6E  CFE8 F37E          	movff	wreg,_API_RW+98
 12304  001D72  0E00               	movlw	0
 12305  001D74  CFE8 F37F          	movff	wreg,_API_RW+99
 12306                           
 12307                           ;api.c: 75: API_RW[50] = 1;
 12308  001D78  0E01               	movlw	1
 12309  001D7A  CFE8 F380          	movff	wreg,_API_RW+100
 12310  001D7E  0E00               	movlw	0
 12311  001D80  CFE8 F381          	movff	wreg,_API_RW+101
 12312                           
 12313                           ;api.c: 76: API_RW[51] = 1;
 12314  001D84  0E01               	movlw	1
 12315  001D86  CFE8 F382          	movff	wreg,_API_RW+102
 12316  001D8A  0E00               	movlw	0
 12317  001D8C  CFE8 F383          	movff	wreg,_API_RW+103
 12318                           
 12319                           ;api.c: 77: API_RW[52] = 1;
 12320  001D90  0E01               	movlw	1
 12321  001D92  CFE8 F384          	movff	wreg,_API_RW+104
 12322  001D96  0E00               	movlw	0
 12323  001D98  CFE8 F385          	movff	wreg,_API_RW+105
 12324                           
 12325                           ;api.c: 78: API_RW[53] = 1;
 12326  001D9C  0E01               	movlw	1
 12327  001D9E  CFE8 F386          	movff	wreg,_API_RW+106
 12328  001DA2  0E00               	movlw	0
 12329  001DA4  CFE8 F387          	movff	wreg,_API_RW+107
 12330                           
 12331                           ;api.c: 79: API_RW[54] = 1;
 12332  001DA8  0E01               	movlw	1
 12333  001DAA  CFE8 F388          	movff	wreg,_API_RW+108
 12334  001DAE  0E00               	movlw	0
 12335  001DB0  CFE8 F389          	movff	wreg,_API_RW+109
 12336                           
 12337                           ;api.c: 80: API_RW[55] = 1;
 12338  001DB4  0E01               	movlw	1
 12339  001DB6  CFE8 F38A          	movff	wreg,_API_RW+110
 12340  001DBA  0E00               	movlw	0
 12341  001DBC  CFE8 F38B          	movff	wreg,_API_RW+111
 12342                           
 12343                           ;api.c: 81: API_RW[56] = 1;
 12344  001DC0  0E01               	movlw	1
 12345  001DC2  CFE8 F38C          	movff	wreg,_API_RW+112
 12346  001DC6  0E00               	movlw	0
 12347  001DC8  CFE8 F38D          	movff	wreg,_API_RW+113
 12348                           
 12349                           ;api.c: 82: API_RW[57] = 1;
 12350  001DCC  0E01               	movlw	1
 12351  001DCE  CFE8 F38E          	movff	wreg,_API_RW+114
 12352  001DD2  0E00               	movlw	0
 12353  001DD4  CFE8 F38F          	movff	wreg,_API_RW+115
 12354                           
 12355                           ;api.c: 83: API_RW[58] = 1;
 12356  001DD8  0E01               	movlw	1
 12357  001DDA  CFE8 F390          	movff	wreg,_API_RW+116
 12358  001DDE  0E00               	movlw	0
 12359  001DE0  CFE8 F391          	movff	wreg,_API_RW+117
 12360                           
 12361                           ;api.c: 84: API_RW[59] = 1;
 12362  001DE4  0E01               	movlw	1
 12363  001DE6  CFE8 F392          	movff	wreg,_API_RW+118
 12364  001DEA  0E00               	movlw	0
 12365  001DEC  CFE8 F393          	movff	wreg,_API_RW+119
 12366                           
 12367                           ;api.c: 85: API_RW[60] = 1;
 12368  001DF0  0E01               	movlw	1
 12369  001DF2  CFE8 F394          	movff	wreg,_API_RW+120
 12370  001DF6  0E00               	movlw	0
 12371  001DF8  CFE8 F395          	movff	wreg,_API_RW+121
 12372                           
 12373                           ;api.c: 86: API_RW[61] = 0;
 12374  001DFC  0E00               	movlw	0
 12375  001DFE  CFE8 F396          	movff	wreg,_API_RW+122
 12376  001E02  0E00               	movlw	0
 12377  001E04  CFE8 F397          	movff	wreg,_API_RW+123
 12378                           
 12379                           ;api.c: 87: API_RW[62] = 0;
 12380  001E08  0E00               	movlw	0
 12381  001E0A  CFE8 F398          	movff	wreg,_API_RW+124
 12382  001E0E  0E00               	movlw	0
 12383  001E10  CFE8 F399          	movff	wreg,_API_RW+125
 12384                           
 12385                           ;api.c: 88: API_RW[63] = 0;
 12386  001E14  0E00               	movlw	0
 12387  001E16  CFE8 F39A          	movff	wreg,_API_RW+126
 12388  001E1A  0E00               	movlw	0
 12389  001E1C  CFE8 F39B          	movff	wreg,_API_RW+127
 12390                           
 12391                           ;api.c: 89: API_RW[64] = 0;
 12392  001E20  0E00               	movlw	0
 12393  001E22  CFE8 F39C          	movff	wreg,_API_RW+128
 12394  001E26  0E00               	movlw	0
 12395  001E28  CFE8 F39D          	movff	wreg,_API_RW+129
 12396                           
 12397                           ;api.c: 90: API_RW[65] = 0;
 12398  001E2C  0E00               	movlw	0
 12399  001E2E  CFE8 F39E          	movff	wreg,_API_RW+130
 12400  001E32  0E00               	movlw	0
 12401  001E34  CFE8 F39F          	movff	wreg,_API_RW+131
 12402                           
 12403                           ;api.c: 91: API_RW[66] = 0;
 12404  001E38  0E00               	movlw	0
 12405  001E3A  CFE8 F3A0          	movff	wreg,_API_RW+132
 12406  001E3E  0E00               	movlw	0
 12407  001E40  CFE8 F3A1          	movff	wreg,_API_RW+133
 12408                           
 12409                           ;api.c: 92: API_RW[67] = 0;
 12410  001E44  0E00               	movlw	0
 12411  001E46  CFE8 F3A2          	movff	wreg,_API_RW+134
 12412  001E4A  0E00               	movlw	0
 12413  001E4C  CFE8 F3A3          	movff	wreg,_API_RW+135
 12414                           
 12415                           ;api.c: 93: API_RW[68] = 0;
 12416  001E50  0E00               	movlw	0
 12417  001E52  CFE8 F3A4          	movff	wreg,_API_RW+136
 12418  001E56  0E00               	movlw	0
 12419  001E58  CFE8 F3A5          	movff	wreg,_API_RW+137
 12420                           
 12421                           ;api.c: 94: API_RW[69] = 0;
 12422  001E5C  0E00               	movlw	0
 12423  001E5E  CFE8 F3A6          	movff	wreg,_API_RW+138
 12424  001E62  0E00               	movlw	0
 12425  001E64  CFE8 F3A7          	movff	wreg,_API_RW+139
 12426                           
 12427                           ;api.c: 95: API_RW[70] = 1;
 12428  001E68  0E01               	movlw	1
 12429  001E6A  CFE8 F3A8          	movff	wreg,_API_RW+140
 12430  001E6E  0E00               	movlw	0
 12431  001E70  CFE8 F3A9          	movff	wreg,_API_RW+141
 12432                           
 12433                           ;api.c: 96: API_RW[71] = 1;
 12434  001E74  0E01               	movlw	1
 12435  001E76  CFE8 F3AA          	movff	wreg,_API_RW+142
 12436  001E7A  0E00               	movlw	0
 12437  001E7C  CFE8 F3AB          	movff	wreg,_API_RW+143
 12438                           
 12439                           ;api.c: 97: API_RW[72] = 1;
 12440  001E80  0E01               	movlw	1
 12441  001E82  CFE8 F3AC          	movff	wreg,_API_RW+144
 12442  001E86  0E00               	movlw	0
 12443  001E88  CFE8 F3AD          	movff	wreg,_API_RW+145
 12444                           
 12445                           ;api.c: 98: API_RW[73] = 1;
 12446  001E8C  0E01               	movlw	1
 12447  001E8E  CFE8 F3AE          	movff	wreg,_API_RW+146
 12448  001E92  0E00               	movlw	0
 12449  001E94  CFE8 F3AF          	movff	wreg,_API_RW+147
 12450                           
 12451                           ;api.c: 99: API_RW[74] = 1;
 12452  001E98  0E01               	movlw	1
 12453  001E9A  CFE8 F3B0          	movff	wreg,_API_RW+148
 12454  001E9E  0E00               	movlw	0
 12455  001EA0  CFE8 F3B1          	movff	wreg,_API_RW+149
 12456                           
 12457                           ;api.c: 100: API_RW[75] = 1;
 12458  001EA4  0E01               	movlw	1
 12459  001EA6  CFE8 F3B2          	movff	wreg,_API_RW+150
 12460  001EAA  0E00               	movlw	0
 12461  001EAC  CFE8 F3B3          	movff	wreg,_API_RW+151
 12462                           
 12463                           ;api.c: 101: API_RW[76] = 1;
 12464  001EB0  0E01               	movlw	1
 12465  001EB2  CFE8 F3B4          	movff	wreg,_API_RW+152
 12466  001EB6  0E00               	movlw	0
 12467  001EB8  CFE8 F3B5          	movff	wreg,_API_RW+153
 12468                           
 12469                           ;api.c: 102: API_RW[77] = 1;
 12470  001EBC  0E01               	movlw	1
 12471  001EBE  CFE8 F3B6          	movff	wreg,_API_RW+154
 12472  001EC2  0E00               	movlw	0
 12473  001EC4  CFE8 F3B7          	movff	wreg,_API_RW+155
 12474                           
 12475                           ;api.c: 103: API_RW[78] = 1;
 12476  001EC8  0E01               	movlw	1
 12477  001ECA  CFE8 F3B8          	movff	wreg,_API_RW+156
 12478  001ECE  0E00               	movlw	0
 12479  001ED0  CFE8 F3B9          	movff	wreg,_API_RW+157
 12480                           
 12481                           ;api.c: 104: API_RW[79] = 1;
 12482  001ED4  0E01               	movlw	1
 12483  001ED6  CFE8 F3BA          	movff	wreg,_API_RW+158
 12484  001EDA  0E00               	movlw	0
 12485  001EDC  CFE8 F3BB          	movff	wreg,_API_RW+159
 12486                           
 12487                           ;api.c: 109: API[16] = 0x90;
 12488  001EE0  0E90               	movlw	144
 12489  001EE2  CFE8 F21C          	movff	wreg,_API+32
 12490  001EE6  0E00               	movlw	0
 12491  001EE8  CFE8 F21D          	movff	wreg,_API+33
 12492                           
 12493                           ;api.c: 110: API[18] = 10000;
 12494  001EEC  0E10               	movlw	16
 12495  001EEE  CFE8 F220          	movff	wreg,_API+36
 12496  001EF2  0E27               	movlw	39
 12497  001EF4  CFE8 F221          	movff	wreg,_API+37
 12498                           
 12499                           ;api.c: 111: API[19] = 800;
 12500  001EF8  0E20               	movlw	32
 12501  001EFA  CFE8 F222          	movff	wreg,_API+38
 12502  001EFE  0E03               	movlw	3
 12503  001F00  CFE8 F223          	movff	wreg,_API+39
 12504                           
 12505                           ;api.c: 112: API[20] = 5000;
 12506  001F04  0E88               	movlw	136
 12507  001F06  CFE8 F224          	movff	wreg,_API+40
 12508  001F0A  0E13               	movlw	19
 12509  001F0C  CFE8 F225          	movff	wreg,_API+41
 12510                           
 12511                           ;api.c: 113: API[21] = 20;
 12512  001F10  0E14               	movlw	20
 12513  001F12  CFE8 F226          	movff	wreg,_API+42
 12514  001F16  0E00               	movlw	0
 12515  001F18  CFE8 F227          	movff	wreg,_API+43
 12516                           
 12517                           ;api.c: 114: API[22] = 20;
 12518  001F1C  0E14               	movlw	20
 12519  001F1E  CFE8 F228          	movff	wreg,_API+44
 12520  001F22  0E00               	movlw	0
 12521  001F24  CFE8 F229          	movff	wreg,_API+45
 12522                           
 12523                           ;api.c: 115: API[23] = 107;
 12524  001F28  0E6B               	movlw	107
 12525  001F2A  CFE8 F22A          	movff	wreg,_API+46
 12526  001F2E  0E00               	movlw	0
 12527  001F30  CFE8 F22B          	movff	wreg,_API+47
 12528                           
 12529                           ;api.c: 116: API[24] = 107;
 12530  001F34  0E6B               	movlw	107
 12531  001F36  CFE8 F22C          	movff	wreg,_API+48
 12532  001F3A  0E00               	movlw	0
 12533  001F3C  CFE8 F22D          	movff	wreg,_API+49
 12534                           
 12535                           ;api.c: 117: API[25] = 80;
 12536  001F40  0E50               	movlw	80
 12537  001F42  CFE8 F22E          	movff	wreg,_API+50
 12538  001F46  0E00               	movlw	0
 12539  001F48  CFE8 F22F          	movff	wreg,_API+51
 12540                           
 12541                           ;api.c: 118: API[26] = 45;
 12542  001F4C  0E2D               	movlw	45
 12543  001F4E  CFE8 F230          	movff	wreg,_API+52
 12544  001F52  0E00               	movlw	0
 12545  001F54  CFE8 F231          	movff	wreg,_API+53
 12546                           
 12547                           ;api.c: 119: API[27] = 20;
 12548  001F58  0E14               	movlw	20
 12549  001F5A  CFE8 F232          	movff	wreg,_API+54
 12550  001F5E  0E00               	movlw	0
 12551  001F60  CFE8 F233          	movff	wreg,_API+55
 12552                           
 12553                           ;api.c: 120: API[28] = 0;
 12554  001F64  0E00               	movlw	0
 12555  001F66  CFE8 F234          	movff	wreg,_API+56
 12556  001F6A  0E00               	movlw	0
 12557  001F6C  CFE8 F235          	movff	wreg,_API+57
 12558                           
 12559                           ;api.c: 121: API[29] = 0;
 12560  001F70  0E00               	movlw	0
 12561  001F72  CFE8 F236          	movff	wreg,_API+58
 12562  001F76  0E00               	movlw	0
 12563  001F78  CFE8 F237          	movff	wreg,_API+59
 12564                           
 12565                           ;api.c: 122: API[30] = 0;
 12566  001F7C  0E00               	movlw	0
 12567  001F7E  CFE8 F238          	movff	wreg,_API+60
 12568  001F82  0E00               	movlw	0
 12569  001F84  CFE8 F239          	movff	wreg,_API+61
 12570                           
 12571                           ;api.c: 123: API[31] = 0;
 12572  001F88  0E00               	movlw	0
 12573  001F8A  CFE8 F23A          	movff	wreg,_API+62
 12574  001F8E  0E00               	movlw	0
 12575  001F90  CFE8 F23B          	movff	wreg,_API+63
 12576                           
 12577                           ;api.c: 124: API[32] = 0;
 12578  001F94  0E00               	movlw	0
 12579  001F96  CFE8 F23C          	movff	wreg,_API+64
 12580  001F9A  0E00               	movlw	0
 12581  001F9C  CFE8 F23D          	movff	wreg,_API+65
 12582                           
 12583                           ;api.c: 125: API[33] = 0;
 12584  001FA0  0E00               	movlw	0
 12585  001FA2  CFE8 F23E          	movff	wreg,_API+66
 12586  001FA6  0E00               	movlw	0
 12587  001FA8  CFE8 F23F          	movff	wreg,_API+67
 12588                           
 12589                           ;api.c: 126: API[34] = 0;
 12590  001FAC  0E00               	movlw	0
 12591  001FAE  CFE8 F240          	movff	wreg,_API+68
 12592  001FB2  0E00               	movlw	0
 12593  001FB4  CFE8 F241          	movff	wreg,_API+69
 12594                           
 12595                           ;api.c: 127: API[35] = 0;
 12596  001FB8  0E00               	movlw	0
 12597  001FBA  CFE8 F242          	movff	wreg,_API+70
 12598  001FBE  0E00               	movlw	0
 12599  001FC0  CFE8 F243          	movff	wreg,_API+71
 12600                           
 12601                           ;api.c: 128: API[36] = 0;
 12602  001FC4  0E00               	movlw	0
 12603  001FC6  CFE8 F244          	movff	wreg,_API+72
 12604  001FCA  0E00               	movlw	0
 12605  001FCC  CFE8 F245          	movff	wreg,_API+73
 12606                           
 12607                           ;api.c: 129: API[37] = 0;
 12608  001FD0  0E00               	movlw	0
 12609  001FD2  CFE8 F246          	movff	wreg,_API+74
 12610  001FD6  0E00               	movlw	0
 12611  001FD8  CFE8 F247          	movff	wreg,_API+75
 12612                           
 12613                           ;api.c: 130: API[38] = 0;
 12614  001FDC  0E00               	movlw	0
 12615  001FDE  CFE8 F248          	movff	wreg,_API+76
 12616  001FE2  0E00               	movlw	0
 12617  001FE4  CFE8 F249          	movff	wreg,_API+77
 12618                           
 12619                           ;api.c: 131: API[39] = 0;
 12620  001FE8  0E00               	movlw	0
 12621  001FEA  CFE8 F24A          	movff	wreg,_API+78
 12622  001FEE  0E00               	movlw	0
 12623  001FF0  CFE8 F24B          	movff	wreg,_API+79
 12624                           
 12625                           ;api.c: 132: API[40] = 0;
 12626  001FF4  0E00               	movlw	0
 12627  001FF6  CFE8 F24C          	movff	wreg,_API+80
 12628  001FFA  0E00               	movlw	0
 12629  001FFC  CFE8 F24D          	movff	wreg,_API+81
 12630                           
 12631                           ;api.c: 133: API[41] = 0;
 12632  002000  0E00               	movlw	0
 12633  002002  CFE8 F24E          	movff	wreg,_API+82
 12634  002006  0E00               	movlw	0
 12635  002008  CFE8 F24F          	movff	wreg,_API+83
 12636                           
 12637                           ;api.c: 134: API[42] = 0;
 12638  00200C  0E00               	movlw	0
 12639  00200E  CFE8 F250          	movff	wreg,_API+84
 12640  002012  0E00               	movlw	0
 12641  002014  CFE8 F251          	movff	wreg,_API+85
 12642                           
 12643                           ;api.c: 135: API[43] = 0;
 12644  002018  0E00               	movlw	0
 12645  00201A  CFE8 F252          	movff	wreg,_API+86
 12646  00201E  0E00               	movlw	0
 12647  002020  CFE8 F253          	movff	wreg,_API+87
 12648                           
 12649                           ;api.c: 136: API[44] = 0;
 12650  002024  0E00               	movlw	0
 12651  002026  CFE8 F254          	movff	wreg,_API+88
 12652  00202A  0E00               	movlw	0
 12653  00202C  CFE8 F255          	movff	wreg,_API+89
 12654                           
 12655                           ;api.c: 137: API[45] = 0;
 12656  002030  0E00               	movlw	0
 12657  002032  CFE8 F256          	movff	wreg,_API+90
 12658  002036  0E00               	movlw	0
 12659  002038  CFE8 F257          	movff	wreg,_API+91
 12660                           
 12661                           ;api.c: 138: API[46] = 80;
 12662  00203C  0E50               	movlw	80
 12663  00203E  CFE8 F258          	movff	wreg,_API+92
 12664  002042  0E00               	movlw	0
 12665  002044  CFE8 F259          	movff	wreg,_API+93
 12666                           
 12667                           ;api.c: 139: API[47] = 120;
 12668  002048  0E78               	movlw	120
 12669  00204A  CFE8 F25A          	movff	wreg,_API+94
 12670  00204E  0E00               	movlw	0
 12671  002050  CFE8 F25B          	movff	wreg,_API+95
 12672                           
 12673                           ;api.c: 140: API[48] = 0;
 12674  002054  0E00               	movlw	0
 12675  002056  CFE8 F25C          	movff	wreg,_API+96
 12676  00205A  0E00               	movlw	0
 12677  00205C  CFE8 F25D          	movff	wreg,_API+97
 12678                           
 12679                           ;api.c: 141: API[49] = 80;
 12680  002060  0E50               	movlw	80
 12681  002062  CFE8 F25E          	movff	wreg,_API+98
 12682  002066  0E00               	movlw	0
 12683  002068  CFE8 F25F          	movff	wreg,_API+99
 12684                           
 12685                           ;api.c: 142: API[50] = 0;
 12686  00206C  0E00               	movlw	0
 12687  00206E  CFE8 F260          	movff	wreg,_API+100
 12688  002072  0E00               	movlw	0
 12689  002074  CFE8 F261          	movff	wreg,_API+101
 12690                           
 12691                           ;api.c: 143: API[51] = 0;
 12692  002078  0E00               	movlw	0
 12693  00207A  CFE8 F262          	movff	wreg,_API+102
 12694  00207E  0E00               	movlw	0
 12695  002080  CFE8 F263          	movff	wreg,_API+103
 12696                           
 12697                           ;api.c: 144: API[52] = 120;
 12698  002084  0E78               	movlw	120
 12699  002086  CFE8 F264          	movff	wreg,_API+104
 12700  00208A  0E00               	movlw	0
 12701  00208C  CFE8 F265          	movff	wreg,_API+105
 12702                           
 12703                           ;api.c: 145: API[53] = 100;
 12704  002090  0E64               	movlw	100
 12705  002092  CFE8 F266          	movff	wreg,_API+106
 12706  002096  0E00               	movlw	0
 12707  002098  CFE8 F267          	movff	wreg,_API+107
 12708                           
 12709                           ;api.c: 146: API[54] = 100;
 12710  00209C  0E64               	movlw	100
 12711  00209E  CFE8 F268          	movff	wreg,_API+108
 12712  0020A2  0E00               	movlw	0
 12713  0020A4  CFE8 F269          	movff	wreg,_API+109
 12714                           
 12715                           ;api.c: 147: API[55] = 100;
 12716  0020A8  0E64               	movlw	100
 12717  0020AA  CFE8 F26A          	movff	wreg,_API+110
 12718  0020AE  0E00               	movlw	0
 12719  0020B0  CFE8 F26B          	movff	wreg,_API+111
 12720                           
 12721                           ;api.c: 148: API[56] = 100;
 12722  0020B4  0E64               	movlw	100
 12723  0020B6  CFE8 F26C          	movff	wreg,_API+112
 12724  0020BA  0E00               	movlw	0
 12725  0020BC  CFE8 F26D          	movff	wreg,_API+113
 12726                           
 12727                           ;api.c: 149: API[57] = 100;
 12728  0020C0  0E64               	movlw	100
 12729  0020C2  CFE8 F26E          	movff	wreg,_API+114
 12730  0020C6  0E00               	movlw	0
 12731  0020C8  CFE8 F26F          	movff	wreg,_API+115
 12732                           
 12733                           ;api.c: 150: API[58] = 100;
 12734  0020CC  0E64               	movlw	100
 12735  0020CE  CFE8 F270          	movff	wreg,_API+116
 12736  0020D2  0E00               	movlw	0
 12737  0020D4  CFE8 F271          	movff	wreg,_API+117
 12738                           
 12739                           ;api.c: 151: API[59] = 100;
 12740  0020D8  0E64               	movlw	100
 12741  0020DA  CFE8 F272          	movff	wreg,_API+118
 12742  0020DE  0E00               	movlw	0
 12743  0020E0  CFE8 F273          	movff	wreg,_API+119
 12744                           
 12745                           ;api.c: 152: API[60] = 100;
 12746  0020E4  0E64               	movlw	100
 12747  0020E6  CFE8 F274          	movff	wreg,_API+120
 12748  0020EA  0E00               	movlw	0
 12749  0020EC  CFE8 F275          	movff	wreg,_API+121
 12750                           
 12751                           ;api.c: 153: API[61] = 0;
 12752  0020F0  0E00               	movlw	0
 12753  0020F2  CFE8 F276          	movff	wreg,_API+122
 12754  0020F6  0E00               	movlw	0
 12755  0020F8  CFE8 F277          	movff	wreg,_API+123
 12756                           
 12757                           ;api.c: 154: API[62] = 0;
 12758  0020FC  0E00               	movlw	0
 12759  0020FE  CFE8 F278          	movff	wreg,_API+124
 12760  002102  0E00               	movlw	0
 12761  002104  CFE8 F279          	movff	wreg,_API+125
 12762                           
 12763                           ;api.c: 155: API[63] = 0;
 12764  002108  0E00               	movlw	0
 12765  00210A  CFE8 F27A          	movff	wreg,_API+126
 12766  00210E  0E00               	movlw	0
 12767  002110  CFE8 F27B          	movff	wreg,_API+127
 12768                           
 12769                           ;api.c: 156: API[64] = 0;
 12770  002114  0E00               	movlw	0
 12771  002116  CFE8 F27C          	movff	wreg,_API+128
 12772  00211A  0E00               	movlw	0
 12773  00211C  CFE8 F27D          	movff	wreg,_API+129
 12774                           
 12775                           ;api.c: 157: API[65] = 0;
 12776  002120  0E00               	movlw	0
 12777  002122  CFE8 F27E          	movff	wreg,_API+130
 12778  002126  0E00               	movlw	0
 12779  002128  CFE8 F27F          	movff	wreg,_API+131
 12780                           
 12781                           ;api.c: 158: API[66] = 0;
 12782  00212C  0E00               	movlw	0
 12783  00212E  CFE8 F280          	movff	wreg,_API+132
 12784  002132  0E00               	movlw	0
 12785  002134  CFE8 F281          	movff	wreg,_API+133
 12786                           
 12787                           ;api.c: 159: API[67] = 0;
 12788  002138  0E00               	movlw	0
 12789  00213A  CFE8 F282          	movff	wreg,_API+134
 12790  00213E  0E00               	movlw	0
 12791  002140  CFE8 F283          	movff	wreg,_API+135
 12792                           
 12793                           ;api.c: 160: API[68] = 511;
 12794  002144  0EFF               	movlw	255
 12795  002146  CFE8 F284          	movff	wreg,_API+136
 12796  00214A  0E01               	movlw	1
 12797  00214C  CFE8 F285          	movff	wreg,_API+137
 12798                           
 12799                           ;api.c: 161: API[69] = 1;
 12800  002150  0E01               	movlw	1
 12801  002152  CFE8 F286          	movff	wreg,_API+138
 12802  002156  0E00               	movlw	0
 12803  002158  CFE8 F287          	movff	wreg,_API+139
 12804                           
 12805                           ;api.c: 162: API[70] = 0;
 12806  00215C  0E00               	movlw	0
 12807  00215E  CFE8 F288          	movff	wreg,_API+140
 12808  002162  0E00               	movlw	0
 12809  002164  CFE8 F289          	movff	wreg,_API+141
 12810                           
 12811                           ;api.c: 163: API[71] = 0;
 12812  002168  0E00               	movlw	0
 12813  00216A  CFE8 F28A          	movff	wreg,_API+142
 12814  00216E  0E00               	movlw	0
 12815  002170  CFE8 F28B          	movff	wreg,_API+143
 12816                           
 12817                           ;api.c: 164: API[72] = 0;
 12818  002174  0E00               	movlw	0
 12819  002176  CFE8 F28C          	movff	wreg,_API+144
 12820  00217A  0E00               	movlw	0
 12821  00217C  CFE8 F28D          	movff	wreg,_API+145
 12822                           
 12823                           ;api.c: 165: API[73] = 0;
 12824  002180  0E00               	movlw	0
 12825  002182  CFE8 F28E          	movff	wreg,_API+146
 12826  002186  0E00               	movlw	0
 12827  002188  CFE8 F28F          	movff	wreg,_API+147
 12828                           
 12829                           ;api.c: 166: API[74] = 0;
 12830  00218C  0E00               	movlw	0
 12831  00218E  CFE8 F290          	movff	wreg,_API+148
 12832  002192  0E00               	movlw	0
 12833  002194  CFE8 F291          	movff	wreg,_API+149
 12834                           
 12835                           ;api.c: 167: API[75] = 0;
 12836  002198  0E00               	movlw	0
 12837  00219A  CFE8 F292          	movff	wreg,_API+150
 12838  00219E  0E00               	movlw	0
 12839  0021A0  CFE8 F293          	movff	wreg,_API+151
 12840                           
 12841                           ;api.c: 168: API[76] = 0;
 12842  0021A4  0E00               	movlw	0
 12843  0021A6  CFE8 F294          	movff	wreg,_API+152
 12844  0021AA  0E00               	movlw	0
 12845  0021AC  CFE8 F295          	movff	wreg,_API+153
 12846                           
 12847                           ;api.c: 169: API[77] = 0;
 12848  0021B0  0E00               	movlw	0
 12849  0021B2  CFE8 F296          	movff	wreg,_API+154
 12850  0021B6  0E00               	movlw	0
 12851  0021B8  CFE8 F297          	movff	wreg,_API+155
 12852                           
 12853                           ;api.c: 170: API[78] = 0;
 12854  0021BC  0E00               	movlw	0
 12855  0021BE  CFE8 F298          	movff	wreg,_API+156
 12856  0021C2  0E00               	movlw	0
 12857  0021C4  CFE8 F299          	movff	wreg,_API+157
 12858                           
 12859                           ;api.c: 171: API[79] = 511;
 12860  0021C8  0EFF               	movlw	255
 12861  0021CA  CFE8 F29A          	movff	wreg,_API+158
 12862  0021CE  0E01               	movlw	1
 12863  0021D0  CFE8 F29B          	movff	wreg,_API+159
 12864                           
 12865                           ; BSR set to: 0
 12866  0021D4  0012               	return		;funcret
 12867  0021D6                     __end_of_APIxInitialize:
 12868                           	opt stack 0
 12869                           tblptru	equ	0xFF8
 12870                           tblptrh	equ	0xFF7
 12871                           tblptrl	equ	0xFF6
 12872                           tablat	equ	0xFF5
 12873                           prodh	equ	0xFF4
 12874                           prodl	equ	0xFF3
 12875                           intcon	equ	0xFF2
 12876                           intcon2	equ	0xFF1
 12877                           postinc0	equ	0xFEE
 12878                           wreg	equ	0xFE8
 12879                           postdec1	equ	0xFE5
 12880                           fsr1h	equ	0xFE2
 12881                           fsr1l	equ	0xFE1
 12882                           indf2	equ	0xFDF
 12883                           postinc2	equ	0xFDE
 12884                           postdec2	equ	0xFDD
 12885                           fsr2h	equ	0xFDA
 12886                           fsr2l	equ	0xFD9
 12887                           status	equ	0xFD8
 12888                           
 12889 ;; *************** function _tc_low *****************
 12890 ;; Defined at:
 12891 ;;		line 146 in file "../Main.c"
 12892 ;; Parameters:    Size  Location     Type
 12893 ;;		None
 12894 ;; Auto vars:     Size  Location     Type
 12895 ;;		None
 12896 ;; Return value:  Size  Location     Type
 12897 ;;                  1    wreg      void 
 12898 ;; Registers used:
 12899 ;;		None
 12900 ;; Tracked objects:
 12901 ;;		On entry : 0/0
 12902 ;;		On exit  : 0/0
 12903 ;;		Unchanged: 0/0
 12904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12905 ;;      Params:         0       0       0       0       0       0       0       0       0
 12906 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12907 ;;      Temps:         17       0       0       0       0       0       0       0       0
 12908 ;;      Totals:        17       0       0       0       0       0       0       0       0
 12909 ;;Total ram usage:       17 bytes
 12910 ;; Hardware stack levels used:    1
 12911 ;; Hardware stack levels required when called:    2
 12912 ;; This function calls:
 12913 ;;		Nothing
 12914 ;; This function is called by:
 12915 ;;		Interrupt level 1
 12916 ;; This function uses a non-reentrant model
 12917 ;;
 12918                           
 12919                           	psect	intcodelo
 12920  000018                     __pintcodelo:
 12921                           	opt stack 0
 12922  000018                     _tc_low:
 12923                           	opt stack 20
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;incstack = 0
 12927  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12928  00001A  CFD8 F00F          	movff	status,??_tc_low
 12929  00001E  CFE8 F010          	movff	wreg,??_tc_low+1
 12930  000022  CFE0 F011          	movff	bsr,??_tc_low+2
 12931  000026  CFFA F012          	movff	pclath,??_tc_low+3
 12932  00002A  CFFB F013          	movff	pclatu,??_tc_low+4
 12933  00002E  CFE9 F014          	movff	fsr0l,??_tc_low+5
 12934  000032  CFEA F015          	movff	fsr0h,??_tc_low+6
 12935  000036  CFE1 F016          	movff	fsr1l,??_tc_low+7
 12936  00003A  CFE2 F017          	movff	fsr1h,??_tc_low+8
 12937  00003E  CFD9 F018          	movff	fsr2l,??_tc_low+9
 12938  000042  CFDA F019          	movff	fsr2h,??_tc_low+10
 12939  000046  CFF3 F01A          	movff	prodl,??_tc_low+11
 12940  00004A  CFF4 F01B          	movff	prodh,??_tc_low+12
 12941  00004E  CFF6 F01C          	movff	tblptrl,??_tc_low+13
 12942  000052  CFF7 F01D          	movff	tblptrh,??_tc_low+14
 12943  000056  CFF8 F01E          	movff	tblptru,??_tc_low+15
 12944  00005A  CFF5 F01F          	movff	tablat,??_tc_low+16
 12945  00005E  C01F  FFF5         	movff	??_tc_low+16,tablat
 12946  000062  C01E  FFF8         	movff	??_tc_low+15,tblptru
 12947  000066  C01D  FFF7         	movff	??_tc_low+14,tblptrh
 12948  00006A  C01C  FFF6         	movff	??_tc_low+13,tblptrl
 12949  00006E  C01B  FFF4         	movff	??_tc_low+12,prodh
 12950  000072  C01A  FFF3         	movff	??_tc_low+11,prodl
 12951  000076  C019  FFDA         	movff	??_tc_low+10,fsr2h
 12952  00007A  C018  FFD9         	movff	??_tc_low+9,fsr2l
 12953  00007E  C017  FFE2         	movff	??_tc_low+8,fsr1h
 12954  000082  C016  FFE1         	movff	??_tc_low+7,fsr1l
 12955  000086  C015  FFEA         	movff	??_tc_low+6,fsr0h
 12956  00008A  C014  FFE9         	movff	??_tc_low+5,fsr0l
 12957  00008E  C013  FFFB         	movff	??_tc_low+4,pclatu
 12958  000092  C012  FFFA         	movff	??_tc_low+3,pclath
 12959  000096  C011  FFE0         	movff	??_tc_low+2,bsr
 12960  00009A  C010  FFE8         	movff	??_tc_low+1,wreg
 12961  00009E  C00F  FFD8         	movff	??_tc_low,status
 12962  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12963  0000A4  0010               	retfie	
 12964  0000A6                     __end_of_tc_low:
 12965                           	opt stack 0
 12966                           pclatu	equ	0xFFB
 12967                           pclath	equ	0xFFA
 12968                           tblptru	equ	0xFF8
 12969                           tblptrh	equ	0xFF7
 12970                           tblptrl	equ	0xFF6
 12971                           tablat	equ	0xFF5
 12972                           prodh	equ	0xFF4
 12973                           prodl	equ	0xFF3
 12974                           intcon	equ	0xFF2
 12975                           intcon2	equ	0xFF1
 12976                           postinc0	equ	0xFEE
 12977                           fsr0h	equ	0xFEA
 12978                           fsr0l	equ	0xFE9
 12979                           wreg	equ	0xFE8
 12980                           postdec1	equ	0xFE5
 12981                           fsr1h	equ	0xFE2
 12982                           fsr1l	equ	0xFE1
 12983                           bsr	equ	0xFE0
 12984                           indf2	equ	0xFDF
 12985                           postinc2	equ	0xFDE
 12986                           postdec2	equ	0xFDD
 12987                           fsr2h	equ	0xFDA
 12988                           fsr2l	equ	0xFD9
 12989                           status	equ	0xFD8
 12990                           
 12991 ;; *************** function _tc_high *****************
 12992 ;; Defined at:
 12993 ;;		line 150 in file "../Main.c"
 12994 ;; Parameters:    Size  Location     Type
 12995 ;;		None
 12996 ;; Auto vars:     Size  Location     Type
 12997 ;;		None
 12998 ;; Return value:  Size  Location     Type
 12999 ;;                  1    wreg      void 
 13000 ;; Registers used:
 13001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13002 ;; Tracked objects:
 13003 ;;		On entry : 0/0
 13004 ;;		On exit  : 0/0
 13005 ;;		Unchanged: 0/0
 13006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13007 ;;      Params:         0       0       0       0       0       0       0       0       0
 13008 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13009 ;;      Temps:         14       0       0       0       0       0       0       0       0
 13010 ;;      Totals:        14       0       0       0       0       0       0       0       0
 13011 ;;Total ram usage:       14 bytes
 13012 ;; Hardware stack levels used:    1
 13013 ;; Hardware stack levels required when called:    1
 13014 ;; This function calls:
 13015 ;;		_EUSART1_Receive_ISR
 13016 ;;		_EUSART1_Transmit_ISR
 13017 ;; This function is called by:
 13018 ;;		Interrupt level 2
 13019 ;; This function uses a non-reentrant model
 13020 ;;
 13021                           
 13022                           	psect	intcode
 13023  000008                     __pintcode:
 13024                           	opt stack 0
 13025  000008                     _tc_high:
 13026                           	opt stack 20
 13027                           
 13028                           ;incstack = 0
 13029  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13030  00000A  CFFA F001          	movff	pclath,??_tc_high
 13031  00000E  CFFB F002          	movff	pclatu,??_tc_high+1
 13032  000012  ED4A  F01B         	call	int_func,f	;refresh shadow registers
 13033                           pclatu	equ	0xFFB
 13034                           pclath	equ	0xFFA
 13035                           tblptru	equ	0xFF8
 13036                           tblptrh	equ	0xFF7
 13037                           tblptrl	equ	0xFF6
 13038                           tablat	equ	0xFF5
 13039                           prodh	equ	0xFF4
 13040                           prodl	equ	0xFF3
 13041                           intcon	equ	0xFF2
 13042                           intcon2	equ	0xFF1
 13043                           postinc0	equ	0xFEE
 13044                           fsr0h	equ	0xFEA
 13045                           fsr0l	equ	0xFE9
 13046                           wreg	equ	0xFE8
 13047                           postdec1	equ	0xFE5
 13048                           fsr1h	equ	0xFE2
 13049                           fsr1l	equ	0xFE1
 13050                           bsr	equ	0xFE0
 13051                           indf2	equ	0xFDF
 13052                           postinc2	equ	0xFDE
 13053                           postdec2	equ	0xFDD
 13054                           fsr2h	equ	0xFDA
 13055                           fsr2l	equ	0xFD9
 13056                           status	equ	0xFD8
 13057                           
 13058                           	psect	intcode_body
 13059  003694                     __pintcode_body:
 13060                           	opt stack 20
 13061  003694                     int_func:
 13062                           	opt stack 20
 13063  003694  0006               	pop		; remove dummy address from shadow register refresh
 13064  003696  CFE9 F003          	movff	fsr0l,??_tc_high+2
 13065  00369A  CFEA F004          	movff	fsr0h,??_tc_high+3
 13066  00369E  CFE1 F005          	movff	fsr1l,??_tc_high+4
 13067  0036A2  CFE2 F006          	movff	fsr1h,??_tc_high+5
 13068  0036A6  CFD9 F007          	movff	fsr2l,??_tc_high+6
 13069  0036AA  CFDA F008          	movff	fsr2h,??_tc_high+7
 13070  0036AE  CFF3 F009          	movff	prodl,??_tc_high+8
 13071  0036B2  CFF4 F00A          	movff	prodh,??_tc_high+9
 13072  0036B6  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 13073  0036BA  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 13074  0036BE  CFF8 F00D          	movff	tblptru,??_tc_high+12
 13075  0036C2  CFF5 F00E          	movff	tablat,??_tc_high+13
 13076                           
 13077                           ;Main.c: 152: if (INTCONbits.TMR0IF)
 13078  0036C6  A4F2               	btfss	intcon,2,c	;volatile
 13079  0036C8  D01F               	goto	i2l6259
 13080                           
 13081                           ;Main.c: 153: {
 13082                           ;Main.c: 154: if(Led1_Counter <= 100)
 13083  0036CA  0100               	movlb	0	; () banked
 13084  0036CC  516F               	movf	(_Led1_Counter+1)& (0+255),w,b
 13085  0036CE  E107               	bnz	i2l92
 13086  0036D0  0E65               	movlw	101
 13087  0036D2  0100               	movlb	0	; () banked
 13088  0036D4  5D6E               	subwf	_Led1_Counter& (0+255),w,b
 13089  0036D6  B0D8               	btfsc	status,0,c
 13090  0036D8  D002               	goto	i2l92
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;Main.c: 155: {
 13094                           ;Main.c: 156: PORTAbits.RA4 = 1;
 13095  0036DA  8880               	bsf	3968,4,c	;volatile
 13096                           
 13097                           ;Main.c: 157: }
 13098  0036DC  D001               	goto	i2l6249
 13099  0036DE                     i2l92:
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;Main.c: 158: else
 13103                           ;Main.c: 159: {
 13104                           ;Main.c: 160: PORTAbits.RA4 = 0;
 13105  0036DE  9880               	bcf	3968,4,c	;volatile
 13106  0036E0                     i2l6249:
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;Main.c: 161: }
 13110                           ;Main.c: 162: if(Led1_Counter >= 700)
 13111  0036E0  0EBC               	movlw	188
 13112  0036E2  0100               	movlb	0	; () banked
 13113  0036E4  5D6E               	subwf	_Led1_Counter& (0+255),w,b
 13114  0036E6  0E02               	movlw	2
 13115  0036E8  0100               	movlb	0	; () banked
 13116  0036EA  596F               	subwfb	(_Led1_Counter+1)& (0+255),w,b
 13117  0036EC  A0D8               	btfss	status,0,c
 13118  0036EE  D005               	goto	i2l6253
 13119                           
 13120                           ; BSR set to: 0
 13121                           ;Main.c: 163: {
 13122                           ;Main.c: 164: Led1_Counter = 0;
 13123  0036F0  0E00               	movlw	0
 13124  0036F2  0100               	movlb	0	; () banked
 13125  0036F4  6F6F               	movwf	(_Led1_Counter+1)& (0+255),b
 13126  0036F6  0E00               	movlw	0
 13127  0036F8  6F6E               	movwf	_Led1_Counter& (0+255),b
 13128  0036FA                     i2l6253:
 13129                           
 13130                           ; BSR set to: 0
 13131                           ;Main.c: 165: }
 13132                           ;Main.c: 166: Led1_Counter++;
 13133  0036FA  0100               	movlb	0	; () banked
 13134  0036FC  4B6E               	infsnz	_Led1_Counter& (0+255),f,b
 13135  0036FE  2B6F               	incf	(_Led1_Counter+1)& (0+255),f,b
 13136                           
 13137                           ; BSR set to: 0
 13138                           ;Main.c: 167: Update_State_Machine = 1;
 13139  003700  0E01               	movlw	1
 13140  003702  0100               	movlb	0	; () banked
 13141  003704  6F85               	movwf	_Update_State_Machine& (0+255),b
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;Main.c: 168: INTCONbits.TMR0IF = 0;
 13145  003706  94F2               	bcf	intcon,2,c	;volatile
 13146  003708                     i2l6259:
 13147                           
 13148                           ;Main.c: 169: }
 13149                           ;Main.c: 171: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 13150  003708  BA9D               	btfsc	3997,5,c	;volatile
 13151  00370A  AA9E               	btfss	3998,5,c	;volatile
 13152  00370C  D002               	goto	i2l6265
 13153                           
 13154                           ;Main.c: 172: EUSART1_Receive_ISR();
 13155  00370E  EC07  F01E         	call	_EUSART1_Receive_ISR	;wreg free
 13156  003712                     i2l6265:
 13157                           
 13158                           ;Main.c: 173: }
 13159                           ;Main.c: 174: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 13160  003712  B89D               	btfsc	3997,4,c	;volatile
 13161  003714  A89E               	btfss	3998,4,c	;volatile
 13162  003716  D002               	goto	i2l97
 13163                           
 13164                           ;Main.c: 175: EUSART1_Transmit_ISR();
 13165  003718  ECF0  F01D         	call	_EUSART1_Transmit_ISR	;wreg free
 13166  00371C                     i2l97:
 13167  00371C  C00E  FFF5         	movff	??_tc_high+13,tablat
 13168  003720  C00D  FFF8         	movff	??_tc_high+12,tblptru
 13169  003724  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 13170  003728  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 13171  00372C  C00A  FFF4         	movff	??_tc_high+9,prodh
 13172  003730  C009  FFF3         	movff	??_tc_high+8,prodl
 13173  003734  C008  FFDA         	movff	??_tc_high+7,fsr2h
 13174  003738  C007  FFD9         	movff	??_tc_high+6,fsr2l
 13175  00373C  C006  FFE2         	movff	??_tc_high+5,fsr1h
 13176  003740  C005  FFE1         	movff	??_tc_high+4,fsr1l
 13177  003744  C004  FFEA         	movff	??_tc_high+3,fsr0h
 13178  003748  C003  FFE9         	movff	??_tc_high+2,fsr0l
 13179  00374C  C002  FFFB         	movff	??_tc_high+1,pclatu
 13180  003750  C001  FFFA         	movff	??_tc_high,pclath
 13181  003754  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13182  003756  0011               	retfie		f
 13183  003758                     __end_of_tc_high:
 13184                           	opt stack 0
 13185                           pclatu	equ	0xFFB
 13186                           pclath	equ	0xFFA
 13187                           tblptru	equ	0xFF8
 13188                           tblptrh	equ	0xFF7
 13189                           tblptrl	equ	0xFF6
 13190                           tablat	equ	0xFF5
 13191                           prodh	equ	0xFF4
 13192                           prodl	equ	0xFF3
 13193                           intcon	equ	0xFF2
 13194                           intcon2	equ	0xFF1
 13195                           postinc0	equ	0xFEE
 13196                           fsr0h	equ	0xFEA
 13197                           fsr0l	equ	0xFE9
 13198                           wreg	equ	0xFE8
 13199                           postdec1	equ	0xFE5
 13200                           fsr1h	equ	0xFE2
 13201                           fsr1l	equ	0xFE1
 13202                           bsr	equ	0xFE0
 13203                           indf2	equ	0xFDF
 13204                           postinc2	equ	0xFDE
 13205                           postdec2	equ	0xFDD
 13206                           fsr2h	equ	0xFDA
 13207                           fsr2l	equ	0xFD9
 13208                           status	equ	0xFD8
 13209                           
 13210 ;; *************** function _EUSART1_Transmit_ISR *****************
 13211 ;; Defined at:
 13212 ;;		line 183 in file "../eusart1.c"
 13213 ;; Parameters:    Size  Location     Type
 13214 ;;		None
 13215 ;; Auto vars:     Size  Location     Type
 13216 ;;		None
 13217 ;; Return value:  Size  Location     Type
 13218 ;;                  1    wreg      void 
 13219 ;; Registers used:
 13220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13221 ;; Tracked objects:
 13222 ;;		On entry : 0/0
 13223 ;;		On exit  : 0/0
 13224 ;;		Unchanged: 0/0
 13225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13226 ;;      Params:         0       0       0       0       0       0       0       0       0
 13227 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13228 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13229 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13230 ;;Total ram usage:        0 bytes
 13231 ;; Hardware stack levels used:    1
 13232 ;; This function calls:
 13233 ;;		Nothing
 13234 ;; This function is called by:
 13235 ;;		_tc_high
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           	psect	text38
 13240  003BE0                     __ptext38:
 13241                           	opt stack 0
 13242  003BE0                     _EUSART1_Transmit_ISR:
 13243                           	opt stack 20
 13244                           
 13245                           ;eusart1.c: 186: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 13246                           
 13247                           ;incstack = 0
 13248  003BE0  0E7E               	movlw	126
 13249  003BE2  603D               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 13250  003BE4  D012               	goto	i2l520
 13251                           
 13252                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 13253  003BE6  503F               	movf	_eusart1TxTail,w,c
 13254  003BE8  0D01               	mullw	1
 13255  003BEA  0E7E               	movlw	low _eusart1TxBuffer
 13256  003BEC  24F3               	addwf	prodl,w,c
 13257  003BEE  6ED9               	movwf	fsr2l,c
 13258  003BF0  0E01               	movlw	high _eusart1TxBuffer
 13259  003BF2  20F4               	addwfc	prodh,w,c
 13260  003BF4  6EDA               	movwf	fsr2h,c
 13261  003BF6  50DF               	movf	indf2,w,c
 13262  003BF8  6EAD               	movwf	4013,c	;volatile
 13263  003BFA  2A3F               	incf	_eusart1TxTail,f,c
 13264                           
 13265                           ;eusart1.c: 188: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 13266  003BFC  0E7D               	movlw	125
 13267  003BFE  643F               	cpfsgt	_eusart1TxTail,c
 13268  003C00  D002               	goto	i2l6163
 13269                           
 13270                           ;eusart1.c: 189: eusart1TxTail = 0;
 13271  003C02  0E00               	movlw	0
 13272  003C04  6E3F               	movwf	_eusart1TxTail,c
 13273  003C06                     i2l6163:
 13274                           
 13275                           ;eusart1.c: 190: }
 13276                           ;eusart1.c: 191: eusart1TxBufferRemaining++;
 13277  003C06  2A3D               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 13278                           
 13279                           ;eusart1.c: 192: } else {
 13280  003C08  0012               	return	
 13281  003C0A                     i2l520:
 13282                           
 13283                           ;eusart1.c: 193: PIE1bits.TX1IE = 0;
 13284  003C0A  989D               	bcf	3997,4,c	;volatile
 13285  003C0C  0012               	return	
 13286  003C0E                     __end_of_EUSART1_Transmit_ISR:
 13287                           	opt stack 0
 13288                           pclatu	equ	0xFFB
 13289                           pclath	equ	0xFFA
 13290                           tblptru	equ	0xFF8
 13291                           tblptrh	equ	0xFF7
 13292                           tblptrl	equ	0xFF6
 13293                           tablat	equ	0xFF5
 13294                           prodh	equ	0xFF4
 13295                           prodl	equ	0xFF3
 13296                           intcon	equ	0xFF2
 13297                           intcon2	equ	0xFF1
 13298                           postinc0	equ	0xFEE
 13299                           fsr0h	equ	0xFEA
 13300                           fsr0l	equ	0xFE9
 13301                           wreg	equ	0xFE8
 13302                           postdec1	equ	0xFE5
 13303                           fsr1h	equ	0xFE2
 13304                           fsr1l	equ	0xFE1
 13305                           bsr	equ	0xFE0
 13306                           indf2	equ	0xFDF
 13307                           postinc2	equ	0xFDE
 13308                           postdec2	equ	0xFDD
 13309                           fsr2h	equ	0xFDA
 13310                           fsr2l	equ	0xFD9
 13311                           status	equ	0xFD8
 13312                           
 13313 ;; *************** function _EUSART1_Receive_ISR *****************
 13314 ;; Defined at:
 13315 ;;		line 197 in file "../eusart1.c"
 13316 ;; Parameters:    Size  Location     Type
 13317 ;;		None
 13318 ;; Auto vars:     Size  Location     Type
 13319 ;;		None
 13320 ;; Return value:  Size  Location     Type
 13321 ;;                  1    wreg      void 
 13322 ;; Registers used:
 13323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13324 ;; Tracked objects:
 13325 ;;		On entry : 0/0
 13326 ;;		On exit  : 0/0
 13327 ;;		Unchanged: 0/0
 13328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13329 ;;      Params:         0       0       0       0       0       0       0       0       0
 13330 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13331 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13332 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13333 ;;Total ram usage:        0 bytes
 13334 ;; Hardware stack levels used:    1
 13335 ;; This function calls:
 13336 ;;		Nothing
 13337 ;; This function is called by:
 13338 ;;		_tc_high
 13339 ;; This function uses a non-reentrant model
 13340 ;;
 13341                           
 13342                           	psect	text39
 13343  003C0E                     __ptext39:
 13344                           	opt stack 0
 13345  003C0E                     _EUSART1_Receive_ISR:
 13346                           	opt stack 20
 13347                           
 13348                           ;eusart1.c: 198: if (1 == RCSTA1bits.OERR) {
 13349                           
 13350                           ;incstack = 0
 13351  003C0E  A2AB               	btfss	4011,1,c	;volatile
 13352  003C10  D002               	goto	i2l6143
 13353                           
 13354                           ;eusart1.c: 201: RCSTA1bits.CREN = 0;
 13355  003C12  98AB               	bcf	4011,4,c	;volatile
 13356                           
 13357                           ;eusart1.c: 202: RCSTA1bits.CREN = 1;
 13358  003C14  88AB               	bsf	4011,4,c	;volatile
 13359  003C16                     i2l6143:
 13360                           
 13361                           ;eusart1.c: 203: }
 13362                           ;eusart1.c: 206: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 13363  003C16  503B               	movf	_eusart1RxHead,w,c
 13364  003C18  0D01               	mullw	1
 13365  003C1A  0E00               	movlw	low _eusart1RxBuffer
 13366  003C1C  24F3               	addwf	prodl,w,c
 13367  003C1E  6ED9               	movwf	fsr2l,c
 13368  003C20  0E01               	movlw	high _eusart1RxBuffer
 13369  003C22  20F4               	addwfc	prodh,w,c
 13370  003C24  6EDA               	movwf	fsr2h,c
 13371  003C26  CFAE FFDF          	movff	4014,indf2	;volatile
 13372  003C2A  2A3B               	incf	_eusart1RxHead,f,c
 13373                           
 13374                           ;eusart1.c: 207: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 13375  003C2C  0E7D               	movlw	125
 13376  003C2E  643B               	cpfsgt	_eusart1RxHead,c
 13377  003C30  D002               	goto	i2l6151
 13378                           
 13379                           ;eusart1.c: 208: eusart1RxHead = 0;
 13380  003C32  0E00               	movlw	0
 13381  003C34  6E3B               	movwf	_eusart1RxHead,c
 13382  003C36                     i2l6151:
 13383                           
 13384                           ;eusart1.c: 209: }
 13385                           ;eusart1.c: 210: eusart1RxCount++;
 13386  003C36  2A3A               	incf	_eusart1RxCount,f,c	;volatile
 13387  003C38  0012               	return		;funcret
 13388  003C3A                     __end_of_EUSART1_Receive_ISR:
 13389                           	opt stack 0
 13390                           pclatu	equ	0xFFB
 13391                           pclath	equ	0xFFA
 13392                           tblptru	equ	0xFF8
 13393                           tblptrh	equ	0xFF7
 13394                           tblptrl	equ	0xFF6
 13395                           tablat	equ	0xFF5
 13396                           prodh	equ	0xFF4
 13397                           prodl	equ	0xFF3
 13398                           intcon	equ	0xFF2
 13399                           intcon2	equ	0xFF1
 13400                           postinc0	equ	0xFEE
 13401                           fsr0h	equ	0xFEA
 13402                           fsr0l	equ	0xFE9
 13403                           wreg	equ	0xFE8
 13404                           postdec1	equ	0xFE5
 13405                           fsr1h	equ	0xFE2
 13406                           fsr1l	equ	0xFE1
 13407                           bsr	equ	0xFE0
 13408                           indf2	equ	0xFDF
 13409                           postinc2	equ	0xFDE
 13410                           postdec2	equ	0xFDD
 13411                           fsr2h	equ	0xFDA
 13412                           fsr2l	equ	0xFD9
 13413                           status	equ	0xFD8
 13414                           pclatu	equ	0xFFB
 13415                           pclath	equ	0xFFA
 13416                           tblptru	equ	0xFF8
 13417                           tblptrh	equ	0xFF7
 13418                           tblptrl	equ	0xFF6
 13419                           tablat	equ	0xFF5
 13420                           prodh	equ	0xFF4
 13421                           prodl	equ	0xFF3
 13422                           intcon	equ	0xFF2
 13423                           intcon2	equ	0xFF1
 13424                           postinc0	equ	0xFEE
 13425                           fsr0h	equ	0xFEA
 13426                           fsr0l	equ	0xFE9
 13427                           wreg	equ	0xFE8
 13428                           postdec1	equ	0xFE5
 13429                           fsr1h	equ	0xFE2
 13430                           fsr1l	equ	0xFE1
 13431                           bsr	equ	0xFE0
 13432                           indf2	equ	0xFDF
 13433                           postinc2	equ	0xFDE
 13434                           postdec2	equ	0xFDD
 13435                           fsr2h	equ	0xFDA
 13436                           fsr2l	equ	0xFD9
 13437                           status	equ	0xFD8
 13438                           
 13439                           	psect	rparam
 13440  0000                     pclatu	equ	0xFFB
 13441                           pclath	equ	0xFFA
 13442                           tblptru	equ	0xFF8
 13443                           tblptrh	equ	0xFF7
 13444                           tblptrl	equ	0xFF6
 13445                           tablat	equ	0xFF5
 13446                           prodh	equ	0xFF4
 13447                           prodl	equ	0xFF3
 13448                           intcon	equ	0xFF2
 13449                           intcon2	equ	0xFF1
 13450                           postinc0	equ	0xFEE
 13451                           fsr0h	equ	0xFEA
 13452                           fsr0l	equ	0xFE9
 13453                           wreg	equ	0xFE8
 13454                           postdec1	equ	0xFE5
 13455                           fsr1h	equ	0xFE2
 13456                           fsr1l	equ	0xFE1
 13457                           bsr	equ	0xFE0
 13458                           indf2	equ	0xFDF
 13459                           postinc2	equ	0xFDE
 13460                           postdec2	equ	0xFDD
 13461                           fsr2h	equ	0xFDA
 13462                           fsr2l	equ	0xFD9
 13463                           status	equ	0xFD8
 13464                           
 13465                           	psect	temp
 13466  000040                     btemp:
 13467                           	opt stack 0
 13468  000040                     	ds	1
 13469  0000                     int$flags	set	btemp
 13470                           pclatu	equ	0xFFB
 13471                           pclath	equ	0xFFA
 13472                           tblptru	equ	0xFF8
 13473                           tblptrh	equ	0xFF7
 13474                           tblptrl	equ	0xFF6
 13475                           tablat	equ	0xFF5
 13476                           prodh	equ	0xFF4
 13477                           prodl	equ	0xFF3
 13478                           intcon	equ	0xFF2
 13479                           intcon2	equ	0xFF1
 13480                           postinc0	equ	0xFEE
 13481                           fsr0h	equ	0xFEA
 13482                           fsr0l	equ	0xFE9
 13483                           wreg	equ	0xFE8
 13484                           postdec1	equ	0xFE5
 13485                           fsr1h	equ	0xFE2
 13486                           fsr1l	equ	0xFE1
 13487                           bsr	equ	0xFE0
 13488                           indf2	equ	0xFDF
 13489                           postinc2	equ	0xFDE
 13490                           postdec2	equ	0xFDD
 13491                           fsr2h	equ	0xFDA
 13492                           fsr2l	equ	0xFD9
 13493                           status	equ	0xFD8


Data Sizes:
    Strings     64
    Constant    11
    Data        10
    BSS         907
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160     45     103
    BANK1           256      0     252
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_9(CODE[12]), STR_8(CODE[9]), STR_7(CODE[9]), STR_6(CODE[9]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[9]), 
		 -> STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_GETxAPIxVAL
    _Update_StateMchn->_Green_Led
    _Update_StateMchn->_Red_Led
    _Train_Path->_GETxAPIxVAL
    _Train_Move_Right_Start->_GETxAPIxVAL
    _Train_Move_Right_Brake->_GETxAPIxVAL
    _Train_Move_Left_Start->_GETxAPIxVAL
    _Train_Move_Left_Brake->_GETxAPIxVAL
    _Right_Mountain_From_The_Right->_GETxAPIxVAL
    _Right_Mountain_From_The_Left->_GETxAPIxVAL
    _Left_Mountain_From_The_Right->_GETxAPIxVAL
    _Left_Mountain_From_The_Left->_GETxAPIxVAL
    _SETxPWM->_GETxAPIxVAL
    _Junction->_GETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_GETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_EUSART1_Read
    _TranslateMessage->_GETxAPIxRW
    _TranslateMessage->_GETxAPIxVAL
    _atoi->_isdigit
    _SETxAPIxVAL->_GETxAPIxVAL
    _printf->___lwmod
    _printf->_putch

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Update_StateMchn
    _Update_StateMchn->_Train_Path
    _Train_Path->_Left_Mountain_From_The_Left
    _Train_Path->_Left_Mountain_From_The_Right
    _Train_Path->_Right_Mountain_From_The_Left
    _Train_Path->_Right_Mountain_From_The_Right
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_SETxAPIxVAL
    _atoi->___wmul
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _SENDxMESSAGE->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  196238
                     _APIxInitialize
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     2     2      0  170874
                                             43 BANK0      2     2      0
                    _Debounce_Inputs
                       _Eeprom_Store
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  143854
                                             41 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               0     0      0   19796
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               0     0      0   19796
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                0     0      0   19796
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                0     0      0   19796
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   11336
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   11336
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   11336
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   11336
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   11212
                                             33 BANK0      7     4      3
                        _GETxAPIxVAL (ARG)
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1    9601
                                             33 BANK0      2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Store                                         0     0      0      31
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0    8760
                                             33 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     176
                                              2 BANK0      6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   16616
                                             37 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   14524
                                             33 BANK0      4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                        _SETxAPIxVAL
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1050
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _GETxAPIxVAL                                          3     1      2      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           3     1      2      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0    8553
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          5     3      2    8553
                                             28 BANK0      5     3      2
                        _GETxAPIxVAL (ARG)
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         3     1      2    2438
                                             25 BANK0      3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (7) _printf                                              23    17      6    2068
                                             11 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     386
                                             31 COMRAM     1     1      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _tc_low                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_high                                            14    14      0       0
                                              0 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _GETxAPIxVAL (ARG)
       _SENDxMESSAGE (ARG)
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
         _SENDxMESSAGE (ARG)
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
         _SENDxMESSAGE (ARG)
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _Eeprom_Store
       _GETxAPIxVAL
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
         _SENDxMESSAGE (ARG)
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
     _Red_Led
     _SETxAPIxVAL
       _GETxAPIxVAL (ARG)
       _SENDxMESSAGE (ARG)
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
           _SENDxMESSAGE (ARG)
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
         _SENDxMESSAGE (ARG)
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
           _SENDxMESSAGE (ARG)
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
           _SENDxMESSAGE (ARG)
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
           _SENDxMESSAGE (ARG)
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
           _SENDxMESSAGE (ARG)
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
             _SENDxMESSAGE (ARG)
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     240      21       28.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      67       5       64.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A2      20        0.0%
DATA                 0      0     3E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Oct 24 23:06:25 2017

                  _eusart1TxBufferRemaining 003D                                          bsr 000FE0  
                       ___wmul@multiplicand 0092                                 __CFG_BORV$3 000000  
                               ?_GETxAPIxRW 0090                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l164 0872  
                                       l318 12F6                                         l514 3CFE  
                                       l338 13E8                                         l349 220A  
                                       l622 1BEC                                         l731 386C  
                                       l661 3612                                         l670 3688  
                                       l734 3898                                         l750 3818  
                                       l664 3636                                         l729 3868  
                                       l745 37E8                                         l658 35E4  
                                       l738 38C4                                         l754 3844  
                                       l667 3664                                         l747 37EC  
                                       _API 01FC                                __CFG_CPB$OFF 000000  
                              _Stop_Program 007D                                         _PR2 000FCB  
                              __CFG_CPD$OFF 000000                                __CFG_BOR$OFF 000000  
                                       prod 000FF3                                         wreg 000FE8  
                    ?_READxRECEIVEDxMESSAGE 0001            Train_Move_Right_Start@Return_Val 00C5  
                              ?_GETxAPIxVAL 0090                             APIxInitialize@i 0090  
                              __CFG_LVP$OFF 000000         __end_of_Left_Mountain_From_The_Left 33A0  
               _Left_Mountain_From_The_Left 326E                                __CFG_WDT$OFF 000000  
     __end_of_Right_Mountain_From_The_Right 313A      __size_of_Right_Mountain_From_The_Right 0134  
             _Right_Mountain_From_The_Right 3006                                        l1360 35B8  
                                      l1610 3952                                        l1620 3A88  
                                      l5103 3870                                        l5113 389C  
                                      l5109 3888                                        l5125 38C8  
                                      l5119 38B4                                        l5135 3808  
                                      l5151 3848                                        l5145 3834  
                                      l5129 37F0                                        l7001 2AEE  
                                      l5139 381C                                        l7003 2B0A  
                                      l7021 32B2                                        l7015 3298  
                                      l7017 32AA                                        l7009 3274  
                                      l7201 33E2                                        l7113 323E  
                                      l7105 320C                                        l7121 3258  
                                      l8001 0A10                                        l5427 3BB0  
                                      l7115 324A                                        l7123 3268  
                                      l8011 0A4C                                        l5437 3BD8  
                                      l7053 3370                                        l7045 3340  
                                      l7061 338A                                        l7109 321C  
                                      l7117 3250                                        l7141 304A  
                                      l8005 0A20                                        l7311 151E  
                                      l7303 14FC                                        l7055 337C  
                                      l7039 330A                                        l7063 339A  
                                      l7135 3030                                        l8103 0C90  
                                      l8023 0A94                                        l7313 1530  
                                      l7305 1514                                        l7049 3350  
                                      l7057 3382                                        l7233 34A0  
                                      l7225 346E                                        l7241 34BA  
                                      l7081 317E                                        l7137 3042  
                                      l7129 300C                                        l8105 0C94  
                                      l8041 0B02                                        l8033 0ADA  
                                      l8017 0A70                                        l7251 34D8  
                                      l7411 177E                                        l7403 172C  
                                      l7331 158A                                        l7323 1568  
                                      l7235 34AC                                        l7219 343A  
                                      l7243 34CA                                        l7075 3164  
                                      l8211 0F30                                        l8035 0ADE  
                                      l7261 351E                                        l7413 1790  
                                      l7405 1758                                        l7333 159C  
                                      l7325 1580                                        l7229 347E  
                                      l7237 34B2                                        l7077 3176  
                                      l7069 3140                                        l7173 310A  
                                      l7165 30DA                                        l7181 3124  
                                      l8205 0F24                                        l8133 0D90  
                                      l8109 0C9E                                        l8045 0B12  
                                      l8029 0AB8                                        l6615 3902  
                                      l7511 19FE                                        l7503 19AC  
                                      l7431 17FE                                        l7423 17AC  
                                      l7351 15F6                                        l7319 1556  
                                      l7343 15D4                                        l7175 3116  
                                      l7159 30A4                                        l7183 3134  
                                      l8223 0F6C                                        l8207 0F28  
                                      l8143 0DCA                                        l8135 0D98  
                                      l8063 0B94                                        l6617 390E  
                                      l7265 3530                                        l7249 34D2  
                                      l7513 1A10                                        l7505 19D8  
                                      l7433 1810                                        l7425 17D8  
                                      l7353 1608                                        l7345 15EC  
                                      l7169 30EA                                        l7177 311C  
                                      l8321 1198                                        l8305 10F2  
                                      l8233 0F7E                                        l8209 0F2C  
                                      l8217 0F3E                                        l8161 0E38  
                                      l8153 0E14                                        l8145 0DCE  
                                      l8129 0D60                                        l8081 0C00  
                                      l8313 112E                                        l6627 3944  
                                      l6619 3914                                        l6643 3A7C  
                                      l6635 3A48                                        l7267 357A  
                                      l7531 1A6A                                        l7523 1A2C  
                                      l7451 187E                                        l7419 179A  
                                      l7443 182C                                        l7371 167E  
                                      l7339 15C2                                        l7363 1640  
                                      l7291 14B2                                        l6715 37A8  
                                      l7195 33C8                                        l7099 31D6  
                                      l8411 12FE                                        l8403 12D2  
                                      l8315 117C                                        l8307 1120  
                                      l8243 0FAC                                        l8227 0F70  
                                      l8163 0E3C                                        l8139 0DB2  
                                      l8075 0BDC                                        l8059 0B84  
                                      l6637 3A52                                        l6653 2894  
                                      l7269 3580                                        l7533 1A7C  
                                      l7525 1A44                                        l7453 1890  
                                      l7445 1858                                        l7373 1690  
                                      l7365 1658                                        l7293 14C4  
                                      l7285 14A8                                        l6741 2C5A  
                                      l7197 33DA                                        l7189 33A6  
                                      l6901 2B12                                        l6813 2E2A  
                                      l8421 132A                                        l8325 11A8  
                                      l8253 0FE8                                        l8181 0EA4  
                                      l8165 0E40                                        l8157 0E22  
                                      l8149 0DF2                                        l8093 0C48  
                                      l8069 0BB8                                        l6639 3A58  
                                      l6671 28FA                                        l6735 3C5A  
                                      l7551 1AD6                                        l7519 1A1A  
                                      l7543 1A98                                        l7471 18FE  
                                      l7439 181A                                        l7463 18AC  
                                      l7391 16FE                                        l7359 162E  
                                      l7383 16AC                                        l6751 2C98  
                                      l6743 2C62                                        l6831 2E9E  
                                      l7623 2220                                        l7615 21F8  
                                      l8431 1348                                        l8407 12E8  
                                      l8335 11C6                                        l8255 0FEC  
                                      l8183 0EA8                                        l8167 0E44  
                                      l8175 0E60                                        l8087 0C24  
                                      l6649 2880                                        l7553 1AE8  
                                      l7545 1AB0                                        l7473 1910  
                                      l7465 18D8                                        l7393 1710  
                                      l7385 16D8                                        l6753 2CAA  
                                      l6745 2C74                                        l6761 2CCE  
                                      l6921 2BA4                                        l6913 2B70  
                                      l6825 2E74                                        l6817 2E36  
                                      l6809 2DFE                                        l7633 2244  
                                      l8441 1366                                        l8417 131A  
                                      l8345 11E4                                        l8281 109A  
                                      l8257 0FF6                                        l8265 1008  
                                      l8249 0FBA                                        l8273 1044  
                                      l8185 0EAC                                        l8169 0E52  
                                      l8177 0E8E                                        l6683 2930  
                                      l6659 28C4                                        l8531 27AE  
                                      l8523 2792                                        l7571 1B42  
                                      l7539 1A86                                        l7563 1B04  
                                      l7491 197E                                        l7459 189A  
                                      l7483 192C                                        l7379 169A  
                                      l7299 14EA                                        l6763 2CDE  
                                      l6851 2EF8                                        l6843 2ED0  
                                      l6907 2B42                                        l6819 2E3E  
                                      l6835 2EAC                                        l7811 251A  
                                      l7803 250A                                        l7715 23CA  
                                      l7643 228A                                        l7635 2262  
                                      l7627 222E                                        l7619 2212  
                                      l8355 1202                                        l8291 10D2  
                                      l8283 10AC                                        l8275 1072  
                                      l8267 1036                                        l8259 0FFA  
                                      l8187 0EB0                                        l8195 0ECC  
                                      l8099 0C6C                                        l6693 299C  
                                      l6669 28F4                                        l8525 2796  
                                      l8517 277C                                        l8509 271A  
                                      l7573 1B54                                        l7565 1B1C  
                                      l7493 1990                                        l7485 1958  
                                      l6773 2D28                                        l6765 2CE6  
                                      l6757 2CBC                                        l6749 2C86  
                                      l6781 2D76                                        l6853 2F00  
                                      l6941 2C24                                        l6917 2B78  
                                      l6837 2EC8                                        l7741 2442  
                                      l7653 22AE                                        l7629 2240  
                                      l8453 1384                                        l8365 1220  
                                      l8293 10D6                                        l8277 1076  
                                      l8189 0EBE                                        l8197 0EFA  
                                      l6687 2944                                        l6695 29A8  
                                      l7903 2648                                        l8543 27D4  
                                      l8551 2806                                        l8535 27B6  
                                      l7559 1AF2                                        l7583 1B70  
                                      l7479 191A                                        l7399 171A  
                                      l6783 2D8C                                        l6863 2F3E  
                                      l6847 2EEE                                        l6943 2C2A  
                                      l6935 2BF0                                        l6927 2BB8  
                                      l7815 2522                                        l7807 2512  
                                      l7751 2472                                        l7743 2446  
                                      l7735 241A                                        l7663 22D8  
                                      l7655 22CC                                        l7647 2298  
                                      l7639 227C                                        l7823 253A  
                                      l8463 13DA                                        l8455 13A0  
                                      l8375 123E                                        l8287 10BA  
                                      l8471 1408                                        l6689 294A  
                                      l6769 2D14                                        l6873 2F74  
                                      l6793 2DB2                                        l7745 2458  
                                      l7737 242C                                        l7673 22EC  
                                      l7825 258E                                        l8385 125C  
                                      l8297 10DA                                        l8289 10CE  
                                      l7923 26E8                                        l7907 2668  
                                      l8539 27C2                                        l7579 1B5E  
                                      l7499 199A                                        l6971 2A34  
                                      l6963 29FE                                        l6955 29C8  
                                      l6883 2FB0                                        l6867 2F6A  
                                      l6939 2C1E                                        l6947 2C32  
                                      l7819 2532                                        l7771 24B2  
                                      l7747 245C                                        l7739 2430  
                                      l7691 235E                                        l7683 2332  
                                      l7675 230A                                        l7667 22DE  
                                      l7659 22D2                                        l8459 13C4  
                                      l8299 10E4                                        l8651 39CA  
                                      l7909 267A                                        l8565 2840  
                                      l6981 2A74                                        l6869 2F70  
                                      l6893 2FE4                                        l6949 2C4E  
                                      l6789 2D94                                        l7765 24AC  
                                      l7749 246E                                        l7757 2488  
                                      l8397 127A                                        l8469 13F0  
                                      l8645 39B8                                        l7919 26C6  
                                      l8559 2838                                        l8567 2858  
                                      l6975 2A60                                        l6895 3000  
                                      l6799 2DC0                                        l7791 24F2  
                                      l7759 24A6                                        l7695 2374  
                                      l7687 2348                                        l8399 12AE  
                                      l6993 2ADA                                        l6969 2A2C  
                                      l6889 2FDC                                        l7777 24B8  
                                      l7785 24CC                                        l7795 24FA  
                                      l7787 24EA                                        l7971 08B4  
                                      l6997 2AE6                                        l6989 2AAC  
                                      l7965 087A                                        l7895 2604  
                                      l7799 2502                                        l7983 0928  
                                      l7993 0998                                        l7977 08EE  
                                      l7899 2626                                        l7997 09CE  
                                      l7989 0962                                        STR_1 0845  
                                      STR_2 0818                                        STR_3 0821  
                                      STR_4 082A                                        STR_5 0833  
                                      STR_6 083C                                        STR_7 082A  
                                      STR_8 0833                                        STR_9 080C  
            Right_Mountain_From_The_Left@rc 00B8                                        u6200 3ABA  
                                      u7000 1736                                        u7110 18B4  
                                      u7030 17B4                                        u7200 19B6  
                                      u7120 18B6                                        u7040 17B6  
                                      u7230 1A34                                        u7150 1934  
                                      u7070 1834                                        u8030 09F8  
                                      u7320 1B78                                        u7160 1936  
                                      u7080 1836                                        u7260 1AA0  
                                      u7236 1A36                                        u7326 1B7A  
                                      u7190 19B4                                        u8320 0D8A  
                                      u7290 1B0C                                        u7266 1AA2  
                                      i2l92 36DE                                        u6805 3B3C  
                                      u6830 1504                                        u7296 1B0E  
                                      u6920 1648                                        i2l97 371C  
                                      u6860 1570                                        u6836 1506  
                                      u7910 1BEC                                        u6950 16B4  
                                      u6926 164A                                        u6960 16B6  
                                      u7850 2636                                        u6890 15DC  
                                      u6866 1572                                        u6990 1734  
                                      u6896 15DE                                        u7890 26D6  
                              __CFG_WDTPS$1 000000                                        _TXIF 007CF4  
                                      _Data 0086                                __CFG_PWRT$ON 000000  
                    __end_of_APIxInitialize 21D6              __size_of_Train_Move_Left_Brake 014A  
             __end_of_Train_Move_Left_Brake 2B10                                        _pLen 0078  
                                      _atoi 34D0                                        _main 395C  
                             ?_EUSART1_Read 0001              __size_of_Train_Move_Left_Start 0138  
                           __end_of_SETxPWM 37E4                                        fsr0h 000FEA  
                                      fsr1h 000FE2                                        fsr0l 000FE9  
                                      fsr2h 000FDA                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                                      btemp 0040               __end_of_Train_Move_Left_Start 3006  
                                      pclat 000FFA                                        prodh 000FF4  
                                      prodl 000FF3                                        start 00A6  
                           __end_of_DataLen 080C                               __CFG_IESO$OFF 000000  
               EUSART1_Initialize@baud_rate 0090                          Green_Led@Operation 0020  
                             __CFG_MCLRE$ON 000000                                ___param_bank 000010  
                             ??_Init_Timers 0020                             __end_of_Red_Led 3864  
                             __CFG_PLLDIV$5 000000                              __CFG_CCP2MX$ON 000000  
                                     ?_atoi 0096                                       ?_main 0001  
                                     _EEADR 000FA9                                       _CMCON 000FB4  
                          Red_Led@Operation 0020                                       _T0CON 000FD5  
                                     _T2CON 000FCA                             __end_of___lwdiv 395C  
                              SETxPWM@speed 00B1                             __end_of___lwmod 3A92  
                                     i2l520 3C0A                                       _TMR0H 000FD7  
                                     _TMR0L 000FD6                                       _SPBRG 000FAF  
                             __CFG_USBDIV$2 000000                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                             __CFG_WRT0$OFF 000000                               __CFG_WRT1$OFF 000000  
                             __CFG_WRT2$OFF 000000                               __CFG_WRT3$OFF 000000  
                      _EUSART1_Transmit_ISR 3BE0                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                                       _pData 0076  
                            __CFG_EBTRB$OFF 000000                             __end_of_dpowers 080B  
                           __end_of_isdigit 3C62                             __end_of_tc_high 3758  
                                     atoi@a 009B                                       atoi@s 0096  
                                     _putch 3CFC                                       tablat 000FF5  
                           ?_APIxInitialize 0001                              ??_EUSART1_Read 0020  
                                     status 000FD8   Train_Move_Left_Brake@Train_Move_Wait_Time 0062  
                 __size_of_TranslateMessage 0176                         __size_of_GETxAPIxRW 001C  
                            __CFG_ICPRT$OFF 000000                        __end_of_Eeprom_Store 3694  
                           __initialization 39D0                                __end_of_atoi 35C2  
                __end_of_EUSART1_Initialize 3B32                                __end_of_main 39D0  
                          __end_of_Init_Pwm 3CAC                                      ??_atoi 0098  
                                    ??_main 0021                         __end_of_Init_Timers 3CFC  
                             __activetblptr 000002                            __end_of_Junction 2D92  
                              _Led1_Counter 006E                           _Green_Led_Counter 0021  
                     ?_EUSART1_Transmit_ISR 0001                           ?_Update_StateMchn 0001  
                        ??_Update_StateMchn 00BB                                      _ADCON1 000FC1  
                                    _EEDATA 000FA8                                      _CCPR1L 000FBE  
                                 ??_SETxPWM 00B4                                      _EECON2 000FA7  
                                    ?_putch 0001                                      _API_RW 031C  
                        __size_of_Green_Led 0080                                      i2l6151 3C36  
                                    i2l6143 3C16                                      i2l6163 3C06  
                                    i2l6253 36FA                                      _INTCON 000FF2  
                                    i2l6265 3712                                      i2l6249 36E0  
                                    i2l6259 3708                     ?_Train_Move_Right_Brake 0001  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 0044                     ?_Train_Move_Right_Start 0001  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 0001  
                                 ??_Red_Led 0020                              __CFG_XINST$OFF 000000  
           Train_Move_Left_Brake@Return_Val 00C2                                      ___wmul 3B76  
                            __CFG_STVREN$ON 000000                                   ??___lwdiv 0020  
                                 ??___lwmod 0020                                      clear_0 39D8  
                                    clear_1 39EA                                      clear_2 39F6  
                                    clear_3 3A02                                      _tc_low 0018  
                                    _printf 2872                              _Switch_Moutain 0081  
                                _Train_Path 21D6     Right_Mountain_From_The_Right@Return_Val 00C1  
    Left_Mountain_From_The_Right@Return_Val 00BF                              _Switch_Program 0082  
                                 ??_isdigit 0020                                   ??_tc_high 0001  
                 _Activate_Controls_Counter 006A                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 00AC  
                 _Button_Contact_Counter_LB 0025                   _Button_Contact_Counter_LF 0026  
                 _Button_Contact_Counter_RB 0028                   _Button_Contact_Counter_RF 0029  
            __end_of_Train_Move_Right_Brake 2C54                             _eusart1RxBuffer 0100  
                      __size_of_GETxAPIxVAL 001C                             _eusart1TxBuffer 017E  
            __end_of_Train_Move_Right_Start 2ECE                        _Train_Move_Pwm_Count 0072  
                                __accesstop 0060                     __end_of__initialization 3A28  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                             _Received_Data 007B                              __pcstackCOMRAM 0001  
                              __pidataBANK0 3D08                                 _Init_Timers 3CE4  
                             __end_of_putch 3D08                           __end_of_Green_Led 38E4  
                              ??_GETxAPIxRW 0020                     ??_READxRECEIVEDxMESSAGE 00B5  
                      __end_of_EUSART1_Read 3BE0                           __end_of_SetDCPWM1 3B76  
                           _Red_Led_Counter 0023                      ??_EUSART1_Transmit_ISR 0001  
Train_Move_Right_Start@Train_Move_Wait_Time 0068                    __size_of_Debounce_Inputs 0770  
               __end_of_EUSART1_Receive_ISR 3C3A            Train_Move_Right_Brake@Return_Val 00C4  
                             ?_SENDxMESSAGE 00A9                                     ??_putch 0020  
                             _eusart1RxHead 003B                               _eusart1TxHead 003E  
                     __size_of_Eeprom_Store 00D2                 Junction@Junction_Left_Right 00B2  
                             _eusart1RxTail 003C                                  __pbssBANK0 0060  
                                __pbssBANK1 0100                               _eusart1TxTail 003F  
                                 ?_Init_Pwm 0001                            _TranslateMessage 2594  
                        __end_of_GETxAPIxRW 3CE4                            GETxAPIxVAL@index 0020  
                          SETxAPIxVAL@index 00B0                                   ?_Junction 00B1  
                          SETxAPIxVAL@value 00AC        __size_of_Left_Mountain_From_The_Left 0132  
                                   ?___wmul 0090                                     _CCP1CON 000FBD  
                                   ?_tc_low 0001                                     ?_printf 009B  
                               ?_Train_Path 00B9                                _Eeprom_Store 35C2  
                                   _INTCON2 000FF1   Train_Move_Left_Start@Train_Move_Wait_Time 0064  
                            ??_SENDxMESSAGE 0021                            ??_APIxInitialize 0020  
                                   _SETxPWM 3758                            SETxPWM@direction 00B3  
                                   _DataLen 080B                             __CFG_VREGEN$OFF 000000  
                                ??_Init_Pwm 0021                                     _Red_Led 37E4  
                     _Train_Move_Left_Brake 29C6                                  ??_Junction 0021  
                                   __Hparam 0000                       _Train_Move_Left_Start 2ECE  
                                   __Lparam 0000                        _Message_To_Translate 007A  
                           __size_of___wmul 0036                                     ___lwdiv 38E4  
                                   ___lwmod 3A36                                __psmallconst 0800  
                                   __pcinit 39D0                                     __ramtop 0800  
                           __size_of_tc_low 008E                                     __ptext0 395C  
                                   __ptext1 084E                                     __ptext2 21D6  
                                   __ptext3 2D92                                     __ptext4 2B10  
                                   __ptext5 2ECE                                     __ptext6 29C6  
                                   __ptext7 3006                                     __ptext8 313A  
                                   __ptext9 33A0                        Train_Path@Return_Val 00C6  
                           __size_of_printf 0154                                     _dpowers 0801  
                                   _isdigit 3C3A                                     _tc_high 0008  
                        _EUSART1_Initialize 3AE6                   _Train_Move_Pwm_Fast_Count 0074  
                            __pintcode_body 3694                        end_of_initialization 3A28  
                           _Switch_Junction 007F                           ??_Debounce_Inputs 00B1  
                       ?_EUSART1_Initialize 0001                        __size_of_SETxAPIxVAL 0054  
                             __Lmediumconst 0000                                     int_func 3694  
                          SETxPWM@pwm_speed 00B6                   __size_of_Update_StateMchn 0BCA  
                       __size_of_Train_Path 03BE                                   _RCSTAbits 000FAB  
                                   printf@c 00A8                                     printf@f 009B  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc2 000FDE  
                     __size_of_EUSART1_Read 0034              Left_Mountain_From_The_Right@rc 00B8  
                      ??_EUSART1_Initialize 0020                                   _PORTAbits 000F80  
                                 _PORTBbits 000F81                                   _PORTCbits 000F82  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                                 _TRISEbits 000F96                Junction@Junction_Switch_Time 0060  
                    ?_Train_Move_Left_Brake 0001                                _EUSART1_Read 3BAC  
                                 _TXSTAbits 000FAC                      ?_Train_Move_Left_Start 0001  
                               _Switch_Main 0080                                 _Switch_Init 007E  
                      __end_of_SENDxMESSAGE 3C88                                ?_Init_Timers 0001  
                        Junction@Return_Val 00BD                              __end_of___wmul 3BAC  
                               _BAUDCONbits 000FB8                        _Update_State_Machine 0085  
                            __end_of_tc_low 00A6                    __end_of_TranslateMessage 270A  
               _Button_Contact_Counter_Stop 002B                              __end_of_printf 29C6  
            __size_of_READxRECEIVEDxMESSAGE 0168                                   _Green_Led 3864  
             __end_of_READxRECEIVEDxMESSAGE 2872                         start_initialization 39D0  
                             ??_GETxAPIxVAL 0020                                   _SetDCPWM1 3B32  
                           SetDCPWM1@DCycle 0096                      _Mountain_Delay_Counter 0070  
              ?_Left_Mountain_From_The_Left 0001                           __size_of_Init_Pwm 0024  
                         __size_of_Junction 013E                                    ??___wmul 0020  
                               __pdataBANK0 00BD                            __CFG_LPT1OSC$OFF 000000  
                                  ??_tc_low 000F                                    ??_printf 00A1  
                            _eusart1RxCount 003A                                ??_Train_Path 0021  
                                ?_Green_Led 0001                                 __pbssBIGRAM 01FC  
                               __pbssCOMRAM 0021               __size_of_EUSART1_Transmit_ISR 002E  
                             __pcstackBANK0 0090                                  ?_SetDCPWM1 0092  
Train_Move_Right_Brake@Train_Move_Wait_Time 0066                                _isdigit$1860 0090  
                                  ?_SETxPWM 00B1                __size_of_EUSART1_Receive_ISR 002C  
                       __end_of_GETxAPIxVAL 3CC8               ??_Left_Mountain_From_The_Left 0021  
                                  ?_Red_Led 0001                            _Update_StateMchn 084E  
                          ___lwdiv@dividend 0090      Right_Mountain_From_The_Left@Return_Val 00C0  
     Left_Mountain_From_The_Left@Return_Val 00BE                          __end_of_Train_Path 2594  
                                 __pintcode 0008                                    ?___lwdiv 0090  
      __end_of_Left_Mountain_From_The_Right 34D0       __size_of_Left_Mountain_From_The_Right 0130  
              _Left_Mountain_From_The_Right 33A0                                    ?___lwmod 0097  
                               __pintcodelo 0018                             GETxAPIxRW@index 0020  
                           _Debounce_Inputs 1418                                 __smallconst 0800  
                  ??_Train_Move_Right_Brake 0021                                    ?_isdigit 0001  
                                  ?_tc_high 0001             Right_Mountain_From_The_Right@rc 00B8  
                  ??_Train_Move_Right_Start 0021                       TranslateMessage@Index 00B3  
                     Junction@Straight_Bend 00B1                       TranslateMessage@Value 00B1  
              _Button_Contact_Counter_Start 002A                    _Reed_Contact_LMD_Counter 002E  
                          ___lwdiv@quotient 0095                              __size_of_putch 000C  
                            ___wmul@product 0094                       __size_of_SENDxMESSAGE 0026  
      __end_of_Right_Mountain_From_The_Left 326E       __size_of_Right_Mountain_From_The_Left 0134  
              _Right_Mountain_From_The_Left 313A                                    _PIE1bits 000F9D  
                            _Adjust_Counter 006C               Left_Mountain_From_The_Left@rc 00B8  
                                  _PIR1bits 000F9E                                    _PIR2bits 000FA1  
                                  _RCONbits 000FD0                              Train_Path@From 00BA  
                      __size_of_Init_Timers 0018               ?_Left_Mountain_From_The_Right 0001  
                         ___wmul@multiplier 0090                           SENDxMESSAGE@index 00AB  
                         SENDxMESSAGE@value 00A9                                 ??_Green_Led 0020  
                                printf@flag 00A4                                  printf@prec 00A5  
                               ??_SetDCPWM1 0094                                 _GETxAPIxVAL 3CAC  
                             ??_SETxAPIxVAL 00AE                                _SENDxMESSAGE 3C62  
                                 copy_data0 3A1C                     ??_Train_Move_Left_Brake 0021  
                  _Reed_Contact_LMU_Counter 002F                            __size_of_SETxPWM 008C  
                   ??_Train_Move_Left_Start 0021                          SetDCPWM1@dutycycle 0092  
                                  _Init_Pwm 3C88                       EUSART1_Read@readValue 0020  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 064E  
                                  __Hrparam 0000                                    _Junction 2C54  
                          __size_of_Red_Led 0080               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                                    _TrSwitch 0039  
                                  _RxSwitch 007C                    _Reed_Contact_RMD_Counter 0032  
                   __end_of_Debounce_Inputs 1B88                 __size_of_EUSART1_Initialize 004C  
                          __size_of___lwdiv 0078                            __size_of___lwmod 005C  
                         _Switch_Train_Path 0084                           _Switch_Train_Move 0083  
                          _Switch_Adjust_LB 0035                            _Switch_Adjust_LF 0036  
                          _Switch_Adjust_RB 0037                            _Switch_Adjust_RF 0038  
                         ?_TranslateMessage 0001             __size_of_Train_Move_Right_Brake 0144  
                          __size_of_isdigit 0028                            __size_of_tc_high 3750  
                        ??_TranslateMessage 0021                             ___lwdiv@divisor 0092  
           __size_of_Train_Move_Right_Start 013C                             ___lwdiv@counter 0094  
                                  __ptext10 326E                                    __ptext11 3758  
                                  __ptext20 34D0                                    __ptext12 2C54  
                                  __ptext21 3C3A                                    __ptext13 37E4  
                                  __ptext30 2872                                    __ptext22 3B76  
                                  __ptext14 3864                                    __ptext31 3CFC  
                                  __ptext23 3CAC                                    __ptext15 35C2  
                                  __ptext32 3A36                                    __ptext24 3CC8  
                                  __ptext16 1418                                    __ptext33 38E4  
                                  __ptext25 3BAC                                    __ptext17 3B32  
                                  __ptext34 3AE6                                    __ptext26 3CE4  
                                  __ptext18 270A                                    __ptext35 1B88  
                                  __ptext27 3C88                                    __ptext19 2594  
                                  __ptext28 3A92                                    __ptext29 3C62  
                                  __ptext38 3BE0                                    __ptext39 3C0E  
                             __size_of_atoi 00F2                               __size_of_main 0074  
                       __end_of_SETxAPIxVAL 3AE6                     _Reed_Contact_LB_Counter 002C  
                                  int$flags 0040                     _Reed_Contact_LF_Counter 002D  
                                  atoi@sign 009A                    _Reed_Contact_RMU_Counter 0033  
                                 printf@val 00A6                         _EUSART1_Receive_ISR 3C0E  
                                _GETxAPIxRW 3CC8                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0020                               ?_Eeprom_Store 0001  
                  __end_of_Update_StateMchn 1418                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0021              ??_Left_Mountain_From_The_Right 0021  
                     _READxRECEIVEDxMESSAGE 270A                                    isdigit@c 0091  
                   _Reed_Contact_RB_Counter 0030                                    intlevel1 0000  
                                  intlevel2 0000                        ?_EUSART1_Receive_ISR 0001  
                          ___lwmod@dividend 0097                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 0031                      _Train_Move_Right_Brake 2B10  
              __end_of_EUSART1_Transmit_ISR 3C0E                      _Train_Move_Right_Start 2D92  
           Train_Move_Left_Start@Return_Val 00C3                                Train_Path@To 00B9  
                                  printf@ap 00A2                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0034              ??_Right_Mountain_From_The_Left 0021  
                            ??_Eeprom_Store 0021                             ___lwmod@divisor 0099  
                           ___lwmod@counter 0020                                 _SETxAPIxVAL 3A92  
                        __CFG_FOSC$HSPLL_HS 000000                       ??_EUSART1_Receive_ISR 0001  
                            _APIxInitialize 1B88               _Button_Contact_Counter_Middle 0027  
