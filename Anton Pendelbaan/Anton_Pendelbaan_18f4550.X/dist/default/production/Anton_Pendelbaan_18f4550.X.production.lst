

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 05 22:50:24 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.44
    71                           ; Generated 14/09/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4550 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  004502                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for Right_Mountain_From_The_Left@Return_Val
   110  004502  01                 	db	1
   111                           
   112                           ;initializer for Left_Mountain_From_The_Left@Return_Val
   113  004503  01                 	db	1
   114                           
   115                           ;initializer for Left_Mountain_From_The_Right@Return_Val
   116  004504  01                 	db	1
   117                           
   118                           ;initializer for Right_Mountain_From_The_Right@Return_Val
   119  004505  01                 	db	1
   120                           
   121                           ;initializer for Junction@Return_Val
   122  004506  01                 	db	1
   123                           
   124                           	psect	idataBANK0
   125  0044FC                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for Train_Move_Right_Brake@Return_Val
   129  0044FC  01                 	db	1
   130                           
   131                           ;initializer for Train_Move_Right_Start@Return_Val
   132  0044FD  01                 	db	1
   133                           
   134                           ;initializer for Train_Move_Left_Brake@Return_Val
   135  0044FE  01                 	db	1
   136                           
   137                           ;initializer for Train_Move_Left_Start@Return_Val
   138  0044FF  01                 	db	1
   139                           
   140                           ;initializer for Train_Path@Return_Val
   141  004500  01                 	db	1
   142                           
   143                           ;initializer for _Switch_Main
   144  004501  01                 	db	1
   145                           
   146                           	psect	smallconst
   147  000800                     __psmallconst:
   148                           	opt stack 0
   149  000800  00                 	db	0
   150  000801                     _ApiList:
   151                           	opt stack 0
   152  000801  0012               	dw	18
   153  000803  0013               	dw	19
   154  000805  0014               	dw	20
   155  000807  0015               	dw	21
   156  000809  0016               	dw	22
   157  00080B  0017               	dw	23
   158  00080D  0018               	dw	24
   159  00080F  0019               	dw	25
   160  000811  001A               	dw	26
   161  000813  001B               	dw	27
   162  000815  0027               	dw	39
   163  000817  0028               	dw	40
   164  000819  002D               	dw	45
   165  00081B  002E               	dw	46
   166  00081D  002F               	dw	47
   167  00081F  0030               	dw	48
   168  000821  0031               	dw	49
   169  000823  0032               	dw	50
   170  000825  0033               	dw	51
   171  000827  0034               	dw	52
   172  000829  0035               	dw	53
   173  00082B  0036               	dw	54
   174  00082D  0037               	dw	55
   175  00082F  0038               	dw	56
   176  000831  0039               	dw	57
   177  000833  003A               	dw	58
   178  000835  003B               	dw	59
   179  000837  003C               	dw	60
   180  000839                     __end_of_ApiList:
   181                           	opt stack 0
   182  000839                     _dpowers:
   183                           	opt stack 0
   184  000839  0001               	dw	1
   185  00083B  000A               	dw	10
   186  00083D  0064               	dw	100
   187  00083F  03E8               	dw	1000
   188  000841  2710               	dw	10000
   189  000843                     __end_of_dpowers:
   190                           	opt stack 0
   191  000843                     _DataLen:
   192                           	opt stack 0
   193  000843  0A                 	db	10
   194  000844                     __end_of_DataLen:
   195                           	opt stack 0
   196  0000                     _PORTEbits	set	3972
   197  0000                     _PORTBbits	set	3969
   198  0000                     _PORTCbits	set	3970
   199  0000                     _PIR2bits	set	4001
   200  0000                     _EECON2	set	4007
   201  0000                     _EEDATA	set	4008
   202  0000                     _EEADR	set	4009
   203  0000                     _EECON1bits	set	4006
   204  0000                     _RCREG1	set	4014
   205  0000                     _RCSTA1bits	set	4011
   206  0000                     _TXREG1	set	4013
   207  0000                     _SPBRG	set	4015
   208  0000                     _SPBRGH	set	4016
   209  0000                     _TXSTAbits	set	4012
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _BAUDCONbits	set	4024
   212  0000                     _T2CON	set	4042
   213  0000                     _CCP1CON	set	4029
   214  0000                     _CCPR1L	set	4030
   215  0000                     _PR2	set	4043
   216  0000                     _T0CON	set	4053
   217  0000                     _TMR0L	set	4054
   218  0000                     _TMR0H	set	4055
   219  0000                     _INTCON2	set	4081
   220  0000                     _INTCON	set	4082
   221  0000                     _RCONbits	set	4048
   222  0000                     _PIR1bits	set	3998
   223  0000                     _PIE1bits	set	3997
   224  0000                     _INTCONbits	set	4082
   225  0000                     _TRISBbits	set	3987
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISCbits	set	3988
   228  0000                     _PORTDbits	set	3971
   229  0000                     _PORTAbits	set	3968
   230  0000                     _TRISDbits	set	3989
   231  0000                     _TRISAbits	set	3986
   232  0000                     _CMCON	set	4020
   233  0000                     _ADCON1	set	4033
   234  0000                     _TRISE	set	3990
   235  0000                     _TRISD	set	3989
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISB	set	3987
   238  0000                     _TRISA	set	3986
   239  0000                     _TXIF	set	31988
   240  000844                     STR_8:
   241  000844  4D                 	db	77	;'M'
   242  000845  23                 	db	35
   243  000846  25                 	db	37
   244  000847  64                 	db	100	;'d'
   245  000848  20                 	db	32
   246  000849  25                 	db	37
   247  00084A  64                 	db	100	;'d'
   248  00084B  0D                 	db	13
   249  00084C  0A                 	db	10
   250  00084D  00                 	db	0
   251  00084E                     STR_1:
   252  00084E  45                 	db	69	;'E'
   253  00084F  23                 	db	35
   254  000850  31                 	db	49	;'1'
   255  000851  30                 	db	48	;'0'
   256  000852  0D                 	db	13
   257  000853  0A                 	db	10
   258  000854  00                 	db	0
   259  000855                     STR_2:
   260  000855  45                 	db	69	;'E'
   261  000856  23                 	db	35
   262  000857  31                 	db	49	;'1'
   263  000858  31                 	db	49	;'1'
   264  000859  0D                 	db	13
   265  00085A  0A                 	db	10
   266  00085B  00                 	db	0
   267  00085C                     STR_3:
   268  00085C  45                 	db	69	;'E'
   269  00085D  23                 	db	35
   270  00085E  31                 	db	49	;'1'
   271  00085F  32                 	db	50	;'2'
   272  000860  0D                 	db	13
   273  000861  0A                 	db	10
   274  000862  00                 	db	0
   275  000863                     STR_4:
   276  000863  45                 	db	69	;'E'
   277  000864  23                 	db	35
   278  000865  31                 	db	49	;'1'
   279  000866  33                 	db	51	;'3'
   280  000867  0D                 	db	13
   281  000868  0A                 	db	10
   282  000869  00                 	db	0
   283  00086A                     STR_5:
   284  00086A  45                 	db	69	;'E'
   285  00086B  23                 	db	35
   286  00086C  31                 	db	49	;'1'
   287  00086D  34                 	db	52	;'4'
   288  00086E  0D                 	db	13
   289  00086F  0A                 	db	10
   290  000870  00                 	db	0
   291  0000                     
   292                           ; #config settings
   293  000871  00                 	db	0	; dummy byte at the end
   294  0000                     
   295                           	psect	cinit
   296  003F8A                     __pcinit:
   297                           	opt stack 0
   298  003F8A                     start_initialization:
   299                           	opt stack 0
   300  003F8A                     __initialization:
   301                           	opt stack 0
   302                           
   303                           ; Initialize objects allocated to BANK0 (6 bytes)
   304                           ; load TBLPTR registers with __pidataBANK0
   305  003F8A  0EFC               	movlw	low __pidataBANK0
   306  003F8C  6EF6               	movwf	tblptrl,c
   307  003F8E  0E44               	movlw	high __pidataBANK0
   308  003F90  6EF7               	movwf	tblptrh,c
   309  003F92  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   310  003F94  6EF8               	movwf	tblptru,c
   311  003F96  EE00  F0E4         	lfsr	0,__pdataBANK0
   312  003F9A  EE10 F006          	lfsr	1,6
   313  003F9E                     copy_data0:
   314  003F9E  0009               	tblrd		*+
   315  003FA0  CFF5 FFEE          	movff	tablat,postinc0
   316  003FA4  50E5               	movf	postdec1,w,c
   317  003FA6  50E1               	movf	fsr1l,w,c
   318  003FA8  E1FA               	bnz	copy_data0
   319                           
   320                           ; Initialize objects allocated to COMRAM (5 bytes)
   321                           ; load TBLPTR registers with __pidataCOMRAM
   322  003FAA  0E02               	movlw	low __pidataCOMRAM
   323  003FAC  6EF6               	movwf	tblptrl,c
   324  003FAE  0E45               	movlw	high __pidataCOMRAM
   325  003FB0  6EF7               	movwf	tblptrh,c
   326  003FB2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   327  003FB4  6EF8               	movwf	tblptru,c
   328  003FB6  EE00  F048         	lfsr	0,__pdataCOMRAM
   329  003FBA  EE10 F005          	lfsr	1,5
   330  003FBE                     copy_data1:
   331  003FBE  0009               	tblrd		*+
   332  003FC0  CFF5 FFEE          	movff	tablat,postinc0
   333  003FC4  50E5               	movf	postdec1,w,c
   334  003FC6  50E1               	movf	fsr1l,w,c
   335  003FC8  E1FA               	bnz	copy_data1
   336                           
   337                           ; Clear objects allocated to BANK4 (252 bytes)
   338  003FCA  EE04  F000         	lfsr	0,__pbssBANK4
   339  003FCE  0EFC               	movlw	252
   340  003FD0                     clear_0:
   341  003FD0  6AEE               	clrf	postinc0,c
   342  003FD2  06E8               	decf	wreg,f,c
   343  003FD4  E1FD               	bnz	clear_0
   344                           
   345                           ; Clear objects allocated to BANK3 (178 bytes)
   346  003FD6  EE03  F000         	lfsr	0,__pbssBANK3
   347  003FDA  0EB2               	movlw	178
   348  003FDC                     clear_1:
   349  003FDC  6AEE               	clrf	postinc0,c
   350  003FDE  06E8               	decf	wreg,f,c
   351  003FE0  E1FD               	bnz	clear_1
   352                           
   353                           ; Clear objects allocated to BANK2 (178 bytes)
   354  003FE2  EE02  F000         	lfsr	0,__pbssBANK2
   355  003FE6  0EB2               	movlw	178
   356  003FE8                     clear_2:
   357  003FE8  6AEE               	clrf	postinc0,c
   358  003FEA  06E8               	decf	wreg,f,c
   359  003FEC  E1FD               	bnz	clear_2
   360                           
   361                           ; Clear objects allocated to BANK1 (178 bytes)
   362  003FEE  EE01  F000         	lfsr	0,__pbssBANK1
   363  003FF2  0EB2               	movlw	178
   364  003FF4                     clear_3:
   365  003FF4  6AEE               	clrf	postinc0,c
   366  003FF6  06E8               	decf	wreg,f,c
   367  003FF8  E1FD               	bnz	clear_3
   368                           
   369                           ; Clear objects allocated to BANK0 (92 bytes)
   370  003FFA  EE00  F060         	lfsr	0,__pbssBANK0
   371  003FFE  0E5C               	movlw	92
   372  004000                     clear_4:
   373  004000  6AEE               	clrf	postinc0,c
   374  004002  06E8               	decf	wreg,f,c
   375  004004  E1FD               	bnz	clear_4
   376                           
   377                           ; Clear objects allocated to COMRAM (34 bytes)
   378  004006  EE00  F026         	lfsr	0,__pbssCOMRAM
   379  00400A  0E22               	movlw	34
   380  00400C                     clear_5:
   381  00400C  6AEE               	clrf	postinc0,c
   382  00400E  06E8               	decf	wreg,f,c
   383  004010  E1FD               	bnz	clear_5
   384  004012                     end_of_initialization:
   385                           	opt stack 0
   386  004012                     __end_of__initialization:
   387                           	opt stack 0
   388  004012  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   389  004014  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   390  004016  0E00               	movlw	low (__Lmediumconst shr (0+16))
   391  004018  6EF8               	movwf	tblptru,c
   392  00401A  0100               	movlb	0
   393  00401C  EF77  F01F         	goto	_main	;jump to C main() function
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           postdec1	equ	0xFE5
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	bssCOMRAM
   404  000026                     __pbssCOMRAM:
   405                           	opt stack 0
   406  000026                     _Mountain_Delay_Counter:
   407                           	opt stack 0
   408  000026                     	ds	2
   409  000028                     _Red_Led_Counter:
   410                           	opt stack 0
   411  000028                     	ds	2
   412  00002A                     _Green_Led_Counter:
   413                           	opt stack 0
   414  00002A                     	ds	2
   415  00002C                     _Led1_Counter:
   416                           	opt stack 0
   417  00002C                     	ds	2
   418  00002E                     _Switch_Moutain:
   419                           	opt stack 0
   420  00002E                     	ds	1
   421  00002F                     _Switch_Junction:
   422                           	opt stack 0
   423  00002F                     	ds	1
   424  000030                     _Button_Contact_Counter_RF:
   425                           	opt stack 0
   426  000030                     	ds	1
   427  000031                     _Button_Contact_Counter_RB:
   428                           	opt stack 0
   429  000031                     	ds	1
   430  000032                     _Button_Contact_Counter_LF:
   431                           	opt stack 0
   432  000032                     	ds	1
   433  000033                     _Button_Contact_Counter_LB:
   434                           	opt stack 0
   435  000033                     	ds	1
   436  000034                     _Button_Contact_Counter_Middle:
   437                           	opt stack 0
   438  000034                     	ds	1
   439  000035                     _Button_Contact_Counter_Stop:
   440                           	opt stack 0
   441  000035                     	ds	1
   442  000036                     _Button_Contact_Counter_Start:
   443                           	opt stack 0
   444  000036                     	ds	1
   445  000037                     _Reed_Contact_RMD_Counter:
   446                           	opt stack 0
   447  000037                     	ds	1
   448  000038                     _Reed_Contact_RMU_Counter:
   449                           	opt stack 0
   450  000038                     	ds	1
   451  000039                     _Reed_Contact_LMD_Counter:
   452                           	opt stack 0
   453  000039                     	ds	1
   454  00003A                     _Reed_Contact_LMU_Counter:
   455                           	opt stack 0
   456  00003A                     	ds	1
   457  00003B                     _Reed_Contact_RB_Counter:
   458                           	opt stack 0
   459  00003B                     	ds	1
   460  00003C                     _Reed_Contact_RF_Counter:
   461                           	opt stack 0
   462  00003C                     	ds	1
   463  00003D                     _Reed_Contact_LB_Counter:
   464                           	opt stack 0
   465  00003D                     	ds	1
   466  00003E                     _Reed_Contact_LF_Counter:
   467                           	opt stack 0
   468  00003E                     	ds	1
   469  00003F                     _eusart1RxCount:
   470                           	opt stack 0
   471  00003F                     	ds	1
   472  000040                     _eusart1RxTail:
   473                           	opt stack 0
   474  000040                     	ds	1
   475  000041                     _eusart1RxHead:
   476                           	opt stack 0
   477  000041                     	ds	1
   478  000042                     _eusart1TxBufferRemaining:
   479                           	opt stack 0
   480  000042                     	ds	1
   481  000043                     _eusart1TxTail:
   482                           	opt stack 0
   483  000043                     	ds	1
   484  000044                     _eusart1TxHead:
   485                           	opt stack 0
   486  000044                     	ds	1
   487  000045                     _Switch_Adjust_LF:
   488                           	opt stack 0
   489  000045                     	ds	1
   490  000046                     _Switch_Adjust_LB:
   491                           	opt stack 0
   492  000046                     	ds	1
   493  000047                     _Switch_Activate_Controls:
   494                           	opt stack 0
   495  000047                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	dataCOMRAM
   506  000048                     __pdataCOMRAM:
   507                           	opt stack 0
   508  000048                     Right_Mountain_From_The_Left@Return_Val:
   509                           	opt stack 0
   510  000048                     	ds	1
   511  000049                     Left_Mountain_From_The_Left@Return_Val:
   512                           	opt stack 0
   513  000049                     	ds	1
   514  00004A                     Left_Mountain_From_The_Right@Return_Val:
   515                           	opt stack 0
   516  00004A                     	ds	1
   517  00004B                     Right_Mountain_From_The_Right@Return_Val:
   518                           	opt stack 0
   519  00004B                     	ds	1
   520  00004C                     Junction@Return_Val:
   521                           	opt stack 0
   522  00004C                     	ds	1
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	bssBANK0
   533  000060                     __pbssBANK0:
   534                           	opt stack 0
   535  000060                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   536                           	opt stack 0
   537  000060                     	ds	2
   538  000062                     Train_Move_Right_Start@Train_Move_Wait_Time:
   539                           	opt stack 0
   540  000062                     	ds	2
   541  000064                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   542                           	opt stack 0
   543  000064                     	ds	2
   544  000066                     Train_Move_Left_Start@Train_Move_Wait_Time:
   545                           	opt stack 0
   546  000066                     	ds	2
   547  000068                     _Train_Move_Pwm_Fast_Count:
   548                           	opt stack 0
   549  000068                     	ds	2
   550  00006A                     Junction@Junction_Switch_Time:
   551                           	opt stack 0
   552  00006A                     	ds	2
   553  00006C                     _WriteActive:
   554                           	opt stack 0
   555  00006C                     	ds	2
   556  00006E                     _ReadActive:
   557                           	opt stack 0
   558  00006E                     	ds	2
   559  000070                     _DelayCounter:
   560                           	opt stack 0
   561  000070                     	ds	2
   562  000072                     _Diag_Comm2:
   563                           	opt stack 0
   564  000072                     	ds	2
   565  000074                     _Pcomm_List2:
   566                           	opt stack 0
   567  000074                     	ds	2
   568  000076                     _Pcomm_List:
   569                           	opt stack 0
   570  000076                     	ds	2
   571  000078                     _Diag_Comm:
   572                           	opt stack 0
   573  000078                     	ds	2
   574  00007A                     _pLen:
   575                           	opt stack 0
   576  00007A                     	ds	2
   577  00007C                     _pData:
   578                           	opt stack 0
   579  00007C                     	ds	2
   580  00007E                     _Activate_Controls_Counter:
   581                           	opt stack 0
   582  00007E                     	ds	2
   583  000080                     _Adjust_Counter:
   584                           	opt stack 0
   585  000080                     	ds	2
   586  000082                     _Train_Move_Pwm_Count:
   587                           	opt stack 0
   588  000082                     	ds	2
   589  000084                     _Switch_Train_Move:
   590                           	opt stack 0
   591  000084                     	ds	1
   592  000085                     _TrSwitch:
   593                           	opt stack 0
   594  000085                     	ds	1
   595  000086                     _Message_To_Translate:
   596                           	opt stack 0
   597  000086                     	ds	1
   598  000087                     _RxSwitch:
   599                           	opt stack 0
   600  000087                     	ds	1
   601  000088                     _Received_Data:
   602                           	opt stack 0
   603  000088                     	ds	1
   604  000089                     _Train_Pos2_Temp:
   605                           	opt stack 0
   606  000089                     	ds	1
   607  00008A                     _Train_Pos1_Temp:
   608                           	opt stack 0
   609  00008A                     	ds	1
   610  00008B                     _Stop_Program:
   611                           	opt stack 0
   612  00008B                     	ds	1
   613  00008C                     _Switch_Train_Path:
   614                           	opt stack 0
   615  00008C                     	ds	1
   616  00008D                     _Switch_Adjust_RF:
   617                           	opt stack 0
   618  00008D                     	ds	1
   619  00008E                     _Switch_Adjust_RB:
   620                           	opt stack 0
   621  00008E                     	ds	1
   622  00008F                     _Switch_Program:
   623                           	opt stack 0
   624  00008F                     	ds	1
   625  000090                     _Switch_Init:
   626                           	opt stack 0
   627  000090                     	ds	1
   628  000091                     _Update_State_Machine:
   629                           	opt stack 0
   630  000091                     	ds	1
   631  000092                     _Comm_List:
   632                           	opt stack 0
   633  000092                     	ds	32
   634  0000B2                     _Data:
   635                           	opt stack 0
   636  0000B2                     	ds	10
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           postdec1	equ	0xFE5
   644                           fsr1l	equ	0xFE1
   645                           
   646                           	psect	dataBANK0
   647  0000E4                     __pdataBANK0:
   648                           	opt stack 0
   649  0000E4                     Train_Move_Right_Brake@Return_Val:
   650                           	opt stack 0
   651  0000E4                     	ds	1
   652  0000E5                     Train_Move_Right_Start@Return_Val:
   653                           	opt stack 0
   654  0000E5                     	ds	1
   655  0000E6                     Train_Move_Left_Brake@Return_Val:
   656                           	opt stack 0
   657  0000E6                     	ds	1
   658  0000E7                     Train_Move_Left_Start@Return_Val:
   659                           	opt stack 0
   660  0000E7                     	ds	1
   661  0000E8                     Train_Path@Return_Val:
   662                           	opt stack 0
   663  0000E8                     	ds	1
   664  0000E9                     _Switch_Main:
   665                           	opt stack 0
   666  0000E9                     	ds	1
   667                           tblptru	equ	0xFF8
   668                           tblptrh	equ	0xFF7
   669                           tblptrl	equ	0xFF6
   670                           tablat	equ	0xFF5
   671                           postinc0	equ	0xFEE
   672                           wreg	equ	0xFE8
   673                           postdec1	equ	0xFE5
   674                           fsr1l	equ	0xFE1
   675                           
   676                           	psect	bssBANK1
   677  000100                     __pbssBANK1:
   678                           	opt stack 0
   679  000100                     _API:
   680                           	opt stack 0
   681  000100                     	ds	178
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           wreg	equ	0xFE8
   688                           postdec1	equ	0xFE5
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	bssBANK2
   692  000200                     __pbssBANK2:
   693                           	opt stack 0
   694  000200                     _API_RW:
   695                           	opt stack 0
   696  000200                     	ds	178
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           postdec1	equ	0xFE5
   704                           fsr1l	equ	0xFE1
   705                           
   706                           	psect	bssBANK3
   707  000300                     __pbssBANK3:
   708                           	opt stack 0
   709  000300                     _API_EEPROM:
   710                           	opt stack 0
   711  000300                     	ds	178
   712                           tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1l	equ	0xFE1
   720                           
   721                           	psect	bssBANK4
   722  000400                     __pbssBANK4:
   723                           	opt stack 0
   724  000400                     _eusart1RxBuffer:
   725                           	opt stack 0
   726  000400                     	ds	126
   727  00047E                     _eusart1TxBuffer:
   728                           	opt stack 0
   729  00047E                     	ds	126
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	cstackBANK0
   740  0000BC                     __pcstackBANK0:
   741                           	opt stack 0
   742  0000BC                     ??_tc_low:
   743                           
   744                           ; 1 bytes @ 0x0
   745  0000BC                     	ds	21
   746  0000D1                     ?_printf:
   747                           	opt stack 0
   748  0000D1                     EEPROMxSTORE@api_list:
   749                           	opt stack 0
   750  0000D1                     Right_Mountain_From_The_Right@rc:
   751                           	opt stack 0
   752  0000D1                     Left_Mountain_From_The_Right@rc:
   753                           	opt stack 0
   754  0000D1                     Left_Mountain_From_The_Left@rc:
   755                           	opt stack 0
   756  0000D1                     Right_Mountain_From_The_Left@rc:
   757                           	opt stack 0
   758  0000D1                     printf@f:
   759                           	opt stack 0
   760  0000D1                     _Train_Move_Left_Start$2188:
   761                           	opt stack 0
   762  0000D1                     _Train_Move_Left_Brake$2189:
   763                           	opt stack 0
   764  0000D1                     _Train_Move_Right_Start$2190:
   765                           	opt stack 0
   766  0000D1                     _Train_Move_Right_Brake$2191:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x15
   770  0000D1                     	ds	1
   771  0000D2                     EEPROMxSTORE@i:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x16
   775  0000D2                     	ds	1
   776  0000D3                     Train_Path@To:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x17
   780  0000D3                     	ds	1
   781  0000D4                     Train_Path@From:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x18
   785  0000D4                     	ds	1
   786  0000D5                     ??_Update_StateMchn:
   787                           
   788                           ; 1 bytes @ 0x19
   789  0000D5                     	ds	2
   790  0000D7                     printf@ap:
   791                           	opt stack 0
   792  0000D7                     _Update_StateMchn$2186:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x1B
   796  0000D7                     	ds	2
   797  0000D9                     printf@flag:
   798                           	opt stack 0
   799  0000D9                     _Update_StateMchn$2187:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x1D
   803  0000D9                     	ds	1
   804  0000DA                     printf@prec:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x1E
   808  0000DA                     	ds	1
   809  0000DB                     printf@val:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x1F
   813  0000DB                     	ds	2
   814  0000DD                     printf@c:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  0000DD                     	ds	1
   819  0000DE                     ??_READxRECEIVEDxMESSAGE:
   820  0000DE                     SendMessage@index:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x22
   824  0000DE                     	ds	2
   825  0000E0                     SendMessage@value:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x24
   829  0000E0                     	ds	2
   830  0000E2                     ??_main:
   831                           
   832                           ; 1 bytes @ 0x26
   833  0000E2                     	ds	2
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           postdec1	equ	0xFE5
   841                           fsr1l	equ	0xFE1
   842                           
   843                           	psect	cstackCOMRAM
   844  000001                     __pcstackCOMRAM:
   845                           	opt stack 0
   846  000001                     ??_tc_high:
   847  000001                     
   848                           ; 1 bytes @ 0x0
   849  000001                     	ds	18
   850  000013                     ??_isdigit:
   851  000013                     ?_GETxAPIxVAL:
   852                           	opt stack 0
   853  000013                     ?_GETxAPIxRW:
   854                           	opt stack 0
   855  000013                     ?_Eeprom_Read:
   856                           	opt stack 0
   857  000013                     ?___wmul:
   858                           	opt stack 0
   859  000013                     ?___lwdiv:
   860                           	opt stack 0
   861  000013                     EUSART1_Read@readValue:
   862                           	opt stack 0
   863  000013                     putch@data:
   864                           	opt stack 0
   865  000013                     Green_Led@Operation:
   866                           	opt stack 0
   867  000013                     Red_Led@Operation:
   868                           	opt stack 0
   869  000013                     EUSART1_Initialize@baud_rate:
   870                           	opt stack 0
   871  000013                     SENDxMESSAGE@index:
   872                           	opt stack 0
   873  000013                     APIxInitialize@i:
   874                           	opt stack 0
   875  000013                     GETxAPIxRW@index:
   876                           	opt stack 0
   877  000013                     GETxAPIxVAL@index:
   878                           	opt stack 0
   879  000013                     Eeprom_Read@Location:
   880                           	opt stack 0
   881  000013                     Eeprom_Store@Location:
   882                           	opt stack 0
   883  000013                     ___wmul@multiplier:
   884                           	opt stack 0
   885  000013                     ___lwdiv@dividend:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x12
   889  000013                     	ds	1
   890  000014                     _isdigit$1843:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x13
   894  000014                     	ds	1
   895  000015                     isdigit@c:
   896                           	opt stack 0
   897  000015                     SENDxMESSAGE@value:
   898                           	opt stack 0
   899  000015                     SETxAPIxVALxNoxRET@index:
   900                           	opt stack 0
   901  000015                     Eeprom_Read@Location_Low_Byte:
   902                           	opt stack 0
   903  000015                     Eeprom_Store@Value:
   904                           	opt stack 0
   905  000015                     SetDCPWM1@dutycycle:
   906                           	opt stack 0
   907  000015                     ___wmul@multiplicand:
   908                           	opt stack 0
   909  000015                     ___lwdiv@divisor:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x14
   913  000015                     	ds	2
   914  000017                     ??_SENDxMESSAGE:
   915  000017                     ??_SetDCPWM1:
   916  000017                     ___lwdiv@counter:
   917                           	opt stack 0
   918  000017                     SETxAPIxVALxNoxRET@value:
   919                           	opt stack 0
   920  000017                     Eeprom_Read@Location_High_Byte:
   921                           	opt stack 0
   922  000017                     Eeprom_Store@Location_Low_Byte:
   923                           	opt stack 0
   924  000017                     ___wmul@product:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x16
   928  000017                     	ds	1
   929  000018                     ___lwdiv@quotient:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x17
   933  000018                     	ds	1
   934  000019                     ?_atoi:
   935                           	opt stack 0
   936  000019                     SETxAPIxVAL@index:
   937                           	opt stack 0
   938  000019                     Eeprom_Read@Return_Data:
   939                           	opt stack 0
   940  000019                     Eeprom_Store@Location_High_Byte:
   941                           	opt stack 0
   942  000019                     SetDCPWM1@DCycle:
   943                           	opt stack 0
   944  000019                     atoi@s:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x18
   948  000019                     	ds	1
   949  00001A                     ?___lwmod:
   950                           	opt stack 0
   951  00001A                     ___lwmod@dividend:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x19
   955  00001A                     	ds	1
   956  00001B                     ??_atoi:
   957  00001B                     ?_EEPROMxREAD:
   958                           	opt stack 0
   959  00001B                     ?_EEPROMxSTORE:
   960                           	opt stack 0
   961  00001B                     SETxAPIxVAL@value:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x1A
   965  00001B                     	ds	1
   966  00001C                     ___lwmod@divisor:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x1B
   970  00001C                     	ds	1
   971  00001D                     ??_EEPROMxREAD:
   972  00001D                     ??_EEPROMxSTORE:
   973  00001D                     atoi@sign:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x1C
   977  00001D                     	ds	1
   978  00001E                     ___lwmod@counter:
   979                           	opt stack 0
   980  00001E                     atoi@a:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x1D
   984  00001E                     	ds	1
   985  00001F                     ??_Debounce_Inputs:
   986  00001F                     ??_printf:
   987  00001F                     Junction@Straight_Bend:
   988                           	opt stack 0
   989  00001F                     EEPROMxREAD@Data:
   990                           	opt stack 0
   991  00001F                     SETxPWM@speed:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x1E
   995  00001F                     	ds	1
   996  000020                     ??_DIAGNOSTICxTOxPC:
   997  000020                     Junction@Junction_Left_Right:
   998                           	opt stack 0
   999  000020                     TranslateMessage@Value:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x1F
  1003  000020                     	ds	1
  1004  000021                     EEPROMxREAD@i:
  1005                           	opt stack 0
  1006  000021                     SETxPWM@direction:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x20
  1010  000021                     	ds	1
  1011  000022                     ??_SETxPWM:
  1012  000022                     TranslateMessage@Index:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x21
  1016  000022                     	ds	2
  1017  000024                     SETxPWM@pwm_speed:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x23
  1021  000024                     	ds	2
  1022  000026                     tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031                           ; 1 bytes @ 0x25
  1032 ;;
  1033 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1034 ;;
  1035 ;; *************** function _main *****************
  1036 ;; Defined at:
  1037 ;;		line 107 in file "../Main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;		None
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;		None
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1051 ;;      Params:         0       0       0       0       0       0       0       0       0
  1052 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1053 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1054 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1055 ;;Total ram usage:        2 bytes
  1056 ;; Hardware stack levels required when called:    9
  1057 ;; This function calls:
  1058 ;;		_APIxInitialize
  1059 ;;		_DIAGNOSTICxTOxPC
  1060 ;;		_EEPROMxREAD
  1061 ;;		_EUSART1_Initialize
  1062 ;;		_Init_Pwm
  1063 ;;		_Init_Timers
  1064 ;;		_READxRECEIVEDxMESSAGE
  1065 ;;		_Update_StateMchn
  1066 ;; This function is called by:
  1067 ;;		Startup code after reset
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text0
  1072  003EEE                     __ptext0:
  1073                           	opt stack 0
  1074  003EEE                     _main:
  1075                           	opt stack 22
  1076                           
  1077                           ;Main.c: 109: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
  1078                           
  1079                           ;incstack = 0
  1080  003EEE  6892               	setf	3986,c	;volatile
  1081  003EF0  6893               	setf	3987,c	;volatile
  1082  003EF2  6894               	setf	3988,c	;volatile
  1083  003EF4  6895               	setf	3989,c	;volatile
  1084  003EF6  6896               	setf	3990,c	;volatile
  1085                           
  1086                           ;Main.c: 110: ADCON1=0x0F;
  1087  003EF8  0E0F               	movlw	15
  1088  003EFA  6EC1               	movwf	4033,c	;volatile
  1089                           
  1090                           ;Main.c: 111: CMCON=0x07;
  1091  003EFC  0E07               	movlw	7
  1092  003EFE  6EB4               	movwf	4020,c	;volatile
  1093                           
  1094                           ;Main.c: 112: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
  1095  003F00  9892               	bcf	3986,4,c	;volatile
  1096  003F02  9A95               	bcf	3989,5,c	;volatile
  1097  003F04  9C95               	bcf	3989,6,c	;volatile
  1098                           
  1099                           ;Main.c: 113: PORTAbits.RA4 = 0;
  1100  003F06  9880               	bcf	3968,4,c	;volatile
  1101                           
  1102                           ;Main.c: 114: PORTDbits.RD6 = 0;
  1103  003F08  9C83               	bcf	3971,6,c	;volatile
  1104                           
  1105                           ;Main.c: 115: PORTDbits.RD5 = 0;
  1106  003F0A  9A83               	bcf	3971,5,c	;volatile
  1107                           
  1108                           ;Main.c: 117: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
  1109  003F0C  9092               	bcf	3986,0,c	;volatile
  1110  003F0E  9292               	bcf	3986,1,c	;volatile
  1111  003F10  9492               	bcf	3986,2,c	;volatile
  1112  003F12  9692               	bcf	3986,3,c	;volatile
  1113                           
  1114                           ;Main.c: 118: PORTAbits.RA3 = 0;
  1115  003F14  9680               	bcf	3968,3,c	;volatile
  1116                           
  1117                           ;Main.c: 119: PORTAbits.RA2 = 0;
  1118  003F16  9480               	bcf	3968,2,c	;volatile
  1119                           
  1120                           ;Main.c: 120: PORTAbits.RA1 = 0;
  1121  003F18  9280               	bcf	3968,1,c	;volatile
  1122                           
  1123                           ;Main.c: 121: PORTAbits.RA0 = 0;
  1124  003F1A  9080               	bcf	3968,0,c	;volatile
  1125                           
  1126                           ;Main.c: 123: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
  1127  003F1C  8495               	bsf	3989,2,c	;volatile
  1128  003F1E  8695               	bsf	3989,3,c	;volatile
  1129  003F20  8095               	bsf	3989,0,c	;volatile
  1130  003F22  8295               	bsf	3989,1,c	;volatile
  1131  003F24  8294               	bsf	3988,1,c	;volatile
  1132  003F26  8895               	bsf	3989,4,c	;volatile
  1133  003F28  8096               	bsf	3990,0,c	;volatile
  1134  003F2A  8296               	bsf	3990,1,c	;volatile
  1135                           
  1136                           ;Main.c: 124: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
  1137  003F2C  8093               	bsf	3987,0,c	;volatile
  1138  003F2E  8293               	bsf	3987,1,c	;volatile
  1139  003F30  8493               	bsf	3987,2,c	;volatile
  1140  003F32  8693               	bsf	3987,3,c	;volatile
  1141  003F34  8893               	bsf	3987,4,c	;volatile
  1142  003F36  8A93               	bsf	3987,5,c	;volatile
  1143  003F38  8E95               	bsf	3989,7,c	;volatile
  1144                           
  1145                           ;Main.c: 125: APIxInitialize();
  1146  003F3A  EC2E  F00F         	call	_APIxInitialize	;wreg free
  1147                           
  1148                           ;Main.c: 126: _delay((unsigned long)((1000)*(24000000/4000.0)));
  1149  003F3E  0E1F               	movlw	31
  1150  003F40  0100               	movlb	0	; () banked
  1151  003F42  6FE3               	movwf	(??_main+1)& (0+255),b
  1152  003F44  0E71               	movlw	113
  1153  003F46  6FE2               	movwf	??_main& (0+255),b
  1154  003F48  0E1E               	movlw	30
  1155  003F4A                     u9567:
  1156  003F4A  2EE8               	decfsz	wreg,f,c
  1157  003F4C  D7FE               	bra	u9567
  1158  003F4E  2FE2               	decfsz	??_main& (0+255),f,b
  1159  003F50  D7FC               	bra	u9567
  1160  003F52  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  1161  003F54  D7FA               	bra	u9567
  1162  003F56  F000               	nop	
  1163  003F58                     
  1164                           ;Main.c: 128: continue;
  1165  003F58  EC51  F01E         	call	_EEPROMxREAD	;wreg free
  1166  003F5C  501B               	movf	?_EEPROMxREAD,w,c
  1167  003F5E  101C               	iorwf	?_EEPROMxREAD+1,w,c
  1168  003F60  B4D8               	btfsc	status,2,c
  1169  003F62  D7FA               	goto	l90
  1170                           
  1171                           ;Main.c: 129: };
  1172                           ;Main.c: 130: Init_Pwm();
  1173  003F64  EC0A  F022         	call	_Init_Pwm	;wreg free
  1174                           
  1175                           ;Main.c: 131: Init_Timers();
  1176  003F68  EC6C  F022         	call	_Init_Timers	;wreg free
  1177                           
  1178                           ;Main.c: 132: EUSART1_Initialize();
  1179  003F6C  EC43  F021         	call	_EUSART1_Initialize	;wreg free
  1180  003F70                     
  1181                           ;Main.c: 136: {
  1182                           ;Main.c: 137: if (1 == Update_State_Machine)
  1183  003F70  0100               	movlb	0	; () banked
  1184  003F72  0591               	decf	_Update_State_Machine& (0+255),w,b	;volatile
  1185  003F74  A4D8               	btfss	status,2,c
  1186  003F76  D004               	goto	l93
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;Main.c: 138: {
  1190                           ;Main.c: 139: Update_State_Machine = 0;
  1191  003F78  0E00               	movlw	0
  1192  003F7A  6F91               	movwf	_Update_State_Machine& (0+255),b	;volatile
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;Main.c: 140: Update_StateMchn();
  1196  003F7C  EC39  F004         	call	_Update_StateMchn	;wreg free
  1197  003F80                     l93:
  1198                           
  1199                           ;Main.c: 141: }
  1200                           ;Main.c: 143: READxRECEIVEDxMESSAGE();
  1201  003F80  EC46  F01C         	call	_READxRECEIVEDxMESSAGE	;wreg free
  1202                           
  1203                           ;Main.c: 144: DIAGNOSTICxTOxPC();
  1204  003F84  EC99  F013         	call	_DIAGNOSTICxTOxPC	;wreg free
  1205  003F88  D7F3               	goto	l92
  1206  003F8A                     __end_of_main:
  1207                           	opt stack 0
  1208                           tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           postinc0	equ	0xFEE
  1213                           wreg	equ	0xFE8
  1214                           postdec1	equ	0xFE5
  1215                           fsr1l	equ	0xFE1
  1216                           status	equ	0xFD8
  1217                           
  1218 ;; *************** function _Update_StateMchn *****************
  1219 ;; Defined at:
  1220 ;;		line 43 in file "../State_Mchn.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;		None
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         0       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1237 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        5 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    8
  1241 ;; This function calls:
  1242 ;;		_Debounce_Inputs
  1243 ;;		_EEPROMxSTORE
  1244 ;;		_GETxAPIxVAL
  1245 ;;		_Green_Led
  1246 ;;		_Junction
  1247 ;;		_Red_Led
  1248 ;;		_SETxAPIxVAL
  1249 ;;		_SETxAPIxVALxNoxRET
  1250 ;;		_SETxPWM
  1251 ;;		_Train_Path
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text1
  1258  000872                     __ptext1:
  1259                           	opt stack 0
  1260  000872                     _Update_StateMchn:
  1261                           	opt stack 22
  1262                           
  1263                           ;State_Mchn.c: 45: if (GETxAPIxVAL(72)){
  1264                           
  1265                           ;incstack = 0
  1266  000872  0E00               	movlw	0
  1267  000874  6E14               	movwf	GETxAPIxVAL@index+1,c
  1268  000876  0E48               	movlw	72
  1269  000878  6E13               	movwf	GETxAPIxVAL@index,c
  1270  00087A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1271  00087E  5013               	movf	?_GETxAPIxVAL,w,c
  1272  000880  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1273  000882  B4D8               	btfsc	status,2,c
  1274  000884  D00C               	goto	l187
  1275                           
  1276                           ;State_Mchn.c: 46: SETxAPIxVAL(72, 0);
  1277  000886  0E00               	movlw	0
  1278  000888  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1279  00088A  0E48               	movlw	72
  1280  00088C  6E19               	movwf	SETxAPIxVAL@index,c
  1281  00088E  0E00               	movlw	0
  1282  000890  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1283  000892  0E00               	movlw	0
  1284  000894  6E1B               	movwf	SETxAPIxVAL@value,c
  1285  000896  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1286  00089A  00FF               	reset		;# 
  1287                           
  1288                           ;State_Mchn.c: 48: }
  1289  00089C  D01A               	goto	l190
  1290  00089E                     l187:
  1291                           
  1292                           ;State_Mchn.c: 49: else if (GETxAPIxVAL(87)){
  1293  00089E  0E00               	movlw	0
  1294  0008A0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1295  0008A2  0E57               	movlw	87
  1296  0008A4  6E13               	movwf	GETxAPIxVAL@index,c
  1297  0008A6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1298  0008AA  5013               	movf	?_GETxAPIxVAL,w,c
  1299  0008AC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1300  0008AE  B4D8               	btfsc	status,2,c
  1301  0008B0  D010               	goto	l190
  1302                           
  1303                           ;State_Mchn.c: 50: if (EEPROMxSTORE() == 1){
  1304  0008B2  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  1305  0008B6  041B               	decf	?_EEPROMxSTORE,w,c
  1306  0008B8  101C               	iorwf	?_EEPROMxSTORE+1,w,c
  1307  0008BA  A4D8               	btfss	status,2,c
  1308  0008BC  D00A               	goto	l190
  1309                           
  1310                           ;State_Mchn.c: 51: SETxAPIxVAL(87, 0);
  1311  0008BE  0E00               	movlw	0
  1312  0008C0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1313  0008C2  0E57               	movlw	87
  1314  0008C4  6E19               	movwf	SETxAPIxVAL@index,c
  1315  0008C6  0E00               	movlw	0
  1316  0008C8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1317  0008CA  0E00               	movlw	0
  1318  0008CC  6E1B               	movwf	SETxAPIxVAL@value,c
  1319  0008CE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1320  0008D2                     l190:
  1321                           
  1322                           ;State_Mchn.c: 52: }
  1323                           ;State_Mchn.c: 53: }
  1324                           ;State_Mchn.c: 55: Debounce_Inputs();
  1325  0008D2  EC6B  F00B         	call	_Debounce_Inputs	;wreg free
  1326                           
  1327                           ;State_Mchn.c: 57: switch (Switch_Main)
  1328  0008D6  EF4C  F00B         	goto	l191
  1329  0008DA                     
  1330                           ;State_Mchn.c: 60: if (GETxAPIxVAL(74)){
  1331  0008DA  0E00               	movlw	0
  1332  0008DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1333  0008DE  0E4A               	movlw	74
  1334  0008E0  6E13               	movwf	GETxAPIxVAL@index,c
  1335  0008E2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1336  0008E6  5013               	movf	?_GETxAPIxVAL,w,c
  1337  0008E8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1338  0008EA  B4D8               	btfsc	status,2,c
  1339  0008EC  D015               	goto	l193
  1340                           
  1341                           ;State_Mchn.c: 61: if(Junction(0, 1) == 0){
  1342  0008EE  0E01               	movlw	1
  1343  0008F0  6E1F               	movwf	Junction@Straight_Bend,c
  1344  0008F2  0E00               	movlw	0
  1345  0008F4  ECD1  F015         	call	_Junction
  1346  0008F8  0900               	iorlw	0
  1347  0008FA  A4D8               	btfss	status,2,c
  1348  0008FC  EF58  F00B         	goto	l322
  1349                           
  1350                           ;State_Mchn.c: 62: SETxAPIxVALxNoxRET(74, 0);
  1351  000900  0E00               	movlw	0
  1352  000902  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1353  000904  0E4A               	movlw	74
  1354  000906  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1355  000908  0E00               	movlw	0
  1356  00090A  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1357  00090C  0E00               	movlw	0
  1358  00090E  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1359  000910  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1360                           
  1361                           ;State_Mchn.c: 63: }
  1362                           ;State_Mchn.c: 64: }
  1363  000914  EF58  F00B         	goto	l322
  1364  000918                     l193:
  1365                           
  1366                           ;State_Mchn.c: 65: else if (GETxAPIxVAL(73)){
  1367  000918  0E00               	movlw	0
  1368  00091A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1369  00091C  0E49               	movlw	73
  1370  00091E  6E13               	movwf	GETxAPIxVAL@index,c
  1371  000920  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1372  000924  5013               	movf	?_GETxAPIxVAL,w,c
  1373  000926  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1374  000928  B4D8               	btfsc	status,2,c
  1375  00092A  D015               	goto	l196
  1376                           
  1377                           ;State_Mchn.c: 66: if(Junction(0, 0) == 0){
  1378  00092C  0E00               	movlw	0
  1379  00092E  6E1F               	movwf	Junction@Straight_Bend,c
  1380  000930  0E00               	movlw	0
  1381  000932  ECD1  F015         	call	_Junction
  1382  000936  0900               	iorlw	0
  1383  000938  A4D8               	btfss	status,2,c
  1384  00093A  EF58  F00B         	goto	l322
  1385                           
  1386                           ;State_Mchn.c: 67: SETxAPIxVALxNoxRET(73, 0);
  1387  00093E  0E00               	movlw	0
  1388  000940  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1389  000942  0E49               	movlw	73
  1390  000944  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1391  000946  0E00               	movlw	0
  1392  000948  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1393  00094A  0E00               	movlw	0
  1394  00094C  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1395  00094E  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1396                           
  1397                           ;State_Mchn.c: 68: }
  1398                           ;State_Mchn.c: 69: }
  1399  000952  EF58  F00B         	goto	l322
  1400  000956                     l196:
  1401                           
  1402                           ;State_Mchn.c: 70: else if (GETxAPIxVAL(76)){
  1403  000956  0E00               	movlw	0
  1404  000958  6E14               	movwf	GETxAPIxVAL@index+1,c
  1405  00095A  0E4C               	movlw	76
  1406  00095C  6E13               	movwf	GETxAPIxVAL@index,c
  1407  00095E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1408  000962  5013               	movf	?_GETxAPIxVAL,w,c
  1409  000964  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1410  000966  B4D8               	btfsc	status,2,c
  1411  000968  D015               	goto	l199
  1412                           
  1413                           ;State_Mchn.c: 71: if(Junction(1, 1) == 0){
  1414  00096A  0E01               	movlw	1
  1415  00096C  6E1F               	movwf	Junction@Straight_Bend,c
  1416  00096E  0E01               	movlw	1
  1417  000970  ECD1  F015         	call	_Junction
  1418  000974  0900               	iorlw	0
  1419  000976  A4D8               	btfss	status,2,c
  1420  000978  EF58  F00B         	goto	l322
  1421                           
  1422                           ;State_Mchn.c: 72: SETxAPIxVALxNoxRET(76, 0);
  1423  00097C  0E00               	movlw	0
  1424  00097E  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1425  000980  0E4C               	movlw	76
  1426  000982  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1427  000984  0E00               	movlw	0
  1428  000986  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1429  000988  0E00               	movlw	0
  1430  00098A  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1431  00098C  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1432                           
  1433                           ;State_Mchn.c: 73: }
  1434                           ;State_Mchn.c: 74: }
  1435  000990  EF58  F00B         	goto	l322
  1436  000994                     l199:
  1437                           
  1438                           ;State_Mchn.c: 75: else if (GETxAPIxVAL(75)){
  1439  000994  0E00               	movlw	0
  1440  000996  6E14               	movwf	GETxAPIxVAL@index+1,c
  1441  000998  0E4B               	movlw	75
  1442  00099A  6E13               	movwf	GETxAPIxVAL@index,c
  1443  00099C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1444  0009A0  5013               	movf	?_GETxAPIxVAL,w,c
  1445  0009A2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1446  0009A4  B4D8               	btfsc	status,2,c
  1447  0009A6  D015               	goto	l202
  1448                           
  1449                           ;State_Mchn.c: 76: if(Junction(1, 0) == 0){
  1450  0009A8  0E00               	movlw	0
  1451  0009AA  6E1F               	movwf	Junction@Straight_Bend,c
  1452  0009AC  0E01               	movlw	1
  1453  0009AE  ECD1  F015         	call	_Junction
  1454  0009B2  0900               	iorlw	0
  1455  0009B4  A4D8               	btfss	status,2,c
  1456  0009B6  EF58  F00B         	goto	l322
  1457                           
  1458                           ;State_Mchn.c: 77: SETxAPIxVALxNoxRET(75, 0);
  1459  0009BA  0E00               	movlw	0
  1460  0009BC  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1461  0009BE  0E4B               	movlw	75
  1462  0009C0  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1463  0009C2  0E00               	movlw	0
  1464  0009C4  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1465  0009C6  0E00               	movlw	0
  1466  0009C8  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1467  0009CA  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1468                           
  1469                           ;State_Mchn.c: 78: }
  1470                           ;State_Mchn.c: 79: }
  1471  0009CE  EF58  F00B         	goto	l322
  1472  0009D2                     l202:
  1473                           
  1474                           ;State_Mchn.c: 80: else if (GETxAPIxVAL(77)){
  1475  0009D2  0E00               	movlw	0
  1476  0009D4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1477  0009D6  0E4D               	movlw	77
  1478  0009D8  6E13               	movwf	GETxAPIxVAL@index,c
  1479  0009DA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1480  0009DE  5013               	movf	?_GETxAPIxVAL,w,c
  1481  0009E0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1482  0009E2  B4D8               	btfsc	status,2,c
  1483  0009E4  D016               	goto	l205
  1484                           
  1485                           ;State_Mchn.c: 81: SETxAPIxVAL(69, 1);
  1486  0009E6  0E00               	movlw	0
  1487  0009E8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1488  0009EA  0E45               	movlw	69
  1489  0009EC  6E19               	movwf	SETxAPIxVAL@index,c
  1490  0009EE  0E00               	movlw	0
  1491  0009F0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1492  0009F2  0E01               	movlw	1
  1493  0009F4  6E1B               	movwf	SETxAPIxVAL@value,c
  1494  0009F6  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1495                           
  1496                           ;State_Mchn.c: 82: SETxAPIxVALxNoxRET(77, 0);
  1497  0009FA  0E00               	movlw	0
  1498  0009FC  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1499  0009FE  0E4D               	movlw	77
  1500  000A00  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1501  000A02  0E00               	movlw	0
  1502  000A04  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1503  000A06  0E00               	movlw	0
  1504  000A08  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1505  000A0A  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1506                           
  1507                           ;State_Mchn.c: 83: }
  1508  000A0E  EF58  F00B         	goto	l322
  1509  000A12                     l205:
  1510                           
  1511                           ;State_Mchn.c: 84: else if (GETxAPIxVAL(78)){
  1512  000A12  0E00               	movlw	0
  1513  000A14  6E14               	movwf	GETxAPIxVAL@index+1,c
  1514  000A16  0E4E               	movlw	78
  1515  000A18  6E13               	movwf	GETxAPIxVAL@index,c
  1516  000A1A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1517  000A1E  5013               	movf	?_GETxAPIxVAL,w,c
  1518  000A20  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1519  000A22  B4D8               	btfsc	status,2,c
  1520  000A24  D016               	goto	l207
  1521                           
  1522                           ;State_Mchn.c: 85: SETxAPIxVAL(69, 0);
  1523  000A26  0E00               	movlw	0
  1524  000A28  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1525  000A2A  0E45               	movlw	69
  1526  000A2C  6E19               	movwf	SETxAPIxVAL@index,c
  1527  000A2E  0E00               	movlw	0
  1528  000A30  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1529  000A32  0E00               	movlw	0
  1530  000A34  6E1B               	movwf	SETxAPIxVAL@value,c
  1531  000A36  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1532                           
  1533                           ;State_Mchn.c: 86: SETxAPIxVALxNoxRET(78, 0);
  1534  000A3A  0E00               	movlw	0
  1535  000A3C  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1536  000A3E  0E4E               	movlw	78
  1537  000A40  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1538  000A42  0E00               	movlw	0
  1539  000A44  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1540  000A46  0E00               	movlw	0
  1541  000A48  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1542  000A4A  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1543                           
  1544                           ;State_Mchn.c: 87: }
  1545  000A4E  EF58  F00B         	goto	l322
  1546  000A52                     l207:
  1547                           
  1548                           ;State_Mchn.c: 88: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1549  000A52  0E00               	movlw	0
  1550  000A54  6E14               	movwf	GETxAPIxVAL@index+1,c
  1551  000A56  0E44               	movlw	68
  1552  000A58  6E13               	movwf	GETxAPIxVAL@index,c
  1553  000A5A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1554  000A5E  C013  F0D5         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1555  000A62  C014  F0D6         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1556  000A66  0E00               	movlw	0
  1557  000A68  6E14               	movwf	GETxAPIxVAL@index+1,c
  1558  000A6A  0E4F               	movlw	79
  1559  000A6C  6E13               	movwf	GETxAPIxVAL@index,c
  1560  000A6E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1561  000A72  5013               	movf	?_GETxAPIxVAL,w,c
  1562  000A74  0100               	movlb	0	; () banked
  1563  000A76  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  1564  000A78  E104               	bnz	u8610
  1565  000A7A  5014               	movf	?_GETxAPIxVAL+1,w,c
  1566  000A7C  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1567  000A7E  B4D8               	btfsc	status,2,c
  1568  000A80  D02D               	goto	l209
  1569  000A82                     u8610:
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;State_Mchn.c: 89: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1573  000A82  0E00               	movlw	0
  1574  000A84  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1575  000A86  0E44               	movlw	68
  1576  000A88  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1577  000A8A  0E00               	movlw	0
  1578  000A8C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1579  000A8E  0E4F               	movlw	79
  1580  000A90  6E13               	movwf	GETxAPIxVAL@index,c
  1581  000A92  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1582  000A96  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1583  000A9A  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1584  000A9E  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1585                           
  1586                           ;State_Mchn.c: 90: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1587  000AA2  0E00               	movlw	0
  1588  000AA4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1589  000AA6  0E44               	movlw	68
  1590  000AA8  6E13               	movwf	GETxAPIxVAL@index,c
  1591  000AAA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1592  000AAE  C013  F0D7         	movff	?_GETxAPIxVAL,_Update_StateMchn$2186
  1593  000AB2  C014  F0D8         	movff	?_GETxAPIxVAL+1,_Update_StateMchn$2186+1
  1594                           
  1595                           ;State_Mchn.c: 90: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1596  000AB6  0E00               	movlw	0
  1597  000AB8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1598  000ABA  0E56               	movlw	86
  1599  000ABC  6E13               	movwf	GETxAPIxVAL@index,c
  1600  000ABE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1601  000AC2  5013               	movf	?_GETxAPIxVAL,w,c
  1602  000AC4  0100               	movlb	0	; () banked
  1603  000AC6  6FD9               	movwf	_Update_StateMchn$2187& (0+255),b
  1604                           
  1605                           ;State_Mchn.c: 90: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1606  000AC8  C0D7  F01F         	movff	_Update_StateMchn$2186,SETxPWM@speed
  1607  000ACC  C0D8  F020         	movff	_Update_StateMchn$2186+1,SETxPWM@speed+1
  1608  000AD0  C0D9  F021         	movff	_Update_StateMchn$2187,SETxPWM@direction
  1609  000AD4  EC21  F01F         	call	_SETxPWM	;wreg free
  1610                           
  1611                           ;State_Mchn.c: 91: }
  1612  000AD8  EF58  F00B         	goto	l322
  1613  000ADC                     l209:
  1614                           
  1615                           ;State_Mchn.c: 92: else if (GETxAPIxVAL(86) != GETxAPIxVAL(81)){
  1616  000ADC  0E00               	movlw	0
  1617  000ADE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1618  000AE0  0E56               	movlw	86
  1619  000AE2  6E13               	movwf	GETxAPIxVAL@index,c
  1620  000AE4  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1621  000AE8  C013  F0D5         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1622  000AEC  C014  F0D6         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1623  000AF0  0E00               	movlw	0
  1624  000AF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1625  000AF4  0E51               	movlw	81
  1626  000AF6  6E13               	movwf	GETxAPIxVAL@index,c
  1627  000AF8  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1628  000AFC  5013               	movf	?_GETxAPIxVAL,w,c
  1629  000AFE  0100               	movlb	0	; () banked
  1630  000B00  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  1631  000B02  E105               	bnz	u8620
  1632  000B04  5014               	movf	?_GETxAPIxVAL+1,w,c
  1633  000B06  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1634  000B08  B4D8               	btfsc	status,2,c
  1635  000B0A  EFEF  F009         	goto	l213
  1636  000B0E                     u8620:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;State_Mchn.c: 93: SETxAPIxVALxNoxRET(86, GETxAPIxVAL(81));
  1640  000B0E  0E00               	movlw	0
  1641  000B10  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1642  000B12  0E56               	movlw	86
  1643  000B14  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1644  000B16  0E00               	movlw	0
  1645  000B18  6E14               	movwf	GETxAPIxVAL@index+1,c
  1646  000B1A  0E51               	movlw	81
  1647  000B1C  6E13               	movwf	GETxAPIxVAL@index,c
  1648  000B1E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1649  000B22  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1650  000B26  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1651  000B2A  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1652                           
  1653                           ;State_Mchn.c: 94: }
  1654  000B2E  EF58  F00B         	goto	l322
  1655  000B32  0E00               	movlw	0
  1656  000B34  EC50  F020         	call	_Green_Led
  1657                           
  1658                           ;State_Mchn.c: 100: Red_Led(0);
  1659  000B38  0E00               	movlw	0
  1660  000B3A  EC10  F020         	call	_Red_Led
  1661                           
  1662                           ;State_Mchn.c: 101: Switch_Init = 1;
  1663  000B3E  0E01               	movlw	1
  1664  000B40  D015               	goto	L1
  1665  000B42                     
  1666                           ; BSR set to: 0
  1667                           
  1668                           ; BSR set to: 0
  1669  000B42  0E00               	movlw	0
  1670  000B44  6E14               	movwf	GETxAPIxVAL@index+1,c
  1671  000B46  0E23               	movlw	35
  1672  000B48  6E13               	movwf	GETxAPIxVAL@index,c
  1673  000B4A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1674  000B4E  5013               	movf	?_GETxAPIxVAL,w,c
  1675  000B50  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1676  000B52  B4D8               	btfsc	status,2,c
  1677  000B54  D00F               	goto	l217
  1678                           
  1679                           ;State_Mchn.c: 105: {
  1680                           ;State_Mchn.c: 106: SETxAPIxVAL(39, 1);
  1681  000B56  0E00               	movlw	0
  1682  000B58  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1683  000B5A  0E27               	movlw	39
  1684  000B5C  6E19               	movwf	SETxAPIxVAL@index,c
  1685  000B5E  0E00               	movlw	0
  1686  000B60  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1687  000B62  0E01               	movlw	1
  1688  000B64  6E1B               	movwf	SETxAPIxVAL@value,c
  1689  000B66  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1690  000B6A  D057               	goto	l8990
  1691  000B6C                     L1:
  1692  000B6C  0100               	movlb	0	; () banked
  1693  000B6E                     L2:
  1694  000B6E  6F90               	movwf	_Switch_Init& (0+255),b
  1695                           
  1696                           ;State_Mchn.c: 108: break;
  1697  000B70  EF58  F00B         	goto	l322
  1698  000B74                     l217:
  1699                           
  1700                           ;State_Mchn.c: 109: }
  1701                           ;State_Mchn.c: 110: if(GETxAPIxVAL(36))
  1702                           
  1703                           ; BSR set to: 0
  1704  000B74  0E00               	movlw	0
  1705  000B76  6E14               	movwf	GETxAPIxVAL@index+1,c
  1706  000B78  0E24               	movlw	36
  1707  000B7A  6E13               	movwf	GETxAPIxVAL@index,c
  1708  000B7C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1709  000B80  5013               	movf	?_GETxAPIxVAL,w,c
  1710  000B82  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1711  000B84  B4D8               	btfsc	status,2,c
  1712  000B86  D00B               	goto	l218
  1713                           
  1714                           ;State_Mchn.c: 111: {
  1715                           ;State_Mchn.c: 112: SETxAPIxVAL(39, 2);
  1716  000B88  0E00               	movlw	0
  1717  000B8A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1718  000B8C  0E27               	movlw	39
  1719  000B8E  6E19               	movwf	SETxAPIxVAL@index,c
  1720  000B90  0E00               	movlw	0
  1721  000B92  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1722  000B94  0E02               	movlw	2
  1723  000B96  6E1B               	movwf	SETxAPIxVAL@value,c
  1724  000B98  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1725  000B9C  D03E               	goto	l8990
  1726  000B9E                     l218:
  1727                           
  1728                           ;State_Mchn.c: 115: }
  1729                           ;State_Mchn.c: 116: if(GETxAPIxVAL(37))
  1730                           
  1731                           ; BSR set to: 0
  1732  000B9E  0E00               	movlw	0
  1733  000BA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1734  000BA2  0E25               	movlw	37
  1735  000BA4  6E13               	movwf	GETxAPIxVAL@index,c
  1736  000BA6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1737  000BAA  5013               	movf	?_GETxAPIxVAL,w,c
  1738  000BAC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1739  000BAE  B4D8               	btfsc	status,2,c
  1740  000BB0  D00B               	goto	l219
  1741                           
  1742                           ;State_Mchn.c: 117: {
  1743                           ;State_Mchn.c: 118: SETxAPIxVAL(39, 3);
  1744  000BB2  0E00               	movlw	0
  1745  000BB4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1746  000BB6  0E27               	movlw	39
  1747  000BB8  6E19               	movwf	SETxAPIxVAL@index,c
  1748  000BBA  0E00               	movlw	0
  1749  000BBC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1750  000BBE  0E03               	movlw	3
  1751  000BC0  6E1B               	movwf	SETxAPIxVAL@value,c
  1752  000BC2  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1753  000BC6  D029               	goto	l8990
  1754  000BC8                     l219:
  1755                           
  1756                           ;State_Mchn.c: 121: }
  1757                           ;State_Mchn.c: 122: if(GETxAPIxVAL(38))
  1758                           
  1759                           ; BSR set to: 0
  1760  000BC8  0E00               	movlw	0
  1761  000BCA  6E14               	movwf	GETxAPIxVAL@index+1,c
  1762  000BCC  0E26               	movlw	38
  1763  000BCE  6E13               	movwf	GETxAPIxVAL@index,c
  1764  000BD0  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1765  000BD4  5013               	movf	?_GETxAPIxVAL,w,c
  1766  000BD6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1767  000BD8  B4D8               	btfsc	status,2,c
  1768  000BDA  D00B               	goto	l220
  1769                           
  1770                           ;State_Mchn.c: 123: {
  1771                           ;State_Mchn.c: 124: SETxAPIxVAL(39, 4);
  1772  000BDC  0E00               	movlw	0
  1773  000BDE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1774  000BE0  0E27               	movlw	39
  1775  000BE2  6E19               	movwf	SETxAPIxVAL@index,c
  1776  000BE4  0E00               	movlw	0
  1777  000BE6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1778  000BE8  0E04               	movlw	4
  1779  000BEA  6E1B               	movwf	SETxAPIxVAL@value,c
  1780  000BEC  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1781  000BF0  D014               	goto	l8990
  1782  000BF2                     l220:
  1783                           
  1784                           ;State_Mchn.c: 127: }
  1785                           ;State_Mchn.c: 128: if(GETxAPIxVAL(34))
  1786                           
  1787                           ; BSR set to: 0
  1788  000BF2  0E00               	movlw	0
  1789  000BF4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1790  000BF6  0E22               	movlw	34
  1791  000BF8  6E13               	movwf	GETxAPIxVAL@index,c
  1792  000BFA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1793  000BFE  5013               	movf	?_GETxAPIxVAL,w,c
  1794  000C00  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1795  000C02  B4D8               	btfsc	status,2,c
  1796  000C04  D00C               	goto	l221
  1797                           
  1798                           ;State_Mchn.c: 129: {
  1799                           ;State_Mchn.c: 130: SETxAPIxVAL(39, 5);
  1800  000C06  0E00               	movlw	0
  1801  000C08  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1802  000C0A  0E27               	movlw	39
  1803  000C0C  6E19               	movwf	SETxAPIxVAL@index,c
  1804  000C0E  0E00               	movlw	0
  1805  000C10  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1806  000C12  0E05               	movlw	5
  1807  000C14  6E1B               	movwf	SETxAPIxVAL@value,c
  1808  000C16  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1809  000C1A                     l8990:
  1810                           
  1811                           ;State_Mchn.c: 131: Switch_Init = 2;
  1812  000C1A  0E02               	movlw	2
  1813  000C1C  D7A7               	goto	L1
  1814  000C1E                     l221:
  1815                           
  1816                           ;State_Mchn.c: 133: }
  1817                           ;State_Mchn.c: 134: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1818                           
  1819                           ; BSR set to: 0
  1820  000C1E  0E00               	movlw	0
  1821  000C20  6E14               	movwf	GETxAPIxVAL@index+1,c
  1822  000C22  0E27               	movlw	39
  1823  000C24  6E13               	movwf	GETxAPIxVAL@index,c
  1824  000C26  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1825  000C2A  5013               	movf	?_GETxAPIxVAL,w,c
  1826  000C2C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1827  000C2E  B4D8               	btfsc	status,2,c
  1828  000C30  D00A               	goto	l222
  1829  000C32  0E00               	movlw	0
  1830  000C34  6E14               	movwf	GETxAPIxVAL@index+1,c
  1831  000C36  0E28               	movlw	40
  1832  000C38  6E13               	movwf	GETxAPIxVAL@index,c
  1833  000C3A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1834  000C3E  5013               	movf	?_GETxAPIxVAL,w,c
  1835  000C40  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1836  000C42  A4D8               	btfss	status,2,c
  1837  000C44  D0E1               	goto	u8830
  1838  000C46                     l222:
  1839                           
  1840                           ;State_Mchn.c: 137: }
  1841                           ;State_Mchn.c: 138: Switch_Init = 1;
  1842                           
  1843                           ; BSR set to: 0
  1844  000C46  0E01               	movlw	1
  1845  000C48  0100               	movlb	0	; () banked
  1846  000C4A  6F90               	movwf	_Switch_Init& (0+255),b
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;State_Mchn.c: 139: Green_Led(2);
  1850  000C4C  0E02               	movlw	2
  1851  000C4E  EC50  F020         	call	_Green_Led
  1852                           
  1853                           ;State_Mchn.c: 140: break;
  1854  000C52  EF58  F00B         	goto	l322
  1855  000C56  0E00               	movlw	0
  1856  000C58  6E14               	movwf	GETxAPIxVAL@index+1,c
  1857  000C5A  0E23               	movlw	35
  1858  000C5C  6E13               	movwf	GETxAPIxVAL@index,c
  1859  000C5E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1860  000C62  5013               	movf	?_GETxAPIxVAL,w,c
  1861  000C64  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1862  000C66  A4D8               	btfss	status,2,c
  1863  000C68  D035               	goto	l224
  1864  000C6A  0E00               	movlw	0
  1865  000C6C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1866  000C6E  0E24               	movlw	36
  1867  000C70  6E13               	movwf	GETxAPIxVAL@index,c
  1868  000C72  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1869  000C76  5013               	movf	?_GETxAPIxVAL,w,c
  1870  000C78  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1871  000C7A  A4D8               	btfss	status,2,c
  1872  000C7C  D02B               	goto	l224
  1873  000C7E  0E00               	movlw	0
  1874  000C80  6E14               	movwf	GETxAPIxVAL@index+1,c
  1875  000C82  0E25               	movlw	37
  1876  000C84  6E13               	movwf	GETxAPIxVAL@index,c
  1877  000C86  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1878  000C8A  5013               	movf	?_GETxAPIxVAL,w,c
  1879  000C8C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1880  000C8E  A4D8               	btfss	status,2,c
  1881  000C90  D021               	goto	l224
  1882  000C92  0E00               	movlw	0
  1883  000C94  6E14               	movwf	GETxAPIxVAL@index+1,c
  1884  000C96  0E26               	movlw	38
  1885  000C98  6E13               	movwf	GETxAPIxVAL@index,c
  1886  000C9A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1887  000C9E  5013               	movf	?_GETxAPIxVAL,w,c
  1888  000CA0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1889  000CA2  A4D8               	btfss	status,2,c
  1890  000CA4  D017               	goto	l224
  1891  000CA6  0E00               	movlw	0
  1892  000CA8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1893  000CAA  0E22               	movlw	34
  1894  000CAC  6E13               	movwf	GETxAPIxVAL@index,c
  1895  000CAE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1896  000CB2  5013               	movf	?_GETxAPIxVAL,w,c
  1897  000CB4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1898  000CB6  A4D8               	btfss	status,2,c
  1899  000CB8  D00D               	goto	l224
  1900  000CBA  0E00               	movlw	0
  1901  000CBC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1902  000CBE  0E20               	movlw	32
  1903  000CC0  6E13               	movwf	GETxAPIxVAL@index,c
  1904  000CC2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1905  000CC6  5013               	movf	?_GETxAPIxVAL,w,c
  1906  000CC8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1907  000CCA  A4D8               	btfss	status,2,c
  1908  000CCC  D003               	goto	l224
  1909                           
  1910                           ;State_Mchn.c: 143: {
  1911                           ;State_Mchn.c: 144: Switch_Init = 3;
  1912  000CCE  0E03               	movlw	3
  1913  000CD0  0100               	movlb	0	; () banked
  1914  000CD2  6F90               	movwf	_Switch_Init& (0+255),b
  1915  000CD4                     l224:
  1916                           
  1917                           ;State_Mchn.c: 145: }
  1918                           ;State_Mchn.c: 146: Red_Led(0);
  1919                           
  1920                           ; BSR set to: 0
  1921  000CD4  0E00               	movlw	0
  1922  000CD6  EC10  F020         	call	_Red_Led
  1923                           
  1924                           ;State_Mchn.c: 147: Green_Led(2);
  1925  000CDA  0E02               	movlw	2
  1926  000CDC  EC50  F020         	call	_Green_Led
  1927                           
  1928                           ;State_Mchn.c: 148: break;
  1929  000CE0  EF58  F00B         	goto	l322
  1930  000CE4  0E00               	movlw	0
  1931  000CE6  6E14               	movwf	GETxAPIxVAL@index+1,c
  1932  000CE8  0E23               	movlw	35
  1933  000CEA  6E13               	movwf	GETxAPIxVAL@index,c
  1934  000CEC  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1935  000CF0  5013               	movf	?_GETxAPIxVAL,w,c
  1936  000CF2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1937  000CF4  B4D8               	btfsc	status,2,c
  1938  000CF6  D00B               	goto	l226
  1939                           
  1940                           ;State_Mchn.c: 151: {
  1941                           ;State_Mchn.c: 152: SETxAPIxVAL(40, 1);
  1942  000CF8  0E00               	movlw	0
  1943  000CFA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1944  000CFC  0E28               	movlw	40
  1945  000CFE  6E19               	movwf	SETxAPIxVAL@index,c
  1946  000D00  0E00               	movlw	0
  1947  000D02  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1948  000D04  0E01               	movlw	1
  1949  000D06  6E1B               	movwf	SETxAPIxVAL@value,c
  1950  000D08  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1951  000D0C  D07D               	goto	u8830
  1952  000D0E                     l226:
  1953                           
  1954                           ;State_Mchn.c: 155: }
  1955                           ;State_Mchn.c: 156: if(GETxAPIxVAL(36))
  1956                           
  1957                           ; BSR set to: 0
  1958  000D0E  0E00               	movlw	0
  1959  000D10  6E14               	movwf	GETxAPIxVAL@index+1,c
  1960  000D12  0E24               	movlw	36
  1961  000D14  6E13               	movwf	GETxAPIxVAL@index,c
  1962  000D16  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1963  000D1A  5013               	movf	?_GETxAPIxVAL,w,c
  1964  000D1C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1965  000D1E  B4D8               	btfsc	status,2,c
  1966  000D20  D00B               	goto	l227
  1967                           
  1968                           ;State_Mchn.c: 157: {
  1969                           ;State_Mchn.c: 158: SETxAPIxVAL(40, 2);
  1970  000D22  0E00               	movlw	0
  1971  000D24  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1972  000D26  0E28               	movlw	40
  1973  000D28  6E19               	movwf	SETxAPIxVAL@index,c
  1974  000D2A  0E00               	movlw	0
  1975  000D2C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1976  000D2E  0E02               	movlw	2
  1977  000D30  6E1B               	movwf	SETxAPIxVAL@value,c
  1978  000D32  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  1979  000D36  D068               	goto	u8830
  1980  000D38                     l227:
  1981                           
  1982                           ;State_Mchn.c: 161: }
  1983                           ;State_Mchn.c: 162: if(GETxAPIxVAL(37))
  1984                           
  1985                           ; BSR set to: 0
  1986  000D38  0E00               	movlw	0
  1987  000D3A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1988  000D3C  0E25               	movlw	37
  1989  000D3E  6E13               	movwf	GETxAPIxVAL@index,c
  1990  000D40  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  1991  000D44  5013               	movf	?_GETxAPIxVAL,w,c
  1992  000D46  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1993  000D48  B4D8               	btfsc	status,2,c
  1994  000D4A  D00B               	goto	l228
  1995                           
  1996                           ;State_Mchn.c: 163: {
  1997                           ;State_Mchn.c: 164: SETxAPIxVAL(40, 3);
  1998  000D4C  0E00               	movlw	0
  1999  000D4E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2000  000D50  0E28               	movlw	40
  2001  000D52  6E19               	movwf	SETxAPIxVAL@index,c
  2002  000D54  0E00               	movlw	0
  2003  000D56  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2004  000D58  0E03               	movlw	3
  2005  000D5A  6E1B               	movwf	SETxAPIxVAL@value,c
  2006  000D5C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  2007  000D60  D053               	goto	u8830
  2008  000D62                     l228:
  2009                           
  2010                           ;State_Mchn.c: 167: }
  2011                           ;State_Mchn.c: 168: if(GETxAPIxVAL(38))
  2012                           
  2013                           ; BSR set to: 0
  2014  000D62  0E00               	movlw	0
  2015  000D64  6E14               	movwf	GETxAPIxVAL@index+1,c
  2016  000D66  0E26               	movlw	38
  2017  000D68  6E13               	movwf	GETxAPIxVAL@index,c
  2018  000D6A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2019  000D6E  5013               	movf	?_GETxAPIxVAL,w,c
  2020  000D70  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2021  000D72  B4D8               	btfsc	status,2,c
  2022  000D74  D00B               	goto	l229
  2023                           
  2024                           ;State_Mchn.c: 169: {
  2025                           ;State_Mchn.c: 170: SETxAPIxVAL(40, 4);
  2026  000D76  0E00               	movlw	0
  2027  000D78  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2028  000D7A  0E28               	movlw	40
  2029  000D7C  6E19               	movwf	SETxAPIxVAL@index,c
  2030  000D7E  0E00               	movlw	0
  2031  000D80  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2032  000D82  0E04               	movlw	4
  2033  000D84  6E1B               	movwf	SETxAPIxVAL@value,c
  2034  000D86  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  2035  000D8A  D03E               	goto	u8830
  2036  000D8C                     l229:
  2037                           
  2038                           ;State_Mchn.c: 173: }
  2039                           ;State_Mchn.c: 174: if(GETxAPIxVAL(34))
  2040                           
  2041                           ; BSR set to: 0
  2042  000D8C  0E00               	movlw	0
  2043  000D8E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2044  000D90  0E22               	movlw	34
  2045  000D92  6E13               	movwf	GETxAPIxVAL@index,c
  2046  000D94  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2047  000D98  5013               	movf	?_GETxAPIxVAL,w,c
  2048  000D9A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2049  000D9C  B4D8               	btfsc	status,2,c
  2050  000D9E  D00B               	goto	l230
  2051                           
  2052                           ;State_Mchn.c: 175: {
  2053                           ;State_Mchn.c: 176: SETxAPIxVAL(40, 5);
  2054  000DA0  0E00               	movlw	0
  2055  000DA2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2056  000DA4  0E28               	movlw	40
  2057  000DA6  6E19               	movwf	SETxAPIxVAL@index,c
  2058  000DA8  0E00               	movlw	0
  2059  000DAA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2060  000DAC  0E05               	movlw	5
  2061  000DAE  6E1B               	movwf	SETxAPIxVAL@value,c
  2062  000DB0  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  2063  000DB4  D029               	goto	u8830
  2064  000DB6                     l230:
  2065                           
  2066                           ;State_Mchn.c: 179: }
  2067                           ;State_Mchn.c: 180: if(GETxAPIxVAL(32))
  2068                           
  2069                           ; BSR set to: 0
  2070  000DB6  0E00               	movlw	0
  2071  000DB8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2072  000DBA  0E20               	movlw	32
  2073  000DBC  6E13               	movwf	GETxAPIxVAL@index,c
  2074  000DBE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2075  000DC2  5013               	movf	?_GETxAPIxVAL,w,c
  2076  000DC4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2077  000DC6  B4D8               	btfsc	status,2,c
  2078  000DC8  D00B               	goto	l231
  2079                           
  2080                           ;State_Mchn.c: 181: {
  2081                           ;State_Mchn.c: 182: SETxAPIxVAL(40, 9);
  2082  000DCA  0E00               	movlw	0
  2083  000DCC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2084  000DCE  0E28               	movlw	40
  2085  000DD0  6E19               	movwf	SETxAPIxVAL@index,c
  2086  000DD2  0E00               	movlw	0
  2087  000DD4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2088  000DD6  0E09               	movlw	9
  2089  000DD8  6E1B               	movwf	SETxAPIxVAL@value,c
  2090  000DDA  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  2091  000DDE  D014               	goto	u8830
  2092  000DE0                     l231:
  2093                           
  2094                           ;State_Mchn.c: 185: }
  2095                           ;State_Mchn.c: 186: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  2096                           
  2097                           ; BSR set to: 0
  2098  000DE0  0E00               	movlw	0
  2099  000DE2  6E14               	movwf	GETxAPIxVAL@index+1,c
  2100  000DE4  0E27               	movlw	39
  2101  000DE6  6E13               	movwf	GETxAPIxVAL@index,c
  2102  000DE8  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2103  000DEC  5013               	movf	?_GETxAPIxVAL,w,c
  2104  000DEE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2105  000DF0  B4D8               	btfsc	status,2,c
  2106  000DF2  D00C               	goto	l232
  2107  000DF4  0E00               	movlw	0
  2108  000DF6  6E14               	movwf	GETxAPIxVAL@index+1,c
  2109  000DF8  0E28               	movlw	40
  2110  000DFA  6E13               	movwf	GETxAPIxVAL@index,c
  2111  000DFC  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2112  000E00  5013               	movf	?_GETxAPIxVAL,w,c
  2113  000E02  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2114  000E04  B4D8               	btfsc	status,2,c
  2115  000E06  D002               	goto	l232
  2116  000E08                     u8830:
  2117                           
  2118                           ;State_Mchn.c: 187: Switch_Init = 4;
  2119  000E08  0E04               	movlw	4
  2120  000E0A  D6B0               	goto	L1
  2121  000E0C                     l232:
  2122                           
  2123                           ;State_Mchn.c: 189: }
  2124                           ;State_Mchn.c: 190: Green_Led(2);
  2125                           
  2126                           ; BSR set to: 0
  2127  000E0C  0E02               	movlw	2
  2128  000E0E  EC50  F020         	call	_Green_Led
  2129                           
  2130                           ;State_Mchn.c: 191: Switch_Init = 3;
  2131  000E12  0E03               	movlw	3
  2132  000E14  D6AB               	goto	L1
  2133  000E16                     
  2134                           ; BSR set to: 0
  2135                           
  2136                           ; BSR set to: 0
  2137  000E16  0E00               	movlw	0
  2138  000E18  6E14               	movwf	GETxAPIxVAL@index+1,c
  2139  000E1A  0E23               	movlw	35
  2140  000E1C  6E13               	movwf	GETxAPIxVAL@index,c
  2141  000E1E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2142  000E22  5013               	movf	?_GETxAPIxVAL,w,c
  2143  000E24  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2144  000E26  A4D8               	btfss	status,2,c
  2145  000E28  D07E               	goto	l236
  2146  000E2A  0E00               	movlw	0
  2147  000E2C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2148  000E2E  0E24               	movlw	36
  2149  000E30  6E13               	movwf	GETxAPIxVAL@index,c
  2150  000E32  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2151  000E36  5013               	movf	?_GETxAPIxVAL,w,c
  2152  000E38  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2153  000E3A  A4D8               	btfss	status,2,c
  2154  000E3C  D074               	goto	l236
  2155  000E3E  0E00               	movlw	0
  2156  000E40  6E14               	movwf	GETxAPIxVAL@index+1,c
  2157  000E42  0E25               	movlw	37
  2158  000E44  6E13               	movwf	GETxAPIxVAL@index,c
  2159  000E46  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2160  000E4A  5013               	movf	?_GETxAPIxVAL,w,c
  2161  000E4C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2162  000E4E  A4D8               	btfss	status,2,c
  2163  000E50  D06A               	goto	l236
  2164  000E52  0E00               	movlw	0
  2165  000E54  6E14               	movwf	GETxAPIxVAL@index+1,c
  2166  000E56  0E26               	movlw	38
  2167  000E58  6E13               	movwf	GETxAPIxVAL@index,c
  2168  000E5A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2169  000E5E  5013               	movf	?_GETxAPIxVAL,w,c
  2170  000E60  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2171  000E62  A4D8               	btfss	status,2,c
  2172  000E64  D060               	goto	l236
  2173  000E66  0E00               	movlw	0
  2174  000E68  6E14               	movwf	GETxAPIxVAL@index+1,c
  2175  000E6A  0E22               	movlw	34
  2176  000E6C  6E13               	movwf	GETxAPIxVAL@index,c
  2177  000E6E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2178  000E72  5013               	movf	?_GETxAPIxVAL,w,c
  2179  000E74  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2180  000E76  A4D8               	btfss	status,2,c
  2181  000E78  D056               	goto	l236
  2182  000E7A  0E00               	movlw	0
  2183  000E7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2184  000E7E  0E20               	movlw	32
  2185  000E80  6E13               	movwf	GETxAPIxVAL@index,c
  2186  000E82  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2187  000E86  5013               	movf	?_GETxAPIxVAL,w,c
  2188  000E88  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2189  000E8A  A4D8               	btfss	status,2,c
  2190  000E8C  D04C               	goto	l236
  2191                           
  2192                           ;State_Mchn.c: 195: {
  2193                           ;State_Mchn.c: 196: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  2194  000E8E  0E00               	movlw	0
  2195  000E90  6E14               	movwf	GETxAPIxVAL@index+1,c
  2196  000E92  0E27               	movlw	39
  2197  000E94  6E13               	movwf	GETxAPIxVAL@index,c
  2198  000E96  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2199  000E9A  C013  F0D5         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2200  000E9E  C014  F0D6         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2201  000EA2  0E00               	movlw	0
  2202  000EA4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2203  000EA6  0E28               	movlw	40
  2204  000EA8  6E13               	movwf	GETxAPIxVAL@index,c
  2205  000EAA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2206  000EAE  5013               	movf	?_GETxAPIxVAL,w,c
  2207  000EB0  0100               	movlb	0	; () banked
  2208  000EB2  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  2209  000EB4  E11E               	bnz	l9086
  2210  000EB6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2211  000EB8  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2212  000EBA  A4D8               	btfss	status,2,c
  2213  000EBC  D01A               	goto	l235
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;State_Mchn.c: 197: {
  2217                           ;State_Mchn.c: 198: SETxAPIxVAL(40, 0);
  2218  000EBE  0E00               	movlw	0
  2219  000EC0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2220  000EC2  0E28               	movlw	40
  2221  000EC4  6E19               	movwf	SETxAPIxVAL@index,c
  2222  000EC6  0E00               	movlw	0
  2223  000EC8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2224  000ECA  0E00               	movlw	0
  2225  000ECC  6E1B               	movwf	SETxAPIxVAL@value,c
  2226  000ECE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  2227                           
  2228                           ;State_Mchn.c: 199: SETxAPIxVAL(39, 0);
  2229  000ED2  0E00               	movlw	0
  2230  000ED4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2231  000ED6  0E27               	movlw	39
  2232  000ED8  6E19               	movwf	SETxAPIxVAL@index,c
  2233  000EDA  0E00               	movlw	0
  2234  000EDC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2235  000EDE  0E00               	movlw	0
  2236  000EE0  6E1B               	movwf	SETxAPIxVAL@value,c
  2237  000EE2  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  2238                           
  2239                           ;State_Mchn.c: 200: Red_Led(1);
  2240  000EE6  0E01               	movlw	1
  2241  000EE8  EC10  F020         	call	_Red_Led
  2242                           
  2243                           ;State_Mchn.c: 201: Switch_Init = 1;
  2244  000EEC  0E01               	movlw	1
  2245  000EEE  0100               	movlb	0	; () banked
  2246  000EF0  6F90               	movwf	_Switch_Init& (0+255),b
  2247  000EF2                     l235:
  2248  000EF2                     l9086:
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;State_Mchn.c: 203: }
  2252                           ;State_Mchn.c: 204: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  2253  000EF2  0E00               	movlw	0
  2254  000EF4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2255  000EF6  0E27               	movlw	39
  2256  000EF8  6E13               	movwf	GETxAPIxVAL@index,c
  2257  000EFA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2258  000EFE  C013  F0D5         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2259  000F02  C014  F0D6         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2260  000F06  0E00               	movlw	0
  2261  000F08  6E14               	movwf	GETxAPIxVAL@index+1,c
  2262  000F0A  0E28               	movlw	40
  2263  000F0C  6E13               	movwf	GETxAPIxVAL@index,c
  2264  000F0E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2265  000F12  5013               	movf	?_GETxAPIxVAL,w,c
  2266  000F14  0100               	movlb	0	; () banked
  2267  000F16  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  2268  000F18  E104               	bnz	u8910
  2269  000F1A  5014               	movf	?_GETxAPIxVAL+1,w,c
  2270  000F1C  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2271  000F1E  B4D8               	btfsc	status,2,c
  2272  000F20  D002               	goto	l236
  2273  000F22                     u8910:
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;State_Mchn.c: 205: {
  2277                           ;State_Mchn.c: 206: Switch_Init = 5;
  2278  000F22  0E05               	movlw	5
  2279  000F24  6F90               	movwf	_Switch_Init& (0+255),b
  2280  000F26                     l236:
  2281                           
  2282                           ;State_Mchn.c: 207: }
  2283                           ;State_Mchn.c: 208: }
  2284                           ;State_Mchn.c: 209: Green_Led(2);
  2285                           
  2286                           ; BSR set to: 0
  2287                           
  2288                           ; BSR set to: 0
  2289  000F26  0E02               	movlw	2
  2290  000F28  EC50  F020         	call	_Green_Led
  2291                           
  2292                           ;State_Mchn.c: 210: break;
  2293  000F2C  D3C1               	goto	l322
  2294  000F2E  0E00               	movlw	0
  2295  000F30  6E14               	movwf	GETxAPIxVAL@index+1,c
  2296  000F32  0E28               	movlw	40
  2297  000F34  6E13               	movwf	GETxAPIxVAL@index,c
  2298  000F36  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2299  000F3A  0E09               	movlw	9
  2300  000F3C  1813               	xorwf	?_GETxAPIxVAL,w,c
  2301  000F3E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2302  000F40  B4D8               	btfsc	status,2,c
  2303  000F42  D003               	goto	l238
  2304                           
  2305                           ;State_Mchn.c: 213: {
  2306                           ;State_Mchn.c: 214: Switch_Init = 6;
  2307  000F44  0E06               	movlw	6
  2308  000F46  0100               	movlb	0	; () banked
  2309  000F48  6F90               	movwf	_Switch_Init& (0+255),b
  2310  000F4A                     l238:
  2311                           
  2312                           ;State_Mchn.c: 215: }
  2313                           ;State_Mchn.c: 216: if(GETxAPIxVAL(40) == 9)
  2314                           
  2315                           ; BSR set to: 0
  2316  000F4A  0E00               	movlw	0
  2317  000F4C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2318  000F4E  0E28               	movlw	40
  2319  000F50  6E13               	movwf	GETxAPIxVAL@index,c
  2320  000F52  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2321  000F56  0E09               	movlw	9
  2322  000F58  1813               	xorwf	?_GETxAPIxVAL,w,c
  2323  000F5A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2324  000F5C  A4D8               	btfss	status,2,c
  2325  000F5E  D3A8               	goto	l322
  2326                           
  2327                           ;State_Mchn.c: 217: {
  2328                           ;State_Mchn.c: 218: Switch_Init = 9;
  2329  000F60  0E09               	movlw	9
  2330  000F62  D604               	goto	L1
  2331  000F64                     
  2332                           ; BSR set to: 0
  2333                           
  2334                           ; BSR set to: 0
  2335  000F64  0E08               	movlw	8
  2336  000F66  D603               	goto	L2
  2337  000F68                     
  2338                           ; BSR set to: 0
  2339                           
  2340                           ; BSR set to: 0
  2341  000F68  0E00               	movlw	0
  2342  000F6A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2343  000F6C  0E20               	movlw	32
  2344  000F6E  6E13               	movwf	GETxAPIxVAL@index,c
  2345  000F70  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2346  000F74  5013               	movf	?_GETxAPIxVAL,w,c
  2347  000F76  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2348  000F78  A4D8               	btfss	status,2,c
  2349  000F7A  D00A               	goto	u8950
  2350  000F7C  0E00               	movlw	0
  2351  000F7E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2352  000F80  0E46               	movlw	70
  2353  000F82  6E13               	movwf	GETxAPIxVAL@index,c
  2354  000F84  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2355  000F88  5013               	movf	?_GETxAPIxVAL,w,c
  2356  000F8A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2357  000F8C  B4D8               	btfsc	status,2,c
  2358  000F8E  D012               	goto	l242
  2359  000F90                     u8950:
  2360                           
  2361                           ;State_Mchn.c: 226: {
  2362                           ;State_Mchn.c: 227: Switch_Main = 2;
  2363  000F90  0E02               	movlw	2
  2364  000F92  0100               	movlb	0	; () banked
  2365  000F94  6FE9               	movwf	_Switch_Main& (0+255),b
  2366                           
  2367                           ;State_Mchn.c: 228: Switch_Init = 0;
  2368  000F96  0E00               	movlw	0
  2369  000F98  6F90               	movwf	_Switch_Init& (0+255),b
  2370                           
  2371                           ;State_Mchn.c: 229: Stop_Program = 0;
  2372  000F9A  0E00               	movlw	0
  2373  000F9C  6F8B               	movwf	_Stop_Program& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;State_Mchn.c: 230: SETxAPIxVALxNoxRET(70, 0);
  2377  000F9E  0E00               	movlw	0
  2378  000FA0  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  2379  000FA2  0E46               	movlw	70
  2380  000FA4  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  2381  000FA6  0E00               	movlw	0
  2382  000FA8  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  2383  000FAA  0E00               	movlw	0
  2384  000FAC  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  2385  000FAE  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  2386                           
  2387                           ;State_Mchn.c: 231: }
  2388  000FB2  D026               	goto	l246
  2389  000FB4                     l242:
  2390                           
  2391                           ;State_Mchn.c: 233: else if (Train_Pos1_Temp != GETxAPIxVAL(39) || Train_Pos1_Temp != GE
      +                          TxAPIxVAL(40)){
  2392  000FB4  0E00               	movlw	0
  2393  000FB6  6E14               	movwf	GETxAPIxVAL@index+1,c
  2394  000FB8  0E27               	movlw	39
  2395  000FBA  6E13               	movwf	GETxAPIxVAL@index,c
  2396  000FBC  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2397  000FC0  0100               	movlb	0	; () banked
  2398  000FC2  518A               	movf	_Train_Pos1_Temp& (0+255),w,b
  2399  000FC4  6FD5               	movwf	??_Update_StateMchn& (0+255),b
  2400  000FC6  6BD6               	clrf	(??_Update_StateMchn+1)& (0+255),b
  2401  000FC8  5013               	movf	?_GETxAPIxVAL,w,c
  2402  000FCA  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  2403  000FCC  E115               	bnz	l9114
  2404  000FCE  5014               	movf	?_GETxAPIxVAL+1,w,c
  2405  000FD0  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2406  000FD2  A4D8               	btfss	status,2,c
  2407  000FD4  D011               	goto	u8970
  2408                           
  2409                           ; BSR set to: 0
  2410  000FD6  0E00               	movlw	0
  2411  000FD8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2412  000FDA  0E28               	movlw	40
  2413  000FDC  6E13               	movwf	GETxAPIxVAL@index,c
  2414  000FDE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2415  000FE2  0100               	movlb	0	; () banked
  2416  000FE4  518A               	movf	_Train_Pos1_Temp& (0+255),w,b
  2417  000FE6  6FD5               	movwf	??_Update_StateMchn& (0+255),b
  2418  000FE8  6BD6               	clrf	(??_Update_StateMchn+1)& (0+255),b
  2419  000FEA  5013               	movf	?_GETxAPIxVAL,w,c
  2420  000FEC  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  2421  000FEE  E104               	bnz	l9114
  2422  000FF0  5014               	movf	?_GETxAPIxVAL+1,w,c
  2423  000FF2  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2424  000FF4  B4D8               	btfsc	status,2,c
  2425  000FF6  D004               	goto	l246
  2426  000FF8                     u8970:
  2427  000FF8                     l9114:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;State_Mchn.c: 234: Switch_Main = 1;
  2431  000FF8  0E01               	movlw	1
  2432  000FFA  6FE9               	movwf	_Switch_Main& (0+255),b
  2433                           
  2434                           ;State_Mchn.c: 235: Switch_Init = 0;
  2435  000FFC  0E00               	movlw	0
  2436  000FFE  6F90               	movwf	_Switch_Init& (0+255),b
  2437  001000                     l246:
  2438                           
  2439                           ;State_Mchn.c: 236: }
  2440                           ;State_Mchn.c: 237: Green_Led(3);
  2441                           
  2442                           ; BSR set to: 0
  2443                           
  2444                           ; BSR set to: 0
  2445  001000  0E03               	movlw	3
  2446  001002  EC50  F020         	call	_Green_Led
  2447                           
  2448                           ;State_Mchn.c: 238: Red_Led(0);
  2449  001006  0E00               	movlw	0
  2450  001008  EC10  F020         	call	_Red_Led
  2451                           
  2452                           ;State_Mchn.c: 239: break;
  2453  00100C  D351               	goto	l322
  2454  00100E  0E00               	movlw	0
  2455  001010  6E14               	movwf	GETxAPIxVAL@index+1,c
  2456  001012  0E27               	movlw	39
  2457  001014  6E13               	movwf	GETxAPIxVAL@index,c
  2458  001016  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2459  00101A  0E05               	movlw	5
  2460  00101C  1813               	xorwf	?_GETxAPIxVAL,w,c
  2461  00101E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2462  001020  B4D8               	btfsc	status,2,c
  2463  001022  D014               	goto	l251
  2464  001024  D02B               	goto	l253
  2465  001026  0E01               	movlw	1
  2466  001028  D005               	goto	L5
  2467  00102A                     
  2468                           ; BSR set to: 0
  2469  00102A  0E05               	movlw	5
  2470  00102C  D003               	goto	L5
  2471  00102E                     
  2472                           ; BSR set to: 0
  2473  00102E  0E02               	movlw	2
  2474  001030  D001               	goto	L5
  2475  001032                     
  2476                           ; BSR set to: 0
  2477  001032  0E03               	movlw	3
  2478  001034                     L5:
  2479  001034  0100               	movlb	0	; () banked
  2480  001036  6F8F               	movwf	_Switch_Program& (0+255),b
  2481                           
  2482                           ;State_Mchn.c: 255: Switch_Init = 7;
  2483  001038  0E07               	movlw	7
  2484  00103A  6F90               	movwf	_Switch_Init& (0+255),b
  2485                           
  2486                           ;State_Mchn.c: 256: break;
  2487  00103C  D01F               	goto	l253
  2488  00103E                     
  2489                           ; BSR set to: 0
  2490  00103E  0E08               	movlw	8
  2491  001040  0100               	movlb	0	; () banked
  2492  001042  6F90               	movwf	_Switch_Init& (0+255),b
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;State_Mchn.c: 258: Red_Led(1);
  2496  001044  0E01               	movlw	1
  2497  001046  EC10  F020         	call	_Red_Led
  2498                           
  2499                           ;State_Mchn.c: 260: }
  2500                           
  2501                           ;State_Mchn.c: 259: break;
  2502  00104A  D018               	goto	l253
  2503  00104C                     l251:
  2504  00104C  0E00               	movlw	0
  2505  00104E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2506  001050  0E28               	movlw	40
  2507  001052  6E13               	movwf	GETxAPIxVAL@index,c
  2508  001054  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2509                           
  2510                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2511                           ; Switch size 1, requested type "space"
  2512                           ; Number of cases is 1, Range of values is 0 to 0
  2513                           ; switch strategies available:
  2514                           ; Name         Instructions Cycles
  2515                           ; simple_byte            4     3 (average)
  2516                           ;	Chosen strategy is simple_byte
  2517  001058  5014               	movf	?_GETxAPIxVAL+1,w,c
  2518  00105A  0A00               	xorlw	0	; case 0
  2519  00105C  A4D8               	btfss	status,2,c
  2520  00105E  D7EF               	goto	l257
  2521                           
  2522                           ; Switch size 1, requested type "space"
  2523                           ; Number of cases is 4, Range of values is 1 to 4
  2524                           ; switch strategies available:
  2525                           ; Name         Instructions Cycles
  2526                           ; simple_byte           13     7 (average)
  2527                           ;	Chosen strategy is simple_byte
  2528  001060  5013               	movf	?_GETxAPIxVAL,w,c
  2529  001062  0A01               	xorlw	1	; case 1
  2530  001064  B4D8               	btfsc	status,2,c
  2531  001066  D7DF               	goto	l252
  2532  001068  0A03               	xorlw	3	; case 2
  2533  00106A  B4D8               	btfsc	status,2,c
  2534  00106C  D7DE               	goto	l254
  2535  00106E  0A01               	xorlw	1	; case 3
  2536  001070  B4D8               	btfsc	status,2,c
  2537  001072  D7DD               	goto	l255
  2538  001074  0A07               	xorlw	7	; case 4
  2539  001076  B4D8               	btfsc	status,2,c
  2540  001078  D7DC               	goto	l256
  2541  00107A  D7E1               	goto	l257
  2542  00107C                     l253:
  2543                           
  2544                           ;State_Mchn.c: 261: }
  2545                           ;State_Mchn.c: 262: if(GETxAPIxVAL(40) == 5)
  2546  00107C  0E00               	movlw	0
  2547  00107E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2548  001080  0E28               	movlw	40
  2549  001082  6E13               	movwf	GETxAPIxVAL@index,c
  2550  001084  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2551  001088  0E05               	movlw	5
  2552  00108A  1813               	xorwf	?_GETxAPIxVAL,w,c
  2553  00108C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2554  00108E  B4D8               	btfsc	status,2,c
  2555  001090  D014               	goto	l259
  2556  001092  D02B               	goto	l261
  2557  001094  0E01               	movlw	1
  2558  001096  D005               	goto	L8
  2559  001098                     
  2560                           ; BSR set to: 0
  2561  001098  0E05               	movlw	5
  2562  00109A  D003               	goto	L8
  2563  00109C                     
  2564                           ; BSR set to: 0
  2565  00109C  0E02               	movlw	2
  2566  00109E  D001               	goto	L8
  2567  0010A0                     
  2568                           ; BSR set to: 0
  2569  0010A0  0E03               	movlw	3
  2570  0010A2                     L8:
  2571  0010A2  0100               	movlb	0	; () banked
  2572  0010A4  6F8F               	movwf	_Switch_Program& (0+255),b
  2573                           
  2574                           ;State_Mchn.c: 276: Switch_Init = 7;
  2575  0010A6  0E07               	movlw	7
  2576  0010A8  6F90               	movwf	_Switch_Init& (0+255),b
  2577                           
  2578                           ;State_Mchn.c: 277: break;
  2579  0010AA  D01F               	goto	l261
  2580  0010AC                     
  2581                           ; BSR set to: 0
  2582  0010AC  0E08               	movlw	8
  2583  0010AE  0100               	movlb	0	; () banked
  2584  0010B0  6F90               	movwf	_Switch_Init& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;State_Mchn.c: 279: Red_Led(1);
  2588  0010B2  0E01               	movlw	1
  2589  0010B4  EC10  F020         	call	_Red_Led
  2590                           
  2591                           ;State_Mchn.c: 281: }
  2592                           
  2593                           ;State_Mchn.c: 280: break;
  2594  0010B8  D018               	goto	l261
  2595  0010BA                     l259:
  2596  0010BA  0E00               	movlw	0
  2597  0010BC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2598  0010BE  0E27               	movlw	39
  2599  0010C0  6E13               	movwf	GETxAPIxVAL@index,c
  2600  0010C2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2601                           
  2602                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2603                           ; Switch size 1, requested type "space"
  2604                           ; Number of cases is 1, Range of values is 0 to 0
  2605                           ; switch strategies available:
  2606                           ; Name         Instructions Cycles
  2607                           ; simple_byte            4     3 (average)
  2608                           ;	Chosen strategy is simple_byte
  2609  0010C6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2610  0010C8  0A00               	xorlw	0	; case 0
  2611  0010CA  A4D8               	btfss	status,2,c
  2612  0010CC  D7EF               	goto	l265
  2613                           
  2614                           ; Switch size 1, requested type "space"
  2615                           ; Number of cases is 4, Range of values is 1 to 4
  2616                           ; switch strategies available:
  2617                           ; Name         Instructions Cycles
  2618                           ; simple_byte           13     7 (average)
  2619                           ;	Chosen strategy is simple_byte
  2620  0010CE  5013               	movf	?_GETxAPIxVAL,w,c
  2621  0010D0  0A01               	xorlw	1	; case 1
  2622  0010D2  B4D8               	btfsc	status,2,c
  2623  0010D4  D7DF               	goto	l260
  2624  0010D6  0A03               	xorlw	3	; case 2
  2625  0010D8  B4D8               	btfsc	status,2,c
  2626  0010DA  D7DE               	goto	l262
  2627  0010DC  0A01               	xorlw	1	; case 3
  2628  0010DE  B4D8               	btfsc	status,2,c
  2629  0010E0  D7DD               	goto	l263
  2630  0010E2  0A07               	xorlw	7	; case 4
  2631  0010E4  B4D8               	btfsc	status,2,c
  2632  0010E6  D7DC               	goto	l264
  2633  0010E8  D7E1               	goto	l265
  2634  0010EA                     l261:
  2635                           
  2636                           ;State_Mchn.c: 282: }
  2637                           ;State_Mchn.c: 283: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2638  0010EA  0E00               	movlw	0
  2639  0010EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2640  0010EE  0E27               	movlw	39
  2641  0010F0  6E13               	movwf	GETxAPIxVAL@index,c
  2642  0010F2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2643  0010F6  0E05               	movlw	5
  2644  0010F8  1813               	xorwf	?_GETxAPIxVAL,w,c
  2645  0010FA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2646  0010FC  B4D8               	btfsc	status,2,c
  2647  0010FE  D0BB               	goto	l276
  2648  001100  0E00               	movlw	0
  2649  001102  6E14               	movwf	GETxAPIxVAL@index+1,c
  2650  001104  0E28               	movlw	40
  2651  001106  6E13               	movwf	GETxAPIxVAL@index,c
  2652  001108  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2653  00110C  0E05               	movlw	5
  2654  00110E  1813               	xorwf	?_GETxAPIxVAL,w,c
  2655  001110  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2656  001112  A4D8               	btfss	status,2,c
  2657  001114  D098               	goto	l267
  2658  001116  D0AF               	goto	l276
  2659  001118                     
  2660                           ; BSR set to: 0
  2661  001118  0E01               	movlw	1
  2662  00111A  D068               	goto	L25
  2663  00111C                     L9:
  2664  00111C  6F90               	movwf	_Switch_Init& (0+255),b
  2665                           
  2666                           ;State_Mchn.c: 293: break;
  2667  00111E  D0AB               	goto	l276
  2668  001120                     
  2669                           ; BSR set to: 0
  2670  001120  0E02               	movlw	2
  2671  001122  D064               	goto	L25
  2672  001124                     
  2673                           ; BSR set to: 0
  2674  001124  0E04               	movlw	4
  2675  001126  D062               	goto	L25
  2676  001128                     
  2677                           ; BSR set to: 0
  2678  001128  0E08               	movlw	8
  2679  00112A  0100               	movlb	0	; () banked
  2680  00112C  6F90               	movwf	_Switch_Init& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;State_Mchn.c: 301: Red_Led(1);
  2684  00112E  0E01               	movlw	1
  2685  001130  EC10  F020         	call	_Red_Led
  2686                           
  2687                           ;State_Mchn.c: 303: }
  2688                           
  2689                           ;State_Mchn.c: 302: break;
  2690  001134  D0A0               	goto	l276
  2691  001136  0E00               	movlw	0
  2692  001138  6E14               	movwf	GETxAPIxVAL@index+1,c
  2693  00113A  0E28               	movlw	40
  2694  00113C  6E13               	movwf	GETxAPIxVAL@index,c
  2695  00113E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2696                           
  2697                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2698                           ; Switch size 1, requested type "space"
  2699                           ; Number of cases is 1, Range of values is 0 to 0
  2700                           ; switch strategies available:
  2701                           ; Name         Instructions Cycles
  2702                           ; simple_byte            4     3 (average)
  2703                           ;	Chosen strategy is simple_byte
  2704  001142  5014               	movf	?_GETxAPIxVAL+1,w,c
  2705  001144  0A00               	xorlw	0	; case 0
  2706  001146  A4D8               	btfss	status,2,c
  2707  001148  D7EF               	goto	l275
  2708                           
  2709                           ; Switch size 1, requested type "space"
  2710                           ; Number of cases is 4, Range of values is 1 to 4
  2711                           ; switch strategies available:
  2712                           ; Name         Instructions Cycles
  2713                           ; simple_byte           13     7 (average)
  2714                           ;	Chosen strategy is simple_byte
  2715  00114A  5013               	movf	?_GETxAPIxVAL,w,c
  2716  00114C  0A01               	xorlw	1	; case 1
  2717  00114E  B4D8               	btfsc	status,2,c
  2718  001150  D051               	goto	l299
  2719  001152  0A03               	xorlw	3	; case 2
  2720  001154  B4D8               	btfsc	status,2,c
  2721  001156  D7E0               	goto	l272
  2722  001158  0A01               	xorlw	1	; case 3
  2723  00115A  B4D8               	btfsc	status,2,c
  2724  00115C  D7E1               	goto	l273
  2725  00115E  0A07               	xorlw	7	; case 4
  2726  001160  B4D8               	btfsc	status,2,c
  2727  001162  D7E0               	goto	l274
  2728  001164  D7E1               	goto	l275
  2729  001166                     
  2730                           ; BSR set to: 0
  2731  001166  0E00               	movlw	0
  2732  001168  D041               	goto	L25
  2733  00116A                     
  2734                           ; BSR set to: 0
  2735  00116A  0E08               	movlw	8
  2736  00116C  0100               	movlb	0	; () banked
  2737  00116E  6F90               	movwf	_Switch_Init& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;State_Mchn.c: 319: Red_Led(1);
  2741  001170  0E01               	movlw	1
  2742  001172  EC10  F020         	call	_Red_Led
  2743                           
  2744                           ;State_Mchn.c: 321: }
  2745                           
  2746                           ;State_Mchn.c: 320: break;
  2747  001176  D07F               	goto	l276
  2748  001178  0E00               	movlw	0
  2749  00117A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2750  00117C  0E28               	movlw	40
  2751  00117E  6E13               	movwf	GETxAPIxVAL@index,c
  2752  001180  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2753                           
  2754                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2755                           ; Switch size 1, requested type "space"
  2756                           ; Number of cases is 1, Range of values is 0 to 0
  2757                           ; switch strategies available:
  2758                           ; Name         Instructions Cycles
  2759                           ; simple_byte            4     3 (average)
  2760                           ;	Chosen strategy is simple_byte
  2761  001184  5014               	movf	?_GETxAPIxVAL+1,w,c
  2762  001186  0A00               	xorlw	0	; case 0
  2763  001188  A4D8               	btfss	status,2,c
  2764  00118A  D7EF               	goto	l284
  2765                           
  2766                           ; Switch size 1, requested type "space"
  2767                           ; Number of cases is 4, Range of values is 1 to 4
  2768                           ; switch strategies available:
  2769                           ; Name         Instructions Cycles
  2770                           ; simple_byte           13     7 (average)
  2771                           ;	Chosen strategy is simple_byte
  2772  00118C  5013               	movf	?_GETxAPIxVAL,w,c
  2773  00118E  0A01               	xorlw	1	; case 1
  2774  001190  B4D8               	btfsc	status,2,c
  2775  001192  D7C2               	goto	l272
  2776  001194  0A03               	xorlw	3	; case 2
  2777  001196  B4D8               	btfsc	status,2,c
  2778  001198  D02D               	goto	l299
  2779  00119A  0A01               	xorlw	1	; case 3
  2780  00119C  B4D8               	btfsc	status,2,c
  2781  00119E  D7E3               	goto	l282
  2782  0011A0  0A07               	xorlw	7	; case 4
  2783  0011A2  B4D8               	btfsc	status,2,c
  2784  0011A4  D020               	goto	l297
  2785  0011A6  D7E1               	goto	l284
  2786  0011A8                     
  2787                           ; BSR set to: 0
  2788  0011A8  0E08               	movlw	8
  2789  0011AA  0100               	movlb	0	; () banked
  2790  0011AC  6F90               	movwf	_Switch_Init& (0+255),b
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;State_Mchn.c: 337: Red_Led(1);
  2794  0011AE  0E01               	movlw	1
  2795  0011B0  EC10  F020         	call	_Red_Led
  2796                           
  2797                           ;State_Mchn.c: 339: }
  2798                           
  2799                           ;State_Mchn.c: 338: break;
  2800  0011B4  D060               	goto	l276
  2801  0011B6  0E00               	movlw	0
  2802  0011B8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2803  0011BA  0E28               	movlw	40
  2804  0011BC  6E13               	movwf	GETxAPIxVAL@index,c
  2805  0011BE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2806                           
  2807                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2808                           ; Switch size 1, requested type "space"
  2809                           ; Number of cases is 1, Range of values is 0 to 0
  2810                           ; switch strategies available:
  2811                           ; Name         Instructions Cycles
  2812                           ; simple_byte            4     3 (average)
  2813                           ;	Chosen strategy is simple_byte
  2814  0011C2  5014               	movf	?_GETxAPIxVAL+1,w,c
  2815  0011C4  0A00               	xorlw	0	; case 0
  2816  0011C6  A4D8               	btfss	status,2,c
  2817  0011C8  D7EF               	goto	l292
  2818                           
  2819                           ; Switch size 1, requested type "space"
  2820                           ; Number of cases is 4, Range of values is 1 to 4
  2821                           ; switch strategies available:
  2822                           ; Name         Instructions Cycles
  2823                           ; simple_byte           13     7 (average)
  2824                           ;	Chosen strategy is simple_byte
  2825  0011CA  5013               	movf	?_GETxAPIxVAL,w,c
  2826  0011CC  0A01               	xorlw	1	; case 1
  2827  0011CE  B4D8               	btfsc	status,2,c
  2828  0011D0  D7A7               	goto	l273
  2829  0011D2  0A03               	xorlw	3	; case 2
  2830  0011D4  B4D8               	btfsc	status,2,c
  2831  0011D6  D7C7               	goto	l282
  2832  0011D8  0A01               	xorlw	1	; case 3
  2833  0011DA  B4D8               	btfsc	status,2,c
  2834  0011DC  D00B               	goto	l299
  2835  0011DE  0A07               	xorlw	7	; case 4
  2836  0011E0  B4D8               	btfsc	status,2,c
  2837  0011E2  D003               	goto	l298
  2838  0011E4  D7E1               	goto	l292
  2839  0011E6                     l297:
  2840                           
  2841                           ; BSR set to: 0
  2842  0011E6  0E06               	movlw	6
  2843  0011E8  D001               	goto	L25
  2844  0011EA                     l298:
  2845                           
  2846                           ; BSR set to: 0
  2847  0011EA  0E03               	movlw	3
  2848  0011EC                     L25:
  2849  0011EC  0100               	movlb	0	; () banked
  2850  0011EE  6F8F               	movwf	_Switch_Program& (0+255),b
  2851                           
  2852                           ;State_Mchn.c: 350: Switch_Init = 7;
  2853  0011F0  0E07               	movlw	7
  2854  0011F2  D794               	goto	L9
  2855  0011F4                     l299:
  2856                           
  2857                           ; BSR set to: 0
  2858  0011F4  0E00               	movlw	0
  2859  0011F6  0100               	movlb	0	; () banked
  2860  0011F8  D791               	goto	L9
  2861  0011FA                     
  2862                           ; BSR set to: 0
  2863  0011FA  0E08               	movlw	8
  2864  0011FC  0100               	movlb	0	; () banked
  2865  0011FE  6F90               	movwf	_Switch_Init& (0+255),b
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;State_Mchn.c: 355: Red_Led(1);
  2869  001200  0E01               	movlw	1
  2870  001202  EC10  F020         	call	_Red_Led
  2871                           
  2872                           ;State_Mchn.c: 357: }
  2873                           
  2874                           ;State_Mchn.c: 356: break;
  2875  001206  D037               	goto	l276
  2876  001208  0E00               	movlw	0
  2877  00120A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2878  00120C  0E28               	movlw	40
  2879  00120E  6E13               	movwf	GETxAPIxVAL@index,c
  2880  001210  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2881                           
  2882                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2883                           ; Switch size 1, requested type "space"
  2884                           ; Number of cases is 1, Range of values is 0 to 0
  2885                           ; switch strategies available:
  2886                           ; Name         Instructions Cycles
  2887                           ; simple_byte            4     3 (average)
  2888                           ;	Chosen strategy is simple_byte
  2889  001214  5014               	movf	?_GETxAPIxVAL+1,w,c
  2890  001216  0A00               	xorlw	0	; case 0
  2891  001218  A4D8               	btfss	status,2,c
  2892  00121A  D7EF               	goto	l300
  2893                           
  2894                           ; Switch size 1, requested type "space"
  2895                           ; Number of cases is 4, Range of values is 1 to 4
  2896                           ; switch strategies available:
  2897                           ; Name         Instructions Cycles
  2898                           ; simple_byte           13     7 (average)
  2899                           ;	Chosen strategy is simple_byte
  2900  00121C  5013               	movf	?_GETxAPIxVAL,w,c
  2901  00121E  0A01               	xorlw	1	; case 1
  2902  001220  B4D8               	btfsc	status,2,c
  2903  001222  D780               	goto	l274
  2904  001224  0A03               	xorlw	3	; case 2
  2905  001226  B4D8               	btfsc	status,2,c
  2906  001228  D7DE               	goto	l297
  2907  00122A  0A01               	xorlw	1	; case 3
  2908  00122C  B4D8               	btfsc	status,2,c
  2909  00122E  D7DD               	goto	l298
  2910  001230  0A07               	xorlw	7	; case 4
  2911  001232  B4D8               	btfsc	status,2,c
  2912  001234  D7DF               	goto	l299
  2913  001236  D7E1               	goto	l300
  2914  001238  0E08               	movlw	8
  2915  00123A  0100               	movlb	0	; () banked
  2916  00123C  6F90               	movwf	_Switch_Init& (0+255),b
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;State_Mchn.c: 360: Red_Led(1);
  2920  00123E  0E01               	movlw	1
  2921  001240  EC10  F020         	call	_Red_Led
  2922                           
  2923                           ;State_Mchn.c: 362: }
  2924                           
  2925                           ;State_Mchn.c: 361: break;
  2926  001244  D018               	goto	l276
  2927  001246                     l267:
  2928  001246  0E00               	movlw	0
  2929  001248  6E14               	movwf	GETxAPIxVAL@index+1,c
  2930  00124A  0E27               	movlw	39
  2931  00124C  6E13               	movwf	GETxAPIxVAL@index,c
  2932  00124E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2933                           
  2934                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2935                           ; Switch size 1, requested type "space"
  2936                           ; Number of cases is 1, Range of values is 0 to 0
  2937                           ; switch strategies available:
  2938                           ; Name         Instructions Cycles
  2939                           ; simple_byte            4     3 (average)
  2940                           ;	Chosen strategy is simple_byte
  2941  001252  5014               	movf	?_GETxAPIxVAL+1,w,c
  2942  001254  0A00               	xorlw	0	; case 0
  2943  001256  A4D8               	btfss	status,2,c
  2944  001258  D7EF               	goto	l301
  2945                           
  2946                           ; Switch size 1, requested type "space"
  2947                           ; Number of cases is 4, Range of values is 1 to 4
  2948                           ; switch strategies available:
  2949                           ; Name         Instructions Cycles
  2950                           ; simple_byte           13     7 (average)
  2951                           ;	Chosen strategy is simple_byte
  2952  00125A  5013               	movf	?_GETxAPIxVAL,w,c
  2953  00125C  0A01               	xorlw	1	; case 1
  2954  00125E  B4D8               	btfsc	status,2,c
  2955  001260  D76A               	goto	l269
  2956  001262  0A03               	xorlw	3	; case 2
  2957  001264  B4D8               	btfsc	status,2,c
  2958  001266  D788               	goto	l278
  2959  001268  0A01               	xorlw	1	; case 3
  2960  00126A  B4D8               	btfsc	status,2,c
  2961  00126C  D7A4               	goto	l286
  2962  00126E  0A07               	xorlw	7	; case 4
  2963  001270  B4D8               	btfsc	status,2,c
  2964  001272  D7CA               	goto	l294
  2965  001274  D7E1               	goto	l301
  2966  001276                     l276:
  2967                           
  2968                           ;State_Mchn.c: 363: }
  2969                           ;State_Mchn.c: 364: Train_Pos1_Temp = GETxAPIxVAL(39);
  2970  001276  0E00               	movlw	0
  2971  001278  6E14               	movwf	GETxAPIxVAL@index+1,c
  2972  00127A  0E27               	movlw	39
  2973  00127C  6E13               	movwf	GETxAPIxVAL@index,c
  2974  00127E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2975  001282  5013               	movf	?_GETxAPIxVAL,w,c
  2976  001284  0100               	movlb	0	; () banked
  2977  001286  6F8A               	movwf	_Train_Pos1_Temp& (0+255),b
  2978                           
  2979                           ;State_Mchn.c: 365: Train_Pos2_Temp = GETxAPIxVAL(40);
  2980  001288  0E00               	movlw	0
  2981  00128A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2982  00128C  0E28               	movlw	40
  2983  00128E  6E13               	movwf	GETxAPIxVAL@index,c
  2984  001290  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  2985  001294  D09A               	goto	L11
  2986  001296                     
  2987                           ; BSR set to: 0
  2988                           
  2989                           ; BSR set to: 0
  2990  001296  0E0B               	movlw	11
  2991  001298  D46A               	goto	L2
  2992  00129A                     
  2993                           ; BSR set to: 0
  2994                           
  2995                           ; BSR set to: 0
  2996  00129A  0E00               	movlw	0
  2997  00129C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2998  00129E  0E20               	movlw	32
  2999  0012A0  6E13               	movwf	GETxAPIxVAL@index,c
  3000  0012A2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3001  0012A6  5013               	movf	?_GETxAPIxVAL,w,c
  3002  0012A8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3003  0012AA  A4D8               	btfss	status,2,c
  3004  0012AC  D00A               	goto	u9030
  3005  0012AE  0E00               	movlw	0
  3006  0012B0  6E14               	movwf	GETxAPIxVAL@index+1,c
  3007  0012B2  0E46               	movlw	70
  3008  0012B4  6E13               	movwf	GETxAPIxVAL@index,c
  3009  0012B6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3010  0012BA  5013               	movf	?_GETxAPIxVAL,w,c
  3011  0012BC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3012  0012BE  B4D8               	btfsc	status,2,c
  3013  0012C0  D012               	goto	l304
  3014  0012C2                     u9030:
  3015                           
  3016                           ;State_Mchn.c: 372: {
  3017                           ;State_Mchn.c: 373: Switch_Main = 3;
  3018  0012C2  0E03               	movlw	3
  3019  0012C4  0100               	movlb	0	; () banked
  3020  0012C6  6FE9               	movwf	_Switch_Main& (0+255),b
  3021                           
  3022                           ;State_Mchn.c: 374: Switch_Init = 0;
  3023  0012C8  0E00               	movlw	0
  3024  0012CA  6F90               	movwf	_Switch_Init& (0+255),b
  3025                           
  3026                           ;State_Mchn.c: 375: Stop_Program = 0;
  3027  0012CC  0E00               	movlw	0
  3028  0012CE  6F8B               	movwf	_Stop_Program& (0+255),b
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;State_Mchn.c: 376: SETxAPIxVALxNoxRET(70, 0);
  3032  0012D0  0E00               	movlw	0
  3033  0012D2  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  3034  0012D4  0E46               	movlw	70
  3035  0012D6  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  3036  0012D8  0E00               	movlw	0
  3037  0012DA  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  3038  0012DC  0E00               	movlw	0
  3039  0012DE  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  3040  0012E0  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  3041                           
  3042                           ;State_Mchn.c: 377: }
  3043  0012E4  D026               	goto	l308
  3044  0012E6                     l304:
  3045                           
  3046                           ;State_Mchn.c: 378: else if (Train_Pos1_Temp != GETxAPIxVAL(39) || Train_Pos1_Temp != GE
      +                          TxAPIxVAL(40)){
  3047  0012E6  0E00               	movlw	0
  3048  0012E8  6E14               	movwf	GETxAPIxVAL@index+1,c
  3049  0012EA  0E27               	movlw	39
  3050  0012EC  6E13               	movwf	GETxAPIxVAL@index,c
  3051  0012EE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3052  0012F2  0100               	movlb	0	; () banked
  3053  0012F4  518A               	movf	_Train_Pos1_Temp& (0+255),w,b
  3054  0012F6  6FD5               	movwf	??_Update_StateMchn& (0+255),b
  3055  0012F8  6BD6               	clrf	(??_Update_StateMchn+1)& (0+255),b
  3056  0012FA  5013               	movf	?_GETxAPIxVAL,w,c
  3057  0012FC  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  3058  0012FE  E115               	bnz	l9254
  3059  001300  5014               	movf	?_GETxAPIxVAL+1,w,c
  3060  001302  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  3061  001304  A4D8               	btfss	status,2,c
  3062  001306  D011               	goto	u9050
  3063                           
  3064                           ; BSR set to: 0
  3065  001308  0E00               	movlw	0
  3066  00130A  6E14               	movwf	GETxAPIxVAL@index+1,c
  3067  00130C  0E28               	movlw	40
  3068  00130E  6E13               	movwf	GETxAPIxVAL@index,c
  3069  001310  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3070  001314  0100               	movlb	0	; () banked
  3071  001316  518A               	movf	_Train_Pos1_Temp& (0+255),w,b
  3072  001318  6FD5               	movwf	??_Update_StateMchn& (0+255),b
  3073  00131A  6BD6               	clrf	(??_Update_StateMchn+1)& (0+255),b
  3074  00131C  5013               	movf	?_GETxAPIxVAL,w,c
  3075  00131E  19D5               	xorwf	??_Update_StateMchn& (0+255),w,b
  3076  001320  E104               	bnz	l9254
  3077  001322  5014               	movf	?_GETxAPIxVAL+1,w,c
  3078  001324  19D6               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  3079  001326  B4D8               	btfsc	status,2,c
  3080  001328  D004               	goto	l308
  3081  00132A                     u9050:
  3082  00132A                     l9254:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;State_Mchn.c: 379: Switch_Main = 1;
  3086  00132A  0E01               	movlw	1
  3087  00132C  6FE9               	movwf	_Switch_Main& (0+255),b
  3088                           
  3089                           ;State_Mchn.c: 380: Switch_Init = 0;
  3090  00132E  0E00               	movlw	0
  3091  001330  6F90               	movwf	_Switch_Init& (0+255),b
  3092  001332                     l308:
  3093                           
  3094                           ;State_Mchn.c: 381: }
  3095                           ;State_Mchn.c: 382: Green_Led(3);
  3096                           
  3097                           ; BSR set to: 0
  3098                           
  3099                           ; BSR set to: 0
  3100  001332  0E03               	movlw	3
  3101  001334  EC50  F020         	call	_Green_Led
  3102                           
  3103                           ;State_Mchn.c: 383: Red_Led(0);
  3104  001338  0E00               	movlw	0
  3105  00133A  EC10  F020         	call	_Red_Led
  3106                           
  3107                           ;State_Mchn.c: 384: break;
  3108  00133E  D1B8               	goto	l322
  3109  001340  0E00               	movlw	0
  3110  001342  6E14               	movwf	GETxAPIxVAL@index+1,c
  3111  001344  0E27               	movlw	39
  3112  001346  6E13               	movwf	GETxAPIxVAL@index,c
  3113  001348  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3114  00134C  0E05               	movlw	5
  3115  00134E  1813               	xorwf	?_GETxAPIxVAL,w,c
  3116  001350  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3117  001352  A4D8               	btfss	status,2,c
  3118  001354  D013               	goto	l314
  3119  001356                     u9060:
  3120                           
  3121                           ;State_Mchn.c: 387: {
  3122                           ;State_Mchn.c: 388: Switch_Program = 0;
  3123  001356  0E00               	movlw	0
  3124  001358  D005               	goto	L15
  3125  00135A                     
  3126                           ; BSR set to: 0
  3127  00135A  0E01               	movlw	1
  3128  00135C  D003               	goto	L15
  3129  00135E                     
  3130                           ; BSR set to: 0
  3131  00135E  0E03               	movlw	3
  3132  001360  D001               	goto	L15
  3133  001362                     
  3134                           ; BSR set to: 0
  3135  001362  0E02               	movlw	2
  3136  001364                     L15:
  3137  001364  0100               	movlb	0	; () banked
  3138  001366  6F8F               	movwf	_Switch_Program& (0+255),b
  3139  001368  0E0A               	movlw	10
  3140  00136A  6F90               	movwf	_Switch_Init& (0+255),b
  3141  00136C  D01F               	goto	l316
  3142  00136E                     
  3143                           ; BSR set to: 0
  3144  00136E  0E0B               	movlw	11
  3145  001370  0100               	movlb	0	; () banked
  3146  001372  6F90               	movwf	_Switch_Init& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;State_Mchn.c: 398: Red_Led(1);
  3150  001374  0E01               	movlw	1
  3151  001376  EC10  F020         	call	_Red_Led
  3152                           
  3153                           ;State_Mchn.c: 400: }
  3154                           
  3155                           ;State_Mchn.c: 399: break;
  3156  00137A  D018               	goto	l316
  3157  00137C                     l314:
  3158  00137C  0E00               	movlw	0
  3159  00137E  6E14               	movwf	GETxAPIxVAL@index+1,c
  3160  001380  0E27               	movlw	39
  3161  001382  6E13               	movwf	GETxAPIxVAL@index,c
  3162  001384  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3163                           
  3164                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3165                           ; Switch size 1, requested type "space"
  3166                           ; Number of cases is 1, Range of values is 0 to 0
  3167                           ; switch strategies available:
  3168                           ; Name         Instructions Cycles
  3169                           ; simple_byte            4     3 (average)
  3170                           ;	Chosen strategy is simple_byte
  3171  001388  5014               	movf	?_GETxAPIxVAL+1,w,c
  3172  00138A  0A00               	xorlw	0	; case 0
  3173  00138C  A4D8               	btfss	status,2,c
  3174  00138E  D7EF               	goto	l320
  3175                           
  3176                           ; Switch size 1, requested type "space"
  3177                           ; Number of cases is 4, Range of values is 1 to 4
  3178                           ; switch strategies available:
  3179                           ; Name         Instructions Cycles
  3180                           ; simple_byte           13     7 (average)
  3181                           ;	Chosen strategy is simple_byte
  3182  001390  5013               	movf	?_GETxAPIxVAL,w,c
  3183  001392  0A01               	xorlw	1	; case 1
  3184  001394  B4D8               	btfsc	status,2,c
  3185  001396  D7E1               	goto	l315
  3186  001398  0A03               	xorlw	3	; case 2
  3187  00139A  B4D8               	btfsc	status,2,c
  3188  00139C  D7E0               	goto	l317
  3189  00139E  0A01               	xorlw	1	; case 3
  3190  0013A0  B4D8               	btfsc	status,2,c
  3191  0013A2  D7D9               	goto	u9060
  3192  0013A4  0A07               	xorlw	7	; case 4
  3193  0013A6  B4D8               	btfsc	status,2,c
  3194  0013A8  D7DC               	goto	l319
  3195  0013AA  D7E1               	goto	l320
  3196  0013AC                     l316:
  3197                           
  3198                           ;State_Mchn.c: 401: Train_Pos1_Temp = GETxAPIxVAL(39);
  3199  0013AC  0E00               	movlw	0
  3200  0013AE  6E14               	movwf	GETxAPIxVAL@index+1,c
  3201  0013B0  0E27               	movlw	39
  3202  0013B2  6E13               	movwf	GETxAPIxVAL@index,c
  3203  0013B4  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3204  0013B8  5013               	movf	?_GETxAPIxVAL,w,c
  3205  0013BA  0100               	movlb	0	; () banked
  3206  0013BC  6F8A               	movwf	_Train_Pos1_Temp& (0+255),b
  3207                           
  3208                           ;State_Mchn.c: 402: Train_Pos2_Temp = GETxAPIxVAL(40);
  3209  0013BE  0E00               	movlw	0
  3210  0013C0  6E14               	movwf	GETxAPIxVAL@index+1,c
  3211  0013C2  0E28               	movlw	40
  3212  0013C4  6E13               	movwf	GETxAPIxVAL@index,c
  3213  0013C6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3214  0013CA                     L11:
  3215  0013CA  5013               	movf	?_GETxAPIxVAL,w,c
  3216  0013CC  0100               	movlb	0	; () banked
  3217  0013CE  6F89               	movwf	_Train_Pos2_Temp& (0+255),b
  3218                           
  3219                           ;State_Mchn.c: 403: break;
  3220  0013D0  D16F               	goto	l322
  3221  0013D2                     
  3222                           ; BSR set to: 0
  3223                           
  3224                           ; BSR set to: 0
  3225  0013D2  0E00               	movlw	0
  3226  0013D4  6F90               	movwf	_Switch_Init& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;State_Mchn.c: 406: Red_Led(1);
  3230  0013D6  0E01               	movlw	1
  3231  0013D8  EC10  F020         	call	_Red_Led
  3232                           
  3233                           ;State_Mchn.c: 408: }
  3234                           
  3235                           ;State_Mchn.c: 407: break;
  3236  0013DC  D169               	goto	l322
  3237  0013DE                     l213:
  3238  0013DE  0100               	movlb	0	; () banked
  3239  0013E0  5190               	movf	_Switch_Init& (0+255),w,b
  3240                           
  3241                           ; Switch size 1, requested type "space"
  3242                           ; Number of cases is 12, Range of values is 0 to 11
  3243                           ; switch strategies available:
  3244                           ; Name         Instructions Cycles
  3245                           ; simple_byte           37    19 (average)
  3246                           ;	Chosen strategy is simple_byte
  3247  0013E2  0A00               	xorlw	0	; case 0
  3248  0013E4  B4D8               	btfsc	status,2,c
  3249  0013E6  EF99  F005         	goto	l214
  3250  0013EA  0A01               	xorlw	1	; case 1
  3251  0013EC  B4D8               	btfsc	status,2,c
  3252  0013EE  EFA1  F005         	goto	l216
  3253  0013F2  0A03               	xorlw	3	; case 2
  3254  0013F4  B4D8               	btfsc	status,2,c
  3255  0013F6  D42F               	goto	l223
  3256  0013F8  0A01               	xorlw	1	; case 3
  3257  0013FA  B4D8               	btfsc	status,2,c
  3258  0013FC  D473               	goto	l225
  3259  0013FE  0A07               	xorlw	7	; case 4
  3260  001400  B4D8               	btfsc	status,2,c
  3261  001402  D509               	goto	l233
  3262  001404  0A01               	xorlw	1	; case 5
  3263  001406  B4D8               	btfsc	status,2,c
  3264  001408  D592               	goto	l237
  3265  00140A  0A03               	xorlw	3	; case 6
  3266  00140C  B4D8               	btfsc	status,2,c
  3267  00140E  D5AA               	goto	l240
  3268  001410  0A01               	xorlw	1	; case 7
  3269  001412  B4D8               	btfsc	status,2,c
  3270  001414  D5A9               	goto	l241
  3271  001416  0A0F               	xorlw	15	; case 8
  3272  001418  B4D8               	btfsc	status,2,c
  3273  00141A  D5F9               	goto	l249
  3274  00141C  0A01               	xorlw	1	; case 9
  3275  00141E  B4D8               	btfsc	status,2,c
  3276  001420  D73A               	goto	l302
  3277  001422  0A03               	xorlw	3	; case 10
  3278  001424  B4D8               	btfsc	status,2,c
  3279  001426  D739               	goto	l303
  3280  001428  0A01               	xorlw	1	; case 11
  3281  00142A  B4D8               	btfsc	status,2,c
  3282  00142C  D789               	goto	l311
  3283  00142E  D7D1               	goto	l321
  3284  001430                     
  3285                           ; BSR set to: 0
  3286                           
  3287                           ; BSR set to: 0
  3288  001430  0E01               	movlw	1
  3289  001432  6FD3               	movwf	Train_Path@To& (0+255),b
  3290  001434  0E03               	movlw	3
  3291  001436  ECAC  F011         	call	_Train_Path
  3292  00143A  0900               	iorlw	0
  3293  00143C  A4D8               	btfss	status,2,c
  3294  00143E  D087               	goto	l328
  3295                           
  3296                           ;State_Mchn.c: 415: {
  3297                           ;State_Mchn.c: 416: Switch_Program = 1;
  3298  001440  0E01               	movlw	1
  3299  001442  0100               	movlb	0	; () banked
  3300  001444  6F8F               	movwf	_Switch_Program& (0+255),b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;State_Mchn.c: 417: EEPROMxSTORE();
  3304  001446  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3305  00144A                     l9296:
  3306                           
  3307                           ;State_Mchn.c: 418: if(Stop_Program == 1)
  3308  00144A  0100               	movlb	0	; () banked
  3309  00144C  058B               	decf	_Stop_Program& (0+255),w,b
  3310  00144E  A4D8               	btfss	status,2,c
  3311  001450  D07E               	goto	l328
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;State_Mchn.c: 419: {
  3315                           ;State_Mchn.c: 420: Switch_Main = 1;
  3316  001452  0E01               	movlw	1
  3317  001454  6FE9               	movwf	_Switch_Main& (0+255),b
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;State_Mchn.c: 422: }
  3321                           ;State_Mchn.c: 423: }
  3322                           ;State_Mchn.c: 424: break;
  3323                           
  3324                           ; BSR set to: 0
  3325  001456  D07B               	goto	l328
  3326  001458                     
  3327                           ; BSR set to: 0
  3328                           
  3329                           ; BSR set to: 0
  3330  001458  0E03               	movlw	3
  3331  00145A  6FD3               	movwf	Train_Path@To& (0+255),b
  3332  00145C  0E02               	movlw	2
  3333  00145E  ECAC  F011         	call	_Train_Path
  3334  001462  0900               	iorlw	0
  3335  001464  A4D8               	btfss	status,2,c
  3336  001466  D073               	goto	l328
  3337                           
  3338                           ;State_Mchn.c: 427: {
  3339                           ;State_Mchn.c: 428: Switch_Program = 2;
  3340  001468  0E02               	movlw	2
  3341  00146A  0100               	movlb	0	; () banked
  3342  00146C  6F8F               	movwf	_Switch_Program& (0+255),b
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;State_Mchn.c: 429: EEPROMxSTORE();
  3346  00146E  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3347  001472  D7EB               	goto	l9296
  3348  001474                     
  3349                           ; BSR set to: 0
  3350                           
  3351                           ; BSR set to: 0
  3352  001474  0E04               	movlw	4
  3353  001476  6FD3               	movwf	Train_Path@To& (0+255),b
  3354  001478  0E01               	movlw	1
  3355  00147A  ECAC  F011         	call	_Train_Path
  3356  00147E  0900               	iorlw	0
  3357  001480  A4D8               	btfss	status,2,c
  3358  001482  D065               	goto	l328
  3359                           
  3360                           ;State_Mchn.c: 439: {
  3361                           ;State_Mchn.c: 440: Switch_Program = 3;
  3362  001484  0E03               	movlw	3
  3363  001486  0100               	movlb	0	; () banked
  3364  001488  6F8F               	movwf	_Switch_Program& (0+255),b
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;State_Mchn.c: 441: EEPROMxSTORE();
  3368  00148A  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3369  00148E  D7DD               	goto	l9296
  3370  001490                     
  3371                           ; BSR set to: 0
  3372                           
  3373                           ; BSR set to: 0
  3374  001490  0E01               	movlw	1
  3375  001492  6FD3               	movwf	Train_Path@To& (0+255),b
  3376  001494  0E03               	movlw	3
  3377  001496  ECAC  F011         	call	_Train_Path
  3378  00149A  0900               	iorlw	0
  3379  00149C  A4D8               	btfss	status,2,c
  3380  00149E  D057               	goto	l328
  3381                           
  3382                           ;State_Mchn.c: 451: {
  3383                           ;State_Mchn.c: 452: Switch_Program = 4;
  3384  0014A0  0E04               	movlw	4
  3385  0014A2  0100               	movlb	0	; () banked
  3386  0014A4  6F8F               	movwf	_Switch_Program& (0+255),b
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;State_Mchn.c: 453: EEPROMxSTORE();
  3390  0014A6  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3391  0014AA  D7CF               	goto	l9296
  3392  0014AC                     
  3393                           ; BSR set to: 0
  3394                           
  3395                           ; BSR set to: 0
  3396  0014AC  0E02               	movlw	2
  3397  0014AE  6FD3               	movwf	Train_Path@To& (0+255),b
  3398  0014B0  0E04               	movlw	4
  3399  0014B2  ECAC  F011         	call	_Train_Path
  3400  0014B6  0900               	iorlw	0
  3401  0014B8  A4D8               	btfss	status,2,c
  3402  0014BA  D049               	goto	l328
  3403                           
  3404                           ;State_Mchn.c: 463: {
  3405                           ;State_Mchn.c: 464: Switch_Program = 5;
  3406  0014BC  0E05               	movlw	5
  3407  0014BE  0100               	movlb	0	; () banked
  3408  0014C0  6F8F               	movwf	_Switch_Program& (0+255),b
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;State_Mchn.c: 465: EEPROMxSTORE();
  3412  0014C2  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3413  0014C6  D7C1               	goto	l9296
  3414  0014C8                     
  3415                           ; BSR set to: 0
  3416                           
  3417                           ; BSR set to: 0
  3418  0014C8  0E04               	movlw	4
  3419  0014CA  6FD3               	movwf	Train_Path@To& (0+255),b
  3420  0014CC  0E01               	movlw	1
  3421  0014CE  ECAC  F011         	call	_Train_Path
  3422  0014D2  0900               	iorlw	0
  3423  0014D4  A4D8               	btfss	status,2,c
  3424  0014D6  D03B               	goto	l328
  3425                           
  3426                           ;State_Mchn.c: 475: {
  3427                           ;State_Mchn.c: 476: Switch_Program = 6;
  3428  0014D8  0E06               	movlw	6
  3429  0014DA  0100               	movlb	0	; () banked
  3430  0014DC  6F8F               	movwf	_Switch_Program& (0+255),b
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;State_Mchn.c: 477: EEPROMxSTORE();
  3434  0014DE  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3435  0014E2  D7B3               	goto	l9296
  3436  0014E4                     
  3437                           ; BSR set to: 0
  3438                           
  3439                           ; BSR set to: 0
  3440  0014E4  0E03               	movlw	3
  3441  0014E6  6FD3               	movwf	Train_Path@To& (0+255),b
  3442  0014E8  0E02               	movlw	2
  3443  0014EA  ECAC  F011         	call	_Train_Path
  3444  0014EE  0900               	iorlw	0
  3445  0014F0  A4D8               	btfss	status,2,c
  3446  0014F2  D02D               	goto	l328
  3447                           
  3448                           ;State_Mchn.c: 487: {
  3449                           ;State_Mchn.c: 488: Switch_Program = 7;
  3450  0014F4  0E07               	movlw	7
  3451  0014F6  0100               	movlb	0	; () banked
  3452  0014F8  6F8F               	movwf	_Switch_Program& (0+255),b
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;State_Mchn.c: 489: EEPROMxSTORE();
  3456  0014FA  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3457  0014FE  D7A5               	goto	l9296
  3458  001500                     
  3459                           ; BSR set to: 0
  3460                           
  3461                           ; BSR set to: 0
  3462  001500  0E02               	movlw	2
  3463  001502  6FD3               	movwf	Train_Path@To& (0+255),b
  3464  001504  0E04               	movlw	4
  3465  001506  ECAC  F011         	call	_Train_Path
  3466  00150A  0900               	iorlw	0
  3467  00150C  A4D8               	btfss	status,2,c
  3468  00150E  D01F               	goto	l328
  3469                           
  3470                           ;State_Mchn.c: 499: {
  3471                           ;State_Mchn.c: 500: Switch_Program = 0;
  3472  001510  0E00               	movlw	0
  3473  001512  0100               	movlb	0	; () banked
  3474  001514  6F8F               	movwf	_Switch_Program& (0+255),b
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;State_Mchn.c: 501: EEPROMxSTORE();
  3478  001516  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3479  00151A  D797               	goto	l9296
  3480  00151C                     
  3481                           ; BSR set to: 0
  3482                           
  3483                           ; BSR set to: 0
  3484  00151C  518F               	movf	_Switch_Program& (0+255),w,b
  3485                           
  3486                           ; Switch size 1, requested type "space"
  3487                           ; Number of cases is 8, Range of values is 0 to 7
  3488                           ; switch strategies available:
  3489                           ; Name         Instructions Cycles
  3490                           ; simple_byte           25    13 (average)
  3491                           ;	Chosen strategy is simple_byte
  3492  00151E  0A00               	xorlw	0	; case 0
  3493  001520  B4D8               	btfsc	status,2,c
  3494  001522  D786               	goto	l325
  3495  001524  0A01               	xorlw	1	; case 1
  3496  001526  B4D8               	btfsc	status,2,c
  3497  001528  D797               	goto	l329
  3498  00152A  0A03               	xorlw	3	; case 2
  3499  00152C  B4D8               	btfsc	status,2,c
  3500  00152E  D7A2               	goto	l332
  3501  001530  0A01               	xorlw	1	; case 3
  3502  001532  B4D8               	btfsc	status,2,c
  3503  001534  D7AD               	goto	l335
  3504  001536  0A07               	xorlw	7	; case 4
  3505  001538  B4D8               	btfsc	status,2,c
  3506  00153A  D7B8               	goto	l338
  3507  00153C  0A01               	xorlw	1	; case 5
  3508  00153E  B4D8               	btfsc	status,2,c
  3509  001540  D7C3               	goto	l341
  3510  001542  0A03               	xorlw	3	; case 6
  3511  001544  B4D8               	btfsc	status,2,c
  3512  001546  D7CE               	goto	l344
  3513  001548  0A01               	xorlw	1	; case 7
  3514  00154A  B4D8               	btfsc	status,2,c
  3515  00154C  D7D9               	goto	l347
  3516  00154E                     l328:
  3517                           
  3518                           ;State_Mchn.c: 697: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3519                           
  3520                           ; BSR set to: 0
  3521  00154E  0E00               	movlw	0
  3522  001550  6E14               	movwf	GETxAPIxVAL@index+1,c
  3523  001552  0E21               	movlw	33
  3524  001554  6E13               	movwf	GETxAPIxVAL@index,c
  3525  001556  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3526  00155A  5013               	movf	?_GETxAPIxVAL,w,c
  3527  00155C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3528  00155E  A4D8               	btfss	status,2,c
  3529  001560  D00A               	goto	u9240
  3530  001562  0E00               	movlw	0
  3531  001564  6E14               	movwf	GETxAPIxVAL@index+1,c
  3532  001566  0E47               	movlw	71
  3533  001568  6E13               	movwf	GETxAPIxVAL@index,c
  3534  00156A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3535  00156E  5013               	movf	?_GETxAPIxVAL,w,c
  3536  001570  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3537  001572  B4D8               	btfsc	status,2,c
  3538  001574  D00D               	goto	l351
  3539  001576                     u9240:
  3540                           
  3541                           ;State_Mchn.c: 698: {
  3542                           ;State_Mchn.c: 699: Stop_Program = 1;
  3543  001576  0E01               	movlw	1
  3544  001578  0100               	movlb	0	; () banked
  3545  00157A  6F8B               	movwf	_Stop_Program& (0+255),b
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;State_Mchn.c: 700: SETxAPIxVALxNoxRET(71, 0);
  3549  00157C  0E00               	movlw	0
  3550  00157E  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  3551  001580  0E47               	movlw	71
  3552  001582  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  3553  001584  0E00               	movlw	0
  3554  001586  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  3555  001588  0E00               	movlw	0
  3556  00158A  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  3557  00158C  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  3558  001590                     l351:
  3559                           
  3560                           ;State_Mchn.c: 701: }
  3561                           ;State_Mchn.c: 703: if(Stop_Program == 1)
  3562  001590  0100               	movlb	0	; () banked
  3563  001592  058B               	decf	_Stop_Program& (0+255),w,b
  3564  001594  A4D8               	btfss	status,2,c
  3565  001596  D003               	goto	l354
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;State_Mchn.c: 704: {
  3569                           ;State_Mchn.c: 705: Red_Led(2);
  3570  001598  0E02               	movlw	2
  3571  00159A  EC10  F020         	call	_Red_Led
  3572  00159E                     l354:
  3573                           
  3574                           ;State_Mchn.c: 706: }
  3575                           ;State_Mchn.c: 708: Green_Led(1);
  3576  00159E  0E01               	movlw	1
  3577  0015A0  EC50  F020         	call	_Green_Led
  3578                           
  3579                           ;State_Mchn.c: 710: break;
  3580  0015A4  D085               	goto	l322
  3581  0015A6  0E01               	movlw	1
  3582  0015A8  0100               	movlb	0	; () banked
  3583  0015AA  6FD3               	movwf	Train_Path@To& (0+255),b
  3584  0015AC  0E03               	movlw	3
  3585  0015AE  ECAC  F011         	call	_Train_Path
  3586  0015B2  0900               	iorlw	0
  3587  0015B4  A4D8               	btfss	status,2,c
  3588  0015B6  D044               	goto	l360
  3589                           
  3590                           ;State_Mchn.c: 716: {
  3591                           ;State_Mchn.c: 717: Switch_Program = 1;
  3592  0015B8  0E01               	movlw	1
  3593  0015BA  0100               	movlb	0	; () banked
  3594  0015BC  6F8F               	movwf	_Switch_Program& (0+255),b
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;State_Mchn.c: 718: EEPROMxSTORE();
  3598  0015BE  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3599  0015C2                     l9392:
  3600                           
  3601                           ;State_Mchn.c: 719: if(Stop_Program == 1)
  3602  0015C2  0100               	movlb	0	; () banked
  3603  0015C4  058B               	decf	_Stop_Program& (0+255),w,b
  3604  0015C6  A4D8               	btfss	status,2,c
  3605  0015C8  D03B               	goto	l360
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;State_Mchn.c: 720: {
  3609                           ;State_Mchn.c: 721: Switch_Main = 1;
  3610  0015CA  0E01               	movlw	1
  3611  0015CC  6FE9               	movwf	_Switch_Main& (0+255),b
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;State_Mchn.c: 723: }
  3615                           ;State_Mchn.c: 724: }
  3616                           ;State_Mchn.c: 725: break;
  3617                           
  3618                           ; BSR set to: 0
  3619  0015CE  D038               	goto	l360
  3620  0015D0                     
  3621                           ; BSR set to: 0
  3622                           
  3623                           ; BSR set to: 0
  3624  0015D0  0E04               	movlw	4
  3625  0015D2  6FD3               	movwf	Train_Path@To& (0+255),b
  3626  0015D4  0E01               	movlw	1
  3627  0015D6  ECAC  F011         	call	_Train_Path
  3628  0015DA  0900               	iorlw	0
  3629  0015DC  A4D8               	btfss	status,2,c
  3630  0015DE  D030               	goto	l360
  3631                           
  3632                           ;State_Mchn.c: 728: {
  3633                           ;State_Mchn.c: 729: Switch_Program = 2;
  3634  0015E0  0E02               	movlw	2
  3635  0015E2  0100               	movlb	0	; () banked
  3636  0015E4  6F8F               	movwf	_Switch_Program& (0+255),b
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;State_Mchn.c: 730: EEPROMxSTORE();
  3640  0015E6  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3641  0015EA  D7EB               	goto	l9392
  3642  0015EC                     
  3643                           ; BSR set to: 0
  3644                           
  3645                           ; BSR set to: 0
  3646  0015EC  0E02               	movlw	2
  3647  0015EE  6FD3               	movwf	Train_Path@To& (0+255),b
  3648  0015F0  0E04               	movlw	4
  3649  0015F2  ECAC  F011         	call	_Train_Path
  3650  0015F6  0900               	iorlw	0
  3651  0015F8  A4D8               	btfss	status,2,c
  3652  0015FA  D022               	goto	l360
  3653                           
  3654                           ;State_Mchn.c: 740: {
  3655                           ;State_Mchn.c: 741: Switch_Program = 3;
  3656  0015FC  0E03               	movlw	3
  3657  0015FE  0100               	movlb	0	; () banked
  3658  001600  6F8F               	movwf	_Switch_Program& (0+255),b
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;State_Mchn.c: 742: EEPROMxSTORE();
  3662  001602  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3663  001606  D7DD               	goto	l9392
  3664  001608                     
  3665                           ; BSR set to: 0
  3666                           
  3667                           ; BSR set to: 0
  3668  001608  0E03               	movlw	3
  3669  00160A  6FD3               	movwf	Train_Path@To& (0+255),b
  3670  00160C  0E02               	movlw	2
  3671  00160E  ECAC  F011         	call	_Train_Path
  3672  001612  0900               	iorlw	0
  3673  001614  A4D8               	btfss	status,2,c
  3674  001616  D014               	goto	l360
  3675                           
  3676                           ;State_Mchn.c: 752: {
  3677                           ;State_Mchn.c: 753: Switch_Program = 0;
  3678  001618  0E00               	movlw	0
  3679  00161A  0100               	movlb	0	; () banked
  3680  00161C  6F8F               	movwf	_Switch_Program& (0+255),b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;State_Mchn.c: 754: EEPROMxSTORE();
  3684  00161E  ECC1  F016         	call	_EEPROMxSTORE	;wreg free
  3685  001622  D7CF               	goto	l9392
  3686  001624                     
  3687                           ; BSR set to: 0
  3688  001624  0100               	movlb	0	; () banked
  3689  001626  518F               	movf	_Switch_Program& (0+255),w,b
  3690                           
  3691                           ; Switch size 1, requested type "space"
  3692                           ; Number of cases is 4, Range of values is 0 to 3
  3693                           ; switch strategies available:
  3694                           ; Name         Instructions Cycles
  3695                           ; simple_byte           13     7 (average)
  3696                           ;	Chosen strategy is simple_byte
  3697  001628  0A00               	xorlw	0	; case 0
  3698  00162A  B4D8               	btfsc	status,2,c
  3699  00162C  D7BC               	goto	l357
  3700  00162E  0A01               	xorlw	1	; case 1
  3701  001630  B4D8               	btfsc	status,2,c
  3702  001632  D7CE               	goto	l361
  3703  001634  0A03               	xorlw	3	; case 2
  3704  001636  B4D8               	btfsc	status,2,c
  3705  001638  D7D9               	goto	l364
  3706  00163A  0A01               	xorlw	1	; case 3
  3707  00163C  B4D8               	btfsc	status,2,c
  3708  00163E  D7E4               	goto	l367
  3709  001640                     l360:
  3710                           
  3711                           ;State_Mchn.c: 948: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3712                           
  3713                           ; BSR set to: 0
  3714  001640  0E00               	movlw	0
  3715  001642  6E14               	movwf	GETxAPIxVAL@index+1,c
  3716  001644  0E21               	movlw	33
  3717  001646  6E13               	movwf	GETxAPIxVAL@index,c
  3718  001648  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3719  00164C  5013               	movf	?_GETxAPIxVAL,w,c
  3720  00164E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3721  001650  A4D8               	btfss	status,2,c
  3722  001652  D00A               	goto	u9350
  3723  001654  0E00               	movlw	0
  3724  001656  6E14               	movwf	GETxAPIxVAL@index+1,c
  3725  001658  0E47               	movlw	71
  3726  00165A  6E13               	movwf	GETxAPIxVAL@index,c
  3727  00165C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  3728  001660  5013               	movf	?_GETxAPIxVAL,w,c
  3729  001662  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3730  001664  B4D8               	btfsc	status,2,c
  3731  001666  D00D               	goto	l371
  3732  001668                     u9350:
  3733                           
  3734                           ;State_Mchn.c: 949: {
  3735                           ;State_Mchn.c: 950: Stop_Program = 1;
  3736  001668  0E01               	movlw	1
  3737  00166A  0100               	movlb	0	; () banked
  3738  00166C  6F8B               	movwf	_Stop_Program& (0+255),b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;State_Mchn.c: 951: SETxAPIxVAL(71, 0);
  3742  00166E  0E00               	movlw	0
  3743  001670  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3744  001672  0E47               	movlw	71
  3745  001674  6E19               	movwf	SETxAPIxVAL@index,c
  3746  001676  0E00               	movlw	0
  3747  001678  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3748  00167A  0E00               	movlw	0
  3749  00167C  6E1B               	movwf	SETxAPIxVAL@value,c
  3750  00167E  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  3751  001682                     l371:
  3752                           
  3753                           ;State_Mchn.c: 952: }
  3754                           ;State_Mchn.c: 954: if(Stop_Program == 1)
  3755  001682  0100               	movlb	0	; () banked
  3756  001684  058B               	decf	_Stop_Program& (0+255),w,b
  3757  001686  A4D8               	btfss	status,2,c
  3758  001688  D003               	goto	l374
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;State_Mchn.c: 955: {
  3762                           ;State_Mchn.c: 956: Red_Led(2);
  3763  00168A  0E02               	movlw	2
  3764  00168C  EC10  F020         	call	_Red_Led
  3765  001690                     l374:
  3766                           
  3767                           ;State_Mchn.c: 957: }
  3768                           ;State_Mchn.c: 959: Green_Led(1);
  3769  001690  0E01               	movlw	1
  3770  001692  EC50  F020         	call	_Green_Led
  3771                           
  3772                           ;State_Mchn.c: 964: }
  3773                           
  3774                           ;State_Mchn.c: 963: default : break;
  3775                           
  3776                           ;State_Mchn.c: 961: break;
  3777  001696  D00C               	goto	l322
  3778  001698                     l191:
  3779  001698  0100               	movlb	0	; () banked
  3780  00169A  51E9               	movf	_Switch_Main& (0+255),w,b
  3781                           
  3782                           ; Switch size 1, requested type "space"
  3783                           ; Number of cases is 3, Range of values is 1 to 3
  3784                           ; switch strategies available:
  3785                           ; Name         Instructions Cycles
  3786                           ; simple_byte           10     6 (average)
  3787                           ;	Chosen strategy is simple_byte
  3788  00169C  0A01               	xorlw	1	; case 1
  3789  00169E  B4D8               	btfsc	status,2,c
  3790  0016A0  EF6D  F004         	goto	l192
  3791  0016A4  0A03               	xorlw	3	; case 2
  3792  0016A6  B4D8               	btfsc	status,2,c
  3793  0016A8  D739               	goto	l324
  3794  0016AA  0A01               	xorlw	1	; case 3
  3795  0016AC  B4D8               	btfsc	status,2,c
  3796  0016AE  D7BA               	goto	l356
  3797  0016B0                     l322:
  3798                           
  3799                           ;State_Mchn.c: 965: SETxAPIxVAL(63, Switch_Main);
  3800                           
  3801                           ; BSR set to: 0
  3802  0016B0  0E00               	movlw	0
  3803  0016B2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3804  0016B4  0E3F               	movlw	63
  3805  0016B6  6E19               	movwf	SETxAPIxVAL@index,c
  3806  0016B8  C0E9  F01B         	movff	_Switch_Main,SETxAPIxVAL@value
  3807  0016BC  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3808  0016BE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  3809                           
  3810                           ;State_Mchn.c: 966: SETxAPIxVAL(80, Switch_Program);
  3811  0016C2  0E00               	movlw	0
  3812  0016C4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3813  0016C6  0E50               	movlw	80
  3814  0016C8  6E19               	movwf	SETxAPIxVAL@index,c
  3815  0016CA  C08F  F01B         	movff	_Switch_Program,SETxAPIxVAL@value
  3816  0016CE  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3817  0016D0  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  3818  0016D4  0012               	return		;funcret
  3819  0016D6                     __end_of_Update_StateMchn:
  3820                           	opt stack 0
  3821                           tblptru	equ	0xFF8
  3822                           tblptrh	equ	0xFF7
  3823                           tblptrl	equ	0xFF6
  3824                           tablat	equ	0xFF5
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           postdec1	equ	0xFE5
  3828                           fsr1l	equ	0xFE1
  3829                           status	equ	0xFD8
  3830                           
  3831 ;; *************** function _Train_Path *****************
  3832 ;; Defined at:
  3833 ;;		line 984 in file "../State_Mchn.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;  From            1    wreg     unsigned char 
  3836 ;;  To              1   23[BANK0 ] unsigned char 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  From            1   24[BANK0 ] unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      unsigned char 
  3841 ;; Registers used:
  3842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3848 ;;      Params:         0       1       0       0       0       0       0       0       0
  3849 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3851 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3852 ;;Total ram usage:        2 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    7
  3855 ;; This function calls:
  3856 ;;		_GETxAPIxVAL
  3857 ;;		_Junction
  3858 ;;		_Left_Mountain_From_The_Left
  3859 ;;		_Left_Mountain_From_The_Right
  3860 ;;		_Right_Mountain_From_The_Left
  3861 ;;		_Right_Mountain_From_The_Right
  3862 ;;		_SETxAPIxVAL
  3863 ;;		_Train_Move_Left_Brake
  3864 ;;		_Train_Move_Left_Start
  3865 ;;		_Train_Move_Right_Brake
  3866 ;;		_Train_Move_Right_Start
  3867 ;; This function is called by:
  3868 ;;		_Update_StateMchn
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text2
  3873  002358                     __ptext2:
  3874                           	opt stack 0
  3875  002358                     _Train_Path:
  3876                           	opt stack 22
  3877                           
  3878                           ;incstack = 0
  3879                           ;Train_Path@From stored from wreg
  3880  002358  0100               	movlb	0	; () banked
  3881  00235A  6FD4               	movwf	Train_Path@From& (0+255),b
  3882                           
  3883                           ;State_Mchn.c: 986: static char Return_Val = 1;
  3884                           ;State_Mchn.c: 988: SETxAPIxVAL(61, From);
  3885  00235C  0E00               	movlw	0
  3886  00235E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3887  002360  0E3D               	movlw	61
  3888  002362  6E19               	movwf	SETxAPIxVAL@index,c
  3889  002364  C0D4  F01B         	movff	Train_Path@From,SETxAPIxVAL@value
  3890  002368  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3891  00236A  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  3892                           
  3893                           ;State_Mchn.c: 989: SETxAPIxVAL(62, To);
  3894  00236E  0E00               	movlw	0
  3895  002370  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3896  002372  0E3E               	movlw	62
  3897  002374  6E19               	movwf	SETxAPIxVAL@index,c
  3898  002376  C0D3  F01B         	movff	Train_Path@To,SETxAPIxVAL@value
  3899  00237A  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3900  00237C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  3901                           
  3902                           ;State_Mchn.c: 991: switch(Switch_Train_Path)
  3903  002380  D1AC               	goto	l381
  3904  002382  0E00               	movlw	0
  3905  002384  6E1F               	movwf	Junction@Straight_Bend,c
  3906  002386  0E01               	movlw	1
  3907  002388  ECD1  F015         	call	_Junction
  3908  00238C  0900               	iorlw	0
  3909  00238E  B4D8               	btfsc	status,2,c
  3910  002390  D018               	goto	u7990
  3911  002392                     l385:
  3912                           
  3913                           ;State_Mchn.c: 999: }
  3914                           ;State_Mchn.c: 1000: Return_Val = 1;
  3915  002392  0E01               	movlw	1
  3916  002394  0100               	movlb	0	; () banked
  3917  002396                     L42:
  3918  002396  6FE8               	movwf	Train_Path@Return_Val& (0+255),b
  3919                           
  3920                           ;State_Mchn.c: 1001: break;
  3921  002398  D1CA               	goto	l394
  3922  00239A                     
  3923                           ; BSR set to: 0
  3924                           
  3925                           ; BSR set to: 0
  3926  00239A  0E01               	movlw	1
  3927  00239C  6E1F               	movwf	Junction@Straight_Bend,c
  3928  00239E  0E01               	movlw	1
  3929  0023A0  ECD1  F015         	call	_Junction
  3930  0023A4  D7F3               	goto	L59
  3931  0023A6                     
  3932                           ; BSR set to: 0
  3933                           
  3934                           ; BSR set to: 0
  3935  0023A6  0E01               	movlw	1
  3936  0023A8  6E1F               	movwf	Junction@Straight_Bend,c
  3937  0023AA  0E00               	movlw	0
  3938  0023AC  ECD1  F015         	call	_Junction
  3939  0023B0  D7ED               	goto	L59
  3940  0023B2                     
  3941                           ; BSR set to: 0
  3942                           
  3943                           ; BSR set to: 0
  3944  0023B2  0E00               	movlw	0
  3945  0023B4  6E1F               	movwf	Junction@Straight_Bend,c
  3946  0023B6  0E00               	movlw	0
  3947  0023B8  ECD1  F015         	call	_Junction
  3948  0023BC  0900               	iorlw	0
  3949  0023BE  A4D8               	btfss	status,2,c
  3950  0023C0  D7E8               	goto	l385
  3951  0023C2                     u7990:
  3952                           
  3953                           ;State_Mchn.c: 1017: {
  3954                           ;State_Mchn.c: 1018: Switch_Train_Path = 1;
  3955  0023C2  0E01               	movlw	1
  3956  0023C4  D015               	goto	L43
  3957  0023C6                     
  3958                           ; BSR set to: 0
  3959  0023C6  0100               	movlb	0	; () banked
  3960  0023C8  51D4               	movf	Train_Path@From& (0+255),w,b
  3961                           
  3962                           ; Switch size 1, requested type "space"
  3963                           ; Number of cases is 4, Range of values is 1 to 4
  3964                           ; switch strategies available:
  3965                           ; Name         Instructions Cycles
  3966                           ; simple_byte           13     7 (average)
  3967                           ;	Chosen strategy is simple_byte
  3968  0023CA  0A01               	xorlw	1	; case 1
  3969  0023CC  B4D8               	btfsc	status,2,c
  3970  0023CE  D7EB               	goto	l389
  3971  0023D0  0A03               	xorlw	3	; case 2
  3972  0023D2  B4D8               	btfsc	status,2,c
  3973  0023D4  D7EE               	goto	l391
  3974  0023D6  0A01               	xorlw	1	; case 3
  3975  0023D8  B4D8               	btfsc	status,2,c
  3976  0023DA  D7D3               	goto	l384
  3977  0023DC  0A07               	xorlw	7	; case 4
  3978  0023DE  B4D8               	btfsc	status,2,c
  3979  0023E0  D7DC               	goto	l387
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;State_Mchn.c: 1025: break;
  3983  0023E2  D1A5               	goto	l394
  3984  0023E4                     
  3985                           ; BSR set to: 0
  3986                           
  3987                           ; BSR set to: 0
  3988  0023E4  0E00               	movlw	0
  3989  0023E6  6E1F               	movwf	Junction@Straight_Bend,c
  3990  0023E8  0E01               	movlw	1
  3991  0023EA  ECD1  F015         	call	_Junction
  3992  0023EE  D016               	goto	L45
  3993  0023F0                     L43:
  3994  0023F0  0100               	movlb	0	; () banked
  3995  0023F2  6F8C               	movwf	_Switch_Train_Path& (0+255),b
  3996                           
  3997                           ;State_Mchn.c: 1032: Return_Val = 1;
  3998  0023F4  0E01               	movlw	1
  3999  0023F6  6FE8               	movwf	Train_Path@Return_Val& (0+255),b
  4000  0023F8  D7CC               	goto	l385
  4001  0023FA                     
  4002                           ; BSR set to: 0
  4003                           
  4004                           ; BSR set to: 0
  4005  0023FA  0E01               	movlw	1
  4006  0023FC  6E1F               	movwf	Junction@Straight_Bend,c
  4007  0023FE  0E01               	movlw	1
  4008  002400  ECD1  F015         	call	_Junction
  4009  002404  D00B               	goto	L45
  4010  002406                     
  4011                           ; BSR set to: 0
  4012                           
  4013                           ; BSR set to: 0
  4014  002406  0E01               	movlw	1
  4015  002408  6E1F               	movwf	Junction@Straight_Bend,c
  4016  00240A  0E00               	movlw	0
  4017  00240C  ECD1  F015         	call	_Junction
  4018  002410  D005               	goto	L45
  4019  002412                     
  4020                           ; BSR set to: 0
  4021                           
  4022                           ; BSR set to: 0
  4023  002412  0E00               	movlw	0
  4024  002414  6E1F               	movwf	Junction@Straight_Bend,c
  4025  002416  0E00               	movlw	0
  4026  002418  ECD1  F015         	call	_Junction
  4027  00241C                     L45:
  4028  00241C  0900               	iorlw	0
  4029  00241E  A4D8               	btfss	status,2,c
  4030  002420  D7B8               	goto	l385
  4031                           
  4032                           ;State_Mchn.c: 1051: {
  4033                           ;State_Mchn.c: 1052: Switch_Train_Path = 2;
  4034  002422  0E02               	movlw	2
  4035  002424  D7E5               	goto	L43
  4036  002426                     
  4037                           ; BSR set to: 0
  4038                           
  4039                           ; BSR set to: 0
  4040  002426  51D3               	movf	Train_Path@To& (0+255),w,b
  4041                           
  4042                           ; Switch size 1, requested type "space"
  4043                           ; Number of cases is 4, Range of values is 1 to 4
  4044                           ; switch strategies available:
  4045                           ; Name         Instructions Cycles
  4046                           ; simple_byte           13     7 (average)
  4047                           ;	Chosen strategy is simple_byte
  4048  002428  0A01               	xorlw	1	; case 1
  4049  00242A  B4D8               	btfsc	status,2,c
  4050  00242C  D7EC               	goto	l402
  4051  00242E  0A03               	xorlw	3	; case 2
  4052  002430  B4D8               	btfsc	status,2,c
  4053  002432  D7EF               	goto	l404
  4054  002434  0A01               	xorlw	1	; case 3
  4055  002436  B4D8               	btfsc	status,2,c
  4056  002438  D7D5               	goto	l397
  4057  00243A  0A07               	xorlw	7	; case 4
  4058  00243C  B4D8               	btfsc	status,2,c
  4059  00243E  D7DD               	goto	l400
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;State_Mchn.c: 1059: break;
  4063  002440  D176               	goto	l394
  4064  002442                     
  4065                           ; BSR set to: 0
  4066                           
  4067                           ; BSR set to: 0
  4068  002442  EC02  F01A         	call	_Train_Move_Right_Start	;wreg free
  4069  002446  D008               	goto	L48
  4070  002448                     
  4071                           ; BSR set to: 0
  4072                           
  4073                           ; BSR set to: 0
  4074  002448  EC02  F01A         	call	_Train_Move_Right_Start	;wreg free
  4075  00244C  D005               	goto	L48
  4076  00244E                     
  4077                           ; BSR set to: 0
  4078                           
  4079                           ; BSR set to: 0
  4080  00244E  EC66  F019         	call	_Train_Move_Left_Start	;wreg free
  4081  002452  D002               	goto	L48
  4082  002454                     
  4083                           ; BSR set to: 0
  4084                           
  4085                           ; BSR set to: 0
  4086  002454  EC66  F019         	call	_Train_Move_Left_Start	;wreg free
  4087  002458                     L48:
  4088  002458  0900               	iorlw	0
  4089  00245A  A4D8               	btfss	status,2,c
  4090  00245C  D79A               	goto	l385
  4091                           
  4092                           ;State_Mchn.c: 1085: {
  4093                           ;State_Mchn.c: 1086: Switch_Train_Path = 3;
  4094  00245E  0E03               	movlw	3
  4095  002460  D7C7               	goto	L43
  4096  002462                     
  4097                           ; BSR set to: 0
  4098                           
  4099                           ; BSR set to: 0
  4100  002462  51D3               	movf	Train_Path@To& (0+255),w,b
  4101                           
  4102                           ; Switch size 1, requested type "space"
  4103                           ; Number of cases is 4, Range of values is 1 to 4
  4104                           ; switch strategies available:
  4105                           ; Name         Instructions Cycles
  4106                           ; simple_byte           13     7 (average)
  4107                           ;	Chosen strategy is simple_byte
  4108  002464  0A01               	xorlw	1	; case 1
  4109  002466  B4D8               	btfsc	status,2,c
  4110  002468  D7F2               	goto	l414
  4111  00246A  0A03               	xorlw	3	; case 2
  4112  00246C  B4D8               	btfsc	status,2,c
  4113  00246E  D7F2               	goto	l416
  4114  002470  0A01               	xorlw	1	; case 3
  4115  002472  B4D8               	btfsc	status,2,c
  4116  002474  D7E6               	goto	l409
  4117  002476  0A07               	xorlw	7	; case 4
  4118  002478  B4D8               	btfsc	status,2,c
  4119  00247A  D7E6               	goto	l412
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;State_Mchn.c: 1093: break;
  4123  00247C  D158               	goto	l394
  4124  00247E                     
  4125                           ; BSR set to: 0
  4126                           
  4127                           ; BSR set to: 0
  4128  00247E  0E00               	movlw	0
  4129  002480  6E14               	movwf	GETxAPIxVAL@index+1,c
  4130  002482  0E1C               	movlw	28
  4131  002484  6E13               	movwf	GETxAPIxVAL@index,c
  4132  002486  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4133  00248A  0413               	decf	?_GETxAPIxVAL,w,c
  4134  00248C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4135  00248E  B4D8               	btfsc	status,2,c
  4136  002490  D09B               	goto	u8230
  4137                           
  4138                           ;State_Mchn.c: 1100: else if(GETxAPIxVAL(41) == 1){
  4139                           
  4140                           ; BSR set to: 0
  4141                           
  4142                           ;State_Mchn.c: 1099: }
  4143                           
  4144                           ;State_Mchn.c: 1098: Switch_Train_Path = 4;
  4145  002492  0E00               	movlw	0
  4146  002494  6E14               	movwf	GETxAPIxVAL@index+1,c
  4147  002496  0E29               	movlw	41
  4148  002498  6E13               	movwf	GETxAPIxVAL@index,c
  4149  00249A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4150  00249E  0413               	decf	?_GETxAPIxVAL,w,c
  4151  0024A0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4152  0024A2  B4D8               	btfsc	status,2,c
  4153  0024A4  D032               	goto	u8140
  4154                           
  4155                           ;State_Mchn.c: 1103: else if(GETxAPIxVAL(42) == 1){
  4156                           
  4157                           ; BSR set to: 0
  4158                           
  4159                           ;State_Mchn.c: 1102: }
  4160                           
  4161                           ;State_Mchn.c: 1101: Switch_Train_Path = 5;
  4162  0024A6  0E00               	movlw	0
  4163  0024A8  6E14               	movwf	GETxAPIxVAL@index+1,c
  4164  0024AA  0E2A               	movlw	42
  4165  0024AC  6E13               	movwf	GETxAPIxVAL@index,c
  4166  0024AE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4167  0024B2  0413               	decf	?_GETxAPIxVAL,w,c
  4168  0024B4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4169  0024B6  B4D8               	btfsc	status,2,c
  4170  0024B8  D034               	goto	u8150
  4171                           
  4172                           ;State_Mchn.c: 1106: else if(GETxAPIxVAL(44) == 1){
  4173                           
  4174                           ; BSR set to: 0
  4175                           
  4176                           ;State_Mchn.c: 1105: }
  4177                           
  4178                           ;State_Mchn.c: 1104: Switch_Train_Path = 6;
  4179  0024BA  0E00               	movlw	0
  4180  0024BC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4181  0024BE  0E2C               	movlw	44
  4182  0024C0  6E13               	movwf	GETxAPIxVAL@index,c
  4183  0024C2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4184  0024C6  0413               	decf	?_GETxAPIxVAL,w,c
  4185  0024C8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4186  0024CA  B4D8               	btfsc	status,2,c
  4187  0024CC  D036               	goto	u8160
  4188                           
  4189                           ;State_Mchn.c: 1109: else if(GETxAPIxVAL(43) == 1){
  4190                           
  4191                           ; BSR set to: 0
  4192                           
  4193                           ;State_Mchn.c: 1108: }
  4194                           
  4195                           ;State_Mchn.c: 1107: Switch_Train_Path = 7;
  4196  0024CE  0E00               	movlw	0
  4197  0024D0  6E14               	movwf	GETxAPIxVAL@index+1,c
  4198  0024D2  0E2B               	movlw	43
  4199  0024D4  6E13               	movwf	GETxAPIxVAL@index,c
  4200  0024D6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4201  0024DA  D037               	goto	L96
  4202  0024DC                     L29:
  4203  0024DC  0100               	movlb	0	; () banked
  4204  0024DE  6F8C               	movwf	_Switch_Train_Path& (0+255),b
  4205                           
  4206                           ; BSR set to: 0
  4207                           
  4208                           ; BSR set to: 0
  4209                           
  4210                           ; BSR set to: 0
  4211                           
  4212                           ; BSR set to: 0
  4213  0024E0  D758               	goto	l385
  4214  0024E2                     
  4215                           ; BSR set to: 0
  4216                           
  4217                           ; BSR set to: 0
  4218  0024E2  0E00               	movlw	0
  4219  0024E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  4220  0024E6  0E1D               	movlw	29
  4221  0024E8  6E13               	movwf	GETxAPIxVAL@index,c
  4222  0024EA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4223  0024EE  0413               	decf	?_GETxAPIxVAL,w,c
  4224  0024F0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4225  0024F2  B4D8               	btfsc	status,2,c
  4226  0024F4  D069               	goto	u8230
  4227                           
  4228                           ;State_Mchn.c: 1117: else if(GETxAPIxVAL(41) == 1){
  4229                           
  4230                           ; BSR set to: 0
  4231                           
  4232                           ;State_Mchn.c: 1116: }
  4233                           
  4234                           ;State_Mchn.c: 1115: Switch_Train_Path = 4;
  4235  0024F6  0E00               	movlw	0
  4236  0024F8  6E14               	movwf	GETxAPIxVAL@index+1,c
  4237  0024FA  0E29               	movlw	41
  4238  0024FC  6E13               	movwf	GETxAPIxVAL@index,c
  4239  0024FE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4240  002502  0413               	decf	?_GETxAPIxVAL,w,c
  4241  002504  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4242  002506  A4D8               	btfss	status,2,c
  4243  002508  D002               	goto	l435
  4244  00250A                     u8140:
  4245                           
  4246                           ;State_Mchn.c: 1118: Switch_Train_Path = 5;
  4247  00250A  0E05               	movlw	5
  4248  00250C  D7E7               	goto	L29
  4249  00250E                     l435:
  4250                           
  4251                           ;State_Mchn.c: 1120: else if(GETxAPIxVAL(42) == 1){
  4252                           
  4253                           ; BSR set to: 0
  4254  00250E  0E00               	movlw	0
  4255  002510  6E14               	movwf	GETxAPIxVAL@index+1,c
  4256  002512  0E2A               	movlw	42
  4257  002514  6E13               	movwf	GETxAPIxVAL@index,c
  4258  002516  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4259  00251A  0413               	decf	?_GETxAPIxVAL,w,c
  4260  00251C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4261  00251E  A4D8               	btfss	status,2,c
  4262  002520  D002               	goto	l437
  4263  002522                     u8150:
  4264                           
  4265                           ;State_Mchn.c: 1121: Switch_Train_Path = 6;
  4266  002522  0E06               	movlw	6
  4267  002524  D7DB               	goto	L29
  4268  002526                     l437:
  4269                           
  4270                           ;State_Mchn.c: 1123: else if(GETxAPIxVAL(44) == 1){
  4271                           
  4272                           ; BSR set to: 0
  4273  002526  0E00               	movlw	0
  4274  002528  6E14               	movwf	GETxAPIxVAL@index+1,c
  4275  00252A  0E2C               	movlw	44
  4276  00252C  6E13               	movwf	GETxAPIxVAL@index,c
  4277  00252E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4278  002532  0413               	decf	?_GETxAPIxVAL,w,c
  4279  002534  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4280  002536  A4D8               	btfss	status,2,c
  4281  002538  D002               	goto	l439
  4282  00253A                     u8160:
  4283                           
  4284                           ;State_Mchn.c: 1124: Switch_Train_Path = 7;
  4285  00253A  0E07               	movlw	7
  4286  00253C  D7CF               	goto	L29
  4287  00253E                     l439:
  4288                           
  4289                           ;State_Mchn.c: 1126: else if(GETxAPIxVAL(43) == 1){
  4290                           
  4291                           ; BSR set to: 0
  4292  00253E  0E00               	movlw	0
  4293  002540  6E14               	movwf	GETxAPIxVAL@index+1,c
  4294  002542  0E2B               	movlw	43
  4295  002544  6E13               	movwf	GETxAPIxVAL@index,c
  4296  002546  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4297  00254A                     L96:
  4298  00254A  0413               	decf	?_GETxAPIxVAL,w,c
  4299  00254C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4300  00254E  A4D8               	btfss	status,2,c
  4301  002550  D720               	goto	l385
  4302                           
  4303                           ;State_Mchn.c: 1127: Switch_Train_Path = 8;
  4304  002552  0E08               	movlw	8
  4305  002554  D7C3               	goto	L29
  4306  002556                     
  4307                           ; BSR set to: 0
  4308                           
  4309                           ; BSR set to: 0
  4310  002556  0E00               	movlw	0
  4311  002558  6E14               	movwf	GETxAPIxVAL@index+1,c
  4312  00255A  0E1E               	movlw	30
  4313  00255C  6E13               	movwf	GETxAPIxVAL@index,c
  4314  00255E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4315  002562  0413               	decf	?_GETxAPIxVAL,w,c
  4316  002564  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4317  002566  B4D8               	btfsc	status,2,c
  4318  002568  D02F               	goto	u8230
  4319                           
  4320                           ;State_Mchn.c: 1135: else if(GETxAPIxVAL(41) == 1){
  4321                           
  4322                           ; BSR set to: 0
  4323                           
  4324                           ;State_Mchn.c: 1134: }
  4325                           
  4326                           ;State_Mchn.c: 1132: {
  4327                           ;State_Mchn.c: 1133: Switch_Train_Path = 4;
  4328  00256A  0E00               	movlw	0
  4329  00256C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4330  00256E  0E29               	movlw	41
  4331  002570  6E13               	movwf	GETxAPIxVAL@index,c
  4332  002572  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4333  002576  0413               	decf	?_GETxAPIxVAL,w,c
  4334  002578  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4335  00257A  B4D8               	btfsc	status,2,c
  4336  00257C  D031               	goto	u8240
  4337                           
  4338                           ;State_Mchn.c: 1138: else if(GETxAPIxVAL(42) == 1){
  4339                           
  4340                           ; BSR set to: 0
  4341                           
  4342                           ;State_Mchn.c: 1137: }
  4343                           
  4344                           ;State_Mchn.c: 1136: Switch_Train_Path = 12;
  4345  00257E  0E00               	movlw	0
  4346  002580  6E14               	movwf	GETxAPIxVAL@index+1,c
  4347  002582  0E2A               	movlw	42
  4348  002584  6E13               	movwf	GETxAPIxVAL@index,c
  4349  002586  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4350  00258A  0413               	decf	?_GETxAPIxVAL,w,c
  4351  00258C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4352  00258E  B4D8               	btfsc	status,2,c
  4353  002590  D033               	goto	u8250
  4354                           
  4355                           ;State_Mchn.c: 1141: else if(GETxAPIxVAL(44) == 1){
  4356                           
  4357                           ; BSR set to: 0
  4358                           
  4359                           ;State_Mchn.c: 1140: }
  4360                           
  4361                           ;State_Mchn.c: 1139: Switch_Train_Path = 11;
  4362  002592  0E00               	movlw	0
  4363  002594  6E14               	movwf	GETxAPIxVAL@index+1,c
  4364  002596  0E2C               	movlw	44
  4365  002598  6E13               	movwf	GETxAPIxVAL@index,c
  4366  00259A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4367  00259E  0413               	decf	?_GETxAPIxVAL,w,c
  4368  0025A0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4369  0025A2  B4D8               	btfsc	status,2,c
  4370  0025A4  D035               	goto	u8260
  4371                           
  4372                           ;State_Mchn.c: 1144: else if(GETxAPIxVAL(43) == 1){
  4373                           
  4374                           ; BSR set to: 0
  4375                           
  4376                           ;State_Mchn.c: 1143: }
  4377                           
  4378                           ;State_Mchn.c: 1142: Switch_Train_Path = 10;
  4379  0025A6  0E00               	movlw	0
  4380  0025A8  6E14               	movwf	GETxAPIxVAL@index+1,c
  4381  0025AA  0E2B               	movlw	43
  4382  0025AC  6E13               	movwf	GETxAPIxVAL@index,c
  4383  0025AE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4384  0025B2  D036               	goto	L97
  4385  0025B4                     
  4386                           ; BSR set to: 0
  4387                           
  4388                           ; BSR set to: 0
  4389  0025B4  0E00               	movlw	0
  4390  0025B6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4391  0025B8  0E1F               	movlw	31
  4392  0025BA  6E13               	movwf	GETxAPIxVAL@index,c
  4393  0025BC  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4394  0025C0  0413               	decf	?_GETxAPIxVAL,w,c
  4395  0025C2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4396  0025C4  A4D8               	btfss	status,2,c
  4397  0025C6  D002               	goto	l453
  4398  0025C8                     u8230:
  4399                           
  4400                           ;State_Mchn.c: 1150: {
  4401                           ;State_Mchn.c: 1151: Switch_Train_Path = 4;
  4402  0025C8  0E04               	movlw	4
  4403  0025CA  D788               	goto	L29
  4404  0025CC                     l453:
  4405                           
  4406                           ;State_Mchn.c: 1153: else if(GETxAPIxVAL(41) == 1){
  4407                           
  4408                           ; BSR set to: 0
  4409  0025CC  0E00               	movlw	0
  4410  0025CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4411  0025D0  0E29               	movlw	41
  4412  0025D2  6E13               	movwf	GETxAPIxVAL@index,c
  4413  0025D4  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4414  0025D8  0413               	decf	?_GETxAPIxVAL,w,c
  4415  0025DA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4416  0025DC  A4D8               	btfss	status,2,c
  4417  0025DE  D002               	goto	l455
  4418  0025E0                     u8240:
  4419                           
  4420                           ;State_Mchn.c: 1154: Switch_Train_Path = 12;
  4421  0025E0  0E0C               	movlw	12
  4422  0025E2  D77C               	goto	L29
  4423  0025E4                     l455:
  4424                           
  4425                           ;State_Mchn.c: 1156: else if(GETxAPIxVAL(42) == 1){
  4426                           
  4427                           ; BSR set to: 0
  4428  0025E4  0E00               	movlw	0
  4429  0025E6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4430  0025E8  0E2A               	movlw	42
  4431  0025EA  6E13               	movwf	GETxAPIxVAL@index,c
  4432  0025EC  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4433  0025F0  0413               	decf	?_GETxAPIxVAL,w,c
  4434  0025F2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4435  0025F4  A4D8               	btfss	status,2,c
  4436  0025F6  D002               	goto	l457
  4437  0025F8                     u8250:
  4438                           
  4439                           ;State_Mchn.c: 1157: Switch_Train_Path = 11;
  4440  0025F8  0E0B               	movlw	11
  4441  0025FA  D770               	goto	L29
  4442  0025FC                     l457:
  4443                           
  4444                           ;State_Mchn.c: 1159: else if(GETxAPIxVAL(44) == 1){
  4445                           
  4446                           ; BSR set to: 0
  4447  0025FC  0E00               	movlw	0
  4448  0025FE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4449  002600  0E2C               	movlw	44
  4450  002602  6E13               	movwf	GETxAPIxVAL@index,c
  4451  002604  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4452  002608  0413               	decf	?_GETxAPIxVAL,w,c
  4453  00260A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4454  00260C  A4D8               	btfss	status,2,c
  4455  00260E  D002               	goto	l459
  4456  002610                     u8260:
  4457                           
  4458                           ;State_Mchn.c: 1160: Switch_Train_Path = 10;
  4459  002610  0E0A               	movlw	10
  4460  002612  D764               	goto	L29
  4461  002614                     l459:
  4462                           
  4463                           ;State_Mchn.c: 1162: else if(GETxAPIxVAL(43) == 1){
  4464                           
  4465                           ; BSR set to: 0
  4466  002614  0E00               	movlw	0
  4467  002616  6E14               	movwf	GETxAPIxVAL@index+1,c
  4468  002618  0E2B               	movlw	43
  4469  00261A  6E13               	movwf	GETxAPIxVAL@index,c
  4470  00261C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4471  002620                     L97:
  4472  002620  0413               	decf	?_GETxAPIxVAL,w,c
  4473  002622  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4474  002624  A4D8               	btfss	status,2,c
  4475  002626  D6B5               	goto	l385
  4476                           
  4477                           ;State_Mchn.c: 1163: Switch_Train_Path = 9;
  4478  002628  0E09               	movlw	9
  4479  00262A  D758               	goto	L29
  4480  00262C                     
  4481                           ; BSR set to: 0
  4482                           
  4483                           ; BSR set to: 0
  4484  00262C  51D3               	movf	Train_Path@To& (0+255),w,b
  4485                           
  4486                           ; Switch size 1, requested type "space"
  4487                           ; Number of cases is 4, Range of values is 1 to 4
  4488                           ; switch strategies available:
  4489                           ; Name         Instructions Cycles
  4490                           ; simple_byte           13     7 (average)
  4491                           ;	Chosen strategy is simple_byte
  4492  00262E  0A01               	xorlw	1	; case 1
  4493  002630  B4D8               	btfsc	status,2,c
  4494  002632  D791               	goto	l442
  4495  002634  0A03               	xorlw	3	; case 2
  4496  002636  B4D8               	btfsc	status,2,c
  4497  002638  D7BD               	goto	l452
  4498  00263A  0A01               	xorlw	1	; case 3
  4499  00263C  B4D8               	btfsc	status,2,c
  4500  00263E  D71F               	goto	l421
  4501  002640  0A07               	xorlw	7	; case 4
  4502  002642  B4D8               	btfsc	status,2,c
  4503  002644  D74E               	goto	l432
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;State_Mchn.c: 1169: break;
  4507  002646  D073               	goto	l394
  4508  002648                     
  4509                           ; BSR set to: 0
  4510                           
  4511                           ; BSR set to: 0
  4512  002648  ECC6  F018         	call	_Train_Move_Right_Brake	;wreg free
  4513  00264C  D008               	goto	L98
  4514  00264E                     
  4515                           ; BSR set to: 0
  4516                           
  4517                           ; BSR set to: 0
  4518  00264E  ECC6  F018         	call	_Train_Move_Right_Brake	;wreg free
  4519  002652  D005               	goto	L98
  4520  002654                     
  4521                           ; BSR set to: 0
  4522                           
  4523                           ; BSR set to: 0
  4524  002654  EC23  F018         	call	_Train_Move_Left_Brake	;wreg free
  4525  002658  D002               	goto	L98
  4526  00265A                     
  4527                           ; BSR set to: 0
  4528                           
  4529                           ; BSR set to: 0
  4530  00265A  EC23  F018         	call	_Train_Move_Left_Brake	;wreg free
  4531  00265E                     L98:
  4532  00265E  0900               	iorlw	0
  4533  002660  A4D8               	btfss	status,2,c
  4534  002662  D697               	goto	l385
  4535                           
  4536                           ;State_Mchn.c: 1198: {
  4537                           ;State_Mchn.c: 1199: Switch_Train_Path = 0;
  4538  002664  0E00               	movlw	0
  4539  002666  0100               	movlb	0	; () banked
  4540  002668  6F8C               	movwf	_Switch_Train_Path& (0+255),b
  4541                           
  4542                           ;State_Mchn.c: 1200: Return_Val = 0;
  4543  00266A  0E00               	movlw	0
  4544  00266C  D694               	goto	L42
  4545  00266E                     
  4546                           ; BSR set to: 0
  4547                           
  4548                           ; BSR set to: 0
  4549  00266E  51D3               	movf	Train_Path@To& (0+255),w,b
  4550                           
  4551                           ; Switch size 1, requested type "space"
  4552                           ; Number of cases is 4, Range of values is 1 to 4
  4553                           ; switch strategies available:
  4554                           ; Name         Instructions Cycles
  4555                           ; simple_byte           13     7 (average)
  4556                           ;	Chosen strategy is simple_byte
  4557  002670  0A01               	xorlw	1	; case 1
  4558  002672  B4D8               	btfsc	status,2,c
  4559  002674  D7EF               	goto	l470
  4560  002676  0A03               	xorlw	3	; case 2
  4561  002678  B4D8               	btfsc	status,2,c
  4562  00267A  D7EF               	goto	l472
  4563  00267C  0A01               	xorlw	1	; case 3
  4564  00267E  B4D8               	btfsc	status,2,c
  4565  002680  D7E3               	goto	l465
  4566  002682  0A07               	xorlw	7	; case 4
  4567  002684  B4D8               	btfsc	status,2,c
  4568  002686  D7E3               	goto	l468
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;State_Mchn.c: 1207: break;
  4572  002688  D052               	goto	l394
  4573  00268A                     
  4574                           ; BSR set to: 0
  4575                           ;State_Mchn.c: 1210: if(Left_Mountain_From_The_Left(1) == 0){
  4576                           
  4577                           ; BSR set to: 0
  4578  00268A  0E01               	movlw	1
  4579  00268C  ECD0  F01C         	call	_Left_Mountain_From_The_Left
  4580  002690  D01B               	goto	L55
  4581  002692                     
  4582                           ; BSR set to: 0
  4583                           ;State_Mchn.c: 1217: if(Left_Mountain_From_The_Left(2) == 0){
  4584                           
  4585                           ; BSR set to: 0
  4586  002692  0E02               	movlw	2
  4587  002694  ECD0  F01C         	call	_Left_Mountain_From_The_Left
  4588  002698  D017               	goto	L55
  4589  00269A                     
  4590                           ; BSR set to: 0
  4591                           ;State_Mchn.c: 1224: if(Right_Mountain_From_The_Left(3) == 0){
  4592                           
  4593                           ; BSR set to: 0
  4594  00269A  0E03               	movlw	3
  4595  00269C  ECBC  F01B         	call	_Right_Mountain_From_The_Left
  4596  0026A0  D013               	goto	L55
  4597  0026A2                     
  4598                           ; BSR set to: 0
  4599                           ;State_Mchn.c: 1231: if(Right_Mountain_From_The_Left(4) == 0){
  4600                           
  4601                           ; BSR set to: 0
  4602  0026A2  0E04               	movlw	4
  4603  0026A4  ECBC  F01B         	call	_Right_Mountain_From_The_Left
  4604  0026A8  D00F               	goto	L55
  4605  0026AA                     
  4606                           ; BSR set to: 0
  4607                           ;State_Mchn.c: 1238: if(Right_Mountain_From_The_Right(4) == 0){
  4608                           
  4609                           ; BSR set to: 0
  4610  0026AA  0E04               	movlw	4
  4611  0026AC  EC32  F01B         	call	_Right_Mountain_From_The_Right
  4612  0026B0  D00B               	goto	L55
  4613  0026B2                     
  4614                           ; BSR set to: 0
  4615                           ;State_Mchn.c: 1245: if(Right_Mountain_From_The_Right(3) == 0){
  4616                           
  4617                           ; BSR set to: 0
  4618  0026B2  0E03               	movlw	3
  4619  0026B4  EC32  F01B         	call	_Right_Mountain_From_The_Right
  4620  0026B8  D007               	goto	L55
  4621  0026BA                     
  4622                           ; BSR set to: 0
  4623                           ;State_Mchn.c: 1252: if(Left_Mountain_From_The_Right(2) == 0){
  4624                           
  4625                           ; BSR set to: 0
  4626  0026BA  0E02               	movlw	2
  4627  0026BC  EC59  F01D         	call	_Left_Mountain_From_The_Right
  4628  0026C0  D003               	goto	L55
  4629  0026C2                     
  4630                           ; BSR set to: 0
  4631                           ;State_Mchn.c: 1259: if(Left_Mountain_From_The_Right(1) == 0){
  4632                           
  4633                           ; BSR set to: 0
  4634  0026C2  0E01               	movlw	1
  4635  0026C4  EC59  F01D         	call	_Left_Mountain_From_The_Right
  4636  0026C8                     L55:
  4637  0026C8  0900               	iorlw	0
  4638  0026CA  A4D8               	btfss	status,2,c
  4639  0026CC  D662               	goto	l385
  4640                           
  4641                           ;State_Mchn.c: 1260: Switch_Train_Path = 3;
  4642  0026CE  0E03               	movlw	3
  4643  0026D0  D705               	goto	L29
  4644  0026D2                     
  4645                           ; BSR set to: 0
  4646                           
  4647                           ; BSR set to: 0
  4648  0026D2  0E00               	movlw	0
  4649  0026D4  6F8C               	movwf	_Switch_Train_Path& (0+255),b
  4650  0026D6  0E01               	movlw	1
  4651  0026D8  D65E               	goto	L42
  4652  0026DA                     l381:
  4653                           
  4654                           ; BSR set to: 0
  4655  0026DA  0100               	movlb	0	; () banked
  4656  0026DC  518C               	movf	_Switch_Train_Path& (0+255),w,b
  4657                           
  4658                           ; Switch size 1, requested type "space"
  4659                           ; Number of cases is 13, Range of values is 0 to 12
  4660                           ; switch strategies available:
  4661                           ; Name         Instructions Cycles
  4662                           ; simple_byte           40    21 (average)
  4663                           ;	Chosen strategy is simple_byte
  4664  0026DE  0A00               	xorlw	0	; case 0
  4665  0026E0  B4D8               	btfsc	status,2,c
  4666  0026E2  D671               	goto	l383
  4667  0026E4  0A01               	xorlw	1	; case 1
  4668  0026E6  B4D8               	btfsc	status,2,c
  4669  0026E8  D69E               	goto	l396
  4670  0026EA  0A03               	xorlw	3	; case 2
  4671  0026EC  B4D8               	btfsc	status,2,c
  4672  0026EE  D6B9               	goto	l408
  4673  0026F0  0A01               	xorlw	1	; case 3
  4674  0026F2  B4D8               	btfsc	status,2,c
  4675  0026F4  D79B               	goto	l420
  4676  0026F6  0A07               	xorlw	7	; case 4
  4677  0026F8  B4D8               	btfsc	status,2,c
  4678  0026FA  D7B9               	goto	l464
  4679  0026FC  0A01               	xorlw	1	; case 5
  4680  0026FE  B4D8               	btfsc	status,2,c
  4681  002700  D7C4               	goto	l475
  4682  002702  0A03               	xorlw	3	; case 6
  4683  002704  B4D8               	btfsc	status,2,c
  4684  002706  D7C5               	goto	l477
  4685  002708  0A01               	xorlw	1	; case 7
  4686  00270A  B4D8               	btfsc	status,2,c
  4687  00270C  D7C6               	goto	l479
  4688  00270E  0A0F               	xorlw	15	; case 8
  4689  002710  B4D8               	btfsc	status,2,c
  4690  002712  D7C7               	goto	l481
  4691  002714  0A01               	xorlw	1	; case 9
  4692  002716  B4D8               	btfsc	status,2,c
  4693  002718  D7C8               	goto	l483
  4694  00271A  0A03               	xorlw	3	; case 10
  4695  00271C  B4D8               	btfsc	status,2,c
  4696  00271E  D7C9               	goto	l485
  4697  002720  0A01               	xorlw	1	; case 11
  4698  002722  B4D8               	btfsc	status,2,c
  4699  002724  D7CA               	goto	l487
  4700  002726  0A07               	xorlw	7	; case 12
  4701  002728  B4D8               	btfsc	status,2,c
  4702  00272A  D7CB               	goto	l489
  4703  00272C  D7D2               	goto	l491
  4704  00272E                     l394:
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;State_Mchn.c: 1268: return(Return_Val);
  4708                           
  4709                           ; BSR set to: 0
  4710  00272E  51E8               	movf	Train_Path@Return_Val& (0+255),w,b
  4711  002730  0012               	return	
  4712  002732                     __end_of_Train_Path:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           postinc0	equ	0xFEE
  4719                           wreg	equ	0xFE8
  4720                           postdec1	equ	0xFE5
  4721                           fsr1l	equ	0xFE1
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function _Train_Move_Right_Start *****************
  4725 ;; Defined at:
  4726 ;;		line 27 in file "../train_move_right.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;		None
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      unsigned char 
  4733 ;; Registers used:
  4734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4740 ;;      Params:         0       0       0       0       0       0       0       0       0
  4741 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4742 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4743 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4744 ;;Total ram usage:        2 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    6
  4747 ;; This function calls:
  4748 ;;		_GETxAPIxVAL
  4749 ;;		_SETxAPIxVAL
  4750 ;;		_SETxPWM
  4751 ;; This function is called by:
  4752 ;;		_Train_Path
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           	psect	text3
  4757  003404                     __ptext3:
  4758                           	opt stack 0
  4759  003404                     _Train_Move_Right_Start:
  4760                           	opt stack 22
  4761                           
  4762                           ;train_move_right.c: 29: static char Return_Val = 1;
  4763                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4764                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;incstack = 0
  4768  003404  D08A               	goto	l1184
  4769  003406  0E00               	movlw	0
  4770  003408  6E14               	movwf	GETxAPIxVAL@index+1,c
  4771  00340A  0E14               	movlw	20
  4772  00340C  6E13               	movwf	GETxAPIxVAL@index,c
  4773  00340E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4774  003412  5013               	movf	?_GETxAPIxVAL,w,c
  4775  003414  0100               	movlb	0	; () banked
  4776  003416  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4777  003418  5014               	movf	?_GETxAPIxVAL+1,w,c
  4778  00341A  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4779  00341C  A0D8               	btfss	status,0,c
  4780  00341E  D002               	goto	l1186
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;train_move_right.c: 37: {
  4784                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4785  003420  0E01               	movlw	1
  4786  003422  D03D               	goto	L63
  4787  003424                     l1186:
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;train_move_right.c: 42: }
  4791                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4792                           
  4793                           ; BSR set to: 0
  4794  003424  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4795  003426  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4799  003428  0E00               	movlw	0
  4800  00342A  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4801  00342C  D073               	goto	L64
  4802  00342E                     
  4803                           ; BSR set to: 0
  4804                           
  4805                           ; BSR set to: 0
  4806  00342E  0E00               	movlw	0
  4807  003430  6E14               	movwf	GETxAPIxVAL@index+1,c
  4808  003432  0E16               	movlw	22
  4809  003434  6E13               	movwf	GETxAPIxVAL@index,c
  4810  003436  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4811  00343A  C013  F0D1         	movff	?_GETxAPIxVAL,_Train_Move_Right_Start$2190
  4812  00343E  C014  F0D2         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Start$2190+1
  4813  003442  C0D1  F01F         	movff	_Train_Move_Right_Start$2190,SETxPWM@speed
  4814  003446  C0D2  F020         	movff	_Train_Move_Right_Start$2190+1,SETxPWM@speed+1
  4815  00344A  0E01               	movlw	1
  4816  00344C  6E21               	movwf	SETxPWM@direction,c
  4817  00344E  EC21  F01F         	call	_SETxPWM	;wreg free
  4818                           
  4819                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4820  003452  0E00               	movlw	0
  4821  003454  6E14               	movwf	GETxAPIxVAL@index+1,c
  4822  003456  0E16               	movlw	22
  4823  003458  6E13               	movwf	GETxAPIxVAL@index,c
  4824  00345A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4825  00345E  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4826  003462  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4827                           
  4828                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4829  003466  0E00               	movlw	0
  4830  003468  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4831  00346A  0E45               	movlw	69
  4832  00346C  6E19               	movwf	SETxAPIxVAL@index,c
  4833  00346E  0E00               	movlw	0
  4834  003470  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4835  003472  0E00               	movlw	0
  4836  003474  6E1B               	movwf	SETxAPIxVAL@value,c
  4837  003476  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  4838                           
  4839                           ;train_move_right.c: 51: Return_Val = 1;
  4840  00347A  0E01               	movlw	1
  4841  00347C  0100               	movlb	0	; () banked
  4842  00347E  6FE5               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4843  003480  D018               	goto	l7762
  4844  003482                     
  4845                           ; BSR set to: 0
  4846                           
  4847                           ; BSR set to: 0
  4848  003482  0E00               	movlw	0
  4849  003484  6E14               	movwf	GETxAPIxVAL@index+1,c
  4850  003486  0E12               	movlw	18
  4851  003488  6E13               	movwf	GETxAPIxVAL@index,c
  4852  00348A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4853  00348E  5013               	movf	?_GETxAPIxVAL,w,c
  4854  003490  0100               	movlb	0	; () banked
  4855  003492  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4856  003494  5014               	movf	?_GETxAPIxVAL+1,w,c
  4857  003496  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4858  003498  A0D8               	btfss	status,0,c
  4859  00349A  D007               	goto	l1190
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;train_move_right.c: 56: {
  4863                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4864  00349C  0E03               	movlw	3
  4865  00349E                     L63:
  4866  00349E  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4867                           
  4868                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4869  0034A0  0E00               	movlw	0
  4870  0034A2  6F63               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4871  0034A4  0E00               	movlw	0
  4872  0034A6  6F62               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4873  0034A8  D035               	goto	L64
  4874  0034AA                     l1190:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;train_move_right.c: 61: }
  4878                           ;train_move_right.c: 62: Return_Val = 1;
  4879                           
  4880                           ; BSR set to: 0
  4881  0034AA  0E01               	movlw	1
  4882  0034AC  6FE5               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4886  0034AE  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4887  0034B0  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4888  0034B2                     l7762:
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4892  0034B2  0E02               	movlw	2
  4893  0034B4  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4894                           
  4895                           ;train_move_right.c: 65: break;
  4896  0034B6  D03F               	goto	l1187
  4897  0034B8                     
  4898                           ; BSR set to: 0
  4899                           
  4900                           ; BSR set to: 0
  4901  0034B8  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4902  0034BC  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4903  0034C0  0E01               	movlw	1
  4904  0034C2  6E21               	movwf	SETxPWM@direction,c
  4905  0034C4  EC21  F01F         	call	_SETxPWM	;wreg free
  4906                           
  4907                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4908  0034C8  0E00               	movlw	0
  4909  0034CA  6E14               	movwf	GETxAPIxVAL@index+1,c
  4910  0034CC  0E17               	movlw	23
  4911  0034CE  6E13               	movwf	GETxAPIxVAL@index,c
  4912  0034D0  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4913  0034D4  5013               	movf	?_GETxAPIxVAL,w,c
  4914  0034D6  0100               	movlb	0	; () banked
  4915  0034D8  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4916  0034DA  5014               	movf	?_GETxAPIxVAL+1,w,c
  4917  0034DC  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4918  0034DE  A0D8               	btfss	status,0,c
  4919  0034E0  D004               	goto	l1192
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;train_move_right.c: 69: {
  4923                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4924  0034E2  0E00               	movlw	0
  4925  0034E4  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4926                           
  4927                           ;train_move_right.c: 71: Return_Val = 0;
  4928  0034E6  0E00               	movlw	0
  4929  0034E8  D016               	goto	L62
  4930  0034EA                     l1192:
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;train_move_right.c: 73: }
  4934                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4935                           
  4936                           ; BSR set to: 0
  4937  0034EA  0E00               	movlw	0
  4938  0034EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4939  0034EE  0E1A               	movlw	26
  4940  0034F0  6E13               	movwf	GETxAPIxVAL@index,c
  4941  0034F2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  4942  0034F6  5013               	movf	?_GETxAPIxVAL,w,c
  4943  0034F8  0100               	movlb	0	; () banked
  4944  0034FA  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4945  0034FC  5014               	movf	?_GETxAPIxVAL+1,w,c
  4946  0034FE  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4947  003500  A0D8               	btfss	status,0,c
  4948  003502  D006               	goto	l1193
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;train_move_right.c: 75: {
  4952                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4953  003504  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4954  003506  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4958  003508  0E00               	movlw	0
  4959  00350A  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4960  00350C  0E00               	movlw	0
  4961  00350E  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4962  003510                     l1193:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;train_move_right.c: 78: }
  4966                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4967                           
  4968                           ; BSR set to: 0
  4969  003510  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4970  003512  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4971  003514                     L64:
  4972                           
  4973                           ;train_move_right.c: 80: Return_Val = 1;
  4974  003514  0E01               	movlw	1
  4975  003516                     L62:
  4976  003516  6FE5               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;train_move_right.c: 84: }
  4980                           
  4981                           ; BSR set to: 0
  4982                           
  4983                           ;train_move_right.c: 83: default : break;
  4984                           
  4985                           ;train_move_right.c: 81: break;
  4986  003518  D00E               	goto	l1187
  4987  00351A                     l1184:
  4988                           
  4989                           ; BSR set to: 0
  4990  00351A  0100               	movlb	0	; () banked
  4991  00351C  5184               	movf	_Switch_Train_Move& (0+255),w,b
  4992                           
  4993                           ; Switch size 1, requested type "space"
  4994                           ; Number of cases is 4, Range of values is 0 to 3
  4995                           ; switch strategies available:
  4996                           ; Name         Instructions Cycles
  4997                           ; simple_byte           13     7 (average)
  4998                           ;	Chosen strategy is simple_byte
  4999  00351E  0A00               	xorlw	0	; case 0
  5000  003520  B4D8               	btfsc	status,2,c
  5001  003522  D771               	goto	l1185
  5002  003524  0A01               	xorlw	1	; case 1
  5003  003526  B4D8               	btfsc	status,2,c
  5004  003528  D782               	goto	l1188
  5005  00352A  0A03               	xorlw	3	; case 2
  5006  00352C  B4D8               	btfsc	status,2,c
  5007  00352E  D7A9               	goto	l1189
  5008  003530  0A01               	xorlw	1	; case 3
  5009  003532  B4D8               	btfsc	status,2,c
  5010  003534  D7C1               	goto	l1191
  5011  003536                     l1187:
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;train_move_right.c: 86: return(Return_Val);
  5015                           
  5016                           ; BSR set to: 0
  5017  003536  51E5               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  5018  003538  0012               	return	
  5019  00353A                     __end_of_Train_Move_Right_Start:
  5020                           	opt stack 0
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           postinc0	equ	0xFEE
  5026                           wreg	equ	0xFE8
  5027                           postdec1	equ	0xFE5
  5028                           fsr1l	equ	0xFE1
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _Train_Move_Right_Brake *****************
  5032 ;; Defined at:
  5033 ;;		line 254 in file "../train_move_right.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;		None
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      unsigned char 
  5040 ;; Registers used:
  5041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5047 ;;      Params:         0       0       0       0       0       0       0       0       0
  5048 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5050 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5051 ;;Total ram usage:        2 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    6
  5054 ;; This function calls:
  5055 ;;		_GETxAPIxVAL
  5056 ;;		_SETxAPIxVAL
  5057 ;;		_SETxPWM
  5058 ;; This function is called by:
  5059 ;;		_Train_Path
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text4
  5064  00318C                     __ptext4:
  5065                           	opt stack 0
  5066  00318C                     _Train_Move_Right_Brake:
  5067                           	opt stack 22
  5068                           
  5069                           ;train_move_right.c: 256: static char Return_Val = 1;
  5070                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5071                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;incstack = 0
  5075  00318C  D08F               	goto	l1252
  5076  00318E  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5077  003192  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5078  003196  0E01               	movlw	1
  5079  003198  6E21               	movwf	SETxPWM@direction,c
  5080  00319A  EC21  F01F         	call	_SETxPWM	;wreg free
  5081                           
  5082                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  5083  00319E  0E00               	movlw	0
  5084  0031A0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5085  0031A2  0E16               	movlw	22
  5086  0031A4  6E13               	movwf	GETxAPIxVAL@index,c
  5087  0031A6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5088  0031AA  0100               	movlb	0	; () banked
  5089  0031AC  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5090  0031AE  5C13               	subwf	?_GETxAPIxVAL,w,c
  5091  0031B0  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5092  0031B2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5093  0031B4  A0D8               	btfss	status,0,c
  5094  0031B6  D002               	goto	l1254
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;train_move_right.c: 263: {
  5098                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  5099  0031B8  0E01               	movlw	1
  5100  0031BA  D074               	goto	L69
  5101  0031BC                     l1254:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;train_move_right.c: 267: }
  5105                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5106                           
  5107                           ; BSR set to: 0
  5108  0031BC  0E00               	movlw	0
  5109  0031BE  6E14               	movwf	GETxAPIxVAL@index+1,c
  5110  0031C0  0E19               	movlw	25
  5111  0031C2  6E13               	movwf	GETxAPIxVAL@index,c
  5112  0031C4  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5113  0031C8  5013               	movf	?_GETxAPIxVAL,w,c
  5114  0031CA  0100               	movlb	0	; () banked
  5115  0031CC  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5116  0031CE  5014               	movf	?_GETxAPIxVAL+1,w,c
  5117  0031D0  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5118  0031D2  A0D8               	btfss	status,0,c
  5119  0031D4  D008               	goto	l1256
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;train_move_right.c: 269: {
  5123                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  5124  0031D6  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5125  0031D8  A0D8               	btfss	status,0,c
  5126  0031DA  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  5130  0031DC  0E00               	movlw	0
  5131  0031DE  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5132  0031E0  0E00               	movlw	0
  5133  0031E2  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5134                           
  5135                           ;train_move_right.c: 272: }
  5136  0031E4  D060               	goto	l7878
  5137  0031E6                     l1256:
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  5141                           
  5142                           ; BSR set to: 0
  5143  0031E6  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5144  0031E8  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5145                           
  5146                           ; BSR set to: 0
  5147  0031EA  D05D               	goto	l7878
  5148  0031EC                     
  5149                           ; BSR set to: 0
  5150                           
  5151                           ; BSR set to: 0
  5152  0031EC  0E00               	movlw	0
  5153  0031EE  6E14               	movwf	GETxAPIxVAL@index+1,c
  5154  0031F0  0E12               	movlw	18
  5155  0031F2  6E13               	movwf	GETxAPIxVAL@index,c
  5156  0031F4  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5157  0031F8  5013               	movf	?_GETxAPIxVAL,w,c
  5158  0031FA  0100               	movlb	0	; () banked
  5159  0031FC  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5160  0031FE  5014               	movf	?_GETxAPIxVAL+1,w,c
  5161  003200  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5162  003202  A0D8               	btfss	status,0,c
  5163  003204  D007               	goto	l1259
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;train_move_right.c: 278: {
  5167                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  5168  003206  0E02               	movlw	2
  5169  003208  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5170                           
  5171                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  5172  00320A  0E00               	movlw	0
  5173  00320C  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5174  00320E  0E00               	movlw	0
  5175  003210  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5176  003212  D049               	goto	l7878
  5177  003214                     l1259:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;train_move_right.c: 283: }
  5181                           ;train_move_right.c: 284: Return_Val = 1;
  5182                           
  5183                           ; BSR set to: 0
  5184  003214  0E01               	movlw	1
  5185  003216  6FE4               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  5189  003218  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5190  00321A  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  5194  00321C  0E01               	movlw	1
  5195  00321E  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5196                           
  5197                           ;train_move_right.c: 287: break;
  5198  003220  D053               	goto	l1255
  5199  003222                     
  5200                           ; BSR set to: 0
  5201                           
  5202                           ; BSR set to: 0
  5203  003222  0E00               	movlw	0
  5204  003224  6E14               	movwf	GETxAPIxVAL@index+1,c
  5205  003226  0E16               	movlw	22
  5206  003228  6E13               	movwf	GETxAPIxVAL@index,c
  5207  00322A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5208  00322E  C013  F0D1         	movff	?_GETxAPIxVAL,_Train_Move_Right_Brake$2191
  5209  003232  C014  F0D2         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Brake$2191+1
  5210  003236  C0D1  F01F         	movff	_Train_Move_Right_Brake$2191,SETxPWM@speed
  5211  00323A  C0D2  F020         	movff	_Train_Move_Right_Brake$2191+1,SETxPWM@speed+1
  5212  00323E  0E01               	movlw	1
  5213  003240  6E21               	movwf	SETxPWM@direction,c
  5214  003242  EC21  F01F         	call	_SETxPWM	;wreg free
  5215                           
  5216                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  5217  003246  0E00               	movlw	0
  5218  003248  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5219  00324A  0E45               	movlw	69
  5220  00324C  6E19               	movwf	SETxAPIxVAL@index,c
  5221  00324E  0E00               	movlw	0
  5222  003250  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5223  003252  0E01               	movlw	1
  5224  003254  6E1B               	movwf	SETxAPIxVAL@value,c
  5225  003256  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  5226                           
  5227                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  5228  00325A  0E00               	movlw	0
  5229  00325C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5230  00325E  0E16               	movlw	22
  5231  003260  6E13               	movwf	GETxAPIxVAL@index,c
  5232  003262  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5233  003266  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5234  00326A  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5235                           
  5236                           ;train_move_right.c: 292: Switch_Train_Move = 3;
  5237  00326E  0E03               	movlw	3
  5238  003270  0100               	movlb	0	; () banked
  5239  003272  D018               	goto	L69
  5240  003274                     
  5241                           ; BSR set to: 0
  5242                           
  5243                           ; BSR set to: 0
  5244  003274  0E00               	movlw	0
  5245  003276  6E14               	movwf	GETxAPIxVAL@index+1,c
  5246  003278  0E14               	movlw	20
  5247  00327A  6E13               	movwf	GETxAPIxVAL@index,c
  5248  00327C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5249  003280  5013               	movf	?_GETxAPIxVAL,w,c
  5250  003282  0100               	movlb	0	; () banked
  5251  003284  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5252  003286  5014               	movf	?_GETxAPIxVAL+1,w,c
  5253  003288  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5254  00328A  A0D8               	btfss	status,0,c
  5255  00328C  D008               	goto	l1262
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;train_move_right.c: 297: {
  5259                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5260  00328E  0E00               	movlw	0
  5261  003290  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5262                           
  5263                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5264  003292  0E00               	movlw	0
  5265  003294  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5266  003296  0E00               	movlw	0
  5267  003298  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5268                           
  5269                           ;train_move_right.c: 300: Return_Val = 0;
  5270  00329A  0E00               	movlw	0
  5271  00329C  D005               	goto	L67
  5272  00329E                     l1262:
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;train_move_right.c: 302: }
  5276                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5277                           
  5278                           ; BSR set to: 0
  5279  00329E  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5280  0032A0  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5284  0032A2  0E03               	movlw	3
  5285  0032A4                     L69:
  5286  0032A4  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5287  0032A6                     l7878:
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;train_move_right.c: 305: Return_Val = 1;
  5291  0032A6  0E01               	movlw	1
  5292  0032A8                     L67:
  5293  0032A8  6FE4               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;train_move_right.c: 309: }
  5297                           
  5298                           ; BSR set to: 0
  5299                           
  5300                           ;train_move_right.c: 308: default : break;
  5301                           
  5302                           ;train_move_right.c: 306: break;
  5303  0032AA  D00E               	goto	l1255
  5304  0032AC                     l1252:
  5305                           
  5306                           ; BSR set to: 0
  5307  0032AC  0100               	movlb	0	; () banked
  5308  0032AE  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5309                           
  5310                           ; Switch size 1, requested type "space"
  5311                           ; Number of cases is 4, Range of values is 0 to 3
  5312                           ; switch strategies available:
  5313                           ; Name         Instructions Cycles
  5314                           ; simple_byte           13     7 (average)
  5315                           ;	Chosen strategy is simple_byte
  5316  0032B0  0A00               	xorlw	0	; case 0
  5317  0032B2  B4D8               	btfsc	status,2,c
  5318  0032B4  D76C               	goto	l1253
  5319  0032B6  0A01               	xorlw	1	; case 1
  5320  0032B8  B4D8               	btfsc	status,2,c
  5321  0032BA  D798               	goto	l1258
  5322  0032BC  0A03               	xorlw	3	; case 2
  5323  0032BE  B4D8               	btfsc	status,2,c
  5324  0032C0  D7B0               	goto	l1260
  5325  0032C2  0A01               	xorlw	1	; case 3
  5326  0032C4  B4D8               	btfsc	status,2,c
  5327  0032C6  D7D6               	goto	l1261
  5328  0032C8                     l1255:
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;train_move_right.c: 311: return(Return_Val);
  5332                           
  5333                           ; BSR set to: 0
  5334  0032C8  51E4               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5335  0032CA  0012               	return	
  5336  0032CC                     __end_of_Train_Move_Right_Brake:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           postinc0	equ	0xFEE
  5343                           wreg	equ	0xFE8
  5344                           postdec1	equ	0xFE5
  5345                           fsr1l	equ	0xFE1
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function _Train_Move_Left_Start *****************
  5349 ;; Defined at:
  5350 ;;		line 27 in file "../train_move_left.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;		None
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;		None
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  1    wreg      unsigned char 
  5357 ;; Registers used:
  5358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5364 ;;      Params:         0       0       0       0       0       0       0       0       0
  5365 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5367 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5368 ;;Total ram usage:        2 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    6
  5371 ;; This function calls:
  5372 ;;		_GETxAPIxVAL
  5373 ;;		_SETxAPIxVAL
  5374 ;;		_SETxPWM
  5375 ;; This function is called by:
  5376 ;;		_Train_Path
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text5
  5381  0032CC                     __ptext5:
  5382                           	opt stack 0
  5383  0032CC                     _Train_Move_Left_Start:
  5384                           	opt stack 22
  5385                           
  5386                           ;train_move_left.c: 29: static char Return_Val = 1;
  5387                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5388                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;incstack = 0
  5392  0032CC  D08B               	goto	l1079
  5393  0032CE  0E00               	movlw	0
  5394  0032D0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5395  0032D2  0E14               	movlw	20
  5396  0032D4  6E13               	movwf	GETxAPIxVAL@index,c
  5397  0032D6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5398  0032DA  5013               	movf	?_GETxAPIxVAL,w,c
  5399  0032DC  0100               	movlb	0	; () banked
  5400  0032DE  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5401  0032E0  5014               	movf	?_GETxAPIxVAL+1,w,c
  5402  0032E2  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5403  0032E4  A0D8               	btfss	status,0,c
  5404  0032E6  D002               	goto	l1081
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;train_move_left.c: 37: {
  5408                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5409  0032E8  0E01               	movlw	1
  5410  0032EA  D03E               	goto	L72
  5411  0032EC                     l1081:
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;train_move_left.c: 42: }
  5415                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5416                           
  5417                           ; BSR set to: 0
  5418  0032EC  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5419  0032EE  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5423  0032F0  0E00               	movlw	0
  5424  0032F2  D043               	goto	L73
  5425  0032F4                     l7794:
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;train_move_left.c: 45: Return_Val = 1;
  5429  0032F4  0E01               	movlw	1
  5430  0032F6  6FE7               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5431                           
  5432                           ;train_move_left.c: 46: break;
  5433  0032F8  D083               	goto	l1082
  5434  0032FA                     
  5435                           ; BSR set to: 0
  5436                           
  5437                           ; BSR set to: 0
  5438  0032FA  0E00               	movlw	0
  5439  0032FC  6E14               	movwf	GETxAPIxVAL@index+1,c
  5440  0032FE  0E15               	movlw	21
  5441  003300  6E13               	movwf	GETxAPIxVAL@index,c
  5442  003302  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5443  003306  C013  F0D1         	movff	?_GETxAPIxVAL,_Train_Move_Left_Start$2188
  5444  00330A  C014  F0D2         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Start$2188+1
  5445  00330E  C0D1  F01F         	movff	_Train_Move_Left_Start$2188,SETxPWM@speed
  5446  003312  C0D2  F020         	movff	_Train_Move_Left_Start$2188+1,SETxPWM@speed+1
  5447  003316  0E00               	movlw	0
  5448  003318  6E21               	movwf	SETxPWM@direction,c
  5449  00331A  EC21  F01F         	call	_SETxPWM	;wreg free
  5450                           
  5451                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5452  00331E  0E00               	movlw	0
  5453  003320  6E14               	movwf	GETxAPIxVAL@index+1,c
  5454  003322  0E15               	movlw	21
  5455  003324  6E13               	movwf	GETxAPIxVAL@index,c
  5456  003326  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5457  00332A  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5458  00332E  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5459                           
  5460                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  5461  003332  0E00               	movlw	0
  5462  003334  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5463  003336  0E45               	movlw	69
  5464  003338  6E19               	movwf	SETxAPIxVAL@index,c
  5465  00333A  0E00               	movlw	0
  5466  00333C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5467  00333E  0E00               	movlw	0
  5468  003340  6E1B               	movwf	SETxAPIxVAL@value,c
  5469  003342  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  5470                           
  5471                           ;train_move_left.c: 51: Switch_Train_Move = 2;
  5472  003346  0E02               	movlw	2
  5473  003348  0100               	movlb	0	; () banked
  5474  00334A  D017               	goto	L73
  5475  00334C                     
  5476                           ; BSR set to: 0
  5477                           
  5478                           ; BSR set to: 0
  5479  00334C  0E00               	movlw	0
  5480  00334E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5481  003350  0E12               	movlw	18
  5482  003352  6E13               	movwf	GETxAPIxVAL@index,c
  5483  003354  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5484  003358  5013               	movf	?_GETxAPIxVAL,w,c
  5485  00335A  0100               	movlb	0	; () banked
  5486  00335C  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5487  00335E  5014               	movf	?_GETxAPIxVAL+1,w,c
  5488  003360  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5489  003362  A0D8               	btfss	status,0,c
  5490  003364  D007               	goto	l1085
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;train_move_left.c: 56: {
  5494                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5495  003366  0E03               	movlw	3
  5496  003368                     L72:
  5497  003368  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5498                           
  5499                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5500  00336A  0E00               	movlw	0
  5501  00336C  6F67               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5502  00336E  0E00               	movlw	0
  5503  003370  6F66               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5504  003372  D7C0               	goto	l7794
  5505  003374                     l1085:
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;train_move_left.c: 61: }
  5509                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5510                           
  5511                           ; BSR set to: 0
  5512  003374  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5513  003376  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5517  003378  0E02               	movlw	2
  5518  00337A                     L73:
  5519  00337A  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5520  00337C  D7BB               	goto	l7794
  5521  00337E                     
  5522                           ; BSR set to: 0
  5523                           
  5524                           ; BSR set to: 0
  5525  00337E  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5526  003382  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5527  003386  0E00               	movlw	0
  5528  003388  6E21               	movwf	SETxPWM@direction,c
  5529  00338A  EC21  F01F         	call	_SETxPWM	;wreg free
  5530                           
  5531                           ;train_move_left.c: 68: Return_Val = 1;
  5532  00338E  0E01               	movlw	1
  5533  003390  0100               	movlb	0	; () banked
  5534  003392  6FE7               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5538  003394  0E00               	movlw	0
  5539  003396  6E14               	movwf	GETxAPIxVAL@index+1,c
  5540  003398  0E18               	movlw	24
  5541  00339A  6E13               	movwf	GETxAPIxVAL@index,c
  5542  00339C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5543  0033A0  5013               	movf	?_GETxAPIxVAL,w,c
  5544  0033A2  0100               	movlb	0	; () banked
  5545  0033A4  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5546  0033A6  5014               	movf	?_GETxAPIxVAL+1,w,c
  5547  0033A8  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5548  0033AA  A0D8               	btfss	status,0,c
  5549  0033AC  D004               	goto	l1087
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;train_move_left.c: 70: {
  5553                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5554  0033AE  0E00               	movlw	0
  5555  0033B0  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5556                           
  5557                           ;train_move_left.c: 72: Return_Val = 0;
  5558  0033B2  0E00               	movlw	0
  5559  0033B4  D7A0               	goto	L71
  5560  0033B6                     l1087:
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5564                           
  5565                           ; BSR set to: 0
  5566  0033B6  0E00               	movlw	0
  5567  0033B8  6E14               	movwf	GETxAPIxVAL@index+1,c
  5568  0033BA  0E1A               	movlw	26
  5569  0033BC  6E13               	movwf	GETxAPIxVAL@index,c
  5570  0033BE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5571  0033C2  5013               	movf	?_GETxAPIxVAL,w,c
  5572  0033C4  0100               	movlb	0	; () banked
  5573  0033C6  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5574  0033C8  5014               	movf	?_GETxAPIxVAL+1,w,c
  5575  0033CA  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5576  0033CC  A0D8               	btfss	status,0,c
  5577  0033CE  D007               	goto	l1089
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;train_move_left.c: 76: {
  5581                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5582  0033D0  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5583  0033D2  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5587  0033D4  0E00               	movlw	0
  5588  0033D6  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5589  0033D8  0E00               	movlw	0
  5590  0033DA  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5591                           
  5592                           ;train_move_left.c: 79: }
  5593  0033DC  D011               	goto	l1082
  5594  0033DE                     l1089:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5598                           
  5599                           ; BSR set to: 0
  5600  0033DE  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5601  0033E0  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;train_move_left.c: 83: }
  5605                           
  5606                           ; BSR set to: 0
  5607                           
  5608                           ;train_move_left.c: 82: default : break;
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;train_move_left.c: 81: break;
  5612                           
  5613                           ; BSR set to: 0
  5614  0033E2  D00E               	goto	l1082
  5615  0033E4                     l1079:
  5616                           
  5617                           ; BSR set to: 0
  5618  0033E4  0100               	movlb	0	; () banked
  5619  0033E6  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5620                           
  5621                           ; Switch size 1, requested type "space"
  5622                           ; Number of cases is 4, Range of values is 0 to 3
  5623                           ; switch strategies available:
  5624                           ; Name         Instructions Cycles
  5625                           ; simple_byte           13     7 (average)
  5626                           ;	Chosen strategy is simple_byte
  5627  0033E8  0A00               	xorlw	0	; case 0
  5628  0033EA  B4D8               	btfsc	status,2,c
  5629  0033EC  D770               	goto	l1080
  5630  0033EE  0A01               	xorlw	1	; case 1
  5631  0033F0  B4D8               	btfsc	status,2,c
  5632  0033F2  D783               	goto	l1083
  5633  0033F4  0A03               	xorlw	3	; case 2
  5634  0033F6  B4D8               	btfsc	status,2,c
  5635  0033F8  D7A9               	goto	l1084
  5636  0033FA  0A01               	xorlw	1	; case 3
  5637  0033FC  B4D8               	btfsc	status,2,c
  5638  0033FE  D7BF               	goto	l1086
  5639  003400                     l1082:
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;train_move_left.c: 85: return(Return_Val);
  5643                           
  5644                           ; BSR set to: 0
  5645  003400  51E7               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5646  003402  0012               	return	
  5647  003404                     __end_of_Train_Move_Left_Start:
  5648                           	opt stack 0
  5649                           tblptru	equ	0xFF8
  5650                           tblptrh	equ	0xFF7
  5651                           tblptrl	equ	0xFF6
  5652                           tablat	equ	0xFF5
  5653                           postinc0	equ	0xFEE
  5654                           wreg	equ	0xFE8
  5655                           postdec1	equ	0xFE5
  5656                           fsr1l	equ	0xFE1
  5657                           status	equ	0xFD8
  5658                           
  5659 ;; *************** function _Train_Move_Left_Brake *****************
  5660 ;; Defined at:
  5661 ;;		line 256 in file "../train_move_left.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;		None
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;		None
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      unsigned char 
  5668 ;; Registers used:
  5669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5675 ;;      Params:         0       0       0       0       0       0       0       0       0
  5676 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5678 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5679 ;;Total ram usage:        2 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    6
  5682 ;; This function calls:
  5683 ;;		_GETxAPIxVAL
  5684 ;;		_SETxAPIxVAL
  5685 ;;		_SETxPWM
  5686 ;; This function is called by:
  5687 ;;		_Train_Path
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           	psect	text6
  5692  003046                     __ptext6:
  5693                           	opt stack 0
  5694  003046                     _Train_Move_Left_Brake:
  5695                           	opt stack 22
  5696                           
  5697                           ;train_move_left.c: 258: static char Return_Val = 1;
  5698                           ;train_move_left.c: 259: static unsigned int Train_Move_Wait_Time = 0;
  5699                           ;train_move_left.c: 261: switch(Switch_Train_Move)
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;incstack = 0
  5703  003046  D092               	goto	l1149
  5704  003048  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5705  00304C  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5706  003050  0E00               	movlw	0
  5707  003052  6E21               	movwf	SETxPWM@direction,c
  5708  003054  EC21  F01F         	call	_SETxPWM	;wreg free
  5709                           
  5710                           ;train_move_left.c: 264: Return_Val = 1;
  5711  003058  0E01               	movlw	1
  5712  00305A  0100               	movlb	0	; () banked
  5713  00305C  6FE6               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;train_move_left.c: 265: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5717  00305E  0E00               	movlw	0
  5718  003060  6E14               	movwf	GETxAPIxVAL@index+1,c
  5719  003062  0E15               	movlw	21
  5720  003064  6E13               	movwf	GETxAPIxVAL@index,c
  5721  003066  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5722  00306A  0100               	movlb	0	; () banked
  5723  00306C  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5724  00306E  5C13               	subwf	?_GETxAPIxVAL,w,c
  5725  003070  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5726  003072  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5727  003074  A0D8               	btfss	status,0,c
  5728  003076  D002               	goto	l1151
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;train_move_left.c: 266: {
  5732                           ;train_move_left.c: 267: Switch_Train_Move = 1;
  5733  003078  0E01               	movlw	1
  5734  00307A  D074               	goto	L99
  5735  00307C                     l1151:
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;train_move_left.c: 270: }
  5739                           ;train_move_left.c: 271: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5740                           
  5741                           ; BSR set to: 0
  5742  00307C  0E00               	movlw	0
  5743  00307E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5744  003080  0E19               	movlw	25
  5745  003082  6E13               	movwf	GETxAPIxVAL@index,c
  5746  003084  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5747  003088  5013               	movf	?_GETxAPIxVAL,w,c
  5748  00308A  0100               	movlb	0	; () banked
  5749  00308C  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5750  00308E  5014               	movf	?_GETxAPIxVAL+1,w,c
  5751  003090  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5752  003092  A0D8               	btfss	status,0,c
  5753  003094  D008               	goto	l1153
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;train_move_left.c: 272: {
  5757                           ;train_move_left.c: 273: Train_Move_Pwm_Count--;
  5758  003096  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5759  003098  A0D8               	btfss	status,0,c
  5760  00309A  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;train_move_left.c: 274: Train_Move_Pwm_Fast_Count = 0;
  5764  00309C  0E00               	movlw	0
  5765  00309E  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5766  0030A0  0E00               	movlw	0
  5767  0030A2  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5768                           
  5769                           ;train_move_left.c: 275: }
  5770  0030A4  D071               	goto	l1152
  5771  0030A6                     l1153:
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;train_move_left.c: 276: else{Train_Move_Pwm_Fast_Count++;}
  5775                           
  5776                           ; BSR set to: 0
  5777  0030A6  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5778  0030A8  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;train_move_left.c: 277: break;
  5782  0030AA  D06E               	goto	l1152
  5783  0030AC                     
  5784                           ; BSR set to: 0
  5785                           
  5786                           ; BSR set to: 0
  5787  0030AC  0E00               	movlw	0
  5788  0030AE  6E14               	movwf	GETxAPIxVAL@index+1,c
  5789  0030B0  0E12               	movlw	18
  5790  0030B2  6E13               	movwf	GETxAPIxVAL@index,c
  5791  0030B4  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5792  0030B8  5013               	movf	?_GETxAPIxVAL,w,c
  5793  0030BA  0100               	movlb	0	; () banked
  5794  0030BC  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5795  0030BE  5014               	movf	?_GETxAPIxVAL+1,w,c
  5796  0030C0  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5797  0030C2  A0D8               	btfss	status,0,c
  5798  0030C4  D007               	goto	l1156
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;train_move_left.c: 280: {
  5802                           ;train_move_left.c: 281: Switch_Train_Move = 2;
  5803  0030C6  0E02               	movlw	2
  5804  0030C8  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5805                           
  5806                           ;train_move_left.c: 282: Train_Move_Wait_Time = 0;
  5807  0030CA  0E00               	movlw	0
  5808  0030CC  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5809  0030CE  0E00               	movlw	0
  5810  0030D0  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5811  0030D2  D049               	goto	l7930
  5812  0030D4                     l1156:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;train_move_left.c: 285: }
  5816                           ;train_move_left.c: 286: Return_Val = 1;
  5817                           
  5818                           ; BSR set to: 0
  5819  0030D4  0E01               	movlw	1
  5820  0030D6  6FE6               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;train_move_left.c: 287: Train_Move_Wait_Time++;
  5824  0030D8  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5825  0030DA  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;train_move_left.c: 288: Switch_Train_Move = 1;
  5829  0030DC  0E01               	movlw	1
  5830  0030DE  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5831                           
  5832                           ;train_move_left.c: 289: break;
  5833  0030E0  D053               	goto	l1152
  5834  0030E2                     
  5835                           ; BSR set to: 0
  5836                           
  5837                           ; BSR set to: 0
  5838  0030E2  0E00               	movlw	0
  5839  0030E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  5840  0030E6  0E15               	movlw	21
  5841  0030E8  6E13               	movwf	GETxAPIxVAL@index,c
  5842  0030EA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5843  0030EE  C013  F0D1         	movff	?_GETxAPIxVAL,_Train_Move_Left_Brake$2189
  5844  0030F2  C014  F0D2         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Brake$2189+1
  5845  0030F6  C0D1  F01F         	movff	_Train_Move_Left_Brake$2189,SETxPWM@speed
  5846  0030FA  C0D2  F020         	movff	_Train_Move_Left_Brake$2189+1,SETxPWM@speed+1
  5847  0030FE  0E00               	movlw	0
  5848  003100  6E21               	movwf	SETxPWM@direction,c
  5849  003102  EC21  F01F         	call	_SETxPWM	;wreg free
  5850                           
  5851                           ;train_move_left.c: 292: SETxAPIxVAL(69, 1);;
  5852  003106  0E00               	movlw	0
  5853  003108  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5854  00310A  0E45               	movlw	69
  5855  00310C  6E19               	movwf	SETxAPIxVAL@index,c
  5856  00310E  0E00               	movlw	0
  5857  003110  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5858  003112  0E01               	movlw	1
  5859  003114  6E1B               	movwf	SETxAPIxVAL@value,c
  5860  003116  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  5861                           
  5862                           ;train_move_left.c: 293: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5863  00311A  0E00               	movlw	0
  5864  00311C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5865  00311E  0E15               	movlw	21
  5866  003120  6E13               	movwf	GETxAPIxVAL@index,c
  5867  003122  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5868  003126  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5869  00312A  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5870                           
  5871                           ;train_move_left.c: 294: Switch_Train_Move = 3;
  5872  00312E  0E03               	movlw	3
  5873  003130  0100               	movlb	0	; () banked
  5874  003132  D018               	goto	L99
  5875  003134                     
  5876                           ; BSR set to: 0
  5877                           
  5878                           ; BSR set to: 0
  5879  003134  0E00               	movlw	0
  5880  003136  6E14               	movwf	GETxAPIxVAL@index+1,c
  5881  003138  0E14               	movlw	20
  5882  00313A  6E13               	movwf	GETxAPIxVAL@index,c
  5883  00313C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  5884  003140  5013               	movf	?_GETxAPIxVAL,w,c
  5885  003142  0100               	movlb	0	; () banked
  5886  003144  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5887  003146  5014               	movf	?_GETxAPIxVAL+1,w,c
  5888  003148  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5889  00314A  A0D8               	btfss	status,0,c
  5890  00314C  D008               	goto	l1159
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;train_move_left.c: 299: {
  5894                           ;train_move_left.c: 300: Switch_Train_Move = 0;
  5895  00314E  0E00               	movlw	0
  5896  003150  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5897                           
  5898                           ;train_move_left.c: 301: Train_Move_Wait_Time = 0;
  5899  003152  0E00               	movlw	0
  5900  003154  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5901  003156  0E00               	movlw	0
  5902  003158  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5903                           
  5904                           ;train_move_left.c: 302: Return_Val = 0;
  5905  00315A  0E00               	movlw	0
  5906  00315C  D005               	goto	L76
  5907  00315E                     l1159:
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;train_move_left.c: 304: }
  5911                           ;train_move_left.c: 305: Train_Move_Wait_Time++;
  5912                           
  5913                           ; BSR set to: 0
  5914  00315E  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5915  003160  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;train_move_left.c: 306: Switch_Train_Move = 3;
  5919  003162  0E03               	movlw	3
  5920  003164                     L99:
  5921  003164  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5922  003166                     l7930:
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;train_move_left.c: 307: Return_Val = 1;
  5926  003166  0E01               	movlw	1
  5927  003168                     L76:
  5928  003168  6FE6               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;train_move_left.c: 311: }
  5932                           
  5933                           ; BSR set to: 0
  5934                           
  5935                           ;train_move_left.c: 310: default : break;
  5936                           
  5937                           ;train_move_left.c: 308: break;
  5938  00316A  D00E               	goto	l1152
  5939  00316C                     l1149:
  5940                           
  5941                           ; BSR set to: 0
  5942  00316C  0100               	movlb	0	; () banked
  5943  00316E  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5944                           
  5945                           ; Switch size 1, requested type "space"
  5946                           ; Number of cases is 4, Range of values is 0 to 3
  5947                           ; switch strategies available:
  5948                           ; Name         Instructions Cycles
  5949                           ; simple_byte           13     7 (average)
  5950                           ;	Chosen strategy is simple_byte
  5951  003170  0A00               	xorlw	0	; case 0
  5952  003172  B4D8               	btfsc	status,2,c
  5953  003174  D769               	goto	l1150
  5954  003176  0A01               	xorlw	1	; case 1
  5955  003178  B4D8               	btfsc	status,2,c
  5956  00317A  D798               	goto	l1155
  5957  00317C  0A03               	xorlw	3	; case 2
  5958  00317E  B4D8               	btfsc	status,2,c
  5959  003180  D7B0               	goto	l1157
  5960  003182  0A01               	xorlw	1	; case 3
  5961  003184  B4D8               	btfsc	status,2,c
  5962  003186  D7D6               	goto	l1158
  5963  003188                     l1152:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;train_move_left.c: 313: return(Return_Val);
  5967                           
  5968                           ; BSR set to: 0
  5969  003188  51E6               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5970  00318A  0012               	return	
  5971  00318C                     __end_of_Train_Move_Left_Brake:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           postinc0	equ	0xFEE
  5978                           wreg	equ	0xFE8
  5979                           postdec1	equ	0xFE5
  5980                           fsr1l	equ	0xFE1
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function _Right_Mountain_From_The_Right *****************
  5984 ;; Defined at:
  5985 ;;		line 103 in file "../train_move_left.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  rc              1    wreg     unsigned char 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  rc              1   21[BANK0 ] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  1    wreg      unsigned char 
  5992 ;; Registers used:
  5993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5999 ;;      Params:         0       0       0       0       0       0       0       0       0
  6000 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6002 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6003 ;;Total ram usage:        1 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    6
  6006 ;; This function calls:
  6007 ;;		_GETxAPIxVAL
  6008 ;;		_SETxPWM
  6009 ;; This function is called by:
  6010 ;;		_Train_Path
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text7
  6015  003664                     __ptext7:
  6016                           	opt stack 0
  6017  003664                     _Right_Mountain_From_The_Right:
  6018                           	opt stack 22
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;incstack = 0
  6022                           ;Right_Mountain_From_The_Right@rc stored from wreg
  6023  003664  0100               	movlb	0	; () banked
  6024  003666  6FD1               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  6025                           
  6026                           ;train_move_left.c: 105: static char Return_Val = 1;
  6027                           ;train_move_left.c: 107: switch (Switch_Moutain){
  6028  003668  D07E               	goto	l1097
  6029  00366A  0E03               	movlw	3
  6030  00366C  0100               	movlb	0	; () banked
  6031  00366E  19D1               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6032  003670  B4D8               	btfsc	status,2,c
  6033  003672  D00C               	goto	u7070
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  6037                           
  6038                           ; BSR set to: 0
  6039                           
  6040                           ;train_move_left.c: 111: }
  6041                           
  6042                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;train_move_left.c: 109: Switch_Moutain = 1;
  6046  003674  0E00               	movlw	0
  6047  003676  6E14               	movwf	GETxAPIxVAL@index+1,c
  6048  003678  0E35               	movlw	53
  6049  00367A  6E13               	movwf	GETxAPIxVAL@index,c
  6050  00367C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6051  003680  5013               	movf	?_GETxAPIxVAL,w,c
  6052  003682  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6053  003684  5014               	movf	?_GETxAPIxVAL+1,w,c
  6054  003686  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6055  003688  A0D8               	btfss	status,0,c
  6056  00368A  D007               	goto	l1101
  6057  00368C                     u7070:
  6058                           
  6059                           ;train_move_left.c: 114: Switch_Moutain = 1;
  6060  00368C  0E01               	movlw	1
  6061  00368E  6E2E               	movwf	_Switch_Moutain,c
  6062                           
  6063                           ;train_move_left.c: 115: Mountain_Delay_Counter = 0;
  6064  003690  0E00               	movlw	0
  6065  003692  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6066  003694  0E00               	movlw	0
  6067  003696  6E26               	movwf	_Mountain_Delay_Counter,c
  6068                           
  6069                           ;train_move_left.c: 116: }
  6070  003698  D063               	goto	l1115
  6071  00369A                     l1101:
  6072                           
  6073                           ;train_move_left.c: 117: else{
  6074                           ;train_move_left.c: 118: Mountain_Delay_Counter++;
  6075  00369A  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6076  00369C  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6077  00369E  D060               	goto	l1115
  6078  0036A0  0E04               	movlw	4
  6079  0036A2  0100               	movlb	0	; () banked
  6080  0036A4  19D1               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6081  0036A6  A4D8               	btfss	status,2,c
  6082  0036A8  D026               	goto	l1105
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;train_move_left.c: 125: SETxPWM(Train_Move_Pwm_Count, 0);
  6086  0036AA  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6087  0036AE  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6088  0036B2  0E00               	movlw	0
  6089  0036B4  6E21               	movwf	SETxPWM@direction,c
  6090  0036B6  EC21  F01F         	call	_SETxPWM	;wreg free
  6091                           
  6092                           ;train_move_left.c: 126: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  6093  0036BA  0E00               	movlw	0
  6094  0036BC  6E14               	movwf	GETxAPIxVAL@index+1,c
  6095  0036BE  0E2E               	movlw	46
  6096  0036C0  6E13               	movwf	GETxAPIxVAL@index,c
  6097  0036C2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6098  0036C6  0100               	movlb	0	; () banked
  6099  0036C8  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6100  0036CA  5C13               	subwf	?_GETxAPIxVAL,w,c
  6101  0036CC  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6102  0036CE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6103  0036D0  B0D8               	btfsc	status,0,c
  6104  0036D2  D02A               	goto	u7120
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;train_move_left.c: 133: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6108                           
  6109                           ; BSR set to: 0
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;train_move_left.c: 132: }
  6113                           
  6114                           ;train_move_left.c: 131: break;
  6115                           
  6116                           ;train_move_left.c: 130: Return_Val = 0;
  6117                           
  6118                           ;train_move_left.c: 129: Switch_Moutain = 0;
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;train_move_left.c: 127: {
  6122                           ;train_move_left.c: 128: Switch_Train_Move = 0;
  6123  0036D4  0E00               	movlw	0
  6124  0036D6  6E14               	movwf	GETxAPIxVAL@index+1,c
  6125  0036D8  0E1A               	movlw	26
  6126  0036DA  6E13               	movwf	GETxAPIxVAL@index,c
  6127  0036DC  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6128  0036E0  5013               	movf	?_GETxAPIxVAL,w,c
  6129  0036E2  0100               	movlb	0	; () banked
  6130  0036E4  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6131  0036E6  5014               	movf	?_GETxAPIxVAL+1,w,c
  6132  0036E8  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6133  0036EA  A0D8               	btfss	status,0,c
  6134  0036EC  D037               	goto	l1114
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;train_move_left.c: 134: {
  6138                           ;train_move_left.c: 135: Train_Move_Pwm_Count--;
  6139  0036EE  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6140  0036F0  A0D8               	btfss	status,0,c
  6141  0036F2  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6142  0036F4  D02E               	goto	l8094
  6143  0036F6                     l1105:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;train_move_left.c: 140: else if (rc == 3){
  6147                           
  6148                           ; BSR set to: 0
  6149  0036F6  0E03               	movlw	3
  6150  0036F8  19D1               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6151  0036FA  A4D8               	btfss	status,2,c
  6152  0036FC  D031               	goto	l1115
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;train_move_left.c: 141: SETxPWM(Train_Move_Pwm_Count, 0);
  6156  0036FE  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6157  003702  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6158  003706  0E00               	movlw	0
  6159  003708  6E21               	movwf	SETxPWM@direction,c
  6160  00370A  EC21  F01F         	call	_SETxPWM	;wreg free
  6161                           
  6162                           ;train_move_left.c: 142: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  6163  00370E  0E00               	movlw	0
  6164  003710  6E14               	movwf	GETxAPIxVAL@index+1,c
  6165  003712  0E18               	movlw	24
  6166  003714  6E13               	movwf	GETxAPIxVAL@index,c
  6167  003716  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6168  00371A  5013               	movf	?_GETxAPIxVAL,w,c
  6169  00371C  0100               	movlb	0	; () banked
  6170  00371E  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6171  003720  5014               	movf	?_GETxAPIxVAL+1,w,c
  6172  003722  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6173  003724  A0D8               	btfss	status,0,c
  6174  003726  D006               	goto	l1112
  6175  003728                     u7120:
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;train_move_left.c: 143: {
  6179                           ;train_move_left.c: 144: Switch_Train_Move = 0;
  6180  003728  0E00               	movlw	0
  6181  00372A  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6182                           
  6183                           ;train_move_left.c: 145: Switch_Moutain = 0;
  6184  00372C  0E00               	movlw	0
  6185  00372E  6E2E               	movwf	_Switch_Moutain,c
  6186                           
  6187                           ;train_move_left.c: 146: Return_Val = 0;
  6188  003730  0E00               	movlw	0
  6189  003732  D017               	goto	L80
  6190  003734                     l1112:
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;train_move_left.c: 149: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6194                           
  6195                           ; BSR set to: 0
  6196  003734  0E00               	movlw	0
  6197  003736  6E14               	movwf	GETxAPIxVAL@index+1,c
  6198  003738  0E1A               	movlw	26
  6199  00373A  6E13               	movwf	GETxAPIxVAL@index,c
  6200  00373C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6201  003740  5013               	movf	?_GETxAPIxVAL,w,c
  6202  003742  0100               	movlb	0	; () banked
  6203  003744  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6204  003746  5014               	movf	?_GETxAPIxVAL+1,w,c
  6205  003748  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6206  00374A  A0D8               	btfss	status,0,c
  6207  00374C  D007               	goto	l1114
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;train_move_left.c: 150: {
  6211                           ;train_move_left.c: 151: Train_Move_Pwm_Count++;
  6212  00374E  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6213  003750  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6214  003752                     l8094:
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;train_move_left.c: 152: Train_Move_Pwm_Fast_Count = 0;
  6218  003752  0E00               	movlw	0
  6219  003754  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6220  003756  0E00               	movlw	0
  6221  003758  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6222                           
  6223                           ;train_move_left.c: 153: }
  6224  00375A  D002               	goto	l1115
  6225  00375C                     l1114:
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;train_move_left.c: 154: else{Train_Move_Pwm_Fast_Count++;}
  6229                           
  6230                           ; BSR set to: 0
  6231  00375C  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6232  00375E  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6233  003760                     l1115:
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;train_move_left.c: 155: }
  6237                           ;train_move_left.c: 156: Return_Val = 1;
  6238                           
  6239                           ; BSR set to: 0
  6240                           
  6241                           ; BSR set to: 0
  6242                           
  6243                           ; BSR set to: 0
  6244                           
  6245                           ; BSR set to: 0
  6246  003760  0E01               	movlw	1
  6247  003762                     L80:
  6248  003762  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;train_move_left.c: 161: }
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;train_move_left.c: 160: break;
  6255                           
  6256                           ;train_move_left.c: 159: default:
  6257                           
  6258                           ;train_move_left.c: 157: break;
  6259  003764  D007               	goto	l1103
  6260  003766                     l1097:
  6261                           
  6262                           ; BSR set to: 0
  6263  003766  502E               	movf	_Switch_Moutain,w,c
  6264                           
  6265                           ; Switch size 1, requested type "space"
  6266                           ; Number of cases is 2, Range of values is 0 to 1
  6267                           ; switch strategies available:
  6268                           ; Name         Instructions Cycles
  6269                           ; simple_byte            7     4 (average)
  6270                           ;	Chosen strategy is simple_byte
  6271  003768  0A00               	xorlw	0	; case 0
  6272  00376A  B4D8               	btfsc	status,2,c
  6273  00376C  D77E               	goto	l1098
  6274  00376E  0A01               	xorlw	1	; case 1
  6275  003770  B4D8               	btfsc	status,2,c
  6276  003772  D796               	goto	l1104
  6277  003774                     l1103:
  6278                           
  6279                           ;train_move_left.c: 163: return(Return_Val);
  6280  003774  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  6281  003776  0012               	return	
  6282  003778                     __end_of_Right_Mountain_From_The_Right:
  6283                           	opt stack 0
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           postinc0	equ	0xFEE
  6289                           wreg	equ	0xFE8
  6290                           postdec1	equ	0xFE5
  6291                           fsr1l	equ	0xFE1
  6292                           status	equ	0xFD8
  6293                           
  6294 ;; *************** function _Right_Mountain_From_The_Left *****************
  6295 ;; Defined at:
  6296 ;;		line 179 in file "../train_move_right.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  rc              1    wreg     unsigned char 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  rc              1   21[BANK0 ] unsigned char 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      unsigned char 
  6303 ;; Registers used:
  6304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6310 ;;      Params:         0       0       0       0       0       0       0       0       0
  6311 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6313 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6314 ;;Total ram usage:        1 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    6
  6317 ;; This function calls:
  6318 ;;		_GETxAPIxVAL
  6319 ;;		_SETxPWM
  6320 ;; This function is called by:
  6321 ;;		_Train_Path
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           	psect	text8
  6326  003778                     __ptext8:
  6327                           	opt stack 0
  6328  003778                     _Right_Mountain_From_The_Left:
  6329                           	opt stack 22
  6330                           
  6331                           ;incstack = 0
  6332                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6333  003778  0100               	movlb	0	; () banked
  6334  00377A  6FD1               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6335                           
  6336                           ;train_move_right.c: 181: static char Return_Val = 1;
  6337                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6338  00377C  D07E               	goto	l1225
  6339  00377E  0E04               	movlw	4
  6340  003780  0100               	movlb	0	; () banked
  6341  003782  19D1               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6342  003784  B4D8               	btfsc	status,2,c
  6343  003786  D00C               	goto	u6990
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  6347                           
  6348                           ; BSR set to: 0
  6349                           
  6350                           ;train_move_right.c: 187: }
  6351                           
  6352                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6356  003788  0E00               	movlw	0
  6357  00378A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6358  00378C  0E38               	movlw	56
  6359  00378E  6E13               	movwf	GETxAPIxVAL@index,c
  6360  003790  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6361  003794  5013               	movf	?_GETxAPIxVAL,w,c
  6362  003796  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6363  003798  5014               	movf	?_GETxAPIxVAL+1,w,c
  6364  00379A  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6365  00379C  A0D8               	btfss	status,0,c
  6366  00379E  D007               	goto	l1229
  6367  0037A0                     u6990:
  6368                           
  6369                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6370  0037A0  0E01               	movlw	1
  6371  0037A2  6E2E               	movwf	_Switch_Moutain,c
  6372                           
  6373                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6374  0037A4  0E00               	movlw	0
  6375  0037A6  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6376  0037A8  0E00               	movlw	0
  6377  0037AA  6E26               	movwf	_Mountain_Delay_Counter,c
  6378                           
  6379                           ;train_move_right.c: 191: }
  6380  0037AC  D063               	goto	l1243
  6381  0037AE                     l1229:
  6382                           
  6383                           ;train_move_right.c: 192: else{
  6384                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6385  0037AE  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6386  0037B0  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6387  0037B2  D060               	goto	l1243
  6388  0037B4  0E03               	movlw	3
  6389  0037B6  0100               	movlb	0	; () banked
  6390  0037B8  19D1               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6391  0037BA  A4D8               	btfss	status,2,c
  6392  0037BC  D025               	goto	l1233
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6396  0037BE  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6397  0037C2  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6398  0037C6  0E01               	movlw	1
  6399  0037C8  6E21               	movwf	SETxPWM@direction,c
  6400  0037CA  EC21  F01F         	call	_SETxPWM	;wreg free
  6401                           
  6402                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  6403  0037CE  0E00               	movlw	0
  6404  0037D0  6E14               	movwf	GETxAPIxVAL@index+1,c
  6405  0037D2  0E2F               	movlw	47
  6406  0037D4  6E13               	movwf	GETxAPIxVAL@index,c
  6407  0037D6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6408  0037DA  5013               	movf	?_GETxAPIxVAL,w,c
  6409  0037DC  0100               	movlb	0	; () banked
  6410  0037DE  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6411  0037E0  5014               	movf	?_GETxAPIxVAL+1,w,c
  6412  0037E2  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6413  0037E4  B0D8               	btfsc	status,0,c
  6414  0037E6  D029               	goto	u7040
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6418                           
  6419                           ; BSR set to: 0
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;train_move_right.c: 206: }
  6423                           
  6424                           ;train_move_right.c: 205: break;
  6425                           
  6426                           ;train_move_right.c: 204: Return_Val = 0;
  6427                           
  6428                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;train_move_right.c: 201: {
  6432                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6433  0037E8  0E00               	movlw	0
  6434  0037EA  6E14               	movwf	GETxAPIxVAL@index+1,c
  6435  0037EC  0E1A               	movlw	26
  6436  0037EE  6E13               	movwf	GETxAPIxVAL@index,c
  6437  0037F0  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6438  0037F4  5013               	movf	?_GETxAPIxVAL,w,c
  6439  0037F6  0100               	movlb	0	; () banked
  6440  0037F8  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6441  0037FA  5014               	movf	?_GETxAPIxVAL+1,w,c
  6442  0037FC  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6443  0037FE  A0D8               	btfss	status,0,c
  6444  003800  D037               	goto	l1242
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;train_move_right.c: 208: {
  6448                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6449  003802  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6450  003804  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6451  003806  D02F               	goto	l8038
  6452  003808                     l1233:
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;train_move_right.c: 214: else if (rc == 4){
  6456                           
  6457                           ; BSR set to: 0
  6458  003808  0E04               	movlw	4
  6459  00380A  19D1               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6460  00380C  A4D8               	btfss	status,2,c
  6461  00380E  D032               	goto	l1243
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6465  003810  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6466  003814  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6467  003818  0E01               	movlw	1
  6468  00381A  6E21               	movwf	SETxPWM@direction,c
  6469  00381C  EC21  F01F         	call	_SETxPWM	;wreg free
  6470                           
  6471                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  6472  003820  0E00               	movlw	0
  6473  003822  6E14               	movwf	GETxAPIxVAL@index+1,c
  6474  003824  0E17               	movlw	23
  6475  003826  6E13               	movwf	GETxAPIxVAL@index,c
  6476  003828  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6477  00382C  0100               	movlb	0	; () banked
  6478  00382E  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6479  003830  5C13               	subwf	?_GETxAPIxVAL,w,c
  6480  003832  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6481  003834  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6482  003836  A0D8               	btfss	status,0,c
  6483  003838  D006               	goto	l1240
  6484  00383A                     u7040:
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;train_move_right.c: 217: {
  6488                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6489  00383A  0E00               	movlw	0
  6490  00383C  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6491                           
  6492                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6493  00383E  0E00               	movlw	0
  6494  003840  6E2E               	movwf	_Switch_Moutain,c
  6495                           
  6496                           ;train_move_right.c: 220: Return_Val = 0;
  6497  003842  0E00               	movlw	0
  6498  003844  D018               	goto	L83
  6499  003846                     l1240:
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6503                           
  6504                           ; BSR set to: 0
  6505  003846  0E00               	movlw	0
  6506  003848  6E14               	movwf	GETxAPIxVAL@index+1,c
  6507  00384A  0E1A               	movlw	26
  6508  00384C  6E13               	movwf	GETxAPIxVAL@index,c
  6509  00384E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6510  003852  5013               	movf	?_GETxAPIxVAL,w,c
  6511  003854  0100               	movlb	0	; () banked
  6512  003856  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6513  003858  5014               	movf	?_GETxAPIxVAL+1,w,c
  6514  00385A  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6515  00385C  A0D8               	btfss	status,0,c
  6516  00385E  D008               	goto	l1242
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;train_move_right.c: 224: {
  6520                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  6521  003860  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6522  003862  A0D8               	btfss	status,0,c
  6523  003864  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6524  003866                     l8038:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  6528  003866  0E00               	movlw	0
  6529  003868  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6530  00386A  0E00               	movlw	0
  6531  00386C  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6532                           
  6533                           ;train_move_right.c: 227: }
  6534  00386E  D002               	goto	l1243
  6535  003870                     l1242:
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  6539                           
  6540                           ; BSR set to: 0
  6541  003870  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6542  003872  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6543  003874                     l1243:
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;train_move_right.c: 229: }
  6547                           ;train_move_right.c: 230: Return_Val = 1;
  6548                           
  6549                           ; BSR set to: 0
  6550                           
  6551                           ; BSR set to: 0
  6552                           
  6553                           ; BSR set to: 0
  6554                           
  6555                           ; BSR set to: 0
  6556  003874  0E01               	movlw	1
  6557  003876                     L83:
  6558  003876  6E48               	movwf	Right_Mountain_From_The_Left@Return_Val,c
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;train_move_right.c: 235: }
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;train_move_right.c: 234: break;
  6565                           
  6566                           ;train_move_right.c: 233: default:
  6567                           
  6568                           ;train_move_right.c: 231: break;
  6569  003878  D007               	goto	l1231
  6570  00387A                     l1225:
  6571                           
  6572                           ; BSR set to: 0
  6573  00387A  502E               	movf	_Switch_Moutain,w,c
  6574                           
  6575                           ; Switch size 1, requested type "space"
  6576                           ; Number of cases is 2, Range of values is 0 to 1
  6577                           ; switch strategies available:
  6578                           ; Name         Instructions Cycles
  6579                           ; simple_byte            7     4 (average)
  6580                           ;	Chosen strategy is simple_byte
  6581  00387C  0A00               	xorlw	0	; case 0
  6582  00387E  B4D8               	btfsc	status,2,c
  6583  003880  D77E               	goto	l1226
  6584  003882  0A01               	xorlw	1	; case 1
  6585  003884  B4D8               	btfsc	status,2,c
  6586  003886  D796               	goto	l1232
  6587  003888                     l1231:
  6588                           
  6589                           ;train_move_right.c: 237: return(Return_Val);
  6590  003888  5048               	movf	Right_Mountain_From_The_Left@Return_Val,w,c
  6591  00388A  0012               	return	
  6592  00388C                     __end_of_Right_Mountain_From_The_Left:
  6593                           	opt stack 0
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           postinc0	equ	0xFEE
  6599                           wreg	equ	0xFE8
  6600                           postdec1	equ	0xFE5
  6601                           fsr1l	equ	0xFE1
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function _Left_Mountain_From_The_Right *****************
  6605 ;; Defined at:
  6606 ;;		line 180 in file "../train_move_left.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  rc              1    wreg     unsigned char 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  rc              1   21[BANK0 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      unsigned char 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0
  6621 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6623 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6624 ;;Total ram usage:        1 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    6
  6627 ;; This function calls:
  6628 ;;		_GETxAPIxVAL
  6629 ;;		_SETxPWM
  6630 ;; This function is called by:
  6631 ;;		_Train_Path
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text9
  6636  003AB2                     __ptext9:
  6637                           	opt stack 0
  6638  003AB2                     _Left_Mountain_From_The_Right:
  6639                           	opt stack 22
  6640                           
  6641                           ;incstack = 0
  6642                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6643  003AB2  0100               	movlb	0	; () banked
  6644  003AB4  6FD1               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6645                           
  6646                           ;train_move_left.c: 182: static char Return_Val = 1;
  6647                           ;train_move_left.c: 184: switch (Switch_Moutain){
  6648  003AB6  D07C               	goto	l1122
  6649  003AB8  0100               	movlb	0	; () banked
  6650  003ABA  05D1               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6651  003ABC  B4D8               	btfsc	status,2,c
  6652  003ABE  D00C               	goto	u7150
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;train_move_left.c: 189: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6656                           
  6657                           ; BSR set to: 0
  6658                           
  6659                           ;train_move_left.c: 188: }
  6660                           
  6661                           ;train_move_left.c: 187: Mountain_Delay_Counter = 0;
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;train_move_left.c: 186: Switch_Moutain = 1;
  6665  003AC0  0E00               	movlw	0
  6666  003AC2  6E14               	movwf	GETxAPIxVAL@index+1,c
  6667  003AC4  0E3A               	movlw	58
  6668  003AC6  6E13               	movwf	GETxAPIxVAL@index,c
  6669  003AC8  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6670  003ACC  5013               	movf	?_GETxAPIxVAL,w,c
  6671  003ACE  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6672  003AD0  5014               	movf	?_GETxAPIxVAL+1,w,c
  6673  003AD2  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6674  003AD4  A0D8               	btfss	status,0,c
  6675  003AD6  D007               	goto	l1126
  6676  003AD8                     u7150:
  6677                           
  6678                           ;train_move_left.c: 190: Switch_Moutain = 1;
  6679  003AD8  0E01               	movlw	1
  6680  003ADA  6E2E               	movwf	_Switch_Moutain,c
  6681                           
  6682                           ;train_move_left.c: 191: Mountain_Delay_Counter = 0;
  6683  003ADC  0E00               	movlw	0
  6684  003ADE  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6685  003AE0  0E00               	movlw	0
  6686  003AE2  6E26               	movwf	_Mountain_Delay_Counter,c
  6687                           
  6688                           ;train_move_left.c: 192: }
  6689  003AE4  D062               	goto	l1140
  6690  003AE6                     l1126:
  6691                           
  6692                           ;train_move_left.c: 193: else{
  6693                           ;train_move_left.c: 194: Mountain_Delay_Counter++;
  6694  003AE6  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6695  003AE8  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6696  003AEA  D05F               	goto	l1140
  6697  003AEC  0E02               	movlw	2
  6698  003AEE  0100               	movlb	0	; () banked
  6699  003AF0  19D1               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6700  003AF2  A4D8               	btfss	status,2,c
  6701  003AF4  D025               	goto	l1130
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;train_move_left.c: 200: SETxPWM(Train_Move_Pwm_Count, 0);
  6705  003AF6  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6706  003AFA  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6707  003AFE  0E00               	movlw	0
  6708  003B00  6E21               	movwf	SETxPWM@direction,c
  6709  003B02  EC21  F01F         	call	_SETxPWM	;wreg free
  6710                           
  6711                           ;train_move_left.c: 201: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6712  003B06  0E00               	movlw	0
  6713  003B08  6E14               	movwf	GETxAPIxVAL@index+1,c
  6714  003B0A  0E34               	movlw	52
  6715  003B0C  6E13               	movwf	GETxAPIxVAL@index,c
  6716  003B0E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6717  003B12  5013               	movf	?_GETxAPIxVAL,w,c
  6718  003B14  0100               	movlb	0	; () banked
  6719  003B16  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6720  003B18  5014               	movf	?_GETxAPIxVAL+1,w,c
  6721  003B1A  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6722  003B1C  B0D8               	btfsc	status,0,c
  6723  003B1E  D028               	goto	u7200
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;train_move_left.c: 208: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6727                           
  6728                           ; BSR set to: 0
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;train_move_left.c: 207: }
  6732                           
  6733                           ;train_move_left.c: 206: break;
  6734                           
  6735                           ;train_move_left.c: 205: Return_Val = 0;
  6736                           
  6737                           ;train_move_left.c: 204: Switch_Moutain = 0;
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;train_move_left.c: 202: {
  6741                           ;train_move_left.c: 203: Switch_Train_Move = 0;
  6742  003B20  0E00               	movlw	0
  6743  003B22  6E14               	movwf	GETxAPIxVAL@index+1,c
  6744  003B24  0E1A               	movlw	26
  6745  003B26  6E13               	movwf	GETxAPIxVAL@index,c
  6746  003B28  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6747  003B2C  5013               	movf	?_GETxAPIxVAL,w,c
  6748  003B2E  0100               	movlb	0	; () banked
  6749  003B30  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6750  003B32  5014               	movf	?_GETxAPIxVAL+1,w,c
  6751  003B34  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6752  003B36  A0D8               	btfss	status,0,c
  6753  003B38  D036               	goto	l1139
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;train_move_left.c: 209: {
  6757                           ;train_move_left.c: 210: Train_Move_Pwm_Count++;
  6758  003B3A  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6759  003B3C  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6760  003B3E  D02E               	goto	l8150
  6761  003B40                     l1130:
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;train_move_left.c: 215: else if (rc == 1){
  6765                           
  6766                           ; BSR set to: 0
  6767  003B40  05D1               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6768  003B42  A4D8               	btfss	status,2,c
  6769  003B44  D032               	goto	l1140
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;train_move_left.c: 216: SETxPWM(Train_Move_Pwm_Count, 0);
  6773  003B46  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6774  003B4A  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6775  003B4E  0E00               	movlw	0
  6776  003B50  6E21               	movwf	SETxPWM@direction,c
  6777  003B52  EC21  F01F         	call	_SETxPWM	;wreg free
  6778                           
  6779                           ;train_move_left.c: 217: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6780  003B56  0E00               	movlw	0
  6781  003B58  6E14               	movwf	GETxAPIxVAL@index+1,c
  6782  003B5A  0E18               	movlw	24
  6783  003B5C  6E13               	movwf	GETxAPIxVAL@index,c
  6784  003B5E  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6785  003B62  0100               	movlb	0	; () banked
  6786  003B64  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6787  003B66  5C13               	subwf	?_GETxAPIxVAL,w,c
  6788  003B68  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6789  003B6A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6790  003B6C  A0D8               	btfss	status,0,c
  6791  003B6E  D006               	goto	l1137
  6792  003B70                     u7200:
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;train_move_left.c: 218: {
  6796                           ;train_move_left.c: 219: Switch_Train_Move = 0;
  6797  003B70  0E00               	movlw	0
  6798  003B72  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6799                           
  6800                           ;train_move_left.c: 220: Switch_Moutain = 0;
  6801  003B74  0E00               	movlw	0
  6802  003B76  6E2E               	movwf	_Switch_Moutain,c
  6803                           
  6804                           ;train_move_left.c: 221: Return_Val = 0;
  6805  003B78  0E00               	movlw	0
  6806  003B7A  D018               	goto	L86
  6807  003B7C                     l1137:
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;train_move_left.c: 224: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6811                           
  6812                           ; BSR set to: 0
  6813  003B7C  0E00               	movlw	0
  6814  003B7E  6E14               	movwf	GETxAPIxVAL@index+1,c
  6815  003B80  0E1A               	movlw	26
  6816  003B82  6E13               	movwf	GETxAPIxVAL@index,c
  6817  003B84  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6818  003B88  5013               	movf	?_GETxAPIxVAL,w,c
  6819  003B8A  0100               	movlb	0	; () banked
  6820  003B8C  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6821  003B8E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6822  003B90  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6823  003B92  A0D8               	btfss	status,0,c
  6824  003B94  D008               	goto	l1139
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;train_move_left.c: 225: {
  6828                           ;train_move_left.c: 226: Train_Move_Pwm_Count--;
  6829  003B96  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6830  003B98  A0D8               	btfss	status,0,c
  6831  003B9A  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6832  003B9C                     l8150:
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;train_move_left.c: 227: Train_Move_Pwm_Fast_Count = 0;
  6836  003B9C  0E00               	movlw	0
  6837  003B9E  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6838  003BA0  0E00               	movlw	0
  6839  003BA2  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6840                           
  6841                           ;train_move_left.c: 228: }
  6842  003BA4  D002               	goto	l1140
  6843  003BA6                     l1139:
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;train_move_left.c: 229: else{Train_Move_Pwm_Fast_Count++;}
  6847                           
  6848                           ; BSR set to: 0
  6849  003BA6  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6850  003BA8  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6851  003BAA                     l1140:
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;train_move_left.c: 230: }
  6855                           ;train_move_left.c: 231: Return_Val = 1;
  6856                           
  6857                           ; BSR set to: 0
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862                           
  6863                           ; BSR set to: 0
  6864  003BAA  0E01               	movlw	1
  6865  003BAC                     L86:
  6866  003BAC  6E4A               	movwf	Left_Mountain_From_The_Right@Return_Val,c
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;train_move_left.c: 236: }
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;train_move_left.c: 235: break;
  6873                           
  6874                           ;train_move_left.c: 234: default:
  6875                           
  6876                           ;train_move_left.c: 232: break;
  6877  003BAE  D007               	goto	l1128
  6878  003BB0                     l1122:
  6879                           
  6880                           ; BSR set to: 0
  6881  003BB0  502E               	movf	_Switch_Moutain,w,c
  6882                           
  6883                           ; Switch size 1, requested type "space"
  6884                           ; Number of cases is 2, Range of values is 0 to 1
  6885                           ; switch strategies available:
  6886                           ; Name         Instructions Cycles
  6887                           ; simple_byte            7     4 (average)
  6888                           ;	Chosen strategy is simple_byte
  6889  003BB2  0A00               	xorlw	0	; case 0
  6890  003BB4  B4D8               	btfsc	status,2,c
  6891  003BB6  D780               	goto	l1123
  6892  003BB8  0A01               	xorlw	1	; case 1
  6893  003BBA  B4D8               	btfsc	status,2,c
  6894  003BBC  D797               	goto	l1129
  6895  003BBE                     l1128:
  6896                           
  6897                           ;train_move_left.c: 238: return(Return_Val);
  6898  003BBE  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  6899  003BC0  0012               	return	
  6900  003BC2                     __end_of_Left_Mountain_From_The_Right:
  6901                           	opt stack 0
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           postinc0	equ	0xFEE
  6907                           wreg	equ	0xFE8
  6908                           postdec1	equ	0xFE5
  6909                           fsr1l	equ	0xFE1
  6910                           status	equ	0xFD8
  6911                           
  6912 ;; *************** function _Left_Mountain_From_The_Left *****************
  6913 ;; Defined at:
  6914 ;;		line 104 in file "../train_move_right.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;  rc              1    wreg     unsigned char 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  rc              1   21[BANK0 ] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      unsigned char 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6928 ;;      Params:         0       0       0       0       0       0       0       0       0
  6929 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6931 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6932 ;;Total ram usage:        1 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    6
  6935 ;; This function calls:
  6936 ;;		_GETxAPIxVAL
  6937 ;;		_SETxPWM
  6938 ;; This function is called by:
  6939 ;;		_Train_Path
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	text10
  6944  0039A0                     __ptext10:
  6945                           	opt stack 0
  6946  0039A0                     _Left_Mountain_From_The_Left:
  6947                           	opt stack 22
  6948                           
  6949                           ;incstack = 0
  6950                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6951  0039A0  0100               	movlb	0	; () banked
  6952  0039A2  6FD1               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6953                           
  6954                           ;train_move_right.c: 106: static char Return_Val = 1;
  6955                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6956  0039A4  D07D               	goto	l1200
  6957  0039A6  0E02               	movlw	2
  6958  0039A8  0100               	movlb	0	; () banked
  6959  0039AA  19D1               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6960  0039AC  B4D8               	btfsc	status,2,c
  6961  0039AE  D00C               	goto	u6910
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6965                           
  6966                           ; BSR set to: 0
  6967                           
  6968                           ;train_move_right.c: 112: }
  6969                           
  6970                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6974  0039B0  0E00               	movlw	0
  6975  0039B2  6E14               	movwf	GETxAPIxVAL@index+1,c
  6976  0039B4  0E3B               	movlw	59
  6977  0039B6  6E13               	movwf	GETxAPIxVAL@index,c
  6978  0039B8  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  6979  0039BC  5013               	movf	?_GETxAPIxVAL,w,c
  6980  0039BE  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6981  0039C0  5014               	movf	?_GETxAPIxVAL+1,w,c
  6982  0039C2  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6983  0039C4  A0D8               	btfss	status,0,c
  6984  0039C6  D007               	goto	l1204
  6985  0039C8                     u6910:
  6986                           
  6987                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6988  0039C8  0E01               	movlw	1
  6989  0039CA  6E2E               	movwf	_Switch_Moutain,c
  6990                           
  6991                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6992  0039CC  0E00               	movlw	0
  6993  0039CE  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6994  0039D0  0E00               	movlw	0
  6995  0039D2  6E26               	movwf	_Mountain_Delay_Counter,c
  6996                           
  6997                           ;train_move_right.c: 116: }
  6998  0039D4  D062               	goto	l1218
  6999  0039D6                     l1204:
  7000                           
  7001                           ;train_move_right.c: 117: else{
  7002                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  7003  0039D6  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  7004  0039D8  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  7005  0039DA  D05F               	goto	l1218
  7006  0039DC  0100               	movlb	0	; () banked
  7007  0039DE  05D1               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7008  0039E0  A4D8               	btfss	status,2,c
  7009  0039E2  D026               	goto	l1208
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  7013  0039E4  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7014  0039E8  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7015  0039EC  0E01               	movlw	1
  7016  0039EE  6E21               	movwf	SETxPWM@direction,c
  7017  0039F0  EC21  F01F         	call	_SETxPWM	;wreg free
  7018                           
  7019                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  7020  0039F4  0E00               	movlw	0
  7021  0039F6  6E14               	movwf	GETxAPIxVAL@index+1,c
  7022  0039F8  0E31               	movlw	49
  7023  0039FA  6E13               	movwf	GETxAPIxVAL@index,c
  7024  0039FC  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  7025  003A00  0100               	movlb	0	; () banked
  7026  003A02  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  7027  003A04  5C13               	subwf	?_GETxAPIxVAL,w,c
  7028  003A06  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7029  003A08  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  7030  003A0A  B0D8               	btfsc	status,0,c
  7031  003A0C  D02A               	goto	u6960
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  7035                           
  7036                           ; BSR set to: 0
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;train_move_right.c: 131: }
  7040                           
  7041                           ;train_move_right.c: 130: break;
  7042                           
  7043                           ;train_move_right.c: 129: Return_Val = 0;
  7044                           
  7045                           ;train_move_right.c: 128: Switch_Moutain = 0;
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;train_move_right.c: 126: {
  7049                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  7050  003A0E  0E00               	movlw	0
  7051  003A10  6E14               	movwf	GETxAPIxVAL@index+1,c
  7052  003A12  0E1A               	movlw	26
  7053  003A14  6E13               	movwf	GETxAPIxVAL@index,c
  7054  003A16  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  7055  003A1A  5013               	movf	?_GETxAPIxVAL,w,c
  7056  003A1C  0100               	movlb	0	; () banked
  7057  003A1E  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7058  003A20  5014               	movf	?_GETxAPIxVAL+1,w,c
  7059  003A22  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7060  003A24  A0D8               	btfss	status,0,c
  7061  003A26  D037               	goto	l1217
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;train_move_right.c: 133: {
  7065                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  7066  003A28  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  7067  003A2A  A0D8               	btfss	status,0,c
  7068  003A2C  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7069  003A2E  D02E               	goto	l7982
  7070  003A30                     l1208:
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;train_move_right.c: 139: else if (rc == 2){
  7074                           
  7075                           ; BSR set to: 0
  7076  003A30  0E02               	movlw	2
  7077  003A32  19D1               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7078  003A34  A4D8               	btfss	status,2,c
  7079  003A36  D031               	goto	l1218
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  7083  003A38  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7084  003A3C  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7085  003A40  0E01               	movlw	1
  7086  003A42  6E21               	movwf	SETxPWM@direction,c
  7087  003A44  EC21  F01F         	call	_SETxPWM	;wreg free
  7088                           
  7089                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  7090  003A48  0E00               	movlw	0
  7091  003A4A  6E14               	movwf	GETxAPIxVAL@index+1,c
  7092  003A4C  0E17               	movlw	23
  7093  003A4E  6E13               	movwf	GETxAPIxVAL@index,c
  7094  003A50  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  7095  003A54  5013               	movf	?_GETxAPIxVAL,w,c
  7096  003A56  0100               	movlb	0	; () banked
  7097  003A58  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  7098  003A5A  5014               	movf	?_GETxAPIxVAL+1,w,c
  7099  003A5C  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7100  003A5E  A0D8               	btfss	status,0,c
  7101  003A60  D006               	goto	l1215
  7102  003A62                     u6960:
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;train_move_right.c: 142: {
  7106                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  7107  003A62  0E00               	movlw	0
  7108  003A64  6F84               	movwf	_Switch_Train_Move& (0+255),b
  7109                           
  7110                           ;train_move_right.c: 144: Switch_Moutain = 0;
  7111  003A66  0E00               	movlw	0
  7112  003A68  6E2E               	movwf	_Switch_Moutain,c
  7113                           
  7114                           ;train_move_right.c: 145: Return_Val = 0;
  7115  003A6A  0E00               	movlw	0
  7116  003A6C  D017               	goto	L89
  7117  003A6E                     l1215:
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  7121                           
  7122                           ; BSR set to: 0
  7123  003A6E  0E00               	movlw	0
  7124  003A70  6E14               	movwf	GETxAPIxVAL@index+1,c
  7125  003A72  0E1A               	movlw	26
  7126  003A74  6E13               	movwf	GETxAPIxVAL@index,c
  7127  003A76  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  7128  003A7A  5013               	movf	?_GETxAPIxVAL,w,c
  7129  003A7C  0100               	movlb	0	; () banked
  7130  003A7E  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7131  003A80  5014               	movf	?_GETxAPIxVAL+1,w,c
  7132  003A82  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7133  003A84  A0D8               	btfss	status,0,c
  7134  003A86  D007               	goto	l1217
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;train_move_right.c: 149: {
  7138                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  7139  003A88  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  7140  003A8A  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7141  003A8C                     l7982:
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  7145  003A8C  0E00               	movlw	0
  7146  003A8E  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  7147  003A90  0E00               	movlw	0
  7148  003A92  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  7149                           
  7150                           ;train_move_right.c: 152: }
  7151  003A94  D002               	goto	l1218
  7152  003A96                     l1217:
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  7156                           
  7157                           ; BSR set to: 0
  7158  003A96  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  7159  003A98  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  7160  003A9A                     l1218:
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;train_move_right.c: 154: }
  7164                           ;train_move_right.c: 155: Return_Val = 1;
  7165                           
  7166                           ; BSR set to: 0
  7167                           
  7168                           ; BSR set to: 0
  7169                           
  7170                           ; BSR set to: 0
  7171                           
  7172                           ; BSR set to: 0
  7173  003A9A  0E01               	movlw	1
  7174  003A9C                     L89:
  7175  003A9C  6E49               	movwf	Left_Mountain_From_The_Left@Return_Val,c
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;train_move_right.c: 160: }
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;train_move_right.c: 159: break;
  7182                           
  7183                           ;train_move_right.c: 158: default:
  7184                           
  7185                           ;train_move_right.c: 156: break;
  7186  003A9E  D007               	goto	l1206
  7187  003AA0                     l1200:
  7188                           
  7189                           ; BSR set to: 0
  7190  003AA0  502E               	movf	_Switch_Moutain,w,c
  7191                           
  7192                           ; Switch size 1, requested type "space"
  7193                           ; Number of cases is 2, Range of values is 0 to 1
  7194                           ; switch strategies available:
  7195                           ; Name         Instructions Cycles
  7196                           ; simple_byte            7     4 (average)
  7197                           ;	Chosen strategy is simple_byte
  7198  003AA2  0A00               	xorlw	0	; case 0
  7199  003AA4  B4D8               	btfsc	status,2,c
  7200  003AA6  D77F               	goto	l1201
  7201  003AA8  0A01               	xorlw	1	; case 1
  7202  003AAA  B4D8               	btfsc	status,2,c
  7203  003AAC  D797               	goto	l1207
  7204  003AAE                     l1206:
  7205                           
  7206                           ;train_move_right.c: 162: return(Return_Val);
  7207  003AAE  5049               	movf	Left_Mountain_From_The_Left@Return_Val,w,c
  7208  003AB0  0012               	return	
  7209  003AB2                     __end_of_Left_Mountain_From_The_Left:
  7210                           	opt stack 0
  7211                           tblptru	equ	0xFF8
  7212                           tblptrh	equ	0xFF7
  7213                           tblptrl	equ	0xFF6
  7214                           tablat	equ	0xFF5
  7215                           postinc0	equ	0xFEE
  7216                           wreg	equ	0xFE8
  7217                           postdec1	equ	0xFE5
  7218                           fsr1l	equ	0xFE1
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function _SETxPWM *****************
  7222 ;; Defined at:
  7223 ;;		line 20 in file "../set_pwm.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  speed           2   30[COMRAM] unsigned int 
  7226 ;;  direction       1   32[COMRAM] unsigned char 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  pwm_speed       2   35[COMRAM] unsigned int 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      void 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7238 ;;      Params:         3       0       0       0       0       0       0       0       0
  7239 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7240 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7241 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7242 ;;Total ram usage:        7 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    5
  7245 ;; This function calls:
  7246 ;;		_GETxAPIxVAL
  7247 ;;		_SETxAPIxVAL
  7248 ;; This function is called by:
  7249 ;;		_Update_StateMchn
  7250 ;;		_Train_Move_Left_Start
  7251 ;;		_Right_Mountain_From_The_Right
  7252 ;;		_Left_Mountain_From_The_Right
  7253 ;;		_Train_Move_Left_Brake
  7254 ;;		_Train_Move_Right_Start
  7255 ;;		_Left_Mountain_From_The_Left
  7256 ;;		_Right_Mountain_From_The_Left
  7257 ;;		_Train_Move_Right_Brake
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text11
  7262  003E42                     __ptext11:
  7263                           	opt stack 0
  7264  003E42                     _SETxPWM:
  7265                           	opt stack 22
  7266                           
  7267                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7268                           
  7269                           ;incstack = 0
  7270  003E42  0E01               	movlw	1
  7271  003E44  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7272  003E46  6824               	setf	SETxPWM@pwm_speed,c
  7273                           
  7274                           ;set_pwm.c: 24: if (GETxAPIxVAL(86) != direction){
  7275  003E48  5021               	movf	SETxPWM@direction,w,c
  7276  003E4A  6E22               	movwf	??_SETxPWM& (0+255),c
  7277  003E4C  6A23               	clrf	(??_SETxPWM+1)& (0+255),c
  7278  003E4E  0E00               	movlw	0
  7279  003E50  6E14               	movwf	GETxAPIxVAL@index+1,c
  7280  003E52  0E56               	movlw	86
  7281  003E54  6E13               	movwf	GETxAPIxVAL@index,c
  7282  003E56  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  7283  003E5A  5022               	movf	??_SETxPWM,w,c
  7284  003E5C  1813               	xorwf	?_GETxAPIxVAL,w,c
  7285  003E5E  E104               	bnz	u6600
  7286  003E60  5023               	movf	??_SETxPWM+1,w,c
  7287  003E62  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  7288  003E64  B4D8               	btfsc	status,2,c
  7289  003E66  D009               	goto	l1273
  7290  003E68                     u6600:
  7291                           
  7292                           ;set_pwm.c: 25: SETxAPIxVAL(86, direction);
  7293  003E68  0E00               	movlw	0
  7294  003E6A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7295  003E6C  0E56               	movlw	86
  7296  003E6E  6E19               	movwf	SETxAPIxVAL@index,c
  7297  003E70  C021  F01B         	movff	SETxPWM@direction,SETxAPIxVAL@value
  7298  003E74  6A1C               	clrf	SETxAPIxVAL@value+1,c
  7299  003E76  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7300  003E7A                     l1273:
  7301                           
  7302                           ;set_pwm.c: 26: }
  7303                           ;set_pwm.c: 28: if (direction == 0){
  7304  003E7A  5021               	movf	SETxPWM@direction,w,c
  7305  003E7C  A4D8               	btfss	status,2,c
  7306  003E7E  D01C               	goto	l1274
  7307                           
  7308                           ;set_pwm.c: 29: pwm_speed = 511 - (speed * 2);
  7309  003E80  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7310  003E84  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7311  003E88  90D8               	bcf	status,0,c
  7312  003E8A  3622               	rlcf	??_SETxPWM,f,c
  7313  003E8C  3623               	rlcf	??_SETxPWM+1,f,c
  7314  003E8E  1E22               	comf	??_SETxPWM,f,c
  7315  003E90  1E23               	comf	??_SETxPWM+1,f,c
  7316  003E92  4A22               	infsnz	??_SETxPWM,f,c
  7317  003E94  2A23               	incf	??_SETxPWM+1,f,c
  7318  003E96  0EFF               	movlw	255
  7319  003E98  2422               	addwf	??_SETxPWM,w,c
  7320  003E9A  6E24               	movwf	SETxPWM@pwm_speed,c
  7321  003E9C  0E01               	movlw	1
  7322  003E9E  2023               	addwfc	??_SETxPWM+1,w,c
  7323  003EA0  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7324                           
  7325                           ;set_pwm.c: 30: SETxAPIxVAL(88, pwm_speed);
  7326  003EA2  0E00               	movlw	0
  7327  003EA4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7328  003EA6  0E58               	movlw	88
  7329  003EA8  6E19               	movwf	SETxAPIxVAL@index,c
  7330  003EAA  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7331  003EAE  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7332  003EB2  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7333                           
  7334                           ;set_pwm.c: 31: }
  7335  003EB6  0012               	return	
  7336  003EB8                     l1274:
  7337                           
  7338                           ;set_pwm.c: 32: else if (direction == 1){
  7339  003EB8  0421               	decf	SETxPWM@direction,w,c
  7340  003EBA  A4D8               	btfss	status,2,c
  7341  003EBC  0012               	return	
  7342                           
  7343                           ;set_pwm.c: 33: pwm_speed = 511 + (speed * 2);
  7344  003EBE  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7345  003EC2  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7346  003EC6  90D8               	bcf	status,0,c
  7347  003EC8  3622               	rlcf	??_SETxPWM,f,c
  7348  003ECA  3623               	rlcf	??_SETxPWM+1,f,c
  7349  003ECC  0EFF               	movlw	255
  7350  003ECE  2422               	addwf	??_SETxPWM,w,c
  7351  003ED0  6E24               	movwf	SETxPWM@pwm_speed,c
  7352  003ED2  0E01               	movlw	1
  7353  003ED4  2023               	addwfc	??_SETxPWM+1,w,c
  7354  003ED6  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7355                           
  7356                           ;set_pwm.c: 34: SETxAPIxVAL(88, pwm_speed);
  7357  003ED8  0E00               	movlw	0
  7358  003EDA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7359  003EDC  0E58               	movlw	88
  7360  003EDE  6E19               	movwf	SETxAPIxVAL@index,c
  7361  003EE0  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7362  003EE4  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7363  003EE8  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7364  003EEC  0012               	return	
  7365  003EEE                     __end_of_SETxPWM:
  7366                           	opt stack 0
  7367                           tblptru	equ	0xFF8
  7368                           tblptrh	equ	0xFF7
  7369                           tblptrl	equ	0xFF6
  7370                           tablat	equ	0xFF5
  7371                           postinc0	equ	0xFEE
  7372                           wreg	equ	0xFE8
  7373                           postdec1	equ	0xFE5
  7374                           fsr1l	equ	0xFE1
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function _Junction *****************
  7378 ;; Defined at:
  7379 ;;		line 26 in file "../junction.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  Junction_Lef    1    wreg     unsigned char 
  7382 ;;  Straight_Ben    1   30[COMRAM] unsigned char 
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;  Junction_Lef    1   31[COMRAM] unsigned char 
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  1    wreg      unsigned char 
  7387 ;; Registers used:
  7388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7394 ;;      Params:         1       0       0       0       0       0       0       0       0
  7395 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7397 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7398 ;;Total ram usage:        2 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; Hardware stack levels required when called:    5
  7401 ;; This function calls:
  7402 ;;		_GETxAPIxVAL
  7403 ;;		_SETxAPIxVAL
  7404 ;; This function is called by:
  7405 ;;		_Update_StateMchn
  7406 ;;		_Train_Path
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           	psect	text12
  7411  002BA2                     __ptext12:
  7412                           	opt stack 0
  7413  002BA2                     _Junction:
  7414                           	opt stack 23
  7415                           
  7416                           ;incstack = 0
  7417                           ;Junction@Junction_Left_Right stored from wreg
  7418  002BA2  6E20               	movwf	Junction@Junction_Left_Right,c
  7419                           
  7420                           ;junction.c: 28: static char Return_Val = 1;
  7421                           ;junction.c: 29: static unsigned int Junction_Switch_Time = 0;
  7422                           ;junction.c: 31: switch (Switch_Junction)
  7423  002BA4  D0E2               	goto	l1034
  7424  002BA6  0E01               	movlw	1
  7425  002BA8  6E4C               	movwf	Junction@Return_Val,c
  7426                           
  7427                           ;junction.c: 34: switch (Junction_Left_Right)
  7428  002BAA  D08C               	goto	l1036
  7429  002BAC  0E00               	movlw	0
  7430  002BAE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7431  002BB0  0E40               	movlw	64
  7432  002BB2  6E19               	movwf	SETxAPIxVAL@index,c
  7433  002BB4  0E00               	movlw	0
  7434  002BB6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7435  002BB8  0E01               	movlw	1
  7436  002BBA  6E1B               	movwf	SETxAPIxVAL@value,c
  7437  002BBC  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7438                           
  7439                           ;junction.c: 39: SETxAPIxVAL(82, 1);
  7440  002BC0  0E00               	movlw	0
  7441  002BC2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7442  002BC4  0E52               	movlw	82
  7443  002BC6  6E19               	movwf	SETxAPIxVAL@index,c
  7444  002BC8  0E00               	movlw	0
  7445  002BCA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7446  002BCC  0E01               	movlw	1
  7447  002BCE  6E1B               	movwf	SETxAPIxVAL@value,c
  7448  002BD0  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7449                           
  7450                           ;junction.c: 40: SETxAPIxVAL(83, 0);
  7451  002BD4  0E00               	movlw	0
  7452  002BD6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7453  002BD8  0E53               	movlw	83
  7454  002BDA  6E19               	movwf	SETxAPIxVAL@index,c
  7455  002BDC  0E00               	movlw	0
  7456  002BDE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7457  002BE0  0E00               	movlw	0
  7458  002BE2  6E1B               	movwf	SETxAPIxVAL@value,c
  7459  002BE4  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7460                           
  7461                           ;junction.c: 41: break;
  7462  002BE8  D074               	goto	l1043
  7463  002BEA  0E00               	movlw	0
  7464  002BEC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7465  002BEE  0E41               	movlw	65
  7466  002BF0  6E19               	movwf	SETxAPIxVAL@index,c
  7467  002BF2  0E00               	movlw	0
  7468  002BF4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7469  002BF6  0E01               	movlw	1
  7470  002BF8  6E1B               	movwf	SETxAPIxVAL@value,c
  7471  002BFA  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7472                           
  7473                           ;junction.c: 43: SETxAPIxVAL(82, 0);
  7474  002BFE  0E00               	movlw	0
  7475  002C00  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7476  002C02  0E52               	movlw	82
  7477  002C04  6E19               	movwf	SETxAPIxVAL@index,c
  7478  002C06  0E00               	movlw	0
  7479  002C08  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7480  002C0A  0E00               	movlw	0
  7481  002C0C  6E1B               	movwf	SETxAPIxVAL@value,c
  7482  002C0E  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7483                           
  7484                           ;junction.c: 44: SETxAPIxVAL(83, 1);
  7485  002C12  0E00               	movlw	0
  7486  002C14  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7487  002C16  0E53               	movlw	83
  7488  002C18  6E19               	movwf	SETxAPIxVAL@index,c
  7489  002C1A  0E00               	movlw	0
  7490  002C1C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7491  002C1E  0E01               	movlw	1
  7492  002C20  6E1B               	movwf	SETxAPIxVAL@value,c
  7493  002C22  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7494                           
  7495                           ;junction.c: 47: }
  7496                           
  7497                           ;junction.c: 46: default : break;
  7498                           
  7499                           ;junction.c: 45: break;
  7500  002C26  D055               	goto	l1043
  7501  002C28  501F               	movf	Junction@Straight_Bend,w,c
  7502                           
  7503                           ; Switch size 1, requested type "space"
  7504                           ; Number of cases is 2, Range of values is 0 to 1
  7505                           ; switch strategies available:
  7506                           ; Name         Instructions Cycles
  7507                           ; simple_byte            7     4 (average)
  7508                           ;	Chosen strategy is simple_byte
  7509  002C2A  0A00               	xorlw	0	; case 0
  7510  002C2C  B4D8               	btfsc	status,2,c
  7511  002C2E  D7BE               	goto	l1039
  7512  002C30  0A01               	xorlw	1	; case 1
  7513  002C32  B4D8               	btfsc	status,2,c
  7514  002C34  D7DA               	goto	l1041
  7515                           
  7516                           ;junction.c: 48: break;
  7517  002C36  D04D               	goto	l1043
  7518  002C38  0E00               	movlw	0
  7519  002C3A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7520  002C3C  0E42               	movlw	66
  7521  002C3E  6E19               	movwf	SETxAPIxVAL@index,c
  7522  002C40  0E00               	movlw	0
  7523  002C42  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7524  002C44  0E01               	movlw	1
  7525  002C46  6E1B               	movwf	SETxAPIxVAL@value,c
  7526  002C48  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7527                           
  7528                           ;junction.c: 53: SETxAPIxVAL(84, 1);
  7529  002C4C  0E00               	movlw	0
  7530  002C4E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7531  002C50  0E54               	movlw	84
  7532  002C52  6E19               	movwf	SETxAPIxVAL@index,c
  7533  002C54  0E00               	movlw	0
  7534  002C56  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7535  002C58  0E01               	movlw	1
  7536  002C5A  6E1B               	movwf	SETxAPIxVAL@value,c
  7537  002C5C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7538                           
  7539                           ;junction.c: 54: SETxAPIxVAL(85, 0);
  7540  002C60  0E00               	movlw	0
  7541  002C62  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7542  002C64  0E55               	movlw	85
  7543  002C66  6E19               	movwf	SETxAPIxVAL@index,c
  7544  002C68  0E00               	movlw	0
  7545  002C6A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7546  002C6C  0E00               	movlw	0
  7547  002C6E  6E1B               	movwf	SETxAPIxVAL@value,c
  7548  002C70  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7549                           
  7550                           ;junction.c: 55: break;
  7551  002C74  D02E               	goto	l1043
  7552  002C76  0E00               	movlw	0
  7553  002C78  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7554  002C7A  0E43               	movlw	67
  7555  002C7C  6E19               	movwf	SETxAPIxVAL@index,c
  7556  002C7E  0E00               	movlw	0
  7557  002C80  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7558  002C82  0E01               	movlw	1
  7559  002C84  6E1B               	movwf	SETxAPIxVAL@value,c
  7560  002C86  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7561                           
  7562                           ;junction.c: 57: SETxAPIxVAL(84, 0);
  7563  002C8A  0E00               	movlw	0
  7564  002C8C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7565  002C8E  0E54               	movlw	84
  7566  002C90  6E19               	movwf	SETxAPIxVAL@index,c
  7567  002C92  0E00               	movlw	0
  7568  002C94  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7569  002C96  0E00               	movlw	0
  7570  002C98  6E1B               	movwf	SETxAPIxVAL@value,c
  7571  002C9A  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7572                           
  7573                           ;junction.c: 58: SETxAPIxVAL(85, 1);
  7574  002C9E  0E00               	movlw	0
  7575  002CA0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7576  002CA2  0E55               	movlw	85
  7577  002CA4  6E19               	movwf	SETxAPIxVAL@index,c
  7578  002CA6  0E00               	movlw	0
  7579  002CA8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7580  002CAA  0E01               	movlw	1
  7581  002CAC  6E1B               	movwf	SETxAPIxVAL@value,c
  7582  002CAE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7583                           
  7584                           ;junction.c: 61: }
  7585                           
  7586                           ;junction.c: 60: default : break;
  7587                           
  7588                           ;junction.c: 59: break;
  7589  002CB2  D00F               	goto	l1043
  7590  002CB4  501F               	movf	Junction@Straight_Bend,w,c
  7591                           
  7592                           ; Switch size 1, requested type "space"
  7593                           ; Number of cases is 2, Range of values is 0 to 1
  7594                           ; switch strategies available:
  7595                           ; Name         Instructions Cycles
  7596                           ; simple_byte            7     4 (average)
  7597                           ;	Chosen strategy is simple_byte
  7598  002CB6  0A00               	xorlw	0	; case 0
  7599  002CB8  B4D8               	btfsc	status,2,c
  7600  002CBA  D7BE               	goto	l1046
  7601  002CBC  0A01               	xorlw	1	; case 1
  7602  002CBE  B4D8               	btfsc	status,2,c
  7603  002CC0  D7DA               	goto	l1048
  7604                           
  7605                           ;junction.c: 65: }
  7606                           
  7607                           ;junction.c: 64: default : break;
  7608                           
  7609                           ;junction.c: 62: break;
  7610  002CC2  D007               	goto	l1043
  7611  002CC4                     l1036:
  7612  002CC4  5020               	movf	Junction@Junction_Left_Right,w,c
  7613                           
  7614                           ; Switch size 1, requested type "space"
  7615                           ; Number of cases is 2, Range of values is 0 to 1
  7616                           ; switch strategies available:
  7617                           ; Name         Instructions Cycles
  7618                           ; simple_byte            7     4 (average)
  7619                           ;	Chosen strategy is simple_byte
  7620  002CC6  0A00               	xorlw	0	; case 0
  7621  002CC8  B4D8               	btfsc	status,2,c
  7622  002CCA  D7AE               	goto	l1038
  7623  002CCC  0A01               	xorlw	1	; case 1
  7624  002CCE  B4D8               	btfsc	status,2,c
  7625  002CD0  D7F1               	goto	l1045
  7626  002CD2                     l1043:
  7627                           
  7628                           ;junction.c: 66: Switch_Junction = 1;
  7629  002CD2  0E01               	movlw	1
  7630  002CD4  6E2F               	movwf	_Switch_Junction,c
  7631                           
  7632                           ;junction.c: 67: break;
  7633  002CD6  D053               	goto	l1051
  7634  002CD8  0E00               	movlw	0
  7635  002CDA  6E14               	movwf	GETxAPIxVAL@index+1,c
  7636  002CDC  0E13               	movlw	19
  7637  002CDE  6E13               	movwf	GETxAPIxVAL@index,c
  7638  002CE0  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  7639  002CE4  5013               	movf	?_GETxAPIxVAL,w,c
  7640  002CE6  0100               	movlb	0	; () banked
  7641  002CE8  5D6A               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7642  002CEA  5014               	movf	?_GETxAPIxVAL+1,w,c
  7643  002CEC  596B               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7644  002CEE  A0D8               	btfss	status,0,c
  7645  002CF0  D008               	goto	l1053
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;junction.c: 70: {
  7649                           ;junction.c: 71: Switch_Junction = 2;
  7650  002CF2  0E02               	movlw	2
  7651  002CF4  6E2F               	movwf	_Switch_Junction,c
  7652                           
  7653                           ;junction.c: 72: Junction_Switch_Time = 0;
  7654  002CF6  0E00               	movlw	0
  7655  002CF8  6F6B               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7656  002CFA  0E00               	movlw	0
  7657  002CFC  6F6A               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7658                           
  7659                           ;junction.c: 73: Return_Val = 1;
  7660  002CFE  0E01               	movlw	1
  7661  002D00  D032               	goto	L90
  7662  002D02                     l1053:
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;junction.c: 75: }
  7666                           ;junction.c: 76: Return_Val = 1;
  7667                           
  7668                           ; BSR set to: 0
  7669  002D02  0E01               	movlw	1
  7670  002D04  6E4C               	movwf	Junction@Return_Val,c
  7671                           
  7672                           ;junction.c: 77: Switch_Junction = 1;
  7673  002D06  0E01               	movlw	1
  7674  002D08  6E2F               	movwf	_Switch_Junction,c
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;junction.c: 78: Junction_Switch_Time++;
  7678  002D0A  4B6A               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7679  002D0C  2B6B               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7680                           
  7681                           ;junction.c: 79: break;
  7682  002D0E  D037               	goto	l1051
  7683  002D10                     
  7684                           ; BSR set to: 0
  7685  002D10  0E00               	movlw	0
  7686  002D12  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7687  002D14  0E40               	movlw	64
  7688  002D16  6E19               	movwf	SETxAPIxVAL@index,c
  7689  002D18  0E00               	movlw	0
  7690  002D1A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7691  002D1C  0E00               	movlw	0
  7692  002D1E  6E1B               	movwf	SETxAPIxVAL@value,c
  7693  002D20  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7694                           
  7695                           ;junction.c: 82: SETxAPIxVAL(65, 0);
  7696  002D24  0E00               	movlw	0
  7697  002D26  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7698  002D28  0E41               	movlw	65
  7699  002D2A  6E19               	movwf	SETxAPIxVAL@index,c
  7700  002D2C  0E00               	movlw	0
  7701  002D2E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7702  002D30  0E00               	movlw	0
  7703  002D32  6E1B               	movwf	SETxAPIxVAL@value,c
  7704  002D34  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7705                           
  7706                           ;junction.c: 83: SETxAPIxVAL(66,0);
  7707  002D38  0E00               	movlw	0
  7708  002D3A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7709  002D3C  0E42               	movlw	66
  7710  002D3E  6E19               	movwf	SETxAPIxVAL@index,c
  7711  002D40  0E00               	movlw	0
  7712  002D42  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7713  002D44  0E00               	movlw	0
  7714  002D46  6E1B               	movwf	SETxAPIxVAL@value,c
  7715  002D48  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7716                           
  7717                           ;junction.c: 84: SETxAPIxVAL(67,0);
  7718  002D4C  0E00               	movlw	0
  7719  002D4E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7720  002D50  0E43               	movlw	67
  7721  002D52  6E19               	movwf	SETxAPIxVAL@index,c
  7722  002D54  0E00               	movlw	0
  7723  002D56  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7724  002D58  0E00               	movlw	0
  7725  002D5A  6E1B               	movwf	SETxAPIxVAL@value,c
  7726  002D5C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  7727                           
  7728                           ;junction.c: 85: Switch_Junction = 0;
  7729  002D60  0E00               	movlw	0
  7730  002D62  6E2F               	movwf	_Switch_Junction,c
  7731                           
  7732                           ;junction.c: 86: Return_Val = 0;
  7733  002D64  0E00               	movlw	0
  7734  002D66                     L90:
  7735  002D66  6E4C               	movwf	Junction@Return_Val,c
  7736                           
  7737                           ;junction.c: 90: }
  7738                           
  7739                           ;junction.c: 89: default : break;
  7740                           
  7741                           ;junction.c: 87: break;
  7742  002D68  D00A               	goto	l1051
  7743  002D6A                     l1034:
  7744  002D6A  502F               	movf	_Switch_Junction,w,c
  7745                           
  7746                           ; Switch size 1, requested type "space"
  7747                           ; Number of cases is 3, Range of values is 0 to 2
  7748                           ; switch strategies available:
  7749                           ; Name         Instructions Cycles
  7750                           ; simple_byte           10     6 (average)
  7751                           ;	Chosen strategy is simple_byte
  7752  002D6C  0A00               	xorlw	0	; case 0
  7753  002D6E  B4D8               	btfsc	status,2,c
  7754  002D70  D71A               	goto	l1035
  7755  002D72  0A01               	xorlw	1	; case 1
  7756  002D74  B4D8               	btfsc	status,2,c
  7757  002D76  D7B0               	goto	l1052
  7758  002D78  0A03               	xorlw	3	; case 2
  7759  002D7A  B4D8               	btfsc	status,2,c
  7760  002D7C  D7C9               	goto	l1054
  7761  002D7E                     l1051:
  7762                           
  7763                           ;junction.c: 92: return (Return_Val);
  7764  002D7E  504C               	movf	Junction@Return_Val,w,c
  7765  002D80  0012               	return	
  7766  002D82                     __end_of_Junction:
  7767                           	opt stack 0
  7768                           tblptru	equ	0xFF8
  7769                           tblptrh	equ	0xFF7
  7770                           tblptrl	equ	0xFF6
  7771                           tablat	equ	0xFF5
  7772                           postinc0	equ	0xFEE
  7773                           wreg	equ	0xFE8
  7774                           postdec1	equ	0xFE5
  7775                           fsr1l	equ	0xFE1
  7776                           status	equ	0xFD8
  7777                           
  7778 ;; *************** function _Red_Led *****************
  7779 ;; Defined at:
  7780 ;;		line 97 in file "../io.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;  Operation       1    wreg     unsigned char 
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;  Operation       1   18[COMRAM] unsigned char 
  7785 ;; Return value:  Size  Location     Type
  7786 ;;                  1    wreg      void 
  7787 ;; Registers used:
  7788 ;;		wreg, status,2, status,0
  7789 ;; Tracked objects:
  7790 ;;		On entry : 0/0
  7791 ;;		On exit  : 0/0
  7792 ;;		Unchanged: 0/0
  7793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7794 ;;      Params:         0       0       0       0       0       0       0       0       0
  7795 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7797 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7798 ;;Total ram usage:        1 bytes
  7799 ;; Hardware stack levels used:    1
  7800 ;; Hardware stack levels required when called:    3
  7801 ;; This function calls:
  7802 ;;		Nothing
  7803 ;; This function is called by:
  7804 ;;		_Update_StateMchn
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           	psect	text13
  7809  004020                     __ptext13:
  7810                           	opt stack 0
  7811  004020                     _Red_Led:
  7812                           	opt stack 26
  7813                           
  7814                           ;incstack = 0
  7815                           ;Red_Led@Operation stored from wreg
  7816  004020  6E13               	movwf	Red_Led@Operation,c
  7817                           
  7818                           ;io.c: 99: switch(Operation)
  7819  004022  D030               	goto	l868
  7820  004024                     l869:
  7821  004024  9A83               	bcf	3971,5,c	;volatile
  7822  004026  0012               	return	
  7823  004028                     l871:
  7824  004028  8A83               	bsf	3971,5,c	;volatile
  7825  00402A  0012               	return	
  7826  00402C  4A28               	infsnz	_Red_Led_Counter,f,c
  7827  00402E  2A29               	incf	_Red_Led_Counter+1,f,c
  7828                           
  7829                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7830  004030  0EB8               	movlw	184
  7831  004032  5C28               	subwf	_Red_Led_Counter,w,c
  7832  004034  0E0B               	movlw	11
  7833  004036  5829               	subwfb	_Red_Led_Counter+1,w,c
  7834  004038  A0D8               	btfss	status,0,c
  7835  00403A  D004               	goto	l873
  7836                           
  7837                           ;io.c: 107: {
  7838                           ;io.c: 108: Red_Led_Counter = 0;
  7839  00403C  0E00               	movlw	0
  7840  00403E  6E29               	movwf	_Red_Led_Counter+1,c
  7841  004040  0E00               	movlw	0
  7842  004042  6E28               	movwf	_Red_Led_Counter,c
  7843  004044                     l873:
  7844                           
  7845                           ;io.c: 109: }
  7846                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7847  004044  0EDC               	movlw	220
  7848  004046  5C28               	subwf	_Red_Led_Counter,w,c
  7849  004048  0E05               	movlw	5
  7850  00404A  5829               	subwfb	_Red_Led_Counter+1,w,c
  7851  00404C  A0D8               	btfss	status,0,c
  7852  00404E  D002               	goto	l874
  7853                           
  7854                           ;io.c: 111: {
  7855                           ;io.c: 112: PORTDbits.RD5 = 1;
  7856  004050  8A83               	bsf	3971,5,c	;volatile
  7857                           
  7858                           ;io.c: 113: }
  7859  004052  0012               	return	
  7860  004054                     l874:
  7861                           
  7862                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7863  004054  9A83               	bcf	3971,5,c	;volatile
  7864                           
  7865                           ;io.c: 115: break;
  7866  004056  0012               	return	
  7867  004058  4A28               	infsnz	_Red_Led_Counter,f,c
  7868  00405A  2A29               	incf	_Red_Led_Counter+1,f,c
  7869                           
  7870                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7871  00405C  0EE8               	movlw	232
  7872  00405E  5C28               	subwf	_Red_Led_Counter,w,c
  7873  004060  0E03               	movlw	3
  7874  004062  5829               	subwfb	_Red_Led_Counter+1,w,c
  7875  004064  A0D8               	btfss	status,0,c
  7876  004066  D004               	goto	l877
  7877                           
  7878                           ;io.c: 119: {
  7879                           ;io.c: 120: Red_Led_Counter = 0;
  7880  004068  0E00               	movlw	0
  7881  00406A  6E29               	movwf	_Red_Led_Counter+1,c
  7882  00406C  0E00               	movlw	0
  7883  00406E  6E28               	movwf	_Red_Led_Counter,c
  7884  004070                     l877:
  7885                           
  7886                           ;io.c: 121: }
  7887                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7888  004070  0EF4               	movlw	244
  7889  004072  5C28               	subwf	_Red_Led_Counter,w,c
  7890  004074  0E01               	movlw	1
  7891  004076  5829               	subwfb	_Red_Led_Counter+1,w,c
  7892  004078  A0D8               	btfss	status,0,c
  7893  00407A  D002               	goto	l878
  7894                           
  7895                           ;io.c: 123: {
  7896                           ;io.c: 124: PORTDbits.RD5 = 1;
  7897  00407C  8A83               	bsf	3971,5,c	;volatile
  7898                           
  7899                           ;io.c: 125: }
  7900  00407E  0012               	return	
  7901  004080                     l878:
  7902                           
  7903                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7904  004080  9A83               	bcf	3971,5,c	;volatile
  7905                           
  7906                           ;io.c: 130: }
  7907                           
  7908                           ;io.c: 129: default : break;
  7909                           
  7910                           ;io.c: 127: break;
  7911  004082  0012               	return	
  7912  004084                     l868:
  7913  004084  5013               	movf	Red_Led@Operation,w,c
  7914                           
  7915                           ; Switch size 1, requested type "space"
  7916                           ; Number of cases is 4, Range of values is 0 to 3
  7917                           ; switch strategies available:
  7918                           ; Name         Instructions Cycles
  7919                           ; simple_byte           13     7 (average)
  7920                           ;	Chosen strategy is simple_byte
  7921  004086  0A00               	xorlw	0	; case 0
  7922  004088  B4D8               	btfsc	status,2,c
  7923  00408A  D7CC               	goto	l869
  7924  00408C  0A01               	xorlw	1	; case 1
  7925  00408E  B4D8               	btfsc	status,2,c
  7926  004090  D7CB               	goto	l871
  7927  004092  0A03               	xorlw	3	; case 2
  7928  004094  B4D8               	btfsc	status,2,c
  7929  004096  D7CA               	goto	l872
  7930  004098  0A01               	xorlw	1	; case 3
  7931  00409A  A4D8               	btfss	status,2,c
  7932  00409C  0012               	return	
  7933  00409E  D7DC               	goto	l876
  7934  0040A0                     __end_of_Red_Led:
  7935                           	opt stack 0
  7936                           tblptru	equ	0xFF8
  7937                           tblptrh	equ	0xFF7
  7938                           tblptrl	equ	0xFF6
  7939                           tablat	equ	0xFF5
  7940                           postinc0	equ	0xFEE
  7941                           wreg	equ	0xFE8
  7942                           postdec1	equ	0xFE5
  7943                           fsr1l	equ	0xFE1
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _Green_Led *****************
  7947 ;; Defined at:
  7948 ;;		line 47 in file "../io.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  Operation       1    wreg     unsigned char 
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;  Operation       1   18[COMRAM] unsigned char 
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  1    wreg      void 
  7955 ;; Registers used:
  7956 ;;		wreg, status,2, status,0
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7962 ;;      Params:         0       0       0       0       0       0       0       0       0
  7963 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7965 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7966 ;;Total ram usage:        1 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    3
  7969 ;; This function calls:
  7970 ;;		Nothing
  7971 ;; This function is called by:
  7972 ;;		_Update_StateMchn
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           	psect	text14
  7977  0040A0                     __ptext14:
  7978                           	opt stack 0
  7979  0040A0                     _Green_Led:
  7980                           	opt stack 26
  7981                           
  7982                           ;incstack = 0
  7983                           ;Green_Led@Operation stored from wreg
  7984  0040A0  6E13               	movwf	Green_Led@Operation,c
  7985                           
  7986                           ;io.c: 49: switch(Operation)
  7987  0040A2  D030               	goto	l852
  7988  0040A4                     l853:
  7989  0040A4  9C83               	bcf	3971,6,c	;volatile
  7990  0040A6  0012               	return	
  7991  0040A8                     l855:
  7992  0040A8  8C83               	bsf	3971,6,c	;volatile
  7993  0040AA  0012               	return	
  7994  0040AC  4A2A               	infsnz	_Green_Led_Counter,f,c
  7995  0040AE  2A2B               	incf	_Green_Led_Counter+1,f,c
  7996                           
  7997                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7998  0040B0  0EB8               	movlw	184
  7999  0040B2  5C2A               	subwf	_Green_Led_Counter,w,c
  8000  0040B4  0E0B               	movlw	11
  8001  0040B6  582B               	subwfb	_Green_Led_Counter+1,w,c
  8002  0040B8  A0D8               	btfss	status,0,c
  8003  0040BA  D004               	goto	l857
  8004                           
  8005                           ;io.c: 57: {
  8006                           ;io.c: 58: Green_Led_Counter = 0;
  8007  0040BC  0E00               	movlw	0
  8008  0040BE  6E2B               	movwf	_Green_Led_Counter+1,c
  8009  0040C0  0E00               	movlw	0
  8010  0040C2  6E2A               	movwf	_Green_Led_Counter,c
  8011  0040C4                     l857:
  8012                           
  8013                           ;io.c: 59: }
  8014                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  8015  0040C4  0EDC               	movlw	220
  8016  0040C6  5C2A               	subwf	_Green_Led_Counter,w,c
  8017  0040C8  0E05               	movlw	5
  8018  0040CA  582B               	subwfb	_Green_Led_Counter+1,w,c
  8019  0040CC  A0D8               	btfss	status,0,c
  8020  0040CE  D002               	goto	l858
  8021                           
  8022                           ;io.c: 61: {
  8023                           ;io.c: 62: PORTDbits.RD6 = 1;
  8024  0040D0  8C83               	bsf	3971,6,c	;volatile
  8025                           
  8026                           ;io.c: 63: }
  8027  0040D2  0012               	return	
  8028  0040D4                     l858:
  8029                           
  8030                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  8031  0040D4  9C83               	bcf	3971,6,c	;volatile
  8032                           
  8033                           ;io.c: 65: break;
  8034  0040D6  0012               	return	
  8035  0040D8  4A2A               	infsnz	_Green_Led_Counter,f,c
  8036  0040DA  2A2B               	incf	_Green_Led_Counter+1,f,c
  8037                           
  8038                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  8039  0040DC  0EE8               	movlw	232
  8040  0040DE  5C2A               	subwf	_Green_Led_Counter,w,c
  8041  0040E0  0E03               	movlw	3
  8042  0040E2  582B               	subwfb	_Green_Led_Counter+1,w,c
  8043  0040E4  A0D8               	btfss	status,0,c
  8044  0040E6  D004               	goto	l861
  8045                           
  8046                           ;io.c: 69: {
  8047                           ;io.c: 70: Green_Led_Counter = 0;
  8048  0040E8  0E00               	movlw	0
  8049  0040EA  6E2B               	movwf	_Green_Led_Counter+1,c
  8050  0040EC  0E00               	movlw	0
  8051  0040EE  6E2A               	movwf	_Green_Led_Counter,c
  8052  0040F0                     l861:
  8053                           
  8054                           ;io.c: 71: }
  8055                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  8056  0040F0  0EF4               	movlw	244
  8057  0040F2  5C2A               	subwf	_Green_Led_Counter,w,c
  8058  0040F4  0E01               	movlw	1
  8059  0040F6  582B               	subwfb	_Green_Led_Counter+1,w,c
  8060  0040F8  A0D8               	btfss	status,0,c
  8061  0040FA  D002               	goto	l862
  8062                           
  8063                           ;io.c: 73: {
  8064                           ;io.c: 74: PORTDbits.RD6 = 1;
  8065  0040FC  8C83               	bsf	3971,6,c	;volatile
  8066                           
  8067                           ;io.c: 75: }
  8068  0040FE  0012               	return	
  8069  004100                     l862:
  8070                           
  8071                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  8072  004100  9C83               	bcf	3971,6,c	;volatile
  8073                           
  8074                           ;io.c: 80: }
  8075                           
  8076                           ;io.c: 79: default : break;
  8077                           
  8078                           ;io.c: 77: break;
  8079  004102  0012               	return	
  8080  004104                     l852:
  8081  004104  5013               	movf	Green_Led@Operation,w,c
  8082                           
  8083                           ; Switch size 1, requested type "space"
  8084                           ; Number of cases is 4, Range of values is 0 to 3
  8085                           ; switch strategies available:
  8086                           ; Name         Instructions Cycles
  8087                           ; simple_byte           13     7 (average)
  8088                           ;	Chosen strategy is simple_byte
  8089  004106  0A00               	xorlw	0	; case 0
  8090  004108  B4D8               	btfsc	status,2,c
  8091  00410A  D7CC               	goto	l853
  8092  00410C  0A01               	xorlw	1	; case 1
  8093  00410E  B4D8               	btfsc	status,2,c
  8094  004110  D7CB               	goto	l855
  8095  004112  0A03               	xorlw	3	; case 2
  8096  004114  B4D8               	btfsc	status,2,c
  8097  004116  D7CA               	goto	l856
  8098  004118  0A01               	xorlw	1	; case 3
  8099  00411A  A4D8               	btfss	status,2,c
  8100  00411C  0012               	return	
  8101  00411E  D7DC               	goto	l860
  8102  004120                     __end_of_Green_Led:
  8103                           	opt stack 0
  8104                           tblptru	equ	0xFF8
  8105                           tblptrh	equ	0xFF7
  8106                           tblptrl	equ	0xFF6
  8107                           tablat	equ	0xFF5
  8108                           postinc0	equ	0xFEE
  8109                           wreg	equ	0xFE8
  8110                           postdec1	equ	0xFE5
  8111                           fsr1l	equ	0xFE1
  8112                           status	equ	0xFD8
  8113                           
  8114 ;; *************** function _EEPROMxSTORE *****************
  8115 ;; Defined at:
  8116 ;;		line 157 in file "../eeprom_settings.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;		None
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  i               1   22[BANK0 ] unsigned char 
  8121 ;;  api_list        1   21[BANK0 ] unsigned char 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  2   26[COMRAM] unsigned int 
  8124 ;; Registers used:
  8125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8131 ;;      Params:         2       0       0       0       0       0       0       0       0
  8132 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8133 ;;      Temps:          8       0       0       0       0       0       0       0       0
  8134 ;;      Totals:        10       2       0       0       0       0       0       0       0
  8135 ;;Total ram usage:       12 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    4
  8138 ;; This function calls:
  8139 ;;		_Eeprom_Store
  8140 ;; This function is called by:
  8141 ;;		_Update_StateMchn
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text15
  8146  002D82                     __ptext15:
  8147                           	opt stack 0
  8148  002D82                     _EEPROMxSTORE:
  8149                           	opt stack 25
  8150                           
  8151                           ;eeprom_settings.c: 159: unsigned char i, api_list;
  8152                           ;eeprom_settings.c: 161: if (!ReadActive){
  8153                           
  8154                           ;incstack = 0
  8155  002D82  0100               	movlb	0	; () banked
  8156  002D84  516E               	movf	_ReadActive& (0+255),w,b
  8157  002D86  116F               	iorwf	(_ReadActive+1)& (0+255),w,b
  8158  002D88  A4D8               	btfss	status,2,c
  8159  002D8A  D0AC               	goto	l779
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;eeprom_settings.c: 162: WriteActive = 1;
  8163  002D8C  0E00               	movlw	0
  8164  002D8E  6F6D               	movwf	(_WriteActive+1)& (0+255),b
  8165  002D90  0E01               	movlw	1
  8166  002D92  6F6C               	movwf	_WriteActive& (0+255),b
  8167                           
  8168                           ;eeprom_settings.c: 163: INTCON = 0x00;
  8169  002D94  0E00               	movlw	0
  8170  002D96  6EF2               	movwf	intcon,c	;volatile
  8171                           
  8172                           ;eeprom_settings.c: 165: for(i = 0; i < 28; i++ )
  8173  002D98  0E00               	movlw	0
  8174  002D9A  6FD2               	movwf	EEPROMxSTORE@i& (0+255),b
  8175  002D9C                     l8278:
  8176                           
  8177                           ; BSR set to: 0
  8178  002D9C  0E1B               	movlw	27
  8179  002D9E  65D2               	cpfsgt	EEPROMxSTORE@i& (0+255),b
  8180  002DA0  D001               	goto	l780
  8181  002DA2  D095               	goto	u7430
  8182  002DA4                     l780:
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;eeprom_settings.c: 166: {
  8186                           ;eeprom_settings.c: 167: api_list = ApiList[i];
  8187                           
  8188                           ; BSR set to: 0
  8189  002DA4  51D2               	movf	EEPROMxSTORE@i& (0+255),w,b
  8190  002DA6  0D02               	mullw	2
  8191  002DA8  0E01               	movlw	low _ApiList
  8192  002DAA  24F3               	addwf	prodl,w,c
  8193  002DAC  6EF6               	movwf	tblptrl,c
  8194  002DAE  0E08               	movlw	high _ApiList
  8195  002DB0  20F4               	addwfc	prodh,w,c
  8196  002DB2  6EF7               	movwf	tblptrh,c
  8197  002DB4                     	if	0	;There are less than 3 active tblptr bytes
  8198  002DB4                     	endif
  8199  002DB4  0008               	tblrd		*
  8200  002DB6  CFF5 F0D1          	movff	tablat,EEPROMxSTORE@api_list
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;eeprom_settings.c: 173: if (API[ApiList[i]] != API_EEPROM[ApiList[i]])
  8204  002DBA  51D2               	movf	EEPROMxSTORE@i& (0+255),w,b
  8205  002DBC  0D02               	mullw	2
  8206  002DBE  0E01               	movlw	low _ApiList
  8207  002DC0  24F3               	addwf	prodl,w,c
  8208  002DC2  6EF6               	movwf	tblptrl,c
  8209  002DC4  0E08               	movlw	high _ApiList
  8210  002DC6  20F4               	addwfc	prodh,w,c
  8211  002DC8  6EF7               	movwf	tblptrh,c
  8212  002DCA                     	if	0	;There are less than 3 active tblptr bytes
  8213  002DCA                     	endif
  8214  002DCA  0009               	tblrd		*+
  8215  002DCC  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8216  002DD0  0009               	tblrd		*+
  8217  002DD2  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8218  002DD6  90D8               	bcf	status,0,c
  8219  002DD8  361D               	rlcf	??_EEPROMxSTORE,f,c
  8220  002DDA  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8221  002DDC  0E00               	movlw	low _API_EEPROM
  8222  002DDE  241D               	addwf	??_EEPROMxSTORE,w,c
  8223  002DE0  6ED9               	movwf	fsr2l,c
  8224  002DE2  0E03               	movlw	high _API_EEPROM
  8225  002DE4  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8226  002DE6  6EDA               	movwf	fsr2h,c
  8227  002DE8  51D2               	movf	EEPROMxSTORE@i& (0+255),w,b
  8228  002DEA  0D02               	mullw	2
  8229  002DEC  0E01               	movlw	low _ApiList
  8230  002DEE  24F3               	addwf	prodl,w,c
  8231  002DF0  6EF6               	movwf	tblptrl,c
  8232  002DF2  0E08               	movlw	high _ApiList
  8233  002DF4  20F4               	addwfc	prodh,w,c
  8234  002DF6  6EF7               	movwf	tblptrh,c
  8235  002DF8                     	if	0	;There are less than 3 active tblptr bytes
  8236  002DF8                     	endif
  8237  002DF8  0009               	tblrd		*+
  8238  002DFA  CFF5 F021          	movff	tablat,??_EEPROMxSTORE+4
  8239  002DFE  0009               	tblrd		*+
  8240  002E00  CFF5 F022          	movff	tablat,??_EEPROMxSTORE+5
  8241  002E04  90D8               	bcf	status,0,c
  8242  002E06  3621               	rlcf	??_EEPROMxSTORE+4,f,c
  8243  002E08  3622               	rlcf	??_EEPROMxSTORE+5,f,c
  8244  002E0A  0E00               	movlw	low _API
  8245  002E0C  2421               	addwf	??_EEPROMxSTORE+4,w,c
  8246  002E0E  6EE1               	movwf	fsr1l,c
  8247  002E10  0E01               	movlw	high _API
  8248  002E12  2022               	addwfc	??_EEPROMxSTORE+5,w,c
  8249  002E14  6EE2               	movwf	fsr1h,c
  8250  002E16  50DE               	movf	postinc2,w,c
  8251  002E18  18E6               	xorwf	postinc1,w,c
  8252  002E1A  E104               	bnz	u7420
  8253  002E1C  50DE               	movf	postinc2,w,c
  8254  002E1E  18E6               	xorwf	postinc1,w,c
  8255  002E20  B4D8               	btfsc	status,2,c
  8256  002E22  D053               	goto	l782
  8257  002E24                     u7420:
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;eeprom_settings.c: 174: {
  8261                           ;eeprom_settings.c: 179: Eeprom_Store(i, API[ApiList[i]]);
  8262  002E24  C0D2  F013         	movff	EEPROMxSTORE@i,Eeprom_Store@Location
  8263  002E28  6A14               	clrf	Eeprom_Store@Location+1,c
  8264  002E2A  51D2               	movf	EEPROMxSTORE@i& (0+255),w,b
  8265  002E2C  0D02               	mullw	2
  8266  002E2E  0E01               	movlw	low _ApiList
  8267  002E30  24F3               	addwf	prodl,w,c
  8268  002E32  6EF6               	movwf	tblptrl,c
  8269  002E34  0E08               	movlw	high _ApiList
  8270  002E36  20F4               	addwfc	prodh,w,c
  8271  002E38  6EF7               	movwf	tblptrh,c
  8272  002E3A                     	if	0	;There are less than 3 active tblptr bytes
  8273  002E3A                     	endif
  8274  002E3A  0009               	tblrd		*+
  8275  002E3C  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8276  002E40  0009               	tblrd		*+
  8277  002E42  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8278  002E46  90D8               	bcf	status,0,c
  8279  002E48  361D               	rlcf	??_EEPROMxSTORE,f,c
  8280  002E4A  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8281  002E4C  0E00               	movlw	low _API
  8282  002E4E  241D               	addwf	??_EEPROMxSTORE,w,c
  8283  002E50  6ED9               	movwf	fsr2l,c
  8284  002E52  0E01               	movlw	high _API
  8285  002E54  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8286  002E56  6EDA               	movwf	fsr2h,c
  8287  002E58  CFDE F015          	movff	postinc2,Eeprom_Store@Value
  8288  002E5C  CFDD F016          	movff	postdec2,Eeprom_Store@Value+1
  8289  002E60  EC90  F020         	call	_Eeprom_Store	;wreg free
  8290                           
  8291                           ;eeprom_settings.c: 180: API_EEPROM[ApiList[i]] = API[ApiList[i]];
  8292  002E64  0100               	movlb	0	; () banked
  8293  002E66  51D2               	movf	EEPROMxSTORE@i& (0+255),w,b
  8294  002E68  0D02               	mullw	2
  8295  002E6A  0E01               	movlw	low _ApiList
  8296  002E6C  24F3               	addwf	prodl,w,c
  8297  002E6E  6EF6               	movwf	tblptrl,c
  8298  002E70  0E08               	movlw	high _ApiList
  8299  002E72  20F4               	addwfc	prodh,w,c
  8300  002E74  6EF7               	movwf	tblptrh,c
  8301  002E76                     	if	0	;There are less than 3 active tblptr bytes
  8302  002E76                     	endif
  8303  002E76  0009               	tblrd		*+
  8304  002E78  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8305  002E7C  0009               	tblrd		*+
  8306  002E7E  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8307  002E82  90D8               	bcf	status,0,c
  8308  002E84  361D               	rlcf	??_EEPROMxSTORE,f,c
  8309  002E86  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8310  002E88  0E00               	movlw	low _API
  8311  002E8A  241D               	addwf	??_EEPROMxSTORE,w,c
  8312  002E8C  6ED9               	movwf	fsr2l,c
  8313  002E8E  0E01               	movlw	high _API
  8314  002E90  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8315  002E92  6EDA               	movwf	fsr2h,c
  8316  002E94  51D2               	movf	EEPROMxSTORE@i& (0+255),w,b
  8317  002E96  0D02               	mullw	2
  8318  002E98  0E01               	movlw	low _ApiList
  8319  002E9A  24F3               	addwf	prodl,w,c
  8320  002E9C  6EF6               	movwf	tblptrl,c
  8321  002E9E  0E08               	movlw	high _ApiList
  8322  002EA0  20F4               	addwfc	prodh,w,c
  8323  002EA2  6EF7               	movwf	tblptrh,c
  8324  002EA4                     	if	0	;There are less than 3 active tblptr bytes
  8325  002EA4                     	endif
  8326  002EA4  0009               	tblrd		*+
  8327  002EA6  CFF5 F01F          	movff	tablat,??_EEPROMxSTORE+2
  8328  002EAA  0009               	tblrd		*+
  8329  002EAC  CFF5 F020          	movff	tablat,??_EEPROMxSTORE+3
  8330  002EB0  90D8               	bcf	status,0,c
  8331  002EB2  361F               	rlcf	??_EEPROMxSTORE+2,f,c
  8332  002EB4  3620               	rlcf	??_EEPROMxSTORE+3,f,c
  8333  002EB6  0E00               	movlw	low _API_EEPROM
  8334  002EB8  241F               	addwf	??_EEPROMxSTORE+2,w,c
  8335  002EBA  6EE1               	movwf	fsr1l,c
  8336  002EBC  0E03               	movlw	high _API_EEPROM
  8337  002EBE  2020               	addwfc	??_EEPROMxSTORE+3,w,c
  8338  002EC0  6EE2               	movwf	fsr1h,c
  8339  002EC2  CFDE FFE6          	movff	postinc2,postinc1
  8340  002EC6  CFDD FFE5          	movff	postdec2,postdec1
  8341  002ECA                     l782:
  8342                           
  8343                           ; BSR set to: 0
  8344                           
  8345                           ; BSR set to: 0
  8346  002ECA  2BD2               	incf	EEPROMxSTORE@i& (0+255),f,b
  8347  002ECC  D767               	goto	l8278
  8348  002ECE                     u7430:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;eeprom_settings.c: 181: }
  8352                           ;eeprom_settings.c: 182: }
  8353                           ;eeprom_settings.c: 184: INTCON = 0xA0;
  8354                           
  8355                           ; BSR set to: 0
  8356  002ECE  0EA0               	movlw	160
  8357  002ED0  6EF2               	movwf	intcon,c	;volatile
  8358                           
  8359                           ;eeprom_settings.c: 185: WriteActive = 0;
  8360  002ED2  0E00               	movlw	0
  8361  002ED4  6F6D               	movwf	(_WriteActive+1)& (0+255),b
  8362  002ED6  0E00               	movlw	0
  8363  002ED8  6F6C               	movwf	_WriteActive& (0+255),b
  8364                           
  8365                           ;eeprom_settings.c: 186: return (1);
  8366  002EDA  0E00               	movlw	0
  8367  002EDC  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8368  002EDE  0E01               	movlw	1
  8369  002EE0  6E1B               	movwf	?_EEPROMxSTORE,c
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;eeprom_settings.c: 187: }
  8373                           
  8374                           ; BSR set to: 0
  8375  002EE2  0012               	return	
  8376  002EE4                     l779:
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;eeprom_settings.c: 188: else{
  8380                           ;eeprom_settings.c: 189: return (0);
  8381                           
  8382                           ; BSR set to: 0
  8383  002EE4  0E00               	movlw	0
  8384  002EE6  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8385  002EE8  0E00               	movlw	0
  8386  002EEA  6E1B               	movwf	?_EEPROMxSTORE,c
  8387                           
  8388                           ; BSR set to: 0
  8389  002EEC  0012               	return	
  8390  002EEE                     __end_of_EEPROMxSTORE:
  8391                           	opt stack 0
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           postinc0	equ	0xFEE
  8400                           wreg	equ	0xFE8
  8401                           postinc1	equ	0xFE6
  8402                           postdec1	equ	0xFE5
  8403                           fsr1h	equ	0xFE2
  8404                           fsr1l	equ	0xFE1
  8405                           postinc2	equ	0xFDE
  8406                           postdec2	equ	0xFDD
  8407                           fsr2h	equ	0xFDA
  8408                           fsr2l	equ	0xFD9
  8409                           status	equ	0xFD8
  8410                           
  8411 ;; *************** function _Eeprom_Store *****************
  8412 ;; Defined at:
  8413 ;;		line 207 in file "../eeprom_settings.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;  Location        2   18[COMRAM] unsigned int 
  8416 ;;  Value           2   20[COMRAM] unsigned int 
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;  Location_Hig    2   24[COMRAM] unsigned int 
  8419 ;;  Location_Low    2   22[COMRAM] unsigned int 
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  1    wreg      void 
  8422 ;; Registers used:
  8423 ;;		wreg, status,2, status,0
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8429 ;;      Params:         4       0       0       0       0       0       0       0       0
  8430 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8432 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8433 ;;Total ram usage:        8 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    3
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_EEPROMxSTORE
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text16
  8444  004120                     __ptext16:
  8445                           	opt stack 0
  8446  004120                     _Eeprom_Store:
  8447                           	opt stack 25
  8448                           
  8449                           ;eeprom_settings.c: 209: unsigned int Location_High_Byte = Location * 2;
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;incstack = 0
  8453  004120  90D8               	bcf	status,0,c
  8454  004122  3413               	rlcf	Eeprom_Store@Location,w,c
  8455  004124  6E19               	movwf	Eeprom_Store@Location_High_Byte,c
  8456  004126  3414               	rlcf	Eeprom_Store@Location+1,w,c
  8457  004128  6E1A               	movwf	Eeprom_Store@Location_High_Byte+1,c
  8458                           
  8459                           ;eeprom_settings.c: 210: unsigned int Location_Low_Byte = Location_High_Byte + 1;
  8460  00412A  0E01               	movlw	1
  8461  00412C  2419               	addwf	Eeprom_Store@Location_High_Byte,w,c
  8462  00412E  6E17               	movwf	Eeprom_Store@Location_Low_Byte,c
  8463  004130  0E00               	movlw	0
  8464  004132  201A               	addwfc	Eeprom_Store@Location_High_Byte+1,w,c
  8465  004134  6E18               	movwf	Eeprom_Store@Location_Low_Byte+1,c
  8466                           
  8467                           ;eeprom_settings.c: 214: EECON1bits.WRERR = 0;
  8468  004136  96A6               	bcf	4006,3,c	;volsfr
  8469                           
  8470                           ;eeprom_settings.c: 215: EEADR = (unsigned char)Location_High_Byte;
  8471  004138  C019  FFA9         	movff	Eeprom_Store@Location_High_Byte,4009	;volatile
  8472                           
  8473                           ;eeprom_settings.c: 216: EEDATA = (unsigned char)(Value >> 8);
  8474  00413C  5016               	movf	Eeprom_Store@Value+1,w,c
  8475  00413E  6EA8               	movwf	4008,c	;volatile
  8476                           
  8477                           ;eeprom_settings.c: 217: EECON1bits.EEPGD = 0;
  8478  004140  9EA6               	bcf	4006,7,c	;volsfr
  8479                           
  8480                           ;eeprom_settings.c: 218: EECON1bits.CFGS = 0;
  8481  004142  9CA6               	bcf	4006,6,c	;volsfr
  8482                           
  8483                           ;eeprom_settings.c: 219: EECON1bits.WREN = 1;
  8484  004144  84A6               	bsf	4006,2,c	;volsfr
  8485                           
  8486                           ;eeprom_settings.c: 220: EECON2 = 0x55;
  8487  004146  0E55               	movlw	85
  8488  004148  6EA7               	movwf	4007,c	;volsfr
  8489                           
  8490                           ;eeprom_settings.c: 221: EECON2 = 0xAA;
  8491  00414A  0EAA               	movlw	170
  8492  00414C  6EA7               	movwf	4007,c	;volsfr
  8493                           
  8494                           ;eeprom_settings.c: 222: EECON1bits.WR = 1;
  8495  00414E  82A6               	bsf	4006,1,c	;volsfr
  8496  004150                     
  8497                           ;eeprom_settings.c: 224: continue;
  8498  004150  A2A6               	btfss	4006,1,c	;volsfr
  8499  004152  D002               	goto	u7370
  8500  004154  A8A1               	btfss	4001,4,c	;volatile
  8501  004156  D7FC               	goto	l788
  8502  004158                     u7370:
  8503                           
  8504                           ;eeprom_settings.c: 225: }
  8505                           ;eeprom_settings.c: 226: PIR2bits.EEIF = 0;
  8506  004158  98A1               	bcf	4001,4,c	;volatile
  8507                           
  8508                           ;eeprom_settings.c: 236: EECON1bits.WRERR = 0;
  8509  00415A  96A6               	bcf	4006,3,c	;volsfr
  8510                           
  8511                           ;eeprom_settings.c: 237: EEADR = (unsigned char)Location_Low_Byte;
  8512  00415C  C017  FFA9         	movff	Eeprom_Store@Location_Low_Byte,4009	;volatile
  8513                           
  8514                           ;eeprom_settings.c: 238: EEDATA = (unsigned char)Value;
  8515  004160  C015  FFA8         	movff	Eeprom_Store@Value,4008	;volatile
  8516                           
  8517                           ;eeprom_settings.c: 239: EECON1bits.EEPGD = 0;
  8518  004164  9EA6               	bcf	4006,7,c	;volsfr
  8519                           
  8520                           ;eeprom_settings.c: 240: EECON1bits.CFGS = 0;
  8521  004166  9CA6               	bcf	4006,6,c	;volsfr
  8522                           
  8523                           ;eeprom_settings.c: 241: EECON1bits.WREN = 1;
  8524  004168  84A6               	bsf	4006,2,c	;volsfr
  8525                           
  8526                           ;eeprom_settings.c: 242: INTCON = 0x00;
  8527  00416A  0E00               	movlw	0
  8528  00416C  6EF2               	movwf	intcon,c	;volatile
  8529                           
  8530                           ;eeprom_settings.c: 243: EECON2 = 0x55;
  8531  00416E  0E55               	movlw	85
  8532  004170  6EA7               	movwf	4007,c	;volsfr
  8533                           
  8534                           ;eeprom_settings.c: 244: EECON2 = 0xAA;
  8535  004172  0EAA               	movlw	170
  8536  004174  6EA7               	movwf	4007,c	;volsfr
  8537                           
  8538                           ;eeprom_settings.c: 245: EECON1bits.WR = 1;
  8539  004176  82A6               	bsf	4006,1,c	;volsfr
  8540  004178                     
  8541                           ;eeprom_settings.c: 247: continue;
  8542  004178  A2A6               	btfss	4006,1,c	;volsfr
  8543  00417A  D002               	goto	u7390
  8544  00417C  A8A1               	btfss	4001,4,c	;volatile
  8545  00417E  D7FC               	goto	l793
  8546  004180                     u7390:
  8547                           
  8548                           ;eeprom_settings.c: 248: }
  8549                           ;eeprom_settings.c: 249: PIR2bits.EEIF = 0;
  8550  004180  98A1               	bcf	4001,4,c	;volatile
  8551                           
  8552                           ;eeprom_settings.c: 259: EECON1bits.WREN = 0;
  8553  004182  94A6               	bcf	4006,2,c	;volsfr
  8554                           
  8555                           ;eeprom_settings.c: 261: EEADR = 0xFF;
  8556  004184  68A9               	setf	4009,c	;volatile
  8557  004186  0012               	return		;funcret
  8558  004188                     __end_of_Eeprom_Store:
  8559                           	opt stack 0
  8560                           tblptru	equ	0xFF8
  8561                           tblptrh	equ	0xFF7
  8562                           tblptrl	equ	0xFF6
  8563                           tablat	equ	0xFF5
  8564                           prodh	equ	0xFF4
  8565                           prodl	equ	0xFF3
  8566                           intcon	equ	0xFF2
  8567                           postinc0	equ	0xFEE
  8568                           wreg	equ	0xFE8
  8569                           postinc1	equ	0xFE6
  8570                           postdec1	equ	0xFE5
  8571                           fsr1h	equ	0xFE2
  8572                           fsr1l	equ	0xFE1
  8573                           postinc2	equ	0xFDE
  8574                           postdec2	equ	0xFDD
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _Debounce_Inputs *****************
  8580 ;; Defined at:
  8581 ;;		line 148 in file "../io.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      void 
  8588 ;; Registers used:
  8589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8597 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8598 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8599 ;;Total ram usage:        2 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    5
  8602 ;; This function calls:
  8603 ;;		_GETxAPIxVAL
  8604 ;;		_SETxAPIxVAL
  8605 ;;		_SetDCPWM1
  8606 ;; This function is called by:
  8607 ;;		_Update_StateMchn
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           	psect	text17
  8612  0016D6                     __ptext17:
  8613                           	opt stack 0
  8614  0016D6                     _Debounce_Inputs:
  8615                           	opt stack 24
  8616                           
  8617                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  8618                           
  8619                           ;incstack = 0
  8620  0016D6  0E00               	movlw	0
  8621  0016D8  6E14               	movwf	GETxAPIxVAL@index+1,c
  8622  0016DA  0E40               	movlw	64
  8623  0016DC  6E13               	movwf	GETxAPIxVAL@index,c
  8624  0016DE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8625  0016E2  4613               	rlncf	?_GETxAPIxVAL,f,c
  8626  0016E4  4613               	rlncf	?_GETxAPIxVAL,f,c
  8627  0016E6  4613               	rlncf	?_GETxAPIxVAL,f,c
  8628  0016E8  5080               	movf	3968,w,c	;volatile
  8629  0016EA  1813               	xorwf	?_GETxAPIxVAL,w,c
  8630  0016EC  0BF7               	andlw	-9
  8631  0016EE  1813               	xorwf	?_GETxAPIxVAL,w,c
  8632  0016F0  6E80               	movwf	3968,c	;volatile
  8633                           
  8634                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  8635  0016F2  0E00               	movlw	0
  8636  0016F4  6E14               	movwf	GETxAPIxVAL@index+1,c
  8637  0016F6  0E41               	movlw	65
  8638  0016F8  6E13               	movwf	GETxAPIxVAL@index,c
  8639  0016FA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8640  0016FE  4613               	rlncf	?_GETxAPIxVAL,f,c
  8641  001700  4613               	rlncf	?_GETxAPIxVAL,f,c
  8642  001702  5080               	movf	3968,w,c	;volatile
  8643  001704  1813               	xorwf	?_GETxAPIxVAL,w,c
  8644  001706  0BFB               	andlw	-5
  8645  001708  1813               	xorwf	?_GETxAPIxVAL,w,c
  8646  00170A  6E80               	movwf	3968,c	;volatile
  8647                           
  8648                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  8649  00170C  0E00               	movlw	0
  8650  00170E  6E14               	movwf	GETxAPIxVAL@index+1,c
  8651  001710  0E42               	movlw	66
  8652  001712  6E13               	movwf	GETxAPIxVAL@index,c
  8653  001714  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8654  001718  4613               	rlncf	?_GETxAPIxVAL,f,c
  8655  00171A  5080               	movf	3968,w,c	;volatile
  8656  00171C  1813               	xorwf	?_GETxAPIxVAL,w,c
  8657  00171E  0BFD               	andlw	-3
  8658  001720  1813               	xorwf	?_GETxAPIxVAL,w,c
  8659  001722  6E80               	movwf	3968,c	;volatile
  8660                           
  8661                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  8662  001724  0E00               	movlw	0
  8663  001726  6E14               	movwf	GETxAPIxVAL@index+1,c
  8664  001728  0E43               	movlw	67
  8665  00172A  6E13               	movwf	GETxAPIxVAL@index,c
  8666  00172C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8667  001730  5080               	movf	3968,w,c	;volatile
  8668  001732  1813               	xorwf	?_GETxAPIxVAL,w,c
  8669  001734  0BFE               	andlw	-2
  8670  001736  1813               	xorwf	?_GETxAPIxVAL,w,c
  8671  001738  6E80               	movwf	3968,c	;volatile
  8672                           
  8673                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  8674  00173A  0E00               	movlw	0
  8675  00173C  6E14               	movwf	GETxAPIxVAL@index+1,c
  8676  00173E  0E45               	movlw	69
  8677  001740  6E13               	movwf	GETxAPIxVAL@index,c
  8678  001742  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8679  001746  5082               	movf	3970,w,c	;volatile
  8680  001748  1813               	xorwf	?_GETxAPIxVAL,w,c
  8681  00174A  0BFE               	andlw	-2
  8682  00174C  1813               	xorwf	?_GETxAPIxVAL,w,c
  8683  00174E  6E82               	movwf	3970,c	;volatile
  8684                           
  8685                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(88));
  8686  001750  0E00               	movlw	0
  8687  001752  6E14               	movwf	GETxAPIxVAL@index+1,c
  8688  001754  0E58               	movlw	88
  8689  001756  6E13               	movwf	GETxAPIxVAL@index,c
  8690  001758  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8691  00175C  C013  F015         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8692  001760  C014  F016         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8693  001764  ECA6  F021         	call	_SetDCPWM1	;wreg free
  8694                           
  8695                           ;io.c: 157: switch(PORTDbits.RD1)
  8696  001768  D02C               	goto	l884
  8697  00176A  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8698  00176C  B4D8               	btfsc	status,2,c
  8699  00176E  D002               	goto	l886
  8700                           
  8701                           ;io.c: 160: {
  8702                           ;io.c: 161: Reed_Contact_LF_Counter--;
  8703  001770  063E               	decf	_Reed_Contact_LF_Counter,f,c
  8704                           
  8705                           ;io.c: 163: }
  8706                           
  8707                           ;io.c: 162: break;
  8708  001772  D05F               	goto	l893
  8709  001774                     l886:
  8710                           
  8711                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  8712  001774  0E00               	movlw	0
  8713  001776  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8714  001778  0E1F               	movlw	31
  8715  00177A  6E19               	movwf	SETxAPIxVAL@index,c
  8716  00177C  0E00               	movlw	0
  8717  00177E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8718  001780  0E00               	movlw	0
  8719  001782  6E1B               	movwf	SETxAPIxVAL@value,c
  8720  001784  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  8721                           
  8722                           ;io.c: 165: break;
  8723  001788  D054               	goto	l893
  8724  00178A  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8725  00178C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8726  00178E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8727  001790  0E00               	movlw	0
  8728  001792  6E14               	movwf	GETxAPIxVAL@index+1,c
  8729  001794  0E1B               	movlw	27
  8730  001796  6E13               	movwf	GETxAPIxVAL@index,c
  8731  001798  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8732  00179C  501F               	movf	??_Debounce_Inputs,w,c
  8733  00179E  5C13               	subwf	?_GETxAPIxVAL,w,c
  8734  0017A0  5020               	movf	??_Debounce_Inputs+1,w,c
  8735  0017A2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8736  0017A4  A0D8               	btfss	status,0,c
  8737  0017A6  D002               	goto	l890
  8738                           
  8739                           ;io.c: 168: {
  8740                           ;io.c: 169: Reed_Contact_LF_Counter++;
  8741  0017A8  2A3E               	incf	_Reed_Contact_LF_Counter,f,c
  8742                           
  8743                           ;io.c: 171: }
  8744                           
  8745                           ;io.c: 170: break;
  8746  0017AA  D043               	goto	l893
  8747  0017AC                     l890:
  8748                           
  8749                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  8750  0017AC  0E00               	movlw	0
  8751  0017AE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8752  0017B0  0E1F               	movlw	31
  8753  0017B2  6E19               	movwf	SETxAPIxVAL@index,c
  8754  0017B4  0E00               	movlw	0
  8755  0017B6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8756  0017B8  0E01               	movlw	1
  8757  0017BA  6E1B               	movwf	SETxAPIxVAL@value,c
  8758  0017BC  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  8759                           
  8760                           ;io.c: 176: }
  8761                           
  8762                           ;io.c: 175: default : break;
  8763                           
  8764                           ;io.c: 173: break;
  8765  0017C0  D038               	goto	l893
  8766  0017C2                     l884:
  8767  0017C2  A283               	btfss	3971,1,c	;volatile
  8768  0017C4  D002               	goto	u7460
  8769  0017C6  0E01               	movlw	1
  8770  0017C8  D001               	goto	u7466
  8771  0017CA                     u7460:
  8772  0017CA  0E00               	movlw	0
  8773  0017CC                     u7466:
  8774                           
  8775                           ; Switch size 1, requested type "space"
  8776                           ; Number of cases is 2, Range of values is 0 to 1
  8777                           ; switch strategies available:
  8778                           ; Name         Instructions Cycles
  8779                           ; simple_byte            7     4 (average)
  8780                           ;	Chosen strategy is simple_byte
  8781  0017CC  0A00               	xorlw	0	; case 0
  8782  0017CE  B4D8               	btfsc	status,2,c
  8783  0017D0  D7DC               	goto	l889
  8784  0017D2  0A01               	xorlw	1	; case 1
  8785  0017D4  B4D8               	btfsc	status,2,c
  8786  0017D6  D7C9               	goto	l885
  8787                           
  8788                           ;io.c: 179: switch(PORTDbits.RD0)
  8789  0017D8  D02C               	goto	l893
  8790  0017DA  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8791  0017DC  B4D8               	btfsc	status,2,c
  8792  0017DE  D002               	goto	l895
  8793                           
  8794                           ;io.c: 182: {
  8795                           ;io.c: 183: Reed_Contact_LB_Counter--;
  8796  0017E0  063D               	decf	_Reed_Contact_LB_Counter,f,c
  8797                           
  8798                           ;io.c: 185: }
  8799                           
  8800                           ;io.c: 184: break;
  8801  0017E2  D05F               	goto	l902
  8802  0017E4                     l895:
  8803                           
  8804                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  8805  0017E4  0E00               	movlw	0
  8806  0017E6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8807  0017E8  0E1E               	movlw	30
  8808  0017EA  6E19               	movwf	SETxAPIxVAL@index,c
  8809  0017EC  0E00               	movlw	0
  8810  0017EE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8811  0017F0  0E00               	movlw	0
  8812  0017F2  6E1B               	movwf	SETxAPIxVAL@value,c
  8813  0017F4  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  8814                           
  8815                           ;io.c: 187: break;
  8816  0017F8  D054               	goto	l902
  8817  0017FA  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8818  0017FC  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8819  0017FE  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8820  001800  0E00               	movlw	0
  8821  001802  6E14               	movwf	GETxAPIxVAL@index+1,c
  8822  001804  0E1B               	movlw	27
  8823  001806  6E13               	movwf	GETxAPIxVAL@index,c
  8824  001808  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8825  00180C  501F               	movf	??_Debounce_Inputs,w,c
  8826  00180E  5C13               	subwf	?_GETxAPIxVAL,w,c
  8827  001810  5020               	movf	??_Debounce_Inputs+1,w,c
  8828  001812  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8829  001814  A0D8               	btfss	status,0,c
  8830  001816  D002               	goto	l899
  8831                           
  8832                           ;io.c: 190: {
  8833                           ;io.c: 191: Reed_Contact_LB_Counter++;
  8834  001818  2A3D               	incf	_Reed_Contact_LB_Counter,f,c
  8835                           
  8836                           ;io.c: 193: }
  8837                           
  8838                           ;io.c: 192: break;
  8839  00181A  D043               	goto	l902
  8840  00181C                     l899:
  8841                           
  8842                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  8843  00181C  0E00               	movlw	0
  8844  00181E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8845  001820  0E1E               	movlw	30
  8846  001822  6E19               	movwf	SETxAPIxVAL@index,c
  8847  001824  0E00               	movlw	0
  8848  001826  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8849  001828  0E01               	movlw	1
  8850  00182A  6E1B               	movwf	SETxAPIxVAL@value,c
  8851  00182C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  8852                           
  8853                           ;io.c: 198: }
  8854                           
  8855                           ;io.c: 197: default : break;
  8856                           
  8857                           ;io.c: 195: break;
  8858  001830  D038               	goto	l902
  8859  001832                     l893:
  8860  001832  A083               	btfss	3971,0,c	;volatile
  8861  001834  D002               	goto	u7490
  8862  001836  0E01               	movlw	1
  8863  001838  D001               	goto	u7496
  8864  00183A                     u7490:
  8865  00183A  0E00               	movlw	0
  8866  00183C                     u7496:
  8867                           
  8868                           ; Switch size 1, requested type "space"
  8869                           ; Number of cases is 2, Range of values is 0 to 1
  8870                           ; switch strategies available:
  8871                           ; Name         Instructions Cycles
  8872                           ; simple_byte            7     4 (average)
  8873                           ;	Chosen strategy is simple_byte
  8874  00183C  0A00               	xorlw	0	; case 0
  8875  00183E  B4D8               	btfsc	status,2,c
  8876  001840  D7DC               	goto	l898
  8877  001842  0A01               	xorlw	1	; case 1
  8878  001844  B4D8               	btfsc	status,2,c
  8879  001846  D7C9               	goto	l894
  8880                           
  8881                           ;io.c: 201: switch(PORTDbits.RD3)
  8882  001848  D02C               	goto	l902
  8883  00184A  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8884  00184C  B4D8               	btfsc	status,2,c
  8885  00184E  D002               	goto	l904
  8886                           
  8887                           ;io.c: 204: {
  8888                           ;io.c: 205: Reed_Contact_RF_Counter--;
  8889  001850  063C               	decf	_Reed_Contact_RF_Counter,f,c
  8890                           
  8891                           ;io.c: 207: }
  8892                           
  8893                           ;io.c: 206: break;
  8894  001852  D05F               	goto	l911
  8895  001854                     l904:
  8896                           
  8897                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  8898  001854  0E00               	movlw	0
  8899  001856  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8900  001858  0E1D               	movlw	29
  8901  00185A  6E19               	movwf	SETxAPIxVAL@index,c
  8902  00185C  0E00               	movlw	0
  8903  00185E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8904  001860  0E00               	movlw	0
  8905  001862  6E1B               	movwf	SETxAPIxVAL@value,c
  8906  001864  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  8907                           
  8908                           ;io.c: 209: break;
  8909  001868  D054               	goto	l911
  8910  00186A  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8911  00186C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8912  00186E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8913  001870  0E00               	movlw	0
  8914  001872  6E14               	movwf	GETxAPIxVAL@index+1,c
  8915  001874  0E1B               	movlw	27
  8916  001876  6E13               	movwf	GETxAPIxVAL@index,c
  8917  001878  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  8918  00187C  501F               	movf	??_Debounce_Inputs,w,c
  8919  00187E  5C13               	subwf	?_GETxAPIxVAL,w,c
  8920  001880  5020               	movf	??_Debounce_Inputs+1,w,c
  8921  001882  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8922  001884  A0D8               	btfss	status,0,c
  8923  001886  D002               	goto	l908
  8924                           
  8925                           ;io.c: 212: {
  8926                           ;io.c: 213: Reed_Contact_RF_Counter++;
  8927  001888  2A3C               	incf	_Reed_Contact_RF_Counter,f,c
  8928                           
  8929                           ;io.c: 215: }
  8930                           
  8931                           ;io.c: 214: break;
  8932  00188A  D043               	goto	l911
  8933  00188C                     l908:
  8934                           
  8935                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  8936  00188C  0E00               	movlw	0
  8937  00188E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8938  001890  0E1D               	movlw	29
  8939  001892  6E19               	movwf	SETxAPIxVAL@index,c
  8940  001894  0E00               	movlw	0
  8941  001896  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8942  001898  0E01               	movlw	1
  8943  00189A  6E1B               	movwf	SETxAPIxVAL@value,c
  8944  00189C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  8945                           
  8946                           ;io.c: 220: }
  8947                           
  8948                           ;io.c: 219: default : break;
  8949                           
  8950                           ;io.c: 217: break;
  8951  0018A0  D038               	goto	l911
  8952  0018A2                     l902:
  8953  0018A2  A683               	btfss	3971,3,c	;volatile
  8954  0018A4  D002               	goto	u7520
  8955  0018A6  0E01               	movlw	1
  8956  0018A8  D001               	goto	u7526
  8957  0018AA                     u7520:
  8958  0018AA  0E00               	movlw	0
  8959  0018AC                     u7526:
  8960                           
  8961                           ; Switch size 1, requested type "space"
  8962                           ; Number of cases is 2, Range of values is 0 to 1
  8963                           ; switch strategies available:
  8964                           ; Name         Instructions Cycles
  8965                           ; simple_byte            7     4 (average)
  8966                           ;	Chosen strategy is simple_byte
  8967  0018AC  0A00               	xorlw	0	; case 0
  8968  0018AE  B4D8               	btfsc	status,2,c
  8969  0018B0  D7DC               	goto	l907
  8970  0018B2  0A01               	xorlw	1	; case 1
  8971  0018B4  B4D8               	btfsc	status,2,c
  8972  0018B6  D7C9               	goto	l903
  8973                           
  8974                           ;io.c: 223: switch(PORTDbits.RD2)
  8975  0018B8  D02C               	goto	l911
  8976  0018BA  503B               	movf	_Reed_Contact_RB_Counter,w,c
  8977  0018BC  B4D8               	btfsc	status,2,c
  8978  0018BE  D002               	goto	l913
  8979                           
  8980                           ;io.c: 226: {
  8981                           ;io.c: 227: Reed_Contact_RB_Counter--;
  8982  0018C0  063B               	decf	_Reed_Contact_RB_Counter,f,c
  8983                           
  8984                           ;io.c: 229: }
  8985                           
  8986                           ;io.c: 228: break;
  8987  0018C2  D05F               	goto	l920
  8988  0018C4                     l913:
  8989                           
  8990                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  8991  0018C4  0E00               	movlw	0
  8992  0018C6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8993  0018C8  0E1C               	movlw	28
  8994  0018CA  6E19               	movwf	SETxAPIxVAL@index,c
  8995  0018CC  0E00               	movlw	0
  8996  0018CE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8997  0018D0  0E00               	movlw	0
  8998  0018D2  6E1B               	movwf	SETxAPIxVAL@value,c
  8999  0018D4  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9000                           
  9001                           ;io.c: 231: break;
  9002  0018D8  D054               	goto	l920
  9003  0018DA  503B               	movf	_Reed_Contact_RB_Counter,w,c
  9004  0018DC  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9005  0018DE  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9006  0018E0  0E00               	movlw	0
  9007  0018E2  6E14               	movwf	GETxAPIxVAL@index+1,c
  9008  0018E4  0E1B               	movlw	27
  9009  0018E6  6E13               	movwf	GETxAPIxVAL@index,c
  9010  0018E8  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9011  0018EC  501F               	movf	??_Debounce_Inputs,w,c
  9012  0018EE  5C13               	subwf	?_GETxAPIxVAL,w,c
  9013  0018F0  5020               	movf	??_Debounce_Inputs+1,w,c
  9014  0018F2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9015  0018F4  A0D8               	btfss	status,0,c
  9016  0018F6  D002               	goto	l917
  9017                           
  9018                           ;io.c: 234: {
  9019                           ;io.c: 235: Reed_Contact_RB_Counter++;
  9020  0018F8  2A3B               	incf	_Reed_Contact_RB_Counter,f,c
  9021                           
  9022                           ;io.c: 237: }
  9023                           
  9024                           ;io.c: 236: break;
  9025  0018FA  D043               	goto	l920
  9026  0018FC                     l917:
  9027                           
  9028                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  9029  0018FC  0E00               	movlw	0
  9030  0018FE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9031  001900  0E1C               	movlw	28
  9032  001902  6E19               	movwf	SETxAPIxVAL@index,c
  9033  001904  0E00               	movlw	0
  9034  001906  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9035  001908  0E01               	movlw	1
  9036  00190A  6E1B               	movwf	SETxAPIxVAL@value,c
  9037  00190C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9038                           
  9039                           ;io.c: 242: }
  9040                           
  9041                           ;io.c: 241: default : break;
  9042                           
  9043                           ;io.c: 239: break;
  9044  001910  D038               	goto	l920
  9045  001912                     l911:
  9046  001912  A483               	btfss	3971,2,c	;volatile
  9047  001914  D002               	goto	u7550
  9048  001916  0E01               	movlw	1
  9049  001918  D001               	goto	u7556
  9050  00191A                     u7550:
  9051  00191A  0E00               	movlw	0
  9052  00191C                     u7556:
  9053                           
  9054                           ; Switch size 1, requested type "space"
  9055                           ; Number of cases is 2, Range of values is 0 to 1
  9056                           ; switch strategies available:
  9057                           ; Name         Instructions Cycles
  9058                           ; simple_byte            7     4 (average)
  9059                           ;	Chosen strategy is simple_byte
  9060  00191C  0A00               	xorlw	0	; case 0
  9061  00191E  B4D8               	btfsc	status,2,c
  9062  001920  D7DC               	goto	l916
  9063  001922  0A01               	xorlw	1	; case 1
  9064  001924  B4D8               	btfsc	status,2,c
  9065  001926  D7C9               	goto	l912
  9066                           
  9067                           ;io.c: 245: switch(!PORTBbits.RB0)
  9068  001928  D02C               	goto	l920
  9069  00192A  5036               	movf	_Button_Contact_Counter_Start,w,c
  9070  00192C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9071  00192E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9072  001930  0E00               	movlw	0
  9073  001932  6E14               	movwf	GETxAPIxVAL@index+1,c
  9074  001934  0E1B               	movlw	27
  9075  001936  6E13               	movwf	GETxAPIxVAL@index,c
  9076  001938  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9077  00193C  501F               	movf	??_Debounce_Inputs,w,c
  9078  00193E  5C13               	subwf	?_GETxAPIxVAL,w,c
  9079  001940  5020               	movf	??_Debounce_Inputs+1,w,c
  9080  001942  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9081  001944  A0D8               	btfss	status,0,c
  9082  001946  D002               	goto	l922
  9083                           
  9084                           ;io.c: 248: {
  9085                           ;io.c: 249: Button_Contact_Counter_Start++;
  9086  001948  2A36               	incf	_Button_Contact_Counter_Start,f,c
  9087                           
  9088                           ;io.c: 251: }
  9089                           
  9090                           ;io.c: 250: break;
  9091  00194A  D05A               	goto	l929
  9092  00194C                     l922:
  9093                           
  9094                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  9095  00194C  0E00               	movlw	0
  9096  00194E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9097  001950  0E20               	movlw	32
  9098  001952  6E19               	movwf	SETxAPIxVAL@index,c
  9099  001954  0E00               	movlw	0
  9100  001956  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9101  001958  0E01               	movlw	1
  9102  00195A  6E1B               	movwf	SETxAPIxVAL@value,c
  9103  00195C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9104                           
  9105                           ;io.c: 253: break;
  9106  001960  D04F               	goto	l929
  9107  001962  5036               	movf	_Button_Contact_Counter_Start,w,c
  9108  001964  B4D8               	btfsc	status,2,c
  9109  001966  D002               	goto	l926
  9110                           
  9111                           ;io.c: 256: {
  9112                           ;io.c: 257: Button_Contact_Counter_Start--;
  9113  001968  0636               	decf	_Button_Contact_Counter_Start,f,c
  9114                           
  9115                           ;io.c: 259: }
  9116                           
  9117                           ;io.c: 258: break;
  9118  00196A  D04A               	goto	l929
  9119  00196C                     l926:
  9120                           
  9121                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  9122  00196C  0E00               	movlw	0
  9123  00196E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9124  001970  0E20               	movlw	32
  9125  001972  6E19               	movwf	SETxAPIxVAL@index,c
  9126  001974  0E00               	movlw	0
  9127  001976  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9128  001978  0E00               	movlw	0
  9129  00197A  6E1B               	movwf	SETxAPIxVAL@value,c
  9130  00197C  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9131                           
  9132                           ;io.c: 264: }
  9133                           
  9134                           ;io.c: 263: default : break;
  9135                           
  9136                           ;io.c: 261: break;
  9137  001980  D03F               	goto	l929
  9138  001982                     l920:
  9139  001982  B081               	btfsc	3969,0,c	;volatile
  9140  001984  D002               	goto	u7580
  9141  001986  0E01               	movlw	1
  9142  001988  D001               	goto	u7590
  9143  00198A                     u7580:
  9144  00198A  0E00               	movlw	0
  9145  00198C                     u7590:
  9146  00198C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9147  00198E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9148                           
  9149                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9150                           ; Switch size 1, requested type "space"
  9151                           ; Number of cases is 1, Range of values is 0 to 0
  9152                           ; switch strategies available:
  9153                           ; Name         Instructions Cycles
  9154                           ; simple_byte            4     3 (average)
  9155                           ;	Chosen strategy is simple_byte
  9156  001990  5020               	movf	??_Debounce_Inputs+1,w,c
  9157  001992  0A00               	xorlw	0	; case 0
  9158  001994  A4D8               	btfss	status,2,c
  9159  001996  D034               	goto	l929
  9160                           
  9161                           ; Switch size 1, requested type "space"
  9162                           ; Number of cases is 2, Range of values is 0 to 1
  9163                           ; switch strategies available:
  9164                           ; Name         Instructions Cycles
  9165                           ; simple_byte            7     4 (average)
  9166                           ;	Chosen strategy is simple_byte
  9167  001998  501F               	movf	??_Debounce_Inputs,w,c
  9168  00199A  0A00               	xorlw	0	; case 0
  9169  00199C  B4D8               	btfsc	status,2,c
  9170  00199E  D7E1               	goto	l925
  9171  0019A0  0A01               	xorlw	1	; case 1
  9172  0019A2  B4D8               	btfsc	status,2,c
  9173  0019A4  D7C2               	goto	l921
  9174                           
  9175                           ;io.c: 267: switch(!PORTDbits.RD7)
  9176  0019A6  D02C               	goto	l929
  9177  0019A8  5035               	movf	_Button_Contact_Counter_Stop,w,c
  9178  0019AA  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9179  0019AC  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9180  0019AE  0E00               	movlw	0
  9181  0019B0  6E14               	movwf	GETxAPIxVAL@index+1,c
  9182  0019B2  0E1B               	movlw	27
  9183  0019B4  6E13               	movwf	GETxAPIxVAL@index,c
  9184  0019B6  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9185  0019BA  501F               	movf	??_Debounce_Inputs,w,c
  9186  0019BC  5C13               	subwf	?_GETxAPIxVAL,w,c
  9187  0019BE  5020               	movf	??_Debounce_Inputs+1,w,c
  9188  0019C0  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9189  0019C2  A0D8               	btfss	status,0,c
  9190  0019C4  D002               	goto	l931
  9191                           
  9192                           ;io.c: 270: {
  9193                           ;io.c: 271: Button_Contact_Counter_Stop++;
  9194  0019C6  2A35               	incf	_Button_Contact_Counter_Stop,f,c
  9195                           
  9196                           ;io.c: 273: }
  9197                           
  9198                           ;io.c: 272: break;
  9199  0019C8  D05A               	goto	l938
  9200  0019CA                     l931:
  9201                           
  9202                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  9203  0019CA  0E00               	movlw	0
  9204  0019CC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9205  0019CE  0E21               	movlw	33
  9206  0019D0  6E19               	movwf	SETxAPIxVAL@index,c
  9207  0019D2  0E00               	movlw	0
  9208  0019D4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9209  0019D6  0E01               	movlw	1
  9210  0019D8  6E1B               	movwf	SETxAPIxVAL@value,c
  9211  0019DA  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9212                           
  9213                           ;io.c: 275: break;
  9214  0019DE  D04F               	goto	l938
  9215  0019E0  5035               	movf	_Button_Contact_Counter_Stop,w,c
  9216  0019E2  B4D8               	btfsc	status,2,c
  9217  0019E4  D002               	goto	l935
  9218                           
  9219                           ;io.c: 278: {
  9220                           ;io.c: 279: Button_Contact_Counter_Stop--;
  9221  0019E6  0635               	decf	_Button_Contact_Counter_Stop,f,c
  9222                           
  9223                           ;io.c: 281: }
  9224                           
  9225                           ;io.c: 280: break;
  9226  0019E8  D04A               	goto	l938
  9227  0019EA                     l935:
  9228                           
  9229                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  9230  0019EA  0E00               	movlw	0
  9231  0019EC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9232  0019EE  0E21               	movlw	33
  9233  0019F0  6E19               	movwf	SETxAPIxVAL@index,c
  9234  0019F2  0E00               	movlw	0
  9235  0019F4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9236  0019F6  0E00               	movlw	0
  9237  0019F8  6E1B               	movwf	SETxAPIxVAL@value,c
  9238  0019FA  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9239                           
  9240                           ;io.c: 286: }
  9241                           
  9242                           ;io.c: 285: default : break;
  9243                           
  9244                           ;io.c: 283: break;
  9245  0019FE  D03F               	goto	l938
  9246  001A00                     l929:
  9247  001A00  BE83               	btfsc	3971,7,c	;volatile
  9248  001A02  D002               	goto	u7620
  9249  001A04  0E01               	movlw	1
  9250  001A06  D001               	goto	u7630
  9251  001A08                     u7620:
  9252  001A08  0E00               	movlw	0
  9253  001A0A                     u7630:
  9254  001A0A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9255  001A0C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9256                           
  9257                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9258                           ; Switch size 1, requested type "space"
  9259                           ; Number of cases is 1, Range of values is 0 to 0
  9260                           ; switch strategies available:
  9261                           ; Name         Instructions Cycles
  9262                           ; simple_byte            4     3 (average)
  9263                           ;	Chosen strategy is simple_byte
  9264  001A0E  5020               	movf	??_Debounce_Inputs+1,w,c
  9265  001A10  0A00               	xorlw	0	; case 0
  9266  001A12  A4D8               	btfss	status,2,c
  9267  001A14  D034               	goto	l938
  9268                           
  9269                           ; Switch size 1, requested type "space"
  9270                           ; Number of cases is 2, Range of values is 0 to 1
  9271                           ; switch strategies available:
  9272                           ; Name         Instructions Cycles
  9273                           ; simple_byte            7     4 (average)
  9274                           ;	Chosen strategy is simple_byte
  9275  001A16  501F               	movf	??_Debounce_Inputs,w,c
  9276  001A18  0A00               	xorlw	0	; case 0
  9277  001A1A  B4D8               	btfsc	status,2,c
  9278  001A1C  D7E1               	goto	l934
  9279  001A1E  0A01               	xorlw	1	; case 1
  9280  001A20  B4D8               	btfsc	status,2,c
  9281  001A22  D7C2               	goto	l930
  9282                           
  9283                           ;io.c: 289: switch(!PORTBbits.RB1)
  9284  001A24  D02C               	goto	l938
  9285  001A26  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9286  001A28  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9287  001A2A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9288  001A2C  0E00               	movlw	0
  9289  001A2E  6E14               	movwf	GETxAPIxVAL@index+1,c
  9290  001A30  0E1B               	movlw	27
  9291  001A32  6E13               	movwf	GETxAPIxVAL@index,c
  9292  001A34  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9293  001A38  501F               	movf	??_Debounce_Inputs,w,c
  9294  001A3A  5C13               	subwf	?_GETxAPIxVAL,w,c
  9295  001A3C  5020               	movf	??_Debounce_Inputs+1,w,c
  9296  001A3E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9297  001A40  A0D8               	btfss	status,0,c
  9298  001A42  D002               	goto	l940
  9299                           
  9300                           ;io.c: 292: {
  9301                           ;io.c: 293: Button_Contact_Counter_Middle++;
  9302  001A44  2A34               	incf	_Button_Contact_Counter_Middle,f,c
  9303                           
  9304                           ;io.c: 295: }
  9305                           
  9306                           ;io.c: 294: break;
  9307  001A46  D05A               	goto	l947
  9308  001A48                     l940:
  9309                           
  9310                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  9311  001A48  0E00               	movlw	0
  9312  001A4A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9313  001A4C  0E22               	movlw	34
  9314  001A4E  6E19               	movwf	SETxAPIxVAL@index,c
  9315  001A50  0E00               	movlw	0
  9316  001A52  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9317  001A54  0E01               	movlw	1
  9318  001A56  6E1B               	movwf	SETxAPIxVAL@value,c
  9319  001A58  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9320                           
  9321                           ;io.c: 297: break;
  9322  001A5C  D04F               	goto	l947
  9323  001A5E  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9324  001A60  B4D8               	btfsc	status,2,c
  9325  001A62  D002               	goto	l944
  9326                           
  9327                           ;io.c: 300: {
  9328                           ;io.c: 301: Button_Contact_Counter_Middle--;
  9329  001A64  0634               	decf	_Button_Contact_Counter_Middle,f,c
  9330                           
  9331                           ;io.c: 303: }
  9332                           
  9333                           ;io.c: 302: break;
  9334  001A66  D04A               	goto	l947
  9335  001A68                     l944:
  9336                           
  9337                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  9338  001A68  0E00               	movlw	0
  9339  001A6A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9340  001A6C  0E22               	movlw	34
  9341  001A6E  6E19               	movwf	SETxAPIxVAL@index,c
  9342  001A70  0E00               	movlw	0
  9343  001A72  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9344  001A74  0E00               	movlw	0
  9345  001A76  6E1B               	movwf	SETxAPIxVAL@value,c
  9346  001A78  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9347                           
  9348                           ;io.c: 308: }
  9349                           
  9350                           ;io.c: 307: default : break;
  9351                           
  9352                           ;io.c: 305: break;
  9353  001A7C  D03F               	goto	l947
  9354  001A7E                     l938:
  9355  001A7E  B281               	btfsc	3969,1,c	;volatile
  9356  001A80  D002               	goto	u7660
  9357  001A82  0E01               	movlw	1
  9358  001A84  D001               	goto	u7670
  9359  001A86                     u7660:
  9360  001A86  0E00               	movlw	0
  9361  001A88                     u7670:
  9362  001A88  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9363  001A8A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9364                           
  9365                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9366                           ; Switch size 1, requested type "space"
  9367                           ; Number of cases is 1, Range of values is 0 to 0
  9368                           ; switch strategies available:
  9369                           ; Name         Instructions Cycles
  9370                           ; simple_byte            4     3 (average)
  9371                           ;	Chosen strategy is simple_byte
  9372  001A8C  5020               	movf	??_Debounce_Inputs+1,w,c
  9373  001A8E  0A00               	xorlw	0	; case 0
  9374  001A90  A4D8               	btfss	status,2,c
  9375  001A92  D034               	goto	l947
  9376                           
  9377                           ; Switch size 1, requested type "space"
  9378                           ; Number of cases is 2, Range of values is 0 to 1
  9379                           ; switch strategies available:
  9380                           ; Name         Instructions Cycles
  9381                           ; simple_byte            7     4 (average)
  9382                           ;	Chosen strategy is simple_byte
  9383  001A94  501F               	movf	??_Debounce_Inputs,w,c
  9384  001A96  0A00               	xorlw	0	; case 0
  9385  001A98  B4D8               	btfsc	status,2,c
  9386  001A9A  D7E1               	goto	l943
  9387  001A9C  0A01               	xorlw	1	; case 1
  9388  001A9E  B4D8               	btfsc	status,2,c
  9389  001AA0  D7C2               	goto	l939
  9390                           
  9391                           ;io.c: 311: switch(!PORTBbits.RB5)
  9392  001AA2  D02C               	goto	l947
  9393  001AA4  5033               	movf	_Button_Contact_Counter_LB,w,c
  9394  001AA6  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9395  001AA8  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9396  001AAA  0E00               	movlw	0
  9397  001AAC  6E14               	movwf	GETxAPIxVAL@index+1,c
  9398  001AAE  0E1B               	movlw	27
  9399  001AB0  6E13               	movwf	GETxAPIxVAL@index,c
  9400  001AB2  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9401  001AB6  501F               	movf	??_Debounce_Inputs,w,c
  9402  001AB8  5C13               	subwf	?_GETxAPIxVAL,w,c
  9403  001ABA  5020               	movf	??_Debounce_Inputs+1,w,c
  9404  001ABC  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9405  001ABE  A0D8               	btfss	status,0,c
  9406  001AC0  D002               	goto	l949
  9407                           
  9408                           ;io.c: 314: {
  9409                           ;io.c: 315: Button_Contact_Counter_LB++;
  9410  001AC2  2A33               	incf	_Button_Contact_Counter_LB,f,c
  9411                           
  9412                           ;io.c: 317: }
  9413                           
  9414                           ;io.c: 316: break;
  9415  001AC4  D05A               	goto	l956
  9416  001AC6                     l949:
  9417                           
  9418                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  9419  001AC6  0E00               	movlw	0
  9420  001AC8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9421  001ACA  0E23               	movlw	35
  9422  001ACC  6E19               	movwf	SETxAPIxVAL@index,c
  9423  001ACE  0E00               	movlw	0
  9424  001AD0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9425  001AD2  0E01               	movlw	1
  9426  001AD4  6E1B               	movwf	SETxAPIxVAL@value,c
  9427  001AD6  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9428                           
  9429                           ;io.c: 319: break;
  9430  001ADA  D04F               	goto	l956
  9431  001ADC  5033               	movf	_Button_Contact_Counter_LB,w,c
  9432  001ADE  B4D8               	btfsc	status,2,c
  9433  001AE0  D002               	goto	l953
  9434                           
  9435                           ;io.c: 322: {
  9436                           ;io.c: 323: Button_Contact_Counter_LB--;
  9437  001AE2  0633               	decf	_Button_Contact_Counter_LB,f,c
  9438                           
  9439                           ;io.c: 325: }
  9440                           
  9441                           ;io.c: 324: break;
  9442  001AE4  D04A               	goto	l956
  9443  001AE6                     l953:
  9444                           
  9445                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  9446  001AE6  0E00               	movlw	0
  9447  001AE8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9448  001AEA  0E23               	movlw	35
  9449  001AEC  6E19               	movwf	SETxAPIxVAL@index,c
  9450  001AEE  0E00               	movlw	0
  9451  001AF0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9452  001AF2  0E00               	movlw	0
  9453  001AF4  6E1B               	movwf	SETxAPIxVAL@value,c
  9454  001AF6  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9455                           
  9456                           ;io.c: 330: }
  9457                           
  9458                           ;io.c: 329: default : break;
  9459                           
  9460                           ;io.c: 327: break;
  9461  001AFA  D03F               	goto	l956
  9462  001AFC                     l947:
  9463  001AFC  BA81               	btfsc	3969,5,c	;volatile
  9464  001AFE  D002               	goto	u7700
  9465  001B00  0E01               	movlw	1
  9466  001B02  D001               	goto	u7710
  9467  001B04                     u7700:
  9468  001B04  0E00               	movlw	0
  9469  001B06                     u7710:
  9470  001B06  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9471  001B08  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9472                           
  9473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9474                           ; Switch size 1, requested type "space"
  9475                           ; Number of cases is 1, Range of values is 0 to 0
  9476                           ; switch strategies available:
  9477                           ; Name         Instructions Cycles
  9478                           ; simple_byte            4     3 (average)
  9479                           ;	Chosen strategy is simple_byte
  9480  001B0A  5020               	movf	??_Debounce_Inputs+1,w,c
  9481  001B0C  0A00               	xorlw	0	; case 0
  9482  001B0E  A4D8               	btfss	status,2,c
  9483  001B10  D034               	goto	l956
  9484                           
  9485                           ; Switch size 1, requested type "space"
  9486                           ; Number of cases is 2, Range of values is 0 to 1
  9487                           ; switch strategies available:
  9488                           ; Name         Instructions Cycles
  9489                           ; simple_byte            7     4 (average)
  9490                           ;	Chosen strategy is simple_byte
  9491  001B12  501F               	movf	??_Debounce_Inputs,w,c
  9492  001B14  0A00               	xorlw	0	; case 0
  9493  001B16  B4D8               	btfsc	status,2,c
  9494  001B18  D7E1               	goto	l952
  9495  001B1A  0A01               	xorlw	1	; case 1
  9496  001B1C  B4D8               	btfsc	status,2,c
  9497  001B1E  D7C2               	goto	l948
  9498                           
  9499                           ;io.c: 333: switch(!PORTBbits.RB4)
  9500  001B20  D02C               	goto	l956
  9501  001B22  5032               	movf	_Button_Contact_Counter_LF,w,c
  9502  001B24  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9503  001B26  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9504  001B28  0E00               	movlw	0
  9505  001B2A  6E14               	movwf	GETxAPIxVAL@index+1,c
  9506  001B2C  0E1B               	movlw	27
  9507  001B2E  6E13               	movwf	GETxAPIxVAL@index,c
  9508  001B30  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9509  001B34  501F               	movf	??_Debounce_Inputs,w,c
  9510  001B36  5C13               	subwf	?_GETxAPIxVAL,w,c
  9511  001B38  5020               	movf	??_Debounce_Inputs+1,w,c
  9512  001B3A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9513  001B3C  A0D8               	btfss	status,0,c
  9514  001B3E  D002               	goto	l958
  9515                           
  9516                           ;io.c: 336: {
  9517                           ;io.c: 337: Button_Contact_Counter_LF++;
  9518  001B40  2A32               	incf	_Button_Contact_Counter_LF,f,c
  9519                           
  9520                           ;io.c: 339: }
  9521                           
  9522                           ;io.c: 338: break;
  9523  001B42  D05A               	goto	l965
  9524  001B44                     l958:
  9525                           
  9526                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  9527  001B44  0E00               	movlw	0
  9528  001B46  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9529  001B48  0E24               	movlw	36
  9530  001B4A  6E19               	movwf	SETxAPIxVAL@index,c
  9531  001B4C  0E00               	movlw	0
  9532  001B4E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9533  001B50  0E01               	movlw	1
  9534  001B52  6E1B               	movwf	SETxAPIxVAL@value,c
  9535  001B54  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9536                           
  9537                           ;io.c: 341: break;
  9538  001B58  D04F               	goto	l965
  9539  001B5A  5032               	movf	_Button_Contact_Counter_LF,w,c
  9540  001B5C  B4D8               	btfsc	status,2,c
  9541  001B5E  D002               	goto	l962
  9542                           
  9543                           ;io.c: 344: {
  9544                           ;io.c: 345: Button_Contact_Counter_LF--;
  9545  001B60  0632               	decf	_Button_Contact_Counter_LF,f,c
  9546                           
  9547                           ;io.c: 347: }
  9548                           
  9549                           ;io.c: 346: break;
  9550  001B62  D04A               	goto	l965
  9551  001B64                     l962:
  9552                           
  9553                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  9554  001B64  0E00               	movlw	0
  9555  001B66  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9556  001B68  0E24               	movlw	36
  9557  001B6A  6E19               	movwf	SETxAPIxVAL@index,c
  9558  001B6C  0E00               	movlw	0
  9559  001B6E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9560  001B70  0E00               	movlw	0
  9561  001B72  6E1B               	movwf	SETxAPIxVAL@value,c
  9562  001B74  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9563                           
  9564                           ;io.c: 352: }
  9565                           
  9566                           ;io.c: 351: default : break;
  9567                           
  9568                           ;io.c: 349: break;
  9569  001B78  D03F               	goto	l965
  9570  001B7A                     l956:
  9571  001B7A  B881               	btfsc	3969,4,c	;volatile
  9572  001B7C  D002               	goto	u7740
  9573  001B7E  0E01               	movlw	1
  9574  001B80  D001               	goto	u7750
  9575  001B82                     u7740:
  9576  001B82  0E00               	movlw	0
  9577  001B84                     u7750:
  9578  001B84  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9579  001B86  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9580                           
  9581                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9582                           ; Switch size 1, requested type "space"
  9583                           ; Number of cases is 1, Range of values is 0 to 0
  9584                           ; switch strategies available:
  9585                           ; Name         Instructions Cycles
  9586                           ; simple_byte            4     3 (average)
  9587                           ;	Chosen strategy is simple_byte
  9588  001B88  5020               	movf	??_Debounce_Inputs+1,w,c
  9589  001B8A  0A00               	xorlw	0	; case 0
  9590  001B8C  A4D8               	btfss	status,2,c
  9591  001B8E  D034               	goto	l965
  9592                           
  9593                           ; Switch size 1, requested type "space"
  9594                           ; Number of cases is 2, Range of values is 0 to 1
  9595                           ; switch strategies available:
  9596                           ; Name         Instructions Cycles
  9597                           ; simple_byte            7     4 (average)
  9598                           ;	Chosen strategy is simple_byte
  9599  001B90  501F               	movf	??_Debounce_Inputs,w,c
  9600  001B92  0A00               	xorlw	0	; case 0
  9601  001B94  B4D8               	btfsc	status,2,c
  9602  001B96  D7E1               	goto	l961
  9603  001B98  0A01               	xorlw	1	; case 1
  9604  001B9A  B4D8               	btfsc	status,2,c
  9605  001B9C  D7C2               	goto	l957
  9606                           
  9607                           ;io.c: 355: switch(!PORTBbits.RB3)
  9608  001B9E  D02C               	goto	l965
  9609  001BA0  5031               	movf	_Button_Contact_Counter_RB,w,c
  9610  001BA2  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9611  001BA4  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9612  001BA6  0E00               	movlw	0
  9613  001BA8  6E14               	movwf	GETxAPIxVAL@index+1,c
  9614  001BAA  0E1B               	movlw	27
  9615  001BAC  6E13               	movwf	GETxAPIxVAL@index,c
  9616  001BAE  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9617  001BB2  501F               	movf	??_Debounce_Inputs,w,c
  9618  001BB4  5C13               	subwf	?_GETxAPIxVAL,w,c
  9619  001BB6  5020               	movf	??_Debounce_Inputs+1,w,c
  9620  001BB8  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9621  001BBA  A0D8               	btfss	status,0,c
  9622  001BBC  D002               	goto	l967
  9623                           
  9624                           ;io.c: 358: {
  9625                           ;io.c: 359: Button_Contact_Counter_RB++;
  9626  001BBE  2A31               	incf	_Button_Contact_Counter_RB,f,c
  9627                           
  9628                           ;io.c: 361: }
  9629                           
  9630                           ;io.c: 360: break;
  9631  001BC0  D05A               	goto	l974
  9632  001BC2                     l967:
  9633                           
  9634                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  9635  001BC2  0E00               	movlw	0
  9636  001BC4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9637  001BC6  0E25               	movlw	37
  9638  001BC8  6E19               	movwf	SETxAPIxVAL@index,c
  9639  001BCA  0E00               	movlw	0
  9640  001BCC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9641  001BCE  0E01               	movlw	1
  9642  001BD0  6E1B               	movwf	SETxAPIxVAL@value,c
  9643  001BD2  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9644                           
  9645                           ;io.c: 363: break;
  9646  001BD6  D04F               	goto	l974
  9647  001BD8  5031               	movf	_Button_Contact_Counter_RB,w,c
  9648  001BDA  B4D8               	btfsc	status,2,c
  9649  001BDC  D002               	goto	l971
  9650                           
  9651                           ;io.c: 366: {
  9652                           ;io.c: 367: Button_Contact_Counter_RB--;
  9653  001BDE  0631               	decf	_Button_Contact_Counter_RB,f,c
  9654                           
  9655                           ;io.c: 369: }
  9656                           
  9657                           ;io.c: 368: break;
  9658  001BE0  D04A               	goto	l974
  9659  001BE2                     l971:
  9660                           
  9661                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  9662  001BE2  0E00               	movlw	0
  9663  001BE4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9664  001BE6  0E25               	movlw	37
  9665  001BE8  6E19               	movwf	SETxAPIxVAL@index,c
  9666  001BEA  0E00               	movlw	0
  9667  001BEC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9668  001BEE  0E00               	movlw	0
  9669  001BF0  6E1B               	movwf	SETxAPIxVAL@value,c
  9670  001BF2  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9671                           
  9672                           ;io.c: 374: }
  9673                           
  9674                           ;io.c: 373: default : break;
  9675                           
  9676                           ;io.c: 371: break;
  9677  001BF6  D03F               	goto	l974
  9678  001BF8                     l965:
  9679  001BF8  B681               	btfsc	3969,3,c	;volatile
  9680  001BFA  D002               	goto	u7780
  9681  001BFC  0E01               	movlw	1
  9682  001BFE  D001               	goto	u7790
  9683  001C00                     u7780:
  9684  001C00  0E00               	movlw	0
  9685  001C02                     u7790:
  9686  001C02  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9687  001C04  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9688                           
  9689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9690                           ; Switch size 1, requested type "space"
  9691                           ; Number of cases is 1, Range of values is 0 to 0
  9692                           ; switch strategies available:
  9693                           ; Name         Instructions Cycles
  9694                           ; simple_byte            4     3 (average)
  9695                           ;	Chosen strategy is simple_byte
  9696  001C06  5020               	movf	??_Debounce_Inputs+1,w,c
  9697  001C08  0A00               	xorlw	0	; case 0
  9698  001C0A  A4D8               	btfss	status,2,c
  9699  001C0C  D034               	goto	l974
  9700                           
  9701                           ; Switch size 1, requested type "space"
  9702                           ; Number of cases is 2, Range of values is 0 to 1
  9703                           ; switch strategies available:
  9704                           ; Name         Instructions Cycles
  9705                           ; simple_byte            7     4 (average)
  9706                           ;	Chosen strategy is simple_byte
  9707  001C0E  501F               	movf	??_Debounce_Inputs,w,c
  9708  001C10  0A00               	xorlw	0	; case 0
  9709  001C12  B4D8               	btfsc	status,2,c
  9710  001C14  D7E1               	goto	l970
  9711  001C16  0A01               	xorlw	1	; case 1
  9712  001C18  B4D8               	btfsc	status,2,c
  9713  001C1A  D7C2               	goto	l966
  9714                           
  9715                           ;io.c: 377: switch(!PORTBbits.RB2)
  9716  001C1C  D02C               	goto	l974
  9717  001C1E  5030               	movf	_Button_Contact_Counter_RF,w,c
  9718  001C20  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9719  001C22  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9720  001C24  0E00               	movlw	0
  9721  001C26  6E14               	movwf	GETxAPIxVAL@index+1,c
  9722  001C28  0E1B               	movlw	27
  9723  001C2A  6E13               	movwf	GETxAPIxVAL@index,c
  9724  001C2C  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9725  001C30  501F               	movf	??_Debounce_Inputs,w,c
  9726  001C32  5C13               	subwf	?_GETxAPIxVAL,w,c
  9727  001C34  5020               	movf	??_Debounce_Inputs+1,w,c
  9728  001C36  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9729  001C38  A0D8               	btfss	status,0,c
  9730  001C3A  D002               	goto	l976
  9731                           
  9732                           ;io.c: 380: {
  9733                           ;io.c: 381: Button_Contact_Counter_RF++;
  9734  001C3C  2A30               	incf	_Button_Contact_Counter_RF,f,c
  9735                           
  9736                           ;io.c: 383: }
  9737                           
  9738                           ;io.c: 382: break;
  9739  001C3E  D05A               	goto	l983
  9740  001C40                     l976:
  9741                           
  9742                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  9743  001C40  0E00               	movlw	0
  9744  001C42  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9745  001C44  0E26               	movlw	38
  9746  001C46  6E19               	movwf	SETxAPIxVAL@index,c
  9747  001C48  0E00               	movlw	0
  9748  001C4A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9749  001C4C  0E01               	movlw	1
  9750  001C4E  6E1B               	movwf	SETxAPIxVAL@value,c
  9751  001C50  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9752                           
  9753                           ;io.c: 385: break;
  9754  001C54  D04F               	goto	l983
  9755  001C56  5030               	movf	_Button_Contact_Counter_RF,w,c
  9756  001C58  B4D8               	btfsc	status,2,c
  9757  001C5A  D002               	goto	l980
  9758                           
  9759                           ;io.c: 388: {
  9760                           ;io.c: 389: Button_Contact_Counter_RF--;
  9761  001C5C  0630               	decf	_Button_Contact_Counter_RF,f,c
  9762                           
  9763                           ;io.c: 391: }
  9764                           
  9765                           ;io.c: 390: break;
  9766  001C5E  D04A               	goto	l983
  9767  001C60                     l980:
  9768                           
  9769                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  9770  001C60  0E00               	movlw	0
  9771  001C62  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9772  001C64  0E26               	movlw	38
  9773  001C66  6E19               	movwf	SETxAPIxVAL@index,c
  9774  001C68  0E00               	movlw	0
  9775  001C6A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9776  001C6C  0E00               	movlw	0
  9777  001C6E  6E1B               	movwf	SETxAPIxVAL@value,c
  9778  001C70  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9779                           
  9780                           ;io.c: 396: }
  9781                           
  9782                           ;io.c: 395: default : break;
  9783                           
  9784                           ;io.c: 393: break;
  9785  001C74  D03F               	goto	l983
  9786  001C76                     l974:
  9787  001C76  B481               	btfsc	3969,2,c	;volatile
  9788  001C78  D002               	goto	u7820
  9789  001C7A  0E01               	movlw	1
  9790  001C7C  D001               	goto	u7830
  9791  001C7E                     u7820:
  9792  001C7E  0E00               	movlw	0
  9793  001C80                     u7830:
  9794  001C80  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9795  001C82  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9796                           
  9797                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9798                           ; Switch size 1, requested type "space"
  9799                           ; Number of cases is 1, Range of values is 0 to 0
  9800                           ; switch strategies available:
  9801                           ; Name         Instructions Cycles
  9802                           ; simple_byte            4     3 (average)
  9803                           ;	Chosen strategy is simple_byte
  9804  001C84  5020               	movf	??_Debounce_Inputs+1,w,c
  9805  001C86  0A00               	xorlw	0	; case 0
  9806  001C88  A4D8               	btfss	status,2,c
  9807  001C8A  D034               	goto	l983
  9808                           
  9809                           ; Switch size 1, requested type "space"
  9810                           ; Number of cases is 2, Range of values is 0 to 1
  9811                           ; switch strategies available:
  9812                           ; Name         Instructions Cycles
  9813                           ; simple_byte            7     4 (average)
  9814                           ;	Chosen strategy is simple_byte
  9815  001C8C  501F               	movf	??_Debounce_Inputs,w,c
  9816  001C8E  0A00               	xorlw	0	; case 0
  9817  001C90  B4D8               	btfsc	status,2,c
  9818  001C92  D7E1               	goto	l979
  9819  001C94  0A01               	xorlw	1	; case 1
  9820  001C96  B4D8               	btfsc	status,2,c
  9821  001C98  D7C2               	goto	l975
  9822                           
  9823                           ;io.c: 399: switch(PORTCbits.RC1)
  9824  001C9A  D02C               	goto	l983
  9825  001C9C  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9826  001C9E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9827  001CA0  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9828  001CA2  0E00               	movlw	0
  9829  001CA4  6E14               	movwf	GETxAPIxVAL@index+1,c
  9830  001CA6  0E1B               	movlw	27
  9831  001CA8  6E13               	movwf	GETxAPIxVAL@index,c
  9832  001CAA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9833  001CAE  501F               	movf	??_Debounce_Inputs,w,c
  9834  001CB0  5C13               	subwf	?_GETxAPIxVAL,w,c
  9835  001CB2  5020               	movf	??_Debounce_Inputs+1,w,c
  9836  001CB4  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9837  001CB6  A0D8               	btfss	status,0,c
  9838  001CB8  D002               	goto	l985
  9839                           
  9840                           ;io.c: 402: {
  9841                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  9842  001CBA  2A3A               	incf	_Reed_Contact_LMU_Counter,f,c
  9843                           
  9844                           ;io.c: 405: }
  9845                           
  9846                           ;io.c: 404: break;
  9847  001CBC  D053               	goto	l992
  9848  001CBE                     l985:
  9849                           
  9850                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  9851  001CBE  0E00               	movlw	0
  9852  001CC0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9853  001CC2  0E29               	movlw	41
  9854  001CC4  6E19               	movwf	SETxAPIxVAL@index,c
  9855  001CC6  0E00               	movlw	0
  9856  001CC8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9857  001CCA  0E01               	movlw	1
  9858  001CCC  6E1B               	movwf	SETxAPIxVAL@value,c
  9859  001CCE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9860                           
  9861                           ;io.c: 407: break;
  9862  001CD2  D048               	goto	l992
  9863  001CD4  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9864  001CD6  B4D8               	btfsc	status,2,c
  9865  001CD8  D002               	goto	l989
  9866                           
  9867                           ;io.c: 410: {
  9868                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  9869  001CDA  063A               	decf	_Reed_Contact_LMU_Counter,f,c
  9870                           
  9871                           ;io.c: 413: }
  9872                           
  9873                           ;io.c: 412: break;
  9874  001CDC  D043               	goto	l992
  9875  001CDE                     l989:
  9876                           
  9877                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  9878  001CDE  0E00               	movlw	0
  9879  001CE0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9880  001CE2  0E29               	movlw	41
  9881  001CE4  6E19               	movwf	SETxAPIxVAL@index,c
  9882  001CE6  0E00               	movlw	0
  9883  001CE8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9884  001CEA  0E00               	movlw	0
  9885  001CEC  6E1B               	movwf	SETxAPIxVAL@value,c
  9886  001CEE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9887                           
  9888                           ;io.c: 418: }
  9889                           
  9890                           ;io.c: 417: default : break;
  9891                           
  9892                           ;io.c: 415: break;
  9893  001CF2  D038               	goto	l992
  9894  001CF4                     l983:
  9895  001CF4  A282               	btfss	3970,1,c	;volatile
  9896  001CF6  D002               	goto	u7860
  9897  001CF8  0E01               	movlw	1
  9898  001CFA  D001               	goto	u7866
  9899  001CFC                     u7860:
  9900  001CFC  0E00               	movlw	0
  9901  001CFE                     u7866:
  9902                           
  9903                           ; Switch size 1, requested type "space"
  9904                           ; Number of cases is 2, Range of values is 0 to 1
  9905                           ; switch strategies available:
  9906                           ; Name         Instructions Cycles
  9907                           ; simple_byte            7     4 (average)
  9908                           ;	Chosen strategy is simple_byte
  9909  001CFE  0A00               	xorlw	0	; case 0
  9910  001D00  B4D8               	btfsc	status,2,c
  9911  001D02  D7CC               	goto	l984
  9912  001D04  0A01               	xorlw	1	; case 1
  9913  001D06  B4D8               	btfsc	status,2,c
  9914  001D08  D7E5               	goto	l988
  9915                           
  9916                           ;io.c: 421: switch(PORTDbits.RD4)
  9917  001D0A  D02C               	goto	l992
  9918  001D0C  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9919  001D0E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9920  001D10  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9921  001D12  0E00               	movlw	0
  9922  001D14  6E14               	movwf	GETxAPIxVAL@index+1,c
  9923  001D16  0E1B               	movlw	27
  9924  001D18  6E13               	movwf	GETxAPIxVAL@index,c
  9925  001D1A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
  9926  001D1E  501F               	movf	??_Debounce_Inputs,w,c
  9927  001D20  5C13               	subwf	?_GETxAPIxVAL,w,c
  9928  001D22  5020               	movf	??_Debounce_Inputs+1,w,c
  9929  001D24  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9930  001D26  A0D8               	btfss	status,0,c
  9931  001D28  D002               	goto	l994
  9932                           
  9933                           ;io.c: 424: {
  9934                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  9935  001D2A  2A39               	incf	_Reed_Contact_LMD_Counter,f,c
  9936                           
  9937                           ;io.c: 427: }
  9938                           
  9939                           ;io.c: 426: break;
  9940  001D2C  D053               	goto	l1001
  9941  001D2E                     l994:
  9942                           
  9943                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  9944  001D2E  0E00               	movlw	0
  9945  001D30  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9946  001D32  0E2A               	movlw	42
  9947  001D34  6E19               	movwf	SETxAPIxVAL@index,c
  9948  001D36  0E00               	movlw	0
  9949  001D38  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9950  001D3A  0E01               	movlw	1
  9951  001D3C  6E1B               	movwf	SETxAPIxVAL@value,c
  9952  001D3E  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9953                           
  9954                           ;io.c: 429: break;
  9955  001D42  D048               	goto	l1001
  9956  001D44  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9957  001D46  B4D8               	btfsc	status,2,c
  9958  001D48  D002               	goto	l998
  9959                           
  9960                           ;io.c: 432: {
  9961                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  9962  001D4A  0639               	decf	_Reed_Contact_LMD_Counter,f,c
  9963                           
  9964                           ;io.c: 435: }
  9965                           
  9966                           ;io.c: 434: break;
  9967  001D4C  D043               	goto	l1001
  9968  001D4E                     l998:
  9969                           
  9970                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9971  001D4E  0E00               	movlw	0
  9972  001D50  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9973  001D52  0E2A               	movlw	42
  9974  001D54  6E19               	movwf	SETxAPIxVAL@index,c
  9975  001D56  0E00               	movlw	0
  9976  001D58  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9977  001D5A  0E00               	movlw	0
  9978  001D5C  6E1B               	movwf	SETxAPIxVAL@value,c
  9979  001D5E  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
  9980                           
  9981                           ;io.c: 440: }
  9982                           
  9983                           ;io.c: 439: default : break;
  9984                           
  9985                           ;io.c: 437: break;
  9986  001D62  D038               	goto	l1001
  9987  001D64                     l992:
  9988  001D64  A883               	btfss	3971,4,c	;volatile
  9989  001D66  D002               	goto	u7890
  9990  001D68  0E01               	movlw	1
  9991  001D6A  D001               	goto	u7896
  9992  001D6C                     u7890:
  9993  001D6C  0E00               	movlw	0
  9994  001D6E                     u7896:
  9995                           
  9996                           ; Switch size 1, requested type "space"
  9997                           ; Number of cases is 2, Range of values is 0 to 1
  9998                           ; switch strategies available:
  9999                           ; Name         Instructions Cycles
 10000                           ; simple_byte            7     4 (average)
 10001                           ;	Chosen strategy is simple_byte
 10002  001D6E  0A00               	xorlw	0	; case 0
 10003  001D70  B4D8               	btfsc	status,2,c
 10004  001D72  D7CC               	goto	l993
 10005  001D74  0A01               	xorlw	1	; case 1
 10006  001D76  B4D8               	btfsc	status,2,c
 10007  001D78  D7E5               	goto	l997
 10008                           
 10009                           ;io.c: 443: switch(PORTEbits.RE1)
 10010  001D7A  D02C               	goto	l1001
 10011  001D7C  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10012  001D7E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10013  001D80  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10014  001D82  0E00               	movlw	0
 10015  001D84  6E14               	movwf	GETxAPIxVAL@index+1,c
 10016  001D86  0E1B               	movlw	27
 10017  001D88  6E13               	movwf	GETxAPIxVAL@index,c
 10018  001D8A  EC50  F022         	call	_GETxAPIxVAL	;wreg free
 10019  001D8E  501F               	movf	??_Debounce_Inputs,w,c
 10020  001D90  5C13               	subwf	?_GETxAPIxVAL,w,c
 10021  001D92  5020               	movf	??_Debounce_Inputs+1,w,c
 10022  001D94  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10023  001D96  A0D8               	btfss	status,0,c
 10024  001D98  D002               	goto	l1003
 10025                           
 10026                           ;io.c: 446: {
 10027                           ;io.c: 447: Reed_Contact_RMU_Counter++;
 10028  001D9A  2A38               	incf	_Reed_Contact_RMU_Counter,f,c
 10029                           
 10030                           ;io.c: 449: }
 10031                           
 10032                           ;io.c: 448: break;
 10033  001D9C  D053               	goto	l1010
 10034  001D9E                     l1003:
 10035                           
 10036                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
 10037  001D9E  0E00               	movlw	0
 10038  001DA0  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10039  001DA2  0E2B               	movlw	43
 10040  001DA4  6E19               	movwf	SETxAPIxVAL@index,c
 10041  001DA6  0E00               	movlw	0
 10042  001DA8  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10043  001DAA  0E01               	movlw	1
 10044  001DAC  6E1B               	movwf	SETxAPIxVAL@value,c
 10045  001DAE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
 10046                           
 10047                           ;io.c: 451: break;
 10048  001DB2  D048               	goto	l1010
 10049  001DB4  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10050  001DB6  B4D8               	btfsc	status,2,c
 10051  001DB8  D002               	goto	l1007
 10052                           
 10053                           ;io.c: 454: {
 10054                           ;io.c: 455: Reed_Contact_RMU_Counter--;
 10055  001DBA  0638               	decf	_Reed_Contact_RMU_Counter,f,c
 10056                           
 10057                           ;io.c: 457: }
 10058                           
 10059                           ;io.c: 456: break;
 10060  001DBC  D043               	goto	l1010
 10061  001DBE                     l1007:
 10062                           
 10063                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
 10064  001DBE  0E00               	movlw	0
 10065  001DC0  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10066  001DC2  0E2B               	movlw	43
 10067  001DC4  6E19               	movwf	SETxAPIxVAL@index,c
 10068  001DC6  0E00               	movlw	0
 10069  001DC8  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10070  001DCA  0E00               	movlw	0
 10071  001DCC  6E1B               	movwf	SETxAPIxVAL@value,c
 10072  001DCE  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
 10073                           
 10074                           ;io.c: 462: }
 10075                           
 10076                           ;io.c: 461: default : break;
 10077                           
 10078                           ;io.c: 459: break;
 10079  001DD2  D038               	goto	l1010
 10080  001DD4                     l1001:
 10081  001DD4  A284               	btfss	3972,1,c	;volatile
 10082  001DD6  D002               	goto	u7920
 10083  001DD8  0E01               	movlw	1
 10084  001DDA  D001               	goto	u7926
 10085  001DDC                     u7920:
 10086  001DDC  0E00               	movlw	0
 10087  001DDE                     u7926:
 10088                           
 10089                           ; Switch size 1, requested type "space"
 10090                           ; Number of cases is 2, Range of values is 0 to 1
 10091                           ; switch strategies available:
 10092                           ; Name         Instructions Cycles
 10093                           ; simple_byte            7     4 (average)
 10094                           ;	Chosen strategy is simple_byte
 10095  001DDE  0A00               	xorlw	0	; case 0
 10096  001DE0  B4D8               	btfsc	status,2,c
 10097  001DE2  D7CC               	goto	l1002
 10098  001DE4  0A01               	xorlw	1	; case 1
 10099  001DE6  B4D8               	btfsc	status,2,c
 10100  001DE8  D7E5               	goto	l1006
 10101                           
 10102                           ;io.c: 465: switch(PORTEbits.RE0)
 10103  001DEA  D02C               	goto	l1010
 10104  001DEC  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10105  001DEE  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10106  001DF0  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10107  001DF2  0E00               	movlw	0
 10108  001DF4  6E14               	movwf	GETxAPIxVAL@index+1,c
 10109  001DF6  0E1B               	movlw	27
 10110  001DF8  6E13               	movwf	GETxAPIxVAL@index,c
 10111  001DFA  EC50  F022         	call	_GETxAPIxVAL	;wreg free
 10112  001DFE  501F               	movf	??_Debounce_Inputs,w,c
 10113  001E00  5C13               	subwf	?_GETxAPIxVAL,w,c
 10114  001E02  5020               	movf	??_Debounce_Inputs+1,w,c
 10115  001E04  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10116  001E06  A0D8               	btfss	status,0,c
 10117  001E08  D002               	goto	l1012
 10118                           
 10119                           ;io.c: 468: {
 10120                           ;io.c: 469: Reed_Contact_RMD_Counter++;
 10121  001E0A  2A37               	incf	_Reed_Contact_RMD_Counter,f,c
 10122                           
 10123                           ;io.c: 471: }
 10124                           
 10125                           ;io.c: 470: break;
 10126  001E0C  0012               	return	
 10127  001E0E                     l1012:
 10128                           
 10129                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
 10130  001E0E  0E00               	movlw	0
 10131  001E10  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10132  001E12  0E2C               	movlw	44
 10133  001E14  6E19               	movwf	SETxAPIxVAL@index,c
 10134  001E16  0E00               	movlw	0
 10135  001E18  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10136  001E1A  0E01               	movlw	1
 10137  001E1C  6E1B               	movwf	SETxAPIxVAL@value,c
 10138  001E1E  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
 10139                           
 10140                           ;io.c: 473: break;
 10141  001E22  0012               	return	
 10142  001E24  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10143  001E26  B4D8               	btfsc	status,2,c
 10144  001E28  D002               	goto	l1016
 10145                           
 10146                           ;io.c: 476: {
 10147                           ;io.c: 477: Reed_Contact_RMD_Counter--;
 10148  001E2A  0637               	decf	_Reed_Contact_RMD_Counter,f,c
 10149                           
 10150                           ;io.c: 479: }
 10151                           
 10152                           ;io.c: 478: break;
 10153  001E2C  0012               	return	
 10154  001E2E                     l1016:
 10155                           
 10156                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
 10157  001E2E  0E00               	movlw	0
 10158  001E30  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10159  001E32  0E2C               	movlw	44
 10160  001E34  6E19               	movwf	SETxAPIxVAL@index,c
 10161  001E36  0E00               	movlw	0
 10162  001E38  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10163  001E3A  0E00               	movlw	0
 10164  001E3C  6E1B               	movwf	SETxAPIxVAL@value,c
 10165  001E3E  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
 10166                           
 10167                           ;io.c: 484: }
 10168                           
 10169                           ;io.c: 483: default : break;
 10170                           
 10171                           ;io.c: 481: break;
 10172  001E42  0012               	return	
 10173  001E44                     l1010:
 10174  001E44  A084               	btfss	3972,0,c	;volatile
 10175  001E46  D002               	goto	u7950
 10176  001E48  0E01               	movlw	1
 10177  001E4A  D001               	goto	u7956
 10178  001E4C                     u7950:
 10179  001E4C  0E00               	movlw	0
 10180  001E4E                     u7956:
 10181                           
 10182                           ; Switch size 1, requested type "space"
 10183                           ; Number of cases is 2, Range of values is 0 to 1
 10184                           ; switch strategies available:
 10185                           ; Name         Instructions Cycles
 10186                           ; simple_byte            7     4 (average)
 10187                           ;	Chosen strategy is simple_byte
 10188  001E4E  0A00               	xorlw	0	; case 0
 10189  001E50  B4D8               	btfsc	status,2,c
 10190  001E52  D7CC               	goto	l1011
 10191  001E54  0A01               	xorlw	1	; case 1
 10192  001E56  A4D8               	btfss	status,2,c
 10193  001E58  0012               	return	
 10194  001E5A  D7E4               	goto	l1015
 10195  001E5C                     __end_of_Debounce_Inputs:
 10196                           	opt stack 0
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           postinc1	equ	0xFE6
 10207                           postdec1	equ	0xFE5
 10208                           fsr1h	equ	0xFE2
 10209                           fsr1l	equ	0xFE1
 10210                           postinc2	equ	0xFDE
 10211                           postdec2	equ	0xFDD
 10212                           fsr2h	equ	0xFDA
 10213                           fsr2l	equ	0xFD9
 10214                           status	equ	0xFD8
 10215                           
 10216 ;; *************** function _SetDCPWM1 *****************
 10217 ;; Defined at:
 10218 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic18\plib\PWM\pw1setdc.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;  dutycycle       2   20[COMRAM] unsigned int 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;  DCycle          2   24[COMRAM] struct PWMDC
 10223 ;; Return value:  Size  Location     Type
 10224 ;;                  1    wreg      void 
 10225 ;; Registers used:
 10226 ;;		wreg, status,2, status,0
 10227 ;; Tracked objects:
 10228 ;;		On entry : 0/0
 10229 ;;		On exit  : 0/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10232 ;;      Params:         2       0       0       0       0       0       0       0       0
 10233 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10234 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10235 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10236 ;;Total ram usage:        6 bytes
 10237 ;; Hardware stack levels used:    1
 10238 ;; Hardware stack levels required when called:    3
 10239 ;; This function calls:
 10240 ;;		Nothing
 10241 ;; This function is called by:
 10242 ;;		_Debounce_Inputs
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           	psect	text18
 10247  00434C                     __ptext18:
 10248                           	opt stack 0
 10249  00434C                     _SetDCPWM1:
 10250                           	opt stack 25
 10251                           
 10252                           ;incstack = 0
 10253  00434C  C015  F017         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
 10254  004350  C016  F018         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
 10255  004354  0E06               	movlw	6
 10256  004356                     u4115:
 10257  004356  90D8               	bcf	status,0,c
 10258  004358  3617               	rlcf	??_SetDCPWM1,f,c
 10259  00435A  3618               	rlcf	??_SetDCPWM1+1,f,c
 10260  00435C  2EE8               	decfsz	wreg,f,c
 10261  00435E  D7FB               	goto	u4115
 10262  004360  C017  F019         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
 10263  004364  C018  F01A         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
 10264  004368  C01A  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
 10265  00436C  C019  F017         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
 10266  004370  90D8               	bcf	status,0,c
 10267  004372  3217               	rrcf	??_SetDCPWM1,f,c
 10268  004374  90D8               	bcf	status,0,c
 10269  004376  3217               	rrcf	??_SetDCPWM1,f,c
 10270  004378  0E30               	movlw	48
 10271  00437A  1617               	andwf	??_SetDCPWM1,f,c
 10272  00437C  50BD               	movf	4029,w,c	;volatile
 10273  00437E  0BCF               	andlw	207
 10274  004380  1017               	iorwf	??_SetDCPWM1,w,c
 10275  004382  6EBD               	movwf	4029,c	;volatile
 10276  004384  0012               	return		;funcret
 10277  004386                     __end_of_SetDCPWM1:
 10278                           	opt stack 0
 10279                           tblptru	equ	0xFF8
 10280                           tblptrh	equ	0xFF7
 10281                           tblptrl	equ	0xFF6
 10282                           tablat	equ	0xFF5
 10283                           prodh	equ	0xFF4
 10284                           prodl	equ	0xFF3
 10285                           intcon	equ	0xFF2
 10286                           postinc0	equ	0xFEE
 10287                           wreg	equ	0xFE8
 10288                           postinc1	equ	0xFE6
 10289                           postdec1	equ	0xFE5
 10290                           fsr1h	equ	0xFE2
 10291                           fsr1l	equ	0xFE1
 10292                           postinc2	equ	0xFDE
 10293                           postdec2	equ	0xFDD
 10294                           fsr2h	equ	0xFDA
 10295                           fsr2l	equ	0xFD9
 10296                           status	equ	0xFD8
 10297                           
 10298 ;; *************** function _READxRECEIVEDxMESSAGE *****************
 10299 ;; Defined at:
 10300 ;;		line 39 in file "../terminal.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;		None
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;		None
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  1    wreg      void 
 10307 ;; Registers used:
 10308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10314 ;;      Params:         0       0       0       0       0       0       0       0       0
 10315 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10316 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10317 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10318 ;;Total ram usage:        4 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    6
 10321 ;; This function calls:
 10322 ;;		_EUSART1_Read
 10323 ;;		_TranslateMessage
 10324 ;;		_printf
 10325 ;; This function is called by:
 10326 ;;		_main
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           	psect	text19
 10331  00388C                     __ptext19:
 10332                           	opt stack 0
 10333  00388C                     _READxRECEIVEDxMESSAGE:
 10334                           	opt stack 24
 10335                           
 10336                           ;terminal.c: 41: if ((eusart1RxCount) > 0){
 10337                           
 10338                           ;incstack = 0
 10339  00388C  503F               	movf	_eusart1RxCount,w,c	;volatile
 10340  00388E  B4D8               	btfsc	status,2,c
 10341  003890  D07B               	goto	l622
 10342                           
 10343                           ;terminal.c: 44: Received_Data = EUSART1_Read();
 10344  003892  ECC3  F021         	call	_EUSART1_Read	;wreg free
 10345  003896  0100               	movlb	0	; () banked
 10346  003898  6F88               	movwf	_Received_Data& (0+255),b
 10347                           
 10348                           ;terminal.c: 46: switch (RxSwitch){
 10349  00389A  D06B               	goto	l616
 10350  00389C                     
 10351                           ; BSR set to: 0
 10352                           ;terminal.c: 48: pData = &Data[0];
 10353                           
 10354                           ; BSR set to: 0
 10355  00389C  0EB2               	movlw	low _Data
 10356  00389E  6F7C               	movwf	_pData& (0+255),b
 10357  0038A0  0E00               	movlw	high _Data
 10358  0038A2  6F7D               	movwf	(_pData+1)& (0+255),b
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;terminal.c: 49: pLen = &Data[DataLen - 1];
 10362  0038A4  0EFF               	movlw	255
 10363  0038A6  6FDE               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
 10364  0038A8  0EFF               	movlw	255
 10365  0038AA  6FDF               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
 10366  0038AC  0E43               	movlw	low _DataLen
 10367  0038AE  6EF6               	movwf	tblptrl,c
 10368  0038B0                     	if	1	;There is more than 1 active tblptr byte
 10369  0038B0  0E08               	movlw	high _DataLen
 10370  0038B2  6EF7               	movwf	tblptrh,c
 10371  0038B4                     	endif
 10372  0038B4                     	if	0	;There are less than 3 active tblptr bytes
 10373  0038B4                     	endif
 10374  0038B4  0008               	tblrd		*
 10375  0038B6  50F5               	movf	tablat,w,c
 10376  0038B8  6FE0               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
 10377  0038BA  6BE1               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
 10378  0038BC  51DE               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
 10379  0038BE  27E0               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
 10380  0038C0  51DF               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
 10381  0038C2  23E1               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
 10382  0038C4  0EB2               	movlw	low _Data
 10383  0038C6  25E0               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
 10384  0038C8  6F7A               	movwf	_pLen& (0+255),b
 10385  0038CA  0E00               	movlw	high _Data
 10386  0038CC  21E1               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
 10387  0038CE  6F7B               	movwf	(_pLen+1)& (0+255),b
 10388                           
 10389                           ; BSR set to: 0
 10390                           ;terminal.c: 50: if (Received_Data == 's' || Received_Data == 'g'){
 10391  0038D0  0E73               	movlw	115
 10392  0038D2  1988               	xorwf	_Received_Data& (0+255),w,b
 10393  0038D4  B4D8               	btfsc	status,2,c
 10394  0038D6  D004               	goto	u9390
 10395                           
 10396                           ; BSR set to: 0
 10397  0038D8  0E67               	movlw	103
 10398  0038DA  1988               	xorwf	_Received_Data& (0+255),w,b
 10399  0038DC  A4D8               	btfss	status,2,c
 10400  0038DE  D00A               	goto	l618
 10401  0038E0                     u9390:
 10402                           
 10403                           ; BSR set to: 0
 10404                           ;terminal.c: 51: *pData = Received_Data;
 10405                           
 10406                           ; BSR set to: 0
 10407  0038E0  C07C  FFD9         	movff	_pData,fsr2l
 10408  0038E4  C07D  FFDA         	movff	_pData+1,fsr2h
 10409  0038E8  C088  FFDF         	movff	_Received_Data,indf2
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;terminal.c: 52: *pData++;
 10413  0038EC  4B7C               	infsnz	_pData& (0+255),f,b
 10414  0038EE  2B7D               	incf	(_pData+1)& (0+255),f,b
 10415                           
 10416                           ; BSR set to: 0
 10417                           ;terminal.c: 53: RxSwitch = 1;
 10418  0038F0  0E01               	movlw	1
 10419  0038F2  D03D               	goto	L95
 10420  0038F4                     l618:
 10421                           
 10422                           ; BSR set to: 0
 10423                           ;terminal.c: 55: else{
 10424                           ;terminal.c: 56: RxSwitch = 0;
 10425                           
 10426                           ; BSR set to: 0
 10427  0038F4  0E00               	movlw	0
 10428  0038F6  D03B               	goto	L95
 10429  0038F8                     
 10430                           ; BSR set to: 0
 10431                           ;terminal.c: 61: if (Received_Data == 'x'){
 10432                           
 10433                           ; BSR set to: 0
 10434  0038F8  0E78               	movlw	120
 10435  0038FA  1988               	xorwf	_Received_Data& (0+255),w,b
 10436  0038FC  A4D8               	btfss	status,2,c
 10437  0038FE  D7FA               	goto	l618
 10438                           
 10439                           ; BSR set to: 0
 10440                           ;terminal.c: 62: *pData = Received_Data;
 10441  003900  C07C  FFD9         	movff	_pData,fsr2l
 10442  003904  C07D  FFDA         	movff	_pData+1,fsr2h
 10443  003908  C088  FFDF         	movff	_Received_Data,indf2
 10444  00390C  D02D               	goto	l632
 10445  00390E                     
 10446                           ; BSR set to: 0
 10447                           ;terminal.c: 72: if (Received_Data == 'G'){
 10448                           
 10449                           ; BSR set to: 0
 10450  00390E  0E47               	movlw	71
 10451  003910  1988               	xorwf	_Received_Data& (0+255),w,b
 10452  003912  B4D8               	btfsc	status,2,c
 10453  003914  D009               	goto	l628
 10454  003916  D013               	goto	l627
 10455  003918                     
 10456                           ; BSR set to: 0
 10457                           ;terminal.c: 76: *pData = '\0';
 10458                           
 10459                           ; BSR set to: 0
 10460  003918  C07C  FFD9         	movff	_pData,fsr2l
 10461  00391C  C07D  FFDA         	movff	_pData+1,fsr2h
 10462  003920  0E00               	movlw	0
 10463  003922  6EDF               	movwf	indf2,c
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;terminal.c: 77: pData++;
 10467  003924  4B7C               	infsnz	_pData& (0+255),f,b
 10468  003926  2B7D               	incf	(_pData+1)& (0+255),f,b
 10469  003928                     l628:
 10470                           
 10471                           ; BSR set to: 0
 10472                           
 10473                           ; BSR set to: 0
 10474  003928  517A               	movf	_pLen& (0+255),w,b
 10475  00392A  5D7C               	subwf	_pData& (0+255),w,b
 10476  00392C  517B               	movf	(_pLen+1)& (0+255),w,b
 10477  00392E  597D               	subwfb	(_pData+1)& (0+255),w,b
 10478  003930  A0D8               	btfss	status,0,c
 10479  003932  D7F2               	goto	l629
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;terminal.c: 78: }
 10483                           ;terminal.c: 80: RxSwitch = 3;
 10484                           
 10485                           ; BSR set to: 0
 10486  003934  0E03               	movlw	3
 10487  003936  6F87               	movwf	_RxSwitch& (0+255),b
 10488                           
 10489                           ;terminal.c: 81: Message_To_Translate = 1;
 10490  003938  0E01               	movlw	1
 10491  00393A  6F86               	movwf	_Message_To_Translate& (0+255),b
 10492                           
 10493                           ;terminal.c: 82: }
 10494  00393C  D025               	goto	l622
 10495  00393E                     l627:
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;terminal.c: 83: else{
 10499                           ;terminal.c: 84: *pData = Received_Data;
 10500                           
 10501                           ; BSR set to: 0
 10502  00393E  C07C  FFD9         	movff	_pData,fsr2l
 10503  003942  C07D  FFDA         	movff	_pData+1,fsr2h
 10504  003946  C088  FFDF         	movff	_Received_Data,indf2
 10505                           
 10506                           ; BSR set to: 0
 10507                           ;terminal.c: 85: if (pData > pLen){
 10508  00394A  517C               	movf	_pData& (0+255),w,b
 10509  00394C  5D7A               	subwf	_pLen& (0+255),w,b
 10510  00394E  517D               	movf	(_pData+1)& (0+255),w,b
 10511  003950  597B               	subwfb	(_pLen+1)& (0+255),w,b
 10512  003952  B0D8               	btfsc	status,0,c
 10513  003954  D009               	goto	l632
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;terminal.c: 86: printf("E#10\r\n");
 10517  003956  0E4E               	movlw	low STR_1
 10518  003958  6FD1               	movwf	printf@f& (0+255),b
 10519  00395A  0E08               	movlw	high STR_1
 10520  00395C  6FD2               	movwf	(printf@f+1)& (0+255),b
 10521  00395E  EC9D  F01A         	call	_printf	;wreg free
 10522                           
 10523                           ;terminal.c: 87: RxSwitch = 0;
 10524  003962  0E00               	movlw	0
 10525  003964  0100               	movlb	0	; () banked
 10526  003966  D003               	goto	L95
 10527  003968                     l632:
 10528                           
 10529                           ; BSR set to: 0
 10530                           ;terminal.c: 89: else{
 10531                           ;terminal.c: 90: pData++;
 10532                           
 10533                           ; BSR set to: 0
 10534  003968  4B7C               	infsnz	_pData& (0+255),f,b
 10535  00396A  2B7D               	incf	(_pData+1)& (0+255),f,b
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;terminal.c: 91: RxSwitch = 2;
 10539  00396C  0E02               	movlw	2
 10540  00396E                     L95:
 10541  00396E  6F87               	movwf	_RxSwitch& (0+255),b
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;terminal.c: 101: }
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;terminal.c: 100: break;
 10548                           
 10549                           ;terminal.c: 99: default :
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;terminal.c: 97: break;
 10553                           
 10554                           ;terminal.c: 96: case 3 :
 10555                           
 10556                           ; BSR set to: 0
 10557                           ;terminal.c: 92: }
 10558                           ;terminal.c: 93: }
 10559                           ;terminal.c: 94: break;
 10560                           
 10561                           ; BSR set to: 0
 10562  003970  D00B               	goto	l622
 10563  003972                     l616:
 10564                           
 10565                           ; BSR set to: 0
 10566                           
 10567                           ; BSR set to: 0
 10568  003972  5187               	movf	_RxSwitch& (0+255),w,b
 10569                           
 10570                           ; Switch size 1, requested type "space"
 10571                           ; Number of cases is 4, Range of values is 0 to 3
 10572                           ; switch strategies available:
 10573                           ; Name         Instructions Cycles
 10574                           ; simple_byte           13     7 (average)
 10575                           ;	Chosen strategy is simple_byte
 10576  003974  0A00               	xorlw	0	; case 0
 10577  003976  B4D8               	btfsc	status,2,c
 10578  003978  D791               	goto	l617
 10579  00397A  0A01               	xorlw	1	; case 1
 10580  00397C  B4D8               	btfsc	status,2,c
 10581  00397E  D7BC               	goto	l623
 10582  003980  0A03               	xorlw	3	; case 2
 10583  003982  B4D8               	btfsc	status,2,c
 10584  003984  D7C4               	goto	l626
 10585  003986  0A01               	xorlw	1	; case 3
 10586  003988                     l622:
 10587                           
 10588                           ;terminal.c: 102: }
 10589                           ;terminal.c: 104: if (Message_To_Translate == 1){
 10590                           
 10591                           ; BSR set to: 0
 10592                           
 10593                           ; BSR set to: 0
 10594  003988  0100               	movlb	0	; () banked
 10595  00398A  0586               	decf	_Message_To_Translate& (0+255),w,b
 10596  00398C  A4D8               	btfss	status,2,c
 10597  00398E  0012               	return	
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;terminal.c: 105: TranslateMessage();
 10601  003990  EC77  F017         	call	_TranslateMessage	;wreg free
 10602                           
 10603                           ;terminal.c: 106: Message_To_Translate = 0;
 10604  003994  0E00               	movlw	0
 10605  003996  0100               	movlb	0	; () banked
 10606  003998  6F86               	movwf	_Message_To_Translate& (0+255),b
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;terminal.c: 107: RxSwitch = 0;
 10610  00399A  0E00               	movlw	0
 10611  00399C  6F87               	movwf	_RxSwitch& (0+255),b
 10612  00399E  0012               	return	
 10613  0039A0                     __end_of_READxRECEIVEDxMESSAGE:
 10614                           	opt stack 0
 10615                           tblptru	equ	0xFF8
 10616                           tblptrh	equ	0xFF7
 10617                           tblptrl	equ	0xFF6
 10618                           tablat	equ	0xFF5
 10619                           prodh	equ	0xFF4
 10620                           prodl	equ	0xFF3
 10621                           intcon	equ	0xFF2
 10622                           postinc0	equ	0xFEE
 10623                           wreg	equ	0xFE8
 10624                           postinc1	equ	0xFE6
 10625                           postdec1	equ	0xFE5
 10626                           fsr1h	equ	0xFE2
 10627                           fsr1l	equ	0xFE1
 10628                           indf2	equ	0xFDF
 10629                           postinc2	equ	0xFDE
 10630                           postdec2	equ	0xFDD
 10631                           fsr2h	equ	0xFDA
 10632                           fsr2l	equ	0xFD9
 10633                           status	equ	0xFD8
 10634                           
 10635 ;; *************** function _TranslateMessage *****************
 10636 ;; Defined at:
 10637 ;;		line 125 in file "../terminal.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  Index           2   33[COMRAM] unsigned int 
 10642 ;;  Value           2   31[COMRAM] unsigned int 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  1    wreg      void 
 10645 ;; Registers used:
 10646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10647 ;; Tracked objects:
 10648 ;;		On entry : 0/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10652 ;;      Params:         0       0       0       0       0       0       0       0       0
 10653 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10655 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10656 ;;Total ram usage:        4 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    5
 10659 ;; This function calls:
 10660 ;;		_GETxAPIxRW
 10661 ;;		_GETxAPIxVAL
 10662 ;;		_SENDxMESSAGE
 10663 ;;		_SETxAPIxVALxNoxRET
 10664 ;;		_atoi
 10665 ;;		_printf
 10666 ;; This function is called by:
 10667 ;;		_READxRECEIVEDxMESSAGE
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           	psect	text20
 10672  002EEE                     __ptext20:
 10673                           	opt stack 0
 10674  002EEE                     _TranslateMessage:
 10675                           	opt stack 24
 10676                           
 10677                           ;terminal.c: 127: unsigned int Value, Index;
 10678                           ;terminal.c: 129: if(Data[0] == 's'){
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;incstack = 0
 10682  002EEE  0E73               	movlw	115
 10683  002EF0  0100               	movlb	0	; () banked
 10684  002EF2  19B2               	xorwf	_Data& (0+255),w,b
 10685  002EF4  A4D8               	btfss	status,2,c
 10686  002EF6  D063               	goto	l640
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;terminal.c: 131: pData = &Data[2];
 10690  002EF8  0EB4               	movlw	low (_Data+2)
 10691  002EFA  6F7C               	movwf	_pData& (0+255),b
 10692  002EFC  0E00               	movlw	high (_Data+2)
 10693  002EFE  6F7D               	movwf	(_pData+1)& (0+255),b
 10694                           
 10695                           ; BSR set to: 0
 10696                           ;terminal.c: 132: Index = (unsigned int)atoi (pData);
 10697  002F00  C07C  F019         	movff	_pData,atoi@s
 10698  002F04  C07D  F01A         	movff	_pData+1,atoi@s+1
 10699  002F08  ECBA  F01E         	call	_atoi	;wreg free
 10700  002F0C  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10701  002F10  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10702                           
 10703                           ;terminal.c: 133: pData = &Data[5];
 10704  002F14  0EB7               	movlw	low (_Data+5)
 10705  002F16  0100               	movlb	0	; () banked
 10706  002F18  6F7C               	movwf	_pData& (0+255),b
 10707  002F1A  0E00               	movlw	high (_Data+5)
 10708  002F1C  6F7D               	movwf	(_pData+1)& (0+255),b
 10709                           
 10710                           ;terminal.c: 134: Value = (unsigned int)atoi (pData);
 10711  002F1E  C07C  F019         	movff	_pData,atoi@s
 10712  002F22  C07D  F01A         	movff	_pData+1,atoi@s+1
 10713  002F26  ECBA  F01E         	call	_atoi	;wreg free
 10714  002F2A  C019  F020         	movff	?_atoi,TranslateMessage@Value
 10715  002F2E  C01A  F021         	movff	?_atoi+1,TranslateMessage@Value+1
 10716                           
 10717                           ;terminal.c: 136: if (GETxAPIxRW(Index) == 0){
 10718  002F32  C022  F013         	movff	TranslateMessage@Index,GETxAPIxRW@index
 10719  002F36  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxRW@index+1
 10720  002F3A  EC5E  F022         	call	_GETxAPIxRW	;wreg free
 10721  002F3E  5013               	movf	?_GETxAPIxRW,w,c
 10722  002F40  1014               	iorwf	?_GETxAPIxRW+1,w,c
 10723  002F42  A4D8               	btfss	status,2,c
 10724  002F44  D008               	goto	l641
 10725                           
 10726                           ;terminal.c: 137: printf("E#11\r\n");
 10727  002F46  0E55               	movlw	low STR_2
 10728  002F48  0100               	movlb	0	; () banked
 10729  002F4A  6FD1               	movwf	printf@f& (0+255),b
 10730  002F4C  0E08               	movlw	high STR_2
 10731  002F4E  6FD2               	movwf	(printf@f+1)& (0+255),b
 10732  002F50  EC9D  F01A         	call	_printf	;wreg free
 10733                           
 10734                           ;terminal.c: 138: }
 10735  002F54  0012               	return	
 10736  002F56                     l641:
 10737                           
 10738                           ;terminal.c: 139: else if (Index < 0xF){
 10739  002F56  5023               	movf	TranslateMessage@Index+1,w,c
 10740  002F58  E10C               	bnz	l8866
 10741  002F5A  0E0F               	movlw	15
 10742  002F5C  5C22               	subwf	TranslateMessage@Index,w,c
 10743  002F5E  B0D8               	btfsc	status,0,c
 10744  002F60  D008               	goto	l643
 10745                           
 10746                           ;terminal.c: 140: printf("E#12\r\n");
 10747  002F62  0E5C               	movlw	low STR_3
 10748  002F64  0100               	movlb	0	; () banked
 10749  002F66  6FD1               	movwf	printf@f& (0+255),b
 10750  002F68  0E08               	movlw	high STR_3
 10751  002F6A  6FD2               	movwf	(printf@f+1)& (0+255),b
 10752  002F6C  EC9D  F01A         	call	_printf	;wreg free
 10753                           
 10754                           ;terminal.c: 141: }
 10755  002F70  0012               	return	
 10756  002F72                     l643:
 10757  002F72                     l8866:
 10758                           
 10759                           ;terminal.c: 142: else if (Index > 89){
 10760  002F72  5023               	movf	TranslateMessage@Index+1,w,c
 10761  002F74  E104               	bnz	u8430
 10762  002F76  0E5A               	movlw	90
 10763  002F78  5C22               	subwf	TranslateMessage@Index,w,c
 10764  002F7A  A0D8               	btfss	status,0,c
 10765  002F7C  D008               	goto	l645
 10766  002F7E                     u8430:
 10767                           
 10768                           ;terminal.c: 143: printf("E#13\r\n");
 10769  002F7E  0E63               	movlw	low STR_4
 10770  002F80  0100               	movlb	0	; () banked
 10771  002F82  6FD1               	movwf	printf@f& (0+255),b
 10772  002F84  0E08               	movlw	high STR_4
 10773  002F86  6FD2               	movwf	(printf@f+1)& (0+255),b
 10774  002F88  EC9D  F01A         	call	_printf	;wreg free
 10775                           
 10776                           ;terminal.c: 144: }
 10777  002F8C  0012               	return	
 10778  002F8E                     l645:
 10779                           
 10780                           ;terminal.c: 145: else if (Value > 0xFFFE){
 10781  002F8E  2820               	incf	TranslateMessage@Value,w,c
 10782  002F90  E10B               	bnz	l8874
 10783  002F92  2821               	incf	TranslateMessage@Value+1,w,c
 10784  002F94  A4D8               	btfss	status,2,c
 10785  002F96  D008               	goto	l647
 10786                           
 10787                           ;terminal.c: 146: printf("E#14\r\n");
 10788  002F98  0E6A               	movlw	low STR_5
 10789  002F9A  0100               	movlb	0	; () banked
 10790  002F9C  6FD1               	movwf	printf@f& (0+255),b
 10791  002F9E  0E08               	movlw	high STR_5
 10792  002FA0  6FD2               	movwf	(printf@f+1)& (0+255),b
 10793  002FA2  EC9D  F01A         	call	_printf	;wreg free
 10794                           
 10795                           ;terminal.c: 147: }
 10796  002FA6  0012               	return	
 10797  002FA8                     l647:
 10798  002FA8                     l8874:
 10799                           
 10800                           ;terminal.c: 148: else{
 10801                           ;terminal.c: 149: SETxAPIxVALxNoxRET(Index, Value);
 10802  002FA8  C022  F015         	movff	TranslateMessage@Index,SETxAPIxVALxNoxRET@index
 10803  002FAC  C023  F016         	movff	TranslateMessage@Index+1,SETxAPIxVALxNoxRET@index+1
 10804  002FB0  C020  F017         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 10805  002FB4  C021  F018         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 10806  002FB8  EC88  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
 10807                           
 10808                           ;terminal.c: 150: }
 10809                           ;terminal.c: 151: }
 10810  002FBC  0012               	return	
 10811  002FBE                     l640:
 10812                           
 10813                           ;terminal.c: 153: else if (Data[0] == 'g'){
 10814  002FBE  0E67               	movlw	103
 10815  002FC0  0100               	movlb	0	; () banked
 10816  002FC2  19B2               	xorwf	_Data& (0+255),w,b
 10817  002FC4  A4D8               	btfss	status,2,c
 10818  002FC6  0012               	return	
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;terminal.c: 155: pData = &Data[2];
 10822  002FC8  0EB4               	movlw	low (_Data+2)
 10823  002FCA  6F7C               	movwf	_pData& (0+255),b
 10824  002FCC  0E00               	movlw	high (_Data+2)
 10825  002FCE  6F7D               	movwf	(_pData+1)& (0+255),b
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;terminal.c: 156: Index = (unsigned int)atoi (pData);
 10829  002FD0  C07C  F019         	movff	_pData,atoi@s
 10830  002FD4  C07D  F01A         	movff	_pData+1,atoi@s+1
 10831  002FD8  ECBA  F01E         	call	_atoi	;wreg free
 10832  002FDC  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10833  002FE0  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10834                           
 10835                           ;terminal.c: 158: if (Index < 0xF){
 10836  002FE4  5023               	movf	TranslateMessage@Index+1,w,c
 10837  002FE6  E10C               	bnz	l8886
 10838  002FE8  0E0F               	movlw	15
 10839  002FEA  5C22               	subwf	TranslateMessage@Index,w,c
 10840  002FEC  B0D8               	btfsc	status,0,c
 10841  002FEE  D008               	goto	l651
 10842                           
 10843                           ;terminal.c: 159: printf("E#12\r\n");
 10844  002FF0  0E5C               	movlw	low STR_3
 10845  002FF2  0100               	movlb	0	; () banked
 10846  002FF4  6FD1               	movwf	printf@f& (0+255),b
 10847  002FF6  0E08               	movlw	high STR_3
 10848  002FF8  6FD2               	movwf	(printf@f+1)& (0+255),b
 10849  002FFA  EC9D  F01A         	call	_printf	;wreg free
 10850                           
 10851                           ;terminal.c: 160: }
 10852  002FFE  0012               	return	
 10853  003000                     l651:
 10854  003000                     l8886:
 10855                           
 10856                           ;terminal.c: 161: else if (Index > 89){
 10857  003000  5023               	movf	TranslateMessage@Index+1,w,c
 10858  003002  E104               	bnz	u8470
 10859  003004  0E5A               	movlw	90
 10860  003006  5C22               	subwf	TranslateMessage@Index,w,c
 10861  003008  A0D8               	btfss	status,0,c
 10862  00300A  D008               	goto	l653
 10863  00300C                     u8470:
 10864                           
 10865                           ;terminal.c: 162: printf("E#13\r\n");
 10866  00300C  0E63               	movlw	low STR_4
 10867  00300E  0100               	movlb	0	; () banked
 10868  003010  6FD1               	movwf	printf@f& (0+255),b
 10869  003012  0E08               	movlw	high STR_4
 10870  003014  6FD2               	movwf	(printf@f+1)& (0+255),b
 10871  003016  EC9D  F01A         	call	_printf	;wreg free
 10872                           
 10873                           ;terminal.c: 163: }
 10874  00301A  0012               	return	
 10875  00301C                     l653:
 10876                           
 10877                           ;terminal.c: 164: else{
 10878                           ;terminal.c: 165: Value = GETxAPIxVAL(Index);
 10879  00301C  C022  F013         	movff	TranslateMessage@Index,GETxAPIxVAL@index
 10880  003020  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxVAL@index+1
 10881  003024  EC50  F022         	call	_GETxAPIxVAL	;wreg free
 10882  003028  C013  F020         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10883  00302C  C014  F021         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10884                           
 10885                           ;terminal.c: 166: SENDxMESSAGE(Index, Value);
 10886  003030  C022  F013         	movff	TranslateMessage@Index,SENDxMESSAGE@index
 10887  003034  C023  F014         	movff	TranslateMessage@Index+1,SENDxMESSAGE@index+1
 10888  003038  C020  F015         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10889  00303C  C021  F016         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10890  003040  ECB6  F014         	call	_SENDxMESSAGE	;wreg free
 10891  003044  0012               	return	
 10892  003046                     __end_of_TranslateMessage:
 10893                           	opt stack 0
 10894                           tblptru	equ	0xFF8
 10895                           tblptrh	equ	0xFF7
 10896                           tblptrl	equ	0xFF6
 10897                           tablat	equ	0xFF5
 10898                           prodh	equ	0xFF4
 10899                           prodl	equ	0xFF3
 10900                           intcon	equ	0xFF2
 10901                           postinc0	equ	0xFEE
 10902                           wreg	equ	0xFE8
 10903                           postinc1	equ	0xFE6
 10904                           postdec1	equ	0xFE5
 10905                           fsr1h	equ	0xFE2
 10906                           fsr1l	equ	0xFE1
 10907                           indf2	equ	0xFDF
 10908                           postinc2	equ	0xFDE
 10909                           postdec2	equ	0xFDD
 10910                           fsr2h	equ	0xFDA
 10911                           fsr2l	equ	0xFD9
 10912                           status	equ	0xFD8
 10913                           
 10914 ;; *************** function _atoi *****************
 10915 ;; Defined at:
 10916 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atoi.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;  s               2   24[COMRAM] PTR const unsigned char 
 10919 ;;		 -> NULL(0), Data(10), 
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;  a               2   29[COMRAM] int 
 10922 ;;  sign            1   28[COMRAM] unsigned char 
 10923 ;; Return value:  Size  Location     Type
 10924 ;;                  2   24[COMRAM] int 
 10925 ;; Registers used:
 10926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10927 ;; Tracked objects:
 10928 ;;		On entry : 0/0
 10929 ;;		On exit  : 0/0
 10930 ;;		Unchanged: 0/0
 10931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10932 ;;      Params:         2       0       0       0       0       0       0       0       0
 10933 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10934 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10935 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10936 ;;Total ram usage:        7 bytes
 10937 ;; Hardware stack levels used:    1
 10938 ;; Hardware stack levels required when called:    4
 10939 ;; This function calls:
 10940 ;;		___wmul
 10941 ;;		_isdigit
 10942 ;; This function is called by:
 10943 ;;		_TranslateMessage
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           	psect	text21
 10948  003D74                     __ptext21:
 10949                           	opt stack 0
 10950  003D74                     _atoi:
 10951                           	opt stack 24
 10952                           
 10953                           ;incstack = 0
 10954  003D74  D002               	goto	l1478
 10955  003D76  4A19               	infsnz	atoi@s,f,c
 10956  003D78  2A1A               	incf	atoi@s+1,f,c
 10957  003D7A                     l1478:
 10958  003D7A  C019  FFD9         	movff	atoi@s,fsr2l
 10959  003D7E  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10960  003D82  0E20               	movlw	32
 10961  003D84  18DE               	xorwf	postinc2,w,c
 10962  003D86  B4D8               	btfsc	status,2,c
 10963  003D88  D7F6               	goto	l1479
 10964  003D8A  C019  FFD9         	movff	atoi@s,fsr2l
 10965  003D8E  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10966  003D92  0E09               	movlw	9
 10967  003D94  18DE               	xorwf	postinc2,w,c
 10968  003D96  B4D8               	btfsc	status,2,c
 10969  003D98  D7EE               	goto	l1479
 10970  003D9A  0E00               	movlw	0
 10971  003D9C  6E1F               	movwf	atoi@a+1,c
 10972  003D9E  0E00               	movlw	0
 10973  003DA0  6E1E               	movwf	atoi@a,c
 10974  003DA2  0E00               	movlw	0
 10975  003DA4  6E1D               	movwf	atoi@sign,c
 10976  003DA6  C019  FFD9         	movff	atoi@s,fsr2l
 10977  003DAA  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10978  003DAE  0E2D               	movlw	45
 10979  003DB0  18DE               	xorwf	postinc2,w,c
 10980  003DB2  A4D8               	btfss	status,2,c
 10981  003DB4  D002               	goto	l1481
 10982  003DB6  2A1D               	incf	atoi@sign,f,c
 10983  003DB8  D024               	goto	l8234
 10984  003DBA                     l1481:
 10985  003DBA  C019  FFD9         	movff	atoi@s,fsr2l
 10986  003DBE  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10987  003DC2  0E2B               	movlw	43
 10988  003DC4  18DE               	xorwf	postinc2,w,c
 10989  003DC6  A4D8               	btfss	status,2,c
 10990  003DC8  D01E               	goto	l1484
 10991  003DCA  D01B               	goto	l8234
 10992  003DCC  C01E  F013         	movff	atoi@a,___wmul@multiplier
 10993  003DD0  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
 10994  003DD4  0E00               	movlw	0
 10995  003DD6  6E16               	movwf	___wmul@multiplicand+1,c
 10996  003DD8  0E0A               	movlw	10
 10997  003DDA  6E15               	movwf	___wmul@multiplicand,c
 10998  003DDC  EC1E  F022         	call	___wmul	;wreg free
 10999  003DE0  C019  FFD9         	movff	atoi@s,fsr2l
 11000  003DE4  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11001  003DE8  50DF               	movf	indf2,w,c
 11002  003DEA  6E1B               	movwf	??_atoi& (0+255),c
 11003  003DEC  6A1C               	clrf	(??_atoi+1)& (0+255),c
 11004  003DEE  5013               	movf	?___wmul,w,c
 11005  003DF0  261B               	addwf	??_atoi,f,c
 11006  003DF2  5014               	movf	?___wmul+1,w,c
 11007  003DF4  221C               	addwfc	??_atoi+1,f,c
 11008  003DF6  0ED0               	movlw	208
 11009  003DF8  241B               	addwf	??_atoi,w,c
 11010  003DFA  6E1E               	movwf	atoi@a,c
 11011  003DFC  0EFF               	movlw	255
 11012  003DFE  201C               	addwfc	??_atoi+1,w,c
 11013  003E00  6E1F               	movwf	atoi@a+1,c
 11014  003E02                     l8234:
 11015  003E02  4A19               	infsnz	atoi@s,f,c
 11016  003E04  2A1A               	incf	atoi@s+1,f,c
 11017  003E06                     l1484:
 11018  003E06  C019  FFD9         	movff	atoi@s,fsr2l
 11019  003E0A  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11020  003E0E  50DF               	movf	indf2,w,c
 11021  003E10  EC41  F022         	call	_isdigit
 11022  003E14  B0D8               	btfsc	status,0,c
 11023  003E16  D7DA               	goto	l1485
 11024  003E18  501D               	movf	atoi@sign,w,c
 11025  003E1A  B4D8               	btfsc	status,2,c
 11026  003E1C  D00D               	goto	l1487
 11027  003E1E  C01E  F01B         	movff	atoi@a,??_atoi
 11028  003E22  C01F  F01C         	movff	atoi@a+1,??_atoi+1
 11029  003E26  1E1B               	comf	??_atoi,f,c
 11030  003E28  1E1C               	comf	??_atoi+1,f,c
 11031  003E2A  4A1B               	infsnz	??_atoi,f,c
 11032  003E2C  2A1C               	incf	??_atoi+1,f,c
 11033  003E2E  C01B  F019         	movff	??_atoi,?_atoi
 11034  003E32  C01C  F01A         	movff	??_atoi+1,?_atoi+1
 11035  003E36  0012               	return	
 11036  003E38                     l1487:
 11037  003E38  C01E  F019         	movff	atoi@a,?_atoi
 11038  003E3C  C01F  F01A         	movff	atoi@a+1,?_atoi+1
 11039  003E40  0012               	return		;funcret
 11040  003E42                     __end_of_atoi:
 11041                           	opt stack 0
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           postinc0	equ	0xFEE
 11050                           wreg	equ	0xFE8
 11051                           postinc1	equ	0xFE6
 11052                           postdec1	equ	0xFE5
 11053                           fsr1h	equ	0xFE2
 11054                           fsr1l	equ	0xFE1
 11055                           indf2	equ	0xFDF
 11056                           postinc2	equ	0xFDE
 11057                           postdec2	equ	0xFDD
 11058                           fsr2h	equ	0xFDA
 11059                           fsr2l	equ	0xFD9
 11060                           status	equ	0xFD8
 11061                           
 11062 ;; *************** function _isdigit *****************
 11063 ;; Defined at:
 11064 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;  c               1    wreg     unsigned char 
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;  c               1   20[COMRAM] unsigned char 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;		None               void
 11071 ;; Registers used:
 11072 ;;		wreg, status,2, status,0
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11078 ;;      Params:         0       0       0       0       0       0       0       0       0
 11079 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11080 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11081 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11082 ;;Total ram usage:        3 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    3
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_atoi
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           	psect	text22
 11093  004482                     __ptext22:
 11094                           	opt stack 0
 11095  004482                     _isdigit:
 11096                           	opt stack 24
 11097                           
 11098                           ;incstack = 0
 11099                           ;isdigit@c stored from wreg
 11100  004482  6E15               	movwf	isdigit@c,c
 11101  004484  0E00               	movlw	0
 11102  004486  6E14               	movwf	_isdigit$1843,c
 11103  004488  0E3A               	movlw	58
 11104  00448A  6015               	cpfslt	isdigit@c,c
 11105  00448C  D005               	goto	l1659
 11106  00448E  0E2F               	movlw	47
 11107  004490  6415               	cpfsgt	isdigit@c,c
 11108  004492  D002               	goto	l1659
 11109  004494  0E01               	movlw	1
 11110  004496  6E14               	movwf	_isdigit$1843,c
 11111  004498                     l1659:
 11112  004498  C014  F013         	movff	_isdigit$1843,??_isdigit
 11113  00449C  3013               	rrcf	??_isdigit,w,c
 11114  00449E  0012               	return	
 11115  0044A0                     __end_of_isdigit:
 11116                           	opt stack 0
 11117                           tblptru	equ	0xFF8
 11118                           tblptrh	equ	0xFF7
 11119                           tblptrl	equ	0xFF6
 11120                           tablat	equ	0xFF5
 11121                           prodh	equ	0xFF4
 11122                           prodl	equ	0xFF3
 11123                           intcon	equ	0xFF2
 11124                           postinc0	equ	0xFEE
 11125                           wreg	equ	0xFE8
 11126                           postinc1	equ	0xFE6
 11127                           postdec1	equ	0xFE5
 11128                           fsr1h	equ	0xFE2
 11129                           fsr1l	equ	0xFE1
 11130                           indf2	equ	0xFDF
 11131                           postinc2	equ	0xFDE
 11132                           postdec2	equ	0xFDD
 11133                           fsr2h	equ	0xFDA
 11134                           fsr2l	equ	0xFD9
 11135                           status	equ	0xFD8
 11136                           
 11137 ;; *************** function ___wmul *****************
 11138 ;; Defined at:
 11139 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 11140 ;; Parameters:    Size  Location     Type
 11141 ;;  multiplier      2   18[COMRAM] unsigned int 
 11142 ;;  multiplicand    2   20[COMRAM] unsigned int 
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;  product         2   22[COMRAM] unsigned int 
 11145 ;; Return value:  Size  Location     Type
 11146 ;;                  2   18[COMRAM] unsigned int 
 11147 ;; Registers used:
 11148 ;;		wreg, status,2, status,0, prodl, prodh
 11149 ;; Tracked objects:
 11150 ;;		On entry : 0/0
 11151 ;;		On exit  : 0/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11154 ;;      Params:         4       0       0       0       0       0       0       0       0
 11155 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11157 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11158 ;;Total ram usage:        6 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; Hardware stack levels required when called:    3
 11161 ;; This function calls:
 11162 ;;		Nothing
 11163 ;; This function is called by:
 11164 ;;		_atoi
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           	psect	text23
 11169  00443C                     __ptext23:
 11170                           	opt stack 0
 11171  00443C                     ___wmul:
 11172                           	opt stack 24
 11173                           
 11174                           ;incstack = 0
 11175  00443C  5013               	movf	___wmul@multiplier,w,c
 11176  00443E  0215               	mulwf	___wmul@multiplicand,c
 11177  004440  CFF3 F017          	movff	prodl,___wmul@product
 11178  004444  CFF4 F018          	movff	prodh,___wmul@product+1
 11179  004448  5013               	movf	___wmul@multiplier,w,c
 11180  00444A  0216               	mulwf	___wmul@multiplicand+1,c
 11181  00444C  50F3               	movf	prodl,w,c
 11182  00444E  2618               	addwf	___wmul@product+1,f,c
 11183  004450  5014               	movf	___wmul@multiplier+1,w,c
 11184  004452  0215               	mulwf	___wmul@multiplicand,c
 11185  004454  50F3               	movf	prodl,w,c
 11186  004456  2618               	addwf	___wmul@product+1,f,c
 11187  004458  C017  F013         	movff	___wmul@product,?___wmul
 11188  00445C  C018  F014         	movff	___wmul@product+1,?___wmul+1
 11189  004460  0012               	return	
 11190  004462                     __end_of___wmul:
 11191                           	opt stack 0
 11192                           tblptru	equ	0xFF8
 11193                           tblptrh	equ	0xFF7
 11194                           tblptrl	equ	0xFF6
 11195                           tablat	equ	0xFF5
 11196                           prodh	equ	0xFF4
 11197                           prodl	equ	0xFF3
 11198                           intcon	equ	0xFF2
 11199                           postinc0	equ	0xFEE
 11200                           wreg	equ	0xFE8
 11201                           postinc1	equ	0xFE6
 11202                           postdec1	equ	0xFE5
 11203                           fsr1h	equ	0xFE2
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function _SETxAPIxVALxNoxRET *****************
 11213 ;; Defined at:
 11214 ;;		line 220 in file "../api.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  index           2   20[COMRAM] unsigned int 
 11217 ;;  value           2   22[COMRAM] unsigned int 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;		None
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      void 
 11222 ;; Registers used:
 11223 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11229 ;;      Params:         4       0       0       0       0       0       0       0       0
 11230 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11231 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11232 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11233 ;;Total ram usage:        6 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    3
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_Update_StateMchn
 11240 ;;		_TranslateMessage
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           	psect	text24
 11245  004310                     __ptext24:
 11246                           	opt stack 0
 11247  004310                     _SETxAPIxVALxNoxRET:
 11248                           	opt stack 26
 11249                           
 11250                           ;api.c: 221: if(API[index] != value){
 11251                           
 11252                           ;incstack = 0
 11253  004310  90D8               	bcf	status,0,c
 11254  004312  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11255  004314  6ED9               	movwf	fsr2l,c
 11256  004316  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11257  004318  6EDA               	movwf	fsr2h,c
 11258  00431A  0E00               	movlw	low _API
 11259  00431C  26D9               	addwf	fsr2l,f,c
 11260  00431E  0E01               	movlw	high _API
 11261  004320  22DA               	addwfc	fsr2h,f,c
 11262  004322  5017               	movf	SETxAPIxVALxNoxRET@value,w,c
 11263  004324  18DE               	xorwf	postinc2,w,c
 11264  004326  E104               	bnz	u6730
 11265  004328  5018               	movf	SETxAPIxVALxNoxRET@value+1,w,c
 11266  00432A  18DE               	xorwf	postinc2,w,c
 11267  00432C  B4D8               	btfsc	status,2,c
 11268  00432E  0012               	return	
 11269  004330                     u6730:
 11270                           
 11271                           ;api.c: 222: API[index] = value;
 11272  004330  90D8               	bcf	status,0,c
 11273  004332  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11274  004334  6ED9               	movwf	fsr2l,c
 11275  004336  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11276  004338  6EDA               	movwf	fsr2h,c
 11277  00433A  0E00               	movlw	low _API
 11278  00433C  26D9               	addwf	fsr2l,f,c
 11279  00433E  0E01               	movlw	high _API
 11280  004340  22DA               	addwfc	fsr2h,f,c
 11281  004342  C017  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 11282  004346  C018  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 11283  00434A  0012               	return	
 11284  00434C                     __end_of_SETxAPIxVALxNoxRET:
 11285                           	opt stack 0
 11286                           tblptru	equ	0xFF8
 11287                           tblptrh	equ	0xFF7
 11288                           tblptrl	equ	0xFF6
 11289                           tablat	equ	0xFF5
 11290                           prodh	equ	0xFF4
 11291                           prodl	equ	0xFF3
 11292                           intcon	equ	0xFF2
 11293                           postinc0	equ	0xFEE
 11294                           wreg	equ	0xFE8
 11295                           postinc1	equ	0xFE6
 11296                           postdec1	equ	0xFE5
 11297                           fsr1h	equ	0xFE2
 11298                           fsr1l	equ	0xFE1
 11299                           indf2	equ	0xFDF
 11300                           postinc2	equ	0xFDE
 11301                           postdec2	equ	0xFDD
 11302                           fsr2h	equ	0xFDA
 11303                           fsr2l	equ	0xFD9
 11304                           status	equ	0xFD8
 11305                           
 11306 ;; *************** function _GETxAPIxVAL *****************
 11307 ;; Defined at:
 11308 ;;		line 226 in file "../api.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  index           2   18[COMRAM] unsigned int 
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;		None
 11313 ;; Return value:  Size  Location     Type
 11314 ;;                  2   18[COMRAM] unsigned int 
 11315 ;; Registers used:
 11316 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11322 ;;      Params:         2       0       0       0       0       0       0       0       0
 11323 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11325 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11326 ;;Total ram usage:        2 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    3
 11329 ;; This function calls:
 11330 ;;		Nothing
 11331 ;; This function is called by:
 11332 ;;		_Update_StateMchn
 11333 ;;		_Train_Path
 11334 ;;		_TranslateMessage
 11335 ;;		_Debounce_Inputs
 11336 ;;		_Junction
 11337 ;;		_Train_Move_Left_Start
 11338 ;;		_Right_Mountain_From_The_Right
 11339 ;;		_Left_Mountain_From_The_Right
 11340 ;;		_Train_Move_Left_Brake
 11341 ;;		_Train_Move_Right_Start
 11342 ;;		_Left_Mountain_From_The_Left
 11343 ;;		_Right_Mountain_From_The_Left
 11344 ;;		_Train_Move_Right_Brake
 11345 ;;		_SETxPWM
 11346 ;;		_INCRxAPIxVAL
 11347 ;;		_DECRxAPIxVAL
 11348 ;; This function uses a non-reentrant model
 11349 ;;
 11350                           
 11351                           	psect	text25
 11352  0044A0                     __ptext25:
 11353                           	opt stack 0
 11354  0044A0                     _GETxAPIxVAL:
 11355                           	opt stack 23
 11356                           
 11357                           ;api.c: 227: return API[index];
 11358                           
 11359                           ;incstack = 0
 11360  0044A0  90D8               	bcf	status,0,c
 11361  0044A2  3413               	rlcf	GETxAPIxVAL@index,w,c
 11362  0044A4  6ED9               	movwf	fsr2l,c
 11363  0044A6  3414               	rlcf	GETxAPIxVAL@index+1,w,c
 11364  0044A8  6EDA               	movwf	fsr2h,c
 11365  0044AA  0E00               	movlw	low _API
 11366  0044AC  26D9               	addwf	fsr2l,f,c
 11367  0044AE  0E01               	movlw	high _API
 11368  0044B0  22DA               	addwfc	fsr2h,f,c
 11369  0044B2  CFDE F013          	movff	postinc2,?_GETxAPIxVAL
 11370  0044B6  CFDD F014          	movff	postdec2,?_GETxAPIxVAL+1
 11371  0044BA  0012               	return	
 11372  0044BC                     __end_of_GETxAPIxVAL:
 11373                           	opt stack 0
 11374                           tblptru	equ	0xFF8
 11375                           tblptrh	equ	0xFF7
 11376                           tblptrl	equ	0xFF6
 11377                           tablat	equ	0xFF5
 11378                           prodh	equ	0xFF4
 11379                           prodl	equ	0xFF3
 11380                           intcon	equ	0xFF2
 11381                           postinc0	equ	0xFEE
 11382                           wreg	equ	0xFE8
 11383                           postinc1	equ	0xFE6
 11384                           postdec1	equ	0xFE5
 11385                           fsr1h	equ	0xFE2
 11386                           fsr1l	equ	0xFE1
 11387                           indf2	equ	0xFDF
 11388                           postinc2	equ	0xFDE
 11389                           postdec2	equ	0xFDD
 11390                           fsr2h	equ	0xFDA
 11391                           fsr2l	equ	0xFD9
 11392                           status	equ	0xFD8
 11393                           
 11394 ;; *************** function _GETxAPIxRW *****************
 11395 ;; Defined at:
 11396 ;;		line 209 in file "../api.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;  index           2   18[COMRAM] unsigned int 
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;		None
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  2   18[COMRAM] unsigned int 
 11403 ;; Registers used:
 11404 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11410 ;;      Params:         2       0       0       0       0       0       0       0       0
 11411 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11412 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11413 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11414 ;;Total ram usage:        2 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    3
 11417 ;; This function calls:
 11418 ;;		Nothing
 11419 ;; This function is called by:
 11420 ;;		_TranslateMessage
 11421 ;; This function uses a non-reentrant model
 11422 ;;
 11423                           
 11424                           	psect	text26
 11425  0044BC                     __ptext26:
 11426                           	opt stack 0
 11427  0044BC                     _GETxAPIxRW:
 11428                           	opt stack 25
 11429                           
 11430                           ;api.c: 210: return API_RW[index];
 11431                           
 11432                           ;incstack = 0
 11433  0044BC  90D8               	bcf	status,0,c
 11434  0044BE  3413               	rlcf	GETxAPIxRW@index,w,c
 11435  0044C0  6ED9               	movwf	fsr2l,c
 11436  0044C2  3414               	rlcf	GETxAPIxRW@index+1,w,c
 11437  0044C4  6EDA               	movwf	fsr2h,c
 11438  0044C6  0E00               	movlw	low _API_RW
 11439  0044C8  26D9               	addwf	fsr2l,f,c
 11440  0044CA  0E02               	movlw	high _API_RW
 11441  0044CC  22DA               	addwfc	fsr2h,f,c
 11442  0044CE  CFDE F013          	movff	postinc2,?_GETxAPIxRW
 11443  0044D2  CFDD F014          	movff	postdec2,?_GETxAPIxRW+1
 11444  0044D6  0012               	return	
 11445  0044D8                     __end_of_GETxAPIxRW:
 11446                           	opt stack 0
 11447                           tblptru	equ	0xFF8
 11448                           tblptrh	equ	0xFF7
 11449                           tblptrl	equ	0xFF6
 11450                           tablat	equ	0xFF5
 11451                           prodh	equ	0xFF4
 11452                           prodl	equ	0xFF3
 11453                           intcon	equ	0xFF2
 11454                           postinc0	equ	0xFEE
 11455                           wreg	equ	0xFE8
 11456                           postinc1	equ	0xFE6
 11457                           postdec1	equ	0xFE5
 11458                           fsr1h	equ	0xFE2
 11459                           fsr1l	equ	0xFE1
 11460                           indf2	equ	0xFDF
 11461                           postinc2	equ	0xFDE
 11462                           postdec2	equ	0xFDD
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function _EUSART1_Read *****************
 11468 ;; Defined at:
 11469 ;;		line 143 in file "../eusart1.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;		None
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;  readValue       1   18[COMRAM] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  1    wreg      unsigned char 
 11476 ;; Registers used:
 11477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11483 ;;      Params:         0       0       0       0       0       0       0       0       0
 11484 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11485 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11486 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11487 ;;Total ram usage:        1 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    3
 11490 ;; This function calls:
 11491 ;;		Nothing
 11492 ;; This function is called by:
 11493 ;;		_READxRECEIVEDxMESSAGE
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           	psect	text27
 11498  004386                     __ptext27:
 11499                           	opt stack 0
 11500  004386                     _EUSART1_Read:
 11501                           	opt stack 26
 11502                           
 11503                           ;eusart1.c: 144: uint8_t readValue = 0;
 11504                           
 11505                           ;incstack = 0
 11506  004386  0E00               	movlw	0
 11507  004388  6E13               	movwf	EUSART1_Read@readValue,c
 11508  00438A  503F               	movf	_eusart1RxCount,w,c	;volatile
 11509  00438C  B4D8               	btfsc	status,2,c
 11510  00438E  D7FD               	goto	l535
 11511                           
 11512                           ;eusart1.c: 147: }
 11513                           ;eusart1.c: 149: PIE1bits.RC1IE = 0;
 11514  004390  9A9D               	bcf	3997,5,c	;volatile
 11515                           
 11516                           ;eusart1.c: 151: readValue = eusart1RxBuffer[eusart1RxTail++];
 11517  004392  5040               	movf	_eusart1RxTail,w,c
 11518  004394  0D01               	mullw	1
 11519  004396  0E00               	movlw	low _eusart1RxBuffer
 11520  004398  24F3               	addwf	prodl,w,c
 11521  00439A  6ED9               	movwf	fsr2l,c
 11522  00439C  0E04               	movlw	high _eusart1RxBuffer
 11523  00439E  20F4               	addwfc	prodh,w,c
 11524  0043A0  6EDA               	movwf	fsr2h,c
 11525  0043A2  50DF               	movf	indf2,w,c
 11526  0043A4  6E13               	movwf	EUSART1_Read@readValue,c
 11527  0043A6  2A40               	incf	_eusart1RxTail,f,c
 11528                           
 11529                           ;eusart1.c: 152: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11530  0043A8  0E7D               	movlw	125
 11531  0043AA  6440               	cpfsgt	_eusart1RxTail,c
 11532  0043AC  D002               	goto	l537
 11533                           
 11534                           ;eusart1.c: 153: eusart1RxTail = 0;
 11535  0043AE  0E00               	movlw	0
 11536  0043B0  6E40               	movwf	_eusart1RxTail,c
 11537  0043B2                     l537:
 11538                           
 11539                           ;eusart1.c: 154: }
 11540                           ;eusart1.c: 155: eusart1RxCount--;
 11541  0043B2  063F               	decf	_eusart1RxCount,f,c	;volatile
 11542                           
 11543                           ;eusart1.c: 156: PIE1bits.RC1IE = 1;
 11544  0043B4  8A9D               	bsf	3997,5,c	;volatile
 11545                           
 11546                           ;eusart1.c: 158: return readValue;
 11547  0043B6  5013               	movf	EUSART1_Read@readValue,w,c
 11548  0043B8  0012               	return	
 11549  0043BA                     __end_of_EUSART1_Read:
 11550                           	opt stack 0
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           postinc0	equ	0xFEE
 11559                           wreg	equ	0xFE8
 11560                           postinc1	equ	0xFE6
 11561                           postdec1	equ	0xFE5
 11562                           fsr1h	equ	0xFE2
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           fsr2h	equ	0xFDA
 11568                           fsr2l	equ	0xFD9
 11569                           status	equ	0xFD8
 11570                           
 11571 ;; *************** function _Init_Timers *****************
 11572 ;; Defined at:
 11573 ;;		line 188 in file "../Main.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;		None
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;		None
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  1    wreg      void 
 11580 ;; Registers used:
 11581 ;;		wreg, status,2
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11587 ;;      Params:         0       0       0       0       0       0       0       0       0
 11588 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11589 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11590 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11591 ;;Total ram usage:        0 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    3
 11594 ;; This function calls:
 11595 ;;		Nothing
 11596 ;; This function is called by:
 11597 ;;		_main
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text28
 11602  0044D8                     __ptext28:
 11603                           	opt stack 0
 11604  0044D8                     _Init_Timers:
 11605                           	opt stack 27
 11606                           
 11607                           ;Main.c: 190: RCONbits.IPEN = 1;
 11608                           
 11609                           ;incstack = 0
 11610  0044D8  8ED0               	bsf	4048,7,c	;volatile
 11611                           
 11612                           ;Main.c: 191: INTCON = 0xA0;
 11613  0044DA  0EA0               	movlw	160
 11614  0044DC  6EF2               	movwf	intcon,c	;volatile
 11615                           
 11616                           ;Main.c: 192: INTCON2 = 0x84;
 11617  0044DE  0E84               	movlw	132
 11618  0044E0  6EF1               	movwf	intcon2,c	;volatile
 11619                           
 11620                           ;Main.c: 193: TMR0H = 0x0;
 11621  0044E2  0E00               	movlw	0
 11622  0044E4  6ED7               	movwf	4055,c	;volatile
 11623                           
 11624                           ;Main.c: 194: TMR0L = 0x0;
 11625  0044E6  0E00               	movlw	0
 11626  0044E8  6ED6               	movwf	4054,c	;volatile
 11627                           
 11628                           ;Main.c: 195: T0CON = 0xC3;
 11629  0044EA  0EC3               	movlw	195
 11630  0044EC  6ED5               	movwf	4053,c	;volatile
 11631  0044EE  0012               	return		;funcret
 11632  0044F0                     __end_of_Init_Timers:
 11633                           	opt stack 0
 11634                           tblptru	equ	0xFF8
 11635                           tblptrh	equ	0xFF7
 11636                           tblptrl	equ	0xFF6
 11637                           tablat	equ	0xFF5
 11638                           prodh	equ	0xFF4
 11639                           prodl	equ	0xFF3
 11640                           intcon	equ	0xFF2
 11641                           intcon2	equ	0xFF1
 11642                           postinc0	equ	0xFEE
 11643                           wreg	equ	0xFE8
 11644                           postinc1	equ	0xFE6
 11645                           postdec1	equ	0xFE5
 11646                           fsr1h	equ	0xFE2
 11647                           fsr1l	equ	0xFE1
 11648                           indf2	equ	0xFDF
 11649                           postinc2	equ	0xFDE
 11650                           postdec2	equ	0xFDD
 11651                           fsr2h	equ	0xFDA
 11652                           fsr2l	equ	0xFD9
 11653                           status	equ	0xFD8
 11654                           
 11655 ;; *************** function _Init_Pwm *****************
 11656 ;; Defined at:
 11657 ;;		line 201 in file "../Main.c"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;		None
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;		None
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  1    wreg      void 
 11664 ;; Registers used:
 11665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11671 ;;      Params:         0       0       0       0       0       0       0       0       0
 11672 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11673 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11674 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11675 ;;Total ram usage:        0 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; Hardware stack levels required when called:    5
 11678 ;; This function calls:
 11679 ;;		_SETxAPIxVAL
 11680 ;; This function is called by:
 11681 ;;		_main
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           	psect	text29
 11686  004414                     __ptext29:
 11687                           	opt stack 0
 11688  004414                     _Init_Pwm:
 11689                           	opt stack 25
 11690                           
 11691                           ;Main.c: 204: SETxAPIxVAL(69, 1);
 11692                           
 11693                           ;incstack = 0
 11694  004414  0E00               	movlw	0
 11695  004416  6E1A               	movwf	SETxAPIxVAL@index+1,c
 11696  004418  0E45               	movlw	69
 11697  00441A  6E19               	movwf	SETxAPIxVAL@index,c
 11698  00441C  0E00               	movlw	0
 11699  00441E  6E1C               	movwf	SETxAPIxVAL@value+1,c
 11700  004420  0E01               	movlw	1
 11701  004422  6E1B               	movwf	SETxAPIxVAL@value,c
 11702  004424  EC1B  F021         	call	_SETxAPIxVAL	;wreg free
 11703                           
 11704                           ;Main.c: 205: PR2=0xFF;
 11705  004428  68CB               	setf	4043,c	;volatile
 11706                           
 11707                           ;Main.c: 206: CCPR1L = 0x7F;
 11708  00442A  0E7F               	movlw	127
 11709  00442C  6EBE               	movwf	4030,c	;volatile
 11710                           
 11711                           ;Main.c: 207: CCP1CON = 0x0F;
 11712  00442E  0E0F               	movlw	15
 11713  004430  6EBD               	movwf	4029,c	;volatile
 11714                           
 11715                           ;Main.c: 208: T2CON = 0x04;
 11716  004432  0E04               	movlw	4
 11717  004434  6ECA               	movwf	4042,c	;volatile
 11718                           
 11719                           ;Main.c: 209: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11720  004436  9494               	bcf	3988,2,c	;volatile
 11721  004438  9094               	bcf	3988,0,c	;volatile
 11722  00443A  0012               	return		;funcret
 11723  00443C                     __end_of_Init_Pwm:
 11724                           	opt stack 0
 11725                           tblptru	equ	0xFF8
 11726                           tblptrh	equ	0xFF7
 11727                           tblptrl	equ	0xFF6
 11728                           tablat	equ	0xFF5
 11729                           prodh	equ	0xFF4
 11730                           prodl	equ	0xFF3
 11731                           intcon	equ	0xFF2
 11732                           intcon2	equ	0xFF1
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           postinc1	equ	0xFE6
 11736                           postdec1	equ	0xFE5
 11737                           fsr1h	equ	0xFE2
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           fsr2h	equ	0xFDA
 11743                           fsr2l	equ	0xFD9
 11744                           status	equ	0xFD8
 11745                           
 11746 ;; *************** function _SETxAPIxVAL *****************
 11747 ;; Defined at:
 11748 ;;		line 213 in file "../api.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;  index           2   24[COMRAM] unsigned int 
 11751 ;;  value           2   26[COMRAM] unsigned int 
 11752 ;; Auto vars:     Size  Location     Type
 11753 ;;		None
 11754 ;; Return value:  Size  Location     Type
 11755 ;;                  1    wreg      void 
 11756 ;; Registers used:
 11757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11763 ;;      Params:         4       0       0       0       0       0       0       0       0
 11764 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11765 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11766 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11767 ;;Total ram usage:        6 bytes
 11768 ;; Hardware stack levels used:    1
 11769 ;; Hardware stack levels required when called:    4
 11770 ;; This function calls:
 11771 ;;		_SENDxMESSAGE
 11772 ;; This function is called by:
 11773 ;;		_Init_Pwm
 11774 ;;		_Update_StateMchn
 11775 ;;		_Train_Path
 11776 ;;		_Debounce_Inputs
 11777 ;;		_Junction
 11778 ;;		_Train_Move_Left_Start
 11779 ;;		_Train_Move_Left_Brake
 11780 ;;		_Train_Move_Right_Start
 11781 ;;		_Train_Move_Right_Brake
 11782 ;;		_SETxPWM
 11783 ;;		_INCRxAPIxVAL
 11784 ;;		_DECRxAPIxVAL
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           	psect	text30
 11789  004236                     __ptext30:
 11790                           	opt stack 0
 11791  004236                     _SETxAPIxVAL:
 11792                           	opt stack 22
 11793                           
 11794                           ;api.c: 214: if(API[index] != value){
 11795                           
 11796                           ;incstack = 0
 11797  004236  90D8               	bcf	status,0,c
 11798  004238  3419               	rlcf	SETxAPIxVAL@index,w,c
 11799  00423A  6ED9               	movwf	fsr2l,c
 11800  00423C  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11801  00423E  6EDA               	movwf	fsr2h,c
 11802  004240  0E00               	movlw	low _API
 11803  004242  26D9               	addwf	fsr2l,f,c
 11804  004244  0E01               	movlw	high _API
 11805  004246  22DA               	addwfc	fsr2h,f,c
 11806  004248  501B               	movf	SETxAPIxVAL@value,w,c
 11807  00424A  18DE               	xorwf	postinc2,w,c
 11808  00424C  E104               	bnz	u6590
 11809  00424E  501C               	movf	SETxAPIxVAL@value+1,w,c
 11810  004250  18DE               	xorwf	postinc2,w,c
 11811  004252  B4D8               	btfsc	status,2,c
 11812  004254  0012               	return	
 11813  004256                     u6590:
 11814                           
 11815                           ;api.c: 215: API[index] = value;
 11816  004256  90D8               	bcf	status,0,c
 11817  004258  3419               	rlcf	SETxAPIxVAL@index,w,c
 11818  00425A  6ED9               	movwf	fsr2l,c
 11819  00425C  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11820  00425E  6EDA               	movwf	fsr2h,c
 11821  004260  0E00               	movlw	low _API
 11822  004262  26D9               	addwf	fsr2l,f,c
 11823  004264  0E01               	movlw	high _API
 11824  004266  22DA               	addwfc	fsr2h,f,c
 11825  004268  C01B  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11826  00426C  C01C  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11827                           
 11828                           ;api.c: 216: SENDxMESSAGE(index, value);
 11829  004270  C019  F013         	movff	SETxAPIxVAL@index,SENDxMESSAGE@index
 11830  004274  C01A  F014         	movff	SETxAPIxVAL@index+1,SENDxMESSAGE@index+1
 11831  004278  C01B  F015         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11832  00427C  C01C  F016         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11833  004280  ECB6  F014         	call	_SENDxMESSAGE	;wreg free
 11834  004284  0012               	return	
 11835  004286                     __end_of_SETxAPIxVAL:
 11836                           	opt stack 0
 11837                           tblptru	equ	0xFF8
 11838                           tblptrh	equ	0xFF7
 11839                           tblptrl	equ	0xFF6
 11840                           tablat	equ	0xFF5
 11841                           prodh	equ	0xFF4
 11842                           prodl	equ	0xFF3
 11843                           intcon	equ	0xFF2
 11844                           intcon2	equ	0xFF1
 11845                           postinc0	equ	0xFEE
 11846                           wreg	equ	0xFE8
 11847                           postinc1	equ	0xFE6
 11848                           postdec1	equ	0xFE5
 11849                           fsr1h	equ	0xFE2
 11850                           fsr1l	equ	0xFE1
 11851                           indf2	equ	0xFDF
 11852                           postinc2	equ	0xFDE
 11853                           postdec2	equ	0xFDD
 11854                           fsr2h	equ	0xFDA
 11855                           fsr2l	equ	0xFD9
 11856                           status	equ	0xFD8
 11857                           
 11858 ;; *************** function _SENDxMESSAGE *****************
 11859 ;; Defined at:
 11860 ;;		line 280 in file "../terminal.c"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;  index           2   18[COMRAM] unsigned int 
 11863 ;;  value           2   20[COMRAM] unsigned int 
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;		None
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      void 
 11868 ;; Registers used:
 11869 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11875 ;;      Params:         4       0       0       0       0       0       0       0       0
 11876 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11877 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11878 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11879 ;;Total ram usage:        6 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    3
 11882 ;; This function calls:
 11883 ;;		Nothing
 11884 ;; This function is called by:
 11885 ;;		_TranslateMessage
 11886 ;;		_SETxAPIxVAL
 11887 ;;		_INCRxAPIxVAL
 11888 ;;		_DECRxAPIxVAL
 11889 ;; This function uses a non-reentrant model
 11890 ;;
 11891                           
 11892                           	psect	text31
 11893  00296C                     __ptext31:
 11894                           	opt stack 0
 11895  00296C                     _SENDxMESSAGE:
 11896                           	opt stack 22
 11897                           
 11898                           ;terminal.c: 282: switch (Diag_Comm)
 11899                           
 11900                           ;incstack = 0
 11901  00296C  D0F8               	goto	l686
 11902  00296E  0E92               	movlw	low _Comm_List
 11903  002970  0100               	movlb	0	; () banked
 11904  002972  6F76               	movwf	_Pcomm_List& (0+255),b
 11905  002974  0E00               	movlw	high _Comm_List
 11906  002976  6F77               	movwf	(_Pcomm_List+1)& (0+255),b
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;terminal.c: 285: *Pcomm_List = index;
 11910  002978  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11911  00297C  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11912  002980  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11913  002984  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11914                           
 11915                           ; BSR set to: 0
 11916                           ;terminal.c: 286: Pcomm_List++;
 11917  002988  0E02               	movlw	2
 11918  00298A  2776               	addwf	_Pcomm_List& (0+255),f,b
 11919  00298C  0E00               	movlw	0
 11920  00298E  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11921                           
 11922                           ;terminal.c: 287: *Pcomm_List = value;
 11923  002990  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11924  002994  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11925  002998  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11926  00299C  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;terminal.c: 288: Pcomm_List++;
 11930  0029A0  0E02               	movlw	2
 11931  0029A2  2776               	addwf	_Pcomm_List& (0+255),f,b
 11932  0029A4  0E00               	movlw	0
 11933  0029A6  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;terminal.c: 289: Diag_Comm = 1;
 11937  0029A8  0E00               	movlw	0
 11938  0029AA  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11939  0029AC  0E01               	movlw	1
 11940  0029AE  6F78               	movwf	_Diag_Comm& (0+255),b
 11941                           
 11942                           ;terminal.c: 290: break;
 11943  0029B0  0012               	return	
 11944  0029B2                     
 11945                           ; BSR set to: 0
 11946  0029B2  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11947  0029B6  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11948  0029BA  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11949  0029BE  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11950                           
 11951                           ;terminal.c: 293: Pcomm_List++;
 11952  0029C2  0E02               	movlw	2
 11953  0029C4  0100               	movlb	0	; () banked
 11954  0029C6  2776               	addwf	_Pcomm_List& (0+255),f,b
 11955  0029C8  0E00               	movlw	0
 11956  0029CA  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;terminal.c: 294: *Pcomm_List = value;
 11960  0029CC  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11961  0029D0  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11962  0029D4  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11963  0029D8  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11964                           
 11965                           ;terminal.c: 295: Pcomm_List++;
 11966  0029DC  0E02               	movlw	2
 11967  0029DE  2776               	addwf	_Pcomm_List& (0+255),f,b
 11968  0029E0  0E00               	movlw	0
 11969  0029E2  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11970                           
 11971                           ; BSR set to: 0
 11972                           ;terminal.c: 296: Diag_Comm = 2;
 11973  0029E4  0E00               	movlw	0
 11974  0029E6  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11975  0029E8  0E02               	movlw	2
 11976  0029EA  6F78               	movwf	_Diag_Comm& (0+255),b
 11977                           
 11978                           ;terminal.c: 297: break;
 11979  0029EC  0012               	return	
 11980  0029EE                     
 11981                           ; BSR set to: 0
 11982  0029EE  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11983  0029F2  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11984  0029F6  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11985  0029FA  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11986                           
 11987                           ;terminal.c: 300: Pcomm_List++;
 11988  0029FE  0E02               	movlw	2
 11989  002A00  0100               	movlb	0	; () banked
 11990  002A02  2776               	addwf	_Pcomm_List& (0+255),f,b
 11991  002A04  0E00               	movlw	0
 11992  002A06  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;terminal.c: 301: *Pcomm_List = value;
 11996  002A08  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11997  002A0C  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11998  002A10  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11999  002A14  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12000                           
 12001                           ;terminal.c: 302: Pcomm_List++;
 12002  002A18  0E02               	movlw	2
 12003  002A1A  2776               	addwf	_Pcomm_List& (0+255),f,b
 12004  002A1C  0E00               	movlw	0
 12005  002A1E  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12006                           
 12007                           ; BSR set to: 0
 12008                           ;terminal.c: 303: Diag_Comm = 3;
 12009  002A20  0E00               	movlw	0
 12010  002A22  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 12011  002A24  0E03               	movlw	3
 12012  002A26  6F78               	movwf	_Diag_Comm& (0+255),b
 12013                           
 12014                           ;terminal.c: 304: break;
 12015  002A28  0012               	return	
 12016  002A2A                     
 12017                           ; BSR set to: 0
 12018  002A2A  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12019  002A2E  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12020  002A32  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 12021  002A36  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 12022                           
 12023                           ;terminal.c: 307: Pcomm_List++;
 12024  002A3A  0E02               	movlw	2
 12025  002A3C  0100               	movlb	0	; () banked
 12026  002A3E  2776               	addwf	_Pcomm_List& (0+255),f,b
 12027  002A40  0E00               	movlw	0
 12028  002A42  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;terminal.c: 308: *Pcomm_List = value;
 12032  002A44  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12033  002A48  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12034  002A4C  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 12035  002A50  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12036                           
 12037                           ;terminal.c: 309: Pcomm_List++;
 12038  002A54  0E02               	movlw	2
 12039  002A56  2776               	addwf	_Pcomm_List& (0+255),f,b
 12040  002A58  0E00               	movlw	0
 12041  002A5A  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;terminal.c: 310: Diag_Comm = 4;
 12045  002A5C  0E00               	movlw	0
 12046  002A5E  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 12047  002A60  0E04               	movlw	4
 12048  002A62  6F78               	movwf	_Diag_Comm& (0+255),b
 12049                           
 12050                           ;terminal.c: 311: break;
 12051  002A64  0012               	return	
 12052  002A66                     
 12053                           ; BSR set to: 0
 12054  002A66  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12055  002A6A  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12056  002A6E  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 12057  002A72  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 12058                           
 12059                           ;terminal.c: 314: Pcomm_List++;
 12060  002A76  0E02               	movlw	2
 12061  002A78  0100               	movlb	0	; () banked
 12062  002A7A  2776               	addwf	_Pcomm_List& (0+255),f,b
 12063  002A7C  0E00               	movlw	0
 12064  002A7E  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;terminal.c: 315: *Pcomm_List = value;
 12068  002A80  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12069  002A84  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12070  002A88  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 12071  002A8C  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12072                           
 12073                           ;terminal.c: 316: Pcomm_List++;
 12074  002A90  0E02               	movlw	2
 12075  002A92  2776               	addwf	_Pcomm_List& (0+255),f,b
 12076  002A94  0E00               	movlw	0
 12077  002A96  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;terminal.c: 317: Diag_Comm = 5;
 12081  002A98  0E00               	movlw	0
 12082  002A9A  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 12083  002A9C  0E05               	movlw	5
 12084  002A9E  6F78               	movwf	_Diag_Comm& (0+255),b
 12085                           
 12086                           ;terminal.c: 318: break;
 12087  002AA0  0012               	return	
 12088  002AA2                     
 12089                           ; BSR set to: 0
 12090  002AA2  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12091  002AA6  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12092  002AAA  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 12093  002AAE  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 12094                           
 12095                           ;terminal.c: 321: Pcomm_List++;
 12096  002AB2  0E02               	movlw	2
 12097  002AB4  0100               	movlb	0	; () banked
 12098  002AB6  2776               	addwf	_Pcomm_List& (0+255),f,b
 12099  002AB8  0E00               	movlw	0
 12100  002ABA  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;terminal.c: 322: *Pcomm_List = value;
 12104  002ABC  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12105  002AC0  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12106  002AC4  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 12107  002AC8  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12108                           
 12109                           ;terminal.c: 323: Pcomm_List++;
 12110  002ACC  0E02               	movlw	2
 12111  002ACE  2776               	addwf	_Pcomm_List& (0+255),f,b
 12112  002AD0  0E00               	movlw	0
 12113  002AD2  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;terminal.c: 324: Diag_Comm = 6;
 12117  002AD4  0E00               	movlw	0
 12118  002AD6  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 12119  002AD8  0E06               	movlw	6
 12120  002ADA  6F78               	movwf	_Diag_Comm& (0+255),b
 12121                           
 12122                           ;terminal.c: 325: break;
 12123  002ADC  0012               	return	
 12124  002ADE                     
 12125                           ; BSR set to: 0
 12126  002ADE  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12127  002AE2  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12128  002AE6  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 12129  002AEA  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 12130                           
 12131                           ;terminal.c: 328: Pcomm_List++;
 12132  002AEE  0E02               	movlw	2
 12133  002AF0  0100               	movlb	0	; () banked
 12134  002AF2  2776               	addwf	_Pcomm_List& (0+255),f,b
 12135  002AF4  0E00               	movlw	0
 12136  002AF6  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12137                           
 12138                           ; BSR set to: 0
 12139                           ;terminal.c: 329: *Pcomm_List = value;
 12140  002AF8  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12141  002AFC  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12142  002B00  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 12143  002B04  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12144                           
 12145                           ;terminal.c: 330: Pcomm_List++;
 12146  002B08  0E02               	movlw	2
 12147  002B0A  2776               	addwf	_Pcomm_List& (0+255),f,b
 12148  002B0C  0E00               	movlw	0
 12149  002B0E  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;terminal.c: 331: Diag_Comm = 7;
 12153  002B10  0E00               	movlw	0
 12154  002B12  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 12155  002B14  0E07               	movlw	7
 12156  002B16  6F78               	movwf	_Diag_Comm& (0+255),b
 12157                           
 12158                           ;terminal.c: 332: break;
 12159  002B18  0012               	return	
 12160  002B1A                     
 12161                           ; BSR set to: 0
 12162  002B1A  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12163  002B1E  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12164  002B22  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 12165  002B26  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 12166                           
 12167                           ;terminal.c: 335: Pcomm_List++;
 12168  002B2A  0E02               	movlw	2
 12169  002B2C  0100               	movlb	0	; () banked
 12170  002B2E  2776               	addwf	_Pcomm_List& (0+255),f,b
 12171  002B30  0E00               	movlw	0
 12172  002B32  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;terminal.c: 336: *Pcomm_List = value;
 12176  002B34  C076  FFD9         	movff	_Pcomm_List,fsr2l
 12177  002B38  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 12178  002B3C  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 12179  002B40  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12180                           
 12181                           ;terminal.c: 337: Pcomm_List++;
 12182  002B44  0E02               	movlw	2
 12183  002B46  2776               	addwf	_Pcomm_List& (0+255),f,b
 12184  002B48  0E00               	movlw	0
 12185  002B4A  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12186                           
 12187                           ;terminal.c: 338: Pcomm_List = &Comm_List[0][0];
 12188  002B4C  0E92               	movlw	low _Comm_List
 12189  002B4E  6F76               	movwf	_Pcomm_List& (0+255),b
 12190  002B50  0E00               	movlw	high _Comm_List
 12191  002B52  6F77               	movwf	(_Pcomm_List+1)& (0+255),b
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;terminal.c: 339: Diag_Comm = 0;
 12195  002B54  0E00               	movlw	0
 12196  002B56  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 12197  002B58  0E00               	movlw	0
 12198  002B5A  6F78               	movwf	_Diag_Comm& (0+255),b
 12199                           
 12200                           ; BSR set to: 0
 12201                           ;terminal.c: 344: }
 12202                           
 12203                           ; BSR set to: 0
 12204                           
 12205                           ;terminal.c: 343: default : break;
 12206                           
 12207                           ;terminal.c: 340: break;
 12208  002B5C  0012               	return	
 12209  002B5E                     l686:
 12210                           
 12211                           ; BSR set to: 0
 12212  002B5E  C078  F017         	movff	_Diag_Comm,??_SENDxMESSAGE
 12213  002B62  C079  F018         	movff	_Diag_Comm+1,??_SENDxMESSAGE+1
 12214                           
 12215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12216                           ; Switch size 1, requested type "space"
 12217                           ; Number of cases is 1, Range of values is 0 to 0
 12218                           ; switch strategies available:
 12219                           ; Name         Instructions Cycles
 12220                           ; simple_byte            4     3 (average)
 12221                           ;	Chosen strategy is simple_byte
 12222  002B66  5018               	movf	??_SENDxMESSAGE+1,w,c
 12223  002B68  0A00               	xorlw	0	; case 0
 12224  002B6A  A4D8               	btfss	status,2,c
 12225  002B6C  0012               	return	
 12226                           
 12227                           ; Switch size 1, requested type "space"
 12228                           ; Number of cases is 8, Range of values is 0 to 7
 12229                           ; switch strategies available:
 12230                           ; Name         Instructions Cycles
 12231                           ; simple_byte           25    13 (average)
 12232                           ;	Chosen strategy is simple_byte
 12233  002B6E  5017               	movf	??_SENDxMESSAGE,w,c
 12234  002B70  0A00               	xorlw	0	; case 0
 12235  002B72  B4D8               	btfsc	status,2,c
 12236  002B74  D6FC               	goto	l687
 12237  002B76  0A01               	xorlw	1	; case 1
 12238  002B78  B4D8               	btfsc	status,2,c
 12239  002B7A  D71B               	goto	l689
 12240  002B7C  0A03               	xorlw	3	; case 2
 12241  002B7E  B4D8               	btfsc	status,2,c
 12242  002B80  D736               	goto	l690
 12243  002B82  0A01               	xorlw	1	; case 3
 12244  002B84  B4D8               	btfsc	status,2,c
 12245  002B86  D751               	goto	l691
 12246  002B88  0A07               	xorlw	7	; case 4
 12247  002B8A  B4D8               	btfsc	status,2,c
 12248  002B8C  D76C               	goto	l692
 12249  002B8E  0A01               	xorlw	1	; case 5
 12250  002B90  B4D8               	btfsc	status,2,c
 12251  002B92  D787               	goto	l693
 12252  002B94  0A03               	xorlw	3	; case 6
 12253  002B96  B4D8               	btfsc	status,2,c
 12254  002B98  D7A2               	goto	l694
 12255  002B9A  0A01               	xorlw	1	; case 7
 12256  002B9C  A4D8               	btfss	status,2,c
 12257  002B9E  0012               	return	
 12258  002BA0  D7BC               	goto	l695
 12259  002BA2                     __end_of_SENDxMESSAGE:
 12260                           	opt stack 0
 12261                           tblptru	equ	0xFF8
 12262                           tblptrh	equ	0xFF7
 12263                           tblptrl	equ	0xFF6
 12264                           tablat	equ	0xFF5
 12265                           prodh	equ	0xFF4
 12266                           prodl	equ	0xFF3
 12267                           intcon	equ	0xFF2
 12268                           intcon2	equ	0xFF1
 12269                           postinc0	equ	0xFEE
 12270                           wreg	equ	0xFE8
 12271                           postinc1	equ	0xFE6
 12272                           postdec1	equ	0xFE5
 12273                           fsr1h	equ	0xFE2
 12274                           fsr1l	equ	0xFE1
 12275                           indf2	equ	0xFDF
 12276                           postinc2	equ	0xFDE
 12277                           postdec2	equ	0xFDD
 12278                           fsr2h	equ	0xFDA
 12279                           fsr2l	equ	0xFD9
 12280                           status	equ	0xFD8
 12281                           
 12282 ;; *************** function _EUSART1_Initialize *****************
 12283 ;; Defined at:
 12284 ;;		line 78 in file "../eusart1.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;		None
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;  baud_rate       2   18[COMRAM] unsigned int 
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  1    wreg      void 
 12291 ;; Registers used:
 12292 ;;		wreg, status,2
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12298 ;;      Params:         0       0       0       0       0       0       0       0       0
 12299 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12300 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12301 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12302 ;;Total ram usage:        2 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; Hardware stack levels required when called:    3
 12305 ;; This function calls:
 12306 ;;		Nothing
 12307 ;; This function is called by:
 12308 ;;		_main
 12309 ;; This function uses a non-reentrant model
 12310 ;;
 12311                           
 12312                           	psect	text32
 12313  004286                     __ptext32:
 12314                           	opt stack 0
 12315  004286                     _EUSART1_Initialize:
 12316                           	opt stack 27
 12317                           
 12318                           ;eusart1.c: 80: PIE1bits.RC1IE = 0;
 12319                           
 12320                           ;incstack = 0
 12321  004286  9A9D               	bcf	3997,5,c	;volatile
 12322                           
 12323                           ;eusart1.c: 81: PIE1bits.TX1IE = 0;
 12324  004288  989D               	bcf	3997,4,c	;volatile
 12325                           
 12326                           ;eusart1.c: 85: BAUDCONbits.BRG16 = 1;
 12327  00428A  86B8               	bsf	4024,3,c	;volatile
 12328                           
 12329                           ;eusart1.c: 87: RCSTAbits.SPEN = 1;
 12330  00428C  8EAB               	bsf	4011,7,c	;volatile
 12331                           
 12332                           ;eusart1.c: 88: RCSTAbits.RX9 = 0;
 12333  00428E  9CAB               	bcf	4011,6,c	;volatile
 12334                           
 12335                           ;eusart1.c: 89: RCSTAbits.CREN = 1;
 12336  004290  88AB               	bsf	4011,4,c	;volatile
 12337                           
 12338                           ;eusart1.c: 90: RCSTAbits.ADDEN = 0;
 12339  004292  96AB               	bcf	4011,3,c	;volatile
 12340                           
 12341                           ;eusart1.c: 92: TXSTAbits.TX9 = 0;
 12342  004294  9CAC               	bcf	4012,6,c	;volatile
 12343                           
 12344                           ;eusart1.c: 93: TXSTAbits.TXEN = 1;
 12345  004296  8AAC               	bsf	4012,5,c	;volatile
 12346                           
 12347                           ;eusart1.c: 94: TXSTAbits.SYNC = 0;
 12348  004298  98AC               	bcf	4012,4,c	;volatile
 12349                           
 12350                           ;eusart1.c: 95: TXSTAbits.SENDB = 0;
 12351  00429A  96AC               	bcf	4012,3,c	;volatile
 12352                           
 12353                           ;eusart1.c: 96: TXSTAbits.BRGH = 1;
 12354  00429C  84AC               	bsf	4012,2,c	;volatile
 12355                           
 12356                           ;eusart1.c: 97: TXSTAbits.TRMT = 1;
 12357  00429E  82AC               	bsf	4012,1,c	;volatile
 12358                           
 12359                           ;eusart1.c: 98: TXSTAbits.TX9D = 0;
 12360  0042A0  90AC               	bcf	4012,0,c	;volatile
 12361                           
 12362                           ;eusart1.c: 100: unsigned int baud_rate;
 12363                           ;eusart1.c: 102: baud_rate = 417;
 12364  0042A2  0E01               	movlw	1
 12365  0042A4  6E14               	movwf	EUSART1_Initialize@baud_rate+1,c
 12366  0042A6  0EA1               	movlw	161
 12367  0042A8  6E13               	movwf	EUSART1_Initialize@baud_rate,c
 12368                           
 12369                           ;eusart1.c: 104: SPBRGH = baud_rate >> 8;
 12370  0042AA  5014               	movf	EUSART1_Initialize@baud_rate+1,w,c
 12371  0042AC  6EB0               	movwf	4016,c	;volatile
 12372                           
 12373                           ;eusart1.c: 105: SPBRG = baud_rate;
 12374  0042AE  C013  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12375                           
 12376                           ;eusart1.c: 109: eusart1TxHead = 0;
 12377  0042B2  0E00               	movlw	0
 12378  0042B4  6E44               	movwf	_eusart1TxHead,c
 12379                           
 12380                           ;eusart1.c: 110: eusart1TxTail = 0;
 12381  0042B6  0E00               	movlw	0
 12382  0042B8  6E43               	movwf	_eusart1TxTail,c
 12383                           
 12384                           ;eusart1.c: 111: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12385  0042BA  0E7E               	movlw	126
 12386  0042BC  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12387                           
 12388                           ;eusart1.c: 113: eusart1RxHead = 0;
 12389  0042BE  0E00               	movlw	0
 12390  0042C0  6E41               	movwf	_eusart1RxHead,c
 12391                           
 12392                           ;eusart1.c: 114: eusart1RxTail = 0;
 12393  0042C2  0E00               	movlw	0
 12394  0042C4  6E40               	movwf	_eusart1RxTail,c
 12395                           
 12396                           ;eusart1.c: 115: eusart1RxCount = 0;
 12397  0042C6  0E00               	movlw	0
 12398  0042C8  6E3F               	movwf	_eusart1RxCount,c	;volatile
 12399                           
 12400                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
 12401  0042CA  8A9D               	bsf	3997,5,c	;volatile
 12402  0042CC  0012               	return		;funcret
 12403  0042CE                     __end_of_EUSART1_Initialize:
 12404                           	opt stack 0
 12405                           tblptru	equ	0xFF8
 12406                           tblptrh	equ	0xFF7
 12407                           tblptrl	equ	0xFF6
 12408                           tablat	equ	0xFF5
 12409                           prodh	equ	0xFF4
 12410                           prodl	equ	0xFF3
 12411                           intcon	equ	0xFF2
 12412                           intcon2	equ	0xFF1
 12413                           postinc0	equ	0xFEE
 12414                           wreg	equ	0xFE8
 12415                           postinc1	equ	0xFE6
 12416                           postdec1	equ	0xFE5
 12417                           fsr1h	equ	0xFE2
 12418                           fsr1l	equ	0xFE1
 12419                           indf2	equ	0xFDF
 12420                           postinc2	equ	0xFDE
 12421                           postdec2	equ	0xFDD
 12422                           fsr2h	equ	0xFDA
 12423                           fsr2l	equ	0xFD9
 12424                           status	equ	0xFD8
 12425                           
 12426 ;; *************** function _EEPROMxREAD *****************
 12427 ;; Defined at:
 12428 ;;		line 60 in file "../eeprom_settings.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;		None
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;  Data            2   30[COMRAM] unsigned int 
 12433 ;;  i               1   32[COMRAM] unsigned char 
 12434 ;; Return value:  Size  Location     Type
 12435 ;;                  2   26[COMRAM] unsigned int 
 12436 ;; Registers used:
 12437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12438 ;; Tracked objects:
 12439 ;;		On entry : 0/0
 12440 ;;		On exit  : 0/0
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12443 ;;      Params:         2       0       0       0       0       0       0       0       0
 12444 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12445 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12446 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12447 ;;Total ram usage:        7 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    4
 12450 ;; This function calls:
 12451 ;;		_Eeprom_Read
 12452 ;; This function is called by:
 12453 ;;		_main
 12454 ;; This function uses a non-reentrant model
 12455 ;;
 12456                           
 12457                           	psect	text33
 12458  003CA2                     __ptext33:
 12459                           	opt stack 0
 12460  003CA2                     _EEPROMxREAD:
 12461                           	opt stack 26
 12462                           
 12463                           ;eeprom_settings.c: 62: unsigned char i = 0;
 12464                           
 12465                           ;incstack = 0
 12466  003CA2  0E00               	movlw	0
 12467  003CA4  6E21               	movwf	EEPROMxREAD@i,c
 12468                           
 12469                           ;eeprom_settings.c: 63: unsigned int Data = 0;
 12470  003CA6  0E00               	movlw	0
 12471  003CA8  6E20               	movwf	EEPROMxREAD@Data+1,c
 12472  003CAA  0E00               	movlw	0
 12473  003CAC  6E1F               	movwf	EEPROMxREAD@Data,c
 12474                           
 12475                           ;eeprom_settings.c: 68: if (!WriteActive){
 12476  003CAE  0100               	movlb	0	; () banked
 12477  003CB0  516C               	movf	_WriteActive& (0+255),w,b
 12478  003CB2  116D               	iorwf	(_WriteActive+1)& (0+255),w,b
 12479  003CB4  A4D8               	btfss	status,2,c
 12480  003CB6  D059               	goto	l763
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;eeprom_settings.c: 69: ReadActive = 1;
 12484  003CB8  0E00               	movlw	0
 12485  003CBA  6F6F               	movwf	(_ReadActive+1)& (0+255),b
 12486  003CBC  0E01               	movlw	1
 12487  003CBE  6F6E               	movwf	_ReadActive& (0+255),b
 12488                           
 12489                           ;eeprom_settings.c: 70: INTCON = 0x00;
 12490  003CC0  0E00               	movlw	0
 12491  003CC2  6EF2               	movwf	intcon,c	;volatile
 12492                           
 12493                           ;eeprom_settings.c: 72: for(i = 0; i < 28; i++ )
 12494  003CC4  0E00               	movlw	0
 12495  003CC6  6E21               	movwf	EEPROMxREAD@i,c
 12496  003CC8                     l6238:
 12497                           
 12498                           ; BSR set to: 0
 12499  003CC8  0E1B               	movlw	27
 12500  003CCA  6421               	cpfsgt	EEPROMxREAD@i,c
 12501  003CCC  D001               	goto	l764
 12502  003CCE  D041               	goto	u5360
 12503  003CD0                     l764:
 12504                           
 12505                           ;eeprom_settings.c: 73: {
 12506                           ;eeprom_settings.c: 74: Data = Eeprom_Read(i);
 12507                           
 12508                           ; BSR set to: 0
 12509  003CD0  C021  F013         	movff	EEPROMxREAD@i,Eeprom_Read@Location
 12510  003CD4  6A14               	clrf	Eeprom_Read@Location+1,c
 12511  003CD6  ECC4  F020         	call	_Eeprom_Read	;wreg free
 12512  003CDA  C013  F01F         	movff	?_Eeprom_Read,EEPROMxREAD@Data
 12513  003CDE  C014  F020         	movff	?_Eeprom_Read+1,EEPROMxREAD@Data+1
 12514                           
 12515                           ;eeprom_settings.c: 78: API[ApiList[i]] = Data;
 12516  003CE2  5021               	movf	EEPROMxREAD@i,w,c
 12517  003CE4  0D02               	mullw	2
 12518  003CE6  0E01               	movlw	low _ApiList
 12519  003CE8  24F3               	addwf	prodl,w,c
 12520  003CEA  6EF6               	movwf	tblptrl,c
 12521  003CEC  0E08               	movlw	high _ApiList
 12522  003CEE  20F4               	addwfc	prodh,w,c
 12523  003CF0  6EF7               	movwf	tblptrh,c
 12524  003CF2                     	if	0	;There are less than 3 active tblptr bytes
 12525  003CF2                     	endif
 12526  003CF2  0009               	tblrd		*+
 12527  003CF4  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12528  003CF8  0009               	tblrd		*+
 12529  003CFA  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12530  003CFE  90D8               	bcf	status,0,c
 12531  003D00  361D               	rlcf	??_EEPROMxREAD,f,c
 12532  003D02  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12533  003D04  0E00               	movlw	low _API
 12534  003D06  241D               	addwf	??_EEPROMxREAD,w,c
 12535  003D08  6ED9               	movwf	fsr2l,c
 12536  003D0A  0E01               	movlw	high _API
 12537  003D0C  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12538  003D0E  6EDA               	movwf	fsr2h,c
 12539  003D10  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12540  003D14  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12541                           
 12542                           ;eeprom_settings.c: 79: API_EEPROM[ApiList[i]] = Data;
 12543  003D18  5021               	movf	EEPROMxREAD@i,w,c
 12544  003D1A  0D02               	mullw	2
 12545  003D1C  0E01               	movlw	low _ApiList
 12546  003D1E  24F3               	addwf	prodl,w,c
 12547  003D20  6EF6               	movwf	tblptrl,c
 12548  003D22  0E08               	movlw	high _ApiList
 12549  003D24  20F4               	addwfc	prodh,w,c
 12550  003D26  6EF7               	movwf	tblptrh,c
 12551  003D28                     	if	0	;There are less than 3 active tblptr bytes
 12552  003D28                     	endif
 12553  003D28  0009               	tblrd		*+
 12554  003D2A  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12555  003D2E  0009               	tblrd		*+
 12556  003D30  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12557  003D34  90D8               	bcf	status,0,c
 12558  003D36  361D               	rlcf	??_EEPROMxREAD,f,c
 12559  003D38  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12560  003D3A  0E00               	movlw	low _API_EEPROM
 12561  003D3C  241D               	addwf	??_EEPROMxREAD,w,c
 12562  003D3E  6ED9               	movwf	fsr2l,c
 12563  003D40  0E03               	movlw	high _API_EEPROM
 12564  003D42  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12565  003D44  6EDA               	movwf	fsr2h,c
 12566  003D46  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12567  003D4A  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12568  003D4E  2A21               	incf	EEPROMxREAD@i,f,c
 12569  003D50  D7BB               	goto	l6238
 12570  003D52                     u5360:
 12571                           
 12572                           ;eeprom_settings.c: 81: }
 12573                           ;eeprom_settings.c: 83: INTCON = 0xA0;
 12574  003D52  0EA0               	movlw	160
 12575  003D54  6EF2               	movwf	intcon,c	;volatile
 12576                           
 12577                           ;eeprom_settings.c: 84: ReadActive = 0;
 12578  003D56  0E00               	movlw	0
 12579  003D58  0100               	movlb	0	; () banked
 12580  003D5A  6F6F               	movwf	(_ReadActive+1)& (0+255),b
 12581  003D5C  0E00               	movlw	0
 12582  003D5E  6F6E               	movwf	_ReadActive& (0+255),b
 12583                           
 12584                           ;eeprom_settings.c: 85: return (1);
 12585  003D60  0E00               	movlw	0
 12586  003D62  6E1C               	movwf	?_EEPROMxREAD+1,c
 12587  003D64  0E01               	movlw	1
 12588  003D66  6E1B               	movwf	?_EEPROMxREAD,c
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;eeprom_settings.c: 86: }
 12592                           
 12593                           ; BSR set to: 0
 12594  003D68  0012               	return	
 12595  003D6A                     l763:
 12596                           
 12597                           ; BSR set to: 0
 12598                           ;eeprom_settings.c: 87: else{
 12599                           ;eeprom_settings.c: 88: return (0);
 12600                           
 12601                           ; BSR set to: 0
 12602  003D6A  0E00               	movlw	0
 12603  003D6C  6E1C               	movwf	?_EEPROMxREAD+1,c
 12604  003D6E  0E00               	movlw	0
 12605  003D70  6E1B               	movwf	?_EEPROMxREAD,c
 12606                           
 12607                           ; BSR set to: 0
 12608  003D72  0012               	return	
 12609  003D74                     __end_of_EEPROMxREAD:
 12610                           	opt stack 0
 12611                           tblptru	equ	0xFF8
 12612                           tblptrh	equ	0xFF7
 12613                           tblptrl	equ	0xFF6
 12614                           tablat	equ	0xFF5
 12615                           prodh	equ	0xFF4
 12616                           prodl	equ	0xFF3
 12617                           intcon	equ	0xFF2
 12618                           intcon2	equ	0xFF1
 12619                           postinc0	equ	0xFEE
 12620                           wreg	equ	0xFE8
 12621                           postinc1	equ	0xFE6
 12622                           postdec1	equ	0xFE5
 12623                           fsr1h	equ	0xFE2
 12624                           fsr1l	equ	0xFE1
 12625                           indf2	equ	0xFDF
 12626                           postinc2	equ	0xFDE
 12627                           postdec2	equ	0xFDD
 12628                           fsr2h	equ	0xFDA
 12629                           fsr2l	equ	0xFD9
 12630                           status	equ	0xFD8
 12631                           
 12632 ;; *************** function _Eeprom_Read *****************
 12633 ;; Defined at:
 12634 ;;		line 107 in file "../eeprom_settings.c"
 12635 ;; Parameters:    Size  Location     Type
 12636 ;;  Location        2   18[COMRAM] unsigned int 
 12637 ;; Auto vars:     Size  Location     Type
 12638 ;;  Return_Data     2   24[COMRAM] unsigned int 
 12639 ;;  Location_Hig    2   22[COMRAM] unsigned int 
 12640 ;;  Location_Low    2   20[COMRAM] unsigned int 
 12641 ;; Return value:  Size  Location     Type
 12642 ;;                  2   18[COMRAM] unsigned int 
 12643 ;; Registers used:
 12644 ;;		wreg, status,2, status,0
 12645 ;; Tracked objects:
 12646 ;;		On entry : 0/0
 12647 ;;		On exit  : 0/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12650 ;;      Params:         2       0       0       0       0       0       0       0       0
 12651 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12652 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12653 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12654 ;;Total ram usage:        8 bytes
 12655 ;; Hardware stack levels used:    1
 12656 ;; Hardware stack levels required when called:    3
 12657 ;; This function calls:
 12658 ;;		Nothing
 12659 ;; This function is called by:
 12660 ;;		_EEPROMxREAD
 12661 ;; This function uses a non-reentrant model
 12662 ;;
 12663                           
 12664                           	psect	text34
 12665  004188                     __ptext34:
 12666                           	opt stack 0
 12667  004188                     _Eeprom_Read:
 12668                           	opt stack 26
 12669                           
 12670                           ;eeprom_settings.c: 109: unsigned int Location_High_Byte = Location * 2;
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;incstack = 0
 12674  004188  90D8               	bcf	status,0,c
 12675  00418A  3413               	rlcf	Eeprom_Read@Location,w,c
 12676  00418C  6E17               	movwf	Eeprom_Read@Location_High_Byte,c
 12677  00418E  3414               	rlcf	Eeprom_Read@Location+1,w,c
 12678  004190  6E18               	movwf	Eeprom_Read@Location_High_Byte+1,c
 12679                           
 12680                           ;eeprom_settings.c: 110: unsigned int Location_Low_Byte = Location_High_Byte + 1;
 12681  004192  0E01               	movlw	1
 12682  004194  2417               	addwf	Eeprom_Read@Location_High_Byte,w,c
 12683  004196  6E15               	movwf	Eeprom_Read@Location_Low_Byte,c
 12684  004198  0E00               	movlw	0
 12685  00419A  2018               	addwfc	Eeprom_Read@Location_High_Byte+1,w,c
 12686  00419C  6E16               	movwf	Eeprom_Read@Location_Low_Byte+1,c
 12687                           
 12688                           ;eeprom_settings.c: 111: unsigned int Return_Data = 0;
 12689  00419E  0E00               	movlw	0
 12690  0041A0  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12691  0041A2  0E00               	movlw	0
 12692  0041A4  6E19               	movwf	Eeprom_Read@Return_Data,c
 12693                           
 12694                           ;eeprom_settings.c: 115: EECON1bits.EEPGD = 0;
 12695  0041A6  9EA6               	bcf	4006,7,c	;volsfr
 12696                           
 12697                           ;eeprom_settings.c: 116: EECON1bits.CFGS = 0;
 12698  0041A8  9CA6               	bcf	4006,6,c	;volsfr
 12699                           
 12700                           ;eeprom_settings.c: 117: EEADR = Location_High_Byte;
 12701  0041AA  C017  FFA9         	movff	Eeprom_Read@Location_High_Byte,4009	;volatile
 12702                           
 12703                           ;eeprom_settings.c: 118: EECON1bits.RD = 1;
 12704  0041AE  80A6               	bsf	4006,0,c	;volsfr
 12705  0041B0  B0A6               	btfsc	4006,0,c	;volsfr
 12706  0041B2  D7FE               	goto	l771
 12707                           
 12708                           ;eeprom_settings.c: 120: Return_Data = EEDATA;
 12709  0041B4  CFA8 F019          	movff	4008,Eeprom_Read@Return_Data	;volatile
 12710  0041B8  6A1A               	clrf	Eeprom_Read@Return_Data+1,c
 12711                           
 12712                           ;eeprom_settings.c: 121: Return_Data = Return_Data << 8;
 12713  0041BA  5019               	movf	Eeprom_Read@Return_Data,w,c
 12714  0041BC  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12715  0041BE  6A19               	clrf	Eeprom_Read@Return_Data,c
 12716                           
 12717                           ;eeprom_settings.c: 126: EECON1bits.EEPGD = 0;
 12718  0041C0  9EA6               	bcf	4006,7,c	;volsfr
 12719                           
 12720                           ;eeprom_settings.c: 127: EECON1bits.CFGS = 0;
 12721  0041C2  9CA6               	bcf	4006,6,c	;volsfr
 12722                           
 12723                           ;eeprom_settings.c: 128: EEADR = Location_Low_Byte;
 12724  0041C4  C015  FFA9         	movff	Eeprom_Read@Location_Low_Byte,4009	;volatile
 12725                           
 12726                           ;eeprom_settings.c: 129: EECON1bits.RD = 1;
 12727  0041C8  80A6               	bsf	4006,0,c	;volsfr
 12728  0041CA  B0A6               	btfsc	4006,0,c	;volsfr
 12729  0041CC  D7FE               	goto	l774
 12730                           
 12731                           ;eeprom_settings.c: 131: Return_Data = Return_Data | EEDATA;
 12732  0041CE  5019               	movf	Eeprom_Read@Return_Data,w,c
 12733  0041D0  10A8               	iorwf	4008,w,c	;volatile
 12734  0041D2  6E19               	movwf	Eeprom_Read@Return_Data,c
 12735  0041D4  501A               	movf	Eeprom_Read@Return_Data+1,w,c
 12736  0041D6  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12737                           
 12738                           ;eeprom_settings.c: 136: EEADR = 0xFF;
 12739  0041D8  68A9               	setf	4009,c	;volatile
 12740                           
 12741                           ;eeprom_settings.c: 140: return (Return_Data);
 12742  0041DA  C019  F013         	movff	Eeprom_Read@Return_Data,?_Eeprom_Read
 12743  0041DE  C01A  F014         	movff	Eeprom_Read@Return_Data+1,?_Eeprom_Read+1
 12744  0041E2  0012               	return	
 12745  0041E4                     __end_of_Eeprom_Read:
 12746                           	opt stack 0
 12747                           tblptru	equ	0xFF8
 12748                           tblptrh	equ	0xFF7
 12749                           tblptrl	equ	0xFF6
 12750                           tablat	equ	0xFF5
 12751                           prodh	equ	0xFF4
 12752                           prodl	equ	0xFF3
 12753                           intcon	equ	0xFF2
 12754                           intcon2	equ	0xFF1
 12755                           postinc0	equ	0xFEE
 12756                           wreg	equ	0xFE8
 12757                           postinc1	equ	0xFE6
 12758                           postdec1	equ	0xFE5
 12759                           fsr1h	equ	0xFE2
 12760                           fsr1l	equ	0xFE1
 12761                           indf2	equ	0xFDF
 12762                           postinc2	equ	0xFDE
 12763                           postdec2	equ	0xFDD
 12764                           fsr2h	equ	0xFDA
 12765                           fsr2l	equ	0xFD9
 12766                           status	equ	0xFD8
 12767                           
 12768 ;; *************** function _DIAGNOSTICxTOxPC *****************
 12769 ;; Defined at:
 12770 ;;		line 194 in file "../terminal.c"
 12771 ;; Parameters:    Size  Location     Type
 12772 ;;		None
 12773 ;; Auto vars:     Size  Location     Type
 12774 ;;		None
 12775 ;; Return value:  Size  Location     Type
 12776 ;;                  1    wreg      void 
 12777 ;; Registers used:
 12778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12779 ;; Tracked objects:
 12780 ;;		On entry : 0/0
 12781 ;;		On exit  : 0/0
 12782 ;;		Unchanged: 0/0
 12783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12784 ;;      Params:         0       0       0       0       0       0       0       0       0
 12785 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12786 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12787 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12788 ;;Total ram usage:        2 bytes
 12789 ;; Hardware stack levels used:    1
 12790 ;; Hardware stack levels required when called:    6
 12791 ;; This function calls:
 12792 ;;		_SendMessage
 12793 ;; This function is called by:
 12794 ;;		_main
 12795 ;; This function uses a non-reentrant model
 12796 ;;
 12797                           
 12798                           	psect	text35
 12799  002732                     __ptext35:
 12800                           	opt stack 0
 12801  002732                     _DIAGNOSTICxTOxPC:
 12802                           	opt stack 24
 12803                           
 12804                           ;terminal.c: 196: if (DelayCounter > 10000){
 12805                           
 12806                           ;incstack = 0
 12807  002732  0E11               	movlw	17
 12808  002734  0100               	movlb	0	; () banked
 12809  002736  5D70               	subwf	_DelayCounter& (0+255),w,b
 12810  002738  0E27               	movlw	39
 12811  00273A  5971               	subwfb	(_DelayCounter+1)& (0+255),w,b
 12812  00273C  A0D8               	btfss	status,0,c
 12813  00273E  D113               	goto	l661
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;terminal.c: 197: DelayCounter = 0;
 12817  002740  0E00               	movlw	0
 12818  002742  6F71               	movwf	(_DelayCounter+1)& (0+255),b
 12819  002744  0E00               	movlw	0
 12820  002746  6F70               	movwf	_DelayCounter& (0+255),b
 12821                           
 12822                           ;terminal.c: 199: switch (Diag_Comm2)
 12823  002748  D0E9               	goto	l662
 12824  00274A                     
 12825                           ; BSR set to: 0
 12826                           
 12827                           ; BSR set to: 0
 12828  00274A  0E92               	movlw	low _Comm_List
 12829  00274C  6F76               	movwf	_Pcomm_List& (0+255),b
 12830  00274E  0E00               	movlw	high _Comm_List
 12831  002750  6F77               	movwf	(_Pcomm_List+1)& (0+255),b
 12832                           
 12833                           ;terminal.c: 202: Pcomm_List2 = &Comm_List[0][0];
 12834  002752  0E92               	movlw	low _Comm_List
 12835  002754  6F74               	movwf	_Pcomm_List2& (0+255),b
 12836  002756  0E00               	movlw	high _Comm_List
 12837  002758  6F75               	movwf	(_Pcomm_List2+1)& (0+255),b
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;terminal.c: 203: Diag_Comm2 = 1;
 12841  00275A  0E00               	movlw	0
 12842  00275C  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12843  00275E  0E01               	movlw	1
 12844  002760  6F72               	movwf	_Diag_Comm2& (0+255),b
 12845                           
 12846                           ;terminal.c: 204: break;
 12847  002762  0012               	return	
 12848  002764                     
 12849                           ; BSR set to: 0
 12850                           
 12851                           ; BSR set to: 0
 12852  002764  0E92               	movlw	low _Comm_List
 12853  002766  6F74               	movwf	_Pcomm_List2& (0+255),b
 12854  002768  0E00               	movlw	high _Comm_List
 12855  00276A  6F75               	movwf	(_Pcomm_List2+1)& (0+255),b
 12856                           
 12857                           ;terminal.c: 207: if (Pcomm_List2 != Pcomm_List)
 12858  00276C  5176               	movf	_Pcomm_List& (0+255),w,b
 12859  00276E  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12860  002770  E104               	bnz	u9460
 12861  002772  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12862  002774  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12863  002776  B4D8               	btfsc	status,2,c
 12864  002778  0012               	return	
 12865  00277A                     u9460:
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;terminal.c: 208: {
 12869                           ;terminal.c: 209: SendMessage(Comm_List[0][0], Comm_List[0][1]);
 12870  00277A  C092  F0DE         	movff	_Comm_List,SendMessage@index
 12871  00277E  C093  F0DF         	movff	_Comm_List+1,SendMessage@index+1
 12872  002782  C094  F0E0         	movff	_Comm_List+2,SendMessage@value
 12873  002786  C095  F0E1         	movff	_Comm_List+3,SendMessage@value+1
 12874  00278A  EC31  F022         	call	_SendMessage	;wreg free
 12875                           
 12876                           ;terminal.c: 210: Pcomm_List2+=2;
 12877  00278E  0E04               	movlw	4
 12878  002790  0100               	movlb	0	; () banked
 12879  002792  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12880  002794  0E00               	movlw	0
 12881  002796  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;terminal.c: 211: Diag_Comm2 = 2;
 12885  002798  0E00               	movlw	0
 12886  00279A  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12887  00279C  0E02               	movlw	2
 12888  00279E  6F72               	movwf	_Diag_Comm2& (0+255),b
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;terminal.c: 212: }
 12892                           ;terminal.c: 213: break;
 12893  0027A0  0012               	return	
 12894  0027A2                     
 12895                           ; BSR set to: 0
 12896                           
 12897                           ; BSR set to: 0
 12898  0027A2  5176               	movf	_Pcomm_List& (0+255),w,b
 12899  0027A4  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12900  0027A6  E104               	bnz	u9470
 12901  0027A8  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12902  0027AA  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12903  0027AC  B4D8               	btfsc	status,2,c
 12904  0027AE  0012               	return	
 12905  0027B0                     u9470:
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;terminal.c: 216: {
 12909                           ;terminal.c: 217: SendMessage(Comm_List[1][0], Comm_List[1][1]);
 12910  0027B0  C096  F0DE         	movff	_Comm_List+4,SendMessage@index
 12911  0027B4  C097  F0DF         	movff	_Comm_List+5,SendMessage@index+1
 12912  0027B8  C098  F0E0         	movff	_Comm_List+6,SendMessage@value
 12913  0027BC  C099  F0E1         	movff	_Comm_List+7,SendMessage@value+1
 12914  0027C0  EC31  F022         	call	_SendMessage	;wreg free
 12915                           
 12916                           ;terminal.c: 218: Pcomm_List2+=2;
 12917  0027C4  0E04               	movlw	4
 12918  0027C6  0100               	movlb	0	; () banked
 12919  0027C8  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12920  0027CA  0E00               	movlw	0
 12921  0027CC  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12922                           
 12923                           ; BSR set to: 0
 12924                           ;terminal.c: 219: Diag_Comm2 = 3;
 12925  0027CE  0E00               	movlw	0
 12926  0027D0  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12927  0027D2  0E03               	movlw	3
 12928  0027D4  6F72               	movwf	_Diag_Comm2& (0+255),b
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;terminal.c: 220: }
 12932                           ;terminal.c: 221: break;
 12933  0027D6  0012               	return	
 12934  0027D8                     
 12935                           ; BSR set to: 0
 12936                           
 12937                           ; BSR set to: 0
 12938  0027D8  5176               	movf	_Pcomm_List& (0+255),w,b
 12939  0027DA  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12940  0027DC  E104               	bnz	u9480
 12941  0027DE  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12942  0027E0  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12943  0027E2  B4D8               	btfsc	status,2,c
 12944  0027E4  0012               	return	
 12945  0027E6                     u9480:
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;terminal.c: 224: {
 12949                           ;terminal.c: 225: SendMessage(Comm_List[2][0], Comm_List[2][1]);
 12950  0027E6  C09A  F0DE         	movff	_Comm_List+8,SendMessage@index
 12951  0027EA  C09B  F0DF         	movff	_Comm_List+9,SendMessage@index+1
 12952  0027EE  C09C  F0E0         	movff	_Comm_List+10,SendMessage@value
 12953  0027F2  C09D  F0E1         	movff	_Comm_List+11,SendMessage@value+1
 12954  0027F6  EC31  F022         	call	_SendMessage	;wreg free
 12955                           
 12956                           ;terminal.c: 226: Pcomm_List2+=2;
 12957  0027FA  0E04               	movlw	4
 12958  0027FC  0100               	movlb	0	; () banked
 12959  0027FE  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12960  002800  0E00               	movlw	0
 12961  002802  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12962                           
 12963                           ; BSR set to: 0
 12964                           ;terminal.c: 227: Diag_Comm2 = 4;
 12965  002804  0E00               	movlw	0
 12966  002806  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12967  002808  0E04               	movlw	4
 12968  00280A  6F72               	movwf	_Diag_Comm2& (0+255),b
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;terminal.c: 228: }
 12972                           ;terminal.c: 229: break;
 12973  00280C  0012               	return	
 12974  00280E                     
 12975                           ; BSR set to: 0
 12976                           
 12977                           ; BSR set to: 0
 12978  00280E  5176               	movf	_Pcomm_List& (0+255),w,b
 12979  002810  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12980  002812  E104               	bnz	u9490
 12981  002814  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12982  002816  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12983  002818  B4D8               	btfsc	status,2,c
 12984  00281A  0012               	return	
 12985  00281C                     u9490:
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;terminal.c: 232: {
 12989                           ;terminal.c: 233: SendMessage(Comm_List[3][0], Comm_List[3][1]);
 12990  00281C  C09E  F0DE         	movff	_Comm_List+12,SendMessage@index
 12991  002820  C09F  F0DF         	movff	_Comm_List+13,SendMessage@index+1
 12992  002824  C0A0  F0E0         	movff	_Comm_List+14,SendMessage@value
 12993  002828  C0A1  F0E1         	movff	_Comm_List+15,SendMessage@value+1
 12994  00282C  EC31  F022         	call	_SendMessage	;wreg free
 12995                           
 12996                           ;terminal.c: 234: Pcomm_List2+=2;
 12997  002830  0E04               	movlw	4
 12998  002832  0100               	movlb	0	; () banked
 12999  002834  2774               	addwf	_Pcomm_List2& (0+255),f,b
 13000  002836  0E00               	movlw	0
 13001  002838  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;terminal.c: 235: Diag_Comm2 = 5;
 13005  00283A  0E00               	movlw	0
 13006  00283C  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 13007  00283E  0E05               	movlw	5
 13008  002840  6F72               	movwf	_Diag_Comm2& (0+255),b
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;terminal.c: 236: }
 13012                           ;terminal.c: 237: break;
 13013  002842  0012               	return	
 13014  002844                     
 13015                           ; BSR set to: 0
 13016                           
 13017                           ; BSR set to: 0
 13018  002844  5176               	movf	_Pcomm_List& (0+255),w,b
 13019  002846  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 13020  002848  E104               	bnz	u9500
 13021  00284A  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 13022  00284C  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 13023  00284E  B4D8               	btfsc	status,2,c
 13024  002850  0012               	return	
 13025  002852                     u9500:
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;terminal.c: 240: {
 13029                           ;terminal.c: 241: SendMessage(Comm_List[4][0], Comm_List[4][1]);
 13030  002852  C0A2  F0DE         	movff	_Comm_List+16,SendMessage@index
 13031  002856  C0A3  F0DF         	movff	_Comm_List+17,SendMessage@index+1
 13032  00285A  C0A4  F0E0         	movff	_Comm_List+18,SendMessage@value
 13033  00285E  C0A5  F0E1         	movff	_Comm_List+19,SendMessage@value+1
 13034  002862  EC31  F022         	call	_SendMessage	;wreg free
 13035                           
 13036                           ;terminal.c: 242: Pcomm_List2+=2;
 13037  002866  0E04               	movlw	4
 13038  002868  0100               	movlb	0	; () banked
 13039  00286A  2774               	addwf	_Pcomm_List2& (0+255),f,b
 13040  00286C  0E00               	movlw	0
 13041  00286E  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;terminal.c: 243: Diag_Comm2 = 6;
 13045  002870  0E00               	movlw	0
 13046  002872  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 13047  002874  0E06               	movlw	6
 13048  002876  6F72               	movwf	_Diag_Comm2& (0+255),b
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;terminal.c: 244: }
 13052                           ;terminal.c: 245: break;
 13053  002878  0012               	return	
 13054  00287A                     
 13055                           ; BSR set to: 0
 13056                           
 13057                           ; BSR set to: 0
 13058  00287A  5176               	movf	_Pcomm_List& (0+255),w,b
 13059  00287C  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 13060  00287E  E104               	bnz	u9510
 13061  002880  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 13062  002882  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 13063  002884  B4D8               	btfsc	status,2,c
 13064  002886  0012               	return	
 13065  002888                     u9510:
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;terminal.c: 248: {
 13069                           ;terminal.c: 249: SendMessage(Comm_List[5][0], Comm_List[5][1]);
 13070  002888  C0A6  F0DE         	movff	_Comm_List+20,SendMessage@index
 13071  00288C  C0A7  F0DF         	movff	_Comm_List+21,SendMessage@index+1
 13072  002890  C0A8  F0E0         	movff	_Comm_List+22,SendMessage@value
 13073  002894  C0A9  F0E1         	movff	_Comm_List+23,SendMessage@value+1
 13074  002898  EC31  F022         	call	_SendMessage	;wreg free
 13075                           
 13076                           ;terminal.c: 250: Pcomm_List2+=2;
 13077  00289C  0E04               	movlw	4
 13078  00289E  0100               	movlb	0	; () banked
 13079  0028A0  2774               	addwf	_Pcomm_List2& (0+255),f,b
 13080  0028A2  0E00               	movlw	0
 13081  0028A4  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;terminal.c: 251: Diag_Comm2 = 7;
 13085  0028A6  0E00               	movlw	0
 13086  0028A8  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 13087  0028AA  0E07               	movlw	7
 13088  0028AC  6F72               	movwf	_Diag_Comm2& (0+255),b
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;terminal.c: 252: }
 13092                           ;terminal.c: 253: break;
 13093  0028AE  0012               	return	
 13094  0028B0                     
 13095                           ; BSR set to: 0
 13096                           
 13097                           ; BSR set to: 0
 13098  0028B0  5176               	movf	_Pcomm_List& (0+255),w,b
 13099  0028B2  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 13100  0028B4  E104               	bnz	u9520
 13101  0028B6  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 13102  0028B8  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 13103  0028BA  B4D8               	btfsc	status,2,c
 13104  0028BC  0012               	return	
 13105  0028BE                     u9520:
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;terminal.c: 256: {
 13109                           ;terminal.c: 257: SendMessage(Comm_List[6][0], Comm_List[6][1]);
 13110  0028BE  C0AA  F0DE         	movff	_Comm_List+24,SendMessage@index
 13111  0028C2  C0AB  F0DF         	movff	_Comm_List+25,SendMessage@index+1
 13112  0028C6  C0AC  F0E0         	movff	_Comm_List+26,SendMessage@value
 13113  0028CA  C0AD  F0E1         	movff	_Comm_List+27,SendMessage@value+1
 13114  0028CE  EC31  F022         	call	_SendMessage	;wreg free
 13115                           
 13116                           ;terminal.c: 258: Pcomm_List2+=2;
 13117  0028D2  0E04               	movlw	4
 13118  0028D4  0100               	movlb	0	; () banked
 13119  0028D6  2774               	addwf	_Pcomm_List2& (0+255),f,b
 13120  0028D8  0E00               	movlw	0
 13121  0028DA  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;terminal.c: 259: Diag_Comm2 = 8;
 13125  0028DC  0E00               	movlw	0
 13126  0028DE  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 13127  0028E0  0E08               	movlw	8
 13128  0028E2  6F72               	movwf	_Diag_Comm2& (0+255),b
 13129                           
 13130                           ; BSR set to: 0
 13131                           ;terminal.c: 260: }
 13132                           ;terminal.c: 261: break;
 13133  0028E4  0012               	return	
 13134  0028E6                     
 13135                           ; BSR set to: 0
 13136                           
 13137                           ; BSR set to: 0
 13138  0028E6  5176               	movf	_Pcomm_List& (0+255),w,b
 13139  0028E8  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 13140  0028EA  E104               	bnz	u9530
 13141  0028EC  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 13142  0028EE  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 13143  0028F0  B4D8               	btfsc	status,2,c
 13144  0028F2  0012               	return	
 13145  0028F4                     u9530:
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;terminal.c: 265: {
 13149                           ;terminal.c: 266: SendMessage(Comm_List[7][0], Comm_List[7][1]);
 13150  0028F4  C0AE  F0DE         	movff	_Comm_List+28,SendMessage@index
 13151  0028F8  C0AF  F0DF         	movff	_Comm_List+29,SendMessage@index+1
 13152  0028FC  C0B0  F0E0         	movff	_Comm_List+30,SendMessage@value
 13153  002900  C0B1  F0E1         	movff	_Comm_List+31,SendMessage@value+1
 13154  002904  EC31  F022         	call	_SendMessage	;wreg free
 13155                           
 13156                           ;terminal.c: 267: Pcomm_List2 = &Comm_List[0][0];
 13157  002908  0E92               	movlw	low _Comm_List
 13158  00290A  0100               	movlb	0	; () banked
 13159  00290C  6F74               	movwf	_Pcomm_List2& (0+255),b
 13160  00290E  0E00               	movlw	high _Comm_List
 13161  002910  6F75               	movwf	(_Pcomm_List2+1)& (0+255),b
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;terminal.c: 268: Diag_Comm2 = 1;
 13165  002912  0E00               	movlw	0
 13166  002914  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 13167  002916  0E01               	movlw	1
 13168  002918  6F72               	movwf	_Diag_Comm2& (0+255),b
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;terminal.c: 273: }
 13172                           
 13173                           ; BSR set to: 0
 13174                           
 13175                           ;terminal.c: 272: default : break;
 13176                           
 13177                           ; BSR set to: 0
 13178                           ;terminal.c: 269: }
 13179                           ;terminal.c: 270: break;
 13180  00291A  0012               	return	
 13181  00291C                     l662:
 13182                           
 13183                           ; BSR set to: 0
 13184                           
 13185                           ; BSR set to: 0
 13186  00291C  C072  F020         	movff	_Diag_Comm2,??_DIAGNOSTICxTOxPC
 13187  002920  C073  F021         	movff	_Diag_Comm2+1,??_DIAGNOSTICxTOxPC+1
 13188                           
 13189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13190                           ; Switch size 1, requested type "space"
 13191                           ; Number of cases is 1, Range of values is 0 to 0
 13192                           ; switch strategies available:
 13193                           ; Name         Instructions Cycles
 13194                           ; simple_byte            4     3 (average)
 13195                           ;	Chosen strategy is simple_byte
 13196  002924  5021               	movf	??_DIAGNOSTICxTOxPC+1,w,c
 13197  002926  0A00               	xorlw	0	; case 0
 13198  002928  A4D8               	btfss	status,2,c
 13199  00292A  0012               	return	
 13200                           
 13201                           ; BSR set to: 0
 13202                           ; Switch size 1, requested type "space"
 13203                           ; Number of cases is 9, Range of values is 0 to 8
 13204                           ; switch strategies available:
 13205                           ; Name         Instructions Cycles
 13206                           ; simple_byte           28    15 (average)
 13207                           ;	Chosen strategy is simple_byte
 13208  00292C  5020               	movf	??_DIAGNOSTICxTOxPC,w,c
 13209  00292E  0A00               	xorlw	0	; case 0
 13210  002930  B4D8               	btfsc	status,2,c
 13211  002932  D70B               	goto	l663
 13212  002934  0A01               	xorlw	1	; case 1
 13213  002936  B4D8               	btfsc	status,2,c
 13214  002938  D715               	goto	l665
 13215  00293A  0A03               	xorlw	3	; case 2
 13216  00293C  B4D8               	btfsc	status,2,c
 13217  00293E  D731               	goto	l667
 13218  002940  0A01               	xorlw	1	; case 3
 13219  002942  B4D8               	btfsc	status,2,c
 13220  002944  D749               	goto	l669
 13221  002946  0A07               	xorlw	7	; case 4
 13222  002948  B4D8               	btfsc	status,2,c
 13223  00294A  D761               	goto	l671
 13224  00294C  0A01               	xorlw	1	; case 5
 13225  00294E  B4D8               	btfsc	status,2,c
 13226  002950  D779               	goto	l673
 13227  002952  0A03               	xorlw	3	; case 6
 13228  002954  B4D8               	btfsc	status,2,c
 13229  002956  D791               	goto	l675
 13230  002958  0A01               	xorlw	1	; case 7
 13231  00295A  B4D8               	btfsc	status,2,c
 13232  00295C  D7A9               	goto	l677
 13233  00295E  0A0F               	xorlw	15	; case 8
 13234  002960  A4D8               	btfss	status,2,c
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;terminal.c: 274: }
 13238  002962  0012               	return	
 13239  002964  D7C0               	goto	l679
 13240  002966                     l661:
 13241                           
 13242                           ; BSR set to: 0
 13243                           ;terminal.c: 275: else{
 13244                           ;terminal.c: 276: DelayCounter++;
 13245                           
 13246                           ; BSR set to: 0
 13247  002966  4B70               	infsnz	_DelayCounter& (0+255),f,b
 13248  002968  2B71               	incf	(_DelayCounter+1)& (0+255),f,b
 13249  00296A  0012               	return	
 13250  00296C                     __end_of_DIAGNOSTICxTOxPC:
 13251                           	opt stack 0
 13252                           tblptru	equ	0xFF8
 13253                           tblptrh	equ	0xFF7
 13254                           tblptrl	equ	0xFF6
 13255                           tablat	equ	0xFF5
 13256                           prodh	equ	0xFF4
 13257                           prodl	equ	0xFF3
 13258                           intcon	equ	0xFF2
 13259                           intcon2	equ	0xFF1
 13260                           postinc0	equ	0xFEE
 13261                           wreg	equ	0xFE8
 13262                           postinc1	equ	0xFE6
 13263                           postdec1	equ	0xFE5
 13264                           fsr1h	equ	0xFE2
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           postdec2	equ	0xFDD
 13269                           fsr2h	equ	0xFDA
 13270                           fsr2l	equ	0xFD9
 13271                           status	equ	0xFD8
 13272                           
 13273 ;; *************** function _SendMessage *****************
 13274 ;; Defined at:
 13275 ;;		line 185 in file "../terminal.c"
 13276 ;; Parameters:    Size  Location     Type
 13277 ;;  index           2   34[BANK0 ] unsigned int 
 13278 ;;  value           2   36[BANK0 ] unsigned int 
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;		None
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  1    wreg      void 
 13283 ;; Registers used:
 13284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13290 ;;      Params:         0       4       0       0       0       0       0       0       0
 13291 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13292 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13293 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13294 ;;Total ram usage:        4 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:    5
 13297 ;; This function calls:
 13298 ;;		_printf
 13299 ;; This function is called by:
 13300 ;;		_DIAGNOSTICxTOxPC
 13301 ;; This function uses a non-reentrant model
 13302 ;;
 13303                           
 13304                           	psect	text36
 13305  004462                     __ptext36:
 13306                           	opt stack 0
 13307  004462                     _SendMessage:
 13308                           	opt stack 24
 13309                           
 13310                           ;terminal.c: 191: printf("M#%d %d\r\n", index, value);
 13311                           
 13312                           ; BSR set to: 0
 13313                           ;incstack = 0
 13314  004462  0E44               	movlw	low STR_8
 13315  004464  0100               	movlb	0	; () banked
 13316  004466  6FD1               	movwf	printf@f& (0+255),b
 13317  004468  0E08               	movlw	high STR_8
 13318  00446A  6FD2               	movwf	(printf@f+1)& (0+255),b
 13319  00446C  C0DE  F0D3         	movff	SendMessage@index,?_printf+2
 13320  004470  C0DF  F0D4         	movff	SendMessage@index+1,?_printf+3
 13321  004474  C0E0  F0D5         	movff	SendMessage@value,?_printf+4
 13322  004478  C0E1  F0D6         	movff	SendMessage@value+1,?_printf+5
 13323  00447C  EC9D  F01A         	call	_printf	;wreg free
 13324  004480  0012               	return		;funcret
 13325  004482                     __end_of_SendMessage:
 13326                           	opt stack 0
 13327                           tblptru	equ	0xFF8
 13328                           tblptrh	equ	0xFF7
 13329                           tblptrl	equ	0xFF6
 13330                           tablat	equ	0xFF5
 13331                           prodh	equ	0xFF4
 13332                           prodl	equ	0xFF3
 13333                           intcon	equ	0xFF2
 13334                           intcon2	equ	0xFF1
 13335                           postinc0	equ	0xFEE
 13336                           wreg	equ	0xFE8
 13337                           postinc1	equ	0xFE6
 13338                           postdec1	equ	0xFE5
 13339                           fsr1h	equ	0xFE2
 13340                           fsr1l	equ	0xFE1
 13341                           indf2	equ	0xFDF
 13342                           postinc2	equ	0xFDE
 13343                           postdec2	equ	0xFDD
 13344                           fsr2h	equ	0xFDA
 13345                           fsr2l	equ	0xFD9
 13346                           status	equ	0xFD8
 13347                           
 13348 ;; *************** function _printf *****************
 13349 ;; Defined at:
 13350 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 13351 ;; Parameters:    Size  Location     Type
 13352 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 13353 ;;		 -> STR_8(10), STR_7(7), STR_6(7), STR_5(7), 
 13354 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
 13355 ;; Auto vars:     Size  Location     Type
 13356 ;;  tmpval          4    0        struct .
 13357 ;;  cp              3    0        PTR const unsigned char 
 13358 ;;  val             2   31[BANK0 ] unsigned int 
 13359 ;;  ap              2   27[BANK0 ] PTR void [1]
 13360 ;;		 -> ?_printf(2), 
 13361 ;;  len             2    0        unsigned int 
 13362 ;;  c               1   33[BANK0 ] char 
 13363 ;;  prec            1   30[BANK0 ] char 
 13364 ;;  flag            1   29[BANK0 ] unsigned char 
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  2   21[BANK0 ] int 
 13367 ;; Registers used:
 13368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13369 ;; Tracked objects:
 13370 ;;		On entry : 0/0
 13371 ;;		On exit  : 0/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13374 ;;      Params:         0       6       0       0       0       0       0       0       0
 13375 ;;      Locals:         0       7       0       0       0       0       0       0       0
 13376 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13377 ;;      Totals:         1      13       0       0       0       0       0       0       0
 13378 ;;Total ram usage:       14 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; Hardware stack levels required when called:    4
 13381 ;; This function calls:
 13382 ;;		___lwdiv
 13383 ;;		___lwmod
 13384 ;;		_putch
 13385 ;; This function is called by:
 13386 ;;		_READxRECEIVEDxMESSAGE
 13387 ;;		_TranslateMessage
 13388 ;;		_SendMessage
 13389 ;; This function uses a non-reentrant model
 13390 ;;
 13391                           
 13392                           	psect	text37
 13393  00353A                     __ptext37:
 13394                           	opt stack 0
 13395  00353A                     _printf:
 13396                           	opt stack 25
 13397                           
 13398                           ;doprnt.c: 466: va_list ap;
 13399                           ;doprnt.c: 499: signed char c;
 13400                           ;doprnt.c: 506: signed char prec;
 13401                           ;doprnt.c: 508: unsigned char flag;
 13402                           ;doprnt.c: 523: union {
 13403                           ;doprnt.c: 524: unsigned long vd;
 13404                           ;doprnt.c: 525: double integ;
 13405                           ;doprnt.c: 526: } tmpval;
 13406                           ;doprnt.c: 528: unsigned int val;
 13407                           ;doprnt.c: 529: unsigned len;
 13408                           ;doprnt.c: 530: const char * cp;
 13409                           ;doprnt.c: 533: *ap = __va_start();
 13410                           
 13411                           ;incstack = 0
 13412  00353A  0ED3               	movlw	low (?_printf+2)
 13413  00353C  0100               	movlb	0	; () banked
 13414  00353E  6FD7               	movwf	printf@ap& (0+255),b
 13415  003540  0E00               	movlw	high (?_printf+2)
 13416  003542  6FD8               	movwf	(printf@ap+1)& (0+255),b
 13417                           
 13418                           ;doprnt.c: 536: while(c = *f++) {
 13419  003544  D081               	goto	u7280
 13420  003546                     
 13421                           ; BSR set to: 0
 13422                           ;doprnt.c: 538: if(c != '%')
 13423                           
 13424                           ; BSR set to: 0
 13425  003546  0E25               	movlw	37
 13426  003548  19DD               	xorwf	printf@c& (0+255),w,b
 13427  00354A  B4D8               	btfsc	status,2,c
 13428  00354C  D004               	goto	l1290
 13429                           
 13430                           ; BSR set to: 0
 13431                           ;doprnt.c: 540: {
 13432                           ;doprnt.c: 541: (putch(c) );
 13433  00354E  51DD               	movf	printf@c& (0+255),w,b
 13434  003550  EC78  F022         	call	_putch
 13435                           
 13436                           ;doprnt.c: 542: continue;
 13437  003554  D079               	goto	u7280
 13438  003556                     l1290:
 13439                           
 13440                           ;doprnt.c: 543: }
 13441                           ;doprnt.c: 548: flag = 0;
 13442  003556  0E00               	movlw	0
 13443  003558  0100               	movlb	0	; () banked
 13444  00355A  6FD9               	movwf	printf@flag& (0+255),b
 13445                           
 13446                           ; BSR set to: 0
 13447                           
 13448                           ; BSR set to: 0
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;doprnt.c: 822: }
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;doprnt.c: 813: continue;
 13455                           
 13456                           ;doprnt.c: 802: default:
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;doprnt.c: 698: case 'i':
 13460                           ;doprnt.c: 699: break;
 13461                           
 13462                           ; BSR set to: 0
 13463                           
 13464                           ;doprnt.c: 697: case 'd':
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;doprnt.c: 638: goto alldone;
 13468                           
 13469                           ;doprnt.c: 637: case 0:
 13470                           
 13471                           ;doprnt.c: 635: switch(c = *f++) {
 13472  00355C  C0D1  FFF6         	movff	printf@f,tblptrl
 13473  003560  C0D2  FFF7         	movff	printf@f+1,tblptrh
 13474  003564  4BD1               	infsnz	printf@f& (0+255),f,b
 13475  003566  2BD2               	incf	(printf@f+1)& (0+255),f,b
 13476  003568                     	if	0	;tblptru may be non-zero
 13477  003568                     	endif
 13478  003568                     	if	0	;tblptru may be non-zero
 13479  003568                     	endif
 13480  003568  0008               	tblrd		*
 13481  00356A  CFF5 F0DD          	movff	tablat,printf@c
 13482  00356E  51DD               	movf	printf@c& (0+255),w,b
 13483                           
 13484                           ; Switch size 1, requested type "space"
 13485                           ; Number of cases is 3, Range of values is 0 to 105
 13486                           ; switch strategies available:
 13487                           ; Name         Instructions Cycles
 13488                           ; simple_byte           10     6 (average)
 13489                           ;	Chosen strategy is simple_byte
 13490  003570  0A00               	xorlw	0	; case 0
 13491  003572  B4D8               	btfsc	status,2,c
 13492  003574  0012               	return	
 13493  003576  0A64               	xorlw	100	; case 100
 13494  003578  B4D8               	btfsc	status,2,c
 13495  00357A  D003               	goto	l1296
 13496  00357C  0A0D               	xorlw	13	; case 105
 13497  00357E  A4D8               	btfss	status,2,c
 13498  003580  D063               	goto	u7280
 13499  003582                     l1296:
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;doprnt.c: 1253: {
 13503                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13504                           
 13505                           ; BSR set to: 0
 13506  003582  C0D7  FFD9         	movff	printf@ap,fsr2l
 13507  003586  C0D8  FFDA         	movff	printf@ap+1,fsr2h
 13508  00358A  CFDE F0DB          	movff	postinc2,printf@val
 13509  00358E  CFDD F0DC          	movff	postdec2,printf@val+1
 13510                           
 13511                           ; BSR set to: 0
 13512  003592  0E02               	movlw	2
 13513  003594  27D7               	addwf	printf@ap& (0+255),f,b
 13514  003596  0E00               	movlw	0
 13515  003598  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;doprnt.c: 1261: if((int)val < 0) {
 13519  00359A  AFDC               	btfss	(printf@val+1)& (0+255),7,b
 13520  00359C  D006               	goto	l1298
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;doprnt.c: 1262: flag |= 0x03;
 13524  00359E  0E03               	movlw	3
 13525  0035A0  13D9               	iorwf	printf@flag& (0+255),f,b
 13526                           
 13527                           ; BSR set to: 0
 13528                           ;doprnt.c: 1263: val = -val;
 13529  0035A2  6DDB               	negf	printf@val& (0+255),b
 13530  0035A4  1FDC               	comf	(printf@val+1)& (0+255),f,b
 13531  0035A6  B0D8               	btfsc	status,0,c
 13532  0035A8  2BDC               	incf	(printf@val+1)& (0+255),f,b
 13533  0035AA                     l1298:
 13534                           
 13535                           ; BSR set to: 0
 13536                           ;doprnt.c: 1264: }
 13537                           ;doprnt.c: 1266: }
 13538                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13539                           
 13540                           ; BSR set to: 0
 13541  0035AA  0E01               	movlw	1
 13542  0035AC  6FDD               	movwf	printf@c& (0+255),b
 13543  0035AE                     l8188:
 13544                           
 13545                           ; BSR set to: 0
 13546  0035AE  0E05               	movlw	5
 13547  0035B0  19DD               	xorwf	printf@c& (0+255),w,b
 13548  0035B2  B4D8               	btfsc	status,2,c
 13549  0035B4  D012               	goto	u7260
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;doprnt.c: 1306: if(val < dpowers[c])
 13553                           
 13554                           ; BSR set to: 0
 13555                           
 13556                           ; BSR set to: 0
 13557  0035B6  51DD               	movf	printf@c& (0+255),w,b
 13558  0035B8  0D02               	mullw	2
 13559  0035BA  0E39               	movlw	low _dpowers
 13560  0035BC  24F3               	addwf	prodl,w,c
 13561  0035BE  6EF6               	movwf	tblptrl,c
 13562  0035C0  0E08               	movlw	high _dpowers
 13563  0035C2  20F4               	addwfc	prodh,w,c
 13564  0035C4  6EF7               	movwf	tblptrh,c
 13565  0035C6                     	if	0	;There are less than 3 active tblptr bytes
 13566  0035C6                     	endif
 13567  0035C6  0009               	tblrd		*+
 13568  0035C8  50F5               	movf	tablat,w,c
 13569  0035CA  5DDB               	subwf	printf@val& (0+255),w,b
 13570  0035CC  0009               	tblrd		*+
 13571  0035CE  50F5               	movf	tablat,w,c
 13572  0035D0  59DC               	subwfb	(printf@val+1)& (0+255),w,b
 13573  0035D2  A0D8               	btfss	status,0,c
 13574  0035D4  D002               	goto	u7260
 13575                           
 13576                           ; BSR set to: 0
 13577                           
 13578                           ; BSR set to: 0
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;doprnt.c: 1307: break;
 13582  0035D6  2BDD               	incf	printf@c& (0+255),f,b
 13583  0035D8  D7EA               	goto	l8188
 13584  0035DA                     u7260:
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;doprnt.c: 1422: {
 13588                           ;doprnt.c: 1438: if(flag & 0x03)
 13589                           
 13590                           ; BSR set to: 0
 13591  0035DA  C0D9  F01F         	movff	printf@flag,??_printf
 13592  0035DE  0E03               	movlw	3
 13593  0035E0  161F               	andwf	??_printf,f,c
 13594  0035E2  B4D8               	btfsc	status,2,c
 13595  0035E4  D003               	goto	l1302
 13596                           
 13597                           ; BSR set to: 0
 13598                           ;doprnt.c: 1439: (putch('-') );
 13599  0035E6  0E2D               	movlw	45
 13600  0035E8  EC78  F022         	call	_putch
 13601  0035EC                     l1302:
 13602                           
 13603                           ;doprnt.c: 1469: }
 13604                           ;doprnt.c: 1472: prec = c;
 13605  0035EC  C0DD  F0DA         	movff	printf@c,printf@prec
 13606                           
 13607                           ;doprnt.c: 1474: while(prec--) {
 13608  0035F0  D026               	goto	l1303
 13609  0035F2                     
 13610                           ;doprnt.c: 1478: {
 13611                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13612  0035F2  0100               	movlb	0	; () banked
 13613  0035F4  51DA               	movf	printf@prec& (0+255),w,b
 13614  0035F6  0D02               	mullw	2
 13615  0035F8  0E39               	movlw	low _dpowers
 13616  0035FA  24F3               	addwf	prodl,w,c
 13617  0035FC  6EF6               	movwf	tblptrl,c
 13618  0035FE  0E08               	movlw	high _dpowers
 13619  003600  20F4               	addwfc	prodh,w,c
 13620  003602  6EF7               	movwf	tblptrh,c
 13621  003604                     	if	0	;There are less than 3 active tblptr bytes
 13622  003604                     	endif
 13623  003604  0009               	tblrd		*+
 13624  003606  CFF5 F015          	movff	tablat,___lwdiv@divisor
 13625  00360A  000A               	tblrd		*-
 13626  00360C  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
 13627  003610  C0DB  F013         	movff	printf@val,___lwdiv@dividend
 13628  003614  C0DC  F014         	movff	printf@val+1,___lwdiv@dividend+1
 13629  003618  ECF2  F020         	call	___lwdiv	;wreg free
 13630  00361C  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
 13631  003620  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
 13632  003624  0E00               	movlw	0
 13633  003626  6E1D               	movwf	___lwmod@divisor+1,c
 13634  003628  0E0A               	movlw	10
 13635  00362A  6E1C               	movwf	___lwmod@divisor,c
 13636  00362C  EC67  F021         	call	___lwmod	;wreg free
 13637  003630  501A               	movf	?___lwmod,w,c
 13638  003632  0F30               	addlw	48
 13639  003634  0100               	movlb	0	; () banked
 13640  003636  6FDD               	movwf	printf@c& (0+255),b
 13641                           
 13642                           ; BSR set to: 0
 13643                           ;doprnt.c: 1523: }
 13644                           ;doprnt.c: 1524: (putch(c) );
 13645  003638  51DD               	movf	printf@c& (0+255),w,b
 13646  00363A  EC78  F022         	call	_putch
 13647  00363E                     l1303:
 13648  00363E  0100               	movlb	0	; () banked
 13649  003640  07DA               	decf	printf@prec& (0+255),f,b
 13650  003642  29DA               	incf	printf@prec& (0+255),w,b
 13651  003644  A4D8               	btfss	status,2,c
 13652  003646  D7D5               	goto	l1304
 13653  003648                     u7280:
 13654                           
 13655                           ; BSR set to: 0
 13656                           
 13657                           ; BSR set to: 0
 13658  003648  C0D1  FFF6         	movff	printf@f,tblptrl
 13659  00364C  C0D2  FFF7         	movff	printf@f+1,tblptrh
 13660  003650  0100               	movlb	0	; () banked
 13661  003652  4BD1               	infsnz	printf@f& (0+255),f,b
 13662  003654  2BD2               	incf	(printf@f+1)& (0+255),f,b
 13663  003656                     	if	0	;tblptru may be non-zero
 13664  003656                     	endif
 13665  003656                     	if	0	;tblptru may be non-zero
 13666  003656                     	endif
 13667  003656  0008               	tblrd		*
 13668  003658  CFF5 F0DD          	movff	tablat,printf@c
 13669  00365C  51DD               	movf	printf@c& (0+255),w,b
 13670  00365E  B4D8               	btfsc	status,2,c
 13671  003660  0012               	return	
 13672  003662  D771               	goto	l1289
 13673  003664                     __end_of_printf:
 13674                           	opt stack 0
 13675                           tblptru	equ	0xFF8
 13676                           tblptrh	equ	0xFF7
 13677                           tblptrl	equ	0xFF6
 13678                           tablat	equ	0xFF5
 13679                           prodh	equ	0xFF4
 13680                           prodl	equ	0xFF3
 13681                           intcon	equ	0xFF2
 13682                           intcon2	equ	0xFF1
 13683                           postinc0	equ	0xFEE
 13684                           wreg	equ	0xFE8
 13685                           postinc1	equ	0xFE6
 13686                           postdec1	equ	0xFE5
 13687                           fsr1h	equ	0xFE2
 13688                           fsr1l	equ	0xFE1
 13689                           indf2	equ	0xFDF
 13690                           postinc2	equ	0xFDE
 13691                           postdec2	equ	0xFDD
 13692                           fsr2h	equ	0xFDA
 13693                           fsr2l	equ	0xFD9
 13694                           status	equ	0xFD8
 13695                           
 13696 ;; *************** function _putch *****************
 13697 ;; Defined at:
 13698 ;;		line 178 in file "../eusart1.c"
 13699 ;; Parameters:    Size  Location     Type
 13700 ;;  data            1    wreg     unsigned char 
 13701 ;; Auto vars:     Size  Location     Type
 13702 ;;  data            1   18[COMRAM] unsigned char 
 13703 ;; Return value:  Size  Location     Type
 13704 ;;                  1    wreg      void 
 13705 ;; Registers used:
 13706 ;;		wreg
 13707 ;; Tracked objects:
 13708 ;;		On entry : 0/0
 13709 ;;		On exit  : 0/0
 13710 ;;		Unchanged: 0/0
 13711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13712 ;;      Params:         0       0       0       0       0       0       0       0       0
 13713 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13714 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13715 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13716 ;;Total ram usage:        1 bytes
 13717 ;; Hardware stack levels used:    1
 13718 ;; Hardware stack levels required when called:    3
 13719 ;; This function calls:
 13720 ;;		Nothing
 13721 ;; This function is called by:
 13722 ;;		_printf
 13723 ;; This function uses a non-reentrant model
 13724 ;;
 13725                           
 13726                           	psect	text38
 13727  0044F0                     __ptext38:
 13728                           	opt stack 0
 13729  0044F0                     _putch:
 13730                           	opt stack 25
 13731                           
 13732                           ; BSR set to: 0
 13733                           ;incstack = 0
 13734                           ;putch@data stored from wreg
 13735  0044F0  6E13               	movwf	putch@data,c
 13736  0044F2                     
 13737                           ;eusart1.c: 180: continue;
 13738                           
 13739                           ;eusart1.c: 179: while(! TXIF)
 13740  0044F2  A89E               	btfss	3998,4,c	;volatile
 13741  0044F4  D7FE               	goto	l7624
 13742                           
 13743                           ;eusart1.c: 181: TXREG1 = data;
 13744  0044F6  C013  FFAD         	movff	putch@data,4013	;volatile
 13745  0044FA  0012               	return		;funcret
 13746  0044FC                     __end_of_putch:
 13747                           	opt stack 0
 13748                           tblptru	equ	0xFF8
 13749                           tblptrh	equ	0xFF7
 13750                           tblptrl	equ	0xFF6
 13751                           tablat	equ	0xFF5
 13752                           prodh	equ	0xFF4
 13753                           prodl	equ	0xFF3
 13754                           intcon	equ	0xFF2
 13755                           intcon2	equ	0xFF1
 13756                           postinc0	equ	0xFEE
 13757                           wreg	equ	0xFE8
 13758                           postinc1	equ	0xFE6
 13759                           postdec1	equ	0xFE5
 13760                           fsr1h	equ	0xFE2
 13761                           fsr1l	equ	0xFE1
 13762                           indf2	equ	0xFDF
 13763                           postinc2	equ	0xFDE
 13764                           postdec2	equ	0xFDD
 13765                           fsr2h	equ	0xFDA
 13766                           fsr2l	equ	0xFD9
 13767                           status	equ	0xFD8
 13768                           
 13769 ;; *************** function ___lwmod *****************
 13770 ;; Defined at:
 13771 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13772 ;; Parameters:    Size  Location     Type
 13773 ;;  dividend        2   25[COMRAM] unsigned int 
 13774 ;;  divisor         2   27[COMRAM] unsigned int 
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;  counter         1   29[COMRAM] unsigned char 
 13777 ;; Return value:  Size  Location     Type
 13778 ;;                  2   25[COMRAM] unsigned int 
 13779 ;; Registers used:
 13780 ;;		wreg, status,2, status,0
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13786 ;;      Params:         4       0       0       0       0       0       0       0       0
 13787 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13789 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13790 ;;Total ram usage:        5 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    3
 13793 ;; This function calls:
 13794 ;;		Nothing
 13795 ;; This function is called by:
 13796 ;;		_printf
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           	psect	text39
 13801  0042CE                     __ptext39:
 13802                           	opt stack 0
 13803  0042CE                     ___lwmod:
 13804                           	opt stack 25
 13805                           
 13806                           ;incstack = 0
 13807  0042CE  501C               	movf	___lwmod@divisor,w,c
 13808  0042D0  101D               	iorwf	___lwmod@divisor+1,w,c
 13809  0042D2  B4D8               	btfsc	status,2,c
 13810  0042D4  D018               	goto	l1753
 13811  0042D6  0E01               	movlw	1
 13812  0042D8  6E1E               	movwf	___lwmod@counter,c
 13813  0042DA  D004               	goto	l1748
 13814  0042DC  90D8               	bcf	status,0,c
 13815  0042DE  361C               	rlcf	___lwmod@divisor,f,c
 13816  0042E0  361D               	rlcf	___lwmod@divisor+1,f,c
 13817  0042E2  2A1E               	incf	___lwmod@counter,f,c
 13818  0042E4                     l1748:
 13819  0042E4  AE1D               	btfss	___lwmod@divisor+1,7,c
 13820  0042E6  D7FA               	goto	l1749
 13821  0042E8                     u6700:
 13822  0042E8  501C               	movf	___lwmod@divisor,w,c
 13823  0042EA  5C1A               	subwf	___lwmod@dividend,w,c
 13824  0042EC  501D               	movf	___lwmod@divisor+1,w,c
 13825  0042EE  581B               	subwfb	___lwmod@dividend+1,w,c
 13826  0042F0  A0D8               	btfss	status,0,c
 13827  0042F2  D004               	goto	l1752
 13828  0042F4  501C               	movf	___lwmod@divisor,w,c
 13829  0042F6  5E1A               	subwf	___lwmod@dividend,f,c
 13830  0042F8  501D               	movf	___lwmod@divisor+1,w,c
 13831  0042FA  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13832  0042FC                     l1752:
 13833  0042FC  90D8               	bcf	status,0,c
 13834  0042FE  321D               	rrcf	___lwmod@divisor+1,f,c
 13835  004300  321C               	rrcf	___lwmod@divisor,f,c
 13836  004302  2E1E               	decfsz	___lwmod@counter,f,c
 13837  004304  D7F1               	goto	u6700
 13838  004306                     l1753:
 13839  004306  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13840  00430A  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13841  00430E  0012               	return		;funcret
 13842  004310                     __end_of___lwmod:
 13843                           	opt stack 0
 13844                           tblptru	equ	0xFF8
 13845                           tblptrh	equ	0xFF7
 13846                           tblptrl	equ	0xFF6
 13847                           tablat	equ	0xFF5
 13848                           prodh	equ	0xFF4
 13849                           prodl	equ	0xFF3
 13850                           intcon	equ	0xFF2
 13851                           intcon2	equ	0xFF1
 13852                           postinc0	equ	0xFEE
 13853                           wreg	equ	0xFE8
 13854                           postinc1	equ	0xFE6
 13855                           postdec1	equ	0xFE5
 13856                           fsr1h	equ	0xFE2
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           fsr2h	equ	0xFDA
 13862                           fsr2l	equ	0xFD9
 13863                           status	equ	0xFD8
 13864                           
 13865 ;; *************** function ___lwdiv *****************
 13866 ;; Defined at:
 13867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  dividend        2   18[COMRAM] unsigned int 
 13870 ;;  divisor         2   20[COMRAM] unsigned int 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;  quotient        2   23[COMRAM] unsigned int 
 13873 ;;  counter         1   22[COMRAM] unsigned char 
 13874 ;; Return value:  Size  Location     Type
 13875 ;;                  2   18[COMRAM] unsigned int 
 13876 ;; Registers used:
 13877 ;;		wreg, status,2, status,0
 13878 ;; Tracked objects:
 13879 ;;		On entry : 0/0
 13880 ;;		On exit  : 0/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13883 ;;      Params:         4       0       0       0       0       0       0       0       0
 13884 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13885 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13886 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13887 ;;Total ram usage:        7 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; Hardware stack levels required when called:    3
 13890 ;; This function calls:
 13891 ;;		Nothing
 13892 ;; This function is called by:
 13893 ;;		_printf
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           	psect	text40
 13898  0041E4                     __ptext40:
 13899                           	opt stack 0
 13900  0041E4                     ___lwdiv:
 13901                           	opt stack 25
 13902                           
 13903                           ;incstack = 0
 13904  0041E4  0E00               	movlw	0
 13905  0041E6  6E19               	movwf	___lwdiv@quotient+1,c
 13906  0041E8  0E00               	movlw	0
 13907  0041EA  6E18               	movwf	___lwdiv@quotient,c
 13908  0041EC  5015               	movf	___lwdiv@divisor,w,c
 13909  0041EE  1016               	iorwf	___lwdiv@divisor+1,w,c
 13910  0041F0  B4D8               	btfsc	status,2,c
 13911  0041F2  D01C               	goto	l1743
 13912  0041F4  0E01               	movlw	1
 13913  0041F6  6E17               	movwf	___lwdiv@counter,c
 13914  0041F8  D004               	goto	l1738
 13915  0041FA  90D8               	bcf	status,0,c
 13916  0041FC  3615               	rlcf	___lwdiv@divisor,f,c
 13917  0041FE  3616               	rlcf	___lwdiv@divisor+1,f,c
 13918  004200  2A17               	incf	___lwdiv@counter,f,c
 13919  004202                     l1738:
 13920  004202  AE16               	btfss	___lwdiv@divisor+1,7,c
 13921  004204  D7FA               	goto	l1739
 13922  004206                     u6670:
 13923  004206  90D8               	bcf	status,0,c
 13924  004208  3618               	rlcf	___lwdiv@quotient,f,c
 13925  00420A  3619               	rlcf	___lwdiv@quotient+1,f,c
 13926  00420C  5015               	movf	___lwdiv@divisor,w,c
 13927  00420E  5C13               	subwf	___lwdiv@dividend,w,c
 13928  004210  5016               	movf	___lwdiv@divisor+1,w,c
 13929  004212  5814               	subwfb	___lwdiv@dividend+1,w,c
 13930  004214  A0D8               	btfss	status,0,c
 13931  004216  D005               	goto	l1742
 13932  004218  5015               	movf	___lwdiv@divisor,w,c
 13933  00421A  5E13               	subwf	___lwdiv@dividend,f,c
 13934  00421C  5016               	movf	___lwdiv@divisor+1,w,c
 13935  00421E  5A14               	subwfb	___lwdiv@dividend+1,f,c
 13936  004220  8018               	bsf	___lwdiv@quotient,0,c
 13937  004222                     l1742:
 13938  004222  90D8               	bcf	status,0,c
 13939  004224  3216               	rrcf	___lwdiv@divisor+1,f,c
 13940  004226  3215               	rrcf	___lwdiv@divisor,f,c
 13941  004228  2E17               	decfsz	___lwdiv@counter,f,c
 13942  00422A  D7ED               	goto	u6670
 13943  00422C                     l1743:
 13944  00422C  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
 13945  004230  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13946  004234  0012               	return		;funcret
 13947  004236                     __end_of___lwdiv:
 13948                           	opt stack 0
 13949                           tblptru	equ	0xFF8
 13950                           tblptrh	equ	0xFF7
 13951                           tblptrl	equ	0xFF6
 13952                           tablat	equ	0xFF5
 13953                           prodh	equ	0xFF4
 13954                           prodl	equ	0xFF3
 13955                           intcon	equ	0xFF2
 13956                           intcon2	equ	0xFF1
 13957                           postinc0	equ	0xFEE
 13958                           wreg	equ	0xFE8
 13959                           postinc1	equ	0xFE6
 13960                           postdec1	equ	0xFE5
 13961                           fsr1h	equ	0xFE2
 13962                           fsr1l	equ	0xFE1
 13963                           indf2	equ	0xFDF
 13964                           postinc2	equ	0xFDE
 13965                           postdec2	equ	0xFDD
 13966                           fsr2h	equ	0xFDA
 13967                           fsr2l	equ	0xFD9
 13968                           status	equ	0xFD8
 13969                           
 13970 ;; *************** function _APIxInitialize *****************
 13971 ;; Defined at:
 13972 ;;		line 33 in file "../api.c"
 13973 ;; Parameters:    Size  Location     Type
 13974 ;;		None
 13975 ;; Auto vars:     Size  Location     Type
 13976 ;;  i               2   18[COMRAM] unsigned int 
 13977 ;; Return value:  Size  Location     Type
 13978 ;;                  1    wreg      void 
 13979 ;; Registers used:
 13980 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13981 ;; Tracked objects:
 13982 ;;		On entry : 0/0
 13983 ;;		On exit  : 0/0
 13984 ;;		Unchanged: 0/0
 13985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13986 ;;      Params:         0       0       0       0       0       0       0       0       0
 13987 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13988 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13989 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13990 ;;Total ram usage:        2 bytes
 13991 ;; Hardware stack levels used:    1
 13992 ;; Hardware stack levels required when called:    3
 13993 ;; This function calls:
 13994 ;;		Nothing
 13995 ;; This function is called by:
 13996 ;;		_main
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           	psect	text41
 14001  001E5C                     __ptext41:
 14002                           	opt stack 0
 14003  001E5C                     _APIxInitialize:
 14004                           	opt stack 27
 14005                           
 14006                           ;api.c: 35: unsigned int i;
 14007                           ;api.c: 36: for(i = 0; i < (89); i++ )
 14008                           
 14009                           ;incstack = 0
 14010  001E5C  0E00               	movlw	0
 14011  001E5E  6E14               	movwf	APIxInitialize@i+1,c
 14012  001E60  0E00               	movlw	0
 14013  001E62  6E13               	movwf	APIxInitialize@i,c
 14014  001E64                     l6220:
 14015  001E64  5014               	movf	APIxInitialize@i+1,w,c
 14016  001E66  E12E               	bnz	l6230
 14017  001E68  0E59               	movlw	89
 14018  001E6A  5C13               	subwf	APIxInitialize@i,w,c
 14019  001E6C  B0D8               	btfsc	status,0,c
 14020  001E6E  D02A               	goto	u5330
 14021                           
 14022                           ;api.c: 37: {
 14023                           ;api.c: 38: API_RW[i] = 0;
 14024  001E70  90D8               	bcf	status,0,c
 14025  001E72  3413               	rlcf	APIxInitialize@i,w,c
 14026  001E74  6ED9               	movwf	fsr2l,c
 14027  001E76  3414               	rlcf	APIxInitialize@i+1,w,c
 14028  001E78  6EDA               	movwf	fsr2h,c
 14029  001E7A  0E00               	movlw	low _API_RW
 14030  001E7C  26D9               	addwf	fsr2l,f,c
 14031  001E7E  0E02               	movlw	high _API_RW
 14032  001E80  22DA               	addwfc	fsr2h,f,c
 14033  001E82  0E00               	movlw	0
 14034  001E84  6EDE               	movwf	postinc2,c
 14035  001E86  0E00               	movlw	0
 14036  001E88  6EDD               	movwf	postdec2,c
 14037                           
 14038                           ;api.c: 39: API[i] = 0;
 14039  001E8A  90D8               	bcf	status,0,c
 14040  001E8C  3413               	rlcf	APIxInitialize@i,w,c
 14041  001E8E  6ED9               	movwf	fsr2l,c
 14042  001E90  3414               	rlcf	APIxInitialize@i+1,w,c
 14043  001E92  6EDA               	movwf	fsr2h,c
 14044  001E94  0E00               	movlw	low _API
 14045  001E96  26D9               	addwf	fsr2l,f,c
 14046  001E98  0E01               	movlw	high _API
 14047  001E9A  22DA               	addwfc	fsr2h,f,c
 14048  001E9C  0E00               	movlw	0
 14049  001E9E  6EDE               	movwf	postinc2,c
 14050  001EA0  0E00               	movlw	0
 14051  001EA2  6EDD               	movwf	postdec2,c
 14052                           
 14053                           ;api.c: 40: API_EEPROM[i] = 0xFFFF;
 14054  001EA4  90D8               	bcf	status,0,c
 14055  001EA6  3413               	rlcf	APIxInitialize@i,w,c
 14056  001EA8  6ED9               	movwf	fsr2l,c
 14057  001EAA  3414               	rlcf	APIxInitialize@i+1,w,c
 14058  001EAC  6EDA               	movwf	fsr2h,c
 14059  001EAE  0E00               	movlw	low _API_EEPROM
 14060  001EB0  26D9               	addwf	fsr2l,f,c
 14061  001EB2  0E03               	movlw	high _API_EEPROM
 14062  001EB4  22DA               	addwfc	fsr2h,f,c
 14063  001EB6  0EFF               	movlw	255
 14064  001EB8  6EDE               	movwf	postinc2,c
 14065  001EBA  0EFF               	movlw	255
 14066  001EBC  6EDD               	movwf	postdec2,c
 14067  001EBE  4A13               	infsnz	APIxInitialize@i,f,c
 14068  001EC0  2A14               	incf	APIxInitialize@i+1,f,c
 14069  001EC2  D7D0               	goto	l6220
 14070  001EC4                     u5330:
 14071  001EC4                     l6230:
 14072                           
 14073                           ;api.c: 41: }
 14074                           ;api.c: 44: API_RW[16] = 0;
 14075  001EC4  0E00               	movlw	0
 14076  001EC6  0102               	movlb	2	; () banked
 14077  001EC8  6F21               	movwf	(_API_RW+33)& (0+255),b
 14078  001ECA  0E00               	movlw	0
 14079  001ECC  6F20               	movwf	(_API_RW+32)& (0+255),b
 14080                           
 14081                           ;api.c: 45: API_RW[17] = 0;
 14082  001ECE  0E00               	movlw	0
 14083  001ED0  6F23               	movwf	(_API_RW+35)& (0+255),b
 14084  001ED2  0E00               	movlw	0
 14085  001ED4  6F22               	movwf	(_API_RW+34)& (0+255),b
 14086                           
 14087                           ;api.c: 46: API_RW[18] = 1;
 14088  001ED6  0E00               	movlw	0
 14089  001ED8  6F25               	movwf	(_API_RW+37)& (0+255),b
 14090  001EDA  0E01               	movlw	1
 14091  001EDC  6F24               	movwf	(_API_RW+36)& (0+255),b
 14092                           
 14093                           ;api.c: 47: API_RW[19] = 1;
 14094  001EDE  0E00               	movlw	0
 14095  001EE0  6F27               	movwf	(_API_RW+39)& (0+255),b
 14096  001EE2  0E01               	movlw	1
 14097  001EE4  6F26               	movwf	(_API_RW+38)& (0+255),b
 14098                           
 14099                           ;api.c: 48: API_RW[20] = 1;
 14100  001EE6  0E00               	movlw	0
 14101  001EE8  6F29               	movwf	(_API_RW+41)& (0+255),b
 14102  001EEA  0E01               	movlw	1
 14103  001EEC  6F28               	movwf	(_API_RW+40)& (0+255),b
 14104                           
 14105                           ;api.c: 49: API_RW[21] = 1;
 14106  001EEE  0E00               	movlw	0
 14107  001EF0  6F2B               	movwf	(_API_RW+43)& (0+255),b
 14108  001EF2  0E01               	movlw	1
 14109  001EF4  6F2A               	movwf	(_API_RW+42)& (0+255),b
 14110                           
 14111                           ;api.c: 50: API_RW[22] = 1;
 14112  001EF6  0E00               	movlw	0
 14113  001EF8  6F2D               	movwf	(_API_RW+45)& (0+255),b
 14114  001EFA  0E01               	movlw	1
 14115  001EFC  6F2C               	movwf	(_API_RW+44)& (0+255),b
 14116                           
 14117                           ;api.c: 51: API_RW[23] = 1;
 14118  001EFE  0E00               	movlw	0
 14119  001F00  6F2F               	movwf	(_API_RW+47)& (0+255),b
 14120  001F02  0E01               	movlw	1
 14121  001F04  6F2E               	movwf	(_API_RW+46)& (0+255),b
 14122                           
 14123                           ;api.c: 52: API_RW[24] = 1;
 14124  001F06  0E00               	movlw	0
 14125  001F08  6F31               	movwf	(_API_RW+49)& (0+255),b
 14126  001F0A  0E01               	movlw	1
 14127  001F0C  6F30               	movwf	(_API_RW+48)& (0+255),b
 14128                           
 14129                           ;api.c: 53: API_RW[25] = 1;
 14130  001F0E  0E00               	movlw	0
 14131  001F10  6F33               	movwf	(_API_RW+51)& (0+255),b
 14132  001F12  0E01               	movlw	1
 14133  001F14  6F32               	movwf	(_API_RW+50)& (0+255),b
 14134                           
 14135                           ;api.c: 54: API_RW[26] = 1;
 14136  001F16  0E00               	movlw	0
 14137  001F18  6F35               	movwf	(_API_RW+53)& (0+255),b
 14138  001F1A  0E01               	movlw	1
 14139  001F1C  6F34               	movwf	(_API_RW+52)& (0+255),b
 14140                           
 14141                           ;api.c: 55: API_RW[27] = 1;
 14142  001F1E  0E00               	movlw	0
 14143  001F20  6F37               	movwf	(_API_RW+55)& (0+255),b
 14144  001F22  0E01               	movlw	1
 14145  001F24  6F36               	movwf	(_API_RW+54)& (0+255),b
 14146                           
 14147                           ;api.c: 56: API_RW[28] = 0;
 14148  001F26  0E00               	movlw	0
 14149  001F28  6F39               	movwf	(_API_RW+57)& (0+255),b
 14150  001F2A  0E00               	movlw	0
 14151  001F2C  6F38               	movwf	(_API_RW+56)& (0+255),b
 14152                           
 14153                           ;api.c: 57: API_RW[29] = 0;
 14154  001F2E  0E00               	movlw	0
 14155  001F30  6F3B               	movwf	(_API_RW+59)& (0+255),b
 14156  001F32  0E00               	movlw	0
 14157  001F34  6F3A               	movwf	(_API_RW+58)& (0+255),b
 14158                           
 14159                           ;api.c: 58: API_RW[30] = 0;
 14160  001F36  0E00               	movlw	0
 14161  001F38  6F3D               	movwf	(_API_RW+61)& (0+255),b
 14162  001F3A  0E00               	movlw	0
 14163  001F3C  6F3C               	movwf	(_API_RW+60)& (0+255),b
 14164                           
 14165                           ;api.c: 59: API_RW[31] = 0;
 14166  001F3E  0E00               	movlw	0
 14167  001F40  6F3F               	movwf	(_API_RW+63)& (0+255),b
 14168  001F42  0E00               	movlw	0
 14169  001F44  6F3E               	movwf	(_API_RW+62)& (0+255),b
 14170                           
 14171                           ;api.c: 60: API_RW[32] = 0;
 14172  001F46  0E00               	movlw	0
 14173  001F48  6F41               	movwf	(_API_RW+65)& (0+255),b
 14174  001F4A  0E00               	movlw	0
 14175  001F4C  6F40               	movwf	(_API_RW+64)& (0+255),b
 14176                           
 14177                           ;api.c: 61: API_RW[33] = 0;
 14178  001F4E  0E00               	movlw	0
 14179  001F50  6F43               	movwf	(_API_RW+67)& (0+255),b
 14180  001F52  0E00               	movlw	0
 14181  001F54  6F42               	movwf	(_API_RW+66)& (0+255),b
 14182                           
 14183                           ;api.c: 62: API_RW[34] = 0;
 14184  001F56  0E00               	movlw	0
 14185  001F58  6F45               	movwf	(_API_RW+69)& (0+255),b
 14186  001F5A  0E00               	movlw	0
 14187  001F5C  6F44               	movwf	(_API_RW+68)& (0+255),b
 14188                           
 14189                           ;api.c: 63: API_RW[35] = 0;
 14190  001F5E  0E00               	movlw	0
 14191  001F60  6F47               	movwf	(_API_RW+71)& (0+255),b
 14192  001F62  0E00               	movlw	0
 14193  001F64  6F46               	movwf	(_API_RW+70)& (0+255),b
 14194                           
 14195                           ;api.c: 64: API_RW[36] = 0;
 14196  001F66  0E00               	movlw	0
 14197  001F68  6F49               	movwf	(_API_RW+73)& (0+255),b
 14198  001F6A  0E00               	movlw	0
 14199  001F6C  6F48               	movwf	(_API_RW+72)& (0+255),b
 14200                           
 14201                           ;api.c: 65: API_RW[37] = 0;
 14202  001F6E  0E00               	movlw	0
 14203  001F70  6F4B               	movwf	(_API_RW+75)& (0+255),b
 14204  001F72  0E00               	movlw	0
 14205  001F74  6F4A               	movwf	(_API_RW+74)& (0+255),b
 14206                           
 14207                           ;api.c: 66: API_RW[38] = 0;
 14208  001F76  0E00               	movlw	0
 14209  001F78  6F4D               	movwf	(_API_RW+77)& (0+255),b
 14210  001F7A  0E00               	movlw	0
 14211  001F7C  6F4C               	movwf	(_API_RW+76)& (0+255),b
 14212                           
 14213                           ;api.c: 67: API_RW[39] = 1;
 14214  001F7E  0E00               	movlw	0
 14215  001F80  6F4F               	movwf	(_API_RW+79)& (0+255),b
 14216  001F82  0E01               	movlw	1
 14217  001F84  6F4E               	movwf	(_API_RW+78)& (0+255),b
 14218                           
 14219                           ;api.c: 68: API_RW[40] = 1;
 14220  001F86  0E00               	movlw	0
 14221  001F88  6F51               	movwf	(_API_RW+81)& (0+255),b
 14222  001F8A  0E01               	movlw	1
 14223  001F8C  6F50               	movwf	(_API_RW+80)& (0+255),b
 14224                           
 14225                           ;api.c: 69: API_RW[41] = 0;
 14226  001F8E  0E00               	movlw	0
 14227  001F90  6F53               	movwf	(_API_RW+83)& (0+255),b
 14228  001F92  0E00               	movlw	0
 14229  001F94  6F52               	movwf	(_API_RW+82)& (0+255),b
 14230                           
 14231                           ;api.c: 70: API_RW[42] = 0;
 14232  001F96  0E00               	movlw	0
 14233  001F98  6F55               	movwf	(_API_RW+85)& (0+255),b
 14234  001F9A  0E00               	movlw	0
 14235  001F9C  6F54               	movwf	(_API_RW+84)& (0+255),b
 14236                           
 14237                           ;api.c: 71: API_RW[43] = 0;
 14238  001F9E  0E00               	movlw	0
 14239  001FA0  6F57               	movwf	(_API_RW+87)& (0+255),b
 14240  001FA2  0E00               	movlw	0
 14241  001FA4  6F56               	movwf	(_API_RW+86)& (0+255),b
 14242                           
 14243                           ;api.c: 72: API_RW[44] = 0;
 14244  001FA6  0E00               	movlw	0
 14245  001FA8  6F59               	movwf	(_API_RW+89)& (0+255),b
 14246  001FAA  0E00               	movlw	0
 14247  001FAC  6F58               	movwf	(_API_RW+88)& (0+255),b
 14248                           
 14249                           ;api.c: 73: API_RW[45] = 1;
 14250  001FAE  0E00               	movlw	0
 14251  001FB0  6F5B               	movwf	(_API_RW+91)& (0+255),b
 14252  001FB2  0E01               	movlw	1
 14253  001FB4  6F5A               	movwf	(_API_RW+90)& (0+255),b
 14254                           
 14255                           ;api.c: 74: API_RW[46] = 1;
 14256  001FB6  0E00               	movlw	0
 14257  001FB8  6F5D               	movwf	(_API_RW+93)& (0+255),b
 14258  001FBA  0E01               	movlw	1
 14259  001FBC  6F5C               	movwf	(_API_RW+92)& (0+255),b
 14260                           
 14261                           ;api.c: 75: API_RW[47] = 1;
 14262  001FBE  0E00               	movlw	0
 14263  001FC0  6F5F               	movwf	(_API_RW+95)& (0+255),b
 14264  001FC2  0E01               	movlw	1
 14265  001FC4  6F5E               	movwf	(_API_RW+94)& (0+255),b
 14266                           
 14267                           ;api.c: 76: API_RW[48] = 1;
 14268  001FC6  0E00               	movlw	0
 14269  001FC8  6F61               	movwf	(_API_RW+97)& (0+255),b
 14270  001FCA  0E01               	movlw	1
 14271  001FCC  6F60               	movwf	(_API_RW+96)& (0+255),b
 14272                           
 14273                           ;api.c: 77: API_RW[49] = 1;
 14274  001FCE  0E00               	movlw	0
 14275  001FD0  6F63               	movwf	(_API_RW+99)& (0+255),b
 14276  001FD2  0E01               	movlw	1
 14277  001FD4  6F62               	movwf	(_API_RW+98)& (0+255),b
 14278                           
 14279                           ;api.c: 78: API_RW[50] = 1;
 14280  001FD6  0E00               	movlw	0
 14281  001FD8  6F65               	movwf	(_API_RW+101)& (0+255),b
 14282  001FDA  0E01               	movlw	1
 14283  001FDC  6F64               	movwf	(_API_RW+100)& (0+255),b
 14284                           
 14285                           ;api.c: 79: API_RW[51] = 1;
 14286  001FDE  0E00               	movlw	0
 14287  001FE0  6F67               	movwf	(_API_RW+103)& (0+255),b
 14288  001FE2  0E01               	movlw	1
 14289  001FE4  6F66               	movwf	(_API_RW+102)& (0+255),b
 14290                           
 14291                           ;api.c: 80: API_RW[52] = 1;
 14292  001FE6  0E00               	movlw	0
 14293  001FE8  6F69               	movwf	(_API_RW+105)& (0+255),b
 14294  001FEA  0E01               	movlw	1
 14295  001FEC  6F68               	movwf	(_API_RW+104)& (0+255),b
 14296                           
 14297                           ;api.c: 81: API_RW[53] = 1;
 14298  001FEE  0E00               	movlw	0
 14299  001FF0  6F6B               	movwf	(_API_RW+107)& (0+255),b
 14300  001FF2  0E01               	movlw	1
 14301  001FF4  6F6A               	movwf	(_API_RW+106)& (0+255),b
 14302                           
 14303                           ;api.c: 82: API_RW[54] = 1;
 14304  001FF6  0E00               	movlw	0
 14305  001FF8  6F6D               	movwf	(_API_RW+109)& (0+255),b
 14306  001FFA  0E01               	movlw	1
 14307  001FFC  6F6C               	movwf	(_API_RW+108)& (0+255),b
 14308                           
 14309                           ;api.c: 83: API_RW[55] = 1;
 14310  001FFE  0E00               	movlw	0
 14311  002000  6F6F               	movwf	(_API_RW+111)& (0+255),b
 14312  002002  0E01               	movlw	1
 14313  002004  6F6E               	movwf	(_API_RW+110)& (0+255),b
 14314                           
 14315                           ;api.c: 84: API_RW[56] = 1;
 14316  002006  0E00               	movlw	0
 14317  002008  6F71               	movwf	(_API_RW+113)& (0+255),b
 14318  00200A  0E01               	movlw	1
 14319  00200C  6F70               	movwf	(_API_RW+112)& (0+255),b
 14320                           
 14321                           ;api.c: 85: API_RW[57] = 1;
 14322  00200E  0E00               	movlw	0
 14323  002010  6F73               	movwf	(_API_RW+115)& (0+255),b
 14324  002012  0E01               	movlw	1
 14325  002014  6F72               	movwf	(_API_RW+114)& (0+255),b
 14326                           
 14327                           ;api.c: 86: API_RW[58] = 1;
 14328  002016  0E00               	movlw	0
 14329  002018  6F75               	movwf	(_API_RW+117)& (0+255),b
 14330  00201A  0E01               	movlw	1
 14331  00201C  6F74               	movwf	(_API_RW+116)& (0+255),b
 14332                           
 14333                           ;api.c: 87: API_RW[59] = 1;
 14334  00201E  0E00               	movlw	0
 14335  002020  6F77               	movwf	(_API_RW+119)& (0+255),b
 14336  002022  0E01               	movlw	1
 14337  002024  6F76               	movwf	(_API_RW+118)& (0+255),b
 14338                           
 14339                           ;api.c: 88: API_RW[60] = 1;
 14340  002026  0E00               	movlw	0
 14341  002028  6F79               	movwf	(_API_RW+121)& (0+255),b
 14342  00202A  0E01               	movlw	1
 14343  00202C  6F78               	movwf	(_API_RW+120)& (0+255),b
 14344                           
 14345                           ;api.c: 89: API_RW[61] = 0;
 14346  00202E  0E00               	movlw	0
 14347  002030  6F7B               	movwf	(_API_RW+123)& (0+255),b
 14348  002032  0E00               	movlw	0
 14349  002034  6F7A               	movwf	(_API_RW+122)& (0+255),b
 14350                           
 14351                           ;api.c: 90: API_RW[62] = 0;
 14352  002036  0E00               	movlw	0
 14353  002038  6F7D               	movwf	(_API_RW+125)& (0+255),b
 14354  00203A  0E00               	movlw	0
 14355  00203C  6F7C               	movwf	(_API_RW+124)& (0+255),b
 14356                           
 14357                           ;api.c: 91: API_RW[63] = 0;
 14358  00203E  0E00               	movlw	0
 14359  002040  6F7F               	movwf	(_API_RW+127)& (0+255),b
 14360  002042  0E00               	movlw	0
 14361  002044  6F7E               	movwf	(_API_RW+126)& (0+255),b
 14362                           
 14363                           ;api.c: 92: API_RW[64] = 0;
 14364  002046  0E00               	movlw	0
 14365  002048  6F81               	movwf	(_API_RW+129)& (0+255),b
 14366  00204A  0E00               	movlw	0
 14367  00204C  6F80               	movwf	(_API_RW+128)& (0+255),b
 14368                           
 14369                           ;api.c: 93: API_RW[65] = 0;
 14370  00204E  0E00               	movlw	0
 14371  002050  6F83               	movwf	(_API_RW+131)& (0+255),b
 14372  002052  0E00               	movlw	0
 14373  002054  6F82               	movwf	(_API_RW+130)& (0+255),b
 14374                           
 14375                           ;api.c: 94: API_RW[66] = 0;
 14376  002056  0E00               	movlw	0
 14377  002058  6F85               	movwf	(_API_RW+133)& (0+255),b
 14378  00205A  0E00               	movlw	0
 14379  00205C  6F84               	movwf	(_API_RW+132)& (0+255),b
 14380                           
 14381                           ;api.c: 95: API_RW[67] = 0;
 14382  00205E  0E00               	movlw	0
 14383  002060  6F87               	movwf	(_API_RW+135)& (0+255),b
 14384  002062  0E00               	movlw	0
 14385  002064  6F86               	movwf	(_API_RW+134)& (0+255),b
 14386                           
 14387                           ;api.c: 96: API_RW[68] = 0;
 14388  002066  0E00               	movlw	0
 14389  002068  6F89               	movwf	(_API_RW+137)& (0+255),b
 14390  00206A  0E00               	movlw	0
 14391  00206C  6F88               	movwf	(_API_RW+136)& (0+255),b
 14392                           
 14393                           ;api.c: 97: API_RW[69] = 0;
 14394  00206E  0E00               	movlw	0
 14395  002070  6F8B               	movwf	(_API_RW+139)& (0+255),b
 14396  002072  0E00               	movlw	0
 14397  002074  6F8A               	movwf	(_API_RW+138)& (0+255),b
 14398                           
 14399                           ;api.c: 98: API_RW[70] = 1;
 14400  002076  0E00               	movlw	0
 14401  002078  6F8D               	movwf	(_API_RW+141)& (0+255),b
 14402  00207A  0E01               	movlw	1
 14403  00207C  6F8C               	movwf	(_API_RW+140)& (0+255),b
 14404                           
 14405                           ;api.c: 99: API_RW[71] = 1;
 14406  00207E  0E00               	movlw	0
 14407  002080  6F8F               	movwf	(_API_RW+143)& (0+255),b
 14408  002082  0E01               	movlw	1
 14409  002084  6F8E               	movwf	(_API_RW+142)& (0+255),b
 14410                           
 14411                           ;api.c: 100: API_RW[72] = 1;
 14412  002086  0E00               	movlw	0
 14413  002088  6F91               	movwf	(_API_RW+145)& (0+255),b
 14414  00208A  0E01               	movlw	1
 14415  00208C  6F90               	movwf	(_API_RW+144)& (0+255),b
 14416                           
 14417                           ;api.c: 101: API_RW[73] = 1;
 14418  00208E  0E00               	movlw	0
 14419  002090  6F93               	movwf	(_API_RW+147)& (0+255),b
 14420  002092  0E01               	movlw	1
 14421  002094  6F92               	movwf	(_API_RW+146)& (0+255),b
 14422                           
 14423                           ;api.c: 102: API_RW[74] = 1;
 14424  002096  0E00               	movlw	0
 14425  002098  6F95               	movwf	(_API_RW+149)& (0+255),b
 14426  00209A  0E01               	movlw	1
 14427  00209C  6F94               	movwf	(_API_RW+148)& (0+255),b
 14428                           
 14429                           ;api.c: 103: API_RW[75] = 1;
 14430  00209E  0E00               	movlw	0
 14431  0020A0  6F97               	movwf	(_API_RW+151)& (0+255),b
 14432  0020A2  0E01               	movlw	1
 14433  0020A4  6F96               	movwf	(_API_RW+150)& (0+255),b
 14434                           
 14435                           ;api.c: 104: API_RW[76] = 1;
 14436  0020A6  0E00               	movlw	0
 14437  0020A8  6F99               	movwf	(_API_RW+153)& (0+255),b
 14438  0020AA  0E01               	movlw	1
 14439  0020AC  6F98               	movwf	(_API_RW+152)& (0+255),b
 14440                           
 14441                           ;api.c: 105: API_RW[77] = 1;
 14442  0020AE  0E00               	movlw	0
 14443  0020B0  6F9B               	movwf	(_API_RW+155)& (0+255),b
 14444  0020B2  0E01               	movlw	1
 14445  0020B4  6F9A               	movwf	(_API_RW+154)& (0+255),b
 14446                           
 14447                           ;api.c: 106: API_RW[78] = 1;
 14448  0020B6  0E00               	movlw	0
 14449  0020B8  6F9D               	movwf	(_API_RW+157)& (0+255),b
 14450  0020BA  0E01               	movlw	1
 14451  0020BC  6F9C               	movwf	(_API_RW+156)& (0+255),b
 14452                           
 14453                           ;api.c: 107: API_RW[79] = 1;
 14454  0020BE  0E00               	movlw	0
 14455  0020C0  6F9F               	movwf	(_API_RW+159)& (0+255),b
 14456  0020C2  0E01               	movlw	1
 14457  0020C4  6F9E               	movwf	(_API_RW+158)& (0+255),b
 14458                           
 14459                           ;api.c: 108: API_RW[80] = 0;
 14460  0020C6  0E00               	movlw	0
 14461  0020C8  6FA1               	movwf	(_API_RW+161)& (0+255),b
 14462  0020CA  0E00               	movlw	0
 14463  0020CC  6FA0               	movwf	(_API_RW+160)& (0+255),b
 14464                           
 14465                           ;api.c: 109: API_RW[81] = 1;
 14466  0020CE  0E00               	movlw	0
 14467  0020D0  6FA3               	movwf	(_API_RW+163)& (0+255),b
 14468  0020D2  0E01               	movlw	1
 14469  0020D4  6FA2               	movwf	(_API_RW+162)& (0+255),b
 14470                           
 14471                           ;api.c: 110: API_RW[82] = 0;
 14472  0020D6  0E00               	movlw	0
 14473  0020D8  6FA5               	movwf	(_API_RW+165)& (0+255),b
 14474  0020DA  0E00               	movlw	0
 14475  0020DC  6FA4               	movwf	(_API_RW+164)& (0+255),b
 14476                           
 14477                           ;api.c: 111: API_RW[83] = 0;
 14478  0020DE  0E00               	movlw	0
 14479  0020E0  6FA7               	movwf	(_API_RW+167)& (0+255),b
 14480  0020E2  0E00               	movlw	0
 14481  0020E4  6FA6               	movwf	(_API_RW+166)& (0+255),b
 14482                           
 14483                           ;api.c: 112: API_RW[84] = 0;
 14484  0020E6  0E00               	movlw	0
 14485  0020E8  6FA9               	movwf	(_API_RW+169)& (0+255),b
 14486  0020EA  0E00               	movlw	0
 14487  0020EC  6FA8               	movwf	(_API_RW+168)& (0+255),b
 14488                           
 14489                           ;api.c: 113: API_RW[85] = 0;
 14490  0020EE  0E00               	movlw	0
 14491  0020F0  6FAB               	movwf	(_API_RW+171)& (0+255),b
 14492  0020F2  0E00               	movlw	0
 14493  0020F4  6FAA               	movwf	(_API_RW+170)& (0+255),b
 14494                           
 14495                           ;api.c: 114: API_RW[86] = 0;
 14496  0020F6  0E00               	movlw	0
 14497  0020F8  6FAD               	movwf	(_API_RW+173)& (0+255),b
 14498  0020FA  0E00               	movlw	0
 14499  0020FC  6FAC               	movwf	(_API_RW+172)& (0+255),b
 14500                           
 14501                           ;api.c: 115: API_RW[87] = 1;
 14502  0020FE  0E00               	movlw	0
 14503  002100  6FAF               	movwf	(_API_RW+175)& (0+255),b
 14504  002102  0E01               	movlw	1
 14505  002104  6FAE               	movwf	(_API_RW+174)& (0+255),b
 14506                           
 14507                           ;api.c: 116: API_RW[88] = 0;
 14508  002106  0E00               	movlw	0
 14509  002108  6FB1               	movwf	(_API_RW+177)& (0+255),b
 14510  00210A  0E00               	movlw	0
 14511  00210C  6FB0               	movwf	(_API_RW+176)& (0+255),b
 14512                           
 14513                           ;api.c: 120: API[16] = 89;
 14514  00210E  0E00               	movlw	0
 14515  002110  0101               	movlb	1	; () banked
 14516  002112  6F21               	movwf	(_API+33)& (0+255),b
 14517  002114  0E59               	movlw	89
 14518  002116  6F20               	movwf	(_API+32)& (0+255),b
 14519                           
 14520                           ;api.c: 121: API[17] = 0;
 14521  002118  0E00               	movlw	0
 14522  00211A  6F23               	movwf	(_API+35)& (0+255),b
 14523  00211C  0E00               	movlw	0
 14524  00211E  6F22               	movwf	(_API+34)& (0+255),b
 14525                           
 14526                           ;api.c: 122: API[18] = 10000;
 14527  002120  0E27               	movlw	39
 14528  002122  6F25               	movwf	(_API+37)& (0+255),b
 14529  002124  0E10               	movlw	16
 14530  002126  6F24               	movwf	(_API+36)& (0+255),b
 14531                           
 14532                           ;api.c: 123: API[19] = 800;
 14533  002128  0E03               	movlw	3
 14534  00212A  6F27               	movwf	(_API+39)& (0+255),b
 14535  00212C  0E20               	movlw	32
 14536  00212E  6F26               	movwf	(_API+38)& (0+255),b
 14537                           
 14538                           ;api.c: 124: API[20] = 5000;
 14539  002130  0E13               	movlw	19
 14540  002132  6F29               	movwf	(_API+41)& (0+255),b
 14541  002134  0E88               	movlw	136
 14542  002136  6F28               	movwf	(_API+40)& (0+255),b
 14543                           
 14544                           ;api.c: 125: API[21] = 20;
 14545  002138  0E00               	movlw	0
 14546  00213A  6F2B               	movwf	(_API+43)& (0+255),b
 14547  00213C  0E14               	movlw	20
 14548  00213E  6F2A               	movwf	(_API+42)& (0+255),b
 14549                           
 14550                           ;api.c: 126: API[22] = 20;
 14551  002140  0E00               	movlw	0
 14552  002142  6F2D               	movwf	(_API+45)& (0+255),b
 14553  002144  0E14               	movlw	20
 14554  002146  6F2C               	movwf	(_API+44)& (0+255),b
 14555                           
 14556                           ;api.c: 127: API[23] = 107;
 14557  002148  0E00               	movlw	0
 14558  00214A  6F2F               	movwf	(_API+47)& (0+255),b
 14559  00214C  0E6B               	movlw	107
 14560  00214E  6F2E               	movwf	(_API+46)& (0+255),b
 14561                           
 14562                           ;api.c: 128: API[24] = 107;
 14563  002150  0E00               	movlw	0
 14564  002152  6F31               	movwf	(_API+49)& (0+255),b
 14565  002154  0E6B               	movlw	107
 14566  002156  6F30               	movwf	(_API+48)& (0+255),b
 14567                           
 14568                           ;api.c: 129: API[25] = 80;
 14569  002158  0E00               	movlw	0
 14570  00215A  6F33               	movwf	(_API+51)& (0+255),b
 14571  00215C  0E50               	movlw	80
 14572  00215E  6F32               	movwf	(_API+50)& (0+255),b
 14573                           
 14574                           ;api.c: 130: API[26] = 45;
 14575  002160  0E00               	movlw	0
 14576  002162  6F35               	movwf	(_API+53)& (0+255),b
 14577  002164  0E2D               	movlw	45
 14578  002166  6F34               	movwf	(_API+52)& (0+255),b
 14579                           
 14580                           ;api.c: 131: API[27] = 20;
 14581  002168  0E00               	movlw	0
 14582  00216A  6F37               	movwf	(_API+55)& (0+255),b
 14583  00216C  0E14               	movlw	20
 14584  00216E  6F36               	movwf	(_API+54)& (0+255),b
 14585                           
 14586                           ;api.c: 132: API[28] = 0;
 14587  002170  0E00               	movlw	0
 14588  002172  6F39               	movwf	(_API+57)& (0+255),b
 14589  002174  0E00               	movlw	0
 14590  002176  6F38               	movwf	(_API+56)& (0+255),b
 14591                           
 14592                           ;api.c: 133: API[29] = 0;
 14593  002178  0E00               	movlw	0
 14594  00217A  6F3B               	movwf	(_API+59)& (0+255),b
 14595  00217C  0E00               	movlw	0
 14596  00217E  6F3A               	movwf	(_API+58)& (0+255),b
 14597                           
 14598                           ;api.c: 134: API[30] = 0;
 14599  002180  0E00               	movlw	0
 14600  002182  6F3D               	movwf	(_API+61)& (0+255),b
 14601  002184  0E00               	movlw	0
 14602  002186  6F3C               	movwf	(_API+60)& (0+255),b
 14603                           
 14604                           ;api.c: 135: API[31] = 0;
 14605  002188  0E00               	movlw	0
 14606  00218A  6F3F               	movwf	(_API+63)& (0+255),b
 14607  00218C  0E00               	movlw	0
 14608  00218E  6F3E               	movwf	(_API+62)& (0+255),b
 14609                           
 14610                           ;api.c: 136: API[32] = 0;
 14611  002190  0E00               	movlw	0
 14612  002192  6F41               	movwf	(_API+65)& (0+255),b
 14613  002194  0E00               	movlw	0
 14614  002196  6F40               	movwf	(_API+64)& (0+255),b
 14615                           
 14616                           ;api.c: 137: API[33] = 0;
 14617  002198  0E00               	movlw	0
 14618  00219A  6F43               	movwf	(_API+67)& (0+255),b
 14619  00219C  0E00               	movlw	0
 14620  00219E  6F42               	movwf	(_API+66)& (0+255),b
 14621                           
 14622                           ;api.c: 138: API[34] = 0;
 14623  0021A0  0E00               	movlw	0
 14624  0021A2  6F45               	movwf	(_API+69)& (0+255),b
 14625  0021A4  0E00               	movlw	0
 14626  0021A6  6F44               	movwf	(_API+68)& (0+255),b
 14627                           
 14628                           ;api.c: 139: API[35] = 0;
 14629  0021A8  0E00               	movlw	0
 14630  0021AA  6F47               	movwf	(_API+71)& (0+255),b
 14631  0021AC  0E00               	movlw	0
 14632  0021AE  6F46               	movwf	(_API+70)& (0+255),b
 14633                           
 14634                           ;api.c: 140: API[36] = 0;
 14635  0021B0  0E00               	movlw	0
 14636  0021B2  6F49               	movwf	(_API+73)& (0+255),b
 14637  0021B4  0E00               	movlw	0
 14638  0021B6  6F48               	movwf	(_API+72)& (0+255),b
 14639                           
 14640                           ;api.c: 141: API[37] = 0;
 14641  0021B8  0E00               	movlw	0
 14642  0021BA  6F4B               	movwf	(_API+75)& (0+255),b
 14643  0021BC  0E00               	movlw	0
 14644  0021BE  6F4A               	movwf	(_API+74)& (0+255),b
 14645                           
 14646                           ;api.c: 142: API[38] = 0;
 14647  0021C0  0E00               	movlw	0
 14648  0021C2  6F4D               	movwf	(_API+77)& (0+255),b
 14649  0021C4  0E00               	movlw	0
 14650  0021C6  6F4C               	movwf	(_API+76)& (0+255),b
 14651                           
 14652                           ;api.c: 143: API[39] = 0;
 14653  0021C8  0E00               	movlw	0
 14654  0021CA  6F4F               	movwf	(_API+79)& (0+255),b
 14655  0021CC  0E00               	movlw	0
 14656  0021CE  6F4E               	movwf	(_API+78)& (0+255),b
 14657                           
 14658                           ;api.c: 144: API[40] = 0;
 14659  0021D0  0E00               	movlw	0
 14660  0021D2  6F51               	movwf	(_API+81)& (0+255),b
 14661  0021D4  0E00               	movlw	0
 14662  0021D6  6F50               	movwf	(_API+80)& (0+255),b
 14663                           
 14664                           ;api.c: 145: API[41] = 0;
 14665  0021D8  0E00               	movlw	0
 14666  0021DA  6F53               	movwf	(_API+83)& (0+255),b
 14667  0021DC  0E00               	movlw	0
 14668  0021DE  6F52               	movwf	(_API+82)& (0+255),b
 14669                           
 14670                           ;api.c: 146: API[42] = 0;
 14671  0021E0  0E00               	movlw	0
 14672  0021E2  6F55               	movwf	(_API+85)& (0+255),b
 14673  0021E4  0E00               	movlw	0
 14674  0021E6  6F54               	movwf	(_API+84)& (0+255),b
 14675                           
 14676                           ;api.c: 147: API[43] = 0;
 14677  0021E8  0E00               	movlw	0
 14678  0021EA  6F57               	movwf	(_API+87)& (0+255),b
 14679  0021EC  0E00               	movlw	0
 14680  0021EE  6F56               	movwf	(_API+86)& (0+255),b
 14681                           
 14682                           ;api.c: 148: API[44] = 0;
 14683  0021F0  0E00               	movlw	0
 14684  0021F2  6F59               	movwf	(_API+89)& (0+255),b
 14685  0021F4  0E00               	movlw	0
 14686  0021F6  6F58               	movwf	(_API+88)& (0+255),b
 14687                           
 14688                           ;api.c: 149: API[45] = 0;
 14689  0021F8  0E00               	movlw	0
 14690  0021FA  6F5B               	movwf	(_API+91)& (0+255),b
 14691  0021FC  0E00               	movlw	0
 14692  0021FE  6F5A               	movwf	(_API+90)& (0+255),b
 14693                           
 14694                           ;api.c: 150: API[46] = 80;
 14695  002200  0E00               	movlw	0
 14696  002202  6F5D               	movwf	(_API+93)& (0+255),b
 14697  002204  0E50               	movlw	80
 14698  002206  6F5C               	movwf	(_API+92)& (0+255),b
 14699                           
 14700                           ;api.c: 151: API[47] = 120;
 14701  002208  0E00               	movlw	0
 14702  00220A  6F5F               	movwf	(_API+95)& (0+255),b
 14703  00220C  0E78               	movlw	120
 14704  00220E  6F5E               	movwf	(_API+94)& (0+255),b
 14705                           
 14706                           ;api.c: 152: API[48] = 0;
 14707  002210  0E00               	movlw	0
 14708  002212  6F61               	movwf	(_API+97)& (0+255),b
 14709  002214  0E00               	movlw	0
 14710  002216  6F60               	movwf	(_API+96)& (0+255),b
 14711                           
 14712                           ;api.c: 153: API[49] = 80;
 14713  002218  0E00               	movlw	0
 14714  00221A  6F63               	movwf	(_API+99)& (0+255),b
 14715  00221C  0E50               	movlw	80
 14716  00221E  6F62               	movwf	(_API+98)& (0+255),b
 14717                           
 14718                           ;api.c: 154: API[50] = 0;
 14719  002220  0E00               	movlw	0
 14720  002222  6F65               	movwf	(_API+101)& (0+255),b
 14721  002224  0E00               	movlw	0
 14722  002226  6F64               	movwf	(_API+100)& (0+255),b
 14723                           
 14724                           ;api.c: 155: API[51] = 0;
 14725  002228  0E00               	movlw	0
 14726  00222A  6F67               	movwf	(_API+103)& (0+255),b
 14727  00222C  0E00               	movlw	0
 14728  00222E  6F66               	movwf	(_API+102)& (0+255),b
 14729                           
 14730                           ;api.c: 156: API[52] = 120;
 14731  002230  0E00               	movlw	0
 14732  002232  6F69               	movwf	(_API+105)& (0+255),b
 14733  002234  0E78               	movlw	120
 14734  002236  6F68               	movwf	(_API+104)& (0+255),b
 14735                           
 14736                           ;api.c: 157: API[53] = 100;
 14737  002238  0E00               	movlw	0
 14738  00223A  6F6B               	movwf	(_API+107)& (0+255),b
 14739  00223C  0E64               	movlw	100
 14740  00223E  6F6A               	movwf	(_API+106)& (0+255),b
 14741                           
 14742                           ;api.c: 158: API[54] = 100;
 14743  002240  0E00               	movlw	0
 14744  002242  6F6D               	movwf	(_API+109)& (0+255),b
 14745  002244  0E64               	movlw	100
 14746  002246  6F6C               	movwf	(_API+108)& (0+255),b
 14747                           
 14748                           ;api.c: 159: API[55] = 100;
 14749  002248  0E00               	movlw	0
 14750  00224A  6F6F               	movwf	(_API+111)& (0+255),b
 14751  00224C  0E64               	movlw	100
 14752  00224E  6F6E               	movwf	(_API+110)& (0+255),b
 14753                           
 14754                           ;api.c: 160: API[56] = 100;
 14755  002250  0E00               	movlw	0
 14756  002252  6F71               	movwf	(_API+113)& (0+255),b
 14757  002254  0E64               	movlw	100
 14758  002256  6F70               	movwf	(_API+112)& (0+255),b
 14759                           
 14760                           ;api.c: 161: API[57] = 100;
 14761  002258  0E00               	movlw	0
 14762  00225A  6F73               	movwf	(_API+115)& (0+255),b
 14763  00225C  0E64               	movlw	100
 14764  00225E  6F72               	movwf	(_API+114)& (0+255),b
 14765                           
 14766                           ;api.c: 162: API[58] = 100;
 14767  002260  0E00               	movlw	0
 14768  002262  6F75               	movwf	(_API+117)& (0+255),b
 14769  002264  0E64               	movlw	100
 14770  002266  6F74               	movwf	(_API+116)& (0+255),b
 14771                           
 14772                           ;api.c: 163: API[59] = 100;
 14773  002268  0E00               	movlw	0
 14774  00226A  6F77               	movwf	(_API+119)& (0+255),b
 14775  00226C  0E64               	movlw	100
 14776  00226E  6F76               	movwf	(_API+118)& (0+255),b
 14777                           
 14778                           ;api.c: 164: API[60] = 100;
 14779  002270  0E00               	movlw	0
 14780  002272  6F79               	movwf	(_API+121)& (0+255),b
 14781  002274  0E64               	movlw	100
 14782  002276  6F78               	movwf	(_API+120)& (0+255),b
 14783                           
 14784                           ;api.c: 165: API[61] = 0;
 14785  002278  0E00               	movlw	0
 14786  00227A  6F7B               	movwf	(_API+123)& (0+255),b
 14787  00227C  0E00               	movlw	0
 14788  00227E  6F7A               	movwf	(_API+122)& (0+255),b
 14789                           
 14790                           ;api.c: 166: API[62] = 0;
 14791  002280  0E00               	movlw	0
 14792  002282  6F7D               	movwf	(_API+125)& (0+255),b
 14793  002284  0E00               	movlw	0
 14794  002286  6F7C               	movwf	(_API+124)& (0+255),b
 14795                           
 14796                           ;api.c: 167: API[63] = 1;
 14797  002288  0E00               	movlw	0
 14798  00228A  6F7F               	movwf	(_API+127)& (0+255),b
 14799  00228C  0E01               	movlw	1
 14800  00228E  6F7E               	movwf	(_API+126)& (0+255),b
 14801                           
 14802                           ;api.c: 168: API[64] = 0;
 14803  002290  0E00               	movlw	0
 14804  002292  6F81               	movwf	(_API+129)& (0+255),b
 14805  002294  0E00               	movlw	0
 14806  002296  6F80               	movwf	(_API+128)& (0+255),b
 14807                           
 14808                           ;api.c: 169: API[65] = 0;
 14809  002298  0E00               	movlw	0
 14810  00229A  6F83               	movwf	(_API+131)& (0+255),b
 14811  00229C  0E00               	movlw	0
 14812  00229E  6F82               	movwf	(_API+130)& (0+255),b
 14813                           
 14814                           ;api.c: 170: API[66] = 0;
 14815  0022A0  0E00               	movlw	0
 14816  0022A2  6F85               	movwf	(_API+133)& (0+255),b
 14817  0022A4  0E00               	movlw	0
 14818  0022A6  6F84               	movwf	(_API+132)& (0+255),b
 14819                           
 14820                           ;api.c: 171: API[67] = 0;
 14821  0022A8  0E00               	movlw	0
 14822  0022AA  6F87               	movwf	(_API+135)& (0+255),b
 14823  0022AC  0E00               	movlw	0
 14824  0022AE  6F86               	movwf	(_API+134)& (0+255),b
 14825                           
 14826                           ;api.c: 172: API[68] = 0;
 14827  0022B0  0E00               	movlw	0
 14828  0022B2  6F89               	movwf	(_API+137)& (0+255),b
 14829  0022B4  0E00               	movlw	0
 14830  0022B6  6F88               	movwf	(_API+136)& (0+255),b
 14831                           
 14832                           ;api.c: 173: API[69] = 1;
 14833  0022B8  0E00               	movlw	0
 14834  0022BA  6F8B               	movwf	(_API+139)& (0+255),b
 14835  0022BC  0E01               	movlw	1
 14836  0022BE  6F8A               	movwf	(_API+138)& (0+255),b
 14837                           
 14838                           ;api.c: 174: API[70] = 0;
 14839  0022C0  0E00               	movlw	0
 14840  0022C2  6F8D               	movwf	(_API+141)& (0+255),b
 14841  0022C4  0E00               	movlw	0
 14842  0022C6  6F8C               	movwf	(_API+140)& (0+255),b
 14843                           
 14844                           ;api.c: 175: API[71] = 0;
 14845  0022C8  0E00               	movlw	0
 14846  0022CA  6F8F               	movwf	(_API+143)& (0+255),b
 14847  0022CC  0E00               	movlw	0
 14848  0022CE  6F8E               	movwf	(_API+142)& (0+255),b
 14849                           
 14850                           ;api.c: 176: API[72] = 0;
 14851  0022D0  0E00               	movlw	0
 14852  0022D2  6F91               	movwf	(_API+145)& (0+255),b
 14853  0022D4  0E00               	movlw	0
 14854  0022D6  6F90               	movwf	(_API+144)& (0+255),b
 14855                           
 14856                           ;api.c: 177: API[73] = 0;
 14857  0022D8  0E00               	movlw	0
 14858  0022DA  6F93               	movwf	(_API+147)& (0+255),b
 14859  0022DC  0E00               	movlw	0
 14860  0022DE  6F92               	movwf	(_API+146)& (0+255),b
 14861                           
 14862                           ;api.c: 178: API[74] = 0;
 14863  0022E0  0E00               	movlw	0
 14864  0022E2  6F95               	movwf	(_API+149)& (0+255),b
 14865  0022E4  0E00               	movlw	0
 14866  0022E6  6F94               	movwf	(_API+148)& (0+255),b
 14867                           
 14868                           ;api.c: 179: API[75] = 0;
 14869  0022E8  0E00               	movlw	0
 14870  0022EA  6F97               	movwf	(_API+151)& (0+255),b
 14871  0022EC  0E00               	movlw	0
 14872  0022EE  6F96               	movwf	(_API+150)& (0+255),b
 14873                           
 14874                           ;api.c: 180: API[76] = 0;
 14875  0022F0  0E00               	movlw	0
 14876  0022F2  6F99               	movwf	(_API+153)& (0+255),b
 14877  0022F4  0E00               	movlw	0
 14878  0022F6  6F98               	movwf	(_API+152)& (0+255),b
 14879                           
 14880                           ;api.c: 181: API[77] = 0;
 14881  0022F8  0E00               	movlw	0
 14882  0022FA  6F9B               	movwf	(_API+155)& (0+255),b
 14883  0022FC  0E00               	movlw	0
 14884  0022FE  6F9A               	movwf	(_API+154)& (0+255),b
 14885                           
 14886                           ;api.c: 182: API[78] = 0;
 14887  002300  0E00               	movlw	0
 14888  002302  6F9D               	movwf	(_API+157)& (0+255),b
 14889  002304  0E00               	movlw	0
 14890  002306  6F9C               	movwf	(_API+156)& (0+255),b
 14891                           
 14892                           ;api.c: 183: API[79] = 0;
 14893  002308  0E00               	movlw	0
 14894  00230A  6F9F               	movwf	(_API+159)& (0+255),b
 14895  00230C  0E00               	movlw	0
 14896  00230E  6F9E               	movwf	(_API+158)& (0+255),b
 14897                           
 14898                           ;api.c: 184: API[80] = 0;
 14899  002310  0E00               	movlw	0
 14900  002312  6FA1               	movwf	(_API+161)& (0+255),b
 14901  002314  0E00               	movlw	0
 14902  002316  6FA0               	movwf	(_API+160)& (0+255),b
 14903                           
 14904                           ;api.c: 185: API[81] = 0;
 14905  002318  0E00               	movlw	0
 14906  00231A  6FA3               	movwf	(_API+163)& (0+255),b
 14907  00231C  0E00               	movlw	0
 14908  00231E  6FA2               	movwf	(_API+162)& (0+255),b
 14909                           
 14910                           ;api.c: 186: API[82] = 1;
 14911  002320  0E00               	movlw	0
 14912  002322  6FA5               	movwf	(_API+165)& (0+255),b
 14913  002324  0E01               	movlw	1
 14914  002326  6FA4               	movwf	(_API+164)& (0+255),b
 14915                           
 14916                           ;api.c: 187: API[83] = 0;
 14917  002328  0E00               	movlw	0
 14918  00232A  6FA7               	movwf	(_API+167)& (0+255),b
 14919  00232C  0E00               	movlw	0
 14920  00232E  6FA6               	movwf	(_API+166)& (0+255),b
 14921                           
 14922                           ;api.c: 188: API[84] = 1;
 14923  002330  0E00               	movlw	0
 14924  002332  6FA9               	movwf	(_API+169)& (0+255),b
 14925  002334  0E01               	movlw	1
 14926  002336  6FA8               	movwf	(_API+168)& (0+255),b
 14927                           
 14928                           ;api.c: 189: API[85] = 0;
 14929  002338  0E00               	movlw	0
 14930  00233A  6FAB               	movwf	(_API+171)& (0+255),b
 14931  00233C  0E00               	movlw	0
 14932  00233E  6FAA               	movwf	(_API+170)& (0+255),b
 14933                           
 14934                           ;api.c: 190: API[86] = 0;
 14935  002340  0E00               	movlw	0
 14936  002342  6FAD               	movwf	(_API+173)& (0+255),b
 14937  002344  0E00               	movlw	0
 14938  002346  6FAC               	movwf	(_API+172)& (0+255),b
 14939                           
 14940                           ;api.c: 191: API[87] = 0;
 14941  002348  0E00               	movlw	0
 14942  00234A  6FAF               	movwf	(_API+175)& (0+255),b
 14943  00234C  0E00               	movlw	0
 14944  00234E  6FAE               	movwf	(_API+174)& (0+255),b
 14945                           
 14946                           ;api.c: 192: API[88] = 511;
 14947  002350  0E01               	movlw	1
 14948  002352  6FB1               	movwf	(_API+177)& (0+255),b
 14949  002354  69B0               	setf	(_API+176)& (0+255),b
 14950                           
 14951                           ; BSR set to: 1
 14952  002356  0012               	return		;funcret
 14953  002358                     __end_of_APIxInitialize:
 14954                           	opt stack 0
 14955                           tblptru	equ	0xFF8
 14956                           tblptrh	equ	0xFF7
 14957                           tblptrl	equ	0xFF6
 14958                           tablat	equ	0xFF5
 14959                           prodh	equ	0xFF4
 14960                           prodl	equ	0xFF3
 14961                           intcon	equ	0xFF2
 14962                           intcon2	equ	0xFF1
 14963                           postinc0	equ	0xFEE
 14964                           wreg	equ	0xFE8
 14965                           postinc1	equ	0xFE6
 14966                           postdec1	equ	0xFE5
 14967                           fsr1h	equ	0xFE2
 14968                           fsr1l	equ	0xFE1
 14969                           indf2	equ	0xFDF
 14970                           postinc2	equ	0xFDE
 14971                           postdec2	equ	0xFDD
 14972                           fsr2h	equ	0xFDA
 14973                           fsr2l	equ	0xFD9
 14974                           status	equ	0xFD8
 14975                           
 14976 ;; *************** function _tc_low *****************
 14977 ;; Defined at:
 14978 ;;		line 153 in file "../Main.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;		None
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;		None
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  1    wreg      void 
 14985 ;; Registers used:
 14986 ;;		None
 14987 ;; Tracked objects:
 14988 ;;		On entry : 0/0
 14989 ;;		On exit  : 0/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14992 ;;      Params:         0       0       0       0       0       0       0       0       0
 14993 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14994 ;;      Temps:          0      21       0       0       0       0       0       0       0
 14995 ;;      Totals:         0      21       0       0       0       0       0       0       0
 14996 ;;Total ram usage:       21 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; Hardware stack levels required when called:    2
 14999 ;; This function calls:
 15000 ;;		Nothing
 15001 ;; This function is called by:
 15002 ;;		Interrupt level 1
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           	psect	intcodelo
 15007  000018                     __pintcodelo:
 15008                           	opt stack 0
 15009  000018                     _tc_low:
 15010                           	opt stack 22
 15011                           
 15012                           ; BSR set to: 1
 15013                           ;incstack = 0
 15014  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 15015  00001A  CFD8 F0BC          	movff	status,??_tc_low
 15016  00001E  CFE8 F0BD          	movff	wreg,??_tc_low+1
 15017  000022  CFE0 F0BE          	movff	bsr,??_tc_low+2
 15018  000026  CFFA F0BF          	movff	pclath,??_tc_low+3
 15019  00002A  CFFB F0C0          	movff	pclatu,??_tc_low+4
 15020  00002E  CFE9 F0C1          	movff	fsr0l,??_tc_low+5
 15021  000032  CFEA F0C2          	movff	fsr0h,??_tc_low+6
 15022  000036  CFE1 F0C3          	movff	fsr1l,??_tc_low+7
 15023  00003A  CFE2 F0C4          	movff	fsr1h,??_tc_low+8
 15024  00003E  CFD9 F0C5          	movff	fsr2l,??_tc_low+9
 15025  000042  CFDA F0C6          	movff	fsr2h,??_tc_low+10
 15026  000046  CFF3 F0C7          	movff	prodl,??_tc_low+11
 15027  00004A  CFF4 F0C8          	movff	prodh,??_tc_low+12
 15028  00004E  CFF6 F0C9          	movff	tblptrl,??_tc_low+13
 15029  000052  CFF7 F0CA          	movff	tblptrh,??_tc_low+14
 15030  000056  CFF8 F0CB          	movff	tblptru,??_tc_low+15
 15031  00005A  CFF5 F0CC          	movff	tablat,??_tc_low+16
 15032  00005E  C04D  F0CD         	movff	btemp,??_tc_low+17
 15033  000062  C04E  F0CE         	movff	btemp+1,??_tc_low+18
 15034  000066  C04F  F0CF         	movff	btemp+2,??_tc_low+19
 15035  00006A  C050  F0D0         	movff	btemp+3,??_tc_low+20
 15036  00006E  C0D0  F050         	movff	??_tc_low+20,btemp+3
 15037  000072  C0CF  F04F         	movff	??_tc_low+19,btemp+2
 15038  000076  C0CE  F04E         	movff	??_tc_low+18,btemp+1
 15039  00007A  C0CD  F04D         	movff	??_tc_low+17,btemp
 15040  00007E  C0CC  FFF5         	movff	??_tc_low+16,tablat
 15041  000082  C0CB  FFF8         	movff	??_tc_low+15,tblptru
 15042  000086  C0CA  FFF7         	movff	??_tc_low+14,tblptrh
 15043  00008A  C0C9  FFF6         	movff	??_tc_low+13,tblptrl
 15044  00008E  C0C8  FFF4         	movff	??_tc_low+12,prodh
 15045  000092  C0C7  FFF3         	movff	??_tc_low+11,prodl
 15046  000096  C0C6  FFDA         	movff	??_tc_low+10,fsr2h
 15047  00009A  C0C5  FFD9         	movff	??_tc_low+9,fsr2l
 15048  00009E  C0C4  FFE2         	movff	??_tc_low+8,fsr1h
 15049  0000A2  C0C3  FFE1         	movff	??_tc_low+7,fsr1l
 15050  0000A6  C0C2  FFEA         	movff	??_tc_low+6,fsr0h
 15051  0000AA  C0C1  FFE9         	movff	??_tc_low+5,fsr0l
 15052  0000AE  C0C0  FFFB         	movff	??_tc_low+4,pclatu
 15053  0000B2  C0BF  FFFA         	movff	??_tc_low+3,pclath
 15054  0000B6  C0BE  FFE0         	movff	??_tc_low+2,bsr
 15055  0000BA  C0BD  FFE8         	movff	??_tc_low+1,wreg
 15056  0000BE  C0BC  FFD8         	movff	??_tc_low,status
 15057  0000C2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 15058  0000C4  0010               	retfie	
 15059  0000C6                     __end_of_tc_low:
 15060                           	opt stack 0
 15061                           pclatu	equ	0xFFB
 15062                           pclath	equ	0xFFA
 15063                           tblptru	equ	0xFF8
 15064                           tblptrh	equ	0xFF7
 15065                           tblptrl	equ	0xFF6
 15066                           tablat	equ	0xFF5
 15067                           prodh	equ	0xFF4
 15068                           prodl	equ	0xFF3
 15069                           intcon	equ	0xFF2
 15070                           intcon2	equ	0xFF1
 15071                           postinc0	equ	0xFEE
 15072                           fsr0h	equ	0xFEA
 15073                           fsr0l	equ	0xFE9
 15074                           wreg	equ	0xFE8
 15075                           postinc1	equ	0xFE6
 15076                           postdec1	equ	0xFE5
 15077                           fsr1h	equ	0xFE2
 15078                           fsr1l	equ	0xFE1
 15079                           bsr	equ	0xFE0
 15080                           indf2	equ	0xFDF
 15081                           postinc2	equ	0xFDE
 15082                           postdec2	equ	0xFDD
 15083                           fsr2h	equ	0xFDA
 15084                           fsr2l	equ	0xFD9
 15085                           status	equ	0xFD8
 15086                           
 15087 ;; *************** function _tc_high *****************
 15088 ;; Defined at:
 15089 ;;		line 157 in file "../Main.c"
 15090 ;; Parameters:    Size  Location     Type
 15091 ;;		None
 15092 ;; Auto vars:     Size  Location     Type
 15093 ;;		None
 15094 ;; Return value:  Size  Location     Type
 15095 ;;                  1    wreg      void 
 15096 ;; Registers used:
 15097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15098 ;; Tracked objects:
 15099 ;;		On entry : 0/0
 15100 ;;		On exit  : 0/0
 15101 ;;		Unchanged: 0/0
 15102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15103 ;;      Params:         0       0       0       0       0       0       0       0       0
 15104 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15105 ;;      Temps:         18       0       0       0       0       0       0       0       0
 15106 ;;      Totals:        18       0       0       0       0       0       0       0       0
 15107 ;;Total ram usage:       18 bytes
 15108 ;; Hardware stack levels used:    1
 15109 ;; Hardware stack levels required when called:    1
 15110 ;; This function calls:
 15111 ;;		_EUSART1_Receive_ISR
 15112 ;;		_EUSART1_Transmit_ISR
 15113 ;; This function is called by:
 15114 ;;		Interrupt level 2
 15115 ;; This function uses a non-reentrant model
 15116 ;;
 15117                           
 15118                           	psect	intcode
 15119  000008                     __pintcode:
 15120                           	opt stack 0
 15121  000008                     _tc_high:
 15122                           	opt stack 22
 15123                           
 15124                           ;incstack = 0
 15125  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15126  00000A  EDE1  F01D         	call	int_func,f	;refresh shadow registers
 15127                           pclatu	equ	0xFFB
 15128                           pclath	equ	0xFFA
 15129                           tblptru	equ	0xFF8
 15130                           tblptrh	equ	0xFF7
 15131                           tblptrl	equ	0xFF6
 15132                           tablat	equ	0xFF5
 15133                           prodh	equ	0xFF4
 15134                           prodl	equ	0xFF3
 15135                           intcon	equ	0xFF2
 15136                           intcon2	equ	0xFF1
 15137                           postinc0	equ	0xFEE
 15138                           fsr0h	equ	0xFEA
 15139                           fsr0l	equ	0xFE9
 15140                           wreg	equ	0xFE8
 15141                           postinc1	equ	0xFE6
 15142                           postdec1	equ	0xFE5
 15143                           fsr1h	equ	0xFE2
 15144                           fsr1l	equ	0xFE1
 15145                           bsr	equ	0xFE0
 15146                           indf2	equ	0xFDF
 15147                           postinc2	equ	0xFDE
 15148                           postdec2	equ	0xFDD
 15149                           fsr2h	equ	0xFDA
 15150                           fsr2l	equ	0xFD9
 15151                           status	equ	0xFD8
 15152                           
 15153                           	psect	intcode_body
 15154  003BC2                     __pintcode_body:
 15155                           	opt stack 22
 15156  003BC2                     int_func:
 15157                           	opt stack 22
 15158  003BC2  0006               	pop		; remove dummy address from shadow register refresh
 15159  003BC4  CFFA F001          	movff	pclath,??_tc_high
 15160  003BC8  CFFB F002          	movff	pclatu,??_tc_high+1
 15161  003BCC  CFE9 F003          	movff	fsr0l,??_tc_high+2
 15162  003BD0  CFEA F004          	movff	fsr0h,??_tc_high+3
 15163  003BD4  CFE1 F005          	movff	fsr1l,??_tc_high+4
 15164  003BD8  CFE2 F006          	movff	fsr1h,??_tc_high+5
 15165  003BDC  CFD9 F007          	movff	fsr2l,??_tc_high+6
 15166  003BE0  CFDA F008          	movff	fsr2h,??_tc_high+7
 15167  003BE4  CFF3 F009          	movff	prodl,??_tc_high+8
 15168  003BE8  CFF4 F00A          	movff	prodh,??_tc_high+9
 15169  003BEC  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 15170  003BF0  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 15171  003BF4  CFF8 F00D          	movff	tblptru,??_tc_high+12
 15172  003BF8  CFF5 F00E          	movff	tablat,??_tc_high+13
 15173  003BFC  C04D  F00F         	movff	btemp,??_tc_high+14
 15174  003C00  C04E  F010         	movff	btemp+1,??_tc_high+15
 15175  003C04  C04F  F011         	movff	btemp+2,??_tc_high+16
 15176  003C08  C050  F012         	movff	btemp+3,??_tc_high+17
 15177                           
 15178                           ;Main.c: 159: if (INTCONbits.TMR0IF)
 15179  003C0C  A4F2               	btfss	intcon,2,c	;volatile
 15180  003C0E  D019               	goto	i2l106
 15181                           
 15182                           ;Main.c: 160: {
 15183                           ;Main.c: 161: if(Led1_Counter <= 100)
 15184  003C10  502D               	movf	_Led1_Counter+1,w,c	;volatile
 15185  003C12  E106               	bnz	i2l107
 15186  003C14  0E65               	movlw	101
 15187  003C16  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 15188  003C18  B0D8               	btfsc	status,0,c
 15189  003C1A  D002               	goto	i2l107
 15190                           
 15191                           ;Main.c: 162: {
 15192                           ;Main.c: 163: PORTAbits.RA4 = 1;
 15193  003C1C  8880               	bsf	3968,4,c	;volatile
 15194                           
 15195                           ;Main.c: 164: }
 15196  003C1E  D001               	goto	i2l108
 15197  003C20                     i2l107:
 15198                           
 15199                           ;Main.c: 165: else
 15200                           ;Main.c: 166: {
 15201                           ;Main.c: 167: PORTAbits.RA4 = 0;
 15202  003C20  9880               	bcf	3968,4,c	;volatile
 15203  003C22                     i2l108:
 15204                           
 15205                           ;Main.c: 168: }
 15206                           ;Main.c: 169: if(Led1_Counter >= 700)
 15207  003C22  0EBC               	movlw	188
 15208  003C24  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 15209  003C26  0E02               	movlw	2
 15210  003C28  582D               	subwfb	_Led1_Counter+1,w,c	;volatile
 15211  003C2A  A0D8               	btfss	status,0,c
 15212  003C2C  D004               	goto	i2l109
 15213                           
 15214                           ;Main.c: 170: {
 15215                           ;Main.c: 171: Led1_Counter = 0;
 15216  003C2E  0E00               	movlw	0
 15217  003C30  6E2D               	movwf	_Led1_Counter+1,c	;volatile
 15218  003C32  0E00               	movlw	0
 15219  003C34  6E2C               	movwf	_Led1_Counter,c	;volatile
 15220  003C36                     i2l109:
 15221                           
 15222                           ;Main.c: 172: }
 15223                           ;Main.c: 173: Led1_Counter++;
 15224  003C36  4A2C               	infsnz	_Led1_Counter,f,c	;volatile
 15225  003C38  2A2D               	incf	_Led1_Counter+1,f,c	;volatile
 15226                           
 15227                           ;Main.c: 174: Update_State_Machine = 1;
 15228  003C3A  0E01               	movlw	1
 15229  003C3C  0100               	movlb	0	; () banked
 15230  003C3E  6F91               	movwf	_Update_State_Machine& (0+255),b	;volatile
 15231                           
 15232                           ; BSR set to: 0
 15233                           ;Main.c: 175: INTCONbits.TMR0IF = 0;
 15234  003C40  94F2               	bcf	intcon,2,c	;volatile
 15235  003C42                     i2l106:
 15236                           
 15237                           ;Main.c: 176: }
 15238                           ;Main.c: 178: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 15239                           
 15240                           ; BSR set to: 0
 15241  003C42  BA9D               	btfsc	3997,5,c	;volatile
 15242  003C44  AA9E               	btfss	3998,5,c	;volatile
 15243  003C46  D002               	goto	i2l110
 15244                           
 15245                           ;Main.c: 179: EUSART1_Receive_ISR();
 15246  003C48  ECF4  F021         	call	_EUSART1_Receive_ISR	;wreg free
 15247  003C4C                     i2l110:
 15248                           
 15249                           ;Main.c: 180: }
 15250                           ;Main.c: 181: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 15251  003C4C  B89D               	btfsc	3997,4,c	;volatile
 15252  003C4E  A89E               	btfss	3998,4,c	;volatile
 15253  003C50  D002               	goto	i2l111
 15254                           
 15255                           ;Main.c: 182: EUSART1_Transmit_ISR();
 15256  003C52  ECDD  F021         	call	_EUSART1_Transmit_ISR	;wreg free
 15257  003C56                     i2l111:
 15258  003C56  C012  F050         	movff	??_tc_high+17,btemp+3
 15259  003C5A  C011  F04F         	movff	??_tc_high+16,btemp+2
 15260  003C5E  C010  F04E         	movff	??_tc_high+15,btemp+1
 15261  003C62  C00F  F04D         	movff	??_tc_high+14,btemp
 15262  003C66  C00E  FFF5         	movff	??_tc_high+13,tablat
 15263  003C6A  C00D  FFF8         	movff	??_tc_high+12,tblptru
 15264  003C6E  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 15265  003C72  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 15266  003C76  C00A  FFF4         	movff	??_tc_high+9,prodh
 15267  003C7A  C009  FFF3         	movff	??_tc_high+8,prodl
 15268  003C7E  C008  FFDA         	movff	??_tc_high+7,fsr2h
 15269  003C82  C007  FFD9         	movff	??_tc_high+6,fsr2l
 15270  003C86  C006  FFE2         	movff	??_tc_high+5,fsr1h
 15271  003C8A  C005  FFE1         	movff	??_tc_high+4,fsr1l
 15272  003C8E  C004  FFEA         	movff	??_tc_high+3,fsr0h
 15273  003C92  C003  FFE9         	movff	??_tc_high+2,fsr0l
 15274  003C96  C002  FFFB         	movff	??_tc_high+1,pclatu
 15275  003C9A  C001  FFFA         	movff	??_tc_high,pclath
 15276  003C9E  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15277  003CA0  0011               	retfie		f
 15278  003CA2                     __end_of_tc_high:
 15279                           	opt stack 0
 15280                           pclatu	equ	0xFFB
 15281                           pclath	equ	0xFFA
 15282                           tblptru	equ	0xFF8
 15283                           tblptrh	equ	0xFF7
 15284                           tblptrl	equ	0xFF6
 15285                           tablat	equ	0xFF5
 15286                           prodh	equ	0xFF4
 15287                           prodl	equ	0xFF3
 15288                           intcon	equ	0xFF2
 15289                           intcon2	equ	0xFF1
 15290                           postinc0	equ	0xFEE
 15291                           fsr0h	equ	0xFEA
 15292                           fsr0l	equ	0xFE9
 15293                           wreg	equ	0xFE8
 15294                           postinc1	equ	0xFE6
 15295                           postdec1	equ	0xFE5
 15296                           fsr1h	equ	0xFE2
 15297                           fsr1l	equ	0xFE1
 15298                           bsr	equ	0xFE0
 15299                           indf2	equ	0xFDF
 15300                           postinc2	equ	0xFDE
 15301                           postdec2	equ	0xFDD
 15302                           fsr2h	equ	0xFDA
 15303                           fsr2l	equ	0xFD9
 15304                           status	equ	0xFD8
 15305                           
 15306 ;; *************** function _EUSART1_Transmit_ISR *****************
 15307 ;; Defined at:
 15308 ;;		line 184 in file "../eusart1.c"
 15309 ;; Parameters:    Size  Location     Type
 15310 ;;		None
 15311 ;; Auto vars:     Size  Location     Type
 15312 ;;		None
 15313 ;; Return value:  Size  Location     Type
 15314 ;;                  1    wreg      void 
 15315 ;; Registers used:
 15316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15317 ;; Tracked objects:
 15318 ;;		On entry : 0/0
 15319 ;;		On exit  : 0/0
 15320 ;;		Unchanged: 0/0
 15321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15322 ;;      Params:         0       0       0       0       0       0       0       0       0
 15323 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15324 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15325 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15326 ;;Total ram usage:        0 bytes
 15327 ;; Hardware stack levels used:    1
 15328 ;; This function calls:
 15329 ;;		Nothing
 15330 ;; This function is called by:
 15331 ;;		_tc_high
 15332 ;; This function uses a non-reentrant model
 15333 ;;
 15334                           
 15335                           	psect	text44
 15336  0043BA                     __ptext44:
 15337                           	opt stack 0
 15338  0043BA                     _EUSART1_Transmit_ISR:
 15339                           	opt stack 22
 15340                           
 15341                           ;eusart1.c: 187: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 15342                           
 15343                           ;incstack = 0
 15344  0043BA  0E7E               	movlw	126
 15345  0043BC  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 15346  0043BE  D012               	goto	i2l556
 15347                           
 15348                           ;eusart1.c: 188: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15349  0043C0  5043               	movf	_eusart1TxTail,w,c
 15350  0043C2  0D01               	mullw	1
 15351  0043C4  0E7E               	movlw	low _eusart1TxBuffer
 15352  0043C6  24F3               	addwf	prodl,w,c
 15353  0043C8  6ED9               	movwf	fsr2l,c
 15354  0043CA  0E04               	movlw	high _eusart1TxBuffer
 15355  0043CC  20F4               	addwfc	prodh,w,c
 15356  0043CE  6EDA               	movwf	fsr2h,c
 15357  0043D0  50DF               	movf	indf2,w,c
 15358  0043D2  6EAD               	movwf	4013,c	;volatile
 15359  0043D4  2A43               	incf	_eusart1TxTail,f,c
 15360                           
 15361                           ;eusart1.c: 189: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 15362  0043D6  0E7D               	movlw	125
 15363  0043D8  6443               	cpfsgt	_eusart1TxTail,c
 15364  0043DA  D002               	goto	i2l557
 15365                           
 15366                           ;eusart1.c: 190: eusart1TxTail = 0;
 15367  0043DC  0E00               	movlw	0
 15368  0043DE  6E43               	movwf	_eusart1TxTail,c
 15369  0043E0                     i2l557:
 15370                           
 15371                           ;eusart1.c: 191: }
 15372                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 15373  0043E0  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 15374                           
 15375                           ;eusart1.c: 193: } else {
 15376  0043E2  0012               	return	
 15377  0043E4                     i2l556:
 15378                           
 15379                           ;eusart1.c: 194: PIE1bits.TX1IE = 0;
 15380  0043E4  989D               	bcf	3997,4,c	;volatile
 15381  0043E6  0012               	return	
 15382  0043E8                     __end_of_EUSART1_Transmit_ISR:
 15383                           	opt stack 0
 15384                           pclatu	equ	0xFFB
 15385                           pclath	equ	0xFFA
 15386                           tblptru	equ	0xFF8
 15387                           tblptrh	equ	0xFF7
 15388                           tblptrl	equ	0xFF6
 15389                           tablat	equ	0xFF5
 15390                           prodh	equ	0xFF4
 15391                           prodl	equ	0xFF3
 15392                           intcon	equ	0xFF2
 15393                           intcon2	equ	0xFF1
 15394                           postinc0	equ	0xFEE
 15395                           fsr0h	equ	0xFEA
 15396                           fsr0l	equ	0xFE9
 15397                           wreg	equ	0xFE8
 15398                           postinc1	equ	0xFE6
 15399                           postdec1	equ	0xFE5
 15400                           fsr1h	equ	0xFE2
 15401                           fsr1l	equ	0xFE1
 15402                           bsr	equ	0xFE0
 15403                           indf2	equ	0xFDF
 15404                           postinc2	equ	0xFDE
 15405                           postdec2	equ	0xFDD
 15406                           fsr2h	equ	0xFDA
 15407                           fsr2l	equ	0xFD9
 15408                           status	equ	0xFD8
 15409                           
 15410 ;; *************** function _EUSART1_Receive_ISR *****************
 15411 ;; Defined at:
 15412 ;;		line 198 in file "../eusart1.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;		None
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;		None
 15417 ;; Return value:  Size  Location     Type
 15418 ;;                  1    wreg      void 
 15419 ;; Registers used:
 15420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15421 ;; Tracked objects:
 15422 ;;		On entry : 0/0
 15423 ;;		On exit  : 0/0
 15424 ;;		Unchanged: 0/0
 15425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15426 ;;      Params:         0       0       0       0       0       0       0       0       0
 15427 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15428 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15429 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15430 ;;Total ram usage:        0 bytes
 15431 ;; Hardware stack levels used:    1
 15432 ;; This function calls:
 15433 ;;		Nothing
 15434 ;; This function is called by:
 15435 ;;		_tc_high
 15436 ;; This function uses a non-reentrant model
 15437 ;;
 15438                           
 15439                           	psect	text45
 15440  0043E8                     __ptext45:
 15441                           	opt stack 0
 15442  0043E8                     _EUSART1_Receive_ISR:
 15443                           	opt stack 22
 15444                           
 15445                           ;eusart1.c: 199: if (1 == RCSTA1bits.OERR) {
 15446                           
 15447                           ;incstack = 0
 15448  0043E8  A2AB               	btfss	4011,1,c	;volatile
 15449  0043EA  D002               	goto	i2l562
 15450                           
 15451                           ;eusart1.c: 202: RCSTA1bits.CREN = 0;
 15452  0043EC  98AB               	bcf	4011,4,c	;volatile
 15453                           
 15454                           ;eusart1.c: 203: RCSTA1bits.CREN = 1;
 15455  0043EE  88AB               	bsf	4011,4,c	;volatile
 15456  0043F0                     i2l562:
 15457                           
 15458                           ;eusart1.c: 204: }
 15459                           ;eusart1.c: 207: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15460  0043F0  5041               	movf	_eusart1RxHead,w,c
 15461  0043F2  0D01               	mullw	1
 15462  0043F4  0E00               	movlw	low _eusart1RxBuffer
 15463  0043F6  24F3               	addwf	prodl,w,c
 15464  0043F8  6ED9               	movwf	fsr2l,c
 15465  0043FA  0E04               	movlw	high _eusart1RxBuffer
 15466  0043FC  20F4               	addwfc	prodh,w,c
 15467  0043FE  6EDA               	movwf	fsr2h,c
 15468  004400  CFAE FFDF          	movff	4014,indf2	;volatile
 15469  004404  2A41               	incf	_eusart1RxHead,f,c
 15470                           
 15471                           ;eusart1.c: 208: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 15472  004406  0E7D               	movlw	125
 15473  004408  6441               	cpfsgt	_eusart1RxHead,c
 15474  00440A  D002               	goto	i2l563
 15475                           
 15476                           ;eusart1.c: 209: eusart1RxHead = 0;
 15477  00440C  0E00               	movlw	0
 15478  00440E  6E41               	movwf	_eusart1RxHead,c
 15479  004410                     i2l563:
 15480                           
 15481                           ;eusart1.c: 210: }
 15482                           ;eusart1.c: 211: eusart1RxCount++;
 15483  004410  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 15484  004412  0012               	return		;funcret
 15485  004414                     __end_of_EUSART1_Receive_ISR:
 15486                           	opt stack 0
 15487                           pclatu	equ	0xFFB
 15488                           pclath	equ	0xFFA
 15489                           tblptru	equ	0xFF8
 15490                           tblptrh	equ	0xFF7
 15491                           tblptrl	equ	0xFF6
 15492                           tablat	equ	0xFF5
 15493                           prodh	equ	0xFF4
 15494                           prodl	equ	0xFF3
 15495                           intcon	equ	0xFF2
 15496                           intcon2	equ	0xFF1
 15497                           postinc0	equ	0xFEE
 15498                           fsr0h	equ	0xFEA
 15499                           fsr0l	equ	0xFE9
 15500                           wreg	equ	0xFE8
 15501                           postinc1	equ	0xFE6
 15502                           postdec1	equ	0xFE5
 15503                           fsr1h	equ	0xFE2
 15504                           fsr1l	equ	0xFE1
 15505                           bsr	equ	0xFE0
 15506                           indf2	equ	0xFDF
 15507                           postinc2	equ	0xFDE
 15508                           postdec2	equ	0xFDD
 15509                           fsr2h	equ	0xFDA
 15510                           fsr2l	equ	0xFD9
 15511                           status	equ	0xFD8
 15512                           pclatu	equ	0xFFB
 15513                           pclath	equ	0xFFA
 15514                           tblptru	equ	0xFF8
 15515                           tblptrh	equ	0xFF7
 15516                           tblptrl	equ	0xFF6
 15517                           tablat	equ	0xFF5
 15518                           prodh	equ	0xFF4
 15519                           prodl	equ	0xFF3
 15520                           intcon	equ	0xFF2
 15521                           intcon2	equ	0xFF1
 15522                           postinc0	equ	0xFEE
 15523                           fsr0h	equ	0xFEA
 15524                           fsr0l	equ	0xFE9
 15525                           wreg	equ	0xFE8
 15526                           postinc1	equ	0xFE6
 15527                           postdec1	equ	0xFE5
 15528                           fsr1h	equ	0xFE2
 15529                           fsr1l	equ	0xFE1
 15530                           bsr	equ	0xFE0
 15531                           indf2	equ	0xFDF
 15532                           postinc2	equ	0xFDE
 15533                           postdec2	equ	0xFDD
 15534                           fsr2h	equ	0xFDA
 15535                           fsr2l	equ	0xFD9
 15536                           status	equ	0xFD8
 15537                           
 15538                           	psect	rparam
 15539  0000                     pclatu	equ	0xFFB
 15540                           pclath	equ	0xFFA
 15541                           tblptru	equ	0xFF8
 15542                           tblptrh	equ	0xFF7
 15543                           tblptrl	equ	0xFF6
 15544                           tablat	equ	0xFF5
 15545                           prodh	equ	0xFF4
 15546                           prodl	equ	0xFF3
 15547                           intcon	equ	0xFF2
 15548                           intcon2	equ	0xFF1
 15549                           postinc0	equ	0xFEE
 15550                           fsr0h	equ	0xFEA
 15551                           fsr0l	equ	0xFE9
 15552                           wreg	equ	0xFE8
 15553                           postinc1	equ	0xFE6
 15554                           postdec1	equ	0xFE5
 15555                           fsr1h	equ	0xFE2
 15556                           fsr1l	equ	0xFE1
 15557                           bsr	equ	0xFE0
 15558                           indf2	equ	0xFDF
 15559                           postinc2	equ	0xFDE
 15560                           postdec2	equ	0xFDD
 15561                           fsr2h	equ	0xFDA
 15562                           fsr2l	equ	0xFD9
 15563                           status	equ	0xFD8
 15564                           
 15565                           	psect	temp
 15566  00004D                     btemp:
 15567                           	opt stack 0
 15568  00004D                     	ds	1
 15569  0000                     int$flags	set	btemp
 15570  0000                     wtemp6	set	btemp+1
 15571                           pclatu	equ	0xFFB
 15572                           pclath	equ	0xFFA
 15573                           tblptru	equ	0xFF8
 15574                           tblptrh	equ	0xFF7
 15575                           tblptrl	equ	0xFF6
 15576                           tablat	equ	0xFF5
 15577                           prodh	equ	0xFF4
 15578                           prodl	equ	0xFF3
 15579                           intcon	equ	0xFF2
 15580                           intcon2	equ	0xFF1
 15581                           postinc0	equ	0xFEE
 15582                           fsr0h	equ	0xFEA
 15583                           fsr0l	equ	0xFE9
 15584                           wreg	equ	0xFE8
 15585                           postinc1	equ	0xFE6
 15586                           postdec1	equ	0xFE5
 15587                           fsr1h	equ	0xFE2
 15588                           fsr1l	equ	0xFE1
 15589                           bsr	equ	0xFE0
 15590                           indf2	equ	0xFDF
 15591                           postinc2	equ	0xFDE
 15592                           postdec2	equ	0xFDD
 15593                           fsr2h	equ	0xFDA
 15594                           fsr2l	equ	0xFD9
 15595                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    67
    Data        11
    BSS         912
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      76
    BANK0           160     40     138
    BANK1           256      0     178
    BANK2           256      0     178
    BANK3           256      0     178
    BANK4           256      0     252
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Pcomm_List2	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    Pcomm_List	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_SETxPWM
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _EEPROMxSTORE->_Eeprom_Store
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_atoi
    _TranslateMessage->_printf
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _EEPROMxREAD->_Eeprom_Read
    _SendMessage->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_READxRECEIVEDxMESSAGE
    _Update_StateMchn->_Train_Path
    _Train_Path->_Train_Move_Left_Brake
    _Train_Path->_Train_Move_Left_Start
    _Train_Path->_Train_Move_Right_Brake
    _Train_Path->_Train_Move_Right_Start
    _READxRECEIVEDxMESSAGE->_printf
    _TranslateMessage->_printf
    _DIAGNOSTICxTOxPC->_SendMessage
    _SendMessage->_printf

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  692683
                                             38 BANK0      2     2      0
                     _APIxInitialize
                   _DIAGNOSTICxTOxPC
                        _EEPROMxREAD
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     5     5      0  648482
                                             25 BANK0      5     5      0
                    _Debounce_Inputs
                       _EEPROMxSTORE
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                            _SETxPWM
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  518420
                                             23 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               2     2      0   64537
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               2     2      0   64537
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                2     2      0   64537
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                2     2      0   64537
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   49154
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   49154
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   49154
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   49154
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   33910
                                             30 COMRAM     7     4      3
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1   31766
                                             30 COMRAM     2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMxSTORE                                        12    10      2     660
                                             26 COMRAM    10     8      2
                                             21 BANK0      2     2      0
                       _Eeprom_Store
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Store                                         8     4      4     372
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0   30737
                                             30 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     144
                                             20 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   24558
                                             34 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   22387
                                             31 COMRAM     4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   6     2      4    2284
                                             20 COMRAM     6     2      4
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (5) _GETxAPIxVAL                                          2     0      2   15151
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0   15442
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          6     2      4   15442
                                             24 COMRAM     6     2      4
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         6     2      4    1216
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROMxREAD                                          7     5      2     395
                                             26 COMRAM     7     5      2
                        _Eeprom_Read
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read                                          8     6      2     236
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _DIAGNOSTICxTOxPC                                     2     2      0    3649
                                             31 COMRAM     2     2      0
                        _SendMessage
 ---------------------------------------------------------------------------------
 (2) _SendMessage                                          4     0      4    3649
                                             34 BANK0      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2147
                                             30 COMRAM     1     1      0
                                             21 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     112
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _DIAGNOSTICxTOxPC
     _SendMessage
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _EEPROMxREAD
     _Eeprom_Read
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _EEPROMxSTORE
       _Eeprom_Store
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _SETxPWM
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _SETxAPIxVAL
         _SENDxMESSAGE
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      FC      13       98.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      B2      11       69.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      B2       9       69.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B2       7       69.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      8A       5       86.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3E8      20        0.0%
DATA                 0      0     3E8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 05 22:50:24 2017

                  _eusart1TxBufferRemaining 0042                           ?_DIAGNOSTICxTOxPC 0001  
                                        l90 3F58                                          l92 3F70  
                                        l93 3F80                                 __CFG_BOR$ON 000000  
                                        bsr 000FE0                         ___wmul@multiplicand 0015  
                               __CFG_BORV$1 000000                                 ?_GETxAPIxRW 0013  
                              __CFG_CP0$OFF 000000                          ??_DIAGNOSTICxTOxPC 0020  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l202 09D2  
                                       l300 11FA                                         l220 0BF2  
                                       l213 13DE                                         l301 1238  
                                       l221 0C1E                                         l205 0A12  
                                       l302 1296                                         l230 0DB6  
                                       l222 0C46                                         l214 0B32  
                                       l311 1340                                         l303 129A  
                                       l231 0DE0                                         l223 0C56  
                                       l207 0A52                                         l400 23FA  
                                       l320 136E                                         l304 12E6  
                                       l240 0F64                                         l232 0E0C  
                                       l224 0CD4                                         l216 0B42  
                                       l321 13D2                                         l241 0F68  
                                       l233 0E16                                         l225 0CE4  
                                       l217 0B74                                         l209 0ADC  
                                       l402 2406                                         l322 16B0  
                                       l314 137C                                         l242 0FB4  
                                       l226 0D0E                                         l218 0B9E  
                                       l315 135A                                         l251 104C  
                                       l235 0EF2                                         l227 0D38  
                                       l219 0BC8                                         l420 262C  
                                       l412 2448                                         l404 2412  
                                       l324 151C                                         l332 1474  
                                       l316 13AC                                         l308 1332  
                                       l260 1094                                         l252 1026  
                                       l236 0F26                                         l228 0D62  
                                       l421 247E                                         l341 14C8  
                                       l325 1430                                         l317 135E  
                                       l261 10EA                                         l253 107C  
                                       l237 0F2E                                         l229 0D8C  
                                       l414 244E                                         l262 1098  
                                       l254 102A                                         l246 1000  
                                       l238 0F4A                                         l190 08D2  
                                       l191 1698                                         l351 1590  
                                       l335 1490                                         l319 1362  
                                       l263 109C                                         l255 102E  
                                       l432 24E2                                         l408 2462  
                                       l416 2454                                         l360 1640  
                                       l328 154E                                         l344 14E4  
                                       l272 1118                                         l264 10A0  
                                       l256 1032                                         l192 08DA  
                                       l409 2442                                         l361 15D0  
                                       l329 1458                                         l273 1120  
                                       l265 10AC                                         l257 103E  
                                       l249 100E                                         l193 0918  
                                       l442 2556                                         l354 159E  
                                       l338 14AC                                         l282 1166  
                                       l274 1124                                         l435 250E  
                                       l371 1682                                         l347 1500  
                                       l267 1246                                         l275 1128  
                                       l259 10BA                                         l187 089E  
                                       l452 25B4                                         l356 1624  
                                       l364 15EC                                         l276 1276  
                                       l292 11A8                                         l284 116A  
                                       l196 0956                                         l381 26DA  
                                       l453 25CC                                         l437 2526  
                                       l357 15A6                                         l269 1136  
                                       l622 3988                                         l470 2654  
                                       l374 1690                                         l294 1208  
                                       l286 11B6                                         l278 1178  
                                       l535 438A                                         l623 38F8  
                                       l455 25E4                                         l439 253E  
                                       l383 23C6                                         l391 23B2  
                                       l367 1608                                         l199 0994  
                                       l640 2FBE                                         l616 3972  
                                       l632 3968                                         l464 266E  
                                       l472 265A                                         l384 2382  
                                       l537 43B2                                         l641 2F56  
                                       l617 389C                                         l481 26A2  
                                       l465 2648                                         l457 25FC  
                                       l385 2392                                         l297 11E6  
                                       l626 390E                                         l618 38F4  
                                       l394 272E                                         l298 11EA  
                                       l651 3000                                         l643 2F72  
                                       l627 393E                                         l491 26D2  
                                       l483 26AA                                         l475 268A  
                                       l459 2614                                         l387 239A  
                                       l299 11F4                                         l628 3928  
                                       l468 264E                                         l396 2426  
                                       l661 2966                                         l653 301C  
                                       l645 2F8E                                         l629 3918  
                                       l485 26B2                                         l477 2692  
                                       l397 23E4                                         l389 23A6  
                                       l662 291C                                         l902 18A2  
                                       l671 280E                                         l663 274A  
                                       l647 2FA8                                         l911 1912  
                                       l903 184A                                         l487 26BA  
                                       l479 269A                                         l920 1982  
                                       l912 18BA                                         l904 1854  
                                       l673 2844                                         l665 2764  
                                       l921 192A                                         l913 18C4  
                                       l489 26C2                                         l690 29EE  
                                       l930 19A8                                         l922 194C  
                                       l675 287A                                         l667 27A2  
                                       l771 41B0                                         l763 3D6A  
                                       l691 2A2A                                         l931 19CA  
                                       l907 186A                                         l764 3CD0  
                                       l692 2A66                                         l940 1A48  
                                       l916 18DA                                         l908 188C  
                                       l780 2DA4                                         l852 4104  
                                       l860 40D8                                         l677 28B0  
                                       l669 27D8                                         l693 2AA2  
                                       l925 1962                                         l917 18FC  
                                       l861 40F0                                         l853 40A4  
                                       l774 41CA                                         l686 2B5E  
                                       l694 2ADE                                         l934 19E0  
                                       l926 196C                                         l782 2ECA  
                                       l862 4100                                         l679 28E6  
                                       l695 2B1A                                         l687 296E  
                                       l943 1A5E                                         l935 19EA  
                                       l855 40A8                                         l871 4028  
                                       l952 1ADC                                         l944 1A68  
                                       l856 40AC                                         l872 402C  
                                       l689 29B2                                         l961 1B5A  
                                       l953 1AE6                                         l929 1A00  
                                       l793 4178                                         l857 40C4  
                                       l873 4044                                         l970 1BD8  
                                       l962 1B64                                         l938 1A7E  
                                       l890 17AC                                         l858 40D4  
                                       l874 4054                                         l971 1BE2  
                                       l947 1AFC                                         l939 1A26  
                                       l779 2EE4                                         l980 1C60  
                                       l956 1B7A                                         l948 1AA4  
                                       l884 17C2                                         l788 4150  
                                       l868 4084                                         l876 4058  
                                       l965 1BF8                                         l957 1B22  
                                       l949 1AC6                                         l893 1832  
                                       l885 176A                                         l877 4070  
                                       l869 4024                                         _API 0100  
                                       l974 1C76                                         l966 1BA0  
                                       l958 1B44                                         l894 17DA  
                                       l886 1774                                         l878 4080  
                                       l983 1CF4                                         l975 1C1E  
                                       l967 1BC2                                         l895 17E4  
                                       l992 1D64                                         l984 1C9C  
                                       l976 1C40                                         l993 1D0C  
                                       l985 1CBE                                         l889 178A  
                                       l994 1D2E                                         l898 17FA  
                                       l979 1C56                                         l899 181C  
                                       l988 1CD4                                         l997 1D44  
                                       l989 1CDE                                         l998 1D4E  
                              __CFG_CPB$OFF 000000                                _Stop_Program 008B  
                                       _PR2 000FCB                                __CFG_CPD$OFF 000000  
              Eeprom_Read@Location_Low_Byte 0015                                         prod 000FF3  
                                       wreg 000FE8                      ?_READxRECEIVEDxMESSAGE 0001  
          Train_Move_Right_Start@Return_Val 00E5                                ?_GETxAPIxVAL 0013  
                                _Diag_Comm2 0072                             APIxInitialize@i 0013  
                              __CFG_LVP$OFF 000000         __end_of_Left_Mountain_From_The_Left 3AB2  
               _Left_Mountain_From_The_Left 39A0                                __CFG_WDT$OFF 000000  
                                      l1001 1DD4                                        l1010 1E44  
                                      l1002 1D7C                                        l1011 1DEC  
                                      l1003 1D9E                                        l1012 1E0E  
     __end_of_Right_Mountain_From_The_Right 3778      __size_of_Right_Mountain_From_The_Right 0114  
             _Right_Mountain_From_The_Right 3664                                        l1101 369A  
                                      l1006 1DB4                                        l1015 1E24  
                                      l1007 1DBE                                        l1103 3774  
                                      l1016 1E2E                                        l1200 3AA0  
                                      l1112 3734                                        l1104 36A0  
                                      l1041 2BEA                                        l1201 39A6  
                                      l1105 36F6                                        l1034 2D6A  
                                      l1122 3BB0                                        l1130 3B40  
                                      l1114 375C                                        l1051 2D7E  
                                      l1043 2CD2                                        l1035 2BA6  
                                      l1123 3AB8                                        l1115 3760  
                                      l1052 2CD8                                        l1036 2CC4  
                                      l1204 39D6                                        l1140 3BAA  
                                      l1053 2D02                                        l1045 2CB4  
                                      l1302 35EC                                        l1054 2D10  
                                      l1046 2C38                                        l1038 2C28  
                                      l1206 3AAE                                        l1126 3AE6  
                                      l1150 3048                                        l1303 363E  
                                      l1039 2BAC                                        l1215 3A6E  
                                      l1207 39DC                                        l1231 3888  
                                      l1151 307C                                        l1304 35F2  
                                      l1048 2C76                                        l1208 3A30  
                                      l1128 3BBE                                        l1240 3846  
                                      l1232 37B4                                        l1152 3188  
                                      l1080 32CE                                        l1217 3A96  
                                      l1137 3B7C                                        l1129 3AEC  
                                      l1225 387A                                        l1233 3808  
                                      l1153 30A6                                        l1081 32EC  
                                      l1218 3A9A                                        l1242 3870  
                                      l1226 377E                                        l1082 3400  
                                      l1139 3BA6                                        l1243 3874  
                                      l1155 30AC                                        l1083 32FA  
                                      l1156 30D4                                        l1084 334C  
                                      l1252 32AC                                        l1260 3222  
                                      l1229 37AE                                        l1149 316C  
                                      l1157 30E2                                        l1085 3374  
                                      l1261 3274                                        l1253 318E  
                                      l1158 3134                                        l1086 337E  
                                      l1262 329E                                        l1254 31BC  
                                      l1190 34AA                                        l1159 315E  
                                      l1079 33E4                                        l1087 33B6  
                                      l1255 32C8                                        l1191 34B8  
                                      l1256 31E6                                        l1184 351A  
                                      l1192 34EA                                        l1273 3E7A  
                                      l1097 3766                                        l1089 33DE  
                                      l1193 3510                                        l1185 3406  
                                      l1290 3556                                        l1274 3EB8  
                                      l1098 366A                                        l1258 31EC  
                                      l1186 3424                                        l1259 3214  
                                      l1187 3536                                        l1188 342E  
                                      l1189 3482                                        l1296 3582  
                                      l1289 3546                                        l1481 3DBA  
                                      l1298 35AA                                        l1484 3E06  
                                      l1485 3DCC                                        l1742 4222  
                                      l1478 3D7A                                        l1743 422C  
                                      l1487 3E38                                        l1479 3D76  
                                      l1752 42FC                                        l1753 4306  
                                      l1738 4202                                        l1739 41FA  
                                      l1659 4498                                        l1748 42E4  
                                      l1749 42DC                                        l6220 1E64  
                                      l6230 1EC4                                        l6238 3CC8  
                                      l8150 3B9C                                        l8038 3866  
                                      l8234 3E02                                        l9114 0FF8  
                                      l8094 3752                                        l7624 44F2  
                                      l8188 35AE                                        l8278 2D9C  
                                      l9254 132A                                        l9086 0EF2  
                                      l7930 3166                                        l7762 34B2  
                                      l9392 15C2                                        l9296 144A  
                                      l7794 32F4                                        l7982 3A8C  
                                      l7878 32A6                                        l8874 2FA8  
                                      l8866 2F72                                        l8886 3000  
                                      l8990 0C1A                                        STR_1 084E  
                                      STR_2 0855                                        STR_3 085C  
                                      STR_4 0863                                        STR_5 086A  
                                      STR_6 085C                                        STR_7 0863  
                                      STR_8 0844              Right_Mountain_From_The_Left@rc 00D1  
                                      u4115 4356                                        u5330 1EC4  
                                      u5360 3D52                                        u7200 3B70  
                                      u7040 383A                                        u7120 3728  
                                      u7150 3AD8                                        u7070 368C  
                                      u6600 3E68                                        u6700 42E8  
                                      u7260 35DA                                        u7420 2E24  
                                      u8140 250A                                        u7430 2ECE  
                                      u8230 25C8                                        u8150 2522  
                                      u9030 12C2                                        u7280 3648  
                                      u7520 18AA                                        u8240 25E0  
                                      u8160 253A                                        u6730 4330  
                                      u7370 4158                                        u8250 25F8  
                                      u9050 132A                                        u7700 1B04  
                                      u7620 1A08                                        u7460 17CA  
                                      u8260 2610                                        u9060 1356  
                                      u6670 4206                                        u6590 4256  
                                      u8430 2F7E                                        u7710 1B06  
                                      u7630 1A0A                                        u7550 191A  
                                      u7526 18AC                                        u7390 4180  
                                      u6910 39C8                                        u9240 1576  
                                      u7490 183A                                        u7466 17CC  
                                      u8610 0A82                                        u9500 2852  
                                      u7820 1C7E                                        u7740 1B82  
                                      u7660 1A86                                        u7580 198A  
                                      u7556 191C                                        u8620 0B0E  
                                      u9510 2888                                        u8470 300C  
                                      u7830 1C80                                        u7750 1B84  
                                      u7670 1A88                                        u7590 198C  
                                      u9350 1668                                        u9520 28BE  
                                      u7920 1DDC                                        u7496 183C  
                                      u6960 3A62                                        u9530 28F4  
                                      u9460 277A                                        u7860 1CFC  
                                      u7780 1C00                                        u9470 27B0  
                                      u9390 38E0                                        u7950 1E4C  
                                      u7926 1DDE                                        u7790 1C02  
                                      u6990 37A0                                        u8910 0F22  
                                      u8830 0E08                                        u9480 27E6  
                                      u9490 281C                                        u7890 1D6C  
                                      u7866 1CFE                                        u7956 1E4E  
                                      u7990 23C2                                        u8950 0F90  
                                      u9567 3F4A                                        u7896 1D6E  
                                      u8970 0FF8                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                        _Data 00B2  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 2358  
            __size_of_Train_Move_Left_Brake 0146               __end_of_Train_Move_Left_Brake 318C  
                                      _pLen 007A                                        _atoi 3D74  
                                      _main 3EEE                               ?_EUSART1_Read 0001  
            __size_of_Train_Move_Left_Start 0138                       _Update_StateMchn$2186 00D7  
                     _Update_StateMchn$2187 00D9                             __end_of_SETxPWM 3EEE  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        fsr0l 000FE9  
                                      indf2 000FDF                                        fsr1l 000FE1  
                                      fsr2l 000FD9                                        btemp 004D  
             __end_of_Train_Move_Left_Start 3404                                        prodh 000FF4  
                                      prodl 000FF3                                        start 00C6  
                           __end_of_DataLen 0844                         __end_of_Eeprom_Read 41E4  
                             __CFG_IESO$OFF 000000                             __end_of_ApiList 0839  
               EUSART1_Initialize@baud_rate 0013                          Green_Led@Operation 0013  
                             __CFG_MCLRE$ON 000000                                ___param_bank 000000  
                      Eeprom_Store@Location 0013                               ??_Init_Timers 0013  
                           __end_of_Red_Led 40A0                               __CFG_PLLDIV$5 000000  
                           EEPROMxREAD@Data 001F                        __end_of_EEPROMxSTORE 2EEE  
                            __CFG_CCP2MX$ON 000000                                       ?_atoi 0019  
                                     ?_main 0001                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 0013  
                                     _T0CON 000FD5                  __end_of_SETxAPIxVALxNoxRET 434C  
                                     _T2CON 000FCA                             __end_of___lwdiv 4236  
                              SETxPWM@speed 001F                                       i2l110 3C4C  
                                     i2l111 3C56                             __end_of___lwmod 4310  
                                     i2l106 3C42                                       i2l107 3C20  
                                     i2l108 3C22                                       i2l109 3C36  
                                     i2l562 43F0                                       i2l563 4410  
                                     i2l556 43E4                                       i2l557 43E0  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 43BA  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                                     _pData 007C                              __CFG_EBTRB$OFF 000000  
                           __end_of_dpowers 0843                             __end_of_isdigit 44A0  
                           __end_of_tc_high 3CA2                                       atoi@a 001E  
                                     atoi@s 0019                                       _putch 44F0  
                                     pclath 000FFA                                       tablat 000FF5  
                           ?_APIxInitialize 0001                              ??_EUSART1_Read 0013  
                                     status 000FD8                                       wtemp6 004E  
 Train_Move_Left_Brake@Train_Move_Wait_Time 0064                   __size_of_TranslateMessage 0158  
                       __size_of_GETxAPIxRW 001C                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 4188                                  _ReadActive 006E  
                      __size_of_EEPROMxREAD 00D2                             __initialization 3F8A  
                              __end_of_atoi 3E42                  __end_of_EUSART1_Initialize 42CE  
                              __end_of_main 3F8A                               ??_SendMessage 0020  
                          __end_of_Init_Pwm 443C                                      ??_atoi 001B  
                                    ??_main 00E2                         __end_of_Init_Timers 44F0  
                             __activetblptr 000002                      Eeprom_Read@Return_Data 0019  
                          __end_of_Junction 2D82                                _Led1_Counter 002C  
                                _Pcomm_List 0076                           _Green_Led_Counter 002A  
                     ?_EUSART1_Transmit_ISR 0001                           ?_Update_StateMchn 0001  
                        ??_Update_StateMchn 00D5                                      _ADCON1 000FC1  
                                    _EEDATA 000FA8                                      _CCPR1L 000FBE  
                                 ??_SETxPWM 0022                                      _EECON2 000FA7  
                                    ?_putch 0001                                      _API_RW 0200  
                        __size_of_Green_Led 0080                                 _Eeprom_Read 4188  
                                    _INTCON 000FF2                     ?_Train_Move_Right_Brake 0001  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 003A                     ?_Train_Move_Right_Start 0001  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 0001  
                                 ??_Red_Led 0013                              __CFG_XINST$OFF 000000  
           Train_Move_Left_Brake@Return_Val 00E6                                      ___wmul 443C  
                            __CFG_STVREN$ON 000000                             _Train_Pos1_Temp 008A  
                           _Train_Pos2_Temp 0089                                   ??___lwdiv 0017  
                                 ??___lwmod 001E                                      clear_0 3FD0  
                                    clear_1 3FDC                                      clear_2 3FE8  
                              _DelayCounter 0070                                      clear_3 3FF4  
                                    clear_4 4000                                      clear_5 400C  
                                    _tc_low 0018                                      _printf 353A  
                            _Switch_Moutain 002E                                  _Train_Path 2358  
   Right_Mountain_From_The_Right@Return_Val 004B      Left_Mountain_From_The_Right@Return_Val 004A  
                              __pdataCOMRAM 0048                              _Switch_Program 008F  
                                 ??_isdigit 0013                                   ??_tc_high 0001  
                       __end_of_SendMessage 4482                   _Activate_Controls_Counter 007E  
                              __mediumconst 0000                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                              ?_SETxAPIxVAL 0019                   _Button_Contact_Counter_LB 0033  
                 _Button_Contact_Counter_LF 0032                   _Button_Contact_Counter_RB 0031  
                 _Button_Contact_Counter_RF 0030              __end_of_Train_Move_Right_Brake 32CC  
                           _eusart1RxBuffer 0400                        __size_of_GETxAPIxVAL 001C  
                           _eusart1TxBuffer 047E              __end_of_Train_Move_Right_Start 353A  
                      _Train_Move_Pwm_Count 0082                                  __accesstop 0060  
                   __end_of__initialization 4012                             __CFG_PBADEN$OFF 000000  
                             ___rparam_used 000001                       __size_of_EEPROMxSTORE 016C  
                             _Received_Data 0088                              __pcstackCOMRAM 0001  
                              __pidataBANK0 44FC                                 _Init_Timers 44D8  
                             __end_of_putch 44FC                           __end_of_Green_Led 4120  
                              ??_GETxAPIxRW 0015                     ??_READxRECEIVEDxMESSAGE 00DE  
                      __end_of_EUSART1_Read 43BA                           __end_of_SetDCPWM1 4386  
                           _Red_Led_Counter 0028                      ??_EUSART1_Transmit_ISR 0001  
Train_Move_Right_Start@Train_Move_Wait_Time 0062                    __size_of_Debounce_Inputs 0786  
               __end_of_EUSART1_Receive_ISR 4414            Train_Move_Right_Brake@Return_Val 00E4  
                             ?_SENDxMESSAGE 0013                   __size_of_DIAGNOSTICxTOxPC 023A  
                                   ??_putch 0013                               _eusart1RxHead 0041  
                             _eusart1TxHead 0044                       __size_of_Eeprom_Store 0068  
               Junction@Junction_Left_Right 0020                               _eusart1RxTail 0040  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                __pbssBANK2 0200                                  __pbssBANK3 0300  
                                __pbssBANK4 0400                               _eusart1TxTail 0043  
                              _EEPROMxSTORE 2D82                                   ?_Init_Pwm 0001  
                          _TranslateMessage 2EEE                                 _Pcomm_List2 0074  
                        __end_of_GETxAPIxRW 44D8                            GETxAPIxVAL@index 0013  
                          SETxAPIxVAL@index 0019                                   ?_Junction 001F  
                          SETxAPIxVAL@value 001B        __size_of_Left_Mountain_From_The_Left 0112  
                                   ?___wmul 0013                            SendMessage@index 00DE  
                          SendMessage@value 00E0                                     _CCP1CON 000FBD  
                               _SendMessage 4462                                     ?_tc_low 0001  
                                   ?_printf 00D1                                 ?_Train_Path 00D3  
                              _Eeprom_Store 4120                                     _INTCON2 000FF1  
 Train_Move_Left_Start@Train_Move_Wait_Time 0066                              ??_SENDxMESSAGE 0017  
                          ??_APIxInitialize 0013                                     _SETxPWM 3E42  
                          SETxPWM@direction 0021                                     _DataLen 0843  
                                   _ApiList 0801                          _SETxAPIxVALxNoxRET 4310  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 001F  
                         Eeprom_Store@Value 0015                                     _Red_Led 4020  
                     _Train_Move_Left_Brake 3046                                  ??_Junction 0020  
                                   __Hparam 0000                         ?_SETxAPIxVALxNoxRET 0015  
                     _Train_Move_Left_Start 32CC                                     __Lparam 0000  
                      _Message_To_Translate 0086                             __size_of___wmul 0026  
                                   ___lwdiv 41E4                                     ___lwmod 42CE  
                              __psmallconst 0800                                     __pcinit 3F8A  
                                   __ramtop 0800                             __size_of_tc_low 00AE  
                                   __ptext0 3EEE                                     __ptext1 0872  
                                   __ptext2 2358                                     __ptext3 3404  
                                   __ptext4 318C                                     __ptext5 32CC  
                                   __ptext6 3046                                     __ptext7 3664  
                                   __ptext8 3778                                     __ptext9 3AB2  
                      Train_Path@Return_Val 00E8                             __size_of_printf 012A  
                                   _dpowers 0839                                     _isdigit 4482  
                                   _tc_high 0008                        ??_SETxAPIxVALxNoxRET 0019  
                        _EUSART1_Initialize 4286                   _Train_Move_Pwm_Fast_Count 0068  
                            __pintcode_body 3BC2                        end_of_initialization 4012  
                           _Switch_Junction 002F                                ?_Eeprom_Read 0013  
                         ??_Debounce_Inputs 001F                         ?_EUSART1_Initialize 0001  
                      __size_of_SETxAPIxVAL 0050                               __Lmediumconst 0000  
                                   int_func 3BC2                            SETxPWM@pwm_speed 0024  
                             ??_EEPROMxREAD 001D                   __size_of_Update_StateMchn 0E64  
                       __size_of_Train_Path 03DA                                   _RCSTAbits 000FAB  
                                   printf@c 00DD                                     printf@f 00D1  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                       __size_of_EUSART1_Read 0034  
                      EEPROMxSTORE@api_list 00D1              Left_Mountain_From_The_Right@rc 00D1  
                      ??_EUSART1_Initialize 0013                                   _PORTAbits 000F80  
                                 _PORTBbits 000F81                                   _PORTCbits 000F82  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                                 _TRISEbits 000F96                         Eeprom_Read@Location 0013  
                          _DIAGNOSTICxTOxPC 2732                Junction@Junction_Switch_Time 006A  
                                 _Diag_Comm 0078                      ?_Train_Move_Left_Brake 0001  
                              _EUSART1_Read 4386                                   _TXSTAbits 000FAC  
                    ?_Train_Move_Left_Start 0001                                 _Switch_Main 00E9  
                               _Switch_Init 0090                               EEPROMxSTORE@i 00D2  
                      __end_of_SENDxMESSAGE 2BA2                         __end_of_EEPROMxREAD 3D74  
                              ?_Init_Timers 0001                                 _WriteActive 006C  
                                 _Comm_List 0092                          Junction@Return_Val 004C  
                            __end_of___wmul 4462                                 _BAUDCONbits 000FB8  
                             __pidataCOMRAM 4502                 _Train_Move_Right_Brake$2191 00D1  
                      _Update_State_Machine 0091                              __end_of_tc_low 00C6  
                  __end_of_TranslateMessage 3046                 _Button_Contact_Counter_Stop 0035  
                            __end_of_printf 3664              __size_of_READxRECEIVEDxMESSAGE 0114  
                                 _Green_Led 40A0               __end_of_READxRECEIVEDxMESSAGE 39A0  
                       start_initialization 3F8A                               ??_GETxAPIxVAL 0015  
                                 _SetDCPWM1 434C                             SetDCPWM1@DCycle 0019  
                    _Mountain_Delay_Counter 0026                ?_Left_Mountain_From_The_Left 0001  
             Eeprom_Store@Location_Low_Byte 0017                           __size_of_Init_Pwm 0028  
             Eeprom_Read@Location_High_Byte 0017                           __size_of_Junction 01E0  
                                  ??___wmul 0017                                 __pdataBANK0 00E4  
                          __CFG_LPT1OSC$OFF 000000                                ?_SendMessage 00DE  
                                  ??_tc_low 00BC                                    ??_printf 001F  
                            _eusart1RxCount 003F                                ??_Train_Path 0026  
                                ?_Green_Led 0001                                 __pbssCOMRAM 0026  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 00BC  
                                ?_SetDCPWM1 0015  Train_Move_Right_Brake@Train_Move_Wait_Time 0060  
                              _isdigit$1843 0014                                    ?_SETxPWM 001F  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 44BC  
             ??_Left_Mountain_From_The_Left 0026                        __size_of_Eeprom_Read 005C  
                               _EEPROMxREAD 3CA2                                    ?_Red_Led 0001  
                          _Update_StateMchn 0872                            ___lwdiv@dividend 0013  
     Left_Mountain_From_The_Left@Return_Val 0049      Right_Mountain_From_The_Left@Return_Val 0048  
                        __end_of_Train_Path 2732                                   __pintcode 0008  
                                  ?___lwdiv 0013        __end_of_Left_Mountain_From_The_Right 3BC2  
     __size_of_Left_Mountain_From_The_Right 0110                _Left_Mountain_From_The_Right 3AB2  
                                  ?___lwmod 001A                                 __pintcodelo 0018  
                           GETxAPIxRW@index 0013                             _Debounce_Inputs 16D6  
                               __smallconst 0800                    ??_Train_Move_Right_Brake 0026  
                                  ?_isdigit 0001                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 00D1                    ??_Train_Move_Right_Start 0026  
                     TranslateMessage@Index 0022                       Junction@Straight_Bend 001F  
                     TranslateMessage@Value 0020                _Button_Contact_Counter_Start 0036  
                  _Reed_Contact_LMD_Counter 0039                            ___lwdiv@quotient 0018  
                _Train_Move_Left_Brake$2189 00D1                              __size_of_putch 000C  
               _Train_Move_Right_Start$2190 00D1                              ___wmul@product 0017  
                     __size_of_SENDxMESSAGE 0236        __end_of_Right_Mountain_From_The_Left 388C  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 3778  
                                  _PIE1bits 000F9D                              _Adjust_Counter 0080  
             Left_Mountain_From_The_Left@rc 00D1                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1              Eeprom_Store@Location_High_Byte 0019  
                                  _RCONbits 000FD0                              Train_Path@From 00D4  
                  __end_of_DIAGNOSTICxTOxPC 296C                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           ___wmul@multiplier 0013  
                         SENDxMESSAGE@index 0013                           SENDxMESSAGE@value 0015  
                               ??_Green_Led 0013                                  printf@flag 00D9  
                                printf@prec 00DA                                EEPROMxREAD@i 0021  
               __size_of_SETxAPIxVALxNoxRET 003C                                 ??_SetDCPWM1 0017  
                               _GETxAPIxVAL 44A0                               ??_SETxAPIxVAL 001D  
                              _SENDxMESSAGE 296C                                   copy_data0 3F9E  
                                 copy_data1 3FBE                     ??_Train_Move_Left_Brake 0026  
                  _Reed_Contact_LMU_Counter 003A                            __size_of_SETxPWM 00AC  
                   ??_Train_Move_Left_Start 0026                          SetDCPWM1@dutycycle 0015  
                                  _Init_Pwm 4414                       EUSART1_Read@readValue 0013  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 04FC  
                                  __Hrparam 0000                                    _Junction 2BA2  
                          __size_of_Red_Led 0080               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                                    _TrSwitch 0085  
                                  _RxSwitch 0087                    _Reed_Contact_RMD_Counter 0037  
                   __end_of_Debounce_Inputs 1E5C                 __size_of_EUSART1_Initialize 0048  
                          __size_of___lwdiv 0052                            __size_of___lwmod 0042  
                         _Switch_Train_Path 008C                           _Switch_Train_Move 0084  
                          _Switch_Adjust_LB 0046                            _Switch_Adjust_LF 0045  
                          _Switch_Adjust_RB 008E                            _Switch_Adjust_RF 008D  
                      __size_of_SendMessage 0020                           ?_TranslateMessage 0001  
                                _API_EEPROM 0300             __size_of_Train_Move_Right_Brake 0140  
                          __size_of_isdigit 001E                            __size_of_tc_high 3C9A  
                        ??_TranslateMessage 0020                             ___lwdiv@divisor 0015  
           __size_of_Train_Move_Right_Start 0136                             ___lwdiv@counter 0017  
                                  __ptext10 39A0                                    __ptext11 3E42  
                                  __ptext20 2EEE                                    __ptext12 2BA2  
                                  __ptext21 3D74                                    __ptext13 4020  
                                  __ptext30 4236                                    __ptext22 4482  
                                  __ptext14 40A0                                    __ptext31 296C  
                                  __ptext23 443C                                    __ptext15 2D82  
                                  __ptext40 41E4                                    __ptext32 4286  
                                  __ptext24 4310                                    __ptext16 4120  
                                  __ptext41 1E5C                                    __ptext33 3CA2  
                                  __ptext25 44A0                                    __ptext17 16D6  
                                  __ptext34 4188                                    __ptext26 44BC  
                                  __ptext18 434C                                    __ptext35 2732  
                                  __ptext27 4386                                    __ptext19 388C  
                                  __ptext44 43BA                                    __ptext36 4462  
                                  __ptext28 44D8                                    __ptext45 43E8  
                                  __ptext37 353A                                    __ptext29 4414  
                                  __ptext38 44F0                                    __ptext39 42CE  
                             ?_EEPROMxSTORE 001B                               __size_of_atoi 00CE  
                             __size_of_main 009C                         __end_of_SETxAPIxVAL 4286  
                   _Reed_Contact_LB_Counter 003D                                    int$flags 004D  
                   _Reed_Contact_LF_Counter 003E                                    atoi@sign 001D  
                _Train_Move_Left_Start$2188 00D1                    _Reed_Contact_RMU_Counter 0038  
                                 printf@val 00DB                         _EUSART1_Receive_ISR 43E8  
                                _GETxAPIxRW 44BC                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0013                               ?_Eeprom_Store 0013  
                  __end_of_Update_StateMchn 16D6                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0026              ??_Left_Mountain_From_The_Right 0026  
                     _READxRECEIVEDxMESSAGE 388C                                    isdigit@c 0015  
                   _Reed_Contact_RB_Counter 003B                              ??_EEPROMxSTORE 001D  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                            ___lwmod@dividend 001A  
                              ?_EEPROMxREAD 001B                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 003C                      _Train_Move_Right_Brake 318C  
              __end_of_EUSART1_Transmit_ISR 43E8                      _Train_Move_Right_Start 3404  
           Train_Move_Left_Start@Return_Val 00E7                                Train_Path@To 00D3  
                                  printf@ap 00D7                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0047              ??_Right_Mountain_From_The_Left 0026  
                            ??_Eeprom_Store 0017                             ___lwmod@divisor 001C  
                           ___lwmod@counter 001E                     SETxAPIxVALxNoxRET@index 0015  
                               _SETxAPIxVAL 4236                     SETxAPIxVALxNoxRET@value 0017  
                             ??_Eeprom_Read 0015                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 0001                              _APIxInitialize 1E5C  
             _Button_Contact_Counter_Middle 0034  
