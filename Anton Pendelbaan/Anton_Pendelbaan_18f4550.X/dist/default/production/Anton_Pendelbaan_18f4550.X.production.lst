

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Nov 29 23:17:14 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.44
    71                           ; Generated 14/09/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4550 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  00436A                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for Right_Mountain_From_The_Left@Return_Val
   110  00436A  01                 	db	1
   111                           
   112                           ;initializer for Left_Mountain_From_The_Left@Return_Val
   113  00436B  01                 	db	1
   114                           
   115                           ;initializer for Left_Mountain_From_The_Right@Return_Val
   116  00436C  01                 	db	1
   117                           
   118                           ;initializer for Right_Mountain_From_The_Right@Return_Val
   119  00436D  01                 	db	1
   120                           
   121                           ;initializer for Junction@Return_Val
   122  00436E  01                 	db	1
   123                           
   124                           	psect	idataBANK0
   125  004364                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for Train_Move_Right_Brake@Return_Val
   129  004364  01                 	db	1
   130                           
   131                           ;initializer for Train_Move_Right_Start@Return_Val
   132  004365  01                 	db	1
   133                           
   134                           ;initializer for Train_Move_Left_Brake@Return_Val
   135  004366  01                 	db	1
   136                           
   137                           ;initializer for Train_Move_Left_Start@Return_Val
   138  004367  01                 	db	1
   139                           
   140                           ;initializer for Train_Path@Return_Val
   141  004368  01                 	db	1
   142                           
   143                           ;initializer for _Switch_Main
   144  004369  01                 	db	1
   145                           
   146                           	psect	smallconst
   147  000800                     __psmallconst:
   148                           	opt stack 0
   149  000800  00                 	db	0
   150  000801                     _ApiList:
   151                           	opt stack 0
   152  000801  0012               	dw	18
   153  000803  0013               	dw	19
   154  000805  0014               	dw	20
   155  000807  0015               	dw	21
   156  000809  0016               	dw	22
   157  00080B  0017               	dw	23
   158  00080D  0018               	dw	24
   159  00080F  0019               	dw	25
   160  000811  001A               	dw	26
   161  000813  001B               	dw	27
   162  000815  0027               	dw	39
   163  000817  0028               	dw	40
   164  000819  002D               	dw	45
   165  00081B  002E               	dw	46
   166  00081D  002F               	dw	47
   167  00081F  0030               	dw	48
   168  000821  0031               	dw	49
   169  000823  0032               	dw	50
   170  000825  0033               	dw	51
   171  000827  0034               	dw	52
   172  000829  0035               	dw	53
   173  00082B  0036               	dw	54
   174  00082D  0037               	dw	55
   175  00082F  0038               	dw	56
   176  000831  0039               	dw	57
   177  000833  003A               	dw	58
   178  000835  003B               	dw	59
   179  000837  003C               	dw	60
   180  000839                     __end_of_ApiList:
   181                           	opt stack 0
   182  000839                     _dpowers:
   183                           	opt stack 0
   184  000839  0001               	dw	1
   185  00083B  000A               	dw	10
   186  00083D  0064               	dw	100
   187  00083F  03E8               	dw	1000
   188  000841  2710               	dw	10000
   189  000843                     __end_of_dpowers:
   190                           	opt stack 0
   191  000843                     _DataLen:
   192                           	opt stack 0
   193  000843  0A                 	db	10
   194  000844                     __end_of_DataLen:
   195                           	opt stack 0
   196  0000                     _PORTEbits	set	3972
   197  0000                     _PORTBbits	set	3969
   198  0000                     _PORTCbits	set	3970
   199  0000                     _PIR2bits	set	4001
   200  0000                     _EECON2	set	4007
   201  0000                     _EEDATA	set	4008
   202  0000                     _EEADR	set	4009
   203  0000                     _EECON1bits	set	4006
   204  0000                     _RCREG1	set	4014
   205  0000                     _RCSTA1bits	set	4011
   206  0000                     _TXREG1	set	4013
   207  0000                     _SPBRG	set	4015
   208  0000                     _SPBRGH	set	4016
   209  0000                     _TXSTAbits	set	4012
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _BAUDCONbits	set	4024
   212  0000                     _T2CON	set	4042
   213  0000                     _CCP1CON	set	4029
   214  0000                     _CCPR1L	set	4030
   215  0000                     _PR2	set	4043
   216  0000                     _T0CON	set	4053
   217  0000                     _TMR0L	set	4054
   218  0000                     _TMR0H	set	4055
   219  0000                     _INTCON2	set	4081
   220  0000                     _INTCON	set	4082
   221  0000                     _RCONbits	set	4048
   222  0000                     _PIR1bits	set	3998
   223  0000                     _PIE1bits	set	3997
   224  0000                     _INTCONbits	set	4082
   225  0000                     _TRISBbits	set	3987
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISCbits	set	3988
   228  0000                     _PORTDbits	set	3971
   229  0000                     _PORTAbits	set	3968
   230  0000                     _TRISDbits	set	3989
   231  0000                     _TRISAbits	set	3986
   232  0000                     _CMCON	set	4020
   233  0000                     _ADCON1	set	4033
   234  0000                     _TRISE	set	3990
   235  0000                     _TRISD	set	3989
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISB	set	3987
   238  0000                     _TRISA	set	3986
   239  0000                     _TXIF	set	31988
   240  000844                     STR_8:
   241  000844  4D                 	db	77	;'M'
   242  000845  23                 	db	35
   243  000846  25                 	db	37
   244  000847  64                 	db	100	;'d'
   245  000848  20                 	db	32
   246  000849  25                 	db	37
   247  00084A  64                 	db	100	;'d'
   248  00084B  0D                 	db	13
   249  00084C  0A                 	db	10
   250  00084D  00                 	db	0
   251  00084E                     STR_1:
   252  00084E  45                 	db	69	;'E'
   253  00084F  23                 	db	35
   254  000850  31                 	db	49	;'1'
   255  000851  30                 	db	48	;'0'
   256  000852  0D                 	db	13
   257  000853  0A                 	db	10
   258  000854  00                 	db	0
   259  000855                     STR_2:
   260  000855  45                 	db	69	;'E'
   261  000856  23                 	db	35
   262  000857  31                 	db	49	;'1'
   263  000858  31                 	db	49	;'1'
   264  000859  0D                 	db	13
   265  00085A  0A                 	db	10
   266  00085B  00                 	db	0
   267  00085C                     STR_3:
   268  00085C  45                 	db	69	;'E'
   269  00085D  23                 	db	35
   270  00085E  31                 	db	49	;'1'
   271  00085F  32                 	db	50	;'2'
   272  000860  0D                 	db	13
   273  000861  0A                 	db	10
   274  000862  00                 	db	0
   275  000863                     STR_4:
   276  000863  45                 	db	69	;'E'
   277  000864  23                 	db	35
   278  000865  31                 	db	49	;'1'
   279  000866  33                 	db	51	;'3'
   280  000867  0D                 	db	13
   281  000868  0A                 	db	10
   282  000869  00                 	db	0
   283  00086A                     STR_5:
   284  00086A  45                 	db	69	;'E'
   285  00086B  23                 	db	35
   286  00086C  31                 	db	49	;'1'
   287  00086D  34                 	db	52	;'4'
   288  00086E  0D                 	db	13
   289  00086F  0A                 	db	10
   290  000870  00                 	db	0
   291  0000                     
   292                           ; #config settings
   293  000871  00                 	db	0	; dummy byte at the end
   294  0000                     
   295                           	psect	cinit
   296  003D74                     __pcinit:
   297                           	opt stack 0
   298  003D74                     start_initialization:
   299                           	opt stack 0
   300  003D74                     __initialization:
   301                           	opt stack 0
   302                           
   303                           ; Initialize objects allocated to BANK0 (6 bytes)
   304                           ; load TBLPTR registers with __pidataBANK0
   305  003D74  0E64               	movlw	low __pidataBANK0
   306  003D76  6EF6               	movwf	tblptrl,c
   307  003D78  0E43               	movlw	high __pidataBANK0
   308  003D7A  6EF7               	movwf	tblptrh,c
   309  003D7C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   310  003D7E  6EF8               	movwf	tblptru,c
   311  003D80  EE00  F0DC         	lfsr	0,__pdataBANK0
   312  003D84  EE10 F006          	lfsr	1,6
   313  003D88                     copy_data0:
   314  003D88  0009               	tblrd		*+
   315  003D8A  CFF5 FFEE          	movff	tablat,postinc0
   316  003D8E  50E5               	movf	postdec1,w,c
   317  003D90  50E1               	movf	fsr1l,w,c
   318  003D92  E1FA               	bnz	copy_data0
   319                           
   320                           ; Initialize objects allocated to COMRAM (5 bytes)
   321                           ; load TBLPTR registers with __pidataCOMRAM
   322  003D94  0E6A               	movlw	low __pidataCOMRAM
   323  003D96  6EF6               	movwf	tblptrl,c
   324  003D98  0E43               	movlw	high __pidataCOMRAM
   325  003D9A  6EF7               	movwf	tblptrh,c
   326  003D9C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   327  003D9E  6EF8               	movwf	tblptru,c
   328  003DA0  EE00  F048         	lfsr	0,__pdataCOMRAM
   329  003DA4  EE10 F005          	lfsr	1,5
   330  003DA8                     copy_data1:
   331  003DA8  0009               	tblrd		*+
   332  003DAA  CFF5 FFEE          	movff	tablat,postinc0
   333  003DAE  50E5               	movf	postdec1,w,c
   334  003DB0  50E1               	movf	fsr1l,w,c
   335  003DB2  E1FA               	bnz	copy_data1
   336                           
   337                           ; Clear objects allocated to BANK4 (252 bytes)
   338  003DB4  EE04  F000         	lfsr	0,__pbssBANK4
   339  003DB8  0EFC               	movlw	252
   340  003DBA                     clear_0:
   341  003DBA  6AEE               	clrf	postinc0,c
   342  003DBC  06E8               	decf	wreg,f,c
   343  003DBE  E1FD               	bnz	clear_0
   344                           
   345                           ; Clear objects allocated to BANK3 (178 bytes)
   346  003DC0  EE03  F000         	lfsr	0,__pbssBANK3
   347  003DC4  0EB2               	movlw	178
   348  003DC6                     clear_1:
   349  003DC6  6AEE               	clrf	postinc0,c
   350  003DC8  06E8               	decf	wreg,f,c
   351  003DCA  E1FD               	bnz	clear_1
   352                           
   353                           ; Clear objects allocated to BANK2 (178 bytes)
   354  003DCC  EE02  F000         	lfsr	0,__pbssBANK2
   355  003DD0  0EB2               	movlw	178
   356  003DD2                     clear_2:
   357  003DD2  6AEE               	clrf	postinc0,c
   358  003DD4  06E8               	decf	wreg,f,c
   359  003DD6  E1FD               	bnz	clear_2
   360                           
   361                           ; Clear objects allocated to BANK1 (178 bytes)
   362  003DD8  EE01  F000         	lfsr	0,__pbssBANK1
   363  003DDC  0EB2               	movlw	178
   364  003DDE                     clear_3:
   365  003DDE  6AEE               	clrf	postinc0,c
   366  003DE0  06E8               	decf	wreg,f,c
   367  003DE2  E1FD               	bnz	clear_3
   368                           
   369                           ; Clear objects allocated to BANK0 (86 bytes)
   370  003DE4  EE00  F060         	lfsr	0,__pbssBANK0
   371  003DE8  0E56               	movlw	86
   372  003DEA                     clear_4:
   373  003DEA  6AEE               	clrf	postinc0,c
   374  003DEC  06E8               	decf	wreg,f,c
   375  003DEE  E1FD               	bnz	clear_4
   376                           
   377                           ; Clear objects allocated to COMRAM (34 bytes)
   378  003DF0  EE00  F026         	lfsr	0,__pbssCOMRAM
   379  003DF4  0E22               	movlw	34
   380  003DF6                     clear_5:
   381  003DF6  6AEE               	clrf	postinc0,c
   382  003DF8  06E8               	decf	wreg,f,c
   383  003DFA  E1FD               	bnz	clear_5
   384  003DFC                     end_of_initialization:
   385                           	opt stack 0
   386  003DFC                     __end_of__initialization:
   387                           	opt stack 0
   388  003DFC  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   389  003DFE  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   390  003E00  0E00               	movlw	low (__Lmediumconst shr (0+16))
   391  003E02  6EF8               	movwf	tblptru,c
   392  003E04  0100               	movlb	0
   393  003E06  EF85  F01F         	goto	_main	;jump to C main() function
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           postdec1	equ	0xFE5
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	bssCOMRAM
   404  000026                     __pbssCOMRAM:
   405                           	opt stack 0
   406  000026                     _Mountain_Delay_Counter:
   407                           	opt stack 0
   408  000026                     	ds	2
   409  000028                     _Red_Led_Counter:
   410                           	opt stack 0
   411  000028                     	ds	2
   412  00002A                     _Green_Led_Counter:
   413                           	opt stack 0
   414  00002A                     	ds	2
   415  00002C                     _Led1_Counter:
   416                           	opt stack 0
   417  00002C                     	ds	2
   418  00002E                     _Switch_Moutain:
   419                           	opt stack 0
   420  00002E                     	ds	1
   421  00002F                     _Switch_Junction:
   422                           	opt stack 0
   423  00002F                     	ds	1
   424  000030                     _Button_Contact_Counter_RF:
   425                           	opt stack 0
   426  000030                     	ds	1
   427  000031                     _Button_Contact_Counter_RB:
   428                           	opt stack 0
   429  000031                     	ds	1
   430  000032                     _Button_Contact_Counter_LF:
   431                           	opt stack 0
   432  000032                     	ds	1
   433  000033                     _Button_Contact_Counter_LB:
   434                           	opt stack 0
   435  000033                     	ds	1
   436  000034                     _Button_Contact_Counter_Middle:
   437                           	opt stack 0
   438  000034                     	ds	1
   439  000035                     _Button_Contact_Counter_Stop:
   440                           	opt stack 0
   441  000035                     	ds	1
   442  000036                     _Button_Contact_Counter_Start:
   443                           	opt stack 0
   444  000036                     	ds	1
   445  000037                     _Reed_Contact_RMD_Counter:
   446                           	opt stack 0
   447  000037                     	ds	1
   448  000038                     _Reed_Contact_RMU_Counter:
   449                           	opt stack 0
   450  000038                     	ds	1
   451  000039                     _Reed_Contact_LMD_Counter:
   452                           	opt stack 0
   453  000039                     	ds	1
   454  00003A                     _Reed_Contact_LMU_Counter:
   455                           	opt stack 0
   456  00003A                     	ds	1
   457  00003B                     _Reed_Contact_RB_Counter:
   458                           	opt stack 0
   459  00003B                     	ds	1
   460  00003C                     _Reed_Contact_RF_Counter:
   461                           	opt stack 0
   462  00003C                     	ds	1
   463  00003D                     _Reed_Contact_LB_Counter:
   464                           	opt stack 0
   465  00003D                     	ds	1
   466  00003E                     _Reed_Contact_LF_Counter:
   467                           	opt stack 0
   468  00003E                     	ds	1
   469  00003F                     _eusart1RxCount:
   470                           	opt stack 0
   471  00003F                     	ds	1
   472  000040                     _eusart1RxTail:
   473                           	opt stack 0
   474  000040                     	ds	1
   475  000041                     _eusart1RxHead:
   476                           	opt stack 0
   477  000041                     	ds	1
   478  000042                     _eusart1TxBufferRemaining:
   479                           	opt stack 0
   480  000042                     	ds	1
   481  000043                     _eusart1TxTail:
   482                           	opt stack 0
   483  000043                     	ds	1
   484  000044                     _eusart1TxHead:
   485                           	opt stack 0
   486  000044                     	ds	1
   487  000045                     _Switch_Adjust_LF:
   488                           	opt stack 0
   489  000045                     	ds	1
   490  000046                     _Switch_Adjust_LB:
   491                           	opt stack 0
   492  000046                     	ds	1
   493  000047                     _Switch_Activate_Controls:
   494                           	opt stack 0
   495  000047                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	dataCOMRAM
   506  000048                     __pdataCOMRAM:
   507                           	opt stack 0
   508  000048                     Right_Mountain_From_The_Left@Return_Val:
   509                           	opt stack 0
   510  000048                     	ds	1
   511  000049                     Left_Mountain_From_The_Left@Return_Val:
   512                           	opt stack 0
   513  000049                     	ds	1
   514  00004A                     Left_Mountain_From_The_Right@Return_Val:
   515                           	opt stack 0
   516  00004A                     	ds	1
   517  00004B                     Right_Mountain_From_The_Right@Return_Val:
   518                           	opt stack 0
   519  00004B                     	ds	1
   520  00004C                     Junction@Return_Val:
   521                           	opt stack 0
   522  00004C                     	ds	1
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	bssBANK0
   533  000060                     __pbssBANK0:
   534                           	opt stack 0
   535  000060                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   536                           	opt stack 0
   537  000060                     	ds	2
   538  000062                     Train_Move_Right_Start@Train_Move_Wait_Time:
   539                           	opt stack 0
   540  000062                     	ds	2
   541  000064                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   542                           	opt stack 0
   543  000064                     	ds	2
   544  000066                     Train_Move_Left_Start@Train_Move_Wait_Time:
   545                           	opt stack 0
   546  000066                     	ds	2
   547  000068                     _Train_Move_Pwm_Fast_Count:
   548                           	opt stack 0
   549  000068                     	ds	2
   550  00006A                     Junction@Junction_Switch_Time:
   551                           	opt stack 0
   552  00006A                     	ds	2
   553  00006C                     _DelayCounter:
   554                           	opt stack 0
   555  00006C                     	ds	2
   556  00006E                     _Diag_Comm2:
   557                           	opt stack 0
   558  00006E                     	ds	2
   559  000070                     _Pcomm_List2:
   560                           	opt stack 0
   561  000070                     	ds	2
   562  000072                     _Pcomm_List:
   563                           	opt stack 0
   564  000072                     	ds	2
   565  000074                     _Diag_Comm:
   566                           	opt stack 0
   567  000074                     	ds	2
   568  000076                     _pLen:
   569                           	opt stack 0
   570  000076                     	ds	2
   571  000078                     _pData:
   572                           	opt stack 0
   573  000078                     	ds	2
   574  00007A                     _Activate_Controls_Counter:
   575                           	opt stack 0
   576  00007A                     	ds	2
   577  00007C                     _Adjust_Counter:
   578                           	opt stack 0
   579  00007C                     	ds	2
   580  00007E                     _Train_Move_Pwm_Count:
   581                           	opt stack 0
   582  00007E                     	ds	2
   583  000080                     _Switch_Train_Move:
   584                           	opt stack 0
   585  000080                     	ds	1
   586  000081                     _TrSwitch:
   587                           	opt stack 0
   588  000081                     	ds	1
   589  000082                     _Message_To_Translate:
   590                           	opt stack 0
   591  000082                     	ds	1
   592  000083                     _RxSwitch:
   593                           	opt stack 0
   594  000083                     	ds	1
   595  000084                     _Received_Data:
   596                           	opt stack 0
   597  000084                     	ds	1
   598  000085                     _Stop_Program:
   599                           	opt stack 0
   600  000085                     	ds	1
   601  000086                     _Switch_Train_Path:
   602                           	opt stack 0
   603  000086                     	ds	1
   604  000087                     _Switch_Adjust_RF:
   605                           	opt stack 0
   606  000087                     	ds	1
   607  000088                     _Switch_Adjust_RB:
   608                           	opt stack 0
   609  000088                     	ds	1
   610  000089                     _Switch_Program:
   611                           	opt stack 0
   612  000089                     	ds	1
   613  00008A                     _Switch_Init:
   614                           	opt stack 0
   615  00008A                     	ds	1
   616  00008B                     _Update_State_Machine:
   617                           	opt stack 0
   618  00008B                     	ds	1
   619  00008C                     _Comm_List:
   620                           	opt stack 0
   621  00008C                     	ds	32
   622  0000AC                     _Data:
   623                           	opt stack 0
   624  0000AC                     	ds	10
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	dataBANK0
   635  0000DC                     __pdataBANK0:
   636                           	opt stack 0
   637  0000DC                     Train_Move_Right_Brake@Return_Val:
   638                           	opt stack 0
   639  0000DC                     	ds	1
   640  0000DD                     Train_Move_Right_Start@Return_Val:
   641                           	opt stack 0
   642  0000DD                     	ds	1
   643  0000DE                     Train_Move_Left_Brake@Return_Val:
   644                           	opt stack 0
   645  0000DE                     	ds	1
   646  0000DF                     Train_Move_Left_Start@Return_Val:
   647                           	opt stack 0
   648  0000DF                     	ds	1
   649  0000E0                     Train_Path@Return_Val:
   650                           	opt stack 0
   651  0000E0                     	ds	1
   652  0000E1                     _Switch_Main:
   653                           	opt stack 0
   654  0000E1                     	ds	1
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           
   664                           	psect	bssBANK1
   665  000100                     __pbssBANK1:
   666                           	opt stack 0
   667  000100                     _API:
   668                           	opt stack 0
   669  000100                     	ds	178
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1l	equ	0xFE1
   678                           
   679                           	psect	bssBANK2
   680  000200                     __pbssBANK2:
   681                           	opt stack 0
   682  000200                     _API_RW:
   683                           	opt stack 0
   684  000200                     	ds	178
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           postdec1	equ	0xFE5
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssBANK3
   695  000300                     __pbssBANK3:
   696                           	opt stack 0
   697  000300                     _API_EEPROM:
   698                           	opt stack 0
   699  000300                     	ds	178
   700                           tblptru	equ	0xFF8
   701                           tblptrh	equ	0xFF7
   702                           tblptrl	equ	0xFF6
   703                           tablat	equ	0xFF5
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           postdec1	equ	0xFE5
   707                           fsr1l	equ	0xFE1
   708                           
   709                           	psect	bssBANK4
   710  000400                     __pbssBANK4:
   711                           	opt stack 0
   712  000400                     _eusart1RxBuffer:
   713                           	opt stack 0
   714  000400                     	ds	126
   715  00047E                     _eusart1TxBuffer:
   716                           	opt stack 0
   717  00047E                     	ds	126
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           tblptrl	equ	0xFF6
   721                           tablat	equ	0xFF5
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1l	equ	0xFE1
   726                           
   727                           	psect	cstackBANK0
   728  0000B6                     __pcstackBANK0:
   729                           	opt stack 0
   730  0000B6                     ??_tc_low:
   731                           
   732                           ; 1 bytes @ 0x0
   733  0000B6                     	ds	21
   734  0000CB                     ?_printf:
   735                           	opt stack 0
   736  0000CB                     Right_Mountain_From_The_Right@rc:
   737                           	opt stack 0
   738  0000CB                     Left_Mountain_From_The_Right@rc:
   739                           	opt stack 0
   740  0000CB                     Left_Mountain_From_The_Left@rc:
   741                           	opt stack 0
   742  0000CB                     Right_Mountain_From_The_Left@rc:
   743                           	opt stack 0
   744  0000CB                     printf@f:
   745                           	opt stack 0
   746  0000CB                     _Train_Move_Left_Start$2178:
   747                           	opt stack 0
   748  0000CB                     _Train_Move_Left_Brake$2179:
   749                           	opt stack 0
   750  0000CB                     _Train_Move_Right_Start$2180:
   751                           	opt stack 0
   752  0000CB                     _Train_Move_Right_Brake$2181:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x15
   756  0000CB                     	ds	2
   757  0000CD                     Train_Path@To:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x17
   761  0000CD                     	ds	1
   762  0000CE                     Train_Path@From:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x18
   766  0000CE                     	ds	1
   767  0000CF                     ??_Update_StateMchn:
   768                           
   769                           ; 1 bytes @ 0x19
   770  0000CF                     	ds	2
   771  0000D1                     printf@ap:
   772                           	opt stack 0
   773  0000D1                     _Update_StateMchn$2176:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x1B
   777  0000D1                     	ds	2
   778  0000D3                     printf@flag:
   779                           	opt stack 0
   780  0000D3                     _Update_StateMchn$2177:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x1D
   784  0000D3                     	ds	1
   785  0000D4                     printf@prec:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1E
   789  0000D4                     	ds	1
   790  0000D5                     printf@val:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x1F
   794  0000D5                     	ds	2
   795  0000D7                     printf@c:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x21
   799  0000D7                     	ds	1
   800  0000D8                     ??_READxRECEIVEDxMESSAGE:
   801  0000D8                     SendMessage@index:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x22
   805  0000D8                     	ds	2
   806  0000DA                     SendMessage@value:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x24
   810  0000DA                     	ds	2
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820                           	psect	cstackCOMRAM
   821  000001                     __pcstackCOMRAM:
   822                           	opt stack 0
   823  000001                     ??_tc_high:
   824  000001                     
   825                           ; 1 bytes @ 0x0
   826  000001                     	ds	18
   827  000013                     ??_isdigit:
   828  000013                     ?_GETxAPIxVAL:
   829                           	opt stack 0
   830  000013                     ?_GETxAPIxRW:
   831                           	opt stack 0
   832  000013                     ?_Eeprom_Read:
   833                           	opt stack 0
   834  000013                     ?___wmul:
   835                           	opt stack 0
   836  000013                     ?___lwdiv:
   837                           	opt stack 0
   838  000013                     EUSART1_Read@readValue:
   839                           	opt stack 0
   840  000013                     putch@data:
   841                           	opt stack 0
   842  000013                     Green_Led@Operation:
   843                           	opt stack 0
   844  000013                     Red_Led@Operation:
   845                           	opt stack 0
   846  000013                     EUSART1_Initialize@baud_rate:
   847                           	opt stack 0
   848  000013                     SENDxMESSAGE@index:
   849                           	opt stack 0
   850  000013                     APIxInitialize@i:
   851                           	opt stack 0
   852  000013                     GETxAPIxRW@index:
   853                           	opt stack 0
   854  000013                     GETxAPIxVAL@index:
   855                           	opt stack 0
   856  000013                     Eeprom_Read@Location:
   857                           	opt stack 0
   858  000013                     Eeprom_Store@Location:
   859                           	opt stack 0
   860  000013                     ___wmul@multiplier:
   861                           	opt stack 0
   862  000013                     ___lwdiv@dividend:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x12
   866  000013                     	ds	1
   867  000014                     _isdigit$1833:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x13
   871  000014                     	ds	1
   872  000015                     isdigit@c:
   873                           	opt stack 0
   874  000015                     SENDxMESSAGE@value:
   875                           	opt stack 0
   876  000015                     SETxAPIxVALxNoxRET@index:
   877                           	opt stack 0
   878  000015                     Eeprom_Read@Location_Low_Byte:
   879                           	opt stack 0
   880  000015                     Eeprom_Store@Value:
   881                           	opt stack 0
   882  000015                     SetDCPWM1@dutycycle:
   883                           	opt stack 0
   884  000015                     ___wmul@multiplicand:
   885                           	opt stack 0
   886  000015                     ___lwdiv@divisor:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x14
   890  000015                     	ds	2
   891  000017                     ??_SENDxMESSAGE:
   892  000017                     ??_SetDCPWM1:
   893  000017                     ___lwdiv@counter:
   894                           	opt stack 0
   895  000017                     SETxAPIxVALxNoxRET@value:
   896                           	opt stack 0
   897  000017                     Eeprom_Read@Location_High_Byte:
   898                           	opt stack 0
   899  000017                     Eeprom_Store@Location_Low_Byte:
   900                           	opt stack 0
   901  000017                     ___wmul@product:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x16
   905  000017                     	ds	1
   906  000018                     ___lwdiv@quotient:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x17
   910  000018                     	ds	1
   911  000019                     ?_atoi:
   912                           	opt stack 0
   913  000019                     SETxAPIxVAL@index:
   914                           	opt stack 0
   915  000019                     Eeprom_Read@Return_Data:
   916                           	opt stack 0
   917  000019                     Eeprom_Store@Location_High_Byte:
   918                           	opt stack 0
   919  000019                     SetDCPWM1@DCycle:
   920                           	opt stack 0
   921  000019                     atoi@s:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x18
   925  000019                     	ds	1
   926  00001A                     ?___lwmod:
   927                           	opt stack 0
   928  00001A                     ___lwmod@dividend:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x19
   932  00001A                     	ds	1
   933  00001B                     ??_EEPROMxREAD:
   934  00001B                     ??_EEPROMxSTORE:
   935  00001B                     ??_atoi:
   936  00001B                     SETxAPIxVAL@value:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x1A
   940  00001B                     	ds	1
   941  00001C                     ___lwmod@divisor:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x1B
   945  00001C                     	ds	1
   946  00001D                     atoi@sign:
   947                           	opt stack 0
   948  00001D                     EEPROMxREAD@Data:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x1C
   952  00001D                     	ds	1
   953  00001E                     ___lwmod@counter:
   954                           	opt stack 0
   955  00001E                     atoi@a:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x1D
   959  00001E                     	ds	1
   960  00001F                     ??_Debounce_Inputs:
   961  00001F                     ??_printf:
   962  00001F                     EEPROMxREAD@i:
   963                           	opt stack 0
   964  00001F                     Junction@Straight_Bend:
   965                           	opt stack 0
   966  00001F                     SETxPWM@speed:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x1E
   970  00001F                     	ds	1
   971  000020                     ??_DIAGNOSTICxTOxPC:
   972  000020                     Junction@Junction_Left_Right:
   973                           	opt stack 0
   974  000020                     TranslateMessage@Value:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x1F
   978  000020                     	ds	1
   979  000021                     SETxPWM@direction:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x20
   983  000021                     	ds	1
   984  000022                     ??_SETxPWM:
   985  000022                     TranslateMessage@Index:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x21
   989  000022                     	ds	1
   990  000023                     EEPROMxSTORE@api_list:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x22
   994  000023                     	ds	1
   995  000024                     EEPROMxSTORE@i:
   996                           	opt stack 0
   997  000024                     SETxPWM@pwm_speed:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x23
  1001  000024                     	ds	2
  1002  000026                     tblptru	equ	0xFF8
  1003                           tblptrh	equ	0xFF7
  1004                           tblptrl	equ	0xFF6
  1005                           tablat	equ	0xFF5
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           postdec1	equ	0xFE5
  1009                           fsr1l	equ	0xFE1
  1010                           
  1011                           ; 1 bytes @ 0x25
  1012 ;;
  1013 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1014 ;;
  1015 ;; *************** function _main *****************
  1016 ;; Defined at:
  1017 ;;		line 106 in file "../Main.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0
  1032 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1034 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1035 ;;Total ram usage:        0 bytes
  1036 ;; Hardware stack levels required when called:    9
  1037 ;; This function calls:
  1038 ;;		_APIxInitialize
  1039 ;;		_DIAGNOSTICxTOxPC
  1040 ;;		_EEPROMxREAD
  1041 ;;		_EUSART1_Initialize
  1042 ;;		_Init_Pwm
  1043 ;;		_Init_Timers
  1044 ;;		_READxRECEIVEDxMESSAGE
  1045 ;;		_Update_StateMchn
  1046 ;; This function is called by:
  1047 ;;		Startup code after reset
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text0
  1052  003F0A                     __ptext0:
  1053                           	opt stack 0
  1054  003F0A                     _main:
  1055                           	opt stack 22
  1056                           
  1057                           ;Main.c: 108: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
  1058                           
  1059                           ;incstack = 0
  1060  003F0A  6892               	setf	3986,c	;volatile
  1061  003F0C  6893               	setf	3987,c	;volatile
  1062  003F0E  6894               	setf	3988,c	;volatile
  1063  003F10  6895               	setf	3989,c	;volatile
  1064  003F12  6896               	setf	3990,c	;volatile
  1065                           
  1066                           ;Main.c: 109: ADCON1=0x0F;
  1067  003F14  0E0F               	movlw	15
  1068  003F16  6EC1               	movwf	4033,c	;volatile
  1069                           
  1070                           ;Main.c: 110: CMCON=0x07;
  1071  003F18  0E07               	movlw	7
  1072  003F1A  6EB4               	movwf	4020,c	;volatile
  1073                           
  1074                           ;Main.c: 111: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
  1075  003F1C  9892               	bcf	3986,4,c	;volatile
  1076  003F1E  9A95               	bcf	3989,5,c	;volatile
  1077  003F20  9C95               	bcf	3989,6,c	;volatile
  1078                           
  1079                           ;Main.c: 112: PORTAbits.RA4 = 0;
  1080  003F22  9880               	bcf	3968,4,c	;volatile
  1081                           
  1082                           ;Main.c: 113: PORTDbits.RD6 = 0;
  1083  003F24  9C83               	bcf	3971,6,c	;volatile
  1084                           
  1085                           ;Main.c: 114: PORTDbits.RD5 = 0;
  1086  003F26  9A83               	bcf	3971,5,c	;volatile
  1087                           
  1088                           ;Main.c: 116: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
  1089  003F28  9092               	bcf	3986,0,c	;volatile
  1090  003F2A  9292               	bcf	3986,1,c	;volatile
  1091  003F2C  9492               	bcf	3986,2,c	;volatile
  1092  003F2E  9692               	bcf	3986,3,c	;volatile
  1093                           
  1094                           ;Main.c: 117: PORTAbits.RA3 = 0;
  1095  003F30  9680               	bcf	3968,3,c	;volatile
  1096                           
  1097                           ;Main.c: 118: PORTAbits.RA2 = 0;
  1098  003F32  9480               	bcf	3968,2,c	;volatile
  1099                           
  1100                           ;Main.c: 119: PORTAbits.RA1 = 0;
  1101  003F34  9280               	bcf	3968,1,c	;volatile
  1102                           
  1103                           ;Main.c: 120: PORTAbits.RA0 = 0;
  1104  003F36  9080               	bcf	3968,0,c	;volatile
  1105                           
  1106                           ;Main.c: 122: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
  1107  003F38  8495               	bsf	3989,2,c	;volatile
  1108  003F3A  8695               	bsf	3989,3,c	;volatile
  1109  003F3C  8095               	bsf	3989,0,c	;volatile
  1110  003F3E  8295               	bsf	3989,1,c	;volatile
  1111  003F40  8294               	bsf	3988,1,c	;volatile
  1112  003F42  8895               	bsf	3989,4,c	;volatile
  1113  003F44  8096               	bsf	3990,0,c	;volatile
  1114  003F46  8296               	bsf	3990,1,c	;volatile
  1115                           
  1116                           ;Main.c: 123: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
  1117  003F48  8093               	bsf	3987,0,c	;volatile
  1118  003F4A  8293               	bsf	3987,1,c	;volatile
  1119  003F4C  8493               	bsf	3987,2,c	;volatile
  1120  003F4E  8693               	bsf	3987,3,c	;volatile
  1121  003F50  8893               	bsf	3987,4,c	;volatile
  1122  003F52  8A93               	bsf	3987,5,c	;volatile
  1123  003F54  8E95               	bsf	3989,7,c	;volatile
  1124                           
  1125                           ;Main.c: 124: APIxInitialize();
  1126  003F56  ECA9  F00E         	call	_APIxInitialize	;wreg free
  1127                           
  1128                           ;Main.c: 125: Init_Pwm();
  1129  003F5A  EC3E  F021         	call	_Init_Pwm	;wreg free
  1130                           
  1131                           ;Main.c: 126: Init_Timers();
  1132  003F5E  ECA0  F021         	call	_Init_Timers	;wreg free
  1133                           
  1134                           ;Main.c: 127: EUSART1_Initialize();
  1135  003F62  EC77  F020         	call	_EUSART1_Initialize	;wreg free
  1136                           
  1137                           ;Main.c: 128: EEPROMxREAD();
  1138  003F66  EC6D  F01E         	call	_EEPROMxREAD	;wreg free
  1139  003F6A                     
  1140                           ;Main.c: 131: {
  1141                           ;Main.c: 132: if (1 == Update_State_Machine)
  1142  003F6A  0100               	movlb	0	; () banked
  1143  003F6C  058B               	decf	_Update_State_Machine& (0+255),w,b	;volatile
  1144  003F6E  A4D8               	btfss	status,2,c
  1145  003F70  D004               	goto	l88
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;Main.c: 133: {
  1149                           ;Main.c: 134: Update_State_Machine = 0;
  1150  003F72  0E00               	movlw	0
  1151  003F74  6F8B               	movwf	_Update_State_Machine& (0+255),b	;volatile
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;Main.c: 135: Update_StateMchn();
  1155  003F76  EC39  F004         	call	_Update_StateMchn	;wreg free
  1156  003F7A                     l88:
  1157                           
  1158                           ;Main.c: 136: }
  1159                           ;Main.c: 138: READxRECEIVEDxMESSAGE();
  1160  003F7A  ECA5  F01B         	call	_READxRECEIVEDxMESSAGE	;wreg free
  1161                           
  1162                           ;Main.c: 139: DIAGNOSTICxTOxPC();
  1163  003F7E  EC14  F013         	call	_DIAGNOSTICxTOxPC	;wreg free
  1164  003F82  D7F3               	goto	l87
  1165  003F84                     __end_of_main:
  1166                           	opt stack 0
  1167                           tblptru	equ	0xFF8
  1168                           tblptrh	equ	0xFF7
  1169                           tblptrl	equ	0xFF6
  1170                           tablat	equ	0xFF5
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           fsr1l	equ	0xFE1
  1175                           status	equ	0xFD8
  1176                           
  1177 ;; *************** function _Update_StateMchn *****************
  1178 ;; Defined at:
  1179 ;;		line 41 in file "../State_Mchn.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;		None
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1193 ;;      Params:         0       0       0       0       0       0       0       0       0
  1194 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1195 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1196 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1197 ;;Total ram usage:        5 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    8
  1200 ;; This function calls:
  1201 ;;		_Debounce_Inputs
  1202 ;;		_EEPROMxSTORE
  1203 ;;		_GETxAPIxVAL
  1204 ;;		_Green_Led
  1205 ;;		_Junction
  1206 ;;		_Red_Led
  1207 ;;		_SETxAPIxVAL
  1208 ;;		_SETxAPIxVALxNoxRET
  1209 ;;		_SETxPWM
  1210 ;;		_Train_Path
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text1
  1217  000872                     __ptext1:
  1218                           	opt stack 0
  1219  000872                     _Update_StateMchn:
  1220                           	opt stack 22
  1221                           
  1222                           ;State_Mchn.c: 43: if (GETxAPIxVAL(72)){
  1223                           
  1224                           ;incstack = 0
  1225  000872  0E00               	movlw	0
  1226  000874  6E14               	movwf	GETxAPIxVAL@index+1,c
  1227  000876  0E48               	movlw	72
  1228  000878  6E13               	movwf	GETxAPIxVAL@index,c
  1229  00087A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1230  00087E  5013               	movf	?_GETxAPIxVAL,w,c
  1231  000880  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1232  000882  B4D8               	btfsc	status,2,c
  1233  000884  D00C               	goto	l178
  1234                           
  1235                           ;State_Mchn.c: 44: SETxAPIxVAL(72, 0);
  1236  000886  0E00               	movlw	0
  1237  000888  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1238  00088A  0E48               	movlw	72
  1239  00088C  6E19               	movwf	SETxAPIxVAL@index,c
  1240  00088E  0E00               	movlw	0
  1241  000890  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1242  000892  0E00               	movlw	0
  1243  000894  6E1B               	movwf	SETxAPIxVAL@value,c
  1244  000896  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1245  00089A  00FF               	reset		;# 
  1246                           
  1247                           ;State_Mchn.c: 46: }
  1248  00089C  D016               	goto	l180
  1249  00089E                     l178:
  1250                           
  1251                           ;State_Mchn.c: 47: else if (GETxAPIxVAL(87)){
  1252  00089E  0E00               	movlw	0
  1253  0008A0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1254  0008A2  0E57               	movlw	87
  1255  0008A4  6E13               	movwf	GETxAPIxVAL@index,c
  1256  0008A6  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1257  0008AA  5013               	movf	?_GETxAPIxVAL,w,c
  1258  0008AC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1259  0008AE  B4D8               	btfsc	status,2,c
  1260  0008B0  D00C               	goto	l180
  1261                           
  1262                           ;State_Mchn.c: 48: EEPROMxSTORE();
  1263  0008B2  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  1264                           
  1265                           ;State_Mchn.c: 49: SETxAPIxVAL(87, 0);
  1266  0008B6  0E00               	movlw	0
  1267  0008B8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1268  0008BA  0E57               	movlw	87
  1269  0008BC  6E19               	movwf	SETxAPIxVAL@index,c
  1270  0008BE  0E00               	movlw	0
  1271  0008C0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1272  0008C2  0E00               	movlw	0
  1273  0008C4  6E1B               	movwf	SETxAPIxVAL@value,c
  1274  0008C6  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1275  0008CA                     l180:
  1276                           
  1277                           ;State_Mchn.c: 50: }
  1278                           ;State_Mchn.c: 52: Debounce_Inputs();
  1279  0008CA  ECE6  F00A         	call	_Debounce_Inputs	;wreg free
  1280                           
  1281                           ;State_Mchn.c: 54: switch (Switch_Main)
  1282  0008CE  EFC7  F00A         	goto	l181
  1283  0008D2                     
  1284                           ;State_Mchn.c: 57: if (GETxAPIxVAL(74)){
  1285  0008D2  0E00               	movlw	0
  1286  0008D4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1287  0008D6  0E4A               	movlw	74
  1288  0008D8  6E13               	movwf	GETxAPIxVAL@index,c
  1289  0008DA  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1290  0008DE  5013               	movf	?_GETxAPIxVAL,w,c
  1291  0008E0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1292  0008E2  B4D8               	btfsc	status,2,c
  1293  0008E4  D015               	goto	l183
  1294                           
  1295                           ;State_Mchn.c: 58: if(Junction(0, 1) == 0){
  1296  0008E6  0E01               	movlw	1
  1297  0008E8  6E1F               	movwf	Junction@Straight_Bend,c
  1298  0008EA  0E00               	movlw	0
  1299  0008EC  EC4C  F015         	call	_Junction
  1300  0008F0  0900               	iorlw	0
  1301  0008F2  A4D8               	btfss	status,2,c
  1302  0008F4  EFD3  F00A         	goto	l304
  1303                           
  1304                           ;State_Mchn.c: 59: SETxAPIxVALxNoxRET(74, 0);
  1305  0008F8  0E00               	movlw	0
  1306  0008FA  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1307  0008FC  0E4A               	movlw	74
  1308  0008FE  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1309  000900  0E00               	movlw	0
  1310  000902  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1311  000904  0E00               	movlw	0
  1312  000906  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1313  000908  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1314                           
  1315                           ;State_Mchn.c: 60: }
  1316                           ;State_Mchn.c: 61: }
  1317  00090C  EFD3  F00A         	goto	l304
  1318  000910                     l183:
  1319                           
  1320                           ;State_Mchn.c: 62: else if (GETxAPIxVAL(73)){
  1321  000910  0E00               	movlw	0
  1322  000912  6E14               	movwf	GETxAPIxVAL@index+1,c
  1323  000914  0E49               	movlw	73
  1324  000916  6E13               	movwf	GETxAPIxVAL@index,c
  1325  000918  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1326  00091C  5013               	movf	?_GETxAPIxVAL,w,c
  1327  00091E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1328  000920  B4D8               	btfsc	status,2,c
  1329  000922  D015               	goto	l186
  1330                           
  1331                           ;State_Mchn.c: 63: if(Junction(0, 0) == 0){
  1332  000924  0E00               	movlw	0
  1333  000926  6E1F               	movwf	Junction@Straight_Bend,c
  1334  000928  0E00               	movlw	0
  1335  00092A  EC4C  F015         	call	_Junction
  1336  00092E  0900               	iorlw	0
  1337  000930  A4D8               	btfss	status,2,c
  1338  000932  EFD3  F00A         	goto	l304
  1339                           
  1340                           ;State_Mchn.c: 64: SETxAPIxVALxNoxRET(73, 0);
  1341  000936  0E00               	movlw	0
  1342  000938  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1343  00093A  0E49               	movlw	73
  1344  00093C  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1345  00093E  0E00               	movlw	0
  1346  000940  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1347  000942  0E00               	movlw	0
  1348  000944  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1349  000946  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1350                           
  1351                           ;State_Mchn.c: 65: }
  1352                           ;State_Mchn.c: 66: }
  1353  00094A  EFD3  F00A         	goto	l304
  1354  00094E                     l186:
  1355                           
  1356                           ;State_Mchn.c: 67: else if (GETxAPIxVAL(76)){
  1357  00094E  0E00               	movlw	0
  1358  000950  6E14               	movwf	GETxAPIxVAL@index+1,c
  1359  000952  0E4C               	movlw	76
  1360  000954  6E13               	movwf	GETxAPIxVAL@index,c
  1361  000956  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1362  00095A  5013               	movf	?_GETxAPIxVAL,w,c
  1363  00095C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1364  00095E  B4D8               	btfsc	status,2,c
  1365  000960  D015               	goto	l189
  1366                           
  1367                           ;State_Mchn.c: 68: if(Junction(1, 1) == 0){
  1368  000962  0E01               	movlw	1
  1369  000964  6E1F               	movwf	Junction@Straight_Bend,c
  1370  000966  0E01               	movlw	1
  1371  000968  EC4C  F015         	call	_Junction
  1372  00096C  0900               	iorlw	0
  1373  00096E  A4D8               	btfss	status,2,c
  1374  000970  EFD3  F00A         	goto	l304
  1375                           
  1376                           ;State_Mchn.c: 69: SETxAPIxVALxNoxRET(76, 0);
  1377  000974  0E00               	movlw	0
  1378  000976  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1379  000978  0E4C               	movlw	76
  1380  00097A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1381  00097C  0E00               	movlw	0
  1382  00097E  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1383  000980  0E00               	movlw	0
  1384  000982  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1385  000984  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1386                           
  1387                           ;State_Mchn.c: 70: }
  1388                           ;State_Mchn.c: 71: }
  1389  000988  EFD3  F00A         	goto	l304
  1390  00098C                     l189:
  1391                           
  1392                           ;State_Mchn.c: 72: else if (GETxAPIxVAL(75)){
  1393  00098C  0E00               	movlw	0
  1394  00098E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1395  000990  0E4B               	movlw	75
  1396  000992  6E13               	movwf	GETxAPIxVAL@index,c
  1397  000994  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1398  000998  5013               	movf	?_GETxAPIxVAL,w,c
  1399  00099A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1400  00099C  B4D8               	btfsc	status,2,c
  1401  00099E  D015               	goto	l192
  1402                           
  1403                           ;State_Mchn.c: 73: if(Junction(1, 0) == 0){
  1404  0009A0  0E00               	movlw	0
  1405  0009A2  6E1F               	movwf	Junction@Straight_Bend,c
  1406  0009A4  0E01               	movlw	1
  1407  0009A6  EC4C  F015         	call	_Junction
  1408  0009AA  0900               	iorlw	0
  1409  0009AC  A4D8               	btfss	status,2,c
  1410  0009AE  EFD3  F00A         	goto	l304
  1411                           
  1412                           ;State_Mchn.c: 74: SETxAPIxVALxNoxRET(75, 0);
  1413  0009B2  0E00               	movlw	0
  1414  0009B4  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1415  0009B6  0E4B               	movlw	75
  1416  0009B8  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1417  0009BA  0E00               	movlw	0
  1418  0009BC  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1419  0009BE  0E00               	movlw	0
  1420  0009C0  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1421  0009C2  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1422                           
  1423                           ;State_Mchn.c: 75: }
  1424                           ;State_Mchn.c: 76: }
  1425  0009C6  EFD3  F00A         	goto	l304
  1426  0009CA                     l192:
  1427                           
  1428                           ;State_Mchn.c: 77: else if (GETxAPIxVAL(77)){
  1429  0009CA  0E00               	movlw	0
  1430  0009CC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1431  0009CE  0E4D               	movlw	77
  1432  0009D0  6E13               	movwf	GETxAPIxVAL@index,c
  1433  0009D2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1434  0009D6  5013               	movf	?_GETxAPIxVAL,w,c
  1435  0009D8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1436  0009DA  B4D8               	btfsc	status,2,c
  1437  0009DC  D016               	goto	l195
  1438                           
  1439                           ;State_Mchn.c: 78: SETxAPIxVAL(69, 1);
  1440  0009DE  0E00               	movlw	0
  1441  0009E0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1442  0009E2  0E45               	movlw	69
  1443  0009E4  6E19               	movwf	SETxAPIxVAL@index,c
  1444  0009E6  0E00               	movlw	0
  1445  0009E8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1446  0009EA  0E01               	movlw	1
  1447  0009EC  6E1B               	movwf	SETxAPIxVAL@value,c
  1448  0009EE  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1449                           
  1450                           ;State_Mchn.c: 79: SETxAPIxVALxNoxRET(77, 0);
  1451  0009F2  0E00               	movlw	0
  1452  0009F4  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1453  0009F6  0E4D               	movlw	77
  1454  0009F8  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1455  0009FA  0E00               	movlw	0
  1456  0009FC  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1457  0009FE  0E00               	movlw	0
  1458  000A00  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1459  000A02  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1460                           
  1461                           ;State_Mchn.c: 80: }
  1462  000A06  EFD3  F00A         	goto	l304
  1463  000A0A                     l195:
  1464                           
  1465                           ;State_Mchn.c: 81: else if (GETxAPIxVAL(78)){
  1466  000A0A  0E00               	movlw	0
  1467  000A0C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1468  000A0E  0E4E               	movlw	78
  1469  000A10  6E13               	movwf	GETxAPIxVAL@index,c
  1470  000A12  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1471  000A16  5013               	movf	?_GETxAPIxVAL,w,c
  1472  000A18  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1473  000A1A  B4D8               	btfsc	status,2,c
  1474  000A1C  D016               	goto	l197
  1475                           
  1476                           ;State_Mchn.c: 82: SETxAPIxVAL(69, 0);
  1477  000A1E  0E00               	movlw	0
  1478  000A20  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1479  000A22  0E45               	movlw	69
  1480  000A24  6E19               	movwf	SETxAPIxVAL@index,c
  1481  000A26  0E00               	movlw	0
  1482  000A28  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1483  000A2A  0E00               	movlw	0
  1484  000A2C  6E1B               	movwf	SETxAPIxVAL@value,c
  1485  000A2E  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1486                           
  1487                           ;State_Mchn.c: 83: SETxAPIxVALxNoxRET(78, 0);
  1488  000A32  0E00               	movlw	0
  1489  000A34  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1490  000A36  0E4E               	movlw	78
  1491  000A38  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1492  000A3A  0E00               	movlw	0
  1493  000A3C  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1494  000A3E  0E00               	movlw	0
  1495  000A40  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1496  000A42  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1497                           
  1498                           ;State_Mchn.c: 84: }
  1499  000A46  EFD3  F00A         	goto	l304
  1500  000A4A                     l197:
  1501                           
  1502                           ;State_Mchn.c: 85: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1503  000A4A  0E00               	movlw	0
  1504  000A4C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1505  000A4E  0E44               	movlw	68
  1506  000A50  6E13               	movwf	GETxAPIxVAL@index,c
  1507  000A52  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1508  000A56  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1509  000A5A  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1510  000A5E  0E00               	movlw	0
  1511  000A60  6E14               	movwf	GETxAPIxVAL@index+1,c
  1512  000A62  0E4F               	movlw	79
  1513  000A64  6E13               	movwf	GETxAPIxVAL@index,c
  1514  000A66  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1515  000A6A  5013               	movf	?_GETxAPIxVAL,w,c
  1516  000A6C  0100               	movlb	0	; () banked
  1517  000A6E  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  1518  000A70  E104               	bnz	u8370
  1519  000A72  5014               	movf	?_GETxAPIxVAL+1,w,c
  1520  000A74  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1521  000A76  B4D8               	btfsc	status,2,c
  1522  000A78  D02D               	goto	l199
  1523  000A7A                     u8370:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;State_Mchn.c: 86: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1527  000A7A  0E00               	movlw	0
  1528  000A7C  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1529  000A7E  0E44               	movlw	68
  1530  000A80  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1531  000A82  0E00               	movlw	0
  1532  000A84  6E14               	movwf	GETxAPIxVAL@index+1,c
  1533  000A86  0E4F               	movlw	79
  1534  000A88  6E13               	movwf	GETxAPIxVAL@index,c
  1535  000A8A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1536  000A8E  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1537  000A92  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1538  000A96  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1539                           
  1540                           ;State_Mchn.c: 87: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1541  000A9A  0E00               	movlw	0
  1542  000A9C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1543  000A9E  0E44               	movlw	68
  1544  000AA0  6E13               	movwf	GETxAPIxVAL@index,c
  1545  000AA2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1546  000AA6  C013  F0D1         	movff	?_GETxAPIxVAL,_Update_StateMchn$2176
  1547  000AAA  C014  F0D2         	movff	?_GETxAPIxVAL+1,_Update_StateMchn$2176+1
  1548                           
  1549                           ;State_Mchn.c: 87: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1550  000AAE  0E00               	movlw	0
  1551  000AB0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1552  000AB2  0E56               	movlw	86
  1553  000AB4  6E13               	movwf	GETxAPIxVAL@index,c
  1554  000AB6  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1555  000ABA  5013               	movf	?_GETxAPIxVAL,w,c
  1556  000ABC  0100               	movlb	0	; () banked
  1557  000ABE  6FD3               	movwf	_Update_StateMchn$2177& (0+255),b
  1558                           
  1559                           ;State_Mchn.c: 87: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1560  000AC0  C0D1  F01F         	movff	_Update_StateMchn$2176,SETxPWM@speed
  1561  000AC4  C0D2  F020         	movff	_Update_StateMchn$2176+1,SETxPWM@speed+1
  1562  000AC8  C0D3  F021         	movff	_Update_StateMchn$2177,SETxPWM@direction
  1563  000ACC  EC17  F01E         	call	_SETxPWM	;wreg free
  1564                           
  1565                           ;State_Mchn.c: 88: }
  1566  000AD0  EFD3  F00A         	goto	l304
  1567  000AD4                     l199:
  1568                           
  1569                           ;State_Mchn.c: 89: else if (GETxAPIxVAL(86) != GETxAPIxVAL(81)){
  1570  000AD4  0E00               	movlw	0
  1571  000AD6  6E14               	movwf	GETxAPIxVAL@index+1,c
  1572  000AD8  0E56               	movlw	86
  1573  000ADA  6E13               	movwf	GETxAPIxVAL@index,c
  1574  000ADC  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1575  000AE0  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1576  000AE4  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1577  000AE8  0E00               	movlw	0
  1578  000AEA  6E14               	movwf	GETxAPIxVAL@index+1,c
  1579  000AEC  0E51               	movlw	81
  1580  000AEE  6E13               	movwf	GETxAPIxVAL@index,c
  1581  000AF0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1582  000AF4  5013               	movf	?_GETxAPIxVAL,w,c
  1583  000AF6  0100               	movlb	0	; () banked
  1584  000AF8  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  1585  000AFA  E104               	bnz	u8380
  1586  000AFC  5014               	movf	?_GETxAPIxVAL+1,w,c
  1587  000AFE  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1588  000B00  B4D8               	btfsc	status,2,c
  1589  000B02  D3EA               	goto	l203
  1590  000B04                     u8380:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;State_Mchn.c: 90: SETxAPIxVALxNoxRET(86, GETxAPIxVAL(81));
  1594  000B04  0E00               	movlw	0
  1595  000B06  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1596  000B08  0E56               	movlw	86
  1597  000B0A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1598  000B0C  0E00               	movlw	0
  1599  000B0E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1600  000B10  0E51               	movlw	81
  1601  000B12  6E13               	movwf	GETxAPIxVAL@index,c
  1602  000B14  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1603  000B18  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1604  000B1C  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1605  000B20  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1606                           
  1607                           ;State_Mchn.c: 91: }
  1608  000B24  EFD3  F00A         	goto	l304
  1609  000B28  0E00               	movlw	0
  1610  000B2A  EC45  F01F         	call	_Green_Led
  1611                           
  1612                           ;State_Mchn.c: 97: Red_Led(0);
  1613  000B2E  0E00               	movlw	0
  1614  000B30  EC05  F01F         	call	_Red_Led
  1615                           
  1616                           ;State_Mchn.c: 98: Switch_Init = 1;
  1617  000B34  0E01               	movlw	1
  1618  000B36  D015               	goto	L1
  1619  000B38                     
  1620                           ; BSR set to: 0
  1621                           
  1622                           ; BSR set to: 0
  1623  000B38  0E00               	movlw	0
  1624  000B3A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1625  000B3C  0E23               	movlw	35
  1626  000B3E  6E13               	movwf	GETxAPIxVAL@index,c
  1627  000B40  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1628  000B44  5013               	movf	?_GETxAPIxVAL,w,c
  1629  000B46  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1630  000B48  B4D8               	btfsc	status,2,c
  1631  000B4A  D00F               	goto	l207
  1632                           
  1633                           ;State_Mchn.c: 102: {
  1634                           ;State_Mchn.c: 103: SETxAPIxVAL(39, 1);
  1635  000B4C  0E00               	movlw	0
  1636  000B4E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1637  000B50  0E27               	movlw	39
  1638  000B52  6E19               	movwf	SETxAPIxVAL@index,c
  1639  000B54  0E00               	movlw	0
  1640  000B56  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1641  000B58  0E01               	movlw	1
  1642  000B5A  6E1B               	movwf	SETxAPIxVAL@value,c
  1643  000B5C  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1644  000B60  D057               	goto	l8866
  1645  000B62                     L1:
  1646  000B62  0100               	movlb	0	; () banked
  1647  000B64                     L2:
  1648  000B64  6F8A               	movwf	_Switch_Init& (0+255),b
  1649                           
  1650                           ;State_Mchn.c: 105: break;
  1651  000B66  EFD3  F00A         	goto	l304
  1652  000B6A                     l207:
  1653                           
  1654                           ;State_Mchn.c: 106: }
  1655                           ;State_Mchn.c: 107: if(GETxAPIxVAL(36))
  1656                           
  1657                           ; BSR set to: 0
  1658  000B6A  0E00               	movlw	0
  1659  000B6C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1660  000B6E  0E24               	movlw	36
  1661  000B70  6E13               	movwf	GETxAPIxVAL@index,c
  1662  000B72  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1663  000B76  5013               	movf	?_GETxAPIxVAL,w,c
  1664  000B78  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1665  000B7A  B4D8               	btfsc	status,2,c
  1666  000B7C  D00B               	goto	l208
  1667                           
  1668                           ;State_Mchn.c: 108: {
  1669                           ;State_Mchn.c: 109: SETxAPIxVAL(39, 2);
  1670  000B7E  0E00               	movlw	0
  1671  000B80  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1672  000B82  0E27               	movlw	39
  1673  000B84  6E19               	movwf	SETxAPIxVAL@index,c
  1674  000B86  0E00               	movlw	0
  1675  000B88  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1676  000B8A  0E02               	movlw	2
  1677  000B8C  6E1B               	movwf	SETxAPIxVAL@value,c
  1678  000B8E  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1679  000B92  D03E               	goto	l8866
  1680  000B94                     l208:
  1681                           
  1682                           ;State_Mchn.c: 112: }
  1683                           ;State_Mchn.c: 113: if(GETxAPIxVAL(37))
  1684                           
  1685                           ; BSR set to: 0
  1686  000B94  0E00               	movlw	0
  1687  000B96  6E14               	movwf	GETxAPIxVAL@index+1,c
  1688  000B98  0E25               	movlw	37
  1689  000B9A  6E13               	movwf	GETxAPIxVAL@index,c
  1690  000B9C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1691  000BA0  5013               	movf	?_GETxAPIxVAL,w,c
  1692  000BA2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1693  000BA4  B4D8               	btfsc	status,2,c
  1694  000BA6  D00B               	goto	l209
  1695                           
  1696                           ;State_Mchn.c: 114: {
  1697                           ;State_Mchn.c: 115: SETxAPIxVAL(39, 3);
  1698  000BA8  0E00               	movlw	0
  1699  000BAA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1700  000BAC  0E27               	movlw	39
  1701  000BAE  6E19               	movwf	SETxAPIxVAL@index,c
  1702  000BB0  0E00               	movlw	0
  1703  000BB2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1704  000BB4  0E03               	movlw	3
  1705  000BB6  6E1B               	movwf	SETxAPIxVAL@value,c
  1706  000BB8  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1707  000BBC  D029               	goto	l8866
  1708  000BBE                     l209:
  1709                           
  1710                           ;State_Mchn.c: 118: }
  1711                           ;State_Mchn.c: 119: if(GETxAPIxVAL(38))
  1712                           
  1713                           ; BSR set to: 0
  1714  000BBE  0E00               	movlw	0
  1715  000BC0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1716  000BC2  0E26               	movlw	38
  1717  000BC4  6E13               	movwf	GETxAPIxVAL@index,c
  1718  000BC6  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1719  000BCA  5013               	movf	?_GETxAPIxVAL,w,c
  1720  000BCC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1721  000BCE  B4D8               	btfsc	status,2,c
  1722  000BD0  D00B               	goto	l210
  1723                           
  1724                           ;State_Mchn.c: 120: {
  1725                           ;State_Mchn.c: 121: SETxAPIxVAL(39, 4);
  1726  000BD2  0E00               	movlw	0
  1727  000BD4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1728  000BD6  0E27               	movlw	39
  1729  000BD8  6E19               	movwf	SETxAPIxVAL@index,c
  1730  000BDA  0E00               	movlw	0
  1731  000BDC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1732  000BDE  0E04               	movlw	4
  1733  000BE0  6E1B               	movwf	SETxAPIxVAL@value,c
  1734  000BE2  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1735  000BE6  D014               	goto	l8866
  1736  000BE8                     l210:
  1737                           
  1738                           ;State_Mchn.c: 124: }
  1739                           ;State_Mchn.c: 125: if(GETxAPIxVAL(34))
  1740                           
  1741                           ; BSR set to: 0
  1742  000BE8  0E00               	movlw	0
  1743  000BEA  6E14               	movwf	GETxAPIxVAL@index+1,c
  1744  000BEC  0E22               	movlw	34
  1745  000BEE  6E13               	movwf	GETxAPIxVAL@index,c
  1746  000BF0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1747  000BF4  5013               	movf	?_GETxAPIxVAL,w,c
  1748  000BF6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1749  000BF8  B4D8               	btfsc	status,2,c
  1750  000BFA  D00C               	goto	l211
  1751                           
  1752                           ;State_Mchn.c: 126: {
  1753                           ;State_Mchn.c: 127: SETxAPIxVAL(39, 5);
  1754  000BFC  0E00               	movlw	0
  1755  000BFE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1756  000C00  0E27               	movlw	39
  1757  000C02  6E19               	movwf	SETxAPIxVAL@index,c
  1758  000C04  0E00               	movlw	0
  1759  000C06  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1760  000C08  0E05               	movlw	5
  1761  000C0A  6E1B               	movwf	SETxAPIxVAL@value,c
  1762  000C0C  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1763  000C10                     l8866:
  1764                           
  1765                           ;State_Mchn.c: 128: Switch_Init = 2;
  1766  000C10  0E02               	movlw	2
  1767  000C12  D7A7               	goto	L1
  1768  000C14                     l211:
  1769                           
  1770                           ;State_Mchn.c: 130: }
  1771                           ;State_Mchn.c: 131: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1772                           
  1773                           ; BSR set to: 0
  1774  000C14  0E00               	movlw	0
  1775  000C16  6E14               	movwf	GETxAPIxVAL@index+1,c
  1776  000C18  0E27               	movlw	39
  1777  000C1A  6E13               	movwf	GETxAPIxVAL@index,c
  1778  000C1C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1779  000C20  5013               	movf	?_GETxAPIxVAL,w,c
  1780  000C22  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1781  000C24  B4D8               	btfsc	status,2,c
  1782  000C26  D00A               	goto	l212
  1783  000C28  0E00               	movlw	0
  1784  000C2A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1785  000C2C  0E28               	movlw	40
  1786  000C2E  6E13               	movwf	GETxAPIxVAL@index,c
  1787  000C30  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1788  000C34  5013               	movf	?_GETxAPIxVAL,w,c
  1789  000C36  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1790  000C38  A4D8               	btfss	status,2,c
  1791  000C3A  D0E1               	goto	u8590
  1792  000C3C                     l212:
  1793                           
  1794                           ;State_Mchn.c: 134: }
  1795                           ;State_Mchn.c: 135: Switch_Init = 1;
  1796                           
  1797                           ; BSR set to: 0
  1798  000C3C  0E01               	movlw	1
  1799  000C3E  0100               	movlb	0	; () banked
  1800  000C40  6F8A               	movwf	_Switch_Init& (0+255),b
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;State_Mchn.c: 136: Green_Led(2);
  1804  000C42  0E02               	movlw	2
  1805  000C44  EC45  F01F         	call	_Green_Led
  1806                           
  1807                           ;State_Mchn.c: 137: break;
  1808  000C48  EFD3  F00A         	goto	l304
  1809  000C4C  0E00               	movlw	0
  1810  000C4E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1811  000C50  0E23               	movlw	35
  1812  000C52  6E13               	movwf	GETxAPIxVAL@index,c
  1813  000C54  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1814  000C58  5013               	movf	?_GETxAPIxVAL,w,c
  1815  000C5A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1816  000C5C  A4D8               	btfss	status,2,c
  1817  000C5E  D035               	goto	l214
  1818  000C60  0E00               	movlw	0
  1819  000C62  6E14               	movwf	GETxAPIxVAL@index+1,c
  1820  000C64  0E24               	movlw	36
  1821  000C66  6E13               	movwf	GETxAPIxVAL@index,c
  1822  000C68  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1823  000C6C  5013               	movf	?_GETxAPIxVAL,w,c
  1824  000C6E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1825  000C70  A4D8               	btfss	status,2,c
  1826  000C72  D02B               	goto	l214
  1827  000C74  0E00               	movlw	0
  1828  000C76  6E14               	movwf	GETxAPIxVAL@index+1,c
  1829  000C78  0E25               	movlw	37
  1830  000C7A  6E13               	movwf	GETxAPIxVAL@index,c
  1831  000C7C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1832  000C80  5013               	movf	?_GETxAPIxVAL,w,c
  1833  000C82  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1834  000C84  A4D8               	btfss	status,2,c
  1835  000C86  D021               	goto	l214
  1836  000C88  0E00               	movlw	0
  1837  000C8A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1838  000C8C  0E26               	movlw	38
  1839  000C8E  6E13               	movwf	GETxAPIxVAL@index,c
  1840  000C90  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1841  000C94  5013               	movf	?_GETxAPIxVAL,w,c
  1842  000C96  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1843  000C98  A4D8               	btfss	status,2,c
  1844  000C9A  D017               	goto	l214
  1845  000C9C  0E00               	movlw	0
  1846  000C9E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1847  000CA0  0E22               	movlw	34
  1848  000CA2  6E13               	movwf	GETxAPIxVAL@index,c
  1849  000CA4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1850  000CA8  5013               	movf	?_GETxAPIxVAL,w,c
  1851  000CAA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1852  000CAC  A4D8               	btfss	status,2,c
  1853  000CAE  D00D               	goto	l214
  1854  000CB0  0E00               	movlw	0
  1855  000CB2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1856  000CB4  0E20               	movlw	32
  1857  000CB6  6E13               	movwf	GETxAPIxVAL@index,c
  1858  000CB8  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1859  000CBC  5013               	movf	?_GETxAPIxVAL,w,c
  1860  000CBE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1861  000CC0  A4D8               	btfss	status,2,c
  1862  000CC2  D003               	goto	l214
  1863                           
  1864                           ;State_Mchn.c: 140: {
  1865                           ;State_Mchn.c: 141: Switch_Init = 3;
  1866  000CC4  0E03               	movlw	3
  1867  000CC6  0100               	movlb	0	; () banked
  1868  000CC8  6F8A               	movwf	_Switch_Init& (0+255),b
  1869  000CCA                     l214:
  1870                           
  1871                           ;State_Mchn.c: 142: }
  1872                           ;State_Mchn.c: 143: Red_Led(0);
  1873                           
  1874                           ; BSR set to: 0
  1875  000CCA  0E00               	movlw	0
  1876  000CCC  EC05  F01F         	call	_Red_Led
  1877                           
  1878                           ;State_Mchn.c: 144: Green_Led(2);
  1879  000CD0  0E02               	movlw	2
  1880  000CD2  EC45  F01F         	call	_Green_Led
  1881                           
  1882                           ;State_Mchn.c: 145: break;
  1883  000CD6  EFD3  F00A         	goto	l304
  1884  000CDA  0E00               	movlw	0
  1885  000CDC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1886  000CDE  0E23               	movlw	35
  1887  000CE0  6E13               	movwf	GETxAPIxVAL@index,c
  1888  000CE2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1889  000CE6  5013               	movf	?_GETxAPIxVAL,w,c
  1890  000CE8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1891  000CEA  B4D8               	btfsc	status,2,c
  1892  000CEC  D00B               	goto	l216
  1893                           
  1894                           ;State_Mchn.c: 148: {
  1895                           ;State_Mchn.c: 149: SETxAPIxVAL(40, 1);
  1896  000CEE  0E00               	movlw	0
  1897  000CF0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1898  000CF2  0E28               	movlw	40
  1899  000CF4  6E19               	movwf	SETxAPIxVAL@index,c
  1900  000CF6  0E00               	movlw	0
  1901  000CF8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1902  000CFA  0E01               	movlw	1
  1903  000CFC  6E1B               	movwf	SETxAPIxVAL@value,c
  1904  000CFE  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1905  000D02  D07D               	goto	u8590
  1906  000D04                     l216:
  1907                           
  1908                           ;State_Mchn.c: 152: }
  1909                           ;State_Mchn.c: 153: if(GETxAPIxVAL(36))
  1910                           
  1911                           ; BSR set to: 0
  1912  000D04  0E00               	movlw	0
  1913  000D06  6E14               	movwf	GETxAPIxVAL@index+1,c
  1914  000D08  0E24               	movlw	36
  1915  000D0A  6E13               	movwf	GETxAPIxVAL@index,c
  1916  000D0C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1917  000D10  5013               	movf	?_GETxAPIxVAL,w,c
  1918  000D12  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1919  000D14  B4D8               	btfsc	status,2,c
  1920  000D16  D00B               	goto	l217
  1921                           
  1922                           ;State_Mchn.c: 154: {
  1923                           ;State_Mchn.c: 155: SETxAPIxVAL(40, 2);
  1924  000D18  0E00               	movlw	0
  1925  000D1A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1926  000D1C  0E28               	movlw	40
  1927  000D1E  6E19               	movwf	SETxAPIxVAL@index,c
  1928  000D20  0E00               	movlw	0
  1929  000D22  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1930  000D24  0E02               	movlw	2
  1931  000D26  6E1B               	movwf	SETxAPIxVAL@value,c
  1932  000D28  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1933  000D2C  D068               	goto	u8590
  1934  000D2E                     l217:
  1935                           
  1936                           ;State_Mchn.c: 158: }
  1937                           ;State_Mchn.c: 159: if(GETxAPIxVAL(37))
  1938                           
  1939                           ; BSR set to: 0
  1940  000D2E  0E00               	movlw	0
  1941  000D30  6E14               	movwf	GETxAPIxVAL@index+1,c
  1942  000D32  0E25               	movlw	37
  1943  000D34  6E13               	movwf	GETxAPIxVAL@index,c
  1944  000D36  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1945  000D3A  5013               	movf	?_GETxAPIxVAL,w,c
  1946  000D3C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1947  000D3E  B4D8               	btfsc	status,2,c
  1948  000D40  D00B               	goto	l218
  1949                           
  1950                           ;State_Mchn.c: 160: {
  1951                           ;State_Mchn.c: 161: SETxAPIxVAL(40, 3);
  1952  000D42  0E00               	movlw	0
  1953  000D44  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1954  000D46  0E28               	movlw	40
  1955  000D48  6E19               	movwf	SETxAPIxVAL@index,c
  1956  000D4A  0E00               	movlw	0
  1957  000D4C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1958  000D4E  0E03               	movlw	3
  1959  000D50  6E1B               	movwf	SETxAPIxVAL@value,c
  1960  000D52  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1961  000D56  D053               	goto	u8590
  1962  000D58                     l218:
  1963                           
  1964                           ;State_Mchn.c: 164: }
  1965                           ;State_Mchn.c: 165: if(GETxAPIxVAL(38))
  1966                           
  1967                           ; BSR set to: 0
  1968  000D58  0E00               	movlw	0
  1969  000D5A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1970  000D5C  0E26               	movlw	38
  1971  000D5E  6E13               	movwf	GETxAPIxVAL@index,c
  1972  000D60  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  1973  000D64  5013               	movf	?_GETxAPIxVAL,w,c
  1974  000D66  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1975  000D68  B4D8               	btfsc	status,2,c
  1976  000D6A  D00B               	goto	l219
  1977                           
  1978                           ;State_Mchn.c: 166: {
  1979                           ;State_Mchn.c: 167: SETxAPIxVAL(40, 4);
  1980  000D6C  0E00               	movlw	0
  1981  000D6E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1982  000D70  0E28               	movlw	40
  1983  000D72  6E19               	movwf	SETxAPIxVAL@index,c
  1984  000D74  0E00               	movlw	0
  1985  000D76  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1986  000D78  0E04               	movlw	4
  1987  000D7A  6E1B               	movwf	SETxAPIxVAL@value,c
  1988  000D7C  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  1989  000D80  D03E               	goto	u8590
  1990  000D82                     l219:
  1991                           
  1992                           ;State_Mchn.c: 170: }
  1993                           ;State_Mchn.c: 171: if(GETxAPIxVAL(34))
  1994                           
  1995                           ; BSR set to: 0
  1996  000D82  0E00               	movlw	0
  1997  000D84  6E14               	movwf	GETxAPIxVAL@index+1,c
  1998  000D86  0E22               	movlw	34
  1999  000D88  6E13               	movwf	GETxAPIxVAL@index,c
  2000  000D8A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2001  000D8E  5013               	movf	?_GETxAPIxVAL,w,c
  2002  000D90  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2003  000D92  B4D8               	btfsc	status,2,c
  2004  000D94  D00B               	goto	l220
  2005                           
  2006                           ;State_Mchn.c: 172: {
  2007                           ;State_Mchn.c: 173: SETxAPIxVAL(40, 5);
  2008  000D96  0E00               	movlw	0
  2009  000D98  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2010  000D9A  0E28               	movlw	40
  2011  000D9C  6E19               	movwf	SETxAPIxVAL@index,c
  2012  000D9E  0E00               	movlw	0
  2013  000DA0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2014  000DA2  0E05               	movlw	5
  2015  000DA4  6E1B               	movwf	SETxAPIxVAL@value,c
  2016  000DA6  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  2017  000DAA  D029               	goto	u8590
  2018  000DAC                     l220:
  2019                           
  2020                           ;State_Mchn.c: 176: }
  2021                           ;State_Mchn.c: 177: if(GETxAPIxVAL(32))
  2022                           
  2023                           ; BSR set to: 0
  2024  000DAC  0E00               	movlw	0
  2025  000DAE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2026  000DB0  0E20               	movlw	32
  2027  000DB2  6E13               	movwf	GETxAPIxVAL@index,c
  2028  000DB4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2029  000DB8  5013               	movf	?_GETxAPIxVAL,w,c
  2030  000DBA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2031  000DBC  B4D8               	btfsc	status,2,c
  2032  000DBE  D00B               	goto	l221
  2033                           
  2034                           ;State_Mchn.c: 178: {
  2035                           ;State_Mchn.c: 179: SETxAPIxVAL(40, 9);
  2036  000DC0  0E00               	movlw	0
  2037  000DC2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2038  000DC4  0E28               	movlw	40
  2039  000DC6  6E19               	movwf	SETxAPIxVAL@index,c
  2040  000DC8  0E00               	movlw	0
  2041  000DCA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2042  000DCC  0E09               	movlw	9
  2043  000DCE  6E1B               	movwf	SETxAPIxVAL@value,c
  2044  000DD0  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  2045  000DD4  D014               	goto	u8590
  2046  000DD6                     l221:
  2047                           
  2048                           ;State_Mchn.c: 182: }
  2049                           ;State_Mchn.c: 183: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  2050                           
  2051                           ; BSR set to: 0
  2052  000DD6  0E00               	movlw	0
  2053  000DD8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2054  000DDA  0E27               	movlw	39
  2055  000DDC  6E13               	movwf	GETxAPIxVAL@index,c
  2056  000DDE  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2057  000DE2  5013               	movf	?_GETxAPIxVAL,w,c
  2058  000DE4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2059  000DE6  B4D8               	btfsc	status,2,c
  2060  000DE8  D00C               	goto	l222
  2061  000DEA  0E00               	movlw	0
  2062  000DEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2063  000DEE  0E28               	movlw	40
  2064  000DF0  6E13               	movwf	GETxAPIxVAL@index,c
  2065  000DF2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2066  000DF6  5013               	movf	?_GETxAPIxVAL,w,c
  2067  000DF8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2068  000DFA  B4D8               	btfsc	status,2,c
  2069  000DFC  D002               	goto	l222
  2070  000DFE                     u8590:
  2071                           
  2072                           ;State_Mchn.c: 184: Switch_Init = 4;
  2073  000DFE  0E04               	movlw	4
  2074  000E00  D6B0               	goto	L1
  2075  000E02                     l222:
  2076                           
  2077                           ;State_Mchn.c: 186: }
  2078                           ;State_Mchn.c: 187: Green_Led(2);
  2079                           
  2080                           ; BSR set to: 0
  2081  000E02  0E02               	movlw	2
  2082  000E04  EC45  F01F         	call	_Green_Led
  2083                           
  2084                           ;State_Mchn.c: 188: Switch_Init = 3;
  2085  000E08  0E03               	movlw	3
  2086  000E0A  D6AB               	goto	L1
  2087  000E0C                     
  2088                           ; BSR set to: 0
  2089                           
  2090                           ; BSR set to: 0
  2091  000E0C  0E00               	movlw	0
  2092  000E0E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2093  000E10  0E23               	movlw	35
  2094  000E12  6E13               	movwf	GETxAPIxVAL@index,c
  2095  000E14  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2096  000E18  5013               	movf	?_GETxAPIxVAL,w,c
  2097  000E1A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2098  000E1C  A4D8               	btfss	status,2,c
  2099  000E1E  D07E               	goto	l226
  2100  000E20  0E00               	movlw	0
  2101  000E22  6E14               	movwf	GETxAPIxVAL@index+1,c
  2102  000E24  0E24               	movlw	36
  2103  000E26  6E13               	movwf	GETxAPIxVAL@index,c
  2104  000E28  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2105  000E2C  5013               	movf	?_GETxAPIxVAL,w,c
  2106  000E2E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2107  000E30  A4D8               	btfss	status,2,c
  2108  000E32  D074               	goto	l226
  2109  000E34  0E00               	movlw	0
  2110  000E36  6E14               	movwf	GETxAPIxVAL@index+1,c
  2111  000E38  0E25               	movlw	37
  2112  000E3A  6E13               	movwf	GETxAPIxVAL@index,c
  2113  000E3C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2114  000E40  5013               	movf	?_GETxAPIxVAL,w,c
  2115  000E42  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2116  000E44  A4D8               	btfss	status,2,c
  2117  000E46  D06A               	goto	l226
  2118  000E48  0E00               	movlw	0
  2119  000E4A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2120  000E4C  0E26               	movlw	38
  2121  000E4E  6E13               	movwf	GETxAPIxVAL@index,c
  2122  000E50  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2123  000E54  5013               	movf	?_GETxAPIxVAL,w,c
  2124  000E56  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2125  000E58  A4D8               	btfss	status,2,c
  2126  000E5A  D060               	goto	l226
  2127  000E5C  0E00               	movlw	0
  2128  000E5E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2129  000E60  0E22               	movlw	34
  2130  000E62  6E13               	movwf	GETxAPIxVAL@index,c
  2131  000E64  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2132  000E68  5013               	movf	?_GETxAPIxVAL,w,c
  2133  000E6A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2134  000E6C  A4D8               	btfss	status,2,c
  2135  000E6E  D056               	goto	l226
  2136  000E70  0E00               	movlw	0
  2137  000E72  6E14               	movwf	GETxAPIxVAL@index+1,c
  2138  000E74  0E20               	movlw	32
  2139  000E76  6E13               	movwf	GETxAPIxVAL@index,c
  2140  000E78  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2141  000E7C  5013               	movf	?_GETxAPIxVAL,w,c
  2142  000E7E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2143  000E80  A4D8               	btfss	status,2,c
  2144  000E82  D04C               	goto	l226
  2145                           
  2146                           ;State_Mchn.c: 192: {
  2147                           ;State_Mchn.c: 193: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  2148  000E84  0E00               	movlw	0
  2149  000E86  6E14               	movwf	GETxAPIxVAL@index+1,c
  2150  000E88  0E27               	movlw	39
  2151  000E8A  6E13               	movwf	GETxAPIxVAL@index,c
  2152  000E8C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2153  000E90  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2154  000E94  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2155  000E98  0E00               	movlw	0
  2156  000E9A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2157  000E9C  0E28               	movlw	40
  2158  000E9E  6E13               	movwf	GETxAPIxVAL@index,c
  2159  000EA0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2160  000EA4  5013               	movf	?_GETxAPIxVAL,w,c
  2161  000EA6  0100               	movlb	0	; () banked
  2162  000EA8  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  2163  000EAA  E11E               	bnz	l8962
  2164  000EAC  5014               	movf	?_GETxAPIxVAL+1,w,c
  2165  000EAE  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2166  000EB0  A4D8               	btfss	status,2,c
  2167  000EB2  D01A               	goto	l225
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;State_Mchn.c: 194: {
  2171                           ;State_Mchn.c: 195: SETxAPIxVAL(40, 0);
  2172  000EB4  0E00               	movlw	0
  2173  000EB6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2174  000EB8  0E28               	movlw	40
  2175  000EBA  6E19               	movwf	SETxAPIxVAL@index,c
  2176  000EBC  0E00               	movlw	0
  2177  000EBE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2178  000EC0  0E00               	movlw	0
  2179  000EC2  6E1B               	movwf	SETxAPIxVAL@value,c
  2180  000EC4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  2181                           
  2182                           ;State_Mchn.c: 196: SETxAPIxVAL(39, 0);
  2183  000EC8  0E00               	movlw	0
  2184  000ECA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2185  000ECC  0E27               	movlw	39
  2186  000ECE  6E19               	movwf	SETxAPIxVAL@index,c
  2187  000ED0  0E00               	movlw	0
  2188  000ED2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2189  000ED4  0E00               	movlw	0
  2190  000ED6  6E1B               	movwf	SETxAPIxVAL@value,c
  2191  000ED8  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  2192                           
  2193                           ;State_Mchn.c: 197: Red_Led(1);
  2194  000EDC  0E01               	movlw	1
  2195  000EDE  EC05  F01F         	call	_Red_Led
  2196                           
  2197                           ;State_Mchn.c: 198: Switch_Init = 1;
  2198  000EE2  0E01               	movlw	1
  2199  000EE4  0100               	movlb	0	; () banked
  2200  000EE6  6F8A               	movwf	_Switch_Init& (0+255),b
  2201  000EE8                     l225:
  2202  000EE8                     l8962:
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;State_Mchn.c: 200: }
  2206                           ;State_Mchn.c: 201: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  2207  000EE8  0E00               	movlw	0
  2208  000EEA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2209  000EEC  0E27               	movlw	39
  2210  000EEE  6E13               	movwf	GETxAPIxVAL@index,c
  2211  000EF0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2212  000EF4  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2213  000EF8  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2214  000EFC  0E00               	movlw	0
  2215  000EFE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2216  000F00  0E28               	movlw	40
  2217  000F02  6E13               	movwf	GETxAPIxVAL@index,c
  2218  000F04  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2219  000F08  5013               	movf	?_GETxAPIxVAL,w,c
  2220  000F0A  0100               	movlb	0	; () banked
  2221  000F0C  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  2222  000F0E  E104               	bnz	u8670
  2223  000F10  5014               	movf	?_GETxAPIxVAL+1,w,c
  2224  000F12  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2225  000F14  B4D8               	btfsc	status,2,c
  2226  000F16  D002               	goto	l226
  2227  000F18                     u8670:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;State_Mchn.c: 202: {
  2231                           ;State_Mchn.c: 203: Switch_Init = 5;
  2232  000F18  0E05               	movlw	5
  2233  000F1A  6F8A               	movwf	_Switch_Init& (0+255),b
  2234  000F1C                     l226:
  2235                           
  2236                           ;State_Mchn.c: 204: }
  2237                           ;State_Mchn.c: 205: }
  2238                           ;State_Mchn.c: 206: Green_Led(2);
  2239                           
  2240                           ; BSR set to: 0
  2241                           
  2242                           ; BSR set to: 0
  2243  000F1C  0E02               	movlw	2
  2244  000F1E  EC45  F01F         	call	_Green_Led
  2245                           
  2246                           ;State_Mchn.c: 207: break;
  2247  000F22  D341               	goto	l304
  2248  000F24  0E00               	movlw	0
  2249  000F26  6E14               	movwf	GETxAPIxVAL@index+1,c
  2250  000F28  0E28               	movlw	40
  2251  000F2A  6E13               	movwf	GETxAPIxVAL@index,c
  2252  000F2C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2253  000F30  0E09               	movlw	9
  2254  000F32  1813               	xorwf	?_GETxAPIxVAL,w,c
  2255  000F34  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2256  000F36  B4D8               	btfsc	status,2,c
  2257  000F38  D003               	goto	l228
  2258                           
  2259                           ;State_Mchn.c: 210: {
  2260                           ;State_Mchn.c: 211: Switch_Init = 6;
  2261  000F3A  0E06               	movlw	6
  2262  000F3C  0100               	movlb	0	; () banked
  2263  000F3E  6F8A               	movwf	_Switch_Init& (0+255),b
  2264  000F40                     l228:
  2265                           
  2266                           ;State_Mchn.c: 212: }
  2267                           ;State_Mchn.c: 213: if(GETxAPIxVAL(40) == 9)
  2268                           
  2269                           ; BSR set to: 0
  2270  000F40  0E00               	movlw	0
  2271  000F42  6E14               	movwf	GETxAPIxVAL@index+1,c
  2272  000F44  0E28               	movlw	40
  2273  000F46  6E13               	movwf	GETxAPIxVAL@index,c
  2274  000F48  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2275  000F4C  0E09               	movlw	9
  2276  000F4E  1813               	xorwf	?_GETxAPIxVAL,w,c
  2277  000F50  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2278  000F52  A4D8               	btfss	status,2,c
  2279  000F54  D328               	goto	l304
  2280                           
  2281                           ;State_Mchn.c: 214: {
  2282                           ;State_Mchn.c: 215: Switch_Init = 9;
  2283  000F56  0E09               	movlw	9
  2284  000F58  D604               	goto	L1
  2285  000F5A                     
  2286                           ; BSR set to: 0
  2287                           
  2288                           ; BSR set to: 0
  2289  000F5A  0E08               	movlw	8
  2290  000F5C  D603               	goto	L2
  2291  000F5E                     
  2292                           ; BSR set to: 0
  2293                           
  2294                           ; BSR set to: 0
  2295  000F5E  0E00               	movlw	0
  2296  000F60  6E14               	movwf	GETxAPIxVAL@index+1,c
  2297  000F62  0E20               	movlw	32
  2298  000F64  6E13               	movwf	GETxAPIxVAL@index,c
  2299  000F66  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2300  000F6A  5013               	movf	?_GETxAPIxVAL,w,c
  2301  000F6C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2302  000F6E  A4D8               	btfss	status,2,c
  2303  000F70  D00A               	goto	u8710
  2304  000F72  0E00               	movlw	0
  2305  000F74  6E14               	movwf	GETxAPIxVAL@index+1,c
  2306  000F76  0E46               	movlw	70
  2307  000F78  6E13               	movwf	GETxAPIxVAL@index,c
  2308  000F7A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2309  000F7E  5013               	movf	?_GETxAPIxVAL,w,c
  2310  000F80  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2311  000F82  B4D8               	btfsc	status,2,c
  2312  000F84  D011               	goto	l232
  2313  000F86                     u8710:
  2314                           
  2315                           ;State_Mchn.c: 223: {
  2316                           ;State_Mchn.c: 224: Switch_Main = 2;
  2317  000F86  0E02               	movlw	2
  2318  000F88  0100               	movlb	0	; () banked
  2319  000F8A  6FE1               	movwf	_Switch_Main& (0+255),b
  2320                           
  2321                           ;State_Mchn.c: 225: Switch_Init = 0;
  2322  000F8C  0E00               	movlw	0
  2323  000F8E  6F8A               	movwf	_Switch_Init& (0+255),b
  2324                           
  2325                           ;State_Mchn.c: 226: Stop_Program = 0;
  2326  000F90  0E00               	movlw	0
  2327  000F92  6F85               	movwf	_Stop_Program& (0+255),b
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;State_Mchn.c: 227: SETxAPIxVAL(70, 0);
  2331  000F94  0E00               	movlw	0
  2332  000F96  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2333  000F98  0E46               	movlw	70
  2334  000F9A  6E19               	movwf	SETxAPIxVAL@index,c
  2335  000F9C  0E00               	movlw	0
  2336  000F9E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2337  000FA0  0E00               	movlw	0
  2338  000FA2  6E1B               	movwf	SETxAPIxVAL@value,c
  2339  000FA4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  2340  000FA8                     l232:
  2341                           
  2342                           ;State_Mchn.c: 228: }
  2343                           ;State_Mchn.c: 229: Green_Led(3);
  2344  000FA8  0E03               	movlw	3
  2345  000FAA  EC45  F01F         	call	_Green_Led
  2346                           
  2347                           ;State_Mchn.c: 230: Red_Led(0);
  2348  000FAE  0E00               	movlw	0
  2349  000FB0  EC05  F01F         	call	_Red_Led
  2350                           
  2351                           ;State_Mchn.c: 231: break;
  2352  000FB4  D2F8               	goto	l304
  2353  000FB6  0E00               	movlw	0
  2354  000FB8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2355  000FBA  0E27               	movlw	39
  2356  000FBC  6E13               	movwf	GETxAPIxVAL@index,c
  2357  000FBE  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2358  000FC2  0E05               	movlw	5
  2359  000FC4  1813               	xorwf	?_GETxAPIxVAL,w,c
  2360  000FC6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2361  000FC8  B4D8               	btfsc	status,2,c
  2362  000FCA  D014               	goto	l237
  2363  000FCC  D02B               	goto	l239
  2364  000FCE  0E01               	movlw	1
  2365  000FD0  D005               	goto	L5
  2366  000FD2                     
  2367                           ; BSR set to: 0
  2368  000FD2  0E05               	movlw	5
  2369  000FD4  D003               	goto	L5
  2370  000FD6                     
  2371                           ; BSR set to: 0
  2372  000FD6  0E02               	movlw	2
  2373  000FD8  D001               	goto	L5
  2374  000FDA                     
  2375                           ; BSR set to: 0
  2376  000FDA  0E03               	movlw	3
  2377  000FDC                     L5:
  2378  000FDC  0100               	movlb	0	; () banked
  2379  000FDE  6F89               	movwf	_Switch_Program& (0+255),b
  2380                           
  2381                           ;State_Mchn.c: 247: Switch_Init = 7;
  2382  000FE0  0E07               	movlw	7
  2383  000FE2  6F8A               	movwf	_Switch_Init& (0+255),b
  2384                           
  2385                           ;State_Mchn.c: 248: break;
  2386  000FE4  D01F               	goto	l239
  2387  000FE6                     
  2388                           ; BSR set to: 0
  2389  000FE6  0E08               	movlw	8
  2390  000FE8  0100               	movlb	0	; () banked
  2391  000FEA  6F8A               	movwf	_Switch_Init& (0+255),b
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;State_Mchn.c: 250: Red_Led(1);
  2395  000FEC  0E01               	movlw	1
  2396  000FEE  EC05  F01F         	call	_Red_Led
  2397                           
  2398                           ;State_Mchn.c: 252: }
  2399                           
  2400                           ;State_Mchn.c: 251: break;
  2401  000FF2  D018               	goto	l239
  2402  000FF4                     l237:
  2403  000FF4  0E00               	movlw	0
  2404  000FF6  6E14               	movwf	GETxAPIxVAL@index+1,c
  2405  000FF8  0E28               	movlw	40
  2406  000FFA  6E13               	movwf	GETxAPIxVAL@index,c
  2407  000FFC  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2408                           
  2409                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2410                           ; Switch size 1, requested type "space"
  2411                           ; Number of cases is 1, Range of values is 0 to 0
  2412                           ; switch strategies available:
  2413                           ; Name         Instructions Cycles
  2414                           ; simple_byte            4     3 (average)
  2415                           ;	Chosen strategy is simple_byte
  2416  001000  5014               	movf	?_GETxAPIxVAL+1,w,c
  2417  001002  0A00               	xorlw	0	; case 0
  2418  001004  A4D8               	btfss	status,2,c
  2419  001006  D7EF               	goto	l243
  2420                           
  2421                           ; Switch size 1, requested type "space"
  2422                           ; Number of cases is 4, Range of values is 1 to 4
  2423                           ; switch strategies available:
  2424                           ; Name         Instructions Cycles
  2425                           ; simple_byte           13     7 (average)
  2426                           ;	Chosen strategy is simple_byte
  2427  001008  5013               	movf	?_GETxAPIxVAL,w,c
  2428  00100A  0A01               	xorlw	1	; case 1
  2429  00100C  B4D8               	btfsc	status,2,c
  2430  00100E  D7DF               	goto	l238
  2431  001010  0A03               	xorlw	3	; case 2
  2432  001012  B4D8               	btfsc	status,2,c
  2433  001014  D7DE               	goto	l240
  2434  001016  0A01               	xorlw	1	; case 3
  2435  001018  B4D8               	btfsc	status,2,c
  2436  00101A  D7DD               	goto	l241
  2437  00101C  0A07               	xorlw	7	; case 4
  2438  00101E  B4D8               	btfsc	status,2,c
  2439  001020  D7DC               	goto	l242
  2440  001022  D7E1               	goto	l243
  2441  001024                     l239:
  2442                           
  2443                           ;State_Mchn.c: 253: }
  2444                           ;State_Mchn.c: 254: if(GETxAPIxVAL(40) == 5)
  2445  001024  0E00               	movlw	0
  2446  001026  6E14               	movwf	GETxAPIxVAL@index+1,c
  2447  001028  0E28               	movlw	40
  2448  00102A  6E13               	movwf	GETxAPIxVAL@index,c
  2449  00102C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2450  001030  0E05               	movlw	5
  2451  001032  1813               	xorwf	?_GETxAPIxVAL,w,c
  2452  001034  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2453  001036  B4D8               	btfsc	status,2,c
  2454  001038  D014               	goto	l245
  2455  00103A  D02B               	goto	l247
  2456  00103C  0E01               	movlw	1
  2457  00103E  D005               	goto	L8
  2458  001040                     
  2459                           ; BSR set to: 0
  2460  001040  0E05               	movlw	5
  2461  001042  D003               	goto	L8
  2462  001044                     
  2463                           ; BSR set to: 0
  2464  001044  0E02               	movlw	2
  2465  001046  D001               	goto	L8
  2466  001048                     
  2467                           ; BSR set to: 0
  2468  001048  0E03               	movlw	3
  2469  00104A                     L8:
  2470  00104A  0100               	movlb	0	; () banked
  2471  00104C  6F89               	movwf	_Switch_Program& (0+255),b
  2472                           
  2473                           ;State_Mchn.c: 268: Switch_Init = 7;
  2474  00104E  0E07               	movlw	7
  2475  001050  6F8A               	movwf	_Switch_Init& (0+255),b
  2476                           
  2477                           ;State_Mchn.c: 269: break;
  2478  001052  D01F               	goto	l247
  2479  001054                     
  2480                           ; BSR set to: 0
  2481  001054  0E08               	movlw	8
  2482  001056  0100               	movlb	0	; () banked
  2483  001058  6F8A               	movwf	_Switch_Init& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;State_Mchn.c: 271: Red_Led(1);
  2487  00105A  0E01               	movlw	1
  2488  00105C  EC05  F01F         	call	_Red_Led
  2489                           
  2490                           ;State_Mchn.c: 273: }
  2491                           
  2492                           ;State_Mchn.c: 272: break;
  2493  001060  D018               	goto	l247
  2494  001062                     l245:
  2495  001062  0E00               	movlw	0
  2496  001064  6E14               	movwf	GETxAPIxVAL@index+1,c
  2497  001066  0E27               	movlw	39
  2498  001068  6E13               	movwf	GETxAPIxVAL@index,c
  2499  00106A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2500                           
  2501                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2502                           ; Switch size 1, requested type "space"
  2503                           ; Number of cases is 1, Range of values is 0 to 0
  2504                           ; switch strategies available:
  2505                           ; Name         Instructions Cycles
  2506                           ; simple_byte            4     3 (average)
  2507                           ;	Chosen strategy is simple_byte
  2508  00106E  5014               	movf	?_GETxAPIxVAL+1,w,c
  2509  001070  0A00               	xorlw	0	; case 0
  2510  001072  A4D8               	btfss	status,2,c
  2511  001074  D7EF               	goto	l251
  2512                           
  2513                           ; Switch size 1, requested type "space"
  2514                           ; Number of cases is 4, Range of values is 1 to 4
  2515                           ; switch strategies available:
  2516                           ; Name         Instructions Cycles
  2517                           ; simple_byte           13     7 (average)
  2518                           ;	Chosen strategy is simple_byte
  2519  001076  5013               	movf	?_GETxAPIxVAL,w,c
  2520  001078  0A01               	xorlw	1	; case 1
  2521  00107A  B4D8               	btfsc	status,2,c
  2522  00107C  D7DF               	goto	l246
  2523  00107E  0A03               	xorlw	3	; case 2
  2524  001080  B4D8               	btfsc	status,2,c
  2525  001082  D7DE               	goto	l248
  2526  001084  0A01               	xorlw	1	; case 3
  2527  001086  B4D8               	btfsc	status,2,c
  2528  001088  D7DD               	goto	l249
  2529  00108A  0A07               	xorlw	7	; case 4
  2530  00108C  B4D8               	btfsc	status,2,c
  2531  00108E  D7DC               	goto	l250
  2532  001090  D7E1               	goto	l251
  2533  001092                     l247:
  2534                           
  2535                           ;State_Mchn.c: 274: }
  2536                           ;State_Mchn.c: 275: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2537  001092  0E00               	movlw	0
  2538  001094  6E14               	movwf	GETxAPIxVAL@index+1,c
  2539  001096  0E27               	movlw	39
  2540  001098  6E13               	movwf	GETxAPIxVAL@index,c
  2541  00109A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2542  00109E  0E05               	movlw	5
  2543  0010A0  1813               	xorwf	?_GETxAPIxVAL,w,c
  2544  0010A2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2545  0010A4  B4D8               	btfsc	status,2,c
  2546  0010A6  D27F               	goto	l304
  2547  0010A8  0E00               	movlw	0
  2548  0010AA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2549  0010AC  0E28               	movlw	40
  2550  0010AE  6E13               	movwf	GETxAPIxVAL@index,c
  2551  0010B0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2552  0010B4  0E05               	movlw	5
  2553  0010B6  1813               	xorwf	?_GETxAPIxVAL,w,c
  2554  0010B8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2555  0010BA  A4D8               	btfss	status,2,c
  2556  0010BC  D095               	goto	l253
  2557  0010BE  D273               	goto	l304
  2558  0010C0                     
  2559                           ; BSR set to: 0
  2560  0010C0  0E01               	movlw	1
  2561  0010C2  D066               	goto	L19
  2562  0010C4                     
  2563                           ; BSR set to: 0
  2564  0010C4  0E02               	movlw	2
  2565  0010C6  D064               	goto	L19
  2566  0010C8                     
  2567                           ; BSR set to: 0
  2568  0010C8  0E04               	movlw	4
  2569  0010CA  D062               	goto	L19
  2570  0010CC                     
  2571                           ; BSR set to: 0
  2572  0010CC  0E08               	movlw	8
  2573  0010CE  0100               	movlb	0	; () banked
  2574  0010D0  6F8A               	movwf	_Switch_Init& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;State_Mchn.c: 293: Red_Led(1);
  2578  0010D2  0E01               	movlw	1
  2579  0010D4  EC05  F01F         	call	_Red_Led
  2580                           
  2581                           ;State_Mchn.c: 295: }
  2582                           
  2583                           ;State_Mchn.c: 294: break;
  2584  0010D8  D266               	goto	l304
  2585  0010DA  0E00               	movlw	0
  2586  0010DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2587  0010DE  0E28               	movlw	40
  2588  0010E0  6E13               	movwf	GETxAPIxVAL@index,c
  2589  0010E2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2590                           
  2591                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2592                           ; Switch size 1, requested type "space"
  2593                           ; Number of cases is 1, Range of values is 0 to 0
  2594                           ; switch strategies available:
  2595                           ; Name         Instructions Cycles
  2596                           ; simple_byte            4     3 (average)
  2597                           ;	Chosen strategy is simple_byte
  2598  0010E6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2599  0010E8  0A00               	xorlw	0	; case 0
  2600  0010EA  A4D8               	btfss	status,2,c
  2601  0010EC  D7EF               	goto	l261
  2602                           
  2603                           ; Switch size 1, requested type "space"
  2604                           ; Number of cases is 4, Range of values is 1 to 4
  2605                           ; switch strategies available:
  2606                           ; Name         Instructions Cycles
  2607                           ; simple_byte           13     7 (average)
  2608                           ;	Chosen strategy is simple_byte
  2609  0010EE  5013               	movf	?_GETxAPIxVAL,w,c
  2610  0010F0  0A01               	xorlw	1	; case 1
  2611  0010F2  B4D8               	btfsc	status,2,c
  2612  0010F4  D051               	goto	l285
  2613  0010F6  0A03               	xorlw	3	; case 2
  2614  0010F8  B4D8               	btfsc	status,2,c
  2615  0010FA  D7E2               	goto	l258
  2616  0010FC  0A01               	xorlw	1	; case 3
  2617  0010FE  B4D8               	btfsc	status,2,c
  2618  001100  D7E1               	goto	l259
  2619  001102  0A07               	xorlw	7	; case 4
  2620  001104  B4D8               	btfsc	status,2,c
  2621  001106  D7E0               	goto	l260
  2622  001108  D7E1               	goto	l261
  2623  00110A                     
  2624                           ; BSR set to: 0
  2625  00110A  0E00               	movlw	0
  2626  00110C  D041               	goto	L19
  2627  00110E                     
  2628                           ; BSR set to: 0
  2629  00110E  0E08               	movlw	8
  2630  001110  0100               	movlb	0	; () banked
  2631  001112  6F8A               	movwf	_Switch_Init& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;State_Mchn.c: 311: Red_Led(1);
  2635  001114  0E01               	movlw	1
  2636  001116  EC05  F01F         	call	_Red_Led
  2637                           
  2638                           ;State_Mchn.c: 313: }
  2639                           
  2640                           ;State_Mchn.c: 312: break;
  2641  00111A  D245               	goto	l304
  2642  00111C  0E00               	movlw	0
  2643  00111E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2644  001120  0E28               	movlw	40
  2645  001122  6E13               	movwf	GETxAPIxVAL@index,c
  2646  001124  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2647                           
  2648                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2649                           ; Switch size 1, requested type "space"
  2650                           ; Number of cases is 1, Range of values is 0 to 0
  2651                           ; switch strategies available:
  2652                           ; Name         Instructions Cycles
  2653                           ; simple_byte            4     3 (average)
  2654                           ;	Chosen strategy is simple_byte
  2655  001128  5014               	movf	?_GETxAPIxVAL+1,w,c
  2656  00112A  0A00               	xorlw	0	; case 0
  2657  00112C  A4D8               	btfss	status,2,c
  2658  00112E  D7EF               	goto	l270
  2659                           
  2660                           ; Switch size 1, requested type "space"
  2661                           ; Number of cases is 4, Range of values is 1 to 4
  2662                           ; switch strategies available:
  2663                           ; Name         Instructions Cycles
  2664                           ; simple_byte           13     7 (average)
  2665                           ;	Chosen strategy is simple_byte
  2666  001130  5013               	movf	?_GETxAPIxVAL,w,c
  2667  001132  0A01               	xorlw	1	; case 1
  2668  001134  B4D8               	btfsc	status,2,c
  2669  001136  D7C4               	goto	l258
  2670  001138  0A03               	xorlw	3	; case 2
  2671  00113A  B4D8               	btfsc	status,2,c
  2672  00113C  D02D               	goto	l285
  2673  00113E  0A01               	xorlw	1	; case 3
  2674  001140  B4D8               	btfsc	status,2,c
  2675  001142  D7E3               	goto	l268
  2676  001144  0A07               	xorlw	7	; case 4
  2677  001146  B4D8               	btfsc	status,2,c
  2678  001148  D020               	goto	l283
  2679  00114A  D7E1               	goto	l270
  2680  00114C                     
  2681                           ; BSR set to: 0
  2682  00114C  0E08               	movlw	8
  2683  00114E  0100               	movlb	0	; () banked
  2684  001150  6F8A               	movwf	_Switch_Init& (0+255),b
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;State_Mchn.c: 329: Red_Led(1);
  2688  001152  0E01               	movlw	1
  2689  001154  EC05  F01F         	call	_Red_Led
  2690                           
  2691                           ;State_Mchn.c: 331: }
  2692                           
  2693                           ;State_Mchn.c: 330: break;
  2694  001158  D226               	goto	l304
  2695  00115A  0E00               	movlw	0
  2696  00115C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2697  00115E  0E28               	movlw	40
  2698  001160  6E13               	movwf	GETxAPIxVAL@index,c
  2699  001162  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2700                           
  2701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2702                           ; Switch size 1, requested type "space"
  2703                           ; Number of cases is 1, Range of values is 0 to 0
  2704                           ; switch strategies available:
  2705                           ; Name         Instructions Cycles
  2706                           ; simple_byte            4     3 (average)
  2707                           ;	Chosen strategy is simple_byte
  2708  001166  5014               	movf	?_GETxAPIxVAL+1,w,c
  2709  001168  0A00               	xorlw	0	; case 0
  2710  00116A  A4D8               	btfss	status,2,c
  2711  00116C  D7EF               	goto	l278
  2712                           
  2713                           ; Switch size 1, requested type "space"
  2714                           ; Number of cases is 4, Range of values is 1 to 4
  2715                           ; switch strategies available:
  2716                           ; Name         Instructions Cycles
  2717                           ; simple_byte           13     7 (average)
  2718                           ;	Chosen strategy is simple_byte
  2719  00116E  5013               	movf	?_GETxAPIxVAL,w,c
  2720  001170  0A01               	xorlw	1	; case 1
  2721  001172  B4D8               	btfsc	status,2,c
  2722  001174  D7A7               	goto	l259
  2723  001176  0A03               	xorlw	3	; case 2
  2724  001178  B4D8               	btfsc	status,2,c
  2725  00117A  D7C7               	goto	l268
  2726  00117C  0A01               	xorlw	1	; case 3
  2727  00117E  B4D8               	btfsc	status,2,c
  2728  001180  D00B               	goto	l285
  2729  001182  0A07               	xorlw	7	; case 4
  2730  001184  B4D8               	btfsc	status,2,c
  2731  001186  D003               	goto	l284
  2732  001188  D7E1               	goto	l278
  2733  00118A                     l283:
  2734                           
  2735                           ; BSR set to: 0
  2736  00118A  0E06               	movlw	6
  2737  00118C  D001               	goto	L19
  2738  00118E                     l284:
  2739                           
  2740                           ; BSR set to: 0
  2741  00118E  0E03               	movlw	3
  2742  001190                     L19:
  2743  001190  0100               	movlb	0	; () banked
  2744  001192  6F89               	movwf	_Switch_Program& (0+255),b
  2745                           
  2746                           ;State_Mchn.c: 342: Switch_Init = 7;
  2747  001194  0E07               	movlw	7
  2748  001196  D4E6               	goto	L2
  2749  001198                     l285:
  2750                           
  2751                           ; BSR set to: 0
  2752  001198  0E00               	movlw	0
  2753  00119A  D4E3               	goto	L1
  2754  00119C                     
  2755                           ; BSR set to: 0
  2756  00119C  0E08               	movlw	8
  2757  00119E  0100               	movlb	0	; () banked
  2758  0011A0  6F8A               	movwf	_Switch_Init& (0+255),b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;State_Mchn.c: 347: Red_Led(1);
  2762  0011A2  0E01               	movlw	1
  2763  0011A4  EC05  F01F         	call	_Red_Led
  2764                           
  2765                           ;State_Mchn.c: 349: }
  2766                           
  2767                           ;State_Mchn.c: 348: break;
  2768  0011A8  D1FE               	goto	l304
  2769  0011AA  0E00               	movlw	0
  2770  0011AC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2771  0011AE  0E28               	movlw	40
  2772  0011B0  6E13               	movwf	GETxAPIxVAL@index,c
  2773  0011B2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2774                           
  2775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2776                           ; Switch size 1, requested type "space"
  2777                           ; Number of cases is 1, Range of values is 0 to 0
  2778                           ; switch strategies available:
  2779                           ; Name         Instructions Cycles
  2780                           ; simple_byte            4     3 (average)
  2781                           ;	Chosen strategy is simple_byte
  2782  0011B6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2783  0011B8  0A00               	xorlw	0	; case 0
  2784  0011BA  A4D8               	btfss	status,2,c
  2785  0011BC  D7EF               	goto	l286
  2786                           
  2787                           ; Switch size 1, requested type "space"
  2788                           ; Number of cases is 4, Range of values is 1 to 4
  2789                           ; switch strategies available:
  2790                           ; Name         Instructions Cycles
  2791                           ; simple_byte           13     7 (average)
  2792                           ;	Chosen strategy is simple_byte
  2793  0011BE  5013               	movf	?_GETxAPIxVAL,w,c
  2794  0011C0  0A01               	xorlw	1	; case 1
  2795  0011C2  B4D8               	btfsc	status,2,c
  2796  0011C4  D781               	goto	l260
  2797  0011C6  0A03               	xorlw	3	; case 2
  2798  0011C8  B4D8               	btfsc	status,2,c
  2799  0011CA  D7DF               	goto	l283
  2800  0011CC  0A01               	xorlw	1	; case 3
  2801  0011CE  B4D8               	btfsc	status,2,c
  2802  0011D0  D7DE               	goto	l284
  2803  0011D2  0A07               	xorlw	7	; case 4
  2804  0011D4  B4D8               	btfsc	status,2,c
  2805  0011D6  D7E0               	goto	l285
  2806  0011D8  D7E1               	goto	l286
  2807  0011DA  0E08               	movlw	8
  2808  0011DC  0100               	movlb	0	; () banked
  2809  0011DE  6F8A               	movwf	_Switch_Init& (0+255),b
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;State_Mchn.c: 352: Red_Led(1);
  2813  0011E0  0E01               	movlw	1
  2814  0011E2  EC05  F01F         	call	_Red_Led
  2815                           
  2816                           ;State_Mchn.c: 354: }
  2817                           
  2818                           ;State_Mchn.c: 353: break;
  2819  0011E6  D1DF               	goto	l304
  2820  0011E8                     l253:
  2821  0011E8  0E00               	movlw	0
  2822  0011EA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2823  0011EC  0E27               	movlw	39
  2824  0011EE  6E13               	movwf	GETxAPIxVAL@index,c
  2825  0011F0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2826                           
  2827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2828                           ; Switch size 1, requested type "space"
  2829                           ; Number of cases is 1, Range of values is 0 to 0
  2830                           ; switch strategies available:
  2831                           ; Name         Instructions Cycles
  2832                           ; simple_byte            4     3 (average)
  2833                           ;	Chosen strategy is simple_byte
  2834  0011F4  5014               	movf	?_GETxAPIxVAL+1,w,c
  2835  0011F6  0A00               	xorlw	0	; case 0
  2836  0011F8  A4D8               	btfss	status,2,c
  2837  0011FA  D7EF               	goto	l287
  2838                           
  2839                           ; Switch size 1, requested type "space"
  2840                           ; Number of cases is 4, Range of values is 1 to 4
  2841                           ; switch strategies available:
  2842                           ; Name         Instructions Cycles
  2843                           ; simple_byte           13     7 (average)
  2844                           ;	Chosen strategy is simple_byte
  2845  0011FC  5013               	movf	?_GETxAPIxVAL,w,c
  2846  0011FE  0A01               	xorlw	1	; case 1
  2847  001200  B4D8               	btfsc	status,2,c
  2848  001202  D76B               	goto	l255
  2849  001204  0A03               	xorlw	3	; case 2
  2850  001206  B4D8               	btfsc	status,2,c
  2851  001208  D789               	goto	l264
  2852  00120A  0A01               	xorlw	1	; case 3
  2853  00120C  B4D8               	btfsc	status,2,c
  2854  00120E  D7A5               	goto	l272
  2855  001210  0A07               	xorlw	7	; case 4
  2856  001212  B4D8               	btfsc	status,2,c
  2857  001214  D7CA               	goto	l280
  2858  001216  D7E1               	goto	l287
  2859  001218  0E0B               	movlw	11
  2860  00121A  D4A3               	goto	L1
  2861  00121C                     
  2862                           ; BSR set to: 0
  2863                           
  2864                           ; BSR set to: 0
  2865  00121C  0E00               	movlw	0
  2866  00121E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2867  001220  0E20               	movlw	32
  2868  001222  6E13               	movwf	GETxAPIxVAL@index,c
  2869  001224  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2870  001228  5013               	movf	?_GETxAPIxVAL,w,c
  2871  00122A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2872  00122C  A4D8               	btfss	status,2,c
  2873  00122E  D00A               	goto	u8770
  2874  001230  0E00               	movlw	0
  2875  001232  6E14               	movwf	GETxAPIxVAL@index+1,c
  2876  001234  0E46               	movlw	70
  2877  001236  6E13               	movwf	GETxAPIxVAL@index,c
  2878  001238  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2879  00123C  5013               	movf	?_GETxAPIxVAL,w,c
  2880  00123E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2881  001240  B4D8               	btfsc	status,2,c
  2882  001242  D007               	goto	l290
  2883  001244                     u8770:
  2884                           
  2885                           ;State_Mchn.c: 362: {
  2886                           ;State_Mchn.c: 363: Switch_Main = 3;
  2887  001244  0E03               	movlw	3
  2888  001246  0100               	movlb	0	; () banked
  2889  001248  6FE1               	movwf	_Switch_Main& (0+255),b
  2890                           
  2891                           ;State_Mchn.c: 364: Switch_Init = 0;
  2892  00124A  0E00               	movlw	0
  2893  00124C  6F8A               	movwf	_Switch_Init& (0+255),b
  2894                           
  2895                           ;State_Mchn.c: 365: Stop_Program = 0;
  2896  00124E  0E00               	movlw	0
  2897  001250  6F85               	movwf	_Stop_Program& (0+255),b
  2898  001252                     l290:
  2899                           
  2900                           ;State_Mchn.c: 366: }
  2901                           ;State_Mchn.c: 367: Green_Led(3);
  2902                           
  2903                           ; BSR set to: 0
  2904  001252  0E03               	movlw	3
  2905  001254  EC45  F01F         	call	_Green_Led
  2906                           
  2907                           ;State_Mchn.c: 368: Red_Led(0);
  2908  001258  0E00               	movlw	0
  2909  00125A  EC05  F01F         	call	_Red_Led
  2910                           
  2911                           ;State_Mchn.c: 369: break;
  2912  00125E  D1A3               	goto	l304
  2913  001260  0E00               	movlw	0
  2914  001262  6E14               	movwf	GETxAPIxVAL@index+1,c
  2915  001264  0E27               	movlw	39
  2916  001266  6E13               	movwf	GETxAPIxVAL@index,c
  2917  001268  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2918  00126C  0E05               	movlw	5
  2919  00126E  1813               	xorwf	?_GETxAPIxVAL,w,c
  2920  001270  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2921  001272  A4D8               	btfss	status,2,c
  2922  001274  D012               	goto	l296
  2923  001276                     u8780:
  2924                           
  2925                           ;State_Mchn.c: 372: {
  2926                           ;State_Mchn.c: 373: Switch_Program = 0;
  2927  001276  0E00               	movlw	0
  2928  001278  D005               	goto	L23
  2929  00127A                     
  2930                           ; BSR set to: 0
  2931  00127A  0E01               	movlw	1
  2932  00127C  D003               	goto	L23
  2933  00127E                     
  2934                           ; BSR set to: 0
  2935  00127E  0E03               	movlw	3
  2936  001280  D001               	goto	L23
  2937  001282                     
  2938                           ; BSR set to: 0
  2939  001282  0E02               	movlw	2
  2940  001284                     L23:
  2941  001284  0100               	movlb	0	; () banked
  2942  001286  6F89               	movwf	_Switch_Program& (0+255),b
  2943  001288  0E0A               	movlw	10
  2944  00128A  D46C               	goto	L2
  2945  00128C                     
  2946                           ; BSR set to: 0
  2947  00128C  0E0B               	movlw	11
  2948  00128E  0100               	movlb	0	; () banked
  2949  001290  6F8A               	movwf	_Switch_Init& (0+255),b
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;State_Mchn.c: 383: Red_Led(1);
  2953  001292  0E01               	movlw	1
  2954  001294  EC05  F01F         	call	_Red_Led
  2955                           
  2956                           ;State_Mchn.c: 385: }
  2957                           
  2958                           ;State_Mchn.c: 384: break;
  2959  001298  D186               	goto	l304
  2960  00129A                     l296:
  2961  00129A  0E00               	movlw	0
  2962  00129C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2963  00129E  0E27               	movlw	39
  2964  0012A0  6E13               	movwf	GETxAPIxVAL@index,c
  2965  0012A2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  2966                           
  2967                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2968                           ; Switch size 1, requested type "space"
  2969                           ; Number of cases is 1, Range of values is 0 to 0
  2970                           ; switch strategies available:
  2971                           ; Name         Instructions Cycles
  2972                           ; simple_byte            4     3 (average)
  2973                           ;	Chosen strategy is simple_byte
  2974  0012A6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2975  0012A8  0A00               	xorlw	0	; case 0
  2976  0012AA  A4D8               	btfss	status,2,c
  2977  0012AC  D7EF               	goto	l302
  2978                           
  2979                           ; Switch size 1, requested type "space"
  2980                           ; Number of cases is 4, Range of values is 1 to 4
  2981                           ; switch strategies available:
  2982                           ; Name         Instructions Cycles
  2983                           ; simple_byte           13     7 (average)
  2984                           ;	Chosen strategy is simple_byte
  2985  0012AE  5013               	movf	?_GETxAPIxVAL,w,c
  2986  0012B0  0A01               	xorlw	1	; case 1
  2987  0012B2  B4D8               	btfsc	status,2,c
  2988  0012B4  D7E2               	goto	l297
  2989  0012B6  0A03               	xorlw	3	; case 2
  2990  0012B8  B4D8               	btfsc	status,2,c
  2991  0012BA  D7E1               	goto	l299
  2992  0012BC  0A01               	xorlw	1	; case 3
  2993  0012BE  B4D8               	btfsc	status,2,c
  2994  0012C0  D7DA               	goto	u8780
  2995  0012C2  0A07               	xorlw	7	; case 4
  2996  0012C4  B4D8               	btfsc	status,2,c
  2997  0012C6  D7DD               	goto	l301
  2998  0012C8  D7E1               	goto	l302
  2999  0012CA  0E00               	movlw	0
  3000  0012CC  0100               	movlb	0	; () banked
  3001  0012CE  6F8A               	movwf	_Switch_Init& (0+255),b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;State_Mchn.c: 389: Red_Led(1);
  3005  0012D0  0E01               	movlw	1
  3006  0012D2  EC05  F01F         	call	_Red_Led
  3007                           
  3008                           ;State_Mchn.c: 391: }
  3009                           
  3010                           ;State_Mchn.c: 390: break;
  3011  0012D6  D167               	goto	l304
  3012  0012D8                     l203:
  3013  0012D8  0100               	movlb	0	; () banked
  3014  0012DA  518A               	movf	_Switch_Init& (0+255),w,b
  3015                           
  3016                           ; Switch size 1, requested type "space"
  3017                           ; Number of cases is 12, Range of values is 0 to 11
  3018                           ; switch strategies available:
  3019                           ; Name         Instructions Cycles
  3020                           ; simple_byte           37    19 (average)
  3021                           ;	Chosen strategy is simple_byte
  3022  0012DC  0A00               	xorlw	0	; case 0
  3023  0012DE  B4D8               	btfsc	status,2,c
  3024  0012E0  D423               	goto	l204
  3025  0012E2  0A01               	xorlw	1	; case 1
  3026  0012E4  B4D8               	btfsc	status,2,c
  3027  0012E6  D428               	goto	l206
  3028  0012E8  0A03               	xorlw	3	; case 2
  3029  0012EA  B4D8               	btfsc	status,2,c
  3030  0012EC  D4AF               	goto	l213
  3031  0012EE  0A01               	xorlw	1	; case 3
  3032  0012F0  B4D8               	btfsc	status,2,c
  3033  0012F2  D4F3               	goto	l215
  3034  0012F4  0A07               	xorlw	7	; case 4
  3035  0012F6  B4D8               	btfsc	status,2,c
  3036  0012F8  D589               	goto	l223
  3037  0012FA  0A01               	xorlw	1	; case 5
  3038  0012FC  B4D8               	btfsc	status,2,c
  3039  0012FE  D612               	goto	l227
  3040  001300  0A03               	xorlw	3	; case 6
  3041  001302  B4D8               	btfsc	status,2,c
  3042  001304  D62A               	goto	l230
  3043  001306  0A01               	xorlw	1	; case 7
  3044  001308  B4D8               	btfsc	status,2,c
  3045  00130A  D629               	goto	l231
  3046  00130C  0A0F               	xorlw	15	; case 8
  3047  00130E  B4D8               	btfsc	status,2,c
  3048  001310  D652               	goto	l235
  3049  001312  0A01               	xorlw	1	; case 9
  3050  001314  B4D8               	btfsc	status,2,c
  3051  001316  D780               	goto	l288
  3052  001318  0A03               	xorlw	3	; case 10
  3053  00131A  B4D8               	btfsc	status,2,c
  3054  00131C  D77F               	goto	l289
  3055  00131E  0A01               	xorlw	1	; case 11
  3056  001320  B4D8               	btfsc	status,2,c
  3057  001322  D79E               	goto	l293
  3058  001324  D7D2               	goto	l303
  3059  001326                     
  3060                           ; BSR set to: 0
  3061                           
  3062                           ; BSR set to: 0
  3063  001326  0E01               	movlw	1
  3064  001328  6FCD               	movwf	Train_Path@To& (0+255),b
  3065  00132A  0E03               	movlw	3
  3066  00132C  EC27  F011         	call	_Train_Path
  3067  001330  0900               	iorlw	0
  3068  001332  A4D8               	btfss	status,2,c
  3069  001334  D087               	goto	l310
  3070                           
  3071                           ;State_Mchn.c: 398: {
  3072                           ;State_Mchn.c: 399: Switch_Program = 1;
  3073  001336  0E01               	movlw	1
  3074  001338  0100               	movlb	0	; () banked
  3075  00133A  6F89               	movwf	_Switch_Program& (0+255),b
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;State_Mchn.c: 400: EEPROMxSTORE();
  3079  00133C  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3080  001340                     l9154:
  3081                           
  3082                           ;State_Mchn.c: 401: if(Stop_Program == 1)
  3083  001340  0100               	movlb	0	; () banked
  3084  001342  0585               	decf	_Stop_Program& (0+255),w,b
  3085  001344  A4D8               	btfss	status,2,c
  3086  001346  D07E               	goto	l310
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;State_Mchn.c: 402: {
  3090                           ;State_Mchn.c: 403: Switch_Main = 1;
  3091  001348  0E01               	movlw	1
  3092  00134A  6FE1               	movwf	_Switch_Main& (0+255),b
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;State_Mchn.c: 405: }
  3096                           ;State_Mchn.c: 406: }
  3097                           ;State_Mchn.c: 407: break;
  3098                           
  3099                           ; BSR set to: 0
  3100  00134C  D07B               	goto	l310
  3101  00134E                     
  3102                           ; BSR set to: 0
  3103                           
  3104                           ; BSR set to: 0
  3105  00134E  0E03               	movlw	3
  3106  001350  6FCD               	movwf	Train_Path@To& (0+255),b
  3107  001352  0E02               	movlw	2
  3108  001354  EC27  F011         	call	_Train_Path
  3109  001358  0900               	iorlw	0
  3110  00135A  A4D8               	btfss	status,2,c
  3111  00135C  D073               	goto	l310
  3112                           
  3113                           ;State_Mchn.c: 410: {
  3114                           ;State_Mchn.c: 411: Switch_Program = 2;
  3115  00135E  0E02               	movlw	2
  3116  001360  0100               	movlb	0	; () banked
  3117  001362  6F89               	movwf	_Switch_Program& (0+255),b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;State_Mchn.c: 412: EEPROMxSTORE();
  3121  001364  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3122  001368  D7EB               	goto	l9154
  3123  00136A                     
  3124                           ; BSR set to: 0
  3125                           
  3126                           ; BSR set to: 0
  3127  00136A  0E04               	movlw	4
  3128  00136C  6FCD               	movwf	Train_Path@To& (0+255),b
  3129  00136E  0E01               	movlw	1
  3130  001370  EC27  F011         	call	_Train_Path
  3131  001374  0900               	iorlw	0
  3132  001376  A4D8               	btfss	status,2,c
  3133  001378  D065               	goto	l310
  3134                           
  3135                           ;State_Mchn.c: 422: {
  3136                           ;State_Mchn.c: 423: Switch_Program = 3;
  3137  00137A  0E03               	movlw	3
  3138  00137C  0100               	movlb	0	; () banked
  3139  00137E  6F89               	movwf	_Switch_Program& (0+255),b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;State_Mchn.c: 424: EEPROMxSTORE();
  3143  001380  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3144  001384  D7DD               	goto	l9154
  3145  001386                     
  3146                           ; BSR set to: 0
  3147                           
  3148                           ; BSR set to: 0
  3149  001386  0E01               	movlw	1
  3150  001388  6FCD               	movwf	Train_Path@To& (0+255),b
  3151  00138A  0E03               	movlw	3
  3152  00138C  EC27  F011         	call	_Train_Path
  3153  001390  0900               	iorlw	0
  3154  001392  A4D8               	btfss	status,2,c
  3155  001394  D057               	goto	l310
  3156                           
  3157                           ;State_Mchn.c: 434: {
  3158                           ;State_Mchn.c: 435: Switch_Program = 4;
  3159  001396  0E04               	movlw	4
  3160  001398  0100               	movlb	0	; () banked
  3161  00139A  6F89               	movwf	_Switch_Program& (0+255),b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;State_Mchn.c: 436: EEPROMxSTORE();
  3165  00139C  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3166  0013A0  D7CF               	goto	l9154
  3167  0013A2                     
  3168                           ; BSR set to: 0
  3169                           
  3170                           ; BSR set to: 0
  3171  0013A2  0E02               	movlw	2
  3172  0013A4  6FCD               	movwf	Train_Path@To& (0+255),b
  3173  0013A6  0E04               	movlw	4
  3174  0013A8  EC27  F011         	call	_Train_Path
  3175  0013AC  0900               	iorlw	0
  3176  0013AE  A4D8               	btfss	status,2,c
  3177  0013B0  D049               	goto	l310
  3178                           
  3179                           ;State_Mchn.c: 446: {
  3180                           ;State_Mchn.c: 447: Switch_Program = 5;
  3181  0013B2  0E05               	movlw	5
  3182  0013B4  0100               	movlb	0	; () banked
  3183  0013B6  6F89               	movwf	_Switch_Program& (0+255),b
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;State_Mchn.c: 448: EEPROMxSTORE();
  3187  0013B8  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3188  0013BC  D7C1               	goto	l9154
  3189  0013BE                     
  3190                           ; BSR set to: 0
  3191                           
  3192                           ; BSR set to: 0
  3193  0013BE  0E04               	movlw	4
  3194  0013C0  6FCD               	movwf	Train_Path@To& (0+255),b
  3195  0013C2  0E01               	movlw	1
  3196  0013C4  EC27  F011         	call	_Train_Path
  3197  0013C8  0900               	iorlw	0
  3198  0013CA  A4D8               	btfss	status,2,c
  3199  0013CC  D03B               	goto	l310
  3200                           
  3201                           ;State_Mchn.c: 458: {
  3202                           ;State_Mchn.c: 459: Switch_Program = 6;
  3203  0013CE  0E06               	movlw	6
  3204  0013D0  0100               	movlb	0	; () banked
  3205  0013D2  6F89               	movwf	_Switch_Program& (0+255),b
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;State_Mchn.c: 460: EEPROMxSTORE();
  3209  0013D4  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3210  0013D8  D7B3               	goto	l9154
  3211  0013DA                     
  3212                           ; BSR set to: 0
  3213                           
  3214                           ; BSR set to: 0
  3215  0013DA  0E03               	movlw	3
  3216  0013DC  6FCD               	movwf	Train_Path@To& (0+255),b
  3217  0013DE  0E02               	movlw	2
  3218  0013E0  EC27  F011         	call	_Train_Path
  3219  0013E4  0900               	iorlw	0
  3220  0013E6  A4D8               	btfss	status,2,c
  3221  0013E8  D02D               	goto	l310
  3222                           
  3223                           ;State_Mchn.c: 470: {
  3224                           ;State_Mchn.c: 471: Switch_Program = 7;
  3225  0013EA  0E07               	movlw	7
  3226  0013EC  0100               	movlb	0	; () banked
  3227  0013EE  6F89               	movwf	_Switch_Program& (0+255),b
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;State_Mchn.c: 472: EEPROMxSTORE();
  3231  0013F0  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3232  0013F4  D7A5               	goto	l9154
  3233  0013F6                     
  3234                           ; BSR set to: 0
  3235                           
  3236                           ; BSR set to: 0
  3237  0013F6  0E02               	movlw	2
  3238  0013F8  6FCD               	movwf	Train_Path@To& (0+255),b
  3239  0013FA  0E04               	movlw	4
  3240  0013FC  EC27  F011         	call	_Train_Path
  3241  001400  0900               	iorlw	0
  3242  001402  A4D8               	btfss	status,2,c
  3243  001404  D01F               	goto	l310
  3244                           
  3245                           ;State_Mchn.c: 482: {
  3246                           ;State_Mchn.c: 483: Switch_Program = 0;
  3247  001406  0E00               	movlw	0
  3248  001408  0100               	movlb	0	; () banked
  3249  00140A  6F89               	movwf	_Switch_Program& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;State_Mchn.c: 484: EEPROMxSTORE();
  3253  00140C  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3254  001410  D797               	goto	l9154
  3255  001412                     
  3256                           ; BSR set to: 0
  3257                           
  3258                           ; BSR set to: 0
  3259  001412  5189               	movf	_Switch_Program& (0+255),w,b
  3260                           
  3261                           ; Switch size 1, requested type "space"
  3262                           ; Number of cases is 8, Range of values is 0 to 7
  3263                           ; switch strategies available:
  3264                           ; Name         Instructions Cycles
  3265                           ; simple_byte           25    13 (average)
  3266                           ;	Chosen strategy is simple_byte
  3267  001414  0A00               	xorlw	0	; case 0
  3268  001416  B4D8               	btfsc	status,2,c
  3269  001418  D786               	goto	l307
  3270  00141A  0A01               	xorlw	1	; case 1
  3271  00141C  B4D8               	btfsc	status,2,c
  3272  00141E  D797               	goto	l311
  3273  001420  0A03               	xorlw	3	; case 2
  3274  001422  B4D8               	btfsc	status,2,c
  3275  001424  D7A2               	goto	l314
  3276  001426  0A01               	xorlw	1	; case 3
  3277  001428  B4D8               	btfsc	status,2,c
  3278  00142A  D7AD               	goto	l317
  3279  00142C  0A07               	xorlw	7	; case 4
  3280  00142E  B4D8               	btfsc	status,2,c
  3281  001430  D7B8               	goto	l320
  3282  001432  0A01               	xorlw	1	; case 5
  3283  001434  B4D8               	btfsc	status,2,c
  3284  001436  D7C3               	goto	l323
  3285  001438  0A03               	xorlw	3	; case 6
  3286  00143A  B4D8               	btfsc	status,2,c
  3287  00143C  D7CE               	goto	l326
  3288  00143E  0A01               	xorlw	1	; case 7
  3289  001440  B4D8               	btfsc	status,2,c
  3290  001442  D7D9               	goto	l329
  3291  001444                     l310:
  3292                           
  3293                           ;State_Mchn.c: 680: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3294                           
  3295                           ; BSR set to: 0
  3296  001444  0E00               	movlw	0
  3297  001446  6E14               	movwf	GETxAPIxVAL@index+1,c
  3298  001448  0E21               	movlw	33
  3299  00144A  6E13               	movwf	GETxAPIxVAL@index,c
  3300  00144C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3301  001450  5013               	movf	?_GETxAPIxVAL,w,c
  3302  001452  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3303  001454  A4D8               	btfss	status,2,c
  3304  001456  D00A               	goto	u8960
  3305  001458  0E00               	movlw	0
  3306  00145A  6E14               	movwf	GETxAPIxVAL@index+1,c
  3307  00145C  0E47               	movlw	71
  3308  00145E  6E13               	movwf	GETxAPIxVAL@index,c
  3309  001460  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3310  001464  5013               	movf	?_GETxAPIxVAL,w,c
  3311  001466  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3312  001468  B4D8               	btfsc	status,2,c
  3313  00146A  D00D               	goto	l333
  3314  00146C                     u8960:
  3315                           
  3316                           ;State_Mchn.c: 681: {
  3317                           ;State_Mchn.c: 682: Stop_Program = 1;
  3318  00146C  0E01               	movlw	1
  3319  00146E  0100               	movlb	0	; () banked
  3320  001470  6F85               	movwf	_Stop_Program& (0+255),b
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;State_Mchn.c: 683: SETxAPIxVAL(71, 0);
  3324  001472  0E00               	movlw	0
  3325  001474  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3326  001476  0E47               	movlw	71
  3327  001478  6E19               	movwf	SETxAPIxVAL@index,c
  3328  00147A  0E00               	movlw	0
  3329  00147C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3330  00147E  0E00               	movlw	0
  3331  001480  6E1B               	movwf	SETxAPIxVAL@value,c
  3332  001482  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  3333  001486                     l333:
  3334                           
  3335                           ;State_Mchn.c: 684: }
  3336                           ;State_Mchn.c: 686: if(Stop_Program == 1)
  3337  001486  0100               	movlb	0	; () banked
  3338  001488  0585               	decf	_Stop_Program& (0+255),w,b
  3339  00148A  A4D8               	btfss	status,2,c
  3340  00148C  D003               	goto	l336
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;State_Mchn.c: 687: {
  3344                           ;State_Mchn.c: 688: Red_Led(2);
  3345  00148E  0E02               	movlw	2
  3346  001490  EC05  F01F         	call	_Red_Led
  3347  001494                     l336:
  3348                           
  3349                           ;State_Mchn.c: 689: }
  3350                           ;State_Mchn.c: 691: Green_Led(1);
  3351  001494  0E01               	movlw	1
  3352  001496  EC45  F01F         	call	_Green_Led
  3353                           
  3354                           ;State_Mchn.c: 693: break;
  3355  00149A  D085               	goto	l304
  3356  00149C  0E01               	movlw	1
  3357  00149E  0100               	movlb	0	; () banked
  3358  0014A0  6FCD               	movwf	Train_Path@To& (0+255),b
  3359  0014A2  0E03               	movlw	3
  3360  0014A4  EC27  F011         	call	_Train_Path
  3361  0014A8  0900               	iorlw	0
  3362  0014AA  A4D8               	btfss	status,2,c
  3363  0014AC  D044               	goto	l342
  3364                           
  3365                           ;State_Mchn.c: 699: {
  3366                           ;State_Mchn.c: 700: Switch_Program = 1;
  3367  0014AE  0E01               	movlw	1
  3368  0014B0  0100               	movlb	0	; () banked
  3369  0014B2  6F89               	movwf	_Switch_Program& (0+255),b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;State_Mchn.c: 701: EEPROMxSTORE();
  3373  0014B4  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3374  0014B8                     l9250:
  3375                           
  3376                           ;State_Mchn.c: 702: if(Stop_Program == 1)
  3377  0014B8  0100               	movlb	0	; () banked
  3378  0014BA  0585               	decf	_Stop_Program& (0+255),w,b
  3379  0014BC  A4D8               	btfss	status,2,c
  3380  0014BE  D03B               	goto	l342
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;State_Mchn.c: 703: {
  3384                           ;State_Mchn.c: 704: Switch_Main = 1;
  3385  0014C0  0E01               	movlw	1
  3386  0014C2  6FE1               	movwf	_Switch_Main& (0+255),b
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;State_Mchn.c: 706: }
  3390                           ;State_Mchn.c: 707: }
  3391                           ;State_Mchn.c: 708: break;
  3392                           
  3393                           ; BSR set to: 0
  3394  0014C4  D038               	goto	l342
  3395  0014C6                     
  3396                           ; BSR set to: 0
  3397                           
  3398                           ; BSR set to: 0
  3399  0014C6  0E04               	movlw	4
  3400  0014C8  6FCD               	movwf	Train_Path@To& (0+255),b
  3401  0014CA  0E01               	movlw	1
  3402  0014CC  EC27  F011         	call	_Train_Path
  3403  0014D0  0900               	iorlw	0
  3404  0014D2  A4D8               	btfss	status,2,c
  3405  0014D4  D030               	goto	l342
  3406                           
  3407                           ;State_Mchn.c: 711: {
  3408                           ;State_Mchn.c: 712: Switch_Program = 2;
  3409  0014D6  0E02               	movlw	2
  3410  0014D8  0100               	movlb	0	; () banked
  3411  0014DA  6F89               	movwf	_Switch_Program& (0+255),b
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;State_Mchn.c: 713: EEPROMxSTORE();
  3415  0014DC  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3416  0014E0  D7EB               	goto	l9250
  3417  0014E2                     
  3418                           ; BSR set to: 0
  3419                           
  3420                           ; BSR set to: 0
  3421  0014E2  0E02               	movlw	2
  3422  0014E4  6FCD               	movwf	Train_Path@To& (0+255),b
  3423  0014E6  0E04               	movlw	4
  3424  0014E8  EC27  F011         	call	_Train_Path
  3425  0014EC  0900               	iorlw	0
  3426  0014EE  A4D8               	btfss	status,2,c
  3427  0014F0  D022               	goto	l342
  3428                           
  3429                           ;State_Mchn.c: 723: {
  3430                           ;State_Mchn.c: 724: Switch_Program = 3;
  3431  0014F2  0E03               	movlw	3
  3432  0014F4  0100               	movlb	0	; () banked
  3433  0014F6  6F89               	movwf	_Switch_Program& (0+255),b
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;State_Mchn.c: 725: EEPROMxSTORE();
  3437  0014F8  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3438  0014FC  D7DD               	goto	l9250
  3439  0014FE                     
  3440                           ; BSR set to: 0
  3441                           
  3442                           ; BSR set to: 0
  3443  0014FE  0E03               	movlw	3
  3444  001500  6FCD               	movwf	Train_Path@To& (0+255),b
  3445  001502  0E02               	movlw	2
  3446  001504  EC27  F011         	call	_Train_Path
  3447  001508  0900               	iorlw	0
  3448  00150A  A4D8               	btfss	status,2,c
  3449  00150C  D014               	goto	l342
  3450                           
  3451                           ;State_Mchn.c: 735: {
  3452                           ;State_Mchn.c: 736: Switch_Program = 0;
  3453  00150E  0E00               	movlw	0
  3454  001510  0100               	movlb	0	; () banked
  3455  001512  6F89               	movwf	_Switch_Program& (0+255),b
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;State_Mchn.c: 737: EEPROMxSTORE();
  3459  001514  EC62  F019         	call	_EEPROMxSTORE	;wreg free
  3460  001518  D7CF               	goto	l9250
  3461  00151A                     
  3462                           ; BSR set to: 0
  3463  00151A  0100               	movlb	0	; () banked
  3464  00151C  5189               	movf	_Switch_Program& (0+255),w,b
  3465                           
  3466                           ; Switch size 1, requested type "space"
  3467                           ; Number of cases is 4, Range of values is 0 to 3
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; simple_byte           13     7 (average)
  3471                           ;	Chosen strategy is simple_byte
  3472  00151E  0A00               	xorlw	0	; case 0
  3473  001520  B4D8               	btfsc	status,2,c
  3474  001522  D7BC               	goto	l339
  3475  001524  0A01               	xorlw	1	; case 1
  3476  001526  B4D8               	btfsc	status,2,c
  3477  001528  D7CE               	goto	l343
  3478  00152A  0A03               	xorlw	3	; case 2
  3479  00152C  B4D8               	btfsc	status,2,c
  3480  00152E  D7D9               	goto	l346
  3481  001530  0A01               	xorlw	1	; case 3
  3482  001532  B4D8               	btfsc	status,2,c
  3483  001534  D7E4               	goto	l349
  3484  001536                     l342:
  3485                           
  3486                           ;State_Mchn.c: 931: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3487                           
  3488                           ; BSR set to: 0
  3489  001536  0E00               	movlw	0
  3490  001538  6E14               	movwf	GETxAPIxVAL@index+1,c
  3491  00153A  0E21               	movlw	33
  3492  00153C  6E13               	movwf	GETxAPIxVAL@index,c
  3493  00153E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3494  001542  5013               	movf	?_GETxAPIxVAL,w,c
  3495  001544  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3496  001546  A4D8               	btfss	status,2,c
  3497  001548  D00A               	goto	u9070
  3498  00154A  0E00               	movlw	0
  3499  00154C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3500  00154E  0E47               	movlw	71
  3501  001550  6E13               	movwf	GETxAPIxVAL@index,c
  3502  001552  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3503  001556  5013               	movf	?_GETxAPIxVAL,w,c
  3504  001558  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3505  00155A  B4D8               	btfsc	status,2,c
  3506  00155C  D00D               	goto	l353
  3507  00155E                     u9070:
  3508                           
  3509                           ;State_Mchn.c: 932: {
  3510                           ;State_Mchn.c: 933: Stop_Program = 1;
  3511  00155E  0E01               	movlw	1
  3512  001560  0100               	movlb	0	; () banked
  3513  001562  6F85               	movwf	_Stop_Program& (0+255),b
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;State_Mchn.c: 934: SETxAPIxVAL(71, 0);
  3517  001564  0E00               	movlw	0
  3518  001566  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3519  001568  0E47               	movlw	71
  3520  00156A  6E19               	movwf	SETxAPIxVAL@index,c
  3521  00156C  0E00               	movlw	0
  3522  00156E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3523  001570  0E00               	movlw	0
  3524  001572  6E1B               	movwf	SETxAPIxVAL@value,c
  3525  001574  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  3526  001578                     l353:
  3527                           
  3528                           ;State_Mchn.c: 935: }
  3529                           ;State_Mchn.c: 937: if(Stop_Program == 1)
  3530  001578  0100               	movlb	0	; () banked
  3531  00157A  0585               	decf	_Stop_Program& (0+255),w,b
  3532  00157C  A4D8               	btfss	status,2,c
  3533  00157E  D003               	goto	l356
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;State_Mchn.c: 938: {
  3537                           ;State_Mchn.c: 939: Red_Led(2);
  3538  001580  0E02               	movlw	2
  3539  001582  EC05  F01F         	call	_Red_Led
  3540  001586                     l356:
  3541                           
  3542                           ;State_Mchn.c: 940: }
  3543                           ;State_Mchn.c: 942: Green_Led(1);
  3544  001586  0E01               	movlw	1
  3545  001588  EC45  F01F         	call	_Green_Led
  3546                           
  3547                           ;State_Mchn.c: 947: }
  3548                           
  3549                           ;State_Mchn.c: 946: default : break;
  3550                           
  3551                           ;State_Mchn.c: 944: break;
  3552  00158C  D00C               	goto	l304
  3553  00158E                     l181:
  3554  00158E  0100               	movlb	0	; () banked
  3555  001590  51E1               	movf	_Switch_Main& (0+255),w,b
  3556                           
  3557                           ; Switch size 1, requested type "space"
  3558                           ; Number of cases is 3, Range of values is 1 to 3
  3559                           ; switch strategies available:
  3560                           ; Name         Instructions Cycles
  3561                           ; simple_byte           10     6 (average)
  3562                           ;	Chosen strategy is simple_byte
  3563  001592  0A01               	xorlw	1	; case 1
  3564  001594  B4D8               	btfsc	status,2,c
  3565  001596  EF69  F004         	goto	l182
  3566  00159A  0A03               	xorlw	3	; case 2
  3567  00159C  B4D8               	btfsc	status,2,c
  3568  00159E  D739               	goto	l306
  3569  0015A0  0A01               	xorlw	1	; case 3
  3570  0015A2  B4D8               	btfsc	status,2,c
  3571  0015A4  D7BA               	goto	l338
  3572  0015A6                     l304:
  3573                           
  3574                           ;State_Mchn.c: 948: SETxAPIxVAL(63, Switch_Main);
  3575                           
  3576                           ; BSR set to: 0
  3577  0015A6  0E00               	movlw	0
  3578  0015A8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3579  0015AA  0E3F               	movlw	63
  3580  0015AC  6E19               	movwf	SETxAPIxVAL@index,c
  3581  0015AE  C0E1  F01B         	movff	_Switch_Main,SETxAPIxVAL@value
  3582  0015B2  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3583  0015B4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  3584                           
  3585                           ;State_Mchn.c: 949: SETxAPIxVAL(80, Switch_Program);
  3586  0015B8  0E00               	movlw	0
  3587  0015BA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3588  0015BC  0E50               	movlw	80
  3589  0015BE  6E19               	movwf	SETxAPIxVAL@index,c
  3590  0015C0  C089  F01B         	movff	_Switch_Program,SETxAPIxVAL@value
  3591  0015C4  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3592  0015C6  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  3593  0015CA  0012               	return		;funcret
  3594  0015CC                     __end_of_Update_StateMchn:
  3595                           	opt stack 0
  3596                           tblptru	equ	0xFF8
  3597                           tblptrh	equ	0xFF7
  3598                           tblptrl	equ	0xFF6
  3599                           tablat	equ	0xFF5
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           postdec1	equ	0xFE5
  3603                           fsr1l	equ	0xFE1
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _Train_Path *****************
  3607 ;; Defined at:
  3608 ;;		line 967 in file "../State_Mchn.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  From            1    wreg     unsigned char 
  3611 ;;  To              1   23[BANK0 ] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  From            1   24[BANK0 ] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      unsigned char 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3623 ;;      Params:         0       1       0       0       0       0       0       0       0
  3624 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3626 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3627 ;;Total ram usage:        2 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    7
  3630 ;; This function calls:
  3631 ;;		_GETxAPIxVAL
  3632 ;;		_Junction
  3633 ;;		_Left_Mountain_From_The_Left
  3634 ;;		_Left_Mountain_From_The_Right
  3635 ;;		_Right_Mountain_From_The_Left
  3636 ;;		_Right_Mountain_From_The_Right
  3637 ;;		_SETxAPIxVAL
  3638 ;;		_Train_Move_Left_Brake
  3639 ;;		_Train_Move_Left_Start
  3640 ;;		_Train_Move_Right_Brake
  3641 ;;		_Train_Move_Right_Start
  3642 ;; This function is called by:
  3643 ;;		_Update_StateMchn
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text2
  3648  00224E                     __ptext2:
  3649                           	opt stack 0
  3650  00224E                     _Train_Path:
  3651                           	opt stack 22
  3652                           
  3653                           ;incstack = 0
  3654                           ;Train_Path@From stored from wreg
  3655  00224E  0100               	movlb	0	; () banked
  3656  002250  6FCE               	movwf	Train_Path@From& (0+255),b
  3657                           
  3658                           ;State_Mchn.c: 969: static char Return_Val = 1;
  3659                           ;State_Mchn.c: 971: SETxAPIxVAL(61, From);
  3660  002252  0E00               	movlw	0
  3661  002254  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3662  002256  0E3D               	movlw	61
  3663  002258  6E19               	movwf	SETxAPIxVAL@index,c
  3664  00225A  C0CE  F01B         	movff	Train_Path@From,SETxAPIxVAL@value
  3665  00225E  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3666  002260  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  3667                           
  3668                           ;State_Mchn.c: 972: SETxAPIxVAL(62, To);
  3669  002264  0E00               	movlw	0
  3670  002266  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3671  002268  0E3E               	movlw	62
  3672  00226A  6E19               	movwf	SETxAPIxVAL@index,c
  3673  00226C  C0CD  F01B         	movff	Train_Path@To,SETxAPIxVAL@value
  3674  002270  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3675  002272  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  3676                           
  3677                           ;State_Mchn.c: 974: switch(Switch_Train_Path)
  3678  002276  D1AC               	goto	l363
  3679  002278  0E00               	movlw	0
  3680  00227A  6E1F               	movwf	Junction@Straight_Bend,c
  3681  00227C  0E01               	movlw	1
  3682  00227E  EC4C  F015         	call	_Junction
  3683  002282  0900               	iorlw	0
  3684  002284  B4D8               	btfsc	status,2,c
  3685  002286  D018               	goto	u7760
  3686  002288                     l367:
  3687                           
  3688                           ;State_Mchn.c: 982: }
  3689                           ;State_Mchn.c: 983: Return_Val = 1;
  3690  002288  0E01               	movlw	1
  3691  00228A  0100               	movlb	0	; () banked
  3692  00228C                     L40:
  3693  00228C  6FE0               	movwf	Train_Path@Return_Val& (0+255),b
  3694                           
  3695                           ;State_Mchn.c: 984: break;
  3696  00228E  D1CA               	goto	l376
  3697  002290                     
  3698                           ; BSR set to: 0
  3699                           
  3700                           ; BSR set to: 0
  3701  002290  0E01               	movlw	1
  3702  002292  6E1F               	movwf	Junction@Straight_Bend,c
  3703  002294  0E01               	movlw	1
  3704  002296  EC4C  F015         	call	_Junction
  3705  00229A  D7F3               	goto	L57
  3706  00229C                     
  3707                           ; BSR set to: 0
  3708                           
  3709                           ; BSR set to: 0
  3710  00229C  0E01               	movlw	1
  3711  00229E  6E1F               	movwf	Junction@Straight_Bend,c
  3712  0022A0  0E00               	movlw	0
  3713  0022A2  EC4C  F015         	call	_Junction
  3714  0022A6  D7ED               	goto	L57
  3715  0022A8                     
  3716                           ; BSR set to: 0
  3717                           
  3718                           ; BSR set to: 0
  3719  0022A8  0E00               	movlw	0
  3720  0022AA  6E1F               	movwf	Junction@Straight_Bend,c
  3721  0022AC  0E00               	movlw	0
  3722  0022AE  EC4C  F015         	call	_Junction
  3723  0022B2  0900               	iorlw	0
  3724  0022B4  A4D8               	btfss	status,2,c
  3725  0022B6  D7E8               	goto	l367
  3726  0022B8                     u7760:
  3727                           
  3728                           ;State_Mchn.c: 1000: {
  3729                           ;State_Mchn.c: 1001: Switch_Train_Path = 1;
  3730  0022B8  0E01               	movlw	1
  3731  0022BA  D015               	goto	L41
  3732  0022BC                     
  3733                           ; BSR set to: 0
  3734  0022BC  0100               	movlb	0	; () banked
  3735  0022BE  51CE               	movf	Train_Path@From& (0+255),w,b
  3736                           
  3737                           ; Switch size 1, requested type "space"
  3738                           ; Number of cases is 4, Range of values is 1 to 4
  3739                           ; switch strategies available:
  3740                           ; Name         Instructions Cycles
  3741                           ; simple_byte           13     7 (average)
  3742                           ;	Chosen strategy is simple_byte
  3743  0022C0  0A01               	xorlw	1	; case 1
  3744  0022C2  B4D8               	btfsc	status,2,c
  3745  0022C4  D7EB               	goto	l371
  3746  0022C6  0A03               	xorlw	3	; case 2
  3747  0022C8  B4D8               	btfsc	status,2,c
  3748  0022CA  D7EE               	goto	l373
  3749  0022CC  0A01               	xorlw	1	; case 3
  3750  0022CE  B4D8               	btfsc	status,2,c
  3751  0022D0  D7D3               	goto	l366
  3752  0022D2  0A07               	xorlw	7	; case 4
  3753  0022D4  B4D8               	btfsc	status,2,c
  3754  0022D6  D7DC               	goto	l369
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;State_Mchn.c: 1008: break;
  3758  0022D8  D1A5               	goto	l376
  3759  0022DA                     
  3760                           ; BSR set to: 0
  3761                           
  3762                           ; BSR set to: 0
  3763  0022DA  0E00               	movlw	0
  3764  0022DC  6E1F               	movwf	Junction@Straight_Bend,c
  3765  0022DE  0E01               	movlw	1
  3766  0022E0  EC4C  F015         	call	_Junction
  3767  0022E4  D016               	goto	L43
  3768  0022E6                     L41:
  3769  0022E6  0100               	movlb	0	; () banked
  3770  0022E8  6F86               	movwf	_Switch_Train_Path& (0+255),b
  3771                           
  3772                           ;State_Mchn.c: 1015: Return_Val = 1;
  3773  0022EA  0E01               	movlw	1
  3774  0022EC  6FE0               	movwf	Train_Path@Return_Val& (0+255),b
  3775  0022EE  D7CC               	goto	l367
  3776  0022F0                     
  3777                           ; BSR set to: 0
  3778                           
  3779                           ; BSR set to: 0
  3780  0022F0  0E01               	movlw	1
  3781  0022F2  6E1F               	movwf	Junction@Straight_Bend,c
  3782  0022F4  0E01               	movlw	1
  3783  0022F6  EC4C  F015         	call	_Junction
  3784  0022FA  D00B               	goto	L43
  3785  0022FC                     
  3786                           ; BSR set to: 0
  3787                           
  3788                           ; BSR set to: 0
  3789  0022FC  0E01               	movlw	1
  3790  0022FE  6E1F               	movwf	Junction@Straight_Bend,c
  3791  002300  0E00               	movlw	0
  3792  002302  EC4C  F015         	call	_Junction
  3793  002306  D005               	goto	L43
  3794  002308                     
  3795                           ; BSR set to: 0
  3796                           
  3797                           ; BSR set to: 0
  3798  002308  0E00               	movlw	0
  3799  00230A  6E1F               	movwf	Junction@Straight_Bend,c
  3800  00230C  0E00               	movlw	0
  3801  00230E  EC4C  F015         	call	_Junction
  3802  002312                     L43:
  3803  002312  0900               	iorlw	0
  3804  002314  A4D8               	btfss	status,2,c
  3805  002316  D7B8               	goto	l367
  3806                           
  3807                           ;State_Mchn.c: 1034: {
  3808                           ;State_Mchn.c: 1035: Switch_Train_Path = 2;
  3809  002318  0E02               	movlw	2
  3810  00231A  D7E5               	goto	L41
  3811  00231C                     
  3812                           ; BSR set to: 0
  3813                           
  3814                           ; BSR set to: 0
  3815  00231C  51CD               	movf	Train_Path@To& (0+255),w,b
  3816                           
  3817                           ; Switch size 1, requested type "space"
  3818                           ; Number of cases is 4, Range of values is 1 to 4
  3819                           ; switch strategies available:
  3820                           ; Name         Instructions Cycles
  3821                           ; simple_byte           13     7 (average)
  3822                           ;	Chosen strategy is simple_byte
  3823  00231E  0A01               	xorlw	1	; case 1
  3824  002320  B4D8               	btfsc	status,2,c
  3825  002322  D7EC               	goto	l384
  3826  002324  0A03               	xorlw	3	; case 2
  3827  002326  B4D8               	btfsc	status,2,c
  3828  002328  D7EF               	goto	l386
  3829  00232A  0A01               	xorlw	1	; case 3
  3830  00232C  B4D8               	btfsc	status,2,c
  3831  00232E  D7D5               	goto	l379
  3832  002330  0A07               	xorlw	7	; case 4
  3833  002332  B4D8               	btfsc	status,2,c
  3834  002334  D7DD               	goto	l382
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;State_Mchn.c: 1042: break;
  3838  002336  D176               	goto	l376
  3839  002338                     
  3840                           ; BSR set to: 0
  3841                           
  3842                           ; BSR set to: 0
  3843  002338  ECC7  F018         	call	_Train_Move_Right_Start	;wreg free
  3844  00233C  D008               	goto	L46
  3845  00233E                     
  3846                           ; BSR set to: 0
  3847                           
  3848                           ; BSR set to: 0
  3849  00233E  ECC7  F018         	call	_Train_Move_Right_Start	;wreg free
  3850  002342  D005               	goto	L46
  3851  002344                     
  3852                           ; BSR set to: 0
  3853                           
  3854                           ; BSR set to: 0
  3855  002344  EC2B  F018         	call	_Train_Move_Left_Start	;wreg free
  3856  002348  D002               	goto	L46
  3857  00234A                     
  3858                           ; BSR set to: 0
  3859                           
  3860                           ; BSR set to: 0
  3861  00234A  EC2B  F018         	call	_Train_Move_Left_Start	;wreg free
  3862  00234E                     L46:
  3863  00234E  0900               	iorlw	0
  3864  002350  A4D8               	btfss	status,2,c
  3865  002352  D79A               	goto	l367
  3866                           
  3867                           ;State_Mchn.c: 1068: {
  3868                           ;State_Mchn.c: 1069: Switch_Train_Path = 3;
  3869  002354  0E03               	movlw	3
  3870  002356  D7C7               	goto	L41
  3871  002358                     
  3872                           ; BSR set to: 0
  3873                           
  3874                           ; BSR set to: 0
  3875  002358  51CD               	movf	Train_Path@To& (0+255),w,b
  3876                           
  3877                           ; Switch size 1, requested type "space"
  3878                           ; Number of cases is 4, Range of values is 1 to 4
  3879                           ; switch strategies available:
  3880                           ; Name         Instructions Cycles
  3881                           ; simple_byte           13     7 (average)
  3882                           ;	Chosen strategy is simple_byte
  3883  00235A  0A01               	xorlw	1	; case 1
  3884  00235C  B4D8               	btfsc	status,2,c
  3885  00235E  D7F2               	goto	l396
  3886  002360  0A03               	xorlw	3	; case 2
  3887  002362  B4D8               	btfsc	status,2,c
  3888  002364  D7F2               	goto	l398
  3889  002366  0A01               	xorlw	1	; case 3
  3890  002368  B4D8               	btfsc	status,2,c
  3891  00236A  D7E6               	goto	l391
  3892  00236C  0A07               	xorlw	7	; case 4
  3893  00236E  B4D8               	btfsc	status,2,c
  3894  002370  D7E6               	goto	l394
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;State_Mchn.c: 1076: break;
  3898  002372  D158               	goto	l376
  3899  002374                     
  3900                           ; BSR set to: 0
  3901                           
  3902                           ; BSR set to: 0
  3903  002374  0E00               	movlw	0
  3904  002376  6E14               	movwf	GETxAPIxVAL@index+1,c
  3905  002378  0E1C               	movlw	28
  3906  00237A  6E13               	movwf	GETxAPIxVAL@index,c
  3907  00237C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3908  002380  0413               	decf	?_GETxAPIxVAL,w,c
  3909  002382  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3910  002384  B4D8               	btfsc	status,2,c
  3911  002386  D09B               	goto	u8000
  3912                           
  3913                           ;State_Mchn.c: 1083: else if(GETxAPIxVAL(41) == 1){
  3914                           
  3915                           ; BSR set to: 0
  3916                           
  3917                           ;State_Mchn.c: 1082: }
  3918                           
  3919                           ;State_Mchn.c: 1081: Switch_Train_Path = 4;
  3920  002388  0E00               	movlw	0
  3921  00238A  6E14               	movwf	GETxAPIxVAL@index+1,c
  3922  00238C  0E29               	movlw	41
  3923  00238E  6E13               	movwf	GETxAPIxVAL@index,c
  3924  002390  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3925  002394  0413               	decf	?_GETxAPIxVAL,w,c
  3926  002396  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3927  002398  B4D8               	btfsc	status,2,c
  3928  00239A  D032               	goto	u7910
  3929                           
  3930                           ;State_Mchn.c: 1086: else if(GETxAPIxVAL(42) == 1){
  3931                           
  3932                           ; BSR set to: 0
  3933                           
  3934                           ;State_Mchn.c: 1085: }
  3935                           
  3936                           ;State_Mchn.c: 1084: Switch_Train_Path = 5;
  3937  00239C  0E00               	movlw	0
  3938  00239E  6E14               	movwf	GETxAPIxVAL@index+1,c
  3939  0023A0  0E2A               	movlw	42
  3940  0023A2  6E13               	movwf	GETxAPIxVAL@index,c
  3941  0023A4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3942  0023A8  0413               	decf	?_GETxAPIxVAL,w,c
  3943  0023AA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3944  0023AC  B4D8               	btfsc	status,2,c
  3945  0023AE  D034               	goto	u7920
  3946                           
  3947                           ;State_Mchn.c: 1089: else if(GETxAPIxVAL(44) == 1){
  3948                           
  3949                           ; BSR set to: 0
  3950                           
  3951                           ;State_Mchn.c: 1088: }
  3952                           
  3953                           ;State_Mchn.c: 1087: Switch_Train_Path = 6;
  3954  0023B0  0E00               	movlw	0
  3955  0023B2  6E14               	movwf	GETxAPIxVAL@index+1,c
  3956  0023B4  0E2C               	movlw	44
  3957  0023B6  6E13               	movwf	GETxAPIxVAL@index,c
  3958  0023B8  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3959  0023BC  0413               	decf	?_GETxAPIxVAL,w,c
  3960  0023BE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3961  0023C0  B4D8               	btfsc	status,2,c
  3962  0023C2  D036               	goto	u7930
  3963                           
  3964                           ;State_Mchn.c: 1092: else if(GETxAPIxVAL(43) == 1){
  3965                           
  3966                           ; BSR set to: 0
  3967                           
  3968                           ;State_Mchn.c: 1091: }
  3969                           
  3970                           ;State_Mchn.c: 1090: Switch_Train_Path = 7;
  3971  0023C4  0E00               	movlw	0
  3972  0023C6  6E14               	movwf	GETxAPIxVAL@index+1,c
  3973  0023C8  0E2B               	movlw	43
  3974  0023CA  6E13               	movwf	GETxAPIxVAL@index,c
  3975  0023CC  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3976  0023D0  D037               	goto	L94
  3977  0023D2                     L27:
  3978  0023D2  0100               	movlb	0	; () banked
  3979  0023D4  6F86               	movwf	_Switch_Train_Path& (0+255),b
  3980                           
  3981                           ; BSR set to: 0
  3982                           
  3983                           ; BSR set to: 0
  3984                           
  3985                           ; BSR set to: 0
  3986                           
  3987                           ; BSR set to: 0
  3988  0023D6  D758               	goto	l367
  3989  0023D8                     
  3990                           ; BSR set to: 0
  3991                           
  3992                           ; BSR set to: 0
  3993  0023D8  0E00               	movlw	0
  3994  0023DA  6E14               	movwf	GETxAPIxVAL@index+1,c
  3995  0023DC  0E1D               	movlw	29
  3996  0023DE  6E13               	movwf	GETxAPIxVAL@index,c
  3997  0023E0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  3998  0023E4  0413               	decf	?_GETxAPIxVAL,w,c
  3999  0023E6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4000  0023E8  B4D8               	btfsc	status,2,c
  4001  0023EA  D069               	goto	u8000
  4002                           
  4003                           ;State_Mchn.c: 1100: else if(GETxAPIxVAL(41) == 1){
  4004                           
  4005                           ; BSR set to: 0
  4006                           
  4007                           ;State_Mchn.c: 1099: }
  4008                           
  4009                           ;State_Mchn.c: 1098: Switch_Train_Path = 4;
  4010  0023EC  0E00               	movlw	0
  4011  0023EE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4012  0023F0  0E29               	movlw	41
  4013  0023F2  6E13               	movwf	GETxAPIxVAL@index,c
  4014  0023F4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4015  0023F8  0413               	decf	?_GETxAPIxVAL,w,c
  4016  0023FA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4017  0023FC  A4D8               	btfss	status,2,c
  4018  0023FE  D002               	goto	l417
  4019  002400                     u7910:
  4020                           
  4021                           ;State_Mchn.c: 1101: Switch_Train_Path = 5;
  4022  002400  0E05               	movlw	5
  4023  002402  D7E7               	goto	L27
  4024  002404                     l417:
  4025                           
  4026                           ;State_Mchn.c: 1103: else if(GETxAPIxVAL(42) == 1){
  4027                           
  4028                           ; BSR set to: 0
  4029  002404  0E00               	movlw	0
  4030  002406  6E14               	movwf	GETxAPIxVAL@index+1,c
  4031  002408  0E2A               	movlw	42
  4032  00240A  6E13               	movwf	GETxAPIxVAL@index,c
  4033  00240C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4034  002410  0413               	decf	?_GETxAPIxVAL,w,c
  4035  002412  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4036  002414  A4D8               	btfss	status,2,c
  4037  002416  D002               	goto	l419
  4038  002418                     u7920:
  4039                           
  4040                           ;State_Mchn.c: 1104: Switch_Train_Path = 6;
  4041  002418  0E06               	movlw	6
  4042  00241A  D7DB               	goto	L27
  4043  00241C                     l419:
  4044                           
  4045                           ;State_Mchn.c: 1106: else if(GETxAPIxVAL(44) == 1){
  4046                           
  4047                           ; BSR set to: 0
  4048  00241C  0E00               	movlw	0
  4049  00241E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4050  002420  0E2C               	movlw	44
  4051  002422  6E13               	movwf	GETxAPIxVAL@index,c
  4052  002424  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4053  002428  0413               	decf	?_GETxAPIxVAL,w,c
  4054  00242A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4055  00242C  A4D8               	btfss	status,2,c
  4056  00242E  D002               	goto	l421
  4057  002430                     u7930:
  4058                           
  4059                           ;State_Mchn.c: 1107: Switch_Train_Path = 7;
  4060  002430  0E07               	movlw	7
  4061  002432  D7CF               	goto	L27
  4062  002434                     l421:
  4063                           
  4064                           ;State_Mchn.c: 1109: else if(GETxAPIxVAL(43) == 1){
  4065                           
  4066                           ; BSR set to: 0
  4067  002434  0E00               	movlw	0
  4068  002436  6E14               	movwf	GETxAPIxVAL@index+1,c
  4069  002438  0E2B               	movlw	43
  4070  00243A  6E13               	movwf	GETxAPIxVAL@index,c
  4071  00243C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4072  002440                     L94:
  4073  002440  0413               	decf	?_GETxAPIxVAL,w,c
  4074  002442  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4075  002444  A4D8               	btfss	status,2,c
  4076  002446  D720               	goto	l367
  4077                           
  4078                           ;State_Mchn.c: 1110: Switch_Train_Path = 8;
  4079  002448  0E08               	movlw	8
  4080  00244A  D7C3               	goto	L27
  4081  00244C                     
  4082                           ; BSR set to: 0
  4083                           
  4084                           ; BSR set to: 0
  4085  00244C  0E00               	movlw	0
  4086  00244E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4087  002450  0E1E               	movlw	30
  4088  002452  6E13               	movwf	GETxAPIxVAL@index,c
  4089  002454  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4090  002458  0413               	decf	?_GETxAPIxVAL,w,c
  4091  00245A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4092  00245C  B4D8               	btfsc	status,2,c
  4093  00245E  D02F               	goto	u8000
  4094                           
  4095                           ;State_Mchn.c: 1118: else if(GETxAPIxVAL(41) == 1){
  4096                           
  4097                           ; BSR set to: 0
  4098                           
  4099                           ;State_Mchn.c: 1117: }
  4100                           
  4101                           ;State_Mchn.c: 1115: {
  4102                           ;State_Mchn.c: 1116: Switch_Train_Path = 4;
  4103  002460  0E00               	movlw	0
  4104  002462  6E14               	movwf	GETxAPIxVAL@index+1,c
  4105  002464  0E29               	movlw	41
  4106  002466  6E13               	movwf	GETxAPIxVAL@index,c
  4107  002468  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4108  00246C  0413               	decf	?_GETxAPIxVAL,w,c
  4109  00246E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4110  002470  B4D8               	btfsc	status,2,c
  4111  002472  D031               	goto	u8010
  4112                           
  4113                           ;State_Mchn.c: 1121: else if(GETxAPIxVAL(42) == 1){
  4114                           
  4115                           ; BSR set to: 0
  4116                           
  4117                           ;State_Mchn.c: 1120: }
  4118                           
  4119                           ;State_Mchn.c: 1119: Switch_Train_Path = 12;
  4120  002474  0E00               	movlw	0
  4121  002476  6E14               	movwf	GETxAPIxVAL@index+1,c
  4122  002478  0E2A               	movlw	42
  4123  00247A  6E13               	movwf	GETxAPIxVAL@index,c
  4124  00247C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4125  002480  0413               	decf	?_GETxAPIxVAL,w,c
  4126  002482  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4127  002484  B4D8               	btfsc	status,2,c
  4128  002486  D033               	goto	u8020
  4129                           
  4130                           ;State_Mchn.c: 1124: else if(GETxAPIxVAL(44) == 1){
  4131                           
  4132                           ; BSR set to: 0
  4133                           
  4134                           ;State_Mchn.c: 1123: }
  4135                           
  4136                           ;State_Mchn.c: 1122: Switch_Train_Path = 11;
  4137  002488  0E00               	movlw	0
  4138  00248A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4139  00248C  0E2C               	movlw	44
  4140  00248E  6E13               	movwf	GETxAPIxVAL@index,c
  4141  002490  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4142  002494  0413               	decf	?_GETxAPIxVAL,w,c
  4143  002496  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4144  002498  B4D8               	btfsc	status,2,c
  4145  00249A  D035               	goto	u8030
  4146                           
  4147                           ;State_Mchn.c: 1127: else if(GETxAPIxVAL(43) == 1){
  4148                           
  4149                           ; BSR set to: 0
  4150                           
  4151                           ;State_Mchn.c: 1126: }
  4152                           
  4153                           ;State_Mchn.c: 1125: Switch_Train_Path = 10;
  4154  00249C  0E00               	movlw	0
  4155  00249E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4156  0024A0  0E2B               	movlw	43
  4157  0024A2  6E13               	movwf	GETxAPIxVAL@index,c
  4158  0024A4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4159  0024A8  D036               	goto	L95
  4160  0024AA                     
  4161                           ; BSR set to: 0
  4162                           
  4163                           ; BSR set to: 0
  4164  0024AA  0E00               	movlw	0
  4165  0024AC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4166  0024AE  0E1F               	movlw	31
  4167  0024B0  6E13               	movwf	GETxAPIxVAL@index,c
  4168  0024B2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4169  0024B6  0413               	decf	?_GETxAPIxVAL,w,c
  4170  0024B8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4171  0024BA  A4D8               	btfss	status,2,c
  4172  0024BC  D002               	goto	l435
  4173  0024BE                     u8000:
  4174                           
  4175                           ;State_Mchn.c: 1133: {
  4176                           ;State_Mchn.c: 1134: Switch_Train_Path = 4;
  4177  0024BE  0E04               	movlw	4
  4178  0024C0  D788               	goto	L27
  4179  0024C2                     l435:
  4180                           
  4181                           ;State_Mchn.c: 1136: else if(GETxAPIxVAL(41) == 1){
  4182                           
  4183                           ; BSR set to: 0
  4184  0024C2  0E00               	movlw	0
  4185  0024C4  6E14               	movwf	GETxAPIxVAL@index+1,c
  4186  0024C6  0E29               	movlw	41
  4187  0024C8  6E13               	movwf	GETxAPIxVAL@index,c
  4188  0024CA  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4189  0024CE  0413               	decf	?_GETxAPIxVAL,w,c
  4190  0024D0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4191  0024D2  A4D8               	btfss	status,2,c
  4192  0024D4  D002               	goto	l437
  4193  0024D6                     u8010:
  4194                           
  4195                           ;State_Mchn.c: 1137: Switch_Train_Path = 12;
  4196  0024D6  0E0C               	movlw	12
  4197  0024D8  D77C               	goto	L27
  4198  0024DA                     l437:
  4199                           
  4200                           ;State_Mchn.c: 1139: else if(GETxAPIxVAL(42) == 1){
  4201                           
  4202                           ; BSR set to: 0
  4203  0024DA  0E00               	movlw	0
  4204  0024DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4205  0024DE  0E2A               	movlw	42
  4206  0024E0  6E13               	movwf	GETxAPIxVAL@index,c
  4207  0024E2  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4208  0024E6  0413               	decf	?_GETxAPIxVAL,w,c
  4209  0024E8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4210  0024EA  A4D8               	btfss	status,2,c
  4211  0024EC  D002               	goto	l439
  4212  0024EE                     u8020:
  4213                           
  4214                           ;State_Mchn.c: 1140: Switch_Train_Path = 11;
  4215  0024EE  0E0B               	movlw	11
  4216  0024F0  D770               	goto	L27
  4217  0024F2                     l439:
  4218                           
  4219                           ;State_Mchn.c: 1142: else if(GETxAPIxVAL(44) == 1){
  4220                           
  4221                           ; BSR set to: 0
  4222  0024F2  0E00               	movlw	0
  4223  0024F4  6E14               	movwf	GETxAPIxVAL@index+1,c
  4224  0024F6  0E2C               	movlw	44
  4225  0024F8  6E13               	movwf	GETxAPIxVAL@index,c
  4226  0024FA  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4227  0024FE  0413               	decf	?_GETxAPIxVAL,w,c
  4228  002500  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4229  002502  A4D8               	btfss	status,2,c
  4230  002504  D002               	goto	l441
  4231  002506                     u8030:
  4232                           
  4233                           ;State_Mchn.c: 1143: Switch_Train_Path = 10;
  4234  002506  0E0A               	movlw	10
  4235  002508  D764               	goto	L27
  4236  00250A                     l441:
  4237                           
  4238                           ;State_Mchn.c: 1145: else if(GETxAPIxVAL(43) == 1){
  4239                           
  4240                           ; BSR set to: 0
  4241  00250A  0E00               	movlw	0
  4242  00250C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4243  00250E  0E2B               	movlw	43
  4244  002510  6E13               	movwf	GETxAPIxVAL@index,c
  4245  002512  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4246  002516                     L95:
  4247  002516  0413               	decf	?_GETxAPIxVAL,w,c
  4248  002518  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4249  00251A  A4D8               	btfss	status,2,c
  4250  00251C  D6B5               	goto	l367
  4251                           
  4252                           ;State_Mchn.c: 1146: Switch_Train_Path = 9;
  4253  00251E  0E09               	movlw	9
  4254  002520  D758               	goto	L27
  4255  002522                     
  4256                           ; BSR set to: 0
  4257                           
  4258                           ; BSR set to: 0
  4259  002522  51CD               	movf	Train_Path@To& (0+255),w,b
  4260                           
  4261                           ; Switch size 1, requested type "space"
  4262                           ; Number of cases is 4, Range of values is 1 to 4
  4263                           ; switch strategies available:
  4264                           ; Name         Instructions Cycles
  4265                           ; simple_byte           13     7 (average)
  4266                           ;	Chosen strategy is simple_byte
  4267  002524  0A01               	xorlw	1	; case 1
  4268  002526  B4D8               	btfsc	status,2,c
  4269  002528  D791               	goto	l424
  4270  00252A  0A03               	xorlw	3	; case 2
  4271  00252C  B4D8               	btfsc	status,2,c
  4272  00252E  D7BD               	goto	l434
  4273  002530  0A01               	xorlw	1	; case 3
  4274  002532  B4D8               	btfsc	status,2,c
  4275  002534  D71F               	goto	l403
  4276  002536  0A07               	xorlw	7	; case 4
  4277  002538  B4D8               	btfsc	status,2,c
  4278  00253A  D74E               	goto	l414
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;State_Mchn.c: 1152: break;
  4282  00253C  D073               	goto	l376
  4283  00253E                     
  4284                           ; BSR set to: 0
  4285                           
  4286                           ; BSR set to: 0
  4287  00253E  EC8B  F017         	call	_Train_Move_Right_Brake	;wreg free
  4288  002542  D008               	goto	L96
  4289  002544                     
  4290                           ; BSR set to: 0
  4291                           
  4292                           ; BSR set to: 0
  4293  002544  EC8B  F017         	call	_Train_Move_Right_Brake	;wreg free
  4294  002548  D005               	goto	L96
  4295  00254A                     
  4296                           ; BSR set to: 0
  4297                           
  4298                           ; BSR set to: 0
  4299  00254A  ECE8  F016         	call	_Train_Move_Left_Brake	;wreg free
  4300  00254E  D002               	goto	L96
  4301  002550                     
  4302                           ; BSR set to: 0
  4303                           
  4304                           ; BSR set to: 0
  4305  002550  ECE8  F016         	call	_Train_Move_Left_Brake	;wreg free
  4306  002554                     L96:
  4307  002554  0900               	iorlw	0
  4308  002556  A4D8               	btfss	status,2,c
  4309  002558  D697               	goto	l367
  4310                           
  4311                           ;State_Mchn.c: 1181: {
  4312                           ;State_Mchn.c: 1182: Switch_Train_Path = 0;
  4313  00255A  0E00               	movlw	0
  4314  00255C  0100               	movlb	0	; () banked
  4315  00255E  6F86               	movwf	_Switch_Train_Path& (0+255),b
  4316                           
  4317                           ;State_Mchn.c: 1183: Return_Val = 0;
  4318  002560  0E00               	movlw	0
  4319  002562  D694               	goto	L40
  4320  002564                     
  4321                           ; BSR set to: 0
  4322                           
  4323                           ; BSR set to: 0
  4324  002564  51CD               	movf	Train_Path@To& (0+255),w,b
  4325                           
  4326                           ; Switch size 1, requested type "space"
  4327                           ; Number of cases is 4, Range of values is 1 to 4
  4328                           ; switch strategies available:
  4329                           ; Name         Instructions Cycles
  4330                           ; simple_byte           13     7 (average)
  4331                           ;	Chosen strategy is simple_byte
  4332  002566  0A01               	xorlw	1	; case 1
  4333  002568  B4D8               	btfsc	status,2,c
  4334  00256A  D7EF               	goto	l452
  4335  00256C  0A03               	xorlw	3	; case 2
  4336  00256E  B4D8               	btfsc	status,2,c
  4337  002570  D7EF               	goto	l454
  4338  002572  0A01               	xorlw	1	; case 3
  4339  002574  B4D8               	btfsc	status,2,c
  4340  002576  D7E3               	goto	l447
  4341  002578  0A07               	xorlw	7	; case 4
  4342  00257A  B4D8               	btfsc	status,2,c
  4343  00257C  D7E3               	goto	l450
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;State_Mchn.c: 1190: break;
  4347  00257E  D052               	goto	l376
  4348  002580                     
  4349                           ; BSR set to: 0
  4350                           ;State_Mchn.c: 1193: if(Left_Mountain_From_The_Left(1) == 0){
  4351                           
  4352                           ; BSR set to: 0
  4353  002580  0E01               	movlw	1
  4354  002582  EC2F  F01C         	call	_Left_Mountain_From_The_Left
  4355  002586  D01B               	goto	L53
  4356  002588                     
  4357                           ; BSR set to: 0
  4358                           ;State_Mchn.c: 1200: if(Left_Mountain_From_The_Left(2) == 0){
  4359                           
  4360                           ; BSR set to: 0
  4361  002588  0E02               	movlw	2
  4362  00258A  EC2F  F01C         	call	_Left_Mountain_From_The_Left
  4363  00258E  D017               	goto	L53
  4364  002590                     
  4365                           ; BSR set to: 0
  4366                           ;State_Mchn.c: 1207: if(Right_Mountain_From_The_Left(3) == 0){
  4367                           
  4368                           ; BSR set to: 0
  4369  002590  0E03               	movlw	3
  4370  002592  EC1B  F01B         	call	_Right_Mountain_From_The_Left
  4371  002596  D013               	goto	L53
  4372  002598                     
  4373                           ; BSR set to: 0
  4374                           ;State_Mchn.c: 1214: if(Right_Mountain_From_The_Left(4) == 0){
  4375                           
  4376                           ; BSR set to: 0
  4377  002598  0E04               	movlw	4
  4378  00259A  EC1B  F01B         	call	_Right_Mountain_From_The_Left
  4379  00259E  D00F               	goto	L53
  4380  0025A0                     
  4381                           ; BSR set to: 0
  4382                           ;State_Mchn.c: 1221: if(Right_Mountain_From_The_Right(4) == 0){
  4383                           
  4384                           ; BSR set to: 0
  4385  0025A0  0E04               	movlw	4
  4386  0025A2  EC91  F01A         	call	_Right_Mountain_From_The_Right
  4387  0025A6  D00B               	goto	L53
  4388  0025A8                     
  4389                           ; BSR set to: 0
  4390                           ;State_Mchn.c: 1228: if(Right_Mountain_From_The_Right(3) == 0){
  4391                           
  4392                           ; BSR set to: 0
  4393  0025A8  0E03               	movlw	3
  4394  0025AA  EC91  F01A         	call	_Right_Mountain_From_The_Right
  4395  0025AE  D007               	goto	L53
  4396  0025B0                     
  4397                           ; BSR set to: 0
  4398                           ;State_Mchn.c: 1235: if(Left_Mountain_From_The_Right(2) == 0){
  4399                           
  4400                           ; BSR set to: 0
  4401  0025B0  0E02               	movlw	2
  4402  0025B2  ECB8  F01C         	call	_Left_Mountain_From_The_Right
  4403  0025B6  D003               	goto	L53
  4404  0025B8                     
  4405                           ; BSR set to: 0
  4406                           ;State_Mchn.c: 1242: if(Left_Mountain_From_The_Right(1) == 0){
  4407                           
  4408                           ; BSR set to: 0
  4409  0025B8  0E01               	movlw	1
  4410  0025BA  ECB8  F01C         	call	_Left_Mountain_From_The_Right
  4411  0025BE                     L53:
  4412  0025BE  0900               	iorlw	0
  4413  0025C0  A4D8               	btfss	status,2,c
  4414  0025C2  D662               	goto	l367
  4415                           
  4416                           ;State_Mchn.c: 1243: Switch_Train_Path = 3;
  4417  0025C4  0E03               	movlw	3
  4418  0025C6  D705               	goto	L27
  4419  0025C8                     
  4420                           ; BSR set to: 0
  4421                           
  4422                           ; BSR set to: 0
  4423  0025C8  0E00               	movlw	0
  4424  0025CA  6F86               	movwf	_Switch_Train_Path& (0+255),b
  4425  0025CC  0E01               	movlw	1
  4426  0025CE  D65E               	goto	L40
  4427  0025D0                     l363:
  4428                           
  4429                           ; BSR set to: 0
  4430  0025D0  0100               	movlb	0	; () banked
  4431  0025D2  5186               	movf	_Switch_Train_Path& (0+255),w,b
  4432                           
  4433                           ; Switch size 1, requested type "space"
  4434                           ; Number of cases is 13, Range of values is 0 to 12
  4435                           ; switch strategies available:
  4436                           ; Name         Instructions Cycles
  4437                           ; simple_byte           40    21 (average)
  4438                           ;	Chosen strategy is simple_byte
  4439  0025D4  0A00               	xorlw	0	; case 0
  4440  0025D6  B4D8               	btfsc	status,2,c
  4441  0025D8  D671               	goto	l365
  4442  0025DA  0A01               	xorlw	1	; case 1
  4443  0025DC  B4D8               	btfsc	status,2,c
  4444  0025DE  D69E               	goto	l378
  4445  0025E0  0A03               	xorlw	3	; case 2
  4446  0025E2  B4D8               	btfsc	status,2,c
  4447  0025E4  D6B9               	goto	l390
  4448  0025E6  0A01               	xorlw	1	; case 3
  4449  0025E8  B4D8               	btfsc	status,2,c
  4450  0025EA  D79B               	goto	l402
  4451  0025EC  0A07               	xorlw	7	; case 4
  4452  0025EE  B4D8               	btfsc	status,2,c
  4453  0025F0  D7B9               	goto	l446
  4454  0025F2  0A01               	xorlw	1	; case 5
  4455  0025F4  B4D8               	btfsc	status,2,c
  4456  0025F6  D7C4               	goto	l457
  4457  0025F8  0A03               	xorlw	3	; case 6
  4458  0025FA  B4D8               	btfsc	status,2,c
  4459  0025FC  D7C5               	goto	l459
  4460  0025FE  0A01               	xorlw	1	; case 7
  4461  002600  B4D8               	btfsc	status,2,c
  4462  002602  D7C6               	goto	l461
  4463  002604  0A0F               	xorlw	15	; case 8
  4464  002606  B4D8               	btfsc	status,2,c
  4465  002608  D7C7               	goto	l463
  4466  00260A  0A01               	xorlw	1	; case 9
  4467  00260C  B4D8               	btfsc	status,2,c
  4468  00260E  D7C8               	goto	l465
  4469  002610  0A03               	xorlw	3	; case 10
  4470  002612  B4D8               	btfsc	status,2,c
  4471  002614  D7C9               	goto	l467
  4472  002616  0A01               	xorlw	1	; case 11
  4473  002618  B4D8               	btfsc	status,2,c
  4474  00261A  D7CA               	goto	l469
  4475  00261C  0A07               	xorlw	7	; case 12
  4476  00261E  B4D8               	btfsc	status,2,c
  4477  002620  D7CB               	goto	l471
  4478  002622  D7D2               	goto	l473
  4479  002624                     l376:
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;State_Mchn.c: 1251: return(Return_Val);
  4483                           
  4484                           ; BSR set to: 0
  4485  002624  51E0               	movf	Train_Path@Return_Val& (0+255),w,b
  4486  002626  0012               	return	
  4487  002628                     __end_of_Train_Path:
  4488                           	opt stack 0
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           postinc0	equ	0xFEE
  4494                           wreg	equ	0xFE8
  4495                           postdec1	equ	0xFE5
  4496                           fsr1l	equ	0xFE1
  4497                           status	equ	0xFD8
  4498                           
  4499 ;; *************** function _Train_Move_Right_Start *****************
  4500 ;; Defined at:
  4501 ;;		line 27 in file "../train_move_right.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      unsigned char 
  4508 ;; Registers used:
  4509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0
  4516 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4518 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4519 ;;Total ram usage:        2 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    6
  4522 ;; This function calls:
  4523 ;;		_GETxAPIxVAL
  4524 ;;		_SETxAPIxVAL
  4525 ;;		_SETxPWM
  4526 ;; This function is called by:
  4527 ;;		_Train_Path
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text3
  4532  00318E                     __ptext3:
  4533                           	opt stack 0
  4534  00318E                     _Train_Move_Right_Start:
  4535                           	opt stack 22
  4536                           
  4537                           ;train_move_right.c: 29: static char Return_Val = 1;
  4538                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4539                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;incstack = 0
  4543  00318E  D08A               	goto	l1154
  4544  003190  0E00               	movlw	0
  4545  003192  6E14               	movwf	GETxAPIxVAL@index+1,c
  4546  003194  0E14               	movlw	20
  4547  003196  6E13               	movwf	GETxAPIxVAL@index,c
  4548  003198  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4549  00319C  5013               	movf	?_GETxAPIxVAL,w,c
  4550  00319E  0100               	movlb	0	; () banked
  4551  0031A0  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4552  0031A2  5014               	movf	?_GETxAPIxVAL+1,w,c
  4553  0031A4  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4554  0031A6  A0D8               	btfss	status,0,c
  4555  0031A8  D002               	goto	l1156
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;train_move_right.c: 37: {
  4559                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4560  0031AA  0E01               	movlw	1
  4561  0031AC  D03D               	goto	L61
  4562  0031AE                     l1156:
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;train_move_right.c: 42: }
  4566                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4567                           
  4568                           ; BSR set to: 0
  4569  0031AE  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4570  0031B0  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4574  0031B2  0E00               	movlw	0
  4575  0031B4  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4576  0031B6  D073               	goto	L62
  4577  0031B8                     
  4578                           ; BSR set to: 0
  4579                           
  4580                           ; BSR set to: 0
  4581  0031B8  0E00               	movlw	0
  4582  0031BA  6E14               	movwf	GETxAPIxVAL@index+1,c
  4583  0031BC  0E16               	movlw	22
  4584  0031BE  6E13               	movwf	GETxAPIxVAL@index,c
  4585  0031C0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4586  0031C4  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Right_Start$2180
  4587  0031C8  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Start$2180+1
  4588  0031CC  C0CB  F01F         	movff	_Train_Move_Right_Start$2180,SETxPWM@speed
  4589  0031D0  C0CC  F020         	movff	_Train_Move_Right_Start$2180+1,SETxPWM@speed+1
  4590  0031D4  0E01               	movlw	1
  4591  0031D6  6E21               	movwf	SETxPWM@direction,c
  4592  0031D8  EC17  F01E         	call	_SETxPWM	;wreg free
  4593                           
  4594                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4595  0031DC  0E00               	movlw	0
  4596  0031DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4597  0031E0  0E16               	movlw	22
  4598  0031E2  6E13               	movwf	GETxAPIxVAL@index,c
  4599  0031E4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4600  0031E8  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4601  0031EC  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4602                           
  4603                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4604  0031F0  0E00               	movlw	0
  4605  0031F2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4606  0031F4  0E45               	movlw	69
  4607  0031F6  6E19               	movwf	SETxAPIxVAL@index,c
  4608  0031F8  0E00               	movlw	0
  4609  0031FA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4610  0031FC  0E00               	movlw	0
  4611  0031FE  6E1B               	movwf	SETxAPIxVAL@value,c
  4612  003200  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  4613                           
  4614                           ;train_move_right.c: 51: Return_Val = 1;
  4615  003204  0E01               	movlw	1
  4616  003206  0100               	movlb	0	; () banked
  4617  003208  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4618  00320A  D018               	goto	l7648
  4619  00320C                     
  4620                           ; BSR set to: 0
  4621                           
  4622                           ; BSR set to: 0
  4623  00320C  0E00               	movlw	0
  4624  00320E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4625  003210  0E12               	movlw	18
  4626  003212  6E13               	movwf	GETxAPIxVAL@index,c
  4627  003214  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4628  003218  5013               	movf	?_GETxAPIxVAL,w,c
  4629  00321A  0100               	movlb	0	; () banked
  4630  00321C  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4631  00321E  5014               	movf	?_GETxAPIxVAL+1,w,c
  4632  003220  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4633  003222  A0D8               	btfss	status,0,c
  4634  003224  D007               	goto	l1160
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;train_move_right.c: 56: {
  4638                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4639  003226  0E03               	movlw	3
  4640  003228                     L61:
  4641  003228  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4642                           
  4643                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4644  00322A  0E00               	movlw	0
  4645  00322C  6F63               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4646  00322E  0E00               	movlw	0
  4647  003230  6F62               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4648  003232  D035               	goto	L62
  4649  003234                     l1160:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;train_move_right.c: 61: }
  4653                           ;train_move_right.c: 62: Return_Val = 1;
  4654                           
  4655                           ; BSR set to: 0
  4656  003234  0E01               	movlw	1
  4657  003236  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4661  003238  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4662  00323A  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4663  00323C                     l7648:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4667  00323C  0E02               	movlw	2
  4668  00323E  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4669                           
  4670                           ;train_move_right.c: 65: break;
  4671  003240  D03F               	goto	l1157
  4672  003242                     
  4673                           ; BSR set to: 0
  4674                           
  4675                           ; BSR set to: 0
  4676  003242  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4677  003246  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4678  00324A  0E01               	movlw	1
  4679  00324C  6E21               	movwf	SETxPWM@direction,c
  4680  00324E  EC17  F01E         	call	_SETxPWM	;wreg free
  4681                           
  4682                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4683  003252  0E00               	movlw	0
  4684  003254  6E14               	movwf	GETxAPIxVAL@index+1,c
  4685  003256  0E17               	movlw	23
  4686  003258  6E13               	movwf	GETxAPIxVAL@index,c
  4687  00325A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4688  00325E  5013               	movf	?_GETxAPIxVAL,w,c
  4689  003260  0100               	movlb	0	; () banked
  4690  003262  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4691  003264  5014               	movf	?_GETxAPIxVAL+1,w,c
  4692  003266  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4693  003268  A0D8               	btfss	status,0,c
  4694  00326A  D004               	goto	l1162
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;train_move_right.c: 69: {
  4698                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4699  00326C  0E00               	movlw	0
  4700  00326E  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4701                           
  4702                           ;train_move_right.c: 71: Return_Val = 0;
  4703  003270  0E00               	movlw	0
  4704  003272  D016               	goto	L60
  4705  003274                     l1162:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;train_move_right.c: 73: }
  4709                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4710                           
  4711                           ; BSR set to: 0
  4712  003274  0E00               	movlw	0
  4713  003276  6E14               	movwf	GETxAPIxVAL@index+1,c
  4714  003278  0E1A               	movlw	26
  4715  00327A  6E13               	movwf	GETxAPIxVAL@index,c
  4716  00327C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4717  003280  5013               	movf	?_GETxAPIxVAL,w,c
  4718  003282  0100               	movlb	0	; () banked
  4719  003284  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4720  003286  5014               	movf	?_GETxAPIxVAL+1,w,c
  4721  003288  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4722  00328A  A0D8               	btfss	status,0,c
  4723  00328C  D006               	goto	l1163
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;train_move_right.c: 75: {
  4727                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4728  00328E  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4729  003290  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4733  003292  0E00               	movlw	0
  4734  003294  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4735  003296  0E00               	movlw	0
  4736  003298  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4737  00329A                     l1163:
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;train_move_right.c: 78: }
  4741                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4742                           
  4743                           ; BSR set to: 0
  4744  00329A  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4745  00329C  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4746  00329E                     L62:
  4747                           
  4748                           ;train_move_right.c: 80: Return_Val = 1;
  4749  00329E  0E01               	movlw	1
  4750  0032A0                     L60:
  4751  0032A0  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;train_move_right.c: 84: }
  4755                           
  4756                           ; BSR set to: 0
  4757                           
  4758                           ;train_move_right.c: 83: default : break;
  4759                           
  4760                           ;train_move_right.c: 81: break;
  4761  0032A2  D00E               	goto	l1157
  4762  0032A4                     l1154:
  4763                           
  4764                           ; BSR set to: 0
  4765  0032A4  0100               	movlb	0	; () banked
  4766  0032A6  5180               	movf	_Switch_Train_Move& (0+255),w,b
  4767                           
  4768                           ; Switch size 1, requested type "space"
  4769                           ; Number of cases is 4, Range of values is 0 to 3
  4770                           ; switch strategies available:
  4771                           ; Name         Instructions Cycles
  4772                           ; simple_byte           13     7 (average)
  4773                           ;	Chosen strategy is simple_byte
  4774  0032A8  0A00               	xorlw	0	; case 0
  4775  0032AA  B4D8               	btfsc	status,2,c
  4776  0032AC  D771               	goto	l1155
  4777  0032AE  0A01               	xorlw	1	; case 1
  4778  0032B0  B4D8               	btfsc	status,2,c
  4779  0032B2  D782               	goto	l1158
  4780  0032B4  0A03               	xorlw	3	; case 2
  4781  0032B6  B4D8               	btfsc	status,2,c
  4782  0032B8  D7A9               	goto	l1159
  4783  0032BA  0A01               	xorlw	1	; case 3
  4784  0032BC  B4D8               	btfsc	status,2,c
  4785  0032BE  D7C1               	goto	l1161
  4786  0032C0                     l1157:
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;train_move_right.c: 86: return(Return_Val);
  4790                           
  4791                           ; BSR set to: 0
  4792  0032C0  51DD               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4793  0032C2  0012               	return	
  4794  0032C4                     __end_of_Train_Move_Right_Start:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postdec1	equ	0xFE5
  4803                           fsr1l	equ	0xFE1
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function _Train_Move_Right_Brake *****************
  4807 ;; Defined at:
  4808 ;;		line 254 in file "../train_move_right.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      unsigned char 
  4815 ;; Registers used:
  4816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0
  4823 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4825 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4826 ;;Total ram usage:        2 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    6
  4829 ;; This function calls:
  4830 ;;		_GETxAPIxVAL
  4831 ;;		_SETxAPIxVAL
  4832 ;;		_SETxPWM
  4833 ;; This function is called by:
  4834 ;;		_Train_Path
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           	psect	text4
  4839  002F16                     __ptext4:
  4840                           	opt stack 0
  4841  002F16                     _Train_Move_Right_Brake:
  4842                           	opt stack 22
  4843                           
  4844                           ;train_move_right.c: 256: static char Return_Val = 1;
  4845                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4846                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;incstack = 0
  4850  002F16  D08F               	goto	l1222
  4851  002F18  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4852  002F1C  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4853  002F20  0E01               	movlw	1
  4854  002F22  6E21               	movwf	SETxPWM@direction,c
  4855  002F24  EC17  F01E         	call	_SETxPWM	;wreg free
  4856                           
  4857                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  4858  002F28  0E00               	movlw	0
  4859  002F2A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4860  002F2C  0E16               	movlw	22
  4861  002F2E  6E13               	movwf	GETxAPIxVAL@index,c
  4862  002F30  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4863  002F34  0100               	movlb	0	; () banked
  4864  002F36  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  4865  002F38  5C13               	subwf	?_GETxAPIxVAL,w,c
  4866  002F3A  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4867  002F3C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  4868  002F3E  A0D8               	btfss	status,0,c
  4869  002F40  D002               	goto	l1224
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;train_move_right.c: 263: {
  4873                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  4874  002F42  0E01               	movlw	1
  4875  002F44  D074               	goto	L67
  4876  002F46                     l1224:
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;train_move_right.c: 267: }
  4880                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4881                           
  4882                           ; BSR set to: 0
  4883  002F46  0E00               	movlw	0
  4884  002F48  6E14               	movwf	GETxAPIxVAL@index+1,c
  4885  002F4A  0E19               	movlw	25
  4886  002F4C  6E13               	movwf	GETxAPIxVAL@index,c
  4887  002F4E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4888  002F52  5013               	movf	?_GETxAPIxVAL,w,c
  4889  002F54  0100               	movlb	0	; () banked
  4890  002F56  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4891  002F58  5014               	movf	?_GETxAPIxVAL+1,w,c
  4892  002F5A  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4893  002F5C  A0D8               	btfss	status,0,c
  4894  002F5E  D008               	goto	l1226
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;train_move_right.c: 269: {
  4898                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  4899  002F60  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  4900  002F62  A0D8               	btfss	status,0,c
  4901  002F64  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  4905  002F66  0E00               	movlw	0
  4906  002F68  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4907  002F6A  0E00               	movlw	0
  4908  002F6C  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4909                           
  4910                           ;train_move_right.c: 272: }
  4911  002F6E  D060               	goto	l7764
  4912  002F70                     l1226:
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  4916                           
  4917                           ; BSR set to: 0
  4918  002F70  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4919  002F72  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4920                           
  4921                           ; BSR set to: 0
  4922  002F74  D05D               	goto	l7764
  4923  002F76                     
  4924                           ; BSR set to: 0
  4925                           
  4926                           ; BSR set to: 0
  4927  002F76  0E00               	movlw	0
  4928  002F78  6E14               	movwf	GETxAPIxVAL@index+1,c
  4929  002F7A  0E12               	movlw	18
  4930  002F7C  6E13               	movwf	GETxAPIxVAL@index,c
  4931  002F7E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4932  002F82  5013               	movf	?_GETxAPIxVAL,w,c
  4933  002F84  0100               	movlb	0	; () banked
  4934  002F86  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4935  002F88  5014               	movf	?_GETxAPIxVAL+1,w,c
  4936  002F8A  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4937  002F8C  A0D8               	btfss	status,0,c
  4938  002F8E  D007               	goto	l1229
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;train_move_right.c: 278: {
  4942                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  4943  002F90  0E02               	movlw	2
  4944  002F92  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4945                           
  4946                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  4947  002F94  0E00               	movlw	0
  4948  002F96  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4949  002F98  0E00               	movlw	0
  4950  002F9A  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4951  002F9C  D049               	goto	l7764
  4952  002F9E                     l1229:
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;train_move_right.c: 283: }
  4956                           ;train_move_right.c: 284: Return_Val = 1;
  4957                           
  4958                           ; BSR set to: 0
  4959  002F9E  0E01               	movlw	1
  4960  002FA0  6FDC               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  4964  002FA2  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4965  002FA4  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  4969  002FA6  0E01               	movlw	1
  4970  002FA8  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4971                           
  4972                           ;train_move_right.c: 287: break;
  4973  002FAA  D053               	goto	l1225
  4974  002FAC                     
  4975                           ; BSR set to: 0
  4976                           
  4977                           ; BSR set to: 0
  4978  002FAC  0E00               	movlw	0
  4979  002FAE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4980  002FB0  0E16               	movlw	22
  4981  002FB2  6E13               	movwf	GETxAPIxVAL@index,c
  4982  002FB4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  4983  002FB8  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Right_Brake$2181
  4984  002FBC  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Brake$2181+1
  4985  002FC0  C0CB  F01F         	movff	_Train_Move_Right_Brake$2181,SETxPWM@speed
  4986  002FC4  C0CC  F020         	movff	_Train_Move_Right_Brake$2181+1,SETxPWM@speed+1
  4987  002FC8  0E01               	movlw	1
  4988  002FCA  6E21               	movwf	SETxPWM@direction,c
  4989  002FCC  EC17  F01E         	call	_SETxPWM	;wreg free
  4990                           
  4991                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  4992  002FD0  0E00               	movlw	0
  4993  002FD2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4994  002FD4  0E45               	movlw	69
  4995  002FD6  6E19               	movwf	SETxAPIxVAL@index,c
  4996  002FD8  0E00               	movlw	0
  4997  002FDA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4998  002FDC  0E01               	movlw	1
  4999  002FDE  6E1B               	movwf	SETxAPIxVAL@value,c
  5000  002FE0  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  5001                           
  5002                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  5003  002FE4  0E00               	movlw	0
  5004  002FE6  6E14               	movwf	GETxAPIxVAL@index+1,c
  5005  002FE8  0E16               	movlw	22
  5006  002FEA  6E13               	movwf	GETxAPIxVAL@index,c
  5007  002FEC  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5008  002FF0  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5009  002FF4  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5010                           
  5011                           ;train_move_right.c: 292: Switch_Train_Move = 3;
  5012  002FF8  0E03               	movlw	3
  5013  002FFA  0100               	movlb	0	; () banked
  5014  002FFC  D018               	goto	L67
  5015  002FFE                     
  5016                           ; BSR set to: 0
  5017                           
  5018                           ; BSR set to: 0
  5019  002FFE  0E00               	movlw	0
  5020  003000  6E14               	movwf	GETxAPIxVAL@index+1,c
  5021  003002  0E14               	movlw	20
  5022  003004  6E13               	movwf	GETxAPIxVAL@index,c
  5023  003006  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5024  00300A  5013               	movf	?_GETxAPIxVAL,w,c
  5025  00300C  0100               	movlb	0	; () banked
  5026  00300E  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5027  003010  5014               	movf	?_GETxAPIxVAL+1,w,c
  5028  003012  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5029  003014  A0D8               	btfss	status,0,c
  5030  003016  D008               	goto	l1232
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;train_move_right.c: 297: {
  5034                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5035  003018  0E00               	movlw	0
  5036  00301A  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5037                           
  5038                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5039  00301C  0E00               	movlw	0
  5040  00301E  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5041  003020  0E00               	movlw	0
  5042  003022  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5043                           
  5044                           ;train_move_right.c: 300: Return_Val = 0;
  5045  003024  0E00               	movlw	0
  5046  003026  D005               	goto	L65
  5047  003028                     l1232:
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;train_move_right.c: 302: }
  5051                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5052                           
  5053                           ; BSR set to: 0
  5054  003028  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5055  00302A  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5059  00302C  0E03               	movlw	3
  5060  00302E                     L67:
  5061  00302E  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5062  003030                     l7764:
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;train_move_right.c: 305: Return_Val = 1;
  5066  003030  0E01               	movlw	1
  5067  003032                     L65:
  5068  003032  6FDC               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;train_move_right.c: 309: }
  5072                           
  5073                           ; BSR set to: 0
  5074                           
  5075                           ;train_move_right.c: 308: default : break;
  5076                           
  5077                           ;train_move_right.c: 306: break;
  5078  003034  D00E               	goto	l1225
  5079  003036                     l1222:
  5080                           
  5081                           ; BSR set to: 0
  5082  003036  0100               	movlb	0	; () banked
  5083  003038  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5084                           
  5085                           ; Switch size 1, requested type "space"
  5086                           ; Number of cases is 4, Range of values is 0 to 3
  5087                           ; switch strategies available:
  5088                           ; Name         Instructions Cycles
  5089                           ; simple_byte           13     7 (average)
  5090                           ;	Chosen strategy is simple_byte
  5091  00303A  0A00               	xorlw	0	; case 0
  5092  00303C  B4D8               	btfsc	status,2,c
  5093  00303E  D76C               	goto	l1223
  5094  003040  0A01               	xorlw	1	; case 1
  5095  003042  B4D8               	btfsc	status,2,c
  5096  003044  D798               	goto	l1228
  5097  003046  0A03               	xorlw	3	; case 2
  5098  003048  B4D8               	btfsc	status,2,c
  5099  00304A  D7B0               	goto	l1230
  5100  00304C  0A01               	xorlw	1	; case 3
  5101  00304E  B4D8               	btfsc	status,2,c
  5102  003050  D7D6               	goto	l1231
  5103  003052                     l1225:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;train_move_right.c: 311: return(Return_Val);
  5107                           
  5108                           ; BSR set to: 0
  5109  003052  51DC               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5110  003054  0012               	return	
  5111  003056                     __end_of_Train_Move_Right_Brake:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           postdec1	equ	0xFE5
  5120                           fsr1l	equ	0xFE1
  5121                           status	equ	0xFD8
  5122                           
  5123 ;; *************** function _Train_Move_Left_Start *****************
  5124 ;; Defined at:
  5125 ;;		line 27 in file "../train_move_left.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      unsigned char 
  5132 ;; Registers used:
  5133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5139 ;;      Params:         0       0       0       0       0       0       0       0       0
  5140 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5142 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5143 ;;Total ram usage:        2 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    6
  5146 ;; This function calls:
  5147 ;;		_GETxAPIxVAL
  5148 ;;		_SETxAPIxVAL
  5149 ;;		_SETxPWM
  5150 ;; This function is called by:
  5151 ;;		_Train_Path
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text5
  5156  003056                     __ptext5:
  5157                           	opt stack 0
  5158  003056                     _Train_Move_Left_Start:
  5159                           	opt stack 22
  5160                           
  5161                           ;train_move_left.c: 29: static char Return_Val = 1;
  5162                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5163                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;incstack = 0
  5167  003056  D08B               	goto	l1049
  5168  003058  0E00               	movlw	0
  5169  00305A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5170  00305C  0E14               	movlw	20
  5171  00305E  6E13               	movwf	GETxAPIxVAL@index,c
  5172  003060  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5173  003064  5013               	movf	?_GETxAPIxVAL,w,c
  5174  003066  0100               	movlb	0	; () banked
  5175  003068  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5176  00306A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5177  00306C  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5178  00306E  A0D8               	btfss	status,0,c
  5179  003070  D002               	goto	l1051
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;train_move_left.c: 37: {
  5183                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5184  003072  0E01               	movlw	1
  5185  003074  D03E               	goto	L70
  5186  003076                     l1051:
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;train_move_left.c: 42: }
  5190                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5191                           
  5192                           ; BSR set to: 0
  5193  003076  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5194  003078  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5198  00307A  0E00               	movlw	0
  5199  00307C  D043               	goto	L71
  5200  00307E                     l7680:
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;train_move_left.c: 45: Return_Val = 1;
  5204  00307E  0E01               	movlw	1
  5205  003080  6FDF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5206                           
  5207                           ;train_move_left.c: 46: break;
  5208  003082  D083               	goto	l1052
  5209  003084                     
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213  003084  0E00               	movlw	0
  5214  003086  6E14               	movwf	GETxAPIxVAL@index+1,c
  5215  003088  0E15               	movlw	21
  5216  00308A  6E13               	movwf	GETxAPIxVAL@index,c
  5217  00308C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5218  003090  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Left_Start$2178
  5219  003094  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Start$2178+1
  5220  003098  C0CB  F01F         	movff	_Train_Move_Left_Start$2178,SETxPWM@speed
  5221  00309C  C0CC  F020         	movff	_Train_Move_Left_Start$2178+1,SETxPWM@speed+1
  5222  0030A0  0E00               	movlw	0
  5223  0030A2  6E21               	movwf	SETxPWM@direction,c
  5224  0030A4  EC17  F01E         	call	_SETxPWM	;wreg free
  5225                           
  5226                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5227  0030A8  0E00               	movlw	0
  5228  0030AA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5229  0030AC  0E15               	movlw	21
  5230  0030AE  6E13               	movwf	GETxAPIxVAL@index,c
  5231  0030B0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5232  0030B4  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5233  0030B8  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5234                           
  5235                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  5236  0030BC  0E00               	movlw	0
  5237  0030BE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5238  0030C0  0E45               	movlw	69
  5239  0030C2  6E19               	movwf	SETxAPIxVAL@index,c
  5240  0030C4  0E00               	movlw	0
  5241  0030C6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5242  0030C8  0E00               	movlw	0
  5243  0030CA  6E1B               	movwf	SETxAPIxVAL@value,c
  5244  0030CC  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  5245                           
  5246                           ;train_move_left.c: 51: Switch_Train_Move = 2;
  5247  0030D0  0E02               	movlw	2
  5248  0030D2  0100               	movlb	0	; () banked
  5249  0030D4  D017               	goto	L71
  5250  0030D6                     
  5251                           ; BSR set to: 0
  5252                           
  5253                           ; BSR set to: 0
  5254  0030D6  0E00               	movlw	0
  5255  0030D8  6E14               	movwf	GETxAPIxVAL@index+1,c
  5256  0030DA  0E12               	movlw	18
  5257  0030DC  6E13               	movwf	GETxAPIxVAL@index,c
  5258  0030DE  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5259  0030E2  5013               	movf	?_GETxAPIxVAL,w,c
  5260  0030E4  0100               	movlb	0	; () banked
  5261  0030E6  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5262  0030E8  5014               	movf	?_GETxAPIxVAL+1,w,c
  5263  0030EA  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5264  0030EC  A0D8               	btfss	status,0,c
  5265  0030EE  D007               	goto	l1055
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;train_move_left.c: 56: {
  5269                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5270  0030F0  0E03               	movlw	3
  5271  0030F2                     L70:
  5272  0030F2  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5273                           
  5274                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5275  0030F4  0E00               	movlw	0
  5276  0030F6  6F67               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5277  0030F8  0E00               	movlw	0
  5278  0030FA  6F66               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5279  0030FC  D7C0               	goto	l7680
  5280  0030FE                     l1055:
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;train_move_left.c: 61: }
  5284                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5285                           
  5286                           ; BSR set to: 0
  5287  0030FE  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5288  003100  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5292  003102  0E02               	movlw	2
  5293  003104                     L71:
  5294  003104  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5295  003106  D7BB               	goto	l7680
  5296  003108                     
  5297                           ; BSR set to: 0
  5298                           
  5299                           ; BSR set to: 0
  5300  003108  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5301  00310C  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5302  003110  0E00               	movlw	0
  5303  003112  6E21               	movwf	SETxPWM@direction,c
  5304  003114  EC17  F01E         	call	_SETxPWM	;wreg free
  5305                           
  5306                           ;train_move_left.c: 68: Return_Val = 1;
  5307  003118  0E01               	movlw	1
  5308  00311A  0100               	movlb	0	; () banked
  5309  00311C  6FDF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5313  00311E  0E00               	movlw	0
  5314  003120  6E14               	movwf	GETxAPIxVAL@index+1,c
  5315  003122  0E18               	movlw	24
  5316  003124  6E13               	movwf	GETxAPIxVAL@index,c
  5317  003126  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5318  00312A  5013               	movf	?_GETxAPIxVAL,w,c
  5319  00312C  0100               	movlb	0	; () banked
  5320  00312E  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5321  003130  5014               	movf	?_GETxAPIxVAL+1,w,c
  5322  003132  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5323  003134  A0D8               	btfss	status,0,c
  5324  003136  D004               	goto	l1057
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;train_move_left.c: 70: {
  5328                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5329  003138  0E00               	movlw	0
  5330  00313A  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5331                           
  5332                           ;train_move_left.c: 72: Return_Val = 0;
  5333  00313C  0E00               	movlw	0
  5334  00313E  D7A0               	goto	L69
  5335  003140                     l1057:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5339                           
  5340                           ; BSR set to: 0
  5341  003140  0E00               	movlw	0
  5342  003142  6E14               	movwf	GETxAPIxVAL@index+1,c
  5343  003144  0E1A               	movlw	26
  5344  003146  6E13               	movwf	GETxAPIxVAL@index,c
  5345  003148  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5346  00314C  5013               	movf	?_GETxAPIxVAL,w,c
  5347  00314E  0100               	movlb	0	; () banked
  5348  003150  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5349  003152  5014               	movf	?_GETxAPIxVAL+1,w,c
  5350  003154  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5351  003156  A0D8               	btfss	status,0,c
  5352  003158  D007               	goto	l1059
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;train_move_left.c: 76: {
  5356                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5357  00315A  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5358  00315C  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5362  00315E  0E00               	movlw	0
  5363  003160  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5364  003162  0E00               	movlw	0
  5365  003164  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5366                           
  5367                           ;train_move_left.c: 79: }
  5368  003166  D011               	goto	l1052
  5369  003168                     l1059:
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5373                           
  5374                           ; BSR set to: 0
  5375  003168  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5376  00316A  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;train_move_left.c: 83: }
  5380                           
  5381                           ; BSR set to: 0
  5382                           
  5383                           ;train_move_left.c: 82: default : break;
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;train_move_left.c: 81: break;
  5387                           
  5388                           ; BSR set to: 0
  5389  00316C  D00E               	goto	l1052
  5390  00316E                     l1049:
  5391                           
  5392                           ; BSR set to: 0
  5393  00316E  0100               	movlb	0	; () banked
  5394  003170  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5395                           
  5396                           ; Switch size 1, requested type "space"
  5397                           ; Number of cases is 4, Range of values is 0 to 3
  5398                           ; switch strategies available:
  5399                           ; Name         Instructions Cycles
  5400                           ; simple_byte           13     7 (average)
  5401                           ;	Chosen strategy is simple_byte
  5402  003172  0A00               	xorlw	0	; case 0
  5403  003174  B4D8               	btfsc	status,2,c
  5404  003176  D770               	goto	l1050
  5405  003178  0A01               	xorlw	1	; case 1
  5406  00317A  B4D8               	btfsc	status,2,c
  5407  00317C  D783               	goto	l1053
  5408  00317E  0A03               	xorlw	3	; case 2
  5409  003180  B4D8               	btfsc	status,2,c
  5410  003182  D7A9               	goto	l1054
  5411  003184  0A01               	xorlw	1	; case 3
  5412  003186  B4D8               	btfsc	status,2,c
  5413  003188  D7BF               	goto	l1056
  5414  00318A                     l1052:
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;train_move_left.c: 85: return(Return_Val);
  5418                           
  5419                           ; BSR set to: 0
  5420  00318A  51DF               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5421  00318C  0012               	return	
  5422  00318E                     __end_of_Train_Move_Left_Start:
  5423                           	opt stack 0
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           postinc0	equ	0xFEE
  5429                           wreg	equ	0xFE8
  5430                           postdec1	equ	0xFE5
  5431                           fsr1l	equ	0xFE1
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function _Train_Move_Left_Brake *****************
  5435 ;; Defined at:
  5436 ;;		line 256 in file "../train_move_left.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;		None
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      unsigned char 
  5443 ;; Registers used:
  5444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5450 ;;      Params:         0       0       0       0       0       0       0       0       0
  5451 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5453 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5454 ;;Total ram usage:        2 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    6
  5457 ;; This function calls:
  5458 ;;		_GETxAPIxVAL
  5459 ;;		_SETxAPIxVAL
  5460 ;;		_SETxPWM
  5461 ;; This function is called by:
  5462 ;;		_Train_Path
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text6
  5467  002DD0                     __ptext6:
  5468                           	opt stack 0
  5469  002DD0                     _Train_Move_Left_Brake:
  5470                           	opt stack 22
  5471                           
  5472                           ;train_move_left.c: 258: static char Return_Val = 1;
  5473                           ;train_move_left.c: 259: static unsigned int Train_Move_Wait_Time = 0;
  5474                           ;train_move_left.c: 261: switch(Switch_Train_Move)
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;incstack = 0
  5478  002DD0  D092               	goto	l1119
  5479  002DD2  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5480  002DD6  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5481  002DDA  0E00               	movlw	0
  5482  002DDC  6E21               	movwf	SETxPWM@direction,c
  5483  002DDE  EC17  F01E         	call	_SETxPWM	;wreg free
  5484                           
  5485                           ;train_move_left.c: 264: Return_Val = 1;
  5486  002DE2  0E01               	movlw	1
  5487  002DE4  0100               	movlb	0	; () banked
  5488  002DE6  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;train_move_left.c: 265: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5492  002DE8  0E00               	movlw	0
  5493  002DEA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5494  002DEC  0E15               	movlw	21
  5495  002DEE  6E13               	movwf	GETxAPIxVAL@index,c
  5496  002DF0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5497  002DF4  0100               	movlb	0	; () banked
  5498  002DF6  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5499  002DF8  5C13               	subwf	?_GETxAPIxVAL,w,c
  5500  002DFA  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5501  002DFC  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5502  002DFE  A0D8               	btfss	status,0,c
  5503  002E00  D002               	goto	l1121
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;train_move_left.c: 266: {
  5507                           ;train_move_left.c: 267: Switch_Train_Move = 1;
  5508  002E02  0E01               	movlw	1
  5509  002E04  D074               	goto	L97
  5510  002E06                     l1121:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;train_move_left.c: 270: }
  5514                           ;train_move_left.c: 271: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5515                           
  5516                           ; BSR set to: 0
  5517  002E06  0E00               	movlw	0
  5518  002E08  6E14               	movwf	GETxAPIxVAL@index+1,c
  5519  002E0A  0E19               	movlw	25
  5520  002E0C  6E13               	movwf	GETxAPIxVAL@index,c
  5521  002E0E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5522  002E12  5013               	movf	?_GETxAPIxVAL,w,c
  5523  002E14  0100               	movlb	0	; () banked
  5524  002E16  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5525  002E18  5014               	movf	?_GETxAPIxVAL+1,w,c
  5526  002E1A  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5527  002E1C  A0D8               	btfss	status,0,c
  5528  002E1E  D008               	goto	l1123
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;train_move_left.c: 272: {
  5532                           ;train_move_left.c: 273: Train_Move_Pwm_Count--;
  5533  002E20  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5534  002E22  A0D8               	btfss	status,0,c
  5535  002E24  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;train_move_left.c: 274: Train_Move_Pwm_Fast_Count = 0;
  5539  002E26  0E00               	movlw	0
  5540  002E28  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5541  002E2A  0E00               	movlw	0
  5542  002E2C  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5543                           
  5544                           ;train_move_left.c: 275: }
  5545  002E2E  D071               	goto	l1122
  5546  002E30                     l1123:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;train_move_left.c: 276: else{Train_Move_Pwm_Fast_Count++;}
  5550                           
  5551                           ; BSR set to: 0
  5552  002E30  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5553  002E32  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;train_move_left.c: 277: break;
  5557  002E34  D06E               	goto	l1122
  5558  002E36                     
  5559                           ; BSR set to: 0
  5560                           
  5561                           ; BSR set to: 0
  5562  002E36  0E00               	movlw	0
  5563  002E38  6E14               	movwf	GETxAPIxVAL@index+1,c
  5564  002E3A  0E12               	movlw	18
  5565  002E3C  6E13               	movwf	GETxAPIxVAL@index,c
  5566  002E3E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5567  002E42  5013               	movf	?_GETxAPIxVAL,w,c
  5568  002E44  0100               	movlb	0	; () banked
  5569  002E46  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5570  002E48  5014               	movf	?_GETxAPIxVAL+1,w,c
  5571  002E4A  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5572  002E4C  A0D8               	btfss	status,0,c
  5573  002E4E  D007               	goto	l1126
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;train_move_left.c: 280: {
  5577                           ;train_move_left.c: 281: Switch_Train_Move = 2;
  5578  002E50  0E02               	movlw	2
  5579  002E52  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5580                           
  5581                           ;train_move_left.c: 282: Train_Move_Wait_Time = 0;
  5582  002E54  0E00               	movlw	0
  5583  002E56  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5584  002E58  0E00               	movlw	0
  5585  002E5A  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5586  002E5C  D049               	goto	l7816
  5587  002E5E                     l1126:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;train_move_left.c: 285: }
  5591                           ;train_move_left.c: 286: Return_Val = 1;
  5592                           
  5593                           ; BSR set to: 0
  5594  002E5E  0E01               	movlw	1
  5595  002E60  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;train_move_left.c: 287: Train_Move_Wait_Time++;
  5599  002E62  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5600  002E64  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;train_move_left.c: 288: Switch_Train_Move = 1;
  5604  002E66  0E01               	movlw	1
  5605  002E68  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5606                           
  5607                           ;train_move_left.c: 289: break;
  5608  002E6A  D053               	goto	l1122
  5609  002E6C                     
  5610                           ; BSR set to: 0
  5611                           
  5612                           ; BSR set to: 0
  5613  002E6C  0E00               	movlw	0
  5614  002E6E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5615  002E70  0E15               	movlw	21
  5616  002E72  6E13               	movwf	GETxAPIxVAL@index,c
  5617  002E74  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5618  002E78  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Left_Brake$2179
  5619  002E7C  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Brake$2179+1
  5620  002E80  C0CB  F01F         	movff	_Train_Move_Left_Brake$2179,SETxPWM@speed
  5621  002E84  C0CC  F020         	movff	_Train_Move_Left_Brake$2179+1,SETxPWM@speed+1
  5622  002E88  0E00               	movlw	0
  5623  002E8A  6E21               	movwf	SETxPWM@direction,c
  5624  002E8C  EC17  F01E         	call	_SETxPWM	;wreg free
  5625                           
  5626                           ;train_move_left.c: 292: SETxAPIxVAL(69, 1);;
  5627  002E90  0E00               	movlw	0
  5628  002E92  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5629  002E94  0E45               	movlw	69
  5630  002E96  6E19               	movwf	SETxAPIxVAL@index,c
  5631  002E98  0E00               	movlw	0
  5632  002E9A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5633  002E9C  0E01               	movlw	1
  5634  002E9E  6E1B               	movwf	SETxAPIxVAL@value,c
  5635  002EA0  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  5636                           
  5637                           ;train_move_left.c: 293: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5638  002EA4  0E00               	movlw	0
  5639  002EA6  6E14               	movwf	GETxAPIxVAL@index+1,c
  5640  002EA8  0E15               	movlw	21
  5641  002EAA  6E13               	movwf	GETxAPIxVAL@index,c
  5642  002EAC  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5643  002EB0  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5644  002EB4  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5645                           
  5646                           ;train_move_left.c: 294: Switch_Train_Move = 3;
  5647  002EB8  0E03               	movlw	3
  5648  002EBA  0100               	movlb	0	; () banked
  5649  002EBC  D018               	goto	L97
  5650  002EBE                     
  5651                           ; BSR set to: 0
  5652                           
  5653                           ; BSR set to: 0
  5654  002EBE  0E00               	movlw	0
  5655  002EC0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5656  002EC2  0E14               	movlw	20
  5657  002EC4  6E13               	movwf	GETxAPIxVAL@index,c
  5658  002EC6  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5659  002ECA  5013               	movf	?_GETxAPIxVAL,w,c
  5660  002ECC  0100               	movlb	0	; () banked
  5661  002ECE  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5662  002ED0  5014               	movf	?_GETxAPIxVAL+1,w,c
  5663  002ED2  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5664  002ED4  A0D8               	btfss	status,0,c
  5665  002ED6  D008               	goto	l1129
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;train_move_left.c: 299: {
  5669                           ;train_move_left.c: 300: Switch_Train_Move = 0;
  5670  002ED8  0E00               	movlw	0
  5671  002EDA  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5672                           
  5673                           ;train_move_left.c: 301: Train_Move_Wait_Time = 0;
  5674  002EDC  0E00               	movlw	0
  5675  002EDE  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5676  002EE0  0E00               	movlw	0
  5677  002EE2  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5678                           
  5679                           ;train_move_left.c: 302: Return_Val = 0;
  5680  002EE4  0E00               	movlw	0
  5681  002EE6  D005               	goto	L74
  5682  002EE8                     l1129:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;train_move_left.c: 304: }
  5686                           ;train_move_left.c: 305: Train_Move_Wait_Time++;
  5687                           
  5688                           ; BSR set to: 0
  5689  002EE8  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5690  002EEA  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;train_move_left.c: 306: Switch_Train_Move = 3;
  5694  002EEC  0E03               	movlw	3
  5695  002EEE                     L97:
  5696  002EEE  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5697  002EF0                     l7816:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;train_move_left.c: 307: Return_Val = 1;
  5701  002EF0  0E01               	movlw	1
  5702  002EF2                     L74:
  5703  002EF2  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;train_move_left.c: 311: }
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ;train_move_left.c: 310: default : break;
  5711                           
  5712                           ;train_move_left.c: 308: break;
  5713  002EF4  D00E               	goto	l1122
  5714  002EF6                     l1119:
  5715                           
  5716                           ; BSR set to: 0
  5717  002EF6  0100               	movlb	0	; () banked
  5718  002EF8  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5719                           
  5720                           ; Switch size 1, requested type "space"
  5721                           ; Number of cases is 4, Range of values is 0 to 3
  5722                           ; switch strategies available:
  5723                           ; Name         Instructions Cycles
  5724                           ; simple_byte           13     7 (average)
  5725                           ;	Chosen strategy is simple_byte
  5726  002EFA  0A00               	xorlw	0	; case 0
  5727  002EFC  B4D8               	btfsc	status,2,c
  5728  002EFE  D769               	goto	l1120
  5729  002F00  0A01               	xorlw	1	; case 1
  5730  002F02  B4D8               	btfsc	status,2,c
  5731  002F04  D798               	goto	l1125
  5732  002F06  0A03               	xorlw	3	; case 2
  5733  002F08  B4D8               	btfsc	status,2,c
  5734  002F0A  D7B0               	goto	l1127
  5735  002F0C  0A01               	xorlw	1	; case 3
  5736  002F0E  B4D8               	btfsc	status,2,c
  5737  002F10  D7D6               	goto	l1128
  5738  002F12                     l1122:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;train_move_left.c: 313: return(Return_Val);
  5742                           
  5743                           ; BSR set to: 0
  5744  002F12  51DE               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5745  002F14  0012               	return	
  5746  002F16                     __end_of_Train_Move_Left_Brake:
  5747                           	opt stack 0
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           postinc0	equ	0xFEE
  5753                           wreg	equ	0xFE8
  5754                           postdec1	equ	0xFE5
  5755                           fsr1l	equ	0xFE1
  5756                           status	equ	0xFD8
  5757                           
  5758 ;; *************** function _Right_Mountain_From_The_Right *****************
  5759 ;; Defined at:
  5760 ;;		line 103 in file "../train_move_left.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  rc              1    wreg     unsigned char 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  rc              1   21[BANK0 ] unsigned char 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      unsigned char 
  5767 ;; Registers used:
  5768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5774 ;;      Params:         0       0       0       0       0       0       0       0       0
  5775 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5777 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5778 ;;Total ram usage:        1 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    6
  5781 ;; This function calls:
  5782 ;;		_GETxAPIxVAL
  5783 ;;		_SETxPWM
  5784 ;; This function is called by:
  5785 ;;		_Train_Path
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           	psect	text7
  5790  003522                     __ptext7:
  5791                           	opt stack 0
  5792  003522                     _Right_Mountain_From_The_Right:
  5793                           	opt stack 22
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;incstack = 0
  5797                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5798  003522  0100               	movlb	0	; () banked
  5799  003524  6FCB               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  5800                           
  5801                           ;train_move_left.c: 105: static char Return_Val = 1;
  5802                           ;train_move_left.c: 107: switch (Switch_Moutain){
  5803  003526  D07E               	goto	l1067
  5804  003528  0E03               	movlw	3
  5805  00352A  0100               	movlb	0	; () banked
  5806  00352C  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5807  00352E  B4D8               	btfsc	status,2,c
  5808  003530  D00C               	goto	u6870
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  5812                           
  5813                           ; BSR set to: 0
  5814                           
  5815                           ;train_move_left.c: 111: }
  5816                           
  5817                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;train_move_left.c: 109: Switch_Moutain = 1;
  5821  003532  0E00               	movlw	0
  5822  003534  6E14               	movwf	GETxAPIxVAL@index+1,c
  5823  003536  0E35               	movlw	53
  5824  003538  6E13               	movwf	GETxAPIxVAL@index,c
  5825  00353A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5826  00353E  5013               	movf	?_GETxAPIxVAL,w,c
  5827  003540  5C26               	subwf	_Mountain_Delay_Counter,w,c
  5828  003542  5014               	movf	?_GETxAPIxVAL+1,w,c
  5829  003544  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  5830  003546  A0D8               	btfss	status,0,c
  5831  003548  D007               	goto	l1071
  5832  00354A                     u6870:
  5833                           
  5834                           ;train_move_left.c: 114: Switch_Moutain = 1;
  5835  00354A  0E01               	movlw	1
  5836  00354C  6E2E               	movwf	_Switch_Moutain,c
  5837                           
  5838                           ;train_move_left.c: 115: Mountain_Delay_Counter = 0;
  5839  00354E  0E00               	movlw	0
  5840  003550  6E27               	movwf	_Mountain_Delay_Counter+1,c
  5841  003552  0E00               	movlw	0
  5842  003554  6E26               	movwf	_Mountain_Delay_Counter,c
  5843                           
  5844                           ;train_move_left.c: 116: }
  5845  003556  D063               	goto	l1085
  5846  003558                     l1071:
  5847                           
  5848                           ;train_move_left.c: 117: else{
  5849                           ;train_move_left.c: 118: Mountain_Delay_Counter++;
  5850  003558  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  5851  00355A  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  5852  00355C  D060               	goto	l1085
  5853  00355E  0E04               	movlw	4
  5854  003560  0100               	movlb	0	; () banked
  5855  003562  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5856  003564  A4D8               	btfss	status,2,c
  5857  003566  D026               	goto	l1075
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;train_move_left.c: 125: SETxPWM(Train_Move_Pwm_Count, 0);
  5861  003568  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5862  00356C  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5863  003570  0E00               	movlw	0
  5864  003572  6E21               	movwf	SETxPWM@direction,c
  5865  003574  EC17  F01E         	call	_SETxPWM	;wreg free
  5866                           
  5867                           ;train_move_left.c: 126: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  5868  003578  0E00               	movlw	0
  5869  00357A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5870  00357C  0E2E               	movlw	46
  5871  00357E  6E13               	movwf	GETxAPIxVAL@index,c
  5872  003580  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5873  003584  0100               	movlb	0	; () banked
  5874  003586  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5875  003588  5C13               	subwf	?_GETxAPIxVAL,w,c
  5876  00358A  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5877  00358C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5878  00358E  B0D8               	btfsc	status,0,c
  5879  003590  D02A               	goto	u6920
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;train_move_left.c: 133: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5883                           
  5884                           ; BSR set to: 0
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;train_move_left.c: 132: }
  5888                           
  5889                           ;train_move_left.c: 131: break;
  5890                           
  5891                           ;train_move_left.c: 130: Return_Val = 0;
  5892                           
  5893                           ;train_move_left.c: 129: Switch_Moutain = 0;
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;train_move_left.c: 127: {
  5897                           ;train_move_left.c: 128: Switch_Train_Move = 0;
  5898  003592  0E00               	movlw	0
  5899  003594  6E14               	movwf	GETxAPIxVAL@index+1,c
  5900  003596  0E1A               	movlw	26
  5901  003598  6E13               	movwf	GETxAPIxVAL@index,c
  5902  00359A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5903  00359E  5013               	movf	?_GETxAPIxVAL,w,c
  5904  0035A0  0100               	movlb	0	; () banked
  5905  0035A2  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5906  0035A4  5014               	movf	?_GETxAPIxVAL+1,w,c
  5907  0035A6  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5908  0035A8  A0D8               	btfss	status,0,c
  5909  0035AA  D037               	goto	l1084
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;train_move_left.c: 134: {
  5913                           ;train_move_left.c: 135: Train_Move_Pwm_Count--;
  5914  0035AC  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5915  0035AE  A0D8               	btfss	status,0,c
  5916  0035B0  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5917  0035B2  D02E               	goto	l7980
  5918  0035B4                     l1075:
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;train_move_left.c: 140: else if (rc == 3){
  5922                           
  5923                           ; BSR set to: 0
  5924  0035B4  0E03               	movlw	3
  5925  0035B6  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5926  0035B8  A4D8               	btfss	status,2,c
  5927  0035BA  D031               	goto	l1085
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;train_move_left.c: 141: SETxPWM(Train_Move_Pwm_Count, 0);
  5931  0035BC  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5932  0035C0  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5933  0035C4  0E00               	movlw	0
  5934  0035C6  6E21               	movwf	SETxPWM@direction,c
  5935  0035C8  EC17  F01E         	call	_SETxPWM	;wreg free
  5936                           
  5937                           ;train_move_left.c: 142: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5938  0035CC  0E00               	movlw	0
  5939  0035CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  5940  0035D0  0E18               	movlw	24
  5941  0035D2  6E13               	movwf	GETxAPIxVAL@index,c
  5942  0035D4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5943  0035D8  5013               	movf	?_GETxAPIxVAL,w,c
  5944  0035DA  0100               	movlb	0	; () banked
  5945  0035DC  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5946  0035DE  5014               	movf	?_GETxAPIxVAL+1,w,c
  5947  0035E0  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5948  0035E2  A0D8               	btfss	status,0,c
  5949  0035E4  D006               	goto	l1082
  5950  0035E6                     u6920:
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;train_move_left.c: 143: {
  5954                           ;train_move_left.c: 144: Switch_Train_Move = 0;
  5955  0035E6  0E00               	movlw	0
  5956  0035E8  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5957                           
  5958                           ;train_move_left.c: 145: Switch_Moutain = 0;
  5959  0035EA  0E00               	movlw	0
  5960  0035EC  6E2E               	movwf	_Switch_Moutain,c
  5961                           
  5962                           ;train_move_left.c: 146: Return_Val = 0;
  5963  0035EE  0E00               	movlw	0
  5964  0035F0  D017               	goto	L78
  5965  0035F2                     l1082:
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;train_move_left.c: 149: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5969                           
  5970                           ; BSR set to: 0
  5971  0035F2  0E00               	movlw	0
  5972  0035F4  6E14               	movwf	GETxAPIxVAL@index+1,c
  5973  0035F6  0E1A               	movlw	26
  5974  0035F8  6E13               	movwf	GETxAPIxVAL@index,c
  5975  0035FA  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  5976  0035FE  5013               	movf	?_GETxAPIxVAL,w,c
  5977  003600  0100               	movlb	0	; () banked
  5978  003602  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5979  003604  5014               	movf	?_GETxAPIxVAL+1,w,c
  5980  003606  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5981  003608  A0D8               	btfss	status,0,c
  5982  00360A  D007               	goto	l1084
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;train_move_left.c: 150: {
  5986                           ;train_move_left.c: 151: Train_Move_Pwm_Count++;
  5987  00360C  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5988  00360E  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5989  003610                     l7980:
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;train_move_left.c: 152: Train_Move_Pwm_Fast_Count = 0;
  5993  003610  0E00               	movlw	0
  5994  003612  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5995  003614  0E00               	movlw	0
  5996  003616  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5997                           
  5998                           ;train_move_left.c: 153: }
  5999  003618  D002               	goto	l1085
  6000  00361A                     l1084:
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;train_move_left.c: 154: else{Train_Move_Pwm_Fast_Count++;}
  6004                           
  6005                           ; BSR set to: 0
  6006  00361A  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6007  00361C  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6008  00361E                     l1085:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;train_move_left.c: 155: }
  6012                           ;train_move_left.c: 156: Return_Val = 1;
  6013                           
  6014                           ; BSR set to: 0
  6015                           
  6016                           ; BSR set to: 0
  6017                           
  6018                           ; BSR set to: 0
  6019                           
  6020                           ; BSR set to: 0
  6021  00361E  0E01               	movlw	1
  6022  003620                     L78:
  6023  003620  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;train_move_left.c: 161: }
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;train_move_left.c: 160: break;
  6030                           
  6031                           ;train_move_left.c: 159: default:
  6032                           
  6033                           ;train_move_left.c: 157: break;
  6034  003622  D007               	goto	l1073
  6035  003624                     l1067:
  6036                           
  6037                           ; BSR set to: 0
  6038  003624  502E               	movf	_Switch_Moutain,w,c
  6039                           
  6040                           ; Switch size 1, requested type "space"
  6041                           ; Number of cases is 2, Range of values is 0 to 1
  6042                           ; switch strategies available:
  6043                           ; Name         Instructions Cycles
  6044                           ; simple_byte            7     4 (average)
  6045                           ;	Chosen strategy is simple_byte
  6046  003626  0A00               	xorlw	0	; case 0
  6047  003628  B4D8               	btfsc	status,2,c
  6048  00362A  D77E               	goto	l1068
  6049  00362C  0A01               	xorlw	1	; case 1
  6050  00362E  B4D8               	btfsc	status,2,c
  6051  003630  D796               	goto	l1074
  6052  003632                     l1073:
  6053                           
  6054                           ;train_move_left.c: 163: return(Return_Val);
  6055  003632  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  6056  003634  0012               	return	
  6057  003636                     __end_of_Right_Mountain_From_The_Right:
  6058                           	opt stack 0
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           postinc0	equ	0xFEE
  6064                           wreg	equ	0xFE8
  6065                           postdec1	equ	0xFE5
  6066                           fsr1l	equ	0xFE1
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function _Right_Mountain_From_The_Left *****************
  6070 ;; Defined at:
  6071 ;;		line 179 in file "../train_move_right.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  rc              1    wreg     unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  rc              1   21[BANK0 ] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      unsigned char 
  6078 ;; Registers used:
  6079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6085 ;;      Params:         0       0       0       0       0       0       0       0       0
  6086 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6088 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6089 ;;Total ram usage:        1 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    6
  6092 ;; This function calls:
  6093 ;;		_GETxAPIxVAL
  6094 ;;		_SETxPWM
  6095 ;; This function is called by:
  6096 ;;		_Train_Path
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           	psect	text8
  6101  003636                     __ptext8:
  6102                           	opt stack 0
  6103  003636                     _Right_Mountain_From_The_Left:
  6104                           	opt stack 22
  6105                           
  6106                           ;incstack = 0
  6107                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6108  003636  0100               	movlb	0	; () banked
  6109  003638  6FCB               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6110                           
  6111                           ;train_move_right.c: 181: static char Return_Val = 1;
  6112                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6113  00363A  D07E               	goto	l1195
  6114  00363C  0E04               	movlw	4
  6115  00363E  0100               	movlb	0	; () banked
  6116  003640  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6117  003642  B4D8               	btfsc	status,2,c
  6118  003644  D00C               	goto	u6790
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  6122                           
  6123                           ; BSR set to: 0
  6124                           
  6125                           ;train_move_right.c: 187: }
  6126                           
  6127                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6131  003646  0E00               	movlw	0
  6132  003648  6E14               	movwf	GETxAPIxVAL@index+1,c
  6133  00364A  0E38               	movlw	56
  6134  00364C  6E13               	movwf	GETxAPIxVAL@index,c
  6135  00364E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6136  003652  5013               	movf	?_GETxAPIxVAL,w,c
  6137  003654  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6138  003656  5014               	movf	?_GETxAPIxVAL+1,w,c
  6139  003658  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6140  00365A  A0D8               	btfss	status,0,c
  6141  00365C  D007               	goto	l1199
  6142  00365E                     u6790:
  6143                           
  6144                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6145  00365E  0E01               	movlw	1
  6146  003660  6E2E               	movwf	_Switch_Moutain,c
  6147                           
  6148                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6149  003662  0E00               	movlw	0
  6150  003664  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6151  003666  0E00               	movlw	0
  6152  003668  6E26               	movwf	_Mountain_Delay_Counter,c
  6153                           
  6154                           ;train_move_right.c: 191: }
  6155  00366A  D063               	goto	l1213
  6156  00366C                     l1199:
  6157                           
  6158                           ;train_move_right.c: 192: else{
  6159                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6160  00366C  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6161  00366E  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6162  003670  D060               	goto	l1213
  6163  003672  0E03               	movlw	3
  6164  003674  0100               	movlb	0	; () banked
  6165  003676  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6166  003678  A4D8               	btfss	status,2,c
  6167  00367A  D025               	goto	l1203
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6171  00367C  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6172  003680  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6173  003684  0E01               	movlw	1
  6174  003686  6E21               	movwf	SETxPWM@direction,c
  6175  003688  EC17  F01E         	call	_SETxPWM	;wreg free
  6176                           
  6177                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  6178  00368C  0E00               	movlw	0
  6179  00368E  6E14               	movwf	GETxAPIxVAL@index+1,c
  6180  003690  0E2F               	movlw	47
  6181  003692  6E13               	movwf	GETxAPIxVAL@index,c
  6182  003694  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6183  003698  5013               	movf	?_GETxAPIxVAL,w,c
  6184  00369A  0100               	movlb	0	; () banked
  6185  00369C  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6186  00369E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6187  0036A0  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6188  0036A2  B0D8               	btfsc	status,0,c
  6189  0036A4  D029               	goto	u6840
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6193                           
  6194                           ; BSR set to: 0
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;train_move_right.c: 206: }
  6198                           
  6199                           ;train_move_right.c: 205: break;
  6200                           
  6201                           ;train_move_right.c: 204: Return_Val = 0;
  6202                           
  6203                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;train_move_right.c: 201: {
  6207                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6208  0036A6  0E00               	movlw	0
  6209  0036A8  6E14               	movwf	GETxAPIxVAL@index+1,c
  6210  0036AA  0E1A               	movlw	26
  6211  0036AC  6E13               	movwf	GETxAPIxVAL@index,c
  6212  0036AE  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6213  0036B2  5013               	movf	?_GETxAPIxVAL,w,c
  6214  0036B4  0100               	movlb	0	; () banked
  6215  0036B6  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6216  0036B8  5014               	movf	?_GETxAPIxVAL+1,w,c
  6217  0036BA  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6218  0036BC  A0D8               	btfss	status,0,c
  6219  0036BE  D037               	goto	l1212
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;train_move_right.c: 208: {
  6223                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6224  0036C0  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6225  0036C2  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6226  0036C4  D02F               	goto	l7924
  6227  0036C6                     l1203:
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;train_move_right.c: 214: else if (rc == 4){
  6231                           
  6232                           ; BSR set to: 0
  6233  0036C6  0E04               	movlw	4
  6234  0036C8  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6235  0036CA  A4D8               	btfss	status,2,c
  6236  0036CC  D032               	goto	l1213
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6240  0036CE  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6241  0036D2  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6242  0036D6  0E01               	movlw	1
  6243  0036D8  6E21               	movwf	SETxPWM@direction,c
  6244  0036DA  EC17  F01E         	call	_SETxPWM	;wreg free
  6245                           
  6246                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  6247  0036DE  0E00               	movlw	0
  6248  0036E0  6E14               	movwf	GETxAPIxVAL@index+1,c
  6249  0036E2  0E17               	movlw	23
  6250  0036E4  6E13               	movwf	GETxAPIxVAL@index,c
  6251  0036E6  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6252  0036EA  0100               	movlb	0	; () banked
  6253  0036EC  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6254  0036EE  5C13               	subwf	?_GETxAPIxVAL,w,c
  6255  0036F0  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6256  0036F2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6257  0036F4  A0D8               	btfss	status,0,c
  6258  0036F6  D006               	goto	l1210
  6259  0036F8                     u6840:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;train_move_right.c: 217: {
  6263                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6264  0036F8  0E00               	movlw	0
  6265  0036FA  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6266                           
  6267                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6268  0036FC  0E00               	movlw	0
  6269  0036FE  6E2E               	movwf	_Switch_Moutain,c
  6270                           
  6271                           ;train_move_right.c: 220: Return_Val = 0;
  6272  003700  0E00               	movlw	0
  6273  003702  D018               	goto	L81
  6274  003704                     l1210:
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6278                           
  6279                           ; BSR set to: 0
  6280  003704  0E00               	movlw	0
  6281  003706  6E14               	movwf	GETxAPIxVAL@index+1,c
  6282  003708  0E1A               	movlw	26
  6283  00370A  6E13               	movwf	GETxAPIxVAL@index,c
  6284  00370C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6285  003710  5013               	movf	?_GETxAPIxVAL,w,c
  6286  003712  0100               	movlb	0	; () banked
  6287  003714  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6288  003716  5014               	movf	?_GETxAPIxVAL+1,w,c
  6289  003718  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6290  00371A  A0D8               	btfss	status,0,c
  6291  00371C  D008               	goto	l1212
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;train_move_right.c: 224: {
  6295                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  6296  00371E  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6297  003720  A0D8               	btfss	status,0,c
  6298  003722  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6299  003724                     l7924:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  6303  003724  0E00               	movlw	0
  6304  003726  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6305  003728  0E00               	movlw	0
  6306  00372A  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6307                           
  6308                           ;train_move_right.c: 227: }
  6309  00372C  D002               	goto	l1213
  6310  00372E                     l1212:
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  6314                           
  6315                           ; BSR set to: 0
  6316  00372E  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6317  003730  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6318  003732                     l1213:
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;train_move_right.c: 229: }
  6322                           ;train_move_right.c: 230: Return_Val = 1;
  6323                           
  6324                           ; BSR set to: 0
  6325                           
  6326                           ; BSR set to: 0
  6327                           
  6328                           ; BSR set to: 0
  6329                           
  6330                           ; BSR set to: 0
  6331  003732  0E01               	movlw	1
  6332  003734                     L81:
  6333  003734  6E48               	movwf	Right_Mountain_From_The_Left@Return_Val,c
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;train_move_right.c: 235: }
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;train_move_right.c: 234: break;
  6340                           
  6341                           ;train_move_right.c: 233: default:
  6342                           
  6343                           ;train_move_right.c: 231: break;
  6344  003736  D007               	goto	l1201
  6345  003738                     l1195:
  6346                           
  6347                           ; BSR set to: 0
  6348  003738  502E               	movf	_Switch_Moutain,w,c
  6349                           
  6350                           ; Switch size 1, requested type "space"
  6351                           ; Number of cases is 2, Range of values is 0 to 1
  6352                           ; switch strategies available:
  6353                           ; Name         Instructions Cycles
  6354                           ; simple_byte            7     4 (average)
  6355                           ;	Chosen strategy is simple_byte
  6356  00373A  0A00               	xorlw	0	; case 0
  6357  00373C  B4D8               	btfsc	status,2,c
  6358  00373E  D77E               	goto	l1196
  6359  003740  0A01               	xorlw	1	; case 1
  6360  003742  B4D8               	btfsc	status,2,c
  6361  003744  D796               	goto	l1202
  6362  003746                     l1201:
  6363                           
  6364                           ;train_move_right.c: 237: return(Return_Val);
  6365  003746  5048               	movf	Right_Mountain_From_The_Left@Return_Val,w,c
  6366  003748  0012               	return	
  6367  00374A                     __end_of_Right_Mountain_From_The_Left:
  6368                           	opt stack 0
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           postinc0	equ	0xFEE
  6374                           wreg	equ	0xFE8
  6375                           postdec1	equ	0xFE5
  6376                           fsr1l	equ	0xFE1
  6377                           status	equ	0xFD8
  6378                           
  6379 ;; *************** function _Left_Mountain_From_The_Right *****************
  6380 ;; Defined at:
  6381 ;;		line 180 in file "../train_move_left.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;  rc              1    wreg     unsigned char 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  rc              1   21[BANK0 ] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      unsigned char 
  6388 ;; Registers used:
  6389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0
  6396 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6398 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6399 ;;Total ram usage:        1 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    6
  6402 ;; This function calls:
  6403 ;;		_GETxAPIxVAL
  6404 ;;		_SETxPWM
  6405 ;; This function is called by:
  6406 ;;		_Train_Path
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           	psect	text9
  6411  003970                     __ptext9:
  6412                           	opt stack 0
  6413  003970                     _Left_Mountain_From_The_Right:
  6414                           	opt stack 22
  6415                           
  6416                           ;incstack = 0
  6417                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6418  003970  0100               	movlb	0	; () banked
  6419  003972  6FCB               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6420                           
  6421                           ;train_move_left.c: 182: static char Return_Val = 1;
  6422                           ;train_move_left.c: 184: switch (Switch_Moutain){
  6423  003974  D07C               	goto	l1092
  6424  003976  0100               	movlb	0	; () banked
  6425  003978  05CB               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6426  00397A  B4D8               	btfsc	status,2,c
  6427  00397C  D00C               	goto	u6950
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;train_move_left.c: 189: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6431                           
  6432                           ; BSR set to: 0
  6433                           
  6434                           ;train_move_left.c: 188: }
  6435                           
  6436                           ;train_move_left.c: 187: Mountain_Delay_Counter = 0;
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;train_move_left.c: 186: Switch_Moutain = 1;
  6440  00397E  0E00               	movlw	0
  6441  003980  6E14               	movwf	GETxAPIxVAL@index+1,c
  6442  003982  0E3A               	movlw	58
  6443  003984  6E13               	movwf	GETxAPIxVAL@index,c
  6444  003986  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6445  00398A  5013               	movf	?_GETxAPIxVAL,w,c
  6446  00398C  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6447  00398E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6448  003990  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6449  003992  A0D8               	btfss	status,0,c
  6450  003994  D007               	goto	l1096
  6451  003996                     u6950:
  6452                           
  6453                           ;train_move_left.c: 190: Switch_Moutain = 1;
  6454  003996  0E01               	movlw	1
  6455  003998  6E2E               	movwf	_Switch_Moutain,c
  6456                           
  6457                           ;train_move_left.c: 191: Mountain_Delay_Counter = 0;
  6458  00399A  0E00               	movlw	0
  6459  00399C  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6460  00399E  0E00               	movlw	0
  6461  0039A0  6E26               	movwf	_Mountain_Delay_Counter,c
  6462                           
  6463                           ;train_move_left.c: 192: }
  6464  0039A2  D062               	goto	l1110
  6465  0039A4                     l1096:
  6466                           
  6467                           ;train_move_left.c: 193: else{
  6468                           ;train_move_left.c: 194: Mountain_Delay_Counter++;
  6469  0039A4  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6470  0039A6  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6471  0039A8  D05F               	goto	l1110
  6472  0039AA  0E02               	movlw	2
  6473  0039AC  0100               	movlb	0	; () banked
  6474  0039AE  19CB               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6475  0039B0  A4D8               	btfss	status,2,c
  6476  0039B2  D025               	goto	l1100
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;train_move_left.c: 200: SETxPWM(Train_Move_Pwm_Count, 0);
  6480  0039B4  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6481  0039B8  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6482  0039BC  0E00               	movlw	0
  6483  0039BE  6E21               	movwf	SETxPWM@direction,c
  6484  0039C0  EC17  F01E         	call	_SETxPWM	;wreg free
  6485                           
  6486                           ;train_move_left.c: 201: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6487  0039C4  0E00               	movlw	0
  6488  0039C6  6E14               	movwf	GETxAPIxVAL@index+1,c
  6489  0039C8  0E34               	movlw	52
  6490  0039CA  6E13               	movwf	GETxAPIxVAL@index,c
  6491  0039CC  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6492  0039D0  5013               	movf	?_GETxAPIxVAL,w,c
  6493  0039D2  0100               	movlb	0	; () banked
  6494  0039D4  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6495  0039D6  5014               	movf	?_GETxAPIxVAL+1,w,c
  6496  0039D8  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6497  0039DA  B0D8               	btfsc	status,0,c
  6498  0039DC  D028               	goto	u7000
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;train_move_left.c: 208: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6502                           
  6503                           ; BSR set to: 0
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;train_move_left.c: 207: }
  6507                           
  6508                           ;train_move_left.c: 206: break;
  6509                           
  6510                           ;train_move_left.c: 205: Return_Val = 0;
  6511                           
  6512                           ;train_move_left.c: 204: Switch_Moutain = 0;
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;train_move_left.c: 202: {
  6516                           ;train_move_left.c: 203: Switch_Train_Move = 0;
  6517  0039DE  0E00               	movlw	0
  6518  0039E0  6E14               	movwf	GETxAPIxVAL@index+1,c
  6519  0039E2  0E1A               	movlw	26
  6520  0039E4  6E13               	movwf	GETxAPIxVAL@index,c
  6521  0039E6  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6522  0039EA  5013               	movf	?_GETxAPIxVAL,w,c
  6523  0039EC  0100               	movlb	0	; () banked
  6524  0039EE  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6525  0039F0  5014               	movf	?_GETxAPIxVAL+1,w,c
  6526  0039F2  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6527  0039F4  A0D8               	btfss	status,0,c
  6528  0039F6  D036               	goto	l1109
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;train_move_left.c: 209: {
  6532                           ;train_move_left.c: 210: Train_Move_Pwm_Count++;
  6533  0039F8  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6534  0039FA  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6535  0039FC  D02E               	goto	l8036
  6536  0039FE                     l1100:
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;train_move_left.c: 215: else if (rc == 1){
  6540                           
  6541                           ; BSR set to: 0
  6542  0039FE  05CB               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6543  003A00  A4D8               	btfss	status,2,c
  6544  003A02  D032               	goto	l1110
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;train_move_left.c: 216: SETxPWM(Train_Move_Pwm_Count, 0);
  6548  003A04  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6549  003A08  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6550  003A0C  0E00               	movlw	0
  6551  003A0E  6E21               	movwf	SETxPWM@direction,c
  6552  003A10  EC17  F01E         	call	_SETxPWM	;wreg free
  6553                           
  6554                           ;train_move_left.c: 217: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6555  003A14  0E00               	movlw	0
  6556  003A16  6E14               	movwf	GETxAPIxVAL@index+1,c
  6557  003A18  0E18               	movlw	24
  6558  003A1A  6E13               	movwf	GETxAPIxVAL@index,c
  6559  003A1C  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6560  003A20  0100               	movlb	0	; () banked
  6561  003A22  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6562  003A24  5C13               	subwf	?_GETxAPIxVAL,w,c
  6563  003A26  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6564  003A28  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6565  003A2A  A0D8               	btfss	status,0,c
  6566  003A2C  D006               	goto	l1107
  6567  003A2E                     u7000:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;train_move_left.c: 218: {
  6571                           ;train_move_left.c: 219: Switch_Train_Move = 0;
  6572  003A2E  0E00               	movlw	0
  6573  003A30  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6574                           
  6575                           ;train_move_left.c: 220: Switch_Moutain = 0;
  6576  003A32  0E00               	movlw	0
  6577  003A34  6E2E               	movwf	_Switch_Moutain,c
  6578                           
  6579                           ;train_move_left.c: 221: Return_Val = 0;
  6580  003A36  0E00               	movlw	0
  6581  003A38  D018               	goto	L84
  6582  003A3A                     l1107:
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;train_move_left.c: 224: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6586                           
  6587                           ; BSR set to: 0
  6588  003A3A  0E00               	movlw	0
  6589  003A3C  6E14               	movwf	GETxAPIxVAL@index+1,c
  6590  003A3E  0E1A               	movlw	26
  6591  003A40  6E13               	movwf	GETxAPIxVAL@index,c
  6592  003A42  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6593  003A46  5013               	movf	?_GETxAPIxVAL,w,c
  6594  003A48  0100               	movlb	0	; () banked
  6595  003A4A  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6596  003A4C  5014               	movf	?_GETxAPIxVAL+1,w,c
  6597  003A4E  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6598  003A50  A0D8               	btfss	status,0,c
  6599  003A52  D008               	goto	l1109
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;train_move_left.c: 225: {
  6603                           ;train_move_left.c: 226: Train_Move_Pwm_Count--;
  6604  003A54  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6605  003A56  A0D8               	btfss	status,0,c
  6606  003A58  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6607  003A5A                     l8036:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;train_move_left.c: 227: Train_Move_Pwm_Fast_Count = 0;
  6611  003A5A  0E00               	movlw	0
  6612  003A5C  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6613  003A5E  0E00               	movlw	0
  6614  003A60  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6615                           
  6616                           ;train_move_left.c: 228: }
  6617  003A62  D002               	goto	l1110
  6618  003A64                     l1109:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;train_move_left.c: 229: else{Train_Move_Pwm_Fast_Count++;}
  6622                           
  6623                           ; BSR set to: 0
  6624  003A64  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6625  003A66  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6626  003A68                     l1110:
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;train_move_left.c: 230: }
  6630                           ;train_move_left.c: 231: Return_Val = 1;
  6631                           
  6632                           ; BSR set to: 0
  6633                           
  6634                           ; BSR set to: 0
  6635                           
  6636                           ; BSR set to: 0
  6637                           
  6638                           ; BSR set to: 0
  6639  003A68  0E01               	movlw	1
  6640  003A6A                     L84:
  6641  003A6A  6E4A               	movwf	Left_Mountain_From_The_Right@Return_Val,c
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;train_move_left.c: 236: }
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;train_move_left.c: 235: break;
  6648                           
  6649                           ;train_move_left.c: 234: default:
  6650                           
  6651                           ;train_move_left.c: 232: break;
  6652  003A6C  D007               	goto	l1098
  6653  003A6E                     l1092:
  6654                           
  6655                           ; BSR set to: 0
  6656  003A6E  502E               	movf	_Switch_Moutain,w,c
  6657                           
  6658                           ; Switch size 1, requested type "space"
  6659                           ; Number of cases is 2, Range of values is 0 to 1
  6660                           ; switch strategies available:
  6661                           ; Name         Instructions Cycles
  6662                           ; simple_byte            7     4 (average)
  6663                           ;	Chosen strategy is simple_byte
  6664  003A70  0A00               	xorlw	0	; case 0
  6665  003A72  B4D8               	btfsc	status,2,c
  6666  003A74  D780               	goto	l1093
  6667  003A76  0A01               	xorlw	1	; case 1
  6668  003A78  B4D8               	btfsc	status,2,c
  6669  003A7A  D797               	goto	l1099
  6670  003A7C                     l1098:
  6671                           
  6672                           ;train_move_left.c: 238: return(Return_Val);
  6673  003A7C  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  6674  003A7E  0012               	return	
  6675  003A80                     __end_of_Left_Mountain_From_The_Right:
  6676                           	opt stack 0
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           postinc0	equ	0xFEE
  6682                           wreg	equ	0xFE8
  6683                           postdec1	equ	0xFE5
  6684                           fsr1l	equ	0xFE1
  6685                           status	equ	0xFD8
  6686                           
  6687 ;; *************** function _Left_Mountain_From_The_Left *****************
  6688 ;; Defined at:
  6689 ;;		line 104 in file "../train_move_right.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  rc              1    wreg     unsigned char 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  rc              1   21[BANK0 ] unsigned char 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      unsigned char 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6703 ;;      Params:         0       0       0       0       0       0       0       0       0
  6704 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6706 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6707 ;;Total ram usage:        1 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    6
  6710 ;; This function calls:
  6711 ;;		_GETxAPIxVAL
  6712 ;;		_SETxPWM
  6713 ;; This function is called by:
  6714 ;;		_Train_Path
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           	psect	text10
  6719  00385E                     __ptext10:
  6720                           	opt stack 0
  6721  00385E                     _Left_Mountain_From_The_Left:
  6722                           	opt stack 22
  6723                           
  6724                           ;incstack = 0
  6725                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6726  00385E  0100               	movlb	0	; () banked
  6727  003860  6FCB               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6728                           
  6729                           ;train_move_right.c: 106: static char Return_Val = 1;
  6730                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6731  003862  D07D               	goto	l1170
  6732  003864  0E02               	movlw	2
  6733  003866  0100               	movlb	0	; () banked
  6734  003868  19CB               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6735  00386A  B4D8               	btfsc	status,2,c
  6736  00386C  D00C               	goto	u6710
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6740                           
  6741                           ; BSR set to: 0
  6742                           
  6743                           ;train_move_right.c: 112: }
  6744                           
  6745                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6749  00386E  0E00               	movlw	0
  6750  003870  6E14               	movwf	GETxAPIxVAL@index+1,c
  6751  003872  0E3B               	movlw	59
  6752  003874  6E13               	movwf	GETxAPIxVAL@index,c
  6753  003876  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6754  00387A  5013               	movf	?_GETxAPIxVAL,w,c
  6755  00387C  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6756  00387E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6757  003880  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6758  003882  A0D8               	btfss	status,0,c
  6759  003884  D007               	goto	l1174
  6760  003886                     u6710:
  6761                           
  6762                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6763  003886  0E01               	movlw	1
  6764  003888  6E2E               	movwf	_Switch_Moutain,c
  6765                           
  6766                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6767  00388A  0E00               	movlw	0
  6768  00388C  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6769  00388E  0E00               	movlw	0
  6770  003890  6E26               	movwf	_Mountain_Delay_Counter,c
  6771                           
  6772                           ;train_move_right.c: 116: }
  6773  003892  D062               	goto	l1188
  6774  003894                     l1174:
  6775                           
  6776                           ;train_move_right.c: 117: else{
  6777                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  6778  003894  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6779  003896  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6780  003898  D05F               	goto	l1188
  6781  00389A  0100               	movlb	0	; () banked
  6782  00389C  05CB               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6783  00389E  A4D8               	btfss	status,2,c
  6784  0038A0  D026               	goto	l1178
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  6788  0038A2  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6789  0038A6  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6790  0038AA  0E01               	movlw	1
  6791  0038AC  6E21               	movwf	SETxPWM@direction,c
  6792  0038AE  EC17  F01E         	call	_SETxPWM	;wreg free
  6793                           
  6794                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  6795  0038B2  0E00               	movlw	0
  6796  0038B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  6797  0038B6  0E31               	movlw	49
  6798  0038B8  6E13               	movwf	GETxAPIxVAL@index,c
  6799  0038BA  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6800  0038BE  0100               	movlb	0	; () banked
  6801  0038C0  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6802  0038C2  5C13               	subwf	?_GETxAPIxVAL,w,c
  6803  0038C4  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6804  0038C6  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6805  0038C8  B0D8               	btfsc	status,0,c
  6806  0038CA  D02A               	goto	u6760
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6810                           
  6811                           ; BSR set to: 0
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;train_move_right.c: 131: }
  6815                           
  6816                           ;train_move_right.c: 130: break;
  6817                           
  6818                           ;train_move_right.c: 129: Return_Val = 0;
  6819                           
  6820                           ;train_move_right.c: 128: Switch_Moutain = 0;
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;train_move_right.c: 126: {
  6824                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  6825  0038CC  0E00               	movlw	0
  6826  0038CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  6827  0038D0  0E1A               	movlw	26
  6828  0038D2  6E13               	movwf	GETxAPIxVAL@index,c
  6829  0038D4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6830  0038D8  5013               	movf	?_GETxAPIxVAL,w,c
  6831  0038DA  0100               	movlb	0	; () banked
  6832  0038DC  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6833  0038DE  5014               	movf	?_GETxAPIxVAL+1,w,c
  6834  0038E0  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6835  0038E2  A0D8               	btfss	status,0,c
  6836  0038E4  D037               	goto	l1187
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;train_move_right.c: 133: {
  6840                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  6841  0038E6  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6842  0038E8  A0D8               	btfss	status,0,c
  6843  0038EA  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6844  0038EC  D02E               	goto	l7868
  6845  0038EE                     l1178:
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;train_move_right.c: 139: else if (rc == 2){
  6849                           
  6850                           ; BSR set to: 0
  6851  0038EE  0E02               	movlw	2
  6852  0038F0  19CB               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6853  0038F2  A4D8               	btfss	status,2,c
  6854  0038F4  D031               	goto	l1188
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  6858  0038F6  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6859  0038FA  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6860  0038FE  0E01               	movlw	1
  6861  003900  6E21               	movwf	SETxPWM@direction,c
  6862  003902  EC17  F01E         	call	_SETxPWM	;wreg free
  6863                           
  6864                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  6865  003906  0E00               	movlw	0
  6866  003908  6E14               	movwf	GETxAPIxVAL@index+1,c
  6867  00390A  0E17               	movlw	23
  6868  00390C  6E13               	movwf	GETxAPIxVAL@index,c
  6869  00390E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6870  003912  5013               	movf	?_GETxAPIxVAL,w,c
  6871  003914  0100               	movlb	0	; () banked
  6872  003916  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6873  003918  5014               	movf	?_GETxAPIxVAL+1,w,c
  6874  00391A  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6875  00391C  A0D8               	btfss	status,0,c
  6876  00391E  D006               	goto	l1185
  6877  003920                     u6760:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;train_move_right.c: 142: {
  6881                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  6882  003920  0E00               	movlw	0
  6883  003922  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6884                           
  6885                           ;train_move_right.c: 144: Switch_Moutain = 0;
  6886  003924  0E00               	movlw	0
  6887  003926  6E2E               	movwf	_Switch_Moutain,c
  6888                           
  6889                           ;train_move_right.c: 145: Return_Val = 0;
  6890  003928  0E00               	movlw	0
  6891  00392A  D017               	goto	L87
  6892  00392C                     l1185:
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6896                           
  6897                           ; BSR set to: 0
  6898  00392C  0E00               	movlw	0
  6899  00392E  6E14               	movwf	GETxAPIxVAL@index+1,c
  6900  003930  0E1A               	movlw	26
  6901  003932  6E13               	movwf	GETxAPIxVAL@index,c
  6902  003934  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  6903  003938  5013               	movf	?_GETxAPIxVAL,w,c
  6904  00393A  0100               	movlb	0	; () banked
  6905  00393C  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6906  00393E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6907  003940  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6908  003942  A0D8               	btfss	status,0,c
  6909  003944  D007               	goto	l1187
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;train_move_right.c: 149: {
  6913                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  6914  003946  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6915  003948  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6916  00394A                     l7868:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  6920  00394A  0E00               	movlw	0
  6921  00394C  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6922  00394E  0E00               	movlw	0
  6923  003950  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6924                           
  6925                           ;train_move_right.c: 152: }
  6926  003952  D002               	goto	l1188
  6927  003954                     l1187:
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  6931                           
  6932                           ; BSR set to: 0
  6933  003954  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6934  003956  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6935  003958                     l1188:
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;train_move_right.c: 154: }
  6939                           ;train_move_right.c: 155: Return_Val = 1;
  6940                           
  6941                           ; BSR set to: 0
  6942                           
  6943                           ; BSR set to: 0
  6944                           
  6945                           ; BSR set to: 0
  6946                           
  6947                           ; BSR set to: 0
  6948  003958  0E01               	movlw	1
  6949  00395A                     L87:
  6950  00395A  6E49               	movwf	Left_Mountain_From_The_Left@Return_Val,c
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;train_move_right.c: 160: }
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;train_move_right.c: 159: break;
  6957                           
  6958                           ;train_move_right.c: 158: default:
  6959                           
  6960                           ;train_move_right.c: 156: break;
  6961  00395C  D007               	goto	l1176
  6962  00395E                     l1170:
  6963                           
  6964                           ; BSR set to: 0
  6965  00395E  502E               	movf	_Switch_Moutain,w,c
  6966                           
  6967                           ; Switch size 1, requested type "space"
  6968                           ; Number of cases is 2, Range of values is 0 to 1
  6969                           ; switch strategies available:
  6970                           ; Name         Instructions Cycles
  6971                           ; simple_byte            7     4 (average)
  6972                           ;	Chosen strategy is simple_byte
  6973  003960  0A00               	xorlw	0	; case 0
  6974  003962  B4D8               	btfsc	status,2,c
  6975  003964  D77F               	goto	l1171
  6976  003966  0A01               	xorlw	1	; case 1
  6977  003968  B4D8               	btfsc	status,2,c
  6978  00396A  D797               	goto	l1177
  6979  00396C                     l1176:
  6980                           
  6981                           ;train_move_right.c: 162: return(Return_Val);
  6982  00396C  5049               	movf	Left_Mountain_From_The_Left@Return_Val,w,c
  6983  00396E  0012               	return	
  6984  003970                     __end_of_Left_Mountain_From_The_Left:
  6985                           	opt stack 0
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           postinc0	equ	0xFEE
  6991                           wreg	equ	0xFE8
  6992                           postdec1	equ	0xFE5
  6993                           fsr1l	equ	0xFE1
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function _SETxPWM *****************
  6997 ;; Defined at:
  6998 ;;		line 20 in file "../set_pwm.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  speed           2   30[COMRAM] unsigned int 
  7001 ;;  direction       1   32[COMRAM] unsigned char 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  pwm_speed       2   35[COMRAM] unsigned int 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7013 ;;      Params:         3       0       0       0       0       0       0       0       0
  7014 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7015 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7016 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7017 ;;Total ram usage:        7 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    5
  7020 ;; This function calls:
  7021 ;;		_GETxAPIxVAL
  7022 ;;		_SETxAPIxVAL
  7023 ;; This function is called by:
  7024 ;;		_Update_StateMchn
  7025 ;;		_Train_Move_Left_Start
  7026 ;;		_Right_Mountain_From_The_Right
  7027 ;;		_Left_Mountain_From_The_Right
  7028 ;;		_Train_Move_Left_Brake
  7029 ;;		_Train_Move_Right_Start
  7030 ;;		_Left_Mountain_From_The_Left
  7031 ;;		_Right_Mountain_From_The_Left
  7032 ;;		_Train_Move_Right_Brake
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text11
  7037  003C2E                     __ptext11:
  7038                           	opt stack 0
  7039  003C2E                     _SETxPWM:
  7040                           	opt stack 22
  7041                           
  7042                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7043                           
  7044                           ;incstack = 0
  7045  003C2E  0E01               	movlw	1
  7046  003C30  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7047  003C32  6824               	setf	SETxPWM@pwm_speed,c
  7048                           
  7049                           ;set_pwm.c: 24: if (GETxAPIxVAL(86) != direction){
  7050  003C34  5021               	movf	SETxPWM@direction,w,c
  7051  003C36  6E22               	movwf	??_SETxPWM& (0+255),c
  7052  003C38  6A23               	clrf	(??_SETxPWM+1)& (0+255),c
  7053  003C3A  0E00               	movlw	0
  7054  003C3C  6E14               	movwf	GETxAPIxVAL@index+1,c
  7055  003C3E  0E56               	movlw	86
  7056  003C40  6E13               	movwf	GETxAPIxVAL@index,c
  7057  003C42  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  7058  003C46  5022               	movf	??_SETxPWM,w,c
  7059  003C48  1813               	xorwf	?_GETxAPIxVAL,w,c
  7060  003C4A  E104               	bnz	u6400
  7061  003C4C  5023               	movf	??_SETxPWM+1,w,c
  7062  003C4E  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  7063  003C50  B4D8               	btfsc	status,2,c
  7064  003C52  D009               	goto	l1243
  7065  003C54                     u6400:
  7066                           
  7067                           ;set_pwm.c: 25: SETxAPIxVAL(86, direction);
  7068  003C54  0E00               	movlw	0
  7069  003C56  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7070  003C58  0E56               	movlw	86
  7071  003C5A  6E19               	movwf	SETxAPIxVAL@index,c
  7072  003C5C  C021  F01B         	movff	SETxPWM@direction,SETxAPIxVAL@value
  7073  003C60  6A1C               	clrf	SETxAPIxVAL@value+1,c
  7074  003C62  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7075  003C66                     l1243:
  7076                           
  7077                           ;set_pwm.c: 26: }
  7078                           ;set_pwm.c: 28: if (direction == 0){
  7079  003C66  5021               	movf	SETxPWM@direction,w,c
  7080  003C68  A4D8               	btfss	status,2,c
  7081  003C6A  D01C               	goto	l1244
  7082                           
  7083                           ;set_pwm.c: 29: pwm_speed = 511 - (speed * 2);
  7084  003C6C  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7085  003C70  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7086  003C74  90D8               	bcf	status,0,c
  7087  003C76  3622               	rlcf	??_SETxPWM,f,c
  7088  003C78  3623               	rlcf	??_SETxPWM+1,f,c
  7089  003C7A  1E22               	comf	??_SETxPWM,f,c
  7090  003C7C  1E23               	comf	??_SETxPWM+1,f,c
  7091  003C7E  4A22               	infsnz	??_SETxPWM,f,c
  7092  003C80  2A23               	incf	??_SETxPWM+1,f,c
  7093  003C82  0EFF               	movlw	255
  7094  003C84  2422               	addwf	??_SETxPWM,w,c
  7095  003C86  6E24               	movwf	SETxPWM@pwm_speed,c
  7096  003C88  0E01               	movlw	1
  7097  003C8A  2023               	addwfc	??_SETxPWM+1,w,c
  7098  003C8C  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7099                           
  7100                           ;set_pwm.c: 30: SETxAPIxVAL(88, pwm_speed);
  7101  003C8E  0E00               	movlw	0
  7102  003C90  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7103  003C92  0E58               	movlw	88
  7104  003C94  6E19               	movwf	SETxAPIxVAL@index,c
  7105  003C96  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7106  003C9A  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7107  003C9E  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7108                           
  7109                           ;set_pwm.c: 31: }
  7110  003CA2  0012               	return	
  7111  003CA4                     l1244:
  7112                           
  7113                           ;set_pwm.c: 32: else if (direction == 1){
  7114  003CA4  0421               	decf	SETxPWM@direction,w,c
  7115  003CA6  A4D8               	btfss	status,2,c
  7116  003CA8  0012               	return	
  7117                           
  7118                           ;set_pwm.c: 33: pwm_speed = 511 + (speed * 2);
  7119  003CAA  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7120  003CAE  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7121  003CB2  90D8               	bcf	status,0,c
  7122  003CB4  3622               	rlcf	??_SETxPWM,f,c
  7123  003CB6  3623               	rlcf	??_SETxPWM+1,f,c
  7124  003CB8  0EFF               	movlw	255
  7125  003CBA  2422               	addwf	??_SETxPWM,w,c
  7126  003CBC  6E24               	movwf	SETxPWM@pwm_speed,c
  7127  003CBE  0E01               	movlw	1
  7128  003CC0  2023               	addwfc	??_SETxPWM+1,w,c
  7129  003CC2  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7130                           
  7131                           ;set_pwm.c: 34: SETxAPIxVAL(88, pwm_speed);
  7132  003CC4  0E00               	movlw	0
  7133  003CC6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7134  003CC8  0E58               	movlw	88
  7135  003CCA  6E19               	movwf	SETxAPIxVAL@index,c
  7136  003CCC  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7137  003CD0  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7138  003CD4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7139  003CD8  0012               	return	
  7140  003CDA                     __end_of_SETxPWM:
  7141                           	opt stack 0
  7142                           tblptru	equ	0xFF8
  7143                           tblptrh	equ	0xFF7
  7144                           tblptrl	equ	0xFF6
  7145                           tablat	equ	0xFF5
  7146                           postinc0	equ	0xFEE
  7147                           wreg	equ	0xFE8
  7148                           postdec1	equ	0xFE5
  7149                           fsr1l	equ	0xFE1
  7150                           status	equ	0xFD8
  7151                           
  7152 ;; *************** function _Junction *****************
  7153 ;; Defined at:
  7154 ;;		line 26 in file "../junction.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  Junction_Lef    1    wreg     unsigned char 
  7157 ;;  Straight_Ben    1   30[COMRAM] unsigned char 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  Junction_Lef    1   31[COMRAM] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      unsigned char 
  7162 ;; Registers used:
  7163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7169 ;;      Params:         1       0       0       0       0       0       0       0       0
  7170 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7172 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7173 ;;Total ram usage:        2 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    5
  7176 ;; This function calls:
  7177 ;;		_GETxAPIxVAL
  7178 ;;		_SETxAPIxVAL
  7179 ;; This function is called by:
  7180 ;;		_Update_StateMchn
  7181 ;;		_Train_Path
  7182 ;; This function uses a non-reentrant model
  7183 ;;
  7184                           
  7185                           	psect	text12
  7186  002A98                     __ptext12:
  7187                           	opt stack 0
  7188  002A98                     _Junction:
  7189                           	opt stack 23
  7190                           
  7191                           ;incstack = 0
  7192                           ;Junction@Junction_Left_Right stored from wreg
  7193  002A98  6E20               	movwf	Junction@Junction_Left_Right,c
  7194                           
  7195                           ;junction.c: 28: static char Return_Val = 1;
  7196                           ;junction.c: 29: static unsigned int Junction_Switch_Time = 0;
  7197                           ;junction.c: 31: switch (Switch_Junction)
  7198  002A9A  D0E2               	goto	l1004
  7199  002A9C  0E01               	movlw	1
  7200  002A9E  6E4C               	movwf	Junction@Return_Val,c
  7201                           
  7202                           ;junction.c: 34: switch (Junction_Left_Right)
  7203  002AA0  D08C               	goto	l1006
  7204  002AA2  0E00               	movlw	0
  7205  002AA4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7206  002AA6  0E40               	movlw	64
  7207  002AA8  6E19               	movwf	SETxAPIxVAL@index,c
  7208  002AAA  0E00               	movlw	0
  7209  002AAC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7210  002AAE  0E01               	movlw	1
  7211  002AB0  6E1B               	movwf	SETxAPIxVAL@value,c
  7212  002AB2  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7213                           
  7214                           ;junction.c: 39: SETxAPIxVAL(82, 1);
  7215  002AB6  0E00               	movlw	0
  7216  002AB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7217  002ABA  0E52               	movlw	82
  7218  002ABC  6E19               	movwf	SETxAPIxVAL@index,c
  7219  002ABE  0E00               	movlw	0
  7220  002AC0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7221  002AC2  0E01               	movlw	1
  7222  002AC4  6E1B               	movwf	SETxAPIxVAL@value,c
  7223  002AC6  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7224                           
  7225                           ;junction.c: 40: SETxAPIxVAL(83, 0);
  7226  002ACA  0E00               	movlw	0
  7227  002ACC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7228  002ACE  0E53               	movlw	83
  7229  002AD0  6E19               	movwf	SETxAPIxVAL@index,c
  7230  002AD2  0E00               	movlw	0
  7231  002AD4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7232  002AD6  0E00               	movlw	0
  7233  002AD8  6E1B               	movwf	SETxAPIxVAL@value,c
  7234  002ADA  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7235                           
  7236                           ;junction.c: 41: break;
  7237  002ADE  D074               	goto	l1013
  7238  002AE0  0E00               	movlw	0
  7239  002AE2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7240  002AE4  0E41               	movlw	65
  7241  002AE6  6E19               	movwf	SETxAPIxVAL@index,c
  7242  002AE8  0E00               	movlw	0
  7243  002AEA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7244  002AEC  0E01               	movlw	1
  7245  002AEE  6E1B               	movwf	SETxAPIxVAL@value,c
  7246  002AF0  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7247                           
  7248                           ;junction.c: 43: SETxAPIxVAL(82, 0);
  7249  002AF4  0E00               	movlw	0
  7250  002AF6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7251  002AF8  0E52               	movlw	82
  7252  002AFA  6E19               	movwf	SETxAPIxVAL@index,c
  7253  002AFC  0E00               	movlw	0
  7254  002AFE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7255  002B00  0E00               	movlw	0
  7256  002B02  6E1B               	movwf	SETxAPIxVAL@value,c
  7257  002B04  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7258                           
  7259                           ;junction.c: 44: SETxAPIxVAL(83, 1);
  7260  002B08  0E00               	movlw	0
  7261  002B0A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7262  002B0C  0E53               	movlw	83
  7263  002B0E  6E19               	movwf	SETxAPIxVAL@index,c
  7264  002B10  0E00               	movlw	0
  7265  002B12  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7266  002B14  0E01               	movlw	1
  7267  002B16  6E1B               	movwf	SETxAPIxVAL@value,c
  7268  002B18  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7269                           
  7270                           ;junction.c: 47: }
  7271                           
  7272                           ;junction.c: 46: default : break;
  7273                           
  7274                           ;junction.c: 45: break;
  7275  002B1C  D055               	goto	l1013
  7276  002B1E  501F               	movf	Junction@Straight_Bend,w,c
  7277                           
  7278                           ; Switch size 1, requested type "space"
  7279                           ; Number of cases is 2, Range of values is 0 to 1
  7280                           ; switch strategies available:
  7281                           ; Name         Instructions Cycles
  7282                           ; simple_byte            7     4 (average)
  7283                           ;	Chosen strategy is simple_byte
  7284  002B20  0A00               	xorlw	0	; case 0
  7285  002B22  B4D8               	btfsc	status,2,c
  7286  002B24  D7BE               	goto	l1009
  7287  002B26  0A01               	xorlw	1	; case 1
  7288  002B28  B4D8               	btfsc	status,2,c
  7289  002B2A  D7DA               	goto	l1011
  7290                           
  7291                           ;junction.c: 48: break;
  7292  002B2C  D04D               	goto	l1013
  7293  002B2E  0E00               	movlw	0
  7294  002B30  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7295  002B32  0E42               	movlw	66
  7296  002B34  6E19               	movwf	SETxAPIxVAL@index,c
  7297  002B36  0E00               	movlw	0
  7298  002B38  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7299  002B3A  0E01               	movlw	1
  7300  002B3C  6E1B               	movwf	SETxAPIxVAL@value,c
  7301  002B3E  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7302                           
  7303                           ;junction.c: 53: SETxAPIxVAL(84, 1);
  7304  002B42  0E00               	movlw	0
  7305  002B44  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7306  002B46  0E54               	movlw	84
  7307  002B48  6E19               	movwf	SETxAPIxVAL@index,c
  7308  002B4A  0E00               	movlw	0
  7309  002B4C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7310  002B4E  0E01               	movlw	1
  7311  002B50  6E1B               	movwf	SETxAPIxVAL@value,c
  7312  002B52  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7313                           
  7314                           ;junction.c: 54: SETxAPIxVAL(85, 0);
  7315  002B56  0E00               	movlw	0
  7316  002B58  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7317  002B5A  0E55               	movlw	85
  7318  002B5C  6E19               	movwf	SETxAPIxVAL@index,c
  7319  002B5E  0E00               	movlw	0
  7320  002B60  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7321  002B62  0E00               	movlw	0
  7322  002B64  6E1B               	movwf	SETxAPIxVAL@value,c
  7323  002B66  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7324                           
  7325                           ;junction.c: 55: break;
  7326  002B6A  D02E               	goto	l1013
  7327  002B6C  0E00               	movlw	0
  7328  002B6E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7329  002B70  0E43               	movlw	67
  7330  002B72  6E19               	movwf	SETxAPIxVAL@index,c
  7331  002B74  0E00               	movlw	0
  7332  002B76  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7333  002B78  0E01               	movlw	1
  7334  002B7A  6E1B               	movwf	SETxAPIxVAL@value,c
  7335  002B7C  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7336                           
  7337                           ;junction.c: 57: SETxAPIxVAL(84, 0);
  7338  002B80  0E00               	movlw	0
  7339  002B82  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7340  002B84  0E54               	movlw	84
  7341  002B86  6E19               	movwf	SETxAPIxVAL@index,c
  7342  002B88  0E00               	movlw	0
  7343  002B8A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7344  002B8C  0E00               	movlw	0
  7345  002B8E  6E1B               	movwf	SETxAPIxVAL@value,c
  7346  002B90  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7347                           
  7348                           ;junction.c: 58: SETxAPIxVAL(85, 1);
  7349  002B94  0E00               	movlw	0
  7350  002B96  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7351  002B98  0E55               	movlw	85
  7352  002B9A  6E19               	movwf	SETxAPIxVAL@index,c
  7353  002B9C  0E00               	movlw	0
  7354  002B9E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7355  002BA0  0E01               	movlw	1
  7356  002BA2  6E1B               	movwf	SETxAPIxVAL@value,c
  7357  002BA4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7358                           
  7359                           ;junction.c: 61: }
  7360                           
  7361                           ;junction.c: 60: default : break;
  7362                           
  7363                           ;junction.c: 59: break;
  7364  002BA8  D00F               	goto	l1013
  7365  002BAA  501F               	movf	Junction@Straight_Bend,w,c
  7366                           
  7367                           ; Switch size 1, requested type "space"
  7368                           ; Number of cases is 2, Range of values is 0 to 1
  7369                           ; switch strategies available:
  7370                           ; Name         Instructions Cycles
  7371                           ; simple_byte            7     4 (average)
  7372                           ;	Chosen strategy is simple_byte
  7373  002BAC  0A00               	xorlw	0	; case 0
  7374  002BAE  B4D8               	btfsc	status,2,c
  7375  002BB0  D7BE               	goto	l1016
  7376  002BB2  0A01               	xorlw	1	; case 1
  7377  002BB4  B4D8               	btfsc	status,2,c
  7378  002BB6  D7DA               	goto	l1018
  7379                           
  7380                           ;junction.c: 65: }
  7381                           
  7382                           ;junction.c: 64: default : break;
  7383                           
  7384                           ;junction.c: 62: break;
  7385  002BB8  D007               	goto	l1013
  7386  002BBA                     l1006:
  7387  002BBA  5020               	movf	Junction@Junction_Left_Right,w,c
  7388                           
  7389                           ; Switch size 1, requested type "space"
  7390                           ; Number of cases is 2, Range of values is 0 to 1
  7391                           ; switch strategies available:
  7392                           ; Name         Instructions Cycles
  7393                           ; simple_byte            7     4 (average)
  7394                           ;	Chosen strategy is simple_byte
  7395  002BBC  0A00               	xorlw	0	; case 0
  7396  002BBE  B4D8               	btfsc	status,2,c
  7397  002BC0  D7AE               	goto	l1008
  7398  002BC2  0A01               	xorlw	1	; case 1
  7399  002BC4  B4D8               	btfsc	status,2,c
  7400  002BC6  D7F1               	goto	l1015
  7401  002BC8                     l1013:
  7402                           
  7403                           ;junction.c: 66: Switch_Junction = 1;
  7404  002BC8  0E01               	movlw	1
  7405  002BCA  6E2F               	movwf	_Switch_Junction,c
  7406                           
  7407                           ;junction.c: 67: break;
  7408  002BCC  D053               	goto	l1021
  7409  002BCE  0E00               	movlw	0
  7410  002BD0  6E14               	movwf	GETxAPIxVAL@index+1,c
  7411  002BD2  0E13               	movlw	19
  7412  002BD4  6E13               	movwf	GETxAPIxVAL@index,c
  7413  002BD6  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  7414  002BDA  5013               	movf	?_GETxAPIxVAL,w,c
  7415  002BDC  0100               	movlb	0	; () banked
  7416  002BDE  5D6A               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7417  002BE0  5014               	movf	?_GETxAPIxVAL+1,w,c
  7418  002BE2  596B               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7419  002BE4  A0D8               	btfss	status,0,c
  7420  002BE6  D008               	goto	l1023
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;junction.c: 70: {
  7424                           ;junction.c: 71: Switch_Junction = 2;
  7425  002BE8  0E02               	movlw	2
  7426  002BEA  6E2F               	movwf	_Switch_Junction,c
  7427                           
  7428                           ;junction.c: 72: Junction_Switch_Time = 0;
  7429  002BEC  0E00               	movlw	0
  7430  002BEE  6F6B               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7431  002BF0  0E00               	movlw	0
  7432  002BF2  6F6A               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7433                           
  7434                           ;junction.c: 73: Return_Val = 1;
  7435  002BF4  0E01               	movlw	1
  7436  002BF6  D032               	goto	L88
  7437  002BF8                     l1023:
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;junction.c: 75: }
  7441                           ;junction.c: 76: Return_Val = 1;
  7442                           
  7443                           ; BSR set to: 0
  7444  002BF8  0E01               	movlw	1
  7445  002BFA  6E4C               	movwf	Junction@Return_Val,c
  7446                           
  7447                           ;junction.c: 77: Switch_Junction = 1;
  7448  002BFC  0E01               	movlw	1
  7449  002BFE  6E2F               	movwf	_Switch_Junction,c
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;junction.c: 78: Junction_Switch_Time++;
  7453  002C00  4B6A               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7454  002C02  2B6B               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7455                           
  7456                           ;junction.c: 79: break;
  7457  002C04  D037               	goto	l1021
  7458  002C06                     
  7459                           ; BSR set to: 0
  7460  002C06  0E00               	movlw	0
  7461  002C08  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7462  002C0A  0E40               	movlw	64
  7463  002C0C  6E19               	movwf	SETxAPIxVAL@index,c
  7464  002C0E  0E00               	movlw	0
  7465  002C10  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7466  002C12  0E00               	movlw	0
  7467  002C14  6E1B               	movwf	SETxAPIxVAL@value,c
  7468  002C16  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7469                           
  7470                           ;junction.c: 82: SETxAPIxVAL(65, 0);
  7471  002C1A  0E00               	movlw	0
  7472  002C1C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7473  002C1E  0E41               	movlw	65
  7474  002C20  6E19               	movwf	SETxAPIxVAL@index,c
  7475  002C22  0E00               	movlw	0
  7476  002C24  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7477  002C26  0E00               	movlw	0
  7478  002C28  6E1B               	movwf	SETxAPIxVAL@value,c
  7479  002C2A  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7480                           
  7481                           ;junction.c: 83: SETxAPIxVAL(66,0);
  7482  002C2E  0E00               	movlw	0
  7483  002C30  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7484  002C32  0E42               	movlw	66
  7485  002C34  6E19               	movwf	SETxAPIxVAL@index,c
  7486  002C36  0E00               	movlw	0
  7487  002C38  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7488  002C3A  0E00               	movlw	0
  7489  002C3C  6E1B               	movwf	SETxAPIxVAL@value,c
  7490  002C3E  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7491                           
  7492                           ;junction.c: 84: SETxAPIxVAL(67,0);
  7493  002C42  0E00               	movlw	0
  7494  002C44  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7495  002C46  0E43               	movlw	67
  7496  002C48  6E19               	movwf	SETxAPIxVAL@index,c
  7497  002C4A  0E00               	movlw	0
  7498  002C4C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7499  002C4E  0E00               	movlw	0
  7500  002C50  6E1B               	movwf	SETxAPIxVAL@value,c
  7501  002C52  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  7502                           
  7503                           ;junction.c: 85: Switch_Junction = 0;
  7504  002C56  0E00               	movlw	0
  7505  002C58  6E2F               	movwf	_Switch_Junction,c
  7506                           
  7507                           ;junction.c: 86: Return_Val = 0;
  7508  002C5A  0E00               	movlw	0
  7509  002C5C                     L88:
  7510  002C5C  6E4C               	movwf	Junction@Return_Val,c
  7511                           
  7512                           ;junction.c: 90: }
  7513                           
  7514                           ;junction.c: 89: default : break;
  7515                           
  7516                           ;junction.c: 87: break;
  7517  002C5E  D00A               	goto	l1021
  7518  002C60                     l1004:
  7519  002C60  502F               	movf	_Switch_Junction,w,c
  7520                           
  7521                           ; Switch size 1, requested type "space"
  7522                           ; Number of cases is 3, Range of values is 0 to 2
  7523                           ; switch strategies available:
  7524                           ; Name         Instructions Cycles
  7525                           ; simple_byte           10     6 (average)
  7526                           ;	Chosen strategy is simple_byte
  7527  002C62  0A00               	xorlw	0	; case 0
  7528  002C64  B4D8               	btfsc	status,2,c
  7529  002C66  D71A               	goto	l1005
  7530  002C68  0A01               	xorlw	1	; case 1
  7531  002C6A  B4D8               	btfsc	status,2,c
  7532  002C6C  D7B0               	goto	l1022
  7533  002C6E  0A03               	xorlw	3	; case 2
  7534  002C70  B4D8               	btfsc	status,2,c
  7535  002C72  D7C9               	goto	l1024
  7536  002C74                     l1021:
  7537                           
  7538                           ;junction.c: 92: return (Return_Val);
  7539  002C74  504C               	movf	Junction@Return_Val,w,c
  7540  002C76  0012               	return	
  7541  002C78                     __end_of_Junction:
  7542                           	opt stack 0
  7543                           tblptru	equ	0xFF8
  7544                           tblptrh	equ	0xFF7
  7545                           tblptrl	equ	0xFF6
  7546                           tablat	equ	0xFF5
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           postdec1	equ	0xFE5
  7550                           fsr1l	equ	0xFE1
  7551                           status	equ	0xFD8
  7552                           
  7553 ;; *************** function _Red_Led *****************
  7554 ;; Defined at:
  7555 ;;		line 97 in file "../io.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;  Operation       1    wreg     unsigned char 
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;  Operation       1   18[COMRAM] unsigned char 
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  1    wreg      void 
  7562 ;; Registers used:
  7563 ;;		wreg, status,2, status,0
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7569 ;;      Params:         0       0       0       0       0       0       0       0       0
  7570 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7572 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7573 ;;Total ram usage:        1 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    3
  7576 ;; This function calls:
  7577 ;;		Nothing
  7578 ;; This function is called by:
  7579 ;;		_Update_StateMchn
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text13
  7584  003E0A                     __ptext13:
  7585                           	opt stack 0
  7586  003E0A                     _Red_Led:
  7587                           	opt stack 26
  7588                           
  7589                           ;incstack = 0
  7590                           ;Red_Led@Operation stored from wreg
  7591  003E0A  6E13               	movwf	Red_Led@Operation,c
  7592                           
  7593                           ;io.c: 99: switch(Operation)
  7594  003E0C  D030               	goto	l838
  7595  003E0E                     l839:
  7596  003E0E  9A83               	bcf	3971,5,c	;volatile
  7597  003E10  0012               	return	
  7598  003E12                     l841:
  7599  003E12  8A83               	bsf	3971,5,c	;volatile
  7600  003E14  0012               	return	
  7601  003E16  4A28               	infsnz	_Red_Led_Counter,f,c
  7602  003E18  2A29               	incf	_Red_Led_Counter+1,f,c
  7603                           
  7604                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7605  003E1A  0EB8               	movlw	184
  7606  003E1C  5C28               	subwf	_Red_Led_Counter,w,c
  7607  003E1E  0E0B               	movlw	11
  7608  003E20  5829               	subwfb	_Red_Led_Counter+1,w,c
  7609  003E22  A0D8               	btfss	status,0,c
  7610  003E24  D004               	goto	l843
  7611                           
  7612                           ;io.c: 107: {
  7613                           ;io.c: 108: Red_Led_Counter = 0;
  7614  003E26  0E00               	movlw	0
  7615  003E28  6E29               	movwf	_Red_Led_Counter+1,c
  7616  003E2A  0E00               	movlw	0
  7617  003E2C  6E28               	movwf	_Red_Led_Counter,c
  7618  003E2E                     l843:
  7619                           
  7620                           ;io.c: 109: }
  7621                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7622  003E2E  0EDC               	movlw	220
  7623  003E30  5C28               	subwf	_Red_Led_Counter,w,c
  7624  003E32  0E05               	movlw	5
  7625  003E34  5829               	subwfb	_Red_Led_Counter+1,w,c
  7626  003E36  A0D8               	btfss	status,0,c
  7627  003E38  D002               	goto	l844
  7628                           
  7629                           ;io.c: 111: {
  7630                           ;io.c: 112: PORTDbits.RD5 = 1;
  7631  003E3A  8A83               	bsf	3971,5,c	;volatile
  7632                           
  7633                           ;io.c: 113: }
  7634  003E3C  0012               	return	
  7635  003E3E                     l844:
  7636                           
  7637                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7638  003E3E  9A83               	bcf	3971,5,c	;volatile
  7639                           
  7640                           ;io.c: 115: break;
  7641  003E40  0012               	return	
  7642  003E42  4A28               	infsnz	_Red_Led_Counter,f,c
  7643  003E44  2A29               	incf	_Red_Led_Counter+1,f,c
  7644                           
  7645                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7646  003E46  0EE8               	movlw	232
  7647  003E48  5C28               	subwf	_Red_Led_Counter,w,c
  7648  003E4A  0E03               	movlw	3
  7649  003E4C  5829               	subwfb	_Red_Led_Counter+1,w,c
  7650  003E4E  A0D8               	btfss	status,0,c
  7651  003E50  D004               	goto	l847
  7652                           
  7653                           ;io.c: 119: {
  7654                           ;io.c: 120: Red_Led_Counter = 0;
  7655  003E52  0E00               	movlw	0
  7656  003E54  6E29               	movwf	_Red_Led_Counter+1,c
  7657  003E56  0E00               	movlw	0
  7658  003E58  6E28               	movwf	_Red_Led_Counter,c
  7659  003E5A                     l847:
  7660                           
  7661                           ;io.c: 121: }
  7662                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7663  003E5A  0EF4               	movlw	244
  7664  003E5C  5C28               	subwf	_Red_Led_Counter,w,c
  7665  003E5E  0E01               	movlw	1
  7666  003E60  5829               	subwfb	_Red_Led_Counter+1,w,c
  7667  003E62  A0D8               	btfss	status,0,c
  7668  003E64  D002               	goto	l848
  7669                           
  7670                           ;io.c: 123: {
  7671                           ;io.c: 124: PORTDbits.RD5 = 1;
  7672  003E66  8A83               	bsf	3971,5,c	;volatile
  7673                           
  7674                           ;io.c: 125: }
  7675  003E68  0012               	return	
  7676  003E6A                     l848:
  7677                           
  7678                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7679  003E6A  9A83               	bcf	3971,5,c	;volatile
  7680                           
  7681                           ;io.c: 130: }
  7682                           
  7683                           ;io.c: 129: default : break;
  7684                           
  7685                           ;io.c: 127: break;
  7686  003E6C  0012               	return	
  7687  003E6E                     l838:
  7688  003E6E  5013               	movf	Red_Led@Operation,w,c
  7689                           
  7690                           ; Switch size 1, requested type "space"
  7691                           ; Number of cases is 4, Range of values is 0 to 3
  7692                           ; switch strategies available:
  7693                           ; Name         Instructions Cycles
  7694                           ; simple_byte           13     7 (average)
  7695                           ;	Chosen strategy is simple_byte
  7696  003E70  0A00               	xorlw	0	; case 0
  7697  003E72  B4D8               	btfsc	status,2,c
  7698  003E74  D7CC               	goto	l839
  7699  003E76  0A01               	xorlw	1	; case 1
  7700  003E78  B4D8               	btfsc	status,2,c
  7701  003E7A  D7CB               	goto	l841
  7702  003E7C  0A03               	xorlw	3	; case 2
  7703  003E7E  B4D8               	btfsc	status,2,c
  7704  003E80  D7CA               	goto	l842
  7705  003E82  0A01               	xorlw	1	; case 3
  7706  003E84  A4D8               	btfss	status,2,c
  7707  003E86  0012               	return	
  7708  003E88  D7DC               	goto	l846
  7709  003E8A                     __end_of_Red_Led:
  7710                           	opt stack 0
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           postinc0	equ	0xFEE
  7716                           wreg	equ	0xFE8
  7717                           postdec1	equ	0xFE5
  7718                           fsr1l	equ	0xFE1
  7719                           status	equ	0xFD8
  7720                           
  7721 ;; *************** function _Green_Led *****************
  7722 ;; Defined at:
  7723 ;;		line 47 in file "../io.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;  Operation       1    wreg     unsigned char 
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  Operation       1   18[COMRAM] unsigned char 
  7728 ;; Return value:  Size  Location     Type
  7729 ;;                  1    wreg      void 
  7730 ;; Registers used:
  7731 ;;		wreg, status,2, status,0
  7732 ;; Tracked objects:
  7733 ;;		On entry : 0/0
  7734 ;;		On exit  : 0/0
  7735 ;;		Unchanged: 0/0
  7736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7737 ;;      Params:         0       0       0       0       0       0       0       0       0
  7738 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7740 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7741 ;;Total ram usage:        1 bytes
  7742 ;; Hardware stack levels used:    1
  7743 ;; Hardware stack levels required when called:    3
  7744 ;; This function calls:
  7745 ;;		Nothing
  7746 ;; This function is called by:
  7747 ;;		_Update_StateMchn
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text14
  7752  003E8A                     __ptext14:
  7753                           	opt stack 0
  7754  003E8A                     _Green_Led:
  7755                           	opt stack 26
  7756                           
  7757                           ;incstack = 0
  7758                           ;Green_Led@Operation stored from wreg
  7759  003E8A  6E13               	movwf	Green_Led@Operation,c
  7760                           
  7761                           ;io.c: 49: switch(Operation)
  7762  003E8C  D030               	goto	l822
  7763  003E8E                     l823:
  7764  003E8E  9C83               	bcf	3971,6,c	;volatile
  7765  003E90  0012               	return	
  7766  003E92                     l825:
  7767  003E92  8C83               	bsf	3971,6,c	;volatile
  7768  003E94  0012               	return	
  7769  003E96  4A2A               	infsnz	_Green_Led_Counter,f,c
  7770  003E98  2A2B               	incf	_Green_Led_Counter+1,f,c
  7771                           
  7772                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7773  003E9A  0EB8               	movlw	184
  7774  003E9C  5C2A               	subwf	_Green_Led_Counter,w,c
  7775  003E9E  0E0B               	movlw	11
  7776  003EA0  582B               	subwfb	_Green_Led_Counter+1,w,c
  7777  003EA2  A0D8               	btfss	status,0,c
  7778  003EA4  D004               	goto	l827
  7779                           
  7780                           ;io.c: 57: {
  7781                           ;io.c: 58: Green_Led_Counter = 0;
  7782  003EA6  0E00               	movlw	0
  7783  003EA8  6E2B               	movwf	_Green_Led_Counter+1,c
  7784  003EAA  0E00               	movlw	0
  7785  003EAC  6E2A               	movwf	_Green_Led_Counter,c
  7786  003EAE                     l827:
  7787                           
  7788                           ;io.c: 59: }
  7789                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  7790  003EAE  0EDC               	movlw	220
  7791  003EB0  5C2A               	subwf	_Green_Led_Counter,w,c
  7792  003EB2  0E05               	movlw	5
  7793  003EB4  582B               	subwfb	_Green_Led_Counter+1,w,c
  7794  003EB6  A0D8               	btfss	status,0,c
  7795  003EB8  D002               	goto	l828
  7796                           
  7797                           ;io.c: 61: {
  7798                           ;io.c: 62: PORTDbits.RD6 = 1;
  7799  003EBA  8C83               	bsf	3971,6,c	;volatile
  7800                           
  7801                           ;io.c: 63: }
  7802  003EBC  0012               	return	
  7803  003EBE                     l828:
  7804                           
  7805                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  7806  003EBE  9C83               	bcf	3971,6,c	;volatile
  7807                           
  7808                           ;io.c: 65: break;
  7809  003EC0  0012               	return	
  7810  003EC2  4A2A               	infsnz	_Green_Led_Counter,f,c
  7811  003EC4  2A2B               	incf	_Green_Led_Counter+1,f,c
  7812                           
  7813                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  7814  003EC6  0EE8               	movlw	232
  7815  003EC8  5C2A               	subwf	_Green_Led_Counter,w,c
  7816  003ECA  0E03               	movlw	3
  7817  003ECC  582B               	subwfb	_Green_Led_Counter+1,w,c
  7818  003ECE  A0D8               	btfss	status,0,c
  7819  003ED0  D004               	goto	l831
  7820                           
  7821                           ;io.c: 69: {
  7822                           ;io.c: 70: Green_Led_Counter = 0;
  7823  003ED2  0E00               	movlw	0
  7824  003ED4  6E2B               	movwf	_Green_Led_Counter+1,c
  7825  003ED6  0E00               	movlw	0
  7826  003ED8  6E2A               	movwf	_Green_Led_Counter,c
  7827  003EDA                     l831:
  7828                           
  7829                           ;io.c: 71: }
  7830                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  7831  003EDA  0EF4               	movlw	244
  7832  003EDC  5C2A               	subwf	_Green_Led_Counter,w,c
  7833  003EDE  0E01               	movlw	1
  7834  003EE0  582B               	subwfb	_Green_Led_Counter+1,w,c
  7835  003EE2  A0D8               	btfss	status,0,c
  7836  003EE4  D002               	goto	l832
  7837                           
  7838                           ;io.c: 73: {
  7839                           ;io.c: 74: PORTDbits.RD6 = 1;
  7840  003EE6  8C83               	bsf	3971,6,c	;volatile
  7841                           
  7842                           ;io.c: 75: }
  7843  003EE8  0012               	return	
  7844  003EEA                     l832:
  7845                           
  7846                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  7847  003EEA  9C83               	bcf	3971,6,c	;volatile
  7848                           
  7849                           ;io.c: 80: }
  7850                           
  7851                           ;io.c: 79: default : break;
  7852                           
  7853                           ;io.c: 77: break;
  7854  003EEC  0012               	return	
  7855  003EEE                     l822:
  7856  003EEE  5013               	movf	Green_Led@Operation,w,c
  7857                           
  7858                           ; Switch size 1, requested type "space"
  7859                           ; Number of cases is 4, Range of values is 0 to 3
  7860                           ; switch strategies available:
  7861                           ; Name         Instructions Cycles
  7862                           ; simple_byte           13     7 (average)
  7863                           ;	Chosen strategy is simple_byte
  7864  003EF0  0A00               	xorlw	0	; case 0
  7865  003EF2  B4D8               	btfsc	status,2,c
  7866  003EF4  D7CC               	goto	l823
  7867  003EF6  0A01               	xorlw	1	; case 1
  7868  003EF8  B4D8               	btfsc	status,2,c
  7869  003EFA  D7CB               	goto	l825
  7870  003EFC  0A03               	xorlw	3	; case 2
  7871  003EFE  B4D8               	btfsc	status,2,c
  7872  003F00  D7CA               	goto	l826
  7873  003F02  0A01               	xorlw	1	; case 3
  7874  003F04  A4D8               	btfss	status,2,c
  7875  003F06  0012               	return	
  7876  003F08  D7DC               	goto	l830
  7877  003F0A                     __end_of_Green_Led:
  7878                           	opt stack 0
  7879                           tblptru	equ	0xFF8
  7880                           tblptrh	equ	0xFF7
  7881                           tblptrl	equ	0xFF6
  7882                           tablat	equ	0xFF5
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           postdec1	equ	0xFE5
  7886                           fsr1l	equ	0xFE1
  7887                           status	equ	0xFD8
  7888                           
  7889 ;; *************** function _EEPROMxSTORE *****************
  7890 ;; Defined at:
  7891 ;;		line 140 in file "../eeprom_settings.c"
  7892 ;; Parameters:    Size  Location     Type
  7893 ;;		None
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;  i               1   35[COMRAM] unsigned char 
  7896 ;;  api_list        1   34[COMRAM] unsigned char 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7906 ;;      Params:         0       0       0       0       0       0       0       0       0
  7907 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7908 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7909 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7910 ;;Total ram usage:       10 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    4
  7913 ;; This function calls:
  7914 ;;		_Eeprom_Store
  7915 ;; This function is called by:
  7916 ;;		_Update_StateMchn
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text15
  7921  0032C4                     __ptext15:
  7922                           	opt stack 0
  7923  0032C4                     _EEPROMxSTORE:
  7924                           	opt stack 25
  7925                           
  7926                           ;eeprom_settings.c: 142: unsigned char i, api_list;
  7927                           ;eeprom_settings.c: 144: for(i = 0; i < 28; i++ )
  7928                           
  7929                           ;incstack = 0
  7930  0032C4  0E00               	movlw	0
  7931  0032C6  6E24               	movwf	EEPROMxSTORE@i,c
  7932  0032C8                     l8162:
  7933  0032C8  0E1B               	movlw	27
  7934  0032CA  6424               	cpfsgt	EEPROMxSTORE@i,c
  7935  0032CC  D001               	goto	l755
  7936  0032CE  0012               	return	
  7937  0032D0                     l755:
  7938                           
  7939                           ;eeprom_settings.c: 145: {
  7940                           ;eeprom_settings.c: 146: api_list = ApiList[i];
  7941  0032D0  5024               	movf	EEPROMxSTORE@i,w,c
  7942  0032D2  0D02               	mullw	2
  7943  0032D4  0E01               	movlw	low _ApiList
  7944  0032D6  24F3               	addwf	prodl,w,c
  7945  0032D8  6EF6               	movwf	tblptrl,c
  7946  0032DA  0E08               	movlw	high _ApiList
  7947  0032DC  20F4               	addwfc	prodh,w,c
  7948  0032DE  6EF7               	movwf	tblptrh,c
  7949  0032E0                     	if	0	;There are less than 3 active tblptr bytes
  7950  0032E0                     	endif
  7951  0032E0  0008               	tblrd		*
  7952  0032E2  CFF5 F023          	movff	tablat,EEPROMxSTORE@api_list
  7953                           
  7954                           ;eeprom_settings.c: 152: if (API[ApiList[i]] != API_EEPROM[ApiList[i]])
  7955  0032E6  5024               	movf	EEPROMxSTORE@i,w,c
  7956  0032E8  0D02               	mullw	2
  7957  0032EA  0E01               	movlw	low _ApiList
  7958  0032EC  24F3               	addwf	prodl,w,c
  7959  0032EE  6EF6               	movwf	tblptrl,c
  7960  0032F0  0E08               	movlw	high _ApiList
  7961  0032F2  20F4               	addwfc	prodh,w,c
  7962  0032F4  6EF7               	movwf	tblptrh,c
  7963  0032F6                     	if	0	;There are less than 3 active tblptr bytes
  7964  0032F6                     	endif
  7965  0032F6  0009               	tblrd		*+
  7966  0032F8  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  7967  0032FC  0009               	tblrd		*+
  7968  0032FE  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  7969  003302  90D8               	bcf	status,0,c
  7970  003304  361B               	rlcf	??_EEPROMxSTORE,f,c
  7971  003306  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  7972  003308  0E00               	movlw	low _API_EEPROM
  7973  00330A  241B               	addwf	??_EEPROMxSTORE,w,c
  7974  00330C  6ED9               	movwf	fsr2l,c
  7975  00330E  0E03               	movlw	high _API_EEPROM
  7976  003310  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  7977  003312  6EDA               	movwf	fsr2h,c
  7978  003314  5024               	movf	EEPROMxSTORE@i,w,c
  7979  003316  0D02               	mullw	2
  7980  003318  0E01               	movlw	low _ApiList
  7981  00331A  24F3               	addwf	prodl,w,c
  7982  00331C  6EF6               	movwf	tblptrl,c
  7983  00331E  0E08               	movlw	high _ApiList
  7984  003320  20F4               	addwfc	prodh,w,c
  7985  003322  6EF7               	movwf	tblptrh,c
  7986  003324                     	if	0	;There are less than 3 active tblptr bytes
  7987  003324                     	endif
  7988  003324  0009               	tblrd		*+
  7989  003326  CFF5 F01F          	movff	tablat,??_EEPROMxSTORE+4
  7990  00332A  0009               	tblrd		*+
  7991  00332C  CFF5 F020          	movff	tablat,??_EEPROMxSTORE+5
  7992  003330  90D8               	bcf	status,0,c
  7993  003332  361F               	rlcf	??_EEPROMxSTORE+4,f,c
  7994  003334  3620               	rlcf	??_EEPROMxSTORE+5,f,c
  7995  003336  0E00               	movlw	low _API
  7996  003338  241F               	addwf	??_EEPROMxSTORE+4,w,c
  7997  00333A  6EE1               	movwf	fsr1l,c
  7998  00333C  0E01               	movlw	high _API
  7999  00333E  2020               	addwfc	??_EEPROMxSTORE+5,w,c
  8000  003340  6EE2               	movwf	fsr1h,c
  8001  003342  50DE               	movf	postinc2,w,c
  8002  003344  18E6               	xorwf	postinc1,w,c
  8003  003346  E104               	bnz	u7190
  8004  003348  50DE               	movf	postinc2,w,c
  8005  00334A  18E6               	xorwf	postinc1,w,c
  8006  00334C  B4D8               	btfsc	status,2,c
  8007  00334E  D052               	goto	l757
  8008  003350                     u7190:
  8009                           
  8010                           ;eeprom_settings.c: 153: {
  8011                           ;eeprom_settings.c: 158: Eeprom_Store(i, API[ApiList[i]]);
  8012  003350  C024  F013         	movff	EEPROMxSTORE@i,Eeprom_Store@Location
  8013  003354  6A14               	clrf	Eeprom_Store@Location+1,c
  8014  003356  5024               	movf	EEPROMxSTORE@i,w,c
  8015  003358  0D02               	mullw	2
  8016  00335A  0E01               	movlw	low _ApiList
  8017  00335C  24F3               	addwf	prodl,w,c
  8018  00335E  6EF6               	movwf	tblptrl,c
  8019  003360  0E08               	movlw	high _ApiList
  8020  003362  20F4               	addwfc	prodh,w,c
  8021  003364  6EF7               	movwf	tblptrh,c
  8022  003366                     	if	0	;There are less than 3 active tblptr bytes
  8023  003366                     	endif
  8024  003366  0009               	tblrd		*+
  8025  003368  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  8026  00336C  0009               	tblrd		*+
  8027  00336E  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  8028  003372  90D8               	bcf	status,0,c
  8029  003374  361B               	rlcf	??_EEPROMxSTORE,f,c
  8030  003376  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  8031  003378  0E00               	movlw	low _API
  8032  00337A  241B               	addwf	??_EEPROMxSTORE,w,c
  8033  00337C  6ED9               	movwf	fsr2l,c
  8034  00337E  0E01               	movlw	high _API
  8035  003380  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  8036  003382  6EDA               	movwf	fsr2h,c
  8037  003384  CFDE F015          	movff	postinc2,Eeprom_Store@Value
  8038  003388  CFDD F016          	movff	postdec2,Eeprom_Store@Value+1
  8039  00338C  ECC2  F01F         	call	_Eeprom_Store	;wreg free
  8040                           
  8041                           ;eeprom_settings.c: 159: API_EEPROM[ApiList[i]] = API[ApiList[i]];
  8042  003390  5024               	movf	EEPROMxSTORE@i,w,c
  8043  003392  0D02               	mullw	2
  8044  003394  0E01               	movlw	low _ApiList
  8045  003396  24F3               	addwf	prodl,w,c
  8046  003398  6EF6               	movwf	tblptrl,c
  8047  00339A  0E08               	movlw	high _ApiList
  8048  00339C  20F4               	addwfc	prodh,w,c
  8049  00339E  6EF7               	movwf	tblptrh,c
  8050  0033A0                     	if	0	;There are less than 3 active tblptr bytes
  8051  0033A0                     	endif
  8052  0033A0  0009               	tblrd		*+
  8053  0033A2  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  8054  0033A6  0009               	tblrd		*+
  8055  0033A8  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  8056  0033AC  90D8               	bcf	status,0,c
  8057  0033AE  361B               	rlcf	??_EEPROMxSTORE,f,c
  8058  0033B0  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  8059  0033B2  0E00               	movlw	low _API
  8060  0033B4  241B               	addwf	??_EEPROMxSTORE,w,c
  8061  0033B6  6ED9               	movwf	fsr2l,c
  8062  0033B8  0E01               	movlw	high _API
  8063  0033BA  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  8064  0033BC  6EDA               	movwf	fsr2h,c
  8065  0033BE  5024               	movf	EEPROMxSTORE@i,w,c
  8066  0033C0  0D02               	mullw	2
  8067  0033C2  0E01               	movlw	low _ApiList
  8068  0033C4  24F3               	addwf	prodl,w,c
  8069  0033C6  6EF6               	movwf	tblptrl,c
  8070  0033C8  0E08               	movlw	high _ApiList
  8071  0033CA  20F4               	addwfc	prodh,w,c
  8072  0033CC  6EF7               	movwf	tblptrh,c
  8073  0033CE                     	if	0	;There are less than 3 active tblptr bytes
  8074  0033CE                     	endif
  8075  0033CE  0009               	tblrd		*+
  8076  0033D0  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE+2
  8077  0033D4  0009               	tblrd		*+
  8078  0033D6  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+3
  8079  0033DA  90D8               	bcf	status,0,c
  8080  0033DC  361D               	rlcf	??_EEPROMxSTORE+2,f,c
  8081  0033DE  361E               	rlcf	??_EEPROMxSTORE+3,f,c
  8082  0033E0  0E00               	movlw	low _API_EEPROM
  8083  0033E2  241D               	addwf	??_EEPROMxSTORE+2,w,c
  8084  0033E4  6EE1               	movwf	fsr1l,c
  8085  0033E6  0E03               	movlw	high _API_EEPROM
  8086  0033E8  201E               	addwfc	??_EEPROMxSTORE+3,w,c
  8087  0033EA  6EE2               	movwf	fsr1h,c
  8088  0033EC  CFDE FFE6          	movff	postinc2,postinc1
  8089  0033F0  CFDD FFE5          	movff	postdec2,postdec1
  8090  0033F4                     l757:
  8091  0033F4  2A24               	incf	EEPROMxSTORE@i,f,c
  8092  0033F6  D768               	goto	l8162
  8093  0033F8                     __end_of_EEPROMxSTORE:
  8094                           	opt stack 0
  8095                           tblptru	equ	0xFF8
  8096                           tblptrh	equ	0xFF7
  8097                           tblptrl	equ	0xFF6
  8098                           tablat	equ	0xFF5
  8099                           prodh	equ	0xFF4
  8100                           prodl	equ	0xFF3
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           postinc1	equ	0xFE6
  8104                           postdec1	equ	0xFE5
  8105                           fsr1h	equ	0xFE2
  8106                           fsr1l	equ	0xFE1
  8107                           postinc2	equ	0xFDE
  8108                           postdec2	equ	0xFDD
  8109                           fsr2h	equ	0xFDA
  8110                           fsr2l	equ	0xFD9
  8111                           status	equ	0xFD8
  8112                           
  8113 ;; *************** function _Eeprom_Store *****************
  8114 ;; Defined at:
  8115 ;;		line 178 in file "../eeprom_settings.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  Location        2   18[COMRAM] unsigned int 
  8118 ;;  Value           2   20[COMRAM] unsigned int 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  Location_Hig    2   24[COMRAM] unsigned int 
  8121 ;;  Location_Low    2   22[COMRAM] unsigned int 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      void 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8131 ;;      Params:         4       0       0       0       0       0       0       0       0
  8132 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8134 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8135 ;;Total ram usage:        8 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    3
  8138 ;; This function calls:
  8139 ;;		Nothing
  8140 ;; This function is called by:
  8141 ;;		_EEPROMxSTORE
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text16
  8146  003F84                     __ptext16:
  8147                           	opt stack 0
  8148  003F84                     _Eeprom_Store:
  8149                           	opt stack 25
  8150                           
  8151                           ;eeprom_settings.c: 180: unsigned int Location_High_Byte = Location * 2;
  8152                           
  8153                           ;incstack = 0
  8154  003F84  90D8               	bcf	status,0,c
  8155  003F86  3413               	rlcf	Eeprom_Store@Location,w,c
  8156  003F88  6E19               	movwf	Eeprom_Store@Location_High_Byte,c
  8157  003F8A  3414               	rlcf	Eeprom_Store@Location+1,w,c
  8158  003F8C  6E1A               	movwf	Eeprom_Store@Location_High_Byte+1,c
  8159                           
  8160                           ;eeprom_settings.c: 181: unsigned int Location_Low_Byte = Location_High_Byte + 1;
  8161  003F8E  0E01               	movlw	1
  8162  003F90  2419               	addwf	Eeprom_Store@Location_High_Byte,w,c
  8163  003F92  6E17               	movwf	Eeprom_Store@Location_Low_Byte,c
  8164  003F94  0E00               	movlw	0
  8165  003F96  201A               	addwfc	Eeprom_Store@Location_High_Byte+1,w,c
  8166  003F98  6E18               	movwf	Eeprom_Store@Location_Low_Byte+1,c
  8167                           
  8168                           ;eeprom_settings.c: 183: INTCON = 0x00;
  8169  003F9A  0E00               	movlw	0
  8170  003F9C  6EF2               	movwf	intcon,c	;volatile
  8171                           
  8172                           ;eeprom_settings.c: 185: EECON1bits.WRERR = 0;
  8173  003F9E  96A6               	bcf	4006,3,c	;volsfr
  8174                           
  8175                           ;eeprom_settings.c: 186: EEADR = (unsigned char)Location_High_Byte;
  8176  003FA0  C019  FFA9         	movff	Eeprom_Store@Location_High_Byte,4009	;volatile
  8177                           
  8178                           ;eeprom_settings.c: 187: EEDATA = (unsigned char)(Value >> 8);
  8179  003FA4  5016               	movf	Eeprom_Store@Value+1,w,c
  8180  003FA6  6EA8               	movwf	4008,c	;volatile
  8181                           
  8182                           ;eeprom_settings.c: 188: EECON1bits.EEPGD = 0;
  8183  003FA8  9EA6               	bcf	4006,7,c	;volsfr
  8184                           
  8185                           ;eeprom_settings.c: 189: EECON1bits.CFGS = 0;
  8186  003FAA  9CA6               	bcf	4006,6,c	;volsfr
  8187                           
  8188                           ;eeprom_settings.c: 190: EECON1bits.WREN = 1;
  8189  003FAC  84A6               	bsf	4006,2,c	;volsfr
  8190                           
  8191                           ;eeprom_settings.c: 191: EECON2 = 0x55;
  8192  003FAE  0E55               	movlw	85
  8193  003FB0  6EA7               	movwf	4007,c	;volsfr
  8194                           
  8195                           ;eeprom_settings.c: 192: EECON2 = 0xaa;
  8196  003FB2  0EAA               	movlw	170
  8197  003FB4  6EA7               	movwf	4007,c	;volsfr
  8198                           
  8199                           ;eeprom_settings.c: 193: EECON1bits.WR = 1;
  8200  003FB6  82A6               	bsf	4006,1,c	;volsfr
  8201  003FB8                     
  8202                           ;eeprom_settings.c: 195: continue;
  8203  003FB8  B2A6               	btfsc	4006,1,c	;volsfr
  8204  003FBA  D7FE               	goto	l762
  8205                           
  8206                           ;eeprom_settings.c: 196: }
  8207                           ;eeprom_settings.c: 197: PIR2bits.EEIF = 0;
  8208  003FBC  98A1               	bcf	4001,4,c	;volatile
  8209                           
  8210                           ;eeprom_settings.c: 207: EECON1bits.WRERR = 0;
  8211  003FBE  96A6               	bcf	4006,3,c	;volsfr
  8212                           
  8213                           ;eeprom_settings.c: 208: EEADR = (unsigned char)Location_Low_Byte;
  8214  003FC0  C017  FFA9         	movff	Eeprom_Store@Location_Low_Byte,4009	;volatile
  8215                           
  8216                           ;eeprom_settings.c: 209: EEDATA = (unsigned char)Value;
  8217  003FC4  C015  FFA8         	movff	Eeprom_Store@Value,4008	;volatile
  8218                           
  8219                           ;eeprom_settings.c: 210: EECON1bits.EEPGD = 0;
  8220  003FC8  9EA6               	bcf	4006,7,c	;volsfr
  8221                           
  8222                           ;eeprom_settings.c: 211: EECON1bits.CFGS = 0;
  8223  003FCA  9CA6               	bcf	4006,6,c	;volsfr
  8224                           
  8225                           ;eeprom_settings.c: 212: EECON1bits.WREN = 1;
  8226  003FCC  84A6               	bsf	4006,2,c	;volsfr
  8227                           
  8228                           ;eeprom_settings.c: 213: INTCON = 0x00;
  8229  003FCE  0E00               	movlw	0
  8230  003FD0  6EF2               	movwf	intcon,c	;volatile
  8231                           
  8232                           ;eeprom_settings.c: 214: EECON2 = 0x55;
  8233  003FD2  0E55               	movlw	85
  8234  003FD4  6EA7               	movwf	4007,c	;volsfr
  8235                           
  8236                           ;eeprom_settings.c: 215: EECON2 = 0xaa;
  8237  003FD6  0EAA               	movlw	170
  8238  003FD8  6EA7               	movwf	4007,c	;volsfr
  8239                           
  8240                           ;eeprom_settings.c: 216: EECON1bits.WR = 1;
  8241  003FDA  82A6               	bsf	4006,1,c	;volsfr
  8242  003FDC                     
  8243                           ;eeprom_settings.c: 218: continue;
  8244  003FDC  B2A6               	btfsc	4006,1,c	;volsfr
  8245  003FDE  D7FE               	goto	l765
  8246                           
  8247                           ;eeprom_settings.c: 219: }
  8248                           ;eeprom_settings.c: 220: PIR2bits.EEIF = 0;
  8249  003FE0  98A1               	bcf	4001,4,c	;volatile
  8250                           
  8251                           ;eeprom_settings.c: 230: EECON1bits.WREN = 0;
  8252  003FE2  94A6               	bcf	4006,2,c	;volsfr
  8253                           
  8254                           ;eeprom_settings.c: 231: INTCON = 0xA0;
  8255  003FE4  0EA0               	movlw	160
  8256  003FE6  6EF2               	movwf	intcon,c	;volatile
  8257  003FE8  0012               	return		;funcret
  8258  003FEA                     __end_of_Eeprom_Store:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           tblptrh	equ	0xFF7
  8262                           tblptrl	equ	0xFF6
  8263                           tablat	equ	0xFF5
  8264                           prodh	equ	0xFF4
  8265                           prodl	equ	0xFF3
  8266                           intcon	equ	0xFF2
  8267                           postinc0	equ	0xFEE
  8268                           wreg	equ	0xFE8
  8269                           postinc1	equ	0xFE6
  8270                           postdec1	equ	0xFE5
  8271                           fsr1h	equ	0xFE2
  8272                           fsr1l	equ	0xFE1
  8273                           postinc2	equ	0xFDE
  8274                           postdec2	equ	0xFDD
  8275                           fsr2h	equ	0xFDA
  8276                           fsr2l	equ	0xFD9
  8277                           status	equ	0xFD8
  8278                           
  8279 ;; *************** function _Debounce_Inputs *****************
  8280 ;; Defined at:
  8281 ;;		line 148 in file "../io.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;		None
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  1    wreg      void 
  8288 ;; Registers used:
  8289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8295 ;;      Params:         0       0       0       0       0       0       0       0       0
  8296 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8297 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8298 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8299 ;;Total ram usage:        2 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    5
  8302 ;; This function calls:
  8303 ;;		_GETxAPIxVAL
  8304 ;;		_SETxAPIxVAL
  8305 ;;		_SetDCPWM1
  8306 ;; This function is called by:
  8307 ;;		_Update_StateMchn
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text17
  8312  0015CC                     __ptext17:
  8313                           	opt stack 0
  8314  0015CC                     _Debounce_Inputs:
  8315                           	opt stack 24
  8316                           
  8317                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  8318                           
  8319                           ;incstack = 0
  8320  0015CC  0E00               	movlw	0
  8321  0015CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  8322  0015D0  0E40               	movlw	64
  8323  0015D2  6E13               	movwf	GETxAPIxVAL@index,c
  8324  0015D4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8325  0015D8  4613               	rlncf	?_GETxAPIxVAL,f,c
  8326  0015DA  4613               	rlncf	?_GETxAPIxVAL,f,c
  8327  0015DC  4613               	rlncf	?_GETxAPIxVAL,f,c
  8328  0015DE  5080               	movf	3968,w,c	;volatile
  8329  0015E0  1813               	xorwf	?_GETxAPIxVAL,w,c
  8330  0015E2  0BF7               	andlw	-9
  8331  0015E4  1813               	xorwf	?_GETxAPIxVAL,w,c
  8332  0015E6  6E80               	movwf	3968,c	;volatile
  8333                           
  8334                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  8335  0015E8  0E00               	movlw	0
  8336  0015EA  6E14               	movwf	GETxAPIxVAL@index+1,c
  8337  0015EC  0E41               	movlw	65
  8338  0015EE  6E13               	movwf	GETxAPIxVAL@index,c
  8339  0015F0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8340  0015F4  4613               	rlncf	?_GETxAPIxVAL,f,c
  8341  0015F6  4613               	rlncf	?_GETxAPIxVAL,f,c
  8342  0015F8  5080               	movf	3968,w,c	;volatile
  8343  0015FA  1813               	xorwf	?_GETxAPIxVAL,w,c
  8344  0015FC  0BFB               	andlw	-5
  8345  0015FE  1813               	xorwf	?_GETxAPIxVAL,w,c
  8346  001600  6E80               	movwf	3968,c	;volatile
  8347                           
  8348                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  8349  001602  0E00               	movlw	0
  8350  001604  6E14               	movwf	GETxAPIxVAL@index+1,c
  8351  001606  0E42               	movlw	66
  8352  001608  6E13               	movwf	GETxAPIxVAL@index,c
  8353  00160A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8354  00160E  4613               	rlncf	?_GETxAPIxVAL,f,c
  8355  001610  5080               	movf	3968,w,c	;volatile
  8356  001612  1813               	xorwf	?_GETxAPIxVAL,w,c
  8357  001614  0BFD               	andlw	-3
  8358  001616  1813               	xorwf	?_GETxAPIxVAL,w,c
  8359  001618  6E80               	movwf	3968,c	;volatile
  8360                           
  8361                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  8362  00161A  0E00               	movlw	0
  8363  00161C  6E14               	movwf	GETxAPIxVAL@index+1,c
  8364  00161E  0E43               	movlw	67
  8365  001620  6E13               	movwf	GETxAPIxVAL@index,c
  8366  001622  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8367  001626  5080               	movf	3968,w,c	;volatile
  8368  001628  1813               	xorwf	?_GETxAPIxVAL,w,c
  8369  00162A  0BFE               	andlw	-2
  8370  00162C  1813               	xorwf	?_GETxAPIxVAL,w,c
  8371  00162E  6E80               	movwf	3968,c	;volatile
  8372                           
  8373                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  8374  001630  0E00               	movlw	0
  8375  001632  6E14               	movwf	GETxAPIxVAL@index+1,c
  8376  001634  0E45               	movlw	69
  8377  001636  6E13               	movwf	GETxAPIxVAL@index,c
  8378  001638  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8379  00163C  5082               	movf	3970,w,c	;volatile
  8380  00163E  1813               	xorwf	?_GETxAPIxVAL,w,c
  8381  001640  0BFE               	andlw	-2
  8382  001642  1813               	xorwf	?_GETxAPIxVAL,w,c
  8383  001644  6E82               	movwf	3970,c	;volatile
  8384                           
  8385                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(88));
  8386  001646  0E00               	movlw	0
  8387  001648  6E14               	movwf	GETxAPIxVAL@index+1,c
  8388  00164A  0E58               	movlw	88
  8389  00164C  6E13               	movwf	GETxAPIxVAL@index,c
  8390  00164E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8391  001652  C013  F015         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8392  001656  C014  F016         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8393  00165A  ECDA  F020         	call	_SetDCPWM1	;wreg free
  8394                           
  8395                           ;io.c: 157: switch(PORTDbits.RD1)
  8396  00165E  D02C               	goto	l854
  8397  001660  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8398  001662  B4D8               	btfsc	status,2,c
  8399  001664  D002               	goto	l856
  8400                           
  8401                           ;io.c: 160: {
  8402                           ;io.c: 161: Reed_Contact_LF_Counter--;
  8403  001666  063E               	decf	_Reed_Contact_LF_Counter,f,c
  8404                           
  8405                           ;io.c: 163: }
  8406                           
  8407                           ;io.c: 162: break;
  8408  001668  D05F               	goto	l863
  8409  00166A                     l856:
  8410                           
  8411                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  8412  00166A  0E00               	movlw	0
  8413  00166C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8414  00166E  0E1F               	movlw	31
  8415  001670  6E19               	movwf	SETxAPIxVAL@index,c
  8416  001672  0E00               	movlw	0
  8417  001674  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8418  001676  0E00               	movlw	0
  8419  001678  6E1B               	movwf	SETxAPIxVAL@value,c
  8420  00167A  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8421                           
  8422                           ;io.c: 165: break;
  8423  00167E  D054               	goto	l863
  8424  001680  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8425  001682  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8426  001684  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8427  001686  0E00               	movlw	0
  8428  001688  6E14               	movwf	GETxAPIxVAL@index+1,c
  8429  00168A  0E1B               	movlw	27
  8430  00168C  6E13               	movwf	GETxAPIxVAL@index,c
  8431  00168E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8432  001692  501F               	movf	??_Debounce_Inputs,w,c
  8433  001694  5C13               	subwf	?_GETxAPIxVAL,w,c
  8434  001696  5020               	movf	??_Debounce_Inputs+1,w,c
  8435  001698  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8436  00169A  A0D8               	btfss	status,0,c
  8437  00169C  D002               	goto	l860
  8438                           
  8439                           ;io.c: 168: {
  8440                           ;io.c: 169: Reed_Contact_LF_Counter++;
  8441  00169E  2A3E               	incf	_Reed_Contact_LF_Counter,f,c
  8442                           
  8443                           ;io.c: 171: }
  8444                           
  8445                           ;io.c: 170: break;
  8446  0016A0  D043               	goto	l863
  8447  0016A2                     l860:
  8448                           
  8449                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  8450  0016A2  0E00               	movlw	0
  8451  0016A4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8452  0016A6  0E1F               	movlw	31
  8453  0016A8  6E19               	movwf	SETxAPIxVAL@index,c
  8454  0016AA  0E00               	movlw	0
  8455  0016AC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8456  0016AE  0E01               	movlw	1
  8457  0016B0  6E1B               	movwf	SETxAPIxVAL@value,c
  8458  0016B2  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8459                           
  8460                           ;io.c: 176: }
  8461                           
  8462                           ;io.c: 175: default : break;
  8463                           
  8464                           ;io.c: 173: break;
  8465  0016B6  D038               	goto	l863
  8466  0016B8                     l854:
  8467  0016B8  A283               	btfss	3971,1,c	;volatile
  8468  0016BA  D002               	goto	u7230
  8469  0016BC  0E01               	movlw	1
  8470  0016BE  D001               	goto	u7236
  8471  0016C0                     u7230:
  8472  0016C0  0E00               	movlw	0
  8473  0016C2                     u7236:
  8474                           
  8475                           ; Switch size 1, requested type "space"
  8476                           ; Number of cases is 2, Range of values is 0 to 1
  8477                           ; switch strategies available:
  8478                           ; Name         Instructions Cycles
  8479                           ; simple_byte            7     4 (average)
  8480                           ;	Chosen strategy is simple_byte
  8481  0016C2  0A00               	xorlw	0	; case 0
  8482  0016C4  B4D8               	btfsc	status,2,c
  8483  0016C6  D7DC               	goto	l859
  8484  0016C8  0A01               	xorlw	1	; case 1
  8485  0016CA  B4D8               	btfsc	status,2,c
  8486  0016CC  D7C9               	goto	l855
  8487                           
  8488                           ;io.c: 179: switch(PORTDbits.RD0)
  8489  0016CE  D02C               	goto	l863
  8490  0016D0  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8491  0016D2  B4D8               	btfsc	status,2,c
  8492  0016D4  D002               	goto	l865
  8493                           
  8494                           ;io.c: 182: {
  8495                           ;io.c: 183: Reed_Contact_LB_Counter--;
  8496  0016D6  063D               	decf	_Reed_Contact_LB_Counter,f,c
  8497                           
  8498                           ;io.c: 185: }
  8499                           
  8500                           ;io.c: 184: break;
  8501  0016D8  D05F               	goto	l872
  8502  0016DA                     l865:
  8503                           
  8504                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  8505  0016DA  0E00               	movlw	0
  8506  0016DC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8507  0016DE  0E1E               	movlw	30
  8508  0016E0  6E19               	movwf	SETxAPIxVAL@index,c
  8509  0016E2  0E00               	movlw	0
  8510  0016E4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8511  0016E6  0E00               	movlw	0
  8512  0016E8  6E1B               	movwf	SETxAPIxVAL@value,c
  8513  0016EA  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8514                           
  8515                           ;io.c: 187: break;
  8516  0016EE  D054               	goto	l872
  8517  0016F0  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8518  0016F2  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8519  0016F4  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8520  0016F6  0E00               	movlw	0
  8521  0016F8  6E14               	movwf	GETxAPIxVAL@index+1,c
  8522  0016FA  0E1B               	movlw	27
  8523  0016FC  6E13               	movwf	GETxAPIxVAL@index,c
  8524  0016FE  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8525  001702  501F               	movf	??_Debounce_Inputs,w,c
  8526  001704  5C13               	subwf	?_GETxAPIxVAL,w,c
  8527  001706  5020               	movf	??_Debounce_Inputs+1,w,c
  8528  001708  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8529  00170A  A0D8               	btfss	status,0,c
  8530  00170C  D002               	goto	l869
  8531                           
  8532                           ;io.c: 190: {
  8533                           ;io.c: 191: Reed_Contact_LB_Counter++;
  8534  00170E  2A3D               	incf	_Reed_Contact_LB_Counter,f,c
  8535                           
  8536                           ;io.c: 193: }
  8537                           
  8538                           ;io.c: 192: break;
  8539  001710  D043               	goto	l872
  8540  001712                     l869:
  8541                           
  8542                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  8543  001712  0E00               	movlw	0
  8544  001714  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8545  001716  0E1E               	movlw	30
  8546  001718  6E19               	movwf	SETxAPIxVAL@index,c
  8547  00171A  0E00               	movlw	0
  8548  00171C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8549  00171E  0E01               	movlw	1
  8550  001720  6E1B               	movwf	SETxAPIxVAL@value,c
  8551  001722  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8552                           
  8553                           ;io.c: 198: }
  8554                           
  8555                           ;io.c: 197: default : break;
  8556                           
  8557                           ;io.c: 195: break;
  8558  001726  D038               	goto	l872
  8559  001728                     l863:
  8560  001728  A083               	btfss	3971,0,c	;volatile
  8561  00172A  D002               	goto	u7260
  8562  00172C  0E01               	movlw	1
  8563  00172E  D001               	goto	u7266
  8564  001730                     u7260:
  8565  001730  0E00               	movlw	0
  8566  001732                     u7266:
  8567                           
  8568                           ; Switch size 1, requested type "space"
  8569                           ; Number of cases is 2, Range of values is 0 to 1
  8570                           ; switch strategies available:
  8571                           ; Name         Instructions Cycles
  8572                           ; simple_byte            7     4 (average)
  8573                           ;	Chosen strategy is simple_byte
  8574  001732  0A00               	xorlw	0	; case 0
  8575  001734  B4D8               	btfsc	status,2,c
  8576  001736  D7DC               	goto	l868
  8577  001738  0A01               	xorlw	1	; case 1
  8578  00173A  B4D8               	btfsc	status,2,c
  8579  00173C  D7C9               	goto	l864
  8580                           
  8581                           ;io.c: 201: switch(PORTDbits.RD3)
  8582  00173E  D02C               	goto	l872
  8583  001740  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8584  001742  B4D8               	btfsc	status,2,c
  8585  001744  D002               	goto	l874
  8586                           
  8587                           ;io.c: 204: {
  8588                           ;io.c: 205: Reed_Contact_RF_Counter--;
  8589  001746  063C               	decf	_Reed_Contact_RF_Counter,f,c
  8590                           
  8591                           ;io.c: 207: }
  8592                           
  8593                           ;io.c: 206: break;
  8594  001748  D05F               	goto	l881
  8595  00174A                     l874:
  8596                           
  8597                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  8598  00174A  0E00               	movlw	0
  8599  00174C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8600  00174E  0E1D               	movlw	29
  8601  001750  6E19               	movwf	SETxAPIxVAL@index,c
  8602  001752  0E00               	movlw	0
  8603  001754  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8604  001756  0E00               	movlw	0
  8605  001758  6E1B               	movwf	SETxAPIxVAL@value,c
  8606  00175A  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8607                           
  8608                           ;io.c: 209: break;
  8609  00175E  D054               	goto	l881
  8610  001760  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8611  001762  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8612  001764  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8613  001766  0E00               	movlw	0
  8614  001768  6E14               	movwf	GETxAPIxVAL@index+1,c
  8615  00176A  0E1B               	movlw	27
  8616  00176C  6E13               	movwf	GETxAPIxVAL@index,c
  8617  00176E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8618  001772  501F               	movf	??_Debounce_Inputs,w,c
  8619  001774  5C13               	subwf	?_GETxAPIxVAL,w,c
  8620  001776  5020               	movf	??_Debounce_Inputs+1,w,c
  8621  001778  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8622  00177A  A0D8               	btfss	status,0,c
  8623  00177C  D002               	goto	l878
  8624                           
  8625                           ;io.c: 212: {
  8626                           ;io.c: 213: Reed_Contact_RF_Counter++;
  8627  00177E  2A3C               	incf	_Reed_Contact_RF_Counter,f,c
  8628                           
  8629                           ;io.c: 215: }
  8630                           
  8631                           ;io.c: 214: break;
  8632  001780  D043               	goto	l881
  8633  001782                     l878:
  8634                           
  8635                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  8636  001782  0E00               	movlw	0
  8637  001784  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8638  001786  0E1D               	movlw	29
  8639  001788  6E19               	movwf	SETxAPIxVAL@index,c
  8640  00178A  0E00               	movlw	0
  8641  00178C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8642  00178E  0E01               	movlw	1
  8643  001790  6E1B               	movwf	SETxAPIxVAL@value,c
  8644  001792  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8645                           
  8646                           ;io.c: 220: }
  8647                           
  8648                           ;io.c: 219: default : break;
  8649                           
  8650                           ;io.c: 217: break;
  8651  001796  D038               	goto	l881
  8652  001798                     l872:
  8653  001798  A683               	btfss	3971,3,c	;volatile
  8654  00179A  D002               	goto	u7290
  8655  00179C  0E01               	movlw	1
  8656  00179E  D001               	goto	u7296
  8657  0017A0                     u7290:
  8658  0017A0  0E00               	movlw	0
  8659  0017A2                     u7296:
  8660                           
  8661                           ; Switch size 1, requested type "space"
  8662                           ; Number of cases is 2, Range of values is 0 to 1
  8663                           ; switch strategies available:
  8664                           ; Name         Instructions Cycles
  8665                           ; simple_byte            7     4 (average)
  8666                           ;	Chosen strategy is simple_byte
  8667  0017A2  0A00               	xorlw	0	; case 0
  8668  0017A4  B4D8               	btfsc	status,2,c
  8669  0017A6  D7DC               	goto	l877
  8670  0017A8  0A01               	xorlw	1	; case 1
  8671  0017AA  B4D8               	btfsc	status,2,c
  8672  0017AC  D7C9               	goto	l873
  8673                           
  8674                           ;io.c: 223: switch(PORTDbits.RD2)
  8675  0017AE  D02C               	goto	l881
  8676  0017B0  503B               	movf	_Reed_Contact_RB_Counter,w,c
  8677  0017B2  B4D8               	btfsc	status,2,c
  8678  0017B4  D002               	goto	l883
  8679                           
  8680                           ;io.c: 226: {
  8681                           ;io.c: 227: Reed_Contact_RB_Counter--;
  8682  0017B6  063B               	decf	_Reed_Contact_RB_Counter,f,c
  8683                           
  8684                           ;io.c: 229: }
  8685                           
  8686                           ;io.c: 228: break;
  8687  0017B8  D05F               	goto	l890
  8688  0017BA                     l883:
  8689                           
  8690                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  8691  0017BA  0E00               	movlw	0
  8692  0017BC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8693  0017BE  0E1C               	movlw	28
  8694  0017C0  6E19               	movwf	SETxAPIxVAL@index,c
  8695  0017C2  0E00               	movlw	0
  8696  0017C4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8697  0017C6  0E00               	movlw	0
  8698  0017C8  6E1B               	movwf	SETxAPIxVAL@value,c
  8699  0017CA  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8700                           
  8701                           ;io.c: 231: break;
  8702  0017CE  D054               	goto	l890
  8703  0017D0  503B               	movf	_Reed_Contact_RB_Counter,w,c
  8704  0017D2  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8705  0017D4  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8706  0017D6  0E00               	movlw	0
  8707  0017D8  6E14               	movwf	GETxAPIxVAL@index+1,c
  8708  0017DA  0E1B               	movlw	27
  8709  0017DC  6E13               	movwf	GETxAPIxVAL@index,c
  8710  0017DE  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8711  0017E2  501F               	movf	??_Debounce_Inputs,w,c
  8712  0017E4  5C13               	subwf	?_GETxAPIxVAL,w,c
  8713  0017E6  5020               	movf	??_Debounce_Inputs+1,w,c
  8714  0017E8  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8715  0017EA  A0D8               	btfss	status,0,c
  8716  0017EC  D002               	goto	l887
  8717                           
  8718                           ;io.c: 234: {
  8719                           ;io.c: 235: Reed_Contact_RB_Counter++;
  8720  0017EE  2A3B               	incf	_Reed_Contact_RB_Counter,f,c
  8721                           
  8722                           ;io.c: 237: }
  8723                           
  8724                           ;io.c: 236: break;
  8725  0017F0  D043               	goto	l890
  8726  0017F2                     l887:
  8727                           
  8728                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  8729  0017F2  0E00               	movlw	0
  8730  0017F4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8731  0017F6  0E1C               	movlw	28
  8732  0017F8  6E19               	movwf	SETxAPIxVAL@index,c
  8733  0017FA  0E00               	movlw	0
  8734  0017FC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8735  0017FE  0E01               	movlw	1
  8736  001800  6E1B               	movwf	SETxAPIxVAL@value,c
  8737  001802  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8738                           
  8739                           ;io.c: 242: }
  8740                           
  8741                           ;io.c: 241: default : break;
  8742                           
  8743                           ;io.c: 239: break;
  8744  001806  D038               	goto	l890
  8745  001808                     l881:
  8746  001808  A483               	btfss	3971,2,c	;volatile
  8747  00180A  D002               	goto	u7320
  8748  00180C  0E01               	movlw	1
  8749  00180E  D001               	goto	u7326
  8750  001810                     u7320:
  8751  001810  0E00               	movlw	0
  8752  001812                     u7326:
  8753                           
  8754                           ; Switch size 1, requested type "space"
  8755                           ; Number of cases is 2, Range of values is 0 to 1
  8756                           ; switch strategies available:
  8757                           ; Name         Instructions Cycles
  8758                           ; simple_byte            7     4 (average)
  8759                           ;	Chosen strategy is simple_byte
  8760  001812  0A00               	xorlw	0	; case 0
  8761  001814  B4D8               	btfsc	status,2,c
  8762  001816  D7DC               	goto	l886
  8763  001818  0A01               	xorlw	1	; case 1
  8764  00181A  B4D8               	btfsc	status,2,c
  8765  00181C  D7C9               	goto	l882
  8766                           
  8767                           ;io.c: 245: switch(!PORTBbits.RB0)
  8768  00181E  D02C               	goto	l890
  8769  001820  5036               	movf	_Button_Contact_Counter_Start,w,c
  8770  001822  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8771  001824  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8772  001826  0E00               	movlw	0
  8773  001828  6E14               	movwf	GETxAPIxVAL@index+1,c
  8774  00182A  0E1B               	movlw	27
  8775  00182C  6E13               	movwf	GETxAPIxVAL@index,c
  8776  00182E  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8777  001832  501F               	movf	??_Debounce_Inputs,w,c
  8778  001834  5C13               	subwf	?_GETxAPIxVAL,w,c
  8779  001836  5020               	movf	??_Debounce_Inputs+1,w,c
  8780  001838  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8781  00183A  A0D8               	btfss	status,0,c
  8782  00183C  D002               	goto	l892
  8783                           
  8784                           ;io.c: 248: {
  8785                           ;io.c: 249: Button_Contact_Counter_Start++;
  8786  00183E  2A36               	incf	_Button_Contact_Counter_Start,f,c
  8787                           
  8788                           ;io.c: 251: }
  8789                           
  8790                           ;io.c: 250: break;
  8791  001840  D05A               	goto	l899
  8792  001842                     l892:
  8793                           
  8794                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  8795  001842  0E00               	movlw	0
  8796  001844  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8797  001846  0E20               	movlw	32
  8798  001848  6E19               	movwf	SETxAPIxVAL@index,c
  8799  00184A  0E00               	movlw	0
  8800  00184C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8801  00184E  0E01               	movlw	1
  8802  001850  6E1B               	movwf	SETxAPIxVAL@value,c
  8803  001852  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8804                           
  8805                           ;io.c: 253: break;
  8806  001856  D04F               	goto	l899
  8807  001858  5036               	movf	_Button_Contact_Counter_Start,w,c
  8808  00185A  B4D8               	btfsc	status,2,c
  8809  00185C  D002               	goto	l896
  8810                           
  8811                           ;io.c: 256: {
  8812                           ;io.c: 257: Button_Contact_Counter_Start--;
  8813  00185E  0636               	decf	_Button_Contact_Counter_Start,f,c
  8814                           
  8815                           ;io.c: 259: }
  8816                           
  8817                           ;io.c: 258: break;
  8818  001860  D04A               	goto	l899
  8819  001862                     l896:
  8820                           
  8821                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  8822  001862  0E00               	movlw	0
  8823  001864  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8824  001866  0E20               	movlw	32
  8825  001868  6E19               	movwf	SETxAPIxVAL@index,c
  8826  00186A  0E00               	movlw	0
  8827  00186C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8828  00186E  0E00               	movlw	0
  8829  001870  6E1B               	movwf	SETxAPIxVAL@value,c
  8830  001872  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8831                           
  8832                           ;io.c: 264: }
  8833                           
  8834                           ;io.c: 263: default : break;
  8835                           
  8836                           ;io.c: 261: break;
  8837  001876  D03F               	goto	l899
  8838  001878                     l890:
  8839  001878  B081               	btfsc	3969,0,c	;volatile
  8840  00187A  D002               	goto	u7350
  8841  00187C  0E01               	movlw	1
  8842  00187E  D001               	goto	u7360
  8843  001880                     u7350:
  8844  001880  0E00               	movlw	0
  8845  001882                     u7360:
  8846  001882  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8847  001884  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8848                           
  8849                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8850                           ; Switch size 1, requested type "space"
  8851                           ; Number of cases is 1, Range of values is 0 to 0
  8852                           ; switch strategies available:
  8853                           ; Name         Instructions Cycles
  8854                           ; simple_byte            4     3 (average)
  8855                           ;	Chosen strategy is simple_byte
  8856  001886  5020               	movf	??_Debounce_Inputs+1,w,c
  8857  001888  0A00               	xorlw	0	; case 0
  8858  00188A  A4D8               	btfss	status,2,c
  8859  00188C  D034               	goto	l899
  8860                           
  8861                           ; Switch size 1, requested type "space"
  8862                           ; Number of cases is 2, Range of values is 0 to 1
  8863                           ; switch strategies available:
  8864                           ; Name         Instructions Cycles
  8865                           ; simple_byte            7     4 (average)
  8866                           ;	Chosen strategy is simple_byte
  8867  00188E  501F               	movf	??_Debounce_Inputs,w,c
  8868  001890  0A00               	xorlw	0	; case 0
  8869  001892  B4D8               	btfsc	status,2,c
  8870  001894  D7E1               	goto	l895
  8871  001896  0A01               	xorlw	1	; case 1
  8872  001898  B4D8               	btfsc	status,2,c
  8873  00189A  D7C2               	goto	l891
  8874                           
  8875                           ;io.c: 267: switch(!PORTDbits.RD7)
  8876  00189C  D02C               	goto	l899
  8877  00189E  5035               	movf	_Button_Contact_Counter_Stop,w,c
  8878  0018A0  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8879  0018A2  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8880  0018A4  0E00               	movlw	0
  8881  0018A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  8882  0018A8  0E1B               	movlw	27
  8883  0018AA  6E13               	movwf	GETxAPIxVAL@index,c
  8884  0018AC  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8885  0018B0  501F               	movf	??_Debounce_Inputs,w,c
  8886  0018B2  5C13               	subwf	?_GETxAPIxVAL,w,c
  8887  0018B4  5020               	movf	??_Debounce_Inputs+1,w,c
  8888  0018B6  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8889  0018B8  A0D8               	btfss	status,0,c
  8890  0018BA  D002               	goto	l901
  8891                           
  8892                           ;io.c: 270: {
  8893                           ;io.c: 271: Button_Contact_Counter_Stop++;
  8894  0018BC  2A35               	incf	_Button_Contact_Counter_Stop,f,c
  8895                           
  8896                           ;io.c: 273: }
  8897                           
  8898                           ;io.c: 272: break;
  8899  0018BE  D05A               	goto	l908
  8900  0018C0                     l901:
  8901                           
  8902                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  8903  0018C0  0E00               	movlw	0
  8904  0018C2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8905  0018C4  0E21               	movlw	33
  8906  0018C6  6E19               	movwf	SETxAPIxVAL@index,c
  8907  0018C8  0E00               	movlw	0
  8908  0018CA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8909  0018CC  0E01               	movlw	1
  8910  0018CE  6E1B               	movwf	SETxAPIxVAL@value,c
  8911  0018D0  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8912                           
  8913                           ;io.c: 275: break;
  8914  0018D4  D04F               	goto	l908
  8915  0018D6  5035               	movf	_Button_Contact_Counter_Stop,w,c
  8916  0018D8  B4D8               	btfsc	status,2,c
  8917  0018DA  D002               	goto	l905
  8918                           
  8919                           ;io.c: 278: {
  8920                           ;io.c: 279: Button_Contact_Counter_Stop--;
  8921  0018DC  0635               	decf	_Button_Contact_Counter_Stop,f,c
  8922                           
  8923                           ;io.c: 281: }
  8924                           
  8925                           ;io.c: 280: break;
  8926  0018DE  D04A               	goto	l908
  8927  0018E0                     l905:
  8928                           
  8929                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  8930  0018E0  0E00               	movlw	0
  8931  0018E2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8932  0018E4  0E21               	movlw	33
  8933  0018E6  6E19               	movwf	SETxAPIxVAL@index,c
  8934  0018E8  0E00               	movlw	0
  8935  0018EA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8936  0018EC  0E00               	movlw	0
  8937  0018EE  6E1B               	movwf	SETxAPIxVAL@value,c
  8938  0018F0  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  8939                           
  8940                           ;io.c: 286: }
  8941                           
  8942                           ;io.c: 285: default : break;
  8943                           
  8944                           ;io.c: 283: break;
  8945  0018F4  D03F               	goto	l908
  8946  0018F6                     l899:
  8947  0018F6  BE83               	btfsc	3971,7,c	;volatile
  8948  0018F8  D002               	goto	u7390
  8949  0018FA  0E01               	movlw	1
  8950  0018FC  D001               	goto	u7400
  8951  0018FE                     u7390:
  8952  0018FE  0E00               	movlw	0
  8953  001900                     u7400:
  8954  001900  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8955  001902  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8956                           
  8957                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8958                           ; Switch size 1, requested type "space"
  8959                           ; Number of cases is 1, Range of values is 0 to 0
  8960                           ; switch strategies available:
  8961                           ; Name         Instructions Cycles
  8962                           ; simple_byte            4     3 (average)
  8963                           ;	Chosen strategy is simple_byte
  8964  001904  5020               	movf	??_Debounce_Inputs+1,w,c
  8965  001906  0A00               	xorlw	0	; case 0
  8966  001908  A4D8               	btfss	status,2,c
  8967  00190A  D034               	goto	l908
  8968                           
  8969                           ; Switch size 1, requested type "space"
  8970                           ; Number of cases is 2, Range of values is 0 to 1
  8971                           ; switch strategies available:
  8972                           ; Name         Instructions Cycles
  8973                           ; simple_byte            7     4 (average)
  8974                           ;	Chosen strategy is simple_byte
  8975  00190C  501F               	movf	??_Debounce_Inputs,w,c
  8976  00190E  0A00               	xorlw	0	; case 0
  8977  001910  B4D8               	btfsc	status,2,c
  8978  001912  D7E1               	goto	l904
  8979  001914  0A01               	xorlw	1	; case 1
  8980  001916  B4D8               	btfsc	status,2,c
  8981  001918  D7C2               	goto	l900
  8982                           
  8983                           ;io.c: 289: switch(!PORTBbits.RB1)
  8984  00191A  D02C               	goto	l908
  8985  00191C  5034               	movf	_Button_Contact_Counter_Middle,w,c
  8986  00191E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8987  001920  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8988  001922  0E00               	movlw	0
  8989  001924  6E14               	movwf	GETxAPIxVAL@index+1,c
  8990  001926  0E1B               	movlw	27
  8991  001928  6E13               	movwf	GETxAPIxVAL@index,c
  8992  00192A  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  8993  00192E  501F               	movf	??_Debounce_Inputs,w,c
  8994  001930  5C13               	subwf	?_GETxAPIxVAL,w,c
  8995  001932  5020               	movf	??_Debounce_Inputs+1,w,c
  8996  001934  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8997  001936  A0D8               	btfss	status,0,c
  8998  001938  D002               	goto	l910
  8999                           
  9000                           ;io.c: 292: {
  9001                           ;io.c: 293: Button_Contact_Counter_Middle++;
  9002  00193A  2A34               	incf	_Button_Contact_Counter_Middle,f,c
  9003                           
  9004                           ;io.c: 295: }
  9005                           
  9006                           ;io.c: 294: break;
  9007  00193C  D05A               	goto	l917
  9008  00193E                     l910:
  9009                           
  9010                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  9011  00193E  0E00               	movlw	0
  9012  001940  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9013  001942  0E22               	movlw	34
  9014  001944  6E19               	movwf	SETxAPIxVAL@index,c
  9015  001946  0E00               	movlw	0
  9016  001948  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9017  00194A  0E01               	movlw	1
  9018  00194C  6E1B               	movwf	SETxAPIxVAL@value,c
  9019  00194E  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9020                           
  9021                           ;io.c: 297: break;
  9022  001952  D04F               	goto	l917
  9023  001954  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9024  001956  B4D8               	btfsc	status,2,c
  9025  001958  D002               	goto	l914
  9026                           
  9027                           ;io.c: 300: {
  9028                           ;io.c: 301: Button_Contact_Counter_Middle--;
  9029  00195A  0634               	decf	_Button_Contact_Counter_Middle,f,c
  9030                           
  9031                           ;io.c: 303: }
  9032                           
  9033                           ;io.c: 302: break;
  9034  00195C  D04A               	goto	l917
  9035  00195E                     l914:
  9036                           
  9037                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  9038  00195E  0E00               	movlw	0
  9039  001960  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9040  001962  0E22               	movlw	34
  9041  001964  6E19               	movwf	SETxAPIxVAL@index,c
  9042  001966  0E00               	movlw	0
  9043  001968  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9044  00196A  0E00               	movlw	0
  9045  00196C  6E1B               	movwf	SETxAPIxVAL@value,c
  9046  00196E  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9047                           
  9048                           ;io.c: 308: }
  9049                           
  9050                           ;io.c: 307: default : break;
  9051                           
  9052                           ;io.c: 305: break;
  9053  001972  D03F               	goto	l917
  9054  001974                     l908:
  9055  001974  B281               	btfsc	3969,1,c	;volatile
  9056  001976  D002               	goto	u7430
  9057  001978  0E01               	movlw	1
  9058  00197A  D001               	goto	u7440
  9059  00197C                     u7430:
  9060  00197C  0E00               	movlw	0
  9061  00197E                     u7440:
  9062  00197E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9063  001980  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9064                           
  9065                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9066                           ; Switch size 1, requested type "space"
  9067                           ; Number of cases is 1, Range of values is 0 to 0
  9068                           ; switch strategies available:
  9069                           ; Name         Instructions Cycles
  9070                           ; simple_byte            4     3 (average)
  9071                           ;	Chosen strategy is simple_byte
  9072  001982  5020               	movf	??_Debounce_Inputs+1,w,c
  9073  001984  0A00               	xorlw	0	; case 0
  9074  001986  A4D8               	btfss	status,2,c
  9075  001988  D034               	goto	l917
  9076                           
  9077                           ; Switch size 1, requested type "space"
  9078                           ; Number of cases is 2, Range of values is 0 to 1
  9079                           ; switch strategies available:
  9080                           ; Name         Instructions Cycles
  9081                           ; simple_byte            7     4 (average)
  9082                           ;	Chosen strategy is simple_byte
  9083  00198A  501F               	movf	??_Debounce_Inputs,w,c
  9084  00198C  0A00               	xorlw	0	; case 0
  9085  00198E  B4D8               	btfsc	status,2,c
  9086  001990  D7E1               	goto	l913
  9087  001992  0A01               	xorlw	1	; case 1
  9088  001994  B4D8               	btfsc	status,2,c
  9089  001996  D7C2               	goto	l909
  9090                           
  9091                           ;io.c: 311: switch(!PORTBbits.RB5)
  9092  001998  D02C               	goto	l917
  9093  00199A  5033               	movf	_Button_Contact_Counter_LB,w,c
  9094  00199C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9095  00199E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9096  0019A0  0E00               	movlw	0
  9097  0019A2  6E14               	movwf	GETxAPIxVAL@index+1,c
  9098  0019A4  0E1B               	movlw	27
  9099  0019A6  6E13               	movwf	GETxAPIxVAL@index,c
  9100  0019A8  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9101  0019AC  501F               	movf	??_Debounce_Inputs,w,c
  9102  0019AE  5C13               	subwf	?_GETxAPIxVAL,w,c
  9103  0019B0  5020               	movf	??_Debounce_Inputs+1,w,c
  9104  0019B2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9105  0019B4  A0D8               	btfss	status,0,c
  9106  0019B6  D002               	goto	l919
  9107                           
  9108                           ;io.c: 314: {
  9109                           ;io.c: 315: Button_Contact_Counter_LB++;
  9110  0019B8  2A33               	incf	_Button_Contact_Counter_LB,f,c
  9111                           
  9112                           ;io.c: 317: }
  9113                           
  9114                           ;io.c: 316: break;
  9115  0019BA  D05A               	goto	l926
  9116  0019BC                     l919:
  9117                           
  9118                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  9119  0019BC  0E00               	movlw	0
  9120  0019BE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9121  0019C0  0E23               	movlw	35
  9122  0019C2  6E19               	movwf	SETxAPIxVAL@index,c
  9123  0019C4  0E00               	movlw	0
  9124  0019C6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9125  0019C8  0E01               	movlw	1
  9126  0019CA  6E1B               	movwf	SETxAPIxVAL@value,c
  9127  0019CC  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9128                           
  9129                           ;io.c: 319: break;
  9130  0019D0  D04F               	goto	l926
  9131  0019D2  5033               	movf	_Button_Contact_Counter_LB,w,c
  9132  0019D4  B4D8               	btfsc	status,2,c
  9133  0019D6  D002               	goto	l923
  9134                           
  9135                           ;io.c: 322: {
  9136                           ;io.c: 323: Button_Contact_Counter_LB--;
  9137  0019D8  0633               	decf	_Button_Contact_Counter_LB,f,c
  9138                           
  9139                           ;io.c: 325: }
  9140                           
  9141                           ;io.c: 324: break;
  9142  0019DA  D04A               	goto	l926
  9143  0019DC                     l923:
  9144                           
  9145                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  9146  0019DC  0E00               	movlw	0
  9147  0019DE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9148  0019E0  0E23               	movlw	35
  9149  0019E2  6E19               	movwf	SETxAPIxVAL@index,c
  9150  0019E4  0E00               	movlw	0
  9151  0019E6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9152  0019E8  0E00               	movlw	0
  9153  0019EA  6E1B               	movwf	SETxAPIxVAL@value,c
  9154  0019EC  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9155                           
  9156                           ;io.c: 330: }
  9157                           
  9158                           ;io.c: 329: default : break;
  9159                           
  9160                           ;io.c: 327: break;
  9161  0019F0  D03F               	goto	l926
  9162  0019F2                     l917:
  9163  0019F2  BA81               	btfsc	3969,5,c	;volatile
  9164  0019F4  D002               	goto	u7470
  9165  0019F6  0E01               	movlw	1
  9166  0019F8  D001               	goto	u7480
  9167  0019FA                     u7470:
  9168  0019FA  0E00               	movlw	0
  9169  0019FC                     u7480:
  9170  0019FC  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9171  0019FE  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9172                           
  9173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9174                           ; Switch size 1, requested type "space"
  9175                           ; Number of cases is 1, Range of values is 0 to 0
  9176                           ; switch strategies available:
  9177                           ; Name         Instructions Cycles
  9178                           ; simple_byte            4     3 (average)
  9179                           ;	Chosen strategy is simple_byte
  9180  001A00  5020               	movf	??_Debounce_Inputs+1,w,c
  9181  001A02  0A00               	xorlw	0	; case 0
  9182  001A04  A4D8               	btfss	status,2,c
  9183  001A06  D034               	goto	l926
  9184                           
  9185                           ; Switch size 1, requested type "space"
  9186                           ; Number of cases is 2, Range of values is 0 to 1
  9187                           ; switch strategies available:
  9188                           ; Name         Instructions Cycles
  9189                           ; simple_byte            7     4 (average)
  9190                           ;	Chosen strategy is simple_byte
  9191  001A08  501F               	movf	??_Debounce_Inputs,w,c
  9192  001A0A  0A00               	xorlw	0	; case 0
  9193  001A0C  B4D8               	btfsc	status,2,c
  9194  001A0E  D7E1               	goto	l922
  9195  001A10  0A01               	xorlw	1	; case 1
  9196  001A12  B4D8               	btfsc	status,2,c
  9197  001A14  D7C2               	goto	l918
  9198                           
  9199                           ;io.c: 333: switch(!PORTBbits.RB4)
  9200  001A16  D02C               	goto	l926
  9201  001A18  5032               	movf	_Button_Contact_Counter_LF,w,c
  9202  001A1A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9203  001A1C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9204  001A1E  0E00               	movlw	0
  9205  001A20  6E14               	movwf	GETxAPIxVAL@index+1,c
  9206  001A22  0E1B               	movlw	27
  9207  001A24  6E13               	movwf	GETxAPIxVAL@index,c
  9208  001A26  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9209  001A2A  501F               	movf	??_Debounce_Inputs,w,c
  9210  001A2C  5C13               	subwf	?_GETxAPIxVAL,w,c
  9211  001A2E  5020               	movf	??_Debounce_Inputs+1,w,c
  9212  001A30  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9213  001A32  A0D8               	btfss	status,0,c
  9214  001A34  D002               	goto	l928
  9215                           
  9216                           ;io.c: 336: {
  9217                           ;io.c: 337: Button_Contact_Counter_LF++;
  9218  001A36  2A32               	incf	_Button_Contact_Counter_LF,f,c
  9219                           
  9220                           ;io.c: 339: }
  9221                           
  9222                           ;io.c: 338: break;
  9223  001A38  D05A               	goto	l935
  9224  001A3A                     l928:
  9225                           
  9226                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  9227  001A3A  0E00               	movlw	0
  9228  001A3C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9229  001A3E  0E24               	movlw	36
  9230  001A40  6E19               	movwf	SETxAPIxVAL@index,c
  9231  001A42  0E00               	movlw	0
  9232  001A44  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9233  001A46  0E01               	movlw	1
  9234  001A48  6E1B               	movwf	SETxAPIxVAL@value,c
  9235  001A4A  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9236                           
  9237                           ;io.c: 341: break;
  9238  001A4E  D04F               	goto	l935
  9239  001A50  5032               	movf	_Button_Contact_Counter_LF,w,c
  9240  001A52  B4D8               	btfsc	status,2,c
  9241  001A54  D002               	goto	l932
  9242                           
  9243                           ;io.c: 344: {
  9244                           ;io.c: 345: Button_Contact_Counter_LF--;
  9245  001A56  0632               	decf	_Button_Contact_Counter_LF,f,c
  9246                           
  9247                           ;io.c: 347: }
  9248                           
  9249                           ;io.c: 346: break;
  9250  001A58  D04A               	goto	l935
  9251  001A5A                     l932:
  9252                           
  9253                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  9254  001A5A  0E00               	movlw	0
  9255  001A5C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9256  001A5E  0E24               	movlw	36
  9257  001A60  6E19               	movwf	SETxAPIxVAL@index,c
  9258  001A62  0E00               	movlw	0
  9259  001A64  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9260  001A66  0E00               	movlw	0
  9261  001A68  6E1B               	movwf	SETxAPIxVAL@value,c
  9262  001A6A  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9263                           
  9264                           ;io.c: 352: }
  9265                           
  9266                           ;io.c: 351: default : break;
  9267                           
  9268                           ;io.c: 349: break;
  9269  001A6E  D03F               	goto	l935
  9270  001A70                     l926:
  9271  001A70  B881               	btfsc	3969,4,c	;volatile
  9272  001A72  D002               	goto	u7510
  9273  001A74  0E01               	movlw	1
  9274  001A76  D001               	goto	u7520
  9275  001A78                     u7510:
  9276  001A78  0E00               	movlw	0
  9277  001A7A                     u7520:
  9278  001A7A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9279  001A7C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9280                           
  9281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9282                           ; Switch size 1, requested type "space"
  9283                           ; Number of cases is 1, Range of values is 0 to 0
  9284                           ; switch strategies available:
  9285                           ; Name         Instructions Cycles
  9286                           ; simple_byte            4     3 (average)
  9287                           ;	Chosen strategy is simple_byte
  9288  001A7E  5020               	movf	??_Debounce_Inputs+1,w,c
  9289  001A80  0A00               	xorlw	0	; case 0
  9290  001A82  A4D8               	btfss	status,2,c
  9291  001A84  D034               	goto	l935
  9292                           
  9293                           ; Switch size 1, requested type "space"
  9294                           ; Number of cases is 2, Range of values is 0 to 1
  9295                           ; switch strategies available:
  9296                           ; Name         Instructions Cycles
  9297                           ; simple_byte            7     4 (average)
  9298                           ;	Chosen strategy is simple_byte
  9299  001A86  501F               	movf	??_Debounce_Inputs,w,c
  9300  001A88  0A00               	xorlw	0	; case 0
  9301  001A8A  B4D8               	btfsc	status,2,c
  9302  001A8C  D7E1               	goto	l931
  9303  001A8E  0A01               	xorlw	1	; case 1
  9304  001A90  B4D8               	btfsc	status,2,c
  9305  001A92  D7C2               	goto	l927
  9306                           
  9307                           ;io.c: 355: switch(!PORTBbits.RB3)
  9308  001A94  D02C               	goto	l935
  9309  001A96  5031               	movf	_Button_Contact_Counter_RB,w,c
  9310  001A98  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9311  001A9A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9312  001A9C  0E00               	movlw	0
  9313  001A9E  6E14               	movwf	GETxAPIxVAL@index+1,c
  9314  001AA0  0E1B               	movlw	27
  9315  001AA2  6E13               	movwf	GETxAPIxVAL@index,c
  9316  001AA4  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9317  001AA8  501F               	movf	??_Debounce_Inputs,w,c
  9318  001AAA  5C13               	subwf	?_GETxAPIxVAL,w,c
  9319  001AAC  5020               	movf	??_Debounce_Inputs+1,w,c
  9320  001AAE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9321  001AB0  A0D8               	btfss	status,0,c
  9322  001AB2  D002               	goto	l937
  9323                           
  9324                           ;io.c: 358: {
  9325                           ;io.c: 359: Button_Contact_Counter_RB++;
  9326  001AB4  2A31               	incf	_Button_Contact_Counter_RB,f,c
  9327                           
  9328                           ;io.c: 361: }
  9329                           
  9330                           ;io.c: 360: break;
  9331  001AB6  D05A               	goto	l944
  9332  001AB8                     l937:
  9333                           
  9334                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  9335  001AB8  0E00               	movlw	0
  9336  001ABA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9337  001ABC  0E25               	movlw	37
  9338  001ABE  6E19               	movwf	SETxAPIxVAL@index,c
  9339  001AC0  0E00               	movlw	0
  9340  001AC2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9341  001AC4  0E01               	movlw	1
  9342  001AC6  6E1B               	movwf	SETxAPIxVAL@value,c
  9343  001AC8  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9344                           
  9345                           ;io.c: 363: break;
  9346  001ACC  D04F               	goto	l944
  9347  001ACE  5031               	movf	_Button_Contact_Counter_RB,w,c
  9348  001AD0  B4D8               	btfsc	status,2,c
  9349  001AD2  D002               	goto	l941
  9350                           
  9351                           ;io.c: 366: {
  9352                           ;io.c: 367: Button_Contact_Counter_RB--;
  9353  001AD4  0631               	decf	_Button_Contact_Counter_RB,f,c
  9354                           
  9355                           ;io.c: 369: }
  9356                           
  9357                           ;io.c: 368: break;
  9358  001AD6  D04A               	goto	l944
  9359  001AD8                     l941:
  9360                           
  9361                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  9362  001AD8  0E00               	movlw	0
  9363  001ADA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9364  001ADC  0E25               	movlw	37
  9365  001ADE  6E19               	movwf	SETxAPIxVAL@index,c
  9366  001AE0  0E00               	movlw	0
  9367  001AE2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9368  001AE4  0E00               	movlw	0
  9369  001AE6  6E1B               	movwf	SETxAPIxVAL@value,c
  9370  001AE8  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9371                           
  9372                           ;io.c: 374: }
  9373                           
  9374                           ;io.c: 373: default : break;
  9375                           
  9376                           ;io.c: 371: break;
  9377  001AEC  D03F               	goto	l944
  9378  001AEE                     l935:
  9379  001AEE  B681               	btfsc	3969,3,c	;volatile
  9380  001AF0  D002               	goto	u7550
  9381  001AF2  0E01               	movlw	1
  9382  001AF4  D001               	goto	u7560
  9383  001AF6                     u7550:
  9384  001AF6  0E00               	movlw	0
  9385  001AF8                     u7560:
  9386  001AF8  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9387  001AFA  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9388                           
  9389                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9390                           ; Switch size 1, requested type "space"
  9391                           ; Number of cases is 1, Range of values is 0 to 0
  9392                           ; switch strategies available:
  9393                           ; Name         Instructions Cycles
  9394                           ; simple_byte            4     3 (average)
  9395                           ;	Chosen strategy is simple_byte
  9396  001AFC  5020               	movf	??_Debounce_Inputs+1,w,c
  9397  001AFE  0A00               	xorlw	0	; case 0
  9398  001B00  A4D8               	btfss	status,2,c
  9399  001B02  D034               	goto	l944
  9400                           
  9401                           ; Switch size 1, requested type "space"
  9402                           ; Number of cases is 2, Range of values is 0 to 1
  9403                           ; switch strategies available:
  9404                           ; Name         Instructions Cycles
  9405                           ; simple_byte            7     4 (average)
  9406                           ;	Chosen strategy is simple_byte
  9407  001B04  501F               	movf	??_Debounce_Inputs,w,c
  9408  001B06  0A00               	xorlw	0	; case 0
  9409  001B08  B4D8               	btfsc	status,2,c
  9410  001B0A  D7E1               	goto	l940
  9411  001B0C  0A01               	xorlw	1	; case 1
  9412  001B0E  B4D8               	btfsc	status,2,c
  9413  001B10  D7C2               	goto	l936
  9414                           
  9415                           ;io.c: 377: switch(!PORTBbits.RB2)
  9416  001B12  D02C               	goto	l944
  9417  001B14  5030               	movf	_Button_Contact_Counter_RF,w,c
  9418  001B16  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9419  001B18  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9420  001B1A  0E00               	movlw	0
  9421  001B1C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9422  001B1E  0E1B               	movlw	27
  9423  001B20  6E13               	movwf	GETxAPIxVAL@index,c
  9424  001B22  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9425  001B26  501F               	movf	??_Debounce_Inputs,w,c
  9426  001B28  5C13               	subwf	?_GETxAPIxVAL,w,c
  9427  001B2A  5020               	movf	??_Debounce_Inputs+1,w,c
  9428  001B2C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9429  001B2E  A0D8               	btfss	status,0,c
  9430  001B30  D002               	goto	l946
  9431                           
  9432                           ;io.c: 380: {
  9433                           ;io.c: 381: Button_Contact_Counter_RF++;
  9434  001B32  2A30               	incf	_Button_Contact_Counter_RF,f,c
  9435                           
  9436                           ;io.c: 383: }
  9437                           
  9438                           ;io.c: 382: break;
  9439  001B34  D05A               	goto	l953
  9440  001B36                     l946:
  9441                           
  9442                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  9443  001B36  0E00               	movlw	0
  9444  001B38  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9445  001B3A  0E26               	movlw	38
  9446  001B3C  6E19               	movwf	SETxAPIxVAL@index,c
  9447  001B3E  0E00               	movlw	0
  9448  001B40  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9449  001B42  0E01               	movlw	1
  9450  001B44  6E1B               	movwf	SETxAPIxVAL@value,c
  9451  001B46  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9452                           
  9453                           ;io.c: 385: break;
  9454  001B4A  D04F               	goto	l953
  9455  001B4C  5030               	movf	_Button_Contact_Counter_RF,w,c
  9456  001B4E  B4D8               	btfsc	status,2,c
  9457  001B50  D002               	goto	l950
  9458                           
  9459                           ;io.c: 388: {
  9460                           ;io.c: 389: Button_Contact_Counter_RF--;
  9461  001B52  0630               	decf	_Button_Contact_Counter_RF,f,c
  9462                           
  9463                           ;io.c: 391: }
  9464                           
  9465                           ;io.c: 390: break;
  9466  001B54  D04A               	goto	l953
  9467  001B56                     l950:
  9468                           
  9469                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  9470  001B56  0E00               	movlw	0
  9471  001B58  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9472  001B5A  0E26               	movlw	38
  9473  001B5C  6E19               	movwf	SETxAPIxVAL@index,c
  9474  001B5E  0E00               	movlw	0
  9475  001B60  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9476  001B62  0E00               	movlw	0
  9477  001B64  6E1B               	movwf	SETxAPIxVAL@value,c
  9478  001B66  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9479                           
  9480                           ;io.c: 396: }
  9481                           
  9482                           ;io.c: 395: default : break;
  9483                           
  9484                           ;io.c: 393: break;
  9485  001B6A  D03F               	goto	l953
  9486  001B6C                     l944:
  9487  001B6C  B481               	btfsc	3969,2,c	;volatile
  9488  001B6E  D002               	goto	u7590
  9489  001B70  0E01               	movlw	1
  9490  001B72  D001               	goto	u7600
  9491  001B74                     u7590:
  9492  001B74  0E00               	movlw	0
  9493  001B76                     u7600:
  9494  001B76  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9495  001B78  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9496                           
  9497                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9498                           ; Switch size 1, requested type "space"
  9499                           ; Number of cases is 1, Range of values is 0 to 0
  9500                           ; switch strategies available:
  9501                           ; Name         Instructions Cycles
  9502                           ; simple_byte            4     3 (average)
  9503                           ;	Chosen strategy is simple_byte
  9504  001B7A  5020               	movf	??_Debounce_Inputs+1,w,c
  9505  001B7C  0A00               	xorlw	0	; case 0
  9506  001B7E  A4D8               	btfss	status,2,c
  9507  001B80  D034               	goto	l953
  9508                           
  9509                           ; Switch size 1, requested type "space"
  9510                           ; Number of cases is 2, Range of values is 0 to 1
  9511                           ; switch strategies available:
  9512                           ; Name         Instructions Cycles
  9513                           ; simple_byte            7     4 (average)
  9514                           ;	Chosen strategy is simple_byte
  9515  001B82  501F               	movf	??_Debounce_Inputs,w,c
  9516  001B84  0A00               	xorlw	0	; case 0
  9517  001B86  B4D8               	btfsc	status,2,c
  9518  001B88  D7E1               	goto	l949
  9519  001B8A  0A01               	xorlw	1	; case 1
  9520  001B8C  B4D8               	btfsc	status,2,c
  9521  001B8E  D7C2               	goto	l945
  9522                           
  9523                           ;io.c: 399: switch(PORTCbits.RC1)
  9524  001B90  D02C               	goto	l953
  9525  001B92  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9526  001B94  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9527  001B96  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9528  001B98  0E00               	movlw	0
  9529  001B9A  6E14               	movwf	GETxAPIxVAL@index+1,c
  9530  001B9C  0E1B               	movlw	27
  9531  001B9E  6E13               	movwf	GETxAPIxVAL@index,c
  9532  001BA0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9533  001BA4  501F               	movf	??_Debounce_Inputs,w,c
  9534  001BA6  5C13               	subwf	?_GETxAPIxVAL,w,c
  9535  001BA8  5020               	movf	??_Debounce_Inputs+1,w,c
  9536  001BAA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9537  001BAC  A0D8               	btfss	status,0,c
  9538  001BAE  D002               	goto	l955
  9539                           
  9540                           ;io.c: 402: {
  9541                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  9542  001BB0  2A3A               	incf	_Reed_Contact_LMU_Counter,f,c
  9543                           
  9544                           ;io.c: 405: }
  9545                           
  9546                           ;io.c: 404: break;
  9547  001BB2  D053               	goto	l962
  9548  001BB4                     l955:
  9549                           
  9550                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  9551  001BB4  0E00               	movlw	0
  9552  001BB6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9553  001BB8  0E29               	movlw	41
  9554  001BBA  6E19               	movwf	SETxAPIxVAL@index,c
  9555  001BBC  0E00               	movlw	0
  9556  001BBE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9557  001BC0  0E01               	movlw	1
  9558  001BC2  6E1B               	movwf	SETxAPIxVAL@value,c
  9559  001BC4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9560                           
  9561                           ;io.c: 407: break;
  9562  001BC8  D048               	goto	l962
  9563  001BCA  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9564  001BCC  B4D8               	btfsc	status,2,c
  9565  001BCE  D002               	goto	l959
  9566                           
  9567                           ;io.c: 410: {
  9568                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  9569  001BD0  063A               	decf	_Reed_Contact_LMU_Counter,f,c
  9570                           
  9571                           ;io.c: 413: }
  9572                           
  9573                           ;io.c: 412: break;
  9574  001BD2  D043               	goto	l962
  9575  001BD4                     l959:
  9576                           
  9577                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  9578  001BD4  0E00               	movlw	0
  9579  001BD6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9580  001BD8  0E29               	movlw	41
  9581  001BDA  6E19               	movwf	SETxAPIxVAL@index,c
  9582  001BDC  0E00               	movlw	0
  9583  001BDE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9584  001BE0  0E00               	movlw	0
  9585  001BE2  6E1B               	movwf	SETxAPIxVAL@value,c
  9586  001BE4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9587                           
  9588                           ;io.c: 418: }
  9589                           
  9590                           ;io.c: 417: default : break;
  9591                           
  9592                           ;io.c: 415: break;
  9593  001BE8  D038               	goto	l962
  9594  001BEA                     l953:
  9595  001BEA  A282               	btfss	3970,1,c	;volatile
  9596  001BEC  D002               	goto	u7630
  9597  001BEE  0E01               	movlw	1
  9598  001BF0  D001               	goto	u7636
  9599  001BF2                     u7630:
  9600  001BF2  0E00               	movlw	0
  9601  001BF4                     u7636:
  9602                           
  9603                           ; Switch size 1, requested type "space"
  9604                           ; Number of cases is 2, Range of values is 0 to 1
  9605                           ; switch strategies available:
  9606                           ; Name         Instructions Cycles
  9607                           ; simple_byte            7     4 (average)
  9608                           ;	Chosen strategy is simple_byte
  9609  001BF4  0A00               	xorlw	0	; case 0
  9610  001BF6  B4D8               	btfsc	status,2,c
  9611  001BF8  D7CC               	goto	l954
  9612  001BFA  0A01               	xorlw	1	; case 1
  9613  001BFC  B4D8               	btfsc	status,2,c
  9614  001BFE  D7E5               	goto	l958
  9615                           
  9616                           ;io.c: 421: switch(PORTDbits.RD4)
  9617  001C00  D02C               	goto	l962
  9618  001C02  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9619  001C04  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9620  001C06  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9621  001C08  0E00               	movlw	0
  9622  001C0A  6E14               	movwf	GETxAPIxVAL@index+1,c
  9623  001C0C  0E1B               	movlw	27
  9624  001C0E  6E13               	movwf	GETxAPIxVAL@index,c
  9625  001C10  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9626  001C14  501F               	movf	??_Debounce_Inputs,w,c
  9627  001C16  5C13               	subwf	?_GETxAPIxVAL,w,c
  9628  001C18  5020               	movf	??_Debounce_Inputs+1,w,c
  9629  001C1A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9630  001C1C  A0D8               	btfss	status,0,c
  9631  001C1E  D002               	goto	l964
  9632                           
  9633                           ;io.c: 424: {
  9634                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  9635  001C20  2A39               	incf	_Reed_Contact_LMD_Counter,f,c
  9636                           
  9637                           ;io.c: 427: }
  9638                           
  9639                           ;io.c: 426: break;
  9640  001C22  D053               	goto	l971
  9641  001C24                     l964:
  9642                           
  9643                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  9644  001C24  0E00               	movlw	0
  9645  001C26  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9646  001C28  0E2A               	movlw	42
  9647  001C2A  6E19               	movwf	SETxAPIxVAL@index,c
  9648  001C2C  0E00               	movlw	0
  9649  001C2E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9650  001C30  0E01               	movlw	1
  9651  001C32  6E1B               	movwf	SETxAPIxVAL@value,c
  9652  001C34  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9653                           
  9654                           ;io.c: 429: break;
  9655  001C38  D048               	goto	l971
  9656  001C3A  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9657  001C3C  B4D8               	btfsc	status,2,c
  9658  001C3E  D002               	goto	l968
  9659                           
  9660                           ;io.c: 432: {
  9661                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  9662  001C40  0639               	decf	_Reed_Contact_LMD_Counter,f,c
  9663                           
  9664                           ;io.c: 435: }
  9665                           
  9666                           ;io.c: 434: break;
  9667  001C42  D043               	goto	l971
  9668  001C44                     l968:
  9669                           
  9670                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9671  001C44  0E00               	movlw	0
  9672  001C46  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9673  001C48  0E2A               	movlw	42
  9674  001C4A  6E19               	movwf	SETxAPIxVAL@index,c
  9675  001C4C  0E00               	movlw	0
  9676  001C4E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9677  001C50  0E00               	movlw	0
  9678  001C52  6E1B               	movwf	SETxAPIxVAL@value,c
  9679  001C54  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9680                           
  9681                           ;io.c: 440: }
  9682                           
  9683                           ;io.c: 439: default : break;
  9684                           
  9685                           ;io.c: 437: break;
  9686  001C58  D038               	goto	l971
  9687  001C5A                     l962:
  9688  001C5A  A883               	btfss	3971,4,c	;volatile
  9689  001C5C  D002               	goto	u7660
  9690  001C5E  0E01               	movlw	1
  9691  001C60  D001               	goto	u7666
  9692  001C62                     u7660:
  9693  001C62  0E00               	movlw	0
  9694  001C64                     u7666:
  9695                           
  9696                           ; Switch size 1, requested type "space"
  9697                           ; Number of cases is 2, Range of values is 0 to 1
  9698                           ; switch strategies available:
  9699                           ; Name         Instructions Cycles
  9700                           ; simple_byte            7     4 (average)
  9701                           ;	Chosen strategy is simple_byte
  9702  001C64  0A00               	xorlw	0	; case 0
  9703  001C66  B4D8               	btfsc	status,2,c
  9704  001C68  D7CC               	goto	l963
  9705  001C6A  0A01               	xorlw	1	; case 1
  9706  001C6C  B4D8               	btfsc	status,2,c
  9707  001C6E  D7E5               	goto	l967
  9708                           
  9709                           ;io.c: 443: switch(PORTEbits.RE1)
  9710  001C70  D02C               	goto	l971
  9711  001C72  5038               	movf	_Reed_Contact_RMU_Counter,w,c
  9712  001C74  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9713  001C76  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9714  001C78  0E00               	movlw	0
  9715  001C7A  6E14               	movwf	GETxAPIxVAL@index+1,c
  9716  001C7C  0E1B               	movlw	27
  9717  001C7E  6E13               	movwf	GETxAPIxVAL@index,c
  9718  001C80  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9719  001C84  501F               	movf	??_Debounce_Inputs,w,c
  9720  001C86  5C13               	subwf	?_GETxAPIxVAL,w,c
  9721  001C88  5020               	movf	??_Debounce_Inputs+1,w,c
  9722  001C8A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9723  001C8C  A0D8               	btfss	status,0,c
  9724  001C8E  D002               	goto	l973
  9725                           
  9726                           ;io.c: 446: {
  9727                           ;io.c: 447: Reed_Contact_RMU_Counter++;
  9728  001C90  2A38               	incf	_Reed_Contact_RMU_Counter,f,c
  9729                           
  9730                           ;io.c: 449: }
  9731                           
  9732                           ;io.c: 448: break;
  9733  001C92  D053               	goto	l980
  9734  001C94                     l973:
  9735                           
  9736                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
  9737  001C94  0E00               	movlw	0
  9738  001C96  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9739  001C98  0E2B               	movlw	43
  9740  001C9A  6E19               	movwf	SETxAPIxVAL@index,c
  9741  001C9C  0E00               	movlw	0
  9742  001C9E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9743  001CA0  0E01               	movlw	1
  9744  001CA2  6E1B               	movwf	SETxAPIxVAL@value,c
  9745  001CA4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9746                           
  9747                           ;io.c: 451: break;
  9748  001CA8  D048               	goto	l980
  9749  001CAA  5038               	movf	_Reed_Contact_RMU_Counter,w,c
  9750  001CAC  B4D8               	btfsc	status,2,c
  9751  001CAE  D002               	goto	l977
  9752                           
  9753                           ;io.c: 454: {
  9754                           ;io.c: 455: Reed_Contact_RMU_Counter--;
  9755  001CB0  0638               	decf	_Reed_Contact_RMU_Counter,f,c
  9756                           
  9757                           ;io.c: 457: }
  9758                           
  9759                           ;io.c: 456: break;
  9760  001CB2  D043               	goto	l980
  9761  001CB4                     l977:
  9762                           
  9763                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
  9764  001CB4  0E00               	movlw	0
  9765  001CB6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9766  001CB8  0E2B               	movlw	43
  9767  001CBA  6E19               	movwf	SETxAPIxVAL@index,c
  9768  001CBC  0E00               	movlw	0
  9769  001CBE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9770  001CC0  0E00               	movlw	0
  9771  001CC2  6E1B               	movwf	SETxAPIxVAL@value,c
  9772  001CC4  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9773                           
  9774                           ;io.c: 462: }
  9775                           
  9776                           ;io.c: 461: default : break;
  9777                           
  9778                           ;io.c: 459: break;
  9779  001CC8  D038               	goto	l980
  9780  001CCA                     l971:
  9781  001CCA  A284               	btfss	3972,1,c	;volatile
  9782  001CCC  D002               	goto	u7690
  9783  001CCE  0E01               	movlw	1
  9784  001CD0  D001               	goto	u7696
  9785  001CD2                     u7690:
  9786  001CD2  0E00               	movlw	0
  9787  001CD4                     u7696:
  9788                           
  9789                           ; Switch size 1, requested type "space"
  9790                           ; Number of cases is 2, Range of values is 0 to 1
  9791                           ; switch strategies available:
  9792                           ; Name         Instructions Cycles
  9793                           ; simple_byte            7     4 (average)
  9794                           ;	Chosen strategy is simple_byte
  9795  001CD4  0A00               	xorlw	0	; case 0
  9796  001CD6  B4D8               	btfsc	status,2,c
  9797  001CD8  D7CC               	goto	l972
  9798  001CDA  0A01               	xorlw	1	; case 1
  9799  001CDC  B4D8               	btfsc	status,2,c
  9800  001CDE  D7E5               	goto	l976
  9801                           
  9802                           ;io.c: 465: switch(PORTEbits.RE0)
  9803  001CE0  D02C               	goto	l980
  9804  001CE2  5037               	movf	_Reed_Contact_RMD_Counter,w,c
  9805  001CE4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9806  001CE6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9807  001CE8  0E00               	movlw	0
  9808  001CEA  6E14               	movwf	GETxAPIxVAL@index+1,c
  9809  001CEC  0E1B               	movlw	27
  9810  001CEE  6E13               	movwf	GETxAPIxVAL@index,c
  9811  001CF0  EC84  F021         	call	_GETxAPIxVAL	;wreg free
  9812  001CF4  501F               	movf	??_Debounce_Inputs,w,c
  9813  001CF6  5C13               	subwf	?_GETxAPIxVAL,w,c
  9814  001CF8  5020               	movf	??_Debounce_Inputs+1,w,c
  9815  001CFA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9816  001CFC  A0D8               	btfss	status,0,c
  9817  001CFE  D002               	goto	l982
  9818                           
  9819                           ;io.c: 468: {
  9820                           ;io.c: 469: Reed_Contact_RMD_Counter++;
  9821  001D00  2A37               	incf	_Reed_Contact_RMD_Counter,f,c
  9822                           
  9823                           ;io.c: 471: }
  9824                           
  9825                           ;io.c: 470: break;
  9826  001D02  0012               	return	
  9827  001D04                     l982:
  9828                           
  9829                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
  9830  001D04  0E00               	movlw	0
  9831  001D06  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9832  001D08  0E2C               	movlw	44
  9833  001D0A  6E19               	movwf	SETxAPIxVAL@index,c
  9834  001D0C  0E00               	movlw	0
  9835  001D0E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9836  001D10  0E01               	movlw	1
  9837  001D12  6E1B               	movwf	SETxAPIxVAL@value,c
  9838  001D14  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9839                           
  9840                           ;io.c: 473: break;
  9841  001D18  0012               	return	
  9842  001D1A  5037               	movf	_Reed_Contact_RMD_Counter,w,c
  9843  001D1C  B4D8               	btfsc	status,2,c
  9844  001D1E  D002               	goto	l986
  9845                           
  9846                           ;io.c: 476: {
  9847                           ;io.c: 477: Reed_Contact_RMD_Counter--;
  9848  001D20  0637               	decf	_Reed_Contact_RMD_Counter,f,c
  9849                           
  9850                           ;io.c: 479: }
  9851                           
  9852                           ;io.c: 478: break;
  9853  001D22  0012               	return	
  9854  001D24                     l986:
  9855                           
  9856                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
  9857  001D24  0E00               	movlw	0
  9858  001D26  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9859  001D28  0E2C               	movlw	44
  9860  001D2A  6E19               	movwf	SETxAPIxVAL@index,c
  9861  001D2C  0E00               	movlw	0
  9862  001D2E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9863  001D30  0E00               	movlw	0
  9864  001D32  6E1B               	movwf	SETxAPIxVAL@value,c
  9865  001D34  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
  9866                           
  9867                           ;io.c: 484: }
  9868                           
  9869                           ;io.c: 483: default : break;
  9870                           
  9871                           ;io.c: 481: break;
  9872  001D38  0012               	return	
  9873  001D3A                     l980:
  9874  001D3A  A084               	btfss	3972,0,c	;volatile
  9875  001D3C  D002               	goto	u7720
  9876  001D3E  0E01               	movlw	1
  9877  001D40  D001               	goto	u7726
  9878  001D42                     u7720:
  9879  001D42  0E00               	movlw	0
  9880  001D44                     u7726:
  9881                           
  9882                           ; Switch size 1, requested type "space"
  9883                           ; Number of cases is 2, Range of values is 0 to 1
  9884                           ; switch strategies available:
  9885                           ; Name         Instructions Cycles
  9886                           ; simple_byte            7     4 (average)
  9887                           ;	Chosen strategy is simple_byte
  9888  001D44  0A00               	xorlw	0	; case 0
  9889  001D46  B4D8               	btfsc	status,2,c
  9890  001D48  D7CC               	goto	l981
  9891  001D4A  0A01               	xorlw	1	; case 1
  9892  001D4C  A4D8               	btfss	status,2,c
  9893  001D4E  0012               	return	
  9894  001D50  D7E4               	goto	l985
  9895  001D52                     __end_of_Debounce_Inputs:
  9896                           	opt stack 0
  9897                           tblptru	equ	0xFF8
  9898                           tblptrh	equ	0xFF7
  9899                           tblptrl	equ	0xFF6
  9900                           tablat	equ	0xFF5
  9901                           prodh	equ	0xFF4
  9902                           prodl	equ	0xFF3
  9903                           intcon	equ	0xFF2
  9904                           postinc0	equ	0xFEE
  9905                           wreg	equ	0xFE8
  9906                           postinc1	equ	0xFE6
  9907                           postdec1	equ	0xFE5
  9908                           fsr1h	equ	0xFE2
  9909                           fsr1l	equ	0xFE1
  9910                           postinc2	equ	0xFDE
  9911                           postdec2	equ	0xFDD
  9912                           fsr2h	equ	0xFDA
  9913                           fsr2l	equ	0xFD9
  9914                           status	equ	0xFD8
  9915                           
  9916 ;; *************** function _SetDCPWM1 *****************
  9917 ;; Defined at:
  9918 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic18\plib\PWM\pw1setdc.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;  dutycycle       2   20[COMRAM] unsigned int 
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;  DCycle          2   24[COMRAM] struct PWMDC
  9923 ;; Return value:  Size  Location     Type
  9924 ;;                  1    wreg      void 
  9925 ;; Registers used:
  9926 ;;		wreg, status,2, status,0
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9932 ;;      Params:         2       0       0       0       0       0       0       0       0
  9933 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9934 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9935 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9936 ;;Total ram usage:        6 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    3
  9939 ;; This function calls:
  9940 ;;		Nothing
  9941 ;; This function is called by:
  9942 ;;		_Debounce_Inputs
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           	psect	text18
  9947  0041B4                     __ptext18:
  9948                           	opt stack 0
  9949  0041B4                     _SetDCPWM1:
  9950                           	opt stack 25
  9951                           
  9952                           ;incstack = 0
  9953  0041B4  C015  F017         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9954  0041B8  C016  F018         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9955  0041BC  0E06               	movlw	6
  9956  0041BE                     u3995:
  9957  0041BE  90D8               	bcf	status,0,c
  9958  0041C0  3617               	rlcf	??_SetDCPWM1,f,c
  9959  0041C2  3618               	rlcf	??_SetDCPWM1+1,f,c
  9960  0041C4  2EE8               	decfsz	wreg,f,c
  9961  0041C6  D7FB               	goto	u3995
  9962  0041C8  C017  F019         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9963  0041CC  C018  F01A         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  9964  0041D0  C01A  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  9965  0041D4  C019  F017         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  9966  0041D8  90D8               	bcf	status,0,c
  9967  0041DA  3217               	rrcf	??_SetDCPWM1,f,c
  9968  0041DC  90D8               	bcf	status,0,c
  9969  0041DE  3217               	rrcf	??_SetDCPWM1,f,c
  9970  0041E0  0E30               	movlw	48
  9971  0041E2  1617               	andwf	??_SetDCPWM1,f,c
  9972  0041E4  50BD               	movf	4029,w,c	;volatile
  9973  0041E6  0BCF               	andlw	207
  9974  0041E8  1017               	iorwf	??_SetDCPWM1,w,c
  9975  0041EA  6EBD               	movwf	4029,c	;volatile
  9976  0041EC  0012               	return		;funcret
  9977  0041EE                     __end_of_SetDCPWM1:
  9978                           	opt stack 0
  9979                           tblptru	equ	0xFF8
  9980                           tblptrh	equ	0xFF7
  9981                           tblptrl	equ	0xFF6
  9982                           tablat	equ	0xFF5
  9983                           prodh	equ	0xFF4
  9984                           prodl	equ	0xFF3
  9985                           intcon	equ	0xFF2
  9986                           postinc0	equ	0xFEE
  9987                           wreg	equ	0xFE8
  9988                           postinc1	equ	0xFE6
  9989                           postdec1	equ	0xFE5
  9990                           fsr1h	equ	0xFE2
  9991                           fsr1l	equ	0xFE1
  9992                           postinc2	equ	0xFDE
  9993                           postdec2	equ	0xFDD
  9994                           fsr2h	equ	0xFDA
  9995                           fsr2l	equ	0xFD9
  9996                           status	equ	0xFD8
  9997                           
  9998 ;; *************** function _READxRECEIVEDxMESSAGE *****************
  9999 ;; Defined at:
 10000 ;;		line 39 in file "../terminal.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;		None
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      void 
 10007 ;; Registers used:
 10008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10014 ;;      Params:         0       0       0       0       0       0       0       0       0
 10015 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10016 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10017 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10018 ;;Total ram usage:        4 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    6
 10021 ;; This function calls:
 10022 ;;		_EUSART1_Read
 10023 ;;		_TranslateMessage
 10024 ;;		_printf
 10025 ;; This function is called by:
 10026 ;;		_main
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text19
 10031  00374A                     __ptext19:
 10032                           	opt stack 0
 10033  00374A                     _READxRECEIVEDxMESSAGE:
 10034                           	opt stack 24
 10035                           
 10036                           ;terminal.c: 41: if ((eusart1RxCount) > 0){
 10037                           
 10038                           ;incstack = 0
 10039  00374A  503F               	movf	_eusart1RxCount,w,c	;volatile
 10040  00374C  B4D8               	btfsc	status,2,c
 10041  00374E  D07B               	goto	l604
 10042                           
 10043                           ;terminal.c: 44: Received_Data = EUSART1_Read();
 10044  003750  ECF7  F020         	call	_EUSART1_Read	;wreg free
 10045  003754  0100               	movlb	0	; () banked
 10046  003756  6F84               	movwf	_Received_Data& (0+255),b
 10047                           
 10048                           ;terminal.c: 46: switch (RxSwitch){
 10049  003758  D06B               	goto	l598
 10050  00375A                     
 10051                           ; BSR set to: 0
 10052                           ;terminal.c: 48: pData = &Data[0];
 10053                           
 10054                           ; BSR set to: 0
 10055  00375A  0EAC               	movlw	low _Data
 10056  00375C  6F78               	movwf	_pData& (0+255),b
 10057  00375E  0E00               	movlw	high _Data
 10058  003760  6F79               	movwf	(_pData+1)& (0+255),b
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;terminal.c: 49: pLen = &Data[DataLen - 1];
 10062  003762  0EFF               	movlw	255
 10063  003764  6FD8               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
 10064  003766  0EFF               	movlw	255
 10065  003768  6FD9               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
 10066  00376A  0E43               	movlw	low _DataLen
 10067  00376C  6EF6               	movwf	tblptrl,c
 10068  00376E                     	if	1	;There is more than 1 active tblptr byte
 10069  00376E  0E08               	movlw	high _DataLen
 10070  003770  6EF7               	movwf	tblptrh,c
 10071  003772                     	endif
 10072  003772                     	if	0	;There are less than 3 active tblptr bytes
 10073  003772                     	endif
 10074  003772  0008               	tblrd		*
 10075  003774  50F5               	movf	tablat,w,c
 10076  003776  6FDA               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
 10077  003778  6BDB               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
 10078  00377A  51D8               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
 10079  00377C  27DA               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
 10080  00377E  51D9               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
 10081  003780  23DB               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
 10082  003782  0EAC               	movlw	low _Data
 10083  003784  25DA               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
 10084  003786  6F76               	movwf	_pLen& (0+255),b
 10085  003788  0E00               	movlw	high _Data
 10086  00378A  21DB               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
 10087  00378C  6F77               	movwf	(_pLen+1)& (0+255),b
 10088                           
 10089                           ; BSR set to: 0
 10090                           ;terminal.c: 50: if (Received_Data == 's' || Received_Data == 'g'){
 10091  00378E  0E73               	movlw	115
 10092  003790  1984               	xorwf	_Received_Data& (0+255),w,b
 10093  003792  B4D8               	btfsc	status,2,c
 10094  003794  D004               	goto	u9110
 10095                           
 10096                           ; BSR set to: 0
 10097  003796  0E67               	movlw	103
 10098  003798  1984               	xorwf	_Received_Data& (0+255),w,b
 10099  00379A  A4D8               	btfss	status,2,c
 10100  00379C  D00A               	goto	l600
 10101  00379E                     u9110:
 10102                           
 10103                           ; BSR set to: 0
 10104                           ;terminal.c: 51: *pData = Received_Data;
 10105                           
 10106                           ; BSR set to: 0
 10107  00379E  C078  FFD9         	movff	_pData,fsr2l
 10108  0037A2  C079  FFDA         	movff	_pData+1,fsr2h
 10109  0037A6  C084  FFDF         	movff	_Received_Data,indf2
 10110                           
 10111                           ; BSR set to: 0
 10112                           ;terminal.c: 52: *pData++;
 10113  0037AA  4B78               	infsnz	_pData& (0+255),f,b
 10114  0037AC  2B79               	incf	(_pData+1)& (0+255),f,b
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;terminal.c: 53: RxSwitch = 1;
 10118  0037AE  0E01               	movlw	1
 10119  0037B0  D03D               	goto	L93
 10120  0037B2                     l600:
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;terminal.c: 55: else{
 10124                           ;terminal.c: 56: RxSwitch = 0;
 10125                           
 10126                           ; BSR set to: 0
 10127  0037B2  0E00               	movlw	0
 10128  0037B4  D03B               	goto	L93
 10129  0037B6                     
 10130                           ; BSR set to: 0
 10131                           ;terminal.c: 61: if (Received_Data == 'x'){
 10132                           
 10133                           ; BSR set to: 0
 10134  0037B6  0E78               	movlw	120
 10135  0037B8  1984               	xorwf	_Received_Data& (0+255),w,b
 10136  0037BA  A4D8               	btfss	status,2,c
 10137  0037BC  D7FA               	goto	l600
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;terminal.c: 62: *pData = Received_Data;
 10141  0037BE  C078  FFD9         	movff	_pData,fsr2l
 10142  0037C2  C079  FFDA         	movff	_pData+1,fsr2h
 10143  0037C6  C084  FFDF         	movff	_Received_Data,indf2
 10144  0037CA  D02D               	goto	l614
 10145  0037CC                     
 10146                           ; BSR set to: 0
 10147                           ;terminal.c: 72: if (Received_Data == 'G'){
 10148                           
 10149                           ; BSR set to: 0
 10150  0037CC  0E47               	movlw	71
 10151  0037CE  1984               	xorwf	_Received_Data& (0+255),w,b
 10152  0037D0  B4D8               	btfsc	status,2,c
 10153  0037D2  D009               	goto	l610
 10154  0037D4  D013               	goto	l609
 10155  0037D6                     
 10156                           ; BSR set to: 0
 10157                           ;terminal.c: 76: *pData = '\0';
 10158                           
 10159                           ; BSR set to: 0
 10160  0037D6  C078  FFD9         	movff	_pData,fsr2l
 10161  0037DA  C079  FFDA         	movff	_pData+1,fsr2h
 10162  0037DE  0E00               	movlw	0
 10163  0037E0  6EDF               	movwf	indf2,c
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;terminal.c: 77: pData++;
 10167  0037E2  4B78               	infsnz	_pData& (0+255),f,b
 10168  0037E4  2B79               	incf	(_pData+1)& (0+255),f,b
 10169  0037E6                     l610:
 10170                           
 10171                           ; BSR set to: 0
 10172                           
 10173                           ; BSR set to: 0
 10174  0037E6  5176               	movf	_pLen& (0+255),w,b
 10175  0037E8  5D78               	subwf	_pData& (0+255),w,b
 10176  0037EA  5177               	movf	(_pLen+1)& (0+255),w,b
 10177  0037EC  5979               	subwfb	(_pData+1)& (0+255),w,b
 10178  0037EE  A0D8               	btfss	status,0,c
 10179  0037F0  D7F2               	goto	l611
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;terminal.c: 78: }
 10183                           ;terminal.c: 80: RxSwitch = 3;
 10184                           
 10185                           ; BSR set to: 0
 10186  0037F2  0E03               	movlw	3
 10187  0037F4  6F83               	movwf	_RxSwitch& (0+255),b
 10188                           
 10189                           ;terminal.c: 81: Message_To_Translate = 1;
 10190  0037F6  0E01               	movlw	1
 10191  0037F8  6F82               	movwf	_Message_To_Translate& (0+255),b
 10192                           
 10193                           ;terminal.c: 82: }
 10194  0037FA  D025               	goto	l604
 10195  0037FC                     l609:
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;terminal.c: 83: else{
 10199                           ;terminal.c: 84: *pData = Received_Data;
 10200                           
 10201                           ; BSR set to: 0
 10202  0037FC  C078  FFD9         	movff	_pData,fsr2l
 10203  003800  C079  FFDA         	movff	_pData+1,fsr2h
 10204  003804  C084  FFDF         	movff	_Received_Data,indf2
 10205                           
 10206                           ; BSR set to: 0
 10207                           ;terminal.c: 85: if (pData > pLen){
 10208  003808  5178               	movf	_pData& (0+255),w,b
 10209  00380A  5D76               	subwf	_pLen& (0+255),w,b
 10210  00380C  5179               	movf	(_pData+1)& (0+255),w,b
 10211  00380E  5977               	subwfb	(_pLen+1)& (0+255),w,b
 10212  003810  B0D8               	btfsc	status,0,c
 10213  003812  D009               	goto	l614
 10214                           
 10215                           ; BSR set to: 0
 10216                           ;terminal.c: 86: printf("E#10\r\n");
 10217  003814  0E4E               	movlw	low STR_1
 10218  003816  6FCB               	movwf	printf@f& (0+255),b
 10219  003818  0E08               	movlw	high STR_1
 10220  00381A  6FCC               	movwf	(printf@f+1)& (0+255),b
 10221  00381C  ECFC  F019         	call	_printf	;wreg free
 10222                           
 10223                           ;terminal.c: 87: RxSwitch = 0;
 10224  003820  0E00               	movlw	0
 10225  003822  0100               	movlb	0	; () banked
 10226  003824  D003               	goto	L93
 10227  003826                     l614:
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;terminal.c: 89: else{
 10231                           ;terminal.c: 90: pData++;
 10232                           
 10233                           ; BSR set to: 0
 10234  003826  4B78               	infsnz	_pData& (0+255),f,b
 10235  003828  2B79               	incf	(_pData+1)& (0+255),f,b
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;terminal.c: 91: RxSwitch = 2;
 10239  00382A  0E02               	movlw	2
 10240  00382C                     L93:
 10241  00382C  6F83               	movwf	_RxSwitch& (0+255),b
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;terminal.c: 101: }
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;terminal.c: 100: break;
 10248                           
 10249                           ;terminal.c: 99: default :
 10250                           
 10251                           ; BSR set to: 0
 10252                           ;terminal.c: 97: break;
 10253                           
 10254                           ;terminal.c: 96: case 3 :
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;terminal.c: 92: }
 10258                           ;terminal.c: 93: }
 10259                           ;terminal.c: 94: break;
 10260                           
 10261                           ; BSR set to: 0
 10262  00382E  D00B               	goto	l604
 10263  003830                     l598:
 10264                           
 10265                           ; BSR set to: 0
 10266                           
 10267                           ; BSR set to: 0
 10268  003830  5183               	movf	_RxSwitch& (0+255),w,b
 10269                           
 10270                           ; Switch size 1, requested type "space"
 10271                           ; Number of cases is 4, Range of values is 0 to 3
 10272                           ; switch strategies available:
 10273                           ; Name         Instructions Cycles
 10274                           ; simple_byte           13     7 (average)
 10275                           ;	Chosen strategy is simple_byte
 10276  003832  0A00               	xorlw	0	; case 0
 10277  003834  B4D8               	btfsc	status,2,c
 10278  003836  D791               	goto	l599
 10279  003838  0A01               	xorlw	1	; case 1
 10280  00383A  B4D8               	btfsc	status,2,c
 10281  00383C  D7BC               	goto	l605
 10282  00383E  0A03               	xorlw	3	; case 2
 10283  003840  B4D8               	btfsc	status,2,c
 10284  003842  D7C4               	goto	l608
 10285  003844  0A01               	xorlw	1	; case 3
 10286  003846                     l604:
 10287                           
 10288                           ;terminal.c: 102: }
 10289                           ;terminal.c: 104: if (Message_To_Translate == 1){
 10290                           
 10291                           ; BSR set to: 0
 10292                           
 10293                           ; BSR set to: 0
 10294  003846  0100               	movlb	0	; () banked
 10295  003848  0582               	decf	_Message_To_Translate& (0+255),w,b
 10296  00384A  A4D8               	btfss	status,2,c
 10297  00384C  0012               	return	
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;terminal.c: 105: TranslateMessage();
 10301  00384E  EC3C  F016         	call	_TranslateMessage	;wreg free
 10302                           
 10303                           ;terminal.c: 106: Message_To_Translate = 0;
 10304  003852  0E00               	movlw	0
 10305  003854  0100               	movlb	0	; () banked
 10306  003856  6F82               	movwf	_Message_To_Translate& (0+255),b
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;terminal.c: 107: RxSwitch = 0;
 10310  003858  0E00               	movlw	0
 10311  00385A  6F83               	movwf	_RxSwitch& (0+255),b
 10312  00385C  0012               	return	
 10313  00385E                     __end_of_READxRECEIVEDxMESSAGE:
 10314                           	opt stack 0
 10315                           tblptru	equ	0xFF8
 10316                           tblptrh	equ	0xFF7
 10317                           tblptrl	equ	0xFF6
 10318                           tablat	equ	0xFF5
 10319                           prodh	equ	0xFF4
 10320                           prodl	equ	0xFF3
 10321                           intcon	equ	0xFF2
 10322                           postinc0	equ	0xFEE
 10323                           wreg	equ	0xFE8
 10324                           postinc1	equ	0xFE6
 10325                           postdec1	equ	0xFE5
 10326                           fsr1h	equ	0xFE2
 10327                           fsr1l	equ	0xFE1
 10328                           indf2	equ	0xFDF
 10329                           postinc2	equ	0xFDE
 10330                           postdec2	equ	0xFDD
 10331                           fsr2h	equ	0xFDA
 10332                           fsr2l	equ	0xFD9
 10333                           status	equ	0xFD8
 10334                           
 10335 ;; *************** function _TranslateMessage *****************
 10336 ;; Defined at:
 10337 ;;		line 125 in file "../terminal.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;		None
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;  Index           2   33[COMRAM] unsigned int 
 10342 ;;  Value           2   31[COMRAM] unsigned int 
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      void 
 10345 ;; Registers used:
 10346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10352 ;;      Params:         0       0       0       0       0       0       0       0       0
 10353 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10354 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10355 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10356 ;;Total ram usage:        4 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    5
 10359 ;; This function calls:
 10360 ;;		_GETxAPIxRW
 10361 ;;		_GETxAPIxVAL
 10362 ;;		_SENDxMESSAGE
 10363 ;;		_SETxAPIxVALxNoxRET
 10364 ;;		_atoi
 10365 ;;		_printf
 10366 ;; This function is called by:
 10367 ;;		_READxRECEIVEDxMESSAGE
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text20
 10372  002C78                     __ptext20:
 10373                           	opt stack 0
 10374  002C78                     _TranslateMessage:
 10375                           	opt stack 24
 10376                           
 10377                           ;terminal.c: 127: unsigned int Value, Index;
 10378                           ;terminal.c: 129: if(Data[0] == 's'){
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;incstack = 0
 10382  002C78  0E73               	movlw	115
 10383  002C7A  0100               	movlb	0	; () banked
 10384  002C7C  19AC               	xorwf	_Data& (0+255),w,b
 10385  002C7E  A4D8               	btfss	status,2,c
 10386  002C80  D063               	goto	l622
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;terminal.c: 131: pData = &Data[2];
 10390  002C82  0EAE               	movlw	low (_Data+2)
 10391  002C84  6F78               	movwf	_pData& (0+255),b
 10392  002C86  0E00               	movlw	high (_Data+2)
 10393  002C88  6F79               	movwf	(_pData+1)& (0+255),b
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;terminal.c: 132: Index = (unsigned int)atoi (pData);
 10397  002C8A  C078  F019         	movff	_pData,atoi@s
 10398  002C8E  C079  F01A         	movff	_pData+1,atoi@s+1
 10399  002C92  ECB0  F01D         	call	_atoi	;wreg free
 10400  002C96  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10401  002C9A  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10402                           
 10403                           ;terminal.c: 133: pData = &Data[5];
 10404  002C9E  0EB1               	movlw	low (_Data+5)
 10405  002CA0  0100               	movlb	0	; () banked
 10406  002CA2  6F78               	movwf	_pData& (0+255),b
 10407  002CA4  0E00               	movlw	high (_Data+5)
 10408  002CA6  6F79               	movwf	(_pData+1)& (0+255),b
 10409                           
 10410                           ;terminal.c: 134: Value = (unsigned int)atoi (pData);
 10411  002CA8  C078  F019         	movff	_pData,atoi@s
 10412  002CAC  C079  F01A         	movff	_pData+1,atoi@s+1
 10413  002CB0  ECB0  F01D         	call	_atoi	;wreg free
 10414  002CB4  C019  F020         	movff	?_atoi,TranslateMessage@Value
 10415  002CB8  C01A  F021         	movff	?_atoi+1,TranslateMessage@Value+1
 10416                           
 10417                           ;terminal.c: 136: if (GETxAPIxRW(Index) == 0){
 10418  002CBC  C022  F013         	movff	TranslateMessage@Index,GETxAPIxRW@index
 10419  002CC0  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxRW@index+1
 10420  002CC4  EC92  F021         	call	_GETxAPIxRW	;wreg free
 10421  002CC8  5013               	movf	?_GETxAPIxRW,w,c
 10422  002CCA  1014               	iorwf	?_GETxAPIxRW+1,w,c
 10423  002CCC  A4D8               	btfss	status,2,c
 10424  002CCE  D008               	goto	l623
 10425                           
 10426                           ;terminal.c: 137: printf("E#11\r\n");
 10427  002CD0  0E55               	movlw	low STR_2
 10428  002CD2  0100               	movlb	0	; () banked
 10429  002CD4  6FCB               	movwf	printf@f& (0+255),b
 10430  002CD6  0E08               	movlw	high STR_2
 10431  002CD8  6FCC               	movwf	(printf@f+1)& (0+255),b
 10432  002CDA  ECFC  F019         	call	_printf	;wreg free
 10433                           
 10434                           ;terminal.c: 138: }
 10435  002CDE  0012               	return	
 10436  002CE0                     l623:
 10437                           
 10438                           ;terminal.c: 139: else if (Index < 0xF){
 10439  002CE0  5023               	movf	TranslateMessage@Index+1,w,c
 10440  002CE2  E10C               	bnz	l8740
 10441  002CE4  0E0F               	movlw	15
 10442  002CE6  5C22               	subwf	TranslateMessage@Index,w,c
 10443  002CE8  B0D8               	btfsc	status,0,c
 10444  002CEA  D008               	goto	l625
 10445                           
 10446                           ;terminal.c: 140: printf("E#12\r\n");
 10447  002CEC  0E5C               	movlw	low STR_3
 10448  002CEE  0100               	movlb	0	; () banked
 10449  002CF0  6FCB               	movwf	printf@f& (0+255),b
 10450  002CF2  0E08               	movlw	high STR_3
 10451  002CF4  6FCC               	movwf	(printf@f+1)& (0+255),b
 10452  002CF6  ECFC  F019         	call	_printf	;wreg free
 10453                           
 10454                           ;terminal.c: 141: }
 10455  002CFA  0012               	return	
 10456  002CFC                     l625:
 10457  002CFC                     l8740:
 10458                           
 10459                           ;terminal.c: 142: else if (Index > 89){
 10460  002CFC  5023               	movf	TranslateMessage@Index+1,w,c
 10461  002CFE  E104               	bnz	u8200
 10462  002D00  0E5A               	movlw	90
 10463  002D02  5C22               	subwf	TranslateMessage@Index,w,c
 10464  002D04  A0D8               	btfss	status,0,c
 10465  002D06  D008               	goto	l627
 10466  002D08                     u8200:
 10467                           
 10468                           ;terminal.c: 143: printf("E#13\r\n");
 10469  002D08  0E63               	movlw	low STR_4
 10470  002D0A  0100               	movlb	0	; () banked
 10471  002D0C  6FCB               	movwf	printf@f& (0+255),b
 10472  002D0E  0E08               	movlw	high STR_4
 10473  002D10  6FCC               	movwf	(printf@f+1)& (0+255),b
 10474  002D12  ECFC  F019         	call	_printf	;wreg free
 10475                           
 10476                           ;terminal.c: 144: }
 10477  002D16  0012               	return	
 10478  002D18                     l627:
 10479                           
 10480                           ;terminal.c: 145: else if (Value > 0xFFFE){
 10481  002D18  2820               	incf	TranslateMessage@Value,w,c
 10482  002D1A  E10B               	bnz	l8748
 10483  002D1C  2821               	incf	TranslateMessage@Value+1,w,c
 10484  002D1E  A4D8               	btfss	status,2,c
 10485  002D20  D008               	goto	l629
 10486                           
 10487                           ;terminal.c: 146: printf("E#14\r\n");
 10488  002D22  0E6A               	movlw	low STR_5
 10489  002D24  0100               	movlb	0	; () banked
 10490  002D26  6FCB               	movwf	printf@f& (0+255),b
 10491  002D28  0E08               	movlw	high STR_5
 10492  002D2A  6FCC               	movwf	(printf@f+1)& (0+255),b
 10493  002D2C  ECFC  F019         	call	_printf	;wreg free
 10494                           
 10495                           ;terminal.c: 147: }
 10496  002D30  0012               	return	
 10497  002D32                     l629:
 10498  002D32                     l8748:
 10499                           
 10500                           ;terminal.c: 148: else{
 10501                           ;terminal.c: 149: SETxAPIxVALxNoxRET(Index, Value);
 10502  002D32  C022  F015         	movff	TranslateMessage@Index,SETxAPIxVALxNoxRET@index
 10503  002D36  C023  F016         	movff	TranslateMessage@Index+1,SETxAPIxVALxNoxRET@index+1
 10504  002D3A  C020  F017         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 10505  002D3E  C021  F018         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 10506  002D42  ECBC  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
 10507                           
 10508                           ;terminal.c: 150: }
 10509                           ;terminal.c: 151: }
 10510  002D46  0012               	return	
 10511  002D48                     l622:
 10512                           
 10513                           ;terminal.c: 153: else if (Data[0] == 'g'){
 10514  002D48  0E67               	movlw	103
 10515  002D4A  0100               	movlb	0	; () banked
 10516  002D4C  19AC               	xorwf	_Data& (0+255),w,b
 10517  002D4E  A4D8               	btfss	status,2,c
 10518  002D50  0012               	return	
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;terminal.c: 155: pData = &Data[2];
 10522  002D52  0EAE               	movlw	low (_Data+2)
 10523  002D54  6F78               	movwf	_pData& (0+255),b
 10524  002D56  0E00               	movlw	high (_Data+2)
 10525  002D58  6F79               	movwf	(_pData+1)& (0+255),b
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;terminal.c: 156: Index = (unsigned int)atoi (pData);
 10529  002D5A  C078  F019         	movff	_pData,atoi@s
 10530  002D5E  C079  F01A         	movff	_pData+1,atoi@s+1
 10531  002D62  ECB0  F01D         	call	_atoi	;wreg free
 10532  002D66  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10533  002D6A  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10534                           
 10535                           ;terminal.c: 158: if (Index < 0xF){
 10536  002D6E  5023               	movf	TranslateMessage@Index+1,w,c
 10537  002D70  E10C               	bnz	l8760
 10538  002D72  0E0F               	movlw	15
 10539  002D74  5C22               	subwf	TranslateMessage@Index,w,c
 10540  002D76  B0D8               	btfsc	status,0,c
 10541  002D78  D008               	goto	l633
 10542                           
 10543                           ;terminal.c: 159: printf("E#12\r\n");
 10544  002D7A  0E5C               	movlw	low STR_3
 10545  002D7C  0100               	movlb	0	; () banked
 10546  002D7E  6FCB               	movwf	printf@f& (0+255),b
 10547  002D80  0E08               	movlw	high STR_3
 10548  002D82  6FCC               	movwf	(printf@f+1)& (0+255),b
 10549  002D84  ECFC  F019         	call	_printf	;wreg free
 10550                           
 10551                           ;terminal.c: 160: }
 10552  002D88  0012               	return	
 10553  002D8A                     l633:
 10554  002D8A                     l8760:
 10555                           
 10556                           ;terminal.c: 161: else if (Index > 89){
 10557  002D8A  5023               	movf	TranslateMessage@Index+1,w,c
 10558  002D8C  E104               	bnz	u8240
 10559  002D8E  0E5A               	movlw	90
 10560  002D90  5C22               	subwf	TranslateMessage@Index,w,c
 10561  002D92  A0D8               	btfss	status,0,c
 10562  002D94  D008               	goto	l635
 10563  002D96                     u8240:
 10564                           
 10565                           ;terminal.c: 162: printf("E#13\r\n");
 10566  002D96  0E63               	movlw	low STR_4
 10567  002D98  0100               	movlb	0	; () banked
 10568  002D9A  6FCB               	movwf	printf@f& (0+255),b
 10569  002D9C  0E08               	movlw	high STR_4
 10570  002D9E  6FCC               	movwf	(printf@f+1)& (0+255),b
 10571  002DA0  ECFC  F019         	call	_printf	;wreg free
 10572                           
 10573                           ;terminal.c: 163: }
 10574  002DA4  0012               	return	
 10575  002DA6                     l635:
 10576                           
 10577                           ;terminal.c: 164: else{
 10578                           ;terminal.c: 165: Value = GETxAPIxVAL(Index);
 10579  002DA6  C022  F013         	movff	TranslateMessage@Index,GETxAPIxVAL@index
 10580  002DAA  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxVAL@index+1
 10581  002DAE  EC84  F021         	call	_GETxAPIxVAL	;wreg free
 10582  002DB2  C013  F020         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10583  002DB6  C014  F021         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10584                           
 10585                           ;terminal.c: 166: SENDxMESSAGE(Index, Value);
 10586  002DBA  C022  F013         	movff	TranslateMessage@Index,SENDxMESSAGE@index
 10587  002DBE  C023  F014         	movff	TranslateMessage@Index+1,SENDxMESSAGE@index+1
 10588  002DC2  C020  F015         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10589  002DC6  C021  F016         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10590  002DCA  EC31  F014         	call	_SENDxMESSAGE	;wreg free
 10591  002DCE  0012               	return	
 10592  002DD0                     __end_of_TranslateMessage:
 10593                           	opt stack 0
 10594                           tblptru	equ	0xFF8
 10595                           tblptrh	equ	0xFF7
 10596                           tblptrl	equ	0xFF6
 10597                           tablat	equ	0xFF5
 10598                           prodh	equ	0xFF4
 10599                           prodl	equ	0xFF3
 10600                           intcon	equ	0xFF2
 10601                           postinc0	equ	0xFEE
 10602                           wreg	equ	0xFE8
 10603                           postinc1	equ	0xFE6
 10604                           postdec1	equ	0xFE5
 10605                           fsr1h	equ	0xFE2
 10606                           fsr1l	equ	0xFE1
 10607                           indf2	equ	0xFDF
 10608                           postinc2	equ	0xFDE
 10609                           postdec2	equ	0xFDD
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function _atoi *****************
 10615 ;; Defined at:
 10616 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atoi.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  s               2   24[COMRAM] PTR const unsigned char 
 10619 ;;		 -> NULL(0), Data(10), 
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;  a               2   29[COMRAM] int 
 10622 ;;  sign            1   28[COMRAM] unsigned char 
 10623 ;; Return value:  Size  Location     Type
 10624 ;;                  2   24[COMRAM] int 
 10625 ;; Registers used:
 10626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10627 ;; Tracked objects:
 10628 ;;		On entry : 0/0
 10629 ;;		On exit  : 0/0
 10630 ;;		Unchanged: 0/0
 10631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10632 ;;      Params:         2       0       0       0       0       0       0       0       0
 10633 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10634 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10635 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10636 ;;Total ram usage:        7 bytes
 10637 ;; Hardware stack levels used:    1
 10638 ;; Hardware stack levels required when called:    4
 10639 ;; This function calls:
 10640 ;;		___wmul
 10641 ;;		_isdigit
 10642 ;; This function is called by:
 10643 ;;		_TranslateMessage
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           	psect	text21
 10648  003B60                     __ptext21:
 10649                           	opt stack 0
 10650  003B60                     _atoi:
 10651                           	opt stack 24
 10652                           
 10653                           ;incstack = 0
 10654  003B60  D002               	goto	l1448
 10655  003B62  4A19               	infsnz	atoi@s,f,c
 10656  003B64  2A1A               	incf	atoi@s+1,f,c
 10657  003B66                     l1448:
 10658  003B66  C019  FFD9         	movff	atoi@s,fsr2l
 10659  003B6A  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10660  003B6E  0E20               	movlw	32
 10661  003B70  18DE               	xorwf	postinc2,w,c
 10662  003B72  B4D8               	btfsc	status,2,c
 10663  003B74  D7F6               	goto	l1449
 10664  003B76  C019  FFD9         	movff	atoi@s,fsr2l
 10665  003B7A  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10666  003B7E  0E09               	movlw	9
 10667  003B80  18DE               	xorwf	postinc2,w,c
 10668  003B82  B4D8               	btfsc	status,2,c
 10669  003B84  D7EE               	goto	l1449
 10670  003B86  0E00               	movlw	0
 10671  003B88  6E1F               	movwf	atoi@a+1,c
 10672  003B8A  0E00               	movlw	0
 10673  003B8C  6E1E               	movwf	atoi@a,c
 10674  003B8E  0E00               	movlw	0
 10675  003B90  6E1D               	movwf	atoi@sign,c
 10676  003B92  C019  FFD9         	movff	atoi@s,fsr2l
 10677  003B96  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10678  003B9A  0E2D               	movlw	45
 10679  003B9C  18DE               	xorwf	postinc2,w,c
 10680  003B9E  A4D8               	btfss	status,2,c
 10681  003BA0  D002               	goto	l1451
 10682  003BA2  2A1D               	incf	atoi@sign,f,c
 10683  003BA4  D024               	goto	l8120
 10684  003BA6                     l1451:
 10685  003BA6  C019  FFD9         	movff	atoi@s,fsr2l
 10686  003BAA  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10687  003BAE  0E2B               	movlw	43
 10688  003BB0  18DE               	xorwf	postinc2,w,c
 10689  003BB2  A4D8               	btfss	status,2,c
 10690  003BB4  D01E               	goto	l1454
 10691  003BB6  D01B               	goto	l8120
 10692  003BB8  C01E  F013         	movff	atoi@a,___wmul@multiplier
 10693  003BBC  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
 10694  003BC0  0E00               	movlw	0
 10695  003BC2  6E16               	movwf	___wmul@multiplicand+1,c
 10696  003BC4  0E0A               	movlw	10
 10697  003BC6  6E15               	movwf	___wmul@multiplicand,c
 10698  003BC8  EC52  F021         	call	___wmul	;wreg free
 10699  003BCC  C019  FFD9         	movff	atoi@s,fsr2l
 10700  003BD0  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10701  003BD4  50DF               	movf	indf2,w,c
 10702  003BD6  6E1B               	movwf	??_atoi& (0+255),c
 10703  003BD8  6A1C               	clrf	(??_atoi+1)& (0+255),c
 10704  003BDA  5013               	movf	?___wmul,w,c
 10705  003BDC  261B               	addwf	??_atoi,f,c
 10706  003BDE  5014               	movf	?___wmul+1,w,c
 10707  003BE0  221C               	addwfc	??_atoi+1,f,c
 10708  003BE2  0ED0               	movlw	208
 10709  003BE4  241B               	addwf	??_atoi,w,c
 10710  003BE6  6E1E               	movwf	atoi@a,c
 10711  003BE8  0EFF               	movlw	255
 10712  003BEA  201C               	addwfc	??_atoi+1,w,c
 10713  003BEC  6E1F               	movwf	atoi@a+1,c
 10714  003BEE                     l8120:
 10715  003BEE  4A19               	infsnz	atoi@s,f,c
 10716  003BF0  2A1A               	incf	atoi@s+1,f,c
 10717  003BF2                     l1454:
 10718  003BF2  C019  FFD9         	movff	atoi@s,fsr2l
 10719  003BF6  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10720  003BFA  50DF               	movf	indf2,w,c
 10721  003BFC  EC75  F021         	call	_isdigit
 10722  003C00  B0D8               	btfsc	status,0,c
 10723  003C02  D7DA               	goto	l1455
 10724  003C04  501D               	movf	atoi@sign,w,c
 10725  003C06  B4D8               	btfsc	status,2,c
 10726  003C08  D00D               	goto	l1457
 10727  003C0A  C01E  F01B         	movff	atoi@a,??_atoi
 10728  003C0E  C01F  F01C         	movff	atoi@a+1,??_atoi+1
 10729  003C12  1E1B               	comf	??_atoi,f,c
 10730  003C14  1E1C               	comf	??_atoi+1,f,c
 10731  003C16  4A1B               	infsnz	??_atoi,f,c
 10732  003C18  2A1C               	incf	??_atoi+1,f,c
 10733  003C1A  C01B  F019         	movff	??_atoi,?_atoi
 10734  003C1E  C01C  F01A         	movff	??_atoi+1,?_atoi+1
 10735  003C22  0012               	return	
 10736  003C24                     l1457:
 10737  003C24  C01E  F019         	movff	atoi@a,?_atoi
 10738  003C28  C01F  F01A         	movff	atoi@a+1,?_atoi+1
 10739  003C2C  0012               	return		;funcret
 10740  003C2E                     __end_of_atoi:
 10741                           	opt stack 0
 10742                           tblptru	equ	0xFF8
 10743                           tblptrh	equ	0xFF7
 10744                           tblptrl	equ	0xFF6
 10745                           tablat	equ	0xFF5
 10746                           prodh	equ	0xFF4
 10747                           prodl	equ	0xFF3
 10748                           intcon	equ	0xFF2
 10749                           postinc0	equ	0xFEE
 10750                           wreg	equ	0xFE8
 10751                           postinc1	equ	0xFE6
 10752                           postdec1	equ	0xFE5
 10753                           fsr1h	equ	0xFE2
 10754                           fsr1l	equ	0xFE1
 10755                           indf2	equ	0xFDF
 10756                           postinc2	equ	0xFDE
 10757                           postdec2	equ	0xFDD
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function _isdigit *****************
 10763 ;; Defined at:
 10764 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  c               1    wreg     unsigned char 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;  c               1   20[COMRAM] unsigned char 
 10769 ;; Return value:  Size  Location     Type
 10770 ;;		None               void
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10778 ;;      Params:         0       0       0       0       0       0       0       0       0
 10779 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10780 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10781 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10782 ;;Total ram usage:        3 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:    3
 10785 ;; This function calls:
 10786 ;;		Nothing
 10787 ;; This function is called by:
 10788 ;;		_atoi
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text22
 10793  0042EA                     __ptext22:
 10794                           	opt stack 0
 10795  0042EA                     _isdigit:
 10796                           	opt stack 24
 10797                           
 10798                           ;incstack = 0
 10799                           ;isdigit@c stored from wreg
 10800  0042EA  6E15               	movwf	isdigit@c,c
 10801  0042EC  0E00               	movlw	0
 10802  0042EE  6E14               	movwf	_isdigit$1833,c
 10803  0042F0  0E3A               	movlw	58
 10804  0042F2  6015               	cpfslt	isdigit@c,c
 10805  0042F4  D005               	goto	l1629
 10806  0042F6  0E2F               	movlw	47
 10807  0042F8  6415               	cpfsgt	isdigit@c,c
 10808  0042FA  D002               	goto	l1629
 10809  0042FC  0E01               	movlw	1
 10810  0042FE  6E14               	movwf	_isdigit$1833,c
 10811  004300                     l1629:
 10812  004300  C014  F013         	movff	_isdigit$1833,??_isdigit
 10813  004304  3013               	rrcf	??_isdigit,w,c
 10814  004306  0012               	return	
 10815  004308                     __end_of_isdigit:
 10816                           	opt stack 0
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           postinc0	equ	0xFEE
 10825                           wreg	equ	0xFE8
 10826                           postinc1	equ	0xFE6
 10827                           postdec1	equ	0xFE5
 10828                           fsr1h	equ	0xFE2
 10829                           fsr1l	equ	0xFE1
 10830                           indf2	equ	0xFDF
 10831                           postinc2	equ	0xFDE
 10832                           postdec2	equ	0xFDD
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function ___wmul *****************
 10838 ;; Defined at:
 10839 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  multiplier      2   18[COMRAM] unsigned int 
 10842 ;;  multiplicand    2   20[COMRAM] unsigned int 
 10843 ;; Auto vars:     Size  Location     Type
 10844 ;;  product         2   22[COMRAM] unsigned int 
 10845 ;; Return value:  Size  Location     Type
 10846 ;;                  2   18[COMRAM] unsigned int 
 10847 ;; Registers used:
 10848 ;;		wreg, status,2, status,0, prodl, prodh
 10849 ;; Tracked objects:
 10850 ;;		On entry : 0/0
 10851 ;;		On exit  : 0/0
 10852 ;;		Unchanged: 0/0
 10853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10854 ;;      Params:         4       0       0       0       0       0       0       0       0
 10855 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10856 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10857 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10858 ;;Total ram usage:        6 bytes
 10859 ;; Hardware stack levels used:    1
 10860 ;; Hardware stack levels required when called:    3
 10861 ;; This function calls:
 10862 ;;		Nothing
 10863 ;; This function is called by:
 10864 ;;		_atoi
 10865 ;; This function uses a non-reentrant model
 10866 ;;
 10867                           
 10868                           	psect	text23
 10869  0042A4                     __ptext23:
 10870                           	opt stack 0
 10871  0042A4                     ___wmul:
 10872                           	opt stack 24
 10873                           
 10874                           ;incstack = 0
 10875  0042A4  5013               	movf	___wmul@multiplier,w,c
 10876  0042A6  0215               	mulwf	___wmul@multiplicand,c
 10877  0042A8  CFF3 F017          	movff	prodl,___wmul@product
 10878  0042AC  CFF4 F018          	movff	prodh,___wmul@product+1
 10879  0042B0  5013               	movf	___wmul@multiplier,w,c
 10880  0042B2  0216               	mulwf	___wmul@multiplicand+1,c
 10881  0042B4  50F3               	movf	prodl,w,c
 10882  0042B6  2618               	addwf	___wmul@product+1,f,c
 10883  0042B8  5014               	movf	___wmul@multiplier+1,w,c
 10884  0042BA  0215               	mulwf	___wmul@multiplicand,c
 10885  0042BC  50F3               	movf	prodl,w,c
 10886  0042BE  2618               	addwf	___wmul@product+1,f,c
 10887  0042C0  C017  F013         	movff	___wmul@product,?___wmul
 10888  0042C4  C018  F014         	movff	___wmul@product+1,?___wmul+1
 10889  0042C8  0012               	return	
 10890  0042CA                     __end_of___wmul:
 10891                           	opt stack 0
 10892                           tblptru	equ	0xFF8
 10893                           tblptrh	equ	0xFF7
 10894                           tblptrl	equ	0xFF6
 10895                           tablat	equ	0xFF5
 10896                           prodh	equ	0xFF4
 10897                           prodl	equ	0xFF3
 10898                           intcon	equ	0xFF2
 10899                           postinc0	equ	0xFEE
 10900                           wreg	equ	0xFE8
 10901                           postinc1	equ	0xFE6
 10902                           postdec1	equ	0xFE5
 10903                           fsr1h	equ	0xFE2
 10904                           fsr1l	equ	0xFE1
 10905                           indf2	equ	0xFDF
 10906                           postinc2	equ	0xFDE
 10907                           postdec2	equ	0xFDD
 10908                           fsr2h	equ	0xFDA
 10909                           fsr2l	equ	0xFD9
 10910                           status	equ	0xFD8
 10911                           
 10912 ;; *************** function _SETxAPIxVALxNoxRET *****************
 10913 ;; Defined at:
 10914 ;;		line 220 in file "../api.c"
 10915 ;; Parameters:    Size  Location     Type
 10916 ;;  index           2   20[COMRAM] unsigned int 
 10917 ;;  value           2   22[COMRAM] unsigned int 
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;		None
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  1    wreg      void 
 10922 ;; Registers used:
 10923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10929 ;;      Params:         4       0       0       0       0       0       0       0       0
 10930 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10931 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10932 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10933 ;;Total ram usage:        6 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; Hardware stack levels required when called:    3
 10936 ;; This function calls:
 10937 ;;		Nothing
 10938 ;; This function is called by:
 10939 ;;		_Update_StateMchn
 10940 ;;		_TranslateMessage
 10941 ;; This function uses a non-reentrant model
 10942 ;;
 10943                           
 10944                           	psect	text24
 10945  004178                     __ptext24:
 10946                           	opt stack 0
 10947  004178                     _SETxAPIxVALxNoxRET:
 10948                           	opt stack 26
 10949                           
 10950                           ;api.c: 221: if(API[index] != value){
 10951                           
 10952                           ;incstack = 0
 10953  004178  90D8               	bcf	status,0,c
 10954  00417A  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 10955  00417C  6ED9               	movwf	fsr2l,c
 10956  00417E  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 10957  004180  6EDA               	movwf	fsr2h,c
 10958  004182  0E00               	movlw	low _API
 10959  004184  26D9               	addwf	fsr2l,f,c
 10960  004186  0E01               	movlw	high _API
 10961  004188  22DA               	addwfc	fsr2h,f,c
 10962  00418A  5017               	movf	SETxAPIxVALxNoxRET@value,w,c
 10963  00418C  18DE               	xorwf	postinc2,w,c
 10964  00418E  E104               	bnz	u6530
 10965  004190  5018               	movf	SETxAPIxVALxNoxRET@value+1,w,c
 10966  004192  18DE               	xorwf	postinc2,w,c
 10967  004194  B4D8               	btfsc	status,2,c
 10968  004196  0012               	return	
 10969  004198                     u6530:
 10970                           
 10971                           ;api.c: 222: API[index] = value;
 10972  004198  90D8               	bcf	status,0,c
 10973  00419A  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 10974  00419C  6ED9               	movwf	fsr2l,c
 10975  00419E  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 10976  0041A0  6EDA               	movwf	fsr2h,c
 10977  0041A2  0E00               	movlw	low _API
 10978  0041A4  26D9               	addwf	fsr2l,f,c
 10979  0041A6  0E01               	movlw	high _API
 10980  0041A8  22DA               	addwfc	fsr2h,f,c
 10981  0041AA  C017  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 10982  0041AE  C018  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 10983  0041B2  0012               	return	
 10984  0041B4                     __end_of_SETxAPIxVALxNoxRET:
 10985                           	opt stack 0
 10986                           tblptru	equ	0xFF8
 10987                           tblptrh	equ	0xFF7
 10988                           tblptrl	equ	0xFF6
 10989                           tablat	equ	0xFF5
 10990                           prodh	equ	0xFF4
 10991                           prodl	equ	0xFF3
 10992                           intcon	equ	0xFF2
 10993                           postinc0	equ	0xFEE
 10994                           wreg	equ	0xFE8
 10995                           postinc1	equ	0xFE6
 10996                           postdec1	equ	0xFE5
 10997                           fsr1h	equ	0xFE2
 10998                           fsr1l	equ	0xFE1
 10999                           indf2	equ	0xFDF
 11000                           postinc2	equ	0xFDE
 11001                           postdec2	equ	0xFDD
 11002                           fsr2h	equ	0xFDA
 11003                           fsr2l	equ	0xFD9
 11004                           status	equ	0xFD8
 11005                           
 11006 ;; *************** function _GETxAPIxVAL *****************
 11007 ;; Defined at:
 11008 ;;		line 226 in file "../api.c"
 11009 ;; Parameters:    Size  Location     Type
 11010 ;;  index           2   18[COMRAM] unsigned int 
 11011 ;; Auto vars:     Size  Location     Type
 11012 ;;		None
 11013 ;; Return value:  Size  Location     Type
 11014 ;;                  2   18[COMRAM] unsigned int 
 11015 ;; Registers used:
 11016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11017 ;; Tracked objects:
 11018 ;;		On entry : 0/0
 11019 ;;		On exit  : 0/0
 11020 ;;		Unchanged: 0/0
 11021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11022 ;;      Params:         2       0       0       0       0       0       0       0       0
 11023 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11024 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11025 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11026 ;;Total ram usage:        2 bytes
 11027 ;; Hardware stack levels used:    1
 11028 ;; Hardware stack levels required when called:    3
 11029 ;; This function calls:
 11030 ;;		Nothing
 11031 ;; This function is called by:
 11032 ;;		_Update_StateMchn
 11033 ;;		_Train_Path
 11034 ;;		_TranslateMessage
 11035 ;;		_Debounce_Inputs
 11036 ;;		_Junction
 11037 ;;		_Train_Move_Left_Start
 11038 ;;		_Right_Mountain_From_The_Right
 11039 ;;		_Left_Mountain_From_The_Right
 11040 ;;		_Train_Move_Left_Brake
 11041 ;;		_Train_Move_Right_Start
 11042 ;;		_Left_Mountain_From_The_Left
 11043 ;;		_Right_Mountain_From_The_Left
 11044 ;;		_Train_Move_Right_Brake
 11045 ;;		_SETxPWM
 11046 ;;		_INCRxAPIxVAL
 11047 ;;		_DECRxAPIxVAL
 11048 ;; This function uses a non-reentrant model
 11049 ;;
 11050                           
 11051                           	psect	text25
 11052  004308                     __ptext25:
 11053                           	opt stack 0
 11054  004308                     _GETxAPIxVAL:
 11055                           	opt stack 23
 11056                           
 11057                           ;api.c: 227: return API[index];
 11058                           
 11059                           ;incstack = 0
 11060  004308  90D8               	bcf	status,0,c
 11061  00430A  3413               	rlcf	GETxAPIxVAL@index,w,c
 11062  00430C  6ED9               	movwf	fsr2l,c
 11063  00430E  3414               	rlcf	GETxAPIxVAL@index+1,w,c
 11064  004310  6EDA               	movwf	fsr2h,c
 11065  004312  0E00               	movlw	low _API
 11066  004314  26D9               	addwf	fsr2l,f,c
 11067  004316  0E01               	movlw	high _API
 11068  004318  22DA               	addwfc	fsr2h,f,c
 11069  00431A  CFDE F013          	movff	postinc2,?_GETxAPIxVAL
 11070  00431E  CFDD F014          	movff	postdec2,?_GETxAPIxVAL+1
 11071  004322  0012               	return	
 11072  004324                     __end_of_GETxAPIxVAL:
 11073                           	opt stack 0
 11074                           tblptru	equ	0xFF8
 11075                           tblptrh	equ	0xFF7
 11076                           tblptrl	equ	0xFF6
 11077                           tablat	equ	0xFF5
 11078                           prodh	equ	0xFF4
 11079                           prodl	equ	0xFF3
 11080                           intcon	equ	0xFF2
 11081                           postinc0	equ	0xFEE
 11082                           wreg	equ	0xFE8
 11083                           postinc1	equ	0xFE6
 11084                           postdec1	equ	0xFE5
 11085                           fsr1h	equ	0xFE2
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function _GETxAPIxRW *****************
 11095 ;; Defined at:
 11096 ;;		line 209 in file "../api.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  index           2   18[COMRAM] unsigned int 
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  2   18[COMRAM] unsigned int 
 11103 ;; Registers used:
 11104 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11110 ;;      Params:         2       0       0       0       0       0       0       0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11113 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11114 ;;Total ram usage:        2 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    3
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_TranslateMessage
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text26
 11125  004324                     __ptext26:
 11126                           	opt stack 0
 11127  004324                     _GETxAPIxRW:
 11128                           	opt stack 25
 11129                           
 11130                           ;api.c: 210: return API_RW[index];
 11131                           
 11132                           ;incstack = 0
 11133  004324  90D8               	bcf	status,0,c
 11134  004326  3413               	rlcf	GETxAPIxRW@index,w,c
 11135  004328  6ED9               	movwf	fsr2l,c
 11136  00432A  3414               	rlcf	GETxAPIxRW@index+1,w,c
 11137  00432C  6EDA               	movwf	fsr2h,c
 11138  00432E  0E00               	movlw	low _API_RW
 11139  004330  26D9               	addwf	fsr2l,f,c
 11140  004332  0E02               	movlw	high _API_RW
 11141  004334  22DA               	addwfc	fsr2h,f,c
 11142  004336  CFDE F013          	movff	postinc2,?_GETxAPIxRW
 11143  00433A  CFDD F014          	movff	postdec2,?_GETxAPIxRW+1
 11144  00433E  0012               	return	
 11145  004340                     __end_of_GETxAPIxRW:
 11146                           	opt stack 0
 11147                           tblptru	equ	0xFF8
 11148                           tblptrh	equ	0xFF7
 11149                           tblptrl	equ	0xFF6
 11150                           tablat	equ	0xFF5
 11151                           prodh	equ	0xFF4
 11152                           prodl	equ	0xFF3
 11153                           intcon	equ	0xFF2
 11154                           postinc0	equ	0xFEE
 11155                           wreg	equ	0xFE8
 11156                           postinc1	equ	0xFE6
 11157                           postdec1	equ	0xFE5
 11158                           fsr1h	equ	0xFE2
 11159                           fsr1l	equ	0xFE1
 11160                           indf2	equ	0xFDF
 11161                           postinc2	equ	0xFDE
 11162                           postdec2	equ	0xFDD
 11163                           fsr2h	equ	0xFDA
 11164                           fsr2l	equ	0xFD9
 11165                           status	equ	0xFD8
 11166                           
 11167 ;; *************** function _EUSART1_Read *****************
 11168 ;; Defined at:
 11169 ;;		line 143 in file "../eusart1.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;		None
 11172 ;; Auto vars:     Size  Location     Type
 11173 ;;  readValue       1   18[COMRAM] unsigned char 
 11174 ;; Return value:  Size  Location     Type
 11175 ;;                  1    wreg      unsigned char 
 11176 ;; Registers used:
 11177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11178 ;; Tracked objects:
 11179 ;;		On entry : 0/0
 11180 ;;		On exit  : 0/0
 11181 ;;		Unchanged: 0/0
 11182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11183 ;;      Params:         0       0       0       0       0       0       0       0       0
 11184 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11185 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11186 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11187 ;;Total ram usage:        1 bytes
 11188 ;; Hardware stack levels used:    1
 11189 ;; Hardware stack levels required when called:    3
 11190 ;; This function calls:
 11191 ;;		Nothing
 11192 ;; This function is called by:
 11193 ;;		_READxRECEIVEDxMESSAGE
 11194 ;; This function uses a non-reentrant model
 11195 ;;
 11196                           
 11197                           	psect	text27
 11198  0041EE                     __ptext27:
 11199                           	opt stack 0
 11200  0041EE                     _EUSART1_Read:
 11201                           	opt stack 26
 11202                           
 11203                           ;eusart1.c: 144: uint8_t readValue = 0;
 11204                           
 11205                           ;incstack = 0
 11206  0041EE  0E00               	movlw	0
 11207  0041F0  6E13               	movwf	EUSART1_Read@readValue,c
 11208  0041F2  503F               	movf	_eusart1RxCount,w,c	;volatile
 11209  0041F4  B4D8               	btfsc	status,2,c
 11210  0041F6  D7FD               	goto	l517
 11211                           
 11212                           ;eusart1.c: 147: }
 11213                           ;eusart1.c: 149: PIE1bits.RC1IE = 0;
 11214  0041F8  9A9D               	bcf	3997,5,c	;volatile
 11215                           
 11216                           ;eusart1.c: 151: readValue = eusart1RxBuffer[eusart1RxTail++];
 11217  0041FA  5040               	movf	_eusart1RxTail,w,c
 11218  0041FC  0D01               	mullw	1
 11219  0041FE  0E00               	movlw	low _eusart1RxBuffer
 11220  004200  24F3               	addwf	prodl,w,c
 11221  004202  6ED9               	movwf	fsr2l,c
 11222  004204  0E04               	movlw	high _eusart1RxBuffer
 11223  004206  20F4               	addwfc	prodh,w,c
 11224  004208  6EDA               	movwf	fsr2h,c
 11225  00420A  50DF               	movf	indf2,w,c
 11226  00420C  6E13               	movwf	EUSART1_Read@readValue,c
 11227  00420E  2A40               	incf	_eusart1RxTail,f,c
 11228                           
 11229                           ;eusart1.c: 152: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11230  004210  0E7D               	movlw	125
 11231  004212  6440               	cpfsgt	_eusart1RxTail,c
 11232  004214  D002               	goto	l519
 11233                           
 11234                           ;eusart1.c: 153: eusart1RxTail = 0;
 11235  004216  0E00               	movlw	0
 11236  004218  6E40               	movwf	_eusart1RxTail,c
 11237  00421A                     l519:
 11238                           
 11239                           ;eusart1.c: 154: }
 11240                           ;eusart1.c: 155: eusart1RxCount--;
 11241  00421A  063F               	decf	_eusart1RxCount,f,c	;volatile
 11242                           
 11243                           ;eusart1.c: 156: PIE1bits.RC1IE = 1;
 11244  00421C  8A9D               	bsf	3997,5,c	;volatile
 11245                           
 11246                           ;eusart1.c: 158: return readValue;
 11247  00421E  5013               	movf	EUSART1_Read@readValue,w,c
 11248  004220  0012               	return	
 11249  004222                     __end_of_EUSART1_Read:
 11250                           	opt stack 0
 11251                           tblptru	equ	0xFF8
 11252                           tblptrh	equ	0xFF7
 11253                           tblptrl	equ	0xFF6
 11254                           tablat	equ	0xFF5
 11255                           prodh	equ	0xFF4
 11256                           prodl	equ	0xFF3
 11257                           intcon	equ	0xFF2
 11258                           postinc0	equ	0xFEE
 11259                           wreg	equ	0xFE8
 11260                           postinc1	equ	0xFE6
 11261                           postdec1	equ	0xFE5
 11262                           fsr1h	equ	0xFE2
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271 ;; *************** function _Init_Timers *****************
 11272 ;; Defined at:
 11273 ;;		line 183 in file "../Main.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;		None
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;		None
 11278 ;; Return value:  Size  Location     Type
 11279 ;;                  1    wreg      void 
 11280 ;; Registers used:
 11281 ;;		wreg, status,2
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11287 ;;      Params:         0       0       0       0       0       0       0       0       0
 11288 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11289 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11290 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11291 ;;Total ram usage:        0 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; Hardware stack levels required when called:    3
 11294 ;; This function calls:
 11295 ;;		Nothing
 11296 ;; This function is called by:
 11297 ;;		_main
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           	psect	text28
 11302  004340                     __ptext28:
 11303                           	opt stack 0
 11304  004340                     _Init_Timers:
 11305                           	opt stack 27
 11306                           
 11307                           ;Main.c: 185: RCONbits.IPEN = 1;
 11308                           
 11309                           ;incstack = 0
 11310  004340  8ED0               	bsf	4048,7,c	;volatile
 11311                           
 11312                           ;Main.c: 186: INTCON = 0xA0;
 11313  004342  0EA0               	movlw	160
 11314  004344  6EF2               	movwf	intcon,c	;volatile
 11315                           
 11316                           ;Main.c: 187: INTCON2 = 0x84;
 11317  004346  0E84               	movlw	132
 11318  004348  6EF1               	movwf	intcon2,c	;volatile
 11319                           
 11320                           ;Main.c: 188: TMR0H = 0x0;
 11321  00434A  0E00               	movlw	0
 11322  00434C  6ED7               	movwf	4055,c	;volatile
 11323                           
 11324                           ;Main.c: 189: TMR0L = 0x0;
 11325  00434E  0E00               	movlw	0
 11326  004350  6ED6               	movwf	4054,c	;volatile
 11327                           
 11328                           ;Main.c: 190: T0CON = 0xC3;
 11329  004352  0EC3               	movlw	195
 11330  004354  6ED5               	movwf	4053,c	;volatile
 11331  004356  0012               	return		;funcret
 11332  004358                     __end_of_Init_Timers:
 11333                           	opt stack 0
 11334                           tblptru	equ	0xFF8
 11335                           tblptrh	equ	0xFF7
 11336                           tblptrl	equ	0xFF6
 11337                           tablat	equ	0xFF5
 11338                           prodh	equ	0xFF4
 11339                           prodl	equ	0xFF3
 11340                           intcon	equ	0xFF2
 11341                           intcon2	equ	0xFF1
 11342                           postinc0	equ	0xFEE
 11343                           wreg	equ	0xFE8
 11344                           postinc1	equ	0xFE6
 11345                           postdec1	equ	0xFE5
 11346                           fsr1h	equ	0xFE2
 11347                           fsr1l	equ	0xFE1
 11348                           indf2	equ	0xFDF
 11349                           postinc2	equ	0xFDE
 11350                           postdec2	equ	0xFDD
 11351                           fsr2h	equ	0xFDA
 11352                           fsr2l	equ	0xFD9
 11353                           status	equ	0xFD8
 11354                           
 11355 ;; *************** function _Init_Pwm *****************
 11356 ;; Defined at:
 11357 ;;		line 196 in file "../Main.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;		None
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;		None
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      void 
 11364 ;; Registers used:
 11365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11371 ;;      Params:         0       0       0       0       0       0       0       0       0
 11372 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11373 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11374 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11375 ;;Total ram usage:        0 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    5
 11378 ;; This function calls:
 11379 ;;		_SETxAPIxVAL
 11380 ;; This function is called by:
 11381 ;;		_main
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           	psect	text29
 11386  00427C                     __ptext29:
 11387                           	opt stack 0
 11388  00427C                     _Init_Pwm:
 11389                           	opt stack 25
 11390                           
 11391                           ;Main.c: 199: SETxAPIxVAL(69, 1);
 11392                           
 11393                           ;incstack = 0
 11394  00427C  0E00               	movlw	0
 11395  00427E  6E1A               	movwf	SETxAPIxVAL@index+1,c
 11396  004280  0E45               	movlw	69
 11397  004282  6E19               	movwf	SETxAPIxVAL@index,c
 11398  004284  0E00               	movlw	0
 11399  004286  6E1C               	movwf	SETxAPIxVAL@value+1,c
 11400  004288  0E01               	movlw	1
 11401  00428A  6E1B               	movwf	SETxAPIxVAL@value,c
 11402  00428C  EC4F  F020         	call	_SETxAPIxVAL	;wreg free
 11403                           
 11404                           ;Main.c: 200: PR2=0xFF;
 11405  004290  68CB               	setf	4043,c	;volatile
 11406                           
 11407                           ;Main.c: 201: CCPR1L = 0x7F;
 11408  004292  0E7F               	movlw	127
 11409  004294  6EBE               	movwf	4030,c	;volatile
 11410                           
 11411                           ;Main.c: 202: CCP1CON = 0x0F;
 11412  004296  0E0F               	movlw	15
 11413  004298  6EBD               	movwf	4029,c	;volatile
 11414                           
 11415                           ;Main.c: 203: T2CON = 0x04;
 11416  00429A  0E04               	movlw	4
 11417  00429C  6ECA               	movwf	4042,c	;volatile
 11418                           
 11419                           ;Main.c: 204: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11420  00429E  9494               	bcf	3988,2,c	;volatile
 11421  0042A0  9094               	bcf	3988,0,c	;volatile
 11422  0042A2  0012               	return		;funcret
 11423  0042A4                     __end_of_Init_Pwm:
 11424                           	opt stack 0
 11425                           tblptru	equ	0xFF8
 11426                           tblptrh	equ	0xFF7
 11427                           tblptrl	equ	0xFF6
 11428                           tablat	equ	0xFF5
 11429                           prodh	equ	0xFF4
 11430                           prodl	equ	0xFF3
 11431                           intcon	equ	0xFF2
 11432                           intcon2	equ	0xFF1
 11433                           postinc0	equ	0xFEE
 11434                           wreg	equ	0xFE8
 11435                           postinc1	equ	0xFE6
 11436                           postdec1	equ	0xFE5
 11437                           fsr1h	equ	0xFE2
 11438                           fsr1l	equ	0xFE1
 11439                           indf2	equ	0xFDF
 11440                           postinc2	equ	0xFDE
 11441                           postdec2	equ	0xFDD
 11442                           fsr2h	equ	0xFDA
 11443                           fsr2l	equ	0xFD9
 11444                           status	equ	0xFD8
 11445                           
 11446 ;; *************** function _SETxAPIxVAL *****************
 11447 ;; Defined at:
 11448 ;;		line 213 in file "../api.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;  index           2   24[COMRAM] unsigned int 
 11451 ;;  value           2   26[COMRAM] unsigned int 
 11452 ;; Auto vars:     Size  Location     Type
 11453 ;;		None
 11454 ;; Return value:  Size  Location     Type
 11455 ;;                  1    wreg      void 
 11456 ;; Registers used:
 11457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11458 ;; Tracked objects:
 11459 ;;		On entry : 0/0
 11460 ;;		On exit  : 0/0
 11461 ;;		Unchanged: 0/0
 11462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11463 ;;      Params:         4       0       0       0       0       0       0       0       0
 11464 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11465 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11466 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11467 ;;Total ram usage:        6 bytes
 11468 ;; Hardware stack levels used:    1
 11469 ;; Hardware stack levels required when called:    4
 11470 ;; This function calls:
 11471 ;;		_SENDxMESSAGE
 11472 ;; This function is called by:
 11473 ;;		_Init_Pwm
 11474 ;;		_Update_StateMchn
 11475 ;;		_Train_Path
 11476 ;;		_Debounce_Inputs
 11477 ;;		_Junction
 11478 ;;		_Train_Move_Left_Start
 11479 ;;		_Train_Move_Left_Brake
 11480 ;;		_Train_Move_Right_Start
 11481 ;;		_Train_Move_Right_Brake
 11482 ;;		_SETxPWM
 11483 ;;		_INCRxAPIxVAL
 11484 ;;		_DECRxAPIxVAL
 11485 ;; This function uses a non-reentrant model
 11486 ;;
 11487                           
 11488                           	psect	text30
 11489  00409E                     __ptext30:
 11490                           	opt stack 0
 11491  00409E                     _SETxAPIxVAL:
 11492                           	opt stack 22
 11493                           
 11494                           ;api.c: 214: if(API[index] != value){
 11495                           
 11496                           ;incstack = 0
 11497  00409E  90D8               	bcf	status,0,c
 11498  0040A0  3419               	rlcf	SETxAPIxVAL@index,w,c
 11499  0040A2  6ED9               	movwf	fsr2l,c
 11500  0040A4  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11501  0040A6  6EDA               	movwf	fsr2h,c
 11502  0040A8  0E00               	movlw	low _API
 11503  0040AA  26D9               	addwf	fsr2l,f,c
 11504  0040AC  0E01               	movlw	high _API
 11505  0040AE  22DA               	addwfc	fsr2h,f,c
 11506  0040B0  501B               	movf	SETxAPIxVAL@value,w,c
 11507  0040B2  18DE               	xorwf	postinc2,w,c
 11508  0040B4  E104               	bnz	u6390
 11509  0040B6  501C               	movf	SETxAPIxVAL@value+1,w,c
 11510  0040B8  18DE               	xorwf	postinc2,w,c
 11511  0040BA  B4D8               	btfsc	status,2,c
 11512  0040BC  0012               	return	
 11513  0040BE                     u6390:
 11514                           
 11515                           ;api.c: 215: API[index] = value;
 11516  0040BE  90D8               	bcf	status,0,c
 11517  0040C0  3419               	rlcf	SETxAPIxVAL@index,w,c
 11518  0040C2  6ED9               	movwf	fsr2l,c
 11519  0040C4  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11520  0040C6  6EDA               	movwf	fsr2h,c
 11521  0040C8  0E00               	movlw	low _API
 11522  0040CA  26D9               	addwf	fsr2l,f,c
 11523  0040CC  0E01               	movlw	high _API
 11524  0040CE  22DA               	addwfc	fsr2h,f,c
 11525  0040D0  C01B  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11526  0040D4  C01C  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11527                           
 11528                           ;api.c: 216: SENDxMESSAGE(index, value);
 11529  0040D8  C019  F013         	movff	SETxAPIxVAL@index,SENDxMESSAGE@index
 11530  0040DC  C01A  F014         	movff	SETxAPIxVAL@index+1,SENDxMESSAGE@index+1
 11531  0040E0  C01B  F015         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11532  0040E4  C01C  F016         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11533  0040E8  EC31  F014         	call	_SENDxMESSAGE	;wreg free
 11534  0040EC  0012               	return	
 11535  0040EE                     __end_of_SETxAPIxVAL:
 11536                           	opt stack 0
 11537                           tblptru	equ	0xFF8
 11538                           tblptrh	equ	0xFF7
 11539                           tblptrl	equ	0xFF6
 11540                           tablat	equ	0xFF5
 11541                           prodh	equ	0xFF4
 11542                           prodl	equ	0xFF3
 11543                           intcon	equ	0xFF2
 11544                           intcon2	equ	0xFF1
 11545                           postinc0	equ	0xFEE
 11546                           wreg	equ	0xFE8
 11547                           postinc1	equ	0xFE6
 11548                           postdec1	equ	0xFE5
 11549                           fsr1h	equ	0xFE2
 11550                           fsr1l	equ	0xFE1
 11551                           indf2	equ	0xFDF
 11552                           postinc2	equ	0xFDE
 11553                           postdec2	equ	0xFDD
 11554                           fsr2h	equ	0xFDA
 11555                           fsr2l	equ	0xFD9
 11556                           status	equ	0xFD8
 11557                           
 11558 ;; *************** function _SENDxMESSAGE *****************
 11559 ;; Defined at:
 11560 ;;		line 280 in file "../terminal.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;  index           2   18[COMRAM] unsigned int 
 11563 ;;  value           2   20[COMRAM] unsigned int 
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;		None
 11566 ;; Return value:  Size  Location     Type
 11567 ;;                  1    wreg      void 
 11568 ;; Registers used:
 11569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11570 ;; Tracked objects:
 11571 ;;		On entry : 0/0
 11572 ;;		On exit  : 0/0
 11573 ;;		Unchanged: 0/0
 11574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11575 ;;      Params:         4       0       0       0       0       0       0       0       0
 11576 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11577 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11578 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11579 ;;Total ram usage:        6 bytes
 11580 ;; Hardware stack levels used:    1
 11581 ;; Hardware stack levels required when called:    3
 11582 ;; This function calls:
 11583 ;;		Nothing
 11584 ;; This function is called by:
 11585 ;;		_TranslateMessage
 11586 ;;		_SETxAPIxVAL
 11587 ;;		_INCRxAPIxVAL
 11588 ;;		_DECRxAPIxVAL
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           	psect	text31
 11593  002862                     __ptext31:
 11594                           	opt stack 0
 11595  002862                     _SENDxMESSAGE:
 11596                           	opt stack 22
 11597                           
 11598                           ;terminal.c: 282: switch (Diag_Comm)
 11599                           
 11600                           ;incstack = 0
 11601  002862  D0F8               	goto	l668
 11602  002864  0E8C               	movlw	low _Comm_List
 11603  002866  0100               	movlb	0	; () banked
 11604  002868  6F72               	movwf	_Pcomm_List& (0+255),b
 11605  00286A  0E00               	movlw	high _Comm_List
 11606  00286C  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;terminal.c: 285: *Pcomm_List = index;
 11610  00286E  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11611  002872  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11612  002876  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11613  00287A  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;terminal.c: 286: Pcomm_List++;
 11617  00287E  0E02               	movlw	2
 11618  002880  2772               	addwf	_Pcomm_List& (0+255),f,b
 11619  002882  0E00               	movlw	0
 11620  002884  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11621                           
 11622                           ;terminal.c: 287: *Pcomm_List = value;
 11623  002886  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11624  00288A  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11625  00288E  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11626  002892  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;terminal.c: 288: Pcomm_List++;
 11630  002896  0E02               	movlw	2
 11631  002898  2772               	addwf	_Pcomm_List& (0+255),f,b
 11632  00289A  0E00               	movlw	0
 11633  00289C  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;terminal.c: 289: Diag_Comm = 1;
 11637  00289E  0E00               	movlw	0
 11638  0028A0  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11639  0028A2  0E01               	movlw	1
 11640  0028A4  6F74               	movwf	_Diag_Comm& (0+255),b
 11641                           
 11642                           ;terminal.c: 290: break;
 11643  0028A6  0012               	return	
 11644  0028A8                     
 11645                           ; BSR set to: 0
 11646  0028A8  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11647  0028AC  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11648  0028B0  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11649  0028B4  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11650                           
 11651                           ;terminal.c: 293: Pcomm_List++;
 11652  0028B8  0E02               	movlw	2
 11653  0028BA  0100               	movlb	0	; () banked
 11654  0028BC  2772               	addwf	_Pcomm_List& (0+255),f,b
 11655  0028BE  0E00               	movlw	0
 11656  0028C0  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;terminal.c: 294: *Pcomm_List = value;
 11660  0028C2  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11661  0028C6  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11662  0028CA  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11663  0028CE  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11664                           
 11665                           ;terminal.c: 295: Pcomm_List++;
 11666  0028D2  0E02               	movlw	2
 11667  0028D4  2772               	addwf	_Pcomm_List& (0+255),f,b
 11668  0028D6  0E00               	movlw	0
 11669  0028D8  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;terminal.c: 296: Diag_Comm = 2;
 11673  0028DA  0E00               	movlw	0
 11674  0028DC  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11675  0028DE  0E02               	movlw	2
 11676  0028E0  6F74               	movwf	_Diag_Comm& (0+255),b
 11677                           
 11678                           ;terminal.c: 297: break;
 11679  0028E2  0012               	return	
 11680  0028E4                     
 11681                           ; BSR set to: 0
 11682  0028E4  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11683  0028E8  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11684  0028EC  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11685  0028F0  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11686                           
 11687                           ;terminal.c: 300: Pcomm_List++;
 11688  0028F4  0E02               	movlw	2
 11689  0028F6  0100               	movlb	0	; () banked
 11690  0028F8  2772               	addwf	_Pcomm_List& (0+255),f,b
 11691  0028FA  0E00               	movlw	0
 11692  0028FC  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;terminal.c: 301: *Pcomm_List = value;
 11696  0028FE  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11697  002902  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11698  002906  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11699  00290A  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11700                           
 11701                           ;terminal.c: 302: Pcomm_List++;
 11702  00290E  0E02               	movlw	2
 11703  002910  2772               	addwf	_Pcomm_List& (0+255),f,b
 11704  002912  0E00               	movlw	0
 11705  002914  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;terminal.c: 303: Diag_Comm = 3;
 11709  002916  0E00               	movlw	0
 11710  002918  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11711  00291A  0E03               	movlw	3
 11712  00291C  6F74               	movwf	_Diag_Comm& (0+255),b
 11713                           
 11714                           ;terminal.c: 304: break;
 11715  00291E  0012               	return	
 11716  002920                     
 11717                           ; BSR set to: 0
 11718  002920  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11719  002924  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11720  002928  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11721  00292C  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11722                           
 11723                           ;terminal.c: 307: Pcomm_List++;
 11724  002930  0E02               	movlw	2
 11725  002932  0100               	movlb	0	; () banked
 11726  002934  2772               	addwf	_Pcomm_List& (0+255),f,b
 11727  002936  0E00               	movlw	0
 11728  002938  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;terminal.c: 308: *Pcomm_List = value;
 11732  00293A  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11733  00293E  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11734  002942  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11735  002946  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11736                           
 11737                           ;terminal.c: 309: Pcomm_List++;
 11738  00294A  0E02               	movlw	2
 11739  00294C  2772               	addwf	_Pcomm_List& (0+255),f,b
 11740  00294E  0E00               	movlw	0
 11741  002950  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;terminal.c: 310: Diag_Comm = 4;
 11745  002952  0E00               	movlw	0
 11746  002954  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11747  002956  0E04               	movlw	4
 11748  002958  6F74               	movwf	_Diag_Comm& (0+255),b
 11749                           
 11750                           ;terminal.c: 311: break;
 11751  00295A  0012               	return	
 11752  00295C                     
 11753                           ; BSR set to: 0
 11754  00295C  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11755  002960  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11756  002964  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11757  002968  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11758                           
 11759                           ;terminal.c: 314: Pcomm_List++;
 11760  00296C  0E02               	movlw	2
 11761  00296E  0100               	movlb	0	; () banked
 11762  002970  2772               	addwf	_Pcomm_List& (0+255),f,b
 11763  002972  0E00               	movlw	0
 11764  002974  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;terminal.c: 315: *Pcomm_List = value;
 11768  002976  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11769  00297A  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11770  00297E  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11771  002982  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11772                           
 11773                           ;terminal.c: 316: Pcomm_List++;
 11774  002986  0E02               	movlw	2
 11775  002988  2772               	addwf	_Pcomm_List& (0+255),f,b
 11776  00298A  0E00               	movlw	0
 11777  00298C  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;terminal.c: 317: Diag_Comm = 5;
 11781  00298E  0E00               	movlw	0
 11782  002990  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11783  002992  0E05               	movlw	5
 11784  002994  6F74               	movwf	_Diag_Comm& (0+255),b
 11785                           
 11786                           ;terminal.c: 318: break;
 11787  002996  0012               	return	
 11788  002998                     
 11789                           ; BSR set to: 0
 11790  002998  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11791  00299C  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11792  0029A0  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11793  0029A4  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11794                           
 11795                           ;terminal.c: 321: Pcomm_List++;
 11796  0029A8  0E02               	movlw	2
 11797  0029AA  0100               	movlb	0	; () banked
 11798  0029AC  2772               	addwf	_Pcomm_List& (0+255),f,b
 11799  0029AE  0E00               	movlw	0
 11800  0029B0  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;terminal.c: 322: *Pcomm_List = value;
 11804  0029B2  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11805  0029B6  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11806  0029BA  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11807  0029BE  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11808                           
 11809                           ;terminal.c: 323: Pcomm_List++;
 11810  0029C2  0E02               	movlw	2
 11811  0029C4  2772               	addwf	_Pcomm_List& (0+255),f,b
 11812  0029C6  0E00               	movlw	0
 11813  0029C8  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;terminal.c: 324: Diag_Comm = 6;
 11817  0029CA  0E00               	movlw	0
 11818  0029CC  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11819  0029CE  0E06               	movlw	6
 11820  0029D0  6F74               	movwf	_Diag_Comm& (0+255),b
 11821                           
 11822                           ;terminal.c: 325: break;
 11823  0029D2  0012               	return	
 11824  0029D4                     
 11825                           ; BSR set to: 0
 11826  0029D4  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11827  0029D8  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11828  0029DC  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11829  0029E0  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11830                           
 11831                           ;terminal.c: 328: Pcomm_List++;
 11832  0029E4  0E02               	movlw	2
 11833  0029E6  0100               	movlb	0	; () banked
 11834  0029E8  2772               	addwf	_Pcomm_List& (0+255),f,b
 11835  0029EA  0E00               	movlw	0
 11836  0029EC  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;terminal.c: 329: *Pcomm_List = value;
 11840  0029EE  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11841  0029F2  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11842  0029F6  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11843  0029FA  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11844                           
 11845                           ;terminal.c: 330: Pcomm_List++;
 11846  0029FE  0E02               	movlw	2
 11847  002A00  2772               	addwf	_Pcomm_List& (0+255),f,b
 11848  002A02  0E00               	movlw	0
 11849  002A04  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;terminal.c: 331: Diag_Comm = 7;
 11853  002A06  0E00               	movlw	0
 11854  002A08  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11855  002A0A  0E07               	movlw	7
 11856  002A0C  6F74               	movwf	_Diag_Comm& (0+255),b
 11857                           
 11858                           ;terminal.c: 332: break;
 11859  002A0E  0012               	return	
 11860  002A10                     
 11861                           ; BSR set to: 0
 11862  002A10  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11863  002A14  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11864  002A18  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11865  002A1C  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11866                           
 11867                           ;terminal.c: 335: Pcomm_List++;
 11868  002A20  0E02               	movlw	2
 11869  002A22  0100               	movlb	0	; () banked
 11870  002A24  2772               	addwf	_Pcomm_List& (0+255),f,b
 11871  002A26  0E00               	movlw	0
 11872  002A28  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;terminal.c: 336: *Pcomm_List = value;
 11876  002A2A  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11877  002A2E  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11878  002A32  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11879  002A36  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11880                           
 11881                           ;terminal.c: 337: Pcomm_List++;
 11882  002A3A  0E02               	movlw	2
 11883  002A3C  2772               	addwf	_Pcomm_List& (0+255),f,b
 11884  002A3E  0E00               	movlw	0
 11885  002A40  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11886                           
 11887                           ;terminal.c: 338: Pcomm_List = &Comm_List[0][0];
 11888  002A42  0E8C               	movlw	low _Comm_List
 11889  002A44  6F72               	movwf	_Pcomm_List& (0+255),b
 11890  002A46  0E00               	movlw	high _Comm_List
 11891  002A48  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;terminal.c: 339: Diag_Comm = 0;
 11895  002A4A  0E00               	movlw	0
 11896  002A4C  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11897  002A4E  0E00               	movlw	0
 11898  002A50  6F74               	movwf	_Diag_Comm& (0+255),b
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;terminal.c: 344: }
 11902                           
 11903                           ; BSR set to: 0
 11904                           
 11905                           ;terminal.c: 343: default : break;
 11906                           
 11907                           ;terminal.c: 340: break;
 11908  002A52  0012               	return	
 11909  002A54                     l668:
 11910                           
 11911                           ; BSR set to: 0
 11912  002A54  C074  F017         	movff	_Diag_Comm,??_SENDxMESSAGE
 11913  002A58  C075  F018         	movff	_Diag_Comm+1,??_SENDxMESSAGE+1
 11914                           
 11915                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11916                           ; Switch size 1, requested type "space"
 11917                           ; Number of cases is 1, Range of values is 0 to 0
 11918                           ; switch strategies available:
 11919                           ; Name         Instructions Cycles
 11920                           ; simple_byte            4     3 (average)
 11921                           ;	Chosen strategy is simple_byte
 11922  002A5C  5018               	movf	??_SENDxMESSAGE+1,w,c
 11923  002A5E  0A00               	xorlw	0	; case 0
 11924  002A60  A4D8               	btfss	status,2,c
 11925  002A62  0012               	return	
 11926                           
 11927                           ; Switch size 1, requested type "space"
 11928                           ; Number of cases is 8, Range of values is 0 to 7
 11929                           ; switch strategies available:
 11930                           ; Name         Instructions Cycles
 11931                           ; simple_byte           25    13 (average)
 11932                           ;	Chosen strategy is simple_byte
 11933  002A64  5017               	movf	??_SENDxMESSAGE,w,c
 11934  002A66  0A00               	xorlw	0	; case 0
 11935  002A68  B4D8               	btfsc	status,2,c
 11936  002A6A  D6FC               	goto	l669
 11937  002A6C  0A01               	xorlw	1	; case 1
 11938  002A6E  B4D8               	btfsc	status,2,c
 11939  002A70  D71B               	goto	l671
 11940  002A72  0A03               	xorlw	3	; case 2
 11941  002A74  B4D8               	btfsc	status,2,c
 11942  002A76  D736               	goto	l672
 11943  002A78  0A01               	xorlw	1	; case 3
 11944  002A7A  B4D8               	btfsc	status,2,c
 11945  002A7C  D751               	goto	l673
 11946  002A7E  0A07               	xorlw	7	; case 4
 11947  002A80  B4D8               	btfsc	status,2,c
 11948  002A82  D76C               	goto	l674
 11949  002A84  0A01               	xorlw	1	; case 5
 11950  002A86  B4D8               	btfsc	status,2,c
 11951  002A88  D787               	goto	l675
 11952  002A8A  0A03               	xorlw	3	; case 6
 11953  002A8C  B4D8               	btfsc	status,2,c
 11954  002A8E  D7A2               	goto	l676
 11955  002A90  0A01               	xorlw	1	; case 7
 11956  002A92  A4D8               	btfss	status,2,c
 11957  002A94  0012               	return	
 11958  002A96  D7BC               	goto	l677
 11959  002A98                     __end_of_SENDxMESSAGE:
 11960                           	opt stack 0
 11961                           tblptru	equ	0xFF8
 11962                           tblptrh	equ	0xFF7
 11963                           tblptrl	equ	0xFF6
 11964                           tablat	equ	0xFF5
 11965                           prodh	equ	0xFF4
 11966                           prodl	equ	0xFF3
 11967                           intcon	equ	0xFF2
 11968                           intcon2	equ	0xFF1
 11969                           postinc0	equ	0xFEE
 11970                           wreg	equ	0xFE8
 11971                           postinc1	equ	0xFE6
 11972                           postdec1	equ	0xFE5
 11973                           fsr1h	equ	0xFE2
 11974                           fsr1l	equ	0xFE1
 11975                           indf2	equ	0xFDF
 11976                           postinc2	equ	0xFDE
 11977                           postdec2	equ	0xFDD
 11978                           fsr2h	equ	0xFDA
 11979                           fsr2l	equ	0xFD9
 11980                           status	equ	0xFD8
 11981                           
 11982 ;; *************** function _EUSART1_Initialize *****************
 11983 ;; Defined at:
 11984 ;;		line 78 in file "../eusart1.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;		None
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;  baud_rate       2   18[COMRAM] unsigned int 
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		wreg, status,2
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11998 ;;      Params:         0       0       0       0       0       0       0       0       0
 11999 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12000 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12001 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12002 ;;Total ram usage:        2 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    3
 12005 ;; This function calls:
 12006 ;;		Nothing
 12007 ;; This function is called by:
 12008 ;;		_main
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           	psect	text32
 12013  0040EE                     __ptext32:
 12014                           	opt stack 0
 12015  0040EE                     _EUSART1_Initialize:
 12016                           	opt stack 27
 12017                           
 12018                           ;eusart1.c: 80: PIE1bits.RC1IE = 0;
 12019                           
 12020                           ;incstack = 0
 12021  0040EE  9A9D               	bcf	3997,5,c	;volatile
 12022                           
 12023                           ;eusart1.c: 81: PIE1bits.TX1IE = 0;
 12024  0040F0  989D               	bcf	3997,4,c	;volatile
 12025                           
 12026                           ;eusart1.c: 85: BAUDCONbits.BRG16 = 1;
 12027  0040F2  86B8               	bsf	4024,3,c	;volatile
 12028                           
 12029                           ;eusart1.c: 87: RCSTAbits.SPEN = 1;
 12030  0040F4  8EAB               	bsf	4011,7,c	;volatile
 12031                           
 12032                           ;eusart1.c: 88: RCSTAbits.RX9 = 0;
 12033  0040F6  9CAB               	bcf	4011,6,c	;volatile
 12034                           
 12035                           ;eusart1.c: 89: RCSTAbits.CREN = 1;
 12036  0040F8  88AB               	bsf	4011,4,c	;volatile
 12037                           
 12038                           ;eusart1.c: 90: RCSTAbits.ADDEN = 0;
 12039  0040FA  96AB               	bcf	4011,3,c	;volatile
 12040                           
 12041                           ;eusart1.c: 92: TXSTAbits.TX9 = 0;
 12042  0040FC  9CAC               	bcf	4012,6,c	;volatile
 12043                           
 12044                           ;eusart1.c: 93: TXSTAbits.TXEN = 1;
 12045  0040FE  8AAC               	bsf	4012,5,c	;volatile
 12046                           
 12047                           ;eusart1.c: 94: TXSTAbits.SYNC = 0;
 12048  004100  98AC               	bcf	4012,4,c	;volatile
 12049                           
 12050                           ;eusart1.c: 95: TXSTAbits.SENDB = 0;
 12051  004102  96AC               	bcf	4012,3,c	;volatile
 12052                           
 12053                           ;eusart1.c: 96: TXSTAbits.BRGH = 1;
 12054  004104  84AC               	bsf	4012,2,c	;volatile
 12055                           
 12056                           ;eusart1.c: 97: TXSTAbits.TRMT = 1;
 12057  004106  82AC               	bsf	4012,1,c	;volatile
 12058                           
 12059                           ;eusart1.c: 98: TXSTAbits.TX9D = 0;
 12060  004108  90AC               	bcf	4012,0,c	;volatile
 12061                           
 12062                           ;eusart1.c: 100: unsigned int baud_rate;
 12063                           ;eusart1.c: 102: baud_rate = 417;
 12064  00410A  0E01               	movlw	1
 12065  00410C  6E14               	movwf	EUSART1_Initialize@baud_rate+1,c
 12066  00410E  0EA1               	movlw	161
 12067  004110  6E13               	movwf	EUSART1_Initialize@baud_rate,c
 12068                           
 12069                           ;eusart1.c: 104: SPBRGH = baud_rate >> 8;
 12070  004112  5014               	movf	EUSART1_Initialize@baud_rate+1,w,c
 12071  004114  6EB0               	movwf	4016,c	;volatile
 12072                           
 12073                           ;eusart1.c: 105: SPBRG = baud_rate;
 12074  004116  C013  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12075                           
 12076                           ;eusart1.c: 109: eusart1TxHead = 0;
 12077  00411A  0E00               	movlw	0
 12078  00411C  6E44               	movwf	_eusart1TxHead,c
 12079                           
 12080                           ;eusart1.c: 110: eusart1TxTail = 0;
 12081  00411E  0E00               	movlw	0
 12082  004120  6E43               	movwf	_eusart1TxTail,c
 12083                           
 12084                           ;eusart1.c: 111: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12085  004122  0E7E               	movlw	126
 12086  004124  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12087                           
 12088                           ;eusart1.c: 113: eusart1RxHead = 0;
 12089  004126  0E00               	movlw	0
 12090  004128  6E41               	movwf	_eusart1RxHead,c
 12091                           
 12092                           ;eusart1.c: 114: eusart1RxTail = 0;
 12093  00412A  0E00               	movlw	0
 12094  00412C  6E40               	movwf	_eusart1RxTail,c
 12095                           
 12096                           ;eusart1.c: 115: eusart1RxCount = 0;
 12097  00412E  0E00               	movlw	0
 12098  004130  6E3F               	movwf	_eusart1RxCount,c	;volatile
 12099                           
 12100                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
 12101  004132  8A9D               	bsf	3997,5,c	;volatile
 12102  004134  0012               	return		;funcret
 12103  004136                     __end_of_EUSART1_Initialize:
 12104                           	opt stack 0
 12105                           tblptru	equ	0xFF8
 12106                           tblptrh	equ	0xFF7
 12107                           tblptrl	equ	0xFF6
 12108                           tablat	equ	0xFF5
 12109                           prodh	equ	0xFF4
 12110                           prodl	equ	0xFF3
 12111                           intcon	equ	0xFF2
 12112                           intcon2	equ	0xFF1
 12113                           postinc0	equ	0xFEE
 12114                           wreg	equ	0xFE8
 12115                           postinc1	equ	0xFE6
 12116                           postdec1	equ	0xFE5
 12117                           fsr1h	equ	0xFE2
 12118                           fsr1l	equ	0xFE1
 12119                           indf2	equ	0xFDF
 12120                           postinc2	equ	0xFDE
 12121                           postdec2	equ	0xFDD
 12122                           fsr2h	equ	0xFDA
 12123                           fsr2l	equ	0xFD9
 12124                           status	equ	0xFD8
 12125                           
 12126 ;; *************** function _EEPROMxREAD *****************
 12127 ;; Defined at:
 12128 ;;		line 57 in file "../eeprom_settings.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;		None
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;  Data            2   28[COMRAM] unsigned int 
 12133 ;;  i               1   30[COMRAM] unsigned char 
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  1    wreg      void 
 12136 ;; Registers used:
 12137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12143 ;;      Params:         0       0       0       0       0       0       0       0       0
 12144 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12145 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12146 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12147 ;;Total ram usage:        5 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:    4
 12150 ;; This function calls:
 12151 ;;		_Eeprom_Read
 12152 ;; This function is called by:
 12153 ;;		_main
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           	psect	text33
 12158  003CDA                     __ptext33:
 12159                           	opt stack 0
 12160  003CDA                     _EEPROMxREAD:
 12161                           	opt stack 26
 12162                           
 12163                           ;eeprom_settings.c: 59: unsigned char i = 0;
 12164                           
 12165                           ;incstack = 0
 12166  003CDA  0E00               	movlw	0
 12167  003CDC  6E1F               	movwf	EEPROMxREAD@i,c
 12168                           
 12169                           ;eeprom_settings.c: 60: unsigned int Data = 0;
 12170  003CDE  0E00               	movlw	0
 12171  003CE0  6E1E               	movwf	EEPROMxREAD@Data+1,c
 12172  003CE2  0E00               	movlw	0
 12173  003CE4  6E1D               	movwf	EEPROMxREAD@Data,c
 12174                           
 12175                           ;eeprom_settings.c: 65: for(i = 0; i < 28; i++ )
 12176  003CE6  0E00               	movlw	0
 12177  003CE8  6E1F               	movwf	EEPROMxREAD@i,c
 12178  003CEA                     l6178:
 12179  003CEA  0E1B               	movlw	27
 12180  003CEC  641F               	cpfsgt	EEPROMxREAD@i,c
 12181  003CEE  D001               	goto	l741
 12182  003CF0  0012               	return	
 12183  003CF2                     l741:
 12184                           
 12185                           ;eeprom_settings.c: 66: {
 12186                           ;eeprom_settings.c: 67: Data = Eeprom_Read(i);
 12187  003CF2  C01F  F013         	movff	EEPROMxREAD@i,Eeprom_Read@Location
 12188  003CF6  6A14               	clrf	Eeprom_Read@Location+1,c
 12189  003CF8  ECF5  F01F         	call	_Eeprom_Read	;wreg free
 12190  003CFC  C013  F01D         	movff	?_Eeprom_Read,EEPROMxREAD@Data
 12191  003D00  C014  F01E         	movff	?_Eeprom_Read+1,EEPROMxREAD@Data+1
 12192                           
 12193                           ;eeprom_settings.c: 71: API[ApiList[i]] = Data;
 12194  003D04  501F               	movf	EEPROMxREAD@i,w,c
 12195  003D06  0D02               	mullw	2
 12196  003D08  0E01               	movlw	low _ApiList
 12197  003D0A  24F3               	addwf	prodl,w,c
 12198  003D0C  6EF6               	movwf	tblptrl,c
 12199  003D0E  0E08               	movlw	high _ApiList
 12200  003D10  20F4               	addwfc	prodh,w,c
 12201  003D12  6EF7               	movwf	tblptrh,c
 12202  003D14                     	if	0	;There are less than 3 active tblptr bytes
 12203  003D14                     	endif
 12204  003D14  0009               	tblrd		*+
 12205  003D16  CFF5 F01B          	movff	tablat,??_EEPROMxREAD
 12206  003D1A  0009               	tblrd		*+
 12207  003D1C  CFF5 F01C          	movff	tablat,??_EEPROMxREAD+1
 12208  003D20  90D8               	bcf	status,0,c
 12209  003D22  361B               	rlcf	??_EEPROMxREAD,f,c
 12210  003D24  361C               	rlcf	??_EEPROMxREAD+1,f,c
 12211  003D26  0E00               	movlw	low _API
 12212  003D28  241B               	addwf	??_EEPROMxREAD,w,c
 12213  003D2A  6ED9               	movwf	fsr2l,c
 12214  003D2C  0E01               	movlw	high _API
 12215  003D2E  201C               	addwfc	??_EEPROMxREAD+1,w,c
 12216  003D30  6EDA               	movwf	fsr2h,c
 12217  003D32  C01D  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12218  003D36  C01E  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12219                           
 12220                           ;eeprom_settings.c: 72: API_EEPROM[ApiList[i]] = Data;
 12221  003D3A  501F               	movf	EEPROMxREAD@i,w,c
 12222  003D3C  0D02               	mullw	2
 12223  003D3E  0E01               	movlw	low _ApiList
 12224  003D40  24F3               	addwf	prodl,w,c
 12225  003D42  6EF6               	movwf	tblptrl,c
 12226  003D44  0E08               	movlw	high _ApiList
 12227  003D46  20F4               	addwfc	prodh,w,c
 12228  003D48  6EF7               	movwf	tblptrh,c
 12229  003D4A                     	if	0	;There are less than 3 active tblptr bytes
 12230  003D4A                     	endif
 12231  003D4A  0009               	tblrd		*+
 12232  003D4C  CFF5 F01B          	movff	tablat,??_EEPROMxREAD
 12233  003D50  0009               	tblrd		*+
 12234  003D52  CFF5 F01C          	movff	tablat,??_EEPROMxREAD+1
 12235  003D56  90D8               	bcf	status,0,c
 12236  003D58  361B               	rlcf	??_EEPROMxREAD,f,c
 12237  003D5A  361C               	rlcf	??_EEPROMxREAD+1,f,c
 12238  003D5C  0E00               	movlw	low _API_EEPROM
 12239  003D5E  241B               	addwf	??_EEPROMxREAD,w,c
 12240  003D60  6ED9               	movwf	fsr2l,c
 12241  003D62  0E03               	movlw	high _API_EEPROM
 12242  003D64  201C               	addwfc	??_EEPROMxREAD+1,w,c
 12243  003D66  6EDA               	movwf	fsr2h,c
 12244  003D68  C01D  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12245  003D6C  C01E  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12246  003D70  2A1F               	incf	EEPROMxREAD@i,f,c
 12247  003D72  D7BB               	goto	l6178
 12248  003D74                     __end_of_EEPROMxREAD:
 12249                           	opt stack 0
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           intcon2	equ	0xFF1
 12258                           postinc0	equ	0xFEE
 12259                           wreg	equ	0xFE8
 12260                           postinc1	equ	0xFE6
 12261                           postdec1	equ	0xFE5
 12262                           fsr1h	equ	0xFE2
 12263                           fsr1l	equ	0xFE1
 12264                           indf2	equ	0xFDF
 12265                           postinc2	equ	0xFDE
 12266                           postdec2	equ	0xFDD
 12267                           fsr2h	equ	0xFDA
 12268                           fsr2l	equ	0xFD9
 12269                           status	equ	0xFD8
 12270                           
 12271 ;; *************** function _Eeprom_Read *****************
 12272 ;; Defined at:
 12273 ;;		line 92 in file "../eeprom_settings.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;  Location        2   18[COMRAM] unsigned int 
 12276 ;; Auto vars:     Size  Location     Type
 12277 ;;  Return_Data     2   24[COMRAM] unsigned int 
 12278 ;;  Location_Hig    2   22[COMRAM] unsigned int 
 12279 ;;  Location_Low    2   20[COMRAM] unsigned int 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  2   18[COMRAM] unsigned int 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12289 ;;      Params:         2       0       0       0       0       0       0       0       0
 12290 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12292 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12293 ;;Total ram usage:        8 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    3
 12296 ;; This function calls:
 12297 ;;		Nothing
 12298 ;; This function is called by:
 12299 ;;		_EEPROMxREAD
 12300 ;; This function uses a non-reentrant model
 12301 ;;
 12302                           
 12303                           	psect	text34
 12304  003FEA                     __ptext34:
 12305                           	opt stack 0
 12306  003FEA                     _Eeprom_Read:
 12307                           	opt stack 26
 12308                           
 12309                           ;eeprom_settings.c: 94: unsigned int Location_High_Byte = Location * 2;
 12310                           
 12311                           ;incstack = 0
 12312  003FEA  90D8               	bcf	status,0,c
 12313  003FEC  3413               	rlcf	Eeprom_Read@Location,w,c
 12314  003FEE  6E17               	movwf	Eeprom_Read@Location_High_Byte,c
 12315  003FF0  3414               	rlcf	Eeprom_Read@Location+1,w,c
 12316  003FF2  6E18               	movwf	Eeprom_Read@Location_High_Byte+1,c
 12317                           
 12318                           ;eeprom_settings.c: 95: unsigned int Location_Low_Byte = Location_High_Byte + 1;
 12319  003FF4  0E01               	movlw	1
 12320  003FF6  2417               	addwf	Eeprom_Read@Location_High_Byte,w,c
 12321  003FF8  6E15               	movwf	Eeprom_Read@Location_Low_Byte,c
 12322  003FFA  0E00               	movlw	0
 12323  003FFC  2018               	addwfc	Eeprom_Read@Location_High_Byte+1,w,c
 12324  003FFE  6E16               	movwf	Eeprom_Read@Location_Low_Byte+1,c
 12325                           
 12326                           ;eeprom_settings.c: 96: unsigned int Return_Data = 0;
 12327  004000  0E00               	movlw	0
 12328  004002  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12329  004004  0E00               	movlw	0
 12330  004006  6E19               	movwf	Eeprom_Read@Return_Data,c
 12331                           
 12332                           ;eeprom_settings.c: 98: INTCON = 0x00;
 12333  004008  0E00               	movlw	0
 12334  00400A  6EF2               	movwf	intcon,c	;volatile
 12335                           
 12336                           ;eeprom_settings.c: 100: EECON1bits.EEPGD = 0;
 12337  00400C  9EA6               	bcf	4006,7,c	;volsfr
 12338                           
 12339                           ;eeprom_settings.c: 101: EECON1bits.CFGS = 0;
 12340  00400E  9CA6               	bcf	4006,6,c	;volsfr
 12341                           
 12342                           ;eeprom_settings.c: 102: EEADR = Location_High_Byte;
 12343  004010  C017  FFA9         	movff	Eeprom_Read@Location_High_Byte,4009	;volatile
 12344                           
 12345                           ;eeprom_settings.c: 103: EECON1bits.RD = 1;
 12346  004014  80A6               	bsf	4006,0,c	;volsfr
 12347  004016  B0A6               	btfsc	4006,0,c	;volsfr
 12348  004018  D7FE               	goto	l747
 12349                           
 12350                           ;eeprom_settings.c: 105: Return_Data = EEDATA;
 12351  00401A  CFA8 F019          	movff	4008,Eeprom_Read@Return_Data	;volatile
 12352  00401E  6A1A               	clrf	Eeprom_Read@Return_Data+1,c
 12353                           
 12354                           ;eeprom_settings.c: 106: Return_Data = Return_Data << 8;
 12355  004020  5019               	movf	Eeprom_Read@Return_Data,w,c
 12356  004022  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12357  004024  6A19               	clrf	Eeprom_Read@Return_Data,c
 12358                           
 12359                           ;eeprom_settings.c: 111: EECON1bits.EEPGD = 0;
 12360  004026  9EA6               	bcf	4006,7,c	;volsfr
 12361                           
 12362                           ;eeprom_settings.c: 112: EECON1bits.CFGS = 0;
 12363  004028  9CA6               	bcf	4006,6,c	;volsfr
 12364                           
 12365                           ;eeprom_settings.c: 113: EEADR = Location_Low_Byte;
 12366  00402A  C015  FFA9         	movff	Eeprom_Read@Location_Low_Byte,4009	;volatile
 12367                           
 12368                           ;eeprom_settings.c: 114: EECON1bits.RD = 1;
 12369  00402E  80A6               	bsf	4006,0,c	;volsfr
 12370  004030  B0A6               	btfsc	4006,0,c	;volsfr
 12371  004032  D7FE               	goto	l750
 12372                           
 12373                           ;eeprom_settings.c: 116: Return_Data = Return_Data | EEDATA;
 12374  004034  5019               	movf	Eeprom_Read@Return_Data,w,c
 12375  004036  10A8               	iorwf	4008,w,c	;volatile
 12376  004038  6E19               	movwf	Eeprom_Read@Return_Data,c
 12377  00403A  501A               	movf	Eeprom_Read@Return_Data+1,w,c
 12378  00403C  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12379                           
 12380                           ;eeprom_settings.c: 121: INTCON = 0xA0;
 12381  00403E  0EA0               	movlw	160
 12382  004040  6EF2               	movwf	intcon,c	;volatile
 12383                           
 12384                           ;eeprom_settings.c: 123: return (Return_Data);
 12385  004042  C019  F013         	movff	Eeprom_Read@Return_Data,?_Eeprom_Read
 12386  004046  C01A  F014         	movff	Eeprom_Read@Return_Data+1,?_Eeprom_Read+1
 12387  00404A  0012               	return	
 12388  00404C                     __end_of_Eeprom_Read:
 12389                           	opt stack 0
 12390                           tblptru	equ	0xFF8
 12391                           tblptrh	equ	0xFF7
 12392                           tblptrl	equ	0xFF6
 12393                           tablat	equ	0xFF5
 12394                           prodh	equ	0xFF4
 12395                           prodl	equ	0xFF3
 12396                           intcon	equ	0xFF2
 12397                           intcon2	equ	0xFF1
 12398                           postinc0	equ	0xFEE
 12399                           wreg	equ	0xFE8
 12400                           postinc1	equ	0xFE6
 12401                           postdec1	equ	0xFE5
 12402                           fsr1h	equ	0xFE2
 12403                           fsr1l	equ	0xFE1
 12404                           indf2	equ	0xFDF
 12405                           postinc2	equ	0xFDE
 12406                           postdec2	equ	0xFDD
 12407                           fsr2h	equ	0xFDA
 12408                           fsr2l	equ	0xFD9
 12409                           status	equ	0xFD8
 12410                           
 12411 ;; *************** function _DIAGNOSTICxTOxPC *****************
 12412 ;; Defined at:
 12413 ;;		line 194 in file "../terminal.c"
 12414 ;; Parameters:    Size  Location     Type
 12415 ;;		None
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;		None
 12418 ;; Return value:  Size  Location     Type
 12419 ;;                  1    wreg      void 
 12420 ;; Registers used:
 12421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12422 ;; Tracked objects:
 12423 ;;		On entry : 0/0
 12424 ;;		On exit  : 0/0
 12425 ;;		Unchanged: 0/0
 12426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12427 ;;      Params:         0       0       0       0       0       0       0       0       0
 12428 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12429 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12430 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12431 ;;Total ram usage:        2 bytes
 12432 ;; Hardware stack levels used:    1
 12433 ;; Hardware stack levels required when called:    6
 12434 ;; This function calls:
 12435 ;;		_SendMessage
 12436 ;; This function is called by:
 12437 ;;		_main
 12438 ;; This function uses a non-reentrant model
 12439 ;;
 12440                           
 12441                           	psect	text35
 12442  002628                     __ptext35:
 12443                           	opt stack 0
 12444  002628                     _DIAGNOSTICxTOxPC:
 12445                           	opt stack 24
 12446                           
 12447                           ;terminal.c: 196: if (DelayCounter > 10000){
 12448                           
 12449                           ;incstack = 0
 12450  002628  0E11               	movlw	17
 12451  00262A  0100               	movlb	0	; () banked
 12452  00262C  5D6C               	subwf	_DelayCounter& (0+255),w,b
 12453  00262E  0E27               	movlw	39
 12454  002630  596D               	subwfb	(_DelayCounter+1)& (0+255),w,b
 12455  002632  A0D8               	btfss	status,0,c
 12456  002634  D113               	goto	l643
 12457                           
 12458                           ; BSR set to: 0
 12459                           ;terminal.c: 197: DelayCounter = 0;
 12460  002636  0E00               	movlw	0
 12461  002638  6F6D               	movwf	(_DelayCounter+1)& (0+255),b
 12462  00263A  0E00               	movlw	0
 12463  00263C  6F6C               	movwf	_DelayCounter& (0+255),b
 12464                           
 12465                           ;terminal.c: 199: switch (Diag_Comm2)
 12466  00263E  D0E9               	goto	l644
 12467  002640                     
 12468                           ; BSR set to: 0
 12469                           
 12470                           ; BSR set to: 0
 12471  002640  0E8C               	movlw	low _Comm_List
 12472  002642  6F72               	movwf	_Pcomm_List& (0+255),b
 12473  002644  0E00               	movlw	high _Comm_List
 12474  002646  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 12475                           
 12476                           ;terminal.c: 202: Pcomm_List2 = &Comm_List[0][0];
 12477  002648  0E8C               	movlw	low _Comm_List
 12478  00264A  6F70               	movwf	_Pcomm_List2& (0+255),b
 12479  00264C  0E00               	movlw	high _Comm_List
 12480  00264E  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;terminal.c: 203: Diag_Comm2 = 1;
 12484  002650  0E00               	movlw	0
 12485  002652  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12486  002654  0E01               	movlw	1
 12487  002656  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12488                           
 12489                           ;terminal.c: 204: break;
 12490  002658  0012               	return	
 12491  00265A                     
 12492                           ; BSR set to: 0
 12493                           
 12494                           ; BSR set to: 0
 12495  00265A  0E8C               	movlw	low _Comm_List
 12496  00265C  6F70               	movwf	_Pcomm_List2& (0+255),b
 12497  00265E  0E00               	movlw	high _Comm_List
 12498  002660  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12499                           
 12500                           ;terminal.c: 207: if (Pcomm_List2 != Pcomm_List)
 12501  002662  5172               	movf	_Pcomm_List& (0+255),w,b
 12502  002664  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12503  002666  E104               	bnz	u9180
 12504  002668  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12505  00266A  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12506  00266C  B4D8               	btfsc	status,2,c
 12507  00266E  0012               	return	
 12508  002670                     u9180:
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;terminal.c: 208: {
 12512                           ;terminal.c: 209: SendMessage(Comm_List[0][0], Comm_List[0][1]);
 12513  002670  C08C  F0D8         	movff	_Comm_List,SendMessage@index
 12514  002674  C08D  F0D9         	movff	_Comm_List+1,SendMessage@index+1
 12515  002678  C08E  F0DA         	movff	_Comm_List+2,SendMessage@value
 12516  00267C  C08F  F0DB         	movff	_Comm_List+3,SendMessage@value+1
 12517  002680  EC65  F021         	call	_SendMessage	;wreg free
 12518                           
 12519                           ;terminal.c: 210: Pcomm_List2+=2;
 12520  002684  0E04               	movlw	4
 12521  002686  0100               	movlb	0	; () banked
 12522  002688  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12523  00268A  0E00               	movlw	0
 12524  00268C  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;terminal.c: 211: Diag_Comm2 = 2;
 12528  00268E  0E00               	movlw	0
 12529  002690  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12530  002692  0E02               	movlw	2
 12531  002694  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;terminal.c: 212: }
 12535                           ;terminal.c: 213: break;
 12536  002696  0012               	return	
 12537  002698                     
 12538                           ; BSR set to: 0
 12539                           
 12540                           ; BSR set to: 0
 12541  002698  5172               	movf	_Pcomm_List& (0+255),w,b
 12542  00269A  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12543  00269C  E104               	bnz	u9190
 12544  00269E  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12545  0026A0  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12546  0026A2  B4D8               	btfsc	status,2,c
 12547  0026A4  0012               	return	
 12548  0026A6                     u9190:
 12549                           
 12550                           ; BSR set to: 0
 12551                           ;terminal.c: 216: {
 12552                           ;terminal.c: 217: SendMessage(Comm_List[1][0], Comm_List[1][1]);
 12553  0026A6  C090  F0D8         	movff	_Comm_List+4,SendMessage@index
 12554  0026AA  C091  F0D9         	movff	_Comm_List+5,SendMessage@index+1
 12555  0026AE  C092  F0DA         	movff	_Comm_List+6,SendMessage@value
 12556  0026B2  C093  F0DB         	movff	_Comm_List+7,SendMessage@value+1
 12557  0026B6  EC65  F021         	call	_SendMessage	;wreg free
 12558                           
 12559                           ;terminal.c: 218: Pcomm_List2+=2;
 12560  0026BA  0E04               	movlw	4
 12561  0026BC  0100               	movlb	0	; () banked
 12562  0026BE  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12563  0026C0  0E00               	movlw	0
 12564  0026C2  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;terminal.c: 219: Diag_Comm2 = 3;
 12568  0026C4  0E00               	movlw	0
 12569  0026C6  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12570  0026C8  0E03               	movlw	3
 12571  0026CA  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;terminal.c: 220: }
 12575                           ;terminal.c: 221: break;
 12576  0026CC  0012               	return	
 12577  0026CE                     
 12578                           ; BSR set to: 0
 12579                           
 12580                           ; BSR set to: 0
 12581  0026CE  5172               	movf	_Pcomm_List& (0+255),w,b
 12582  0026D0  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12583  0026D2  E104               	bnz	u9200
 12584  0026D4  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12585  0026D6  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12586  0026D8  B4D8               	btfsc	status,2,c
 12587  0026DA  0012               	return	
 12588  0026DC                     u9200:
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;terminal.c: 224: {
 12592                           ;terminal.c: 225: SendMessage(Comm_List[2][0], Comm_List[2][1]);
 12593  0026DC  C094  F0D8         	movff	_Comm_List+8,SendMessage@index
 12594  0026E0  C095  F0D9         	movff	_Comm_List+9,SendMessage@index+1
 12595  0026E4  C096  F0DA         	movff	_Comm_List+10,SendMessage@value
 12596  0026E8  C097  F0DB         	movff	_Comm_List+11,SendMessage@value+1
 12597  0026EC  EC65  F021         	call	_SendMessage	;wreg free
 12598                           
 12599                           ;terminal.c: 226: Pcomm_List2+=2;
 12600  0026F0  0E04               	movlw	4
 12601  0026F2  0100               	movlb	0	; () banked
 12602  0026F4  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12603  0026F6  0E00               	movlw	0
 12604  0026F8  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;terminal.c: 227: Diag_Comm2 = 4;
 12608  0026FA  0E00               	movlw	0
 12609  0026FC  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12610  0026FE  0E04               	movlw	4
 12611  002700  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;terminal.c: 228: }
 12615                           ;terminal.c: 229: break;
 12616  002702  0012               	return	
 12617  002704                     
 12618                           ; BSR set to: 0
 12619                           
 12620                           ; BSR set to: 0
 12621  002704  5172               	movf	_Pcomm_List& (0+255),w,b
 12622  002706  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12623  002708  E104               	bnz	u9210
 12624  00270A  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12625  00270C  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12626  00270E  B4D8               	btfsc	status,2,c
 12627  002710  0012               	return	
 12628  002712                     u9210:
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;terminal.c: 232: {
 12632                           ;terminal.c: 233: SendMessage(Comm_List[3][0], Comm_List[3][1]);
 12633  002712  C098  F0D8         	movff	_Comm_List+12,SendMessage@index
 12634  002716  C099  F0D9         	movff	_Comm_List+13,SendMessage@index+1
 12635  00271A  C09A  F0DA         	movff	_Comm_List+14,SendMessage@value
 12636  00271E  C09B  F0DB         	movff	_Comm_List+15,SendMessage@value+1
 12637  002722  EC65  F021         	call	_SendMessage	;wreg free
 12638                           
 12639                           ;terminal.c: 234: Pcomm_List2+=2;
 12640  002726  0E04               	movlw	4
 12641  002728  0100               	movlb	0	; () banked
 12642  00272A  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12643  00272C  0E00               	movlw	0
 12644  00272E  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;terminal.c: 235: Diag_Comm2 = 5;
 12648  002730  0E00               	movlw	0
 12649  002732  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12650  002734  0E05               	movlw	5
 12651  002736  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;terminal.c: 236: }
 12655                           ;terminal.c: 237: break;
 12656  002738  0012               	return	
 12657  00273A                     
 12658                           ; BSR set to: 0
 12659                           
 12660                           ; BSR set to: 0
 12661  00273A  5172               	movf	_Pcomm_List& (0+255),w,b
 12662  00273C  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12663  00273E  E104               	bnz	u9220
 12664  002740  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12665  002742  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12666  002744  B4D8               	btfsc	status,2,c
 12667  002746  0012               	return	
 12668  002748                     u9220:
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;terminal.c: 240: {
 12672                           ;terminal.c: 241: SendMessage(Comm_List[4][0], Comm_List[4][1]);
 12673  002748  C09C  F0D8         	movff	_Comm_List+16,SendMessage@index
 12674  00274C  C09D  F0D9         	movff	_Comm_List+17,SendMessage@index+1
 12675  002750  C09E  F0DA         	movff	_Comm_List+18,SendMessage@value
 12676  002754  C09F  F0DB         	movff	_Comm_List+19,SendMessage@value+1
 12677  002758  EC65  F021         	call	_SendMessage	;wreg free
 12678                           
 12679                           ;terminal.c: 242: Pcomm_List2+=2;
 12680  00275C  0E04               	movlw	4
 12681  00275E  0100               	movlb	0	; () banked
 12682  002760  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12683  002762  0E00               	movlw	0
 12684  002764  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12685                           
 12686                           ; BSR set to: 0
 12687                           ;terminal.c: 243: Diag_Comm2 = 6;
 12688  002766  0E00               	movlw	0
 12689  002768  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12690  00276A  0E06               	movlw	6
 12691  00276C  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;terminal.c: 244: }
 12695                           ;terminal.c: 245: break;
 12696  00276E  0012               	return	
 12697  002770                     
 12698                           ; BSR set to: 0
 12699                           
 12700                           ; BSR set to: 0
 12701  002770  5172               	movf	_Pcomm_List& (0+255),w,b
 12702  002772  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12703  002774  E104               	bnz	u9230
 12704  002776  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12705  002778  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12706  00277A  B4D8               	btfsc	status,2,c
 12707  00277C  0012               	return	
 12708  00277E                     u9230:
 12709                           
 12710                           ; BSR set to: 0
 12711                           ;terminal.c: 248: {
 12712                           ;terminal.c: 249: SendMessage(Comm_List[5][0], Comm_List[5][1]);
 12713  00277E  C0A0  F0D8         	movff	_Comm_List+20,SendMessage@index
 12714  002782  C0A1  F0D9         	movff	_Comm_List+21,SendMessage@index+1
 12715  002786  C0A2  F0DA         	movff	_Comm_List+22,SendMessage@value
 12716  00278A  C0A3  F0DB         	movff	_Comm_List+23,SendMessage@value+1
 12717  00278E  EC65  F021         	call	_SendMessage	;wreg free
 12718                           
 12719                           ;terminal.c: 250: Pcomm_List2+=2;
 12720  002792  0E04               	movlw	4
 12721  002794  0100               	movlb	0	; () banked
 12722  002796  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12723  002798  0E00               	movlw	0
 12724  00279A  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;terminal.c: 251: Diag_Comm2 = 7;
 12728  00279C  0E00               	movlw	0
 12729  00279E  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12730  0027A0  0E07               	movlw	7
 12731  0027A2  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12732                           
 12733                           ; BSR set to: 0
 12734                           ;terminal.c: 252: }
 12735                           ;terminal.c: 253: break;
 12736  0027A4  0012               	return	
 12737  0027A6                     
 12738                           ; BSR set to: 0
 12739                           
 12740                           ; BSR set to: 0
 12741  0027A6  5172               	movf	_Pcomm_List& (0+255),w,b
 12742  0027A8  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12743  0027AA  E104               	bnz	u9240
 12744  0027AC  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12745  0027AE  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12746  0027B0  B4D8               	btfsc	status,2,c
 12747  0027B2  0012               	return	
 12748  0027B4                     u9240:
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;terminal.c: 256: {
 12752                           ;terminal.c: 257: SendMessage(Comm_List[6][0], Comm_List[6][1]);
 12753  0027B4  C0A4  F0D8         	movff	_Comm_List+24,SendMessage@index
 12754  0027B8  C0A5  F0D9         	movff	_Comm_List+25,SendMessage@index+1
 12755  0027BC  C0A6  F0DA         	movff	_Comm_List+26,SendMessage@value
 12756  0027C0  C0A7  F0DB         	movff	_Comm_List+27,SendMessage@value+1
 12757  0027C4  EC65  F021         	call	_SendMessage	;wreg free
 12758                           
 12759                           ;terminal.c: 258: Pcomm_List2+=2;
 12760  0027C8  0E04               	movlw	4
 12761  0027CA  0100               	movlb	0	; () banked
 12762  0027CC  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12763  0027CE  0E00               	movlw	0
 12764  0027D0  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;terminal.c: 259: Diag_Comm2 = 8;
 12768  0027D2  0E00               	movlw	0
 12769  0027D4  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12770  0027D6  0E08               	movlw	8
 12771  0027D8  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12772                           
 12773                           ; BSR set to: 0
 12774                           ;terminal.c: 260: }
 12775                           ;terminal.c: 261: break;
 12776  0027DA  0012               	return	
 12777  0027DC                     
 12778                           ; BSR set to: 0
 12779                           
 12780                           ; BSR set to: 0
 12781  0027DC  5172               	movf	_Pcomm_List& (0+255),w,b
 12782  0027DE  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12783  0027E0  E104               	bnz	u9250
 12784  0027E2  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12785  0027E4  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12786  0027E6  B4D8               	btfsc	status,2,c
 12787  0027E8  0012               	return	
 12788  0027EA                     u9250:
 12789                           
 12790                           ; BSR set to: 0
 12791                           ;terminal.c: 265: {
 12792                           ;terminal.c: 266: SendMessage(Comm_List[7][0], Comm_List[7][1]);
 12793  0027EA  C0A8  F0D8         	movff	_Comm_List+28,SendMessage@index
 12794  0027EE  C0A9  F0D9         	movff	_Comm_List+29,SendMessage@index+1
 12795  0027F2  C0AA  F0DA         	movff	_Comm_List+30,SendMessage@value
 12796  0027F6  C0AB  F0DB         	movff	_Comm_List+31,SendMessage@value+1
 12797  0027FA  EC65  F021         	call	_SendMessage	;wreg free
 12798                           
 12799                           ;terminal.c: 267: Pcomm_List2 = &Comm_List[0][0];
 12800  0027FE  0E8C               	movlw	low _Comm_List
 12801  002800  0100               	movlb	0	; () banked
 12802  002802  6F70               	movwf	_Pcomm_List2& (0+255),b
 12803  002804  0E00               	movlw	high _Comm_List
 12804  002806  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;terminal.c: 268: Diag_Comm2 = 1;
 12808  002808  0E00               	movlw	0
 12809  00280A  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12810  00280C  0E01               	movlw	1
 12811  00280E  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;terminal.c: 273: }
 12815                           
 12816                           ; BSR set to: 0
 12817                           
 12818                           ;terminal.c: 272: default : break;
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;terminal.c: 269: }
 12822                           ;terminal.c: 270: break;
 12823  002810  0012               	return	
 12824  002812                     l644:
 12825                           
 12826                           ; BSR set to: 0
 12827                           
 12828                           ; BSR set to: 0
 12829  002812  C06E  F020         	movff	_Diag_Comm2,??_DIAGNOSTICxTOxPC
 12830  002816  C06F  F021         	movff	_Diag_Comm2+1,??_DIAGNOSTICxTOxPC+1
 12831                           
 12832                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12833                           ; Switch size 1, requested type "space"
 12834                           ; Number of cases is 1, Range of values is 0 to 0
 12835                           ; switch strategies available:
 12836                           ; Name         Instructions Cycles
 12837                           ; simple_byte            4     3 (average)
 12838                           ;	Chosen strategy is simple_byte
 12839  00281A  5021               	movf	??_DIAGNOSTICxTOxPC+1,w,c
 12840  00281C  0A00               	xorlw	0	; case 0
 12841  00281E  A4D8               	btfss	status,2,c
 12842  002820  0012               	return	
 12843                           
 12844                           ; BSR set to: 0
 12845                           ; Switch size 1, requested type "space"
 12846                           ; Number of cases is 9, Range of values is 0 to 8
 12847                           ; switch strategies available:
 12848                           ; Name         Instructions Cycles
 12849                           ; simple_byte           28    15 (average)
 12850                           ;	Chosen strategy is simple_byte
 12851  002822  5020               	movf	??_DIAGNOSTICxTOxPC,w,c
 12852  002824  0A00               	xorlw	0	; case 0
 12853  002826  B4D8               	btfsc	status,2,c
 12854  002828  D70B               	goto	l645
 12855  00282A  0A01               	xorlw	1	; case 1
 12856  00282C  B4D8               	btfsc	status,2,c
 12857  00282E  D715               	goto	l647
 12858  002830  0A03               	xorlw	3	; case 2
 12859  002832  B4D8               	btfsc	status,2,c
 12860  002834  D731               	goto	l649
 12861  002836  0A01               	xorlw	1	; case 3
 12862  002838  B4D8               	btfsc	status,2,c
 12863  00283A  D749               	goto	l651
 12864  00283C  0A07               	xorlw	7	; case 4
 12865  00283E  B4D8               	btfsc	status,2,c
 12866  002840  D761               	goto	l653
 12867  002842  0A01               	xorlw	1	; case 5
 12868  002844  B4D8               	btfsc	status,2,c
 12869  002846  D779               	goto	l655
 12870  002848  0A03               	xorlw	3	; case 6
 12871  00284A  B4D8               	btfsc	status,2,c
 12872  00284C  D791               	goto	l657
 12873  00284E  0A01               	xorlw	1	; case 7
 12874  002850  B4D8               	btfsc	status,2,c
 12875  002852  D7A9               	goto	l659
 12876  002854  0A0F               	xorlw	15	; case 8
 12877  002856  A4D8               	btfss	status,2,c
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;terminal.c: 274: }
 12881  002858  0012               	return	
 12882  00285A  D7C0               	goto	l661
 12883  00285C                     l643:
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;terminal.c: 275: else{
 12887                           ;terminal.c: 276: DelayCounter++;
 12888                           
 12889                           ; BSR set to: 0
 12890  00285C  4B6C               	infsnz	_DelayCounter& (0+255),f,b
 12891  00285E  2B6D               	incf	(_DelayCounter+1)& (0+255),f,b
 12892  002860  0012               	return	
 12893  002862                     __end_of_DIAGNOSTICxTOxPC:
 12894                           	opt stack 0
 12895                           tblptru	equ	0xFF8
 12896                           tblptrh	equ	0xFF7
 12897                           tblptrl	equ	0xFF6
 12898                           tablat	equ	0xFF5
 12899                           prodh	equ	0xFF4
 12900                           prodl	equ	0xFF3
 12901                           intcon	equ	0xFF2
 12902                           intcon2	equ	0xFF1
 12903                           postinc0	equ	0xFEE
 12904                           wreg	equ	0xFE8
 12905                           postinc1	equ	0xFE6
 12906                           postdec1	equ	0xFE5
 12907                           fsr1h	equ	0xFE2
 12908                           fsr1l	equ	0xFE1
 12909                           indf2	equ	0xFDF
 12910                           postinc2	equ	0xFDE
 12911                           postdec2	equ	0xFDD
 12912                           fsr2h	equ	0xFDA
 12913                           fsr2l	equ	0xFD9
 12914                           status	equ	0xFD8
 12915                           
 12916 ;; *************** function _SendMessage *****************
 12917 ;; Defined at:
 12918 ;;		line 185 in file "../terminal.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;  index           2   34[BANK0 ] unsigned int 
 12921 ;;  value           2   36[BANK0 ] unsigned int 
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;		None
 12924 ;; Return value:  Size  Location     Type
 12925 ;;                  1    wreg      void 
 12926 ;; Registers used:
 12927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12928 ;; Tracked objects:
 12929 ;;		On entry : 0/0
 12930 ;;		On exit  : 0/0
 12931 ;;		Unchanged: 0/0
 12932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12933 ;;      Params:         0       4       0       0       0       0       0       0       0
 12934 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12936 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12937 ;;Total ram usage:        4 bytes
 12938 ;; Hardware stack levels used:    1
 12939 ;; Hardware stack levels required when called:    5
 12940 ;; This function calls:
 12941 ;;		_printf
 12942 ;; This function is called by:
 12943 ;;		_DIAGNOSTICxTOxPC
 12944 ;; This function uses a non-reentrant model
 12945 ;;
 12946                           
 12947                           	psect	text36
 12948  0042CA                     __ptext36:
 12949                           	opt stack 0
 12950  0042CA                     _SendMessage:
 12951                           	opt stack 24
 12952                           
 12953                           ;terminal.c: 191: printf("M#%d %d\r\n", index, value);
 12954                           
 12955                           ; BSR set to: 0
 12956                           ;incstack = 0
 12957  0042CA  0E44               	movlw	low STR_8
 12958  0042CC  0100               	movlb	0	; () banked
 12959  0042CE  6FCB               	movwf	printf@f& (0+255),b
 12960  0042D0  0E08               	movlw	high STR_8
 12961  0042D2  6FCC               	movwf	(printf@f+1)& (0+255),b
 12962  0042D4  C0D8  F0CD         	movff	SendMessage@index,?_printf+2
 12963  0042D8  C0D9  F0CE         	movff	SendMessage@index+1,?_printf+3
 12964  0042DC  C0DA  F0CF         	movff	SendMessage@value,?_printf+4
 12965  0042E0  C0DB  F0D0         	movff	SendMessage@value+1,?_printf+5
 12966  0042E4  ECFC  F019         	call	_printf	;wreg free
 12967  0042E8  0012               	return		;funcret
 12968  0042EA                     __end_of_SendMessage:
 12969                           	opt stack 0
 12970                           tblptru	equ	0xFF8
 12971                           tblptrh	equ	0xFF7
 12972                           tblptrl	equ	0xFF6
 12973                           tablat	equ	0xFF5
 12974                           prodh	equ	0xFF4
 12975                           prodl	equ	0xFF3
 12976                           intcon	equ	0xFF2
 12977                           intcon2	equ	0xFF1
 12978                           postinc0	equ	0xFEE
 12979                           wreg	equ	0xFE8
 12980                           postinc1	equ	0xFE6
 12981                           postdec1	equ	0xFE5
 12982                           fsr1h	equ	0xFE2
 12983                           fsr1l	equ	0xFE1
 12984                           indf2	equ	0xFDF
 12985                           postinc2	equ	0xFDE
 12986                           postdec2	equ	0xFDD
 12987                           fsr2h	equ	0xFDA
 12988                           fsr2l	equ	0xFD9
 12989                           status	equ	0xFD8
 12990                           
 12991 ;; *************** function _printf *****************
 12992 ;; Defined at:
 12993 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 12994 ;; Parameters:    Size  Location     Type
 12995 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 12996 ;;		 -> STR_8(10), STR_7(7), STR_6(7), STR_5(7), 
 12997 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  tmpval          4    0        struct .
 13000 ;;  cp              3    0        PTR const unsigned char 
 13001 ;;  val             2   31[BANK0 ] unsigned int 
 13002 ;;  ap              2   27[BANK0 ] PTR void [1]
 13003 ;;		 -> ?_printf(2), 
 13004 ;;  len             2    0        unsigned int 
 13005 ;;  c               1   33[BANK0 ] char 
 13006 ;;  prec            1   30[BANK0 ] char 
 13007 ;;  flag            1   29[BANK0 ] unsigned char 
 13008 ;; Return value:  Size  Location     Type
 13009 ;;                  2   21[BANK0 ] int 
 13010 ;; Registers used:
 13011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13012 ;; Tracked objects:
 13013 ;;		On entry : 0/0
 13014 ;;		On exit  : 0/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13017 ;;      Params:         0       6       0       0       0       0       0       0       0
 13018 ;;      Locals:         0       7       0       0       0       0       0       0       0
 13019 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13020 ;;      Totals:         1      13       0       0       0       0       0       0       0
 13021 ;;Total ram usage:       14 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    4
 13024 ;; This function calls:
 13025 ;;		___lwdiv
 13026 ;;		___lwmod
 13027 ;;		_putch
 13028 ;; This function is called by:
 13029 ;;		_READxRECEIVEDxMESSAGE
 13030 ;;		_TranslateMessage
 13031 ;;		_SendMessage
 13032 ;; This function uses a non-reentrant model
 13033 ;;
 13034                           
 13035                           	psect	text37
 13036  0033F8                     __ptext37:
 13037                           	opt stack 0
 13038  0033F8                     _printf:
 13039                           	opt stack 25
 13040                           
 13041                           ;doprnt.c: 466: va_list ap;
 13042                           ;doprnt.c: 499: signed char c;
 13043                           ;doprnt.c: 506: signed char prec;
 13044                           ;doprnt.c: 508: unsigned char flag;
 13045                           ;doprnt.c: 523: union {
 13046                           ;doprnt.c: 524: unsigned long vd;
 13047                           ;doprnt.c: 525: double integ;
 13048                           ;doprnt.c: 526: } tmpval;
 13049                           ;doprnt.c: 528: unsigned int val;
 13050                           ;doprnt.c: 529: unsigned len;
 13051                           ;doprnt.c: 530: const char * cp;
 13052                           ;doprnt.c: 533: *ap = __va_start();
 13053                           
 13054                           ;incstack = 0
 13055  0033F8  0ECD               	movlw	low (?_printf+2)
 13056  0033FA  0100               	movlb	0	; () banked
 13057  0033FC  6FD1               	movwf	printf@ap& (0+255),b
 13058  0033FE  0E00               	movlw	high (?_printf+2)
 13059  003400  6FD2               	movwf	(printf@ap+1)& (0+255),b
 13060                           
 13061                           ;doprnt.c: 536: while(c = *f++) {
 13062  003402  D081               	goto	u7080
 13063  003404                     
 13064                           ; BSR set to: 0
 13065                           ;doprnt.c: 538: if(c != '%')
 13066                           
 13067                           ; BSR set to: 0
 13068  003404  0E25               	movlw	37
 13069  003406  19D7               	xorwf	printf@c& (0+255),w,b
 13070  003408  B4D8               	btfsc	status,2,c
 13071  00340A  D004               	goto	l1260
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;doprnt.c: 540: {
 13075                           ;doprnt.c: 541: (putch(c) );
 13076  00340C  51D7               	movf	printf@c& (0+255),w,b
 13077  00340E  ECAC  F021         	call	_putch
 13078                           
 13079                           ;doprnt.c: 542: continue;
 13080  003412  D079               	goto	u7080
 13081  003414                     l1260:
 13082                           
 13083                           ;doprnt.c: 543: }
 13084                           ;doprnt.c: 548: flag = 0;
 13085  003414  0E00               	movlw	0
 13086  003416  0100               	movlb	0	; () banked
 13087  003418  6FD3               	movwf	printf@flag& (0+255),b
 13088                           
 13089                           ; BSR set to: 0
 13090                           
 13091                           ; BSR set to: 0
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;doprnt.c: 822: }
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;doprnt.c: 813: continue;
 13098                           
 13099                           ;doprnt.c: 802: default:
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;doprnt.c: 698: case 'i':
 13103                           ;doprnt.c: 699: break;
 13104                           
 13105                           ; BSR set to: 0
 13106                           
 13107                           ;doprnt.c: 697: case 'd':
 13108                           
 13109                           ; BSR set to: 0
 13110                           ;doprnt.c: 638: goto alldone;
 13111                           
 13112                           ;doprnt.c: 637: case 0:
 13113                           
 13114                           ;doprnt.c: 635: switch(c = *f++) {
 13115  00341A  C0CB  FFF6         	movff	printf@f,tblptrl
 13116  00341E  C0CC  FFF7         	movff	printf@f+1,tblptrh
 13117  003422  4BCB               	infsnz	printf@f& (0+255),f,b
 13118  003424  2BCC               	incf	(printf@f+1)& (0+255),f,b
 13119  003426                     	if	0	;tblptru may be non-zero
 13120  003426                     	endif
 13121  003426                     	if	0	;tblptru may be non-zero
 13122  003426                     	endif
 13123  003426  0008               	tblrd		*
 13124  003428  CFF5 F0D7          	movff	tablat,printf@c
 13125  00342C  51D7               	movf	printf@c& (0+255),w,b
 13126                           
 13127                           ; Switch size 1, requested type "space"
 13128                           ; Number of cases is 3, Range of values is 0 to 105
 13129                           ; switch strategies available:
 13130                           ; Name         Instructions Cycles
 13131                           ; simple_byte           10     6 (average)
 13132                           ;	Chosen strategy is simple_byte
 13133  00342E  0A00               	xorlw	0	; case 0
 13134  003430  B4D8               	btfsc	status,2,c
 13135  003432  0012               	return	
 13136  003434  0A64               	xorlw	100	; case 100
 13137  003436  B4D8               	btfsc	status,2,c
 13138  003438  D003               	goto	l1266
 13139  00343A  0A0D               	xorlw	13	; case 105
 13140  00343C  A4D8               	btfss	status,2,c
 13141  00343E  D063               	goto	u7080
 13142  003440                     l1266:
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;doprnt.c: 1253: {
 13146                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13147                           
 13148                           ; BSR set to: 0
 13149  003440  C0D1  FFD9         	movff	printf@ap,fsr2l
 13150  003444  C0D2  FFDA         	movff	printf@ap+1,fsr2h
 13151  003448  CFDE F0D5          	movff	postinc2,printf@val
 13152  00344C  CFDD F0D6          	movff	postdec2,printf@val+1
 13153                           
 13154                           ; BSR set to: 0
 13155  003450  0E02               	movlw	2
 13156  003452  27D1               	addwf	printf@ap& (0+255),f,b
 13157  003454  0E00               	movlw	0
 13158  003456  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
 13159                           
 13160                           ; BSR set to: 0
 13161                           ;doprnt.c: 1261: if((int)val < 0) {
 13162  003458  AFD6               	btfss	(printf@val+1)& (0+255),7,b
 13163  00345A  D006               	goto	l1268
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;doprnt.c: 1262: flag |= 0x03;
 13167  00345C  0E03               	movlw	3
 13168  00345E  13D3               	iorwf	printf@flag& (0+255),f,b
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;doprnt.c: 1263: val = -val;
 13172  003460  6DD5               	negf	printf@val& (0+255),b
 13173  003462  1FD6               	comf	(printf@val+1)& (0+255),f,b
 13174  003464  B0D8               	btfsc	status,0,c
 13175  003466  2BD6               	incf	(printf@val+1)& (0+255),f,b
 13176  003468                     l1268:
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;doprnt.c: 1264: }
 13180                           ;doprnt.c: 1266: }
 13181                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13182                           
 13183                           ; BSR set to: 0
 13184  003468  0E01               	movlw	1
 13185  00346A  6FD7               	movwf	printf@c& (0+255),b
 13186  00346C                     l8074:
 13187                           
 13188                           ; BSR set to: 0
 13189  00346C  0E05               	movlw	5
 13190  00346E  19D7               	xorwf	printf@c& (0+255),w,b
 13191  003470  B4D8               	btfsc	status,2,c
 13192  003472  D012               	goto	u7060
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;doprnt.c: 1306: if(val < dpowers[c])
 13196                           
 13197                           ; BSR set to: 0
 13198                           
 13199                           ; BSR set to: 0
 13200  003474  51D7               	movf	printf@c& (0+255),w,b
 13201  003476  0D02               	mullw	2
 13202  003478  0E39               	movlw	low _dpowers
 13203  00347A  24F3               	addwf	prodl,w,c
 13204  00347C  6EF6               	movwf	tblptrl,c
 13205  00347E  0E08               	movlw	high _dpowers
 13206  003480  20F4               	addwfc	prodh,w,c
 13207  003482  6EF7               	movwf	tblptrh,c
 13208  003484                     	if	0	;There are less than 3 active tblptr bytes
 13209  003484                     	endif
 13210  003484  0009               	tblrd		*+
 13211  003486  50F5               	movf	tablat,w,c
 13212  003488  5DD5               	subwf	printf@val& (0+255),w,b
 13213  00348A  0009               	tblrd		*+
 13214  00348C  50F5               	movf	tablat,w,c
 13215  00348E  59D6               	subwfb	(printf@val+1)& (0+255),w,b
 13216  003490  A0D8               	btfss	status,0,c
 13217  003492  D002               	goto	u7060
 13218                           
 13219                           ; BSR set to: 0
 13220                           
 13221                           ; BSR set to: 0
 13222                           
 13223                           ; BSR set to: 0
 13224                           ;doprnt.c: 1307: break;
 13225  003494  2BD7               	incf	printf@c& (0+255),f,b
 13226  003496  D7EA               	goto	l8074
 13227  003498                     u7060:
 13228                           
 13229                           ; BSR set to: 0
 13230                           ;doprnt.c: 1422: {
 13231                           ;doprnt.c: 1438: if(flag & 0x03)
 13232                           
 13233                           ; BSR set to: 0
 13234  003498  C0D3  F01F         	movff	printf@flag,??_printf
 13235  00349C  0E03               	movlw	3
 13236  00349E  161F               	andwf	??_printf,f,c
 13237  0034A0  B4D8               	btfsc	status,2,c
 13238  0034A2  D003               	goto	l1272
 13239                           
 13240                           ; BSR set to: 0
 13241                           ;doprnt.c: 1439: (putch('-') );
 13242  0034A4  0E2D               	movlw	45
 13243  0034A6  ECAC  F021         	call	_putch
 13244  0034AA                     l1272:
 13245                           
 13246                           ;doprnt.c: 1469: }
 13247                           ;doprnt.c: 1472: prec = c;
 13248  0034AA  C0D7  F0D4         	movff	printf@c,printf@prec
 13249                           
 13250                           ;doprnt.c: 1474: while(prec--) {
 13251  0034AE  D026               	goto	l1273
 13252  0034B0                     
 13253                           ;doprnt.c: 1478: {
 13254                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13255  0034B0  0100               	movlb	0	; () banked
 13256  0034B2  51D4               	movf	printf@prec& (0+255),w,b
 13257  0034B4  0D02               	mullw	2
 13258  0034B6  0E39               	movlw	low _dpowers
 13259  0034B8  24F3               	addwf	prodl,w,c
 13260  0034BA  6EF6               	movwf	tblptrl,c
 13261  0034BC  0E08               	movlw	high _dpowers
 13262  0034BE  20F4               	addwfc	prodh,w,c
 13263  0034C0  6EF7               	movwf	tblptrh,c
 13264  0034C2                     	if	0	;There are less than 3 active tblptr bytes
 13265  0034C2                     	endif
 13266  0034C2  0009               	tblrd		*+
 13267  0034C4  CFF5 F015          	movff	tablat,___lwdiv@divisor
 13268  0034C8  000A               	tblrd		*-
 13269  0034CA  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
 13270  0034CE  C0D5  F013         	movff	printf@val,___lwdiv@dividend
 13271  0034D2  C0D6  F014         	movff	printf@val+1,___lwdiv@dividend+1
 13272  0034D6  EC26  F020         	call	___lwdiv	;wreg free
 13273  0034DA  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
 13274  0034DE  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
 13275  0034E2  0E00               	movlw	0
 13276  0034E4  6E1D               	movwf	___lwmod@divisor+1,c
 13277  0034E6  0E0A               	movlw	10
 13278  0034E8  6E1C               	movwf	___lwmod@divisor,c
 13279  0034EA  EC9B  F020         	call	___lwmod	;wreg free
 13280  0034EE  501A               	movf	?___lwmod,w,c
 13281  0034F0  0F30               	addlw	48
 13282  0034F2  0100               	movlb	0	; () banked
 13283  0034F4  6FD7               	movwf	printf@c& (0+255),b
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;doprnt.c: 1523: }
 13287                           ;doprnt.c: 1524: (putch(c) );
 13288  0034F6  51D7               	movf	printf@c& (0+255),w,b
 13289  0034F8  ECAC  F021         	call	_putch
 13290  0034FC                     l1273:
 13291  0034FC  0100               	movlb	0	; () banked
 13292  0034FE  07D4               	decf	printf@prec& (0+255),f,b
 13293  003500  29D4               	incf	printf@prec& (0+255),w,b
 13294  003502  A4D8               	btfss	status,2,c
 13295  003504  D7D5               	goto	l1274
 13296  003506                     u7080:
 13297                           
 13298                           ; BSR set to: 0
 13299                           
 13300                           ; BSR set to: 0
 13301  003506  C0CB  FFF6         	movff	printf@f,tblptrl
 13302  00350A  C0CC  FFF7         	movff	printf@f+1,tblptrh
 13303  00350E  0100               	movlb	0	; () banked
 13304  003510  4BCB               	infsnz	printf@f& (0+255),f,b
 13305  003512  2BCC               	incf	(printf@f+1)& (0+255),f,b
 13306  003514                     	if	0	;tblptru may be non-zero
 13307  003514                     	endif
 13308  003514                     	if	0	;tblptru may be non-zero
 13309  003514                     	endif
 13310  003514  0008               	tblrd		*
 13311  003516  CFF5 F0D7          	movff	tablat,printf@c
 13312  00351A  51D7               	movf	printf@c& (0+255),w,b
 13313  00351C  B4D8               	btfsc	status,2,c
 13314  00351E  0012               	return	
 13315  003520  D771               	goto	l1259
 13316  003522                     __end_of_printf:
 13317                           	opt stack 0
 13318                           tblptru	equ	0xFF8
 13319                           tblptrh	equ	0xFF7
 13320                           tblptrl	equ	0xFF6
 13321                           tablat	equ	0xFF5
 13322                           prodh	equ	0xFF4
 13323                           prodl	equ	0xFF3
 13324                           intcon	equ	0xFF2
 13325                           intcon2	equ	0xFF1
 13326                           postinc0	equ	0xFEE
 13327                           wreg	equ	0xFE8
 13328                           postinc1	equ	0xFE6
 13329                           postdec1	equ	0xFE5
 13330                           fsr1h	equ	0xFE2
 13331                           fsr1l	equ	0xFE1
 13332                           indf2	equ	0xFDF
 13333                           postinc2	equ	0xFDE
 13334                           postdec2	equ	0xFDD
 13335                           fsr2h	equ	0xFDA
 13336                           fsr2l	equ	0xFD9
 13337                           status	equ	0xFD8
 13338                           
 13339 ;; *************** function _putch *****************
 13340 ;; Defined at:
 13341 ;;		line 178 in file "../eusart1.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;  data            1    wreg     unsigned char 
 13344 ;; Auto vars:     Size  Location     Type
 13345 ;;  data            1   18[COMRAM] unsigned char 
 13346 ;; Return value:  Size  Location     Type
 13347 ;;                  1    wreg      void 
 13348 ;; Registers used:
 13349 ;;		wreg
 13350 ;; Tracked objects:
 13351 ;;		On entry : 0/0
 13352 ;;		On exit  : 0/0
 13353 ;;		Unchanged: 0/0
 13354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13355 ;;      Params:         0       0       0       0       0       0       0       0       0
 13356 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13357 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13358 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13359 ;;Total ram usage:        1 bytes
 13360 ;; Hardware stack levels used:    1
 13361 ;; Hardware stack levels required when called:    3
 13362 ;; This function calls:
 13363 ;;		Nothing
 13364 ;; This function is called by:
 13365 ;;		_printf
 13366 ;; This function uses a non-reentrant model
 13367 ;;
 13368                           
 13369                           	psect	text38
 13370  004358                     __ptext38:
 13371                           	opt stack 0
 13372  004358                     _putch:
 13373                           	opt stack 25
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;incstack = 0
 13377                           ;putch@data stored from wreg
 13378  004358  6E13               	movwf	putch@data,c
 13379  00435A                     
 13380                           ;eusart1.c: 180: continue;
 13381                           
 13382                           ;eusart1.c: 179: while(! TXIF)
 13383  00435A  A89E               	btfss	3998,4,c	;volatile
 13384  00435C  D7FE               	goto	l7510
 13385                           
 13386                           ;eusart1.c: 181: TXREG1 = data;
 13387  00435E  C013  FFAD         	movff	putch@data,4013	;volatile
 13388  004362  0012               	return		;funcret
 13389  004364                     __end_of_putch:
 13390                           	opt stack 0
 13391                           tblptru	equ	0xFF8
 13392                           tblptrh	equ	0xFF7
 13393                           tblptrl	equ	0xFF6
 13394                           tablat	equ	0xFF5
 13395                           prodh	equ	0xFF4
 13396                           prodl	equ	0xFF3
 13397                           intcon	equ	0xFF2
 13398                           intcon2	equ	0xFF1
 13399                           postinc0	equ	0xFEE
 13400                           wreg	equ	0xFE8
 13401                           postinc1	equ	0xFE6
 13402                           postdec1	equ	0xFE5
 13403                           fsr1h	equ	0xFE2
 13404                           fsr1l	equ	0xFE1
 13405                           indf2	equ	0xFDF
 13406                           postinc2	equ	0xFDE
 13407                           postdec2	equ	0xFDD
 13408                           fsr2h	equ	0xFDA
 13409                           fsr2l	equ	0xFD9
 13410                           status	equ	0xFD8
 13411                           
 13412 ;; *************** function ___lwmod *****************
 13413 ;; Defined at:
 13414 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;  dividend        2   25[COMRAM] unsigned int 
 13417 ;;  divisor         2   27[COMRAM] unsigned int 
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;  counter         1   29[COMRAM] unsigned char 
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  2   25[COMRAM] unsigned int 
 13422 ;; Registers used:
 13423 ;;		wreg, status,2, status,0
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13429 ;;      Params:         4       0       0       0       0       0       0       0       0
 13430 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13431 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13432 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13433 ;;Total ram usage:        5 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    3
 13436 ;; This function calls:
 13437 ;;		Nothing
 13438 ;; This function is called by:
 13439 ;;		_printf
 13440 ;; This function uses a non-reentrant model
 13441 ;;
 13442                           
 13443                           	psect	text39
 13444  004136                     __ptext39:
 13445                           	opt stack 0
 13446  004136                     ___lwmod:
 13447                           	opt stack 25
 13448                           
 13449                           ;incstack = 0
 13450  004136  501C               	movf	___lwmod@divisor,w,c
 13451  004138  101D               	iorwf	___lwmod@divisor+1,w,c
 13452  00413A  B4D8               	btfsc	status,2,c
 13453  00413C  D018               	goto	l1723
 13454  00413E  0E01               	movlw	1
 13455  004140  6E1E               	movwf	___lwmod@counter,c
 13456  004142  D004               	goto	l1718
 13457  004144  90D8               	bcf	status,0,c
 13458  004146  361C               	rlcf	___lwmod@divisor,f,c
 13459  004148  361D               	rlcf	___lwmod@divisor+1,f,c
 13460  00414A  2A1E               	incf	___lwmod@counter,f,c
 13461  00414C                     l1718:
 13462  00414C  AE1D               	btfss	___lwmod@divisor+1,7,c
 13463  00414E  D7FA               	goto	l1719
 13464  004150                     u6500:
 13465  004150  501C               	movf	___lwmod@divisor,w,c
 13466  004152  5C1A               	subwf	___lwmod@dividend,w,c
 13467  004154  501D               	movf	___lwmod@divisor+1,w,c
 13468  004156  581B               	subwfb	___lwmod@dividend+1,w,c
 13469  004158  A0D8               	btfss	status,0,c
 13470  00415A  D004               	goto	l1722
 13471  00415C  501C               	movf	___lwmod@divisor,w,c
 13472  00415E  5E1A               	subwf	___lwmod@dividend,f,c
 13473  004160  501D               	movf	___lwmod@divisor+1,w,c
 13474  004162  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13475  004164                     l1722:
 13476  004164  90D8               	bcf	status,0,c
 13477  004166  321D               	rrcf	___lwmod@divisor+1,f,c
 13478  004168  321C               	rrcf	___lwmod@divisor,f,c
 13479  00416A  2E1E               	decfsz	___lwmod@counter,f,c
 13480  00416C  D7F1               	goto	u6500
 13481  00416E                     l1723:
 13482  00416E  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13483  004172  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13484  004176  0012               	return		;funcret
 13485  004178                     __end_of___lwmod:
 13486                           	opt stack 0
 13487                           tblptru	equ	0xFF8
 13488                           tblptrh	equ	0xFF7
 13489                           tblptrl	equ	0xFF6
 13490                           tablat	equ	0xFF5
 13491                           prodh	equ	0xFF4
 13492                           prodl	equ	0xFF3
 13493                           intcon	equ	0xFF2
 13494                           intcon2	equ	0xFF1
 13495                           postinc0	equ	0xFEE
 13496                           wreg	equ	0xFE8
 13497                           postinc1	equ	0xFE6
 13498                           postdec1	equ	0xFE5
 13499                           fsr1h	equ	0xFE2
 13500                           fsr1l	equ	0xFE1
 13501                           indf2	equ	0xFDF
 13502                           postinc2	equ	0xFDE
 13503                           postdec2	equ	0xFDD
 13504                           fsr2h	equ	0xFDA
 13505                           fsr2l	equ	0xFD9
 13506                           status	equ	0xFD8
 13507                           
 13508 ;; *************** function ___lwdiv *****************
 13509 ;; Defined at:
 13510 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13511 ;; Parameters:    Size  Location     Type
 13512 ;;  dividend        2   18[COMRAM] unsigned int 
 13513 ;;  divisor         2   20[COMRAM] unsigned int 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;  quotient        2   23[COMRAM] unsigned int 
 13516 ;;  counter         1   22[COMRAM] unsigned char 
 13517 ;; Return value:  Size  Location     Type
 13518 ;;                  2   18[COMRAM] unsigned int 
 13519 ;; Registers used:
 13520 ;;		wreg, status,2, status,0
 13521 ;; Tracked objects:
 13522 ;;		On entry : 0/0
 13523 ;;		On exit  : 0/0
 13524 ;;		Unchanged: 0/0
 13525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13526 ;;      Params:         4       0       0       0       0       0       0       0       0
 13527 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13528 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13529 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13530 ;;Total ram usage:        7 bytes
 13531 ;; Hardware stack levels used:    1
 13532 ;; Hardware stack levels required when called:    3
 13533 ;; This function calls:
 13534 ;;		Nothing
 13535 ;; This function is called by:
 13536 ;;		_printf
 13537 ;; This function uses a non-reentrant model
 13538 ;;
 13539                           
 13540                           	psect	text40
 13541  00404C                     __ptext40:
 13542                           	opt stack 0
 13543  00404C                     ___lwdiv:
 13544                           	opt stack 25
 13545                           
 13546                           ;incstack = 0
 13547  00404C  0E00               	movlw	0
 13548  00404E  6E19               	movwf	___lwdiv@quotient+1,c
 13549  004050  0E00               	movlw	0
 13550  004052  6E18               	movwf	___lwdiv@quotient,c
 13551  004054  5015               	movf	___lwdiv@divisor,w,c
 13552  004056  1016               	iorwf	___lwdiv@divisor+1,w,c
 13553  004058  B4D8               	btfsc	status,2,c
 13554  00405A  D01C               	goto	l1713
 13555  00405C  0E01               	movlw	1
 13556  00405E  6E17               	movwf	___lwdiv@counter,c
 13557  004060  D004               	goto	l1708
 13558  004062  90D8               	bcf	status,0,c
 13559  004064  3615               	rlcf	___lwdiv@divisor,f,c
 13560  004066  3616               	rlcf	___lwdiv@divisor+1,f,c
 13561  004068  2A17               	incf	___lwdiv@counter,f,c
 13562  00406A                     l1708:
 13563  00406A  AE16               	btfss	___lwdiv@divisor+1,7,c
 13564  00406C  D7FA               	goto	l1709
 13565  00406E                     u6470:
 13566  00406E  90D8               	bcf	status,0,c
 13567  004070  3618               	rlcf	___lwdiv@quotient,f,c
 13568  004072  3619               	rlcf	___lwdiv@quotient+1,f,c
 13569  004074  5015               	movf	___lwdiv@divisor,w,c
 13570  004076  5C13               	subwf	___lwdiv@dividend,w,c
 13571  004078  5016               	movf	___lwdiv@divisor+1,w,c
 13572  00407A  5814               	subwfb	___lwdiv@dividend+1,w,c
 13573  00407C  A0D8               	btfss	status,0,c
 13574  00407E  D005               	goto	l1712
 13575  004080  5015               	movf	___lwdiv@divisor,w,c
 13576  004082  5E13               	subwf	___lwdiv@dividend,f,c
 13577  004084  5016               	movf	___lwdiv@divisor+1,w,c
 13578  004086  5A14               	subwfb	___lwdiv@dividend+1,f,c
 13579  004088  8018               	bsf	___lwdiv@quotient,0,c
 13580  00408A                     l1712:
 13581  00408A  90D8               	bcf	status,0,c
 13582  00408C  3216               	rrcf	___lwdiv@divisor+1,f,c
 13583  00408E  3215               	rrcf	___lwdiv@divisor,f,c
 13584  004090  2E17               	decfsz	___lwdiv@counter,f,c
 13585  004092  D7ED               	goto	u6470
 13586  004094                     l1713:
 13587  004094  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
 13588  004098  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13589  00409C  0012               	return		;funcret
 13590  00409E                     __end_of___lwdiv:
 13591                           	opt stack 0
 13592                           tblptru	equ	0xFF8
 13593                           tblptrh	equ	0xFF7
 13594                           tblptrl	equ	0xFF6
 13595                           tablat	equ	0xFF5
 13596                           prodh	equ	0xFF4
 13597                           prodl	equ	0xFF3
 13598                           intcon	equ	0xFF2
 13599                           intcon2	equ	0xFF1
 13600                           postinc0	equ	0xFEE
 13601                           wreg	equ	0xFE8
 13602                           postinc1	equ	0xFE6
 13603                           postdec1	equ	0xFE5
 13604                           fsr1h	equ	0xFE2
 13605                           fsr1l	equ	0xFE1
 13606                           indf2	equ	0xFDF
 13607                           postinc2	equ	0xFDE
 13608                           postdec2	equ	0xFDD
 13609                           fsr2h	equ	0xFDA
 13610                           fsr2l	equ	0xFD9
 13611                           status	equ	0xFD8
 13612                           
 13613 ;; *************** function _APIxInitialize *****************
 13614 ;; Defined at:
 13615 ;;		line 33 in file "../api.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;		None
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;  i               2   18[COMRAM] unsigned int 
 13620 ;; Return value:  Size  Location     Type
 13621 ;;                  1    wreg      void 
 13622 ;; Registers used:
 13623 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13624 ;; Tracked objects:
 13625 ;;		On entry : 0/0
 13626 ;;		On exit  : 0/0
 13627 ;;		Unchanged: 0/0
 13628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13629 ;;      Params:         0       0       0       0       0       0       0       0       0
 13630 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13631 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13632 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13633 ;;Total ram usage:        2 bytes
 13634 ;; Hardware stack levels used:    1
 13635 ;; Hardware stack levels required when called:    3
 13636 ;; This function calls:
 13637 ;;		Nothing
 13638 ;; This function is called by:
 13639 ;;		_main
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           	psect	text41
 13644  001D52                     __ptext41:
 13645                           	opt stack 0
 13646  001D52                     _APIxInitialize:
 13647                           	opt stack 27
 13648                           
 13649                           ;api.c: 35: unsigned int i;
 13650                           ;api.c: 36: for(i = 0; i < (89); i++ )
 13651                           
 13652                           ;incstack = 0
 13653  001D52  0E00               	movlw	0
 13654  001D54  6E14               	movwf	APIxInitialize@i+1,c
 13655  001D56  0E00               	movlw	0
 13656  001D58  6E13               	movwf	APIxInitialize@i,c
 13657  001D5A                     l6138:
 13658  001D5A  5014               	movf	APIxInitialize@i+1,w,c
 13659  001D5C  E12E               	bnz	l6148
 13660  001D5E  0E59               	movlw	89
 13661  001D60  5C13               	subwf	APIxInitialize@i,w,c
 13662  001D62  B0D8               	btfsc	status,0,c
 13663  001D64  D02A               	goto	u5200
 13664                           
 13665                           ;api.c: 37: {
 13666                           ;api.c: 38: API_RW[i] = 0;
 13667  001D66  90D8               	bcf	status,0,c
 13668  001D68  3413               	rlcf	APIxInitialize@i,w,c
 13669  001D6A  6ED9               	movwf	fsr2l,c
 13670  001D6C  3414               	rlcf	APIxInitialize@i+1,w,c
 13671  001D6E  6EDA               	movwf	fsr2h,c
 13672  001D70  0E00               	movlw	low _API_RW
 13673  001D72  26D9               	addwf	fsr2l,f,c
 13674  001D74  0E02               	movlw	high _API_RW
 13675  001D76  22DA               	addwfc	fsr2h,f,c
 13676  001D78  0E00               	movlw	0
 13677  001D7A  6EDE               	movwf	postinc2,c
 13678  001D7C  0E00               	movlw	0
 13679  001D7E  6EDD               	movwf	postdec2,c
 13680                           
 13681                           ;api.c: 39: API[i] = 0;
 13682  001D80  90D8               	bcf	status,0,c
 13683  001D82  3413               	rlcf	APIxInitialize@i,w,c
 13684  001D84  6ED9               	movwf	fsr2l,c
 13685  001D86  3414               	rlcf	APIxInitialize@i+1,w,c
 13686  001D88  6EDA               	movwf	fsr2h,c
 13687  001D8A  0E00               	movlw	low _API
 13688  001D8C  26D9               	addwf	fsr2l,f,c
 13689  001D8E  0E01               	movlw	high _API
 13690  001D90  22DA               	addwfc	fsr2h,f,c
 13691  001D92  0E00               	movlw	0
 13692  001D94  6EDE               	movwf	postinc2,c
 13693  001D96  0E00               	movlw	0
 13694  001D98  6EDD               	movwf	postdec2,c
 13695                           
 13696                           ;api.c: 40: API_EEPROM[i] = 0xFFFF;
 13697  001D9A  90D8               	bcf	status,0,c
 13698  001D9C  3413               	rlcf	APIxInitialize@i,w,c
 13699  001D9E  6ED9               	movwf	fsr2l,c
 13700  001DA0  3414               	rlcf	APIxInitialize@i+1,w,c
 13701  001DA2  6EDA               	movwf	fsr2h,c
 13702  001DA4  0E00               	movlw	low _API_EEPROM
 13703  001DA6  26D9               	addwf	fsr2l,f,c
 13704  001DA8  0E03               	movlw	high _API_EEPROM
 13705  001DAA  22DA               	addwfc	fsr2h,f,c
 13706  001DAC  0EFF               	movlw	255
 13707  001DAE  6EDE               	movwf	postinc2,c
 13708  001DB0  0EFF               	movlw	255
 13709  001DB2  6EDD               	movwf	postdec2,c
 13710  001DB4  4A13               	infsnz	APIxInitialize@i,f,c
 13711  001DB6  2A14               	incf	APIxInitialize@i+1,f,c
 13712  001DB8  D7D0               	goto	l6138
 13713  001DBA                     u5200:
 13714  001DBA                     l6148:
 13715                           
 13716                           ;api.c: 41: }
 13717                           ;api.c: 44: API_RW[16] = 0;
 13718  001DBA  0E00               	movlw	0
 13719  001DBC  0102               	movlb	2	; () banked
 13720  001DBE  6F21               	movwf	(_API_RW+33)& (0+255),b
 13721  001DC0  0E00               	movlw	0
 13722  001DC2  6F20               	movwf	(_API_RW+32)& (0+255),b
 13723                           
 13724                           ;api.c: 45: API_RW[17] = 0;
 13725  001DC4  0E00               	movlw	0
 13726  001DC6  6F23               	movwf	(_API_RW+35)& (0+255),b
 13727  001DC8  0E00               	movlw	0
 13728  001DCA  6F22               	movwf	(_API_RW+34)& (0+255),b
 13729                           
 13730                           ;api.c: 46: API_RW[18] = 1;
 13731  001DCC  0E00               	movlw	0
 13732  001DCE  6F25               	movwf	(_API_RW+37)& (0+255),b
 13733  001DD0  0E01               	movlw	1
 13734  001DD2  6F24               	movwf	(_API_RW+36)& (0+255),b
 13735                           
 13736                           ;api.c: 47: API_RW[19] = 1;
 13737  001DD4  0E00               	movlw	0
 13738  001DD6  6F27               	movwf	(_API_RW+39)& (0+255),b
 13739  001DD8  0E01               	movlw	1
 13740  001DDA  6F26               	movwf	(_API_RW+38)& (0+255),b
 13741                           
 13742                           ;api.c: 48: API_RW[20] = 1;
 13743  001DDC  0E00               	movlw	0
 13744  001DDE  6F29               	movwf	(_API_RW+41)& (0+255),b
 13745  001DE0  0E01               	movlw	1
 13746  001DE2  6F28               	movwf	(_API_RW+40)& (0+255),b
 13747                           
 13748                           ;api.c: 49: API_RW[21] = 1;
 13749  001DE4  0E00               	movlw	0
 13750  001DE6  6F2B               	movwf	(_API_RW+43)& (0+255),b
 13751  001DE8  0E01               	movlw	1
 13752  001DEA  6F2A               	movwf	(_API_RW+42)& (0+255),b
 13753                           
 13754                           ;api.c: 50: API_RW[22] = 1;
 13755  001DEC  0E00               	movlw	0
 13756  001DEE  6F2D               	movwf	(_API_RW+45)& (0+255),b
 13757  001DF0  0E01               	movlw	1
 13758  001DF2  6F2C               	movwf	(_API_RW+44)& (0+255),b
 13759                           
 13760                           ;api.c: 51: API_RW[23] = 1;
 13761  001DF4  0E00               	movlw	0
 13762  001DF6  6F2F               	movwf	(_API_RW+47)& (0+255),b
 13763  001DF8  0E01               	movlw	1
 13764  001DFA  6F2E               	movwf	(_API_RW+46)& (0+255),b
 13765                           
 13766                           ;api.c: 52: API_RW[24] = 1;
 13767  001DFC  0E00               	movlw	0
 13768  001DFE  6F31               	movwf	(_API_RW+49)& (0+255),b
 13769  001E00  0E01               	movlw	1
 13770  001E02  6F30               	movwf	(_API_RW+48)& (0+255),b
 13771                           
 13772                           ;api.c: 53: API_RW[25] = 1;
 13773  001E04  0E00               	movlw	0
 13774  001E06  6F33               	movwf	(_API_RW+51)& (0+255),b
 13775  001E08  0E01               	movlw	1
 13776  001E0A  6F32               	movwf	(_API_RW+50)& (0+255),b
 13777                           
 13778                           ;api.c: 54: API_RW[26] = 1;
 13779  001E0C  0E00               	movlw	0
 13780  001E0E  6F35               	movwf	(_API_RW+53)& (0+255),b
 13781  001E10  0E01               	movlw	1
 13782  001E12  6F34               	movwf	(_API_RW+52)& (0+255),b
 13783                           
 13784                           ;api.c: 55: API_RW[27] = 1;
 13785  001E14  0E00               	movlw	0
 13786  001E16  6F37               	movwf	(_API_RW+55)& (0+255),b
 13787  001E18  0E01               	movlw	1
 13788  001E1A  6F36               	movwf	(_API_RW+54)& (0+255),b
 13789                           
 13790                           ;api.c: 56: API_RW[28] = 0;
 13791  001E1C  0E00               	movlw	0
 13792  001E1E  6F39               	movwf	(_API_RW+57)& (0+255),b
 13793  001E20  0E00               	movlw	0
 13794  001E22  6F38               	movwf	(_API_RW+56)& (0+255),b
 13795                           
 13796                           ;api.c: 57: API_RW[29] = 0;
 13797  001E24  0E00               	movlw	0
 13798  001E26  6F3B               	movwf	(_API_RW+59)& (0+255),b
 13799  001E28  0E00               	movlw	0
 13800  001E2A  6F3A               	movwf	(_API_RW+58)& (0+255),b
 13801                           
 13802                           ;api.c: 58: API_RW[30] = 0;
 13803  001E2C  0E00               	movlw	0
 13804  001E2E  6F3D               	movwf	(_API_RW+61)& (0+255),b
 13805  001E30  0E00               	movlw	0
 13806  001E32  6F3C               	movwf	(_API_RW+60)& (0+255),b
 13807                           
 13808                           ;api.c: 59: API_RW[31] = 0;
 13809  001E34  0E00               	movlw	0
 13810  001E36  6F3F               	movwf	(_API_RW+63)& (0+255),b
 13811  001E38  0E00               	movlw	0
 13812  001E3A  6F3E               	movwf	(_API_RW+62)& (0+255),b
 13813                           
 13814                           ;api.c: 60: API_RW[32] = 0;
 13815  001E3C  0E00               	movlw	0
 13816  001E3E  6F41               	movwf	(_API_RW+65)& (0+255),b
 13817  001E40  0E00               	movlw	0
 13818  001E42  6F40               	movwf	(_API_RW+64)& (0+255),b
 13819                           
 13820                           ;api.c: 61: API_RW[33] = 0;
 13821  001E44  0E00               	movlw	0
 13822  001E46  6F43               	movwf	(_API_RW+67)& (0+255),b
 13823  001E48  0E00               	movlw	0
 13824  001E4A  6F42               	movwf	(_API_RW+66)& (0+255),b
 13825                           
 13826                           ;api.c: 62: API_RW[34] = 0;
 13827  001E4C  0E00               	movlw	0
 13828  001E4E  6F45               	movwf	(_API_RW+69)& (0+255),b
 13829  001E50  0E00               	movlw	0
 13830  001E52  6F44               	movwf	(_API_RW+68)& (0+255),b
 13831                           
 13832                           ;api.c: 63: API_RW[35] = 0;
 13833  001E54  0E00               	movlw	0
 13834  001E56  6F47               	movwf	(_API_RW+71)& (0+255),b
 13835  001E58  0E00               	movlw	0
 13836  001E5A  6F46               	movwf	(_API_RW+70)& (0+255),b
 13837                           
 13838                           ;api.c: 64: API_RW[36] = 0;
 13839  001E5C  0E00               	movlw	0
 13840  001E5E  6F49               	movwf	(_API_RW+73)& (0+255),b
 13841  001E60  0E00               	movlw	0
 13842  001E62  6F48               	movwf	(_API_RW+72)& (0+255),b
 13843                           
 13844                           ;api.c: 65: API_RW[37] = 0;
 13845  001E64  0E00               	movlw	0
 13846  001E66  6F4B               	movwf	(_API_RW+75)& (0+255),b
 13847  001E68  0E00               	movlw	0
 13848  001E6A  6F4A               	movwf	(_API_RW+74)& (0+255),b
 13849                           
 13850                           ;api.c: 66: API_RW[38] = 0;
 13851  001E6C  0E00               	movlw	0
 13852  001E6E  6F4D               	movwf	(_API_RW+77)& (0+255),b
 13853  001E70  0E00               	movlw	0
 13854  001E72  6F4C               	movwf	(_API_RW+76)& (0+255),b
 13855                           
 13856                           ;api.c: 67: API_RW[39] = 1;
 13857  001E74  0E00               	movlw	0
 13858  001E76  6F4F               	movwf	(_API_RW+79)& (0+255),b
 13859  001E78  0E01               	movlw	1
 13860  001E7A  6F4E               	movwf	(_API_RW+78)& (0+255),b
 13861                           
 13862                           ;api.c: 68: API_RW[40] = 1;
 13863  001E7C  0E00               	movlw	0
 13864  001E7E  6F51               	movwf	(_API_RW+81)& (0+255),b
 13865  001E80  0E01               	movlw	1
 13866  001E82  6F50               	movwf	(_API_RW+80)& (0+255),b
 13867                           
 13868                           ;api.c: 69: API_RW[41] = 0;
 13869  001E84  0E00               	movlw	0
 13870  001E86  6F53               	movwf	(_API_RW+83)& (0+255),b
 13871  001E88  0E00               	movlw	0
 13872  001E8A  6F52               	movwf	(_API_RW+82)& (0+255),b
 13873                           
 13874                           ;api.c: 70: API_RW[42] = 0;
 13875  001E8C  0E00               	movlw	0
 13876  001E8E  6F55               	movwf	(_API_RW+85)& (0+255),b
 13877  001E90  0E00               	movlw	0
 13878  001E92  6F54               	movwf	(_API_RW+84)& (0+255),b
 13879                           
 13880                           ;api.c: 71: API_RW[43] = 0;
 13881  001E94  0E00               	movlw	0
 13882  001E96  6F57               	movwf	(_API_RW+87)& (0+255),b
 13883  001E98  0E00               	movlw	0
 13884  001E9A  6F56               	movwf	(_API_RW+86)& (0+255),b
 13885                           
 13886                           ;api.c: 72: API_RW[44] = 0;
 13887  001E9C  0E00               	movlw	0
 13888  001E9E  6F59               	movwf	(_API_RW+89)& (0+255),b
 13889  001EA0  0E00               	movlw	0
 13890  001EA2  6F58               	movwf	(_API_RW+88)& (0+255),b
 13891                           
 13892                           ;api.c: 73: API_RW[45] = 1;
 13893  001EA4  0E00               	movlw	0
 13894  001EA6  6F5B               	movwf	(_API_RW+91)& (0+255),b
 13895  001EA8  0E01               	movlw	1
 13896  001EAA  6F5A               	movwf	(_API_RW+90)& (0+255),b
 13897                           
 13898                           ;api.c: 74: API_RW[46] = 1;
 13899  001EAC  0E00               	movlw	0
 13900  001EAE  6F5D               	movwf	(_API_RW+93)& (0+255),b
 13901  001EB0  0E01               	movlw	1
 13902  001EB2  6F5C               	movwf	(_API_RW+92)& (0+255),b
 13903                           
 13904                           ;api.c: 75: API_RW[47] = 1;
 13905  001EB4  0E00               	movlw	0
 13906  001EB6  6F5F               	movwf	(_API_RW+95)& (0+255),b
 13907  001EB8  0E01               	movlw	1
 13908  001EBA  6F5E               	movwf	(_API_RW+94)& (0+255),b
 13909                           
 13910                           ;api.c: 76: API_RW[48] = 1;
 13911  001EBC  0E00               	movlw	0
 13912  001EBE  6F61               	movwf	(_API_RW+97)& (0+255),b
 13913  001EC0  0E01               	movlw	1
 13914  001EC2  6F60               	movwf	(_API_RW+96)& (0+255),b
 13915                           
 13916                           ;api.c: 77: API_RW[49] = 1;
 13917  001EC4  0E00               	movlw	0
 13918  001EC6  6F63               	movwf	(_API_RW+99)& (0+255),b
 13919  001EC8  0E01               	movlw	1
 13920  001ECA  6F62               	movwf	(_API_RW+98)& (0+255),b
 13921                           
 13922                           ;api.c: 78: API_RW[50] = 1;
 13923  001ECC  0E00               	movlw	0
 13924  001ECE  6F65               	movwf	(_API_RW+101)& (0+255),b
 13925  001ED0  0E01               	movlw	1
 13926  001ED2  6F64               	movwf	(_API_RW+100)& (0+255),b
 13927                           
 13928                           ;api.c: 79: API_RW[51] = 1;
 13929  001ED4  0E00               	movlw	0
 13930  001ED6  6F67               	movwf	(_API_RW+103)& (0+255),b
 13931  001ED8  0E01               	movlw	1
 13932  001EDA  6F66               	movwf	(_API_RW+102)& (0+255),b
 13933                           
 13934                           ;api.c: 80: API_RW[52] = 1;
 13935  001EDC  0E00               	movlw	0
 13936  001EDE  6F69               	movwf	(_API_RW+105)& (0+255),b
 13937  001EE0  0E01               	movlw	1
 13938  001EE2  6F68               	movwf	(_API_RW+104)& (0+255),b
 13939                           
 13940                           ;api.c: 81: API_RW[53] = 1;
 13941  001EE4  0E00               	movlw	0
 13942  001EE6  6F6B               	movwf	(_API_RW+107)& (0+255),b
 13943  001EE8  0E01               	movlw	1
 13944  001EEA  6F6A               	movwf	(_API_RW+106)& (0+255),b
 13945                           
 13946                           ;api.c: 82: API_RW[54] = 1;
 13947  001EEC  0E00               	movlw	0
 13948  001EEE  6F6D               	movwf	(_API_RW+109)& (0+255),b
 13949  001EF0  0E01               	movlw	1
 13950  001EF2  6F6C               	movwf	(_API_RW+108)& (0+255),b
 13951                           
 13952                           ;api.c: 83: API_RW[55] = 1;
 13953  001EF4  0E00               	movlw	0
 13954  001EF6  6F6F               	movwf	(_API_RW+111)& (0+255),b
 13955  001EF8  0E01               	movlw	1
 13956  001EFA  6F6E               	movwf	(_API_RW+110)& (0+255),b
 13957                           
 13958                           ;api.c: 84: API_RW[56] = 1;
 13959  001EFC  0E00               	movlw	0
 13960  001EFE  6F71               	movwf	(_API_RW+113)& (0+255),b
 13961  001F00  0E01               	movlw	1
 13962  001F02  6F70               	movwf	(_API_RW+112)& (0+255),b
 13963                           
 13964                           ;api.c: 85: API_RW[57] = 1;
 13965  001F04  0E00               	movlw	0
 13966  001F06  6F73               	movwf	(_API_RW+115)& (0+255),b
 13967  001F08  0E01               	movlw	1
 13968  001F0A  6F72               	movwf	(_API_RW+114)& (0+255),b
 13969                           
 13970                           ;api.c: 86: API_RW[58] = 1;
 13971  001F0C  0E00               	movlw	0
 13972  001F0E  6F75               	movwf	(_API_RW+117)& (0+255),b
 13973  001F10  0E01               	movlw	1
 13974  001F12  6F74               	movwf	(_API_RW+116)& (0+255),b
 13975                           
 13976                           ;api.c: 87: API_RW[59] = 1;
 13977  001F14  0E00               	movlw	0
 13978  001F16  6F77               	movwf	(_API_RW+119)& (0+255),b
 13979  001F18  0E01               	movlw	1
 13980  001F1A  6F76               	movwf	(_API_RW+118)& (0+255),b
 13981                           
 13982                           ;api.c: 88: API_RW[60] = 1;
 13983  001F1C  0E00               	movlw	0
 13984  001F1E  6F79               	movwf	(_API_RW+121)& (0+255),b
 13985  001F20  0E01               	movlw	1
 13986  001F22  6F78               	movwf	(_API_RW+120)& (0+255),b
 13987                           
 13988                           ;api.c: 89: API_RW[61] = 0;
 13989  001F24  0E00               	movlw	0
 13990  001F26  6F7B               	movwf	(_API_RW+123)& (0+255),b
 13991  001F28  0E00               	movlw	0
 13992  001F2A  6F7A               	movwf	(_API_RW+122)& (0+255),b
 13993                           
 13994                           ;api.c: 90: API_RW[62] = 0;
 13995  001F2C  0E00               	movlw	0
 13996  001F2E  6F7D               	movwf	(_API_RW+125)& (0+255),b
 13997  001F30  0E00               	movlw	0
 13998  001F32  6F7C               	movwf	(_API_RW+124)& (0+255),b
 13999                           
 14000                           ;api.c: 91: API_RW[63] = 0;
 14001  001F34  0E00               	movlw	0
 14002  001F36  6F7F               	movwf	(_API_RW+127)& (0+255),b
 14003  001F38  0E00               	movlw	0
 14004  001F3A  6F7E               	movwf	(_API_RW+126)& (0+255),b
 14005                           
 14006                           ;api.c: 92: API_RW[64] = 0;
 14007  001F3C  0E00               	movlw	0
 14008  001F3E  6F81               	movwf	(_API_RW+129)& (0+255),b
 14009  001F40  0E00               	movlw	0
 14010  001F42  6F80               	movwf	(_API_RW+128)& (0+255),b
 14011                           
 14012                           ;api.c: 93: API_RW[65] = 0;
 14013  001F44  0E00               	movlw	0
 14014  001F46  6F83               	movwf	(_API_RW+131)& (0+255),b
 14015  001F48  0E00               	movlw	0
 14016  001F4A  6F82               	movwf	(_API_RW+130)& (0+255),b
 14017                           
 14018                           ;api.c: 94: API_RW[66] = 0;
 14019  001F4C  0E00               	movlw	0
 14020  001F4E  6F85               	movwf	(_API_RW+133)& (0+255),b
 14021  001F50  0E00               	movlw	0
 14022  001F52  6F84               	movwf	(_API_RW+132)& (0+255),b
 14023                           
 14024                           ;api.c: 95: API_RW[67] = 0;
 14025  001F54  0E00               	movlw	0
 14026  001F56  6F87               	movwf	(_API_RW+135)& (0+255),b
 14027  001F58  0E00               	movlw	0
 14028  001F5A  6F86               	movwf	(_API_RW+134)& (0+255),b
 14029                           
 14030                           ;api.c: 96: API_RW[68] = 0;
 14031  001F5C  0E00               	movlw	0
 14032  001F5E  6F89               	movwf	(_API_RW+137)& (0+255),b
 14033  001F60  0E00               	movlw	0
 14034  001F62  6F88               	movwf	(_API_RW+136)& (0+255),b
 14035                           
 14036                           ;api.c: 97: API_RW[69] = 0;
 14037  001F64  0E00               	movlw	0
 14038  001F66  6F8B               	movwf	(_API_RW+139)& (0+255),b
 14039  001F68  0E00               	movlw	0
 14040  001F6A  6F8A               	movwf	(_API_RW+138)& (0+255),b
 14041                           
 14042                           ;api.c: 98: API_RW[70] = 1;
 14043  001F6C  0E00               	movlw	0
 14044  001F6E  6F8D               	movwf	(_API_RW+141)& (0+255),b
 14045  001F70  0E01               	movlw	1
 14046  001F72  6F8C               	movwf	(_API_RW+140)& (0+255),b
 14047                           
 14048                           ;api.c: 99: API_RW[71] = 1;
 14049  001F74  0E00               	movlw	0
 14050  001F76  6F8F               	movwf	(_API_RW+143)& (0+255),b
 14051  001F78  0E01               	movlw	1
 14052  001F7A  6F8E               	movwf	(_API_RW+142)& (0+255),b
 14053                           
 14054                           ;api.c: 100: API_RW[72] = 1;
 14055  001F7C  0E00               	movlw	0
 14056  001F7E  6F91               	movwf	(_API_RW+145)& (0+255),b
 14057  001F80  0E01               	movlw	1
 14058  001F82  6F90               	movwf	(_API_RW+144)& (0+255),b
 14059                           
 14060                           ;api.c: 101: API_RW[73] = 1;
 14061  001F84  0E00               	movlw	0
 14062  001F86  6F93               	movwf	(_API_RW+147)& (0+255),b
 14063  001F88  0E01               	movlw	1
 14064  001F8A  6F92               	movwf	(_API_RW+146)& (0+255),b
 14065                           
 14066                           ;api.c: 102: API_RW[74] = 1;
 14067  001F8C  0E00               	movlw	0
 14068  001F8E  6F95               	movwf	(_API_RW+149)& (0+255),b
 14069  001F90  0E01               	movlw	1
 14070  001F92  6F94               	movwf	(_API_RW+148)& (0+255),b
 14071                           
 14072                           ;api.c: 103: API_RW[75] = 1;
 14073  001F94  0E00               	movlw	0
 14074  001F96  6F97               	movwf	(_API_RW+151)& (0+255),b
 14075  001F98  0E01               	movlw	1
 14076  001F9A  6F96               	movwf	(_API_RW+150)& (0+255),b
 14077                           
 14078                           ;api.c: 104: API_RW[76] = 1;
 14079  001F9C  0E00               	movlw	0
 14080  001F9E  6F99               	movwf	(_API_RW+153)& (0+255),b
 14081  001FA0  0E01               	movlw	1
 14082  001FA2  6F98               	movwf	(_API_RW+152)& (0+255),b
 14083                           
 14084                           ;api.c: 105: API_RW[77] = 1;
 14085  001FA4  0E00               	movlw	0
 14086  001FA6  6F9B               	movwf	(_API_RW+155)& (0+255),b
 14087  001FA8  0E01               	movlw	1
 14088  001FAA  6F9A               	movwf	(_API_RW+154)& (0+255),b
 14089                           
 14090                           ;api.c: 106: API_RW[78] = 1;
 14091  001FAC  0E00               	movlw	0
 14092  001FAE  6F9D               	movwf	(_API_RW+157)& (0+255),b
 14093  001FB0  0E01               	movlw	1
 14094  001FB2  6F9C               	movwf	(_API_RW+156)& (0+255),b
 14095                           
 14096                           ;api.c: 107: API_RW[79] = 1;
 14097  001FB4  0E00               	movlw	0
 14098  001FB6  6F9F               	movwf	(_API_RW+159)& (0+255),b
 14099  001FB8  0E01               	movlw	1
 14100  001FBA  6F9E               	movwf	(_API_RW+158)& (0+255),b
 14101                           
 14102                           ;api.c: 108: API_RW[80] = 0;
 14103  001FBC  0E00               	movlw	0
 14104  001FBE  6FA1               	movwf	(_API_RW+161)& (0+255),b
 14105  001FC0  0E00               	movlw	0
 14106  001FC2  6FA0               	movwf	(_API_RW+160)& (0+255),b
 14107                           
 14108                           ;api.c: 109: API_RW[81] = 1;
 14109  001FC4  0E00               	movlw	0
 14110  001FC6  6FA3               	movwf	(_API_RW+163)& (0+255),b
 14111  001FC8  0E01               	movlw	1
 14112  001FCA  6FA2               	movwf	(_API_RW+162)& (0+255),b
 14113                           
 14114                           ;api.c: 110: API_RW[82] = 0;
 14115  001FCC  0E00               	movlw	0
 14116  001FCE  6FA5               	movwf	(_API_RW+165)& (0+255),b
 14117  001FD0  0E00               	movlw	0
 14118  001FD2  6FA4               	movwf	(_API_RW+164)& (0+255),b
 14119                           
 14120                           ;api.c: 111: API_RW[83] = 0;
 14121  001FD4  0E00               	movlw	0
 14122  001FD6  6FA7               	movwf	(_API_RW+167)& (0+255),b
 14123  001FD8  0E00               	movlw	0
 14124  001FDA  6FA6               	movwf	(_API_RW+166)& (0+255),b
 14125                           
 14126                           ;api.c: 112: API_RW[84] = 0;
 14127  001FDC  0E00               	movlw	0
 14128  001FDE  6FA9               	movwf	(_API_RW+169)& (0+255),b
 14129  001FE0  0E00               	movlw	0
 14130  001FE2  6FA8               	movwf	(_API_RW+168)& (0+255),b
 14131                           
 14132                           ;api.c: 113: API_RW[85] = 0;
 14133  001FE4  0E00               	movlw	0
 14134  001FE6  6FAB               	movwf	(_API_RW+171)& (0+255),b
 14135  001FE8  0E00               	movlw	0
 14136  001FEA  6FAA               	movwf	(_API_RW+170)& (0+255),b
 14137                           
 14138                           ;api.c: 114: API_RW[86] = 0;
 14139  001FEC  0E00               	movlw	0
 14140  001FEE  6FAD               	movwf	(_API_RW+173)& (0+255),b
 14141  001FF0  0E00               	movlw	0
 14142  001FF2  6FAC               	movwf	(_API_RW+172)& (0+255),b
 14143                           
 14144                           ;api.c: 115: API_RW[87] = 1;
 14145  001FF4  0E00               	movlw	0
 14146  001FF6  6FAF               	movwf	(_API_RW+175)& (0+255),b
 14147  001FF8  0E01               	movlw	1
 14148  001FFA  6FAE               	movwf	(_API_RW+174)& (0+255),b
 14149                           
 14150                           ;api.c: 116: API_RW[88] = 0;
 14151  001FFC  0E00               	movlw	0
 14152  001FFE  6FB1               	movwf	(_API_RW+177)& (0+255),b
 14153  002000  0E00               	movlw	0
 14154  002002  6FB0               	movwf	(_API_RW+176)& (0+255),b
 14155                           
 14156                           ;api.c: 120: API[16] = 89;
 14157  002004  0E00               	movlw	0
 14158  002006  0101               	movlb	1	; () banked
 14159  002008  6F21               	movwf	(_API+33)& (0+255),b
 14160  00200A  0E59               	movlw	89
 14161  00200C  6F20               	movwf	(_API+32)& (0+255),b
 14162                           
 14163                           ;api.c: 121: API[17] = 0;
 14164  00200E  0E00               	movlw	0
 14165  002010  6F23               	movwf	(_API+35)& (0+255),b
 14166  002012  0E00               	movlw	0
 14167  002014  6F22               	movwf	(_API+34)& (0+255),b
 14168                           
 14169                           ;api.c: 122: API[18] = 10000;
 14170  002016  0E27               	movlw	39
 14171  002018  6F25               	movwf	(_API+37)& (0+255),b
 14172  00201A  0E10               	movlw	16
 14173  00201C  6F24               	movwf	(_API+36)& (0+255),b
 14174                           
 14175                           ;api.c: 123: API[19] = 800;
 14176  00201E  0E03               	movlw	3
 14177  002020  6F27               	movwf	(_API+39)& (0+255),b
 14178  002022  0E20               	movlw	32
 14179  002024  6F26               	movwf	(_API+38)& (0+255),b
 14180                           
 14181                           ;api.c: 124: API[20] = 5000;
 14182  002026  0E13               	movlw	19
 14183  002028  6F29               	movwf	(_API+41)& (0+255),b
 14184  00202A  0E88               	movlw	136
 14185  00202C  6F28               	movwf	(_API+40)& (0+255),b
 14186                           
 14187                           ;api.c: 125: API[21] = 20;
 14188  00202E  0E00               	movlw	0
 14189  002030  6F2B               	movwf	(_API+43)& (0+255),b
 14190  002032  0E14               	movlw	20
 14191  002034  6F2A               	movwf	(_API+42)& (0+255),b
 14192                           
 14193                           ;api.c: 126: API[22] = 20;
 14194  002036  0E00               	movlw	0
 14195  002038  6F2D               	movwf	(_API+45)& (0+255),b
 14196  00203A  0E14               	movlw	20
 14197  00203C  6F2C               	movwf	(_API+44)& (0+255),b
 14198                           
 14199                           ;api.c: 127: API[23] = 107;
 14200  00203E  0E00               	movlw	0
 14201  002040  6F2F               	movwf	(_API+47)& (0+255),b
 14202  002042  0E6B               	movlw	107
 14203  002044  6F2E               	movwf	(_API+46)& (0+255),b
 14204                           
 14205                           ;api.c: 128: API[24] = 107;
 14206  002046  0E00               	movlw	0
 14207  002048  6F31               	movwf	(_API+49)& (0+255),b
 14208  00204A  0E6B               	movlw	107
 14209  00204C  6F30               	movwf	(_API+48)& (0+255),b
 14210                           
 14211                           ;api.c: 129: API[25] = 80;
 14212  00204E  0E00               	movlw	0
 14213  002050  6F33               	movwf	(_API+51)& (0+255),b
 14214  002052  0E50               	movlw	80
 14215  002054  6F32               	movwf	(_API+50)& (0+255),b
 14216                           
 14217                           ;api.c: 130: API[26] = 45;
 14218  002056  0E00               	movlw	0
 14219  002058  6F35               	movwf	(_API+53)& (0+255),b
 14220  00205A  0E2D               	movlw	45
 14221  00205C  6F34               	movwf	(_API+52)& (0+255),b
 14222                           
 14223                           ;api.c: 131: API[27] = 20;
 14224  00205E  0E00               	movlw	0
 14225  002060  6F37               	movwf	(_API+55)& (0+255),b
 14226  002062  0E14               	movlw	20
 14227  002064  6F36               	movwf	(_API+54)& (0+255),b
 14228                           
 14229                           ;api.c: 132: API[28] = 0;
 14230  002066  0E00               	movlw	0
 14231  002068  6F39               	movwf	(_API+57)& (0+255),b
 14232  00206A  0E00               	movlw	0
 14233  00206C  6F38               	movwf	(_API+56)& (0+255),b
 14234                           
 14235                           ;api.c: 133: API[29] = 0;
 14236  00206E  0E00               	movlw	0
 14237  002070  6F3B               	movwf	(_API+59)& (0+255),b
 14238  002072  0E00               	movlw	0
 14239  002074  6F3A               	movwf	(_API+58)& (0+255),b
 14240                           
 14241                           ;api.c: 134: API[30] = 0;
 14242  002076  0E00               	movlw	0
 14243  002078  6F3D               	movwf	(_API+61)& (0+255),b
 14244  00207A  0E00               	movlw	0
 14245  00207C  6F3C               	movwf	(_API+60)& (0+255),b
 14246                           
 14247                           ;api.c: 135: API[31] = 0;
 14248  00207E  0E00               	movlw	0
 14249  002080  6F3F               	movwf	(_API+63)& (0+255),b
 14250  002082  0E00               	movlw	0
 14251  002084  6F3E               	movwf	(_API+62)& (0+255),b
 14252                           
 14253                           ;api.c: 136: API[32] = 0;
 14254  002086  0E00               	movlw	0
 14255  002088  6F41               	movwf	(_API+65)& (0+255),b
 14256  00208A  0E00               	movlw	0
 14257  00208C  6F40               	movwf	(_API+64)& (0+255),b
 14258                           
 14259                           ;api.c: 137: API[33] = 0;
 14260  00208E  0E00               	movlw	0
 14261  002090  6F43               	movwf	(_API+67)& (0+255),b
 14262  002092  0E00               	movlw	0
 14263  002094  6F42               	movwf	(_API+66)& (0+255),b
 14264                           
 14265                           ;api.c: 138: API[34] = 0;
 14266  002096  0E00               	movlw	0
 14267  002098  6F45               	movwf	(_API+69)& (0+255),b
 14268  00209A  0E00               	movlw	0
 14269  00209C  6F44               	movwf	(_API+68)& (0+255),b
 14270                           
 14271                           ;api.c: 139: API[35] = 0;
 14272  00209E  0E00               	movlw	0
 14273  0020A0  6F47               	movwf	(_API+71)& (0+255),b
 14274  0020A2  0E00               	movlw	0
 14275  0020A4  6F46               	movwf	(_API+70)& (0+255),b
 14276                           
 14277                           ;api.c: 140: API[36] = 0;
 14278  0020A6  0E00               	movlw	0
 14279  0020A8  6F49               	movwf	(_API+73)& (0+255),b
 14280  0020AA  0E00               	movlw	0
 14281  0020AC  6F48               	movwf	(_API+72)& (0+255),b
 14282                           
 14283                           ;api.c: 141: API[37] = 0;
 14284  0020AE  0E00               	movlw	0
 14285  0020B0  6F4B               	movwf	(_API+75)& (0+255),b
 14286  0020B2  0E00               	movlw	0
 14287  0020B4  6F4A               	movwf	(_API+74)& (0+255),b
 14288                           
 14289                           ;api.c: 142: API[38] = 0;
 14290  0020B6  0E00               	movlw	0
 14291  0020B8  6F4D               	movwf	(_API+77)& (0+255),b
 14292  0020BA  0E00               	movlw	0
 14293  0020BC  6F4C               	movwf	(_API+76)& (0+255),b
 14294                           
 14295                           ;api.c: 143: API[39] = 0;
 14296  0020BE  0E00               	movlw	0
 14297  0020C0  6F4F               	movwf	(_API+79)& (0+255),b
 14298  0020C2  0E00               	movlw	0
 14299  0020C4  6F4E               	movwf	(_API+78)& (0+255),b
 14300                           
 14301                           ;api.c: 144: API[40] = 0;
 14302  0020C6  0E00               	movlw	0
 14303  0020C8  6F51               	movwf	(_API+81)& (0+255),b
 14304  0020CA  0E00               	movlw	0
 14305  0020CC  6F50               	movwf	(_API+80)& (0+255),b
 14306                           
 14307                           ;api.c: 145: API[41] = 0;
 14308  0020CE  0E00               	movlw	0
 14309  0020D0  6F53               	movwf	(_API+83)& (0+255),b
 14310  0020D2  0E00               	movlw	0
 14311  0020D4  6F52               	movwf	(_API+82)& (0+255),b
 14312                           
 14313                           ;api.c: 146: API[42] = 0;
 14314  0020D6  0E00               	movlw	0
 14315  0020D8  6F55               	movwf	(_API+85)& (0+255),b
 14316  0020DA  0E00               	movlw	0
 14317  0020DC  6F54               	movwf	(_API+84)& (0+255),b
 14318                           
 14319                           ;api.c: 147: API[43] = 0;
 14320  0020DE  0E00               	movlw	0
 14321  0020E0  6F57               	movwf	(_API+87)& (0+255),b
 14322  0020E2  0E00               	movlw	0
 14323  0020E4  6F56               	movwf	(_API+86)& (0+255),b
 14324                           
 14325                           ;api.c: 148: API[44] = 0;
 14326  0020E6  0E00               	movlw	0
 14327  0020E8  6F59               	movwf	(_API+89)& (0+255),b
 14328  0020EA  0E00               	movlw	0
 14329  0020EC  6F58               	movwf	(_API+88)& (0+255),b
 14330                           
 14331                           ;api.c: 149: API[45] = 0;
 14332  0020EE  0E00               	movlw	0
 14333  0020F0  6F5B               	movwf	(_API+91)& (0+255),b
 14334  0020F2  0E00               	movlw	0
 14335  0020F4  6F5A               	movwf	(_API+90)& (0+255),b
 14336                           
 14337                           ;api.c: 150: API[46] = 80;
 14338  0020F6  0E00               	movlw	0
 14339  0020F8  6F5D               	movwf	(_API+93)& (0+255),b
 14340  0020FA  0E50               	movlw	80
 14341  0020FC  6F5C               	movwf	(_API+92)& (0+255),b
 14342                           
 14343                           ;api.c: 151: API[47] = 120;
 14344  0020FE  0E00               	movlw	0
 14345  002100  6F5F               	movwf	(_API+95)& (0+255),b
 14346  002102  0E78               	movlw	120
 14347  002104  6F5E               	movwf	(_API+94)& (0+255),b
 14348                           
 14349                           ;api.c: 152: API[48] = 0;
 14350  002106  0E00               	movlw	0
 14351  002108  6F61               	movwf	(_API+97)& (0+255),b
 14352  00210A  0E00               	movlw	0
 14353  00210C  6F60               	movwf	(_API+96)& (0+255),b
 14354                           
 14355                           ;api.c: 153: API[49] = 80;
 14356  00210E  0E00               	movlw	0
 14357  002110  6F63               	movwf	(_API+99)& (0+255),b
 14358  002112  0E50               	movlw	80
 14359  002114  6F62               	movwf	(_API+98)& (0+255),b
 14360                           
 14361                           ;api.c: 154: API[50] = 0;
 14362  002116  0E00               	movlw	0
 14363  002118  6F65               	movwf	(_API+101)& (0+255),b
 14364  00211A  0E00               	movlw	0
 14365  00211C  6F64               	movwf	(_API+100)& (0+255),b
 14366                           
 14367                           ;api.c: 155: API[51] = 0;
 14368  00211E  0E00               	movlw	0
 14369  002120  6F67               	movwf	(_API+103)& (0+255),b
 14370  002122  0E00               	movlw	0
 14371  002124  6F66               	movwf	(_API+102)& (0+255),b
 14372                           
 14373                           ;api.c: 156: API[52] = 120;
 14374  002126  0E00               	movlw	0
 14375  002128  6F69               	movwf	(_API+105)& (0+255),b
 14376  00212A  0E78               	movlw	120
 14377  00212C  6F68               	movwf	(_API+104)& (0+255),b
 14378                           
 14379                           ;api.c: 157: API[53] = 100;
 14380  00212E  0E00               	movlw	0
 14381  002130  6F6B               	movwf	(_API+107)& (0+255),b
 14382  002132  0E64               	movlw	100
 14383  002134  6F6A               	movwf	(_API+106)& (0+255),b
 14384                           
 14385                           ;api.c: 158: API[54] = 100;
 14386  002136  0E00               	movlw	0
 14387  002138  6F6D               	movwf	(_API+109)& (0+255),b
 14388  00213A  0E64               	movlw	100
 14389  00213C  6F6C               	movwf	(_API+108)& (0+255),b
 14390                           
 14391                           ;api.c: 159: API[55] = 100;
 14392  00213E  0E00               	movlw	0
 14393  002140  6F6F               	movwf	(_API+111)& (0+255),b
 14394  002142  0E64               	movlw	100
 14395  002144  6F6E               	movwf	(_API+110)& (0+255),b
 14396                           
 14397                           ;api.c: 160: API[56] = 100;
 14398  002146  0E00               	movlw	0
 14399  002148  6F71               	movwf	(_API+113)& (0+255),b
 14400  00214A  0E64               	movlw	100
 14401  00214C  6F70               	movwf	(_API+112)& (0+255),b
 14402                           
 14403                           ;api.c: 161: API[57] = 100;
 14404  00214E  0E00               	movlw	0
 14405  002150  6F73               	movwf	(_API+115)& (0+255),b
 14406  002152  0E64               	movlw	100
 14407  002154  6F72               	movwf	(_API+114)& (0+255),b
 14408                           
 14409                           ;api.c: 162: API[58] = 100;
 14410  002156  0E00               	movlw	0
 14411  002158  6F75               	movwf	(_API+117)& (0+255),b
 14412  00215A  0E64               	movlw	100
 14413  00215C  6F74               	movwf	(_API+116)& (0+255),b
 14414                           
 14415                           ;api.c: 163: API[59] = 100;
 14416  00215E  0E00               	movlw	0
 14417  002160  6F77               	movwf	(_API+119)& (0+255),b
 14418  002162  0E64               	movlw	100
 14419  002164  6F76               	movwf	(_API+118)& (0+255),b
 14420                           
 14421                           ;api.c: 164: API[60] = 100;
 14422  002166  0E00               	movlw	0
 14423  002168  6F79               	movwf	(_API+121)& (0+255),b
 14424  00216A  0E64               	movlw	100
 14425  00216C  6F78               	movwf	(_API+120)& (0+255),b
 14426                           
 14427                           ;api.c: 165: API[61] = 0;
 14428  00216E  0E00               	movlw	0
 14429  002170  6F7B               	movwf	(_API+123)& (0+255),b
 14430  002172  0E00               	movlw	0
 14431  002174  6F7A               	movwf	(_API+122)& (0+255),b
 14432                           
 14433                           ;api.c: 166: API[62] = 0;
 14434  002176  0E00               	movlw	0
 14435  002178  6F7D               	movwf	(_API+125)& (0+255),b
 14436  00217A  0E00               	movlw	0
 14437  00217C  6F7C               	movwf	(_API+124)& (0+255),b
 14438                           
 14439                           ;api.c: 167: API[63] = 1;
 14440  00217E  0E00               	movlw	0
 14441  002180  6F7F               	movwf	(_API+127)& (0+255),b
 14442  002182  0E01               	movlw	1
 14443  002184  6F7E               	movwf	(_API+126)& (0+255),b
 14444                           
 14445                           ;api.c: 168: API[64] = 0;
 14446  002186  0E00               	movlw	0
 14447  002188  6F81               	movwf	(_API+129)& (0+255),b
 14448  00218A  0E00               	movlw	0
 14449  00218C  6F80               	movwf	(_API+128)& (0+255),b
 14450                           
 14451                           ;api.c: 169: API[65] = 0;
 14452  00218E  0E00               	movlw	0
 14453  002190  6F83               	movwf	(_API+131)& (0+255),b
 14454  002192  0E00               	movlw	0
 14455  002194  6F82               	movwf	(_API+130)& (0+255),b
 14456                           
 14457                           ;api.c: 170: API[66] = 0;
 14458  002196  0E00               	movlw	0
 14459  002198  6F85               	movwf	(_API+133)& (0+255),b
 14460  00219A  0E00               	movlw	0
 14461  00219C  6F84               	movwf	(_API+132)& (0+255),b
 14462                           
 14463                           ;api.c: 171: API[67] = 0;
 14464  00219E  0E00               	movlw	0
 14465  0021A0  6F87               	movwf	(_API+135)& (0+255),b
 14466  0021A2  0E00               	movlw	0
 14467  0021A4  6F86               	movwf	(_API+134)& (0+255),b
 14468                           
 14469                           ;api.c: 172: API[68] = 0;
 14470  0021A6  0E00               	movlw	0
 14471  0021A8  6F89               	movwf	(_API+137)& (0+255),b
 14472  0021AA  0E00               	movlw	0
 14473  0021AC  6F88               	movwf	(_API+136)& (0+255),b
 14474                           
 14475                           ;api.c: 173: API[69] = 1;
 14476  0021AE  0E00               	movlw	0
 14477  0021B0  6F8B               	movwf	(_API+139)& (0+255),b
 14478  0021B2  0E01               	movlw	1
 14479  0021B4  6F8A               	movwf	(_API+138)& (0+255),b
 14480                           
 14481                           ;api.c: 174: API[70] = 0;
 14482  0021B6  0E00               	movlw	0
 14483  0021B8  6F8D               	movwf	(_API+141)& (0+255),b
 14484  0021BA  0E00               	movlw	0
 14485  0021BC  6F8C               	movwf	(_API+140)& (0+255),b
 14486                           
 14487                           ;api.c: 175: API[71] = 0;
 14488  0021BE  0E00               	movlw	0
 14489  0021C0  6F8F               	movwf	(_API+143)& (0+255),b
 14490  0021C2  0E00               	movlw	0
 14491  0021C4  6F8E               	movwf	(_API+142)& (0+255),b
 14492                           
 14493                           ;api.c: 176: API[72] = 0;
 14494  0021C6  0E00               	movlw	0
 14495  0021C8  6F91               	movwf	(_API+145)& (0+255),b
 14496  0021CA  0E00               	movlw	0
 14497  0021CC  6F90               	movwf	(_API+144)& (0+255),b
 14498                           
 14499                           ;api.c: 177: API[73] = 0;
 14500  0021CE  0E00               	movlw	0
 14501  0021D0  6F93               	movwf	(_API+147)& (0+255),b
 14502  0021D2  0E00               	movlw	0
 14503  0021D4  6F92               	movwf	(_API+146)& (0+255),b
 14504                           
 14505                           ;api.c: 178: API[74] = 0;
 14506  0021D6  0E00               	movlw	0
 14507  0021D8  6F95               	movwf	(_API+149)& (0+255),b
 14508  0021DA  0E00               	movlw	0
 14509  0021DC  6F94               	movwf	(_API+148)& (0+255),b
 14510                           
 14511                           ;api.c: 179: API[75] = 0;
 14512  0021DE  0E00               	movlw	0
 14513  0021E0  6F97               	movwf	(_API+151)& (0+255),b
 14514  0021E2  0E00               	movlw	0
 14515  0021E4  6F96               	movwf	(_API+150)& (0+255),b
 14516                           
 14517                           ;api.c: 180: API[76] = 0;
 14518  0021E6  0E00               	movlw	0
 14519  0021E8  6F99               	movwf	(_API+153)& (0+255),b
 14520  0021EA  0E00               	movlw	0
 14521  0021EC  6F98               	movwf	(_API+152)& (0+255),b
 14522                           
 14523                           ;api.c: 181: API[77] = 0;
 14524  0021EE  0E00               	movlw	0
 14525  0021F0  6F9B               	movwf	(_API+155)& (0+255),b
 14526  0021F2  0E00               	movlw	0
 14527  0021F4  6F9A               	movwf	(_API+154)& (0+255),b
 14528                           
 14529                           ;api.c: 182: API[78] = 0;
 14530  0021F6  0E00               	movlw	0
 14531  0021F8  6F9D               	movwf	(_API+157)& (0+255),b
 14532  0021FA  0E00               	movlw	0
 14533  0021FC  6F9C               	movwf	(_API+156)& (0+255),b
 14534                           
 14535                           ;api.c: 183: API[79] = 0;
 14536  0021FE  0E00               	movlw	0
 14537  002200  6F9F               	movwf	(_API+159)& (0+255),b
 14538  002202  0E00               	movlw	0
 14539  002204  6F9E               	movwf	(_API+158)& (0+255),b
 14540                           
 14541                           ;api.c: 184: API[80] = 0;
 14542  002206  0E00               	movlw	0
 14543  002208  6FA1               	movwf	(_API+161)& (0+255),b
 14544  00220A  0E00               	movlw	0
 14545  00220C  6FA0               	movwf	(_API+160)& (0+255),b
 14546                           
 14547                           ;api.c: 185: API[81] = 0;
 14548  00220E  0E00               	movlw	0
 14549  002210  6FA3               	movwf	(_API+163)& (0+255),b
 14550  002212  0E00               	movlw	0
 14551  002214  6FA2               	movwf	(_API+162)& (0+255),b
 14552                           
 14553                           ;api.c: 186: API[82] = 1;
 14554  002216  0E00               	movlw	0
 14555  002218  6FA5               	movwf	(_API+165)& (0+255),b
 14556  00221A  0E01               	movlw	1
 14557  00221C  6FA4               	movwf	(_API+164)& (0+255),b
 14558                           
 14559                           ;api.c: 187: API[83] = 0;
 14560  00221E  0E00               	movlw	0
 14561  002220  6FA7               	movwf	(_API+167)& (0+255),b
 14562  002222  0E00               	movlw	0
 14563  002224  6FA6               	movwf	(_API+166)& (0+255),b
 14564                           
 14565                           ;api.c: 188: API[84] = 1;
 14566  002226  0E00               	movlw	0
 14567  002228  6FA9               	movwf	(_API+169)& (0+255),b
 14568  00222A  0E01               	movlw	1
 14569  00222C  6FA8               	movwf	(_API+168)& (0+255),b
 14570                           
 14571                           ;api.c: 189: API[85] = 0;
 14572  00222E  0E00               	movlw	0
 14573  002230  6FAB               	movwf	(_API+171)& (0+255),b
 14574  002232  0E00               	movlw	0
 14575  002234  6FAA               	movwf	(_API+170)& (0+255),b
 14576                           
 14577                           ;api.c: 190: API[86] = 0;
 14578  002236  0E00               	movlw	0
 14579  002238  6FAD               	movwf	(_API+173)& (0+255),b
 14580  00223A  0E00               	movlw	0
 14581  00223C  6FAC               	movwf	(_API+172)& (0+255),b
 14582                           
 14583                           ;api.c: 191: API[87] = 0;
 14584  00223E  0E00               	movlw	0
 14585  002240  6FAF               	movwf	(_API+175)& (0+255),b
 14586  002242  0E00               	movlw	0
 14587  002244  6FAE               	movwf	(_API+174)& (0+255),b
 14588                           
 14589                           ;api.c: 192: API[88] = 511;
 14590  002246  0E01               	movlw	1
 14591  002248  6FB1               	movwf	(_API+177)& (0+255),b
 14592  00224A  69B0               	setf	(_API+176)& (0+255),b
 14593                           
 14594                           ; BSR set to: 1
 14595  00224C  0012               	return		;funcret
 14596  00224E                     __end_of_APIxInitialize:
 14597                           	opt stack 0
 14598                           tblptru	equ	0xFF8
 14599                           tblptrh	equ	0xFF7
 14600                           tblptrl	equ	0xFF6
 14601                           tablat	equ	0xFF5
 14602                           prodh	equ	0xFF4
 14603                           prodl	equ	0xFF3
 14604                           intcon	equ	0xFF2
 14605                           intcon2	equ	0xFF1
 14606                           postinc0	equ	0xFEE
 14607                           wreg	equ	0xFE8
 14608                           postinc1	equ	0xFE6
 14609                           postdec1	equ	0xFE5
 14610                           fsr1h	equ	0xFE2
 14611                           fsr1l	equ	0xFE1
 14612                           indf2	equ	0xFDF
 14613                           postinc2	equ	0xFDE
 14614                           postdec2	equ	0xFDD
 14615                           fsr2h	equ	0xFDA
 14616                           fsr2l	equ	0xFD9
 14617                           status	equ	0xFD8
 14618                           
 14619 ;; *************** function _tc_low *****************
 14620 ;; Defined at:
 14621 ;;		line 148 in file "../Main.c"
 14622 ;; Parameters:    Size  Location     Type
 14623 ;;		None
 14624 ;; Auto vars:     Size  Location     Type
 14625 ;;		None
 14626 ;; Return value:  Size  Location     Type
 14627 ;;                  1    wreg      void 
 14628 ;; Registers used:
 14629 ;;		None
 14630 ;; Tracked objects:
 14631 ;;		On entry : 0/0
 14632 ;;		On exit  : 0/0
 14633 ;;		Unchanged: 0/0
 14634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14635 ;;      Params:         0       0       0       0       0       0       0       0       0
 14636 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14637 ;;      Temps:          0      21       0       0       0       0       0       0       0
 14638 ;;      Totals:         0      21       0       0       0       0       0       0       0
 14639 ;;Total ram usage:       21 bytes
 14640 ;; Hardware stack levels used:    1
 14641 ;; Hardware stack levels required when called:    2
 14642 ;; This function calls:
 14643 ;;		Nothing
 14644 ;; This function is called by:
 14645 ;;		Interrupt level 1
 14646 ;; This function uses a non-reentrant model
 14647 ;;
 14648                           
 14649                           	psect	intcodelo
 14650  000018                     __pintcodelo:
 14651                           	opt stack 0
 14652  000018                     _tc_low:
 14653                           	opt stack 22
 14654                           
 14655                           ; BSR set to: 1
 14656                           ;incstack = 0
 14657  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 14658  00001A  CFD8 F0B6          	movff	status,??_tc_low
 14659  00001E  CFE8 F0B7          	movff	wreg,??_tc_low+1
 14660  000022  CFE0 F0B8          	movff	bsr,??_tc_low+2
 14661  000026  CFFA F0B9          	movff	pclath,??_tc_low+3
 14662  00002A  CFFB F0BA          	movff	pclatu,??_tc_low+4
 14663  00002E  CFE9 F0BB          	movff	fsr0l,??_tc_low+5
 14664  000032  CFEA F0BC          	movff	fsr0h,??_tc_low+6
 14665  000036  CFE1 F0BD          	movff	fsr1l,??_tc_low+7
 14666  00003A  CFE2 F0BE          	movff	fsr1h,??_tc_low+8
 14667  00003E  CFD9 F0BF          	movff	fsr2l,??_tc_low+9
 14668  000042  CFDA F0C0          	movff	fsr2h,??_tc_low+10
 14669  000046  CFF3 F0C1          	movff	prodl,??_tc_low+11
 14670  00004A  CFF4 F0C2          	movff	prodh,??_tc_low+12
 14671  00004E  CFF6 F0C3          	movff	tblptrl,??_tc_low+13
 14672  000052  CFF7 F0C4          	movff	tblptrh,??_tc_low+14
 14673  000056  CFF8 F0C5          	movff	tblptru,??_tc_low+15
 14674  00005A  CFF5 F0C6          	movff	tablat,??_tc_low+16
 14675  00005E  C04D  F0C7         	movff	btemp,??_tc_low+17
 14676  000062  C04E  F0C8         	movff	btemp+1,??_tc_low+18
 14677  000066  C04F  F0C9         	movff	btemp+2,??_tc_low+19
 14678  00006A  C050  F0CA         	movff	btemp+3,??_tc_low+20
 14679  00006E  C0CA  F050         	movff	??_tc_low+20,btemp+3
 14680  000072  C0C9  F04F         	movff	??_tc_low+19,btemp+2
 14681  000076  C0C8  F04E         	movff	??_tc_low+18,btemp+1
 14682  00007A  C0C7  F04D         	movff	??_tc_low+17,btemp
 14683  00007E  C0C6  FFF5         	movff	??_tc_low+16,tablat
 14684  000082  C0C5  FFF8         	movff	??_tc_low+15,tblptru
 14685  000086  C0C4  FFF7         	movff	??_tc_low+14,tblptrh
 14686  00008A  C0C3  FFF6         	movff	??_tc_low+13,tblptrl
 14687  00008E  C0C2  FFF4         	movff	??_tc_low+12,prodh
 14688  000092  C0C1  FFF3         	movff	??_tc_low+11,prodl
 14689  000096  C0C0  FFDA         	movff	??_tc_low+10,fsr2h
 14690  00009A  C0BF  FFD9         	movff	??_tc_low+9,fsr2l
 14691  00009E  C0BE  FFE2         	movff	??_tc_low+8,fsr1h
 14692  0000A2  C0BD  FFE1         	movff	??_tc_low+7,fsr1l
 14693  0000A6  C0BC  FFEA         	movff	??_tc_low+6,fsr0h
 14694  0000AA  C0BB  FFE9         	movff	??_tc_low+5,fsr0l
 14695  0000AE  C0BA  FFFB         	movff	??_tc_low+4,pclatu
 14696  0000B2  C0B9  FFFA         	movff	??_tc_low+3,pclath
 14697  0000B6  C0B8  FFE0         	movff	??_tc_low+2,bsr
 14698  0000BA  C0B7  FFE8         	movff	??_tc_low+1,wreg
 14699  0000BE  C0B6  FFD8         	movff	??_tc_low,status
 14700  0000C2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 14701  0000C4  0010               	retfie	
 14702  0000C6                     __end_of_tc_low:
 14703                           	opt stack 0
 14704                           pclatu	equ	0xFFB
 14705                           pclath	equ	0xFFA
 14706                           tblptru	equ	0xFF8
 14707                           tblptrh	equ	0xFF7
 14708                           tblptrl	equ	0xFF6
 14709                           tablat	equ	0xFF5
 14710                           prodh	equ	0xFF4
 14711                           prodl	equ	0xFF3
 14712                           intcon	equ	0xFF2
 14713                           intcon2	equ	0xFF1
 14714                           postinc0	equ	0xFEE
 14715                           fsr0h	equ	0xFEA
 14716                           fsr0l	equ	0xFE9
 14717                           wreg	equ	0xFE8
 14718                           postinc1	equ	0xFE6
 14719                           postdec1	equ	0xFE5
 14720                           fsr1h	equ	0xFE2
 14721                           fsr1l	equ	0xFE1
 14722                           bsr	equ	0xFE0
 14723                           indf2	equ	0xFDF
 14724                           postinc2	equ	0xFDE
 14725                           postdec2	equ	0xFDD
 14726                           fsr2h	equ	0xFDA
 14727                           fsr2l	equ	0xFD9
 14728                           status	equ	0xFD8
 14729                           
 14730 ;; *************** function _tc_high *****************
 14731 ;; Defined at:
 14732 ;;		line 152 in file "../Main.c"
 14733 ;; Parameters:    Size  Location     Type
 14734 ;;		None
 14735 ;; Auto vars:     Size  Location     Type
 14736 ;;		None
 14737 ;; Return value:  Size  Location     Type
 14738 ;;                  1    wreg      void 
 14739 ;; Registers used:
 14740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14746 ;;      Params:         0       0       0       0       0       0       0       0       0
 14747 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14748 ;;      Temps:         18       0       0       0       0       0       0       0       0
 14749 ;;      Totals:        18       0       0       0       0       0       0       0       0
 14750 ;;Total ram usage:       18 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; Hardware stack levels required when called:    1
 14753 ;; This function calls:
 14754 ;;		_EUSART1_Receive_ISR
 14755 ;;		_EUSART1_Transmit_ISR
 14756 ;; This function is called by:
 14757 ;;		Interrupt level 2
 14758 ;; This function uses a non-reentrant model
 14759 ;;
 14760                           
 14761                           	psect	intcode
 14762  000008                     __pintcode:
 14763                           	opt stack 0
 14764  000008                     _tc_high:
 14765                           	opt stack 22
 14766                           
 14767                           ;incstack = 0
 14768  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14769  00000A  ED40  F01D         	call	int_func,f	;refresh shadow registers
 14770                           pclatu	equ	0xFFB
 14771                           pclath	equ	0xFFA
 14772                           tblptru	equ	0xFF8
 14773                           tblptrh	equ	0xFF7
 14774                           tblptrl	equ	0xFF6
 14775                           tablat	equ	0xFF5
 14776                           prodh	equ	0xFF4
 14777                           prodl	equ	0xFF3
 14778                           intcon	equ	0xFF2
 14779                           intcon2	equ	0xFF1
 14780                           postinc0	equ	0xFEE
 14781                           fsr0h	equ	0xFEA
 14782                           fsr0l	equ	0xFE9
 14783                           wreg	equ	0xFE8
 14784                           postinc1	equ	0xFE6
 14785                           postdec1	equ	0xFE5
 14786                           fsr1h	equ	0xFE2
 14787                           fsr1l	equ	0xFE1
 14788                           bsr	equ	0xFE0
 14789                           indf2	equ	0xFDF
 14790                           postinc2	equ	0xFDE
 14791                           postdec2	equ	0xFDD
 14792                           fsr2h	equ	0xFDA
 14793                           fsr2l	equ	0xFD9
 14794                           status	equ	0xFD8
 14795                           
 14796                           	psect	intcode_body
 14797  003A80                     __pintcode_body:
 14798                           	opt stack 22
 14799  003A80                     int_func:
 14800                           	opt stack 22
 14801  003A80  0006               	pop		; remove dummy address from shadow register refresh
 14802  003A82  CFFA F001          	movff	pclath,??_tc_high
 14803  003A86  CFFB F002          	movff	pclatu,??_tc_high+1
 14804  003A8A  CFE9 F003          	movff	fsr0l,??_tc_high+2
 14805  003A8E  CFEA F004          	movff	fsr0h,??_tc_high+3
 14806  003A92  CFE1 F005          	movff	fsr1l,??_tc_high+4
 14807  003A96  CFE2 F006          	movff	fsr1h,??_tc_high+5
 14808  003A9A  CFD9 F007          	movff	fsr2l,??_tc_high+6
 14809  003A9E  CFDA F008          	movff	fsr2h,??_tc_high+7
 14810  003AA2  CFF3 F009          	movff	prodl,??_tc_high+8
 14811  003AA6  CFF4 F00A          	movff	prodh,??_tc_high+9
 14812  003AAA  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 14813  003AAE  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 14814  003AB2  CFF8 F00D          	movff	tblptru,??_tc_high+12
 14815  003AB6  CFF5 F00E          	movff	tablat,??_tc_high+13
 14816  003ABA  C04D  F00F         	movff	btemp,??_tc_high+14
 14817  003ABE  C04E  F010         	movff	btemp+1,??_tc_high+15
 14818  003AC2  C04F  F011         	movff	btemp+2,??_tc_high+16
 14819  003AC6  C050  F012         	movff	btemp+3,??_tc_high+17
 14820                           
 14821                           ;Main.c: 154: if (INTCONbits.TMR0IF)
 14822  003ACA  A4F2               	btfss	intcon,2,c	;volatile
 14823  003ACC  D019               	goto	i2l101
 14824                           
 14825                           ;Main.c: 155: {
 14826                           ;Main.c: 156: if(Led1_Counter <= 100)
 14827  003ACE  502D               	movf	_Led1_Counter+1,w,c	;volatile
 14828  003AD0  E106               	bnz	i2l102
 14829  003AD2  0E65               	movlw	101
 14830  003AD4  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14831  003AD6  B0D8               	btfsc	status,0,c
 14832  003AD8  D002               	goto	i2l102
 14833                           
 14834                           ;Main.c: 157: {
 14835                           ;Main.c: 158: PORTAbits.RA4 = 1;
 14836  003ADA  8880               	bsf	3968,4,c	;volatile
 14837                           
 14838                           ;Main.c: 159: }
 14839  003ADC  D001               	goto	i2l103
 14840  003ADE                     i2l102:
 14841                           
 14842                           ;Main.c: 160: else
 14843                           ;Main.c: 161: {
 14844                           ;Main.c: 162: PORTAbits.RA4 = 0;
 14845  003ADE  9880               	bcf	3968,4,c	;volatile
 14846  003AE0                     i2l103:
 14847                           
 14848                           ;Main.c: 163: }
 14849                           ;Main.c: 164: if(Led1_Counter >= 700)
 14850  003AE0  0EBC               	movlw	188
 14851  003AE2  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14852  003AE4  0E02               	movlw	2
 14853  003AE6  582D               	subwfb	_Led1_Counter+1,w,c	;volatile
 14854  003AE8  A0D8               	btfss	status,0,c
 14855  003AEA  D004               	goto	i2l104
 14856                           
 14857                           ;Main.c: 165: {
 14858                           ;Main.c: 166: Led1_Counter = 0;
 14859  003AEC  0E00               	movlw	0
 14860  003AEE  6E2D               	movwf	_Led1_Counter+1,c	;volatile
 14861  003AF0  0E00               	movlw	0
 14862  003AF2  6E2C               	movwf	_Led1_Counter,c	;volatile
 14863  003AF4                     i2l104:
 14864                           
 14865                           ;Main.c: 167: }
 14866                           ;Main.c: 168: Led1_Counter++;
 14867  003AF4  4A2C               	infsnz	_Led1_Counter,f,c	;volatile
 14868  003AF6  2A2D               	incf	_Led1_Counter+1,f,c	;volatile
 14869                           
 14870                           ;Main.c: 169: Update_State_Machine = 1;
 14871  003AF8  0E01               	movlw	1
 14872  003AFA  0100               	movlb	0	; () banked
 14873  003AFC  6F8B               	movwf	_Update_State_Machine& (0+255),b	;volatile
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;Main.c: 170: INTCONbits.TMR0IF = 0;
 14877  003AFE  94F2               	bcf	intcon,2,c	;volatile
 14878  003B00                     i2l101:
 14879                           
 14880                           ;Main.c: 171: }
 14881                           ;Main.c: 173: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 14882                           
 14883                           ; BSR set to: 0
 14884  003B00  BA9D               	btfsc	3997,5,c	;volatile
 14885  003B02  AA9E               	btfss	3998,5,c	;volatile
 14886  003B04  D002               	goto	i2l105
 14887                           
 14888                           ;Main.c: 174: EUSART1_Receive_ISR();
 14889  003B06  EC28  F021         	call	_EUSART1_Receive_ISR	;wreg free
 14890  003B0A                     i2l105:
 14891                           
 14892                           ;Main.c: 175: }
 14893                           ;Main.c: 176: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 14894  003B0A  B89D               	btfsc	3997,4,c	;volatile
 14895  003B0C  A89E               	btfss	3998,4,c	;volatile
 14896  003B0E  D002               	goto	i2l106
 14897                           
 14898                           ;Main.c: 177: EUSART1_Transmit_ISR();
 14899  003B10  EC11  F021         	call	_EUSART1_Transmit_ISR	;wreg free
 14900  003B14                     i2l106:
 14901  003B14  C012  F050         	movff	??_tc_high+17,btemp+3
 14902  003B18  C011  F04F         	movff	??_tc_high+16,btemp+2
 14903  003B1C  C010  F04E         	movff	??_tc_high+15,btemp+1
 14904  003B20  C00F  F04D         	movff	??_tc_high+14,btemp
 14905  003B24  C00E  FFF5         	movff	??_tc_high+13,tablat
 14906  003B28  C00D  FFF8         	movff	??_tc_high+12,tblptru
 14907  003B2C  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 14908  003B30  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 14909  003B34  C00A  FFF4         	movff	??_tc_high+9,prodh
 14910  003B38  C009  FFF3         	movff	??_tc_high+8,prodl
 14911  003B3C  C008  FFDA         	movff	??_tc_high+7,fsr2h
 14912  003B40  C007  FFD9         	movff	??_tc_high+6,fsr2l
 14913  003B44  C006  FFE2         	movff	??_tc_high+5,fsr1h
 14914  003B48  C005  FFE1         	movff	??_tc_high+4,fsr1l
 14915  003B4C  C004  FFEA         	movff	??_tc_high+3,fsr0h
 14916  003B50  C003  FFE9         	movff	??_tc_high+2,fsr0l
 14917  003B54  C002  FFFB         	movff	??_tc_high+1,pclatu
 14918  003B58  C001  FFFA         	movff	??_tc_high,pclath
 14919  003B5C  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14920  003B5E  0011               	retfie		f
 14921  003B60                     __end_of_tc_high:
 14922                           	opt stack 0
 14923                           pclatu	equ	0xFFB
 14924                           pclath	equ	0xFFA
 14925                           tblptru	equ	0xFF8
 14926                           tblptrh	equ	0xFF7
 14927                           tblptrl	equ	0xFF6
 14928                           tablat	equ	0xFF5
 14929                           prodh	equ	0xFF4
 14930                           prodl	equ	0xFF3
 14931                           intcon	equ	0xFF2
 14932                           intcon2	equ	0xFF1
 14933                           postinc0	equ	0xFEE
 14934                           fsr0h	equ	0xFEA
 14935                           fsr0l	equ	0xFE9
 14936                           wreg	equ	0xFE8
 14937                           postinc1	equ	0xFE6
 14938                           postdec1	equ	0xFE5
 14939                           fsr1h	equ	0xFE2
 14940                           fsr1l	equ	0xFE1
 14941                           bsr	equ	0xFE0
 14942                           indf2	equ	0xFDF
 14943                           postinc2	equ	0xFDE
 14944                           postdec2	equ	0xFDD
 14945                           fsr2h	equ	0xFDA
 14946                           fsr2l	equ	0xFD9
 14947                           status	equ	0xFD8
 14948                           
 14949 ;; *************** function _EUSART1_Transmit_ISR *****************
 14950 ;; Defined at:
 14951 ;;		line 184 in file "../eusart1.c"
 14952 ;; Parameters:    Size  Location     Type
 14953 ;;		None
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;		None
 14956 ;; Return value:  Size  Location     Type
 14957 ;;                  1    wreg      void 
 14958 ;; Registers used:
 14959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14960 ;; Tracked objects:
 14961 ;;		On entry : 0/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14965 ;;      Params:         0       0       0       0       0       0       0       0       0
 14966 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14967 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14968 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14969 ;;Total ram usage:        0 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; This function calls:
 14972 ;;		Nothing
 14973 ;; This function is called by:
 14974 ;;		_tc_high
 14975 ;; This function uses a non-reentrant model
 14976 ;;
 14977                           
 14978                           	psect	text44
 14979  004222                     __ptext44:
 14980                           	opt stack 0
 14981  004222                     _EUSART1_Transmit_ISR:
 14982                           	opt stack 22
 14983                           
 14984                           ;eusart1.c: 187: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 14985                           
 14986                           ;incstack = 0
 14987  004222  0E7E               	movlw	126
 14988  004224  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 14989  004226  D012               	goto	i2l538
 14990                           
 14991                           ;eusart1.c: 188: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 14992  004228  5043               	movf	_eusart1TxTail,w,c
 14993  00422A  0D01               	mullw	1
 14994  00422C  0E7E               	movlw	low _eusart1TxBuffer
 14995  00422E  24F3               	addwf	prodl,w,c
 14996  004230  6ED9               	movwf	fsr2l,c
 14997  004232  0E04               	movlw	high _eusart1TxBuffer
 14998  004234  20F4               	addwfc	prodh,w,c
 14999  004236  6EDA               	movwf	fsr2h,c
 15000  004238  50DF               	movf	indf2,w,c
 15001  00423A  6EAD               	movwf	4013,c	;volatile
 15002  00423C  2A43               	incf	_eusart1TxTail,f,c
 15003                           
 15004                           ;eusart1.c: 189: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 15005  00423E  0E7D               	movlw	125
 15006  004240  6443               	cpfsgt	_eusart1TxTail,c
 15007  004242  D002               	goto	i2l539
 15008                           
 15009                           ;eusart1.c: 190: eusart1TxTail = 0;
 15010  004244  0E00               	movlw	0
 15011  004246  6E43               	movwf	_eusart1TxTail,c
 15012  004248                     i2l539:
 15013                           
 15014                           ;eusart1.c: 191: }
 15015                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 15016  004248  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 15017                           
 15018                           ;eusart1.c: 193: } else {
 15019  00424A  0012               	return	
 15020  00424C                     i2l538:
 15021                           
 15022                           ;eusart1.c: 194: PIE1bits.TX1IE = 0;
 15023  00424C  989D               	bcf	3997,4,c	;volatile
 15024  00424E  0012               	return	
 15025  004250                     __end_of_EUSART1_Transmit_ISR:
 15026                           	opt stack 0
 15027                           pclatu	equ	0xFFB
 15028                           pclath	equ	0xFFA
 15029                           tblptru	equ	0xFF8
 15030                           tblptrh	equ	0xFF7
 15031                           tblptrl	equ	0xFF6
 15032                           tablat	equ	0xFF5
 15033                           prodh	equ	0xFF4
 15034                           prodl	equ	0xFF3
 15035                           intcon	equ	0xFF2
 15036                           intcon2	equ	0xFF1
 15037                           postinc0	equ	0xFEE
 15038                           fsr0h	equ	0xFEA
 15039                           fsr0l	equ	0xFE9
 15040                           wreg	equ	0xFE8
 15041                           postinc1	equ	0xFE6
 15042                           postdec1	equ	0xFE5
 15043                           fsr1h	equ	0xFE2
 15044                           fsr1l	equ	0xFE1
 15045                           bsr	equ	0xFE0
 15046                           indf2	equ	0xFDF
 15047                           postinc2	equ	0xFDE
 15048                           postdec2	equ	0xFDD
 15049                           fsr2h	equ	0xFDA
 15050                           fsr2l	equ	0xFD9
 15051                           status	equ	0xFD8
 15052                           
 15053 ;; *************** function _EUSART1_Receive_ISR *****************
 15054 ;; Defined at:
 15055 ;;		line 198 in file "../eusart1.c"
 15056 ;; Parameters:    Size  Location     Type
 15057 ;;		None
 15058 ;; Auto vars:     Size  Location     Type
 15059 ;;		None
 15060 ;; Return value:  Size  Location     Type
 15061 ;;                  1    wreg      void 
 15062 ;; Registers used:
 15063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15064 ;; Tracked objects:
 15065 ;;		On entry : 0/0
 15066 ;;		On exit  : 0/0
 15067 ;;		Unchanged: 0/0
 15068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15069 ;;      Params:         0       0       0       0       0       0       0       0       0
 15070 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15072 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15073 ;;Total ram usage:        0 bytes
 15074 ;; Hardware stack levels used:    1
 15075 ;; This function calls:
 15076 ;;		Nothing
 15077 ;; This function is called by:
 15078 ;;		_tc_high
 15079 ;; This function uses a non-reentrant model
 15080 ;;
 15081                           
 15082                           	psect	text45
 15083  004250                     __ptext45:
 15084                           	opt stack 0
 15085  004250                     _EUSART1_Receive_ISR:
 15086                           	opt stack 22
 15087                           
 15088                           ;eusart1.c: 199: if (1 == RCSTA1bits.OERR) {
 15089                           
 15090                           ;incstack = 0
 15091  004250  A2AB               	btfss	4011,1,c	;volatile
 15092  004252  D002               	goto	i2l544
 15093                           
 15094                           ;eusart1.c: 202: RCSTA1bits.CREN = 0;
 15095  004254  98AB               	bcf	4011,4,c	;volatile
 15096                           
 15097                           ;eusart1.c: 203: RCSTA1bits.CREN = 1;
 15098  004256  88AB               	bsf	4011,4,c	;volatile
 15099  004258                     i2l544:
 15100                           
 15101                           ;eusart1.c: 204: }
 15102                           ;eusart1.c: 207: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15103  004258  5041               	movf	_eusart1RxHead,w,c
 15104  00425A  0D01               	mullw	1
 15105  00425C  0E00               	movlw	low _eusart1RxBuffer
 15106  00425E  24F3               	addwf	prodl,w,c
 15107  004260  6ED9               	movwf	fsr2l,c
 15108  004262  0E04               	movlw	high _eusart1RxBuffer
 15109  004264  20F4               	addwfc	prodh,w,c
 15110  004266  6EDA               	movwf	fsr2h,c
 15111  004268  CFAE FFDF          	movff	4014,indf2	;volatile
 15112  00426C  2A41               	incf	_eusart1RxHead,f,c
 15113                           
 15114                           ;eusart1.c: 208: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 15115  00426E  0E7D               	movlw	125
 15116  004270  6441               	cpfsgt	_eusart1RxHead,c
 15117  004272  D002               	goto	i2l545
 15118                           
 15119                           ;eusart1.c: 209: eusart1RxHead = 0;
 15120  004274  0E00               	movlw	0
 15121  004276  6E41               	movwf	_eusart1RxHead,c
 15122  004278                     i2l545:
 15123                           
 15124                           ;eusart1.c: 210: }
 15125                           ;eusart1.c: 211: eusart1RxCount++;
 15126  004278  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 15127  00427A  0012               	return		;funcret
 15128  00427C                     __end_of_EUSART1_Receive_ISR:
 15129                           	opt stack 0
 15130                           pclatu	equ	0xFFB
 15131                           pclath	equ	0xFFA
 15132                           tblptru	equ	0xFF8
 15133                           tblptrh	equ	0xFF7
 15134                           tblptrl	equ	0xFF6
 15135                           tablat	equ	0xFF5
 15136                           prodh	equ	0xFF4
 15137                           prodl	equ	0xFF3
 15138                           intcon	equ	0xFF2
 15139                           intcon2	equ	0xFF1
 15140                           postinc0	equ	0xFEE
 15141                           fsr0h	equ	0xFEA
 15142                           fsr0l	equ	0xFE9
 15143                           wreg	equ	0xFE8
 15144                           postinc1	equ	0xFE6
 15145                           postdec1	equ	0xFE5
 15146                           fsr1h	equ	0xFE2
 15147                           fsr1l	equ	0xFE1
 15148                           bsr	equ	0xFE0
 15149                           indf2	equ	0xFDF
 15150                           postinc2	equ	0xFDE
 15151                           postdec2	equ	0xFDD
 15152                           fsr2h	equ	0xFDA
 15153                           fsr2l	equ	0xFD9
 15154                           status	equ	0xFD8
 15155                           pclatu	equ	0xFFB
 15156                           pclath	equ	0xFFA
 15157                           tblptru	equ	0xFF8
 15158                           tblptrh	equ	0xFF7
 15159                           tblptrl	equ	0xFF6
 15160                           tablat	equ	0xFF5
 15161                           prodh	equ	0xFF4
 15162                           prodl	equ	0xFF3
 15163                           intcon	equ	0xFF2
 15164                           intcon2	equ	0xFF1
 15165                           postinc0	equ	0xFEE
 15166                           fsr0h	equ	0xFEA
 15167                           fsr0l	equ	0xFE9
 15168                           wreg	equ	0xFE8
 15169                           postinc1	equ	0xFE6
 15170                           postdec1	equ	0xFE5
 15171                           fsr1h	equ	0xFE2
 15172                           fsr1l	equ	0xFE1
 15173                           bsr	equ	0xFE0
 15174                           indf2	equ	0xFDF
 15175                           postinc2	equ	0xFDE
 15176                           postdec2	equ	0xFDD
 15177                           fsr2h	equ	0xFDA
 15178                           fsr2l	equ	0xFD9
 15179                           status	equ	0xFD8
 15180                           
 15181                           	psect	rparam
 15182  0000                     pclatu	equ	0xFFB
 15183                           pclath	equ	0xFFA
 15184                           tblptru	equ	0xFF8
 15185                           tblptrh	equ	0xFF7
 15186                           tblptrl	equ	0xFF6
 15187                           tablat	equ	0xFF5
 15188                           prodh	equ	0xFF4
 15189                           prodl	equ	0xFF3
 15190                           intcon	equ	0xFF2
 15191                           intcon2	equ	0xFF1
 15192                           postinc0	equ	0xFEE
 15193                           fsr0h	equ	0xFEA
 15194                           fsr0l	equ	0xFE9
 15195                           wreg	equ	0xFE8
 15196                           postinc1	equ	0xFE6
 15197                           postdec1	equ	0xFE5
 15198                           fsr1h	equ	0xFE2
 15199                           fsr1l	equ	0xFE1
 15200                           bsr	equ	0xFE0
 15201                           indf2	equ	0xFDF
 15202                           postinc2	equ	0xFDE
 15203                           postdec2	equ	0xFDD
 15204                           fsr2h	equ	0xFDA
 15205                           fsr2l	equ	0xFD9
 15206                           status	equ	0xFD8
 15207                           
 15208                           	psect	temp
 15209  00004D                     btemp:
 15210                           	opt stack 0
 15211  00004D                     	ds	1
 15212  0000                     int$flags	set	btemp
 15213  0000                     wtemp6	set	btemp+1
 15214                           pclatu	equ	0xFFB
 15215                           pclath	equ	0xFFA
 15216                           tblptru	equ	0xFF8
 15217                           tblptrh	equ	0xFF7
 15218                           tblptrl	equ	0xFF6
 15219                           tablat	equ	0xFF5
 15220                           prodh	equ	0xFF4
 15221                           prodl	equ	0xFF3
 15222                           intcon	equ	0xFF2
 15223                           intcon2	equ	0xFF1
 15224                           postinc0	equ	0xFEE
 15225                           fsr0h	equ	0xFEA
 15226                           fsr0l	equ	0xFE9
 15227                           wreg	equ	0xFE8
 15228                           postinc1	equ	0xFE6
 15229                           postdec1	equ	0xFE5
 15230                           fsr1h	equ	0xFE2
 15231                           fsr1l	equ	0xFE1
 15232                           bsr	equ	0xFE0
 15233                           indf2	equ	0xFDF
 15234                           postinc2	equ	0xFDE
 15235                           postdec2	equ	0xFDD
 15236                           fsr2h	equ	0xFDA
 15237                           fsr2l	equ	0xFD9
 15238                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    67
    Data        11
    BSS         906
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      76
    BANK0           160     38     130
    BANK1           256      0     178
    BANK2           256      0     178
    BANK3           256      0     178
    BANK4           256      0     252
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Pcomm_List2	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    Pcomm_List	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_SETxPWM
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _EEPROMxSTORE->_Eeprom_Store
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_atoi
    _TranslateMessage->_printf
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _EEPROMxREAD->_Eeprom_Read
    _SendMessage->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_READxRECEIVEDxMESSAGE
    _Update_StateMchn->_Train_Path
    _Train_Path->_Train_Move_Left_Brake
    _Train_Path->_Train_Move_Left_Start
    _Train_Path->_Train_Move_Right_Brake
    _Train_Path->_Train_Move_Right_Start
    _READxRECEIVEDxMESSAGE->_printf
    _TranslateMessage->_printf
    _DIAGNOSTICxTOxPC->_SendMessage
    _SendMessage->_printf

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  681883
                     _APIxInitialize
                   _DIAGNOSTICxTOxPC
                        _EEPROMxREAD
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     5     5      0  638582
                                             25 BANK0      5     5      0
                    _Debounce_Inputs
                       _EEPROMxSTORE
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                            _SETxPWM
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  510500
                                             23 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   33550
                                             30 COMRAM     7     4      3
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1   31406
                                             30 COMRAM     2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMxSTORE                                        10    10      0     660
                                             26 COMRAM    10    10      0
                       _Eeprom_Store
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Store                                         8     4      4     372
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0   30377
                                             30 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     144
                                             20 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   23298
                                             34 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   21127
                                             31 COMRAM     4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   6     2      4    1744
                                             20 COMRAM     6     2      4
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (5) _GETxAPIxVAL                                          2     0      2   14431
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0   15802
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          6     2      4   15802
                                             24 COMRAM     6     2      4
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         6     2      4    1216
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROMxREAD                                          5     5      0     395
                                             26 COMRAM     5     5      0
                        _Eeprom_Read
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read                                          8     6      2     236
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _DIAGNOSTICxTOxPC                                     2     2      0    3649
                                             31 COMRAM     2     2      0
                        _SendMessage
 ---------------------------------------------------------------------------------
 (2) _SendMessage                                          4     0      4    3649
                                             34 BANK0      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2147
                                             30 COMRAM     1     1      0
                                             21 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     112
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _DIAGNOSTICxTOxPC
     _SendMessage
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _EEPROMxREAD
     _Eeprom_Read
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _EEPROMxSTORE
       _Eeprom_Store
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _SETxPWM
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _SETxAPIxVAL
         _SENDxMESSAGE
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      FC      13       98.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      B2      11       69.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      B2       9       69.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B2       7       69.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      82       5       81.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3E0      20        0.0%
DATA                 0      0     3E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Nov 29 23:17:14 2017

                  _eusart1TxBufferRemaining 0042                           ?_DIAGNOSTICxTOxPC 0001  
                                        l87 3F6A                                          l88 3F7A  
                                        bsr 000FE0                         ___wmul@multiplicand 0015  
                               __CFG_BORV$3 000000                                 ?_GETxAPIxRW 0013  
                              __CFG_CP0$OFF 000000                          ??_DIAGNOSTICxTOxPC 0020  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l210 0BE8  
                                       l203 12D8                                         l211 0C14  
                                       l220 0DAC                                         l212 0C3C  
                                       l204 0B28                                         l301 1282  
                                       l221 0DD6                                         l213 0C4C  
                                       l310 1444                                         l302 128C  
                                       l230 0F5A                                         l222 0E02  
                                       l214 0CCA                                         l206 0B38  
                                       l311 134E                                         l303 12CA  
                                       l231 0F5E                                         l223 0E0C  
                                       l215 0CDA                                         l207 0B6A  
                                       l304 15A6                                         l320 13A2  
                                       l240 0FD2                                         l232 0FA8  
                                       l216 0D04                                         l208 0B94  
                                       l241 0FD6                                         l225 0EE8  
                                       l217 0D2E                                         l209 0BBE  
                                       l402 2522                                         l306 1412  
                                       l314 136A                                         l250 1048  
                                       l242 0FDA                                         l226 0F1C  
                                       l218 0D58                                         l403 2374  
                                       l323 13BE                                         l307 1326  
                                       l251 1054                                         l243 0FE6  
                                       l235 0FB6                                         l227 0F24  
                                       l219 0D82                                         l260 10C8  
                                       l228 0F40                                         l180 08CA  
                                       l421 2434                                         l181 158E  
                                       l333 1486                                         l317 1386  
                                       l253 11E8                                         l261 10CC  
                                       l245 1062                                         l237 0FF4  
                                       l414 23D8                                         l342 1536  
                                       l326 13DA                                         l270 110E  
                                       l246 103C                                         l238 0FCE  
                                       l182 08D2                                         l343 14C6  
                                       l255 10DA                                         l247 1092  
                                       l239 1024                                         l183 0910  
                                       l600 37B2                                         l424 244C  
                                       l336 1494                                         l280 11AA  
                                       l272 115A                                         l264 111C  
                                       l248 1040                                         l192 09CA  
                                       l441 250A                                         l417 2404  
                                       l353 1578                                         l329 13F6  
                                       l249 1044                                         l610 37E6  
                                       l450 2544                                         l434 24AA  
                                       l338 151A                                         l346 14E2  
                                       l290 1252                                         l258 10C0  
                                       l186 094E                                         l178 089E  
                                       l611 37D6                                         l363 25D0  
                                       l435 24C2                                         l419 241C  
                                       l371 229C                                         l339 149C  
                                       l283 118A                                         l259 10C4  
                                       l195 0A0A                                         l604 3846  
                                       l452 254A                                         l356 1586  
                                       l284 118E                                         l268 110A  
                                       l517 41F2                                         l605 37B6  
                                       l461 2590                                         l437 24DA  
                                       l365 22BC                                         l373 22A8  
                                       l349 14FE                                         l293 1260  
                                       l285 1198                                         l197 0A4A  
                                       l189 098C                                         l622 2D48  
                                       l614 3826                                         l446 2564  
                                       l454 2550                                         l390 2358  
                                       l382 22F0                                         l366 2278  
                                       l286 119C                                         l278 114C  
                                       l519 421A                                         l623 2CE0  
                                       l471 25B8                                         l463 2598  
                                       l447 253E                                         l439 24F2  
                                       l391 2338                                         l367 2288  
                                       l287 11DA                                         l199 0AD4  
                                       l608 37CC                                         l376 2624  
                                       l384 22FC                                         l296 129A  
                                       l288 1218                                         l633 2D8A  
                                       l625 2CFC                                         l609 37FC  
                                       l473 25C8                                         l465 25A0  
                                       l457 2580                                         l369 2290  
                                       l297 127A                                         l289 121C  
                                       l394 233E                                         l378 231C  
                                       l386 2308                                         l643 285C  
                                       l651 26CE                                         l635 2DA6  
                                       l627 2D18                                         l467 25A8  
                                       l459 2588                                         l379 22DA  
                                       l299 127E                                         l644 2812  
                                       l900 189E                                         l396 2344  
                                       l661 27DC                                         l653 2704  
                                       l645 2640                                         l741 3CF2  
                                       l629 2D32                                         l901 18C0  
                                       l469 25B0                                         l750 4030  
                                       l910 193E                                         l822 3EEE  
                                       l830 3EC2                                         l398 234A  
                                       l655 273A                                         l647 265A  
                                       l671 28A8                                         l831 3EDA  
                                       l823 3E8E                                         l672 28E4  
                                       l904 18D6                                         l832 3EEA  
                                       l657 2770                                         l649 2698  
                                       l673 2920                                         l913 1954  
                                       l905 18E0                                         l825 3E92  
                                       l841 3E12                                         l674 295C  
                                       l922 19D2                                         l914 195E  
                                       l762 3FB8                                         l826 3E96  
                                       l842 3E16                                         l659 27A6  
                                       l747 4016                                         l675 2998  
                                       l931 1A50                                         l923 19DC  
                                       l755 32D0                                         l827 3EAE  
                                       l843 3E2E                                         l668 2A54  
                                       l676 29D4                                         l940 1ACE  
                                       l932 1A5A                                         l908 1974  
                                       l860 16A2                                         l828 3EBE  
                                       l844 3E3E                                         l677 2A10  
                                       l669 2864                                         l941 1AD8  
                                       l917 19F2                                         l909 191C  
                                       l765 3FDC                                         l757 33F4  
                                       l598 3830                                         l950 1B56  
                                       l926 1A70                                         l918 199A  
                                       l854 16B8                                         l838 3E6E  
                                       l846 3E42                                         l599 375A  
                                       l935 1AEE                                         l927 1A18  
                                       l919 19BC                                         l863 1728  
                                       l855 1660                                         l847 3E5A  
                                       l839 3E0E                                         l944 1B6C  
                                       l936 1A96                                         l928 1A3A  
                                       l872 1798                                         l864 16D0  
                                       l856 166A                                         l848 3E6A  
                                       l953 1BEA                                         l945 1B14  
                                       l937 1AB8                                         l881 1808  
                                       l873 1740                                         l865 16DA  
                                       l962 1C5A                                         l954 1B92  
                                       l946 1B36                                         l890 1878  
                                       l882 17B0                                         l874 174A  
                                       l971 1CCA                                         l963 1C02  
                                       l955 1BB4                                         l891 1820  
                                       l883 17BA                                         l859 1680  
                                       l980 1D3A                                         l972 1C72  
                                       l964 1C24                                         l892 1842  
                                       l868 16F0                                         l981 1CE2  
                                       l973 1C94                                         l949 1B4C  
                                       l877 1760                                         l869 1712  
                                       _API 0100                                         l982 1D04  
                                       l958 1BCA                                         l886 17D0  
                                       l878 1782                                         l967 1C3A  
                                       l959 1BD4                                         l895 1858  
                                       l887 17F2                                         l976 1CAA  
                                       l968 1C44                                         l896 1862  
                                       l985 1D1A                                         l977 1CB4  
                                       l986 1D24                                         l899 18F6  
                              __CFG_CPB$OFF 000000                                _Stop_Program 0085  
                                       _PR2 000FCB                                __CFG_CPD$OFF 000000  
                              __CFG_BOR$OFF 000000                Eeprom_Read@Location_Low_Byte 0015  
                                       prod 000FF3                                         wreg 000FE8  
                    ?_READxRECEIVEDxMESSAGE 0001            Train_Move_Right_Start@Return_Val 00DD  
                              ?_GETxAPIxVAL 0013                                  _Diag_Comm2 006E  
                           APIxInitialize@i 0013                                __CFG_LVP$OFF 000000  
       __end_of_Left_Mountain_From_The_Left 3970                 _Left_Mountain_From_The_Left 385E  
                              __CFG_WDT$OFF 000000                                        l1011 2AE0  
                                      l1004 2C60                                        l1100 39FE  
     __end_of_Right_Mountain_From_The_Right 3636      __size_of_Right_Mountain_From_The_Right 0114  
             _Right_Mountain_From_The_Right 3522                                        l1021 2C74  
                                      l1013 2BC8                                        l1005 2A9C  
                                      l1022 2BCE                                        l1006 2BBA  
                                      l1110 3A68                                        l1023 2BF8  
                                      l1015 2BAA                                        l1024 2C06  
                                      l1016 2B2E                                        l1008 2B1E  
                                      l1120 2DD2                                        l1009 2AA2  
                                      l1201 3746                                        l1121 2E06  
                                      l1018 2B6C                                        l1210 3704  
                                      l1202 3672                                        l1122 2F12  
                                      l1050 3058                                        l1107 3A3A  
                                      l1203 36C6                                        l1123 2E30  
                                      l1051 3076                                        l1212 372E  
                                      l1052 318A                                        l1109 3A64  
                                      l1213 3732                                        l1125 2E36  
                                      l1053 3084                                        l1126 2E5E  
                                      l1054 30D6                                        l1222 3036  
                                      l1230 2FAC                                        l1071 3558  
                                      l1119 2EF6                                        l1127 2E6C  
                                      l1055 30FE                                        l1231 2FFE  
                                      l1223 2F18                                        l1128 2EBE  
                                      l1056 3108                                        l1232 3028  
                                      l1224 2F46                                        l1160 3234  
                                      l1073 3632                                        l1129 2EE8  
                                      l1049 316E                                        l1057 3140  
                                      l1225 3052                                        l1161 3242  
                                      l1170 395E                                        l1082 35F2  
                                      l1074 355E                                        l1226 2F70  
                                      l1154 32A4                                        l1162 3274  
                                      l1243 3C66                                        l1171 3864  
                                      l1067 3624                                        l1075 35B4  
                                      l1059 3168                                        l1163 329A  
                                      l1155 3190                                        l1260 3414  
                                      l1244 3CA4                                        l1092 3A6E  
                                      l1084 361A                                        l1068 3528  
                                      l1228 2F76                                        l1156 31AE  
                                      l1093 3976                                        l1085 361E  
                                      l1229 2F9E                                        l1157 32C0  
                                      l1174 3894                                        l1158 31B8  
                                      l1159 320C                                        l1272 34AA  
                                      l1176 396C                                        l1096 39A4  
                                      l1273 34FC                                        l1185 392C  
                                      l1177 389A                                        l1274 34B0  
                                      l1266 3440                                        l1178 38EE  
                                      l1098 3A7C                                        l1259 3404  
                                      l1451 3BA6                                        l1187 3954  
                                      l1099 39AA                                        l1195 3738  
                                      l1268 3468                                        l1188 3958  
                                      l1196 363C                                        l1454 3BF2  
                                      l1455 3BB8                                        l1199 366C  
                                      l1712 408A                                        l1448 3B66  
                                      l1713 4094                                        l1457 3C24  
                                      l1449 3B62                                        l1722 4164  
                                      l1723 416E                                        l1708 406A  
                                      l1709 4062                                        l1629 4300  
                                      l1718 414C                                        l1719 4144  
                                      l6138 1D5A                                        l6148 1DBA  
                                      l8120 3BEE                                        l6178 3CEA  
                                      l8036 3A5A                                        l7510 435A  
                                      l8074 346C                                        l8162 32C8  
                                      l9250 14B8                                        l9154 1340  
                                      l7816 2EF0                                        l7680 307E  
                                      l7648 323C                                        l8740 2CFC  
                                      l7924 3724                                        l7764 3030  
                                      l8760 2D8A                                        l8748 2D32  
                                      l7868 394A                                        l7980 3610  
                                      l8962 0EE8                                        l8866 0C10  
                                      STR_1 084E                                        STR_2 0855  
                                      STR_3 085C                                        STR_4 0863  
                                      STR_5 086A                                        STR_6 085C  
                                      STR_7 0863                                        STR_8 0844  
            Right_Mountain_From_The_Left@rc 00CB                                        u5200 1DBA  
                                      u7000 3A2E                                        u6400 3C54  
                                      u8000 24BE                                        u8010 24D6  
                                      u6500 4150                                        u7060 3498  
                                      u8020 24EE                                        u7230 16C0  
                                      u8030 2506                                        u7080 3506  
                                      u8200 2D08                                        u7400 1900  
                                      u7320 1810                                        u6530 4198  
                                      u7260 1730                                        u7236 16C2  
                                      u6470 406E                                        u6390 40BE  
                                      u9110 379E                                        u7510 1A78  
                                      u7430 197C                                        u7350 1880  
                                      u7326 1812                                        u7190 3350  
                                      u6710 3886                                        u9200 26DC  
                                      u8240 2D96                                        u7600 1B76  
                                      u7520 1A7A                                        u7440 197E  
                                      u7360 1882                                        u9210 2712  
                                      u7290 17A0                                        u7266 1732  
                                      u3995 41BE                                        u9220 2748  
                                      u9230 277E                                        u7630 1BF2  
                                      u7550 1AF6                                        u7470 19FA  
                                      u7390 18FE                                        u9070 155E  
                                      u9240 27B4                                        u7720 1D42  
                                      u7560 1AF8                                        u7480 19FC  
                                      u7296 17A2                                        u6760 3920  
                                      u6840 36F8                                        u6920 35E6  
                                      u9250 27EA                                        u8370 0A7A  
                                      u9180 2670                                        u7660 1C62  
                                      u7636 1BF4                                        u8380 0B04  
                                      u9190 26A6                                        u7726 1D44  
                                      u7590 1B74                                        u6950 3996  
                                      u6790 365E                                        u6870 354A  
                                      u7910 2400                                        u8710 0F86  
                                      u7920 2418                                        u7760 22B8  
                                      u7690 1CD2                                        u7666 1C64  
                                      u7930 2430                                        u8670 0F18  
                                      u8590 0DFE                                        u7696 1CD4  
                                      u8770 1244                                        u8780 1276  
                                      u8960 146C                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                        _Data 00AC  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 224E  
            __size_of_Train_Move_Left_Brake 0146               __end_of_Train_Move_Left_Brake 2F16  
                                      _pLen 0076                                        _atoi 3B60  
                                      _main 3F0A                               ?_EUSART1_Read 0001  
            __size_of_Train_Move_Left_Start 0138                       _Update_StateMchn$2176 00D1  
                     _Update_StateMchn$2177 00D3                             __end_of_SETxPWM 3CDA  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        fsr0l 000FE9  
                                      indf2 000FDF                                        fsr1l 000FE1  
                                      fsr2l 000FD9                                        btemp 004D  
             __end_of_Train_Move_Left_Start 318E                                        prodh 000FF4  
                                      prodl 000FF3                                        start 00C6  
                           __end_of_DataLen 0844                         __end_of_Eeprom_Read 404C  
                             __CFG_IESO$OFF 000000                             __end_of_ApiList 0839  
               EUSART1_Initialize@baud_rate 0013                          Green_Led@Operation 0013  
                             __CFG_MCLRE$ON 000000                                ___param_bank 000000  
                      Eeprom_Store@Location 0013                               ??_Init_Timers 0013  
                           __end_of_Red_Led 3E8A                               __CFG_PLLDIV$5 000000  
                           EEPROMxREAD@Data 001D                        __end_of_EEPROMxSTORE 33F8  
                            __CFG_CCP2MX$ON 000000                                       ?_atoi 0019  
                                     ?_main 0001                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 0013  
                                     _T0CON 000FD5                  __end_of_SETxAPIxVALxNoxRET 41B4  
                                     _T2CON 000FCA                             __end_of___lwdiv 409E  
                              SETxPWM@speed 001F                                       i2l101 3B00  
                                     i2l102 3ADE                                       i2l103 3AE0  
                                     i2l104 3AF4                                       i2l105 3B0A  
                           __end_of___lwmod 4178                                       i2l106 3B14  
                                     i2l544 4258                                       i2l545 4278  
                                     i2l538 424C                                       i2l539 4248  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 4222  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                                     _pData 0078                              __CFG_EBTRB$OFF 000000  
                           __end_of_dpowers 0843                             __end_of_isdigit 4308  
                           __end_of_tc_high 3B60                                       atoi@a 001E  
                                     atoi@s 0019                                       _putch 4358  
                                     pclath 000FFA                                       tablat 000FF5  
                           ?_APIxInitialize 0001                              ??_EUSART1_Read 0013  
                                     status 000FD8                                       wtemp6 004E  
 Train_Move_Left_Brake@Train_Move_Wait_Time 0064                   __size_of_TranslateMessage 0158  
                       __size_of_GETxAPIxRW 001C                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 3FEA                        __size_of_EEPROMxREAD 009A  
                           __initialization 3D74                                __end_of_atoi 3C2E  
                __end_of_EUSART1_Initialize 4136                                __end_of_main 3F84  
                             ??_SendMessage 0020                            __end_of_Init_Pwm 42A4  
                                    ??_atoi 001B                                      ??_main 0026  
                       __end_of_Init_Timers 4358                               __activetblptr 000002  
                    Eeprom_Read@Return_Data 0019                            __end_of_Junction 2C78  
                              _Led1_Counter 002C                                  _Pcomm_List 0072  
                         _Green_Led_Counter 002A                       ?_EUSART1_Transmit_ISR 0001  
                         ?_Update_StateMchn 0001                          ??_Update_StateMchn 00CF  
                                    _ADCON1 000FC1                                      _EEDATA 000FA8  
                                    _CCPR1L 000FBE                                   ??_SETxPWM 0022  
                                    _EECON2 000FA7                                      ?_putch 0001  
                                    _API_RW 0200                          __size_of_Green_Led 0080  
                               _Eeprom_Read 3FEA                                      _INTCON 000FF2  
                   ?_Train_Move_Right_Brake 0001                                      _RCREG1 000FAE  
                                    _SPBRGH 000FB0                          __size_of_SetDCPWM1 003A  
                   ?_Train_Move_Right_Start 0001                                      _TXREG1 000FAD  
            ?_Right_Mountain_From_The_Right 0001                                   ??_Red_Led 0013  
                            __CFG_XINST$OFF 000000             Train_Move_Left_Brake@Return_Val 00DE  
                                    ___wmul 42A4                              __CFG_STVREN$ON 000000  
                                 ??___lwdiv 0017                                   ??___lwmod 001E  
                                    clear_0 3DBA                                      clear_1 3DC6  
                                    clear_2 3DD2                                _DelayCounter 006C  
                                    clear_3 3DDE                                      clear_4 3DEA  
                                    clear_5 3DF6                                      _tc_low 0018  
                                    _printf 33F8                              _Switch_Moutain 002E  
                                _Train_Path 224E     Right_Mountain_From_The_Right@Return_Val 004B  
    Left_Mountain_From_The_Right@Return_Val 004A                                __pdataCOMRAM 0048  
                            _Switch_Program 0089                                   ??_isdigit 0013  
                                 ??_tc_high 0001                         __end_of_SendMessage 42EA  
                 _Activate_Controls_Counter 007A                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 0019  
                 _Button_Contact_Counter_LB 0033                   _Button_Contact_Counter_LF 0032  
                 _Button_Contact_Counter_RB 0031                   _Button_Contact_Counter_RF 0030  
            __end_of_Train_Move_Right_Brake 3056                             _eusart1RxBuffer 0400  
                      __size_of_GETxAPIxVAL 001C                             _eusart1TxBuffer 047E  
            __end_of_Train_Move_Right_Start 32C4                        _Train_Move_Pwm_Count 007E  
                                __accesstop 0060                     __end_of__initialization 3DFC  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                     __size_of_EEPROMxSTORE 0134                               _Received_Data 0084  
                            __pcstackCOMRAM 0001                                __pidataBANK0 4364  
                               _Init_Timers 4340                               __end_of_putch 4364  
                         __end_of_Green_Led 3F0A                                ??_GETxAPIxRW 0015  
                   ??_READxRECEIVEDxMESSAGE 00D8                        __end_of_EUSART1_Read 4222  
                         __end_of_SetDCPWM1 41EE                             _Red_Led_Counter 0028  
                    ??_EUSART1_Transmit_ISR 0001  Train_Move_Right_Start@Train_Move_Wait_Time 0062  
                  __size_of_Debounce_Inputs 0786                 __end_of_EUSART1_Receive_ISR 427C  
          Train_Move_Right_Brake@Return_Val 00DC                               ?_SENDxMESSAGE 0013  
                 __size_of_DIAGNOSTICxTOxPC 023A                                     ??_putch 0013  
                             _eusart1RxHead 0041                               _eusart1TxHead 0044  
                     __size_of_Eeprom_Store 0066                 Junction@Junction_Left_Right 0020  
                             _eusart1RxTail 0040                                  __pbssBANK0 0060  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                                __pbssBANK3 0300                                  __pbssBANK4 0400  
                             _eusart1TxTail 0043                                _EEPROMxSTORE 32C4  
                                 ?_Init_Pwm 0001                            _TranslateMessage 2C78  
                               _Pcomm_List2 0070                          __end_of_GETxAPIxRW 4340  
                          GETxAPIxVAL@index 0013                            SETxAPIxVAL@index 0019  
                                 ?_Junction 001F                            SETxAPIxVAL@value 001B  
      __size_of_Left_Mountain_From_The_Left 0112                                     ?___wmul 0013  
                          SendMessage@index 00D8                            SendMessage@value 00DA  
                                   _CCP1CON 000FBD                                 _SendMessage 42CA  
                                   ?_tc_low 0001                                     ?_printf 00CB  
                               ?_Train_Path 00CD                                _Eeprom_Store 3F84  
                                   _INTCON2 000FF1   Train_Move_Left_Start@Train_Move_Wait_Time 0066  
                            ??_SENDxMESSAGE 0017                            ??_APIxInitialize 0013  
                                   _SETxPWM 3C2E                            SETxPWM@direction 0021  
                                   _DataLen 0843                                     _ApiList 0801  
                        _SETxAPIxVALxNoxRET 4178                             __CFG_VREGEN$OFF 000000  
                                ??_Init_Pwm 001F                           Eeprom_Store@Value 0015  
                                   _Red_Led 3E0A                       _Train_Move_Left_Brake 2DD0  
                                ??_Junction 0020                                     __Hparam 0000  
                       ?_SETxAPIxVALxNoxRET 0015                       _Train_Move_Left_Start 3056  
                                   __Lparam 0000                        _Message_To_Translate 0082  
                           __size_of___wmul 0026                                     ___lwdiv 404C  
                                   ___lwmod 4136                                __psmallconst 0800  
                                   __pcinit 3D74                                     __ramtop 0800  
                           __size_of_tc_low 00AE                                     __ptext0 3F0A  
                                   __ptext1 0872                                     __ptext2 224E  
                                   __ptext3 318E                                     __ptext4 2F16  
                                   __ptext5 3056                                     __ptext6 2DD0  
                                   __ptext7 3522                                     __ptext8 3636  
                                   __ptext9 3970                        Train_Path@Return_Val 00E0  
                           __size_of_printf 012A                                     _dpowers 0839  
                                   _isdigit 42EA                                     _tc_high 0008  
                      ??_SETxAPIxVALxNoxRET 0019                          _EUSART1_Initialize 40EE  
                 _Train_Move_Pwm_Fast_Count 0068                              __pintcode_body 3A80  
                      end_of_initialization 3DFC                             _Switch_Junction 002F  
                              ?_Eeprom_Read 0013                           ??_Debounce_Inputs 001F  
                       ?_EUSART1_Initialize 0001                        __size_of_SETxAPIxVAL 0050  
                             __Lmediumconst 0000                                     int_func 3A80  
                          SETxPWM@pwm_speed 0024                               ??_EEPROMxREAD 001B  
                 __size_of_Update_StateMchn 0D5A                         __size_of_Train_Path 03DA  
                                 _RCSTAbits 000FAB                                     printf@c 00D7  
                                   printf@f 00CB                                     postdec1 000FE5  
                                   postdec2 000FDD                                     postinc0 000FEE  
                                   postinc1 000FE6                                     postinc2 000FDE  
                     __size_of_EUSART1_Read 0034                        EEPROMxSTORE@api_list 0023  
            Left_Mountain_From_The_Right@rc 00CB                        ??_EUSART1_Initialize 0013  
                                 _PORTAbits 000F80                                   _PORTBbits 000F81  
                                 _PORTCbits 000F82                                   _PORTDbits 000F83  
                                 _PORTEbits 000F84                                   _TRISAbits 000F92  
                                 _TRISBbits 000F93                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                                   _TRISEbits 000F96  
                       Eeprom_Read@Location 0013                            _DIAGNOSTICxTOxPC 2628  
              Junction@Junction_Switch_Time 006A                                   _Diag_Comm 0074  
                    ?_Train_Move_Left_Brake 0001                                _EUSART1_Read 41EE  
                                 _TXSTAbits 000FAC                      ?_Train_Move_Left_Start 0001  
                               _Switch_Main 00E1                                 _Switch_Init 008A  
                             EEPROMxSTORE@i 0024                        __end_of_SENDxMESSAGE 2A98  
                       __end_of_EEPROMxREAD 3D74                                ?_Init_Timers 0001  
                                 _Comm_List 008C                          Junction@Return_Val 004C  
                            __end_of___wmul 42CA                                 _BAUDCONbits 000FB8  
                             __pidataCOMRAM 436A                 _Train_Move_Right_Brake$2181 00CB  
                      _Update_State_Machine 008B                              __end_of_tc_low 00C6  
                  __end_of_TranslateMessage 2DD0                 _Button_Contact_Counter_Stop 0035  
                            __end_of_printf 3522              __size_of_READxRECEIVEDxMESSAGE 0114  
                                 _Green_Led 3E8A               __end_of_READxRECEIVEDxMESSAGE 385E  
                       start_initialization 3D74                               ??_GETxAPIxVAL 0015  
                                 _SetDCPWM1 41B4                             SetDCPWM1@DCycle 0019  
                    _Mountain_Delay_Counter 0026                ?_Left_Mountain_From_The_Left 0001  
             Eeprom_Store@Location_Low_Byte 0017                           __size_of_Init_Pwm 0028  
             Eeprom_Read@Location_High_Byte 0017                           __size_of_Junction 01E0  
                                  ??___wmul 0017                                 __pdataBANK0 00DC  
                          __CFG_LPT1OSC$OFF 000000                                ?_SendMessage 00D8  
                                  ??_tc_low 00B6                                    ??_printf 001F  
                            _eusart1RxCount 003F                                ??_Train_Path 0026  
                                ?_Green_Led 0001                                 __pbssCOMRAM 0026  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 00B6  
                                ?_SetDCPWM1 0015  Train_Move_Right_Brake@Train_Move_Wait_Time 0060  
                              _isdigit$1833 0014                                    ?_SETxPWM 001F  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 4324  
             ??_Left_Mountain_From_The_Left 0026                        __size_of_Eeprom_Read 0062  
                               _EEPROMxREAD 3CDA                                    ?_Red_Led 0001  
                          _Update_StateMchn 0872                            ___lwdiv@dividend 0013  
     Left_Mountain_From_The_Left@Return_Val 0049      Right_Mountain_From_The_Left@Return_Val 0048  
                        __end_of_Train_Path 2628                                   __pintcode 0008  
                                  ?___lwdiv 0013        __end_of_Left_Mountain_From_The_Right 3A80  
     __size_of_Left_Mountain_From_The_Right 0110                _Left_Mountain_From_The_Right 3970  
                                  ?___lwmod 001A                                 __pintcodelo 0018  
                           GETxAPIxRW@index 0013                             _Debounce_Inputs 15CC  
                               __smallconst 0800                    ??_Train_Move_Right_Brake 0026  
                                  ?_isdigit 0001                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 00CB                    ??_Train_Move_Right_Start 0026  
                     TranslateMessage@Index 0022                       Junction@Straight_Bend 001F  
                     TranslateMessage@Value 0020                _Button_Contact_Counter_Start 0036  
                  _Reed_Contact_LMD_Counter 0039                            ___lwdiv@quotient 0018  
                _Train_Move_Left_Brake$2179 00CB                              __size_of_putch 000C  
               _Train_Move_Right_Start$2180 00CB                              ___wmul@product 0017  
                     __size_of_SENDxMESSAGE 0236        __end_of_Right_Mountain_From_The_Left 374A  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 3636  
                                  _PIE1bits 000F9D                              _Adjust_Counter 007C  
             Left_Mountain_From_The_Left@rc 00CB                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1              Eeprom_Store@Location_High_Byte 0019  
                                  _RCONbits 000FD0                              Train_Path@From 00CE  
                  __end_of_DIAGNOSTICxTOxPC 2862                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           ___wmul@multiplier 0013  
                         SENDxMESSAGE@index 0013                           SENDxMESSAGE@value 0015  
                               ??_Green_Led 0013                                  printf@flag 00D3  
                                printf@prec 00D4                                EEPROMxREAD@i 001F  
               __size_of_SETxAPIxVALxNoxRET 003C                                 ??_SetDCPWM1 0017  
                               _GETxAPIxVAL 4308                               ??_SETxAPIxVAL 001D  
                              _SENDxMESSAGE 2862                                   copy_data0 3D88  
                                 copy_data1 3DA8                     ??_Train_Move_Left_Brake 0026  
                  _Reed_Contact_LMU_Counter 003A                            __size_of_SETxPWM 00AC  
                   ??_Train_Move_Left_Start 0026                          SetDCPWM1@dutycycle 0015  
                                  _Init_Pwm 427C                       EUSART1_Read@readValue 0013  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 04FC  
                                  __Hrparam 0000                                    _Junction 2A98  
                          __size_of_Red_Led 0080               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                                    _TrSwitch 0081  
                                  _RxSwitch 0083                    _Reed_Contact_RMD_Counter 0037  
                   __end_of_Debounce_Inputs 1D52                 __size_of_EUSART1_Initialize 0048  
                          __size_of___lwdiv 0052                            __size_of___lwmod 0042  
                         _Switch_Train_Path 0086                           _Switch_Train_Move 0080  
                          _Switch_Adjust_LB 0046                            _Switch_Adjust_LF 0045  
                          _Switch_Adjust_RB 0088                            _Switch_Adjust_RF 0087  
                      __size_of_SendMessage 0020                           ?_TranslateMessage 0001  
                                _API_EEPROM 0300             __size_of_Train_Move_Right_Brake 0140  
                          __size_of_isdigit 001E                            __size_of_tc_high 3B58  
                        ??_TranslateMessage 0020                             ___lwdiv@divisor 0015  
           __size_of_Train_Move_Right_Start 0136                             ___lwdiv@counter 0017  
                                  __ptext10 385E                                    __ptext11 3C2E  
                                  __ptext20 2C78                                    __ptext12 2A98  
                                  __ptext21 3B60                                    __ptext13 3E0A  
                                  __ptext30 409E                                    __ptext22 42EA  
                                  __ptext14 3E8A                                    __ptext31 2862  
                                  __ptext23 42A4                                    __ptext15 32C4  
                                  __ptext40 404C                                    __ptext32 40EE  
                                  __ptext24 4178                                    __ptext16 3F84  
                                  __ptext41 1D52                                    __ptext33 3CDA  
                                  __ptext25 4308                                    __ptext17 15CC  
                                  __ptext34 3FEA                                    __ptext26 4324  
                                  __ptext18 41B4                                    __ptext35 2628  
                                  __ptext27 41EE                                    __ptext19 374A  
                                  __ptext44 4222                                    __ptext36 42CA  
                                  __ptext28 4340                                    __ptext45 4250  
                                  __ptext37 33F8                                    __ptext29 427C  
                                  __ptext38 4358                                    __ptext39 4136  
                             ?_EEPROMxSTORE 0001                               __size_of_atoi 00CE  
                             __size_of_main 007A                         __end_of_SETxAPIxVAL 40EE  
                   _Reed_Contact_LB_Counter 003D                                    int$flags 004D  
                   _Reed_Contact_LF_Counter 003E                                    atoi@sign 001D  
                _Train_Move_Left_Start$2178 00CB                    _Reed_Contact_RMU_Counter 0038  
                                 printf@val 00D5                         _EUSART1_Receive_ISR 4250  
                                _GETxAPIxRW 4324                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0013                               ?_Eeprom_Store 0013  
                  __end_of_Update_StateMchn 15CC                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0026              ??_Left_Mountain_From_The_Right 0026  
                     _READxRECEIVEDxMESSAGE 374A                                    isdigit@c 0015  
                   _Reed_Contact_RB_Counter 003B                              ??_EEPROMxSTORE 001B  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                            ___lwmod@dividend 001A  
                              ?_EEPROMxREAD 0001                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 003C                      _Train_Move_Right_Brake 2F16  
              __end_of_EUSART1_Transmit_ISR 4250                      _Train_Move_Right_Start 318E  
           Train_Move_Left_Start@Return_Val 00DF                                Train_Path@To 00CD  
                                  printf@ap 00D1                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0047              ??_Right_Mountain_From_The_Left 0026  
                            ??_Eeprom_Store 0017                             ___lwmod@divisor 001C  
                           ___lwmod@counter 001E                     SETxAPIxVALxNoxRET@index 0015  
                               _SETxAPIxVAL 409E                     SETxAPIxVALxNoxRET@value 0017  
                             ??_Eeprom_Read 0015                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 0001                              _APIxInitialize 1D52  
             _Button_Contact_Counter_Middle 0034  
