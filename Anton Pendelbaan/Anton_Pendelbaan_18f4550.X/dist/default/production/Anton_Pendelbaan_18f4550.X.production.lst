

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Nov 28 23:08:37 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.44
    71                           ; Generated 14/09/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4550 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  0042F0                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for Right_Mountain_From_The_Left@Return_Val
   110  0042F0  01                 	db	1
   111                           
   112                           ;initializer for Left_Mountain_From_The_Left@Return_Val
   113  0042F1  01                 	db	1
   114                           
   115                           ;initializer for Left_Mountain_From_The_Right@Return_Val
   116  0042F2  01                 	db	1
   117                           
   118                           ;initializer for Right_Mountain_From_The_Right@Return_Val
   119  0042F3  01                 	db	1
   120                           
   121                           ;initializer for Junction@Return_Val
   122  0042F4  01                 	db	1
   123                           
   124                           	psect	idataBANK0
   125  0042EA                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for Train_Move_Right_Brake@Return_Val
   129  0042EA  01                 	db	1
   130                           
   131                           ;initializer for Train_Move_Right_Start@Return_Val
   132  0042EB  01                 	db	1
   133                           
   134                           ;initializer for Train_Move_Left_Brake@Return_Val
   135  0042EC  01                 	db	1
   136                           
   137                           ;initializer for Train_Move_Left_Start@Return_Val
   138  0042ED  01                 	db	1
   139                           
   140                           ;initializer for Train_Path@Return_Val
   141  0042EE  01                 	db	1
   142                           
   143                           ;initializer for _Switch_Main
   144  0042EF  01                 	db	1
   145                           
   146                           	psect	smallconst
   147  000800                     __psmallconst:
   148                           	opt stack 0
   149  000800  00                 	db	0
   150  000801                     _ApiList:
   151                           	opt stack 0
   152  000801  0012               	dw	18
   153  000803  0013               	dw	19
   154  000805  0014               	dw	20
   155  000807  0015               	dw	21
   156  000809  0016               	dw	22
   157  00080B  0017               	dw	23
   158  00080D  0018               	dw	24
   159  00080F  0019               	dw	25
   160  000811  001A               	dw	26
   161  000813  001B               	dw	27
   162  000815  0027               	dw	39
   163  000817  0028               	dw	40
   164  000819  002D               	dw	45
   165  00081B  002E               	dw	46
   166  00081D  002F               	dw	47
   167  00081F  0030               	dw	48
   168  000821  0031               	dw	49
   169  000823  0032               	dw	50
   170  000825  0033               	dw	51
   171  000827  0034               	dw	52
   172  000829  0035               	dw	53
   173  00082B  0036               	dw	54
   174  00082D  0037               	dw	55
   175  00082F  0038               	dw	56
   176  000831  0039               	dw	57
   177  000833  003A               	dw	58
   178  000835  003B               	dw	59
   179  000837  003C               	dw	60
   180  000839                     __end_of_ApiList:
   181                           	opt stack 0
   182  000839                     _dpowers:
   183                           	opt stack 0
   184  000839  0001               	dw	1
   185  00083B  000A               	dw	10
   186  00083D  0064               	dw	100
   187  00083F  03E8               	dw	1000
   188  000841  2710               	dw	10000
   189  000843                     __end_of_dpowers:
   190                           	opt stack 0
   191  000843                     _DataLen:
   192                           	opt stack 0
   193  000843  0A                 	db	10
   194  000844                     __end_of_DataLen:
   195                           	opt stack 0
   196  0000                     _PORTEbits	set	3972
   197  0000                     _PORTBbits	set	3969
   198  0000                     _PORTCbits	set	3970
   199  0000                     _PIR2bits	set	4001
   200  0000                     _EECON2	set	4007
   201  0000                     _EEDATA	set	4008
   202  0000                     _EEADR	set	4009
   203  0000                     _EECON1bits	set	4006
   204  0000                     _RCREG1	set	4014
   205  0000                     _RCSTA1bits	set	4011
   206  0000                     _TXREG1	set	4013
   207  0000                     _SPBRG	set	4015
   208  0000                     _SPBRGH	set	4016
   209  0000                     _TXSTAbits	set	4012
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _BAUDCONbits	set	4024
   212  0000                     _T2CON	set	4042
   213  0000                     _CCP1CON	set	4029
   214  0000                     _CCPR1L	set	4030
   215  0000                     _PR2	set	4043
   216  0000                     _T0CON	set	4053
   217  0000                     _TMR0L	set	4054
   218  0000                     _TMR0H	set	4055
   219  0000                     _INTCON2	set	4081
   220  0000                     _INTCON	set	4082
   221  0000                     _RCONbits	set	4048
   222  0000                     _PIR1bits	set	3998
   223  0000                     _PIE1bits	set	3997
   224  0000                     _INTCONbits	set	4082
   225  0000                     _TRISBbits	set	3987
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISCbits	set	3988
   228  0000                     _PORTDbits	set	3971
   229  0000                     _PORTAbits	set	3968
   230  0000                     _TRISDbits	set	3989
   231  0000                     _TRISAbits	set	3986
   232  0000                     _CMCON	set	4020
   233  0000                     _ADCON1	set	4033
   234  0000                     _TRISE	set	3990
   235  0000                     _TRISD	set	3989
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISB	set	3987
   238  0000                     _TRISA	set	3986
   239  0000                     _TXIF	set	31988
   240  000844                     STR_8:
   241  000844  4D                 	db	77	;'M'
   242  000845  23                 	db	35
   243  000846  25                 	db	37
   244  000847  64                 	db	100	;'d'
   245  000848  20                 	db	32
   246  000849  25                 	db	37
   247  00084A  64                 	db	100	;'d'
   248  00084B  0D                 	db	13
   249  00084C  0A                 	db	10
   250  00084D  00                 	db	0
   251  00084E                     STR_1:
   252  00084E  45                 	db	69	;'E'
   253  00084F  23                 	db	35
   254  000850  31                 	db	49	;'1'
   255  000851  30                 	db	48	;'0'
   256  000852  0D                 	db	13
   257  000853  0A                 	db	10
   258  000854  00                 	db	0
   259  000855                     STR_2:
   260  000855  45                 	db	69	;'E'
   261  000856  23                 	db	35
   262  000857  31                 	db	49	;'1'
   263  000858  31                 	db	49	;'1'
   264  000859  0D                 	db	13
   265  00085A  0A                 	db	10
   266  00085B  00                 	db	0
   267  00085C                     STR_3:
   268  00085C  45                 	db	69	;'E'
   269  00085D  23                 	db	35
   270  00085E  31                 	db	49	;'1'
   271  00085F  32                 	db	50	;'2'
   272  000860  0D                 	db	13
   273  000861  0A                 	db	10
   274  000862  00                 	db	0
   275  000863                     STR_4:
   276  000863  45                 	db	69	;'E'
   277  000864  23                 	db	35
   278  000865  31                 	db	49	;'1'
   279  000866  33                 	db	51	;'3'
   280  000867  0D                 	db	13
   281  000868  0A                 	db	10
   282  000869  00                 	db	0
   283  00086A                     STR_5:
   284  00086A  45                 	db	69	;'E'
   285  00086B  23                 	db	35
   286  00086C  31                 	db	49	;'1'
   287  00086D  34                 	db	52	;'4'
   288  00086E  0D                 	db	13
   289  00086F  0A                 	db	10
   290  000870  00                 	db	0
   291  0000                     
   292                           ; #config settings
   293  000871  00                 	db	0	; dummy byte at the end
   294  0000                     
   295                           	psect	cinit
   296  003CCC                     __pcinit:
   297                           	opt stack 0
   298  003CCC                     start_initialization:
   299                           	opt stack 0
   300  003CCC                     __initialization:
   301                           	opt stack 0
   302                           
   303                           ; Initialize objects allocated to BANK0 (6 bytes)
   304                           ; load TBLPTR registers with __pidataBANK0
   305  003CCC  0EEA               	movlw	low __pidataBANK0
   306  003CCE  6EF6               	movwf	tblptrl,c
   307  003CD0  0E42               	movlw	high __pidataBANK0
   308  003CD2  6EF7               	movwf	tblptrh,c
   309  003CD4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   310  003CD6  6EF8               	movwf	tblptru,c
   311  003CD8  EE00  F0DC         	lfsr	0,__pdataBANK0
   312  003CDC  EE10 F006          	lfsr	1,6
   313  003CE0                     copy_data0:
   314  003CE0  0009               	tblrd		*+
   315  003CE2  CFF5 FFEE          	movff	tablat,postinc0
   316  003CE6  50E5               	movf	postdec1,w,c
   317  003CE8  50E1               	movf	fsr1l,w,c
   318  003CEA  E1FA               	bnz	copy_data0
   319                           
   320                           ; Initialize objects allocated to COMRAM (5 bytes)
   321                           ; load TBLPTR registers with __pidataCOMRAM
   322  003CEC  0EF0               	movlw	low __pidataCOMRAM
   323  003CEE  6EF6               	movwf	tblptrl,c
   324  003CF0  0E42               	movlw	high __pidataCOMRAM
   325  003CF2  6EF7               	movwf	tblptrh,c
   326  003CF4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   327  003CF6  6EF8               	movwf	tblptru,c
   328  003CF8  EE00  F048         	lfsr	0,__pdataCOMRAM
   329  003CFC  EE10 F005          	lfsr	1,5
   330  003D00                     copy_data1:
   331  003D00  0009               	tblrd		*+
   332  003D02  CFF5 FFEE          	movff	tablat,postinc0
   333  003D06  50E5               	movf	postdec1,w,c
   334  003D08  50E1               	movf	fsr1l,w,c
   335  003D0A  E1FA               	bnz	copy_data1
   336                           
   337                           ; Clear objects allocated to BANK4 (252 bytes)
   338  003D0C  EE04  F000         	lfsr	0,__pbssBANK4
   339  003D10  0EFC               	movlw	252
   340  003D12                     clear_0:
   341  003D12  6AEE               	clrf	postinc0,c
   342  003D14  06E8               	decf	wreg,f,c
   343  003D16  E1FD               	bnz	clear_0
   344                           
   345                           ; Clear objects allocated to BANK3 (178 bytes)
   346  003D18  EE03  F000         	lfsr	0,__pbssBANK3
   347  003D1C  0EB2               	movlw	178
   348  003D1E                     clear_1:
   349  003D1E  6AEE               	clrf	postinc0,c
   350  003D20  06E8               	decf	wreg,f,c
   351  003D22  E1FD               	bnz	clear_1
   352                           
   353                           ; Clear objects allocated to BANK2 (178 bytes)
   354  003D24  EE02  F000         	lfsr	0,__pbssBANK2
   355  003D28  0EB2               	movlw	178
   356  003D2A                     clear_2:
   357  003D2A  6AEE               	clrf	postinc0,c
   358  003D2C  06E8               	decf	wreg,f,c
   359  003D2E  E1FD               	bnz	clear_2
   360                           
   361                           ; Clear objects allocated to BANK1 (178 bytes)
   362  003D30  EE01  F000         	lfsr	0,__pbssBANK1
   363  003D34  0EB2               	movlw	178
   364  003D36                     clear_3:
   365  003D36  6AEE               	clrf	postinc0,c
   366  003D38  06E8               	decf	wreg,f,c
   367  003D3A  E1FD               	bnz	clear_3
   368                           
   369                           ; Clear objects allocated to BANK0 (86 bytes)
   370  003D3C  EE00  F060         	lfsr	0,__pbssBANK0
   371  003D40  0E56               	movlw	86
   372  003D42                     clear_4:
   373  003D42  6AEE               	clrf	postinc0,c
   374  003D44  06E8               	decf	wreg,f,c
   375  003D46  E1FD               	bnz	clear_4
   376                           
   377                           ; Clear objects allocated to COMRAM (34 bytes)
   378  003D48  EE00  F026         	lfsr	0,__pbssCOMRAM
   379  003D4C  0E22               	movlw	34
   380  003D4E                     clear_5:
   381  003D4E  6AEE               	clrf	postinc0,c
   382  003D50  06E8               	decf	wreg,f,c
   383  003D52  E1FD               	bnz	clear_5
   384  003D54                     end_of_initialization:
   385                           	opt stack 0
   386  003D54                     __end_of__initialization:
   387                           	opt stack 0
   388  003D54  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   389  003D56  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   390  003D58  0E00               	movlw	low (__Lmediumconst shr (0+16))
   391  003D5A  6EF8               	movwf	tblptru,c
   392  003D5C  0100               	movlb	0
   393  003D5E  EF31  F01F         	goto	_main	;jump to C main() function
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           postdec1	equ	0xFE5
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	bssCOMRAM
   404  000026                     __pbssCOMRAM:
   405                           	opt stack 0
   406  000026                     _Mountain_Delay_Counter:
   407                           	opt stack 0
   408  000026                     	ds	2
   409  000028                     _Red_Led_Counter:
   410                           	opt stack 0
   411  000028                     	ds	2
   412  00002A                     _Green_Led_Counter:
   413                           	opt stack 0
   414  00002A                     	ds	2
   415  00002C                     _Led1_Counter:
   416                           	opt stack 0
   417  00002C                     	ds	2
   418  00002E                     _Switch_Moutain:
   419                           	opt stack 0
   420  00002E                     	ds	1
   421  00002F                     _Switch_Junction:
   422                           	opt stack 0
   423  00002F                     	ds	1
   424  000030                     _Button_Contact_Counter_RF:
   425                           	opt stack 0
   426  000030                     	ds	1
   427  000031                     _Button_Contact_Counter_RB:
   428                           	opt stack 0
   429  000031                     	ds	1
   430  000032                     _Button_Contact_Counter_LF:
   431                           	opt stack 0
   432  000032                     	ds	1
   433  000033                     _Button_Contact_Counter_LB:
   434                           	opt stack 0
   435  000033                     	ds	1
   436  000034                     _Button_Contact_Counter_Middle:
   437                           	opt stack 0
   438  000034                     	ds	1
   439  000035                     _Button_Contact_Counter_Stop:
   440                           	opt stack 0
   441  000035                     	ds	1
   442  000036                     _Button_Contact_Counter_Start:
   443                           	opt stack 0
   444  000036                     	ds	1
   445  000037                     _Reed_Contact_RMD_Counter:
   446                           	opt stack 0
   447  000037                     	ds	1
   448  000038                     _Reed_Contact_RMU_Counter:
   449                           	opt stack 0
   450  000038                     	ds	1
   451  000039                     _Reed_Contact_LMD_Counter:
   452                           	opt stack 0
   453  000039                     	ds	1
   454  00003A                     _Reed_Contact_LMU_Counter:
   455                           	opt stack 0
   456  00003A                     	ds	1
   457  00003B                     _Reed_Contact_RB_Counter:
   458                           	opt stack 0
   459  00003B                     	ds	1
   460  00003C                     _Reed_Contact_RF_Counter:
   461                           	opt stack 0
   462  00003C                     	ds	1
   463  00003D                     _Reed_Contact_LB_Counter:
   464                           	opt stack 0
   465  00003D                     	ds	1
   466  00003E                     _Reed_Contact_LF_Counter:
   467                           	opt stack 0
   468  00003E                     	ds	1
   469  00003F                     _eusart1RxCount:
   470                           	opt stack 0
   471  00003F                     	ds	1
   472  000040                     _eusart1RxTail:
   473                           	opt stack 0
   474  000040                     	ds	1
   475  000041                     _eusart1RxHead:
   476                           	opt stack 0
   477  000041                     	ds	1
   478  000042                     _eusart1TxBufferRemaining:
   479                           	opt stack 0
   480  000042                     	ds	1
   481  000043                     _eusart1TxTail:
   482                           	opt stack 0
   483  000043                     	ds	1
   484  000044                     _eusart1TxHead:
   485                           	opt stack 0
   486  000044                     	ds	1
   487  000045                     _Switch_Adjust_LF:
   488                           	opt stack 0
   489  000045                     	ds	1
   490  000046                     _Switch_Adjust_LB:
   491                           	opt stack 0
   492  000046                     	ds	1
   493  000047                     _Switch_Activate_Controls:
   494                           	opt stack 0
   495  000047                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	dataCOMRAM
   506  000048                     __pdataCOMRAM:
   507                           	opt stack 0
   508  000048                     Right_Mountain_From_The_Left@Return_Val:
   509                           	opt stack 0
   510  000048                     	ds	1
   511  000049                     Left_Mountain_From_The_Left@Return_Val:
   512                           	opt stack 0
   513  000049                     	ds	1
   514  00004A                     Left_Mountain_From_The_Right@Return_Val:
   515                           	opt stack 0
   516  00004A                     	ds	1
   517  00004B                     Right_Mountain_From_The_Right@Return_Val:
   518                           	opt stack 0
   519  00004B                     	ds	1
   520  00004C                     Junction@Return_Val:
   521                           	opt stack 0
   522  00004C                     	ds	1
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	bssBANK0
   533  000060                     __pbssBANK0:
   534                           	opt stack 0
   535  000060                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   536                           	opt stack 0
   537  000060                     	ds	2
   538  000062                     Train_Move_Right_Start@Train_Move_Wait_Time:
   539                           	opt stack 0
   540  000062                     	ds	2
   541  000064                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   542                           	opt stack 0
   543  000064                     	ds	2
   544  000066                     Train_Move_Left_Start@Train_Move_Wait_Time:
   545                           	opt stack 0
   546  000066                     	ds	2
   547  000068                     _Train_Move_Pwm_Fast_Count:
   548                           	opt stack 0
   549  000068                     	ds	2
   550  00006A                     Junction@Junction_Switch_Time:
   551                           	opt stack 0
   552  00006A                     	ds	2
   553  00006C                     _DelayCounter:
   554                           	opt stack 0
   555  00006C                     	ds	2
   556  00006E                     _Diag_Comm2:
   557                           	opt stack 0
   558  00006E                     	ds	2
   559  000070                     _Pcomm_List2:
   560                           	opt stack 0
   561  000070                     	ds	2
   562  000072                     _Pcomm_List:
   563                           	opt stack 0
   564  000072                     	ds	2
   565  000074                     _Diag_Comm:
   566                           	opt stack 0
   567  000074                     	ds	2
   568  000076                     _pLen:
   569                           	opt stack 0
   570  000076                     	ds	2
   571  000078                     _pData:
   572                           	opt stack 0
   573  000078                     	ds	2
   574  00007A                     _Activate_Controls_Counter:
   575                           	opt stack 0
   576  00007A                     	ds	2
   577  00007C                     _Adjust_Counter:
   578                           	opt stack 0
   579  00007C                     	ds	2
   580  00007E                     _Train_Move_Pwm_Count:
   581                           	opt stack 0
   582  00007E                     	ds	2
   583  000080                     _Switch_Train_Move:
   584                           	opt stack 0
   585  000080                     	ds	1
   586  000081                     _TrSwitch:
   587                           	opt stack 0
   588  000081                     	ds	1
   589  000082                     _Message_To_Translate:
   590                           	opt stack 0
   591  000082                     	ds	1
   592  000083                     _RxSwitch:
   593                           	opt stack 0
   594  000083                     	ds	1
   595  000084                     _Received_Data:
   596                           	opt stack 0
   597  000084                     	ds	1
   598  000085                     _Stop_Program:
   599                           	opt stack 0
   600  000085                     	ds	1
   601  000086                     _Switch_Train_Path:
   602                           	opt stack 0
   603  000086                     	ds	1
   604  000087                     _Switch_Adjust_RF:
   605                           	opt stack 0
   606  000087                     	ds	1
   607  000088                     _Switch_Adjust_RB:
   608                           	opt stack 0
   609  000088                     	ds	1
   610  000089                     _Switch_Program:
   611                           	opt stack 0
   612  000089                     	ds	1
   613  00008A                     _Switch_Init:
   614                           	opt stack 0
   615  00008A                     	ds	1
   616  00008B                     _Update_State_Machine:
   617                           	opt stack 0
   618  00008B                     	ds	1
   619  00008C                     _Comm_List:
   620                           	opt stack 0
   621  00008C                     	ds	32
   622  0000AC                     _Data:
   623                           	opt stack 0
   624  0000AC                     	ds	10
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	dataBANK0
   635  0000DC                     __pdataBANK0:
   636                           	opt stack 0
   637  0000DC                     Train_Move_Right_Brake@Return_Val:
   638                           	opt stack 0
   639  0000DC                     	ds	1
   640  0000DD                     Train_Move_Right_Start@Return_Val:
   641                           	opt stack 0
   642  0000DD                     	ds	1
   643  0000DE                     Train_Move_Left_Brake@Return_Val:
   644                           	opt stack 0
   645  0000DE                     	ds	1
   646  0000DF                     Train_Move_Left_Start@Return_Val:
   647                           	opt stack 0
   648  0000DF                     	ds	1
   649  0000E0                     Train_Path@Return_Val:
   650                           	opt stack 0
   651  0000E0                     	ds	1
   652  0000E1                     _Switch_Main:
   653                           	opt stack 0
   654  0000E1                     	ds	1
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           
   664                           	psect	bssBANK1
   665  000100                     __pbssBANK1:
   666                           	opt stack 0
   667  000100                     _API:
   668                           	opt stack 0
   669  000100                     	ds	178
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1l	equ	0xFE1
   678                           
   679                           	psect	bssBANK2
   680  000200                     __pbssBANK2:
   681                           	opt stack 0
   682  000200                     _API_RW:
   683                           	opt stack 0
   684  000200                     	ds	178
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           postdec1	equ	0xFE5
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssBANK3
   695  000300                     __pbssBANK3:
   696                           	opt stack 0
   697  000300                     _API_EEPROM:
   698                           	opt stack 0
   699  000300                     	ds	178
   700                           tblptru	equ	0xFF8
   701                           tblptrh	equ	0xFF7
   702                           tblptrl	equ	0xFF6
   703                           tablat	equ	0xFF5
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           postdec1	equ	0xFE5
   707                           fsr1l	equ	0xFE1
   708                           
   709                           	psect	bssBANK4
   710  000400                     __pbssBANK4:
   711                           	opt stack 0
   712  000400                     _eusart1RxBuffer:
   713                           	opt stack 0
   714  000400                     	ds	126
   715  00047E                     _eusart1TxBuffer:
   716                           	opt stack 0
   717  00047E                     	ds	126
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           tblptrl	equ	0xFF6
   721                           tablat	equ	0xFF5
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1l	equ	0xFE1
   726                           
   727                           	psect	cstackBANK0
   728  0000B6                     __pcstackBANK0:
   729                           	opt stack 0
   730  0000B6                     ??_tc_low:
   731                           
   732                           ; 1 bytes @ 0x0
   733  0000B6                     	ds	21
   734  0000CB                     ?_printf:
   735                           	opt stack 0
   736  0000CB                     Right_Mountain_From_The_Right@rc:
   737                           	opt stack 0
   738  0000CB                     Left_Mountain_From_The_Right@rc:
   739                           	opt stack 0
   740  0000CB                     Left_Mountain_From_The_Left@rc:
   741                           	opt stack 0
   742  0000CB                     Right_Mountain_From_The_Left@rc:
   743                           	opt stack 0
   744  0000CB                     printf@f:
   745                           	opt stack 0
   746  0000CB                     _Train_Move_Left_Start$2178:
   747                           	opt stack 0
   748  0000CB                     _Train_Move_Left_Brake$2179:
   749                           	opt stack 0
   750  0000CB                     _Train_Move_Right_Start$2180:
   751                           	opt stack 0
   752  0000CB                     _Train_Move_Right_Brake$2181:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x15
   756  0000CB                     	ds	2
   757  0000CD                     Train_Path@To:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x17
   761  0000CD                     	ds	1
   762  0000CE                     Train_Path@From:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x18
   766  0000CE                     	ds	1
   767  0000CF                     ??_Update_StateMchn:
   768                           
   769                           ; 1 bytes @ 0x19
   770  0000CF                     	ds	2
   771  0000D1                     printf@ap:
   772                           	opt stack 0
   773  0000D1                     _Update_StateMchn$2176:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x1B
   777  0000D1                     	ds	2
   778  0000D3                     printf@flag:
   779                           	opt stack 0
   780  0000D3                     _Update_StateMchn$2177:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x1D
   784  0000D3                     	ds	1
   785  0000D4                     printf@prec:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1E
   789  0000D4                     	ds	1
   790  0000D5                     printf@val:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x1F
   794  0000D5                     	ds	2
   795  0000D7                     printf@c:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x21
   799  0000D7                     	ds	1
   800  0000D8                     ??_READxRECEIVEDxMESSAGE:
   801  0000D8                     SendMessage@index:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x22
   805  0000D8                     	ds	2
   806  0000DA                     SendMessage@value:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x24
   810  0000DA                     	ds	2
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820                           	psect	cstackCOMRAM
   821  000001                     __pcstackCOMRAM:
   822                           	opt stack 0
   823  000001                     ??_tc_high:
   824  000001                     
   825                           ; 1 bytes @ 0x0
   826  000001                     	ds	18
   827  000013                     ??_isdigit:
   828  000013                     ?_GETxAPIxVAL:
   829                           	opt stack 0
   830  000013                     ?_GETxAPIxRW:
   831                           	opt stack 0
   832  000013                     ?_Eeprom_Read:
   833                           	opt stack 0
   834  000013                     ?___wmul:
   835                           	opt stack 0
   836  000013                     ?___lwdiv:
   837                           	opt stack 0
   838  000013                     EUSART1_Read@readValue:
   839                           	opt stack 0
   840  000013                     putch@data:
   841                           	opt stack 0
   842  000013                     Green_Led@Operation:
   843                           	opt stack 0
   844  000013                     Red_Led@Operation:
   845                           	opt stack 0
   846  000013                     EUSART1_Initialize@baud_rate:
   847                           	opt stack 0
   848  000013                     SENDxMESSAGE@index:
   849                           	opt stack 0
   850  000013                     APIxInitialize@i:
   851                           	opt stack 0
   852  000013                     GETxAPIxRW@index:
   853                           	opt stack 0
   854  000013                     GETxAPIxVAL@index:
   855                           	opt stack 0
   856  000013                     Eeprom_Read@Location:
   857                           	opt stack 0
   858  000013                     Eeprom_Store@Location:
   859                           	opt stack 0
   860  000013                     ___wmul@multiplier:
   861                           	opt stack 0
   862  000013                     ___lwdiv@dividend:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x12
   866  000013                     	ds	1
   867  000014                     _isdigit$1833:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x13
   871  000014                     	ds	1
   872  000015                     isdigit@c:
   873                           	opt stack 0
   874  000015                     SENDxMESSAGE@value:
   875                           	opt stack 0
   876  000015                     SETxAPIxVALxNoxRET@index:
   877                           	opt stack 0
   878  000015                     Eeprom_Read@Location_Low_Byte:
   879                           	opt stack 0
   880  000015                     Eeprom_Store@Value:
   881                           	opt stack 0
   882  000015                     SetDCPWM1@dutycycle:
   883                           	opt stack 0
   884  000015                     ___wmul@multiplicand:
   885                           	opt stack 0
   886  000015                     ___lwdiv@divisor:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x14
   890  000015                     	ds	2
   891  000017                     ??_SENDxMESSAGE:
   892  000017                     ??_SetDCPWM1:
   893  000017                     ___lwdiv@counter:
   894                           	opt stack 0
   895  000017                     SETxAPIxVALxNoxRET@value:
   896                           	opt stack 0
   897  000017                     Eeprom_Read@Location_High_Byte:
   898                           	opt stack 0
   899  000017                     Eeprom_Store@Location_Low_Byte:
   900                           	opt stack 0
   901  000017                     ___wmul@product:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x16
   905  000017                     	ds	1
   906  000018                     ___lwdiv@quotient:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x17
   910  000018                     	ds	1
   911  000019                     ?_atoi:
   912                           	opt stack 0
   913  000019                     SETxAPIxVAL@index:
   914                           	opt stack 0
   915  000019                     Eeprom_Read@Return_Data:
   916                           	opt stack 0
   917  000019                     Eeprom_Store@Location_High_Byte:
   918                           	opt stack 0
   919  000019                     SetDCPWM1@DCycle:
   920                           	opt stack 0
   921  000019                     atoi@s:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x18
   925  000019                     	ds	1
   926  00001A                     ?___lwmod:
   927                           	opt stack 0
   928  00001A                     ___lwmod@dividend:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x19
   932  00001A                     	ds	1
   933  00001B                     ??_EEPROMxSTORE:
   934  00001B                     ??_atoi:
   935  00001B                     SETxAPIxVAL@value:
   936                           	opt stack 0
   937  00001B                     EEPROMxREAD@Data:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x1A
   941  00001B                     	ds	1
   942  00001C                     ___lwmod@divisor:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x1B
   946  00001C                     	ds	1
   947  00001D                     EEPROMxREAD@i:
   948                           	opt stack 0
   949  00001D                     atoi@sign:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x1C
   953  00001D                     	ds	1
   954  00001E                     ___lwmod@counter:
   955                           	opt stack 0
   956  00001E                     atoi@a:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x1D
   960  00001E                     	ds	1
   961  00001F                     ??_Debounce_Inputs:
   962  00001F                     ??_printf:
   963  00001F                     Junction@Straight_Bend:
   964                           	opt stack 0
   965  00001F                     SETxPWM@speed:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x1E
   969  00001F                     	ds	1
   970  000020                     ??_DIAGNOSTICxTOxPC:
   971  000020                     Junction@Junction_Left_Right:
   972                           	opt stack 0
   973  000020                     TranslateMessage@Value:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x1F
   977  000020                     	ds	1
   978  000021                     SETxPWM@direction:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x20
   982  000021                     	ds	1
   983  000022                     ??_SETxPWM:
   984  000022                     TranslateMessage@Index:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x21
   988  000022                     	ds	1
   989  000023                     EEPROMxSTORE@api_list:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x22
   993  000023                     	ds	1
   994  000024                     EEPROMxSTORE@i:
   995                           	opt stack 0
   996  000024                     SETxPWM@pwm_speed:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x23
  1000  000024                     	ds	2
  1001  000026                     tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           postinc0	equ	0xFEE
  1006                           wreg	equ	0xFE8
  1007                           postdec1	equ	0xFE5
  1008                           fsr1l	equ	0xFE1
  1009                           
  1010                           ; 1 bytes @ 0x25
  1011 ;;
  1012 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1013 ;;
  1014 ;; *************** function _main *****************
  1015 ;; Defined at:
  1016 ;;		line 106 in file "../Main.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;		None
  1019 ;; Auto vars:     Size  Location     Type
  1020 ;;		None
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  1    wreg      void 
  1023 ;; Registers used:
  1024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1030 ;;      Params:         0       0       0       0       0       0       0       0       0
  1031 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1032 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1033 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1034 ;;Total ram usage:        0 bytes
  1035 ;; Hardware stack levels required when called:    9
  1036 ;; This function calls:
  1037 ;;		_APIxInitialize
  1038 ;;		_DIAGNOSTICxTOxPC
  1039 ;;		_EEPROMxREAD
  1040 ;;		_EUSART1_Initialize
  1041 ;;		_Init_Pwm
  1042 ;;		_Init_Timers
  1043 ;;		_READxRECEIVEDxMESSAGE
  1044 ;;		_Update_StateMchn
  1045 ;; This function is called by:
  1046 ;;		Startup code after reset
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text0
  1051  003E62                     __ptext0:
  1052                           	opt stack 0
  1053  003E62                     _main:
  1054                           	opt stack 22
  1055                           
  1056                           ;Main.c: 108: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
  1057                           
  1058                           ;incstack = 0
  1059  003E62  6892               	setf	3986,c	;volatile
  1060  003E64  6893               	setf	3987,c	;volatile
  1061  003E66  6894               	setf	3988,c	;volatile
  1062  003E68  6895               	setf	3989,c	;volatile
  1063  003E6A  6896               	setf	3990,c	;volatile
  1064                           
  1065                           ;Main.c: 109: ADCON1=0x0F;
  1066  003E6C  0E0F               	movlw	15
  1067  003E6E  6EC1               	movwf	4033,c	;volatile
  1068                           
  1069                           ;Main.c: 110: CMCON=0x07;
  1070  003E70  0E07               	movlw	7
  1071  003E72  6EB4               	movwf	4020,c	;volatile
  1072                           
  1073                           ;Main.c: 111: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
  1074  003E74  9892               	bcf	3986,4,c	;volatile
  1075  003E76  9A95               	bcf	3989,5,c	;volatile
  1076  003E78  9C95               	bcf	3989,6,c	;volatile
  1077                           
  1078                           ;Main.c: 112: PORTAbits.RA4 = 0;
  1079  003E7A  9880               	bcf	3968,4,c	;volatile
  1080                           
  1081                           ;Main.c: 113: PORTDbits.RD6 = 0;
  1082  003E7C  9C83               	bcf	3971,6,c	;volatile
  1083                           
  1084                           ;Main.c: 114: PORTDbits.RD5 = 0;
  1085  003E7E  9A83               	bcf	3971,5,c	;volatile
  1086                           
  1087                           ;Main.c: 116: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
  1088  003E80  9092               	bcf	3986,0,c	;volatile
  1089  003E82  9292               	bcf	3986,1,c	;volatile
  1090  003E84  9492               	bcf	3986,2,c	;volatile
  1091  003E86  9692               	bcf	3986,3,c	;volatile
  1092                           
  1093                           ;Main.c: 117: PORTAbits.RA3 = 0;
  1094  003E88  9680               	bcf	3968,3,c	;volatile
  1095                           
  1096                           ;Main.c: 118: PORTAbits.RA2 = 0;
  1097  003E8A  9480               	bcf	3968,2,c	;volatile
  1098                           
  1099                           ;Main.c: 119: PORTAbits.RA1 = 0;
  1100  003E8C  9280               	bcf	3968,1,c	;volatile
  1101                           
  1102                           ;Main.c: 120: PORTAbits.RA0 = 0;
  1103  003E8E  9080               	bcf	3968,0,c	;volatile
  1104                           
  1105                           ;Main.c: 122: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
  1106  003E90  8495               	bsf	3989,2,c	;volatile
  1107  003E92  8695               	bsf	3989,3,c	;volatile
  1108  003E94  8095               	bsf	3989,0,c	;volatile
  1109  003E96  8295               	bsf	3989,1,c	;volatile
  1110  003E98  8294               	bsf	3988,1,c	;volatile
  1111  003E9A  8895               	bsf	3989,4,c	;volatile
  1112  003E9C  8096               	bsf	3990,0,c	;volatile
  1113  003E9E  8296               	bsf	3990,1,c	;volatile
  1114                           
  1115                           ;Main.c: 123: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
  1116  003EA0  8093               	bsf	3987,0,c	;volatile
  1117  003EA2  8293               	bsf	3987,1,c	;volatile
  1118  003EA4  8493               	bsf	3987,2,c	;volatile
  1119  003EA6  8693               	bsf	3987,3,c	;volatile
  1120  003EA8  8893               	bsf	3987,4,c	;volatile
  1121  003EAA  8A93               	bsf	3987,5,c	;volatile
  1122  003EAC  8E95               	bsf	3989,7,c	;volatile
  1123                           
  1124                           ;Main.c: 124: APIxInitialize();
  1125  003EAE  ECAA  F00E         	call	_APIxInitialize	;wreg free
  1126                           
  1127                           ;Main.c: 125: Init_Pwm();
  1128  003EB2  EC01  F021         	call	_Init_Pwm	;wreg free
  1129                           
  1130                           ;Main.c: 126: Init_Timers();
  1131  003EB6  EC63  F021         	call	_Init_Timers	;wreg free
  1132                           
  1133                           ;Main.c: 127: EUSART1_Initialize();
  1134  003EBA  EC23  F020         	call	_EUSART1_Initialize	;wreg free
  1135                           
  1136                           ;Main.c: 128: EEPROMxREAD();
  1137  003EBE  ECBD  F020         	call	_EEPROMxREAD	;wreg free
  1138  003EC2                     
  1139                           ;Main.c: 131: {
  1140                           ;Main.c: 132: if (1 == Update_State_Machine)
  1141  003EC2  0100               	movlb	0	; () banked
  1142  003EC4  058B               	decf	_Update_State_Machine& (0+255),w,b	;volatile
  1143  003EC6  A4D8               	btfss	status,2,c
  1144  003EC8  D004               	goto	l88
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;Main.c: 133: {
  1148                           ;Main.c: 134: Update_State_Machine = 0;
  1149  003ECA  0E00               	movlw	0
  1150  003ECC  6F8B               	movwf	_Update_State_Machine& (0+255),b	;volatile
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;Main.c: 135: Update_StateMchn();
  1154  003ECE  EC39  F004         	call	_Update_StateMchn	;wreg free
  1155  003ED2                     l88:
  1156                           
  1157                           ;Main.c: 136: }
  1158                           ;Main.c: 138: READxRECEIVEDxMESSAGE();
  1159  003ED2  EC9E  F01B         	call	_READxRECEIVEDxMESSAGE	;wreg free
  1160                           
  1161                           ;Main.c: 139: DIAGNOSTICxTOxPC();
  1162  003ED6  EC0D  F013         	call	_DIAGNOSTICxTOxPC	;wreg free
  1163  003EDA  D7F3               	goto	l87
  1164  003EDC                     __end_of_main:
  1165                           	opt stack 0
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1l	equ	0xFE1
  1174                           status	equ	0xFD8
  1175                           
  1176 ;; *************** function _Update_StateMchn *****************
  1177 ;; Defined at:
  1178 ;;		line 41 in file "../State_Mchn.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1192 ;;      Params:         0       0       0       0       0       0       0       0       0
  1193 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1194 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1195 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1196 ;;Total ram usage:        5 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    8
  1199 ;; This function calls:
  1200 ;;		_Debounce_Inputs
  1201 ;;		_EEPROMxSTORE
  1202 ;;		_GETxAPIxVAL
  1203 ;;		_Green_Led
  1204 ;;		_Junction
  1205 ;;		_Red_Led
  1206 ;;		_SETxAPIxVAL
  1207 ;;		_SETxAPIxVALxNoxRET
  1208 ;;		_SETxPWM
  1209 ;;		_Train_Path
  1210 ;; This function is called by:
  1211 ;;		_main
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text1
  1216  000872                     __ptext1:
  1217                           	opt stack 0
  1218  000872                     _Update_StateMchn:
  1219                           	opt stack 22
  1220                           
  1221                           ;State_Mchn.c: 43: if (GETxAPIxVAL(72)){
  1222                           
  1223                           ;incstack = 0
  1224  000872  0E00               	movlw	0
  1225  000874  6E14               	movwf	GETxAPIxVAL@index+1,c
  1226  000876  0E48               	movlw	72
  1227  000878  6E13               	movwf	GETxAPIxVAL@index,c
  1228  00087A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1229  00087E  5013               	movf	?_GETxAPIxVAL,w,c
  1230  000880  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1231  000882  B4D8               	btfsc	status,2,c
  1232  000884  D00B               	goto	l178
  1233                           
  1234                           ;State_Mchn.c: 44: SETxAPIxVAL(72, 0);
  1235  000886  0E00               	movlw	0
  1236  000888  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1237  00088A  0E48               	movlw	72
  1238  00088C  6E19               	movwf	SETxAPIxVAL@index,c
  1239  00088E  0E00               	movlw	0
  1240  000890  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1241  000892  0E00               	movlw	0
  1242  000894  6E1B               	movwf	SETxAPIxVAL@value,c
  1243  000896  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1244  00089A  00FF               	reset		;# 
  1245  00089C                     l178:
  1246                           
  1247                           ;State_Mchn.c: 46: }
  1248                           ;State_Mchn.c: 48: Debounce_Inputs();
  1249  00089C  ECE7  F00A         	call	_Debounce_Inputs	;wreg free
  1250                           
  1251                           ;State_Mchn.c: 50: switch (Switch_Main)
  1252  0008A0  EFC8  F00A         	goto	l179
  1253  0008A4                     
  1254                           ;State_Mchn.c: 53: if (GETxAPIxVAL(74)){
  1255  0008A4  0E00               	movlw	0
  1256  0008A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  1257  0008A8  0E4A               	movlw	74
  1258  0008AA  6E13               	movwf	GETxAPIxVAL@index,c
  1259  0008AC  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1260  0008B0  5013               	movf	?_GETxAPIxVAL,w,c
  1261  0008B2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1262  0008B4  B4D8               	btfsc	status,2,c
  1263  0008B6  D015               	goto	l181
  1264                           
  1265                           ;State_Mchn.c: 54: if(Junction(0, 1) == 0){
  1266  0008B8  0E01               	movlw	1
  1267  0008BA  6E1F               	movwf	Junction@Straight_Bend,c
  1268  0008BC  0E00               	movlw	0
  1269  0008BE  EC45  F015         	call	_Junction
  1270  0008C2  0900               	iorlw	0
  1271  0008C4  A4D8               	btfss	status,2,c
  1272  0008C6  EFD4  F00A         	goto	l304
  1273                           
  1274                           ;State_Mchn.c: 55: SETxAPIxVALxNoxRET(74, 0);
  1275  0008CA  0E00               	movlw	0
  1276  0008CC  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1277  0008CE  0E4A               	movlw	74
  1278  0008D0  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1279  0008D2  0E00               	movlw	0
  1280  0008D4  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1281  0008D6  0E00               	movlw	0
  1282  0008D8  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1283  0008DA  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1284                           
  1285                           ;State_Mchn.c: 56: }
  1286                           ;State_Mchn.c: 57: }
  1287  0008DE  EFD4  F00A         	goto	l304
  1288  0008E2                     l181:
  1289                           
  1290                           ;State_Mchn.c: 58: else if (GETxAPIxVAL(73)){
  1291  0008E2  0E00               	movlw	0
  1292  0008E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1293  0008E6  0E49               	movlw	73
  1294  0008E8  6E13               	movwf	GETxAPIxVAL@index,c
  1295  0008EA  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1296  0008EE  5013               	movf	?_GETxAPIxVAL,w,c
  1297  0008F0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1298  0008F2  B4D8               	btfsc	status,2,c
  1299  0008F4  D015               	goto	l184
  1300                           
  1301                           ;State_Mchn.c: 59: if(Junction(0, 0) == 0){
  1302  0008F6  0E00               	movlw	0
  1303  0008F8  6E1F               	movwf	Junction@Straight_Bend,c
  1304  0008FA  0E00               	movlw	0
  1305  0008FC  EC45  F015         	call	_Junction
  1306  000900  0900               	iorlw	0
  1307  000902  A4D8               	btfss	status,2,c
  1308  000904  EFD4  F00A         	goto	l304
  1309                           
  1310                           ;State_Mchn.c: 60: SETxAPIxVALxNoxRET(73, 0);
  1311  000908  0E00               	movlw	0
  1312  00090A  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1313  00090C  0E49               	movlw	73
  1314  00090E  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1315  000910  0E00               	movlw	0
  1316  000912  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1317  000914  0E00               	movlw	0
  1318  000916  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1319  000918  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1320                           
  1321                           ;State_Mchn.c: 61: }
  1322                           ;State_Mchn.c: 62: }
  1323  00091C  EFD4  F00A         	goto	l304
  1324  000920                     l184:
  1325                           
  1326                           ;State_Mchn.c: 63: else if (GETxAPIxVAL(76)){
  1327  000920  0E00               	movlw	0
  1328  000922  6E14               	movwf	GETxAPIxVAL@index+1,c
  1329  000924  0E4C               	movlw	76
  1330  000926  6E13               	movwf	GETxAPIxVAL@index,c
  1331  000928  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1332  00092C  5013               	movf	?_GETxAPIxVAL,w,c
  1333  00092E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1334  000930  B4D8               	btfsc	status,2,c
  1335  000932  D015               	goto	l187
  1336                           
  1337                           ;State_Mchn.c: 64: if(Junction(1, 1) == 0){
  1338  000934  0E01               	movlw	1
  1339  000936  6E1F               	movwf	Junction@Straight_Bend,c
  1340  000938  0E01               	movlw	1
  1341  00093A  EC45  F015         	call	_Junction
  1342  00093E  0900               	iorlw	0
  1343  000940  A4D8               	btfss	status,2,c
  1344  000942  EFD4  F00A         	goto	l304
  1345                           
  1346                           ;State_Mchn.c: 65: SETxAPIxVALxNoxRET(76, 0);
  1347  000946  0E00               	movlw	0
  1348  000948  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1349  00094A  0E4C               	movlw	76
  1350  00094C  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1351  00094E  0E00               	movlw	0
  1352  000950  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1353  000952  0E00               	movlw	0
  1354  000954  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1355  000956  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1356                           
  1357                           ;State_Mchn.c: 66: }
  1358                           ;State_Mchn.c: 67: }
  1359  00095A  EFD4  F00A         	goto	l304
  1360  00095E                     l187:
  1361                           
  1362                           ;State_Mchn.c: 68: else if (GETxAPIxVAL(75)){
  1363  00095E  0E00               	movlw	0
  1364  000960  6E14               	movwf	GETxAPIxVAL@index+1,c
  1365  000962  0E4B               	movlw	75
  1366  000964  6E13               	movwf	GETxAPIxVAL@index,c
  1367  000966  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1368  00096A  5013               	movf	?_GETxAPIxVAL,w,c
  1369  00096C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1370  00096E  B4D8               	btfsc	status,2,c
  1371  000970  D015               	goto	l190
  1372                           
  1373                           ;State_Mchn.c: 69: if(Junction(1, 0) == 0){
  1374  000972  0E00               	movlw	0
  1375  000974  6E1F               	movwf	Junction@Straight_Bend,c
  1376  000976  0E01               	movlw	1
  1377  000978  EC45  F015         	call	_Junction
  1378  00097C  0900               	iorlw	0
  1379  00097E  A4D8               	btfss	status,2,c
  1380  000980  EFD4  F00A         	goto	l304
  1381                           
  1382                           ;State_Mchn.c: 70: SETxAPIxVALxNoxRET(75, 0);
  1383  000984  0E00               	movlw	0
  1384  000986  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1385  000988  0E4B               	movlw	75
  1386  00098A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1387  00098C  0E00               	movlw	0
  1388  00098E  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1389  000990  0E00               	movlw	0
  1390  000992  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1391  000994  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1392                           
  1393                           ;State_Mchn.c: 71: }
  1394                           ;State_Mchn.c: 72: }
  1395  000998  EFD4  F00A         	goto	l304
  1396  00099C                     l190:
  1397                           
  1398                           ;State_Mchn.c: 73: else if (GETxAPIxVAL(77)){
  1399  00099C  0E00               	movlw	0
  1400  00099E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1401  0009A0  0E4D               	movlw	77
  1402  0009A2  6E13               	movwf	GETxAPIxVAL@index,c
  1403  0009A4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1404  0009A8  5013               	movf	?_GETxAPIxVAL,w,c
  1405  0009AA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1406  0009AC  B4D8               	btfsc	status,2,c
  1407  0009AE  D016               	goto	l193
  1408                           
  1409                           ;State_Mchn.c: 74: SETxAPIxVAL(69, 1);
  1410  0009B0  0E00               	movlw	0
  1411  0009B2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1412  0009B4  0E45               	movlw	69
  1413  0009B6  6E19               	movwf	SETxAPIxVAL@index,c
  1414  0009B8  0E00               	movlw	0
  1415  0009BA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1416  0009BC  0E01               	movlw	1
  1417  0009BE  6E1B               	movwf	SETxAPIxVAL@value,c
  1418  0009C0  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1419                           
  1420                           ;State_Mchn.c: 75: SETxAPIxVALxNoxRET(77, 0);
  1421  0009C4  0E00               	movlw	0
  1422  0009C6  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1423  0009C8  0E4D               	movlw	77
  1424  0009CA  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1425  0009CC  0E00               	movlw	0
  1426  0009CE  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1427  0009D0  0E00               	movlw	0
  1428  0009D2  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1429  0009D4  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1430                           
  1431                           ;State_Mchn.c: 76: }
  1432  0009D8  EFD4  F00A         	goto	l304
  1433  0009DC                     l193:
  1434                           
  1435                           ;State_Mchn.c: 77: else if (GETxAPIxVAL(78)){
  1436  0009DC  0E00               	movlw	0
  1437  0009DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1438  0009E0  0E4E               	movlw	78
  1439  0009E2  6E13               	movwf	GETxAPIxVAL@index,c
  1440  0009E4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1441  0009E8  5013               	movf	?_GETxAPIxVAL,w,c
  1442  0009EA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1443  0009EC  B4D8               	btfsc	status,2,c
  1444  0009EE  D016               	goto	l195
  1445                           
  1446                           ;State_Mchn.c: 78: SETxAPIxVAL(69, 0);
  1447  0009F0  0E00               	movlw	0
  1448  0009F2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1449  0009F4  0E45               	movlw	69
  1450  0009F6  6E19               	movwf	SETxAPIxVAL@index,c
  1451  0009F8  0E00               	movlw	0
  1452  0009FA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1453  0009FC  0E00               	movlw	0
  1454  0009FE  6E1B               	movwf	SETxAPIxVAL@value,c
  1455  000A00  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1456                           
  1457                           ;State_Mchn.c: 79: SETxAPIxVALxNoxRET(78, 0);
  1458  000A04  0E00               	movlw	0
  1459  000A06  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1460  000A08  0E4E               	movlw	78
  1461  000A0A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1462  000A0C  0E00               	movlw	0
  1463  000A0E  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1464  000A10  0E00               	movlw	0
  1465  000A12  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1466  000A14  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1467                           
  1468                           ;State_Mchn.c: 80: }
  1469  000A18  EFD4  F00A         	goto	l304
  1470  000A1C                     l195:
  1471                           
  1472                           ;State_Mchn.c: 81: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1473  000A1C  0E00               	movlw	0
  1474  000A1E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1475  000A20  0E44               	movlw	68
  1476  000A22  6E13               	movwf	GETxAPIxVAL@index,c
  1477  000A24  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1478  000A28  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1479  000A2C  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1480  000A30  0E00               	movlw	0
  1481  000A32  6E14               	movwf	GETxAPIxVAL@index+1,c
  1482  000A34  0E4F               	movlw	79
  1483  000A36  6E13               	movwf	GETxAPIxVAL@index,c
  1484  000A38  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1485  000A3C  5013               	movf	?_GETxAPIxVAL,w,c
  1486  000A3E  0100               	movlb	0	; () banked
  1487  000A40  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  1488  000A42  E104               	bnz	u8360
  1489  000A44  5014               	movf	?_GETxAPIxVAL+1,w,c
  1490  000A46  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1491  000A48  B4D8               	btfsc	status,2,c
  1492  000A4A  D02D               	goto	l197
  1493  000A4C                     u8360:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;State_Mchn.c: 82: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1497  000A4C  0E00               	movlw	0
  1498  000A4E  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1499  000A50  0E44               	movlw	68
  1500  000A52  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1501  000A54  0E00               	movlw	0
  1502  000A56  6E14               	movwf	GETxAPIxVAL@index+1,c
  1503  000A58  0E4F               	movlw	79
  1504  000A5A  6E13               	movwf	GETxAPIxVAL@index,c
  1505  000A5C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1506  000A60  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1507  000A64  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1508  000A68  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1509                           
  1510                           ;State_Mchn.c: 83: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1511  000A6C  0E00               	movlw	0
  1512  000A6E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1513  000A70  0E44               	movlw	68
  1514  000A72  6E13               	movwf	GETxAPIxVAL@index,c
  1515  000A74  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1516  000A78  C013  F0D1         	movff	?_GETxAPIxVAL,_Update_StateMchn$2176
  1517  000A7C  C014  F0D2         	movff	?_GETxAPIxVAL+1,_Update_StateMchn$2176+1
  1518                           
  1519                           ;State_Mchn.c: 83: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1520  000A80  0E00               	movlw	0
  1521  000A82  6E14               	movwf	GETxAPIxVAL@index+1,c
  1522  000A84  0E56               	movlw	86
  1523  000A86  6E13               	movwf	GETxAPIxVAL@index,c
  1524  000A88  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1525  000A8C  5013               	movf	?_GETxAPIxVAL,w,c
  1526  000A8E  0100               	movlb	0	; () banked
  1527  000A90  6FD3               	movwf	_Update_StateMchn$2177& (0+255),b
  1528                           
  1529                           ;State_Mchn.c: 83: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1530  000A92  C0D1  F01F         	movff	_Update_StateMchn$2176,SETxPWM@speed
  1531  000A96  C0D2  F020         	movff	_Update_StateMchn$2176+1,SETxPWM@speed+1
  1532  000A9A  C0D3  F021         	movff	_Update_StateMchn$2177,SETxPWM@direction
  1533  000A9E  EC10  F01E         	call	_SETxPWM	;wreg free
  1534                           
  1535                           ;State_Mchn.c: 84: }
  1536  000AA2  EFD4  F00A         	goto	l304
  1537  000AA6                     l197:
  1538                           
  1539                           ;State_Mchn.c: 85: else if (GETxAPIxVAL(86) != GETxAPIxVAL(81)){
  1540  000AA6  0E00               	movlw	0
  1541  000AA8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1542  000AAA  0E56               	movlw	86
  1543  000AAC  6E13               	movwf	GETxAPIxVAL@index,c
  1544  000AAE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1545  000AB2  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1546  000AB6  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1547  000ABA  0E00               	movlw	0
  1548  000ABC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1549  000ABE  0E51               	movlw	81
  1550  000AC0  6E13               	movwf	GETxAPIxVAL@index,c
  1551  000AC2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1552  000AC6  5013               	movf	?_GETxAPIxVAL,w,c
  1553  000AC8  0100               	movlb	0	; () banked
  1554  000ACA  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  1555  000ACC  E104               	bnz	u8370
  1556  000ACE  5014               	movf	?_GETxAPIxVAL+1,w,c
  1557  000AD0  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1558  000AD2  B4D8               	btfsc	status,2,c
  1559  000AD4  D012               	goto	l199
  1560  000AD6                     u8370:
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;State_Mchn.c: 86: SETxAPIxVALxNoxRET(86, GETxAPIxVAL(81));
  1564  000AD6  0E00               	movlw	0
  1565  000AD8  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1566  000ADA  0E56               	movlw	86
  1567  000ADC  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1568  000ADE  0E00               	movlw	0
  1569  000AE0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1570  000AE2  0E51               	movlw	81
  1571  000AE4  6E13               	movwf	GETxAPIxVAL@index,c
  1572  000AE6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1573  000AEA  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1574  000AEE  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1575  000AF2  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1576                           
  1577                           ;State_Mchn.c: 87: }
  1578  000AF6  EFD4  F00A         	goto	l304
  1579  000AFA                     l199:
  1580                           
  1581                           ;State_Mchn.c: 88: else if (GETxAPIxVAL(87)){
  1582  000AFA  0E00               	movlw	0
  1583  000AFC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1584  000AFE  0E57               	movlw	87
  1585  000B00  6E13               	movwf	GETxAPIxVAL@index,c
  1586  000B02  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1587  000B06  5013               	movf	?_GETxAPIxVAL,w,c
  1588  000B08  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1589  000B0A  B4D8               	btfsc	status,2,c
  1590  000B0C  D3E6               	goto	l203
  1591                           
  1592                           ;State_Mchn.c: 89: EEPROMxSTORE();
  1593  000B0E  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  1594                           
  1595                           ;State_Mchn.c: 90: SETxAPIxVAL(87, 0);
  1596  000B12  0E00               	movlw	0
  1597  000B14  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1598  000B16  0E57               	movlw	87
  1599  000B18  6E19               	movwf	SETxAPIxVAL@index,c
  1600  000B1A  0E00               	movlw	0
  1601  000B1C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1602  000B1E  0E00               	movlw	0
  1603  000B20  6E1B               	movwf	SETxAPIxVAL@value,c
  1604  000B22  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1605                           
  1606                           ;State_Mchn.c: 91: }
  1607  000B26  EFD4  F00A         	goto	l304
  1608  000B2A  0E00               	movlw	0
  1609  000B2C  ECF1  F01E         	call	_Green_Led
  1610                           
  1611                           ;State_Mchn.c: 97: Red_Led(0);
  1612  000B30  0E00               	movlw	0
  1613  000B32  ECB1  F01E         	call	_Red_Led
  1614                           
  1615                           ;State_Mchn.c: 98: Switch_Init = 1;
  1616  000B36  0E01               	movlw	1
  1617  000B38  D015               	goto	L1
  1618  000B3A                     
  1619                           ; BSR set to: 0
  1620                           
  1621                           ; BSR set to: 0
  1622  000B3A  0E00               	movlw	0
  1623  000B3C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1624  000B3E  0E23               	movlw	35
  1625  000B40  6E13               	movwf	GETxAPIxVAL@index,c
  1626  000B42  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1627  000B46  5013               	movf	?_GETxAPIxVAL,w,c
  1628  000B48  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1629  000B4A  B4D8               	btfsc	status,2,c
  1630  000B4C  D00F               	goto	l207
  1631                           
  1632                           ;State_Mchn.c: 102: {
  1633                           ;State_Mchn.c: 103: SETxAPIxVAL(39, 1);
  1634  000B4E  0E00               	movlw	0
  1635  000B50  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1636  000B52  0E27               	movlw	39
  1637  000B54  6E19               	movwf	SETxAPIxVAL@index,c
  1638  000B56  0E00               	movlw	0
  1639  000B58  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1640  000B5A  0E01               	movlw	1
  1641  000B5C  6E1B               	movwf	SETxAPIxVAL@value,c
  1642  000B5E  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1643  000B62  D057               	goto	l8852
  1644  000B64                     L1:
  1645  000B64  0100               	movlb	0	; () banked
  1646  000B66                     L2:
  1647  000B66  6F8A               	movwf	_Switch_Init& (0+255),b
  1648                           
  1649                           ;State_Mchn.c: 105: break;
  1650  000B68  EFD4  F00A         	goto	l304
  1651  000B6C                     l207:
  1652                           
  1653                           ;State_Mchn.c: 106: }
  1654                           ;State_Mchn.c: 107: if(GETxAPIxVAL(36))
  1655                           
  1656                           ; BSR set to: 0
  1657  000B6C  0E00               	movlw	0
  1658  000B6E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1659  000B70  0E24               	movlw	36
  1660  000B72  6E13               	movwf	GETxAPIxVAL@index,c
  1661  000B74  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1662  000B78  5013               	movf	?_GETxAPIxVAL,w,c
  1663  000B7A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1664  000B7C  B4D8               	btfsc	status,2,c
  1665  000B7E  D00B               	goto	l208
  1666                           
  1667                           ;State_Mchn.c: 108: {
  1668                           ;State_Mchn.c: 109: SETxAPIxVAL(39, 2);
  1669  000B80  0E00               	movlw	0
  1670  000B82  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1671  000B84  0E27               	movlw	39
  1672  000B86  6E19               	movwf	SETxAPIxVAL@index,c
  1673  000B88  0E00               	movlw	0
  1674  000B8A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1675  000B8C  0E02               	movlw	2
  1676  000B8E  6E1B               	movwf	SETxAPIxVAL@value,c
  1677  000B90  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1678  000B94  D03E               	goto	l8852
  1679  000B96                     l208:
  1680                           
  1681                           ;State_Mchn.c: 112: }
  1682                           ;State_Mchn.c: 113: if(GETxAPIxVAL(37))
  1683                           
  1684                           ; BSR set to: 0
  1685  000B96  0E00               	movlw	0
  1686  000B98  6E14               	movwf	GETxAPIxVAL@index+1,c
  1687  000B9A  0E25               	movlw	37
  1688  000B9C  6E13               	movwf	GETxAPIxVAL@index,c
  1689  000B9E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1690  000BA2  5013               	movf	?_GETxAPIxVAL,w,c
  1691  000BA4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1692  000BA6  B4D8               	btfsc	status,2,c
  1693  000BA8  D00B               	goto	l209
  1694                           
  1695                           ;State_Mchn.c: 114: {
  1696                           ;State_Mchn.c: 115: SETxAPIxVAL(39, 3);
  1697  000BAA  0E00               	movlw	0
  1698  000BAC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1699  000BAE  0E27               	movlw	39
  1700  000BB0  6E19               	movwf	SETxAPIxVAL@index,c
  1701  000BB2  0E00               	movlw	0
  1702  000BB4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1703  000BB6  0E03               	movlw	3
  1704  000BB8  6E1B               	movwf	SETxAPIxVAL@value,c
  1705  000BBA  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1706  000BBE  D029               	goto	l8852
  1707  000BC0                     l209:
  1708                           
  1709                           ;State_Mchn.c: 118: }
  1710                           ;State_Mchn.c: 119: if(GETxAPIxVAL(38))
  1711                           
  1712                           ; BSR set to: 0
  1713  000BC0  0E00               	movlw	0
  1714  000BC2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1715  000BC4  0E26               	movlw	38
  1716  000BC6  6E13               	movwf	GETxAPIxVAL@index,c
  1717  000BC8  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1718  000BCC  5013               	movf	?_GETxAPIxVAL,w,c
  1719  000BCE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1720  000BD0  B4D8               	btfsc	status,2,c
  1721  000BD2  D00B               	goto	l210
  1722                           
  1723                           ;State_Mchn.c: 120: {
  1724                           ;State_Mchn.c: 121: SETxAPIxVAL(39, 4);
  1725  000BD4  0E00               	movlw	0
  1726  000BD6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1727  000BD8  0E27               	movlw	39
  1728  000BDA  6E19               	movwf	SETxAPIxVAL@index,c
  1729  000BDC  0E00               	movlw	0
  1730  000BDE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1731  000BE0  0E04               	movlw	4
  1732  000BE2  6E1B               	movwf	SETxAPIxVAL@value,c
  1733  000BE4  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1734  000BE8  D014               	goto	l8852
  1735  000BEA                     l210:
  1736                           
  1737                           ;State_Mchn.c: 124: }
  1738                           ;State_Mchn.c: 125: if(GETxAPIxVAL(34))
  1739                           
  1740                           ; BSR set to: 0
  1741  000BEA  0E00               	movlw	0
  1742  000BEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1743  000BEE  0E22               	movlw	34
  1744  000BF0  6E13               	movwf	GETxAPIxVAL@index,c
  1745  000BF2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1746  000BF6  5013               	movf	?_GETxAPIxVAL,w,c
  1747  000BF8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1748  000BFA  B4D8               	btfsc	status,2,c
  1749  000BFC  D00C               	goto	l211
  1750                           
  1751                           ;State_Mchn.c: 126: {
  1752                           ;State_Mchn.c: 127: SETxAPIxVAL(39, 5);
  1753  000BFE  0E00               	movlw	0
  1754  000C00  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1755  000C02  0E27               	movlw	39
  1756  000C04  6E19               	movwf	SETxAPIxVAL@index,c
  1757  000C06  0E00               	movlw	0
  1758  000C08  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1759  000C0A  0E05               	movlw	5
  1760  000C0C  6E1B               	movwf	SETxAPIxVAL@value,c
  1761  000C0E  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1762  000C12                     l8852:
  1763                           
  1764                           ;State_Mchn.c: 128: Switch_Init = 2;
  1765  000C12  0E02               	movlw	2
  1766  000C14  D7A7               	goto	L1
  1767  000C16                     l211:
  1768                           
  1769                           ;State_Mchn.c: 130: }
  1770                           ;State_Mchn.c: 131: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1771                           
  1772                           ; BSR set to: 0
  1773  000C16  0E00               	movlw	0
  1774  000C18  6E14               	movwf	GETxAPIxVAL@index+1,c
  1775  000C1A  0E27               	movlw	39
  1776  000C1C  6E13               	movwf	GETxAPIxVAL@index,c
  1777  000C1E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1778  000C22  5013               	movf	?_GETxAPIxVAL,w,c
  1779  000C24  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1780  000C26  B4D8               	btfsc	status,2,c
  1781  000C28  D00A               	goto	l212
  1782  000C2A  0E00               	movlw	0
  1783  000C2C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1784  000C2E  0E28               	movlw	40
  1785  000C30  6E13               	movwf	GETxAPIxVAL@index,c
  1786  000C32  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1787  000C36  5013               	movf	?_GETxAPIxVAL,w,c
  1788  000C38  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1789  000C3A  A4D8               	btfss	status,2,c
  1790  000C3C  D0E1               	goto	u8590
  1791  000C3E                     l212:
  1792                           
  1793                           ;State_Mchn.c: 134: }
  1794                           ;State_Mchn.c: 135: Switch_Init = 1;
  1795                           
  1796                           ; BSR set to: 0
  1797  000C3E  0E01               	movlw	1
  1798  000C40  0100               	movlb	0	; () banked
  1799  000C42  6F8A               	movwf	_Switch_Init& (0+255),b
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;State_Mchn.c: 136: Green_Led(2);
  1803  000C44  0E02               	movlw	2
  1804  000C46  ECF1  F01E         	call	_Green_Led
  1805                           
  1806                           ;State_Mchn.c: 137: break;
  1807  000C4A  EFD4  F00A         	goto	l304
  1808  000C4E  0E00               	movlw	0
  1809  000C50  6E14               	movwf	GETxAPIxVAL@index+1,c
  1810  000C52  0E23               	movlw	35
  1811  000C54  6E13               	movwf	GETxAPIxVAL@index,c
  1812  000C56  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1813  000C5A  5013               	movf	?_GETxAPIxVAL,w,c
  1814  000C5C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1815  000C5E  A4D8               	btfss	status,2,c
  1816  000C60  D035               	goto	l214
  1817  000C62  0E00               	movlw	0
  1818  000C64  6E14               	movwf	GETxAPIxVAL@index+1,c
  1819  000C66  0E24               	movlw	36
  1820  000C68  6E13               	movwf	GETxAPIxVAL@index,c
  1821  000C6A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1822  000C6E  5013               	movf	?_GETxAPIxVAL,w,c
  1823  000C70  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1824  000C72  A4D8               	btfss	status,2,c
  1825  000C74  D02B               	goto	l214
  1826  000C76  0E00               	movlw	0
  1827  000C78  6E14               	movwf	GETxAPIxVAL@index+1,c
  1828  000C7A  0E25               	movlw	37
  1829  000C7C  6E13               	movwf	GETxAPIxVAL@index,c
  1830  000C7E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1831  000C82  5013               	movf	?_GETxAPIxVAL,w,c
  1832  000C84  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1833  000C86  A4D8               	btfss	status,2,c
  1834  000C88  D021               	goto	l214
  1835  000C8A  0E00               	movlw	0
  1836  000C8C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1837  000C8E  0E26               	movlw	38
  1838  000C90  6E13               	movwf	GETxAPIxVAL@index,c
  1839  000C92  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1840  000C96  5013               	movf	?_GETxAPIxVAL,w,c
  1841  000C98  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1842  000C9A  A4D8               	btfss	status,2,c
  1843  000C9C  D017               	goto	l214
  1844  000C9E  0E00               	movlw	0
  1845  000CA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1846  000CA2  0E22               	movlw	34
  1847  000CA4  6E13               	movwf	GETxAPIxVAL@index,c
  1848  000CA6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1849  000CAA  5013               	movf	?_GETxAPIxVAL,w,c
  1850  000CAC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1851  000CAE  A4D8               	btfss	status,2,c
  1852  000CB0  D00D               	goto	l214
  1853  000CB2  0E00               	movlw	0
  1854  000CB4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1855  000CB6  0E20               	movlw	32
  1856  000CB8  6E13               	movwf	GETxAPIxVAL@index,c
  1857  000CBA  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1858  000CBE  5013               	movf	?_GETxAPIxVAL,w,c
  1859  000CC0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1860  000CC2  A4D8               	btfss	status,2,c
  1861  000CC4  D003               	goto	l214
  1862                           
  1863                           ;State_Mchn.c: 140: {
  1864                           ;State_Mchn.c: 141: Switch_Init = 3;
  1865  000CC6  0E03               	movlw	3
  1866  000CC8  0100               	movlb	0	; () banked
  1867  000CCA  6F8A               	movwf	_Switch_Init& (0+255),b
  1868  000CCC                     l214:
  1869                           
  1870                           ;State_Mchn.c: 142: }
  1871                           ;State_Mchn.c: 143: Red_Led(0);
  1872                           
  1873                           ; BSR set to: 0
  1874  000CCC  0E00               	movlw	0
  1875  000CCE  ECB1  F01E         	call	_Red_Led
  1876                           
  1877                           ;State_Mchn.c: 144: Green_Led(2);
  1878  000CD2  0E02               	movlw	2
  1879  000CD4  ECF1  F01E         	call	_Green_Led
  1880                           
  1881                           ;State_Mchn.c: 145: break;
  1882  000CD8  EFD4  F00A         	goto	l304
  1883  000CDC  0E00               	movlw	0
  1884  000CDE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1885  000CE0  0E23               	movlw	35
  1886  000CE2  6E13               	movwf	GETxAPIxVAL@index,c
  1887  000CE4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1888  000CE8  5013               	movf	?_GETxAPIxVAL,w,c
  1889  000CEA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1890  000CEC  B4D8               	btfsc	status,2,c
  1891  000CEE  D00B               	goto	l216
  1892                           
  1893                           ;State_Mchn.c: 148: {
  1894                           ;State_Mchn.c: 149: SETxAPIxVAL(40, 1);
  1895  000CF0  0E00               	movlw	0
  1896  000CF2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1897  000CF4  0E28               	movlw	40
  1898  000CF6  6E19               	movwf	SETxAPIxVAL@index,c
  1899  000CF8  0E00               	movlw	0
  1900  000CFA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1901  000CFC  0E01               	movlw	1
  1902  000CFE  6E1B               	movwf	SETxAPIxVAL@value,c
  1903  000D00  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1904  000D04  D07D               	goto	u8590
  1905  000D06                     l216:
  1906                           
  1907                           ;State_Mchn.c: 152: }
  1908                           ;State_Mchn.c: 153: if(GETxAPIxVAL(36))
  1909                           
  1910                           ; BSR set to: 0
  1911  000D06  0E00               	movlw	0
  1912  000D08  6E14               	movwf	GETxAPIxVAL@index+1,c
  1913  000D0A  0E24               	movlw	36
  1914  000D0C  6E13               	movwf	GETxAPIxVAL@index,c
  1915  000D0E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1916  000D12  5013               	movf	?_GETxAPIxVAL,w,c
  1917  000D14  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1918  000D16  B4D8               	btfsc	status,2,c
  1919  000D18  D00B               	goto	l217
  1920                           
  1921                           ;State_Mchn.c: 154: {
  1922                           ;State_Mchn.c: 155: SETxAPIxVAL(40, 2);
  1923  000D1A  0E00               	movlw	0
  1924  000D1C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1925  000D1E  0E28               	movlw	40
  1926  000D20  6E19               	movwf	SETxAPIxVAL@index,c
  1927  000D22  0E00               	movlw	0
  1928  000D24  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1929  000D26  0E02               	movlw	2
  1930  000D28  6E1B               	movwf	SETxAPIxVAL@value,c
  1931  000D2A  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1932  000D2E  D068               	goto	u8590
  1933  000D30                     l217:
  1934                           
  1935                           ;State_Mchn.c: 158: }
  1936                           ;State_Mchn.c: 159: if(GETxAPIxVAL(37))
  1937                           
  1938                           ; BSR set to: 0
  1939  000D30  0E00               	movlw	0
  1940  000D32  6E14               	movwf	GETxAPIxVAL@index+1,c
  1941  000D34  0E25               	movlw	37
  1942  000D36  6E13               	movwf	GETxAPIxVAL@index,c
  1943  000D38  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1944  000D3C  5013               	movf	?_GETxAPIxVAL,w,c
  1945  000D3E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1946  000D40  B4D8               	btfsc	status,2,c
  1947  000D42  D00B               	goto	l218
  1948                           
  1949                           ;State_Mchn.c: 160: {
  1950                           ;State_Mchn.c: 161: SETxAPIxVAL(40, 3);
  1951  000D44  0E00               	movlw	0
  1952  000D46  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1953  000D48  0E28               	movlw	40
  1954  000D4A  6E19               	movwf	SETxAPIxVAL@index,c
  1955  000D4C  0E00               	movlw	0
  1956  000D4E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1957  000D50  0E03               	movlw	3
  1958  000D52  6E1B               	movwf	SETxAPIxVAL@value,c
  1959  000D54  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1960  000D58  D053               	goto	u8590
  1961  000D5A                     l218:
  1962                           
  1963                           ;State_Mchn.c: 164: }
  1964                           ;State_Mchn.c: 165: if(GETxAPIxVAL(38))
  1965                           
  1966                           ; BSR set to: 0
  1967  000D5A  0E00               	movlw	0
  1968  000D5C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1969  000D5E  0E26               	movlw	38
  1970  000D60  6E13               	movwf	GETxAPIxVAL@index,c
  1971  000D62  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  1972  000D66  5013               	movf	?_GETxAPIxVAL,w,c
  1973  000D68  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1974  000D6A  B4D8               	btfsc	status,2,c
  1975  000D6C  D00B               	goto	l219
  1976                           
  1977                           ;State_Mchn.c: 166: {
  1978                           ;State_Mchn.c: 167: SETxAPIxVAL(40, 4);
  1979  000D6E  0E00               	movlw	0
  1980  000D70  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1981  000D72  0E28               	movlw	40
  1982  000D74  6E19               	movwf	SETxAPIxVAL@index,c
  1983  000D76  0E00               	movlw	0
  1984  000D78  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1985  000D7A  0E04               	movlw	4
  1986  000D7C  6E1B               	movwf	SETxAPIxVAL@value,c
  1987  000D7E  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  1988  000D82  D03E               	goto	u8590
  1989  000D84                     l219:
  1990                           
  1991                           ;State_Mchn.c: 170: }
  1992                           ;State_Mchn.c: 171: if(GETxAPIxVAL(34))
  1993                           
  1994                           ; BSR set to: 0
  1995  000D84  0E00               	movlw	0
  1996  000D86  6E14               	movwf	GETxAPIxVAL@index+1,c
  1997  000D88  0E22               	movlw	34
  1998  000D8A  6E13               	movwf	GETxAPIxVAL@index,c
  1999  000D8C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2000  000D90  5013               	movf	?_GETxAPIxVAL,w,c
  2001  000D92  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2002  000D94  B4D8               	btfsc	status,2,c
  2003  000D96  D00B               	goto	l220
  2004                           
  2005                           ;State_Mchn.c: 172: {
  2006                           ;State_Mchn.c: 173: SETxAPIxVAL(40, 5);
  2007  000D98  0E00               	movlw	0
  2008  000D9A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2009  000D9C  0E28               	movlw	40
  2010  000D9E  6E19               	movwf	SETxAPIxVAL@index,c
  2011  000DA0  0E00               	movlw	0
  2012  000DA2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2013  000DA4  0E05               	movlw	5
  2014  000DA6  6E1B               	movwf	SETxAPIxVAL@value,c
  2015  000DA8  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  2016  000DAC  D029               	goto	u8590
  2017  000DAE                     l220:
  2018                           
  2019                           ;State_Mchn.c: 176: }
  2020                           ;State_Mchn.c: 177: if(GETxAPIxVAL(32))
  2021                           
  2022                           ; BSR set to: 0
  2023  000DAE  0E00               	movlw	0
  2024  000DB0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2025  000DB2  0E20               	movlw	32
  2026  000DB4  6E13               	movwf	GETxAPIxVAL@index,c
  2027  000DB6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2028  000DBA  5013               	movf	?_GETxAPIxVAL,w,c
  2029  000DBC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2030  000DBE  B4D8               	btfsc	status,2,c
  2031  000DC0  D00B               	goto	l221
  2032                           
  2033                           ;State_Mchn.c: 178: {
  2034                           ;State_Mchn.c: 179: SETxAPIxVAL(40, 9);
  2035  000DC2  0E00               	movlw	0
  2036  000DC4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2037  000DC6  0E28               	movlw	40
  2038  000DC8  6E19               	movwf	SETxAPIxVAL@index,c
  2039  000DCA  0E00               	movlw	0
  2040  000DCC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2041  000DCE  0E09               	movlw	9
  2042  000DD0  6E1B               	movwf	SETxAPIxVAL@value,c
  2043  000DD2  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  2044  000DD6  D014               	goto	u8590
  2045  000DD8                     l221:
  2046                           
  2047                           ;State_Mchn.c: 182: }
  2048                           ;State_Mchn.c: 183: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  2049                           
  2050                           ; BSR set to: 0
  2051  000DD8  0E00               	movlw	0
  2052  000DDA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2053  000DDC  0E27               	movlw	39
  2054  000DDE  6E13               	movwf	GETxAPIxVAL@index,c
  2055  000DE0  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2056  000DE4  5013               	movf	?_GETxAPIxVAL,w,c
  2057  000DE6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2058  000DE8  B4D8               	btfsc	status,2,c
  2059  000DEA  D00C               	goto	l222
  2060  000DEC  0E00               	movlw	0
  2061  000DEE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2062  000DF0  0E28               	movlw	40
  2063  000DF2  6E13               	movwf	GETxAPIxVAL@index,c
  2064  000DF4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2065  000DF8  5013               	movf	?_GETxAPIxVAL,w,c
  2066  000DFA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2067  000DFC  B4D8               	btfsc	status,2,c
  2068  000DFE  D002               	goto	l222
  2069  000E00                     u8590:
  2070                           
  2071                           ;State_Mchn.c: 184: Switch_Init = 4;
  2072  000E00  0E04               	movlw	4
  2073  000E02  D6B0               	goto	L1
  2074  000E04                     l222:
  2075                           
  2076                           ;State_Mchn.c: 186: }
  2077                           ;State_Mchn.c: 187: Green_Led(2);
  2078                           
  2079                           ; BSR set to: 0
  2080  000E04  0E02               	movlw	2
  2081  000E06  ECF1  F01E         	call	_Green_Led
  2082                           
  2083                           ;State_Mchn.c: 188: Switch_Init = 3;
  2084  000E0A  0E03               	movlw	3
  2085  000E0C  D6AB               	goto	L1
  2086  000E0E                     
  2087                           ; BSR set to: 0
  2088                           
  2089                           ; BSR set to: 0
  2090  000E0E  0E00               	movlw	0
  2091  000E10  6E14               	movwf	GETxAPIxVAL@index+1,c
  2092  000E12  0E23               	movlw	35
  2093  000E14  6E13               	movwf	GETxAPIxVAL@index,c
  2094  000E16  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2095  000E1A  5013               	movf	?_GETxAPIxVAL,w,c
  2096  000E1C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2097  000E1E  A4D8               	btfss	status,2,c
  2098  000E20  D07E               	goto	l226
  2099  000E22  0E00               	movlw	0
  2100  000E24  6E14               	movwf	GETxAPIxVAL@index+1,c
  2101  000E26  0E24               	movlw	36
  2102  000E28  6E13               	movwf	GETxAPIxVAL@index,c
  2103  000E2A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2104  000E2E  5013               	movf	?_GETxAPIxVAL,w,c
  2105  000E30  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2106  000E32  A4D8               	btfss	status,2,c
  2107  000E34  D074               	goto	l226
  2108  000E36  0E00               	movlw	0
  2109  000E38  6E14               	movwf	GETxAPIxVAL@index+1,c
  2110  000E3A  0E25               	movlw	37
  2111  000E3C  6E13               	movwf	GETxAPIxVAL@index,c
  2112  000E3E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2113  000E42  5013               	movf	?_GETxAPIxVAL,w,c
  2114  000E44  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2115  000E46  A4D8               	btfss	status,2,c
  2116  000E48  D06A               	goto	l226
  2117  000E4A  0E00               	movlw	0
  2118  000E4C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2119  000E4E  0E26               	movlw	38
  2120  000E50  6E13               	movwf	GETxAPIxVAL@index,c
  2121  000E52  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2122  000E56  5013               	movf	?_GETxAPIxVAL,w,c
  2123  000E58  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2124  000E5A  A4D8               	btfss	status,2,c
  2125  000E5C  D060               	goto	l226
  2126  000E5E  0E00               	movlw	0
  2127  000E60  6E14               	movwf	GETxAPIxVAL@index+1,c
  2128  000E62  0E22               	movlw	34
  2129  000E64  6E13               	movwf	GETxAPIxVAL@index,c
  2130  000E66  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2131  000E6A  5013               	movf	?_GETxAPIxVAL,w,c
  2132  000E6C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2133  000E6E  A4D8               	btfss	status,2,c
  2134  000E70  D056               	goto	l226
  2135  000E72  0E00               	movlw	0
  2136  000E74  6E14               	movwf	GETxAPIxVAL@index+1,c
  2137  000E76  0E20               	movlw	32
  2138  000E78  6E13               	movwf	GETxAPIxVAL@index,c
  2139  000E7A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2140  000E7E  5013               	movf	?_GETxAPIxVAL,w,c
  2141  000E80  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2142  000E82  A4D8               	btfss	status,2,c
  2143  000E84  D04C               	goto	l226
  2144                           
  2145                           ;State_Mchn.c: 192: {
  2146                           ;State_Mchn.c: 193: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  2147  000E86  0E00               	movlw	0
  2148  000E88  6E14               	movwf	GETxAPIxVAL@index+1,c
  2149  000E8A  0E27               	movlw	39
  2150  000E8C  6E13               	movwf	GETxAPIxVAL@index,c
  2151  000E8E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2152  000E92  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2153  000E96  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2154  000E9A  0E00               	movlw	0
  2155  000E9C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2156  000E9E  0E28               	movlw	40
  2157  000EA0  6E13               	movwf	GETxAPIxVAL@index,c
  2158  000EA2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2159  000EA6  5013               	movf	?_GETxAPIxVAL,w,c
  2160  000EA8  0100               	movlb	0	; () banked
  2161  000EAA  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  2162  000EAC  E11E               	bnz	l8948
  2163  000EAE  5014               	movf	?_GETxAPIxVAL+1,w,c
  2164  000EB0  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2165  000EB2  A4D8               	btfss	status,2,c
  2166  000EB4  D01A               	goto	l225
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;State_Mchn.c: 194: {
  2170                           ;State_Mchn.c: 195: SETxAPIxVAL(40, 0);
  2171  000EB6  0E00               	movlw	0
  2172  000EB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2173  000EBA  0E28               	movlw	40
  2174  000EBC  6E19               	movwf	SETxAPIxVAL@index,c
  2175  000EBE  0E00               	movlw	0
  2176  000EC0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2177  000EC2  0E00               	movlw	0
  2178  000EC4  6E1B               	movwf	SETxAPIxVAL@value,c
  2179  000EC6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  2180                           
  2181                           ;State_Mchn.c: 196: SETxAPIxVAL(39, 0);
  2182  000ECA  0E00               	movlw	0
  2183  000ECC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2184  000ECE  0E27               	movlw	39
  2185  000ED0  6E19               	movwf	SETxAPIxVAL@index,c
  2186  000ED2  0E00               	movlw	0
  2187  000ED4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2188  000ED6  0E00               	movlw	0
  2189  000ED8  6E1B               	movwf	SETxAPIxVAL@value,c
  2190  000EDA  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  2191                           
  2192                           ;State_Mchn.c: 197: Red_Led(1);
  2193  000EDE  0E01               	movlw	1
  2194  000EE0  ECB1  F01E         	call	_Red_Led
  2195                           
  2196                           ;State_Mchn.c: 198: Switch_Init = 1;
  2197  000EE4  0E01               	movlw	1
  2198  000EE6  0100               	movlb	0	; () banked
  2199  000EE8  6F8A               	movwf	_Switch_Init& (0+255),b
  2200  000EEA                     l225:
  2201  000EEA                     l8948:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;State_Mchn.c: 200: }
  2205                           ;State_Mchn.c: 201: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  2206  000EEA  0E00               	movlw	0
  2207  000EEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2208  000EEE  0E27               	movlw	39
  2209  000EF0  6E13               	movwf	GETxAPIxVAL@index,c
  2210  000EF2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2211  000EF6  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2212  000EFA  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2213  000EFE  0E00               	movlw	0
  2214  000F00  6E14               	movwf	GETxAPIxVAL@index+1,c
  2215  000F02  0E28               	movlw	40
  2216  000F04  6E13               	movwf	GETxAPIxVAL@index,c
  2217  000F06  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2218  000F0A  5013               	movf	?_GETxAPIxVAL,w,c
  2219  000F0C  0100               	movlb	0	; () banked
  2220  000F0E  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  2221  000F10  E104               	bnz	u8670
  2222  000F12  5014               	movf	?_GETxAPIxVAL+1,w,c
  2223  000F14  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2224  000F16  B4D8               	btfsc	status,2,c
  2225  000F18  D002               	goto	l226
  2226  000F1A                     u8670:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;State_Mchn.c: 202: {
  2230                           ;State_Mchn.c: 203: Switch_Init = 5;
  2231  000F1A  0E05               	movlw	5
  2232  000F1C  6F8A               	movwf	_Switch_Init& (0+255),b
  2233  000F1E                     l226:
  2234                           
  2235                           ;State_Mchn.c: 204: }
  2236                           ;State_Mchn.c: 205: }
  2237                           ;State_Mchn.c: 206: Green_Led(2);
  2238                           
  2239                           ; BSR set to: 0
  2240                           
  2241                           ; BSR set to: 0
  2242  000F1E  0E02               	movlw	2
  2243  000F20  ECF1  F01E         	call	_Green_Led
  2244                           
  2245                           ;State_Mchn.c: 207: break;
  2246  000F24  D341               	goto	l304
  2247  000F26  0E00               	movlw	0
  2248  000F28  6E14               	movwf	GETxAPIxVAL@index+1,c
  2249  000F2A  0E28               	movlw	40
  2250  000F2C  6E13               	movwf	GETxAPIxVAL@index,c
  2251  000F2E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2252  000F32  0E09               	movlw	9
  2253  000F34  1813               	xorwf	?_GETxAPIxVAL,w,c
  2254  000F36  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2255  000F38  B4D8               	btfsc	status,2,c
  2256  000F3A  D003               	goto	l228
  2257                           
  2258                           ;State_Mchn.c: 210: {
  2259                           ;State_Mchn.c: 211: Switch_Init = 6;
  2260  000F3C  0E06               	movlw	6
  2261  000F3E  0100               	movlb	0	; () banked
  2262  000F40  6F8A               	movwf	_Switch_Init& (0+255),b
  2263  000F42                     l228:
  2264                           
  2265                           ;State_Mchn.c: 212: }
  2266                           ;State_Mchn.c: 213: if(GETxAPIxVAL(40) == 9)
  2267                           
  2268                           ; BSR set to: 0
  2269  000F42  0E00               	movlw	0
  2270  000F44  6E14               	movwf	GETxAPIxVAL@index+1,c
  2271  000F46  0E28               	movlw	40
  2272  000F48  6E13               	movwf	GETxAPIxVAL@index,c
  2273  000F4A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2274  000F4E  0E09               	movlw	9
  2275  000F50  1813               	xorwf	?_GETxAPIxVAL,w,c
  2276  000F52  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2277  000F54  A4D8               	btfss	status,2,c
  2278  000F56  D328               	goto	l304
  2279                           
  2280                           ;State_Mchn.c: 214: {
  2281                           ;State_Mchn.c: 215: Switch_Init = 9;
  2282  000F58  0E09               	movlw	9
  2283  000F5A  D604               	goto	L1
  2284  000F5C                     
  2285                           ; BSR set to: 0
  2286                           
  2287                           ; BSR set to: 0
  2288  000F5C  0E08               	movlw	8
  2289  000F5E  D603               	goto	L2
  2290  000F60                     
  2291                           ; BSR set to: 0
  2292                           
  2293                           ; BSR set to: 0
  2294  000F60  0E00               	movlw	0
  2295  000F62  6E14               	movwf	GETxAPIxVAL@index+1,c
  2296  000F64  0E20               	movlw	32
  2297  000F66  6E13               	movwf	GETxAPIxVAL@index,c
  2298  000F68  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2299  000F6C  5013               	movf	?_GETxAPIxVAL,w,c
  2300  000F6E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2301  000F70  A4D8               	btfss	status,2,c
  2302  000F72  D00A               	goto	u8710
  2303  000F74  0E00               	movlw	0
  2304  000F76  6E14               	movwf	GETxAPIxVAL@index+1,c
  2305  000F78  0E46               	movlw	70
  2306  000F7A  6E13               	movwf	GETxAPIxVAL@index,c
  2307  000F7C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2308  000F80  5013               	movf	?_GETxAPIxVAL,w,c
  2309  000F82  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2310  000F84  B4D8               	btfsc	status,2,c
  2311  000F86  D011               	goto	l232
  2312  000F88                     u8710:
  2313                           
  2314                           ;State_Mchn.c: 223: {
  2315                           ;State_Mchn.c: 224: Switch_Main = 2;
  2316  000F88  0E02               	movlw	2
  2317  000F8A  0100               	movlb	0	; () banked
  2318  000F8C  6FE1               	movwf	_Switch_Main& (0+255),b
  2319                           
  2320                           ;State_Mchn.c: 225: Switch_Init = 0;
  2321  000F8E  0E00               	movlw	0
  2322  000F90  6F8A               	movwf	_Switch_Init& (0+255),b
  2323                           
  2324                           ;State_Mchn.c: 226: Stop_Program = 0;
  2325  000F92  0E00               	movlw	0
  2326  000F94  6F85               	movwf	_Stop_Program& (0+255),b
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;State_Mchn.c: 227: SETxAPIxVAL(70, 0);
  2330  000F96  0E00               	movlw	0
  2331  000F98  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2332  000F9A  0E46               	movlw	70
  2333  000F9C  6E19               	movwf	SETxAPIxVAL@index,c
  2334  000F9E  0E00               	movlw	0
  2335  000FA0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2336  000FA2  0E00               	movlw	0
  2337  000FA4  6E1B               	movwf	SETxAPIxVAL@value,c
  2338  000FA6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  2339  000FAA                     l232:
  2340                           
  2341                           ;State_Mchn.c: 228: }
  2342                           ;State_Mchn.c: 229: Green_Led(3);
  2343  000FAA  0E03               	movlw	3
  2344  000FAC  ECF1  F01E         	call	_Green_Led
  2345                           
  2346                           ;State_Mchn.c: 230: Red_Led(0);
  2347  000FB0  0E00               	movlw	0
  2348  000FB2  ECB1  F01E         	call	_Red_Led
  2349                           
  2350                           ;State_Mchn.c: 231: break;
  2351  000FB6  D2F8               	goto	l304
  2352  000FB8  0E00               	movlw	0
  2353  000FBA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2354  000FBC  0E27               	movlw	39
  2355  000FBE  6E13               	movwf	GETxAPIxVAL@index,c
  2356  000FC0  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2357  000FC4  0E05               	movlw	5
  2358  000FC6  1813               	xorwf	?_GETxAPIxVAL,w,c
  2359  000FC8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2360  000FCA  B4D8               	btfsc	status,2,c
  2361  000FCC  D014               	goto	l237
  2362  000FCE  D02B               	goto	l239
  2363  000FD0  0E01               	movlw	1
  2364  000FD2  D005               	goto	L5
  2365  000FD4                     
  2366                           ; BSR set to: 0
  2367  000FD4  0E05               	movlw	5
  2368  000FD6  D003               	goto	L5
  2369  000FD8                     
  2370                           ; BSR set to: 0
  2371  000FD8  0E02               	movlw	2
  2372  000FDA  D001               	goto	L5
  2373  000FDC                     
  2374                           ; BSR set to: 0
  2375  000FDC  0E03               	movlw	3
  2376  000FDE                     L5:
  2377  000FDE  0100               	movlb	0	; () banked
  2378  000FE0  6F89               	movwf	_Switch_Program& (0+255),b
  2379                           
  2380                           ;State_Mchn.c: 247: Switch_Init = 7;
  2381  000FE2  0E07               	movlw	7
  2382  000FE4  6F8A               	movwf	_Switch_Init& (0+255),b
  2383                           
  2384                           ;State_Mchn.c: 248: break;
  2385  000FE6  D01F               	goto	l239
  2386  000FE8                     
  2387                           ; BSR set to: 0
  2388  000FE8  0E08               	movlw	8
  2389  000FEA  0100               	movlb	0	; () banked
  2390  000FEC  6F8A               	movwf	_Switch_Init& (0+255),b
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;State_Mchn.c: 250: Red_Led(1);
  2394  000FEE  0E01               	movlw	1
  2395  000FF0  ECB1  F01E         	call	_Red_Led
  2396                           
  2397                           ;State_Mchn.c: 252: }
  2398                           
  2399                           ;State_Mchn.c: 251: break;
  2400  000FF4  D018               	goto	l239
  2401  000FF6                     l237:
  2402  000FF6  0E00               	movlw	0
  2403  000FF8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2404  000FFA  0E28               	movlw	40
  2405  000FFC  6E13               	movwf	GETxAPIxVAL@index,c
  2406  000FFE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2407                           
  2408                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2409                           ; Switch size 1, requested type "space"
  2410                           ; Number of cases is 1, Range of values is 0 to 0
  2411                           ; switch strategies available:
  2412                           ; Name         Instructions Cycles
  2413                           ; simple_byte            4     3 (average)
  2414                           ;	Chosen strategy is simple_byte
  2415  001002  5014               	movf	?_GETxAPIxVAL+1,w,c
  2416  001004  0A00               	xorlw	0	; case 0
  2417  001006  A4D8               	btfss	status,2,c
  2418  001008  D7EF               	goto	l243
  2419                           
  2420                           ; Switch size 1, requested type "space"
  2421                           ; Number of cases is 4, Range of values is 1 to 4
  2422                           ; switch strategies available:
  2423                           ; Name         Instructions Cycles
  2424                           ; simple_byte           13     7 (average)
  2425                           ;	Chosen strategy is simple_byte
  2426  00100A  5013               	movf	?_GETxAPIxVAL,w,c
  2427  00100C  0A01               	xorlw	1	; case 1
  2428  00100E  B4D8               	btfsc	status,2,c
  2429  001010  D7DF               	goto	l238
  2430  001012  0A03               	xorlw	3	; case 2
  2431  001014  B4D8               	btfsc	status,2,c
  2432  001016  D7DE               	goto	l240
  2433  001018  0A01               	xorlw	1	; case 3
  2434  00101A  B4D8               	btfsc	status,2,c
  2435  00101C  D7DD               	goto	l241
  2436  00101E  0A07               	xorlw	7	; case 4
  2437  001020  B4D8               	btfsc	status,2,c
  2438  001022  D7DC               	goto	l242
  2439  001024  D7E1               	goto	l243
  2440  001026                     l239:
  2441                           
  2442                           ;State_Mchn.c: 253: }
  2443                           ;State_Mchn.c: 254: if(GETxAPIxVAL(40) == 5)
  2444  001026  0E00               	movlw	0
  2445  001028  6E14               	movwf	GETxAPIxVAL@index+1,c
  2446  00102A  0E28               	movlw	40
  2447  00102C  6E13               	movwf	GETxAPIxVAL@index,c
  2448  00102E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2449  001032  0E05               	movlw	5
  2450  001034  1813               	xorwf	?_GETxAPIxVAL,w,c
  2451  001036  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2452  001038  B4D8               	btfsc	status,2,c
  2453  00103A  D014               	goto	l245
  2454  00103C  D02B               	goto	l247
  2455  00103E  0E01               	movlw	1
  2456  001040  D005               	goto	L8
  2457  001042                     
  2458                           ; BSR set to: 0
  2459  001042  0E05               	movlw	5
  2460  001044  D003               	goto	L8
  2461  001046                     
  2462                           ; BSR set to: 0
  2463  001046  0E02               	movlw	2
  2464  001048  D001               	goto	L8
  2465  00104A                     
  2466                           ; BSR set to: 0
  2467  00104A  0E03               	movlw	3
  2468  00104C                     L8:
  2469  00104C  0100               	movlb	0	; () banked
  2470  00104E  6F89               	movwf	_Switch_Program& (0+255),b
  2471                           
  2472                           ;State_Mchn.c: 268: Switch_Init = 7;
  2473  001050  0E07               	movlw	7
  2474  001052  6F8A               	movwf	_Switch_Init& (0+255),b
  2475                           
  2476                           ;State_Mchn.c: 269: break;
  2477  001054  D01F               	goto	l247
  2478  001056                     
  2479                           ; BSR set to: 0
  2480  001056  0E08               	movlw	8
  2481  001058  0100               	movlb	0	; () banked
  2482  00105A  6F8A               	movwf	_Switch_Init& (0+255),b
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;State_Mchn.c: 271: Red_Led(1);
  2486  00105C  0E01               	movlw	1
  2487  00105E  ECB1  F01E         	call	_Red_Led
  2488                           
  2489                           ;State_Mchn.c: 273: }
  2490                           
  2491                           ;State_Mchn.c: 272: break;
  2492  001062  D018               	goto	l247
  2493  001064                     l245:
  2494  001064  0E00               	movlw	0
  2495  001066  6E14               	movwf	GETxAPIxVAL@index+1,c
  2496  001068  0E27               	movlw	39
  2497  00106A  6E13               	movwf	GETxAPIxVAL@index,c
  2498  00106C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2499                           
  2500                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2501                           ; Switch size 1, requested type "space"
  2502                           ; Number of cases is 1, Range of values is 0 to 0
  2503                           ; switch strategies available:
  2504                           ; Name         Instructions Cycles
  2505                           ; simple_byte            4     3 (average)
  2506                           ;	Chosen strategy is simple_byte
  2507  001070  5014               	movf	?_GETxAPIxVAL+1,w,c
  2508  001072  0A00               	xorlw	0	; case 0
  2509  001074  A4D8               	btfss	status,2,c
  2510  001076  D7EF               	goto	l251
  2511                           
  2512                           ; Switch size 1, requested type "space"
  2513                           ; Number of cases is 4, Range of values is 1 to 4
  2514                           ; switch strategies available:
  2515                           ; Name         Instructions Cycles
  2516                           ; simple_byte           13     7 (average)
  2517                           ;	Chosen strategy is simple_byte
  2518  001078  5013               	movf	?_GETxAPIxVAL,w,c
  2519  00107A  0A01               	xorlw	1	; case 1
  2520  00107C  B4D8               	btfsc	status,2,c
  2521  00107E  D7DF               	goto	l246
  2522  001080  0A03               	xorlw	3	; case 2
  2523  001082  B4D8               	btfsc	status,2,c
  2524  001084  D7DE               	goto	l248
  2525  001086  0A01               	xorlw	1	; case 3
  2526  001088  B4D8               	btfsc	status,2,c
  2527  00108A  D7DD               	goto	l249
  2528  00108C  0A07               	xorlw	7	; case 4
  2529  00108E  B4D8               	btfsc	status,2,c
  2530  001090  D7DC               	goto	l250
  2531  001092  D7E1               	goto	l251
  2532  001094                     l247:
  2533                           
  2534                           ;State_Mchn.c: 274: }
  2535                           ;State_Mchn.c: 275: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2536  001094  0E00               	movlw	0
  2537  001096  6E14               	movwf	GETxAPIxVAL@index+1,c
  2538  001098  0E27               	movlw	39
  2539  00109A  6E13               	movwf	GETxAPIxVAL@index,c
  2540  00109C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2541  0010A0  0E05               	movlw	5
  2542  0010A2  1813               	xorwf	?_GETxAPIxVAL,w,c
  2543  0010A4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2544  0010A6  B4D8               	btfsc	status,2,c
  2545  0010A8  D27F               	goto	l304
  2546  0010AA  0E00               	movlw	0
  2547  0010AC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2548  0010AE  0E28               	movlw	40
  2549  0010B0  6E13               	movwf	GETxAPIxVAL@index,c
  2550  0010B2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2551  0010B6  0E05               	movlw	5
  2552  0010B8  1813               	xorwf	?_GETxAPIxVAL,w,c
  2553  0010BA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2554  0010BC  A4D8               	btfss	status,2,c
  2555  0010BE  D095               	goto	l253
  2556  0010C0  D273               	goto	l304
  2557  0010C2                     
  2558                           ; BSR set to: 0
  2559  0010C2  0E01               	movlw	1
  2560  0010C4  D066               	goto	L19
  2561  0010C6                     
  2562                           ; BSR set to: 0
  2563  0010C6  0E02               	movlw	2
  2564  0010C8  D064               	goto	L19
  2565  0010CA                     
  2566                           ; BSR set to: 0
  2567  0010CA  0E04               	movlw	4
  2568  0010CC  D062               	goto	L19
  2569  0010CE                     
  2570                           ; BSR set to: 0
  2571  0010CE  0E08               	movlw	8
  2572  0010D0  0100               	movlb	0	; () banked
  2573  0010D2  6F8A               	movwf	_Switch_Init& (0+255),b
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;State_Mchn.c: 293: Red_Led(1);
  2577  0010D4  0E01               	movlw	1
  2578  0010D6  ECB1  F01E         	call	_Red_Led
  2579                           
  2580                           ;State_Mchn.c: 295: }
  2581                           
  2582                           ;State_Mchn.c: 294: break;
  2583  0010DA  D266               	goto	l304
  2584  0010DC  0E00               	movlw	0
  2585  0010DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2586  0010E0  0E28               	movlw	40
  2587  0010E2  6E13               	movwf	GETxAPIxVAL@index,c
  2588  0010E4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2589                           
  2590                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2591                           ; Switch size 1, requested type "space"
  2592                           ; Number of cases is 1, Range of values is 0 to 0
  2593                           ; switch strategies available:
  2594                           ; Name         Instructions Cycles
  2595                           ; simple_byte            4     3 (average)
  2596                           ;	Chosen strategy is simple_byte
  2597  0010E8  5014               	movf	?_GETxAPIxVAL+1,w,c
  2598  0010EA  0A00               	xorlw	0	; case 0
  2599  0010EC  A4D8               	btfss	status,2,c
  2600  0010EE  D7EF               	goto	l261
  2601                           
  2602                           ; Switch size 1, requested type "space"
  2603                           ; Number of cases is 4, Range of values is 1 to 4
  2604                           ; switch strategies available:
  2605                           ; Name         Instructions Cycles
  2606                           ; simple_byte           13     7 (average)
  2607                           ;	Chosen strategy is simple_byte
  2608  0010F0  5013               	movf	?_GETxAPIxVAL,w,c
  2609  0010F2  0A01               	xorlw	1	; case 1
  2610  0010F4  B4D8               	btfsc	status,2,c
  2611  0010F6  D051               	goto	l285
  2612  0010F8  0A03               	xorlw	3	; case 2
  2613  0010FA  B4D8               	btfsc	status,2,c
  2614  0010FC  D7E2               	goto	l258
  2615  0010FE  0A01               	xorlw	1	; case 3
  2616  001100  B4D8               	btfsc	status,2,c
  2617  001102  D7E1               	goto	l259
  2618  001104  0A07               	xorlw	7	; case 4
  2619  001106  B4D8               	btfsc	status,2,c
  2620  001108  D7E0               	goto	l260
  2621  00110A  D7E1               	goto	l261
  2622  00110C                     
  2623                           ; BSR set to: 0
  2624  00110C  0E00               	movlw	0
  2625  00110E  D041               	goto	L19
  2626  001110                     
  2627                           ; BSR set to: 0
  2628  001110  0E08               	movlw	8
  2629  001112  0100               	movlb	0	; () banked
  2630  001114  6F8A               	movwf	_Switch_Init& (0+255),b
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;State_Mchn.c: 311: Red_Led(1);
  2634  001116  0E01               	movlw	1
  2635  001118  ECB1  F01E         	call	_Red_Led
  2636                           
  2637                           ;State_Mchn.c: 313: }
  2638                           
  2639                           ;State_Mchn.c: 312: break;
  2640  00111C  D245               	goto	l304
  2641  00111E  0E00               	movlw	0
  2642  001120  6E14               	movwf	GETxAPIxVAL@index+1,c
  2643  001122  0E28               	movlw	40
  2644  001124  6E13               	movwf	GETxAPIxVAL@index,c
  2645  001126  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2646                           
  2647                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2648                           ; Switch size 1, requested type "space"
  2649                           ; Number of cases is 1, Range of values is 0 to 0
  2650                           ; switch strategies available:
  2651                           ; Name         Instructions Cycles
  2652                           ; simple_byte            4     3 (average)
  2653                           ;	Chosen strategy is simple_byte
  2654  00112A  5014               	movf	?_GETxAPIxVAL+1,w,c
  2655  00112C  0A00               	xorlw	0	; case 0
  2656  00112E  A4D8               	btfss	status,2,c
  2657  001130  D7EF               	goto	l270
  2658                           
  2659                           ; Switch size 1, requested type "space"
  2660                           ; Number of cases is 4, Range of values is 1 to 4
  2661                           ; switch strategies available:
  2662                           ; Name         Instructions Cycles
  2663                           ; simple_byte           13     7 (average)
  2664                           ;	Chosen strategy is simple_byte
  2665  001132  5013               	movf	?_GETxAPIxVAL,w,c
  2666  001134  0A01               	xorlw	1	; case 1
  2667  001136  B4D8               	btfsc	status,2,c
  2668  001138  D7C4               	goto	l258
  2669  00113A  0A03               	xorlw	3	; case 2
  2670  00113C  B4D8               	btfsc	status,2,c
  2671  00113E  D02D               	goto	l285
  2672  001140  0A01               	xorlw	1	; case 3
  2673  001142  B4D8               	btfsc	status,2,c
  2674  001144  D7E3               	goto	l268
  2675  001146  0A07               	xorlw	7	; case 4
  2676  001148  B4D8               	btfsc	status,2,c
  2677  00114A  D020               	goto	l283
  2678  00114C  D7E1               	goto	l270
  2679  00114E                     
  2680                           ; BSR set to: 0
  2681  00114E  0E08               	movlw	8
  2682  001150  0100               	movlb	0	; () banked
  2683  001152  6F8A               	movwf	_Switch_Init& (0+255),b
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;State_Mchn.c: 329: Red_Led(1);
  2687  001154  0E01               	movlw	1
  2688  001156  ECB1  F01E         	call	_Red_Led
  2689                           
  2690                           ;State_Mchn.c: 331: }
  2691                           
  2692                           ;State_Mchn.c: 330: break;
  2693  00115A  D226               	goto	l304
  2694  00115C  0E00               	movlw	0
  2695  00115E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2696  001160  0E28               	movlw	40
  2697  001162  6E13               	movwf	GETxAPIxVAL@index,c
  2698  001164  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2699                           
  2700                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2701                           ; Switch size 1, requested type "space"
  2702                           ; Number of cases is 1, Range of values is 0 to 0
  2703                           ; switch strategies available:
  2704                           ; Name         Instructions Cycles
  2705                           ; simple_byte            4     3 (average)
  2706                           ;	Chosen strategy is simple_byte
  2707  001168  5014               	movf	?_GETxAPIxVAL+1,w,c
  2708  00116A  0A00               	xorlw	0	; case 0
  2709  00116C  A4D8               	btfss	status,2,c
  2710  00116E  D7EF               	goto	l278
  2711                           
  2712                           ; Switch size 1, requested type "space"
  2713                           ; Number of cases is 4, Range of values is 1 to 4
  2714                           ; switch strategies available:
  2715                           ; Name         Instructions Cycles
  2716                           ; simple_byte           13     7 (average)
  2717                           ;	Chosen strategy is simple_byte
  2718  001170  5013               	movf	?_GETxAPIxVAL,w,c
  2719  001172  0A01               	xorlw	1	; case 1
  2720  001174  B4D8               	btfsc	status,2,c
  2721  001176  D7A7               	goto	l259
  2722  001178  0A03               	xorlw	3	; case 2
  2723  00117A  B4D8               	btfsc	status,2,c
  2724  00117C  D7C7               	goto	l268
  2725  00117E  0A01               	xorlw	1	; case 3
  2726  001180  B4D8               	btfsc	status,2,c
  2727  001182  D00B               	goto	l285
  2728  001184  0A07               	xorlw	7	; case 4
  2729  001186  B4D8               	btfsc	status,2,c
  2730  001188  D003               	goto	l284
  2731  00118A  D7E1               	goto	l278
  2732  00118C                     l283:
  2733                           
  2734                           ; BSR set to: 0
  2735  00118C  0E06               	movlw	6
  2736  00118E  D001               	goto	L19
  2737  001190                     l284:
  2738                           
  2739                           ; BSR set to: 0
  2740  001190  0E03               	movlw	3
  2741  001192                     L19:
  2742  001192  0100               	movlb	0	; () banked
  2743  001194  6F89               	movwf	_Switch_Program& (0+255),b
  2744                           
  2745                           ;State_Mchn.c: 342: Switch_Init = 7;
  2746  001196  0E07               	movlw	7
  2747  001198  D4E6               	goto	L2
  2748  00119A                     l285:
  2749                           
  2750                           ; BSR set to: 0
  2751  00119A  0E00               	movlw	0
  2752  00119C  D4E3               	goto	L1
  2753  00119E                     
  2754                           ; BSR set to: 0
  2755  00119E  0E08               	movlw	8
  2756  0011A0  0100               	movlb	0	; () banked
  2757  0011A2  6F8A               	movwf	_Switch_Init& (0+255),b
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;State_Mchn.c: 347: Red_Led(1);
  2761  0011A4  0E01               	movlw	1
  2762  0011A6  ECB1  F01E         	call	_Red_Led
  2763                           
  2764                           ;State_Mchn.c: 349: }
  2765                           
  2766                           ;State_Mchn.c: 348: break;
  2767  0011AA  D1FE               	goto	l304
  2768  0011AC  0E00               	movlw	0
  2769  0011AE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2770  0011B0  0E28               	movlw	40
  2771  0011B2  6E13               	movwf	GETxAPIxVAL@index,c
  2772  0011B4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2773                           
  2774                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2775                           ; Switch size 1, requested type "space"
  2776                           ; Number of cases is 1, Range of values is 0 to 0
  2777                           ; switch strategies available:
  2778                           ; Name         Instructions Cycles
  2779                           ; simple_byte            4     3 (average)
  2780                           ;	Chosen strategy is simple_byte
  2781  0011B8  5014               	movf	?_GETxAPIxVAL+1,w,c
  2782  0011BA  0A00               	xorlw	0	; case 0
  2783  0011BC  A4D8               	btfss	status,2,c
  2784  0011BE  D7EF               	goto	l286
  2785                           
  2786                           ; Switch size 1, requested type "space"
  2787                           ; Number of cases is 4, Range of values is 1 to 4
  2788                           ; switch strategies available:
  2789                           ; Name         Instructions Cycles
  2790                           ; simple_byte           13     7 (average)
  2791                           ;	Chosen strategy is simple_byte
  2792  0011C0  5013               	movf	?_GETxAPIxVAL,w,c
  2793  0011C2  0A01               	xorlw	1	; case 1
  2794  0011C4  B4D8               	btfsc	status,2,c
  2795  0011C6  D781               	goto	l260
  2796  0011C8  0A03               	xorlw	3	; case 2
  2797  0011CA  B4D8               	btfsc	status,2,c
  2798  0011CC  D7DF               	goto	l283
  2799  0011CE  0A01               	xorlw	1	; case 3
  2800  0011D0  B4D8               	btfsc	status,2,c
  2801  0011D2  D7DE               	goto	l284
  2802  0011D4  0A07               	xorlw	7	; case 4
  2803  0011D6  B4D8               	btfsc	status,2,c
  2804  0011D8  D7E0               	goto	l285
  2805  0011DA  D7E1               	goto	l286
  2806  0011DC  0E08               	movlw	8
  2807  0011DE  0100               	movlb	0	; () banked
  2808  0011E0  6F8A               	movwf	_Switch_Init& (0+255),b
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;State_Mchn.c: 352: Red_Led(1);
  2812  0011E2  0E01               	movlw	1
  2813  0011E4  ECB1  F01E         	call	_Red_Led
  2814                           
  2815                           ;State_Mchn.c: 354: }
  2816                           
  2817                           ;State_Mchn.c: 353: break;
  2818  0011E8  D1DF               	goto	l304
  2819  0011EA                     l253:
  2820  0011EA  0E00               	movlw	0
  2821  0011EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2822  0011EE  0E27               	movlw	39
  2823  0011F0  6E13               	movwf	GETxAPIxVAL@index,c
  2824  0011F2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2825                           
  2826                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2827                           ; Switch size 1, requested type "space"
  2828                           ; Number of cases is 1, Range of values is 0 to 0
  2829                           ; switch strategies available:
  2830                           ; Name         Instructions Cycles
  2831                           ; simple_byte            4     3 (average)
  2832                           ;	Chosen strategy is simple_byte
  2833  0011F6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2834  0011F8  0A00               	xorlw	0	; case 0
  2835  0011FA  A4D8               	btfss	status,2,c
  2836  0011FC  D7EF               	goto	l287
  2837                           
  2838                           ; Switch size 1, requested type "space"
  2839                           ; Number of cases is 4, Range of values is 1 to 4
  2840                           ; switch strategies available:
  2841                           ; Name         Instructions Cycles
  2842                           ; simple_byte           13     7 (average)
  2843                           ;	Chosen strategy is simple_byte
  2844  0011FE  5013               	movf	?_GETxAPIxVAL,w,c
  2845  001200  0A01               	xorlw	1	; case 1
  2846  001202  B4D8               	btfsc	status,2,c
  2847  001204  D76B               	goto	l255
  2848  001206  0A03               	xorlw	3	; case 2
  2849  001208  B4D8               	btfsc	status,2,c
  2850  00120A  D789               	goto	l264
  2851  00120C  0A01               	xorlw	1	; case 3
  2852  00120E  B4D8               	btfsc	status,2,c
  2853  001210  D7A5               	goto	l272
  2854  001212  0A07               	xorlw	7	; case 4
  2855  001214  B4D8               	btfsc	status,2,c
  2856  001216  D7CA               	goto	l280
  2857  001218  D7E1               	goto	l287
  2858  00121A  0E0B               	movlw	11
  2859  00121C  D4A3               	goto	L1
  2860  00121E                     
  2861                           ; BSR set to: 0
  2862                           
  2863                           ; BSR set to: 0
  2864  00121E  0E00               	movlw	0
  2865  001220  6E14               	movwf	GETxAPIxVAL@index+1,c
  2866  001222  0E20               	movlw	32
  2867  001224  6E13               	movwf	GETxAPIxVAL@index,c
  2868  001226  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2869  00122A  5013               	movf	?_GETxAPIxVAL,w,c
  2870  00122C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2871  00122E  A4D8               	btfss	status,2,c
  2872  001230  D00A               	goto	u8770
  2873  001232  0E00               	movlw	0
  2874  001234  6E14               	movwf	GETxAPIxVAL@index+1,c
  2875  001236  0E46               	movlw	70
  2876  001238  6E13               	movwf	GETxAPIxVAL@index,c
  2877  00123A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2878  00123E  5013               	movf	?_GETxAPIxVAL,w,c
  2879  001240  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2880  001242  B4D8               	btfsc	status,2,c
  2881  001244  D007               	goto	l290
  2882  001246                     u8770:
  2883                           
  2884                           ;State_Mchn.c: 362: {
  2885                           ;State_Mchn.c: 363: Switch_Main = 3;
  2886  001246  0E03               	movlw	3
  2887  001248  0100               	movlb	0	; () banked
  2888  00124A  6FE1               	movwf	_Switch_Main& (0+255),b
  2889                           
  2890                           ;State_Mchn.c: 364: Switch_Init = 0;
  2891  00124C  0E00               	movlw	0
  2892  00124E  6F8A               	movwf	_Switch_Init& (0+255),b
  2893                           
  2894                           ;State_Mchn.c: 365: Stop_Program = 0;
  2895  001250  0E00               	movlw	0
  2896  001252  6F85               	movwf	_Stop_Program& (0+255),b
  2897  001254                     l290:
  2898                           
  2899                           ;State_Mchn.c: 366: }
  2900                           ;State_Mchn.c: 367: Green_Led(3);
  2901                           
  2902                           ; BSR set to: 0
  2903  001254  0E03               	movlw	3
  2904  001256  ECF1  F01E         	call	_Green_Led
  2905                           
  2906                           ;State_Mchn.c: 368: Red_Led(0);
  2907  00125A  0E00               	movlw	0
  2908  00125C  ECB1  F01E         	call	_Red_Led
  2909                           
  2910                           ;State_Mchn.c: 369: break;
  2911  001260  D1A3               	goto	l304
  2912  001262  0E00               	movlw	0
  2913  001264  6E14               	movwf	GETxAPIxVAL@index+1,c
  2914  001266  0E27               	movlw	39
  2915  001268  6E13               	movwf	GETxAPIxVAL@index,c
  2916  00126A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2917  00126E  0E05               	movlw	5
  2918  001270  1813               	xorwf	?_GETxAPIxVAL,w,c
  2919  001272  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2920  001274  A4D8               	btfss	status,2,c
  2921  001276  D012               	goto	l296
  2922  001278                     u8780:
  2923                           
  2924                           ;State_Mchn.c: 372: {
  2925                           ;State_Mchn.c: 373: Switch_Program = 0;
  2926  001278  0E00               	movlw	0
  2927  00127A  D005               	goto	L23
  2928  00127C                     
  2929                           ; BSR set to: 0
  2930  00127C  0E01               	movlw	1
  2931  00127E  D003               	goto	L23
  2932  001280                     
  2933                           ; BSR set to: 0
  2934  001280  0E03               	movlw	3
  2935  001282  D001               	goto	L23
  2936  001284                     
  2937                           ; BSR set to: 0
  2938  001284  0E02               	movlw	2
  2939  001286                     L23:
  2940  001286  0100               	movlb	0	; () banked
  2941  001288  6F89               	movwf	_Switch_Program& (0+255),b
  2942  00128A  0E0A               	movlw	10
  2943  00128C  D46C               	goto	L2
  2944  00128E                     
  2945                           ; BSR set to: 0
  2946  00128E  0E0B               	movlw	11
  2947  001290  0100               	movlb	0	; () banked
  2948  001292  6F8A               	movwf	_Switch_Init& (0+255),b
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;State_Mchn.c: 383: Red_Led(1);
  2952  001294  0E01               	movlw	1
  2953  001296  ECB1  F01E         	call	_Red_Led
  2954                           
  2955                           ;State_Mchn.c: 385: }
  2956                           
  2957                           ;State_Mchn.c: 384: break;
  2958  00129A  D186               	goto	l304
  2959  00129C                     l296:
  2960  00129C  0E00               	movlw	0
  2961  00129E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2962  0012A0  0E27               	movlw	39
  2963  0012A2  6E13               	movwf	GETxAPIxVAL@index,c
  2964  0012A4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  2965                           
  2966                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2967                           ; Switch size 1, requested type "space"
  2968                           ; Number of cases is 1, Range of values is 0 to 0
  2969                           ; switch strategies available:
  2970                           ; Name         Instructions Cycles
  2971                           ; simple_byte            4     3 (average)
  2972                           ;	Chosen strategy is simple_byte
  2973  0012A8  5014               	movf	?_GETxAPIxVAL+1,w,c
  2974  0012AA  0A00               	xorlw	0	; case 0
  2975  0012AC  A4D8               	btfss	status,2,c
  2976  0012AE  D7EF               	goto	l302
  2977                           
  2978                           ; Switch size 1, requested type "space"
  2979                           ; Number of cases is 4, Range of values is 1 to 4
  2980                           ; switch strategies available:
  2981                           ; Name         Instructions Cycles
  2982                           ; simple_byte           13     7 (average)
  2983                           ;	Chosen strategy is simple_byte
  2984  0012B0  5013               	movf	?_GETxAPIxVAL,w,c
  2985  0012B2  0A01               	xorlw	1	; case 1
  2986  0012B4  B4D8               	btfsc	status,2,c
  2987  0012B6  D7E2               	goto	l297
  2988  0012B8  0A03               	xorlw	3	; case 2
  2989  0012BA  B4D8               	btfsc	status,2,c
  2990  0012BC  D7E1               	goto	l299
  2991  0012BE  0A01               	xorlw	1	; case 3
  2992  0012C0  B4D8               	btfsc	status,2,c
  2993  0012C2  D7DA               	goto	u8780
  2994  0012C4  0A07               	xorlw	7	; case 4
  2995  0012C6  B4D8               	btfsc	status,2,c
  2996  0012C8  D7DD               	goto	l301
  2997  0012CA  D7E1               	goto	l302
  2998  0012CC  0E00               	movlw	0
  2999  0012CE  0100               	movlb	0	; () banked
  3000  0012D0  6F8A               	movwf	_Switch_Init& (0+255),b
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;State_Mchn.c: 389: Red_Led(1);
  3004  0012D2  0E01               	movlw	1
  3005  0012D4  ECB1  F01E         	call	_Red_Led
  3006                           
  3007                           ;State_Mchn.c: 391: }
  3008                           
  3009                           ;State_Mchn.c: 390: break;
  3010  0012D8  D167               	goto	l304
  3011  0012DA                     l203:
  3012  0012DA  0100               	movlb	0	; () banked
  3013  0012DC  518A               	movf	_Switch_Init& (0+255),w,b
  3014                           
  3015                           ; Switch size 1, requested type "space"
  3016                           ; Number of cases is 12, Range of values is 0 to 11
  3017                           ; switch strategies available:
  3018                           ; Name         Instructions Cycles
  3019                           ; simple_byte           37    19 (average)
  3020                           ;	Chosen strategy is simple_byte
  3021  0012DE  0A00               	xorlw	0	; case 0
  3022  0012E0  B4D8               	btfsc	status,2,c
  3023  0012E2  D423               	goto	l204
  3024  0012E4  0A01               	xorlw	1	; case 1
  3025  0012E6  B4D8               	btfsc	status,2,c
  3026  0012E8  D428               	goto	l206
  3027  0012EA  0A03               	xorlw	3	; case 2
  3028  0012EC  B4D8               	btfsc	status,2,c
  3029  0012EE  D4AF               	goto	l213
  3030  0012F0  0A01               	xorlw	1	; case 3
  3031  0012F2  B4D8               	btfsc	status,2,c
  3032  0012F4  D4F3               	goto	l215
  3033  0012F6  0A07               	xorlw	7	; case 4
  3034  0012F8  B4D8               	btfsc	status,2,c
  3035  0012FA  D589               	goto	l223
  3036  0012FC  0A01               	xorlw	1	; case 5
  3037  0012FE  B4D8               	btfsc	status,2,c
  3038  001300  D612               	goto	l227
  3039  001302  0A03               	xorlw	3	; case 6
  3040  001304  B4D8               	btfsc	status,2,c
  3041  001306  D62A               	goto	l230
  3042  001308  0A01               	xorlw	1	; case 7
  3043  00130A  B4D8               	btfsc	status,2,c
  3044  00130C  D629               	goto	l231
  3045  00130E  0A0F               	xorlw	15	; case 8
  3046  001310  B4D8               	btfsc	status,2,c
  3047  001312  D652               	goto	l235
  3048  001314  0A01               	xorlw	1	; case 9
  3049  001316  B4D8               	btfsc	status,2,c
  3050  001318  D780               	goto	l288
  3051  00131A  0A03               	xorlw	3	; case 10
  3052  00131C  B4D8               	btfsc	status,2,c
  3053  00131E  D77F               	goto	l289
  3054  001320  0A01               	xorlw	1	; case 11
  3055  001322  B4D8               	btfsc	status,2,c
  3056  001324  D79E               	goto	l293
  3057  001326  D7D2               	goto	l303
  3058  001328                     
  3059                           ; BSR set to: 0
  3060                           
  3061                           ; BSR set to: 0
  3062  001328  0E01               	movlw	1
  3063  00132A  6FCD               	movwf	Train_Path@To& (0+255),b
  3064  00132C  0E03               	movlw	3
  3065  00132E  EC20  F011         	call	_Train_Path
  3066  001332  0900               	iorlw	0
  3067  001334  A4D8               	btfss	status,2,c
  3068  001336  D087               	goto	l310
  3069                           
  3070                           ;State_Mchn.c: 398: {
  3071                           ;State_Mchn.c: 399: Switch_Program = 1;
  3072  001338  0E01               	movlw	1
  3073  00133A  0100               	movlb	0	; () banked
  3074  00133C  6F89               	movwf	_Switch_Program& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;State_Mchn.c: 400: EEPROMxSTORE();
  3078  00133E  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3079  001342                     l9140:
  3080                           
  3081                           ;State_Mchn.c: 401: if(Stop_Program == 1)
  3082  001342  0100               	movlb	0	; () banked
  3083  001344  0585               	decf	_Stop_Program& (0+255),w,b
  3084  001346  A4D8               	btfss	status,2,c
  3085  001348  D07E               	goto	l310
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;State_Mchn.c: 402: {
  3089                           ;State_Mchn.c: 403: Switch_Main = 1;
  3090  00134A  0E01               	movlw	1
  3091  00134C  6FE1               	movwf	_Switch_Main& (0+255),b
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;State_Mchn.c: 405: }
  3095                           ;State_Mchn.c: 406: }
  3096                           ;State_Mchn.c: 407: break;
  3097                           
  3098                           ; BSR set to: 0
  3099  00134E  D07B               	goto	l310
  3100  001350                     
  3101                           ; BSR set to: 0
  3102                           
  3103                           ; BSR set to: 0
  3104  001350  0E03               	movlw	3
  3105  001352  6FCD               	movwf	Train_Path@To& (0+255),b
  3106  001354  0E02               	movlw	2
  3107  001356  EC20  F011         	call	_Train_Path
  3108  00135A  0900               	iorlw	0
  3109  00135C  A4D8               	btfss	status,2,c
  3110  00135E  D073               	goto	l310
  3111                           
  3112                           ;State_Mchn.c: 410: {
  3113                           ;State_Mchn.c: 411: Switch_Program = 2;
  3114  001360  0E02               	movlw	2
  3115  001362  0100               	movlb	0	; () banked
  3116  001364  6F89               	movwf	_Switch_Program& (0+255),b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;State_Mchn.c: 412: EEPROMxSTORE();
  3120  001366  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3121  00136A  D7EB               	goto	l9140
  3122  00136C                     
  3123                           ; BSR set to: 0
  3124                           
  3125                           ; BSR set to: 0
  3126  00136C  0E04               	movlw	4
  3127  00136E  6FCD               	movwf	Train_Path@To& (0+255),b
  3128  001370  0E01               	movlw	1
  3129  001372  EC20  F011         	call	_Train_Path
  3130  001376  0900               	iorlw	0
  3131  001378  A4D8               	btfss	status,2,c
  3132  00137A  D065               	goto	l310
  3133                           
  3134                           ;State_Mchn.c: 422: {
  3135                           ;State_Mchn.c: 423: Switch_Program = 3;
  3136  00137C  0E03               	movlw	3
  3137  00137E  0100               	movlb	0	; () banked
  3138  001380  6F89               	movwf	_Switch_Program& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;State_Mchn.c: 424: EEPROMxSTORE();
  3142  001382  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3143  001386  D7DD               	goto	l9140
  3144  001388                     
  3145                           ; BSR set to: 0
  3146                           
  3147                           ; BSR set to: 0
  3148  001388  0E01               	movlw	1
  3149  00138A  6FCD               	movwf	Train_Path@To& (0+255),b
  3150  00138C  0E03               	movlw	3
  3151  00138E  EC20  F011         	call	_Train_Path
  3152  001392  0900               	iorlw	0
  3153  001394  A4D8               	btfss	status,2,c
  3154  001396  D057               	goto	l310
  3155                           
  3156                           ;State_Mchn.c: 434: {
  3157                           ;State_Mchn.c: 435: Switch_Program = 4;
  3158  001398  0E04               	movlw	4
  3159  00139A  0100               	movlb	0	; () banked
  3160  00139C  6F89               	movwf	_Switch_Program& (0+255),b
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;State_Mchn.c: 436: EEPROMxSTORE();
  3164  00139E  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3165  0013A2  D7CF               	goto	l9140
  3166  0013A4                     
  3167                           ; BSR set to: 0
  3168                           
  3169                           ; BSR set to: 0
  3170  0013A4  0E02               	movlw	2
  3171  0013A6  6FCD               	movwf	Train_Path@To& (0+255),b
  3172  0013A8  0E04               	movlw	4
  3173  0013AA  EC20  F011         	call	_Train_Path
  3174  0013AE  0900               	iorlw	0
  3175  0013B0  A4D8               	btfss	status,2,c
  3176  0013B2  D049               	goto	l310
  3177                           
  3178                           ;State_Mchn.c: 446: {
  3179                           ;State_Mchn.c: 447: Switch_Program = 5;
  3180  0013B4  0E05               	movlw	5
  3181  0013B6  0100               	movlb	0	; () banked
  3182  0013B8  6F89               	movwf	_Switch_Program& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;State_Mchn.c: 448: EEPROMxSTORE();
  3186  0013BA  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3187  0013BE  D7C1               	goto	l9140
  3188  0013C0                     
  3189                           ; BSR set to: 0
  3190                           
  3191                           ; BSR set to: 0
  3192  0013C0  0E04               	movlw	4
  3193  0013C2  6FCD               	movwf	Train_Path@To& (0+255),b
  3194  0013C4  0E01               	movlw	1
  3195  0013C6  EC20  F011         	call	_Train_Path
  3196  0013CA  0900               	iorlw	0
  3197  0013CC  A4D8               	btfss	status,2,c
  3198  0013CE  D03B               	goto	l310
  3199                           
  3200                           ;State_Mchn.c: 458: {
  3201                           ;State_Mchn.c: 459: Switch_Program = 6;
  3202  0013D0  0E06               	movlw	6
  3203  0013D2  0100               	movlb	0	; () banked
  3204  0013D4  6F89               	movwf	_Switch_Program& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;State_Mchn.c: 460: EEPROMxSTORE();
  3208  0013D6  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3209  0013DA  D7B3               	goto	l9140
  3210  0013DC                     
  3211                           ; BSR set to: 0
  3212                           
  3213                           ; BSR set to: 0
  3214  0013DC  0E03               	movlw	3
  3215  0013DE  6FCD               	movwf	Train_Path@To& (0+255),b
  3216  0013E0  0E02               	movlw	2
  3217  0013E2  EC20  F011         	call	_Train_Path
  3218  0013E6  0900               	iorlw	0
  3219  0013E8  A4D8               	btfss	status,2,c
  3220  0013EA  D02D               	goto	l310
  3221                           
  3222                           ;State_Mchn.c: 470: {
  3223                           ;State_Mchn.c: 471: Switch_Program = 7;
  3224  0013EC  0E07               	movlw	7
  3225  0013EE  0100               	movlb	0	; () banked
  3226  0013F0  6F89               	movwf	_Switch_Program& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;State_Mchn.c: 472: EEPROMxSTORE();
  3230  0013F2  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3231  0013F6  D7A5               	goto	l9140
  3232  0013F8                     
  3233                           ; BSR set to: 0
  3234                           
  3235                           ; BSR set to: 0
  3236  0013F8  0E02               	movlw	2
  3237  0013FA  6FCD               	movwf	Train_Path@To& (0+255),b
  3238  0013FC  0E04               	movlw	4
  3239  0013FE  EC20  F011         	call	_Train_Path
  3240  001402  0900               	iorlw	0
  3241  001404  A4D8               	btfss	status,2,c
  3242  001406  D01F               	goto	l310
  3243                           
  3244                           ;State_Mchn.c: 482: {
  3245                           ;State_Mchn.c: 483: Switch_Program = 0;
  3246  001408  0E00               	movlw	0
  3247  00140A  0100               	movlb	0	; () banked
  3248  00140C  6F89               	movwf	_Switch_Program& (0+255),b
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;State_Mchn.c: 484: EEPROMxSTORE();
  3252  00140E  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3253  001412  D797               	goto	l9140
  3254  001414                     
  3255                           ; BSR set to: 0
  3256                           
  3257                           ; BSR set to: 0
  3258  001414  5189               	movf	_Switch_Program& (0+255),w,b
  3259                           
  3260                           ; Switch size 1, requested type "space"
  3261                           ; Number of cases is 8, Range of values is 0 to 7
  3262                           ; switch strategies available:
  3263                           ; Name         Instructions Cycles
  3264                           ; simple_byte           25    13 (average)
  3265                           ;	Chosen strategy is simple_byte
  3266  001416  0A00               	xorlw	0	; case 0
  3267  001418  B4D8               	btfsc	status,2,c
  3268  00141A  D786               	goto	l307
  3269  00141C  0A01               	xorlw	1	; case 1
  3270  00141E  B4D8               	btfsc	status,2,c
  3271  001420  D797               	goto	l311
  3272  001422  0A03               	xorlw	3	; case 2
  3273  001424  B4D8               	btfsc	status,2,c
  3274  001426  D7A2               	goto	l314
  3275  001428  0A01               	xorlw	1	; case 3
  3276  00142A  B4D8               	btfsc	status,2,c
  3277  00142C  D7AD               	goto	l317
  3278  00142E  0A07               	xorlw	7	; case 4
  3279  001430  B4D8               	btfsc	status,2,c
  3280  001432  D7B8               	goto	l320
  3281  001434  0A01               	xorlw	1	; case 5
  3282  001436  B4D8               	btfsc	status,2,c
  3283  001438  D7C3               	goto	l323
  3284  00143A  0A03               	xorlw	3	; case 6
  3285  00143C  B4D8               	btfsc	status,2,c
  3286  00143E  D7CE               	goto	l326
  3287  001440  0A01               	xorlw	1	; case 7
  3288  001442  B4D8               	btfsc	status,2,c
  3289  001444  D7D9               	goto	l329
  3290  001446                     l310:
  3291                           
  3292                           ;State_Mchn.c: 680: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3293                           
  3294                           ; BSR set to: 0
  3295  001446  0E00               	movlw	0
  3296  001448  6E14               	movwf	GETxAPIxVAL@index+1,c
  3297  00144A  0E21               	movlw	33
  3298  00144C  6E13               	movwf	GETxAPIxVAL@index,c
  3299  00144E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3300  001452  5013               	movf	?_GETxAPIxVAL,w,c
  3301  001454  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3302  001456  A4D8               	btfss	status,2,c
  3303  001458  D00A               	goto	u8960
  3304  00145A  0E00               	movlw	0
  3305  00145C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3306  00145E  0E47               	movlw	71
  3307  001460  6E13               	movwf	GETxAPIxVAL@index,c
  3308  001462  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3309  001466  5013               	movf	?_GETxAPIxVAL,w,c
  3310  001468  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3311  00146A  B4D8               	btfsc	status,2,c
  3312  00146C  D00D               	goto	l333
  3313  00146E                     u8960:
  3314                           
  3315                           ;State_Mchn.c: 681: {
  3316                           ;State_Mchn.c: 682: Stop_Program = 1;
  3317  00146E  0E01               	movlw	1
  3318  001470  0100               	movlb	0	; () banked
  3319  001472  6F85               	movwf	_Stop_Program& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;State_Mchn.c: 683: SETxAPIxVAL(71, 0);
  3323  001474  0E00               	movlw	0
  3324  001476  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3325  001478  0E47               	movlw	71
  3326  00147A  6E19               	movwf	SETxAPIxVAL@index,c
  3327  00147C  0E00               	movlw	0
  3328  00147E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3329  001480  0E00               	movlw	0
  3330  001482  6E1B               	movwf	SETxAPIxVAL@value,c
  3331  001484  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  3332  001488                     l333:
  3333                           
  3334                           ;State_Mchn.c: 684: }
  3335                           ;State_Mchn.c: 686: if(Stop_Program == 1)
  3336  001488  0100               	movlb	0	; () banked
  3337  00148A  0585               	decf	_Stop_Program& (0+255),w,b
  3338  00148C  A4D8               	btfss	status,2,c
  3339  00148E  D003               	goto	l336
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;State_Mchn.c: 687: {
  3343                           ;State_Mchn.c: 688: Red_Led(2);
  3344  001490  0E02               	movlw	2
  3345  001492  ECB1  F01E         	call	_Red_Led
  3346  001496                     l336:
  3347                           
  3348                           ;State_Mchn.c: 689: }
  3349                           ;State_Mchn.c: 691: Green_Led(1);
  3350  001496  0E01               	movlw	1
  3351  001498  ECF1  F01E         	call	_Green_Led
  3352                           
  3353                           ;State_Mchn.c: 693: break;
  3354  00149C  D085               	goto	l304
  3355  00149E  0E01               	movlw	1
  3356  0014A0  0100               	movlb	0	; () banked
  3357  0014A2  6FCD               	movwf	Train_Path@To& (0+255),b
  3358  0014A4  0E03               	movlw	3
  3359  0014A6  EC20  F011         	call	_Train_Path
  3360  0014AA  0900               	iorlw	0
  3361  0014AC  A4D8               	btfss	status,2,c
  3362  0014AE  D044               	goto	l342
  3363                           
  3364                           ;State_Mchn.c: 699: {
  3365                           ;State_Mchn.c: 700: Switch_Program = 1;
  3366  0014B0  0E01               	movlw	1
  3367  0014B2  0100               	movlb	0	; () banked
  3368  0014B4  6F89               	movwf	_Switch_Program& (0+255),b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;State_Mchn.c: 701: EEPROMxSTORE();
  3372  0014B6  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3373  0014BA                     l9236:
  3374                           
  3375                           ;State_Mchn.c: 702: if(Stop_Program == 1)
  3376  0014BA  0100               	movlb	0	; () banked
  3377  0014BC  0585               	decf	_Stop_Program& (0+255),w,b
  3378  0014BE  A4D8               	btfss	status,2,c
  3379  0014C0  D03B               	goto	l342
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;State_Mchn.c: 703: {
  3383                           ;State_Mchn.c: 704: Switch_Main = 1;
  3384  0014C2  0E01               	movlw	1
  3385  0014C4  6FE1               	movwf	_Switch_Main& (0+255),b
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;State_Mchn.c: 706: }
  3389                           ;State_Mchn.c: 707: }
  3390                           ;State_Mchn.c: 708: break;
  3391                           
  3392                           ; BSR set to: 0
  3393  0014C6  D038               	goto	l342
  3394  0014C8                     
  3395                           ; BSR set to: 0
  3396                           
  3397                           ; BSR set to: 0
  3398  0014C8  0E04               	movlw	4
  3399  0014CA  6FCD               	movwf	Train_Path@To& (0+255),b
  3400  0014CC  0E01               	movlw	1
  3401  0014CE  EC20  F011         	call	_Train_Path
  3402  0014D2  0900               	iorlw	0
  3403  0014D4  A4D8               	btfss	status,2,c
  3404  0014D6  D030               	goto	l342
  3405                           
  3406                           ;State_Mchn.c: 711: {
  3407                           ;State_Mchn.c: 712: Switch_Program = 2;
  3408  0014D8  0E02               	movlw	2
  3409  0014DA  0100               	movlb	0	; () banked
  3410  0014DC  6F89               	movwf	_Switch_Program& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;State_Mchn.c: 713: EEPROMxSTORE();
  3414  0014DE  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3415  0014E2  D7EB               	goto	l9236
  3416  0014E4                     
  3417                           ; BSR set to: 0
  3418                           
  3419                           ; BSR set to: 0
  3420  0014E4  0E02               	movlw	2
  3421  0014E6  6FCD               	movwf	Train_Path@To& (0+255),b
  3422  0014E8  0E04               	movlw	4
  3423  0014EA  EC20  F011         	call	_Train_Path
  3424  0014EE  0900               	iorlw	0
  3425  0014F0  A4D8               	btfss	status,2,c
  3426  0014F2  D022               	goto	l342
  3427                           
  3428                           ;State_Mchn.c: 723: {
  3429                           ;State_Mchn.c: 724: Switch_Program = 3;
  3430  0014F4  0E03               	movlw	3
  3431  0014F6  0100               	movlb	0	; () banked
  3432  0014F8  6F89               	movwf	_Switch_Program& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;State_Mchn.c: 725: EEPROMxSTORE();
  3436  0014FA  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3437  0014FE  D7DD               	goto	l9236
  3438  001500                     
  3439                           ; BSR set to: 0
  3440                           
  3441                           ; BSR set to: 0
  3442  001500  0E03               	movlw	3
  3443  001502  6FCD               	movwf	Train_Path@To& (0+255),b
  3444  001504  0E02               	movlw	2
  3445  001506  EC20  F011         	call	_Train_Path
  3446  00150A  0900               	iorlw	0
  3447  00150C  A4D8               	btfss	status,2,c
  3448  00150E  D014               	goto	l342
  3449                           
  3450                           ;State_Mchn.c: 735: {
  3451                           ;State_Mchn.c: 736: Switch_Program = 0;
  3452  001510  0E00               	movlw	0
  3453  001512  0100               	movlb	0	; () banked
  3454  001514  6F89               	movwf	_Switch_Program& (0+255),b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;State_Mchn.c: 737: EEPROMxSTORE();
  3458  001516  EC5B  F019         	call	_EEPROMxSTORE	;wreg free
  3459  00151A  D7CF               	goto	l9236
  3460  00151C                     
  3461                           ; BSR set to: 0
  3462  00151C  0100               	movlb	0	; () banked
  3463  00151E  5189               	movf	_Switch_Program& (0+255),w,b
  3464                           
  3465                           ; Switch size 1, requested type "space"
  3466                           ; Number of cases is 4, Range of values is 0 to 3
  3467                           ; switch strategies available:
  3468                           ; Name         Instructions Cycles
  3469                           ; simple_byte           13     7 (average)
  3470                           ;	Chosen strategy is simple_byte
  3471  001520  0A00               	xorlw	0	; case 0
  3472  001522  B4D8               	btfsc	status,2,c
  3473  001524  D7BC               	goto	l339
  3474  001526  0A01               	xorlw	1	; case 1
  3475  001528  B4D8               	btfsc	status,2,c
  3476  00152A  D7CE               	goto	l343
  3477  00152C  0A03               	xorlw	3	; case 2
  3478  00152E  B4D8               	btfsc	status,2,c
  3479  001530  D7D9               	goto	l346
  3480  001532  0A01               	xorlw	1	; case 3
  3481  001534  B4D8               	btfsc	status,2,c
  3482  001536  D7E4               	goto	l349
  3483  001538                     l342:
  3484                           
  3485                           ;State_Mchn.c: 931: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3486                           
  3487                           ; BSR set to: 0
  3488  001538  0E00               	movlw	0
  3489  00153A  6E14               	movwf	GETxAPIxVAL@index+1,c
  3490  00153C  0E21               	movlw	33
  3491  00153E  6E13               	movwf	GETxAPIxVAL@index,c
  3492  001540  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3493  001544  5013               	movf	?_GETxAPIxVAL,w,c
  3494  001546  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3495  001548  A4D8               	btfss	status,2,c
  3496  00154A  D00A               	goto	u9070
  3497  00154C  0E00               	movlw	0
  3498  00154E  6E14               	movwf	GETxAPIxVAL@index+1,c
  3499  001550  0E47               	movlw	71
  3500  001552  6E13               	movwf	GETxAPIxVAL@index,c
  3501  001554  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3502  001558  5013               	movf	?_GETxAPIxVAL,w,c
  3503  00155A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3504  00155C  B4D8               	btfsc	status,2,c
  3505  00155E  D00D               	goto	l353
  3506  001560                     u9070:
  3507                           
  3508                           ;State_Mchn.c: 932: {
  3509                           ;State_Mchn.c: 933: Stop_Program = 1;
  3510  001560  0E01               	movlw	1
  3511  001562  0100               	movlb	0	; () banked
  3512  001564  6F85               	movwf	_Stop_Program& (0+255),b
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;State_Mchn.c: 934: SETxAPIxVAL(71, 0);
  3516  001566  0E00               	movlw	0
  3517  001568  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3518  00156A  0E47               	movlw	71
  3519  00156C  6E19               	movwf	SETxAPIxVAL@index,c
  3520  00156E  0E00               	movlw	0
  3521  001570  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3522  001572  0E00               	movlw	0
  3523  001574  6E1B               	movwf	SETxAPIxVAL@value,c
  3524  001576  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  3525  00157A                     l353:
  3526                           
  3527                           ;State_Mchn.c: 935: }
  3528                           ;State_Mchn.c: 937: if(Stop_Program == 1)
  3529  00157A  0100               	movlb	0	; () banked
  3530  00157C  0585               	decf	_Stop_Program& (0+255),w,b
  3531  00157E  A4D8               	btfss	status,2,c
  3532  001580  D003               	goto	l356
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;State_Mchn.c: 938: {
  3536                           ;State_Mchn.c: 939: Red_Led(2);
  3537  001582  0E02               	movlw	2
  3538  001584  ECB1  F01E         	call	_Red_Led
  3539  001588                     l356:
  3540                           
  3541                           ;State_Mchn.c: 940: }
  3542                           ;State_Mchn.c: 942: Green_Led(1);
  3543  001588  0E01               	movlw	1
  3544  00158A  ECF1  F01E         	call	_Green_Led
  3545                           
  3546                           ;State_Mchn.c: 947: }
  3547                           
  3548                           ;State_Mchn.c: 946: default : break;
  3549                           
  3550                           ;State_Mchn.c: 944: break;
  3551  00158E  D00C               	goto	l304
  3552  001590                     l179:
  3553  001590  0100               	movlb	0	; () banked
  3554  001592  51E1               	movf	_Switch_Main& (0+255),w,b
  3555                           
  3556                           ; Switch size 1, requested type "space"
  3557                           ; Number of cases is 3, Range of values is 1 to 3
  3558                           ; switch strategies available:
  3559                           ; Name         Instructions Cycles
  3560                           ; simple_byte           10     6 (average)
  3561                           ;	Chosen strategy is simple_byte
  3562  001594  0A01               	xorlw	1	; case 1
  3563  001596  B4D8               	btfsc	status,2,c
  3564  001598  EF52  F004         	goto	l180
  3565  00159C  0A03               	xorlw	3	; case 2
  3566  00159E  B4D8               	btfsc	status,2,c
  3567  0015A0  D739               	goto	l306
  3568  0015A2  0A01               	xorlw	1	; case 3
  3569  0015A4  B4D8               	btfsc	status,2,c
  3570  0015A6  D7BA               	goto	l338
  3571  0015A8                     l304:
  3572                           
  3573                           ;State_Mchn.c: 948: SETxAPIxVAL(63, Switch_Main);
  3574                           
  3575                           ; BSR set to: 0
  3576  0015A8  0E00               	movlw	0
  3577  0015AA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3578  0015AC  0E3F               	movlw	63
  3579  0015AE  6E19               	movwf	SETxAPIxVAL@index,c
  3580  0015B0  C0E1  F01B         	movff	_Switch_Main,SETxAPIxVAL@value
  3581  0015B4  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3582  0015B6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  3583                           
  3584                           ;State_Mchn.c: 949: SETxAPIxVAL(80, Switch_Program);
  3585  0015BA  0E00               	movlw	0
  3586  0015BC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3587  0015BE  0E50               	movlw	80
  3588  0015C0  6E19               	movwf	SETxAPIxVAL@index,c
  3589  0015C2  C089  F01B         	movff	_Switch_Program,SETxAPIxVAL@value
  3590  0015C6  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3591  0015C8  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  3592  0015CC  0012               	return		;funcret
  3593  0015CE                     __end_of_Update_StateMchn:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           postinc0	equ	0xFEE
  3600                           wreg	equ	0xFE8
  3601                           postdec1	equ	0xFE5
  3602                           fsr1l	equ	0xFE1
  3603                           status	equ	0xFD8
  3604                           
  3605 ;; *************** function _Train_Path *****************
  3606 ;; Defined at:
  3607 ;;		line 967 in file "../State_Mchn.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  From            1    wreg     unsigned char 
  3610 ;;  To              1   23[BANK0 ] unsigned char 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  From            1   24[BANK0 ] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      unsigned char 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3622 ;;      Params:         0       1       0       0       0       0       0       0       0
  3623 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3625 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3626 ;;Total ram usage:        2 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    7
  3629 ;; This function calls:
  3630 ;;		_GETxAPIxVAL
  3631 ;;		_Junction
  3632 ;;		_Left_Mountain_From_The_Left
  3633 ;;		_Left_Mountain_From_The_Right
  3634 ;;		_Right_Mountain_From_The_Left
  3635 ;;		_Right_Mountain_From_The_Right
  3636 ;;		_SETxAPIxVAL
  3637 ;;		_Train_Move_Left_Brake
  3638 ;;		_Train_Move_Left_Start
  3639 ;;		_Train_Move_Right_Brake
  3640 ;;		_Train_Move_Right_Start
  3641 ;; This function is called by:
  3642 ;;		_Update_StateMchn
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           	psect	text2
  3647  002240                     __ptext2:
  3648                           	opt stack 0
  3649  002240                     _Train_Path:
  3650                           	opt stack 22
  3651                           
  3652                           ;incstack = 0
  3653                           ;Train_Path@From stored from wreg
  3654  002240  0100               	movlb	0	; () banked
  3655  002242  6FCE               	movwf	Train_Path@From& (0+255),b
  3656                           
  3657                           ;State_Mchn.c: 969: static char Return_Val = 1;
  3658                           ;State_Mchn.c: 971: SETxAPIxVAL(61, From);
  3659  002244  0E00               	movlw	0
  3660  002246  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3661  002248  0E3D               	movlw	61
  3662  00224A  6E19               	movwf	SETxAPIxVAL@index,c
  3663  00224C  C0CE  F01B         	movff	Train_Path@From,SETxAPIxVAL@value
  3664  002250  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3665  002252  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  3666                           
  3667                           ;State_Mchn.c: 972: SETxAPIxVAL(62, To);
  3668  002256  0E00               	movlw	0
  3669  002258  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3670  00225A  0E3E               	movlw	62
  3671  00225C  6E19               	movwf	SETxAPIxVAL@index,c
  3672  00225E  C0CD  F01B         	movff	Train_Path@To,SETxAPIxVAL@value
  3673  002262  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3674  002264  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  3675                           
  3676                           ;State_Mchn.c: 974: switch(Switch_Train_Path)
  3677  002268  D1AC               	goto	l363
  3678  00226A  0E00               	movlw	0
  3679  00226C  6E1F               	movwf	Junction@Straight_Bend,c
  3680  00226E  0E01               	movlw	1
  3681  002270  EC45  F015         	call	_Junction
  3682  002274  0900               	iorlw	0
  3683  002276  B4D8               	btfsc	status,2,c
  3684  002278  D018               	goto	u7760
  3685  00227A                     l367:
  3686                           
  3687                           ;State_Mchn.c: 982: }
  3688                           ;State_Mchn.c: 983: Return_Val = 1;
  3689  00227A  0E01               	movlw	1
  3690  00227C  0100               	movlb	0	; () banked
  3691  00227E                     L40:
  3692  00227E  6FE0               	movwf	Train_Path@Return_Val& (0+255),b
  3693                           
  3694                           ;State_Mchn.c: 984: break;
  3695  002280  D1CA               	goto	l376
  3696  002282                     
  3697                           ; BSR set to: 0
  3698                           
  3699                           ; BSR set to: 0
  3700  002282  0E01               	movlw	1
  3701  002284  6E1F               	movwf	Junction@Straight_Bend,c
  3702  002286  0E01               	movlw	1
  3703  002288  EC45  F015         	call	_Junction
  3704  00228C  D7F3               	goto	L57
  3705  00228E                     
  3706                           ; BSR set to: 0
  3707                           
  3708                           ; BSR set to: 0
  3709  00228E  0E01               	movlw	1
  3710  002290  6E1F               	movwf	Junction@Straight_Bend,c
  3711  002292  0E00               	movlw	0
  3712  002294  EC45  F015         	call	_Junction
  3713  002298  D7ED               	goto	L57
  3714  00229A                     
  3715                           ; BSR set to: 0
  3716                           
  3717                           ; BSR set to: 0
  3718  00229A  0E00               	movlw	0
  3719  00229C  6E1F               	movwf	Junction@Straight_Bend,c
  3720  00229E  0E00               	movlw	0
  3721  0022A0  EC45  F015         	call	_Junction
  3722  0022A4  0900               	iorlw	0
  3723  0022A6  A4D8               	btfss	status,2,c
  3724  0022A8  D7E8               	goto	l367
  3725  0022AA                     u7760:
  3726                           
  3727                           ;State_Mchn.c: 1000: {
  3728                           ;State_Mchn.c: 1001: Switch_Train_Path = 1;
  3729  0022AA  0E01               	movlw	1
  3730  0022AC  D015               	goto	L41
  3731  0022AE                     
  3732                           ; BSR set to: 0
  3733  0022AE  0100               	movlb	0	; () banked
  3734  0022B0  51CE               	movf	Train_Path@From& (0+255),w,b
  3735                           
  3736                           ; Switch size 1, requested type "space"
  3737                           ; Number of cases is 4, Range of values is 1 to 4
  3738                           ; switch strategies available:
  3739                           ; Name         Instructions Cycles
  3740                           ; simple_byte           13     7 (average)
  3741                           ;	Chosen strategy is simple_byte
  3742  0022B2  0A01               	xorlw	1	; case 1
  3743  0022B4  B4D8               	btfsc	status,2,c
  3744  0022B6  D7EB               	goto	l371
  3745  0022B8  0A03               	xorlw	3	; case 2
  3746  0022BA  B4D8               	btfsc	status,2,c
  3747  0022BC  D7EE               	goto	l373
  3748  0022BE  0A01               	xorlw	1	; case 3
  3749  0022C0  B4D8               	btfsc	status,2,c
  3750  0022C2  D7D3               	goto	l366
  3751  0022C4  0A07               	xorlw	7	; case 4
  3752  0022C6  B4D8               	btfsc	status,2,c
  3753  0022C8  D7DC               	goto	l369
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;State_Mchn.c: 1008: break;
  3757  0022CA  D1A5               	goto	l376
  3758  0022CC                     
  3759                           ; BSR set to: 0
  3760                           
  3761                           ; BSR set to: 0
  3762  0022CC  0E00               	movlw	0
  3763  0022CE  6E1F               	movwf	Junction@Straight_Bend,c
  3764  0022D0  0E01               	movlw	1
  3765  0022D2  EC45  F015         	call	_Junction
  3766  0022D6  D016               	goto	L43
  3767  0022D8                     L41:
  3768  0022D8  0100               	movlb	0	; () banked
  3769  0022DA  6F86               	movwf	_Switch_Train_Path& (0+255),b
  3770                           
  3771                           ;State_Mchn.c: 1015: Return_Val = 1;
  3772  0022DC  0E01               	movlw	1
  3773  0022DE  6FE0               	movwf	Train_Path@Return_Val& (0+255),b
  3774  0022E0  D7CC               	goto	l367
  3775  0022E2                     
  3776                           ; BSR set to: 0
  3777                           
  3778                           ; BSR set to: 0
  3779  0022E2  0E01               	movlw	1
  3780  0022E4  6E1F               	movwf	Junction@Straight_Bend,c
  3781  0022E6  0E01               	movlw	1
  3782  0022E8  EC45  F015         	call	_Junction
  3783  0022EC  D00B               	goto	L43
  3784  0022EE                     
  3785                           ; BSR set to: 0
  3786                           
  3787                           ; BSR set to: 0
  3788  0022EE  0E01               	movlw	1
  3789  0022F0  6E1F               	movwf	Junction@Straight_Bend,c
  3790  0022F2  0E00               	movlw	0
  3791  0022F4  EC45  F015         	call	_Junction
  3792  0022F8  D005               	goto	L43
  3793  0022FA                     
  3794                           ; BSR set to: 0
  3795                           
  3796                           ; BSR set to: 0
  3797  0022FA  0E00               	movlw	0
  3798  0022FC  6E1F               	movwf	Junction@Straight_Bend,c
  3799  0022FE  0E00               	movlw	0
  3800  002300  EC45  F015         	call	_Junction
  3801  002304                     L43:
  3802  002304  0900               	iorlw	0
  3803  002306  A4D8               	btfss	status,2,c
  3804  002308  D7B8               	goto	l367
  3805                           
  3806                           ;State_Mchn.c: 1034: {
  3807                           ;State_Mchn.c: 1035: Switch_Train_Path = 2;
  3808  00230A  0E02               	movlw	2
  3809  00230C  D7E5               	goto	L41
  3810  00230E                     
  3811                           ; BSR set to: 0
  3812                           
  3813                           ; BSR set to: 0
  3814  00230E  51CD               	movf	Train_Path@To& (0+255),w,b
  3815                           
  3816                           ; Switch size 1, requested type "space"
  3817                           ; Number of cases is 4, Range of values is 1 to 4
  3818                           ; switch strategies available:
  3819                           ; Name         Instructions Cycles
  3820                           ; simple_byte           13     7 (average)
  3821                           ;	Chosen strategy is simple_byte
  3822  002310  0A01               	xorlw	1	; case 1
  3823  002312  B4D8               	btfsc	status,2,c
  3824  002314  D7EC               	goto	l384
  3825  002316  0A03               	xorlw	3	; case 2
  3826  002318  B4D8               	btfsc	status,2,c
  3827  00231A  D7EF               	goto	l386
  3828  00231C  0A01               	xorlw	1	; case 3
  3829  00231E  B4D8               	btfsc	status,2,c
  3830  002320  D7D5               	goto	l379
  3831  002322  0A07               	xorlw	7	; case 4
  3832  002324  B4D8               	btfsc	status,2,c
  3833  002326  D7DD               	goto	l382
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;State_Mchn.c: 1042: break;
  3837  002328  D176               	goto	l376
  3838  00232A                     
  3839                           ; BSR set to: 0
  3840                           
  3841                           ; BSR set to: 0
  3842  00232A  ECC0  F018         	call	_Train_Move_Right_Start	;wreg free
  3843  00232E  D008               	goto	L46
  3844  002330                     
  3845                           ; BSR set to: 0
  3846                           
  3847                           ; BSR set to: 0
  3848  002330  ECC0  F018         	call	_Train_Move_Right_Start	;wreg free
  3849  002334  D005               	goto	L46
  3850  002336                     
  3851                           ; BSR set to: 0
  3852                           
  3853                           ; BSR set to: 0
  3854  002336  EC24  F018         	call	_Train_Move_Left_Start	;wreg free
  3855  00233A  D002               	goto	L46
  3856  00233C                     
  3857                           ; BSR set to: 0
  3858                           
  3859                           ; BSR set to: 0
  3860  00233C  EC24  F018         	call	_Train_Move_Left_Start	;wreg free
  3861  002340                     L46:
  3862  002340  0900               	iorlw	0
  3863  002342  A4D8               	btfss	status,2,c
  3864  002344  D79A               	goto	l367
  3865                           
  3866                           ;State_Mchn.c: 1068: {
  3867                           ;State_Mchn.c: 1069: Switch_Train_Path = 3;
  3868  002346  0E03               	movlw	3
  3869  002348  D7C7               	goto	L41
  3870  00234A                     
  3871                           ; BSR set to: 0
  3872                           
  3873                           ; BSR set to: 0
  3874  00234A  51CD               	movf	Train_Path@To& (0+255),w,b
  3875                           
  3876                           ; Switch size 1, requested type "space"
  3877                           ; Number of cases is 4, Range of values is 1 to 4
  3878                           ; switch strategies available:
  3879                           ; Name         Instructions Cycles
  3880                           ; simple_byte           13     7 (average)
  3881                           ;	Chosen strategy is simple_byte
  3882  00234C  0A01               	xorlw	1	; case 1
  3883  00234E  B4D8               	btfsc	status,2,c
  3884  002350  D7F2               	goto	l396
  3885  002352  0A03               	xorlw	3	; case 2
  3886  002354  B4D8               	btfsc	status,2,c
  3887  002356  D7F2               	goto	l398
  3888  002358  0A01               	xorlw	1	; case 3
  3889  00235A  B4D8               	btfsc	status,2,c
  3890  00235C  D7E6               	goto	l391
  3891  00235E  0A07               	xorlw	7	; case 4
  3892  002360  B4D8               	btfsc	status,2,c
  3893  002362  D7E6               	goto	l394
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;State_Mchn.c: 1076: break;
  3897  002364  D158               	goto	l376
  3898  002366                     
  3899                           ; BSR set to: 0
  3900                           
  3901                           ; BSR set to: 0
  3902  002366  0E00               	movlw	0
  3903  002368  6E14               	movwf	GETxAPIxVAL@index+1,c
  3904  00236A  0E1C               	movlw	28
  3905  00236C  6E13               	movwf	GETxAPIxVAL@index,c
  3906  00236E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3907  002372  0413               	decf	?_GETxAPIxVAL,w,c
  3908  002374  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3909  002376  B4D8               	btfsc	status,2,c
  3910  002378  D09B               	goto	u8000
  3911                           
  3912                           ;State_Mchn.c: 1083: else if(GETxAPIxVAL(41) == 1){
  3913                           
  3914                           ; BSR set to: 0
  3915                           
  3916                           ;State_Mchn.c: 1082: }
  3917                           
  3918                           ;State_Mchn.c: 1081: Switch_Train_Path = 4;
  3919  00237A  0E00               	movlw	0
  3920  00237C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3921  00237E  0E29               	movlw	41
  3922  002380  6E13               	movwf	GETxAPIxVAL@index,c
  3923  002382  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3924  002386  0413               	decf	?_GETxAPIxVAL,w,c
  3925  002388  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3926  00238A  B4D8               	btfsc	status,2,c
  3927  00238C  D032               	goto	u7910
  3928                           
  3929                           ;State_Mchn.c: 1086: else if(GETxAPIxVAL(42) == 1){
  3930                           
  3931                           ; BSR set to: 0
  3932                           
  3933                           ;State_Mchn.c: 1085: }
  3934                           
  3935                           ;State_Mchn.c: 1084: Switch_Train_Path = 5;
  3936  00238E  0E00               	movlw	0
  3937  002390  6E14               	movwf	GETxAPIxVAL@index+1,c
  3938  002392  0E2A               	movlw	42
  3939  002394  6E13               	movwf	GETxAPIxVAL@index,c
  3940  002396  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3941  00239A  0413               	decf	?_GETxAPIxVAL,w,c
  3942  00239C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3943  00239E  B4D8               	btfsc	status,2,c
  3944  0023A0  D034               	goto	u7920
  3945                           
  3946                           ;State_Mchn.c: 1089: else if(GETxAPIxVAL(44) == 1){
  3947                           
  3948                           ; BSR set to: 0
  3949                           
  3950                           ;State_Mchn.c: 1088: }
  3951                           
  3952                           ;State_Mchn.c: 1087: Switch_Train_Path = 6;
  3953  0023A2  0E00               	movlw	0
  3954  0023A4  6E14               	movwf	GETxAPIxVAL@index+1,c
  3955  0023A6  0E2C               	movlw	44
  3956  0023A8  6E13               	movwf	GETxAPIxVAL@index,c
  3957  0023AA  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3958  0023AE  0413               	decf	?_GETxAPIxVAL,w,c
  3959  0023B0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3960  0023B2  B4D8               	btfsc	status,2,c
  3961  0023B4  D036               	goto	u7930
  3962                           
  3963                           ;State_Mchn.c: 1092: else if(GETxAPIxVAL(43) == 1){
  3964                           
  3965                           ; BSR set to: 0
  3966                           
  3967                           ;State_Mchn.c: 1091: }
  3968                           
  3969                           ;State_Mchn.c: 1090: Switch_Train_Path = 7;
  3970  0023B6  0E00               	movlw	0
  3971  0023B8  6E14               	movwf	GETxAPIxVAL@index+1,c
  3972  0023BA  0E2B               	movlw	43
  3973  0023BC  6E13               	movwf	GETxAPIxVAL@index,c
  3974  0023BE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3975  0023C2  D037               	goto	L94
  3976  0023C4                     L27:
  3977  0023C4  0100               	movlb	0	; () banked
  3978  0023C6  6F86               	movwf	_Switch_Train_Path& (0+255),b
  3979                           
  3980                           ; BSR set to: 0
  3981                           
  3982                           ; BSR set to: 0
  3983                           
  3984                           ; BSR set to: 0
  3985                           
  3986                           ; BSR set to: 0
  3987  0023C8  D758               	goto	l367
  3988  0023CA                     
  3989                           ; BSR set to: 0
  3990                           
  3991                           ; BSR set to: 0
  3992  0023CA  0E00               	movlw	0
  3993  0023CC  6E14               	movwf	GETxAPIxVAL@index+1,c
  3994  0023CE  0E1D               	movlw	29
  3995  0023D0  6E13               	movwf	GETxAPIxVAL@index,c
  3996  0023D2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  3997  0023D6  0413               	decf	?_GETxAPIxVAL,w,c
  3998  0023D8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3999  0023DA  B4D8               	btfsc	status,2,c
  4000  0023DC  D069               	goto	u8000
  4001                           
  4002                           ;State_Mchn.c: 1100: else if(GETxAPIxVAL(41) == 1){
  4003                           
  4004                           ; BSR set to: 0
  4005                           
  4006                           ;State_Mchn.c: 1099: }
  4007                           
  4008                           ;State_Mchn.c: 1098: Switch_Train_Path = 4;
  4009  0023DE  0E00               	movlw	0
  4010  0023E0  6E14               	movwf	GETxAPIxVAL@index+1,c
  4011  0023E2  0E29               	movlw	41
  4012  0023E4  6E13               	movwf	GETxAPIxVAL@index,c
  4013  0023E6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4014  0023EA  0413               	decf	?_GETxAPIxVAL,w,c
  4015  0023EC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4016  0023EE  A4D8               	btfss	status,2,c
  4017  0023F0  D002               	goto	l417
  4018  0023F2                     u7910:
  4019                           
  4020                           ;State_Mchn.c: 1101: Switch_Train_Path = 5;
  4021  0023F2  0E05               	movlw	5
  4022  0023F4  D7E7               	goto	L27
  4023  0023F6                     l417:
  4024                           
  4025                           ;State_Mchn.c: 1103: else if(GETxAPIxVAL(42) == 1){
  4026                           
  4027                           ; BSR set to: 0
  4028  0023F6  0E00               	movlw	0
  4029  0023F8  6E14               	movwf	GETxAPIxVAL@index+1,c
  4030  0023FA  0E2A               	movlw	42
  4031  0023FC  6E13               	movwf	GETxAPIxVAL@index,c
  4032  0023FE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4033  002402  0413               	decf	?_GETxAPIxVAL,w,c
  4034  002404  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4035  002406  A4D8               	btfss	status,2,c
  4036  002408  D002               	goto	l419
  4037  00240A                     u7920:
  4038                           
  4039                           ;State_Mchn.c: 1104: Switch_Train_Path = 6;
  4040  00240A  0E06               	movlw	6
  4041  00240C  D7DB               	goto	L27
  4042  00240E                     l419:
  4043                           
  4044                           ;State_Mchn.c: 1106: else if(GETxAPIxVAL(44) == 1){
  4045                           
  4046                           ; BSR set to: 0
  4047  00240E  0E00               	movlw	0
  4048  002410  6E14               	movwf	GETxAPIxVAL@index+1,c
  4049  002412  0E2C               	movlw	44
  4050  002414  6E13               	movwf	GETxAPIxVAL@index,c
  4051  002416  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4052  00241A  0413               	decf	?_GETxAPIxVAL,w,c
  4053  00241C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4054  00241E  A4D8               	btfss	status,2,c
  4055  002420  D002               	goto	l421
  4056  002422                     u7930:
  4057                           
  4058                           ;State_Mchn.c: 1107: Switch_Train_Path = 7;
  4059  002422  0E07               	movlw	7
  4060  002424  D7CF               	goto	L27
  4061  002426                     l421:
  4062                           
  4063                           ;State_Mchn.c: 1109: else if(GETxAPIxVAL(43) == 1){
  4064                           
  4065                           ; BSR set to: 0
  4066  002426  0E00               	movlw	0
  4067  002428  6E14               	movwf	GETxAPIxVAL@index+1,c
  4068  00242A  0E2B               	movlw	43
  4069  00242C  6E13               	movwf	GETxAPIxVAL@index,c
  4070  00242E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4071  002432                     L94:
  4072  002432  0413               	decf	?_GETxAPIxVAL,w,c
  4073  002434  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4074  002436  A4D8               	btfss	status,2,c
  4075  002438  D720               	goto	l367
  4076                           
  4077                           ;State_Mchn.c: 1110: Switch_Train_Path = 8;
  4078  00243A  0E08               	movlw	8
  4079  00243C  D7C3               	goto	L27
  4080  00243E                     
  4081                           ; BSR set to: 0
  4082                           
  4083                           ; BSR set to: 0
  4084  00243E  0E00               	movlw	0
  4085  002440  6E14               	movwf	GETxAPIxVAL@index+1,c
  4086  002442  0E1E               	movlw	30
  4087  002444  6E13               	movwf	GETxAPIxVAL@index,c
  4088  002446  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4089  00244A  0413               	decf	?_GETxAPIxVAL,w,c
  4090  00244C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4091  00244E  B4D8               	btfsc	status,2,c
  4092  002450  D02F               	goto	u8000
  4093                           
  4094                           ;State_Mchn.c: 1118: else if(GETxAPIxVAL(41) == 1){
  4095                           
  4096                           ; BSR set to: 0
  4097                           
  4098                           ;State_Mchn.c: 1117: }
  4099                           
  4100                           ;State_Mchn.c: 1115: {
  4101                           ;State_Mchn.c: 1116: Switch_Train_Path = 4;
  4102  002452  0E00               	movlw	0
  4103  002454  6E14               	movwf	GETxAPIxVAL@index+1,c
  4104  002456  0E29               	movlw	41
  4105  002458  6E13               	movwf	GETxAPIxVAL@index,c
  4106  00245A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4107  00245E  0413               	decf	?_GETxAPIxVAL,w,c
  4108  002460  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4109  002462  B4D8               	btfsc	status,2,c
  4110  002464  D031               	goto	u8010
  4111                           
  4112                           ;State_Mchn.c: 1121: else if(GETxAPIxVAL(42) == 1){
  4113                           
  4114                           ; BSR set to: 0
  4115                           
  4116                           ;State_Mchn.c: 1120: }
  4117                           
  4118                           ;State_Mchn.c: 1119: Switch_Train_Path = 12;
  4119  002466  0E00               	movlw	0
  4120  002468  6E14               	movwf	GETxAPIxVAL@index+1,c
  4121  00246A  0E2A               	movlw	42
  4122  00246C  6E13               	movwf	GETxAPIxVAL@index,c
  4123  00246E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4124  002472  0413               	decf	?_GETxAPIxVAL,w,c
  4125  002474  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4126  002476  B4D8               	btfsc	status,2,c
  4127  002478  D033               	goto	u8020
  4128                           
  4129                           ;State_Mchn.c: 1124: else if(GETxAPIxVAL(44) == 1){
  4130                           
  4131                           ; BSR set to: 0
  4132                           
  4133                           ;State_Mchn.c: 1123: }
  4134                           
  4135                           ;State_Mchn.c: 1122: Switch_Train_Path = 11;
  4136  00247A  0E00               	movlw	0
  4137  00247C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4138  00247E  0E2C               	movlw	44
  4139  002480  6E13               	movwf	GETxAPIxVAL@index,c
  4140  002482  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4141  002486  0413               	decf	?_GETxAPIxVAL,w,c
  4142  002488  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4143  00248A  B4D8               	btfsc	status,2,c
  4144  00248C  D035               	goto	u8030
  4145                           
  4146                           ;State_Mchn.c: 1127: else if(GETxAPIxVAL(43) == 1){
  4147                           
  4148                           ; BSR set to: 0
  4149                           
  4150                           ;State_Mchn.c: 1126: }
  4151                           
  4152                           ;State_Mchn.c: 1125: Switch_Train_Path = 10;
  4153  00248E  0E00               	movlw	0
  4154  002490  6E14               	movwf	GETxAPIxVAL@index+1,c
  4155  002492  0E2B               	movlw	43
  4156  002494  6E13               	movwf	GETxAPIxVAL@index,c
  4157  002496  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4158  00249A  D036               	goto	L95
  4159  00249C                     
  4160                           ; BSR set to: 0
  4161                           
  4162                           ; BSR set to: 0
  4163  00249C  0E00               	movlw	0
  4164  00249E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4165  0024A0  0E1F               	movlw	31
  4166  0024A2  6E13               	movwf	GETxAPIxVAL@index,c
  4167  0024A4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4168  0024A8  0413               	decf	?_GETxAPIxVAL,w,c
  4169  0024AA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4170  0024AC  A4D8               	btfss	status,2,c
  4171  0024AE  D002               	goto	l435
  4172  0024B0                     u8000:
  4173                           
  4174                           ;State_Mchn.c: 1133: {
  4175                           ;State_Mchn.c: 1134: Switch_Train_Path = 4;
  4176  0024B0  0E04               	movlw	4
  4177  0024B2  D788               	goto	L27
  4178  0024B4                     l435:
  4179                           
  4180                           ;State_Mchn.c: 1136: else if(GETxAPIxVAL(41) == 1){
  4181                           
  4182                           ; BSR set to: 0
  4183  0024B4  0E00               	movlw	0
  4184  0024B6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4185  0024B8  0E29               	movlw	41
  4186  0024BA  6E13               	movwf	GETxAPIxVAL@index,c
  4187  0024BC  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4188  0024C0  0413               	decf	?_GETxAPIxVAL,w,c
  4189  0024C2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4190  0024C4  A4D8               	btfss	status,2,c
  4191  0024C6  D002               	goto	l437
  4192  0024C8                     u8010:
  4193                           
  4194                           ;State_Mchn.c: 1137: Switch_Train_Path = 12;
  4195  0024C8  0E0C               	movlw	12
  4196  0024CA  D77C               	goto	L27
  4197  0024CC                     l437:
  4198                           
  4199                           ;State_Mchn.c: 1139: else if(GETxAPIxVAL(42) == 1){
  4200                           
  4201                           ; BSR set to: 0
  4202  0024CC  0E00               	movlw	0
  4203  0024CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4204  0024D0  0E2A               	movlw	42
  4205  0024D2  6E13               	movwf	GETxAPIxVAL@index,c
  4206  0024D4  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4207  0024D8  0413               	decf	?_GETxAPIxVAL,w,c
  4208  0024DA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4209  0024DC  A4D8               	btfss	status,2,c
  4210  0024DE  D002               	goto	l439
  4211  0024E0                     u8020:
  4212                           
  4213                           ;State_Mchn.c: 1140: Switch_Train_Path = 11;
  4214  0024E0  0E0B               	movlw	11
  4215  0024E2  D770               	goto	L27
  4216  0024E4                     l439:
  4217                           
  4218                           ;State_Mchn.c: 1142: else if(GETxAPIxVAL(44) == 1){
  4219                           
  4220                           ; BSR set to: 0
  4221  0024E4  0E00               	movlw	0
  4222  0024E6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4223  0024E8  0E2C               	movlw	44
  4224  0024EA  6E13               	movwf	GETxAPIxVAL@index,c
  4225  0024EC  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4226  0024F0  0413               	decf	?_GETxAPIxVAL,w,c
  4227  0024F2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4228  0024F4  A4D8               	btfss	status,2,c
  4229  0024F6  D002               	goto	l441
  4230  0024F8                     u8030:
  4231                           
  4232                           ;State_Mchn.c: 1143: Switch_Train_Path = 10;
  4233  0024F8  0E0A               	movlw	10
  4234  0024FA  D764               	goto	L27
  4235  0024FC                     l441:
  4236                           
  4237                           ;State_Mchn.c: 1145: else if(GETxAPIxVAL(43) == 1){
  4238                           
  4239                           ; BSR set to: 0
  4240  0024FC  0E00               	movlw	0
  4241  0024FE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4242  002500  0E2B               	movlw	43
  4243  002502  6E13               	movwf	GETxAPIxVAL@index,c
  4244  002504  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4245  002508                     L95:
  4246  002508  0413               	decf	?_GETxAPIxVAL,w,c
  4247  00250A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4248  00250C  A4D8               	btfss	status,2,c
  4249  00250E  D6B5               	goto	l367
  4250                           
  4251                           ;State_Mchn.c: 1146: Switch_Train_Path = 9;
  4252  002510  0E09               	movlw	9
  4253  002512  D758               	goto	L27
  4254  002514                     
  4255                           ; BSR set to: 0
  4256                           
  4257                           ; BSR set to: 0
  4258  002514  51CD               	movf	Train_Path@To& (0+255),w,b
  4259                           
  4260                           ; Switch size 1, requested type "space"
  4261                           ; Number of cases is 4, Range of values is 1 to 4
  4262                           ; switch strategies available:
  4263                           ; Name         Instructions Cycles
  4264                           ; simple_byte           13     7 (average)
  4265                           ;	Chosen strategy is simple_byte
  4266  002516  0A01               	xorlw	1	; case 1
  4267  002518  B4D8               	btfsc	status,2,c
  4268  00251A  D791               	goto	l424
  4269  00251C  0A03               	xorlw	3	; case 2
  4270  00251E  B4D8               	btfsc	status,2,c
  4271  002520  D7BD               	goto	l434
  4272  002522  0A01               	xorlw	1	; case 3
  4273  002524  B4D8               	btfsc	status,2,c
  4274  002526  D71F               	goto	l403
  4275  002528  0A07               	xorlw	7	; case 4
  4276  00252A  B4D8               	btfsc	status,2,c
  4277  00252C  D74E               	goto	l414
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;State_Mchn.c: 1152: break;
  4281  00252E  D073               	goto	l376
  4282  002530                     
  4283                           ; BSR set to: 0
  4284                           
  4285                           ; BSR set to: 0
  4286  002530  EC84  F017         	call	_Train_Move_Right_Brake	;wreg free
  4287  002534  D008               	goto	L96
  4288  002536                     
  4289                           ; BSR set to: 0
  4290                           
  4291                           ; BSR set to: 0
  4292  002536  EC84  F017         	call	_Train_Move_Right_Brake	;wreg free
  4293  00253A  D005               	goto	L96
  4294  00253C                     
  4295                           ; BSR set to: 0
  4296                           
  4297                           ; BSR set to: 0
  4298  00253C  ECE1  F016         	call	_Train_Move_Left_Brake	;wreg free
  4299  002540  D002               	goto	L96
  4300  002542                     
  4301                           ; BSR set to: 0
  4302                           
  4303                           ; BSR set to: 0
  4304  002542  ECE1  F016         	call	_Train_Move_Left_Brake	;wreg free
  4305  002546                     L96:
  4306  002546  0900               	iorlw	0
  4307  002548  A4D8               	btfss	status,2,c
  4308  00254A  D697               	goto	l367
  4309                           
  4310                           ;State_Mchn.c: 1181: {
  4311                           ;State_Mchn.c: 1182: Switch_Train_Path = 0;
  4312  00254C  0E00               	movlw	0
  4313  00254E  0100               	movlb	0	; () banked
  4314  002550  6F86               	movwf	_Switch_Train_Path& (0+255),b
  4315                           
  4316                           ;State_Mchn.c: 1183: Return_Val = 0;
  4317  002552  0E00               	movlw	0
  4318  002554  D694               	goto	L40
  4319  002556                     
  4320                           ; BSR set to: 0
  4321                           
  4322                           ; BSR set to: 0
  4323  002556  51CD               	movf	Train_Path@To& (0+255),w,b
  4324                           
  4325                           ; Switch size 1, requested type "space"
  4326                           ; Number of cases is 4, Range of values is 1 to 4
  4327                           ; switch strategies available:
  4328                           ; Name         Instructions Cycles
  4329                           ; simple_byte           13     7 (average)
  4330                           ;	Chosen strategy is simple_byte
  4331  002558  0A01               	xorlw	1	; case 1
  4332  00255A  B4D8               	btfsc	status,2,c
  4333  00255C  D7EF               	goto	l452
  4334  00255E  0A03               	xorlw	3	; case 2
  4335  002560  B4D8               	btfsc	status,2,c
  4336  002562  D7EF               	goto	l454
  4337  002564  0A01               	xorlw	1	; case 3
  4338  002566  B4D8               	btfsc	status,2,c
  4339  002568  D7E3               	goto	l447
  4340  00256A  0A07               	xorlw	7	; case 4
  4341  00256C  B4D8               	btfsc	status,2,c
  4342  00256E  D7E3               	goto	l450
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;State_Mchn.c: 1190: break;
  4346  002570  D052               	goto	l376
  4347  002572                     
  4348                           ; BSR set to: 0
  4349                           ;State_Mchn.c: 1193: if(Left_Mountain_From_The_Left(1) == 0){
  4350                           
  4351                           ; BSR set to: 0
  4352  002572  0E01               	movlw	1
  4353  002574  EC28  F01C         	call	_Left_Mountain_From_The_Left
  4354  002578  D01B               	goto	L53
  4355  00257A                     
  4356                           ; BSR set to: 0
  4357                           ;State_Mchn.c: 1200: if(Left_Mountain_From_The_Left(2) == 0){
  4358                           
  4359                           ; BSR set to: 0
  4360  00257A  0E02               	movlw	2
  4361  00257C  EC28  F01C         	call	_Left_Mountain_From_The_Left
  4362  002580  D017               	goto	L53
  4363  002582                     
  4364                           ; BSR set to: 0
  4365                           ;State_Mchn.c: 1207: if(Right_Mountain_From_The_Left(3) == 0){
  4366                           
  4367                           ; BSR set to: 0
  4368  002582  0E03               	movlw	3
  4369  002584  EC14  F01B         	call	_Right_Mountain_From_The_Left
  4370  002588  D013               	goto	L53
  4371  00258A                     
  4372                           ; BSR set to: 0
  4373                           ;State_Mchn.c: 1214: if(Right_Mountain_From_The_Left(4) == 0){
  4374                           
  4375                           ; BSR set to: 0
  4376  00258A  0E04               	movlw	4
  4377  00258C  EC14  F01B         	call	_Right_Mountain_From_The_Left
  4378  002590  D00F               	goto	L53
  4379  002592                     
  4380                           ; BSR set to: 0
  4381                           ;State_Mchn.c: 1221: if(Right_Mountain_From_The_Right(4) == 0){
  4382                           
  4383                           ; BSR set to: 0
  4384  002592  0E04               	movlw	4
  4385  002594  EC8A  F01A         	call	_Right_Mountain_From_The_Right
  4386  002598  D00B               	goto	L53
  4387  00259A                     
  4388                           ; BSR set to: 0
  4389                           ;State_Mchn.c: 1228: if(Right_Mountain_From_The_Right(3) == 0){
  4390                           
  4391                           ; BSR set to: 0
  4392  00259A  0E03               	movlw	3
  4393  00259C  EC8A  F01A         	call	_Right_Mountain_From_The_Right
  4394  0025A0  D007               	goto	L53
  4395  0025A2                     
  4396                           ; BSR set to: 0
  4397                           ;State_Mchn.c: 1235: if(Left_Mountain_From_The_Right(2) == 0){
  4398                           
  4399                           ; BSR set to: 0
  4400  0025A2  0E02               	movlw	2
  4401  0025A4  ECB1  F01C         	call	_Left_Mountain_From_The_Right
  4402  0025A8  D003               	goto	L53
  4403  0025AA                     
  4404                           ; BSR set to: 0
  4405                           ;State_Mchn.c: 1242: if(Left_Mountain_From_The_Right(1) == 0){
  4406                           
  4407                           ; BSR set to: 0
  4408  0025AA  0E01               	movlw	1
  4409  0025AC  ECB1  F01C         	call	_Left_Mountain_From_The_Right
  4410  0025B0                     L53:
  4411  0025B0  0900               	iorlw	0
  4412  0025B2  A4D8               	btfss	status,2,c
  4413  0025B4  D662               	goto	l367
  4414                           
  4415                           ;State_Mchn.c: 1243: Switch_Train_Path = 3;
  4416  0025B6  0E03               	movlw	3
  4417  0025B8  D705               	goto	L27
  4418  0025BA                     
  4419                           ; BSR set to: 0
  4420                           
  4421                           ; BSR set to: 0
  4422  0025BA  0E00               	movlw	0
  4423  0025BC  6F86               	movwf	_Switch_Train_Path& (0+255),b
  4424  0025BE  0E01               	movlw	1
  4425  0025C0  D65E               	goto	L40
  4426  0025C2                     l363:
  4427                           
  4428                           ; BSR set to: 0
  4429  0025C2  0100               	movlb	0	; () banked
  4430  0025C4  5186               	movf	_Switch_Train_Path& (0+255),w,b
  4431                           
  4432                           ; Switch size 1, requested type "space"
  4433                           ; Number of cases is 13, Range of values is 0 to 12
  4434                           ; switch strategies available:
  4435                           ; Name         Instructions Cycles
  4436                           ; simple_byte           40    21 (average)
  4437                           ;	Chosen strategy is simple_byte
  4438  0025C6  0A00               	xorlw	0	; case 0
  4439  0025C8  B4D8               	btfsc	status,2,c
  4440  0025CA  D671               	goto	l365
  4441  0025CC  0A01               	xorlw	1	; case 1
  4442  0025CE  B4D8               	btfsc	status,2,c
  4443  0025D0  D69E               	goto	l378
  4444  0025D2  0A03               	xorlw	3	; case 2
  4445  0025D4  B4D8               	btfsc	status,2,c
  4446  0025D6  D6B9               	goto	l390
  4447  0025D8  0A01               	xorlw	1	; case 3
  4448  0025DA  B4D8               	btfsc	status,2,c
  4449  0025DC  D79B               	goto	l402
  4450  0025DE  0A07               	xorlw	7	; case 4
  4451  0025E0  B4D8               	btfsc	status,2,c
  4452  0025E2  D7B9               	goto	l446
  4453  0025E4  0A01               	xorlw	1	; case 5
  4454  0025E6  B4D8               	btfsc	status,2,c
  4455  0025E8  D7C4               	goto	l457
  4456  0025EA  0A03               	xorlw	3	; case 6
  4457  0025EC  B4D8               	btfsc	status,2,c
  4458  0025EE  D7C5               	goto	l459
  4459  0025F0  0A01               	xorlw	1	; case 7
  4460  0025F2  B4D8               	btfsc	status,2,c
  4461  0025F4  D7C6               	goto	l461
  4462  0025F6  0A0F               	xorlw	15	; case 8
  4463  0025F8  B4D8               	btfsc	status,2,c
  4464  0025FA  D7C7               	goto	l463
  4465  0025FC  0A01               	xorlw	1	; case 9
  4466  0025FE  B4D8               	btfsc	status,2,c
  4467  002600  D7C8               	goto	l465
  4468  002602  0A03               	xorlw	3	; case 10
  4469  002604  B4D8               	btfsc	status,2,c
  4470  002606  D7C9               	goto	l467
  4471  002608  0A01               	xorlw	1	; case 11
  4472  00260A  B4D8               	btfsc	status,2,c
  4473  00260C  D7CA               	goto	l469
  4474  00260E  0A07               	xorlw	7	; case 12
  4475  002610  B4D8               	btfsc	status,2,c
  4476  002612  D7CB               	goto	l471
  4477  002614  D7D2               	goto	l473
  4478  002616                     l376:
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;State_Mchn.c: 1251: return(Return_Val);
  4482                           
  4483                           ; BSR set to: 0
  4484  002616  51E0               	movf	Train_Path@Return_Val& (0+255),w,b
  4485  002618  0012               	return	
  4486  00261A                     __end_of_Train_Path:
  4487                           	opt stack 0
  4488                           tblptru	equ	0xFF8
  4489                           tblptrh	equ	0xFF7
  4490                           tblptrl	equ	0xFF6
  4491                           tablat	equ	0xFF5
  4492                           postinc0	equ	0xFEE
  4493                           wreg	equ	0xFE8
  4494                           postdec1	equ	0xFE5
  4495                           fsr1l	equ	0xFE1
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function _Train_Move_Right_Start *****************
  4499 ;; Defined at:
  4500 ;;		line 27 in file "../train_move_right.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;		None
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;		None
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      unsigned char 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4514 ;;      Params:         0       0       0       0       0       0       0       0       0
  4515 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4517 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4518 ;;Total ram usage:        2 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    6
  4521 ;; This function calls:
  4522 ;;		_GETxAPIxVAL
  4523 ;;		_SETxAPIxVAL
  4524 ;;		_SETxPWM
  4525 ;; This function is called by:
  4526 ;;		_Train_Path
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text3
  4531  003180                     __ptext3:
  4532                           	opt stack 0
  4533  003180                     _Train_Move_Right_Start:
  4534                           	opt stack 22
  4535                           
  4536                           ;train_move_right.c: 29: static char Return_Val = 1;
  4537                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4538                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;incstack = 0
  4542  003180  D08A               	goto	l1154
  4543  003182  0E00               	movlw	0
  4544  003184  6E14               	movwf	GETxAPIxVAL@index+1,c
  4545  003186  0E14               	movlw	20
  4546  003188  6E13               	movwf	GETxAPIxVAL@index,c
  4547  00318A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4548  00318E  5013               	movf	?_GETxAPIxVAL,w,c
  4549  003190  0100               	movlb	0	; () banked
  4550  003192  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4551  003194  5014               	movf	?_GETxAPIxVAL+1,w,c
  4552  003196  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4553  003198  A0D8               	btfss	status,0,c
  4554  00319A  D002               	goto	l1156
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;train_move_right.c: 37: {
  4558                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4559  00319C  0E01               	movlw	1
  4560  00319E  D03D               	goto	L61
  4561  0031A0                     l1156:
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;train_move_right.c: 42: }
  4565                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4566                           
  4567                           ; BSR set to: 0
  4568  0031A0  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4569  0031A2  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4573  0031A4  0E00               	movlw	0
  4574  0031A6  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4575  0031A8  D073               	goto	L62
  4576  0031AA                     
  4577                           ; BSR set to: 0
  4578                           
  4579                           ; BSR set to: 0
  4580  0031AA  0E00               	movlw	0
  4581  0031AC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4582  0031AE  0E16               	movlw	22
  4583  0031B0  6E13               	movwf	GETxAPIxVAL@index,c
  4584  0031B2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4585  0031B6  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Right_Start$2180
  4586  0031BA  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Start$2180+1
  4587  0031BE  C0CB  F01F         	movff	_Train_Move_Right_Start$2180,SETxPWM@speed
  4588  0031C2  C0CC  F020         	movff	_Train_Move_Right_Start$2180+1,SETxPWM@speed+1
  4589  0031C6  0E01               	movlw	1
  4590  0031C8  6E21               	movwf	SETxPWM@direction,c
  4591  0031CA  EC10  F01E         	call	_SETxPWM	;wreg free
  4592                           
  4593                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4594  0031CE  0E00               	movlw	0
  4595  0031D0  6E14               	movwf	GETxAPIxVAL@index+1,c
  4596  0031D2  0E16               	movlw	22
  4597  0031D4  6E13               	movwf	GETxAPIxVAL@index,c
  4598  0031D6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4599  0031DA  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4600  0031DE  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4601                           
  4602                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4603  0031E2  0E00               	movlw	0
  4604  0031E4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4605  0031E6  0E45               	movlw	69
  4606  0031E8  6E19               	movwf	SETxAPIxVAL@index,c
  4607  0031EA  0E00               	movlw	0
  4608  0031EC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4609  0031EE  0E00               	movlw	0
  4610  0031F0  6E1B               	movwf	SETxAPIxVAL@value,c
  4611  0031F2  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  4612                           
  4613                           ;train_move_right.c: 51: Return_Val = 1;
  4614  0031F6  0E01               	movlw	1
  4615  0031F8  0100               	movlb	0	; () banked
  4616  0031FA  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4617  0031FC  D018               	goto	l7636
  4618  0031FE                     
  4619                           ; BSR set to: 0
  4620                           
  4621                           ; BSR set to: 0
  4622  0031FE  0E00               	movlw	0
  4623  003200  6E14               	movwf	GETxAPIxVAL@index+1,c
  4624  003202  0E12               	movlw	18
  4625  003204  6E13               	movwf	GETxAPIxVAL@index,c
  4626  003206  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4627  00320A  5013               	movf	?_GETxAPIxVAL,w,c
  4628  00320C  0100               	movlb	0	; () banked
  4629  00320E  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4630  003210  5014               	movf	?_GETxAPIxVAL+1,w,c
  4631  003212  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4632  003214  A0D8               	btfss	status,0,c
  4633  003216  D007               	goto	l1160
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;train_move_right.c: 56: {
  4637                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4638  003218  0E03               	movlw	3
  4639  00321A                     L61:
  4640  00321A  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4641                           
  4642                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4643  00321C  0E00               	movlw	0
  4644  00321E  6F63               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4645  003220  0E00               	movlw	0
  4646  003222  6F62               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4647  003224  D035               	goto	L62
  4648  003226                     l1160:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;train_move_right.c: 61: }
  4652                           ;train_move_right.c: 62: Return_Val = 1;
  4653                           
  4654                           ; BSR set to: 0
  4655  003226  0E01               	movlw	1
  4656  003228  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4660  00322A  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4661  00322C  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4662  00322E                     l7636:
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4666  00322E  0E02               	movlw	2
  4667  003230  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4668                           
  4669                           ;train_move_right.c: 65: break;
  4670  003232  D03F               	goto	l1157
  4671  003234                     
  4672                           ; BSR set to: 0
  4673                           
  4674                           ; BSR set to: 0
  4675  003234  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4676  003238  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4677  00323C  0E01               	movlw	1
  4678  00323E  6E21               	movwf	SETxPWM@direction,c
  4679  003240  EC10  F01E         	call	_SETxPWM	;wreg free
  4680                           
  4681                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4682  003244  0E00               	movlw	0
  4683  003246  6E14               	movwf	GETxAPIxVAL@index+1,c
  4684  003248  0E17               	movlw	23
  4685  00324A  6E13               	movwf	GETxAPIxVAL@index,c
  4686  00324C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4687  003250  5013               	movf	?_GETxAPIxVAL,w,c
  4688  003252  0100               	movlb	0	; () banked
  4689  003254  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4690  003256  5014               	movf	?_GETxAPIxVAL+1,w,c
  4691  003258  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4692  00325A  A0D8               	btfss	status,0,c
  4693  00325C  D004               	goto	l1162
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;train_move_right.c: 69: {
  4697                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4698  00325E  0E00               	movlw	0
  4699  003260  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4700                           
  4701                           ;train_move_right.c: 71: Return_Val = 0;
  4702  003262  0E00               	movlw	0
  4703  003264  D016               	goto	L60
  4704  003266                     l1162:
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;train_move_right.c: 73: }
  4708                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4709                           
  4710                           ; BSR set to: 0
  4711  003266  0E00               	movlw	0
  4712  003268  6E14               	movwf	GETxAPIxVAL@index+1,c
  4713  00326A  0E1A               	movlw	26
  4714  00326C  6E13               	movwf	GETxAPIxVAL@index,c
  4715  00326E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4716  003272  5013               	movf	?_GETxAPIxVAL,w,c
  4717  003274  0100               	movlb	0	; () banked
  4718  003276  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4719  003278  5014               	movf	?_GETxAPIxVAL+1,w,c
  4720  00327A  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4721  00327C  A0D8               	btfss	status,0,c
  4722  00327E  D006               	goto	l1163
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;train_move_right.c: 75: {
  4726                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4727  003280  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4728  003282  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4732  003284  0E00               	movlw	0
  4733  003286  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4734  003288  0E00               	movlw	0
  4735  00328A  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4736  00328C                     l1163:
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;train_move_right.c: 78: }
  4740                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4741                           
  4742                           ; BSR set to: 0
  4743  00328C  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4744  00328E  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4745  003290                     L62:
  4746                           
  4747                           ;train_move_right.c: 80: Return_Val = 1;
  4748  003290  0E01               	movlw	1
  4749  003292                     L60:
  4750  003292  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;train_move_right.c: 84: }
  4754                           
  4755                           ; BSR set to: 0
  4756                           
  4757                           ;train_move_right.c: 83: default : break;
  4758                           
  4759                           ;train_move_right.c: 81: break;
  4760  003294  D00E               	goto	l1157
  4761  003296                     l1154:
  4762                           
  4763                           ; BSR set to: 0
  4764  003296  0100               	movlb	0	; () banked
  4765  003298  5180               	movf	_Switch_Train_Move& (0+255),w,b
  4766                           
  4767                           ; Switch size 1, requested type "space"
  4768                           ; Number of cases is 4, Range of values is 0 to 3
  4769                           ; switch strategies available:
  4770                           ; Name         Instructions Cycles
  4771                           ; simple_byte           13     7 (average)
  4772                           ;	Chosen strategy is simple_byte
  4773  00329A  0A00               	xorlw	0	; case 0
  4774  00329C  B4D8               	btfsc	status,2,c
  4775  00329E  D771               	goto	l1155
  4776  0032A0  0A01               	xorlw	1	; case 1
  4777  0032A2  B4D8               	btfsc	status,2,c
  4778  0032A4  D782               	goto	l1158
  4779  0032A6  0A03               	xorlw	3	; case 2
  4780  0032A8  B4D8               	btfsc	status,2,c
  4781  0032AA  D7A9               	goto	l1159
  4782  0032AC  0A01               	xorlw	1	; case 3
  4783  0032AE  B4D8               	btfsc	status,2,c
  4784  0032B0  D7C1               	goto	l1161
  4785  0032B2                     l1157:
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;train_move_right.c: 86: return(Return_Val);
  4789                           
  4790                           ; BSR set to: 0
  4791  0032B2  51DD               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4792  0032B4  0012               	return	
  4793  0032B6                     __end_of_Train_Move_Right_Start:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postdec1	equ	0xFE5
  4802                           fsr1l	equ	0xFE1
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function _Train_Move_Right_Brake *****************
  4806 ;; Defined at:
  4807 ;;		line 254 in file "../train_move_right.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;		None
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      unsigned char 
  4814 ;; Registers used:
  4815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4821 ;;      Params:         0       0       0       0       0       0       0       0       0
  4822 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4824 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4825 ;;Total ram usage:        2 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    6
  4828 ;; This function calls:
  4829 ;;		_GETxAPIxVAL
  4830 ;;		_SETxAPIxVAL
  4831 ;;		_SETxPWM
  4832 ;; This function is called by:
  4833 ;;		_Train_Path
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text4
  4838  002F08                     __ptext4:
  4839                           	opt stack 0
  4840  002F08                     _Train_Move_Right_Brake:
  4841                           	opt stack 22
  4842                           
  4843                           ;train_move_right.c: 256: static char Return_Val = 1;
  4844                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4845                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;incstack = 0
  4849  002F08  D08F               	goto	l1222
  4850  002F0A  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4851  002F0E  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4852  002F12  0E01               	movlw	1
  4853  002F14  6E21               	movwf	SETxPWM@direction,c
  4854  002F16  EC10  F01E         	call	_SETxPWM	;wreg free
  4855                           
  4856                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  4857  002F1A  0E00               	movlw	0
  4858  002F1C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4859  002F1E  0E16               	movlw	22
  4860  002F20  6E13               	movwf	GETxAPIxVAL@index,c
  4861  002F22  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4862  002F26  0100               	movlb	0	; () banked
  4863  002F28  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  4864  002F2A  5C13               	subwf	?_GETxAPIxVAL,w,c
  4865  002F2C  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4866  002F2E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  4867  002F30  A0D8               	btfss	status,0,c
  4868  002F32  D002               	goto	l1224
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;train_move_right.c: 263: {
  4872                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  4873  002F34  0E01               	movlw	1
  4874  002F36  D074               	goto	L67
  4875  002F38                     l1224:
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;train_move_right.c: 267: }
  4879                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4880                           
  4881                           ; BSR set to: 0
  4882  002F38  0E00               	movlw	0
  4883  002F3A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4884  002F3C  0E19               	movlw	25
  4885  002F3E  6E13               	movwf	GETxAPIxVAL@index,c
  4886  002F40  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4887  002F44  5013               	movf	?_GETxAPIxVAL,w,c
  4888  002F46  0100               	movlb	0	; () banked
  4889  002F48  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4890  002F4A  5014               	movf	?_GETxAPIxVAL+1,w,c
  4891  002F4C  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4892  002F4E  A0D8               	btfss	status,0,c
  4893  002F50  D008               	goto	l1226
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;train_move_right.c: 269: {
  4897                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  4898  002F52  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  4899  002F54  A0D8               	btfss	status,0,c
  4900  002F56  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  4904  002F58  0E00               	movlw	0
  4905  002F5A  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4906  002F5C  0E00               	movlw	0
  4907  002F5E  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4908                           
  4909                           ;train_move_right.c: 272: }
  4910  002F60  D060               	goto	l7752
  4911  002F62                     l1226:
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  4915                           
  4916                           ; BSR set to: 0
  4917  002F62  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4918  002F64  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4919                           
  4920                           ; BSR set to: 0
  4921  002F66  D05D               	goto	l7752
  4922  002F68                     
  4923                           ; BSR set to: 0
  4924                           
  4925                           ; BSR set to: 0
  4926  002F68  0E00               	movlw	0
  4927  002F6A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4928  002F6C  0E12               	movlw	18
  4929  002F6E  6E13               	movwf	GETxAPIxVAL@index,c
  4930  002F70  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4931  002F74  5013               	movf	?_GETxAPIxVAL,w,c
  4932  002F76  0100               	movlb	0	; () banked
  4933  002F78  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4934  002F7A  5014               	movf	?_GETxAPIxVAL+1,w,c
  4935  002F7C  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4936  002F7E  A0D8               	btfss	status,0,c
  4937  002F80  D007               	goto	l1229
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;train_move_right.c: 278: {
  4941                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  4942  002F82  0E02               	movlw	2
  4943  002F84  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4944                           
  4945                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  4946  002F86  0E00               	movlw	0
  4947  002F88  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4948  002F8A  0E00               	movlw	0
  4949  002F8C  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4950  002F8E  D049               	goto	l7752
  4951  002F90                     l1229:
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;train_move_right.c: 283: }
  4955                           ;train_move_right.c: 284: Return_Val = 1;
  4956                           
  4957                           ; BSR set to: 0
  4958  002F90  0E01               	movlw	1
  4959  002F92  6FDC               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  4963  002F94  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4964  002F96  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  4968  002F98  0E01               	movlw	1
  4969  002F9A  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4970                           
  4971                           ;train_move_right.c: 287: break;
  4972  002F9C  D053               	goto	l1225
  4973  002F9E                     
  4974                           ; BSR set to: 0
  4975                           
  4976                           ; BSR set to: 0
  4977  002F9E  0E00               	movlw	0
  4978  002FA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  4979  002FA2  0E16               	movlw	22
  4980  002FA4  6E13               	movwf	GETxAPIxVAL@index,c
  4981  002FA6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  4982  002FAA  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Right_Brake$2181
  4983  002FAE  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Brake$2181+1
  4984  002FB2  C0CB  F01F         	movff	_Train_Move_Right_Brake$2181,SETxPWM@speed
  4985  002FB6  C0CC  F020         	movff	_Train_Move_Right_Brake$2181+1,SETxPWM@speed+1
  4986  002FBA  0E01               	movlw	1
  4987  002FBC  6E21               	movwf	SETxPWM@direction,c
  4988  002FBE  EC10  F01E         	call	_SETxPWM	;wreg free
  4989                           
  4990                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  4991  002FC2  0E00               	movlw	0
  4992  002FC4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4993  002FC6  0E45               	movlw	69
  4994  002FC8  6E19               	movwf	SETxAPIxVAL@index,c
  4995  002FCA  0E00               	movlw	0
  4996  002FCC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4997  002FCE  0E01               	movlw	1
  4998  002FD0  6E1B               	movwf	SETxAPIxVAL@value,c
  4999  002FD2  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  5000                           
  5001                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  5002  002FD6  0E00               	movlw	0
  5003  002FD8  6E14               	movwf	GETxAPIxVAL@index+1,c
  5004  002FDA  0E16               	movlw	22
  5005  002FDC  6E13               	movwf	GETxAPIxVAL@index,c
  5006  002FDE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5007  002FE2  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5008  002FE6  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5009                           
  5010                           ;train_move_right.c: 292: Switch_Train_Move = 3;
  5011  002FEA  0E03               	movlw	3
  5012  002FEC  0100               	movlb	0	; () banked
  5013  002FEE  D018               	goto	L67
  5014  002FF0                     
  5015                           ; BSR set to: 0
  5016                           
  5017                           ; BSR set to: 0
  5018  002FF0  0E00               	movlw	0
  5019  002FF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  5020  002FF4  0E14               	movlw	20
  5021  002FF6  6E13               	movwf	GETxAPIxVAL@index,c
  5022  002FF8  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5023  002FFC  5013               	movf	?_GETxAPIxVAL,w,c
  5024  002FFE  0100               	movlb	0	; () banked
  5025  003000  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5026  003002  5014               	movf	?_GETxAPIxVAL+1,w,c
  5027  003004  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5028  003006  A0D8               	btfss	status,0,c
  5029  003008  D008               	goto	l1232
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;train_move_right.c: 297: {
  5033                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5034  00300A  0E00               	movlw	0
  5035  00300C  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5036                           
  5037                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5038  00300E  0E00               	movlw	0
  5039  003010  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5040  003012  0E00               	movlw	0
  5041  003014  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5042                           
  5043                           ;train_move_right.c: 300: Return_Val = 0;
  5044  003016  0E00               	movlw	0
  5045  003018  D005               	goto	L65
  5046  00301A                     l1232:
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;train_move_right.c: 302: }
  5050                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5051                           
  5052                           ; BSR set to: 0
  5053  00301A  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5054  00301C  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5058  00301E  0E03               	movlw	3
  5059  003020                     L67:
  5060  003020  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5061  003022                     l7752:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;train_move_right.c: 305: Return_Val = 1;
  5065  003022  0E01               	movlw	1
  5066  003024                     L65:
  5067  003024  6FDC               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;train_move_right.c: 309: }
  5071                           
  5072                           ; BSR set to: 0
  5073                           
  5074                           ;train_move_right.c: 308: default : break;
  5075                           
  5076                           ;train_move_right.c: 306: break;
  5077  003026  D00E               	goto	l1225
  5078  003028                     l1222:
  5079                           
  5080                           ; BSR set to: 0
  5081  003028  0100               	movlb	0	; () banked
  5082  00302A  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5083                           
  5084                           ; Switch size 1, requested type "space"
  5085                           ; Number of cases is 4, Range of values is 0 to 3
  5086                           ; switch strategies available:
  5087                           ; Name         Instructions Cycles
  5088                           ; simple_byte           13     7 (average)
  5089                           ;	Chosen strategy is simple_byte
  5090  00302C  0A00               	xorlw	0	; case 0
  5091  00302E  B4D8               	btfsc	status,2,c
  5092  003030  D76C               	goto	l1223
  5093  003032  0A01               	xorlw	1	; case 1
  5094  003034  B4D8               	btfsc	status,2,c
  5095  003036  D798               	goto	l1228
  5096  003038  0A03               	xorlw	3	; case 2
  5097  00303A  B4D8               	btfsc	status,2,c
  5098  00303C  D7B0               	goto	l1230
  5099  00303E  0A01               	xorlw	1	; case 3
  5100  003040  B4D8               	btfsc	status,2,c
  5101  003042  D7D6               	goto	l1231
  5102  003044                     l1225:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;train_move_right.c: 311: return(Return_Val);
  5106                           
  5107                           ; BSR set to: 0
  5108  003044  51DC               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5109  003046  0012               	return	
  5110  003048                     __end_of_Train_Move_Right_Brake:
  5111                           	opt stack 0
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           postinc0	equ	0xFEE
  5117                           wreg	equ	0xFE8
  5118                           postdec1	equ	0xFE5
  5119                           fsr1l	equ	0xFE1
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _Train_Move_Left_Start *****************
  5123 ;; Defined at:
  5124 ;;		line 27 in file "../train_move_left.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;		None
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      unsigned char 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0
  5139 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5141 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5142 ;;Total ram usage:        2 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    6
  5145 ;; This function calls:
  5146 ;;		_GETxAPIxVAL
  5147 ;;		_SETxAPIxVAL
  5148 ;;		_SETxPWM
  5149 ;; This function is called by:
  5150 ;;		_Train_Path
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text5
  5155  003048                     __ptext5:
  5156                           	opt stack 0
  5157  003048                     _Train_Move_Left_Start:
  5158                           	opt stack 22
  5159                           
  5160                           ;train_move_left.c: 29: static char Return_Val = 1;
  5161                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5162                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;incstack = 0
  5166  003048  D08B               	goto	l1049
  5167  00304A  0E00               	movlw	0
  5168  00304C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5169  00304E  0E14               	movlw	20
  5170  003050  6E13               	movwf	GETxAPIxVAL@index,c
  5171  003052  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5172  003056  5013               	movf	?_GETxAPIxVAL,w,c
  5173  003058  0100               	movlb	0	; () banked
  5174  00305A  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5175  00305C  5014               	movf	?_GETxAPIxVAL+1,w,c
  5176  00305E  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5177  003060  A0D8               	btfss	status,0,c
  5178  003062  D002               	goto	l1051
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;train_move_left.c: 37: {
  5182                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5183  003064  0E01               	movlw	1
  5184  003066  D03E               	goto	L70
  5185  003068                     l1051:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;train_move_left.c: 42: }
  5189                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5190                           
  5191                           ; BSR set to: 0
  5192  003068  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5193  00306A  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5197  00306C  0E00               	movlw	0
  5198  00306E  D043               	goto	L71
  5199  003070                     l7668:
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;train_move_left.c: 45: Return_Val = 1;
  5203  003070  0E01               	movlw	1
  5204  003072  6FDF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5205                           
  5206                           ;train_move_left.c: 46: break;
  5207  003074  D083               	goto	l1052
  5208  003076                     
  5209                           ; BSR set to: 0
  5210                           
  5211                           ; BSR set to: 0
  5212  003076  0E00               	movlw	0
  5213  003078  6E14               	movwf	GETxAPIxVAL@index+1,c
  5214  00307A  0E15               	movlw	21
  5215  00307C  6E13               	movwf	GETxAPIxVAL@index,c
  5216  00307E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5217  003082  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Left_Start$2178
  5218  003086  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Start$2178+1
  5219  00308A  C0CB  F01F         	movff	_Train_Move_Left_Start$2178,SETxPWM@speed
  5220  00308E  C0CC  F020         	movff	_Train_Move_Left_Start$2178+1,SETxPWM@speed+1
  5221  003092  0E00               	movlw	0
  5222  003094  6E21               	movwf	SETxPWM@direction,c
  5223  003096  EC10  F01E         	call	_SETxPWM	;wreg free
  5224                           
  5225                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5226  00309A  0E00               	movlw	0
  5227  00309C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5228  00309E  0E15               	movlw	21
  5229  0030A0  6E13               	movwf	GETxAPIxVAL@index,c
  5230  0030A2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5231  0030A6  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5232  0030AA  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5233                           
  5234                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  5235  0030AE  0E00               	movlw	0
  5236  0030B0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5237  0030B2  0E45               	movlw	69
  5238  0030B4  6E19               	movwf	SETxAPIxVAL@index,c
  5239  0030B6  0E00               	movlw	0
  5240  0030B8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5241  0030BA  0E00               	movlw	0
  5242  0030BC  6E1B               	movwf	SETxAPIxVAL@value,c
  5243  0030BE  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  5244                           
  5245                           ;train_move_left.c: 51: Switch_Train_Move = 2;
  5246  0030C2  0E02               	movlw	2
  5247  0030C4  0100               	movlb	0	; () banked
  5248  0030C6  D017               	goto	L71
  5249  0030C8                     
  5250                           ; BSR set to: 0
  5251                           
  5252                           ; BSR set to: 0
  5253  0030C8  0E00               	movlw	0
  5254  0030CA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5255  0030CC  0E12               	movlw	18
  5256  0030CE  6E13               	movwf	GETxAPIxVAL@index,c
  5257  0030D0  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5258  0030D4  5013               	movf	?_GETxAPIxVAL,w,c
  5259  0030D6  0100               	movlb	0	; () banked
  5260  0030D8  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5261  0030DA  5014               	movf	?_GETxAPIxVAL+1,w,c
  5262  0030DC  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5263  0030DE  A0D8               	btfss	status,0,c
  5264  0030E0  D007               	goto	l1055
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;train_move_left.c: 56: {
  5268                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5269  0030E2  0E03               	movlw	3
  5270  0030E4                     L70:
  5271  0030E4  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5272                           
  5273                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5274  0030E6  0E00               	movlw	0
  5275  0030E8  6F67               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5276  0030EA  0E00               	movlw	0
  5277  0030EC  6F66               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5278  0030EE  D7C0               	goto	l7668
  5279  0030F0                     l1055:
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;train_move_left.c: 61: }
  5283                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5284                           
  5285                           ; BSR set to: 0
  5286  0030F0  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5287  0030F2  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5291  0030F4  0E02               	movlw	2
  5292  0030F6                     L71:
  5293  0030F6  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5294  0030F8  D7BB               	goto	l7668
  5295  0030FA                     
  5296                           ; BSR set to: 0
  5297                           
  5298                           ; BSR set to: 0
  5299  0030FA  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5300  0030FE  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5301  003102  0E00               	movlw	0
  5302  003104  6E21               	movwf	SETxPWM@direction,c
  5303  003106  EC10  F01E         	call	_SETxPWM	;wreg free
  5304                           
  5305                           ;train_move_left.c: 68: Return_Val = 1;
  5306  00310A  0E01               	movlw	1
  5307  00310C  0100               	movlb	0	; () banked
  5308  00310E  6FDF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5312  003110  0E00               	movlw	0
  5313  003112  6E14               	movwf	GETxAPIxVAL@index+1,c
  5314  003114  0E18               	movlw	24
  5315  003116  6E13               	movwf	GETxAPIxVAL@index,c
  5316  003118  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5317  00311C  5013               	movf	?_GETxAPIxVAL,w,c
  5318  00311E  0100               	movlb	0	; () banked
  5319  003120  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5320  003122  5014               	movf	?_GETxAPIxVAL+1,w,c
  5321  003124  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5322  003126  A0D8               	btfss	status,0,c
  5323  003128  D004               	goto	l1057
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;train_move_left.c: 70: {
  5327                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5328  00312A  0E00               	movlw	0
  5329  00312C  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5330                           
  5331                           ;train_move_left.c: 72: Return_Val = 0;
  5332  00312E  0E00               	movlw	0
  5333  003130  D7A0               	goto	L69
  5334  003132                     l1057:
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5338                           
  5339                           ; BSR set to: 0
  5340  003132  0E00               	movlw	0
  5341  003134  6E14               	movwf	GETxAPIxVAL@index+1,c
  5342  003136  0E1A               	movlw	26
  5343  003138  6E13               	movwf	GETxAPIxVAL@index,c
  5344  00313A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5345  00313E  5013               	movf	?_GETxAPIxVAL,w,c
  5346  003140  0100               	movlb	0	; () banked
  5347  003142  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5348  003144  5014               	movf	?_GETxAPIxVAL+1,w,c
  5349  003146  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5350  003148  A0D8               	btfss	status,0,c
  5351  00314A  D007               	goto	l1059
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;train_move_left.c: 76: {
  5355                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5356  00314C  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5357  00314E  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5361  003150  0E00               	movlw	0
  5362  003152  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5363  003154  0E00               	movlw	0
  5364  003156  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5365                           
  5366                           ;train_move_left.c: 79: }
  5367  003158  D011               	goto	l1052
  5368  00315A                     l1059:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5372                           
  5373                           ; BSR set to: 0
  5374  00315A  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5375  00315C  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;train_move_left.c: 83: }
  5379                           
  5380                           ; BSR set to: 0
  5381                           
  5382                           ;train_move_left.c: 82: default : break;
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;train_move_left.c: 81: break;
  5386                           
  5387                           ; BSR set to: 0
  5388  00315E  D00E               	goto	l1052
  5389  003160                     l1049:
  5390                           
  5391                           ; BSR set to: 0
  5392  003160  0100               	movlb	0	; () banked
  5393  003162  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5394                           
  5395                           ; Switch size 1, requested type "space"
  5396                           ; Number of cases is 4, Range of values is 0 to 3
  5397                           ; switch strategies available:
  5398                           ; Name         Instructions Cycles
  5399                           ; simple_byte           13     7 (average)
  5400                           ;	Chosen strategy is simple_byte
  5401  003164  0A00               	xorlw	0	; case 0
  5402  003166  B4D8               	btfsc	status,2,c
  5403  003168  D770               	goto	l1050
  5404  00316A  0A01               	xorlw	1	; case 1
  5405  00316C  B4D8               	btfsc	status,2,c
  5406  00316E  D783               	goto	l1053
  5407  003170  0A03               	xorlw	3	; case 2
  5408  003172  B4D8               	btfsc	status,2,c
  5409  003174  D7A9               	goto	l1054
  5410  003176  0A01               	xorlw	1	; case 3
  5411  003178  B4D8               	btfsc	status,2,c
  5412  00317A  D7BF               	goto	l1056
  5413  00317C                     l1052:
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;train_move_left.c: 85: return(Return_Val);
  5417                           
  5418                           ; BSR set to: 0
  5419  00317C  51DF               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5420  00317E  0012               	return	
  5421  003180                     __end_of_Train_Move_Left_Start:
  5422                           	opt stack 0
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           postinc0	equ	0xFEE
  5428                           wreg	equ	0xFE8
  5429                           postdec1	equ	0xFE5
  5430                           fsr1l	equ	0xFE1
  5431                           status	equ	0xFD8
  5432                           
  5433 ;; *************** function _Train_Move_Left_Brake *****************
  5434 ;; Defined at:
  5435 ;;		line 254 in file "../train_move_left.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;		None
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;		None
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      unsigned char 
  5442 ;; Registers used:
  5443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5449 ;;      Params:         0       0       0       0       0       0       0       0       0
  5450 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5452 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5453 ;;Total ram usage:        2 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    6
  5456 ;; This function calls:
  5457 ;;		_GETxAPIxVAL
  5458 ;;		_SETxAPIxVAL
  5459 ;;		_SETxPWM
  5460 ;; This function is called by:
  5461 ;;		_Train_Path
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           	psect	text6
  5466  002DC2                     __ptext6:
  5467                           	opt stack 0
  5468  002DC2                     _Train_Move_Left_Brake:
  5469                           	opt stack 22
  5470                           
  5471                           ;train_move_left.c: 256: static char Return_Val = 1;
  5472                           ;train_move_left.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5473                           ;train_move_left.c: 259: switch(Switch_Train_Move)
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;incstack = 0
  5477  002DC2  D092               	goto	l1119
  5478  002DC4  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5479  002DC8  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5480  002DCC  0E00               	movlw	0
  5481  002DCE  6E21               	movwf	SETxPWM@direction,c
  5482  002DD0  EC10  F01E         	call	_SETxPWM	;wreg free
  5483                           
  5484                           ;train_move_left.c: 262: Return_Val = 1;
  5485  002DD4  0E01               	movlw	1
  5486  002DD6  0100               	movlb	0	; () banked
  5487  002DD8  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;train_move_left.c: 263: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5491  002DDA  0E00               	movlw	0
  5492  002DDC  6E14               	movwf	GETxAPIxVAL@index+1,c
  5493  002DDE  0E15               	movlw	21
  5494  002DE0  6E13               	movwf	GETxAPIxVAL@index,c
  5495  002DE2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5496  002DE6  0100               	movlb	0	; () banked
  5497  002DE8  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5498  002DEA  5C13               	subwf	?_GETxAPIxVAL,w,c
  5499  002DEC  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5500  002DEE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5501  002DF0  A0D8               	btfss	status,0,c
  5502  002DF2  D002               	goto	l1121
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;train_move_left.c: 264: {
  5506                           ;train_move_left.c: 265: Switch_Train_Move = 1;
  5507  002DF4  0E01               	movlw	1
  5508  002DF6  D074               	goto	L97
  5509  002DF8                     l1121:
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;train_move_left.c: 268: }
  5513                           ;train_move_left.c: 269: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5514                           
  5515                           ; BSR set to: 0
  5516  002DF8  0E00               	movlw	0
  5517  002DFA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5518  002DFC  0E19               	movlw	25
  5519  002DFE  6E13               	movwf	GETxAPIxVAL@index,c
  5520  002E00  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5521  002E04  5013               	movf	?_GETxAPIxVAL,w,c
  5522  002E06  0100               	movlb	0	; () banked
  5523  002E08  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5524  002E0A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5525  002E0C  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5526  002E0E  A0D8               	btfss	status,0,c
  5527  002E10  D008               	goto	l1123
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;train_move_left.c: 270: {
  5531                           ;train_move_left.c: 271: Train_Move_Pwm_Count--;
  5532  002E12  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5533  002E14  A0D8               	btfss	status,0,c
  5534  002E16  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;train_move_left.c: 272: Train_Move_Pwm_Fast_Count = 0;
  5538  002E18  0E00               	movlw	0
  5539  002E1A  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5540  002E1C  0E00               	movlw	0
  5541  002E1E  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5542                           
  5543                           ;train_move_left.c: 273: }
  5544  002E20  D071               	goto	l1122
  5545  002E22                     l1123:
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;train_move_left.c: 274: else{Train_Move_Pwm_Fast_Count++;}
  5549                           
  5550                           ; BSR set to: 0
  5551  002E22  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5552  002E24  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;train_move_left.c: 275: break;
  5556  002E26  D06E               	goto	l1122
  5557  002E28                     
  5558                           ; BSR set to: 0
  5559                           
  5560                           ; BSR set to: 0
  5561  002E28  0E00               	movlw	0
  5562  002E2A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5563  002E2C  0E12               	movlw	18
  5564  002E2E  6E13               	movwf	GETxAPIxVAL@index,c
  5565  002E30  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5566  002E34  5013               	movf	?_GETxAPIxVAL,w,c
  5567  002E36  0100               	movlb	0	; () banked
  5568  002E38  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5569  002E3A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5570  002E3C  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5571  002E3E  A0D8               	btfss	status,0,c
  5572  002E40  D007               	goto	l1126
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;train_move_left.c: 278: {
  5576                           ;train_move_left.c: 279: Switch_Train_Move = 2;
  5577  002E42  0E02               	movlw	2
  5578  002E44  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5579                           
  5580                           ;train_move_left.c: 280: Train_Move_Wait_Time = 0;
  5581  002E46  0E00               	movlw	0
  5582  002E48  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5583  002E4A  0E00               	movlw	0
  5584  002E4C  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5585  002E4E  D049               	goto	l7804
  5586  002E50                     l1126:
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;train_move_left.c: 283: }
  5590                           ;train_move_left.c: 284: Return_Val = 1;
  5591                           
  5592                           ; BSR set to: 0
  5593  002E50  0E01               	movlw	1
  5594  002E52  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;train_move_left.c: 285: Train_Move_Wait_Time++;
  5598  002E54  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5599  002E56  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;train_move_left.c: 286: Switch_Train_Move = 1;
  5603  002E58  0E01               	movlw	1
  5604  002E5A  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5605                           
  5606                           ;train_move_left.c: 287: break;
  5607  002E5C  D053               	goto	l1122
  5608  002E5E                     
  5609                           ; BSR set to: 0
  5610                           
  5611                           ; BSR set to: 0
  5612  002E5E  0E00               	movlw	0
  5613  002E60  6E14               	movwf	GETxAPIxVAL@index+1,c
  5614  002E62  0E15               	movlw	21
  5615  002E64  6E13               	movwf	GETxAPIxVAL@index,c
  5616  002E66  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5617  002E6A  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Left_Brake$2179
  5618  002E6E  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Brake$2179+1
  5619  002E72  C0CB  F01F         	movff	_Train_Move_Left_Brake$2179,SETxPWM@speed
  5620  002E76  C0CC  F020         	movff	_Train_Move_Left_Brake$2179+1,SETxPWM@speed+1
  5621  002E7A  0E00               	movlw	0
  5622  002E7C  6E21               	movwf	SETxPWM@direction,c
  5623  002E7E  EC10  F01E         	call	_SETxPWM	;wreg free
  5624                           
  5625                           ;train_move_left.c: 290: SETxAPIxVAL(69, 1);;
  5626  002E82  0E00               	movlw	0
  5627  002E84  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5628  002E86  0E45               	movlw	69
  5629  002E88  6E19               	movwf	SETxAPIxVAL@index,c
  5630  002E8A  0E00               	movlw	0
  5631  002E8C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5632  002E8E  0E01               	movlw	1
  5633  002E90  6E1B               	movwf	SETxAPIxVAL@value,c
  5634  002E92  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  5635                           
  5636                           ;train_move_left.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5637  002E96  0E00               	movlw	0
  5638  002E98  6E14               	movwf	GETxAPIxVAL@index+1,c
  5639  002E9A  0E15               	movlw	21
  5640  002E9C  6E13               	movwf	GETxAPIxVAL@index,c
  5641  002E9E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5642  002EA2  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5643  002EA6  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5644                           
  5645                           ;train_move_left.c: 292: Switch_Train_Move = 3;
  5646  002EAA  0E03               	movlw	3
  5647  002EAC  0100               	movlb	0	; () banked
  5648  002EAE  D018               	goto	L97
  5649  002EB0                     
  5650                           ; BSR set to: 0
  5651                           
  5652                           ; BSR set to: 0
  5653  002EB0  0E00               	movlw	0
  5654  002EB2  6E14               	movwf	GETxAPIxVAL@index+1,c
  5655  002EB4  0E14               	movlw	20
  5656  002EB6  6E13               	movwf	GETxAPIxVAL@index,c
  5657  002EB8  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5658  002EBC  5013               	movf	?_GETxAPIxVAL,w,c
  5659  002EBE  0100               	movlb	0	; () banked
  5660  002EC0  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5661  002EC2  5014               	movf	?_GETxAPIxVAL+1,w,c
  5662  002EC4  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5663  002EC6  A0D8               	btfss	status,0,c
  5664  002EC8  D008               	goto	l1129
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;train_move_left.c: 297: {
  5668                           ;train_move_left.c: 298: Switch_Train_Move = 0;
  5669  002ECA  0E00               	movlw	0
  5670  002ECC  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5671                           
  5672                           ;train_move_left.c: 299: Train_Move_Wait_Time = 0;
  5673  002ECE  0E00               	movlw	0
  5674  002ED0  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5675  002ED2  0E00               	movlw	0
  5676  002ED4  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5677                           
  5678                           ;train_move_left.c: 300: Return_Val = 0;
  5679  002ED6  0E00               	movlw	0
  5680  002ED8  D005               	goto	L74
  5681  002EDA                     l1129:
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;train_move_left.c: 302: }
  5685                           ;train_move_left.c: 303: Train_Move_Wait_Time++;
  5686                           
  5687                           ; BSR set to: 0
  5688  002EDA  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5689  002EDC  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;train_move_left.c: 304: Switch_Train_Move = 3;
  5693  002EDE  0E03               	movlw	3
  5694  002EE0                     L97:
  5695  002EE0  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5696  002EE2                     l7804:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;train_move_left.c: 305: Return_Val = 1;
  5700  002EE2  0E01               	movlw	1
  5701  002EE4                     L74:
  5702  002EE4  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;train_move_left.c: 309: }
  5706                           
  5707                           ; BSR set to: 0
  5708                           
  5709                           ;train_move_left.c: 308: default : break;
  5710                           
  5711                           ;train_move_left.c: 306: break;
  5712  002EE6  D00E               	goto	l1122
  5713  002EE8                     l1119:
  5714                           
  5715                           ; BSR set to: 0
  5716  002EE8  0100               	movlb	0	; () banked
  5717  002EEA  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5718                           
  5719                           ; Switch size 1, requested type "space"
  5720                           ; Number of cases is 4, Range of values is 0 to 3
  5721                           ; switch strategies available:
  5722                           ; Name         Instructions Cycles
  5723                           ; simple_byte           13     7 (average)
  5724                           ;	Chosen strategy is simple_byte
  5725  002EEC  0A00               	xorlw	0	; case 0
  5726  002EEE  B4D8               	btfsc	status,2,c
  5727  002EF0  D769               	goto	l1120
  5728  002EF2  0A01               	xorlw	1	; case 1
  5729  002EF4  B4D8               	btfsc	status,2,c
  5730  002EF6  D798               	goto	l1125
  5731  002EF8  0A03               	xorlw	3	; case 2
  5732  002EFA  B4D8               	btfsc	status,2,c
  5733  002EFC  D7B0               	goto	l1127
  5734  002EFE  0A01               	xorlw	1	; case 3
  5735  002F00  B4D8               	btfsc	status,2,c
  5736  002F02  D7D6               	goto	l1128
  5737  002F04                     l1122:
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;train_move_left.c: 311: return(Return_Val);
  5741                           
  5742                           ; BSR set to: 0
  5743  002F04  51DE               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5744  002F06  0012               	return	
  5745  002F08                     __end_of_Train_Move_Left_Brake:
  5746                           	opt stack 0
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           postinc0	equ	0xFEE
  5752                           wreg	equ	0xFE8
  5753                           postdec1	equ	0xFE5
  5754                           fsr1l	equ	0xFE1
  5755                           status	equ	0xFD8
  5756                           
  5757 ;; *************** function _Right_Mountain_From_The_Right *****************
  5758 ;; Defined at:
  5759 ;;		line 103 in file "../train_move_left.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  rc              1    wreg     unsigned char 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  rc              1   21[BANK0 ] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      unsigned char 
  5766 ;; Registers used:
  5767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5773 ;;      Params:         0       0       0       0       0       0       0       0       0
  5774 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5776 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5777 ;;Total ram usage:        1 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    6
  5780 ;; This function calls:
  5781 ;;		_GETxAPIxVAL
  5782 ;;		_SETxPWM
  5783 ;; This function is called by:
  5784 ;;		_Train_Path
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text7
  5789  003514                     __ptext7:
  5790                           	opt stack 0
  5791  003514                     _Right_Mountain_From_The_Right:
  5792                           	opt stack 22
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;incstack = 0
  5796                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5797  003514  0100               	movlb	0	; () banked
  5798  003516  6FCB               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  5799                           
  5800                           ;train_move_left.c: 105: static char Return_Val = 1;
  5801                           ;train_move_left.c: 107: switch (Switch_Moutain){
  5802  003518  D07E               	goto	l1067
  5803  00351A  0E03               	movlw	3
  5804  00351C  0100               	movlb	0	; () banked
  5805  00351E  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5806  003520  B4D8               	btfsc	status,2,c
  5807  003522  D00C               	goto	u6870
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  5811                           
  5812                           ; BSR set to: 0
  5813                           
  5814                           ;train_move_left.c: 111: }
  5815                           
  5816                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;train_move_left.c: 109: Switch_Moutain = 1;
  5820  003524  0E00               	movlw	0
  5821  003526  6E14               	movwf	GETxAPIxVAL@index+1,c
  5822  003528  0E35               	movlw	53
  5823  00352A  6E13               	movwf	GETxAPIxVAL@index,c
  5824  00352C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5825  003530  5013               	movf	?_GETxAPIxVAL,w,c
  5826  003532  5C26               	subwf	_Mountain_Delay_Counter,w,c
  5827  003534  5014               	movf	?_GETxAPIxVAL+1,w,c
  5828  003536  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  5829  003538  A0D8               	btfss	status,0,c
  5830  00353A  D007               	goto	l1071
  5831  00353C                     u6870:
  5832                           
  5833                           ;train_move_left.c: 113: Switch_Moutain = 1;
  5834  00353C  0E01               	movlw	1
  5835  00353E  6E2E               	movwf	_Switch_Moutain,c
  5836                           
  5837                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  5838  003540  0E00               	movlw	0
  5839  003542  6E27               	movwf	_Mountain_Delay_Counter+1,c
  5840  003544  0E00               	movlw	0
  5841  003546  6E26               	movwf	_Mountain_Delay_Counter,c
  5842                           
  5843                           ;train_move_left.c: 115: }
  5844  003548  D063               	goto	l1085
  5845  00354A                     l1071:
  5846                           
  5847                           ;train_move_left.c: 116: else{
  5848                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  5849  00354A  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  5850  00354C  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  5851  00354E  D060               	goto	l1085
  5852  003550  0E04               	movlw	4
  5853  003552  0100               	movlb	0	; () banked
  5854  003554  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5855  003556  A4D8               	btfss	status,2,c
  5856  003558  D026               	goto	l1075
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;train_move_left.c: 123: SETxPWM(Train_Move_Pwm_Count, 0);
  5860  00355A  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5861  00355E  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5862  003562  0E00               	movlw	0
  5863  003564  6E21               	movwf	SETxPWM@direction,c
  5864  003566  EC10  F01E         	call	_SETxPWM	;wreg free
  5865                           
  5866                           ;train_move_left.c: 124: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  5867  00356A  0E00               	movlw	0
  5868  00356C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5869  00356E  0E2E               	movlw	46
  5870  003570  6E13               	movwf	GETxAPIxVAL@index,c
  5871  003572  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5872  003576  0100               	movlb	0	; () banked
  5873  003578  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5874  00357A  5C13               	subwf	?_GETxAPIxVAL,w,c
  5875  00357C  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5876  00357E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5877  003580  B0D8               	btfsc	status,0,c
  5878  003582  D02A               	goto	u6920
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;train_move_left.c: 131: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5882                           
  5883                           ; BSR set to: 0
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;train_move_left.c: 130: }
  5887                           
  5888                           ;train_move_left.c: 129: break;
  5889                           
  5890                           ;train_move_left.c: 128: Return_Val = 0;
  5891                           
  5892                           ;train_move_left.c: 127: Switch_Moutain = 0;
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;train_move_left.c: 125: {
  5896                           ;train_move_left.c: 126: Switch_Train_Move = 0;
  5897  003584  0E00               	movlw	0
  5898  003586  6E14               	movwf	GETxAPIxVAL@index+1,c
  5899  003588  0E1A               	movlw	26
  5900  00358A  6E13               	movwf	GETxAPIxVAL@index,c
  5901  00358C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5902  003590  5013               	movf	?_GETxAPIxVAL,w,c
  5903  003592  0100               	movlb	0	; () banked
  5904  003594  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5905  003596  5014               	movf	?_GETxAPIxVAL+1,w,c
  5906  003598  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5907  00359A  A0D8               	btfss	status,0,c
  5908  00359C  D037               	goto	l1084
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;train_move_left.c: 132: {
  5912                           ;train_move_left.c: 133: Train_Move_Pwm_Count--;
  5913  00359E  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5914  0035A0  A0D8               	btfss	status,0,c
  5915  0035A2  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5916  0035A4  D02E               	goto	l7968
  5917  0035A6                     l1075:
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;train_move_left.c: 138: else if (rc == 3){
  5921                           
  5922                           ; BSR set to: 0
  5923  0035A6  0E03               	movlw	3
  5924  0035A8  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5925  0035AA  A4D8               	btfss	status,2,c
  5926  0035AC  D031               	goto	l1085
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;train_move_left.c: 139: SETxPWM(Train_Move_Pwm_Count, 0);
  5930  0035AE  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5931  0035B2  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5932  0035B6  0E00               	movlw	0
  5933  0035B8  6E21               	movwf	SETxPWM@direction,c
  5934  0035BA  EC10  F01E         	call	_SETxPWM	;wreg free
  5935                           
  5936                           ;train_move_left.c: 140: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5937  0035BE  0E00               	movlw	0
  5938  0035C0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5939  0035C2  0E18               	movlw	24
  5940  0035C4  6E13               	movwf	GETxAPIxVAL@index,c
  5941  0035C6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5942  0035CA  5013               	movf	?_GETxAPIxVAL,w,c
  5943  0035CC  0100               	movlb	0	; () banked
  5944  0035CE  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5945  0035D0  5014               	movf	?_GETxAPIxVAL+1,w,c
  5946  0035D2  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5947  0035D4  A0D8               	btfss	status,0,c
  5948  0035D6  D006               	goto	l1082
  5949  0035D8                     u6920:
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;train_move_left.c: 141: {
  5953                           ;train_move_left.c: 142: Switch_Train_Move = 0;
  5954  0035D8  0E00               	movlw	0
  5955  0035DA  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5956                           
  5957                           ;train_move_left.c: 143: Switch_Moutain = 0;
  5958  0035DC  0E00               	movlw	0
  5959  0035DE  6E2E               	movwf	_Switch_Moutain,c
  5960                           
  5961                           ;train_move_left.c: 144: Return_Val = 0;
  5962  0035E0  0E00               	movlw	0
  5963  0035E2  D017               	goto	L78
  5964  0035E4                     l1082:
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;train_move_left.c: 147: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5968                           
  5969                           ; BSR set to: 0
  5970  0035E4  0E00               	movlw	0
  5971  0035E6  6E14               	movwf	GETxAPIxVAL@index+1,c
  5972  0035E8  0E1A               	movlw	26
  5973  0035EA  6E13               	movwf	GETxAPIxVAL@index,c
  5974  0035EC  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  5975  0035F0  5013               	movf	?_GETxAPIxVAL,w,c
  5976  0035F2  0100               	movlb	0	; () banked
  5977  0035F4  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5978  0035F6  5014               	movf	?_GETxAPIxVAL+1,w,c
  5979  0035F8  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5980  0035FA  A0D8               	btfss	status,0,c
  5981  0035FC  D007               	goto	l1084
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;train_move_left.c: 148: {
  5985                           ;train_move_left.c: 149: Train_Move_Pwm_Count++;
  5986  0035FE  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5987  003600  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5988  003602                     l7968:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;train_move_left.c: 150: Train_Move_Pwm_Fast_Count = 0;
  5992  003602  0E00               	movlw	0
  5993  003604  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5994  003606  0E00               	movlw	0
  5995  003608  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5996                           
  5997                           ;train_move_left.c: 151: }
  5998  00360A  D002               	goto	l1085
  5999  00360C                     l1084:
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;train_move_left.c: 152: else{Train_Move_Pwm_Fast_Count++;}
  6003                           
  6004                           ; BSR set to: 0
  6005  00360C  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6006  00360E  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6007  003610                     l1085:
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;train_move_left.c: 153: }
  6011                           ;train_move_left.c: 154: Return_Val = 1;
  6012                           
  6013                           ; BSR set to: 0
  6014                           
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018                           
  6019                           ; BSR set to: 0
  6020  003610  0E01               	movlw	1
  6021  003612                     L78:
  6022  003612  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;train_move_left.c: 159: }
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;train_move_left.c: 158: break;
  6029                           
  6030                           ;train_move_left.c: 157: default:
  6031                           
  6032                           ;train_move_left.c: 155: break;
  6033  003614  D007               	goto	l1073
  6034  003616                     l1067:
  6035                           
  6036                           ; BSR set to: 0
  6037  003616  502E               	movf	_Switch_Moutain,w,c
  6038                           
  6039                           ; Switch size 1, requested type "space"
  6040                           ; Number of cases is 2, Range of values is 0 to 1
  6041                           ; switch strategies available:
  6042                           ; Name         Instructions Cycles
  6043                           ; simple_byte            7     4 (average)
  6044                           ;	Chosen strategy is simple_byte
  6045  003618  0A00               	xorlw	0	; case 0
  6046  00361A  B4D8               	btfsc	status,2,c
  6047  00361C  D77E               	goto	l1068
  6048  00361E  0A01               	xorlw	1	; case 1
  6049  003620  B4D8               	btfsc	status,2,c
  6050  003622  D796               	goto	l1074
  6051  003624                     l1073:
  6052                           
  6053                           ;train_move_left.c: 161: return(Return_Val);
  6054  003624  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  6055  003626  0012               	return	
  6056  003628                     __end_of_Right_Mountain_From_The_Right:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           postdec1	equ	0xFE5
  6065                           fsr1l	equ	0xFE1
  6066                           status	equ	0xFD8
  6067                           
  6068 ;; *************** function _Right_Mountain_From_The_Left *****************
  6069 ;; Defined at:
  6070 ;;		line 179 in file "../train_move_right.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  rc              1    wreg     unsigned char 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  rc              1   21[BANK0 ] unsigned char 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      unsigned char 
  6077 ;; Registers used:
  6078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6084 ;;      Params:         0       0       0       0       0       0       0       0       0
  6085 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6087 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6088 ;;Total ram usage:        1 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    6
  6091 ;; This function calls:
  6092 ;;		_GETxAPIxVAL
  6093 ;;		_SETxPWM
  6094 ;; This function is called by:
  6095 ;;		_Train_Path
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text8
  6100  003628                     __ptext8:
  6101                           	opt stack 0
  6102  003628                     _Right_Mountain_From_The_Left:
  6103                           	opt stack 22
  6104                           
  6105                           ;incstack = 0
  6106                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6107  003628  0100               	movlb	0	; () banked
  6108  00362A  6FCB               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6109                           
  6110                           ;train_move_right.c: 181: static char Return_Val = 1;
  6111                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6112  00362C  D07E               	goto	l1195
  6113  00362E  0E04               	movlw	4
  6114  003630  0100               	movlb	0	; () banked
  6115  003632  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6116  003634  B4D8               	btfsc	status,2,c
  6117  003636  D00C               	goto	u6790
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  6121                           
  6122                           ; BSR set to: 0
  6123                           
  6124                           ;train_move_right.c: 187: }
  6125                           
  6126                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6130  003638  0E00               	movlw	0
  6131  00363A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6132  00363C  0E38               	movlw	56
  6133  00363E  6E13               	movwf	GETxAPIxVAL@index,c
  6134  003640  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6135  003644  5013               	movf	?_GETxAPIxVAL,w,c
  6136  003646  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6137  003648  5014               	movf	?_GETxAPIxVAL+1,w,c
  6138  00364A  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6139  00364C  A0D8               	btfss	status,0,c
  6140  00364E  D007               	goto	l1199
  6141  003650                     u6790:
  6142                           
  6143                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6144  003650  0E01               	movlw	1
  6145  003652  6E2E               	movwf	_Switch_Moutain,c
  6146                           
  6147                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6148  003654  0E00               	movlw	0
  6149  003656  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6150  003658  0E00               	movlw	0
  6151  00365A  6E26               	movwf	_Mountain_Delay_Counter,c
  6152                           
  6153                           ;train_move_right.c: 191: }
  6154  00365C  D063               	goto	l1213
  6155  00365E                     l1199:
  6156                           
  6157                           ;train_move_right.c: 192: else{
  6158                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6159  00365E  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6160  003660  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6161  003662  D060               	goto	l1213
  6162  003664  0E03               	movlw	3
  6163  003666  0100               	movlb	0	; () banked
  6164  003668  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6165  00366A  A4D8               	btfss	status,2,c
  6166  00366C  D025               	goto	l1203
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6170  00366E  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6171  003672  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6172  003676  0E01               	movlw	1
  6173  003678  6E21               	movwf	SETxPWM@direction,c
  6174  00367A  EC10  F01E         	call	_SETxPWM	;wreg free
  6175                           
  6176                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  6177  00367E  0E00               	movlw	0
  6178  003680  6E14               	movwf	GETxAPIxVAL@index+1,c
  6179  003682  0E2F               	movlw	47
  6180  003684  6E13               	movwf	GETxAPIxVAL@index,c
  6181  003686  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6182  00368A  5013               	movf	?_GETxAPIxVAL,w,c
  6183  00368C  0100               	movlb	0	; () banked
  6184  00368E  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6185  003690  5014               	movf	?_GETxAPIxVAL+1,w,c
  6186  003692  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6187  003694  B0D8               	btfsc	status,0,c
  6188  003696  D029               	goto	u6840
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6192                           
  6193                           ; BSR set to: 0
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;train_move_right.c: 206: }
  6197                           
  6198                           ;train_move_right.c: 205: break;
  6199                           
  6200                           ;train_move_right.c: 204: Return_Val = 0;
  6201                           
  6202                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;train_move_right.c: 201: {
  6206                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6207  003698  0E00               	movlw	0
  6208  00369A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6209  00369C  0E1A               	movlw	26
  6210  00369E  6E13               	movwf	GETxAPIxVAL@index,c
  6211  0036A0  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6212  0036A4  5013               	movf	?_GETxAPIxVAL,w,c
  6213  0036A6  0100               	movlb	0	; () banked
  6214  0036A8  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6215  0036AA  5014               	movf	?_GETxAPIxVAL+1,w,c
  6216  0036AC  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6217  0036AE  A0D8               	btfss	status,0,c
  6218  0036B0  D037               	goto	l1212
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;train_move_right.c: 208: {
  6222                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6223  0036B2  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6224  0036B4  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6225  0036B6  D02F               	goto	l7912
  6226  0036B8                     l1203:
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;train_move_right.c: 214: else if (rc == 4){
  6230                           
  6231                           ; BSR set to: 0
  6232  0036B8  0E04               	movlw	4
  6233  0036BA  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6234  0036BC  A4D8               	btfss	status,2,c
  6235  0036BE  D032               	goto	l1213
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6239  0036C0  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6240  0036C4  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6241  0036C8  0E01               	movlw	1
  6242  0036CA  6E21               	movwf	SETxPWM@direction,c
  6243  0036CC  EC10  F01E         	call	_SETxPWM	;wreg free
  6244                           
  6245                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  6246  0036D0  0E00               	movlw	0
  6247  0036D2  6E14               	movwf	GETxAPIxVAL@index+1,c
  6248  0036D4  0E17               	movlw	23
  6249  0036D6  6E13               	movwf	GETxAPIxVAL@index,c
  6250  0036D8  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6251  0036DC  0100               	movlb	0	; () banked
  6252  0036DE  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6253  0036E0  5C13               	subwf	?_GETxAPIxVAL,w,c
  6254  0036E2  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6255  0036E4  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6256  0036E6  A0D8               	btfss	status,0,c
  6257  0036E8  D006               	goto	l1210
  6258  0036EA                     u6840:
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;train_move_right.c: 217: {
  6262                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6263  0036EA  0E00               	movlw	0
  6264  0036EC  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6265                           
  6266                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6267  0036EE  0E00               	movlw	0
  6268  0036F0  6E2E               	movwf	_Switch_Moutain,c
  6269                           
  6270                           ;train_move_right.c: 220: Return_Val = 0;
  6271  0036F2  0E00               	movlw	0
  6272  0036F4  D018               	goto	L81
  6273  0036F6                     l1210:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6277                           
  6278                           ; BSR set to: 0
  6279  0036F6  0E00               	movlw	0
  6280  0036F8  6E14               	movwf	GETxAPIxVAL@index+1,c
  6281  0036FA  0E1A               	movlw	26
  6282  0036FC  6E13               	movwf	GETxAPIxVAL@index,c
  6283  0036FE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6284  003702  5013               	movf	?_GETxAPIxVAL,w,c
  6285  003704  0100               	movlb	0	; () banked
  6286  003706  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6287  003708  5014               	movf	?_GETxAPIxVAL+1,w,c
  6288  00370A  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6289  00370C  A0D8               	btfss	status,0,c
  6290  00370E  D008               	goto	l1212
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;train_move_right.c: 224: {
  6294                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  6295  003710  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6296  003712  A0D8               	btfss	status,0,c
  6297  003714  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6298  003716                     l7912:
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  6302  003716  0E00               	movlw	0
  6303  003718  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6304  00371A  0E00               	movlw	0
  6305  00371C  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6306                           
  6307                           ;train_move_right.c: 227: }
  6308  00371E  D002               	goto	l1213
  6309  003720                     l1212:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  6313                           
  6314                           ; BSR set to: 0
  6315  003720  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6316  003722  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6317  003724                     l1213:
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;train_move_right.c: 229: }
  6321                           ;train_move_right.c: 230: Return_Val = 1;
  6322                           
  6323                           ; BSR set to: 0
  6324                           
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328                           
  6329                           ; BSR set to: 0
  6330  003724  0E01               	movlw	1
  6331  003726                     L81:
  6332  003726  6E48               	movwf	Right_Mountain_From_The_Left@Return_Val,c
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;train_move_right.c: 235: }
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;train_move_right.c: 234: break;
  6339                           
  6340                           ;train_move_right.c: 233: default:
  6341                           
  6342                           ;train_move_right.c: 231: break;
  6343  003728  D007               	goto	l1201
  6344  00372A                     l1195:
  6345                           
  6346                           ; BSR set to: 0
  6347  00372A  502E               	movf	_Switch_Moutain,w,c
  6348                           
  6349                           ; Switch size 1, requested type "space"
  6350                           ; Number of cases is 2, Range of values is 0 to 1
  6351                           ; switch strategies available:
  6352                           ; Name         Instructions Cycles
  6353                           ; simple_byte            7     4 (average)
  6354                           ;	Chosen strategy is simple_byte
  6355  00372C  0A00               	xorlw	0	; case 0
  6356  00372E  B4D8               	btfsc	status,2,c
  6357  003730  D77E               	goto	l1196
  6358  003732  0A01               	xorlw	1	; case 1
  6359  003734  B4D8               	btfsc	status,2,c
  6360  003736  D796               	goto	l1202
  6361  003738                     l1201:
  6362                           
  6363                           ;train_move_right.c: 237: return(Return_Val);
  6364  003738  5048               	movf	Right_Mountain_From_The_Left@Return_Val,w,c
  6365  00373A  0012               	return	
  6366  00373C                     __end_of_Right_Mountain_From_The_Left:
  6367                           	opt stack 0
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           postinc0	equ	0xFEE
  6373                           wreg	equ	0xFE8
  6374                           postdec1	equ	0xFE5
  6375                           fsr1l	equ	0xFE1
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _Left_Mountain_From_The_Right *****************
  6379 ;; Defined at:
  6380 ;;		line 178 in file "../train_move_left.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  rc              1    wreg     unsigned char 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  rc              1   21[BANK0 ] unsigned char 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  1    wreg      unsigned char 
  6387 ;; Registers used:
  6388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0
  6395 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6397 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6398 ;;Total ram usage:        1 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    6
  6401 ;; This function calls:
  6402 ;;		_GETxAPIxVAL
  6403 ;;		_SETxPWM
  6404 ;; This function is called by:
  6405 ;;		_Train_Path
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text9
  6410  003962                     __ptext9:
  6411                           	opt stack 0
  6412  003962                     _Left_Mountain_From_The_Right:
  6413                           	opt stack 22
  6414                           
  6415                           ;incstack = 0
  6416                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6417  003962  0100               	movlb	0	; () banked
  6418  003964  6FCB               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6419                           
  6420                           ;train_move_left.c: 180: static char Return_Val = 1;
  6421                           ;train_move_left.c: 182: switch (Switch_Moutain){
  6422  003966  D07C               	goto	l1092
  6423  003968  0100               	movlb	0	; () banked
  6424  00396A  05CB               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6425  00396C  B4D8               	btfsc	status,2,c
  6426  00396E  D00C               	goto	u6950
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;train_move_left.c: 187: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6430                           
  6431                           ; BSR set to: 0
  6432                           
  6433                           ;train_move_left.c: 186: }
  6434                           
  6435                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;train_move_left.c: 184: Switch_Moutain = 1;
  6439  003970  0E00               	movlw	0
  6440  003972  6E14               	movwf	GETxAPIxVAL@index+1,c
  6441  003974  0E3A               	movlw	58
  6442  003976  6E13               	movwf	GETxAPIxVAL@index,c
  6443  003978  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6444  00397C  5013               	movf	?_GETxAPIxVAL,w,c
  6445  00397E  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6446  003980  5014               	movf	?_GETxAPIxVAL+1,w,c
  6447  003982  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6448  003984  A0D8               	btfss	status,0,c
  6449  003986  D007               	goto	l1096
  6450  003988                     u6950:
  6451                           
  6452                           ;train_move_left.c: 188: Switch_Moutain = 1;
  6453  003988  0E01               	movlw	1
  6454  00398A  6E2E               	movwf	_Switch_Moutain,c
  6455                           
  6456                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  6457  00398C  0E00               	movlw	0
  6458  00398E  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6459  003990  0E00               	movlw	0
  6460  003992  6E26               	movwf	_Mountain_Delay_Counter,c
  6461                           
  6462                           ;train_move_left.c: 190: }
  6463  003994  D062               	goto	l1110
  6464  003996                     l1096:
  6465                           
  6466                           ;train_move_left.c: 191: else{
  6467                           ;train_move_left.c: 192: Mountain_Delay_Counter++;
  6468  003996  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6469  003998  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6470  00399A  D05F               	goto	l1110
  6471  00399C  0E02               	movlw	2
  6472  00399E  0100               	movlb	0	; () banked
  6473  0039A0  19CB               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6474  0039A2  A4D8               	btfss	status,2,c
  6475  0039A4  D025               	goto	l1100
  6476                           
  6477                           ; BSR set to: 0
  6478                           ;train_move_left.c: 198: SETxPWM(Train_Move_Pwm_Count, 0);
  6479  0039A6  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6480  0039AA  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6481  0039AE  0E00               	movlw	0
  6482  0039B0  6E21               	movwf	SETxPWM@direction,c
  6483  0039B2  EC10  F01E         	call	_SETxPWM	;wreg free
  6484                           
  6485                           ;train_move_left.c: 199: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6486  0039B6  0E00               	movlw	0
  6487  0039B8  6E14               	movwf	GETxAPIxVAL@index+1,c
  6488  0039BA  0E34               	movlw	52
  6489  0039BC  6E13               	movwf	GETxAPIxVAL@index,c
  6490  0039BE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6491  0039C2  5013               	movf	?_GETxAPIxVAL,w,c
  6492  0039C4  0100               	movlb	0	; () banked
  6493  0039C6  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6494  0039C8  5014               	movf	?_GETxAPIxVAL+1,w,c
  6495  0039CA  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6496  0039CC  B0D8               	btfsc	status,0,c
  6497  0039CE  D028               	goto	u7000
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;train_move_left.c: 206: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6501                           
  6502                           ; BSR set to: 0
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;train_move_left.c: 205: }
  6506                           
  6507                           ;train_move_left.c: 204: break;
  6508                           
  6509                           ;train_move_left.c: 203: Return_Val = 0;
  6510                           
  6511                           ;train_move_left.c: 202: Switch_Moutain = 0;
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;train_move_left.c: 200: {
  6515                           ;train_move_left.c: 201: Switch_Train_Move = 0;
  6516  0039D0  0E00               	movlw	0
  6517  0039D2  6E14               	movwf	GETxAPIxVAL@index+1,c
  6518  0039D4  0E1A               	movlw	26
  6519  0039D6  6E13               	movwf	GETxAPIxVAL@index,c
  6520  0039D8  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6521  0039DC  5013               	movf	?_GETxAPIxVAL,w,c
  6522  0039DE  0100               	movlb	0	; () banked
  6523  0039E0  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6524  0039E2  5014               	movf	?_GETxAPIxVAL+1,w,c
  6525  0039E4  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6526  0039E6  A0D8               	btfss	status,0,c
  6527  0039E8  D036               	goto	l1109
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;train_move_left.c: 207: {
  6531                           ;train_move_left.c: 208: Train_Move_Pwm_Count++;
  6532  0039EA  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6533  0039EC  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6534  0039EE  D02E               	goto	l8024
  6535  0039F0                     l1100:
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;train_move_left.c: 213: else if (rc == 1){
  6539                           
  6540                           ; BSR set to: 0
  6541  0039F0  05CB               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6542  0039F2  A4D8               	btfss	status,2,c
  6543  0039F4  D032               	goto	l1110
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;train_move_left.c: 214: SETxPWM(Train_Move_Pwm_Count, 0);
  6547  0039F6  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6548  0039FA  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6549  0039FE  0E00               	movlw	0
  6550  003A00  6E21               	movwf	SETxPWM@direction,c
  6551  003A02  EC10  F01E         	call	_SETxPWM	;wreg free
  6552                           
  6553                           ;train_move_left.c: 215: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6554  003A06  0E00               	movlw	0
  6555  003A08  6E14               	movwf	GETxAPIxVAL@index+1,c
  6556  003A0A  0E18               	movlw	24
  6557  003A0C  6E13               	movwf	GETxAPIxVAL@index,c
  6558  003A0E  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6559  003A12  0100               	movlb	0	; () banked
  6560  003A14  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6561  003A16  5C13               	subwf	?_GETxAPIxVAL,w,c
  6562  003A18  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6563  003A1A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6564  003A1C  A0D8               	btfss	status,0,c
  6565  003A1E  D006               	goto	l1107
  6566  003A20                     u7000:
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;train_move_left.c: 216: {
  6570                           ;train_move_left.c: 217: Switch_Train_Move = 0;
  6571  003A20  0E00               	movlw	0
  6572  003A22  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6573                           
  6574                           ;train_move_left.c: 218: Switch_Moutain = 0;
  6575  003A24  0E00               	movlw	0
  6576  003A26  6E2E               	movwf	_Switch_Moutain,c
  6577                           
  6578                           ;train_move_left.c: 219: Return_Val = 0;
  6579  003A28  0E00               	movlw	0
  6580  003A2A  D018               	goto	L84
  6581  003A2C                     l1107:
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;train_move_left.c: 222: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6585                           
  6586                           ; BSR set to: 0
  6587  003A2C  0E00               	movlw	0
  6588  003A2E  6E14               	movwf	GETxAPIxVAL@index+1,c
  6589  003A30  0E1A               	movlw	26
  6590  003A32  6E13               	movwf	GETxAPIxVAL@index,c
  6591  003A34  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6592  003A38  5013               	movf	?_GETxAPIxVAL,w,c
  6593  003A3A  0100               	movlb	0	; () banked
  6594  003A3C  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6595  003A3E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6596  003A40  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6597  003A42  A0D8               	btfss	status,0,c
  6598  003A44  D008               	goto	l1109
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;train_move_left.c: 223: {
  6602                           ;train_move_left.c: 224: Train_Move_Pwm_Count--;
  6603  003A46  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6604  003A48  A0D8               	btfss	status,0,c
  6605  003A4A  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6606  003A4C                     l8024:
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;train_move_left.c: 225: Train_Move_Pwm_Fast_Count = 0;
  6610  003A4C  0E00               	movlw	0
  6611  003A4E  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6612  003A50  0E00               	movlw	0
  6613  003A52  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6614                           
  6615                           ;train_move_left.c: 226: }
  6616  003A54  D002               	goto	l1110
  6617  003A56                     l1109:
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;train_move_left.c: 227: else{Train_Move_Pwm_Fast_Count++;}
  6621                           
  6622                           ; BSR set to: 0
  6623  003A56  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6624  003A58  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6625  003A5A                     l1110:
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;train_move_left.c: 228: }
  6629                           ;train_move_left.c: 229: Return_Val = 1;
  6630                           
  6631                           ; BSR set to: 0
  6632                           
  6633                           ; BSR set to: 0
  6634                           
  6635                           ; BSR set to: 0
  6636                           
  6637                           ; BSR set to: 0
  6638  003A5A  0E01               	movlw	1
  6639  003A5C                     L84:
  6640  003A5C  6E4A               	movwf	Left_Mountain_From_The_Right@Return_Val,c
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;train_move_left.c: 234: }
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;train_move_left.c: 233: break;
  6647                           
  6648                           ;train_move_left.c: 232: default:
  6649                           
  6650                           ;train_move_left.c: 230: break;
  6651  003A5E  D007               	goto	l1098
  6652  003A60                     l1092:
  6653                           
  6654                           ; BSR set to: 0
  6655  003A60  502E               	movf	_Switch_Moutain,w,c
  6656                           
  6657                           ; Switch size 1, requested type "space"
  6658                           ; Number of cases is 2, Range of values is 0 to 1
  6659                           ; switch strategies available:
  6660                           ; Name         Instructions Cycles
  6661                           ; simple_byte            7     4 (average)
  6662                           ;	Chosen strategy is simple_byte
  6663  003A62  0A00               	xorlw	0	; case 0
  6664  003A64  B4D8               	btfsc	status,2,c
  6665  003A66  D780               	goto	l1093
  6666  003A68  0A01               	xorlw	1	; case 1
  6667  003A6A  B4D8               	btfsc	status,2,c
  6668  003A6C  D797               	goto	l1099
  6669  003A6E                     l1098:
  6670                           
  6671                           ;train_move_left.c: 236: return(Return_Val);
  6672  003A6E  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  6673  003A70  0012               	return	
  6674  003A72                     __end_of_Left_Mountain_From_The_Right:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           postinc0	equ	0xFEE
  6681                           wreg	equ	0xFE8
  6682                           postdec1	equ	0xFE5
  6683                           fsr1l	equ	0xFE1
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _Left_Mountain_From_The_Left *****************
  6687 ;; Defined at:
  6688 ;;		line 104 in file "../train_move_right.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;  rc              1    wreg     unsigned char 
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  rc              1   21[BANK0 ] unsigned char 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      unsigned char 
  6695 ;; Registers used:
  6696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0
  6703 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6705 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6706 ;;Total ram usage:        1 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    6
  6709 ;; This function calls:
  6710 ;;		_GETxAPIxVAL
  6711 ;;		_SETxPWM
  6712 ;; This function is called by:
  6713 ;;		_Train_Path
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text10
  6718  003850                     __ptext10:
  6719                           	opt stack 0
  6720  003850                     _Left_Mountain_From_The_Left:
  6721                           	opt stack 22
  6722                           
  6723                           ;incstack = 0
  6724                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6725  003850  0100               	movlb	0	; () banked
  6726  003852  6FCB               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6727                           
  6728                           ;train_move_right.c: 106: static char Return_Val = 1;
  6729                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6730  003854  D07D               	goto	l1170
  6731  003856  0E02               	movlw	2
  6732  003858  0100               	movlb	0	; () banked
  6733  00385A  19CB               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6734  00385C  B4D8               	btfsc	status,2,c
  6735  00385E  D00C               	goto	u6710
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6739                           
  6740                           ; BSR set to: 0
  6741                           
  6742                           ;train_move_right.c: 112: }
  6743                           
  6744                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6748  003860  0E00               	movlw	0
  6749  003862  6E14               	movwf	GETxAPIxVAL@index+1,c
  6750  003864  0E3B               	movlw	59
  6751  003866  6E13               	movwf	GETxAPIxVAL@index,c
  6752  003868  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6753  00386C  5013               	movf	?_GETxAPIxVAL,w,c
  6754  00386E  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6755  003870  5014               	movf	?_GETxAPIxVAL+1,w,c
  6756  003872  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6757  003874  A0D8               	btfss	status,0,c
  6758  003876  D007               	goto	l1174
  6759  003878                     u6710:
  6760                           
  6761                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6762  003878  0E01               	movlw	1
  6763  00387A  6E2E               	movwf	_Switch_Moutain,c
  6764                           
  6765                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6766  00387C  0E00               	movlw	0
  6767  00387E  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6768  003880  0E00               	movlw	0
  6769  003882  6E26               	movwf	_Mountain_Delay_Counter,c
  6770                           
  6771                           ;train_move_right.c: 116: }
  6772  003884  D062               	goto	l1188
  6773  003886                     l1174:
  6774                           
  6775                           ;train_move_right.c: 117: else{
  6776                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  6777  003886  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6778  003888  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6779  00388A  D05F               	goto	l1188
  6780  00388C  0100               	movlb	0	; () banked
  6781  00388E  05CB               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6782  003890  A4D8               	btfss	status,2,c
  6783  003892  D026               	goto	l1178
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  6787  003894  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6788  003898  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6789  00389C  0E01               	movlw	1
  6790  00389E  6E21               	movwf	SETxPWM@direction,c
  6791  0038A0  EC10  F01E         	call	_SETxPWM	;wreg free
  6792                           
  6793                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  6794  0038A4  0E00               	movlw	0
  6795  0038A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  6796  0038A8  0E31               	movlw	49
  6797  0038AA  6E13               	movwf	GETxAPIxVAL@index,c
  6798  0038AC  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6799  0038B0  0100               	movlb	0	; () banked
  6800  0038B2  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6801  0038B4  5C13               	subwf	?_GETxAPIxVAL,w,c
  6802  0038B6  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6803  0038B8  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6804  0038BA  B0D8               	btfsc	status,0,c
  6805  0038BC  D02A               	goto	u6760
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6809                           
  6810                           ; BSR set to: 0
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;train_move_right.c: 131: }
  6814                           
  6815                           ;train_move_right.c: 130: break;
  6816                           
  6817                           ;train_move_right.c: 129: Return_Val = 0;
  6818                           
  6819                           ;train_move_right.c: 128: Switch_Moutain = 0;
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;train_move_right.c: 126: {
  6823                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  6824  0038BE  0E00               	movlw	0
  6825  0038C0  6E14               	movwf	GETxAPIxVAL@index+1,c
  6826  0038C2  0E1A               	movlw	26
  6827  0038C4  6E13               	movwf	GETxAPIxVAL@index,c
  6828  0038C6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6829  0038CA  5013               	movf	?_GETxAPIxVAL,w,c
  6830  0038CC  0100               	movlb	0	; () banked
  6831  0038CE  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6832  0038D0  5014               	movf	?_GETxAPIxVAL+1,w,c
  6833  0038D2  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6834  0038D4  A0D8               	btfss	status,0,c
  6835  0038D6  D037               	goto	l1187
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;train_move_right.c: 133: {
  6839                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  6840  0038D8  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6841  0038DA  A0D8               	btfss	status,0,c
  6842  0038DC  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6843  0038DE  D02E               	goto	l7856
  6844  0038E0                     l1178:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;train_move_right.c: 139: else if (rc == 2){
  6848                           
  6849                           ; BSR set to: 0
  6850  0038E0  0E02               	movlw	2
  6851  0038E2  19CB               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6852  0038E4  A4D8               	btfss	status,2,c
  6853  0038E6  D031               	goto	l1188
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  6857  0038E8  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6858  0038EC  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6859  0038F0  0E01               	movlw	1
  6860  0038F2  6E21               	movwf	SETxPWM@direction,c
  6861  0038F4  EC10  F01E         	call	_SETxPWM	;wreg free
  6862                           
  6863                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  6864  0038F8  0E00               	movlw	0
  6865  0038FA  6E14               	movwf	GETxAPIxVAL@index+1,c
  6866  0038FC  0E17               	movlw	23
  6867  0038FE  6E13               	movwf	GETxAPIxVAL@index,c
  6868  003900  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6869  003904  5013               	movf	?_GETxAPIxVAL,w,c
  6870  003906  0100               	movlb	0	; () banked
  6871  003908  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6872  00390A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6873  00390C  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6874  00390E  A0D8               	btfss	status,0,c
  6875  003910  D006               	goto	l1185
  6876  003912                     u6760:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;train_move_right.c: 142: {
  6880                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  6881  003912  0E00               	movlw	0
  6882  003914  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6883                           
  6884                           ;train_move_right.c: 144: Switch_Moutain = 0;
  6885  003916  0E00               	movlw	0
  6886  003918  6E2E               	movwf	_Switch_Moutain,c
  6887                           
  6888                           ;train_move_right.c: 145: Return_Val = 0;
  6889  00391A  0E00               	movlw	0
  6890  00391C  D017               	goto	L87
  6891  00391E                     l1185:
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6895                           
  6896                           ; BSR set to: 0
  6897  00391E  0E00               	movlw	0
  6898  003920  6E14               	movwf	GETxAPIxVAL@index+1,c
  6899  003922  0E1A               	movlw	26
  6900  003924  6E13               	movwf	GETxAPIxVAL@index,c
  6901  003926  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  6902  00392A  5013               	movf	?_GETxAPIxVAL,w,c
  6903  00392C  0100               	movlb	0	; () banked
  6904  00392E  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6905  003930  5014               	movf	?_GETxAPIxVAL+1,w,c
  6906  003932  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6907  003934  A0D8               	btfss	status,0,c
  6908  003936  D007               	goto	l1187
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;train_move_right.c: 149: {
  6912                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  6913  003938  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6914  00393A  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6915  00393C                     l7856:
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  6919  00393C  0E00               	movlw	0
  6920  00393E  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6921  003940  0E00               	movlw	0
  6922  003942  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6923                           
  6924                           ;train_move_right.c: 152: }
  6925  003944  D002               	goto	l1188
  6926  003946                     l1187:
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  6930                           
  6931                           ; BSR set to: 0
  6932  003946  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6933  003948  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6934  00394A                     l1188:
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;train_move_right.c: 154: }
  6938                           ;train_move_right.c: 155: Return_Val = 1;
  6939                           
  6940                           ; BSR set to: 0
  6941                           
  6942                           ; BSR set to: 0
  6943                           
  6944                           ; BSR set to: 0
  6945                           
  6946                           ; BSR set to: 0
  6947  00394A  0E01               	movlw	1
  6948  00394C                     L87:
  6949  00394C  6E49               	movwf	Left_Mountain_From_The_Left@Return_Val,c
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;train_move_right.c: 160: }
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;train_move_right.c: 159: break;
  6956                           
  6957                           ;train_move_right.c: 158: default:
  6958                           
  6959                           ;train_move_right.c: 156: break;
  6960  00394E  D007               	goto	l1176
  6961  003950                     l1170:
  6962                           
  6963                           ; BSR set to: 0
  6964  003950  502E               	movf	_Switch_Moutain,w,c
  6965                           
  6966                           ; Switch size 1, requested type "space"
  6967                           ; Number of cases is 2, Range of values is 0 to 1
  6968                           ; switch strategies available:
  6969                           ; Name         Instructions Cycles
  6970                           ; simple_byte            7     4 (average)
  6971                           ;	Chosen strategy is simple_byte
  6972  003952  0A00               	xorlw	0	; case 0
  6973  003954  B4D8               	btfsc	status,2,c
  6974  003956  D77F               	goto	l1171
  6975  003958  0A01               	xorlw	1	; case 1
  6976  00395A  B4D8               	btfsc	status,2,c
  6977  00395C  D797               	goto	l1177
  6978  00395E                     l1176:
  6979                           
  6980                           ;train_move_right.c: 162: return(Return_Val);
  6981  00395E  5049               	movf	Left_Mountain_From_The_Left@Return_Val,w,c
  6982  003960  0012               	return	
  6983  003962                     __end_of_Left_Mountain_From_The_Left:
  6984                           	opt stack 0
  6985                           tblptru	equ	0xFF8
  6986                           tblptrh	equ	0xFF7
  6987                           tblptrl	equ	0xFF6
  6988                           tablat	equ	0xFF5
  6989                           postinc0	equ	0xFEE
  6990                           wreg	equ	0xFE8
  6991                           postdec1	equ	0xFE5
  6992                           fsr1l	equ	0xFE1
  6993                           status	equ	0xFD8
  6994                           
  6995 ;; *************** function _SETxPWM *****************
  6996 ;; Defined at:
  6997 ;;		line 20 in file "../set_pwm.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;  speed           2   30[COMRAM] unsigned int 
  7000 ;;  direction       1   32[COMRAM] unsigned char 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  pwm_speed       2   35[COMRAM] unsigned int 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7012 ;;      Params:         3       0       0       0       0       0       0       0       0
  7013 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7014 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7015 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7016 ;;Total ram usage:        7 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    5
  7019 ;; This function calls:
  7020 ;;		_GETxAPIxVAL
  7021 ;;		_SETxAPIxVAL
  7022 ;; This function is called by:
  7023 ;;		_Update_StateMchn
  7024 ;;		_Train_Move_Left_Start
  7025 ;;		_Right_Mountain_From_The_Right
  7026 ;;		_Left_Mountain_From_The_Right
  7027 ;;		_Train_Move_Left_Brake
  7028 ;;		_Train_Move_Right_Start
  7029 ;;		_Left_Mountain_From_The_Left
  7030 ;;		_Right_Mountain_From_The_Left
  7031 ;;		_Train_Move_Right_Brake
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text11
  7036  003C20                     __ptext11:
  7037                           	opt stack 0
  7038  003C20                     _SETxPWM:
  7039                           	opt stack 22
  7040                           
  7041                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7042                           
  7043                           ;incstack = 0
  7044  003C20  0E01               	movlw	1
  7045  003C22  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7046  003C24  6824               	setf	SETxPWM@pwm_speed,c
  7047                           
  7048                           ;set_pwm.c: 24: if (GETxAPIxVAL(86) != direction){
  7049  003C26  5021               	movf	SETxPWM@direction,w,c
  7050  003C28  6E22               	movwf	??_SETxPWM& (0+255),c
  7051  003C2A  6A23               	clrf	(??_SETxPWM+1)& (0+255),c
  7052  003C2C  0E00               	movlw	0
  7053  003C2E  6E14               	movwf	GETxAPIxVAL@index+1,c
  7054  003C30  0E56               	movlw	86
  7055  003C32  6E13               	movwf	GETxAPIxVAL@index,c
  7056  003C34  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  7057  003C38  5022               	movf	??_SETxPWM,w,c
  7058  003C3A  1813               	xorwf	?_GETxAPIxVAL,w,c
  7059  003C3C  E104               	bnz	u6400
  7060  003C3E  5023               	movf	??_SETxPWM+1,w,c
  7061  003C40  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  7062  003C42  B4D8               	btfsc	status,2,c
  7063  003C44  D009               	goto	l1243
  7064  003C46                     u6400:
  7065                           
  7066                           ;set_pwm.c: 25: SETxAPIxVAL(86, direction);
  7067  003C46  0E00               	movlw	0
  7068  003C48  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7069  003C4A  0E56               	movlw	86
  7070  003C4C  6E19               	movwf	SETxAPIxVAL@index,c
  7071  003C4E  C021  F01B         	movff	SETxPWM@direction,SETxAPIxVAL@value
  7072  003C52  6A1C               	clrf	SETxAPIxVAL@value+1,c
  7073  003C54  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7074  003C58                     l1243:
  7075                           
  7076                           ;set_pwm.c: 26: }
  7077                           ;set_pwm.c: 28: if (direction == 0){
  7078  003C58  5021               	movf	SETxPWM@direction,w,c
  7079  003C5A  A4D8               	btfss	status,2,c
  7080  003C5C  D01C               	goto	l1244
  7081                           
  7082                           ;set_pwm.c: 29: pwm_speed = 511 - (speed * 2);
  7083  003C5E  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7084  003C62  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7085  003C66  90D8               	bcf	status,0,c
  7086  003C68  3622               	rlcf	??_SETxPWM,f,c
  7087  003C6A  3623               	rlcf	??_SETxPWM+1,f,c
  7088  003C6C  1E22               	comf	??_SETxPWM,f,c
  7089  003C6E  1E23               	comf	??_SETxPWM+1,f,c
  7090  003C70  4A22               	infsnz	??_SETxPWM,f,c
  7091  003C72  2A23               	incf	??_SETxPWM+1,f,c
  7092  003C74  0EFF               	movlw	255
  7093  003C76  2422               	addwf	??_SETxPWM,w,c
  7094  003C78  6E24               	movwf	SETxPWM@pwm_speed,c
  7095  003C7A  0E01               	movlw	1
  7096  003C7C  2023               	addwfc	??_SETxPWM+1,w,c
  7097  003C7E  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7098                           
  7099                           ;set_pwm.c: 30: SETxAPIxVAL(88, pwm_speed);
  7100  003C80  0E00               	movlw	0
  7101  003C82  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7102  003C84  0E58               	movlw	88
  7103  003C86  6E19               	movwf	SETxAPIxVAL@index,c
  7104  003C88  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7105  003C8C  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7106  003C90  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7107                           
  7108                           ;set_pwm.c: 31: }
  7109  003C94  0012               	return	
  7110  003C96                     l1244:
  7111                           
  7112                           ;set_pwm.c: 32: else if (direction == 1){
  7113  003C96  0421               	decf	SETxPWM@direction,w,c
  7114  003C98  A4D8               	btfss	status,2,c
  7115  003C9A  0012               	return	
  7116                           
  7117                           ;set_pwm.c: 33: pwm_speed = 511 + (speed * 2);
  7118  003C9C  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7119  003CA0  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7120  003CA4  90D8               	bcf	status,0,c
  7121  003CA6  3622               	rlcf	??_SETxPWM,f,c
  7122  003CA8  3623               	rlcf	??_SETxPWM+1,f,c
  7123  003CAA  0EFF               	movlw	255
  7124  003CAC  2422               	addwf	??_SETxPWM,w,c
  7125  003CAE  6E24               	movwf	SETxPWM@pwm_speed,c
  7126  003CB0  0E01               	movlw	1
  7127  003CB2  2023               	addwfc	??_SETxPWM+1,w,c
  7128  003CB4  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7129                           
  7130                           ;set_pwm.c: 34: SETxAPIxVAL(88, pwm_speed);
  7131  003CB6  0E00               	movlw	0
  7132  003CB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7133  003CBA  0E58               	movlw	88
  7134  003CBC  6E19               	movwf	SETxAPIxVAL@index,c
  7135  003CBE  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7136  003CC2  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7137  003CC6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7138  003CCA  0012               	return	
  7139  003CCC                     __end_of_SETxPWM:
  7140                           	opt stack 0
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           postinc0	equ	0xFEE
  7146                           wreg	equ	0xFE8
  7147                           postdec1	equ	0xFE5
  7148                           fsr1l	equ	0xFE1
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _Junction *****************
  7152 ;; Defined at:
  7153 ;;		line 26 in file "../junction.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  Junction_Lef    1    wreg     unsigned char 
  7156 ;;  Straight_Ben    1   30[COMRAM] unsigned char 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  Junction_Lef    1   31[COMRAM] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  1    wreg      unsigned char 
  7161 ;; Registers used:
  7162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7168 ;;      Params:         1       0       0       0       0       0       0       0       0
  7169 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7171 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7172 ;;Total ram usage:        2 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    5
  7175 ;; This function calls:
  7176 ;;		_GETxAPIxVAL
  7177 ;;		_SETxAPIxVAL
  7178 ;; This function is called by:
  7179 ;;		_Update_StateMchn
  7180 ;;		_Train_Path
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           	psect	text12
  7185  002A8A                     __ptext12:
  7186                           	opt stack 0
  7187  002A8A                     _Junction:
  7188                           	opt stack 23
  7189                           
  7190                           ;incstack = 0
  7191                           ;Junction@Junction_Left_Right stored from wreg
  7192  002A8A  6E20               	movwf	Junction@Junction_Left_Right,c
  7193                           
  7194                           ;junction.c: 28: static char Return_Val = 1;
  7195                           ;junction.c: 29: static unsigned int Junction_Switch_Time = 0;
  7196                           ;junction.c: 31: switch (Switch_Junction)
  7197  002A8C  D0E2               	goto	l1004
  7198  002A8E  0E01               	movlw	1
  7199  002A90  6E4C               	movwf	Junction@Return_Val,c
  7200                           
  7201                           ;junction.c: 34: switch (Junction_Left_Right)
  7202  002A92  D08C               	goto	l1006
  7203  002A94  0E00               	movlw	0
  7204  002A96  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7205  002A98  0E40               	movlw	64
  7206  002A9A  6E19               	movwf	SETxAPIxVAL@index,c
  7207  002A9C  0E00               	movlw	0
  7208  002A9E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7209  002AA0  0E01               	movlw	1
  7210  002AA2  6E1B               	movwf	SETxAPIxVAL@value,c
  7211  002AA4  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7212                           
  7213                           ;junction.c: 39: SETxAPIxVAL(82, 1);
  7214  002AA8  0E00               	movlw	0
  7215  002AAA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7216  002AAC  0E52               	movlw	82
  7217  002AAE  6E19               	movwf	SETxAPIxVAL@index,c
  7218  002AB0  0E00               	movlw	0
  7219  002AB2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7220  002AB4  0E01               	movlw	1
  7221  002AB6  6E1B               	movwf	SETxAPIxVAL@value,c
  7222  002AB8  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7223                           
  7224                           ;junction.c: 40: SETxAPIxVAL(83, 0);
  7225  002ABC  0E00               	movlw	0
  7226  002ABE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7227  002AC0  0E53               	movlw	83
  7228  002AC2  6E19               	movwf	SETxAPIxVAL@index,c
  7229  002AC4  0E00               	movlw	0
  7230  002AC6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7231  002AC8  0E00               	movlw	0
  7232  002ACA  6E1B               	movwf	SETxAPIxVAL@value,c
  7233  002ACC  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7234                           
  7235                           ;junction.c: 41: break;
  7236  002AD0  D074               	goto	l1013
  7237  002AD2  0E00               	movlw	0
  7238  002AD4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7239  002AD6  0E41               	movlw	65
  7240  002AD8  6E19               	movwf	SETxAPIxVAL@index,c
  7241  002ADA  0E00               	movlw	0
  7242  002ADC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7243  002ADE  0E01               	movlw	1
  7244  002AE0  6E1B               	movwf	SETxAPIxVAL@value,c
  7245  002AE2  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7246                           
  7247                           ;junction.c: 43: SETxAPIxVAL(82, 0);
  7248  002AE6  0E00               	movlw	0
  7249  002AE8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7250  002AEA  0E52               	movlw	82
  7251  002AEC  6E19               	movwf	SETxAPIxVAL@index,c
  7252  002AEE  0E00               	movlw	0
  7253  002AF0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7254  002AF2  0E00               	movlw	0
  7255  002AF4  6E1B               	movwf	SETxAPIxVAL@value,c
  7256  002AF6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7257                           
  7258                           ;junction.c: 44: SETxAPIxVAL(83, 1);
  7259  002AFA  0E00               	movlw	0
  7260  002AFC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7261  002AFE  0E53               	movlw	83
  7262  002B00  6E19               	movwf	SETxAPIxVAL@index,c
  7263  002B02  0E00               	movlw	0
  7264  002B04  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7265  002B06  0E01               	movlw	1
  7266  002B08  6E1B               	movwf	SETxAPIxVAL@value,c
  7267  002B0A  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7268                           
  7269                           ;junction.c: 47: }
  7270                           
  7271                           ;junction.c: 46: default : break;
  7272                           
  7273                           ;junction.c: 45: break;
  7274  002B0E  D055               	goto	l1013
  7275  002B10  501F               	movf	Junction@Straight_Bend,w,c
  7276                           
  7277                           ; Switch size 1, requested type "space"
  7278                           ; Number of cases is 2, Range of values is 0 to 1
  7279                           ; switch strategies available:
  7280                           ; Name         Instructions Cycles
  7281                           ; simple_byte            7     4 (average)
  7282                           ;	Chosen strategy is simple_byte
  7283  002B12  0A00               	xorlw	0	; case 0
  7284  002B14  B4D8               	btfsc	status,2,c
  7285  002B16  D7BE               	goto	l1009
  7286  002B18  0A01               	xorlw	1	; case 1
  7287  002B1A  B4D8               	btfsc	status,2,c
  7288  002B1C  D7DA               	goto	l1011
  7289                           
  7290                           ;junction.c: 48: break;
  7291  002B1E  D04D               	goto	l1013
  7292  002B20  0E00               	movlw	0
  7293  002B22  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7294  002B24  0E42               	movlw	66
  7295  002B26  6E19               	movwf	SETxAPIxVAL@index,c
  7296  002B28  0E00               	movlw	0
  7297  002B2A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7298  002B2C  0E01               	movlw	1
  7299  002B2E  6E1B               	movwf	SETxAPIxVAL@value,c
  7300  002B30  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7301                           
  7302                           ;junction.c: 53: SETxAPIxVAL(84, 1);
  7303  002B34  0E00               	movlw	0
  7304  002B36  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7305  002B38  0E54               	movlw	84
  7306  002B3A  6E19               	movwf	SETxAPIxVAL@index,c
  7307  002B3C  0E00               	movlw	0
  7308  002B3E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7309  002B40  0E01               	movlw	1
  7310  002B42  6E1B               	movwf	SETxAPIxVAL@value,c
  7311  002B44  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7312                           
  7313                           ;junction.c: 54: SETxAPIxVAL(85, 0);
  7314  002B48  0E00               	movlw	0
  7315  002B4A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7316  002B4C  0E55               	movlw	85
  7317  002B4E  6E19               	movwf	SETxAPIxVAL@index,c
  7318  002B50  0E00               	movlw	0
  7319  002B52  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7320  002B54  0E00               	movlw	0
  7321  002B56  6E1B               	movwf	SETxAPIxVAL@value,c
  7322  002B58  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7323                           
  7324                           ;junction.c: 55: break;
  7325  002B5C  D02E               	goto	l1013
  7326  002B5E  0E00               	movlw	0
  7327  002B60  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7328  002B62  0E43               	movlw	67
  7329  002B64  6E19               	movwf	SETxAPIxVAL@index,c
  7330  002B66  0E00               	movlw	0
  7331  002B68  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7332  002B6A  0E01               	movlw	1
  7333  002B6C  6E1B               	movwf	SETxAPIxVAL@value,c
  7334  002B6E  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7335                           
  7336                           ;junction.c: 57: SETxAPIxVAL(84, 0);
  7337  002B72  0E00               	movlw	0
  7338  002B74  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7339  002B76  0E54               	movlw	84
  7340  002B78  6E19               	movwf	SETxAPIxVAL@index,c
  7341  002B7A  0E00               	movlw	0
  7342  002B7C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7343  002B7E  0E00               	movlw	0
  7344  002B80  6E1B               	movwf	SETxAPIxVAL@value,c
  7345  002B82  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7346                           
  7347                           ;junction.c: 58: SETxAPIxVAL(85, 1);
  7348  002B86  0E00               	movlw	0
  7349  002B88  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7350  002B8A  0E55               	movlw	85
  7351  002B8C  6E19               	movwf	SETxAPIxVAL@index,c
  7352  002B8E  0E00               	movlw	0
  7353  002B90  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7354  002B92  0E01               	movlw	1
  7355  002B94  6E1B               	movwf	SETxAPIxVAL@value,c
  7356  002B96  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7357                           
  7358                           ;junction.c: 61: }
  7359                           
  7360                           ;junction.c: 60: default : break;
  7361                           
  7362                           ;junction.c: 59: break;
  7363  002B9A  D00F               	goto	l1013
  7364  002B9C  501F               	movf	Junction@Straight_Bend,w,c
  7365                           
  7366                           ; Switch size 1, requested type "space"
  7367                           ; Number of cases is 2, Range of values is 0 to 1
  7368                           ; switch strategies available:
  7369                           ; Name         Instructions Cycles
  7370                           ; simple_byte            7     4 (average)
  7371                           ;	Chosen strategy is simple_byte
  7372  002B9E  0A00               	xorlw	0	; case 0
  7373  002BA0  B4D8               	btfsc	status,2,c
  7374  002BA2  D7BE               	goto	l1016
  7375  002BA4  0A01               	xorlw	1	; case 1
  7376  002BA6  B4D8               	btfsc	status,2,c
  7377  002BA8  D7DA               	goto	l1018
  7378                           
  7379                           ;junction.c: 65: }
  7380                           
  7381                           ;junction.c: 64: default : break;
  7382                           
  7383                           ;junction.c: 62: break;
  7384  002BAA  D007               	goto	l1013
  7385  002BAC                     l1006:
  7386  002BAC  5020               	movf	Junction@Junction_Left_Right,w,c
  7387                           
  7388                           ; Switch size 1, requested type "space"
  7389                           ; Number of cases is 2, Range of values is 0 to 1
  7390                           ; switch strategies available:
  7391                           ; Name         Instructions Cycles
  7392                           ; simple_byte            7     4 (average)
  7393                           ;	Chosen strategy is simple_byte
  7394  002BAE  0A00               	xorlw	0	; case 0
  7395  002BB0  B4D8               	btfsc	status,2,c
  7396  002BB2  D7AE               	goto	l1008
  7397  002BB4  0A01               	xorlw	1	; case 1
  7398  002BB6  B4D8               	btfsc	status,2,c
  7399  002BB8  D7F1               	goto	l1015
  7400  002BBA                     l1013:
  7401                           
  7402                           ;junction.c: 66: Switch_Junction = 1;
  7403  002BBA  0E01               	movlw	1
  7404  002BBC  6E2F               	movwf	_Switch_Junction,c
  7405                           
  7406                           ;junction.c: 67: break;
  7407  002BBE  D053               	goto	l1021
  7408  002BC0  0E00               	movlw	0
  7409  002BC2  6E14               	movwf	GETxAPIxVAL@index+1,c
  7410  002BC4  0E13               	movlw	19
  7411  002BC6  6E13               	movwf	GETxAPIxVAL@index,c
  7412  002BC8  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  7413  002BCC  5013               	movf	?_GETxAPIxVAL,w,c
  7414  002BCE  0100               	movlb	0	; () banked
  7415  002BD0  5D6A               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7416  002BD2  5014               	movf	?_GETxAPIxVAL+1,w,c
  7417  002BD4  596B               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7418  002BD6  A0D8               	btfss	status,0,c
  7419  002BD8  D008               	goto	l1023
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;junction.c: 70: {
  7423                           ;junction.c: 71: Switch_Junction = 2;
  7424  002BDA  0E02               	movlw	2
  7425  002BDC  6E2F               	movwf	_Switch_Junction,c
  7426                           
  7427                           ;junction.c: 72: Junction_Switch_Time = 0;
  7428  002BDE  0E00               	movlw	0
  7429  002BE0  6F6B               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7430  002BE2  0E00               	movlw	0
  7431  002BE4  6F6A               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7432                           
  7433                           ;junction.c: 73: Return_Val = 1;
  7434  002BE6  0E01               	movlw	1
  7435  002BE8  D032               	goto	L88
  7436  002BEA                     l1023:
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;junction.c: 75: }
  7440                           ;junction.c: 76: Return_Val = 1;
  7441                           
  7442                           ; BSR set to: 0
  7443  002BEA  0E01               	movlw	1
  7444  002BEC  6E4C               	movwf	Junction@Return_Val,c
  7445                           
  7446                           ;junction.c: 77: Switch_Junction = 1;
  7447  002BEE  0E01               	movlw	1
  7448  002BF0  6E2F               	movwf	_Switch_Junction,c
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;junction.c: 78: Junction_Switch_Time++;
  7452  002BF2  4B6A               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7453  002BF4  2B6B               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7454                           
  7455                           ;junction.c: 79: break;
  7456  002BF6  D037               	goto	l1021
  7457  002BF8                     
  7458                           ; BSR set to: 0
  7459  002BF8  0E00               	movlw	0
  7460  002BFA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7461  002BFC  0E40               	movlw	64
  7462  002BFE  6E19               	movwf	SETxAPIxVAL@index,c
  7463  002C00  0E00               	movlw	0
  7464  002C02  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7465  002C04  0E00               	movlw	0
  7466  002C06  6E1B               	movwf	SETxAPIxVAL@value,c
  7467  002C08  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7468                           
  7469                           ;junction.c: 82: SETxAPIxVAL(65, 0);
  7470  002C0C  0E00               	movlw	0
  7471  002C0E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7472  002C10  0E41               	movlw	65
  7473  002C12  6E19               	movwf	SETxAPIxVAL@index,c
  7474  002C14  0E00               	movlw	0
  7475  002C16  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7476  002C18  0E00               	movlw	0
  7477  002C1A  6E1B               	movwf	SETxAPIxVAL@value,c
  7478  002C1C  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7479                           
  7480                           ;junction.c: 83: SETxAPIxVAL(66,0);
  7481  002C20  0E00               	movlw	0
  7482  002C22  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7483  002C24  0E42               	movlw	66
  7484  002C26  6E19               	movwf	SETxAPIxVAL@index,c
  7485  002C28  0E00               	movlw	0
  7486  002C2A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7487  002C2C  0E00               	movlw	0
  7488  002C2E  6E1B               	movwf	SETxAPIxVAL@value,c
  7489  002C30  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7490                           
  7491                           ;junction.c: 84: SETxAPIxVAL(67,0);
  7492  002C34  0E00               	movlw	0
  7493  002C36  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7494  002C38  0E43               	movlw	67
  7495  002C3A  6E19               	movwf	SETxAPIxVAL@index,c
  7496  002C3C  0E00               	movlw	0
  7497  002C3E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7498  002C40  0E00               	movlw	0
  7499  002C42  6E1B               	movwf	SETxAPIxVAL@value,c
  7500  002C44  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  7501                           
  7502                           ;junction.c: 85: Switch_Junction = 0;
  7503  002C48  0E00               	movlw	0
  7504  002C4A  6E2F               	movwf	_Switch_Junction,c
  7505                           
  7506                           ;junction.c: 86: Return_Val = 0;
  7507  002C4C  0E00               	movlw	0
  7508  002C4E                     L88:
  7509  002C4E  6E4C               	movwf	Junction@Return_Val,c
  7510                           
  7511                           ;junction.c: 90: }
  7512                           
  7513                           ;junction.c: 89: default : break;
  7514                           
  7515                           ;junction.c: 87: break;
  7516  002C50  D00A               	goto	l1021
  7517  002C52                     l1004:
  7518  002C52  502F               	movf	_Switch_Junction,w,c
  7519                           
  7520                           ; Switch size 1, requested type "space"
  7521                           ; Number of cases is 3, Range of values is 0 to 2
  7522                           ; switch strategies available:
  7523                           ; Name         Instructions Cycles
  7524                           ; simple_byte           10     6 (average)
  7525                           ;	Chosen strategy is simple_byte
  7526  002C54  0A00               	xorlw	0	; case 0
  7527  002C56  B4D8               	btfsc	status,2,c
  7528  002C58  D71A               	goto	l1005
  7529  002C5A  0A01               	xorlw	1	; case 1
  7530  002C5C  B4D8               	btfsc	status,2,c
  7531  002C5E  D7B0               	goto	l1022
  7532  002C60  0A03               	xorlw	3	; case 2
  7533  002C62  B4D8               	btfsc	status,2,c
  7534  002C64  D7C9               	goto	l1024
  7535  002C66                     l1021:
  7536                           
  7537                           ;junction.c: 92: return (Return_Val);
  7538  002C66  504C               	movf	Junction@Return_Val,w,c
  7539  002C68  0012               	return	
  7540  002C6A                     __end_of_Junction:
  7541                           	opt stack 0
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           postinc0	equ	0xFEE
  7547                           wreg	equ	0xFE8
  7548                           postdec1	equ	0xFE5
  7549                           fsr1l	equ	0xFE1
  7550                           status	equ	0xFD8
  7551                           
  7552 ;; *************** function _Red_Led *****************
  7553 ;; Defined at:
  7554 ;;		line 97 in file "../io.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  Operation       1    wreg     unsigned char 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  Operation       1   18[COMRAM] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0
  7569 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7571 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7572 ;;Total ram usage:        1 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    3
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_Update_StateMchn
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           	psect	text13
  7583  003D62                     __ptext13:
  7584                           	opt stack 0
  7585  003D62                     _Red_Led:
  7586                           	opt stack 26
  7587                           
  7588                           ;incstack = 0
  7589                           ;Red_Led@Operation stored from wreg
  7590  003D62  6E13               	movwf	Red_Led@Operation,c
  7591                           
  7592                           ;io.c: 99: switch(Operation)
  7593  003D64  D030               	goto	l838
  7594  003D66                     l839:
  7595  003D66  9A83               	bcf	3971,5,c	;volatile
  7596  003D68  0012               	return	
  7597  003D6A                     l841:
  7598  003D6A  8A83               	bsf	3971,5,c	;volatile
  7599  003D6C  0012               	return	
  7600  003D6E  4A28               	infsnz	_Red_Led_Counter,f,c
  7601  003D70  2A29               	incf	_Red_Led_Counter+1,f,c
  7602                           
  7603                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7604  003D72  0EB8               	movlw	184
  7605  003D74  5C28               	subwf	_Red_Led_Counter,w,c
  7606  003D76  0E0B               	movlw	11
  7607  003D78  5829               	subwfb	_Red_Led_Counter+1,w,c
  7608  003D7A  A0D8               	btfss	status,0,c
  7609  003D7C  D004               	goto	l843
  7610                           
  7611                           ;io.c: 107: {
  7612                           ;io.c: 108: Red_Led_Counter = 0;
  7613  003D7E  0E00               	movlw	0
  7614  003D80  6E29               	movwf	_Red_Led_Counter+1,c
  7615  003D82  0E00               	movlw	0
  7616  003D84  6E28               	movwf	_Red_Led_Counter,c
  7617  003D86                     l843:
  7618                           
  7619                           ;io.c: 109: }
  7620                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7621  003D86  0EDC               	movlw	220
  7622  003D88  5C28               	subwf	_Red_Led_Counter,w,c
  7623  003D8A  0E05               	movlw	5
  7624  003D8C  5829               	subwfb	_Red_Led_Counter+1,w,c
  7625  003D8E  A0D8               	btfss	status,0,c
  7626  003D90  D002               	goto	l844
  7627                           
  7628                           ;io.c: 111: {
  7629                           ;io.c: 112: PORTDbits.RD5 = 1;
  7630  003D92  8A83               	bsf	3971,5,c	;volatile
  7631                           
  7632                           ;io.c: 113: }
  7633  003D94  0012               	return	
  7634  003D96                     l844:
  7635                           
  7636                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7637  003D96  9A83               	bcf	3971,5,c	;volatile
  7638                           
  7639                           ;io.c: 115: break;
  7640  003D98  0012               	return	
  7641  003D9A  4A28               	infsnz	_Red_Led_Counter,f,c
  7642  003D9C  2A29               	incf	_Red_Led_Counter+1,f,c
  7643                           
  7644                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7645  003D9E  0EE8               	movlw	232
  7646  003DA0  5C28               	subwf	_Red_Led_Counter,w,c
  7647  003DA2  0E03               	movlw	3
  7648  003DA4  5829               	subwfb	_Red_Led_Counter+1,w,c
  7649  003DA6  A0D8               	btfss	status,0,c
  7650  003DA8  D004               	goto	l847
  7651                           
  7652                           ;io.c: 119: {
  7653                           ;io.c: 120: Red_Led_Counter = 0;
  7654  003DAA  0E00               	movlw	0
  7655  003DAC  6E29               	movwf	_Red_Led_Counter+1,c
  7656  003DAE  0E00               	movlw	0
  7657  003DB0  6E28               	movwf	_Red_Led_Counter,c
  7658  003DB2                     l847:
  7659                           
  7660                           ;io.c: 121: }
  7661                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7662  003DB2  0EF4               	movlw	244
  7663  003DB4  5C28               	subwf	_Red_Led_Counter,w,c
  7664  003DB6  0E01               	movlw	1
  7665  003DB8  5829               	subwfb	_Red_Led_Counter+1,w,c
  7666  003DBA  A0D8               	btfss	status,0,c
  7667  003DBC  D002               	goto	l848
  7668                           
  7669                           ;io.c: 123: {
  7670                           ;io.c: 124: PORTDbits.RD5 = 1;
  7671  003DBE  8A83               	bsf	3971,5,c	;volatile
  7672                           
  7673                           ;io.c: 125: }
  7674  003DC0  0012               	return	
  7675  003DC2                     l848:
  7676                           
  7677                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7678  003DC2  9A83               	bcf	3971,5,c	;volatile
  7679                           
  7680                           ;io.c: 130: }
  7681                           
  7682                           ;io.c: 129: default : break;
  7683                           
  7684                           ;io.c: 127: break;
  7685  003DC4  0012               	return	
  7686  003DC6                     l838:
  7687  003DC6  5013               	movf	Red_Led@Operation,w,c
  7688                           
  7689                           ; Switch size 1, requested type "space"
  7690                           ; Number of cases is 4, Range of values is 0 to 3
  7691                           ; switch strategies available:
  7692                           ; Name         Instructions Cycles
  7693                           ; simple_byte           13     7 (average)
  7694                           ;	Chosen strategy is simple_byte
  7695  003DC8  0A00               	xorlw	0	; case 0
  7696  003DCA  B4D8               	btfsc	status,2,c
  7697  003DCC  D7CC               	goto	l839
  7698  003DCE  0A01               	xorlw	1	; case 1
  7699  003DD0  B4D8               	btfsc	status,2,c
  7700  003DD2  D7CB               	goto	l841
  7701  003DD4  0A03               	xorlw	3	; case 2
  7702  003DD6  B4D8               	btfsc	status,2,c
  7703  003DD8  D7CA               	goto	l842
  7704  003DDA  0A01               	xorlw	1	; case 3
  7705  003DDC  A4D8               	btfss	status,2,c
  7706  003DDE  0012               	return	
  7707  003DE0  D7DC               	goto	l846
  7708  003DE2                     __end_of_Red_Led:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           postinc0	equ	0xFEE
  7715                           wreg	equ	0xFE8
  7716                           postdec1	equ	0xFE5
  7717                           fsr1l	equ	0xFE1
  7718                           status	equ	0xFD8
  7719                           
  7720 ;; *************** function _Green_Led *****************
  7721 ;; Defined at:
  7722 ;;		line 47 in file "../io.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;  Operation       1    wreg     unsigned char 
  7725 ;; Auto vars:     Size  Location     Type
  7726 ;;  Operation       1   18[COMRAM] unsigned char 
  7727 ;; Return value:  Size  Location     Type
  7728 ;;                  1    wreg      void 
  7729 ;; Registers used:
  7730 ;;		wreg, status,2, status,0
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7736 ;;      Params:         0       0       0       0       0       0       0       0       0
  7737 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7739 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7740 ;;Total ram usage:        1 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; Hardware stack levels required when called:    3
  7743 ;; This function calls:
  7744 ;;		Nothing
  7745 ;; This function is called by:
  7746 ;;		_Update_StateMchn
  7747 ;; This function uses a non-reentrant model
  7748 ;;
  7749                           
  7750                           	psect	text14
  7751  003DE2                     __ptext14:
  7752                           	opt stack 0
  7753  003DE2                     _Green_Led:
  7754                           	opt stack 26
  7755                           
  7756                           ;incstack = 0
  7757                           ;Green_Led@Operation stored from wreg
  7758  003DE2  6E13               	movwf	Green_Led@Operation,c
  7759                           
  7760                           ;io.c: 49: switch(Operation)
  7761  003DE4  D030               	goto	l822
  7762  003DE6                     l823:
  7763  003DE6  9C83               	bcf	3971,6,c	;volatile
  7764  003DE8  0012               	return	
  7765  003DEA                     l825:
  7766  003DEA  8C83               	bsf	3971,6,c	;volatile
  7767  003DEC  0012               	return	
  7768  003DEE  4A2A               	infsnz	_Green_Led_Counter,f,c
  7769  003DF0  2A2B               	incf	_Green_Led_Counter+1,f,c
  7770                           
  7771                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7772  003DF2  0EB8               	movlw	184
  7773  003DF4  5C2A               	subwf	_Green_Led_Counter,w,c
  7774  003DF6  0E0B               	movlw	11
  7775  003DF8  582B               	subwfb	_Green_Led_Counter+1,w,c
  7776  003DFA  A0D8               	btfss	status,0,c
  7777  003DFC  D004               	goto	l827
  7778                           
  7779                           ;io.c: 57: {
  7780                           ;io.c: 58: Green_Led_Counter = 0;
  7781  003DFE  0E00               	movlw	0
  7782  003E00  6E2B               	movwf	_Green_Led_Counter+1,c
  7783  003E02  0E00               	movlw	0
  7784  003E04  6E2A               	movwf	_Green_Led_Counter,c
  7785  003E06                     l827:
  7786                           
  7787                           ;io.c: 59: }
  7788                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  7789  003E06  0EDC               	movlw	220
  7790  003E08  5C2A               	subwf	_Green_Led_Counter,w,c
  7791  003E0A  0E05               	movlw	5
  7792  003E0C  582B               	subwfb	_Green_Led_Counter+1,w,c
  7793  003E0E  A0D8               	btfss	status,0,c
  7794  003E10  D002               	goto	l828
  7795                           
  7796                           ;io.c: 61: {
  7797                           ;io.c: 62: PORTDbits.RD6 = 1;
  7798  003E12  8C83               	bsf	3971,6,c	;volatile
  7799                           
  7800                           ;io.c: 63: }
  7801  003E14  0012               	return	
  7802  003E16                     l828:
  7803                           
  7804                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  7805  003E16  9C83               	bcf	3971,6,c	;volatile
  7806                           
  7807                           ;io.c: 65: break;
  7808  003E18  0012               	return	
  7809  003E1A  4A2A               	infsnz	_Green_Led_Counter,f,c
  7810  003E1C  2A2B               	incf	_Green_Led_Counter+1,f,c
  7811                           
  7812                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  7813  003E1E  0EE8               	movlw	232
  7814  003E20  5C2A               	subwf	_Green_Led_Counter,w,c
  7815  003E22  0E03               	movlw	3
  7816  003E24  582B               	subwfb	_Green_Led_Counter+1,w,c
  7817  003E26  A0D8               	btfss	status,0,c
  7818  003E28  D004               	goto	l831
  7819                           
  7820                           ;io.c: 69: {
  7821                           ;io.c: 70: Green_Led_Counter = 0;
  7822  003E2A  0E00               	movlw	0
  7823  003E2C  6E2B               	movwf	_Green_Led_Counter+1,c
  7824  003E2E  0E00               	movlw	0
  7825  003E30  6E2A               	movwf	_Green_Led_Counter,c
  7826  003E32                     l831:
  7827                           
  7828                           ;io.c: 71: }
  7829                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  7830  003E32  0EF4               	movlw	244
  7831  003E34  5C2A               	subwf	_Green_Led_Counter,w,c
  7832  003E36  0E01               	movlw	1
  7833  003E38  582B               	subwfb	_Green_Led_Counter+1,w,c
  7834  003E3A  A0D8               	btfss	status,0,c
  7835  003E3C  D002               	goto	l832
  7836                           
  7837                           ;io.c: 73: {
  7838                           ;io.c: 74: PORTDbits.RD6 = 1;
  7839  003E3E  8C83               	bsf	3971,6,c	;volatile
  7840                           
  7841                           ;io.c: 75: }
  7842  003E40  0012               	return	
  7843  003E42                     l832:
  7844                           
  7845                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  7846  003E42  9C83               	bcf	3971,6,c	;volatile
  7847                           
  7848                           ;io.c: 80: }
  7849                           
  7850                           ;io.c: 79: default : break;
  7851                           
  7852                           ;io.c: 77: break;
  7853  003E44  0012               	return	
  7854  003E46                     l822:
  7855  003E46  5013               	movf	Green_Led@Operation,w,c
  7856                           
  7857                           ; Switch size 1, requested type "space"
  7858                           ; Number of cases is 4, Range of values is 0 to 3
  7859                           ; switch strategies available:
  7860                           ; Name         Instructions Cycles
  7861                           ; simple_byte           13     7 (average)
  7862                           ;	Chosen strategy is simple_byte
  7863  003E48  0A00               	xorlw	0	; case 0
  7864  003E4A  B4D8               	btfsc	status,2,c
  7865  003E4C  D7CC               	goto	l823
  7866  003E4E  0A01               	xorlw	1	; case 1
  7867  003E50  B4D8               	btfsc	status,2,c
  7868  003E52  D7CB               	goto	l825
  7869  003E54  0A03               	xorlw	3	; case 2
  7870  003E56  B4D8               	btfsc	status,2,c
  7871  003E58  D7CA               	goto	l826
  7872  003E5A  0A01               	xorlw	1	; case 3
  7873  003E5C  A4D8               	btfss	status,2,c
  7874  003E5E  0012               	return	
  7875  003E60  D7DC               	goto	l830
  7876  003E62                     __end_of_Green_Led:
  7877                           	opt stack 0
  7878                           tblptru	equ	0xFF8
  7879                           tblptrh	equ	0xFF7
  7880                           tblptrl	equ	0xFF6
  7881                           tablat	equ	0xFF5
  7882                           postinc0	equ	0xFEE
  7883                           wreg	equ	0xFE8
  7884                           postdec1	equ	0xFE5
  7885                           fsr1l	equ	0xFE1
  7886                           status	equ	0xFD8
  7887                           
  7888 ;; *************** function _EEPROMxSTORE *****************
  7889 ;; Defined at:
  7890 ;;		line 140 in file "../eeprom_settings.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;		None
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  i               1   35[COMRAM] unsigned char 
  7895 ;;  api_list        1   34[COMRAM] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      void 
  7898 ;; Registers used:
  7899 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7905 ;;      Params:         0       0       0       0       0       0       0       0       0
  7906 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7907 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7908 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7909 ;;Total ram usage:       10 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    4
  7912 ;; This function calls:
  7913 ;;		_Eeprom_Store
  7914 ;; This function is called by:
  7915 ;;		_Update_StateMchn
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text15
  7920  0032B6                     __ptext15:
  7921                           	opt stack 0
  7922  0032B6                     _EEPROMxSTORE:
  7923                           	opt stack 25
  7924                           
  7925                           ;eeprom_settings.c: 142: unsigned char i, api_list;
  7926                           ;eeprom_settings.c: 144: for(i = 0; i < 28; i++ )
  7927                           
  7928                           ;incstack = 0
  7929  0032B6  0E00               	movlw	0
  7930  0032B8  6E24               	movwf	EEPROMxSTORE@i,c
  7931  0032BA                     l8480:
  7932  0032BA  0E1B               	movlw	27
  7933  0032BC  6424               	cpfsgt	EEPROMxSTORE@i,c
  7934  0032BE  D001               	goto	l755
  7935  0032C0  0012               	return	
  7936  0032C2                     l755:
  7937                           
  7938                           ;eeprom_settings.c: 145: {
  7939                           ;eeprom_settings.c: 146: api_list = ApiList[i];
  7940  0032C2  5024               	movf	EEPROMxSTORE@i,w,c
  7941  0032C4  0D02               	mullw	2
  7942  0032C6  0E01               	movlw	low _ApiList
  7943  0032C8  24F3               	addwf	prodl,w,c
  7944  0032CA  6EF6               	movwf	tblptrl,c
  7945  0032CC  0E08               	movlw	high _ApiList
  7946  0032CE  20F4               	addwfc	prodh,w,c
  7947  0032D0  6EF7               	movwf	tblptrh,c
  7948  0032D2                     	if	0	;There are less than 3 active tblptr bytes
  7949  0032D2                     	endif
  7950  0032D2  0008               	tblrd		*
  7951  0032D4  CFF5 F023          	movff	tablat,EEPROMxSTORE@api_list
  7952                           
  7953                           ;eeprom_settings.c: 152: if (API[ApiList[i]] != API_EEPROM[ApiList[i]])
  7954  0032D8  5024               	movf	EEPROMxSTORE@i,w,c
  7955  0032DA  0D02               	mullw	2
  7956  0032DC  0E01               	movlw	low _ApiList
  7957  0032DE  24F3               	addwf	prodl,w,c
  7958  0032E0  6EF6               	movwf	tblptrl,c
  7959  0032E2  0E08               	movlw	high _ApiList
  7960  0032E4  20F4               	addwfc	prodh,w,c
  7961  0032E6  6EF7               	movwf	tblptrh,c
  7962  0032E8                     	if	0	;There are less than 3 active tblptr bytes
  7963  0032E8                     	endif
  7964  0032E8  0009               	tblrd		*+
  7965  0032EA  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  7966  0032EE  0009               	tblrd		*+
  7967  0032F0  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  7968  0032F4  90D8               	bcf	status,0,c
  7969  0032F6  361B               	rlcf	??_EEPROMxSTORE,f,c
  7970  0032F8  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  7971  0032FA  0E00               	movlw	low _API_EEPROM
  7972  0032FC  241B               	addwf	??_EEPROMxSTORE,w,c
  7973  0032FE  6ED9               	movwf	fsr2l,c
  7974  003300  0E03               	movlw	high _API_EEPROM
  7975  003302  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  7976  003304  6EDA               	movwf	fsr2h,c
  7977  003306  5024               	movf	EEPROMxSTORE@i,w,c
  7978  003308  0D02               	mullw	2
  7979  00330A  0E01               	movlw	low _ApiList
  7980  00330C  24F3               	addwf	prodl,w,c
  7981  00330E  6EF6               	movwf	tblptrl,c
  7982  003310  0E08               	movlw	high _ApiList
  7983  003312  20F4               	addwfc	prodh,w,c
  7984  003314  6EF7               	movwf	tblptrh,c
  7985  003316                     	if	0	;There are less than 3 active tblptr bytes
  7986  003316                     	endif
  7987  003316  0009               	tblrd		*+
  7988  003318  CFF5 F01F          	movff	tablat,??_EEPROMxSTORE+4
  7989  00331C  0009               	tblrd		*+
  7990  00331E  CFF5 F020          	movff	tablat,??_EEPROMxSTORE+5
  7991  003322  90D8               	bcf	status,0,c
  7992  003324  361F               	rlcf	??_EEPROMxSTORE+4,f,c
  7993  003326  3620               	rlcf	??_EEPROMxSTORE+5,f,c
  7994  003328  0E00               	movlw	low _API
  7995  00332A  241F               	addwf	??_EEPROMxSTORE+4,w,c
  7996  00332C  6EE1               	movwf	fsr1l,c
  7997  00332E  0E01               	movlw	high _API
  7998  003330  2020               	addwfc	??_EEPROMxSTORE+5,w,c
  7999  003332  6EE2               	movwf	fsr1h,c
  8000  003334  50DE               	movf	postinc2,w,c
  8001  003336  18E6               	xorwf	postinc1,w,c
  8002  003338  E104               	bnz	u7710
  8003  00333A  50DE               	movf	postinc2,w,c
  8004  00333C  18E6               	xorwf	postinc1,w,c
  8005  00333E  B4D8               	btfsc	status,2,c
  8006  003340  D052               	goto	l757
  8007  003342                     u7710:
  8008                           
  8009                           ;eeprom_settings.c: 153: {
  8010                           ;eeprom_settings.c: 158: Eeprom_Store(i, API[ApiList[i]]);
  8011  003342  C024  F013         	movff	EEPROMxSTORE@i,Eeprom_Store@Location
  8012  003346  6A14               	clrf	Eeprom_Store@Location+1,c
  8013  003348  5024               	movf	EEPROMxSTORE@i,w,c
  8014  00334A  0D02               	mullw	2
  8015  00334C  0E01               	movlw	low _ApiList
  8016  00334E  24F3               	addwf	prodl,w,c
  8017  003350  6EF6               	movwf	tblptrl,c
  8018  003352  0E08               	movlw	high _ApiList
  8019  003354  20F4               	addwfc	prodh,w,c
  8020  003356  6EF7               	movwf	tblptrh,c
  8021  003358                     	if	0	;There are less than 3 active tblptr bytes
  8022  003358                     	endif
  8023  003358  0009               	tblrd		*+
  8024  00335A  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  8025  00335E  0009               	tblrd		*+
  8026  003360  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  8027  003364  90D8               	bcf	status,0,c
  8028  003366  361B               	rlcf	??_EEPROMxSTORE,f,c
  8029  003368  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  8030  00336A  0E00               	movlw	low _API
  8031  00336C  241B               	addwf	??_EEPROMxSTORE,w,c
  8032  00336E  6ED9               	movwf	fsr2l,c
  8033  003370  0E01               	movlw	high _API
  8034  003372  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  8035  003374  6EDA               	movwf	fsr2h,c
  8036  003376  CFDE F015          	movff	postinc2,Eeprom_Store@Value
  8037  00337A  CFDD F016          	movff	postdec2,Eeprom_Store@Value+1
  8038  00337E  EC6E  F01F         	call	_Eeprom_Store	;wreg free
  8039                           
  8040                           ;eeprom_settings.c: 159: API_EEPROM[ApiList[i]] = API[ApiList[i]];
  8041  003382  5024               	movf	EEPROMxSTORE@i,w,c
  8042  003384  0D02               	mullw	2
  8043  003386  0E01               	movlw	low _ApiList
  8044  003388  24F3               	addwf	prodl,w,c
  8045  00338A  6EF6               	movwf	tblptrl,c
  8046  00338C  0E08               	movlw	high _ApiList
  8047  00338E  20F4               	addwfc	prodh,w,c
  8048  003390  6EF7               	movwf	tblptrh,c
  8049  003392                     	if	0	;There are less than 3 active tblptr bytes
  8050  003392                     	endif
  8051  003392  0009               	tblrd		*+
  8052  003394  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  8053  003398  0009               	tblrd		*+
  8054  00339A  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  8055  00339E  90D8               	bcf	status,0,c
  8056  0033A0  361B               	rlcf	??_EEPROMxSTORE,f,c
  8057  0033A2  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  8058  0033A4  0E00               	movlw	low _API
  8059  0033A6  241B               	addwf	??_EEPROMxSTORE,w,c
  8060  0033A8  6ED9               	movwf	fsr2l,c
  8061  0033AA  0E01               	movlw	high _API
  8062  0033AC  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  8063  0033AE  6EDA               	movwf	fsr2h,c
  8064  0033B0  5024               	movf	EEPROMxSTORE@i,w,c
  8065  0033B2  0D02               	mullw	2
  8066  0033B4  0E01               	movlw	low _ApiList
  8067  0033B6  24F3               	addwf	prodl,w,c
  8068  0033B8  6EF6               	movwf	tblptrl,c
  8069  0033BA  0E08               	movlw	high _ApiList
  8070  0033BC  20F4               	addwfc	prodh,w,c
  8071  0033BE  6EF7               	movwf	tblptrh,c
  8072  0033C0                     	if	0	;There are less than 3 active tblptr bytes
  8073  0033C0                     	endif
  8074  0033C0  0009               	tblrd		*+
  8075  0033C2  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE+2
  8076  0033C6  0009               	tblrd		*+
  8077  0033C8  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+3
  8078  0033CC  90D8               	bcf	status,0,c
  8079  0033CE  361D               	rlcf	??_EEPROMxSTORE+2,f,c
  8080  0033D0  361E               	rlcf	??_EEPROMxSTORE+3,f,c
  8081  0033D2  0E00               	movlw	low _API_EEPROM
  8082  0033D4  241D               	addwf	??_EEPROMxSTORE+2,w,c
  8083  0033D6  6EE1               	movwf	fsr1l,c
  8084  0033D8  0E03               	movlw	high _API_EEPROM
  8085  0033DA  201E               	addwfc	??_EEPROMxSTORE+3,w,c
  8086  0033DC  6EE2               	movwf	fsr1h,c
  8087  0033DE  CFDE FFE6          	movff	postinc2,postinc1
  8088  0033E2  CFDD FFE5          	movff	postdec2,postdec1
  8089  0033E6                     l757:
  8090  0033E6  2A24               	incf	EEPROMxSTORE@i,f,c
  8091  0033E8  D768               	goto	l8480
  8092  0033EA                     __end_of_EEPROMxSTORE:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           postinc0	equ	0xFEE
  8101                           wreg	equ	0xFE8
  8102                           postinc1	equ	0xFE6
  8103                           postdec1	equ	0xFE5
  8104                           fsr1h	equ	0xFE2
  8105                           fsr1l	equ	0xFE1
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _Eeprom_Store *****************
  8113 ;; Defined at:
  8114 ;;		line 178 in file "../eeprom_settings.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  Location        2   18[COMRAM] unsigned int 
  8117 ;;  Value           2   20[COMRAM] unsigned int 
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;  Location_Hig    2   24[COMRAM] unsigned int 
  8120 ;;  Location_Low    2   22[COMRAM] unsigned int 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, status,2, status,0
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8130 ;;      Params:         4       0       0       0       0       0       0       0       0
  8131 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8133 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8134 ;;Total ram usage:        8 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    3
  8137 ;; This function calls:
  8138 ;;		Nothing
  8139 ;; This function is called by:
  8140 ;;		_EEPROMxSTORE
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text16
  8145  003EDC                     __ptext16:
  8146                           	opt stack 0
  8147  003EDC                     _Eeprom_Store:
  8148                           	opt stack 25
  8149                           
  8150                           ;eeprom_settings.c: 180: unsigned int Location_High_Byte = Location * 2;
  8151                           
  8152                           ;incstack = 0
  8153  003EDC  90D8               	bcf	status,0,c
  8154  003EDE  3413               	rlcf	Eeprom_Store@Location,w,c
  8155  003EE0  6E19               	movwf	Eeprom_Store@Location_High_Byte,c
  8156  003EE2  3414               	rlcf	Eeprom_Store@Location+1,w,c
  8157  003EE4  6E1A               	movwf	Eeprom_Store@Location_High_Byte+1,c
  8158                           
  8159                           ;eeprom_settings.c: 181: unsigned int Location_Low_Byte = Location_High_Byte + 1;
  8160  003EE6  0E01               	movlw	1
  8161  003EE8  2419               	addwf	Eeprom_Store@Location_High_Byte,w,c
  8162  003EEA  6E17               	movwf	Eeprom_Store@Location_Low_Byte,c
  8163  003EEC  0E00               	movlw	0
  8164  003EEE  201A               	addwfc	Eeprom_Store@Location_High_Byte+1,w,c
  8165  003EF0  6E18               	movwf	Eeprom_Store@Location_Low_Byte+1,c
  8166                           
  8167                           ;eeprom_settings.c: 183: INTCON = 0x00;
  8168  003EF2  0E00               	movlw	0
  8169  003EF4  6EF2               	movwf	intcon,c	;volatile
  8170                           
  8171                           ;eeprom_settings.c: 185: EECON1bits.WRERR = 0;
  8172  003EF6  96A6               	bcf	4006,3,c	;volsfr
  8173                           
  8174                           ;eeprom_settings.c: 186: EEADR = Location_High_Byte;
  8175  003EF8  C019  FFA9         	movff	Eeprom_Store@Location_High_Byte,4009	;volatile
  8176                           
  8177                           ;eeprom_settings.c: 187: EEDATA = (unsigned char)(Value >> 8);
  8178  003EFC  5016               	movf	Eeprom_Store@Value+1,w,c
  8179  003EFE  6EA8               	movwf	4008,c	;volatile
  8180                           
  8181                           ;eeprom_settings.c: 188: EECON1bits.EEPGD = 0;
  8182  003F00  9EA6               	bcf	4006,7,c	;volsfr
  8183                           
  8184                           ;eeprom_settings.c: 189: EECON1bits.CFGS = 0;
  8185  003F02  9CA6               	bcf	4006,6,c	;volsfr
  8186                           
  8187                           ;eeprom_settings.c: 190: EECON1bits.WREN = 1;
  8188  003F04  84A6               	bsf	4006,2,c	;volsfr
  8189                           
  8190                           ;eeprom_settings.c: 191: EECON2 = 0x55;
  8191  003F06  0E55               	movlw	85
  8192  003F08  6EA7               	movwf	4007,c	;volsfr
  8193                           
  8194                           ;eeprom_settings.c: 192: EECON2 = 0xaa;
  8195  003F0A  0EAA               	movlw	170
  8196  003F0C  6EA7               	movwf	4007,c	;volsfr
  8197                           
  8198                           ;eeprom_settings.c: 193: EECON1bits.WR = 1;
  8199  003F0E  82A6               	bsf	4006,1,c	;volsfr
  8200  003F10                     
  8201                           ;eeprom_settings.c: 195: continue;
  8202  003F10  B2A6               	btfsc	4006,1,c	;volsfr
  8203  003F12  D7FE               	goto	l762
  8204                           
  8205                           ;eeprom_settings.c: 196: }
  8206                           ;eeprom_settings.c: 197: PIR2bits.EEIF = 0;
  8207  003F14  98A1               	bcf	4001,4,c	;volatile
  8208                           
  8209                           ;eeprom_settings.c: 207: EECON1bits.WRERR = 0;
  8210  003F16  96A6               	bcf	4006,3,c	;volsfr
  8211                           
  8212                           ;eeprom_settings.c: 208: EEADR = Location_Low_Byte;
  8213  003F18  C017  FFA9         	movff	Eeprom_Store@Location_Low_Byte,4009	;volatile
  8214                           
  8215                           ;eeprom_settings.c: 209: EEDATA = (unsigned char)Value;
  8216  003F1C  C015  FFA8         	movff	Eeprom_Store@Value,4008	;volatile
  8217                           
  8218                           ;eeprom_settings.c: 210: EECON1bits.EEPGD = 0;
  8219  003F20  9EA6               	bcf	4006,7,c	;volsfr
  8220                           
  8221                           ;eeprom_settings.c: 211: EECON1bits.CFGS = 0;
  8222  003F22  9CA6               	bcf	4006,6,c	;volsfr
  8223                           
  8224                           ;eeprom_settings.c: 212: EECON1bits.WREN = 1;
  8225  003F24  84A6               	bsf	4006,2,c	;volsfr
  8226                           
  8227                           ;eeprom_settings.c: 213: INTCON = 0x00;
  8228  003F26  0E00               	movlw	0
  8229  003F28  6EF2               	movwf	intcon,c	;volatile
  8230                           
  8231                           ;eeprom_settings.c: 214: EECON2 = 0x55;
  8232  003F2A  0E55               	movlw	85
  8233  003F2C  6EA7               	movwf	4007,c	;volsfr
  8234                           
  8235                           ;eeprom_settings.c: 215: EECON2 = 0xaa;
  8236  003F2E  0EAA               	movlw	170
  8237  003F30  6EA7               	movwf	4007,c	;volsfr
  8238                           
  8239                           ;eeprom_settings.c: 216: EECON1bits.WR = 1;
  8240  003F32  82A6               	bsf	4006,1,c	;volsfr
  8241  003F34                     
  8242                           ;eeprom_settings.c: 218: continue;
  8243  003F34  B2A6               	btfsc	4006,1,c	;volsfr
  8244  003F36  D7FE               	goto	l765
  8245                           
  8246                           ;eeprom_settings.c: 219: }
  8247                           ;eeprom_settings.c: 220: PIR2bits.EEIF = 0;
  8248  003F38  98A1               	bcf	4001,4,c	;volatile
  8249                           
  8250                           ;eeprom_settings.c: 230: EECON1bits.WREN = 0;
  8251  003F3A  94A6               	bcf	4006,2,c	;volsfr
  8252                           
  8253                           ;eeprom_settings.c: 231: INTCON = 0xA0;
  8254  003F3C  0EA0               	movlw	160
  8255  003F3E  6EF2               	movwf	intcon,c	;volatile
  8256  003F40  0012               	return		;funcret
  8257  003F42                     __end_of_Eeprom_Store:
  8258                           	opt stack 0
  8259                           tblptru	equ	0xFF8
  8260                           tblptrh	equ	0xFF7
  8261                           tblptrl	equ	0xFF6
  8262                           tablat	equ	0xFF5
  8263                           prodh	equ	0xFF4
  8264                           prodl	equ	0xFF3
  8265                           intcon	equ	0xFF2
  8266                           postinc0	equ	0xFEE
  8267                           wreg	equ	0xFE8
  8268                           postinc1	equ	0xFE6
  8269                           postdec1	equ	0xFE5
  8270                           fsr1h	equ	0xFE2
  8271                           fsr1l	equ	0xFE1
  8272                           postinc2	equ	0xFDE
  8273                           postdec2	equ	0xFDD
  8274                           fsr2h	equ	0xFDA
  8275                           fsr2l	equ	0xFD9
  8276                           status	equ	0xFD8
  8277                           
  8278 ;; *************** function _Debounce_Inputs *****************
  8279 ;; Defined at:
  8280 ;;		line 148 in file "../io.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;		None
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  1    wreg      void 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0
  8295 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8296 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8297 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8298 ;;Total ram usage:        2 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    5
  8301 ;; This function calls:
  8302 ;;		_GETxAPIxVAL
  8303 ;;		_SETxAPIxVAL
  8304 ;;		_SetDCPWM1
  8305 ;; This function is called by:
  8306 ;;		_Update_StateMchn
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           	psect	text17
  8311  0015CE                     __ptext17:
  8312                           	opt stack 0
  8313  0015CE                     _Debounce_Inputs:
  8314                           	opt stack 24
  8315                           
  8316                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  8317                           
  8318                           ;incstack = 0
  8319  0015CE  0E00               	movlw	0
  8320  0015D0  6E14               	movwf	GETxAPIxVAL@index+1,c
  8321  0015D2  0E40               	movlw	64
  8322  0015D4  6E13               	movwf	GETxAPIxVAL@index,c
  8323  0015D6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8324  0015DA  4613               	rlncf	?_GETxAPIxVAL,f,c
  8325  0015DC  4613               	rlncf	?_GETxAPIxVAL,f,c
  8326  0015DE  4613               	rlncf	?_GETxAPIxVAL,f,c
  8327  0015E0  5080               	movf	3968,w,c	;volatile
  8328  0015E2  1813               	xorwf	?_GETxAPIxVAL,w,c
  8329  0015E4  0BF7               	andlw	-9
  8330  0015E6  1813               	xorwf	?_GETxAPIxVAL,w,c
  8331  0015E8  6E80               	movwf	3968,c	;volatile
  8332                           
  8333                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  8334  0015EA  0E00               	movlw	0
  8335  0015EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  8336  0015EE  0E41               	movlw	65
  8337  0015F0  6E13               	movwf	GETxAPIxVAL@index,c
  8338  0015F2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8339  0015F6  4613               	rlncf	?_GETxAPIxVAL,f,c
  8340  0015F8  4613               	rlncf	?_GETxAPIxVAL,f,c
  8341  0015FA  5080               	movf	3968,w,c	;volatile
  8342  0015FC  1813               	xorwf	?_GETxAPIxVAL,w,c
  8343  0015FE  0BFB               	andlw	-5
  8344  001600  1813               	xorwf	?_GETxAPIxVAL,w,c
  8345  001602  6E80               	movwf	3968,c	;volatile
  8346                           
  8347                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  8348  001604  0E00               	movlw	0
  8349  001606  6E14               	movwf	GETxAPIxVAL@index+1,c
  8350  001608  0E42               	movlw	66
  8351  00160A  6E13               	movwf	GETxAPIxVAL@index,c
  8352  00160C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8353  001610  4613               	rlncf	?_GETxAPIxVAL,f,c
  8354  001612  5080               	movf	3968,w,c	;volatile
  8355  001614  1813               	xorwf	?_GETxAPIxVAL,w,c
  8356  001616  0BFD               	andlw	-3
  8357  001618  1813               	xorwf	?_GETxAPIxVAL,w,c
  8358  00161A  6E80               	movwf	3968,c	;volatile
  8359                           
  8360                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  8361  00161C  0E00               	movlw	0
  8362  00161E  6E14               	movwf	GETxAPIxVAL@index+1,c
  8363  001620  0E43               	movlw	67
  8364  001622  6E13               	movwf	GETxAPIxVAL@index,c
  8365  001624  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8366  001628  5080               	movf	3968,w,c	;volatile
  8367  00162A  1813               	xorwf	?_GETxAPIxVAL,w,c
  8368  00162C  0BFE               	andlw	-2
  8369  00162E  1813               	xorwf	?_GETxAPIxVAL,w,c
  8370  001630  6E80               	movwf	3968,c	;volatile
  8371                           
  8372                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  8373  001632  0E00               	movlw	0
  8374  001634  6E14               	movwf	GETxAPIxVAL@index+1,c
  8375  001636  0E45               	movlw	69
  8376  001638  6E13               	movwf	GETxAPIxVAL@index,c
  8377  00163A  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8378  00163E  5082               	movf	3970,w,c	;volatile
  8379  001640  1813               	xorwf	?_GETxAPIxVAL,w,c
  8380  001642  0BFE               	andlw	-2
  8381  001644  1813               	xorwf	?_GETxAPIxVAL,w,c
  8382  001646  6E82               	movwf	3970,c	;volatile
  8383                           
  8384                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(88));
  8385  001648  0E00               	movlw	0
  8386  00164A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8387  00164C  0E58               	movlw	88
  8388  00164E  6E13               	movwf	GETxAPIxVAL@index,c
  8389  001650  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8390  001654  C013  F015         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8391  001658  C014  F016         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8392  00165C  EC86  F020         	call	_SetDCPWM1	;wreg free
  8393                           
  8394                           ;io.c: 157: switch(PORTDbits.RD1)
  8395  001660  D02C               	goto	l854
  8396  001662  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8397  001664  B4D8               	btfsc	status,2,c
  8398  001666  D002               	goto	l856
  8399                           
  8400                           ;io.c: 160: {
  8401                           ;io.c: 161: Reed_Contact_LF_Counter--;
  8402  001668  063E               	decf	_Reed_Contact_LF_Counter,f,c
  8403                           
  8404                           ;io.c: 163: }
  8405                           
  8406                           ;io.c: 162: break;
  8407  00166A  D05F               	goto	l863
  8408  00166C                     l856:
  8409                           
  8410                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  8411  00166C  0E00               	movlw	0
  8412  00166E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8413  001670  0E1F               	movlw	31
  8414  001672  6E19               	movwf	SETxAPIxVAL@index,c
  8415  001674  0E00               	movlw	0
  8416  001676  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8417  001678  0E00               	movlw	0
  8418  00167A  6E1B               	movwf	SETxAPIxVAL@value,c
  8419  00167C  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8420                           
  8421                           ;io.c: 165: break;
  8422  001680  D054               	goto	l863
  8423  001682  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8424  001684  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8425  001686  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8426  001688  0E00               	movlw	0
  8427  00168A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8428  00168C  0E1B               	movlw	27
  8429  00168E  6E13               	movwf	GETxAPIxVAL@index,c
  8430  001690  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8431  001694  501F               	movf	??_Debounce_Inputs,w,c
  8432  001696  5C13               	subwf	?_GETxAPIxVAL,w,c
  8433  001698  5020               	movf	??_Debounce_Inputs+1,w,c
  8434  00169A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8435  00169C  A0D8               	btfss	status,0,c
  8436  00169E  D002               	goto	l860
  8437                           
  8438                           ;io.c: 168: {
  8439                           ;io.c: 169: Reed_Contact_LF_Counter++;
  8440  0016A0  2A3E               	incf	_Reed_Contact_LF_Counter,f,c
  8441                           
  8442                           ;io.c: 171: }
  8443                           
  8444                           ;io.c: 170: break;
  8445  0016A2  D043               	goto	l863
  8446  0016A4                     l860:
  8447                           
  8448                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  8449  0016A4  0E00               	movlw	0
  8450  0016A6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8451  0016A8  0E1F               	movlw	31
  8452  0016AA  6E19               	movwf	SETxAPIxVAL@index,c
  8453  0016AC  0E00               	movlw	0
  8454  0016AE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8455  0016B0  0E01               	movlw	1
  8456  0016B2  6E1B               	movwf	SETxAPIxVAL@value,c
  8457  0016B4  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8458                           
  8459                           ;io.c: 176: }
  8460                           
  8461                           ;io.c: 175: default : break;
  8462                           
  8463                           ;io.c: 173: break;
  8464  0016B8  D038               	goto	l863
  8465  0016BA                     l854:
  8466  0016BA  A283               	btfss	3971,1,c	;volatile
  8467  0016BC  D002               	goto	u7200
  8468  0016BE  0E01               	movlw	1
  8469  0016C0  D001               	goto	u7206
  8470  0016C2                     u7200:
  8471  0016C2  0E00               	movlw	0
  8472  0016C4                     u7206:
  8473                           
  8474                           ; Switch size 1, requested type "space"
  8475                           ; Number of cases is 2, Range of values is 0 to 1
  8476                           ; switch strategies available:
  8477                           ; Name         Instructions Cycles
  8478                           ; simple_byte            7     4 (average)
  8479                           ;	Chosen strategy is simple_byte
  8480  0016C4  0A00               	xorlw	0	; case 0
  8481  0016C6  B4D8               	btfsc	status,2,c
  8482  0016C8  D7DC               	goto	l859
  8483  0016CA  0A01               	xorlw	1	; case 1
  8484  0016CC  B4D8               	btfsc	status,2,c
  8485  0016CE  D7C9               	goto	l855
  8486                           
  8487                           ;io.c: 179: switch(PORTDbits.RD0)
  8488  0016D0  D02C               	goto	l863
  8489  0016D2  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8490  0016D4  B4D8               	btfsc	status,2,c
  8491  0016D6  D002               	goto	l865
  8492                           
  8493                           ;io.c: 182: {
  8494                           ;io.c: 183: Reed_Contact_LB_Counter--;
  8495  0016D8  063D               	decf	_Reed_Contact_LB_Counter,f,c
  8496                           
  8497                           ;io.c: 185: }
  8498                           
  8499                           ;io.c: 184: break;
  8500  0016DA  D05F               	goto	l872
  8501  0016DC                     l865:
  8502                           
  8503                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  8504  0016DC  0E00               	movlw	0
  8505  0016DE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8506  0016E0  0E1E               	movlw	30
  8507  0016E2  6E19               	movwf	SETxAPIxVAL@index,c
  8508  0016E4  0E00               	movlw	0
  8509  0016E6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8510  0016E8  0E00               	movlw	0
  8511  0016EA  6E1B               	movwf	SETxAPIxVAL@value,c
  8512  0016EC  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8513                           
  8514                           ;io.c: 187: break;
  8515  0016F0  D054               	goto	l872
  8516  0016F2  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8517  0016F4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8518  0016F6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8519  0016F8  0E00               	movlw	0
  8520  0016FA  6E14               	movwf	GETxAPIxVAL@index+1,c
  8521  0016FC  0E1B               	movlw	27
  8522  0016FE  6E13               	movwf	GETxAPIxVAL@index,c
  8523  001700  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8524  001704  501F               	movf	??_Debounce_Inputs,w,c
  8525  001706  5C13               	subwf	?_GETxAPIxVAL,w,c
  8526  001708  5020               	movf	??_Debounce_Inputs+1,w,c
  8527  00170A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8528  00170C  A0D8               	btfss	status,0,c
  8529  00170E  D002               	goto	l869
  8530                           
  8531                           ;io.c: 190: {
  8532                           ;io.c: 191: Reed_Contact_LB_Counter++;
  8533  001710  2A3D               	incf	_Reed_Contact_LB_Counter,f,c
  8534                           
  8535                           ;io.c: 193: }
  8536                           
  8537                           ;io.c: 192: break;
  8538  001712  D043               	goto	l872
  8539  001714                     l869:
  8540                           
  8541                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  8542  001714  0E00               	movlw	0
  8543  001716  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8544  001718  0E1E               	movlw	30
  8545  00171A  6E19               	movwf	SETxAPIxVAL@index,c
  8546  00171C  0E00               	movlw	0
  8547  00171E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8548  001720  0E01               	movlw	1
  8549  001722  6E1B               	movwf	SETxAPIxVAL@value,c
  8550  001724  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8551                           
  8552                           ;io.c: 198: }
  8553                           
  8554                           ;io.c: 197: default : break;
  8555                           
  8556                           ;io.c: 195: break;
  8557  001728  D038               	goto	l872
  8558  00172A                     l863:
  8559  00172A  A083               	btfss	3971,0,c	;volatile
  8560  00172C  D002               	goto	u7230
  8561  00172E  0E01               	movlw	1
  8562  001730  D001               	goto	u7236
  8563  001732                     u7230:
  8564  001732  0E00               	movlw	0
  8565  001734                     u7236:
  8566                           
  8567                           ; Switch size 1, requested type "space"
  8568                           ; Number of cases is 2, Range of values is 0 to 1
  8569                           ; switch strategies available:
  8570                           ; Name         Instructions Cycles
  8571                           ; simple_byte            7     4 (average)
  8572                           ;	Chosen strategy is simple_byte
  8573  001734  0A00               	xorlw	0	; case 0
  8574  001736  B4D8               	btfsc	status,2,c
  8575  001738  D7DC               	goto	l868
  8576  00173A  0A01               	xorlw	1	; case 1
  8577  00173C  B4D8               	btfsc	status,2,c
  8578  00173E  D7C9               	goto	l864
  8579                           
  8580                           ;io.c: 201: switch(PORTDbits.RD3)
  8581  001740  D02C               	goto	l872
  8582  001742  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8583  001744  B4D8               	btfsc	status,2,c
  8584  001746  D002               	goto	l874
  8585                           
  8586                           ;io.c: 204: {
  8587                           ;io.c: 205: Reed_Contact_RF_Counter--;
  8588  001748  063C               	decf	_Reed_Contact_RF_Counter,f,c
  8589                           
  8590                           ;io.c: 207: }
  8591                           
  8592                           ;io.c: 206: break;
  8593  00174A  D05F               	goto	l881
  8594  00174C                     l874:
  8595                           
  8596                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  8597  00174C  0E00               	movlw	0
  8598  00174E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8599  001750  0E1D               	movlw	29
  8600  001752  6E19               	movwf	SETxAPIxVAL@index,c
  8601  001754  0E00               	movlw	0
  8602  001756  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8603  001758  0E00               	movlw	0
  8604  00175A  6E1B               	movwf	SETxAPIxVAL@value,c
  8605  00175C  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8606                           
  8607                           ;io.c: 209: break;
  8608  001760  D054               	goto	l881
  8609  001762  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8610  001764  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8611  001766  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8612  001768  0E00               	movlw	0
  8613  00176A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8614  00176C  0E1B               	movlw	27
  8615  00176E  6E13               	movwf	GETxAPIxVAL@index,c
  8616  001770  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8617  001774  501F               	movf	??_Debounce_Inputs,w,c
  8618  001776  5C13               	subwf	?_GETxAPIxVAL,w,c
  8619  001778  5020               	movf	??_Debounce_Inputs+1,w,c
  8620  00177A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8621  00177C  A0D8               	btfss	status,0,c
  8622  00177E  D002               	goto	l878
  8623                           
  8624                           ;io.c: 212: {
  8625                           ;io.c: 213: Reed_Contact_RF_Counter++;
  8626  001780  2A3C               	incf	_Reed_Contact_RF_Counter,f,c
  8627                           
  8628                           ;io.c: 215: }
  8629                           
  8630                           ;io.c: 214: break;
  8631  001782  D043               	goto	l881
  8632  001784                     l878:
  8633                           
  8634                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  8635  001784  0E00               	movlw	0
  8636  001786  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8637  001788  0E1D               	movlw	29
  8638  00178A  6E19               	movwf	SETxAPIxVAL@index,c
  8639  00178C  0E00               	movlw	0
  8640  00178E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8641  001790  0E01               	movlw	1
  8642  001792  6E1B               	movwf	SETxAPIxVAL@value,c
  8643  001794  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8644                           
  8645                           ;io.c: 220: }
  8646                           
  8647                           ;io.c: 219: default : break;
  8648                           
  8649                           ;io.c: 217: break;
  8650  001798  D038               	goto	l881
  8651  00179A                     l872:
  8652  00179A  A683               	btfss	3971,3,c	;volatile
  8653  00179C  D002               	goto	u7260
  8654  00179E  0E01               	movlw	1
  8655  0017A0  D001               	goto	u7266
  8656  0017A2                     u7260:
  8657  0017A2  0E00               	movlw	0
  8658  0017A4                     u7266:
  8659                           
  8660                           ; Switch size 1, requested type "space"
  8661                           ; Number of cases is 2, Range of values is 0 to 1
  8662                           ; switch strategies available:
  8663                           ; Name         Instructions Cycles
  8664                           ; simple_byte            7     4 (average)
  8665                           ;	Chosen strategy is simple_byte
  8666  0017A4  0A00               	xorlw	0	; case 0
  8667  0017A6  B4D8               	btfsc	status,2,c
  8668  0017A8  D7DC               	goto	l877
  8669  0017AA  0A01               	xorlw	1	; case 1
  8670  0017AC  B4D8               	btfsc	status,2,c
  8671  0017AE  D7C9               	goto	l873
  8672                           
  8673                           ;io.c: 223: switch(PORTDbits.RD2)
  8674  0017B0  D02C               	goto	l881
  8675  0017B2  503B               	movf	_Reed_Contact_RB_Counter,w,c
  8676  0017B4  B4D8               	btfsc	status,2,c
  8677  0017B6  D002               	goto	l883
  8678                           
  8679                           ;io.c: 226: {
  8680                           ;io.c: 227: Reed_Contact_RB_Counter--;
  8681  0017B8  063B               	decf	_Reed_Contact_RB_Counter,f,c
  8682                           
  8683                           ;io.c: 229: }
  8684                           
  8685                           ;io.c: 228: break;
  8686  0017BA  D05F               	goto	l890
  8687  0017BC                     l883:
  8688                           
  8689                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  8690  0017BC  0E00               	movlw	0
  8691  0017BE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8692  0017C0  0E1C               	movlw	28
  8693  0017C2  6E19               	movwf	SETxAPIxVAL@index,c
  8694  0017C4  0E00               	movlw	0
  8695  0017C6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8696  0017C8  0E00               	movlw	0
  8697  0017CA  6E1B               	movwf	SETxAPIxVAL@value,c
  8698  0017CC  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8699                           
  8700                           ;io.c: 231: break;
  8701  0017D0  D054               	goto	l890
  8702  0017D2  503B               	movf	_Reed_Contact_RB_Counter,w,c
  8703  0017D4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8704  0017D6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8705  0017D8  0E00               	movlw	0
  8706  0017DA  6E14               	movwf	GETxAPIxVAL@index+1,c
  8707  0017DC  0E1B               	movlw	27
  8708  0017DE  6E13               	movwf	GETxAPIxVAL@index,c
  8709  0017E0  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8710  0017E4  501F               	movf	??_Debounce_Inputs,w,c
  8711  0017E6  5C13               	subwf	?_GETxAPIxVAL,w,c
  8712  0017E8  5020               	movf	??_Debounce_Inputs+1,w,c
  8713  0017EA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8714  0017EC  A0D8               	btfss	status,0,c
  8715  0017EE  D002               	goto	l887
  8716                           
  8717                           ;io.c: 234: {
  8718                           ;io.c: 235: Reed_Contact_RB_Counter++;
  8719  0017F0  2A3B               	incf	_Reed_Contact_RB_Counter,f,c
  8720                           
  8721                           ;io.c: 237: }
  8722                           
  8723                           ;io.c: 236: break;
  8724  0017F2  D043               	goto	l890
  8725  0017F4                     l887:
  8726                           
  8727                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  8728  0017F4  0E00               	movlw	0
  8729  0017F6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8730  0017F8  0E1C               	movlw	28
  8731  0017FA  6E19               	movwf	SETxAPIxVAL@index,c
  8732  0017FC  0E00               	movlw	0
  8733  0017FE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8734  001800  0E01               	movlw	1
  8735  001802  6E1B               	movwf	SETxAPIxVAL@value,c
  8736  001804  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8737                           
  8738                           ;io.c: 242: }
  8739                           
  8740                           ;io.c: 241: default : break;
  8741                           
  8742                           ;io.c: 239: break;
  8743  001808  D038               	goto	l890
  8744  00180A                     l881:
  8745  00180A  A483               	btfss	3971,2,c	;volatile
  8746  00180C  D002               	goto	u7290
  8747  00180E  0E01               	movlw	1
  8748  001810  D001               	goto	u7296
  8749  001812                     u7290:
  8750  001812  0E00               	movlw	0
  8751  001814                     u7296:
  8752                           
  8753                           ; Switch size 1, requested type "space"
  8754                           ; Number of cases is 2, Range of values is 0 to 1
  8755                           ; switch strategies available:
  8756                           ; Name         Instructions Cycles
  8757                           ; simple_byte            7     4 (average)
  8758                           ;	Chosen strategy is simple_byte
  8759  001814  0A00               	xorlw	0	; case 0
  8760  001816  B4D8               	btfsc	status,2,c
  8761  001818  D7DC               	goto	l886
  8762  00181A  0A01               	xorlw	1	; case 1
  8763  00181C  B4D8               	btfsc	status,2,c
  8764  00181E  D7C9               	goto	l882
  8765                           
  8766                           ;io.c: 245: switch(!PORTBbits.RB0)
  8767  001820  D02C               	goto	l890
  8768  001822  5036               	movf	_Button_Contact_Counter_Start,w,c
  8769  001824  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8770  001826  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8771  001828  0E00               	movlw	0
  8772  00182A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8773  00182C  0E1B               	movlw	27
  8774  00182E  6E13               	movwf	GETxAPIxVAL@index,c
  8775  001830  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8776  001834  501F               	movf	??_Debounce_Inputs,w,c
  8777  001836  5C13               	subwf	?_GETxAPIxVAL,w,c
  8778  001838  5020               	movf	??_Debounce_Inputs+1,w,c
  8779  00183A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8780  00183C  A0D8               	btfss	status,0,c
  8781  00183E  D002               	goto	l892
  8782                           
  8783                           ;io.c: 248: {
  8784                           ;io.c: 249: Button_Contact_Counter_Start++;
  8785  001840  2A36               	incf	_Button_Contact_Counter_Start,f,c
  8786                           
  8787                           ;io.c: 251: }
  8788                           
  8789                           ;io.c: 250: break;
  8790  001842  D05A               	goto	l899
  8791  001844                     l892:
  8792                           
  8793                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  8794  001844  0E00               	movlw	0
  8795  001846  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8796  001848  0E20               	movlw	32
  8797  00184A  6E19               	movwf	SETxAPIxVAL@index,c
  8798  00184C  0E00               	movlw	0
  8799  00184E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8800  001850  0E01               	movlw	1
  8801  001852  6E1B               	movwf	SETxAPIxVAL@value,c
  8802  001854  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8803                           
  8804                           ;io.c: 253: break;
  8805  001858  D04F               	goto	l899
  8806  00185A  5036               	movf	_Button_Contact_Counter_Start,w,c
  8807  00185C  B4D8               	btfsc	status,2,c
  8808  00185E  D002               	goto	l896
  8809                           
  8810                           ;io.c: 256: {
  8811                           ;io.c: 257: Button_Contact_Counter_Start--;
  8812  001860  0636               	decf	_Button_Contact_Counter_Start,f,c
  8813                           
  8814                           ;io.c: 259: }
  8815                           
  8816                           ;io.c: 258: break;
  8817  001862  D04A               	goto	l899
  8818  001864                     l896:
  8819                           
  8820                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  8821  001864  0E00               	movlw	0
  8822  001866  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8823  001868  0E20               	movlw	32
  8824  00186A  6E19               	movwf	SETxAPIxVAL@index,c
  8825  00186C  0E00               	movlw	0
  8826  00186E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8827  001870  0E00               	movlw	0
  8828  001872  6E1B               	movwf	SETxAPIxVAL@value,c
  8829  001874  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8830                           
  8831                           ;io.c: 264: }
  8832                           
  8833                           ;io.c: 263: default : break;
  8834                           
  8835                           ;io.c: 261: break;
  8836  001878  D03F               	goto	l899
  8837  00187A                     l890:
  8838  00187A  B081               	btfsc	3969,0,c	;volatile
  8839  00187C  D002               	goto	u7320
  8840  00187E  0E01               	movlw	1
  8841  001880  D001               	goto	u7330
  8842  001882                     u7320:
  8843  001882  0E00               	movlw	0
  8844  001884                     u7330:
  8845  001884  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8846  001886  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8847                           
  8848                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8849                           ; Switch size 1, requested type "space"
  8850                           ; Number of cases is 1, Range of values is 0 to 0
  8851                           ; switch strategies available:
  8852                           ; Name         Instructions Cycles
  8853                           ; simple_byte            4     3 (average)
  8854                           ;	Chosen strategy is simple_byte
  8855  001888  5020               	movf	??_Debounce_Inputs+1,w,c
  8856  00188A  0A00               	xorlw	0	; case 0
  8857  00188C  A4D8               	btfss	status,2,c
  8858  00188E  D034               	goto	l899
  8859                           
  8860                           ; Switch size 1, requested type "space"
  8861                           ; Number of cases is 2, Range of values is 0 to 1
  8862                           ; switch strategies available:
  8863                           ; Name         Instructions Cycles
  8864                           ; simple_byte            7     4 (average)
  8865                           ;	Chosen strategy is simple_byte
  8866  001890  501F               	movf	??_Debounce_Inputs,w,c
  8867  001892  0A00               	xorlw	0	; case 0
  8868  001894  B4D8               	btfsc	status,2,c
  8869  001896  D7E1               	goto	l895
  8870  001898  0A01               	xorlw	1	; case 1
  8871  00189A  B4D8               	btfsc	status,2,c
  8872  00189C  D7C2               	goto	l891
  8873                           
  8874                           ;io.c: 267: switch(!PORTDbits.RD7)
  8875  00189E  D02C               	goto	l899
  8876  0018A0  5035               	movf	_Button_Contact_Counter_Stop,w,c
  8877  0018A2  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8878  0018A4  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8879  0018A6  0E00               	movlw	0
  8880  0018A8  6E14               	movwf	GETxAPIxVAL@index+1,c
  8881  0018AA  0E1B               	movlw	27
  8882  0018AC  6E13               	movwf	GETxAPIxVAL@index,c
  8883  0018AE  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8884  0018B2  501F               	movf	??_Debounce_Inputs,w,c
  8885  0018B4  5C13               	subwf	?_GETxAPIxVAL,w,c
  8886  0018B6  5020               	movf	??_Debounce_Inputs+1,w,c
  8887  0018B8  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8888  0018BA  A0D8               	btfss	status,0,c
  8889  0018BC  D002               	goto	l901
  8890                           
  8891                           ;io.c: 270: {
  8892                           ;io.c: 271: Button_Contact_Counter_Stop++;
  8893  0018BE  2A35               	incf	_Button_Contact_Counter_Stop,f,c
  8894                           
  8895                           ;io.c: 273: }
  8896                           
  8897                           ;io.c: 272: break;
  8898  0018C0  D05A               	goto	l908
  8899  0018C2                     l901:
  8900                           
  8901                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  8902  0018C2  0E00               	movlw	0
  8903  0018C4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8904  0018C6  0E21               	movlw	33
  8905  0018C8  6E19               	movwf	SETxAPIxVAL@index,c
  8906  0018CA  0E00               	movlw	0
  8907  0018CC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8908  0018CE  0E01               	movlw	1
  8909  0018D0  6E1B               	movwf	SETxAPIxVAL@value,c
  8910  0018D2  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8911                           
  8912                           ;io.c: 275: break;
  8913  0018D6  D04F               	goto	l908
  8914  0018D8  5035               	movf	_Button_Contact_Counter_Stop,w,c
  8915  0018DA  B4D8               	btfsc	status,2,c
  8916  0018DC  D002               	goto	l905
  8917                           
  8918                           ;io.c: 278: {
  8919                           ;io.c: 279: Button_Contact_Counter_Stop--;
  8920  0018DE  0635               	decf	_Button_Contact_Counter_Stop,f,c
  8921                           
  8922                           ;io.c: 281: }
  8923                           
  8924                           ;io.c: 280: break;
  8925  0018E0  D04A               	goto	l908
  8926  0018E2                     l905:
  8927                           
  8928                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  8929  0018E2  0E00               	movlw	0
  8930  0018E4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8931  0018E6  0E21               	movlw	33
  8932  0018E8  6E19               	movwf	SETxAPIxVAL@index,c
  8933  0018EA  0E00               	movlw	0
  8934  0018EC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8935  0018EE  0E00               	movlw	0
  8936  0018F0  6E1B               	movwf	SETxAPIxVAL@value,c
  8937  0018F2  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  8938                           
  8939                           ;io.c: 286: }
  8940                           
  8941                           ;io.c: 285: default : break;
  8942                           
  8943                           ;io.c: 283: break;
  8944  0018F6  D03F               	goto	l908
  8945  0018F8                     l899:
  8946  0018F8  BE83               	btfsc	3971,7,c	;volatile
  8947  0018FA  D002               	goto	u7360
  8948  0018FC  0E01               	movlw	1
  8949  0018FE  D001               	goto	u7370
  8950  001900                     u7360:
  8951  001900  0E00               	movlw	0
  8952  001902                     u7370:
  8953  001902  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8954  001904  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8955                           
  8956                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8957                           ; Switch size 1, requested type "space"
  8958                           ; Number of cases is 1, Range of values is 0 to 0
  8959                           ; switch strategies available:
  8960                           ; Name         Instructions Cycles
  8961                           ; simple_byte            4     3 (average)
  8962                           ;	Chosen strategy is simple_byte
  8963  001906  5020               	movf	??_Debounce_Inputs+1,w,c
  8964  001908  0A00               	xorlw	0	; case 0
  8965  00190A  A4D8               	btfss	status,2,c
  8966  00190C  D034               	goto	l908
  8967                           
  8968                           ; Switch size 1, requested type "space"
  8969                           ; Number of cases is 2, Range of values is 0 to 1
  8970                           ; switch strategies available:
  8971                           ; Name         Instructions Cycles
  8972                           ; simple_byte            7     4 (average)
  8973                           ;	Chosen strategy is simple_byte
  8974  00190E  501F               	movf	??_Debounce_Inputs,w,c
  8975  001910  0A00               	xorlw	0	; case 0
  8976  001912  B4D8               	btfsc	status,2,c
  8977  001914  D7E1               	goto	l904
  8978  001916  0A01               	xorlw	1	; case 1
  8979  001918  B4D8               	btfsc	status,2,c
  8980  00191A  D7C2               	goto	l900
  8981                           
  8982                           ;io.c: 289: switch(!PORTBbits.RB1)
  8983  00191C  D02C               	goto	l908
  8984  00191E  5034               	movf	_Button_Contact_Counter_Middle,w,c
  8985  001920  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8986  001922  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8987  001924  0E00               	movlw	0
  8988  001926  6E14               	movwf	GETxAPIxVAL@index+1,c
  8989  001928  0E1B               	movlw	27
  8990  00192A  6E13               	movwf	GETxAPIxVAL@index,c
  8991  00192C  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  8992  001930  501F               	movf	??_Debounce_Inputs,w,c
  8993  001932  5C13               	subwf	?_GETxAPIxVAL,w,c
  8994  001934  5020               	movf	??_Debounce_Inputs+1,w,c
  8995  001936  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8996  001938  A0D8               	btfss	status,0,c
  8997  00193A  D002               	goto	l910
  8998                           
  8999                           ;io.c: 292: {
  9000                           ;io.c: 293: Button_Contact_Counter_Middle++;
  9001  00193C  2A34               	incf	_Button_Contact_Counter_Middle,f,c
  9002                           
  9003                           ;io.c: 295: }
  9004                           
  9005                           ;io.c: 294: break;
  9006  00193E  D05A               	goto	l917
  9007  001940                     l910:
  9008                           
  9009                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  9010  001940  0E00               	movlw	0
  9011  001942  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9012  001944  0E22               	movlw	34
  9013  001946  6E19               	movwf	SETxAPIxVAL@index,c
  9014  001948  0E00               	movlw	0
  9015  00194A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9016  00194C  0E01               	movlw	1
  9017  00194E  6E1B               	movwf	SETxAPIxVAL@value,c
  9018  001950  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9019                           
  9020                           ;io.c: 297: break;
  9021  001954  D04F               	goto	l917
  9022  001956  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9023  001958  B4D8               	btfsc	status,2,c
  9024  00195A  D002               	goto	l914
  9025                           
  9026                           ;io.c: 300: {
  9027                           ;io.c: 301: Button_Contact_Counter_Middle--;
  9028  00195C  0634               	decf	_Button_Contact_Counter_Middle,f,c
  9029                           
  9030                           ;io.c: 303: }
  9031                           
  9032                           ;io.c: 302: break;
  9033  00195E  D04A               	goto	l917
  9034  001960                     l914:
  9035                           
  9036                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  9037  001960  0E00               	movlw	0
  9038  001962  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9039  001964  0E22               	movlw	34
  9040  001966  6E19               	movwf	SETxAPIxVAL@index,c
  9041  001968  0E00               	movlw	0
  9042  00196A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9043  00196C  0E00               	movlw	0
  9044  00196E  6E1B               	movwf	SETxAPIxVAL@value,c
  9045  001970  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9046                           
  9047                           ;io.c: 308: }
  9048                           
  9049                           ;io.c: 307: default : break;
  9050                           
  9051                           ;io.c: 305: break;
  9052  001974  D03F               	goto	l917
  9053  001976                     l908:
  9054  001976  B281               	btfsc	3969,1,c	;volatile
  9055  001978  D002               	goto	u7400
  9056  00197A  0E01               	movlw	1
  9057  00197C  D001               	goto	u7410
  9058  00197E                     u7400:
  9059  00197E  0E00               	movlw	0
  9060  001980                     u7410:
  9061  001980  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9062  001982  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9063                           
  9064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9065                           ; Switch size 1, requested type "space"
  9066                           ; Number of cases is 1, Range of values is 0 to 0
  9067                           ; switch strategies available:
  9068                           ; Name         Instructions Cycles
  9069                           ; simple_byte            4     3 (average)
  9070                           ;	Chosen strategy is simple_byte
  9071  001984  5020               	movf	??_Debounce_Inputs+1,w,c
  9072  001986  0A00               	xorlw	0	; case 0
  9073  001988  A4D8               	btfss	status,2,c
  9074  00198A  D034               	goto	l917
  9075                           
  9076                           ; Switch size 1, requested type "space"
  9077                           ; Number of cases is 2, Range of values is 0 to 1
  9078                           ; switch strategies available:
  9079                           ; Name         Instructions Cycles
  9080                           ; simple_byte            7     4 (average)
  9081                           ;	Chosen strategy is simple_byte
  9082  00198C  501F               	movf	??_Debounce_Inputs,w,c
  9083  00198E  0A00               	xorlw	0	; case 0
  9084  001990  B4D8               	btfsc	status,2,c
  9085  001992  D7E1               	goto	l913
  9086  001994  0A01               	xorlw	1	; case 1
  9087  001996  B4D8               	btfsc	status,2,c
  9088  001998  D7C2               	goto	l909
  9089                           
  9090                           ;io.c: 311: switch(!PORTBbits.RB5)
  9091  00199A  D02C               	goto	l917
  9092  00199C  5033               	movf	_Button_Contact_Counter_LB,w,c
  9093  00199E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9094  0019A0  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9095  0019A2  0E00               	movlw	0
  9096  0019A4  6E14               	movwf	GETxAPIxVAL@index+1,c
  9097  0019A6  0E1B               	movlw	27
  9098  0019A8  6E13               	movwf	GETxAPIxVAL@index,c
  9099  0019AA  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9100  0019AE  501F               	movf	??_Debounce_Inputs,w,c
  9101  0019B0  5C13               	subwf	?_GETxAPIxVAL,w,c
  9102  0019B2  5020               	movf	??_Debounce_Inputs+1,w,c
  9103  0019B4  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9104  0019B6  A0D8               	btfss	status,0,c
  9105  0019B8  D002               	goto	l919
  9106                           
  9107                           ;io.c: 314: {
  9108                           ;io.c: 315: Button_Contact_Counter_LB++;
  9109  0019BA  2A33               	incf	_Button_Contact_Counter_LB,f,c
  9110                           
  9111                           ;io.c: 317: }
  9112                           
  9113                           ;io.c: 316: break;
  9114  0019BC  D05A               	goto	l926
  9115  0019BE                     l919:
  9116                           
  9117                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  9118  0019BE  0E00               	movlw	0
  9119  0019C0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9120  0019C2  0E23               	movlw	35
  9121  0019C4  6E19               	movwf	SETxAPIxVAL@index,c
  9122  0019C6  0E00               	movlw	0
  9123  0019C8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9124  0019CA  0E01               	movlw	1
  9125  0019CC  6E1B               	movwf	SETxAPIxVAL@value,c
  9126  0019CE  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9127                           
  9128                           ;io.c: 319: break;
  9129  0019D2  D04F               	goto	l926
  9130  0019D4  5033               	movf	_Button_Contact_Counter_LB,w,c
  9131  0019D6  B4D8               	btfsc	status,2,c
  9132  0019D8  D002               	goto	l923
  9133                           
  9134                           ;io.c: 322: {
  9135                           ;io.c: 323: Button_Contact_Counter_LB--;
  9136  0019DA  0633               	decf	_Button_Contact_Counter_LB,f,c
  9137                           
  9138                           ;io.c: 325: }
  9139                           
  9140                           ;io.c: 324: break;
  9141  0019DC  D04A               	goto	l926
  9142  0019DE                     l923:
  9143                           
  9144                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  9145  0019DE  0E00               	movlw	0
  9146  0019E0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9147  0019E2  0E23               	movlw	35
  9148  0019E4  6E19               	movwf	SETxAPIxVAL@index,c
  9149  0019E6  0E00               	movlw	0
  9150  0019E8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9151  0019EA  0E00               	movlw	0
  9152  0019EC  6E1B               	movwf	SETxAPIxVAL@value,c
  9153  0019EE  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9154                           
  9155                           ;io.c: 330: }
  9156                           
  9157                           ;io.c: 329: default : break;
  9158                           
  9159                           ;io.c: 327: break;
  9160  0019F2  D03F               	goto	l926
  9161  0019F4                     l917:
  9162  0019F4  BA81               	btfsc	3969,5,c	;volatile
  9163  0019F6  D002               	goto	u7440
  9164  0019F8  0E01               	movlw	1
  9165  0019FA  D001               	goto	u7450
  9166  0019FC                     u7440:
  9167  0019FC  0E00               	movlw	0
  9168  0019FE                     u7450:
  9169  0019FE  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9170  001A00  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9171                           
  9172                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9173                           ; Switch size 1, requested type "space"
  9174                           ; Number of cases is 1, Range of values is 0 to 0
  9175                           ; switch strategies available:
  9176                           ; Name         Instructions Cycles
  9177                           ; simple_byte            4     3 (average)
  9178                           ;	Chosen strategy is simple_byte
  9179  001A02  5020               	movf	??_Debounce_Inputs+1,w,c
  9180  001A04  0A00               	xorlw	0	; case 0
  9181  001A06  A4D8               	btfss	status,2,c
  9182  001A08  D034               	goto	l926
  9183                           
  9184                           ; Switch size 1, requested type "space"
  9185                           ; Number of cases is 2, Range of values is 0 to 1
  9186                           ; switch strategies available:
  9187                           ; Name         Instructions Cycles
  9188                           ; simple_byte            7     4 (average)
  9189                           ;	Chosen strategy is simple_byte
  9190  001A0A  501F               	movf	??_Debounce_Inputs,w,c
  9191  001A0C  0A00               	xorlw	0	; case 0
  9192  001A0E  B4D8               	btfsc	status,2,c
  9193  001A10  D7E1               	goto	l922
  9194  001A12  0A01               	xorlw	1	; case 1
  9195  001A14  B4D8               	btfsc	status,2,c
  9196  001A16  D7C2               	goto	l918
  9197                           
  9198                           ;io.c: 333: switch(!PORTBbits.RB4)
  9199  001A18  D02C               	goto	l926
  9200  001A1A  5032               	movf	_Button_Contact_Counter_LF,w,c
  9201  001A1C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9202  001A1E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9203  001A20  0E00               	movlw	0
  9204  001A22  6E14               	movwf	GETxAPIxVAL@index+1,c
  9205  001A24  0E1B               	movlw	27
  9206  001A26  6E13               	movwf	GETxAPIxVAL@index,c
  9207  001A28  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9208  001A2C  501F               	movf	??_Debounce_Inputs,w,c
  9209  001A2E  5C13               	subwf	?_GETxAPIxVAL,w,c
  9210  001A30  5020               	movf	??_Debounce_Inputs+1,w,c
  9211  001A32  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9212  001A34  A0D8               	btfss	status,0,c
  9213  001A36  D002               	goto	l928
  9214                           
  9215                           ;io.c: 336: {
  9216                           ;io.c: 337: Button_Contact_Counter_LF++;
  9217  001A38  2A32               	incf	_Button_Contact_Counter_LF,f,c
  9218                           
  9219                           ;io.c: 339: }
  9220                           
  9221                           ;io.c: 338: break;
  9222  001A3A  D05A               	goto	l935
  9223  001A3C                     l928:
  9224                           
  9225                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  9226  001A3C  0E00               	movlw	0
  9227  001A3E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9228  001A40  0E24               	movlw	36
  9229  001A42  6E19               	movwf	SETxAPIxVAL@index,c
  9230  001A44  0E00               	movlw	0
  9231  001A46  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9232  001A48  0E01               	movlw	1
  9233  001A4A  6E1B               	movwf	SETxAPIxVAL@value,c
  9234  001A4C  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9235                           
  9236                           ;io.c: 341: break;
  9237  001A50  D04F               	goto	l935
  9238  001A52  5032               	movf	_Button_Contact_Counter_LF,w,c
  9239  001A54  B4D8               	btfsc	status,2,c
  9240  001A56  D002               	goto	l932
  9241                           
  9242                           ;io.c: 344: {
  9243                           ;io.c: 345: Button_Contact_Counter_LF--;
  9244  001A58  0632               	decf	_Button_Contact_Counter_LF,f,c
  9245                           
  9246                           ;io.c: 347: }
  9247                           
  9248                           ;io.c: 346: break;
  9249  001A5A  D04A               	goto	l935
  9250  001A5C                     l932:
  9251                           
  9252                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  9253  001A5C  0E00               	movlw	0
  9254  001A5E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9255  001A60  0E24               	movlw	36
  9256  001A62  6E19               	movwf	SETxAPIxVAL@index,c
  9257  001A64  0E00               	movlw	0
  9258  001A66  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9259  001A68  0E00               	movlw	0
  9260  001A6A  6E1B               	movwf	SETxAPIxVAL@value,c
  9261  001A6C  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9262                           
  9263                           ;io.c: 352: }
  9264                           
  9265                           ;io.c: 351: default : break;
  9266                           
  9267                           ;io.c: 349: break;
  9268  001A70  D03F               	goto	l935
  9269  001A72                     l926:
  9270  001A72  B881               	btfsc	3969,4,c	;volatile
  9271  001A74  D002               	goto	u7480
  9272  001A76  0E01               	movlw	1
  9273  001A78  D001               	goto	u7490
  9274  001A7A                     u7480:
  9275  001A7A  0E00               	movlw	0
  9276  001A7C                     u7490:
  9277  001A7C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9278  001A7E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9279                           
  9280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9281                           ; Switch size 1, requested type "space"
  9282                           ; Number of cases is 1, Range of values is 0 to 0
  9283                           ; switch strategies available:
  9284                           ; Name         Instructions Cycles
  9285                           ; simple_byte            4     3 (average)
  9286                           ;	Chosen strategy is simple_byte
  9287  001A80  5020               	movf	??_Debounce_Inputs+1,w,c
  9288  001A82  0A00               	xorlw	0	; case 0
  9289  001A84  A4D8               	btfss	status,2,c
  9290  001A86  D034               	goto	l935
  9291                           
  9292                           ; Switch size 1, requested type "space"
  9293                           ; Number of cases is 2, Range of values is 0 to 1
  9294                           ; switch strategies available:
  9295                           ; Name         Instructions Cycles
  9296                           ; simple_byte            7     4 (average)
  9297                           ;	Chosen strategy is simple_byte
  9298  001A88  501F               	movf	??_Debounce_Inputs,w,c
  9299  001A8A  0A00               	xorlw	0	; case 0
  9300  001A8C  B4D8               	btfsc	status,2,c
  9301  001A8E  D7E1               	goto	l931
  9302  001A90  0A01               	xorlw	1	; case 1
  9303  001A92  B4D8               	btfsc	status,2,c
  9304  001A94  D7C2               	goto	l927
  9305                           
  9306                           ;io.c: 355: switch(!PORTBbits.RB3)
  9307  001A96  D02C               	goto	l935
  9308  001A98  5031               	movf	_Button_Contact_Counter_RB,w,c
  9309  001A9A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9310  001A9C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9311  001A9E  0E00               	movlw	0
  9312  001AA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  9313  001AA2  0E1B               	movlw	27
  9314  001AA4  6E13               	movwf	GETxAPIxVAL@index,c
  9315  001AA6  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9316  001AAA  501F               	movf	??_Debounce_Inputs,w,c
  9317  001AAC  5C13               	subwf	?_GETxAPIxVAL,w,c
  9318  001AAE  5020               	movf	??_Debounce_Inputs+1,w,c
  9319  001AB0  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9320  001AB2  A0D8               	btfss	status,0,c
  9321  001AB4  D002               	goto	l937
  9322                           
  9323                           ;io.c: 358: {
  9324                           ;io.c: 359: Button_Contact_Counter_RB++;
  9325  001AB6  2A31               	incf	_Button_Contact_Counter_RB,f,c
  9326                           
  9327                           ;io.c: 361: }
  9328                           
  9329                           ;io.c: 360: break;
  9330  001AB8  D05A               	goto	l944
  9331  001ABA                     l937:
  9332                           
  9333                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  9334  001ABA  0E00               	movlw	0
  9335  001ABC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9336  001ABE  0E25               	movlw	37
  9337  001AC0  6E19               	movwf	SETxAPIxVAL@index,c
  9338  001AC2  0E00               	movlw	0
  9339  001AC4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9340  001AC6  0E01               	movlw	1
  9341  001AC8  6E1B               	movwf	SETxAPIxVAL@value,c
  9342  001ACA  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9343                           
  9344                           ;io.c: 363: break;
  9345  001ACE  D04F               	goto	l944
  9346  001AD0  5031               	movf	_Button_Contact_Counter_RB,w,c
  9347  001AD2  B4D8               	btfsc	status,2,c
  9348  001AD4  D002               	goto	l941
  9349                           
  9350                           ;io.c: 366: {
  9351                           ;io.c: 367: Button_Contact_Counter_RB--;
  9352  001AD6  0631               	decf	_Button_Contact_Counter_RB,f,c
  9353                           
  9354                           ;io.c: 369: }
  9355                           
  9356                           ;io.c: 368: break;
  9357  001AD8  D04A               	goto	l944
  9358  001ADA                     l941:
  9359                           
  9360                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  9361  001ADA  0E00               	movlw	0
  9362  001ADC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9363  001ADE  0E25               	movlw	37
  9364  001AE0  6E19               	movwf	SETxAPIxVAL@index,c
  9365  001AE2  0E00               	movlw	0
  9366  001AE4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9367  001AE6  0E00               	movlw	0
  9368  001AE8  6E1B               	movwf	SETxAPIxVAL@value,c
  9369  001AEA  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9370                           
  9371                           ;io.c: 374: }
  9372                           
  9373                           ;io.c: 373: default : break;
  9374                           
  9375                           ;io.c: 371: break;
  9376  001AEE  D03F               	goto	l944
  9377  001AF0                     l935:
  9378  001AF0  B681               	btfsc	3969,3,c	;volatile
  9379  001AF2  D002               	goto	u7520
  9380  001AF4  0E01               	movlw	1
  9381  001AF6  D001               	goto	u7530
  9382  001AF8                     u7520:
  9383  001AF8  0E00               	movlw	0
  9384  001AFA                     u7530:
  9385  001AFA  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9386  001AFC  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9387                           
  9388                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9389                           ; Switch size 1, requested type "space"
  9390                           ; Number of cases is 1, Range of values is 0 to 0
  9391                           ; switch strategies available:
  9392                           ; Name         Instructions Cycles
  9393                           ; simple_byte            4     3 (average)
  9394                           ;	Chosen strategy is simple_byte
  9395  001AFE  5020               	movf	??_Debounce_Inputs+1,w,c
  9396  001B00  0A00               	xorlw	0	; case 0
  9397  001B02  A4D8               	btfss	status,2,c
  9398  001B04  D034               	goto	l944
  9399                           
  9400                           ; Switch size 1, requested type "space"
  9401                           ; Number of cases is 2, Range of values is 0 to 1
  9402                           ; switch strategies available:
  9403                           ; Name         Instructions Cycles
  9404                           ; simple_byte            7     4 (average)
  9405                           ;	Chosen strategy is simple_byte
  9406  001B06  501F               	movf	??_Debounce_Inputs,w,c
  9407  001B08  0A00               	xorlw	0	; case 0
  9408  001B0A  B4D8               	btfsc	status,2,c
  9409  001B0C  D7E1               	goto	l940
  9410  001B0E  0A01               	xorlw	1	; case 1
  9411  001B10  B4D8               	btfsc	status,2,c
  9412  001B12  D7C2               	goto	l936
  9413                           
  9414                           ;io.c: 377: switch(!PORTBbits.RB2)
  9415  001B14  D02C               	goto	l944
  9416  001B16  5030               	movf	_Button_Contact_Counter_RF,w,c
  9417  001B18  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9418  001B1A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9419  001B1C  0E00               	movlw	0
  9420  001B1E  6E14               	movwf	GETxAPIxVAL@index+1,c
  9421  001B20  0E1B               	movlw	27
  9422  001B22  6E13               	movwf	GETxAPIxVAL@index,c
  9423  001B24  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9424  001B28  501F               	movf	??_Debounce_Inputs,w,c
  9425  001B2A  5C13               	subwf	?_GETxAPIxVAL,w,c
  9426  001B2C  5020               	movf	??_Debounce_Inputs+1,w,c
  9427  001B2E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9428  001B30  A0D8               	btfss	status,0,c
  9429  001B32  D002               	goto	l946
  9430                           
  9431                           ;io.c: 380: {
  9432                           ;io.c: 381: Button_Contact_Counter_RF++;
  9433  001B34  2A30               	incf	_Button_Contact_Counter_RF,f,c
  9434                           
  9435                           ;io.c: 383: }
  9436                           
  9437                           ;io.c: 382: break;
  9438  001B36  D05A               	goto	l953
  9439  001B38                     l946:
  9440                           
  9441                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  9442  001B38  0E00               	movlw	0
  9443  001B3A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9444  001B3C  0E26               	movlw	38
  9445  001B3E  6E19               	movwf	SETxAPIxVAL@index,c
  9446  001B40  0E00               	movlw	0
  9447  001B42  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9448  001B44  0E01               	movlw	1
  9449  001B46  6E1B               	movwf	SETxAPIxVAL@value,c
  9450  001B48  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9451                           
  9452                           ;io.c: 385: break;
  9453  001B4C  D04F               	goto	l953
  9454  001B4E  5030               	movf	_Button_Contact_Counter_RF,w,c
  9455  001B50  B4D8               	btfsc	status,2,c
  9456  001B52  D002               	goto	l950
  9457                           
  9458                           ;io.c: 388: {
  9459                           ;io.c: 389: Button_Contact_Counter_RF--;
  9460  001B54  0630               	decf	_Button_Contact_Counter_RF,f,c
  9461                           
  9462                           ;io.c: 391: }
  9463                           
  9464                           ;io.c: 390: break;
  9465  001B56  D04A               	goto	l953
  9466  001B58                     l950:
  9467                           
  9468                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  9469  001B58  0E00               	movlw	0
  9470  001B5A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9471  001B5C  0E26               	movlw	38
  9472  001B5E  6E19               	movwf	SETxAPIxVAL@index,c
  9473  001B60  0E00               	movlw	0
  9474  001B62  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9475  001B64  0E00               	movlw	0
  9476  001B66  6E1B               	movwf	SETxAPIxVAL@value,c
  9477  001B68  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9478                           
  9479                           ;io.c: 396: }
  9480                           
  9481                           ;io.c: 395: default : break;
  9482                           
  9483                           ;io.c: 393: break;
  9484  001B6C  D03F               	goto	l953
  9485  001B6E                     l944:
  9486  001B6E  B481               	btfsc	3969,2,c	;volatile
  9487  001B70  D002               	goto	u7560
  9488  001B72  0E01               	movlw	1
  9489  001B74  D001               	goto	u7570
  9490  001B76                     u7560:
  9491  001B76  0E00               	movlw	0
  9492  001B78                     u7570:
  9493  001B78  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9494  001B7A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9495                           
  9496                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9497                           ; Switch size 1, requested type "space"
  9498                           ; Number of cases is 1, Range of values is 0 to 0
  9499                           ; switch strategies available:
  9500                           ; Name         Instructions Cycles
  9501                           ; simple_byte            4     3 (average)
  9502                           ;	Chosen strategy is simple_byte
  9503  001B7C  5020               	movf	??_Debounce_Inputs+1,w,c
  9504  001B7E  0A00               	xorlw	0	; case 0
  9505  001B80  A4D8               	btfss	status,2,c
  9506  001B82  D034               	goto	l953
  9507                           
  9508                           ; Switch size 1, requested type "space"
  9509                           ; Number of cases is 2, Range of values is 0 to 1
  9510                           ; switch strategies available:
  9511                           ; Name         Instructions Cycles
  9512                           ; simple_byte            7     4 (average)
  9513                           ;	Chosen strategy is simple_byte
  9514  001B84  501F               	movf	??_Debounce_Inputs,w,c
  9515  001B86  0A00               	xorlw	0	; case 0
  9516  001B88  B4D8               	btfsc	status,2,c
  9517  001B8A  D7E1               	goto	l949
  9518  001B8C  0A01               	xorlw	1	; case 1
  9519  001B8E  B4D8               	btfsc	status,2,c
  9520  001B90  D7C2               	goto	l945
  9521                           
  9522                           ;io.c: 399: switch(PORTCbits.RC1)
  9523  001B92  D02C               	goto	l953
  9524  001B94  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9525  001B96  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9526  001B98  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9527  001B9A  0E00               	movlw	0
  9528  001B9C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9529  001B9E  0E1B               	movlw	27
  9530  001BA0  6E13               	movwf	GETxAPIxVAL@index,c
  9531  001BA2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9532  001BA6  501F               	movf	??_Debounce_Inputs,w,c
  9533  001BA8  5C13               	subwf	?_GETxAPIxVAL,w,c
  9534  001BAA  5020               	movf	??_Debounce_Inputs+1,w,c
  9535  001BAC  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9536  001BAE  A0D8               	btfss	status,0,c
  9537  001BB0  D002               	goto	l955
  9538                           
  9539                           ;io.c: 402: {
  9540                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  9541  001BB2  2A3A               	incf	_Reed_Contact_LMU_Counter,f,c
  9542                           
  9543                           ;io.c: 405: }
  9544                           
  9545                           ;io.c: 404: break;
  9546  001BB4  D053               	goto	l962
  9547  001BB6                     l955:
  9548                           
  9549                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  9550  001BB6  0E00               	movlw	0
  9551  001BB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9552  001BBA  0E29               	movlw	41
  9553  001BBC  6E19               	movwf	SETxAPIxVAL@index,c
  9554  001BBE  0E00               	movlw	0
  9555  001BC0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9556  001BC2  0E01               	movlw	1
  9557  001BC4  6E1B               	movwf	SETxAPIxVAL@value,c
  9558  001BC6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9559                           
  9560                           ;io.c: 407: break;
  9561  001BCA  D048               	goto	l962
  9562  001BCC  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9563  001BCE  B4D8               	btfsc	status,2,c
  9564  001BD0  D002               	goto	l959
  9565                           
  9566                           ;io.c: 410: {
  9567                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  9568  001BD2  063A               	decf	_Reed_Contact_LMU_Counter,f,c
  9569                           
  9570                           ;io.c: 413: }
  9571                           
  9572                           ;io.c: 412: break;
  9573  001BD4  D043               	goto	l962
  9574  001BD6                     l959:
  9575                           
  9576                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  9577  001BD6  0E00               	movlw	0
  9578  001BD8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9579  001BDA  0E29               	movlw	41
  9580  001BDC  6E19               	movwf	SETxAPIxVAL@index,c
  9581  001BDE  0E00               	movlw	0
  9582  001BE0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9583  001BE2  0E00               	movlw	0
  9584  001BE4  6E1B               	movwf	SETxAPIxVAL@value,c
  9585  001BE6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9586                           
  9587                           ;io.c: 418: }
  9588                           
  9589                           ;io.c: 417: default : break;
  9590                           
  9591                           ;io.c: 415: break;
  9592  001BEA  D038               	goto	l962
  9593  001BEC                     l953:
  9594  001BEC  A282               	btfss	3970,1,c	;volatile
  9595  001BEE  D002               	goto	u7600
  9596  001BF0  0E01               	movlw	1
  9597  001BF2  D001               	goto	u7606
  9598  001BF4                     u7600:
  9599  001BF4  0E00               	movlw	0
  9600  001BF6                     u7606:
  9601                           
  9602                           ; Switch size 1, requested type "space"
  9603                           ; Number of cases is 2, Range of values is 0 to 1
  9604                           ; switch strategies available:
  9605                           ; Name         Instructions Cycles
  9606                           ; simple_byte            7     4 (average)
  9607                           ;	Chosen strategy is simple_byte
  9608  001BF6  0A00               	xorlw	0	; case 0
  9609  001BF8  B4D8               	btfsc	status,2,c
  9610  001BFA  D7CC               	goto	l954
  9611  001BFC  0A01               	xorlw	1	; case 1
  9612  001BFE  B4D8               	btfsc	status,2,c
  9613  001C00  D7E5               	goto	l958
  9614                           
  9615                           ;io.c: 421: switch(PORTDbits.RD4)
  9616  001C02  D02C               	goto	l962
  9617  001C04  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9618  001C06  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9619  001C08  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9620  001C0A  0E00               	movlw	0
  9621  001C0C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9622  001C0E  0E1B               	movlw	27
  9623  001C10  6E13               	movwf	GETxAPIxVAL@index,c
  9624  001C12  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9625  001C16  501F               	movf	??_Debounce_Inputs,w,c
  9626  001C18  5C13               	subwf	?_GETxAPIxVAL,w,c
  9627  001C1A  5020               	movf	??_Debounce_Inputs+1,w,c
  9628  001C1C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9629  001C1E  A0D8               	btfss	status,0,c
  9630  001C20  D002               	goto	l964
  9631                           
  9632                           ;io.c: 424: {
  9633                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  9634  001C22  2A39               	incf	_Reed_Contact_LMD_Counter,f,c
  9635                           
  9636                           ;io.c: 427: }
  9637                           
  9638                           ;io.c: 426: break;
  9639  001C24  D053               	goto	l971
  9640  001C26                     l964:
  9641                           
  9642                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  9643  001C26  0E00               	movlw	0
  9644  001C28  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9645  001C2A  0E2A               	movlw	42
  9646  001C2C  6E19               	movwf	SETxAPIxVAL@index,c
  9647  001C2E  0E00               	movlw	0
  9648  001C30  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9649  001C32  0E01               	movlw	1
  9650  001C34  6E1B               	movwf	SETxAPIxVAL@value,c
  9651  001C36  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9652                           
  9653                           ;io.c: 429: break;
  9654  001C3A  D048               	goto	l971
  9655  001C3C  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9656  001C3E  B4D8               	btfsc	status,2,c
  9657  001C40  D002               	goto	l968
  9658                           
  9659                           ;io.c: 432: {
  9660                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  9661  001C42  0639               	decf	_Reed_Contact_LMD_Counter,f,c
  9662                           
  9663                           ;io.c: 435: }
  9664                           
  9665                           ;io.c: 434: break;
  9666  001C44  D043               	goto	l971
  9667  001C46                     l968:
  9668                           
  9669                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9670  001C46  0E00               	movlw	0
  9671  001C48  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9672  001C4A  0E2A               	movlw	42
  9673  001C4C  6E19               	movwf	SETxAPIxVAL@index,c
  9674  001C4E  0E00               	movlw	0
  9675  001C50  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9676  001C52  0E00               	movlw	0
  9677  001C54  6E1B               	movwf	SETxAPIxVAL@value,c
  9678  001C56  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9679                           
  9680                           ;io.c: 440: }
  9681                           
  9682                           ;io.c: 439: default : break;
  9683                           
  9684                           ;io.c: 437: break;
  9685  001C5A  D038               	goto	l971
  9686  001C5C                     l962:
  9687  001C5C  A883               	btfss	3971,4,c	;volatile
  9688  001C5E  D002               	goto	u7630
  9689  001C60  0E01               	movlw	1
  9690  001C62  D001               	goto	u7636
  9691  001C64                     u7630:
  9692  001C64  0E00               	movlw	0
  9693  001C66                     u7636:
  9694                           
  9695                           ; Switch size 1, requested type "space"
  9696                           ; Number of cases is 2, Range of values is 0 to 1
  9697                           ; switch strategies available:
  9698                           ; Name         Instructions Cycles
  9699                           ; simple_byte            7     4 (average)
  9700                           ;	Chosen strategy is simple_byte
  9701  001C66  0A00               	xorlw	0	; case 0
  9702  001C68  B4D8               	btfsc	status,2,c
  9703  001C6A  D7CC               	goto	l963
  9704  001C6C  0A01               	xorlw	1	; case 1
  9705  001C6E  B4D8               	btfsc	status,2,c
  9706  001C70  D7E5               	goto	l967
  9707                           
  9708                           ;io.c: 443: switch(PORTEbits.RE1)
  9709  001C72  D02C               	goto	l971
  9710  001C74  5038               	movf	_Reed_Contact_RMU_Counter,w,c
  9711  001C76  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9712  001C78  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9713  001C7A  0E00               	movlw	0
  9714  001C7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9715  001C7E  0E1B               	movlw	27
  9716  001C80  6E13               	movwf	GETxAPIxVAL@index,c
  9717  001C82  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9718  001C86  501F               	movf	??_Debounce_Inputs,w,c
  9719  001C88  5C13               	subwf	?_GETxAPIxVAL,w,c
  9720  001C8A  5020               	movf	??_Debounce_Inputs+1,w,c
  9721  001C8C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9722  001C8E  A0D8               	btfss	status,0,c
  9723  001C90  D002               	goto	l973
  9724                           
  9725                           ;io.c: 446: {
  9726                           ;io.c: 447: Reed_Contact_RMU_Counter++;
  9727  001C92  2A38               	incf	_Reed_Contact_RMU_Counter,f,c
  9728                           
  9729                           ;io.c: 449: }
  9730                           
  9731                           ;io.c: 448: break;
  9732  001C94  D053               	goto	l980
  9733  001C96                     l973:
  9734                           
  9735                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
  9736  001C96  0E00               	movlw	0
  9737  001C98  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9738  001C9A  0E2B               	movlw	43
  9739  001C9C  6E19               	movwf	SETxAPIxVAL@index,c
  9740  001C9E  0E00               	movlw	0
  9741  001CA0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9742  001CA2  0E01               	movlw	1
  9743  001CA4  6E1B               	movwf	SETxAPIxVAL@value,c
  9744  001CA6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9745                           
  9746                           ;io.c: 451: break;
  9747  001CAA  D048               	goto	l980
  9748  001CAC  5038               	movf	_Reed_Contact_RMU_Counter,w,c
  9749  001CAE  B4D8               	btfsc	status,2,c
  9750  001CB0  D002               	goto	l977
  9751                           
  9752                           ;io.c: 454: {
  9753                           ;io.c: 455: Reed_Contact_RMU_Counter--;
  9754  001CB2  0638               	decf	_Reed_Contact_RMU_Counter,f,c
  9755                           
  9756                           ;io.c: 457: }
  9757                           
  9758                           ;io.c: 456: break;
  9759  001CB4  D043               	goto	l980
  9760  001CB6                     l977:
  9761                           
  9762                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
  9763  001CB6  0E00               	movlw	0
  9764  001CB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9765  001CBA  0E2B               	movlw	43
  9766  001CBC  6E19               	movwf	SETxAPIxVAL@index,c
  9767  001CBE  0E00               	movlw	0
  9768  001CC0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9769  001CC2  0E00               	movlw	0
  9770  001CC4  6E1B               	movwf	SETxAPIxVAL@value,c
  9771  001CC6  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9772                           
  9773                           ;io.c: 462: }
  9774                           
  9775                           ;io.c: 461: default : break;
  9776                           
  9777                           ;io.c: 459: break;
  9778  001CCA  D038               	goto	l980
  9779  001CCC                     l971:
  9780  001CCC  A284               	btfss	3972,1,c	;volatile
  9781  001CCE  D002               	goto	u7660
  9782  001CD0  0E01               	movlw	1
  9783  001CD2  D001               	goto	u7666
  9784  001CD4                     u7660:
  9785  001CD4  0E00               	movlw	0
  9786  001CD6                     u7666:
  9787                           
  9788                           ; Switch size 1, requested type "space"
  9789                           ; Number of cases is 2, Range of values is 0 to 1
  9790                           ; switch strategies available:
  9791                           ; Name         Instructions Cycles
  9792                           ; simple_byte            7     4 (average)
  9793                           ;	Chosen strategy is simple_byte
  9794  001CD6  0A00               	xorlw	0	; case 0
  9795  001CD8  B4D8               	btfsc	status,2,c
  9796  001CDA  D7CC               	goto	l972
  9797  001CDC  0A01               	xorlw	1	; case 1
  9798  001CDE  B4D8               	btfsc	status,2,c
  9799  001CE0  D7E5               	goto	l976
  9800                           
  9801                           ;io.c: 465: switch(PORTEbits.RE0)
  9802  001CE2  D02C               	goto	l980
  9803  001CE4  5037               	movf	_Reed_Contact_RMD_Counter,w,c
  9804  001CE6  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9805  001CE8  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9806  001CEA  0E00               	movlw	0
  9807  001CEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  9808  001CEE  0E1B               	movlw	27
  9809  001CF0  6E13               	movwf	GETxAPIxVAL@index,c
  9810  001CF2  EC47  F021         	call	_GETxAPIxVAL	;wreg free
  9811  001CF6  501F               	movf	??_Debounce_Inputs,w,c
  9812  001CF8  5C13               	subwf	?_GETxAPIxVAL,w,c
  9813  001CFA  5020               	movf	??_Debounce_Inputs+1,w,c
  9814  001CFC  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9815  001CFE  A0D8               	btfss	status,0,c
  9816  001D00  D002               	goto	l982
  9817                           
  9818                           ;io.c: 468: {
  9819                           ;io.c: 469: Reed_Contact_RMD_Counter++;
  9820  001D02  2A37               	incf	_Reed_Contact_RMD_Counter,f,c
  9821                           
  9822                           ;io.c: 471: }
  9823                           
  9824                           ;io.c: 470: break;
  9825  001D04  0012               	return	
  9826  001D06                     l982:
  9827                           
  9828                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
  9829  001D06  0E00               	movlw	0
  9830  001D08  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9831  001D0A  0E2C               	movlw	44
  9832  001D0C  6E19               	movwf	SETxAPIxVAL@index,c
  9833  001D0E  0E00               	movlw	0
  9834  001D10  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9835  001D12  0E01               	movlw	1
  9836  001D14  6E1B               	movwf	SETxAPIxVAL@value,c
  9837  001D16  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9838                           
  9839                           ;io.c: 473: break;
  9840  001D1A  0012               	return	
  9841  001D1C  5037               	movf	_Reed_Contact_RMD_Counter,w,c
  9842  001D1E  B4D8               	btfsc	status,2,c
  9843  001D20  D002               	goto	l986
  9844                           
  9845                           ;io.c: 476: {
  9846                           ;io.c: 477: Reed_Contact_RMD_Counter--;
  9847  001D22  0637               	decf	_Reed_Contact_RMD_Counter,f,c
  9848                           
  9849                           ;io.c: 479: }
  9850                           
  9851                           ;io.c: 478: break;
  9852  001D24  0012               	return	
  9853  001D26                     l986:
  9854                           
  9855                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
  9856  001D26  0E00               	movlw	0
  9857  001D28  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9858  001D2A  0E2C               	movlw	44
  9859  001D2C  6E19               	movwf	SETxAPIxVAL@index,c
  9860  001D2E  0E00               	movlw	0
  9861  001D30  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9862  001D32  0E00               	movlw	0
  9863  001D34  6E1B               	movwf	SETxAPIxVAL@value,c
  9864  001D36  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
  9865                           
  9866                           ;io.c: 484: }
  9867                           
  9868                           ;io.c: 483: default : break;
  9869                           
  9870                           ;io.c: 481: break;
  9871  001D3A  0012               	return	
  9872  001D3C                     l980:
  9873  001D3C  A084               	btfss	3972,0,c	;volatile
  9874  001D3E  D002               	goto	u7690
  9875  001D40  0E01               	movlw	1
  9876  001D42  D001               	goto	u7696
  9877  001D44                     u7690:
  9878  001D44  0E00               	movlw	0
  9879  001D46                     u7696:
  9880                           
  9881                           ; Switch size 1, requested type "space"
  9882                           ; Number of cases is 2, Range of values is 0 to 1
  9883                           ; switch strategies available:
  9884                           ; Name         Instructions Cycles
  9885                           ; simple_byte            7     4 (average)
  9886                           ;	Chosen strategy is simple_byte
  9887  001D46  0A00               	xorlw	0	; case 0
  9888  001D48  B4D8               	btfsc	status,2,c
  9889  001D4A  D7CC               	goto	l981
  9890  001D4C  0A01               	xorlw	1	; case 1
  9891  001D4E  A4D8               	btfss	status,2,c
  9892  001D50  0012               	return	
  9893  001D52  D7E4               	goto	l985
  9894  001D54                     __end_of_Debounce_Inputs:
  9895                           	opt stack 0
  9896                           tblptru	equ	0xFF8
  9897                           tblptrh	equ	0xFF7
  9898                           tblptrl	equ	0xFF6
  9899                           tablat	equ	0xFF5
  9900                           prodh	equ	0xFF4
  9901                           prodl	equ	0xFF3
  9902                           intcon	equ	0xFF2
  9903                           postinc0	equ	0xFEE
  9904                           wreg	equ	0xFE8
  9905                           postinc1	equ	0xFE6
  9906                           postdec1	equ	0xFE5
  9907                           fsr1h	equ	0xFE2
  9908                           fsr1l	equ	0xFE1
  9909                           postinc2	equ	0xFDE
  9910                           postdec2	equ	0xFDD
  9911                           fsr2h	equ	0xFDA
  9912                           fsr2l	equ	0xFD9
  9913                           status	equ	0xFD8
  9914                           
  9915 ;; *************** function _SetDCPWM1 *****************
  9916 ;; Defined at:
  9917 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic18\plib\PWM\pw1setdc.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  dutycycle       2   20[COMRAM] unsigned int 
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;  DCycle          2   24[COMRAM] struct PWMDC
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  1    wreg      void 
  9924 ;; Registers used:
  9925 ;;		wreg, status,2, status,0
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9931 ;;      Params:         2       0       0       0       0       0       0       0       0
  9932 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9933 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9934 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9935 ;;Total ram usage:        6 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    3
  9938 ;; This function calls:
  9939 ;;		Nothing
  9940 ;; This function is called by:
  9941 ;;		_Debounce_Inputs
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	text18
  9946  00410C                     __ptext18:
  9947                           	opt stack 0
  9948  00410C                     _SetDCPWM1:
  9949                           	opt stack 25
  9950                           
  9951                           ;incstack = 0
  9952  00410C  C015  F017         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9953  004110  C016  F018         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9954  004114  0E06               	movlw	6
  9955  004116                     u3995:
  9956  004116  90D8               	bcf	status,0,c
  9957  004118  3617               	rlcf	??_SetDCPWM1,f,c
  9958  00411A  3618               	rlcf	??_SetDCPWM1+1,f,c
  9959  00411C  2EE8               	decfsz	wreg,f,c
  9960  00411E  D7FB               	goto	u3995
  9961  004120  C017  F019         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9962  004124  C018  F01A         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  9963  004128  C01A  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  9964  00412C  C019  F017         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  9965  004130  90D8               	bcf	status,0,c
  9966  004132  3217               	rrcf	??_SetDCPWM1,f,c
  9967  004134  90D8               	bcf	status,0,c
  9968  004136  3217               	rrcf	??_SetDCPWM1,f,c
  9969  004138  0E30               	movlw	48
  9970  00413A  1617               	andwf	??_SetDCPWM1,f,c
  9971  00413C  50BD               	movf	4029,w,c	;volatile
  9972  00413E  0BCF               	andlw	207
  9973  004140  1017               	iorwf	??_SetDCPWM1,w,c
  9974  004142  6EBD               	movwf	4029,c	;volatile
  9975  004144  0012               	return		;funcret
  9976  004146                     __end_of_SetDCPWM1:
  9977                           	opt stack 0
  9978                           tblptru	equ	0xFF8
  9979                           tblptrh	equ	0xFF7
  9980                           tblptrl	equ	0xFF6
  9981                           tablat	equ	0xFF5
  9982                           prodh	equ	0xFF4
  9983                           prodl	equ	0xFF3
  9984                           intcon	equ	0xFF2
  9985                           postinc0	equ	0xFEE
  9986                           wreg	equ	0xFE8
  9987                           postinc1	equ	0xFE6
  9988                           postdec1	equ	0xFE5
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8
  9996                           
  9997 ;; *************** function _READxRECEIVEDxMESSAGE *****************
  9998 ;; Defined at:
  9999 ;;		line 39 in file "../terminal.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  1    wreg      void 
 10006 ;; Registers used:
 10007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10013 ;;      Params:         0       0       0       0       0       0       0       0       0
 10014 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10015 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10016 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10017 ;;Total ram usage:        4 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    6
 10020 ;; This function calls:
 10021 ;;		_EUSART1_Read
 10022 ;;		_TranslateMessage
 10023 ;;		_printf
 10024 ;; This function is called by:
 10025 ;;		_main
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029                           	psect	text19
 10030  00373C                     __ptext19:
 10031                           	opt stack 0
 10032  00373C                     _READxRECEIVEDxMESSAGE:
 10033                           	opt stack 24
 10034                           
 10035                           ;terminal.c: 41: if ((eusart1RxCount) > 0){
 10036                           
 10037                           ;incstack = 0
 10038  00373C  503F               	movf	_eusart1RxCount,w,c	;volatile
 10039  00373E  B4D8               	btfsc	status,2,c
 10040  003740  D07B               	goto	l604
 10041                           
 10042                           ;terminal.c: 44: Received_Data = EUSART1_Read();
 10043  003742  ECA3  F020         	call	_EUSART1_Read	;wreg free
 10044  003746  0100               	movlb	0	; () banked
 10045  003748  6F84               	movwf	_Received_Data& (0+255),b
 10046                           
 10047                           ;terminal.c: 46: switch (RxSwitch){
 10048  00374A  D06B               	goto	l598
 10049  00374C                     
 10050                           ; BSR set to: 0
 10051                           ;terminal.c: 48: pData = &Data[0];
 10052                           
 10053                           ; BSR set to: 0
 10054  00374C  0EAC               	movlw	low _Data
 10055  00374E  6F78               	movwf	_pData& (0+255),b
 10056  003750  0E00               	movlw	high _Data
 10057  003752  6F79               	movwf	(_pData+1)& (0+255),b
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;terminal.c: 49: pLen = &Data[DataLen - 1];
 10061  003754  0EFF               	movlw	255
 10062  003756  6FD8               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
 10063  003758  0EFF               	movlw	255
 10064  00375A  6FD9               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
 10065  00375C  0E43               	movlw	low _DataLen
 10066  00375E  6EF6               	movwf	tblptrl,c
 10067  003760                     	if	1	;There is more than 1 active tblptr byte
 10068  003760  0E08               	movlw	high _DataLen
 10069  003762  6EF7               	movwf	tblptrh,c
 10070  003764                     	endif
 10071  003764                     	if	0	;There are less than 3 active tblptr bytes
 10072  003764                     	endif
 10073  003764  0008               	tblrd		*
 10074  003766  50F5               	movf	tablat,w,c
 10075  003768  6FDA               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
 10076  00376A  6BDB               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
 10077  00376C  51D8               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
 10078  00376E  27DA               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
 10079  003770  51D9               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
 10080  003772  23DB               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
 10081  003774  0EAC               	movlw	low _Data
 10082  003776  25DA               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
 10083  003778  6F76               	movwf	_pLen& (0+255),b
 10084  00377A  0E00               	movlw	high _Data
 10085  00377C  21DB               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
 10086  00377E  6F77               	movwf	(_pLen+1)& (0+255),b
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;terminal.c: 50: if (Received_Data == 's' || Received_Data == 'g'){
 10090  003780  0E73               	movlw	115
 10091  003782  1984               	xorwf	_Received_Data& (0+255),w,b
 10092  003784  B4D8               	btfsc	status,2,c
 10093  003786  D004               	goto	u9110
 10094                           
 10095                           ; BSR set to: 0
 10096  003788  0E67               	movlw	103
 10097  00378A  1984               	xorwf	_Received_Data& (0+255),w,b
 10098  00378C  A4D8               	btfss	status,2,c
 10099  00378E  D00A               	goto	l600
 10100  003790                     u9110:
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;terminal.c: 51: *pData = Received_Data;
 10104                           
 10105                           ; BSR set to: 0
 10106  003790  C078  FFD9         	movff	_pData,fsr2l
 10107  003794  C079  FFDA         	movff	_pData+1,fsr2h
 10108  003798  C084  FFDF         	movff	_Received_Data,indf2
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;terminal.c: 52: *pData++;
 10112  00379C  4B78               	infsnz	_pData& (0+255),f,b
 10113  00379E  2B79               	incf	(_pData+1)& (0+255),f,b
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;terminal.c: 53: RxSwitch = 1;
 10117  0037A0  0E01               	movlw	1
 10118  0037A2  D03D               	goto	L93
 10119  0037A4                     l600:
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;terminal.c: 55: else{
 10123                           ;terminal.c: 56: RxSwitch = 0;
 10124                           
 10125                           ; BSR set to: 0
 10126  0037A4  0E00               	movlw	0
 10127  0037A6  D03B               	goto	L93
 10128  0037A8                     
 10129                           ; BSR set to: 0
 10130                           ;terminal.c: 61: if (Received_Data == 'x'){
 10131                           
 10132                           ; BSR set to: 0
 10133  0037A8  0E78               	movlw	120
 10134  0037AA  1984               	xorwf	_Received_Data& (0+255),w,b
 10135  0037AC  A4D8               	btfss	status,2,c
 10136  0037AE  D7FA               	goto	l600
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;terminal.c: 62: *pData = Received_Data;
 10140  0037B0  C078  FFD9         	movff	_pData,fsr2l
 10141  0037B4  C079  FFDA         	movff	_pData+1,fsr2h
 10142  0037B8  C084  FFDF         	movff	_Received_Data,indf2
 10143  0037BC  D02D               	goto	l614
 10144  0037BE                     
 10145                           ; BSR set to: 0
 10146                           ;terminal.c: 72: if (Received_Data == 'G'){
 10147                           
 10148                           ; BSR set to: 0
 10149  0037BE  0E47               	movlw	71
 10150  0037C0  1984               	xorwf	_Received_Data& (0+255),w,b
 10151  0037C2  B4D8               	btfsc	status,2,c
 10152  0037C4  D009               	goto	l610
 10153  0037C6  D013               	goto	l609
 10154  0037C8                     
 10155                           ; BSR set to: 0
 10156                           ;terminal.c: 76: *pData = '\0';
 10157                           
 10158                           ; BSR set to: 0
 10159  0037C8  C078  FFD9         	movff	_pData,fsr2l
 10160  0037CC  C079  FFDA         	movff	_pData+1,fsr2h
 10161  0037D0  0E00               	movlw	0
 10162  0037D2  6EDF               	movwf	indf2,c
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;terminal.c: 77: pData++;
 10166  0037D4  4B78               	infsnz	_pData& (0+255),f,b
 10167  0037D6  2B79               	incf	(_pData+1)& (0+255),f,b
 10168  0037D8                     l610:
 10169                           
 10170                           ; BSR set to: 0
 10171                           
 10172                           ; BSR set to: 0
 10173  0037D8  5176               	movf	_pLen& (0+255),w,b
 10174  0037DA  5D78               	subwf	_pData& (0+255),w,b
 10175  0037DC  5177               	movf	(_pLen+1)& (0+255),w,b
 10176  0037DE  5979               	subwfb	(_pData+1)& (0+255),w,b
 10177  0037E0  A0D8               	btfss	status,0,c
 10178  0037E2  D7F2               	goto	l611
 10179                           
 10180                           ; BSR set to: 0
 10181                           ;terminal.c: 78: }
 10182                           ;terminal.c: 80: RxSwitch = 3;
 10183                           
 10184                           ; BSR set to: 0
 10185  0037E4  0E03               	movlw	3
 10186  0037E6  6F83               	movwf	_RxSwitch& (0+255),b
 10187                           
 10188                           ;terminal.c: 81: Message_To_Translate = 1;
 10189  0037E8  0E01               	movlw	1
 10190  0037EA  6F82               	movwf	_Message_To_Translate& (0+255),b
 10191                           
 10192                           ;terminal.c: 82: }
 10193  0037EC  D025               	goto	l604
 10194  0037EE                     l609:
 10195                           
 10196                           ; BSR set to: 0
 10197                           ;terminal.c: 83: else{
 10198                           ;terminal.c: 84: *pData = Received_Data;
 10199                           
 10200                           ; BSR set to: 0
 10201  0037EE  C078  FFD9         	movff	_pData,fsr2l
 10202  0037F2  C079  FFDA         	movff	_pData+1,fsr2h
 10203  0037F6  C084  FFDF         	movff	_Received_Data,indf2
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;terminal.c: 85: if (pData > pLen){
 10207  0037FA  5178               	movf	_pData& (0+255),w,b
 10208  0037FC  5D76               	subwf	_pLen& (0+255),w,b
 10209  0037FE  5179               	movf	(_pData+1)& (0+255),w,b
 10210  003800  5977               	subwfb	(_pLen+1)& (0+255),w,b
 10211  003802  B0D8               	btfsc	status,0,c
 10212  003804  D009               	goto	l614
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;terminal.c: 86: printf("E#10\r\n");
 10216  003806  0E4E               	movlw	low STR_1
 10217  003808  6FCB               	movwf	printf@f& (0+255),b
 10218  00380A  0E08               	movlw	high STR_1
 10219  00380C  6FCC               	movwf	(printf@f+1)& (0+255),b
 10220  00380E  ECF5  F019         	call	_printf	;wreg free
 10221                           
 10222                           ;terminal.c: 87: RxSwitch = 0;
 10223  003812  0E00               	movlw	0
 10224  003814  0100               	movlb	0	; () banked
 10225  003816  D003               	goto	L93
 10226  003818                     l614:
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;terminal.c: 89: else{
 10230                           ;terminal.c: 90: pData++;
 10231                           
 10232                           ; BSR set to: 0
 10233  003818  4B78               	infsnz	_pData& (0+255),f,b
 10234  00381A  2B79               	incf	(_pData+1)& (0+255),f,b
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;terminal.c: 91: RxSwitch = 2;
 10238  00381C  0E02               	movlw	2
 10239  00381E                     L93:
 10240  00381E  6F83               	movwf	_RxSwitch& (0+255),b
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;terminal.c: 101: }
 10244                           
 10245                           ; BSR set to: 0
 10246                           ;terminal.c: 100: break;
 10247                           
 10248                           ;terminal.c: 99: default :
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;terminal.c: 97: break;
 10252                           
 10253                           ;terminal.c: 96: case 3 :
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;terminal.c: 92: }
 10257                           ;terminal.c: 93: }
 10258                           ;terminal.c: 94: break;
 10259                           
 10260                           ; BSR set to: 0
 10261  003820  D00B               	goto	l604
 10262  003822                     l598:
 10263                           
 10264                           ; BSR set to: 0
 10265                           
 10266                           ; BSR set to: 0
 10267  003822  5183               	movf	_RxSwitch& (0+255),w,b
 10268                           
 10269                           ; Switch size 1, requested type "space"
 10270                           ; Number of cases is 4, Range of values is 0 to 3
 10271                           ; switch strategies available:
 10272                           ; Name         Instructions Cycles
 10273                           ; simple_byte           13     7 (average)
 10274                           ;	Chosen strategy is simple_byte
 10275  003824  0A00               	xorlw	0	; case 0
 10276  003826  B4D8               	btfsc	status,2,c
 10277  003828  D791               	goto	l599
 10278  00382A  0A01               	xorlw	1	; case 1
 10279  00382C  B4D8               	btfsc	status,2,c
 10280  00382E  D7BC               	goto	l605
 10281  003830  0A03               	xorlw	3	; case 2
 10282  003832  B4D8               	btfsc	status,2,c
 10283  003834  D7C4               	goto	l608
 10284  003836  0A01               	xorlw	1	; case 3
 10285  003838                     l604:
 10286                           
 10287                           ;terminal.c: 102: }
 10288                           ;terminal.c: 104: if (Message_To_Translate == 1){
 10289                           
 10290                           ; BSR set to: 0
 10291                           
 10292                           ; BSR set to: 0
 10293  003838  0100               	movlb	0	; () banked
 10294  00383A  0582               	decf	_Message_To_Translate& (0+255),w,b
 10295  00383C  A4D8               	btfss	status,2,c
 10296  00383E  0012               	return	
 10297                           
 10298                           ; BSR set to: 0
 10299                           ;terminal.c: 105: TranslateMessage();
 10300  003840  EC35  F016         	call	_TranslateMessage	;wreg free
 10301                           
 10302                           ;terminal.c: 106: Message_To_Translate = 0;
 10303  003844  0E00               	movlw	0
 10304  003846  0100               	movlb	0	; () banked
 10305  003848  6F82               	movwf	_Message_To_Translate& (0+255),b
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;terminal.c: 107: RxSwitch = 0;
 10309  00384A  0E00               	movlw	0
 10310  00384C  6F83               	movwf	_RxSwitch& (0+255),b
 10311  00384E  0012               	return	
 10312  003850                     __end_of_READxRECEIVEDxMESSAGE:
 10313                           	opt stack 0
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           postinc0	equ	0xFEE
 10322                           wreg	equ	0xFE8
 10323                           postinc1	equ	0xFE6
 10324                           postdec1	equ	0xFE5
 10325                           fsr1h	equ	0xFE2
 10326                           fsr1l	equ	0xFE1
 10327                           indf2	equ	0xFDF
 10328                           postinc2	equ	0xFDE
 10329                           postdec2	equ	0xFDD
 10330                           fsr2h	equ	0xFDA
 10331                           fsr2l	equ	0xFD9
 10332                           status	equ	0xFD8
 10333                           
 10334 ;; *************** function _TranslateMessage *****************
 10335 ;; Defined at:
 10336 ;;		line 125 in file "../terminal.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;		None
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  Index           2   33[COMRAM] unsigned int 
 10341 ;;  Value           2   31[COMRAM] unsigned int 
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  1    wreg      void 
 10344 ;; Registers used:
 10345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10351 ;;      Params:         0       0       0       0       0       0       0       0       0
 10352 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10353 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10354 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10355 ;;Total ram usage:        4 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    5
 10358 ;; This function calls:
 10359 ;;		_GETxAPIxRW
 10360 ;;		_GETxAPIxVAL
 10361 ;;		_SENDxMESSAGE
 10362 ;;		_SETxAPIxVALxNoxRET
 10363 ;;		_atoi
 10364 ;;		_printf
 10365 ;; This function is called by:
 10366 ;;		_READxRECEIVEDxMESSAGE
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           	psect	text20
 10371  002C6A                     __ptext20:
 10372                           	opt stack 0
 10373  002C6A                     _TranslateMessage:
 10374                           	opt stack 24
 10375                           
 10376                           ;terminal.c: 127: unsigned int Value, Index;
 10377                           ;terminal.c: 129: if(Data[0] == 's'){
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;incstack = 0
 10381  002C6A  0E73               	movlw	115
 10382  002C6C  0100               	movlb	0	; () banked
 10383  002C6E  19AC               	xorwf	_Data& (0+255),w,b
 10384  002C70  A4D8               	btfss	status,2,c
 10385  002C72  D063               	goto	l622
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;terminal.c: 131: pData = &Data[2];
 10389  002C74  0EAE               	movlw	low (_Data+2)
 10390  002C76  6F78               	movwf	_pData& (0+255),b
 10391  002C78  0E00               	movlw	high (_Data+2)
 10392  002C7A  6F79               	movwf	(_pData+1)& (0+255),b
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;terminal.c: 132: Index = (unsigned int)atoi (pData);
 10396  002C7C  C078  F019         	movff	_pData,atoi@s
 10397  002C80  C079  F01A         	movff	_pData+1,atoi@s+1
 10398  002C84  ECA9  F01D         	call	_atoi	;wreg free
 10399  002C88  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10400  002C8C  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10401                           
 10402                           ;terminal.c: 133: pData = &Data[5];
 10403  002C90  0EB1               	movlw	low (_Data+5)
 10404  002C92  0100               	movlb	0	; () banked
 10405  002C94  6F78               	movwf	_pData& (0+255),b
 10406  002C96  0E00               	movlw	high (_Data+5)
 10407  002C98  6F79               	movwf	(_pData+1)& (0+255),b
 10408                           
 10409                           ;terminal.c: 134: Value = (unsigned int)atoi (pData);
 10410  002C9A  C078  F019         	movff	_pData,atoi@s
 10411  002C9E  C079  F01A         	movff	_pData+1,atoi@s+1
 10412  002CA2  ECA9  F01D         	call	_atoi	;wreg free
 10413  002CA6  C019  F020         	movff	?_atoi,TranslateMessage@Value
 10414  002CAA  C01A  F021         	movff	?_atoi+1,TranslateMessage@Value+1
 10415                           
 10416                           ;terminal.c: 136: if (GETxAPIxRW(Index) == 0){
 10417  002CAE  C022  F013         	movff	TranslateMessage@Index,GETxAPIxRW@index
 10418  002CB2  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxRW@index+1
 10419  002CB6  EC55  F021         	call	_GETxAPIxRW	;wreg free
 10420  002CBA  5013               	movf	?_GETxAPIxRW,w,c
 10421  002CBC  1014               	iorwf	?_GETxAPIxRW+1,w,c
 10422  002CBE  A4D8               	btfss	status,2,c
 10423  002CC0  D008               	goto	l623
 10424                           
 10425                           ;terminal.c: 137: printf("E#11\r\n");
 10426  002CC2  0E55               	movlw	low STR_2
 10427  002CC4  0100               	movlb	0	; () banked
 10428  002CC6  6FCB               	movwf	printf@f& (0+255),b
 10429  002CC8  0E08               	movlw	high STR_2
 10430  002CCA  6FCC               	movwf	(printf@f+1)& (0+255),b
 10431  002CCC  ECF5  F019         	call	_printf	;wreg free
 10432                           
 10433                           ;terminal.c: 138: }
 10434  002CD0  0012               	return	
 10435  002CD2                     l623:
 10436                           
 10437                           ;terminal.c: 139: else if (Index < 0xF){
 10438  002CD2  5023               	movf	TranslateMessage@Index+1,w,c
 10439  002CD4  E10C               	bnz	l8728
 10440  002CD6  0E0F               	movlw	15
 10441  002CD8  5C22               	subwf	TranslateMessage@Index,w,c
 10442  002CDA  B0D8               	btfsc	status,0,c
 10443  002CDC  D008               	goto	l625
 10444                           
 10445                           ;terminal.c: 140: printf("E#12\r\n");
 10446  002CDE  0E5C               	movlw	low STR_3
 10447  002CE0  0100               	movlb	0	; () banked
 10448  002CE2  6FCB               	movwf	printf@f& (0+255),b
 10449  002CE4  0E08               	movlw	high STR_3
 10450  002CE6  6FCC               	movwf	(printf@f+1)& (0+255),b
 10451  002CE8  ECF5  F019         	call	_printf	;wreg free
 10452                           
 10453                           ;terminal.c: 141: }
 10454  002CEC  0012               	return	
 10455  002CEE                     l625:
 10456  002CEE                     l8728:
 10457                           
 10458                           ;terminal.c: 142: else if (Index > 89){
 10459  002CEE  5023               	movf	TranslateMessage@Index+1,w,c
 10460  002CF0  E104               	bnz	u8200
 10461  002CF2  0E5A               	movlw	90
 10462  002CF4  5C22               	subwf	TranslateMessage@Index,w,c
 10463  002CF6  A0D8               	btfss	status,0,c
 10464  002CF8  D008               	goto	l627
 10465  002CFA                     u8200:
 10466                           
 10467                           ;terminal.c: 143: printf("E#13\r\n");
 10468  002CFA  0E63               	movlw	low STR_4
 10469  002CFC  0100               	movlb	0	; () banked
 10470  002CFE  6FCB               	movwf	printf@f& (0+255),b
 10471  002D00  0E08               	movlw	high STR_4
 10472  002D02  6FCC               	movwf	(printf@f+1)& (0+255),b
 10473  002D04  ECF5  F019         	call	_printf	;wreg free
 10474                           
 10475                           ;terminal.c: 144: }
 10476  002D08  0012               	return	
 10477  002D0A                     l627:
 10478                           
 10479                           ;terminal.c: 145: else if (Value > 0xFFFE){
 10480  002D0A  2820               	incf	TranslateMessage@Value,w,c
 10481  002D0C  E10B               	bnz	l8736
 10482  002D0E  2821               	incf	TranslateMessage@Value+1,w,c
 10483  002D10  A4D8               	btfss	status,2,c
 10484  002D12  D008               	goto	l629
 10485                           
 10486                           ;terminal.c: 146: printf("E#14\r\n");
 10487  002D14  0E6A               	movlw	low STR_5
 10488  002D16  0100               	movlb	0	; () banked
 10489  002D18  6FCB               	movwf	printf@f& (0+255),b
 10490  002D1A  0E08               	movlw	high STR_5
 10491  002D1C  6FCC               	movwf	(printf@f+1)& (0+255),b
 10492  002D1E  ECF5  F019         	call	_printf	;wreg free
 10493                           
 10494                           ;terminal.c: 147: }
 10495  002D22  0012               	return	
 10496  002D24                     l629:
 10497  002D24                     l8736:
 10498                           
 10499                           ;terminal.c: 148: else{
 10500                           ;terminal.c: 149: SETxAPIxVALxNoxRET(Index, Value);
 10501  002D24  C022  F015         	movff	TranslateMessage@Index,SETxAPIxVALxNoxRET@index
 10502  002D28  C023  F016         	movff	TranslateMessage@Index+1,SETxAPIxVALxNoxRET@index+1
 10503  002D2C  C020  F017         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 10504  002D30  C021  F018         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 10505  002D34  EC68  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
 10506                           
 10507                           ;terminal.c: 150: }
 10508                           ;terminal.c: 151: }
 10509  002D38  0012               	return	
 10510  002D3A                     l622:
 10511                           
 10512                           ;terminal.c: 153: else if (Data[0] == 'g'){
 10513  002D3A  0E67               	movlw	103
 10514  002D3C  0100               	movlb	0	; () banked
 10515  002D3E  19AC               	xorwf	_Data& (0+255),w,b
 10516  002D40  A4D8               	btfss	status,2,c
 10517  002D42  0012               	return	
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;terminal.c: 155: pData = &Data[2];
 10521  002D44  0EAE               	movlw	low (_Data+2)
 10522  002D46  6F78               	movwf	_pData& (0+255),b
 10523  002D48  0E00               	movlw	high (_Data+2)
 10524  002D4A  6F79               	movwf	(_pData+1)& (0+255),b
 10525                           
 10526                           ; BSR set to: 0
 10527                           ;terminal.c: 156: Index = (unsigned int)atoi (pData);
 10528  002D4C  C078  F019         	movff	_pData,atoi@s
 10529  002D50  C079  F01A         	movff	_pData+1,atoi@s+1
 10530  002D54  ECA9  F01D         	call	_atoi	;wreg free
 10531  002D58  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10532  002D5C  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10533                           
 10534                           ;terminal.c: 158: if (Index < 0xF){
 10535  002D60  5023               	movf	TranslateMessage@Index+1,w,c
 10536  002D62  E10C               	bnz	l8748
 10537  002D64  0E0F               	movlw	15
 10538  002D66  5C22               	subwf	TranslateMessage@Index,w,c
 10539  002D68  B0D8               	btfsc	status,0,c
 10540  002D6A  D008               	goto	l633
 10541                           
 10542                           ;terminal.c: 159: printf("E#12\r\n");
 10543  002D6C  0E5C               	movlw	low STR_3
 10544  002D6E  0100               	movlb	0	; () banked
 10545  002D70  6FCB               	movwf	printf@f& (0+255),b
 10546  002D72  0E08               	movlw	high STR_3
 10547  002D74  6FCC               	movwf	(printf@f+1)& (0+255),b
 10548  002D76  ECF5  F019         	call	_printf	;wreg free
 10549                           
 10550                           ;terminal.c: 160: }
 10551  002D7A  0012               	return	
 10552  002D7C                     l633:
 10553  002D7C                     l8748:
 10554                           
 10555                           ;terminal.c: 161: else if (Index > 89){
 10556  002D7C  5023               	movf	TranslateMessage@Index+1,w,c
 10557  002D7E  E104               	bnz	u8240
 10558  002D80  0E5A               	movlw	90
 10559  002D82  5C22               	subwf	TranslateMessage@Index,w,c
 10560  002D84  A0D8               	btfss	status,0,c
 10561  002D86  D008               	goto	l635
 10562  002D88                     u8240:
 10563                           
 10564                           ;terminal.c: 162: printf("E#13\r\n");
 10565  002D88  0E63               	movlw	low STR_4
 10566  002D8A  0100               	movlb	0	; () banked
 10567  002D8C  6FCB               	movwf	printf@f& (0+255),b
 10568  002D8E  0E08               	movlw	high STR_4
 10569  002D90  6FCC               	movwf	(printf@f+1)& (0+255),b
 10570  002D92  ECF5  F019         	call	_printf	;wreg free
 10571                           
 10572                           ;terminal.c: 163: }
 10573  002D96  0012               	return	
 10574  002D98                     l635:
 10575                           
 10576                           ;terminal.c: 164: else{
 10577                           ;terminal.c: 165: Value = GETxAPIxVAL(Index);
 10578  002D98  C022  F013         	movff	TranslateMessage@Index,GETxAPIxVAL@index
 10579  002D9C  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxVAL@index+1
 10580  002DA0  EC47  F021         	call	_GETxAPIxVAL	;wreg free
 10581  002DA4  C013  F020         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10582  002DA8  C014  F021         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10583                           
 10584                           ;terminal.c: 166: SENDxMESSAGE(Index, Value);
 10585  002DAC  C022  F013         	movff	TranslateMessage@Index,SENDxMESSAGE@index
 10586  002DB0  C023  F014         	movff	TranslateMessage@Index+1,SENDxMESSAGE@index+1
 10587  002DB4  C020  F015         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10588  002DB8  C021  F016         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10589  002DBC  EC2A  F014         	call	_SENDxMESSAGE	;wreg free
 10590  002DC0  0012               	return	
 10591  002DC2                     __end_of_TranslateMessage:
 10592                           	opt stack 0
 10593                           tblptru	equ	0xFF8
 10594                           tblptrh	equ	0xFF7
 10595                           tblptrl	equ	0xFF6
 10596                           tablat	equ	0xFF5
 10597                           prodh	equ	0xFF4
 10598                           prodl	equ	0xFF3
 10599                           intcon	equ	0xFF2
 10600                           postinc0	equ	0xFEE
 10601                           wreg	equ	0xFE8
 10602                           postinc1	equ	0xFE6
 10603                           postdec1	equ	0xFE5
 10604                           fsr1h	equ	0xFE2
 10605                           fsr1l	equ	0xFE1
 10606                           indf2	equ	0xFDF
 10607                           postinc2	equ	0xFDE
 10608                           postdec2	equ	0xFDD
 10609                           fsr2h	equ	0xFDA
 10610                           fsr2l	equ	0xFD9
 10611                           status	equ	0xFD8
 10612                           
 10613 ;; *************** function _atoi *****************
 10614 ;; Defined at:
 10615 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atoi.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;  s               2   24[COMRAM] PTR const unsigned char 
 10618 ;;		 -> NULL(0), Data(10), 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  a               2   29[COMRAM] int 
 10621 ;;  sign            1   28[COMRAM] unsigned char 
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  2   24[COMRAM] int 
 10624 ;; Registers used:
 10625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10631 ;;      Params:         2       0       0       0       0       0       0       0       0
 10632 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10633 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10634 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10635 ;;Total ram usage:        7 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    4
 10638 ;; This function calls:
 10639 ;;		___wmul
 10640 ;;		_isdigit
 10641 ;; This function is called by:
 10642 ;;		_TranslateMessage
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           	psect	text21
 10647  003B52                     __ptext21:
 10648                           	opt stack 0
 10649  003B52                     _atoi:
 10650                           	opt stack 24
 10651                           
 10652                           ;incstack = 0
 10653  003B52  D002               	goto	l1448
 10654  003B54  4A19               	infsnz	atoi@s,f,c
 10655  003B56  2A1A               	incf	atoi@s+1,f,c
 10656  003B58                     l1448:
 10657  003B58  C019  FFD9         	movff	atoi@s,fsr2l
 10658  003B5C  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10659  003B60  0E20               	movlw	32
 10660  003B62  18DE               	xorwf	postinc2,w,c
 10661  003B64  B4D8               	btfsc	status,2,c
 10662  003B66  D7F6               	goto	l1449
 10663  003B68  C019  FFD9         	movff	atoi@s,fsr2l
 10664  003B6C  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10665  003B70  0E09               	movlw	9
 10666  003B72  18DE               	xorwf	postinc2,w,c
 10667  003B74  B4D8               	btfsc	status,2,c
 10668  003B76  D7EE               	goto	l1449
 10669  003B78  0E00               	movlw	0
 10670  003B7A  6E1F               	movwf	atoi@a+1,c
 10671  003B7C  0E00               	movlw	0
 10672  003B7E  6E1E               	movwf	atoi@a,c
 10673  003B80  0E00               	movlw	0
 10674  003B82  6E1D               	movwf	atoi@sign,c
 10675  003B84  C019  FFD9         	movff	atoi@s,fsr2l
 10676  003B88  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10677  003B8C  0E2D               	movlw	45
 10678  003B8E  18DE               	xorwf	postinc2,w,c
 10679  003B90  A4D8               	btfss	status,2,c
 10680  003B92  D002               	goto	l1451
 10681  003B94  2A1D               	incf	atoi@sign,f,c
 10682  003B96  D024               	goto	l8108
 10683  003B98                     l1451:
 10684  003B98  C019  FFD9         	movff	atoi@s,fsr2l
 10685  003B9C  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10686  003BA0  0E2B               	movlw	43
 10687  003BA2  18DE               	xorwf	postinc2,w,c
 10688  003BA4  A4D8               	btfss	status,2,c
 10689  003BA6  D01E               	goto	l1454
 10690  003BA8  D01B               	goto	l8108
 10691  003BAA  C01E  F013         	movff	atoi@a,___wmul@multiplier
 10692  003BAE  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
 10693  003BB2  0E00               	movlw	0
 10694  003BB4  6E16               	movwf	___wmul@multiplicand+1,c
 10695  003BB6  0E0A               	movlw	10
 10696  003BB8  6E15               	movwf	___wmul@multiplicand,c
 10697  003BBA  EC15  F021         	call	___wmul	;wreg free
 10698  003BBE  C019  FFD9         	movff	atoi@s,fsr2l
 10699  003BC2  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10700  003BC6  50DF               	movf	indf2,w,c
 10701  003BC8  6E1B               	movwf	??_atoi& (0+255),c
 10702  003BCA  6A1C               	clrf	(??_atoi+1)& (0+255),c
 10703  003BCC  5013               	movf	?___wmul,w,c
 10704  003BCE  261B               	addwf	??_atoi,f,c
 10705  003BD0  5014               	movf	?___wmul+1,w,c
 10706  003BD2  221C               	addwfc	??_atoi+1,f,c
 10707  003BD4  0ED0               	movlw	208
 10708  003BD6  241B               	addwf	??_atoi,w,c
 10709  003BD8  6E1E               	movwf	atoi@a,c
 10710  003BDA  0EFF               	movlw	255
 10711  003BDC  201C               	addwfc	??_atoi+1,w,c
 10712  003BDE  6E1F               	movwf	atoi@a+1,c
 10713  003BE0                     l8108:
 10714  003BE0  4A19               	infsnz	atoi@s,f,c
 10715  003BE2  2A1A               	incf	atoi@s+1,f,c
 10716  003BE4                     l1454:
 10717  003BE4  C019  FFD9         	movff	atoi@s,fsr2l
 10718  003BE8  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10719  003BEC  50DF               	movf	indf2,w,c
 10720  003BEE  EC38  F021         	call	_isdigit
 10721  003BF2  B0D8               	btfsc	status,0,c
 10722  003BF4  D7DA               	goto	l1455
 10723  003BF6  501D               	movf	atoi@sign,w,c
 10724  003BF8  B4D8               	btfsc	status,2,c
 10725  003BFA  D00D               	goto	l1457
 10726  003BFC  C01E  F01B         	movff	atoi@a,??_atoi
 10727  003C00  C01F  F01C         	movff	atoi@a+1,??_atoi+1
 10728  003C04  1E1B               	comf	??_atoi,f,c
 10729  003C06  1E1C               	comf	??_atoi+1,f,c
 10730  003C08  4A1B               	infsnz	??_atoi,f,c
 10731  003C0A  2A1C               	incf	??_atoi+1,f,c
 10732  003C0C  C01B  F019         	movff	??_atoi,?_atoi
 10733  003C10  C01C  F01A         	movff	??_atoi+1,?_atoi+1
 10734  003C14  0012               	return	
 10735  003C16                     l1457:
 10736  003C16  C01E  F019         	movff	atoi@a,?_atoi
 10737  003C1A  C01F  F01A         	movff	atoi@a+1,?_atoi+1
 10738  003C1E  0012               	return		;funcret
 10739  003C20                     __end_of_atoi:
 10740                           	opt stack 0
 10741                           tblptru	equ	0xFF8
 10742                           tblptrh	equ	0xFF7
 10743                           tblptrl	equ	0xFF6
 10744                           tablat	equ	0xFF5
 10745                           prodh	equ	0xFF4
 10746                           prodl	equ	0xFF3
 10747                           intcon	equ	0xFF2
 10748                           postinc0	equ	0xFEE
 10749                           wreg	equ	0xFE8
 10750                           postinc1	equ	0xFE6
 10751                           postdec1	equ	0xFE5
 10752                           fsr1h	equ	0xFE2
 10753                           fsr1l	equ	0xFE1
 10754                           indf2	equ	0xFDF
 10755                           postinc2	equ	0xFDE
 10756                           postdec2	equ	0xFDD
 10757                           fsr2h	equ	0xFDA
 10758                           fsr2l	equ	0xFD9
 10759                           status	equ	0xFD8
 10760                           
 10761 ;; *************** function _isdigit *****************
 10762 ;; Defined at:
 10763 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
 10764 ;; Parameters:    Size  Location     Type
 10765 ;;  c               1    wreg     unsigned char 
 10766 ;; Auto vars:     Size  Location     Type
 10767 ;;  c               1   20[COMRAM] unsigned char 
 10768 ;; Return value:  Size  Location     Type
 10769 ;;		None               void
 10770 ;; Registers used:
 10771 ;;		wreg, status,2, status,0
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10777 ;;      Params:         0       0       0       0       0       0       0       0       0
 10778 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10779 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10780 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10781 ;;Total ram usage:        3 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; Hardware stack levels required when called:    3
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		_atoi
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text22
 10792  004270                     __ptext22:
 10793                           	opt stack 0
 10794  004270                     _isdigit:
 10795                           	opt stack 24
 10796                           
 10797                           ;incstack = 0
 10798                           ;isdigit@c stored from wreg
 10799  004270  6E15               	movwf	isdigit@c,c
 10800  004272  0E00               	movlw	0
 10801  004274  6E14               	movwf	_isdigit$1833,c
 10802  004276  0E3A               	movlw	58
 10803  004278  6015               	cpfslt	isdigit@c,c
 10804  00427A  D005               	goto	l1629
 10805  00427C  0E2F               	movlw	47
 10806  00427E  6415               	cpfsgt	isdigit@c,c
 10807  004280  D002               	goto	l1629
 10808  004282  0E01               	movlw	1
 10809  004284  6E14               	movwf	_isdigit$1833,c
 10810  004286                     l1629:
 10811  004286  C014  F013         	movff	_isdigit$1833,??_isdigit
 10812  00428A  3013               	rrcf	??_isdigit,w,c
 10813  00428C  0012               	return	
 10814  00428E                     __end_of_isdigit:
 10815                           	opt stack 0
 10816                           tblptru	equ	0xFF8
 10817                           tblptrh	equ	0xFF7
 10818                           tblptrl	equ	0xFF6
 10819                           tablat	equ	0xFF5
 10820                           prodh	equ	0xFF4
 10821                           prodl	equ	0xFF3
 10822                           intcon	equ	0xFF2
 10823                           postinc0	equ	0xFEE
 10824                           wreg	equ	0xFE8
 10825                           postinc1	equ	0xFE6
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           fsr2h	equ	0xFDA
 10833                           fsr2l	equ	0xFD9
 10834                           status	equ	0xFD8
 10835                           
 10836 ;; *************** function ___wmul *****************
 10837 ;; Defined at:
 10838 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;  multiplier      2   18[COMRAM] unsigned int 
 10841 ;;  multiplicand    2   20[COMRAM] unsigned int 
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;  product         2   22[COMRAM] unsigned int 
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  2   18[COMRAM] unsigned int 
 10846 ;; Registers used:
 10847 ;;		wreg, status,2, status,0, prodl, prodh
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10853 ;;      Params:         4       0       0       0       0       0       0       0       0
 10854 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10856 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10857 ;;Total ram usage:        6 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    3
 10860 ;; This function calls:
 10861 ;;		Nothing
 10862 ;; This function is called by:
 10863 ;;		_atoi
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           	psect	text23
 10868  00422A                     __ptext23:
 10869                           	opt stack 0
 10870  00422A                     ___wmul:
 10871                           	opt stack 24
 10872                           
 10873                           ;incstack = 0
 10874  00422A  5013               	movf	___wmul@multiplier,w,c
 10875  00422C  0215               	mulwf	___wmul@multiplicand,c
 10876  00422E  CFF3 F017          	movff	prodl,___wmul@product
 10877  004232  CFF4 F018          	movff	prodh,___wmul@product+1
 10878  004236  5013               	movf	___wmul@multiplier,w,c
 10879  004238  0216               	mulwf	___wmul@multiplicand+1,c
 10880  00423A  50F3               	movf	prodl,w,c
 10881  00423C  2618               	addwf	___wmul@product+1,f,c
 10882  00423E  5014               	movf	___wmul@multiplier+1,w,c
 10883  004240  0215               	mulwf	___wmul@multiplicand,c
 10884  004242  50F3               	movf	prodl,w,c
 10885  004244  2618               	addwf	___wmul@product+1,f,c
 10886  004246  C017  F013         	movff	___wmul@product,?___wmul
 10887  00424A  C018  F014         	movff	___wmul@product+1,?___wmul+1
 10888  00424E  0012               	return	
 10889  004250                     __end_of___wmul:
 10890                           	opt stack 0
 10891                           tblptru	equ	0xFF8
 10892                           tblptrh	equ	0xFF7
 10893                           tblptrl	equ	0xFF6
 10894                           tablat	equ	0xFF5
 10895                           prodh	equ	0xFF4
 10896                           prodl	equ	0xFF3
 10897                           intcon	equ	0xFF2
 10898                           postinc0	equ	0xFEE
 10899                           wreg	equ	0xFE8
 10900                           postinc1	equ	0xFE6
 10901                           postdec1	equ	0xFE5
 10902                           fsr1h	equ	0xFE2
 10903                           fsr1l	equ	0xFE1
 10904                           indf2	equ	0xFDF
 10905                           postinc2	equ	0xFDE
 10906                           postdec2	equ	0xFDD
 10907                           fsr2h	equ	0xFDA
 10908                           fsr2l	equ	0xFD9
 10909                           status	equ	0xFD8
 10910                           
 10911 ;; *************** function _SETxAPIxVALxNoxRET *****************
 10912 ;; Defined at:
 10913 ;;		line 218 in file "../api.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;  index           2   20[COMRAM] unsigned int 
 10916 ;;  value           2   22[COMRAM] unsigned int 
 10917 ;; Auto vars:     Size  Location     Type
 10918 ;;		None
 10919 ;; Return value:  Size  Location     Type
 10920 ;;                  1    wreg      void 
 10921 ;; Registers used:
 10922 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10923 ;; Tracked objects:
 10924 ;;		On entry : 0/0
 10925 ;;		On exit  : 0/0
 10926 ;;		Unchanged: 0/0
 10927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10928 ;;      Params:         4       0       0       0       0       0       0       0       0
 10929 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10930 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10931 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10932 ;;Total ram usage:        6 bytes
 10933 ;; Hardware stack levels used:    1
 10934 ;; Hardware stack levels required when called:    3
 10935 ;; This function calls:
 10936 ;;		Nothing
 10937 ;; This function is called by:
 10938 ;;		_Update_StateMchn
 10939 ;;		_TranslateMessage
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           	psect	text24
 10944  0040D0                     __ptext24:
 10945                           	opt stack 0
 10946  0040D0                     _SETxAPIxVALxNoxRET:
 10947                           	opt stack 26
 10948                           
 10949                           ;api.c: 219: if(API[index] != value){
 10950                           
 10951                           ;incstack = 0
 10952  0040D0  90D8               	bcf	status,0,c
 10953  0040D2  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 10954  0040D4  6ED9               	movwf	fsr2l,c
 10955  0040D6  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 10956  0040D8  6EDA               	movwf	fsr2h,c
 10957  0040DA  0E00               	movlw	low _API
 10958  0040DC  26D9               	addwf	fsr2l,f,c
 10959  0040DE  0E01               	movlw	high _API
 10960  0040E0  22DA               	addwfc	fsr2h,f,c
 10961  0040E2  5017               	movf	SETxAPIxVALxNoxRET@value,w,c
 10962  0040E4  18DE               	xorwf	postinc2,w,c
 10963  0040E6  E104               	bnz	u6530
 10964  0040E8  5018               	movf	SETxAPIxVALxNoxRET@value+1,w,c
 10965  0040EA  18DE               	xorwf	postinc2,w,c
 10966  0040EC  B4D8               	btfsc	status,2,c
 10967  0040EE  0012               	return	
 10968  0040F0                     u6530:
 10969                           
 10970                           ;api.c: 220: API[index] = value;
 10971  0040F0  90D8               	bcf	status,0,c
 10972  0040F2  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 10973  0040F4  6ED9               	movwf	fsr2l,c
 10974  0040F6  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 10975  0040F8  6EDA               	movwf	fsr2h,c
 10976  0040FA  0E00               	movlw	low _API
 10977  0040FC  26D9               	addwf	fsr2l,f,c
 10978  0040FE  0E01               	movlw	high _API
 10979  004100  22DA               	addwfc	fsr2h,f,c
 10980  004102  C017  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 10981  004106  C018  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 10982  00410A  0012               	return	
 10983  00410C                     __end_of_SETxAPIxVALxNoxRET:
 10984                           	opt stack 0
 10985                           tblptru	equ	0xFF8
 10986                           tblptrh	equ	0xFF7
 10987                           tblptrl	equ	0xFF6
 10988                           tablat	equ	0xFF5
 10989                           prodh	equ	0xFF4
 10990                           prodl	equ	0xFF3
 10991                           intcon	equ	0xFF2
 10992                           postinc0	equ	0xFEE
 10993                           wreg	equ	0xFE8
 10994                           postinc1	equ	0xFE6
 10995                           postdec1	equ	0xFE5
 10996                           fsr1h	equ	0xFE2
 10997                           fsr1l	equ	0xFE1
 10998                           indf2	equ	0xFDF
 10999                           postinc2	equ	0xFDE
 11000                           postdec2	equ	0xFDD
 11001                           fsr2h	equ	0xFDA
 11002                           fsr2l	equ	0xFD9
 11003                           status	equ	0xFD8
 11004                           
 11005 ;; *************** function _GETxAPIxVAL *****************
 11006 ;; Defined at:
 11007 ;;		line 224 in file "../api.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  index           2   18[COMRAM] unsigned int 
 11010 ;; Auto vars:     Size  Location     Type
 11011 ;;		None
 11012 ;; Return value:  Size  Location     Type
 11013 ;;                  2   18[COMRAM] unsigned int 
 11014 ;; Registers used:
 11015 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11016 ;; Tracked objects:
 11017 ;;		On entry : 0/0
 11018 ;;		On exit  : 0/0
 11019 ;;		Unchanged: 0/0
 11020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11021 ;;      Params:         2       0       0       0       0       0       0       0       0
 11022 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11023 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11024 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11025 ;;Total ram usage:        2 bytes
 11026 ;; Hardware stack levels used:    1
 11027 ;; Hardware stack levels required when called:    3
 11028 ;; This function calls:
 11029 ;;		Nothing
 11030 ;; This function is called by:
 11031 ;;		_Update_StateMchn
 11032 ;;		_Train_Path
 11033 ;;		_TranslateMessage
 11034 ;;		_Debounce_Inputs
 11035 ;;		_Junction
 11036 ;;		_Train_Move_Left_Start
 11037 ;;		_Right_Mountain_From_The_Right
 11038 ;;		_Left_Mountain_From_The_Right
 11039 ;;		_Train_Move_Left_Brake
 11040 ;;		_Train_Move_Right_Start
 11041 ;;		_Left_Mountain_From_The_Left
 11042 ;;		_Right_Mountain_From_The_Left
 11043 ;;		_Train_Move_Right_Brake
 11044 ;;		_SETxPWM
 11045 ;;		_INCRxAPIxVAL
 11046 ;;		_DECRxAPIxVAL
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           	psect	text25
 11051  00428E                     __ptext25:
 11052                           	opt stack 0
 11053  00428E                     _GETxAPIxVAL:
 11054                           	opt stack 23
 11055                           
 11056                           ;api.c: 225: return API[index];
 11057                           
 11058                           ;incstack = 0
 11059  00428E  90D8               	bcf	status,0,c
 11060  004290  3413               	rlcf	GETxAPIxVAL@index,w,c
 11061  004292  6ED9               	movwf	fsr2l,c
 11062  004294  3414               	rlcf	GETxAPIxVAL@index+1,w,c
 11063  004296  6EDA               	movwf	fsr2h,c
 11064  004298  0E00               	movlw	low _API
 11065  00429A  26D9               	addwf	fsr2l,f,c
 11066  00429C  0E01               	movlw	high _API
 11067  00429E  22DA               	addwfc	fsr2h,f,c
 11068  0042A0  CFDE F013          	movff	postinc2,?_GETxAPIxVAL
 11069  0042A4  CFDD F014          	movff	postdec2,?_GETxAPIxVAL+1
 11070  0042A8  0012               	return	
 11071  0042AA                     __end_of_GETxAPIxVAL:
 11072                           	opt stack 0
 11073                           tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           intcon	equ	0xFF2
 11080                           postinc0	equ	0xFEE
 11081                           wreg	equ	0xFE8
 11082                           postinc1	equ	0xFE6
 11083                           postdec1	equ	0xFE5
 11084                           fsr1h	equ	0xFE2
 11085                           fsr1l	equ	0xFE1
 11086                           indf2	equ	0xFDF
 11087                           postinc2	equ	0xFDE
 11088                           postdec2	equ	0xFDD
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093 ;; *************** function _GETxAPIxRW *****************
 11094 ;; Defined at:
 11095 ;;		line 207 in file "../api.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  index           2   18[COMRAM] unsigned int 
 11098 ;; Auto vars:     Size  Location     Type
 11099 ;;		None
 11100 ;; Return value:  Size  Location     Type
 11101 ;;                  2   18[COMRAM] unsigned int 
 11102 ;; Registers used:
 11103 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11104 ;; Tracked objects:
 11105 ;;		On entry : 0/0
 11106 ;;		On exit  : 0/0
 11107 ;;		Unchanged: 0/0
 11108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11109 ;;      Params:         2       0       0       0       0       0       0       0       0
 11110 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11111 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11112 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11113 ;;Total ram usage:        2 bytes
 11114 ;; Hardware stack levels used:    1
 11115 ;; Hardware stack levels required when called:    3
 11116 ;; This function calls:
 11117 ;;		Nothing
 11118 ;; This function is called by:
 11119 ;;		_TranslateMessage
 11120 ;; This function uses a non-reentrant model
 11121 ;;
 11122                           
 11123                           	psect	text26
 11124  0042AA                     __ptext26:
 11125                           	opt stack 0
 11126  0042AA                     _GETxAPIxRW:
 11127                           	opt stack 25
 11128                           
 11129                           ;api.c: 208: return API_RW[index];
 11130                           
 11131                           ;incstack = 0
 11132  0042AA  90D8               	bcf	status,0,c
 11133  0042AC  3413               	rlcf	GETxAPIxRW@index,w,c
 11134  0042AE  6ED9               	movwf	fsr2l,c
 11135  0042B0  3414               	rlcf	GETxAPIxRW@index+1,w,c
 11136  0042B2  6EDA               	movwf	fsr2h,c
 11137  0042B4  0E00               	movlw	low _API_RW
 11138  0042B6  26D9               	addwf	fsr2l,f,c
 11139  0042B8  0E02               	movlw	high _API_RW
 11140  0042BA  22DA               	addwfc	fsr2h,f,c
 11141  0042BC  CFDE F013          	movff	postinc2,?_GETxAPIxRW
 11142  0042C0  CFDD F014          	movff	postdec2,?_GETxAPIxRW+1
 11143  0042C4  0012               	return	
 11144  0042C6                     __end_of_GETxAPIxRW:
 11145                           	opt stack 0
 11146                           tblptru	equ	0xFF8
 11147                           tblptrh	equ	0xFF7
 11148                           tblptrl	equ	0xFF6
 11149                           tablat	equ	0xFF5
 11150                           prodh	equ	0xFF4
 11151                           prodl	equ	0xFF3
 11152                           intcon	equ	0xFF2
 11153                           postinc0	equ	0xFEE
 11154                           wreg	equ	0xFE8
 11155                           postinc1	equ	0xFE6
 11156                           postdec1	equ	0xFE5
 11157                           fsr1h	equ	0xFE2
 11158                           fsr1l	equ	0xFE1
 11159                           indf2	equ	0xFDF
 11160                           postinc2	equ	0xFDE
 11161                           postdec2	equ	0xFDD
 11162                           fsr2h	equ	0xFDA
 11163                           fsr2l	equ	0xFD9
 11164                           status	equ	0xFD8
 11165                           
 11166 ;; *************** function _EUSART1_Read *****************
 11167 ;; Defined at:
 11168 ;;		line 142 in file "../eusart1.c"
 11169 ;; Parameters:    Size  Location     Type
 11170 ;;		None
 11171 ;; Auto vars:     Size  Location     Type
 11172 ;;  readValue       1   18[COMRAM] unsigned char 
 11173 ;; Return value:  Size  Location     Type
 11174 ;;                  1    wreg      unsigned char 
 11175 ;; Registers used:
 11176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11177 ;; Tracked objects:
 11178 ;;		On entry : 0/0
 11179 ;;		On exit  : 0/0
 11180 ;;		Unchanged: 0/0
 11181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11182 ;;      Params:         0       0       0       0       0       0       0       0       0
 11183 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11184 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11185 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11186 ;;Total ram usage:        1 bytes
 11187 ;; Hardware stack levels used:    1
 11188 ;; Hardware stack levels required when called:    3
 11189 ;; This function calls:
 11190 ;;		Nothing
 11191 ;; This function is called by:
 11192 ;;		_READxRECEIVEDxMESSAGE
 11193 ;; This function uses a non-reentrant model
 11194 ;;
 11195                           
 11196                           	psect	text27
 11197  004146                     __ptext27:
 11198                           	opt stack 0
 11199  004146                     _EUSART1_Read:
 11200                           	opt stack 26
 11201                           
 11202                           ;eusart1.c: 143: uint8_t readValue = 0;
 11203                           
 11204                           ;incstack = 0
 11205  004146  0E00               	movlw	0
 11206  004148  6E13               	movwf	EUSART1_Read@readValue,c
 11207  00414A  503F               	movf	_eusart1RxCount,w,c	;volatile
 11208  00414C  B4D8               	btfsc	status,2,c
 11209  00414E  D7FD               	goto	l517
 11210                           
 11211                           ;eusart1.c: 146: }
 11212                           ;eusart1.c: 148: PIE1bits.RC1IE = 0;
 11213  004150  9A9D               	bcf	3997,5,c	;volatile
 11214                           
 11215                           ;eusart1.c: 150: readValue = eusart1RxBuffer[eusart1RxTail++];
 11216  004152  5040               	movf	_eusart1RxTail,w,c
 11217  004154  0D01               	mullw	1
 11218  004156  0E00               	movlw	low _eusart1RxBuffer
 11219  004158  24F3               	addwf	prodl,w,c
 11220  00415A  6ED9               	movwf	fsr2l,c
 11221  00415C  0E04               	movlw	high _eusart1RxBuffer
 11222  00415E  20F4               	addwfc	prodh,w,c
 11223  004160  6EDA               	movwf	fsr2h,c
 11224  004162  50DF               	movf	indf2,w,c
 11225  004164  6E13               	movwf	EUSART1_Read@readValue,c
 11226  004166  2A40               	incf	_eusart1RxTail,f,c
 11227                           
 11228                           ;eusart1.c: 151: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11229  004168  0E7D               	movlw	125
 11230  00416A  6440               	cpfsgt	_eusart1RxTail,c
 11231  00416C  D002               	goto	l519
 11232                           
 11233                           ;eusart1.c: 152: eusart1RxTail = 0;
 11234  00416E  0E00               	movlw	0
 11235  004170  6E40               	movwf	_eusart1RxTail,c
 11236  004172                     l519:
 11237                           
 11238                           ;eusart1.c: 153: }
 11239                           ;eusart1.c: 154: eusart1RxCount--;
 11240  004172  063F               	decf	_eusart1RxCount,f,c	;volatile
 11241                           
 11242                           ;eusart1.c: 155: PIE1bits.RC1IE = 1;
 11243  004174  8A9D               	bsf	3997,5,c	;volatile
 11244                           
 11245                           ;eusart1.c: 157: return readValue;
 11246  004176  5013               	movf	EUSART1_Read@readValue,w,c
 11247  004178  0012               	return	
 11248  00417A                     __end_of_EUSART1_Read:
 11249                           	opt stack 0
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           postinc0	equ	0xFEE
 11258                           wreg	equ	0xFE8
 11259                           postinc1	equ	0xFE6
 11260                           postdec1	equ	0xFE5
 11261                           fsr1h	equ	0xFE2
 11262                           fsr1l	equ	0xFE1
 11263                           indf2	equ	0xFDF
 11264                           postinc2	equ	0xFDE
 11265                           postdec2	equ	0xFDD
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function _Init_Timers *****************
 11271 ;; Defined at:
 11272 ;;		line 183 in file "../Main.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;		None
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;		None
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      void 
 11279 ;; Registers used:
 11280 ;;		wreg, status,2
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11286 ;;      Params:         0       0       0       0       0       0       0       0       0
 11287 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11289 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11290 ;;Total ram usage:        0 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    3
 11293 ;; This function calls:
 11294 ;;		Nothing
 11295 ;; This function is called by:
 11296 ;;		_main
 11297 ;; This function uses a non-reentrant model
 11298 ;;
 11299                           
 11300                           	psect	text28
 11301  0042C6                     __ptext28:
 11302                           	opt stack 0
 11303  0042C6                     _Init_Timers:
 11304                           	opt stack 27
 11305                           
 11306                           ;Main.c: 185: RCONbits.IPEN = 1;
 11307                           
 11308                           ;incstack = 0
 11309  0042C6  8ED0               	bsf	4048,7,c	;volatile
 11310                           
 11311                           ;Main.c: 186: INTCON = 0xA0;
 11312  0042C8  0EA0               	movlw	160
 11313  0042CA  6EF2               	movwf	intcon,c	;volatile
 11314                           
 11315                           ;Main.c: 187: INTCON2 = 0x84;
 11316  0042CC  0E84               	movlw	132
 11317  0042CE  6EF1               	movwf	intcon2,c	;volatile
 11318                           
 11319                           ;Main.c: 188: TMR0H = 0x0;
 11320  0042D0  0E00               	movlw	0
 11321  0042D2  6ED7               	movwf	4055,c	;volatile
 11322                           
 11323                           ;Main.c: 189: TMR0L = 0x0;
 11324  0042D4  0E00               	movlw	0
 11325  0042D6  6ED6               	movwf	4054,c	;volatile
 11326                           
 11327                           ;Main.c: 190: T0CON = 0xC3;
 11328  0042D8  0EC3               	movlw	195
 11329  0042DA  6ED5               	movwf	4053,c	;volatile
 11330  0042DC  0012               	return		;funcret
 11331  0042DE                     __end_of_Init_Timers:
 11332                           	opt stack 0
 11333                           tblptru	equ	0xFF8
 11334                           tblptrh	equ	0xFF7
 11335                           tblptrl	equ	0xFF6
 11336                           tablat	equ	0xFF5
 11337                           prodh	equ	0xFF4
 11338                           prodl	equ	0xFF3
 11339                           intcon	equ	0xFF2
 11340                           intcon2	equ	0xFF1
 11341                           postinc0	equ	0xFEE
 11342                           wreg	equ	0xFE8
 11343                           postinc1	equ	0xFE6
 11344                           postdec1	equ	0xFE5
 11345                           fsr1h	equ	0xFE2
 11346                           fsr1l	equ	0xFE1
 11347                           indf2	equ	0xFDF
 11348                           postinc2	equ	0xFDE
 11349                           postdec2	equ	0xFDD
 11350                           fsr2h	equ	0xFDA
 11351                           fsr2l	equ	0xFD9
 11352                           status	equ	0xFD8
 11353                           
 11354 ;; *************** function _Init_Pwm *****************
 11355 ;; Defined at:
 11356 ;;		line 196 in file "../Main.c"
 11357 ;; Parameters:    Size  Location     Type
 11358 ;;		None
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;		None
 11361 ;; Return value:  Size  Location     Type
 11362 ;;                  1    wreg      void 
 11363 ;; Registers used:
 11364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11365 ;; Tracked objects:
 11366 ;;		On entry : 0/0
 11367 ;;		On exit  : 0/0
 11368 ;;		Unchanged: 0/0
 11369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11370 ;;      Params:         0       0       0       0       0       0       0       0       0
 11371 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11372 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11373 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11374 ;;Total ram usage:        0 bytes
 11375 ;; Hardware stack levels used:    1
 11376 ;; Hardware stack levels required when called:    5
 11377 ;; This function calls:
 11378 ;;		_SETxAPIxVAL
 11379 ;; This function is called by:
 11380 ;;		_main
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           	psect	text29
 11385  004202                     __ptext29:
 11386                           	opt stack 0
 11387  004202                     _Init_Pwm:
 11388                           	opt stack 25
 11389                           
 11390                           ;Main.c: 199: SETxAPIxVAL(69, 1);
 11391                           
 11392                           ;incstack = 0
 11393  004202  0E00               	movlw	0
 11394  004204  6E1A               	movwf	SETxAPIxVAL@index+1,c
 11395  004206  0E45               	movlw	69
 11396  004208  6E19               	movwf	SETxAPIxVAL@index,c
 11397  00420A  0E00               	movlw	0
 11398  00420C  6E1C               	movwf	SETxAPIxVAL@value+1,c
 11399  00420E  0E01               	movlw	1
 11400  004210  6E1B               	movwf	SETxAPIxVAL@value,c
 11401  004212  ECFB  F01F         	call	_SETxAPIxVAL	;wreg free
 11402                           
 11403                           ;Main.c: 200: PR2=0xFF;
 11404  004216  68CB               	setf	4043,c	;volatile
 11405                           
 11406                           ;Main.c: 201: CCPR1L = 0x7F;
 11407  004218  0E7F               	movlw	127
 11408  00421A  6EBE               	movwf	4030,c	;volatile
 11409                           
 11410                           ;Main.c: 202: CCP1CON = 0x0F;
 11411  00421C  0E0F               	movlw	15
 11412  00421E  6EBD               	movwf	4029,c	;volatile
 11413                           
 11414                           ;Main.c: 203: T2CON = 0x04;
 11415  004220  0E04               	movlw	4
 11416  004222  6ECA               	movwf	4042,c	;volatile
 11417                           
 11418                           ;Main.c: 204: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11419  004224  9494               	bcf	3988,2,c	;volatile
 11420  004226  9094               	bcf	3988,0,c	;volatile
 11421  004228  0012               	return		;funcret
 11422  00422A                     __end_of_Init_Pwm:
 11423                           	opt stack 0
 11424                           tblptru	equ	0xFF8
 11425                           tblptrh	equ	0xFF7
 11426                           tblptrl	equ	0xFF6
 11427                           tablat	equ	0xFF5
 11428                           prodh	equ	0xFF4
 11429                           prodl	equ	0xFF3
 11430                           intcon	equ	0xFF2
 11431                           intcon2	equ	0xFF1
 11432                           postinc0	equ	0xFEE
 11433                           wreg	equ	0xFE8
 11434                           postinc1	equ	0xFE6
 11435                           postdec1	equ	0xFE5
 11436                           fsr1h	equ	0xFE2
 11437                           fsr1l	equ	0xFE1
 11438                           indf2	equ	0xFDF
 11439                           postinc2	equ	0xFDE
 11440                           postdec2	equ	0xFDD
 11441                           fsr2h	equ	0xFDA
 11442                           fsr2l	equ	0xFD9
 11443                           status	equ	0xFD8
 11444                           
 11445 ;; *************** function _SETxAPIxVAL *****************
 11446 ;; Defined at:
 11447 ;;		line 211 in file "../api.c"
 11448 ;; Parameters:    Size  Location     Type
 11449 ;;  index           2   24[COMRAM] unsigned int 
 11450 ;;  value           2   26[COMRAM] unsigned int 
 11451 ;; Auto vars:     Size  Location     Type
 11452 ;;		None
 11453 ;; Return value:  Size  Location     Type
 11454 ;;                  1    wreg      void 
 11455 ;; Registers used:
 11456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11457 ;; Tracked objects:
 11458 ;;		On entry : 0/0
 11459 ;;		On exit  : 0/0
 11460 ;;		Unchanged: 0/0
 11461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11462 ;;      Params:         4       0       0       0       0       0       0       0       0
 11463 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11464 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11465 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11466 ;;Total ram usage:        6 bytes
 11467 ;; Hardware stack levels used:    1
 11468 ;; Hardware stack levels required when called:    4
 11469 ;; This function calls:
 11470 ;;		_SENDxMESSAGE
 11471 ;; This function is called by:
 11472 ;;		_Init_Pwm
 11473 ;;		_Update_StateMchn
 11474 ;;		_Train_Path
 11475 ;;		_Debounce_Inputs
 11476 ;;		_Junction
 11477 ;;		_Train_Move_Left_Start
 11478 ;;		_Train_Move_Left_Brake
 11479 ;;		_Train_Move_Right_Start
 11480 ;;		_Train_Move_Right_Brake
 11481 ;;		_SETxPWM
 11482 ;;		_INCRxAPIxVAL
 11483 ;;		_DECRxAPIxVAL
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           	psect	text30
 11488  003FF6                     __ptext30:
 11489                           	opt stack 0
 11490  003FF6                     _SETxAPIxVAL:
 11491                           	opt stack 22
 11492                           
 11493                           ;api.c: 212: if(API[index] != value){
 11494                           
 11495                           ;incstack = 0
 11496  003FF6  90D8               	bcf	status,0,c
 11497  003FF8  3419               	rlcf	SETxAPIxVAL@index,w,c
 11498  003FFA  6ED9               	movwf	fsr2l,c
 11499  003FFC  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11500  003FFE  6EDA               	movwf	fsr2h,c
 11501  004000  0E00               	movlw	low _API
 11502  004002  26D9               	addwf	fsr2l,f,c
 11503  004004  0E01               	movlw	high _API
 11504  004006  22DA               	addwfc	fsr2h,f,c
 11505  004008  501B               	movf	SETxAPIxVAL@value,w,c
 11506  00400A  18DE               	xorwf	postinc2,w,c
 11507  00400C  E104               	bnz	u6390
 11508  00400E  501C               	movf	SETxAPIxVAL@value+1,w,c
 11509  004010  18DE               	xorwf	postinc2,w,c
 11510  004012  B4D8               	btfsc	status,2,c
 11511  004014  0012               	return	
 11512  004016                     u6390:
 11513                           
 11514                           ;api.c: 213: API[index] = value;
 11515  004016  90D8               	bcf	status,0,c
 11516  004018  3419               	rlcf	SETxAPIxVAL@index,w,c
 11517  00401A  6ED9               	movwf	fsr2l,c
 11518  00401C  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11519  00401E  6EDA               	movwf	fsr2h,c
 11520  004020  0E00               	movlw	low _API
 11521  004022  26D9               	addwf	fsr2l,f,c
 11522  004024  0E01               	movlw	high _API
 11523  004026  22DA               	addwfc	fsr2h,f,c
 11524  004028  C01B  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11525  00402C  C01C  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11526                           
 11527                           ;api.c: 214: SENDxMESSAGE(index, value);
 11528  004030  C019  F013         	movff	SETxAPIxVAL@index,SENDxMESSAGE@index
 11529  004034  C01A  F014         	movff	SETxAPIxVAL@index+1,SENDxMESSAGE@index+1
 11530  004038  C01B  F015         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11531  00403C  C01C  F016         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11532  004040  EC2A  F014         	call	_SENDxMESSAGE	;wreg free
 11533  004044  0012               	return	
 11534  004046                     __end_of_SETxAPIxVAL:
 11535                           	opt stack 0
 11536                           tblptru	equ	0xFF8
 11537                           tblptrh	equ	0xFF7
 11538                           tblptrl	equ	0xFF6
 11539                           tablat	equ	0xFF5
 11540                           prodh	equ	0xFF4
 11541                           prodl	equ	0xFF3
 11542                           intcon	equ	0xFF2
 11543                           intcon2	equ	0xFF1
 11544                           postinc0	equ	0xFEE
 11545                           wreg	equ	0xFE8
 11546                           postinc1	equ	0xFE6
 11547                           postdec1	equ	0xFE5
 11548                           fsr1h	equ	0xFE2
 11549                           fsr1l	equ	0xFE1
 11550                           indf2	equ	0xFDF
 11551                           postinc2	equ	0xFDE
 11552                           postdec2	equ	0xFDD
 11553                           fsr2h	equ	0xFDA
 11554                           fsr2l	equ	0xFD9
 11555                           status	equ	0xFD8
 11556                           
 11557 ;; *************** function _SENDxMESSAGE *****************
 11558 ;; Defined at:
 11559 ;;		line 280 in file "../terminal.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;  index           2   18[COMRAM] unsigned int 
 11562 ;;  value           2   20[COMRAM] unsigned int 
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;		None
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      void 
 11567 ;; Registers used:
 11568 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11574 ;;      Params:         4       0       0       0       0       0       0       0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11576 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11577 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11578 ;;Total ram usage:        6 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    3
 11581 ;; This function calls:
 11582 ;;		Nothing
 11583 ;; This function is called by:
 11584 ;;		_TranslateMessage
 11585 ;;		_SETxAPIxVAL
 11586 ;;		_INCRxAPIxVAL
 11587 ;;		_DECRxAPIxVAL
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           	psect	text31
 11592  002854                     __ptext31:
 11593                           	opt stack 0
 11594  002854                     _SENDxMESSAGE:
 11595                           	opt stack 22
 11596                           
 11597                           ;terminal.c: 282: switch (Diag_Comm)
 11598                           
 11599                           ;incstack = 0
 11600  002854  D0F8               	goto	l668
 11601  002856  0E8C               	movlw	low _Comm_List
 11602  002858  0100               	movlb	0	; () banked
 11603  00285A  6F72               	movwf	_Pcomm_List& (0+255),b
 11604  00285C  0E00               	movlw	high _Comm_List
 11605  00285E  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;terminal.c: 285: *Pcomm_List = index;
 11609  002860  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11610  002864  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11611  002868  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11612  00286C  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;terminal.c: 286: Pcomm_List++;
 11616  002870  0E02               	movlw	2
 11617  002872  2772               	addwf	_Pcomm_List& (0+255),f,b
 11618  002874  0E00               	movlw	0
 11619  002876  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11620                           
 11621                           ;terminal.c: 287: *Pcomm_List = value;
 11622  002878  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11623  00287C  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11624  002880  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11625  002884  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;terminal.c: 288: Pcomm_List++;
 11629  002888  0E02               	movlw	2
 11630  00288A  2772               	addwf	_Pcomm_List& (0+255),f,b
 11631  00288C  0E00               	movlw	0
 11632  00288E  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;terminal.c: 289: Diag_Comm = 1;
 11636  002890  0E00               	movlw	0
 11637  002892  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11638  002894  0E01               	movlw	1
 11639  002896  6F74               	movwf	_Diag_Comm& (0+255),b
 11640                           
 11641                           ;terminal.c: 290: break;
 11642  002898  0012               	return	
 11643  00289A                     
 11644                           ; BSR set to: 0
 11645  00289A  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11646  00289E  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11647  0028A2  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11648  0028A6  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11649                           
 11650                           ;terminal.c: 293: Pcomm_List++;
 11651  0028AA  0E02               	movlw	2
 11652  0028AC  0100               	movlb	0	; () banked
 11653  0028AE  2772               	addwf	_Pcomm_List& (0+255),f,b
 11654  0028B0  0E00               	movlw	0
 11655  0028B2  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;terminal.c: 294: *Pcomm_List = value;
 11659  0028B4  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11660  0028B8  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11661  0028BC  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11662  0028C0  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11663                           
 11664                           ;terminal.c: 295: Pcomm_List++;
 11665  0028C4  0E02               	movlw	2
 11666  0028C6  2772               	addwf	_Pcomm_List& (0+255),f,b
 11667  0028C8  0E00               	movlw	0
 11668  0028CA  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;terminal.c: 296: Diag_Comm = 2;
 11672  0028CC  0E00               	movlw	0
 11673  0028CE  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11674  0028D0  0E02               	movlw	2
 11675  0028D2  6F74               	movwf	_Diag_Comm& (0+255),b
 11676                           
 11677                           ;terminal.c: 297: break;
 11678  0028D4  0012               	return	
 11679  0028D6                     
 11680                           ; BSR set to: 0
 11681  0028D6  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11682  0028DA  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11683  0028DE  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11684  0028E2  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11685                           
 11686                           ;terminal.c: 300: Pcomm_List++;
 11687  0028E6  0E02               	movlw	2
 11688  0028E8  0100               	movlb	0	; () banked
 11689  0028EA  2772               	addwf	_Pcomm_List& (0+255),f,b
 11690  0028EC  0E00               	movlw	0
 11691  0028EE  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;terminal.c: 301: *Pcomm_List = value;
 11695  0028F0  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11696  0028F4  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11697  0028F8  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11698  0028FC  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11699                           
 11700                           ;terminal.c: 302: Pcomm_List++;
 11701  002900  0E02               	movlw	2
 11702  002902  2772               	addwf	_Pcomm_List& (0+255),f,b
 11703  002904  0E00               	movlw	0
 11704  002906  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;terminal.c: 303: Diag_Comm = 3;
 11708  002908  0E00               	movlw	0
 11709  00290A  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11710  00290C  0E03               	movlw	3
 11711  00290E  6F74               	movwf	_Diag_Comm& (0+255),b
 11712                           
 11713                           ;terminal.c: 304: break;
 11714  002910  0012               	return	
 11715  002912                     
 11716                           ; BSR set to: 0
 11717  002912  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11718  002916  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11719  00291A  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11720  00291E  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11721                           
 11722                           ;terminal.c: 307: Pcomm_List++;
 11723  002922  0E02               	movlw	2
 11724  002924  0100               	movlb	0	; () banked
 11725  002926  2772               	addwf	_Pcomm_List& (0+255),f,b
 11726  002928  0E00               	movlw	0
 11727  00292A  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;terminal.c: 308: *Pcomm_List = value;
 11731  00292C  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11732  002930  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11733  002934  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11734  002938  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11735                           
 11736                           ;terminal.c: 309: Pcomm_List++;
 11737  00293C  0E02               	movlw	2
 11738  00293E  2772               	addwf	_Pcomm_List& (0+255),f,b
 11739  002940  0E00               	movlw	0
 11740  002942  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11741                           
 11742                           ; BSR set to: 0
 11743                           ;terminal.c: 310: Diag_Comm = 4;
 11744  002944  0E00               	movlw	0
 11745  002946  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11746  002948  0E04               	movlw	4
 11747  00294A  6F74               	movwf	_Diag_Comm& (0+255),b
 11748                           
 11749                           ;terminal.c: 311: break;
 11750  00294C  0012               	return	
 11751  00294E                     
 11752                           ; BSR set to: 0
 11753  00294E  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11754  002952  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11755  002956  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11756  00295A  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11757                           
 11758                           ;terminal.c: 314: Pcomm_List++;
 11759  00295E  0E02               	movlw	2
 11760  002960  0100               	movlb	0	; () banked
 11761  002962  2772               	addwf	_Pcomm_List& (0+255),f,b
 11762  002964  0E00               	movlw	0
 11763  002966  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;terminal.c: 315: *Pcomm_List = value;
 11767  002968  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11768  00296C  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11769  002970  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11770  002974  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11771                           
 11772                           ;terminal.c: 316: Pcomm_List++;
 11773  002978  0E02               	movlw	2
 11774  00297A  2772               	addwf	_Pcomm_List& (0+255),f,b
 11775  00297C  0E00               	movlw	0
 11776  00297E  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;terminal.c: 317: Diag_Comm = 5;
 11780  002980  0E00               	movlw	0
 11781  002982  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11782  002984  0E05               	movlw	5
 11783  002986  6F74               	movwf	_Diag_Comm& (0+255),b
 11784                           
 11785                           ;terminal.c: 318: break;
 11786  002988  0012               	return	
 11787  00298A                     
 11788                           ; BSR set to: 0
 11789  00298A  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11790  00298E  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11791  002992  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11792  002996  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11793                           
 11794                           ;terminal.c: 321: Pcomm_List++;
 11795  00299A  0E02               	movlw	2
 11796  00299C  0100               	movlb	0	; () banked
 11797  00299E  2772               	addwf	_Pcomm_List& (0+255),f,b
 11798  0029A0  0E00               	movlw	0
 11799  0029A2  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;terminal.c: 322: *Pcomm_List = value;
 11803  0029A4  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11804  0029A8  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11805  0029AC  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11806  0029B0  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11807                           
 11808                           ;terminal.c: 323: Pcomm_List++;
 11809  0029B4  0E02               	movlw	2
 11810  0029B6  2772               	addwf	_Pcomm_List& (0+255),f,b
 11811  0029B8  0E00               	movlw	0
 11812  0029BA  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;terminal.c: 324: Diag_Comm = 6;
 11816  0029BC  0E00               	movlw	0
 11817  0029BE  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11818  0029C0  0E06               	movlw	6
 11819  0029C2  6F74               	movwf	_Diag_Comm& (0+255),b
 11820                           
 11821                           ;terminal.c: 325: break;
 11822  0029C4  0012               	return	
 11823  0029C6                     
 11824                           ; BSR set to: 0
 11825  0029C6  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11826  0029CA  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11827  0029CE  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11828  0029D2  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11829                           
 11830                           ;terminal.c: 328: Pcomm_List++;
 11831  0029D6  0E02               	movlw	2
 11832  0029D8  0100               	movlb	0	; () banked
 11833  0029DA  2772               	addwf	_Pcomm_List& (0+255),f,b
 11834  0029DC  0E00               	movlw	0
 11835  0029DE  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;terminal.c: 329: *Pcomm_List = value;
 11839  0029E0  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11840  0029E4  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11841  0029E8  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11842  0029EC  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11843                           
 11844                           ;terminal.c: 330: Pcomm_List++;
 11845  0029F0  0E02               	movlw	2
 11846  0029F2  2772               	addwf	_Pcomm_List& (0+255),f,b
 11847  0029F4  0E00               	movlw	0
 11848  0029F6  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;terminal.c: 331: Diag_Comm = 7;
 11852  0029F8  0E00               	movlw	0
 11853  0029FA  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11854  0029FC  0E07               	movlw	7
 11855  0029FE  6F74               	movwf	_Diag_Comm& (0+255),b
 11856                           
 11857                           ;terminal.c: 332: break;
 11858  002A00  0012               	return	
 11859  002A02                     
 11860                           ; BSR set to: 0
 11861  002A02  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11862  002A06  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11863  002A0A  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11864  002A0E  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11865                           
 11866                           ;terminal.c: 335: Pcomm_List++;
 11867  002A12  0E02               	movlw	2
 11868  002A14  0100               	movlb	0	; () banked
 11869  002A16  2772               	addwf	_Pcomm_List& (0+255),f,b
 11870  002A18  0E00               	movlw	0
 11871  002A1A  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;terminal.c: 336: *Pcomm_List = value;
 11875  002A1C  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11876  002A20  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11877  002A24  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11878  002A28  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11879                           
 11880                           ;terminal.c: 337: Pcomm_List++;
 11881  002A2C  0E02               	movlw	2
 11882  002A2E  2772               	addwf	_Pcomm_List& (0+255),f,b
 11883  002A30  0E00               	movlw	0
 11884  002A32  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11885                           
 11886                           ;terminal.c: 338: Pcomm_List = &Comm_List[0][0];
 11887  002A34  0E8C               	movlw	low _Comm_List
 11888  002A36  6F72               	movwf	_Pcomm_List& (0+255),b
 11889  002A38  0E00               	movlw	high _Comm_List
 11890  002A3A  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;terminal.c: 339: Diag_Comm = 0;
 11894  002A3C  0E00               	movlw	0
 11895  002A3E  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11896  002A40  0E00               	movlw	0
 11897  002A42  6F74               	movwf	_Diag_Comm& (0+255),b
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;terminal.c: 344: }
 11901                           
 11902                           ; BSR set to: 0
 11903                           
 11904                           ;terminal.c: 343: default : break;
 11905                           
 11906                           ;terminal.c: 340: break;
 11907  002A44  0012               	return	
 11908  002A46                     l668:
 11909                           
 11910                           ; BSR set to: 0
 11911  002A46  C074  F017         	movff	_Diag_Comm,??_SENDxMESSAGE
 11912  002A4A  C075  F018         	movff	_Diag_Comm+1,??_SENDxMESSAGE+1
 11913                           
 11914                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11915                           ; Switch size 1, requested type "space"
 11916                           ; Number of cases is 1, Range of values is 0 to 0
 11917                           ; switch strategies available:
 11918                           ; Name         Instructions Cycles
 11919                           ; simple_byte            4     3 (average)
 11920                           ;	Chosen strategy is simple_byte
 11921  002A4E  5018               	movf	??_SENDxMESSAGE+1,w,c
 11922  002A50  0A00               	xorlw	0	; case 0
 11923  002A52  A4D8               	btfss	status,2,c
 11924  002A54  0012               	return	
 11925                           
 11926                           ; Switch size 1, requested type "space"
 11927                           ; Number of cases is 8, Range of values is 0 to 7
 11928                           ; switch strategies available:
 11929                           ; Name         Instructions Cycles
 11930                           ; simple_byte           25    13 (average)
 11931                           ;	Chosen strategy is simple_byte
 11932  002A56  5017               	movf	??_SENDxMESSAGE,w,c
 11933  002A58  0A00               	xorlw	0	; case 0
 11934  002A5A  B4D8               	btfsc	status,2,c
 11935  002A5C  D6FC               	goto	l669
 11936  002A5E  0A01               	xorlw	1	; case 1
 11937  002A60  B4D8               	btfsc	status,2,c
 11938  002A62  D71B               	goto	l671
 11939  002A64  0A03               	xorlw	3	; case 2
 11940  002A66  B4D8               	btfsc	status,2,c
 11941  002A68  D736               	goto	l672
 11942  002A6A  0A01               	xorlw	1	; case 3
 11943  002A6C  B4D8               	btfsc	status,2,c
 11944  002A6E  D751               	goto	l673
 11945  002A70  0A07               	xorlw	7	; case 4
 11946  002A72  B4D8               	btfsc	status,2,c
 11947  002A74  D76C               	goto	l674
 11948  002A76  0A01               	xorlw	1	; case 5
 11949  002A78  B4D8               	btfsc	status,2,c
 11950  002A7A  D787               	goto	l675
 11951  002A7C  0A03               	xorlw	3	; case 6
 11952  002A7E  B4D8               	btfsc	status,2,c
 11953  002A80  D7A2               	goto	l676
 11954  002A82  0A01               	xorlw	1	; case 7
 11955  002A84  A4D8               	btfss	status,2,c
 11956  002A86  0012               	return	
 11957  002A88  D7BC               	goto	l677
 11958  002A8A                     __end_of_SENDxMESSAGE:
 11959                           	opt stack 0
 11960                           tblptru	equ	0xFF8
 11961                           tblptrh	equ	0xFF7
 11962                           tblptrl	equ	0xFF6
 11963                           tablat	equ	0xFF5
 11964                           prodh	equ	0xFF4
 11965                           prodl	equ	0xFF3
 11966                           intcon	equ	0xFF2
 11967                           intcon2	equ	0xFF1
 11968                           postinc0	equ	0xFEE
 11969                           wreg	equ	0xFE8
 11970                           postinc1	equ	0xFE6
 11971                           postdec1	equ	0xFE5
 11972                           fsr1h	equ	0xFE2
 11973                           fsr1l	equ	0xFE1
 11974                           indf2	equ	0xFDF
 11975                           postinc2	equ	0xFDE
 11976                           postdec2	equ	0xFDD
 11977                           fsr2h	equ	0xFDA
 11978                           fsr2l	equ	0xFD9
 11979                           status	equ	0xFD8
 11980                           
 11981 ;; *************** function _EUSART1_Initialize *****************
 11982 ;; Defined at:
 11983 ;;		line 77 in file "../eusart1.c"
 11984 ;; Parameters:    Size  Location     Type
 11985 ;;		None
 11986 ;; Auto vars:     Size  Location     Type
 11987 ;;  baud_rate       2   18[COMRAM] unsigned int 
 11988 ;; Return value:  Size  Location     Type
 11989 ;;                  1    wreg      void 
 11990 ;; Registers used:
 11991 ;;		wreg, status,2
 11992 ;; Tracked objects:
 11993 ;;		On entry : 0/0
 11994 ;;		On exit  : 0/0
 11995 ;;		Unchanged: 0/0
 11996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11997 ;;      Params:         0       0       0       0       0       0       0       0       0
 11998 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11999 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12000 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12001 ;;Total ram usage:        2 bytes
 12002 ;; Hardware stack levels used:    1
 12003 ;; Hardware stack levels required when called:    3
 12004 ;; This function calls:
 12005 ;;		Nothing
 12006 ;; This function is called by:
 12007 ;;		_main
 12008 ;; This function uses a non-reentrant model
 12009 ;;
 12010                           
 12011                           	psect	text32
 12012  004046                     __ptext32:
 12013                           	opt stack 0
 12014  004046                     _EUSART1_Initialize:
 12015                           	opt stack 27
 12016                           
 12017                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 12018                           
 12019                           ;incstack = 0
 12020  004046  9A9D               	bcf	3997,5,c	;volatile
 12021                           
 12022                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 12023  004048  989D               	bcf	3997,4,c	;volatile
 12024                           
 12025                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 12026  00404A  86B8               	bsf	4024,3,c	;volatile
 12027                           
 12028                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 12029  00404C  8EAB               	bsf	4011,7,c	;volatile
 12030                           
 12031                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 12032  00404E  9CAB               	bcf	4011,6,c	;volatile
 12033                           
 12034                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 12035  004050  88AB               	bsf	4011,4,c	;volatile
 12036                           
 12037                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 12038  004052  96AB               	bcf	4011,3,c	;volatile
 12039                           
 12040                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 12041  004054  9CAC               	bcf	4012,6,c	;volatile
 12042                           
 12043                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 12044  004056  8AAC               	bsf	4012,5,c	;volatile
 12045                           
 12046                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 12047  004058  98AC               	bcf	4012,4,c	;volatile
 12048                           
 12049                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 12050  00405A  96AC               	bcf	4012,3,c	;volatile
 12051                           
 12052                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 12053  00405C  84AC               	bsf	4012,2,c	;volatile
 12054                           
 12055                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 12056  00405E  82AC               	bsf	4012,1,c	;volatile
 12057                           
 12058                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 12059  004060  90AC               	bcf	4012,0,c	;volatile
 12060                           
 12061                           ;eusart1.c: 99: unsigned int baud_rate;
 12062                           ;eusart1.c: 101: baud_rate = 417;
 12063  004062  0E01               	movlw	1
 12064  004064  6E14               	movwf	EUSART1_Initialize@baud_rate+1,c
 12065  004066  0EA1               	movlw	161
 12066  004068  6E13               	movwf	EUSART1_Initialize@baud_rate,c
 12067                           
 12068                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 12069  00406A  5014               	movf	EUSART1_Initialize@baud_rate+1,w,c
 12070  00406C  6EB0               	movwf	4016,c	;volatile
 12071                           
 12072                           ;eusart1.c: 104: SPBRG = baud_rate;
 12073  00406E  C013  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12074                           
 12075                           ;eusart1.c: 108: eusart1TxHead = 0;
 12076  004072  0E00               	movlw	0
 12077  004074  6E44               	movwf	_eusart1TxHead,c
 12078                           
 12079                           ;eusart1.c: 109: eusart1TxTail = 0;
 12080  004076  0E00               	movlw	0
 12081  004078  6E43               	movwf	_eusart1TxTail,c
 12082                           
 12083                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12084  00407A  0E7E               	movlw	126
 12085  00407C  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12086                           
 12087                           ;eusart1.c: 112: eusart1RxHead = 0;
 12088  00407E  0E00               	movlw	0
 12089  004080  6E41               	movwf	_eusart1RxHead,c
 12090                           
 12091                           ;eusart1.c: 113: eusart1RxTail = 0;
 12092  004082  0E00               	movlw	0
 12093  004084  6E40               	movwf	_eusart1RxTail,c
 12094                           
 12095                           ;eusart1.c: 114: eusart1RxCount = 0;
 12096  004086  0E00               	movlw	0
 12097  004088  6E3F               	movwf	_eusart1RxCount,c	;volatile
 12098                           
 12099                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 12100  00408A  8A9D               	bsf	3997,5,c	;volatile
 12101  00408C  0012               	return		;funcret
 12102  00408E                     __end_of_EUSART1_Initialize:
 12103                           	opt stack 0
 12104                           tblptru	equ	0xFF8
 12105                           tblptrh	equ	0xFF7
 12106                           tblptrl	equ	0xFF6
 12107                           tablat	equ	0xFF5
 12108                           prodh	equ	0xFF4
 12109                           prodl	equ	0xFF3
 12110                           intcon	equ	0xFF2
 12111                           intcon2	equ	0xFF1
 12112                           postinc0	equ	0xFEE
 12113                           wreg	equ	0xFE8
 12114                           postinc1	equ	0xFE6
 12115                           postdec1	equ	0xFE5
 12116                           fsr1h	equ	0xFE2
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           fsr2h	equ	0xFDA
 12122                           fsr2l	equ	0xFD9
 12123                           status	equ	0xFD8
 12124                           
 12125 ;; *************** function _EEPROMxREAD *****************
 12126 ;; Defined at:
 12127 ;;		line 57 in file "../eeprom_settings.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;		None
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;  Data            2   26[COMRAM] unsigned int 
 12132 ;;  i               1   28[COMRAM] unsigned char 
 12133 ;; Return value:  Size  Location     Type
 12134 ;;                  1    wreg      void 
 12135 ;; Registers used:
 12136 ;;		wreg, status,2, status,0, cstack
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12142 ;;      Params:         0       0       0       0       0       0       0       0       0
 12143 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12144 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12145 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12146 ;;Total ram usage:        3 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    4
 12149 ;; This function calls:
 12150 ;;		_Eeprom_Read
 12151 ;; This function is called by:
 12152 ;;		_main
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text33
 12157  00417A                     __ptext33:
 12158                           	opt stack 0
 12159  00417A                     _EEPROMxREAD:
 12160                           	opt stack 26
 12161                           
 12162                           ;eeprom_settings.c: 59: unsigned char i = 0;
 12163                           
 12164                           ;incstack = 0
 12165  00417A  0E00               	movlw	0
 12166  00417C  6E1D               	movwf	EEPROMxREAD@i,c
 12167                           
 12168                           ;eeprom_settings.c: 60: unsigned int Data = 0;
 12169  00417E  0E00               	movlw	0
 12170  004180  6E1C               	movwf	EEPROMxREAD@Data+1,c
 12171  004182  0E00               	movlw	0
 12172  004184  6E1B               	movwf	EEPROMxREAD@Data,c
 12173                           
 12174                           ;eeprom_settings.c: 65: for(i = 0; i < 28; i++ )
 12175  004186  0E00               	movlw	0
 12176  004188  6E1D               	movwf	EEPROMxREAD@i,c
 12177  00418A                     l6172:
 12178  00418A  0E1B               	movlw	27
 12179  00418C  641D               	cpfsgt	EEPROMxREAD@i,c
 12180  00418E  D001               	goto	l741
 12181  004190  0012               	return	
 12182  004192                     l741:
 12183                           
 12184                           ;eeprom_settings.c: 66: {
 12185                           ;eeprom_settings.c: 67: Data = Eeprom_Read(i);
 12186  004192  C01D  F013         	movff	EEPROMxREAD@i,Eeprom_Read@Location
 12187  004196  6A14               	clrf	Eeprom_Read@Location+1,c
 12188  004198  ECA1  F01F         	call	_Eeprom_Read	;wreg free
 12189  00419C  C013  F01B         	movff	?_Eeprom_Read,EEPROMxREAD@Data
 12190  0041A0  C014  F01C         	movff	?_Eeprom_Read+1,EEPROMxREAD@Data+1
 12191  0041A4  2A1D               	incf	EEPROMxREAD@i,f,c
 12192  0041A6  D7F1               	goto	l6172
 12193  0041A8                     __end_of_EEPROMxREAD:
 12194                           	opt stack 0
 12195                           tblptru	equ	0xFF8
 12196                           tblptrh	equ	0xFF7
 12197                           tblptrl	equ	0xFF6
 12198                           tablat	equ	0xFF5
 12199                           prodh	equ	0xFF4
 12200                           prodl	equ	0xFF3
 12201                           intcon	equ	0xFF2
 12202                           intcon2	equ	0xFF1
 12203                           postinc0	equ	0xFEE
 12204                           wreg	equ	0xFE8
 12205                           postinc1	equ	0xFE6
 12206                           postdec1	equ	0xFE5
 12207                           fsr1h	equ	0xFE2
 12208                           fsr1l	equ	0xFE1
 12209                           indf2	equ	0xFDF
 12210                           postinc2	equ	0xFDE
 12211                           postdec2	equ	0xFDD
 12212                           fsr2h	equ	0xFDA
 12213                           fsr2l	equ	0xFD9
 12214                           status	equ	0xFD8
 12215                           
 12216 ;; *************** function _Eeprom_Read *****************
 12217 ;; Defined at:
 12218 ;;		line 92 in file "../eeprom_settings.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;  Location        2   18[COMRAM] unsigned int 
 12221 ;; Auto vars:     Size  Location     Type
 12222 ;;  Return_Data     2   24[COMRAM] unsigned int 
 12223 ;;  Location_Hig    2   22[COMRAM] unsigned int 
 12224 ;;  Location_Low    2   20[COMRAM] unsigned int 
 12225 ;; Return value:  Size  Location     Type
 12226 ;;                  2   18[COMRAM] unsigned int 
 12227 ;; Registers used:
 12228 ;;		wreg, status,2, status,0
 12229 ;; Tracked objects:
 12230 ;;		On entry : 0/0
 12231 ;;		On exit  : 0/0
 12232 ;;		Unchanged: 0/0
 12233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12234 ;;      Params:         2       0       0       0       0       0       0       0       0
 12235 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12236 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12237 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12238 ;;Total ram usage:        8 bytes
 12239 ;; Hardware stack levels used:    1
 12240 ;; Hardware stack levels required when called:    3
 12241 ;; This function calls:
 12242 ;;		Nothing
 12243 ;; This function is called by:
 12244 ;;		_EEPROMxREAD
 12245 ;; This function uses a non-reentrant model
 12246 ;;
 12247                           
 12248                           	psect	text34
 12249  003F42                     __ptext34:
 12250                           	opt stack 0
 12251  003F42                     _Eeprom_Read:
 12252                           	opt stack 26
 12253                           
 12254                           ;eeprom_settings.c: 94: unsigned int Location_High_Byte = Location * 2;
 12255                           
 12256                           ;incstack = 0
 12257  003F42  90D8               	bcf	status,0,c
 12258  003F44  3413               	rlcf	Eeprom_Read@Location,w,c
 12259  003F46  6E17               	movwf	Eeprom_Read@Location_High_Byte,c
 12260  003F48  3414               	rlcf	Eeprom_Read@Location+1,w,c
 12261  003F4A  6E18               	movwf	Eeprom_Read@Location_High_Byte+1,c
 12262                           
 12263                           ;eeprom_settings.c: 95: unsigned int Location_Low_Byte = Location_High_Byte + 1;
 12264  003F4C  0E01               	movlw	1
 12265  003F4E  2417               	addwf	Eeprom_Read@Location_High_Byte,w,c
 12266  003F50  6E15               	movwf	Eeprom_Read@Location_Low_Byte,c
 12267  003F52  0E00               	movlw	0
 12268  003F54  2018               	addwfc	Eeprom_Read@Location_High_Byte+1,w,c
 12269  003F56  6E16               	movwf	Eeprom_Read@Location_Low_Byte+1,c
 12270                           
 12271                           ;eeprom_settings.c: 96: unsigned int Return_Data = 0;
 12272  003F58  0E00               	movlw	0
 12273  003F5A  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12274  003F5C  0E00               	movlw	0
 12275  003F5E  6E19               	movwf	Eeprom_Read@Return_Data,c
 12276                           
 12277                           ;eeprom_settings.c: 98: INTCON = 0x00;
 12278  003F60  0E00               	movlw	0
 12279  003F62  6EF2               	movwf	intcon,c	;volatile
 12280                           
 12281                           ;eeprom_settings.c: 100: EECON1bits.EEPGD = 0;
 12282  003F64  9EA6               	bcf	4006,7,c	;volsfr
 12283                           
 12284                           ;eeprom_settings.c: 101: EECON1bits.CFGS = 0;
 12285  003F66  9CA6               	bcf	4006,6,c	;volsfr
 12286                           
 12287                           ;eeprom_settings.c: 102: EEADR = Location_High_Byte;
 12288  003F68  C017  FFA9         	movff	Eeprom_Read@Location_High_Byte,4009	;volatile
 12289                           
 12290                           ;eeprom_settings.c: 103: EECON1bits.RD = 1;
 12291  003F6C  80A6               	bsf	4006,0,c	;volsfr
 12292  003F6E  B0A6               	btfsc	4006,0,c	;volsfr
 12293  003F70  D7FE               	goto	l747
 12294                           
 12295                           ;eeprom_settings.c: 105: Return_Data = EEDATA;
 12296  003F72  CFA8 F019          	movff	4008,Eeprom_Read@Return_Data	;volatile
 12297  003F76  6A1A               	clrf	Eeprom_Read@Return_Data+1,c
 12298                           
 12299                           ;eeprom_settings.c: 106: Return_Data = Return_Data << 8;
 12300  003F78  5019               	movf	Eeprom_Read@Return_Data,w,c
 12301  003F7A  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12302  003F7C  6A19               	clrf	Eeprom_Read@Return_Data,c
 12303                           
 12304                           ;eeprom_settings.c: 111: EECON1bits.EEPGD = 0;
 12305  003F7E  9EA6               	bcf	4006,7,c	;volsfr
 12306                           
 12307                           ;eeprom_settings.c: 112: EECON1bits.CFGS = 0;
 12308  003F80  9CA6               	bcf	4006,6,c	;volsfr
 12309                           
 12310                           ;eeprom_settings.c: 113: EEADR = Location_Low_Byte;
 12311  003F82  C015  FFA9         	movff	Eeprom_Read@Location_Low_Byte,4009	;volatile
 12312                           
 12313                           ;eeprom_settings.c: 114: EECON1bits.RD = 1;
 12314  003F86  80A6               	bsf	4006,0,c	;volsfr
 12315  003F88  B0A6               	btfsc	4006,0,c	;volsfr
 12316  003F8A  D7FE               	goto	l750
 12317                           
 12318                           ;eeprom_settings.c: 116: Return_Data = Return_Data | EEDATA;
 12319  003F8C  5019               	movf	Eeprom_Read@Return_Data,w,c
 12320  003F8E  10A8               	iorwf	4008,w,c	;volatile
 12321  003F90  6E19               	movwf	Eeprom_Read@Return_Data,c
 12322  003F92  501A               	movf	Eeprom_Read@Return_Data+1,w,c
 12323  003F94  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12324                           
 12325                           ;eeprom_settings.c: 121: INTCON = 0xA0;
 12326  003F96  0EA0               	movlw	160
 12327  003F98  6EF2               	movwf	intcon,c	;volatile
 12328                           
 12329                           ;eeprom_settings.c: 123: return (Return_Data);
 12330  003F9A  C019  F013         	movff	Eeprom_Read@Return_Data,?_Eeprom_Read
 12331  003F9E  C01A  F014         	movff	Eeprom_Read@Return_Data+1,?_Eeprom_Read+1
 12332  003FA2  0012               	return	
 12333  003FA4                     __end_of_Eeprom_Read:
 12334                           	opt stack 0
 12335                           tblptru	equ	0xFF8
 12336                           tblptrh	equ	0xFF7
 12337                           tblptrl	equ	0xFF6
 12338                           tablat	equ	0xFF5
 12339                           prodh	equ	0xFF4
 12340                           prodl	equ	0xFF3
 12341                           intcon	equ	0xFF2
 12342                           intcon2	equ	0xFF1
 12343                           postinc0	equ	0xFEE
 12344                           wreg	equ	0xFE8
 12345                           postinc1	equ	0xFE6
 12346                           postdec1	equ	0xFE5
 12347                           fsr1h	equ	0xFE2
 12348                           fsr1l	equ	0xFE1
 12349                           indf2	equ	0xFDF
 12350                           postinc2	equ	0xFDE
 12351                           postdec2	equ	0xFDD
 12352                           fsr2h	equ	0xFDA
 12353                           fsr2l	equ	0xFD9
 12354                           status	equ	0xFD8
 12355                           
 12356 ;; *************** function _DIAGNOSTICxTOxPC *****************
 12357 ;; Defined at:
 12358 ;;		line 194 in file "../terminal.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;		None
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;		None
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  1    wreg      void 
 12365 ;; Registers used:
 12366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12372 ;;      Params:         0       0       0       0       0       0       0       0       0
 12373 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12374 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12375 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12376 ;;Total ram usage:        2 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    6
 12379 ;; This function calls:
 12380 ;;		_SendMessage
 12381 ;; This function is called by:
 12382 ;;		_main
 12383 ;; This function uses a non-reentrant model
 12384 ;;
 12385                           
 12386                           	psect	text35
 12387  00261A                     __ptext35:
 12388                           	opt stack 0
 12389  00261A                     _DIAGNOSTICxTOxPC:
 12390                           	opt stack 24
 12391                           
 12392                           ;terminal.c: 196: if (DelayCounter > 10000){
 12393                           
 12394                           ;incstack = 0
 12395  00261A  0E11               	movlw	17
 12396  00261C  0100               	movlb	0	; () banked
 12397  00261E  5D6C               	subwf	_DelayCounter& (0+255),w,b
 12398  002620  0E27               	movlw	39
 12399  002622  596D               	subwfb	(_DelayCounter+1)& (0+255),w,b
 12400  002624  A0D8               	btfss	status,0,c
 12401  002626  D113               	goto	l643
 12402                           
 12403                           ; BSR set to: 0
 12404                           ;terminal.c: 197: DelayCounter = 0;
 12405  002628  0E00               	movlw	0
 12406  00262A  6F6D               	movwf	(_DelayCounter+1)& (0+255),b
 12407  00262C  0E00               	movlw	0
 12408  00262E  6F6C               	movwf	_DelayCounter& (0+255),b
 12409                           
 12410                           ;terminal.c: 199: switch (Diag_Comm2)
 12411  002630  D0E9               	goto	l644
 12412  002632                     
 12413                           ; BSR set to: 0
 12414                           
 12415                           ; BSR set to: 0
 12416  002632  0E8C               	movlw	low _Comm_List
 12417  002634  6F72               	movwf	_Pcomm_List& (0+255),b
 12418  002636  0E00               	movlw	high _Comm_List
 12419  002638  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 12420                           
 12421                           ;terminal.c: 202: Pcomm_List2 = &Comm_List[0][0];
 12422  00263A  0E8C               	movlw	low _Comm_List
 12423  00263C  6F70               	movwf	_Pcomm_List2& (0+255),b
 12424  00263E  0E00               	movlw	high _Comm_List
 12425  002640  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;terminal.c: 203: Diag_Comm2 = 1;
 12429  002642  0E00               	movlw	0
 12430  002644  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12431  002646  0E01               	movlw	1
 12432  002648  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12433                           
 12434                           ;terminal.c: 204: break;
 12435  00264A  0012               	return	
 12436  00264C                     
 12437                           ; BSR set to: 0
 12438                           
 12439                           ; BSR set to: 0
 12440  00264C  0E8C               	movlw	low _Comm_List
 12441  00264E  6F70               	movwf	_Pcomm_List2& (0+255),b
 12442  002650  0E00               	movlw	high _Comm_List
 12443  002652  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12444                           
 12445                           ;terminal.c: 207: if (Pcomm_List2 != Pcomm_List)
 12446  002654  5172               	movf	_Pcomm_List& (0+255),w,b
 12447  002656  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12448  002658  E104               	bnz	u9180
 12449  00265A  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12450  00265C  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12451  00265E  B4D8               	btfsc	status,2,c
 12452  002660  0012               	return	
 12453  002662                     u9180:
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;terminal.c: 208: {
 12457                           ;terminal.c: 209: SendMessage(Comm_List[0][0], Comm_List[0][1]);
 12458  002662  C08C  F0D8         	movff	_Comm_List,SendMessage@index
 12459  002666  C08D  F0D9         	movff	_Comm_List+1,SendMessage@index+1
 12460  00266A  C08E  F0DA         	movff	_Comm_List+2,SendMessage@value
 12461  00266E  C08F  F0DB         	movff	_Comm_List+3,SendMessage@value+1
 12462  002672  EC28  F021         	call	_SendMessage	;wreg free
 12463                           
 12464                           ;terminal.c: 210: Pcomm_List2+=2;
 12465  002676  0E04               	movlw	4
 12466  002678  0100               	movlb	0	; () banked
 12467  00267A  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12468  00267C  0E00               	movlw	0
 12469  00267E  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12470                           
 12471                           ; BSR set to: 0
 12472                           ;terminal.c: 211: Diag_Comm2 = 2;
 12473  002680  0E00               	movlw	0
 12474  002682  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12475  002684  0E02               	movlw	2
 12476  002686  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;terminal.c: 212: }
 12480                           ;terminal.c: 213: break;
 12481  002688  0012               	return	
 12482  00268A                     
 12483                           ; BSR set to: 0
 12484                           
 12485                           ; BSR set to: 0
 12486  00268A  5172               	movf	_Pcomm_List& (0+255),w,b
 12487  00268C  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12488  00268E  E104               	bnz	u9190
 12489  002690  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12490  002692  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12491  002694  B4D8               	btfsc	status,2,c
 12492  002696  0012               	return	
 12493  002698                     u9190:
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;terminal.c: 216: {
 12497                           ;terminal.c: 217: SendMessage(Comm_List[1][0], Comm_List[1][1]);
 12498  002698  C090  F0D8         	movff	_Comm_List+4,SendMessage@index
 12499  00269C  C091  F0D9         	movff	_Comm_List+5,SendMessage@index+1
 12500  0026A0  C092  F0DA         	movff	_Comm_List+6,SendMessage@value
 12501  0026A4  C093  F0DB         	movff	_Comm_List+7,SendMessage@value+1
 12502  0026A8  EC28  F021         	call	_SendMessage	;wreg free
 12503                           
 12504                           ;terminal.c: 218: Pcomm_List2+=2;
 12505  0026AC  0E04               	movlw	4
 12506  0026AE  0100               	movlb	0	; () banked
 12507  0026B0  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12508  0026B2  0E00               	movlw	0
 12509  0026B4  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12510                           
 12511                           ; BSR set to: 0
 12512                           ;terminal.c: 219: Diag_Comm2 = 3;
 12513  0026B6  0E00               	movlw	0
 12514  0026B8  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12515  0026BA  0E03               	movlw	3
 12516  0026BC  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12517                           
 12518                           ; BSR set to: 0
 12519                           ;terminal.c: 220: }
 12520                           ;terminal.c: 221: break;
 12521  0026BE  0012               	return	
 12522  0026C0                     
 12523                           ; BSR set to: 0
 12524                           
 12525                           ; BSR set to: 0
 12526  0026C0  5172               	movf	_Pcomm_List& (0+255),w,b
 12527  0026C2  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12528  0026C4  E104               	bnz	u9200
 12529  0026C6  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12530  0026C8  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12531  0026CA  B4D8               	btfsc	status,2,c
 12532  0026CC  0012               	return	
 12533  0026CE                     u9200:
 12534                           
 12535                           ; BSR set to: 0
 12536                           ;terminal.c: 224: {
 12537                           ;terminal.c: 225: SendMessage(Comm_List[2][0], Comm_List[2][1]);
 12538  0026CE  C094  F0D8         	movff	_Comm_List+8,SendMessage@index
 12539  0026D2  C095  F0D9         	movff	_Comm_List+9,SendMessage@index+1
 12540  0026D6  C096  F0DA         	movff	_Comm_List+10,SendMessage@value
 12541  0026DA  C097  F0DB         	movff	_Comm_List+11,SendMessage@value+1
 12542  0026DE  EC28  F021         	call	_SendMessage	;wreg free
 12543                           
 12544                           ;terminal.c: 226: Pcomm_List2+=2;
 12545  0026E2  0E04               	movlw	4
 12546  0026E4  0100               	movlb	0	; () banked
 12547  0026E6  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12548  0026E8  0E00               	movlw	0
 12549  0026EA  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;terminal.c: 227: Diag_Comm2 = 4;
 12553  0026EC  0E00               	movlw	0
 12554  0026EE  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12555  0026F0  0E04               	movlw	4
 12556  0026F2  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12557                           
 12558                           ; BSR set to: 0
 12559                           ;terminal.c: 228: }
 12560                           ;terminal.c: 229: break;
 12561  0026F4  0012               	return	
 12562  0026F6                     
 12563                           ; BSR set to: 0
 12564                           
 12565                           ; BSR set to: 0
 12566  0026F6  5172               	movf	_Pcomm_List& (0+255),w,b
 12567  0026F8  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12568  0026FA  E104               	bnz	u9210
 12569  0026FC  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12570  0026FE  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12571  002700  B4D8               	btfsc	status,2,c
 12572  002702  0012               	return	
 12573  002704                     u9210:
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;terminal.c: 232: {
 12577                           ;terminal.c: 233: SendMessage(Comm_List[3][0], Comm_List[3][1]);
 12578  002704  C098  F0D8         	movff	_Comm_List+12,SendMessage@index
 12579  002708  C099  F0D9         	movff	_Comm_List+13,SendMessage@index+1
 12580  00270C  C09A  F0DA         	movff	_Comm_List+14,SendMessage@value
 12581  002710  C09B  F0DB         	movff	_Comm_List+15,SendMessage@value+1
 12582  002714  EC28  F021         	call	_SendMessage	;wreg free
 12583                           
 12584                           ;terminal.c: 234: Pcomm_List2+=2;
 12585  002718  0E04               	movlw	4
 12586  00271A  0100               	movlb	0	; () banked
 12587  00271C  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12588  00271E  0E00               	movlw	0
 12589  002720  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;terminal.c: 235: Diag_Comm2 = 5;
 12593  002722  0E00               	movlw	0
 12594  002724  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12595  002726  0E05               	movlw	5
 12596  002728  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12597                           
 12598                           ; BSR set to: 0
 12599                           ;terminal.c: 236: }
 12600                           ;terminal.c: 237: break;
 12601  00272A  0012               	return	
 12602  00272C                     
 12603                           ; BSR set to: 0
 12604                           
 12605                           ; BSR set to: 0
 12606  00272C  5172               	movf	_Pcomm_List& (0+255),w,b
 12607  00272E  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12608  002730  E104               	bnz	u9220
 12609  002732  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12610  002734  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12611  002736  B4D8               	btfsc	status,2,c
 12612  002738  0012               	return	
 12613  00273A                     u9220:
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;terminal.c: 240: {
 12617                           ;terminal.c: 241: SendMessage(Comm_List[4][0], Comm_List[4][1]);
 12618  00273A  C09C  F0D8         	movff	_Comm_List+16,SendMessage@index
 12619  00273E  C09D  F0D9         	movff	_Comm_List+17,SendMessage@index+1
 12620  002742  C09E  F0DA         	movff	_Comm_List+18,SendMessage@value
 12621  002746  C09F  F0DB         	movff	_Comm_List+19,SendMessage@value+1
 12622  00274A  EC28  F021         	call	_SendMessage	;wreg free
 12623                           
 12624                           ;terminal.c: 242: Pcomm_List2+=2;
 12625  00274E  0E04               	movlw	4
 12626  002750  0100               	movlb	0	; () banked
 12627  002752  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12628  002754  0E00               	movlw	0
 12629  002756  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;terminal.c: 243: Diag_Comm2 = 6;
 12633  002758  0E00               	movlw	0
 12634  00275A  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12635  00275C  0E06               	movlw	6
 12636  00275E  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;terminal.c: 244: }
 12640                           ;terminal.c: 245: break;
 12641  002760  0012               	return	
 12642  002762                     
 12643                           ; BSR set to: 0
 12644                           
 12645                           ; BSR set to: 0
 12646  002762  5172               	movf	_Pcomm_List& (0+255),w,b
 12647  002764  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12648  002766  E104               	bnz	u9230
 12649  002768  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12650  00276A  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12651  00276C  B4D8               	btfsc	status,2,c
 12652  00276E  0012               	return	
 12653  002770                     u9230:
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;terminal.c: 248: {
 12657                           ;terminal.c: 249: SendMessage(Comm_List[5][0], Comm_List[5][1]);
 12658  002770  C0A0  F0D8         	movff	_Comm_List+20,SendMessage@index
 12659  002774  C0A1  F0D9         	movff	_Comm_List+21,SendMessage@index+1
 12660  002778  C0A2  F0DA         	movff	_Comm_List+22,SendMessage@value
 12661  00277C  C0A3  F0DB         	movff	_Comm_List+23,SendMessage@value+1
 12662  002780  EC28  F021         	call	_SendMessage	;wreg free
 12663                           
 12664                           ;terminal.c: 250: Pcomm_List2+=2;
 12665  002784  0E04               	movlw	4
 12666  002786  0100               	movlb	0	; () banked
 12667  002788  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12668  00278A  0E00               	movlw	0
 12669  00278C  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;terminal.c: 251: Diag_Comm2 = 7;
 12673  00278E  0E00               	movlw	0
 12674  002790  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12675  002792  0E07               	movlw	7
 12676  002794  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;terminal.c: 252: }
 12680                           ;terminal.c: 253: break;
 12681  002796  0012               	return	
 12682  002798                     
 12683                           ; BSR set to: 0
 12684                           
 12685                           ; BSR set to: 0
 12686  002798  5172               	movf	_Pcomm_List& (0+255),w,b
 12687  00279A  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12688  00279C  E104               	bnz	u9240
 12689  00279E  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12690  0027A0  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12691  0027A2  B4D8               	btfsc	status,2,c
 12692  0027A4  0012               	return	
 12693  0027A6                     u9240:
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;terminal.c: 256: {
 12697                           ;terminal.c: 257: SendMessage(Comm_List[6][0], Comm_List[6][1]);
 12698  0027A6  C0A4  F0D8         	movff	_Comm_List+24,SendMessage@index
 12699  0027AA  C0A5  F0D9         	movff	_Comm_List+25,SendMessage@index+1
 12700  0027AE  C0A6  F0DA         	movff	_Comm_List+26,SendMessage@value
 12701  0027B2  C0A7  F0DB         	movff	_Comm_List+27,SendMessage@value+1
 12702  0027B6  EC28  F021         	call	_SendMessage	;wreg free
 12703                           
 12704                           ;terminal.c: 258: Pcomm_List2+=2;
 12705  0027BA  0E04               	movlw	4
 12706  0027BC  0100               	movlb	0	; () banked
 12707  0027BE  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12708  0027C0  0E00               	movlw	0
 12709  0027C2  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12710                           
 12711                           ; BSR set to: 0
 12712                           ;terminal.c: 259: Diag_Comm2 = 8;
 12713  0027C4  0E00               	movlw	0
 12714  0027C6  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12715  0027C8  0E08               	movlw	8
 12716  0027CA  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;terminal.c: 260: }
 12720                           ;terminal.c: 261: break;
 12721  0027CC  0012               	return	
 12722  0027CE                     
 12723                           ; BSR set to: 0
 12724                           
 12725                           ; BSR set to: 0
 12726  0027CE  5172               	movf	_Pcomm_List& (0+255),w,b
 12727  0027D0  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12728  0027D2  E104               	bnz	u9250
 12729  0027D4  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12730  0027D6  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12731  0027D8  B4D8               	btfsc	status,2,c
 12732  0027DA  0012               	return	
 12733  0027DC                     u9250:
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;terminal.c: 265: {
 12737                           ;terminal.c: 266: SendMessage(Comm_List[7][0], Comm_List[7][1]);
 12738  0027DC  C0A8  F0D8         	movff	_Comm_List+28,SendMessage@index
 12739  0027E0  C0A9  F0D9         	movff	_Comm_List+29,SendMessage@index+1
 12740  0027E4  C0AA  F0DA         	movff	_Comm_List+30,SendMessage@value
 12741  0027E8  C0AB  F0DB         	movff	_Comm_List+31,SendMessage@value+1
 12742  0027EC  EC28  F021         	call	_SendMessage	;wreg free
 12743                           
 12744                           ;terminal.c: 267: Pcomm_List2 = &Comm_List[0][0];
 12745  0027F0  0E8C               	movlw	low _Comm_List
 12746  0027F2  0100               	movlb	0	; () banked
 12747  0027F4  6F70               	movwf	_Pcomm_List2& (0+255),b
 12748  0027F6  0E00               	movlw	high _Comm_List
 12749  0027F8  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;terminal.c: 268: Diag_Comm2 = 1;
 12753  0027FA  0E00               	movlw	0
 12754  0027FC  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12755  0027FE  0E01               	movlw	1
 12756  002800  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;terminal.c: 273: }
 12760                           
 12761                           ; BSR set to: 0
 12762                           
 12763                           ;terminal.c: 272: default : break;
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;terminal.c: 269: }
 12767                           ;terminal.c: 270: break;
 12768  002802  0012               	return	
 12769  002804                     l644:
 12770                           
 12771                           ; BSR set to: 0
 12772                           
 12773                           ; BSR set to: 0
 12774  002804  C06E  F020         	movff	_Diag_Comm2,??_DIAGNOSTICxTOxPC
 12775  002808  C06F  F021         	movff	_Diag_Comm2+1,??_DIAGNOSTICxTOxPC+1
 12776                           
 12777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12778                           ; Switch size 1, requested type "space"
 12779                           ; Number of cases is 1, Range of values is 0 to 0
 12780                           ; switch strategies available:
 12781                           ; Name         Instructions Cycles
 12782                           ; simple_byte            4     3 (average)
 12783                           ;	Chosen strategy is simple_byte
 12784  00280C  5021               	movf	??_DIAGNOSTICxTOxPC+1,w,c
 12785  00280E  0A00               	xorlw	0	; case 0
 12786  002810  A4D8               	btfss	status,2,c
 12787  002812  0012               	return	
 12788                           
 12789                           ; BSR set to: 0
 12790                           ; Switch size 1, requested type "space"
 12791                           ; Number of cases is 9, Range of values is 0 to 8
 12792                           ; switch strategies available:
 12793                           ; Name         Instructions Cycles
 12794                           ; simple_byte           28    15 (average)
 12795                           ;	Chosen strategy is simple_byte
 12796  002814  5020               	movf	??_DIAGNOSTICxTOxPC,w,c
 12797  002816  0A00               	xorlw	0	; case 0
 12798  002818  B4D8               	btfsc	status,2,c
 12799  00281A  D70B               	goto	l645
 12800  00281C  0A01               	xorlw	1	; case 1
 12801  00281E  B4D8               	btfsc	status,2,c
 12802  002820  D715               	goto	l647
 12803  002822  0A03               	xorlw	3	; case 2
 12804  002824  B4D8               	btfsc	status,2,c
 12805  002826  D731               	goto	l649
 12806  002828  0A01               	xorlw	1	; case 3
 12807  00282A  B4D8               	btfsc	status,2,c
 12808  00282C  D749               	goto	l651
 12809  00282E  0A07               	xorlw	7	; case 4
 12810  002830  B4D8               	btfsc	status,2,c
 12811  002832  D761               	goto	l653
 12812  002834  0A01               	xorlw	1	; case 5
 12813  002836  B4D8               	btfsc	status,2,c
 12814  002838  D779               	goto	l655
 12815  00283A  0A03               	xorlw	3	; case 6
 12816  00283C  B4D8               	btfsc	status,2,c
 12817  00283E  D791               	goto	l657
 12818  002840  0A01               	xorlw	1	; case 7
 12819  002842  B4D8               	btfsc	status,2,c
 12820  002844  D7A9               	goto	l659
 12821  002846  0A0F               	xorlw	15	; case 8
 12822  002848  A4D8               	btfss	status,2,c
 12823                           
 12824                           ; BSR set to: 0
 12825                           ;terminal.c: 274: }
 12826  00284A  0012               	return	
 12827  00284C  D7C0               	goto	l661
 12828  00284E                     l643:
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;terminal.c: 275: else{
 12832                           ;terminal.c: 276: DelayCounter++;
 12833                           
 12834                           ; BSR set to: 0
 12835  00284E  4B6C               	infsnz	_DelayCounter& (0+255),f,b
 12836  002850  2B6D               	incf	(_DelayCounter+1)& (0+255),f,b
 12837  002852  0012               	return	
 12838  002854                     __end_of_DIAGNOSTICxTOxPC:
 12839                           	opt stack 0
 12840                           tblptru	equ	0xFF8
 12841                           tblptrh	equ	0xFF7
 12842                           tblptrl	equ	0xFF6
 12843                           tablat	equ	0xFF5
 12844                           prodh	equ	0xFF4
 12845                           prodl	equ	0xFF3
 12846                           intcon	equ	0xFF2
 12847                           intcon2	equ	0xFF1
 12848                           postinc0	equ	0xFEE
 12849                           wreg	equ	0xFE8
 12850                           postinc1	equ	0xFE6
 12851                           postdec1	equ	0xFE5
 12852                           fsr1h	equ	0xFE2
 12853                           fsr1l	equ	0xFE1
 12854                           indf2	equ	0xFDF
 12855                           postinc2	equ	0xFDE
 12856                           postdec2	equ	0xFDD
 12857                           fsr2h	equ	0xFDA
 12858                           fsr2l	equ	0xFD9
 12859                           status	equ	0xFD8
 12860                           
 12861 ;; *************** function _SendMessage *****************
 12862 ;; Defined at:
 12863 ;;		line 185 in file "../terminal.c"
 12864 ;; Parameters:    Size  Location     Type
 12865 ;;  index           2   34[BANK0 ] unsigned int 
 12866 ;;  value           2   36[BANK0 ] unsigned int 
 12867 ;; Auto vars:     Size  Location     Type
 12868 ;;		None
 12869 ;; Return value:  Size  Location     Type
 12870 ;;                  1    wreg      void 
 12871 ;; Registers used:
 12872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12878 ;;      Params:         0       4       0       0       0       0       0       0       0
 12879 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12880 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12881 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12882 ;;Total ram usage:        4 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    5
 12885 ;; This function calls:
 12886 ;;		_printf
 12887 ;; This function is called by:
 12888 ;;		_DIAGNOSTICxTOxPC
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text36
 12893  004250                     __ptext36:
 12894                           	opt stack 0
 12895  004250                     _SendMessage:
 12896                           	opt stack 24
 12897                           
 12898                           ;terminal.c: 191: printf("M#%d %d\r\n", index, value);
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;incstack = 0
 12902  004250  0E44               	movlw	low STR_8
 12903  004252  0100               	movlb	0	; () banked
 12904  004254  6FCB               	movwf	printf@f& (0+255),b
 12905  004256  0E08               	movlw	high STR_8
 12906  004258  6FCC               	movwf	(printf@f+1)& (0+255),b
 12907  00425A  C0D8  F0CD         	movff	SendMessage@index,?_printf+2
 12908  00425E  C0D9  F0CE         	movff	SendMessage@index+1,?_printf+3
 12909  004262  C0DA  F0CF         	movff	SendMessage@value,?_printf+4
 12910  004266  C0DB  F0D0         	movff	SendMessage@value+1,?_printf+5
 12911  00426A  ECF5  F019         	call	_printf	;wreg free
 12912  00426E  0012               	return		;funcret
 12913  004270                     __end_of_SendMessage:
 12914                           	opt stack 0
 12915                           tblptru	equ	0xFF8
 12916                           tblptrh	equ	0xFF7
 12917                           tblptrl	equ	0xFF6
 12918                           tablat	equ	0xFF5
 12919                           prodh	equ	0xFF4
 12920                           prodl	equ	0xFF3
 12921                           intcon	equ	0xFF2
 12922                           intcon2	equ	0xFF1
 12923                           postinc0	equ	0xFEE
 12924                           wreg	equ	0xFE8
 12925                           postinc1	equ	0xFE6
 12926                           postdec1	equ	0xFE5
 12927                           fsr1h	equ	0xFE2
 12928                           fsr1l	equ	0xFE1
 12929                           indf2	equ	0xFDF
 12930                           postinc2	equ	0xFDE
 12931                           postdec2	equ	0xFDD
 12932                           fsr2h	equ	0xFDA
 12933                           fsr2l	equ	0xFD9
 12934                           status	equ	0xFD8
 12935                           
 12936 ;; *************** function _printf *****************
 12937 ;; Defined at:
 12938 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 12939 ;; Parameters:    Size  Location     Type
 12940 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 12941 ;;		 -> STR_8(10), STR_7(7), STR_6(7), STR_5(7), 
 12942 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
 12943 ;; Auto vars:     Size  Location     Type
 12944 ;;  tmpval          4    0        struct .
 12945 ;;  cp              3    0        PTR const unsigned char 
 12946 ;;  val             2   31[BANK0 ] unsigned int 
 12947 ;;  ap              2   27[BANK0 ] PTR void [1]
 12948 ;;		 -> ?_printf(2), 
 12949 ;;  len             2    0        unsigned int 
 12950 ;;  c               1   33[BANK0 ] char 
 12951 ;;  prec            1   30[BANK0 ] char 
 12952 ;;  flag            1   29[BANK0 ] unsigned char 
 12953 ;; Return value:  Size  Location     Type
 12954 ;;                  2   21[BANK0 ] int 
 12955 ;; Registers used:
 12956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12962 ;;      Params:         0       6       0       0       0       0       0       0       0
 12963 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12964 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12965 ;;      Totals:         1      13       0       0       0       0       0       0       0
 12966 ;;Total ram usage:       14 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; Hardware stack levels required when called:    4
 12969 ;; This function calls:
 12970 ;;		___lwdiv
 12971 ;;		___lwmod
 12972 ;;		_putch
 12973 ;; This function is called by:
 12974 ;;		_READxRECEIVEDxMESSAGE
 12975 ;;		_TranslateMessage
 12976 ;;		_SendMessage
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text37
 12981  0033EA                     __ptext37:
 12982                           	opt stack 0
 12983  0033EA                     _printf:
 12984                           	opt stack 25
 12985                           
 12986                           ;doprnt.c: 466: va_list ap;
 12987                           ;doprnt.c: 499: signed char c;
 12988                           ;doprnt.c: 506: signed char prec;
 12989                           ;doprnt.c: 508: unsigned char flag;
 12990                           ;doprnt.c: 523: union {
 12991                           ;doprnt.c: 524: unsigned long vd;
 12992                           ;doprnt.c: 525: double integ;
 12993                           ;doprnt.c: 526: } tmpval;
 12994                           ;doprnt.c: 528: unsigned int val;
 12995                           ;doprnt.c: 529: unsigned len;
 12996                           ;doprnt.c: 530: const char * cp;
 12997                           ;doprnt.c: 533: *ap = __va_start();
 12998                           
 12999                           ;incstack = 0
 13000  0033EA  0ECD               	movlw	low (?_printf+2)
 13001  0033EC  0100               	movlb	0	; () banked
 13002  0033EE  6FD1               	movwf	printf@ap& (0+255),b
 13003  0033F0  0E00               	movlw	high (?_printf+2)
 13004  0033F2  6FD2               	movwf	(printf@ap+1)& (0+255),b
 13005                           
 13006                           ;doprnt.c: 536: while(c = *f++) {
 13007  0033F4  D081               	goto	u7080
 13008  0033F6                     
 13009                           ; BSR set to: 0
 13010                           ;doprnt.c: 538: if(c != '%')
 13011                           
 13012                           ; BSR set to: 0
 13013  0033F6  0E25               	movlw	37
 13014  0033F8  19D7               	xorwf	printf@c& (0+255),w,b
 13015  0033FA  B4D8               	btfsc	status,2,c
 13016  0033FC  D004               	goto	l1260
 13017                           
 13018                           ; BSR set to: 0
 13019                           ;doprnt.c: 540: {
 13020                           ;doprnt.c: 541: (putch(c) );
 13021  0033FE  51D7               	movf	printf@c& (0+255),w,b
 13022  003400  EC6F  F021         	call	_putch
 13023                           
 13024                           ;doprnt.c: 542: continue;
 13025  003404  D079               	goto	u7080
 13026  003406                     l1260:
 13027                           
 13028                           ;doprnt.c: 543: }
 13029                           ;doprnt.c: 548: flag = 0;
 13030  003406  0E00               	movlw	0
 13031  003408  0100               	movlb	0	; () banked
 13032  00340A  6FD3               	movwf	printf@flag& (0+255),b
 13033                           
 13034                           ; BSR set to: 0
 13035                           
 13036                           ; BSR set to: 0
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;doprnt.c: 822: }
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;doprnt.c: 813: continue;
 13043                           
 13044                           ;doprnt.c: 802: default:
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;doprnt.c: 698: case 'i':
 13048                           ;doprnt.c: 699: break;
 13049                           
 13050                           ; BSR set to: 0
 13051                           
 13052                           ;doprnt.c: 697: case 'd':
 13053                           
 13054                           ; BSR set to: 0
 13055                           ;doprnt.c: 638: goto alldone;
 13056                           
 13057                           ;doprnt.c: 637: case 0:
 13058                           
 13059                           ;doprnt.c: 635: switch(c = *f++) {
 13060  00340C  C0CB  FFF6         	movff	printf@f,tblptrl
 13061  003410  C0CC  FFF7         	movff	printf@f+1,tblptrh
 13062  003414  4BCB               	infsnz	printf@f& (0+255),f,b
 13063  003416  2BCC               	incf	(printf@f+1)& (0+255),f,b
 13064  003418                     	if	0	;tblptru may be non-zero
 13065  003418                     	endif
 13066  003418                     	if	0	;tblptru may be non-zero
 13067  003418                     	endif
 13068  003418  0008               	tblrd		*
 13069  00341A  CFF5 F0D7          	movff	tablat,printf@c
 13070  00341E  51D7               	movf	printf@c& (0+255),w,b
 13071                           
 13072                           ; Switch size 1, requested type "space"
 13073                           ; Number of cases is 3, Range of values is 0 to 105
 13074                           ; switch strategies available:
 13075                           ; Name         Instructions Cycles
 13076                           ; simple_byte           10     6 (average)
 13077                           ;	Chosen strategy is simple_byte
 13078  003420  0A00               	xorlw	0	; case 0
 13079  003422  B4D8               	btfsc	status,2,c
 13080  003424  0012               	return	
 13081  003426  0A64               	xorlw	100	; case 100
 13082  003428  B4D8               	btfsc	status,2,c
 13083  00342A  D003               	goto	l1266
 13084  00342C  0A0D               	xorlw	13	; case 105
 13085  00342E  A4D8               	btfss	status,2,c
 13086  003430  D063               	goto	u7080
 13087  003432                     l1266:
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;doprnt.c: 1253: {
 13091                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13092                           
 13093                           ; BSR set to: 0
 13094  003432  C0D1  FFD9         	movff	printf@ap,fsr2l
 13095  003436  C0D2  FFDA         	movff	printf@ap+1,fsr2h
 13096  00343A  CFDE F0D5          	movff	postinc2,printf@val
 13097  00343E  CFDD F0D6          	movff	postdec2,printf@val+1
 13098                           
 13099                           ; BSR set to: 0
 13100  003442  0E02               	movlw	2
 13101  003444  27D1               	addwf	printf@ap& (0+255),f,b
 13102  003446  0E00               	movlw	0
 13103  003448  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;doprnt.c: 1261: if((int)val < 0) {
 13107  00344A  AFD6               	btfss	(printf@val+1)& (0+255),7,b
 13108  00344C  D006               	goto	l1268
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;doprnt.c: 1262: flag |= 0x03;
 13112  00344E  0E03               	movlw	3
 13113  003450  13D3               	iorwf	printf@flag& (0+255),f,b
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;doprnt.c: 1263: val = -val;
 13117  003452  6DD5               	negf	printf@val& (0+255),b
 13118  003454  1FD6               	comf	(printf@val+1)& (0+255),f,b
 13119  003456  B0D8               	btfsc	status,0,c
 13120  003458  2BD6               	incf	(printf@val+1)& (0+255),f,b
 13121  00345A                     l1268:
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;doprnt.c: 1264: }
 13125                           ;doprnt.c: 1266: }
 13126                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13127                           
 13128                           ; BSR set to: 0
 13129  00345A  0E01               	movlw	1
 13130  00345C  6FD7               	movwf	printf@c& (0+255),b
 13131  00345E                     l8062:
 13132                           
 13133                           ; BSR set to: 0
 13134  00345E  0E05               	movlw	5
 13135  003460  19D7               	xorwf	printf@c& (0+255),w,b
 13136  003462  B4D8               	btfsc	status,2,c
 13137  003464  D012               	goto	u7060
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;doprnt.c: 1306: if(val < dpowers[c])
 13141                           
 13142                           ; BSR set to: 0
 13143                           
 13144                           ; BSR set to: 0
 13145  003466  51D7               	movf	printf@c& (0+255),w,b
 13146  003468  0D02               	mullw	2
 13147  00346A  0E39               	movlw	low _dpowers
 13148  00346C  24F3               	addwf	prodl,w,c
 13149  00346E  6EF6               	movwf	tblptrl,c
 13150  003470  0E08               	movlw	high _dpowers
 13151  003472  20F4               	addwfc	prodh,w,c
 13152  003474  6EF7               	movwf	tblptrh,c
 13153  003476                     	if	0	;There are less than 3 active tblptr bytes
 13154  003476                     	endif
 13155  003476  0009               	tblrd		*+
 13156  003478  50F5               	movf	tablat,w,c
 13157  00347A  5DD5               	subwf	printf@val& (0+255),w,b
 13158  00347C  0009               	tblrd		*+
 13159  00347E  50F5               	movf	tablat,w,c
 13160  003480  59D6               	subwfb	(printf@val+1)& (0+255),w,b
 13161  003482  A0D8               	btfss	status,0,c
 13162  003484  D002               	goto	u7060
 13163                           
 13164                           ; BSR set to: 0
 13165                           
 13166                           ; BSR set to: 0
 13167                           
 13168                           ; BSR set to: 0
 13169                           ;doprnt.c: 1307: break;
 13170  003486  2BD7               	incf	printf@c& (0+255),f,b
 13171  003488  D7EA               	goto	l8062
 13172  00348A                     u7060:
 13173                           
 13174                           ; BSR set to: 0
 13175                           ;doprnt.c: 1422: {
 13176                           ;doprnt.c: 1438: if(flag & 0x03)
 13177                           
 13178                           ; BSR set to: 0
 13179  00348A  C0D3  F01F         	movff	printf@flag,??_printf
 13180  00348E  0E03               	movlw	3
 13181  003490  161F               	andwf	??_printf,f,c
 13182  003492  B4D8               	btfsc	status,2,c
 13183  003494  D003               	goto	l1272
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;doprnt.c: 1439: (putch('-') );
 13187  003496  0E2D               	movlw	45
 13188  003498  EC6F  F021         	call	_putch
 13189  00349C                     l1272:
 13190                           
 13191                           ;doprnt.c: 1469: }
 13192                           ;doprnt.c: 1472: prec = c;
 13193  00349C  C0D7  F0D4         	movff	printf@c,printf@prec
 13194                           
 13195                           ;doprnt.c: 1474: while(prec--) {
 13196  0034A0  D026               	goto	l1273
 13197  0034A2                     
 13198                           ;doprnt.c: 1478: {
 13199                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13200  0034A2  0100               	movlb	0	; () banked
 13201  0034A4  51D4               	movf	printf@prec& (0+255),w,b
 13202  0034A6  0D02               	mullw	2
 13203  0034A8  0E39               	movlw	low _dpowers
 13204  0034AA  24F3               	addwf	prodl,w,c
 13205  0034AC  6EF6               	movwf	tblptrl,c
 13206  0034AE  0E08               	movlw	high _dpowers
 13207  0034B0  20F4               	addwfc	prodh,w,c
 13208  0034B2  6EF7               	movwf	tblptrh,c
 13209  0034B4                     	if	0	;There are less than 3 active tblptr bytes
 13210  0034B4                     	endif
 13211  0034B4  0009               	tblrd		*+
 13212  0034B6  CFF5 F015          	movff	tablat,___lwdiv@divisor
 13213  0034BA  000A               	tblrd		*-
 13214  0034BC  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
 13215  0034C0  C0D5  F013         	movff	printf@val,___lwdiv@dividend
 13216  0034C4  C0D6  F014         	movff	printf@val+1,___lwdiv@dividend+1
 13217  0034C8  ECD2  F01F         	call	___lwdiv	;wreg free
 13218  0034CC  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
 13219  0034D0  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
 13220  0034D4  0E00               	movlw	0
 13221  0034D6  6E1D               	movwf	___lwmod@divisor+1,c
 13222  0034D8  0E0A               	movlw	10
 13223  0034DA  6E1C               	movwf	___lwmod@divisor,c
 13224  0034DC  EC47  F020         	call	___lwmod	;wreg free
 13225  0034E0  501A               	movf	?___lwmod,w,c
 13226  0034E2  0F30               	addlw	48
 13227  0034E4  0100               	movlb	0	; () banked
 13228  0034E6  6FD7               	movwf	printf@c& (0+255),b
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;doprnt.c: 1523: }
 13232                           ;doprnt.c: 1524: (putch(c) );
 13233  0034E8  51D7               	movf	printf@c& (0+255),w,b
 13234  0034EA  EC6F  F021         	call	_putch
 13235  0034EE                     l1273:
 13236  0034EE  0100               	movlb	0	; () banked
 13237  0034F0  07D4               	decf	printf@prec& (0+255),f,b
 13238  0034F2  29D4               	incf	printf@prec& (0+255),w,b
 13239  0034F4  A4D8               	btfss	status,2,c
 13240  0034F6  D7D5               	goto	l1274
 13241  0034F8                     u7080:
 13242                           
 13243                           ; BSR set to: 0
 13244                           
 13245                           ; BSR set to: 0
 13246  0034F8  C0CB  FFF6         	movff	printf@f,tblptrl
 13247  0034FC  C0CC  FFF7         	movff	printf@f+1,tblptrh
 13248  003500  0100               	movlb	0	; () banked
 13249  003502  4BCB               	infsnz	printf@f& (0+255),f,b
 13250  003504  2BCC               	incf	(printf@f+1)& (0+255),f,b
 13251  003506                     	if	0	;tblptru may be non-zero
 13252  003506                     	endif
 13253  003506                     	if	0	;tblptru may be non-zero
 13254  003506                     	endif
 13255  003506  0008               	tblrd		*
 13256  003508  CFF5 F0D7          	movff	tablat,printf@c
 13257  00350C  51D7               	movf	printf@c& (0+255),w,b
 13258  00350E  B4D8               	btfsc	status,2,c
 13259  003510  0012               	return	
 13260  003512  D771               	goto	l1259
 13261  003514                     __end_of_printf:
 13262                           	opt stack 0
 13263                           tblptru	equ	0xFF8
 13264                           tblptrh	equ	0xFF7
 13265                           tblptrl	equ	0xFF6
 13266                           tablat	equ	0xFF5
 13267                           prodh	equ	0xFF4
 13268                           prodl	equ	0xFF3
 13269                           intcon	equ	0xFF2
 13270                           intcon2	equ	0xFF1
 13271                           postinc0	equ	0xFEE
 13272                           wreg	equ	0xFE8
 13273                           postinc1	equ	0xFE6
 13274                           postdec1	equ	0xFE5
 13275                           fsr1h	equ	0xFE2
 13276                           fsr1l	equ	0xFE1
 13277                           indf2	equ	0xFDF
 13278                           postinc2	equ	0xFDE
 13279                           postdec2	equ	0xFDD
 13280                           fsr2h	equ	0xFDA
 13281                           fsr2l	equ	0xFD9
 13282                           status	equ	0xFD8
 13283                           
 13284 ;; *************** function _putch *****************
 13285 ;; Defined at:
 13286 ;;		line 177 in file "../eusart1.c"
 13287 ;; Parameters:    Size  Location     Type
 13288 ;;  data            1    wreg     unsigned char 
 13289 ;; Auto vars:     Size  Location     Type
 13290 ;;  data            1   18[COMRAM] unsigned char 
 13291 ;; Return value:  Size  Location     Type
 13292 ;;                  1    wreg      void 
 13293 ;; Registers used:
 13294 ;;		wreg
 13295 ;; Tracked objects:
 13296 ;;		On entry : 0/0
 13297 ;;		On exit  : 0/0
 13298 ;;		Unchanged: 0/0
 13299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13300 ;;      Params:         0       0       0       0       0       0       0       0       0
 13301 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13302 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13303 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13304 ;;Total ram usage:        1 bytes
 13305 ;; Hardware stack levels used:    1
 13306 ;; Hardware stack levels required when called:    3
 13307 ;; This function calls:
 13308 ;;		Nothing
 13309 ;; This function is called by:
 13310 ;;		_printf
 13311 ;; This function uses a non-reentrant model
 13312 ;;
 13313                           
 13314                           	psect	text38
 13315  0042DE                     __ptext38:
 13316                           	opt stack 0
 13317  0042DE                     _putch:
 13318                           	opt stack 25
 13319                           
 13320                           ; BSR set to: 0
 13321                           ;incstack = 0
 13322                           ;putch@data stored from wreg
 13323  0042DE  6E13               	movwf	putch@data,c
 13324  0042E0                     
 13325                           ;eusart1.c: 179: continue;
 13326                           
 13327                           ;eusart1.c: 178: while(! TXIF)
 13328  0042E0  A89E               	btfss	3998,4,c	;volatile
 13329  0042E2  D7FE               	goto	l7498
 13330                           
 13331                           ;eusart1.c: 180: TXREG1 = data;
 13332  0042E4  C013  FFAD         	movff	putch@data,4013	;volatile
 13333  0042E8  0012               	return		;funcret
 13334  0042EA                     __end_of_putch:
 13335                           	opt stack 0
 13336                           tblptru	equ	0xFF8
 13337                           tblptrh	equ	0xFF7
 13338                           tblptrl	equ	0xFF6
 13339                           tablat	equ	0xFF5
 13340                           prodh	equ	0xFF4
 13341                           prodl	equ	0xFF3
 13342                           intcon	equ	0xFF2
 13343                           intcon2	equ	0xFF1
 13344                           postinc0	equ	0xFEE
 13345                           wreg	equ	0xFE8
 13346                           postinc1	equ	0xFE6
 13347                           postdec1	equ	0xFE5
 13348                           fsr1h	equ	0xFE2
 13349                           fsr1l	equ	0xFE1
 13350                           indf2	equ	0xFDF
 13351                           postinc2	equ	0xFDE
 13352                           postdec2	equ	0xFDD
 13353                           fsr2h	equ	0xFDA
 13354                           fsr2l	equ	0xFD9
 13355                           status	equ	0xFD8
 13356                           
 13357 ;; *************** function ___lwmod *****************
 13358 ;; Defined at:
 13359 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13360 ;; Parameters:    Size  Location     Type
 13361 ;;  dividend        2   25[COMRAM] unsigned int 
 13362 ;;  divisor         2   27[COMRAM] unsigned int 
 13363 ;; Auto vars:     Size  Location     Type
 13364 ;;  counter         1   29[COMRAM] unsigned char 
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  2   25[COMRAM] unsigned int 
 13367 ;; Registers used:
 13368 ;;		wreg, status,2, status,0
 13369 ;; Tracked objects:
 13370 ;;		On entry : 0/0
 13371 ;;		On exit  : 0/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13374 ;;      Params:         4       0       0       0       0       0       0       0       0
 13375 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13376 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13377 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13378 ;;Total ram usage:        5 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; Hardware stack levels required when called:    3
 13381 ;; This function calls:
 13382 ;;		Nothing
 13383 ;; This function is called by:
 13384 ;;		_printf
 13385 ;; This function uses a non-reentrant model
 13386 ;;
 13387                           
 13388                           	psect	text39
 13389  00408E                     __ptext39:
 13390                           	opt stack 0
 13391  00408E                     ___lwmod:
 13392                           	opt stack 25
 13393                           
 13394                           ;incstack = 0
 13395  00408E  501C               	movf	___lwmod@divisor,w,c
 13396  004090  101D               	iorwf	___lwmod@divisor+1,w,c
 13397  004092  B4D8               	btfsc	status,2,c
 13398  004094  D018               	goto	l1723
 13399  004096  0E01               	movlw	1
 13400  004098  6E1E               	movwf	___lwmod@counter,c
 13401  00409A  D004               	goto	l1718
 13402  00409C  90D8               	bcf	status,0,c
 13403  00409E  361C               	rlcf	___lwmod@divisor,f,c
 13404  0040A0  361D               	rlcf	___lwmod@divisor+1,f,c
 13405  0040A2  2A1E               	incf	___lwmod@counter,f,c
 13406  0040A4                     l1718:
 13407  0040A4  AE1D               	btfss	___lwmod@divisor+1,7,c
 13408  0040A6  D7FA               	goto	l1719
 13409  0040A8                     u6500:
 13410  0040A8  501C               	movf	___lwmod@divisor,w,c
 13411  0040AA  5C1A               	subwf	___lwmod@dividend,w,c
 13412  0040AC  501D               	movf	___lwmod@divisor+1,w,c
 13413  0040AE  581B               	subwfb	___lwmod@dividend+1,w,c
 13414  0040B0  A0D8               	btfss	status,0,c
 13415  0040B2  D004               	goto	l1722
 13416  0040B4  501C               	movf	___lwmod@divisor,w,c
 13417  0040B6  5E1A               	subwf	___lwmod@dividend,f,c
 13418  0040B8  501D               	movf	___lwmod@divisor+1,w,c
 13419  0040BA  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13420  0040BC                     l1722:
 13421  0040BC  90D8               	bcf	status,0,c
 13422  0040BE  321D               	rrcf	___lwmod@divisor+1,f,c
 13423  0040C0  321C               	rrcf	___lwmod@divisor,f,c
 13424  0040C2  2E1E               	decfsz	___lwmod@counter,f,c
 13425  0040C4  D7F1               	goto	u6500
 13426  0040C6                     l1723:
 13427  0040C6  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13428  0040CA  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13429  0040CE  0012               	return		;funcret
 13430  0040D0                     __end_of___lwmod:
 13431                           	opt stack 0
 13432                           tblptru	equ	0xFF8
 13433                           tblptrh	equ	0xFF7
 13434                           tblptrl	equ	0xFF6
 13435                           tablat	equ	0xFF5
 13436                           prodh	equ	0xFF4
 13437                           prodl	equ	0xFF3
 13438                           intcon	equ	0xFF2
 13439                           intcon2	equ	0xFF1
 13440                           postinc0	equ	0xFEE
 13441                           wreg	equ	0xFE8
 13442                           postinc1	equ	0xFE6
 13443                           postdec1	equ	0xFE5
 13444                           fsr1h	equ	0xFE2
 13445                           fsr1l	equ	0xFE1
 13446                           indf2	equ	0xFDF
 13447                           postinc2	equ	0xFDE
 13448                           postdec2	equ	0xFDD
 13449                           fsr2h	equ	0xFDA
 13450                           fsr2l	equ	0xFD9
 13451                           status	equ	0xFD8
 13452                           
 13453 ;; *************** function ___lwdiv *****************
 13454 ;; Defined at:
 13455 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13456 ;; Parameters:    Size  Location     Type
 13457 ;;  dividend        2   18[COMRAM] unsigned int 
 13458 ;;  divisor         2   20[COMRAM] unsigned int 
 13459 ;; Auto vars:     Size  Location     Type
 13460 ;;  quotient        2   23[COMRAM] unsigned int 
 13461 ;;  counter         1   22[COMRAM] unsigned char 
 13462 ;; Return value:  Size  Location     Type
 13463 ;;                  2   18[COMRAM] unsigned int 
 13464 ;; Registers used:
 13465 ;;		wreg, status,2, status,0
 13466 ;; Tracked objects:
 13467 ;;		On entry : 0/0
 13468 ;;		On exit  : 0/0
 13469 ;;		Unchanged: 0/0
 13470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13471 ;;      Params:         4       0       0       0       0       0       0       0       0
 13472 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13473 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13474 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13475 ;;Total ram usage:        7 bytes
 13476 ;; Hardware stack levels used:    1
 13477 ;; Hardware stack levels required when called:    3
 13478 ;; This function calls:
 13479 ;;		Nothing
 13480 ;; This function is called by:
 13481 ;;		_printf
 13482 ;; This function uses a non-reentrant model
 13483 ;;
 13484                           
 13485                           	psect	text40
 13486  003FA4                     __ptext40:
 13487                           	opt stack 0
 13488  003FA4                     ___lwdiv:
 13489                           	opt stack 25
 13490                           
 13491                           ;incstack = 0
 13492  003FA4  0E00               	movlw	0
 13493  003FA6  6E19               	movwf	___lwdiv@quotient+1,c
 13494  003FA8  0E00               	movlw	0
 13495  003FAA  6E18               	movwf	___lwdiv@quotient,c
 13496  003FAC  5015               	movf	___lwdiv@divisor,w,c
 13497  003FAE  1016               	iorwf	___lwdiv@divisor+1,w,c
 13498  003FB0  B4D8               	btfsc	status,2,c
 13499  003FB2  D01C               	goto	l1713
 13500  003FB4  0E01               	movlw	1
 13501  003FB6  6E17               	movwf	___lwdiv@counter,c
 13502  003FB8  D004               	goto	l1708
 13503  003FBA  90D8               	bcf	status,0,c
 13504  003FBC  3615               	rlcf	___lwdiv@divisor,f,c
 13505  003FBE  3616               	rlcf	___lwdiv@divisor+1,f,c
 13506  003FC0  2A17               	incf	___lwdiv@counter,f,c
 13507  003FC2                     l1708:
 13508  003FC2  AE16               	btfss	___lwdiv@divisor+1,7,c
 13509  003FC4  D7FA               	goto	l1709
 13510  003FC6                     u6470:
 13511  003FC6  90D8               	bcf	status,0,c
 13512  003FC8  3618               	rlcf	___lwdiv@quotient,f,c
 13513  003FCA  3619               	rlcf	___lwdiv@quotient+1,f,c
 13514  003FCC  5015               	movf	___lwdiv@divisor,w,c
 13515  003FCE  5C13               	subwf	___lwdiv@dividend,w,c
 13516  003FD0  5016               	movf	___lwdiv@divisor+1,w,c
 13517  003FD2  5814               	subwfb	___lwdiv@dividend+1,w,c
 13518  003FD4  A0D8               	btfss	status,0,c
 13519  003FD6  D005               	goto	l1712
 13520  003FD8  5015               	movf	___lwdiv@divisor,w,c
 13521  003FDA  5E13               	subwf	___lwdiv@dividend,f,c
 13522  003FDC  5016               	movf	___lwdiv@divisor+1,w,c
 13523  003FDE  5A14               	subwfb	___lwdiv@dividend+1,f,c
 13524  003FE0  8018               	bsf	___lwdiv@quotient,0,c
 13525  003FE2                     l1712:
 13526  003FE2  90D8               	bcf	status,0,c
 13527  003FE4  3216               	rrcf	___lwdiv@divisor+1,f,c
 13528  003FE6  3215               	rrcf	___lwdiv@divisor,f,c
 13529  003FE8  2E17               	decfsz	___lwdiv@counter,f,c
 13530  003FEA  D7ED               	goto	u6470
 13531  003FEC                     l1713:
 13532  003FEC  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
 13533  003FF0  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13534  003FF4  0012               	return		;funcret
 13535  003FF6                     __end_of___lwdiv:
 13536                           	opt stack 0
 13537                           tblptru	equ	0xFF8
 13538                           tblptrh	equ	0xFF7
 13539                           tblptrl	equ	0xFF6
 13540                           tablat	equ	0xFF5
 13541                           prodh	equ	0xFF4
 13542                           prodl	equ	0xFF3
 13543                           intcon	equ	0xFF2
 13544                           intcon2	equ	0xFF1
 13545                           postinc0	equ	0xFEE
 13546                           wreg	equ	0xFE8
 13547                           postinc1	equ	0xFE6
 13548                           postdec1	equ	0xFE5
 13549                           fsr1h	equ	0xFE2
 13550                           fsr1l	equ	0xFE1
 13551                           indf2	equ	0xFDF
 13552                           postinc2	equ	0xFDE
 13553                           postdec2	equ	0xFDD
 13554                           fsr2h	equ	0xFDA
 13555                           fsr2l	equ	0xFD9
 13556                           status	equ	0xFD8
 13557                           
 13558 ;; *************** function _APIxInitialize *****************
 13559 ;; Defined at:
 13560 ;;		line 33 in file "../api.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;		None
 13563 ;; Auto vars:     Size  Location     Type
 13564 ;;  i               2   18[COMRAM] unsigned int 
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  1    wreg      void 
 13567 ;; Registers used:
 13568 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13574 ;;      Params:         0       0       0       0       0       0       0       0       0
 13575 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13576 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13577 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13578 ;;Total ram usage:        2 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    3
 13581 ;; This function calls:
 13582 ;;		Nothing
 13583 ;; This function is called by:
 13584 ;;		_main
 13585 ;; This function uses a non-reentrant model
 13586 ;;
 13587                           
 13588                           	psect	text41
 13589  001D54                     __ptext41:
 13590                           	opt stack 0
 13591  001D54                     _APIxInitialize:
 13592                           	opt stack 27
 13593                           
 13594                           ;api.c: 35: unsigned int i;
 13595                           ;api.c: 36: for(i = 0; i < (89); i++ )
 13596                           
 13597                           ;incstack = 0
 13598  001D54  0E00               	movlw	0
 13599  001D56  6E14               	movwf	APIxInitialize@i+1,c
 13600  001D58  0E00               	movlw	0
 13601  001D5A  6E13               	movwf	APIxInitialize@i,c
 13602  001D5C                     l6132:
 13603  001D5C  5014               	movf	APIxInitialize@i+1,w,c
 13604  001D5E  E12E               	bnz	l6142
 13605  001D60  0E59               	movlw	89
 13606  001D62  5C13               	subwf	APIxInitialize@i,w,c
 13607  001D64  B0D8               	btfsc	status,0,c
 13608  001D66  D02A               	goto	u5200
 13609                           
 13610                           ;api.c: 37: {
 13611                           ;api.c: 38: API_RW[i] = 0;
 13612  001D68  90D8               	bcf	status,0,c
 13613  001D6A  3413               	rlcf	APIxInitialize@i,w,c
 13614  001D6C  6ED9               	movwf	fsr2l,c
 13615  001D6E  3414               	rlcf	APIxInitialize@i+1,w,c
 13616  001D70  6EDA               	movwf	fsr2h,c
 13617  001D72  0E00               	movlw	low _API_RW
 13618  001D74  26D9               	addwf	fsr2l,f,c
 13619  001D76  0E02               	movlw	high _API_RW
 13620  001D78  22DA               	addwfc	fsr2h,f,c
 13621  001D7A  0E00               	movlw	0
 13622  001D7C  6EDE               	movwf	postinc2,c
 13623  001D7E  0E00               	movlw	0
 13624  001D80  6EDD               	movwf	postdec2,c
 13625                           
 13626                           ;api.c: 39: API[i] = 0;
 13627  001D82  90D8               	bcf	status,0,c
 13628  001D84  3413               	rlcf	APIxInitialize@i,w,c
 13629  001D86  6ED9               	movwf	fsr2l,c
 13630  001D88  3414               	rlcf	APIxInitialize@i+1,w,c
 13631  001D8A  6EDA               	movwf	fsr2h,c
 13632  001D8C  0E00               	movlw	low _API
 13633  001D8E  26D9               	addwf	fsr2l,f,c
 13634  001D90  0E01               	movlw	high _API
 13635  001D92  22DA               	addwfc	fsr2h,f,c
 13636  001D94  0E00               	movlw	0
 13637  001D96  6EDE               	movwf	postinc2,c
 13638  001D98  0E00               	movlw	0
 13639  001D9A  6EDD               	movwf	postdec2,c
 13640                           
 13641                           ;api.c: 40: API_EEPROM[i] = 0xFFFF;
 13642  001D9C  90D8               	bcf	status,0,c
 13643  001D9E  3413               	rlcf	APIxInitialize@i,w,c
 13644  001DA0  6ED9               	movwf	fsr2l,c
 13645  001DA2  3414               	rlcf	APIxInitialize@i+1,w,c
 13646  001DA4  6EDA               	movwf	fsr2h,c
 13647  001DA6  0E00               	movlw	low _API_EEPROM
 13648  001DA8  26D9               	addwf	fsr2l,f,c
 13649  001DAA  0E03               	movlw	high _API_EEPROM
 13650  001DAC  22DA               	addwfc	fsr2h,f,c
 13651  001DAE  0EFF               	movlw	255
 13652  001DB0  6EDE               	movwf	postinc2,c
 13653  001DB2  0EFF               	movlw	255
 13654  001DB4  6EDD               	movwf	postdec2,c
 13655  001DB6  4A13               	infsnz	APIxInitialize@i,f,c
 13656  001DB8  2A14               	incf	APIxInitialize@i+1,f,c
 13657  001DBA  D7D0               	goto	l6132
 13658  001DBC                     u5200:
 13659  001DBC                     l6142:
 13660                           
 13661                           ;api.c: 41: }
 13662                           ;api.c: 44: API_RW[16] = 0;
 13663  001DBC  0E00               	movlw	0
 13664  001DBE  0102               	movlb	2	; () banked
 13665  001DC0  6F21               	movwf	(_API_RW+33)& (0+255),b
 13666  001DC2  0E00               	movlw	0
 13667  001DC4  6F20               	movwf	(_API_RW+32)& (0+255),b
 13668                           
 13669                           ;api.c: 45: API_RW[18] = 1;
 13670  001DC6  0E00               	movlw	0
 13671  001DC8  6F25               	movwf	(_API_RW+37)& (0+255),b
 13672  001DCA  0E01               	movlw	1
 13673  001DCC  6F24               	movwf	(_API_RW+36)& (0+255),b
 13674                           
 13675                           ;api.c: 46: API_RW[19] = 1;
 13676  001DCE  0E00               	movlw	0
 13677  001DD0  6F27               	movwf	(_API_RW+39)& (0+255),b
 13678  001DD2  0E01               	movlw	1
 13679  001DD4  6F26               	movwf	(_API_RW+38)& (0+255),b
 13680                           
 13681                           ;api.c: 47: API_RW[20] = 1;
 13682  001DD6  0E00               	movlw	0
 13683  001DD8  6F29               	movwf	(_API_RW+41)& (0+255),b
 13684  001DDA  0E01               	movlw	1
 13685  001DDC  6F28               	movwf	(_API_RW+40)& (0+255),b
 13686                           
 13687                           ;api.c: 48: API_RW[21] = 1;
 13688  001DDE  0E00               	movlw	0
 13689  001DE0  6F2B               	movwf	(_API_RW+43)& (0+255),b
 13690  001DE2  0E01               	movlw	1
 13691  001DE4  6F2A               	movwf	(_API_RW+42)& (0+255),b
 13692                           
 13693                           ;api.c: 49: API_RW[22] = 1;
 13694  001DE6  0E00               	movlw	0
 13695  001DE8  6F2D               	movwf	(_API_RW+45)& (0+255),b
 13696  001DEA  0E01               	movlw	1
 13697  001DEC  6F2C               	movwf	(_API_RW+44)& (0+255),b
 13698                           
 13699                           ;api.c: 50: API_RW[23] = 1;
 13700  001DEE  0E00               	movlw	0
 13701  001DF0  6F2F               	movwf	(_API_RW+47)& (0+255),b
 13702  001DF2  0E01               	movlw	1
 13703  001DF4  6F2E               	movwf	(_API_RW+46)& (0+255),b
 13704                           
 13705                           ;api.c: 51: API_RW[24] = 1;
 13706  001DF6  0E00               	movlw	0
 13707  001DF8  6F31               	movwf	(_API_RW+49)& (0+255),b
 13708  001DFA  0E01               	movlw	1
 13709  001DFC  6F30               	movwf	(_API_RW+48)& (0+255),b
 13710                           
 13711                           ;api.c: 52: API_RW[25] = 1;
 13712  001DFE  0E00               	movlw	0
 13713  001E00  6F33               	movwf	(_API_RW+51)& (0+255),b
 13714  001E02  0E01               	movlw	1
 13715  001E04  6F32               	movwf	(_API_RW+50)& (0+255),b
 13716                           
 13717                           ;api.c: 53: API_RW[26] = 1;
 13718  001E06  0E00               	movlw	0
 13719  001E08  6F35               	movwf	(_API_RW+53)& (0+255),b
 13720  001E0A  0E01               	movlw	1
 13721  001E0C  6F34               	movwf	(_API_RW+52)& (0+255),b
 13722                           
 13723                           ;api.c: 54: API_RW[27] = 1;
 13724  001E0E  0E00               	movlw	0
 13725  001E10  6F37               	movwf	(_API_RW+55)& (0+255),b
 13726  001E12  0E01               	movlw	1
 13727  001E14  6F36               	movwf	(_API_RW+54)& (0+255),b
 13728                           
 13729                           ;api.c: 55: API_RW[28] = 0;
 13730  001E16  0E00               	movlw	0
 13731  001E18  6F39               	movwf	(_API_RW+57)& (0+255),b
 13732  001E1A  0E00               	movlw	0
 13733  001E1C  6F38               	movwf	(_API_RW+56)& (0+255),b
 13734                           
 13735                           ;api.c: 56: API_RW[29] = 0;
 13736  001E1E  0E00               	movlw	0
 13737  001E20  6F3B               	movwf	(_API_RW+59)& (0+255),b
 13738  001E22  0E00               	movlw	0
 13739  001E24  6F3A               	movwf	(_API_RW+58)& (0+255),b
 13740                           
 13741                           ;api.c: 57: API_RW[30] = 0;
 13742  001E26  0E00               	movlw	0
 13743  001E28  6F3D               	movwf	(_API_RW+61)& (0+255),b
 13744  001E2A  0E00               	movlw	0
 13745  001E2C  6F3C               	movwf	(_API_RW+60)& (0+255),b
 13746                           
 13747                           ;api.c: 58: API_RW[31] = 0;
 13748  001E2E  0E00               	movlw	0
 13749  001E30  6F3F               	movwf	(_API_RW+63)& (0+255),b
 13750  001E32  0E00               	movlw	0
 13751  001E34  6F3E               	movwf	(_API_RW+62)& (0+255),b
 13752                           
 13753                           ;api.c: 59: API_RW[32] = 0;
 13754  001E36  0E00               	movlw	0
 13755  001E38  6F41               	movwf	(_API_RW+65)& (0+255),b
 13756  001E3A  0E00               	movlw	0
 13757  001E3C  6F40               	movwf	(_API_RW+64)& (0+255),b
 13758                           
 13759                           ;api.c: 60: API_RW[33] = 0;
 13760  001E3E  0E00               	movlw	0
 13761  001E40  6F43               	movwf	(_API_RW+67)& (0+255),b
 13762  001E42  0E00               	movlw	0
 13763  001E44  6F42               	movwf	(_API_RW+66)& (0+255),b
 13764                           
 13765                           ;api.c: 61: API_RW[34] = 0;
 13766  001E46  0E00               	movlw	0
 13767  001E48  6F45               	movwf	(_API_RW+69)& (0+255),b
 13768  001E4A  0E00               	movlw	0
 13769  001E4C  6F44               	movwf	(_API_RW+68)& (0+255),b
 13770                           
 13771                           ;api.c: 62: API_RW[35] = 0;
 13772  001E4E  0E00               	movlw	0
 13773  001E50  6F47               	movwf	(_API_RW+71)& (0+255),b
 13774  001E52  0E00               	movlw	0
 13775  001E54  6F46               	movwf	(_API_RW+70)& (0+255),b
 13776                           
 13777                           ;api.c: 63: API_RW[36] = 0;
 13778  001E56  0E00               	movlw	0
 13779  001E58  6F49               	movwf	(_API_RW+73)& (0+255),b
 13780  001E5A  0E00               	movlw	0
 13781  001E5C  6F48               	movwf	(_API_RW+72)& (0+255),b
 13782                           
 13783                           ;api.c: 64: API_RW[37] = 0;
 13784  001E5E  0E00               	movlw	0
 13785  001E60  6F4B               	movwf	(_API_RW+75)& (0+255),b
 13786  001E62  0E00               	movlw	0
 13787  001E64  6F4A               	movwf	(_API_RW+74)& (0+255),b
 13788                           
 13789                           ;api.c: 65: API_RW[38] = 0;
 13790  001E66  0E00               	movlw	0
 13791  001E68  6F4D               	movwf	(_API_RW+77)& (0+255),b
 13792  001E6A  0E00               	movlw	0
 13793  001E6C  6F4C               	movwf	(_API_RW+76)& (0+255),b
 13794                           
 13795                           ;api.c: 66: API_RW[39] = 1;
 13796  001E6E  0E00               	movlw	0
 13797  001E70  6F4F               	movwf	(_API_RW+79)& (0+255),b
 13798  001E72  0E01               	movlw	1
 13799  001E74  6F4E               	movwf	(_API_RW+78)& (0+255),b
 13800                           
 13801                           ;api.c: 67: API_RW[40] = 1;
 13802  001E76  0E00               	movlw	0
 13803  001E78  6F51               	movwf	(_API_RW+81)& (0+255),b
 13804  001E7A  0E01               	movlw	1
 13805  001E7C  6F50               	movwf	(_API_RW+80)& (0+255),b
 13806                           
 13807                           ;api.c: 68: API_RW[41] = 0;
 13808  001E7E  0E00               	movlw	0
 13809  001E80  6F53               	movwf	(_API_RW+83)& (0+255),b
 13810  001E82  0E00               	movlw	0
 13811  001E84  6F52               	movwf	(_API_RW+82)& (0+255),b
 13812                           
 13813                           ;api.c: 69: API_RW[42] = 0;
 13814  001E86  0E00               	movlw	0
 13815  001E88  6F55               	movwf	(_API_RW+85)& (0+255),b
 13816  001E8A  0E00               	movlw	0
 13817  001E8C  6F54               	movwf	(_API_RW+84)& (0+255),b
 13818                           
 13819                           ;api.c: 70: API_RW[43] = 0;
 13820  001E8E  0E00               	movlw	0
 13821  001E90  6F57               	movwf	(_API_RW+87)& (0+255),b
 13822  001E92  0E00               	movlw	0
 13823  001E94  6F56               	movwf	(_API_RW+86)& (0+255),b
 13824                           
 13825                           ;api.c: 71: API_RW[44] = 0;
 13826  001E96  0E00               	movlw	0
 13827  001E98  6F59               	movwf	(_API_RW+89)& (0+255),b
 13828  001E9A  0E00               	movlw	0
 13829  001E9C  6F58               	movwf	(_API_RW+88)& (0+255),b
 13830                           
 13831                           ;api.c: 72: API_RW[45] = 1;
 13832  001E9E  0E00               	movlw	0
 13833  001EA0  6F5B               	movwf	(_API_RW+91)& (0+255),b
 13834  001EA2  0E01               	movlw	1
 13835  001EA4  6F5A               	movwf	(_API_RW+90)& (0+255),b
 13836                           
 13837                           ;api.c: 73: API_RW[46] = 1;
 13838  001EA6  0E00               	movlw	0
 13839  001EA8  6F5D               	movwf	(_API_RW+93)& (0+255),b
 13840  001EAA  0E01               	movlw	1
 13841  001EAC  6F5C               	movwf	(_API_RW+92)& (0+255),b
 13842                           
 13843                           ;api.c: 74: API_RW[47] = 1;
 13844  001EAE  0E00               	movlw	0
 13845  001EB0  6F5F               	movwf	(_API_RW+95)& (0+255),b
 13846  001EB2  0E01               	movlw	1
 13847  001EB4  6F5E               	movwf	(_API_RW+94)& (0+255),b
 13848                           
 13849                           ;api.c: 75: API_RW[48] = 1;
 13850  001EB6  0E00               	movlw	0
 13851  001EB8  6F61               	movwf	(_API_RW+97)& (0+255),b
 13852  001EBA  0E01               	movlw	1
 13853  001EBC  6F60               	movwf	(_API_RW+96)& (0+255),b
 13854                           
 13855                           ;api.c: 76: API_RW[49] = 1;
 13856  001EBE  0E00               	movlw	0
 13857  001EC0  6F63               	movwf	(_API_RW+99)& (0+255),b
 13858  001EC2  0E01               	movlw	1
 13859  001EC4  6F62               	movwf	(_API_RW+98)& (0+255),b
 13860                           
 13861                           ;api.c: 77: API_RW[50] = 1;
 13862  001EC6  0E00               	movlw	0
 13863  001EC8  6F65               	movwf	(_API_RW+101)& (0+255),b
 13864  001ECA  0E01               	movlw	1
 13865  001ECC  6F64               	movwf	(_API_RW+100)& (0+255),b
 13866                           
 13867                           ;api.c: 78: API_RW[51] = 1;
 13868  001ECE  0E00               	movlw	0
 13869  001ED0  6F67               	movwf	(_API_RW+103)& (0+255),b
 13870  001ED2  0E01               	movlw	1
 13871  001ED4  6F66               	movwf	(_API_RW+102)& (0+255),b
 13872                           
 13873                           ;api.c: 79: API_RW[52] = 1;
 13874  001ED6  0E00               	movlw	0
 13875  001ED8  6F69               	movwf	(_API_RW+105)& (0+255),b
 13876  001EDA  0E01               	movlw	1
 13877  001EDC  6F68               	movwf	(_API_RW+104)& (0+255),b
 13878                           
 13879                           ;api.c: 80: API_RW[53] = 1;
 13880  001EDE  0E00               	movlw	0
 13881  001EE0  6F6B               	movwf	(_API_RW+107)& (0+255),b
 13882  001EE2  0E01               	movlw	1
 13883  001EE4  6F6A               	movwf	(_API_RW+106)& (0+255),b
 13884                           
 13885                           ;api.c: 81: API_RW[54] = 1;
 13886  001EE6  0E00               	movlw	0
 13887  001EE8  6F6D               	movwf	(_API_RW+109)& (0+255),b
 13888  001EEA  0E01               	movlw	1
 13889  001EEC  6F6C               	movwf	(_API_RW+108)& (0+255),b
 13890                           
 13891                           ;api.c: 82: API_RW[55] = 1;
 13892  001EEE  0E00               	movlw	0
 13893  001EF0  6F6F               	movwf	(_API_RW+111)& (0+255),b
 13894  001EF2  0E01               	movlw	1
 13895  001EF4  6F6E               	movwf	(_API_RW+110)& (0+255),b
 13896                           
 13897                           ;api.c: 83: API_RW[56] = 1;
 13898  001EF6  0E00               	movlw	0
 13899  001EF8  6F71               	movwf	(_API_RW+113)& (0+255),b
 13900  001EFA  0E01               	movlw	1
 13901  001EFC  6F70               	movwf	(_API_RW+112)& (0+255),b
 13902                           
 13903                           ;api.c: 84: API_RW[57] = 1;
 13904  001EFE  0E00               	movlw	0
 13905  001F00  6F73               	movwf	(_API_RW+115)& (0+255),b
 13906  001F02  0E01               	movlw	1
 13907  001F04  6F72               	movwf	(_API_RW+114)& (0+255),b
 13908                           
 13909                           ;api.c: 85: API_RW[58] = 1;
 13910  001F06  0E00               	movlw	0
 13911  001F08  6F75               	movwf	(_API_RW+117)& (0+255),b
 13912  001F0A  0E01               	movlw	1
 13913  001F0C  6F74               	movwf	(_API_RW+116)& (0+255),b
 13914                           
 13915                           ;api.c: 86: API_RW[59] = 1;
 13916  001F0E  0E00               	movlw	0
 13917  001F10  6F77               	movwf	(_API_RW+119)& (0+255),b
 13918  001F12  0E01               	movlw	1
 13919  001F14  6F76               	movwf	(_API_RW+118)& (0+255),b
 13920                           
 13921                           ;api.c: 87: API_RW[60] = 1;
 13922  001F16  0E00               	movlw	0
 13923  001F18  6F79               	movwf	(_API_RW+121)& (0+255),b
 13924  001F1A  0E01               	movlw	1
 13925  001F1C  6F78               	movwf	(_API_RW+120)& (0+255),b
 13926                           
 13927                           ;api.c: 88: API_RW[61] = 0;
 13928  001F1E  0E00               	movlw	0
 13929  001F20  6F7B               	movwf	(_API_RW+123)& (0+255),b
 13930  001F22  0E00               	movlw	0
 13931  001F24  6F7A               	movwf	(_API_RW+122)& (0+255),b
 13932                           
 13933                           ;api.c: 89: API_RW[62] = 0;
 13934  001F26  0E00               	movlw	0
 13935  001F28  6F7D               	movwf	(_API_RW+125)& (0+255),b
 13936  001F2A  0E00               	movlw	0
 13937  001F2C  6F7C               	movwf	(_API_RW+124)& (0+255),b
 13938                           
 13939                           ;api.c: 90: API_RW[63] = 0;
 13940  001F2E  0E00               	movlw	0
 13941  001F30  6F7F               	movwf	(_API_RW+127)& (0+255),b
 13942  001F32  0E00               	movlw	0
 13943  001F34  6F7E               	movwf	(_API_RW+126)& (0+255),b
 13944                           
 13945                           ;api.c: 91: API_RW[64] = 0;
 13946  001F36  0E00               	movlw	0
 13947  001F38  6F81               	movwf	(_API_RW+129)& (0+255),b
 13948  001F3A  0E00               	movlw	0
 13949  001F3C  6F80               	movwf	(_API_RW+128)& (0+255),b
 13950                           
 13951                           ;api.c: 92: API_RW[65] = 0;
 13952  001F3E  0E00               	movlw	0
 13953  001F40  6F83               	movwf	(_API_RW+131)& (0+255),b
 13954  001F42  0E00               	movlw	0
 13955  001F44  6F82               	movwf	(_API_RW+130)& (0+255),b
 13956                           
 13957                           ;api.c: 93: API_RW[66] = 0;
 13958  001F46  0E00               	movlw	0
 13959  001F48  6F85               	movwf	(_API_RW+133)& (0+255),b
 13960  001F4A  0E00               	movlw	0
 13961  001F4C  6F84               	movwf	(_API_RW+132)& (0+255),b
 13962                           
 13963                           ;api.c: 94: API_RW[67] = 0;
 13964  001F4E  0E00               	movlw	0
 13965  001F50  6F87               	movwf	(_API_RW+135)& (0+255),b
 13966  001F52  0E00               	movlw	0
 13967  001F54  6F86               	movwf	(_API_RW+134)& (0+255),b
 13968                           
 13969                           ;api.c: 95: API_RW[68] = 0;
 13970  001F56  0E00               	movlw	0
 13971  001F58  6F89               	movwf	(_API_RW+137)& (0+255),b
 13972  001F5A  0E00               	movlw	0
 13973  001F5C  6F88               	movwf	(_API_RW+136)& (0+255),b
 13974                           
 13975                           ;api.c: 96: API_RW[69] = 0;
 13976  001F5E  0E00               	movlw	0
 13977  001F60  6F8B               	movwf	(_API_RW+139)& (0+255),b
 13978  001F62  0E00               	movlw	0
 13979  001F64  6F8A               	movwf	(_API_RW+138)& (0+255),b
 13980                           
 13981                           ;api.c: 97: API_RW[70] = 1;
 13982  001F66  0E00               	movlw	0
 13983  001F68  6F8D               	movwf	(_API_RW+141)& (0+255),b
 13984  001F6A  0E01               	movlw	1
 13985  001F6C  6F8C               	movwf	(_API_RW+140)& (0+255),b
 13986                           
 13987                           ;api.c: 98: API_RW[71] = 1;
 13988  001F6E  0E00               	movlw	0
 13989  001F70  6F8F               	movwf	(_API_RW+143)& (0+255),b
 13990  001F72  0E01               	movlw	1
 13991  001F74  6F8E               	movwf	(_API_RW+142)& (0+255),b
 13992                           
 13993                           ;api.c: 99: API_RW[72] = 1;
 13994  001F76  0E00               	movlw	0
 13995  001F78  6F91               	movwf	(_API_RW+145)& (0+255),b
 13996  001F7A  0E01               	movlw	1
 13997  001F7C  6F90               	movwf	(_API_RW+144)& (0+255),b
 13998                           
 13999                           ;api.c: 100: API_RW[73] = 1;
 14000  001F7E  0E00               	movlw	0
 14001  001F80  6F93               	movwf	(_API_RW+147)& (0+255),b
 14002  001F82  0E01               	movlw	1
 14003  001F84  6F92               	movwf	(_API_RW+146)& (0+255),b
 14004                           
 14005                           ;api.c: 101: API_RW[74] = 1;
 14006  001F86  0E00               	movlw	0
 14007  001F88  6F95               	movwf	(_API_RW+149)& (0+255),b
 14008  001F8A  0E01               	movlw	1
 14009  001F8C  6F94               	movwf	(_API_RW+148)& (0+255),b
 14010                           
 14011                           ;api.c: 102: API_RW[75] = 1;
 14012  001F8E  0E00               	movlw	0
 14013  001F90  6F97               	movwf	(_API_RW+151)& (0+255),b
 14014  001F92  0E01               	movlw	1
 14015  001F94  6F96               	movwf	(_API_RW+150)& (0+255),b
 14016                           
 14017                           ;api.c: 103: API_RW[76] = 1;
 14018  001F96  0E00               	movlw	0
 14019  001F98  6F99               	movwf	(_API_RW+153)& (0+255),b
 14020  001F9A  0E01               	movlw	1
 14021  001F9C  6F98               	movwf	(_API_RW+152)& (0+255),b
 14022                           
 14023                           ;api.c: 104: API_RW[77] = 1;
 14024  001F9E  0E00               	movlw	0
 14025  001FA0  6F9B               	movwf	(_API_RW+155)& (0+255),b
 14026  001FA2  0E01               	movlw	1
 14027  001FA4  6F9A               	movwf	(_API_RW+154)& (0+255),b
 14028                           
 14029                           ;api.c: 105: API_RW[78] = 1;
 14030  001FA6  0E00               	movlw	0
 14031  001FA8  6F9D               	movwf	(_API_RW+157)& (0+255),b
 14032  001FAA  0E01               	movlw	1
 14033  001FAC  6F9C               	movwf	(_API_RW+156)& (0+255),b
 14034                           
 14035                           ;api.c: 106: API_RW[79] = 1;
 14036  001FAE  0E00               	movlw	0
 14037  001FB0  6F9F               	movwf	(_API_RW+159)& (0+255),b
 14038  001FB2  0E01               	movlw	1
 14039  001FB4  6F9E               	movwf	(_API_RW+158)& (0+255),b
 14040                           
 14041                           ;api.c: 107: API_RW[80] = 0;
 14042  001FB6  0E00               	movlw	0
 14043  001FB8  6FA1               	movwf	(_API_RW+161)& (0+255),b
 14044  001FBA  0E00               	movlw	0
 14045  001FBC  6FA0               	movwf	(_API_RW+160)& (0+255),b
 14046                           
 14047                           ;api.c: 108: API_RW[81] = 1;
 14048  001FBE  0E00               	movlw	0
 14049  001FC0  6FA3               	movwf	(_API_RW+163)& (0+255),b
 14050  001FC2  0E01               	movlw	1
 14051  001FC4  6FA2               	movwf	(_API_RW+162)& (0+255),b
 14052                           
 14053                           ;api.c: 109: API_RW[82] = 0;
 14054  001FC6  0E00               	movlw	0
 14055  001FC8  6FA5               	movwf	(_API_RW+165)& (0+255),b
 14056  001FCA  0E00               	movlw	0
 14057  001FCC  6FA4               	movwf	(_API_RW+164)& (0+255),b
 14058                           
 14059                           ;api.c: 110: API_RW[83] = 0;
 14060  001FCE  0E00               	movlw	0
 14061  001FD0  6FA7               	movwf	(_API_RW+167)& (0+255),b
 14062  001FD2  0E00               	movlw	0
 14063  001FD4  6FA6               	movwf	(_API_RW+166)& (0+255),b
 14064                           
 14065                           ;api.c: 111: API_RW[84] = 0;
 14066  001FD6  0E00               	movlw	0
 14067  001FD8  6FA9               	movwf	(_API_RW+169)& (0+255),b
 14068  001FDA  0E00               	movlw	0
 14069  001FDC  6FA8               	movwf	(_API_RW+168)& (0+255),b
 14070                           
 14071                           ;api.c: 112: API_RW[85] = 0;
 14072  001FDE  0E00               	movlw	0
 14073  001FE0  6FAB               	movwf	(_API_RW+171)& (0+255),b
 14074  001FE2  0E00               	movlw	0
 14075  001FE4  6FAA               	movwf	(_API_RW+170)& (0+255),b
 14076                           
 14077                           ;api.c: 113: API_RW[86] = 0;
 14078  001FE6  0E00               	movlw	0
 14079  001FE8  6FAD               	movwf	(_API_RW+173)& (0+255),b
 14080  001FEA  0E00               	movlw	0
 14081  001FEC  6FAC               	movwf	(_API_RW+172)& (0+255),b
 14082                           
 14083                           ;api.c: 114: API_RW[87] = 1;
 14084  001FEE  0E00               	movlw	0
 14085  001FF0  6FAF               	movwf	(_API_RW+175)& (0+255),b
 14086  001FF2  0E01               	movlw	1
 14087  001FF4  6FAE               	movwf	(_API_RW+174)& (0+255),b
 14088                           
 14089                           ;api.c: 115: API_RW[88] = 0;
 14090  001FF6  0E00               	movlw	0
 14091  001FF8  6FB1               	movwf	(_API_RW+177)& (0+255),b
 14092  001FFA  0E00               	movlw	0
 14093  001FFC  6FB0               	movwf	(_API_RW+176)& (0+255),b
 14094                           
 14095                           ;api.c: 119: API[16] = 89;
 14096  001FFE  0E00               	movlw	0
 14097  002000  0101               	movlb	1	; () banked
 14098  002002  6F21               	movwf	(_API+33)& (0+255),b
 14099  002004  0E59               	movlw	89
 14100  002006  6F20               	movwf	(_API+32)& (0+255),b
 14101                           
 14102                           ;api.c: 120: API[18] = 10000;
 14103  002008  0E27               	movlw	39
 14104  00200A  6F25               	movwf	(_API+37)& (0+255),b
 14105  00200C  0E10               	movlw	16
 14106  00200E  6F24               	movwf	(_API+36)& (0+255),b
 14107                           
 14108                           ;api.c: 121: API[19] = 800;
 14109  002010  0E03               	movlw	3
 14110  002012  6F27               	movwf	(_API+39)& (0+255),b
 14111  002014  0E20               	movlw	32
 14112  002016  6F26               	movwf	(_API+38)& (0+255),b
 14113                           
 14114                           ;api.c: 122: API[20] = 5000;
 14115  002018  0E13               	movlw	19
 14116  00201A  6F29               	movwf	(_API+41)& (0+255),b
 14117  00201C  0E88               	movlw	136
 14118  00201E  6F28               	movwf	(_API+40)& (0+255),b
 14119                           
 14120                           ;api.c: 123: API[21] = 20;
 14121  002020  0E00               	movlw	0
 14122  002022  6F2B               	movwf	(_API+43)& (0+255),b
 14123  002024  0E14               	movlw	20
 14124  002026  6F2A               	movwf	(_API+42)& (0+255),b
 14125                           
 14126                           ;api.c: 124: API[22] = 20;
 14127  002028  0E00               	movlw	0
 14128  00202A  6F2D               	movwf	(_API+45)& (0+255),b
 14129  00202C  0E14               	movlw	20
 14130  00202E  6F2C               	movwf	(_API+44)& (0+255),b
 14131                           
 14132                           ;api.c: 125: API[23] = 107;
 14133  002030  0E00               	movlw	0
 14134  002032  6F2F               	movwf	(_API+47)& (0+255),b
 14135  002034  0E6B               	movlw	107
 14136  002036  6F2E               	movwf	(_API+46)& (0+255),b
 14137                           
 14138                           ;api.c: 126: API[24] = 107;
 14139  002038  0E00               	movlw	0
 14140  00203A  6F31               	movwf	(_API+49)& (0+255),b
 14141  00203C  0E6B               	movlw	107
 14142  00203E  6F30               	movwf	(_API+48)& (0+255),b
 14143                           
 14144                           ;api.c: 127: API[25] = 80;
 14145  002040  0E00               	movlw	0
 14146  002042  6F33               	movwf	(_API+51)& (0+255),b
 14147  002044  0E50               	movlw	80
 14148  002046  6F32               	movwf	(_API+50)& (0+255),b
 14149                           
 14150                           ;api.c: 128: API[26] = 45;
 14151  002048  0E00               	movlw	0
 14152  00204A  6F35               	movwf	(_API+53)& (0+255),b
 14153  00204C  0E2D               	movlw	45
 14154  00204E  6F34               	movwf	(_API+52)& (0+255),b
 14155                           
 14156                           ;api.c: 129: API[27] = 20;
 14157  002050  0E00               	movlw	0
 14158  002052  6F37               	movwf	(_API+55)& (0+255),b
 14159  002054  0E14               	movlw	20
 14160  002056  6F36               	movwf	(_API+54)& (0+255),b
 14161                           
 14162                           ;api.c: 130: API[28] = 0;
 14163  002058  0E00               	movlw	0
 14164  00205A  6F39               	movwf	(_API+57)& (0+255),b
 14165  00205C  0E00               	movlw	0
 14166  00205E  6F38               	movwf	(_API+56)& (0+255),b
 14167                           
 14168                           ;api.c: 131: API[29] = 0;
 14169  002060  0E00               	movlw	0
 14170  002062  6F3B               	movwf	(_API+59)& (0+255),b
 14171  002064  0E00               	movlw	0
 14172  002066  6F3A               	movwf	(_API+58)& (0+255),b
 14173                           
 14174                           ;api.c: 132: API[30] = 0;
 14175  002068  0E00               	movlw	0
 14176  00206A  6F3D               	movwf	(_API+61)& (0+255),b
 14177  00206C  0E00               	movlw	0
 14178  00206E  6F3C               	movwf	(_API+60)& (0+255),b
 14179                           
 14180                           ;api.c: 133: API[31] = 0;
 14181  002070  0E00               	movlw	0
 14182  002072  6F3F               	movwf	(_API+63)& (0+255),b
 14183  002074  0E00               	movlw	0
 14184  002076  6F3E               	movwf	(_API+62)& (0+255),b
 14185                           
 14186                           ;api.c: 134: API[32] = 0;
 14187  002078  0E00               	movlw	0
 14188  00207A  6F41               	movwf	(_API+65)& (0+255),b
 14189  00207C  0E00               	movlw	0
 14190  00207E  6F40               	movwf	(_API+64)& (0+255),b
 14191                           
 14192                           ;api.c: 135: API[33] = 0;
 14193  002080  0E00               	movlw	0
 14194  002082  6F43               	movwf	(_API+67)& (0+255),b
 14195  002084  0E00               	movlw	0
 14196  002086  6F42               	movwf	(_API+66)& (0+255),b
 14197                           
 14198                           ;api.c: 136: API[34] = 0;
 14199  002088  0E00               	movlw	0
 14200  00208A  6F45               	movwf	(_API+69)& (0+255),b
 14201  00208C  0E00               	movlw	0
 14202  00208E  6F44               	movwf	(_API+68)& (0+255),b
 14203                           
 14204                           ;api.c: 137: API[35] = 0;
 14205  002090  0E00               	movlw	0
 14206  002092  6F47               	movwf	(_API+71)& (0+255),b
 14207  002094  0E00               	movlw	0
 14208  002096  6F46               	movwf	(_API+70)& (0+255),b
 14209                           
 14210                           ;api.c: 138: API[36] = 0;
 14211  002098  0E00               	movlw	0
 14212  00209A  6F49               	movwf	(_API+73)& (0+255),b
 14213  00209C  0E00               	movlw	0
 14214  00209E  6F48               	movwf	(_API+72)& (0+255),b
 14215                           
 14216                           ;api.c: 139: API[37] = 0;
 14217  0020A0  0E00               	movlw	0
 14218  0020A2  6F4B               	movwf	(_API+75)& (0+255),b
 14219  0020A4  0E00               	movlw	0
 14220  0020A6  6F4A               	movwf	(_API+74)& (0+255),b
 14221                           
 14222                           ;api.c: 140: API[38] = 0;
 14223  0020A8  0E00               	movlw	0
 14224  0020AA  6F4D               	movwf	(_API+77)& (0+255),b
 14225  0020AC  0E00               	movlw	0
 14226  0020AE  6F4C               	movwf	(_API+76)& (0+255),b
 14227                           
 14228                           ;api.c: 141: API[39] = 0;
 14229  0020B0  0E00               	movlw	0
 14230  0020B2  6F4F               	movwf	(_API+79)& (0+255),b
 14231  0020B4  0E00               	movlw	0
 14232  0020B6  6F4E               	movwf	(_API+78)& (0+255),b
 14233                           
 14234                           ;api.c: 142: API[40] = 0;
 14235  0020B8  0E00               	movlw	0
 14236  0020BA  6F51               	movwf	(_API+81)& (0+255),b
 14237  0020BC  0E00               	movlw	0
 14238  0020BE  6F50               	movwf	(_API+80)& (0+255),b
 14239                           
 14240                           ;api.c: 143: API[41] = 0;
 14241  0020C0  0E00               	movlw	0
 14242  0020C2  6F53               	movwf	(_API+83)& (0+255),b
 14243  0020C4  0E00               	movlw	0
 14244  0020C6  6F52               	movwf	(_API+82)& (0+255),b
 14245                           
 14246                           ;api.c: 144: API[42] = 0;
 14247  0020C8  0E00               	movlw	0
 14248  0020CA  6F55               	movwf	(_API+85)& (0+255),b
 14249  0020CC  0E00               	movlw	0
 14250  0020CE  6F54               	movwf	(_API+84)& (0+255),b
 14251                           
 14252                           ;api.c: 145: API[43] = 0;
 14253  0020D0  0E00               	movlw	0
 14254  0020D2  6F57               	movwf	(_API+87)& (0+255),b
 14255  0020D4  0E00               	movlw	0
 14256  0020D6  6F56               	movwf	(_API+86)& (0+255),b
 14257                           
 14258                           ;api.c: 146: API[44] = 0;
 14259  0020D8  0E00               	movlw	0
 14260  0020DA  6F59               	movwf	(_API+89)& (0+255),b
 14261  0020DC  0E00               	movlw	0
 14262  0020DE  6F58               	movwf	(_API+88)& (0+255),b
 14263                           
 14264                           ;api.c: 147: API[45] = 0;
 14265  0020E0  0E00               	movlw	0
 14266  0020E2  6F5B               	movwf	(_API+91)& (0+255),b
 14267  0020E4  0E00               	movlw	0
 14268  0020E6  6F5A               	movwf	(_API+90)& (0+255),b
 14269                           
 14270                           ;api.c: 148: API[46] = 80;
 14271  0020E8  0E00               	movlw	0
 14272  0020EA  6F5D               	movwf	(_API+93)& (0+255),b
 14273  0020EC  0E50               	movlw	80
 14274  0020EE  6F5C               	movwf	(_API+92)& (0+255),b
 14275                           
 14276                           ;api.c: 149: API[47] = 120;
 14277  0020F0  0E00               	movlw	0
 14278  0020F2  6F5F               	movwf	(_API+95)& (0+255),b
 14279  0020F4  0E78               	movlw	120
 14280  0020F6  6F5E               	movwf	(_API+94)& (0+255),b
 14281                           
 14282                           ;api.c: 150: API[48] = 0;
 14283  0020F8  0E00               	movlw	0
 14284  0020FA  6F61               	movwf	(_API+97)& (0+255),b
 14285  0020FC  0E00               	movlw	0
 14286  0020FE  6F60               	movwf	(_API+96)& (0+255),b
 14287                           
 14288                           ;api.c: 151: API[49] = 80;
 14289  002100  0E00               	movlw	0
 14290  002102  6F63               	movwf	(_API+99)& (0+255),b
 14291  002104  0E50               	movlw	80
 14292  002106  6F62               	movwf	(_API+98)& (0+255),b
 14293                           
 14294                           ;api.c: 152: API[50] = 0;
 14295  002108  0E00               	movlw	0
 14296  00210A  6F65               	movwf	(_API+101)& (0+255),b
 14297  00210C  0E00               	movlw	0
 14298  00210E  6F64               	movwf	(_API+100)& (0+255),b
 14299                           
 14300                           ;api.c: 153: API[51] = 0;
 14301  002110  0E00               	movlw	0
 14302  002112  6F67               	movwf	(_API+103)& (0+255),b
 14303  002114  0E00               	movlw	0
 14304  002116  6F66               	movwf	(_API+102)& (0+255),b
 14305                           
 14306                           ;api.c: 154: API[52] = 120;
 14307  002118  0E00               	movlw	0
 14308  00211A  6F69               	movwf	(_API+105)& (0+255),b
 14309  00211C  0E78               	movlw	120
 14310  00211E  6F68               	movwf	(_API+104)& (0+255),b
 14311                           
 14312                           ;api.c: 155: API[53] = 100;
 14313  002120  0E00               	movlw	0
 14314  002122  6F6B               	movwf	(_API+107)& (0+255),b
 14315  002124  0E64               	movlw	100
 14316  002126  6F6A               	movwf	(_API+106)& (0+255),b
 14317                           
 14318                           ;api.c: 156: API[54] = 100;
 14319  002128  0E00               	movlw	0
 14320  00212A  6F6D               	movwf	(_API+109)& (0+255),b
 14321  00212C  0E64               	movlw	100
 14322  00212E  6F6C               	movwf	(_API+108)& (0+255),b
 14323                           
 14324                           ;api.c: 157: API[55] = 100;
 14325  002130  0E00               	movlw	0
 14326  002132  6F6F               	movwf	(_API+111)& (0+255),b
 14327  002134  0E64               	movlw	100
 14328  002136  6F6E               	movwf	(_API+110)& (0+255),b
 14329                           
 14330                           ;api.c: 158: API[56] = 100;
 14331  002138  0E00               	movlw	0
 14332  00213A  6F71               	movwf	(_API+113)& (0+255),b
 14333  00213C  0E64               	movlw	100
 14334  00213E  6F70               	movwf	(_API+112)& (0+255),b
 14335                           
 14336                           ;api.c: 159: API[57] = 100;
 14337  002140  0E00               	movlw	0
 14338  002142  6F73               	movwf	(_API+115)& (0+255),b
 14339  002144  0E64               	movlw	100
 14340  002146  6F72               	movwf	(_API+114)& (0+255),b
 14341                           
 14342                           ;api.c: 160: API[58] = 100;
 14343  002148  0E00               	movlw	0
 14344  00214A  6F75               	movwf	(_API+117)& (0+255),b
 14345  00214C  0E64               	movlw	100
 14346  00214E  6F74               	movwf	(_API+116)& (0+255),b
 14347                           
 14348                           ;api.c: 161: API[59] = 100;
 14349  002150  0E00               	movlw	0
 14350  002152  6F77               	movwf	(_API+119)& (0+255),b
 14351  002154  0E64               	movlw	100
 14352  002156  6F76               	movwf	(_API+118)& (0+255),b
 14353                           
 14354                           ;api.c: 162: API[60] = 100;
 14355  002158  0E00               	movlw	0
 14356  00215A  6F79               	movwf	(_API+121)& (0+255),b
 14357  00215C  0E64               	movlw	100
 14358  00215E  6F78               	movwf	(_API+120)& (0+255),b
 14359                           
 14360                           ;api.c: 163: API[61] = 0;
 14361  002160  0E00               	movlw	0
 14362  002162  6F7B               	movwf	(_API+123)& (0+255),b
 14363  002164  0E00               	movlw	0
 14364  002166  6F7A               	movwf	(_API+122)& (0+255),b
 14365                           
 14366                           ;api.c: 164: API[62] = 0;
 14367  002168  0E00               	movlw	0
 14368  00216A  6F7D               	movwf	(_API+125)& (0+255),b
 14369  00216C  0E00               	movlw	0
 14370  00216E  6F7C               	movwf	(_API+124)& (0+255),b
 14371                           
 14372                           ;api.c: 165: API[63] = 1;
 14373  002170  0E00               	movlw	0
 14374  002172  6F7F               	movwf	(_API+127)& (0+255),b
 14375  002174  0E01               	movlw	1
 14376  002176  6F7E               	movwf	(_API+126)& (0+255),b
 14377                           
 14378                           ;api.c: 166: API[64] = 0;
 14379  002178  0E00               	movlw	0
 14380  00217A  6F81               	movwf	(_API+129)& (0+255),b
 14381  00217C  0E00               	movlw	0
 14382  00217E  6F80               	movwf	(_API+128)& (0+255),b
 14383                           
 14384                           ;api.c: 167: API[65] = 0;
 14385  002180  0E00               	movlw	0
 14386  002182  6F83               	movwf	(_API+131)& (0+255),b
 14387  002184  0E00               	movlw	0
 14388  002186  6F82               	movwf	(_API+130)& (0+255),b
 14389                           
 14390                           ;api.c: 168: API[66] = 0;
 14391  002188  0E00               	movlw	0
 14392  00218A  6F85               	movwf	(_API+133)& (0+255),b
 14393  00218C  0E00               	movlw	0
 14394  00218E  6F84               	movwf	(_API+132)& (0+255),b
 14395                           
 14396                           ;api.c: 169: API[67] = 0;
 14397  002190  0E00               	movlw	0
 14398  002192  6F87               	movwf	(_API+135)& (0+255),b
 14399  002194  0E00               	movlw	0
 14400  002196  6F86               	movwf	(_API+134)& (0+255),b
 14401                           
 14402                           ;api.c: 170: API[68] = 0;
 14403  002198  0E00               	movlw	0
 14404  00219A  6F89               	movwf	(_API+137)& (0+255),b
 14405  00219C  0E00               	movlw	0
 14406  00219E  6F88               	movwf	(_API+136)& (0+255),b
 14407                           
 14408                           ;api.c: 171: API[69] = 1;
 14409  0021A0  0E00               	movlw	0
 14410  0021A2  6F8B               	movwf	(_API+139)& (0+255),b
 14411  0021A4  0E01               	movlw	1
 14412  0021A6  6F8A               	movwf	(_API+138)& (0+255),b
 14413                           
 14414                           ;api.c: 172: API[70] = 0;
 14415  0021A8  0E00               	movlw	0
 14416  0021AA  6F8D               	movwf	(_API+141)& (0+255),b
 14417  0021AC  0E00               	movlw	0
 14418  0021AE  6F8C               	movwf	(_API+140)& (0+255),b
 14419                           
 14420                           ;api.c: 173: API[71] = 0;
 14421  0021B0  0E00               	movlw	0
 14422  0021B2  6F8F               	movwf	(_API+143)& (0+255),b
 14423  0021B4  0E00               	movlw	0
 14424  0021B6  6F8E               	movwf	(_API+142)& (0+255),b
 14425                           
 14426                           ;api.c: 174: API[72] = 0;
 14427  0021B8  0E00               	movlw	0
 14428  0021BA  6F91               	movwf	(_API+145)& (0+255),b
 14429  0021BC  0E00               	movlw	0
 14430  0021BE  6F90               	movwf	(_API+144)& (0+255),b
 14431                           
 14432                           ;api.c: 175: API[73] = 0;
 14433  0021C0  0E00               	movlw	0
 14434  0021C2  6F93               	movwf	(_API+147)& (0+255),b
 14435  0021C4  0E00               	movlw	0
 14436  0021C6  6F92               	movwf	(_API+146)& (0+255),b
 14437                           
 14438                           ;api.c: 176: API[74] = 0;
 14439  0021C8  0E00               	movlw	0
 14440  0021CA  6F95               	movwf	(_API+149)& (0+255),b
 14441  0021CC  0E00               	movlw	0
 14442  0021CE  6F94               	movwf	(_API+148)& (0+255),b
 14443                           
 14444                           ;api.c: 177: API[75] = 0;
 14445  0021D0  0E00               	movlw	0
 14446  0021D2  6F97               	movwf	(_API+151)& (0+255),b
 14447  0021D4  0E00               	movlw	0
 14448  0021D6  6F96               	movwf	(_API+150)& (0+255),b
 14449                           
 14450                           ;api.c: 178: API[76] = 0;
 14451  0021D8  0E00               	movlw	0
 14452  0021DA  6F99               	movwf	(_API+153)& (0+255),b
 14453  0021DC  0E00               	movlw	0
 14454  0021DE  6F98               	movwf	(_API+152)& (0+255),b
 14455                           
 14456                           ;api.c: 179: API[77] = 0;
 14457  0021E0  0E00               	movlw	0
 14458  0021E2  6F9B               	movwf	(_API+155)& (0+255),b
 14459  0021E4  0E00               	movlw	0
 14460  0021E6  6F9A               	movwf	(_API+154)& (0+255),b
 14461                           
 14462                           ;api.c: 180: API[78] = 0;
 14463  0021E8  0E00               	movlw	0
 14464  0021EA  6F9D               	movwf	(_API+157)& (0+255),b
 14465  0021EC  0E00               	movlw	0
 14466  0021EE  6F9C               	movwf	(_API+156)& (0+255),b
 14467                           
 14468                           ;api.c: 181: API[79] = 0;
 14469  0021F0  0E00               	movlw	0
 14470  0021F2  6F9F               	movwf	(_API+159)& (0+255),b
 14471  0021F4  0E00               	movlw	0
 14472  0021F6  6F9E               	movwf	(_API+158)& (0+255),b
 14473                           
 14474                           ;api.c: 182: API[80] = 0;
 14475  0021F8  0E00               	movlw	0
 14476  0021FA  6FA1               	movwf	(_API+161)& (0+255),b
 14477  0021FC  0E00               	movlw	0
 14478  0021FE  6FA0               	movwf	(_API+160)& (0+255),b
 14479                           
 14480                           ;api.c: 183: API[81] = 0;
 14481  002200  0E00               	movlw	0
 14482  002202  6FA3               	movwf	(_API+163)& (0+255),b
 14483  002204  0E00               	movlw	0
 14484  002206  6FA2               	movwf	(_API+162)& (0+255),b
 14485                           
 14486                           ;api.c: 184: API[82] = 1;
 14487  002208  0E00               	movlw	0
 14488  00220A  6FA5               	movwf	(_API+165)& (0+255),b
 14489  00220C  0E01               	movlw	1
 14490  00220E  6FA4               	movwf	(_API+164)& (0+255),b
 14491                           
 14492                           ;api.c: 185: API[83] = 0;
 14493  002210  0E00               	movlw	0
 14494  002212  6FA7               	movwf	(_API+167)& (0+255),b
 14495  002214  0E00               	movlw	0
 14496  002216  6FA6               	movwf	(_API+166)& (0+255),b
 14497                           
 14498                           ;api.c: 186: API[84] = 1;
 14499  002218  0E00               	movlw	0
 14500  00221A  6FA9               	movwf	(_API+169)& (0+255),b
 14501  00221C  0E01               	movlw	1
 14502  00221E  6FA8               	movwf	(_API+168)& (0+255),b
 14503                           
 14504                           ;api.c: 187: API[85] = 0;
 14505  002220  0E00               	movlw	0
 14506  002222  6FAB               	movwf	(_API+171)& (0+255),b
 14507  002224  0E00               	movlw	0
 14508  002226  6FAA               	movwf	(_API+170)& (0+255),b
 14509                           
 14510                           ;api.c: 188: API[86] = 0;
 14511  002228  0E00               	movlw	0
 14512  00222A  6FAD               	movwf	(_API+173)& (0+255),b
 14513  00222C  0E00               	movlw	0
 14514  00222E  6FAC               	movwf	(_API+172)& (0+255),b
 14515                           
 14516                           ;api.c: 189: API[87] = 0;
 14517  002230  0E00               	movlw	0
 14518  002232  6FAF               	movwf	(_API+175)& (0+255),b
 14519  002234  0E00               	movlw	0
 14520  002236  6FAE               	movwf	(_API+174)& (0+255),b
 14521                           
 14522                           ;api.c: 190: API[88] = 511;
 14523  002238  0E01               	movlw	1
 14524  00223A  6FB1               	movwf	(_API+177)& (0+255),b
 14525  00223C  69B0               	setf	(_API+176)& (0+255),b
 14526                           
 14527                           ; BSR set to: 1
 14528  00223E  0012               	return		;funcret
 14529  002240                     __end_of_APIxInitialize:
 14530                           	opt stack 0
 14531                           tblptru	equ	0xFF8
 14532                           tblptrh	equ	0xFF7
 14533                           tblptrl	equ	0xFF6
 14534                           tablat	equ	0xFF5
 14535                           prodh	equ	0xFF4
 14536                           prodl	equ	0xFF3
 14537                           intcon	equ	0xFF2
 14538                           intcon2	equ	0xFF1
 14539                           postinc0	equ	0xFEE
 14540                           wreg	equ	0xFE8
 14541                           postinc1	equ	0xFE6
 14542                           postdec1	equ	0xFE5
 14543                           fsr1h	equ	0xFE2
 14544                           fsr1l	equ	0xFE1
 14545                           indf2	equ	0xFDF
 14546                           postinc2	equ	0xFDE
 14547                           postdec2	equ	0xFDD
 14548                           fsr2h	equ	0xFDA
 14549                           fsr2l	equ	0xFD9
 14550                           status	equ	0xFD8
 14551                           
 14552 ;; *************** function _tc_low *****************
 14553 ;; Defined at:
 14554 ;;		line 148 in file "../Main.c"
 14555 ;; Parameters:    Size  Location     Type
 14556 ;;		None
 14557 ;; Auto vars:     Size  Location     Type
 14558 ;;		None
 14559 ;; Return value:  Size  Location     Type
 14560 ;;                  1    wreg      void 
 14561 ;; Registers used:
 14562 ;;		None
 14563 ;; Tracked objects:
 14564 ;;		On entry : 0/0
 14565 ;;		On exit  : 0/0
 14566 ;;		Unchanged: 0/0
 14567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14568 ;;      Params:         0       0       0       0       0       0       0       0       0
 14569 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14570 ;;      Temps:          0      21       0       0       0       0       0       0       0
 14571 ;;      Totals:         0      21       0       0       0       0       0       0       0
 14572 ;;Total ram usage:       21 bytes
 14573 ;; Hardware stack levels used:    1
 14574 ;; Hardware stack levels required when called:    2
 14575 ;; This function calls:
 14576 ;;		Nothing
 14577 ;; This function is called by:
 14578 ;;		Interrupt level 1
 14579 ;; This function uses a non-reentrant model
 14580 ;;
 14581                           
 14582                           	psect	intcodelo
 14583  000018                     __pintcodelo:
 14584                           	opt stack 0
 14585  000018                     _tc_low:
 14586                           	opt stack 22
 14587                           
 14588                           ; BSR set to: 1
 14589                           ;incstack = 0
 14590  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 14591  00001A  CFD8 F0B6          	movff	status,??_tc_low
 14592  00001E  CFE8 F0B7          	movff	wreg,??_tc_low+1
 14593  000022  CFE0 F0B8          	movff	bsr,??_tc_low+2
 14594  000026  CFFA F0B9          	movff	pclath,??_tc_low+3
 14595  00002A  CFFB F0BA          	movff	pclatu,??_tc_low+4
 14596  00002E  CFE9 F0BB          	movff	fsr0l,??_tc_low+5
 14597  000032  CFEA F0BC          	movff	fsr0h,??_tc_low+6
 14598  000036  CFE1 F0BD          	movff	fsr1l,??_tc_low+7
 14599  00003A  CFE2 F0BE          	movff	fsr1h,??_tc_low+8
 14600  00003E  CFD9 F0BF          	movff	fsr2l,??_tc_low+9
 14601  000042  CFDA F0C0          	movff	fsr2h,??_tc_low+10
 14602  000046  CFF3 F0C1          	movff	prodl,??_tc_low+11
 14603  00004A  CFF4 F0C2          	movff	prodh,??_tc_low+12
 14604  00004E  CFF6 F0C3          	movff	tblptrl,??_tc_low+13
 14605  000052  CFF7 F0C4          	movff	tblptrh,??_tc_low+14
 14606  000056  CFF8 F0C5          	movff	tblptru,??_tc_low+15
 14607  00005A  CFF5 F0C6          	movff	tablat,??_tc_low+16
 14608  00005E  C04D  F0C7         	movff	btemp,??_tc_low+17
 14609  000062  C04E  F0C8         	movff	btemp+1,??_tc_low+18
 14610  000066  C04F  F0C9         	movff	btemp+2,??_tc_low+19
 14611  00006A  C050  F0CA         	movff	btemp+3,??_tc_low+20
 14612  00006E  C0CA  F050         	movff	??_tc_low+20,btemp+3
 14613  000072  C0C9  F04F         	movff	??_tc_low+19,btemp+2
 14614  000076  C0C8  F04E         	movff	??_tc_low+18,btemp+1
 14615  00007A  C0C7  F04D         	movff	??_tc_low+17,btemp
 14616  00007E  C0C6  FFF5         	movff	??_tc_low+16,tablat
 14617  000082  C0C5  FFF8         	movff	??_tc_low+15,tblptru
 14618  000086  C0C4  FFF7         	movff	??_tc_low+14,tblptrh
 14619  00008A  C0C3  FFF6         	movff	??_tc_low+13,tblptrl
 14620  00008E  C0C2  FFF4         	movff	??_tc_low+12,prodh
 14621  000092  C0C1  FFF3         	movff	??_tc_low+11,prodl
 14622  000096  C0C0  FFDA         	movff	??_tc_low+10,fsr2h
 14623  00009A  C0BF  FFD9         	movff	??_tc_low+9,fsr2l
 14624  00009E  C0BE  FFE2         	movff	??_tc_low+8,fsr1h
 14625  0000A2  C0BD  FFE1         	movff	??_tc_low+7,fsr1l
 14626  0000A6  C0BC  FFEA         	movff	??_tc_low+6,fsr0h
 14627  0000AA  C0BB  FFE9         	movff	??_tc_low+5,fsr0l
 14628  0000AE  C0BA  FFFB         	movff	??_tc_low+4,pclatu
 14629  0000B2  C0B9  FFFA         	movff	??_tc_low+3,pclath
 14630  0000B6  C0B8  FFE0         	movff	??_tc_low+2,bsr
 14631  0000BA  C0B7  FFE8         	movff	??_tc_low+1,wreg
 14632  0000BE  C0B6  FFD8         	movff	??_tc_low,status
 14633  0000C2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 14634  0000C4  0010               	retfie	
 14635  0000C6                     __end_of_tc_low:
 14636                           	opt stack 0
 14637                           pclatu	equ	0xFFB
 14638                           pclath	equ	0xFFA
 14639                           tblptru	equ	0xFF8
 14640                           tblptrh	equ	0xFF7
 14641                           tblptrl	equ	0xFF6
 14642                           tablat	equ	0xFF5
 14643                           prodh	equ	0xFF4
 14644                           prodl	equ	0xFF3
 14645                           intcon	equ	0xFF2
 14646                           intcon2	equ	0xFF1
 14647                           postinc0	equ	0xFEE
 14648                           fsr0h	equ	0xFEA
 14649                           fsr0l	equ	0xFE9
 14650                           wreg	equ	0xFE8
 14651                           postinc1	equ	0xFE6
 14652                           postdec1	equ	0xFE5
 14653                           fsr1h	equ	0xFE2
 14654                           fsr1l	equ	0xFE1
 14655                           bsr	equ	0xFE0
 14656                           indf2	equ	0xFDF
 14657                           postinc2	equ	0xFDE
 14658                           postdec2	equ	0xFDD
 14659                           fsr2h	equ	0xFDA
 14660                           fsr2l	equ	0xFD9
 14661                           status	equ	0xFD8
 14662                           
 14663 ;; *************** function _tc_high *****************
 14664 ;; Defined at:
 14665 ;;		line 152 in file "../Main.c"
 14666 ;; Parameters:    Size  Location     Type
 14667 ;;		None
 14668 ;; Auto vars:     Size  Location     Type
 14669 ;;		None
 14670 ;; Return value:  Size  Location     Type
 14671 ;;                  1    wreg      void 
 14672 ;; Registers used:
 14673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14674 ;; Tracked objects:
 14675 ;;		On entry : 0/0
 14676 ;;		On exit  : 0/0
 14677 ;;		Unchanged: 0/0
 14678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14679 ;;      Params:         0       0       0       0       0       0       0       0       0
 14680 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14681 ;;      Temps:         18       0       0       0       0       0       0       0       0
 14682 ;;      Totals:        18       0       0       0       0       0       0       0       0
 14683 ;;Total ram usage:       18 bytes
 14684 ;; Hardware stack levels used:    1
 14685 ;; Hardware stack levels required when called:    1
 14686 ;; This function calls:
 14687 ;;		_EUSART1_Receive_ISR
 14688 ;;		_EUSART1_Transmit_ISR
 14689 ;; This function is called by:
 14690 ;;		Interrupt level 2
 14691 ;; This function uses a non-reentrant model
 14692 ;;
 14693                           
 14694                           	psect	intcode
 14695  000008                     __pintcode:
 14696                           	opt stack 0
 14697  000008                     _tc_high:
 14698                           	opt stack 22
 14699                           
 14700                           ;incstack = 0
 14701  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14702  00000A  ED39  F01D         	call	int_func,f	;refresh shadow registers
 14703                           pclatu	equ	0xFFB
 14704                           pclath	equ	0xFFA
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           postinc0	equ	0xFEE
 14714                           fsr0h	equ	0xFEA
 14715                           fsr0l	equ	0xFE9
 14716                           wreg	equ	0xFE8
 14717                           postinc1	equ	0xFE6
 14718                           postdec1	equ	0xFE5
 14719                           fsr1h	equ	0xFE2
 14720                           fsr1l	equ	0xFE1
 14721                           bsr	equ	0xFE0
 14722                           indf2	equ	0xFDF
 14723                           postinc2	equ	0xFDE
 14724                           postdec2	equ	0xFDD
 14725                           fsr2h	equ	0xFDA
 14726                           fsr2l	equ	0xFD9
 14727                           status	equ	0xFD8
 14728                           
 14729                           	psect	intcode_body
 14730  003A72                     __pintcode_body:
 14731                           	opt stack 22
 14732  003A72                     int_func:
 14733                           	opt stack 22
 14734  003A72  0006               	pop		; remove dummy address from shadow register refresh
 14735  003A74  CFFA F001          	movff	pclath,??_tc_high
 14736  003A78  CFFB F002          	movff	pclatu,??_tc_high+1
 14737  003A7C  CFE9 F003          	movff	fsr0l,??_tc_high+2
 14738  003A80  CFEA F004          	movff	fsr0h,??_tc_high+3
 14739  003A84  CFE1 F005          	movff	fsr1l,??_tc_high+4
 14740  003A88  CFE2 F006          	movff	fsr1h,??_tc_high+5
 14741  003A8C  CFD9 F007          	movff	fsr2l,??_tc_high+6
 14742  003A90  CFDA F008          	movff	fsr2h,??_tc_high+7
 14743  003A94  CFF3 F009          	movff	prodl,??_tc_high+8
 14744  003A98  CFF4 F00A          	movff	prodh,??_tc_high+9
 14745  003A9C  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 14746  003AA0  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 14747  003AA4  CFF8 F00D          	movff	tblptru,??_tc_high+12
 14748  003AA8  CFF5 F00E          	movff	tablat,??_tc_high+13
 14749  003AAC  C04D  F00F         	movff	btemp,??_tc_high+14
 14750  003AB0  C04E  F010         	movff	btemp+1,??_tc_high+15
 14751  003AB4  C04F  F011         	movff	btemp+2,??_tc_high+16
 14752  003AB8  C050  F012         	movff	btemp+3,??_tc_high+17
 14753                           
 14754                           ;Main.c: 154: if (INTCONbits.TMR0IF)
 14755  003ABC  A4F2               	btfss	intcon,2,c	;volatile
 14756  003ABE  D019               	goto	i2l101
 14757                           
 14758                           ;Main.c: 155: {
 14759                           ;Main.c: 156: if(Led1_Counter <= 100)
 14760  003AC0  502D               	movf	_Led1_Counter+1,w,c	;volatile
 14761  003AC2  E106               	bnz	i2l102
 14762  003AC4  0E65               	movlw	101
 14763  003AC6  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14764  003AC8  B0D8               	btfsc	status,0,c
 14765  003ACA  D002               	goto	i2l102
 14766                           
 14767                           ;Main.c: 157: {
 14768                           ;Main.c: 158: PORTAbits.RA4 = 1;
 14769  003ACC  8880               	bsf	3968,4,c	;volatile
 14770                           
 14771                           ;Main.c: 159: }
 14772  003ACE  D001               	goto	i2l103
 14773  003AD0                     i2l102:
 14774                           
 14775                           ;Main.c: 160: else
 14776                           ;Main.c: 161: {
 14777                           ;Main.c: 162: PORTAbits.RA4 = 0;
 14778  003AD0  9880               	bcf	3968,4,c	;volatile
 14779  003AD2                     i2l103:
 14780                           
 14781                           ;Main.c: 163: }
 14782                           ;Main.c: 164: if(Led1_Counter >= 700)
 14783  003AD2  0EBC               	movlw	188
 14784  003AD4  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14785  003AD6  0E02               	movlw	2
 14786  003AD8  582D               	subwfb	_Led1_Counter+1,w,c	;volatile
 14787  003ADA  A0D8               	btfss	status,0,c
 14788  003ADC  D004               	goto	i2l104
 14789                           
 14790                           ;Main.c: 165: {
 14791                           ;Main.c: 166: Led1_Counter = 0;
 14792  003ADE  0E00               	movlw	0
 14793  003AE0  6E2D               	movwf	_Led1_Counter+1,c	;volatile
 14794  003AE2  0E00               	movlw	0
 14795  003AE4  6E2C               	movwf	_Led1_Counter,c	;volatile
 14796  003AE6                     i2l104:
 14797                           
 14798                           ;Main.c: 167: }
 14799                           ;Main.c: 168: Led1_Counter++;
 14800  003AE6  4A2C               	infsnz	_Led1_Counter,f,c	;volatile
 14801  003AE8  2A2D               	incf	_Led1_Counter+1,f,c	;volatile
 14802                           
 14803                           ;Main.c: 169: Update_State_Machine = 1;
 14804  003AEA  0E01               	movlw	1
 14805  003AEC  0100               	movlb	0	; () banked
 14806  003AEE  6F8B               	movwf	_Update_State_Machine& (0+255),b	;volatile
 14807                           
 14808                           ; BSR set to: 0
 14809                           ;Main.c: 170: INTCONbits.TMR0IF = 0;
 14810  003AF0  94F2               	bcf	intcon,2,c	;volatile
 14811  003AF2                     i2l101:
 14812                           
 14813                           ;Main.c: 171: }
 14814                           ;Main.c: 173: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 14815                           
 14816                           ; BSR set to: 0
 14817  003AF2  BA9D               	btfsc	3997,5,c	;volatile
 14818  003AF4  AA9E               	btfss	3998,5,c	;volatile
 14819  003AF6  D002               	goto	i2l105
 14820                           
 14821                           ;Main.c: 174: EUSART1_Receive_ISR();
 14822  003AF8  ECEB  F020         	call	_EUSART1_Receive_ISR	;wreg free
 14823  003AFC                     i2l105:
 14824                           
 14825                           ;Main.c: 175: }
 14826                           ;Main.c: 176: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 14827  003AFC  B89D               	btfsc	3997,4,c	;volatile
 14828  003AFE  A89E               	btfss	3998,4,c	;volatile
 14829  003B00  D002               	goto	i2l106
 14830                           
 14831                           ;Main.c: 177: EUSART1_Transmit_ISR();
 14832  003B02  ECD4  F020         	call	_EUSART1_Transmit_ISR	;wreg free
 14833  003B06                     i2l106:
 14834  003B06  C012  F050         	movff	??_tc_high+17,btemp+3
 14835  003B0A  C011  F04F         	movff	??_tc_high+16,btemp+2
 14836  003B0E  C010  F04E         	movff	??_tc_high+15,btemp+1
 14837  003B12  C00F  F04D         	movff	??_tc_high+14,btemp
 14838  003B16  C00E  FFF5         	movff	??_tc_high+13,tablat
 14839  003B1A  C00D  FFF8         	movff	??_tc_high+12,tblptru
 14840  003B1E  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 14841  003B22  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 14842  003B26  C00A  FFF4         	movff	??_tc_high+9,prodh
 14843  003B2A  C009  FFF3         	movff	??_tc_high+8,prodl
 14844  003B2E  C008  FFDA         	movff	??_tc_high+7,fsr2h
 14845  003B32  C007  FFD9         	movff	??_tc_high+6,fsr2l
 14846  003B36  C006  FFE2         	movff	??_tc_high+5,fsr1h
 14847  003B3A  C005  FFE1         	movff	??_tc_high+4,fsr1l
 14848  003B3E  C004  FFEA         	movff	??_tc_high+3,fsr0h
 14849  003B42  C003  FFE9         	movff	??_tc_high+2,fsr0l
 14850  003B46  C002  FFFB         	movff	??_tc_high+1,pclatu
 14851  003B4A  C001  FFFA         	movff	??_tc_high,pclath
 14852  003B4E  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14853  003B50  0011               	retfie		f
 14854  003B52                     __end_of_tc_high:
 14855                           	opt stack 0
 14856                           pclatu	equ	0xFFB
 14857                           pclath	equ	0xFFA
 14858                           tblptru	equ	0xFF8
 14859                           tblptrh	equ	0xFF7
 14860                           tblptrl	equ	0xFF6
 14861                           tablat	equ	0xFF5
 14862                           prodh	equ	0xFF4
 14863                           prodl	equ	0xFF3
 14864                           intcon	equ	0xFF2
 14865                           intcon2	equ	0xFF1
 14866                           postinc0	equ	0xFEE
 14867                           fsr0h	equ	0xFEA
 14868                           fsr0l	equ	0xFE9
 14869                           wreg	equ	0xFE8
 14870                           postinc1	equ	0xFE6
 14871                           postdec1	equ	0xFE5
 14872                           fsr1h	equ	0xFE2
 14873                           fsr1l	equ	0xFE1
 14874                           bsr	equ	0xFE0
 14875                           indf2	equ	0xFDF
 14876                           postinc2	equ	0xFDE
 14877                           postdec2	equ	0xFDD
 14878                           fsr2h	equ	0xFDA
 14879                           fsr2l	equ	0xFD9
 14880                           status	equ	0xFD8
 14881                           
 14882 ;; *************** function _EUSART1_Transmit_ISR *****************
 14883 ;; Defined at:
 14884 ;;		line 183 in file "../eusart1.c"
 14885 ;; Parameters:    Size  Location     Type
 14886 ;;		None
 14887 ;; Auto vars:     Size  Location     Type
 14888 ;;		None
 14889 ;; Return value:  Size  Location     Type
 14890 ;;                  1    wreg      void 
 14891 ;; Registers used:
 14892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14893 ;; Tracked objects:
 14894 ;;		On entry : 0/0
 14895 ;;		On exit  : 0/0
 14896 ;;		Unchanged: 0/0
 14897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14898 ;;      Params:         0       0       0       0       0       0       0       0       0
 14899 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14900 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14901 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14902 ;;Total ram usage:        0 bytes
 14903 ;; Hardware stack levels used:    1
 14904 ;; This function calls:
 14905 ;;		Nothing
 14906 ;; This function is called by:
 14907 ;;		_tc_high
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           	psect	text44
 14912  0041A8                     __ptext44:
 14913                           	opt stack 0
 14914  0041A8                     _EUSART1_Transmit_ISR:
 14915                           	opt stack 22
 14916                           
 14917                           ;eusart1.c: 186: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 14918                           
 14919                           ;incstack = 0
 14920  0041A8  0E7E               	movlw	126
 14921  0041AA  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 14922  0041AC  D012               	goto	i2l538
 14923                           
 14924                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 14925  0041AE  5043               	movf	_eusart1TxTail,w,c
 14926  0041B0  0D01               	mullw	1
 14927  0041B2  0E7E               	movlw	low _eusart1TxBuffer
 14928  0041B4  24F3               	addwf	prodl,w,c
 14929  0041B6  6ED9               	movwf	fsr2l,c
 14930  0041B8  0E04               	movlw	high _eusart1TxBuffer
 14931  0041BA  20F4               	addwfc	prodh,w,c
 14932  0041BC  6EDA               	movwf	fsr2h,c
 14933  0041BE  50DF               	movf	indf2,w,c
 14934  0041C0  6EAD               	movwf	4013,c	;volatile
 14935  0041C2  2A43               	incf	_eusart1TxTail,f,c
 14936                           
 14937                           ;eusart1.c: 188: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 14938  0041C4  0E7D               	movlw	125
 14939  0041C6  6443               	cpfsgt	_eusart1TxTail,c
 14940  0041C8  D002               	goto	i2l539
 14941                           
 14942                           ;eusart1.c: 189: eusart1TxTail = 0;
 14943  0041CA  0E00               	movlw	0
 14944  0041CC  6E43               	movwf	_eusart1TxTail,c
 14945  0041CE                     i2l539:
 14946                           
 14947                           ;eusart1.c: 190: }
 14948                           ;eusart1.c: 191: eusart1TxBufferRemaining++;
 14949  0041CE  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 14950                           
 14951                           ;eusart1.c: 192: } else {
 14952  0041D0  0012               	return	
 14953  0041D2                     i2l538:
 14954                           
 14955                           ;eusart1.c: 193: PIE1bits.TX1IE = 0;
 14956  0041D2  989D               	bcf	3997,4,c	;volatile
 14957  0041D4  0012               	return	
 14958  0041D6                     __end_of_EUSART1_Transmit_ISR:
 14959                           	opt stack 0
 14960                           pclatu	equ	0xFFB
 14961                           pclath	equ	0xFFA
 14962                           tblptru	equ	0xFF8
 14963                           tblptrh	equ	0xFF7
 14964                           tblptrl	equ	0xFF6
 14965                           tablat	equ	0xFF5
 14966                           prodh	equ	0xFF4
 14967                           prodl	equ	0xFF3
 14968                           intcon	equ	0xFF2
 14969                           intcon2	equ	0xFF1
 14970                           postinc0	equ	0xFEE
 14971                           fsr0h	equ	0xFEA
 14972                           fsr0l	equ	0xFE9
 14973                           wreg	equ	0xFE8
 14974                           postinc1	equ	0xFE6
 14975                           postdec1	equ	0xFE5
 14976                           fsr1h	equ	0xFE2
 14977                           fsr1l	equ	0xFE1
 14978                           bsr	equ	0xFE0
 14979                           indf2	equ	0xFDF
 14980                           postinc2	equ	0xFDE
 14981                           postdec2	equ	0xFDD
 14982                           fsr2h	equ	0xFDA
 14983                           fsr2l	equ	0xFD9
 14984                           status	equ	0xFD8
 14985                           
 14986 ;; *************** function _EUSART1_Receive_ISR *****************
 14987 ;; Defined at:
 14988 ;;		line 197 in file "../eusart1.c"
 14989 ;; Parameters:    Size  Location     Type
 14990 ;;		None
 14991 ;; Auto vars:     Size  Location     Type
 14992 ;;		None
 14993 ;; Return value:  Size  Location     Type
 14994 ;;                  1    wreg      void 
 14995 ;; Registers used:
 14996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14997 ;; Tracked objects:
 14998 ;;		On entry : 0/0
 14999 ;;		On exit  : 0/0
 15000 ;;		Unchanged: 0/0
 15001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15002 ;;      Params:         0       0       0       0       0       0       0       0       0
 15003 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15004 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15005 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15006 ;;Total ram usage:        0 bytes
 15007 ;; Hardware stack levels used:    1
 15008 ;; This function calls:
 15009 ;;		Nothing
 15010 ;; This function is called by:
 15011 ;;		_tc_high
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015                           	psect	text45
 15016  0041D6                     __ptext45:
 15017                           	opt stack 0
 15018  0041D6                     _EUSART1_Receive_ISR:
 15019                           	opt stack 22
 15020                           
 15021                           ;eusart1.c: 198: if (1 == RCSTA1bits.OERR) {
 15022                           
 15023                           ;incstack = 0
 15024  0041D6  A2AB               	btfss	4011,1,c	;volatile
 15025  0041D8  D002               	goto	i2l544
 15026                           
 15027                           ;eusart1.c: 201: RCSTA1bits.CREN = 0;
 15028  0041DA  98AB               	bcf	4011,4,c	;volatile
 15029                           
 15030                           ;eusart1.c: 202: RCSTA1bits.CREN = 1;
 15031  0041DC  88AB               	bsf	4011,4,c	;volatile
 15032  0041DE                     i2l544:
 15033                           
 15034                           ;eusart1.c: 203: }
 15035                           ;eusart1.c: 206: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15036  0041DE  5041               	movf	_eusart1RxHead,w,c
 15037  0041E0  0D01               	mullw	1
 15038  0041E2  0E00               	movlw	low _eusart1RxBuffer
 15039  0041E4  24F3               	addwf	prodl,w,c
 15040  0041E6  6ED9               	movwf	fsr2l,c
 15041  0041E8  0E04               	movlw	high _eusart1RxBuffer
 15042  0041EA  20F4               	addwfc	prodh,w,c
 15043  0041EC  6EDA               	movwf	fsr2h,c
 15044  0041EE  CFAE FFDF          	movff	4014,indf2	;volatile
 15045  0041F2  2A41               	incf	_eusart1RxHead,f,c
 15046                           
 15047                           ;eusart1.c: 207: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 15048  0041F4  0E7D               	movlw	125
 15049  0041F6  6441               	cpfsgt	_eusart1RxHead,c
 15050  0041F8  D002               	goto	i2l545
 15051                           
 15052                           ;eusart1.c: 208: eusart1RxHead = 0;
 15053  0041FA  0E00               	movlw	0
 15054  0041FC  6E41               	movwf	_eusart1RxHead,c
 15055  0041FE                     i2l545:
 15056                           
 15057                           ;eusart1.c: 209: }
 15058                           ;eusart1.c: 210: eusart1RxCount++;
 15059  0041FE  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 15060  004200  0012               	return		;funcret
 15061  004202                     __end_of_EUSART1_Receive_ISR:
 15062                           	opt stack 0
 15063                           pclatu	equ	0xFFB
 15064                           pclath	equ	0xFFA
 15065                           tblptru	equ	0xFF8
 15066                           tblptrh	equ	0xFF7
 15067                           tblptrl	equ	0xFF6
 15068                           tablat	equ	0xFF5
 15069                           prodh	equ	0xFF4
 15070                           prodl	equ	0xFF3
 15071                           intcon	equ	0xFF2
 15072                           intcon2	equ	0xFF1
 15073                           postinc0	equ	0xFEE
 15074                           fsr0h	equ	0xFEA
 15075                           fsr0l	equ	0xFE9
 15076                           wreg	equ	0xFE8
 15077                           postinc1	equ	0xFE6
 15078                           postdec1	equ	0xFE5
 15079                           fsr1h	equ	0xFE2
 15080                           fsr1l	equ	0xFE1
 15081                           bsr	equ	0xFE0
 15082                           indf2	equ	0xFDF
 15083                           postinc2	equ	0xFDE
 15084                           postdec2	equ	0xFDD
 15085                           fsr2h	equ	0xFDA
 15086                           fsr2l	equ	0xFD9
 15087                           status	equ	0xFD8
 15088                           pclatu	equ	0xFFB
 15089                           pclath	equ	0xFFA
 15090                           tblptru	equ	0xFF8
 15091                           tblptrh	equ	0xFF7
 15092                           tblptrl	equ	0xFF6
 15093                           tablat	equ	0xFF5
 15094                           prodh	equ	0xFF4
 15095                           prodl	equ	0xFF3
 15096                           intcon	equ	0xFF2
 15097                           intcon2	equ	0xFF1
 15098                           postinc0	equ	0xFEE
 15099                           fsr0h	equ	0xFEA
 15100                           fsr0l	equ	0xFE9
 15101                           wreg	equ	0xFE8
 15102                           postinc1	equ	0xFE6
 15103                           postdec1	equ	0xFE5
 15104                           fsr1h	equ	0xFE2
 15105                           fsr1l	equ	0xFE1
 15106                           bsr	equ	0xFE0
 15107                           indf2	equ	0xFDF
 15108                           postinc2	equ	0xFDE
 15109                           postdec2	equ	0xFDD
 15110                           fsr2h	equ	0xFDA
 15111                           fsr2l	equ	0xFD9
 15112                           status	equ	0xFD8
 15113                           
 15114                           	psect	rparam
 15115  0000                     pclatu	equ	0xFFB
 15116                           pclath	equ	0xFFA
 15117                           tblptru	equ	0xFF8
 15118                           tblptrh	equ	0xFF7
 15119                           tblptrl	equ	0xFF6
 15120                           tablat	equ	0xFF5
 15121                           prodh	equ	0xFF4
 15122                           prodl	equ	0xFF3
 15123                           intcon	equ	0xFF2
 15124                           intcon2	equ	0xFF1
 15125                           postinc0	equ	0xFEE
 15126                           fsr0h	equ	0xFEA
 15127                           fsr0l	equ	0xFE9
 15128                           wreg	equ	0xFE8
 15129                           postinc1	equ	0xFE6
 15130                           postdec1	equ	0xFE5
 15131                           fsr1h	equ	0xFE2
 15132                           fsr1l	equ	0xFE1
 15133                           bsr	equ	0xFE0
 15134                           indf2	equ	0xFDF
 15135                           postinc2	equ	0xFDE
 15136                           postdec2	equ	0xFDD
 15137                           fsr2h	equ	0xFDA
 15138                           fsr2l	equ	0xFD9
 15139                           status	equ	0xFD8
 15140                           
 15141                           	psect	temp
 15142  00004D                     btemp:
 15143                           	opt stack 0
 15144  00004D                     	ds	1
 15145  0000                     int$flags	set	btemp
 15146  0000                     wtemp6	set	btemp+1
 15147                           pclatu	equ	0xFFB
 15148                           pclath	equ	0xFFA
 15149                           tblptru	equ	0xFF8
 15150                           tblptrh	equ	0xFF7
 15151                           tblptrl	equ	0xFF6
 15152                           tablat	equ	0xFF5
 15153                           prodh	equ	0xFF4
 15154                           prodl	equ	0xFF3
 15155                           intcon	equ	0xFF2
 15156                           intcon2	equ	0xFF1
 15157                           postinc0	equ	0xFEE
 15158                           fsr0h	equ	0xFEA
 15159                           fsr0l	equ	0xFE9
 15160                           wreg	equ	0xFE8
 15161                           postinc1	equ	0xFE6
 15162                           postdec1	equ	0xFE5
 15163                           fsr1h	equ	0xFE2
 15164                           fsr1l	equ	0xFE1
 15165                           bsr	equ	0xFE0
 15166                           indf2	equ	0xFDF
 15167                           postinc2	equ	0xFDE
 15168                           postdec2	equ	0xFDD
 15169                           fsr2h	equ	0xFDA
 15170                           fsr2l	equ	0xFD9
 15171                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    67
    Data        11
    BSS         906
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      76
    BANK0           160     38     130
    BANK1           256      0     178
    BANK2           256      0     178
    BANK3           256      0     178
    BANK4           256      0     252
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Pcomm_List2	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    Pcomm_List	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_SETxPWM
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _EEPROMxSTORE->_Eeprom_Store
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_atoi
    _TranslateMessage->_printf
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _EEPROMxREAD->_Eeprom_Read
    _SendMessage->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_READxRECEIVEDxMESSAGE
    _Update_StateMchn->_Train_Path
    _Train_Path->_Train_Move_Left_Brake
    _Train_Path->_Train_Move_Left_Start
    _Train_Path->_Train_Move_Right_Brake
    _Train_Path->_Train_Move_Right_Start
    _READxRECEIVEDxMESSAGE->_printf
    _TranslateMessage->_printf
    _DIAGNOSTICxTOxPC->_SendMessage
    _SendMessage->_printf

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  681795
                     _APIxInitialize
                   _DIAGNOSTICxTOxPC
                        _EEPROMxREAD
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     5     5      0  638582
                                             25 BANK0      5     5      0
                    _Debounce_Inputs
                       _EEPROMxSTORE
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                            _SETxPWM
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  510500
                                             23 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   33550
                                             30 COMRAM     7     4      3
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1   31406
                                             30 COMRAM     2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMxSTORE                                        10    10      0     660
                                             26 COMRAM    10    10      0
                       _Eeprom_Store
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Store                                         8     4      4     372
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0   30377
                                             30 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     144
                                             20 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   23298
                                             34 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   21127
                                             31 COMRAM     4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   6     2      4    1744
                                             20 COMRAM     6     2      4
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (5) _GETxAPIxVAL                                          2     0      2   14431
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0   15802
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          6     2      4   15802
                                             24 COMRAM     6     2      4
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         6     2      4    1216
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROMxREAD                                          3     3      0     307
                                             26 COMRAM     3     3      0
                        _Eeprom_Read
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read                                          8     6      2     236
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _DIAGNOSTICxTOxPC                                     2     2      0    3649
                                             31 COMRAM     2     2      0
                        _SendMessage
 ---------------------------------------------------------------------------------
 (2) _SendMessage                                          4     0      4    3649
                                             34 BANK0      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2147
                                             30 COMRAM     1     1      0
                                             21 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     112
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _DIAGNOSTICxTOxPC
     _SendMessage
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _EEPROMxREAD
     _Eeprom_Read
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _EEPROMxSTORE
       _Eeprom_Store
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _SETxPWM
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _SETxAPIxVAL
         _SENDxMESSAGE
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      FC      13       98.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      B2      11       69.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      B2       9       69.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B2       7       69.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      82       5       81.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3E0      20        0.0%
DATA                 0      0     3E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Nov 28 23:08:37 2017

                  _eusart1TxBufferRemaining 0042                           ?_DIAGNOSTICxTOxPC 0001  
                                        l87 3EC2                                          l88 3ED2  
                                        bsr 000FE0                         ___wmul@multiplicand 0015  
                               __CFG_BORV$3 000000                                 ?_GETxAPIxRW 0013  
                              __CFG_CP0$OFF 000000                          ??_DIAGNOSTICxTOxPC 0020  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l210 0BEA  
                                       l203 12DA                                         l211 0C16  
                                       l220 0DAE                                         l212 0C3E  
                                       l204 0B2A                                         l301 1284  
                                       l221 0DD8                                         l213 0C4E  
                                       l310 1446                                         l302 128E  
                                       l230 0F5C                                         l222 0E04  
                                       l214 0CCC                                         l206 0B3A  
                                       l311 1350                                         l303 12CC  
                                       l231 0F60                                         l223 0E0E  
                                       l215 0CDC                                         l207 0B6C  
                                       l304 15A8                                         l320 13A4  
                                       l240 0FD4                                         l232 0FAA  
                                       l216 0D06                                         l208 0B96  
                                       l241 0FD8                                         l225 0EEA  
                                       l217 0D30                                         l209 0BC0  
                                       l402 2514                                         l306 1414  
                                       l314 136C                                         l250 104A  
                                       l242 0FDC                                         l226 0F1E  
                                       l218 0D5A                                         l403 2366  
                                       l323 13C0                                         l307 1328  
                                       l251 1056                                         l243 0FE8  
                                       l235 0FB8                                         l227 0F26  
                                       l219 0D84                                         l260 10CA  
                                       l228 0F42                                         l180 08A4  
                                       l421 2426                                         l333 1488  
                                       l317 1388                                         l253 11EA  
                                       l261 10CE                                         l245 1064  
                                       l237 0FF6                                         l181 08E2  
                                       l414 23CA                                         l342 1538  
                                       l326 13DC                                         l270 1110  
                                       l246 103E                                         l238 0FD0  
                                       l190 099C                                         l343 14C8  
                                       l255 10DC                                         l247 1094  
                                       l239 1026                                         l600 37A4  
                                       l424 243E                                         l336 1496  
                                       l280 11AC                                         l272 115C  
                                       l264 111E                                         l248 1042  
                                       l184 0920                                         l441 24FC  
                                       l417 23F6                                         l353 157A  
                                       l329 13F8                                         l249 1046  
                                       l193 09DC                                         l610 37D8  
                                       l450 2536                                         l434 249C  
                                       l338 151C                                         l346 14E4  
                                       l290 1254                                         l258 10C2  
                                       l178 089C                                         l611 37C8  
                                       l363 25C2                                         l435 24B4  
                                       l419 240E                                         l371 228E  
                                       l179 1590                                         l339 149E  
                                       l283 118C                                         l259 10C6  
                                       l195 0A1C                                         l187 095E  
                                       l604 3838                                         l452 253C  
                                       l356 1588                                         l284 1190  
                                       l268 110C                                         l517 414A  
                                       l605 37A8                                         l461 2582  
                                       l437 24CC                                         l365 22AE  
                                       l373 229A                                         l349 1500  
                                       l293 1262                                         l285 119A  
                                       l197 0AA6                                         l622 2D3A  
                                       l614 3818                                         l446 2556  
                                       l454 2542                                         l390 234A  
                                       l382 22E2                                         l366 226A  
                                       l286 119E                                         l278 114E  
                                       l519 4172                                         l623 2CD2  
                                       l471 25AA                                         l463 258A  
                                       l447 2530                                         l439 24E4  
                                       l391 232A                                         l367 227A  
                                       l287 11DC                                         l199 0AFA  
                                       l608 37BE                                         l376 2616  
                                       l384 22EE                                         l296 129C  
                                       l288 121A                                         l633 2D7C  
                                       l625 2CEE                                         l609 37EE  
                                       l473 25BA                                         l465 2592  
                                       l457 2572                                         l369 2282  
                                       l297 127C                                         l289 121E  
                                       l394 2330                                         l378 230E  
                                       l386 22FA                                         l643 284E  
                                       l651 26C0                                         l635 2D98  
                                       l627 2D0A                                         l467 259A  
                                       l459 257A                                         l379 22CC  
                                       l299 1280                                         l644 2804  
                                       l900 18A0                                         l396 2336  
                                       l661 27CE                                         l653 26F6  
                                       l645 2632                                         l741 4192  
                                       l629 2D24                                         l901 18C2  
                                       l469 25A2                                         l750 3F88  
                                       l910 1940                                         l822 3E46  
                                       l830 3E1A                                         l398 233C  
                                       l655 272C                                         l647 264C  
                                       l671 289A                                         l831 3E32  
                                       l823 3DE6                                         l672 28D6  
                                       l904 18D8                                         l832 3E42  
                                       l657 2762                                         l649 268A  
                                       l673 2912                                         l913 1956  
                                       l905 18E2                                         l825 3DEA  
                                       l841 3D6A                                         l674 294E  
                                       l922 19D4                                         l914 1960  
                                       l762 3F10                                         l826 3DEE  
                                       l842 3D6E                                         l659 2798  
                                       l747 3F6E                                         l675 298A  
                                       l931 1A52                                         l923 19DE  
                                       l755 32C2                                         l827 3E06  
                                       l843 3D86                                         l668 2A46  
                                       l676 29C6                                         l940 1AD0  
                                       l932 1A5C                                         l908 1976  
                                       l860 16A4                                         l828 3E16  
                                       l844 3D96                                         l677 2A02  
                                       l669 2856                                         l941 1ADA  
                                       l917 19F4                                         l909 191E  
                                       l765 3F34                                         l757 33E6  
                                       l598 3822                                         l950 1B58  
                                       l926 1A72                                         l918 199C  
                                       l854 16BA                                         l838 3DC6  
                                       l846 3D9A                                         l599 374C  
                                       l935 1AF0                                         l927 1A1A  
                                       l919 19BE                                         l863 172A  
                                       l855 1662                                         l847 3DB2  
                                       l839 3D66                                         l944 1B6E  
                                       l936 1A98                                         l928 1A3C  
                                       l872 179A                                         l864 16D2  
                                       l856 166C                                         l848 3DC2  
                                       l953 1BEC                                         l945 1B16  
                                       l937 1ABA                                         l881 180A  
                                       l873 1742                                         l865 16DC  
                                       l962 1C5C                                         l954 1B94  
                                       l946 1B38                                         l890 187A  
                                       l882 17B2                                         l874 174C  
                                       l971 1CCC                                         l963 1C04  
                                       l955 1BB6                                         l891 1822  
                                       l883 17BC                                         l859 1682  
                                       l980 1D3C                                         l972 1C74  
                                       l964 1C26                                         l892 1844  
                                       l868 16F2                                         l981 1CE4  
                                       l973 1C96                                         l949 1B4E  
                                       l877 1762                                         l869 1714  
                                       _API 0100                                         l982 1D06  
                                       l958 1BCC                                         l886 17D2  
                                       l878 1784                                         l967 1C3C  
                                       l959 1BD6                                         l895 185A  
                                       l887 17F4                                         l976 1CAC  
                                       l968 1C46                                         l896 1864  
                                       l985 1D1C                                         l977 1CB6  
                                       l986 1D26                                         l899 18F8  
                              __CFG_CPB$OFF 000000                                _Stop_Program 0085  
                                       _PR2 000FCB                                __CFG_CPD$OFF 000000  
                              __CFG_BOR$OFF 000000                Eeprom_Read@Location_Low_Byte 0015  
                                       prod 000FF3                                         wreg 000FE8  
                    ?_READxRECEIVEDxMESSAGE 0001            Train_Move_Right_Start@Return_Val 00DD  
                              ?_GETxAPIxVAL 0013                                  _Diag_Comm2 006E  
                           APIxInitialize@i 0013                                __CFG_LVP$OFF 000000  
       __end_of_Left_Mountain_From_The_Left 3962                 _Left_Mountain_From_The_Left 3850  
                              __CFG_WDT$OFF 000000                                        l1011 2AD2  
                                      l1004 2C52                                        l1100 39F0  
     __end_of_Right_Mountain_From_The_Right 3628      __size_of_Right_Mountain_From_The_Right 0114  
             _Right_Mountain_From_The_Right 3514                                        l1021 2C66  
                                      l1013 2BBA                                        l1005 2A8E  
                                      l1022 2BC0                                        l1006 2BAC  
                                      l1110 3A5A                                        l1023 2BEA  
                                      l1015 2B9C                                        l1024 2BF8  
                                      l1016 2B20                                        l1008 2B10  
                                      l1120 2DC4                                        l1009 2A94  
                                      l1201 3738                                        l1121 2DF8  
                                      l1018 2B5E                                        l1210 36F6  
                                      l1202 3664                                        l1122 2F04  
                                      l1050 304A                                        l1107 3A2C  
                                      l1203 36B8                                        l1123 2E22  
                                      l1051 3068                                        l1212 3720  
                                      l1052 317C                                        l1109 3A56  
                                      l1213 3724                                        l1125 2E28  
                                      l1053 3076                                        l1126 2E50  
                                      l1054 30C8                                        l1222 3028  
                                      l1230 2F9E                                        l1071 354A  
                                      l1119 2EE8                                        l1127 2E5E  
                                      l1055 30F0                                        l1231 2FF0  
                                      l1223 2F0A                                        l1128 2EB0  
                                      l1056 30FA                                        l1232 301A  
                                      l1224 2F38                                        l1160 3226  
                                      l1073 3624                                        l1129 2EDA  
                                      l1049 3160                                        l1057 3132  
                                      l1225 3044                                        l1161 3234  
                                      l1170 3950                                        l1082 35E4  
                                      l1074 3550                                        l1226 2F62  
                                      l1154 3296                                        l1162 3266  
                                      l1243 3C58                                        l1171 3856  
                                      l1067 3616                                        l1075 35A6  
                                      l1059 315A                                        l1163 328C  
                                      l1155 3182                                        l1260 3406  
                                      l1244 3C96                                        l1092 3A60  
                                      l1084 360C                                        l1068 351A  
                                      l1228 2F68                                        l1156 31A0  
                                      l1093 3968                                        l1085 3610  
                                      l1229 2F90                                        l1157 32B2  
                                      l1174 3886                                        l1158 31AA  
                                      l1159 31FE                                        l1272 349C  
                                      l1176 395E                                        l1096 3996  
                                      l1273 34EE                                        l1185 391E  
                                      l1177 388C                                        l1274 34A2  
                                      l1266 3432                                        l1178 38E0  
                                      l1098 3A6E                                        l1259 33F6  
                                      l1451 3B98                                        l1187 3946  
                                      l1099 399C                                        l1195 372A  
                                      l1268 345A                                        l1188 394A  
                                      l1196 362E                                        l1454 3BE4  
                                      l1455 3BAA                                        l1199 365E  
                                      l1712 3FE2                                        l1448 3B58  
                                      l1713 3FEC                                        l1457 3C16  
                                      l1449 3B54                                        l1722 40BC  
                                      l1723 40C6                                        l1708 3FC2  
                                      l1709 3FBA                                        l1629 4286  
                                      l1718 40A4                                        l1719 409C  
                                      l6132 1D5C                                        l6142 1DBC  
                                      l6172 418A                                        l8024 3A4C  
                                      l8108 3BE0                                        l8062 345E  
                                      l9140 1342                                        l7804 2EE2  
                                      l7636 322E                                        l9236 14BA  
                                      l8480 32BA                                        l7912 3716  
                                      l7752 3022                                        l7498 42E0  
                                      l7668 3070                                        l8736 2D24  
                                      l8728 2CEE                                        l7856 393C  
                                      l8748 2D7C                                        l8852 0C12  
                                      l7968 3602                                        l8948 0EEA  
                                      STR_1 084E                                        STR_2 0855  
                                      STR_3 085C                                        STR_4 0863  
                                      STR_5 086A                                        STR_6 085C  
                                      STR_7 0863                                        STR_8 0844  
            Right_Mountain_From_The_Left@rc 00CB                                        u5200 1DBC  
                                      u7000 3A20                                        u7200 16C2  
                                      u6400 3C46                                        u8000 24B0  
                                      u8010 24C8                                        u6500 40A8  
                                      u7060 348A                                        u8020 24E0  
                                      u7230 1732                                        u7206 16C4  
                                      u8030 24F8                                        u7080 34F8  
                                      u8200 2CFA                                        u7400 197E  
                                      u7320 1882                                        u6530 40F0  
                                      u7410 1980                                        u7330 1884  
                                      u7260 17A2                                        u7236 1734  
                                      u6470 3FC6                                        u6390 4016  
                                      u9110 3790                                        u6710 3878  
                                      u9200 26CE                                        u8240 2D88  
                                      u7600 1BF4                                        u7520 1AF8  
                                      u7440 19FC                                        u7360 1900  
                                      u9210 2704                                        u7530 1AFA  
                                      u7450 19FE                                        u7370 1902  
                                      u7290 1812                                        u7266 17A4  
                                      u3995 4116                                        u9220 273A  
                                      u9230 2770                                        u7630 1C64  
                                      u7606 1BF6                                        u7710 3342  
                                      u9070 1560                                        u9240 27A6  
                                      u7560 1B76                                        u7480 1A7A  
                                      u7296 1814                                        u6760 3912  
                                      u6840 36EA                                        u6920 35D8  
                                      u8360 0A4C                                        u9250 27DC  
                                      u7570 1B78                                        u7490 1A7C  
                                      u8370 0AD6                                        u9180 2662  
                                      u7660 1CD4                                        u7636 1C66  
                                      u9190 2698                                        u6950 3988  
                                      u6790 3650                                        u6870 353C  
                                      u7910 23F2                                        u8710 0F88  
                                      u7920 240A                                        u7760 22AA  
                                      u7690 1D44                                        u7666 1CD6  
                                      u7930 2422                                        u8670 0F1A  
                                      u8590 0E00                                        u7696 1D46  
                                      u8770 1246                                        u8780 1278  
                                      u8960 146E                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                        _Data 00AC  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 2240  
            __size_of_Train_Move_Left_Brake 0146               __end_of_Train_Move_Left_Brake 2F08  
                                      _pLen 0076                                        _atoi 3B52  
                                      _main 3E62                               ?_EUSART1_Read 0001  
            __size_of_Train_Move_Left_Start 0138                       _Update_StateMchn$2176 00D1  
                     _Update_StateMchn$2177 00D3                             __end_of_SETxPWM 3CCC  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        fsr0l 000FE9  
                                      indf2 000FDF                                        fsr1l 000FE1  
                                      fsr2l 000FD9                                        btemp 004D  
             __end_of_Train_Move_Left_Start 3180                                        prodh 000FF4  
                                      prodl 000FF3                                        start 00C6  
                           __end_of_DataLen 0844                         __end_of_Eeprom_Read 3FA4  
                             __CFG_IESO$OFF 000000                             __end_of_ApiList 0839  
               EUSART1_Initialize@baud_rate 0013                          Green_Led@Operation 0013  
                             __CFG_MCLRE$ON 000000                                ___param_bank 000000  
                      Eeprom_Store@Location 0013                               ??_Init_Timers 0013  
                           __end_of_Red_Led 3DE2                               __CFG_PLLDIV$5 000000  
                           EEPROMxREAD@Data 001B                        __end_of_EEPROMxSTORE 33EA  
                            __CFG_CCP2MX$ON 000000                                       ?_atoi 0019  
                                     ?_main 0001                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 0013  
                                     _T0CON 000FD5                  __end_of_SETxAPIxVALxNoxRET 410C  
                                     _T2CON 000FCA                             __end_of___lwdiv 3FF6  
                              SETxPWM@speed 001F                                       i2l101 3AF2  
                                     i2l102 3AD0                                       i2l103 3AD2  
                                     i2l104 3AE6                                       i2l105 3AFC  
                           __end_of___lwmod 40D0                                       i2l106 3B06  
                                     i2l544 41DE                                       i2l545 41FE  
                                     i2l538 41D2                                       i2l539 41CE  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 41A8  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                                     _pData 0078                              __CFG_EBTRB$OFF 000000  
                           __end_of_dpowers 0843                             __end_of_isdigit 428E  
                           __end_of_tc_high 3B52                                       atoi@a 001E  
                                     atoi@s 0019                                       _putch 42DE  
                                     pclath 000FFA                                       tablat 000FF5  
                           ?_APIxInitialize 0001                              ??_EUSART1_Read 0013  
                                     status 000FD8                                       wtemp6 004E  
 Train_Move_Left_Brake@Train_Move_Wait_Time 0064                   __size_of_TranslateMessage 0158  
                       __size_of_GETxAPIxRW 001C                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 3F42                        __size_of_EEPROMxREAD 002E  
                           __initialization 3CCC                                __end_of_atoi 3C20  
                __end_of_EUSART1_Initialize 408E                                __end_of_main 3EDC  
                             ??_SendMessage 0020                            __end_of_Init_Pwm 422A  
                                    ??_atoi 001B                                      ??_main 0026  
                       __end_of_Init_Timers 42DE                               __activetblptr 000002  
                    Eeprom_Read@Return_Data 0019                            __end_of_Junction 2C6A  
                              _Led1_Counter 002C                                  _Pcomm_List 0072  
                         _Green_Led_Counter 002A                       ?_EUSART1_Transmit_ISR 0001  
                         ?_Update_StateMchn 0001                          ??_Update_StateMchn 00CF  
                                    _ADCON1 000FC1                                      _EEDATA 000FA8  
                                    _CCPR1L 000FBE                                   ??_SETxPWM 0022  
                                    _EECON2 000FA7                                      ?_putch 0001  
                                    _API_RW 0200                          __size_of_Green_Led 0080  
                               _Eeprom_Read 3F42                                      _INTCON 000FF2  
                   ?_Train_Move_Right_Brake 0001                                      _RCREG1 000FAE  
                                    _SPBRGH 000FB0                          __size_of_SetDCPWM1 003A  
                   ?_Train_Move_Right_Start 0001                                      _TXREG1 000FAD  
            ?_Right_Mountain_From_The_Right 0001                                   ??_Red_Led 0013  
                            __CFG_XINST$OFF 000000             Train_Move_Left_Brake@Return_Val 00DE  
                                    ___wmul 422A                              __CFG_STVREN$ON 000000  
                                 ??___lwdiv 0017                                   ??___lwmod 001E  
                                    clear_0 3D12                                      clear_1 3D1E  
                                    clear_2 3D2A                                _DelayCounter 006C  
                                    clear_3 3D36                                      clear_4 3D42  
                                    clear_5 3D4E                                      _tc_low 0018  
                                    _printf 33EA                              _Switch_Moutain 002E  
                                _Train_Path 2240     Right_Mountain_From_The_Right@Return_Val 004B  
    Left_Mountain_From_The_Right@Return_Val 004A                                __pdataCOMRAM 0048  
                            _Switch_Program 0089                                   ??_isdigit 0013  
                                 ??_tc_high 0001                         __end_of_SendMessage 4270  
                 _Activate_Controls_Counter 007A                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 0019  
                 _Button_Contact_Counter_LB 0033                   _Button_Contact_Counter_LF 0032  
                 _Button_Contact_Counter_RB 0031                   _Button_Contact_Counter_RF 0030  
            __end_of_Train_Move_Right_Brake 3048                             _eusart1RxBuffer 0400  
                      __size_of_GETxAPIxVAL 001C                             _eusart1TxBuffer 047E  
            __end_of_Train_Move_Right_Start 32B6                        _Train_Move_Pwm_Count 007E  
                                __accesstop 0060                     __end_of__initialization 3D54  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                     __size_of_EEPROMxSTORE 0134                               _Received_Data 0084  
                            __pcstackCOMRAM 0001                                __pidataBANK0 42EA  
                               _Init_Timers 42C6                               __end_of_putch 42EA  
                         __end_of_Green_Led 3E62                                ??_GETxAPIxRW 0015  
                   ??_READxRECEIVEDxMESSAGE 00D8                        __end_of_EUSART1_Read 417A  
                         __end_of_SetDCPWM1 4146                             _Red_Led_Counter 0028  
                    ??_EUSART1_Transmit_ISR 0001  Train_Move_Right_Start@Train_Move_Wait_Time 0062  
                  __size_of_Debounce_Inputs 0786                 __end_of_EUSART1_Receive_ISR 4202  
          Train_Move_Right_Brake@Return_Val 00DC                               ?_SENDxMESSAGE 0013  
                 __size_of_DIAGNOSTICxTOxPC 023A                                     ??_putch 0013  
                             _eusart1RxHead 0041                               _eusart1TxHead 0044  
                     __size_of_Eeprom_Store 0066                 Junction@Junction_Left_Right 0020  
                             _eusart1RxTail 0040                                  __pbssBANK0 0060  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                                __pbssBANK3 0300                                  __pbssBANK4 0400  
                             _eusart1TxTail 0043                                _EEPROMxSTORE 32B6  
                                 ?_Init_Pwm 0001                            _TranslateMessage 2C6A  
                               _Pcomm_List2 0070                          __end_of_GETxAPIxRW 42C6  
                          GETxAPIxVAL@index 0013                            SETxAPIxVAL@index 0019  
                                 ?_Junction 001F                            SETxAPIxVAL@value 001B  
      __size_of_Left_Mountain_From_The_Left 0112                                     ?___wmul 0013  
                          SendMessage@index 00D8                            SendMessage@value 00DA  
                                   _CCP1CON 000FBD                                 _SendMessage 4250  
                                   ?_tc_low 0001                                     ?_printf 00CB  
                               ?_Train_Path 00CD                                _Eeprom_Store 3EDC  
                                   _INTCON2 000FF1   Train_Move_Left_Start@Train_Move_Wait_Time 0066  
                            ??_SENDxMESSAGE 0017                            ??_APIxInitialize 0013  
                                   _SETxPWM 3C20                            SETxPWM@direction 0021  
                                   _DataLen 0843                                     _ApiList 0801  
                        _SETxAPIxVALxNoxRET 40D0                             __CFG_VREGEN$OFF 000000  
                                ??_Init_Pwm 001F                           Eeprom_Store@Value 0015  
                                   _Red_Led 3D62                       _Train_Move_Left_Brake 2DC2  
                                ??_Junction 0020                                     __Hparam 0000  
                       ?_SETxAPIxVALxNoxRET 0015                       _Train_Move_Left_Start 3048  
                                   __Lparam 0000                        _Message_To_Translate 0082  
                           __size_of___wmul 0026                                     ___lwdiv 3FA4  
                                   ___lwmod 408E                                __psmallconst 0800  
                                   __pcinit 3CCC                                     __ramtop 0800  
                           __size_of_tc_low 00AE                                     __ptext0 3E62  
                                   __ptext1 0872                                     __ptext2 2240  
                                   __ptext3 3180                                     __ptext4 2F08  
                                   __ptext5 3048                                     __ptext6 2DC2  
                                   __ptext7 3514                                     __ptext8 3628  
                                   __ptext9 3962                        Train_Path@Return_Val 00E0  
                           __size_of_printf 012A                                     _dpowers 0839  
                                   _isdigit 4270                                     _tc_high 0008  
                      ??_SETxAPIxVALxNoxRET 0019                          _EUSART1_Initialize 4046  
                 _Train_Move_Pwm_Fast_Count 0068                              __pintcode_body 3A72  
                      end_of_initialization 3D54                             _Switch_Junction 002F  
                              ?_Eeprom_Read 0013                           ??_Debounce_Inputs 001F  
                       ?_EUSART1_Initialize 0001                        __size_of_SETxAPIxVAL 0050  
                             __Lmediumconst 0000                                     int_func 3A72  
                          SETxPWM@pwm_speed 0024                               ??_EEPROMxREAD 001B  
                 __size_of_Update_StateMchn 0D5C                         __size_of_Train_Path 03DA  
                                 _RCSTAbits 000FAB                                     printf@c 00D7  
                                   printf@f 00CB                                     postdec1 000FE5  
                                   postdec2 000FDD                                     postinc0 000FEE  
                                   postinc1 000FE6                                     postinc2 000FDE  
                     __size_of_EUSART1_Read 0034                        EEPROMxSTORE@api_list 0023  
            Left_Mountain_From_The_Right@rc 00CB                        ??_EUSART1_Initialize 0013  
                                 _PORTAbits 000F80                                   _PORTBbits 000F81  
                                 _PORTCbits 000F82                                   _PORTDbits 000F83  
                                 _PORTEbits 000F84                                   _TRISAbits 000F92  
                                 _TRISBbits 000F93                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                                   _TRISEbits 000F96  
                       Eeprom_Read@Location 0013                            _DIAGNOSTICxTOxPC 261A  
              Junction@Junction_Switch_Time 006A                                   _Diag_Comm 0074  
                    ?_Train_Move_Left_Brake 0001                                _EUSART1_Read 4146  
                                 _TXSTAbits 000FAC                      ?_Train_Move_Left_Start 0001  
                               _Switch_Main 00E1                                 _Switch_Init 008A  
                             EEPROMxSTORE@i 0024                        __end_of_SENDxMESSAGE 2A8A  
                       __end_of_EEPROMxREAD 41A8                                ?_Init_Timers 0001  
                                 _Comm_List 008C                          Junction@Return_Val 004C  
                            __end_of___wmul 4250                                 _BAUDCONbits 000FB8  
                             __pidataCOMRAM 42F0                 _Train_Move_Right_Brake$2181 00CB  
                      _Update_State_Machine 008B                              __end_of_tc_low 00C6  
                  __end_of_TranslateMessage 2DC2                 _Button_Contact_Counter_Stop 0035  
                            __end_of_printf 3514              __size_of_READxRECEIVEDxMESSAGE 0114  
                                 _Green_Led 3DE2               __end_of_READxRECEIVEDxMESSAGE 3850  
                       start_initialization 3CCC                               ??_GETxAPIxVAL 0015  
                                 _SetDCPWM1 410C                             SetDCPWM1@DCycle 0019  
                    _Mountain_Delay_Counter 0026                ?_Left_Mountain_From_The_Left 0001  
             Eeprom_Store@Location_Low_Byte 0017                           __size_of_Init_Pwm 0028  
             Eeprom_Read@Location_High_Byte 0017                           __size_of_Junction 01E0  
                                  ??___wmul 0017                                 __pdataBANK0 00DC  
                          __CFG_LPT1OSC$OFF 000000                                ?_SendMessage 00D8  
                                  ??_tc_low 00B6                                    ??_printf 001F  
                            _eusart1RxCount 003F                                ??_Train_Path 0026  
                                ?_Green_Led 0001                                 __pbssCOMRAM 0026  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 00B6  
                                ?_SetDCPWM1 0015  Train_Move_Right_Brake@Train_Move_Wait_Time 0060  
                              _isdigit$1833 0014                                    ?_SETxPWM 001F  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 42AA  
             ??_Left_Mountain_From_The_Left 0026                        __size_of_Eeprom_Read 0062  
                               _EEPROMxREAD 417A                                    ?_Red_Led 0001  
                          _Update_StateMchn 0872                            ___lwdiv@dividend 0013  
     Left_Mountain_From_The_Left@Return_Val 0049      Right_Mountain_From_The_Left@Return_Val 0048  
                        __end_of_Train_Path 261A                                   __pintcode 0008  
                                  ?___lwdiv 0013        __end_of_Left_Mountain_From_The_Right 3A72  
     __size_of_Left_Mountain_From_The_Right 0110                _Left_Mountain_From_The_Right 3962  
                                  ?___lwmod 001A                                 __pintcodelo 0018  
                           GETxAPIxRW@index 0013                             _Debounce_Inputs 15CE  
                               __smallconst 0800                    ??_Train_Move_Right_Brake 0026  
                                  ?_isdigit 0001                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 00CB                    ??_Train_Move_Right_Start 0026  
                     TranslateMessage@Index 0022                       Junction@Straight_Bend 001F  
                     TranslateMessage@Value 0020                _Button_Contact_Counter_Start 0036  
                  _Reed_Contact_LMD_Counter 0039                            ___lwdiv@quotient 0018  
                _Train_Move_Left_Brake$2179 00CB                              __size_of_putch 000C  
               _Train_Move_Right_Start$2180 00CB                              ___wmul@product 0017  
                     __size_of_SENDxMESSAGE 0236        __end_of_Right_Mountain_From_The_Left 373C  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 3628  
                                  _PIE1bits 000F9D                              _Adjust_Counter 007C  
             Left_Mountain_From_The_Left@rc 00CB                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1              Eeprom_Store@Location_High_Byte 0019  
                                  _RCONbits 000FD0                              Train_Path@From 00CE  
                  __end_of_DIAGNOSTICxTOxPC 2854                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           ___wmul@multiplier 0013  
                         SENDxMESSAGE@index 0013                           SENDxMESSAGE@value 0015  
                               ??_Green_Led 0013                                  printf@flag 00D3  
                                printf@prec 00D4                                EEPROMxREAD@i 001D  
               __size_of_SETxAPIxVALxNoxRET 003C                                 ??_SetDCPWM1 0017  
                               _GETxAPIxVAL 428E                               ??_SETxAPIxVAL 001D  
                              _SENDxMESSAGE 2854                                   copy_data0 3CE0  
                                 copy_data1 3D00                     ??_Train_Move_Left_Brake 0026  
                  _Reed_Contact_LMU_Counter 003A                            __size_of_SETxPWM 00AC  
                   ??_Train_Move_Left_Start 0026                          SetDCPWM1@dutycycle 0015  
                                  _Init_Pwm 4202                       EUSART1_Read@readValue 0013  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 04EC  
                                  __Hrparam 0000                                    _Junction 2A8A  
                          __size_of_Red_Led 0080               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                                    _TrSwitch 0081  
                                  _RxSwitch 0083                    _Reed_Contact_RMD_Counter 0037  
                   __end_of_Debounce_Inputs 1D54                 __size_of_EUSART1_Initialize 0048  
                          __size_of___lwdiv 0052                            __size_of___lwmod 0042  
                         _Switch_Train_Path 0086                           _Switch_Train_Move 0080  
                          _Switch_Adjust_LB 0046                            _Switch_Adjust_LF 0045  
                          _Switch_Adjust_RB 0088                            _Switch_Adjust_RF 0087  
                      __size_of_SendMessage 0020                           ?_TranslateMessage 0001  
                                _API_EEPROM 0300             __size_of_Train_Move_Right_Brake 0140  
                          __size_of_isdigit 001E                            __size_of_tc_high 3B4A  
                        ??_TranslateMessage 0020                             ___lwdiv@divisor 0015  
           __size_of_Train_Move_Right_Start 0136                             ___lwdiv@counter 0017  
                                  __ptext10 3850                                    __ptext11 3C20  
                                  __ptext20 2C6A                                    __ptext12 2A8A  
                                  __ptext21 3B52                                    __ptext13 3D62  
                                  __ptext30 3FF6                                    __ptext22 4270  
                                  __ptext14 3DE2                                    __ptext31 2854  
                                  __ptext23 422A                                    __ptext15 32B6  
                                  __ptext40 3FA4                                    __ptext32 4046  
                                  __ptext24 40D0                                    __ptext16 3EDC  
                                  __ptext41 1D54                                    __ptext33 417A  
                                  __ptext25 428E                                    __ptext17 15CE  
                                  __ptext34 3F42                                    __ptext26 42AA  
                                  __ptext18 410C                                    __ptext35 261A  
                                  __ptext27 4146                                    __ptext19 373C  
                                  __ptext44 41A8                                    __ptext36 4250  
                                  __ptext28 42C6                                    __ptext45 41D6  
                                  __ptext37 33EA                                    __ptext29 4202  
                                  __ptext38 42DE                                    __ptext39 408E  
                             ?_EEPROMxSTORE 0001                               __size_of_atoi 00CE  
                             __size_of_main 007A                         __end_of_SETxAPIxVAL 4046  
                   _Reed_Contact_LB_Counter 003D                                    int$flags 004D  
                   _Reed_Contact_LF_Counter 003E                                    atoi@sign 001D  
                _Train_Move_Left_Start$2178 00CB                    _Reed_Contact_RMU_Counter 0038  
                                 printf@val 00D5                         _EUSART1_Receive_ISR 41D6  
                                _GETxAPIxRW 42AA                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0013                               ?_Eeprom_Store 0013  
                  __end_of_Update_StateMchn 15CE                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0026              ??_Left_Mountain_From_The_Right 0026  
                     _READxRECEIVEDxMESSAGE 373C                                    isdigit@c 0015  
                   _Reed_Contact_RB_Counter 003B                              ??_EEPROMxSTORE 001B  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                            ___lwmod@dividend 001A  
                              ?_EEPROMxREAD 0001                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 003C                      _Train_Move_Right_Brake 2F08  
              __end_of_EUSART1_Transmit_ISR 41D6                      _Train_Move_Right_Start 3180  
           Train_Move_Left_Start@Return_Val 00DF                                Train_Path@To 00CD  
                                  printf@ap 00D1                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0047              ??_Right_Mountain_From_The_Left 0026  
                            ??_Eeprom_Store 0017                             ___lwmod@divisor 001C  
                           ___lwmod@counter 001E                     SETxAPIxVALxNoxRET@index 0015  
                               _SETxAPIxVAL 3FF6                     SETxAPIxVALxNoxRET@value 0017  
                             ??_Eeprom_Read 0015                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 0001                              _APIxInitialize 1D54  
             _Button_Contact_Counter_Middle 0034  
