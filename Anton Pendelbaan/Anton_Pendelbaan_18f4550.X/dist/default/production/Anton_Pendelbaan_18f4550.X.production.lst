

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Dec 04 22:42:19 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.44
    71                           ; Generated 14/09/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4550 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  004400                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for Right_Mountain_From_The_Left@Return_Val
   110  004400  01                 	db	1
   111                           
   112                           ;initializer for Left_Mountain_From_The_Left@Return_Val
   113  004401  01                 	db	1
   114                           
   115                           ;initializer for Left_Mountain_From_The_Right@Return_Val
   116  004402  01                 	db	1
   117                           
   118                           ;initializer for Right_Mountain_From_The_Right@Return_Val
   119  004403  01                 	db	1
   120                           
   121                           ;initializer for Junction@Return_Val
   122  004404  01                 	db	1
   123                           
   124                           	psect	idataBANK0
   125  0043FA                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for Train_Move_Right_Brake@Return_Val
   129  0043FA  01                 	db	1
   130                           
   131                           ;initializer for Train_Move_Right_Start@Return_Val
   132  0043FB  01                 	db	1
   133                           
   134                           ;initializer for Train_Move_Left_Brake@Return_Val
   135  0043FC  01                 	db	1
   136                           
   137                           ;initializer for Train_Move_Left_Start@Return_Val
   138  0043FD  01                 	db	1
   139                           
   140                           ;initializer for Train_Path@Return_Val
   141  0043FE  01                 	db	1
   142                           
   143                           ;initializer for _Switch_Main
   144  0043FF  01                 	db	1
   145                           
   146                           	psect	smallconst
   147  000800                     __psmallconst:
   148                           	opt stack 0
   149  000800  00                 	db	0
   150  000801                     _ApiList:
   151                           	opt stack 0
   152  000801  0012               	dw	18
   153  000803  0013               	dw	19
   154  000805  0014               	dw	20
   155  000807  0015               	dw	21
   156  000809  0016               	dw	22
   157  00080B  0017               	dw	23
   158  00080D  0018               	dw	24
   159  00080F  0019               	dw	25
   160  000811  001A               	dw	26
   161  000813  001B               	dw	27
   162  000815  0027               	dw	39
   163  000817  0028               	dw	40
   164  000819  002D               	dw	45
   165  00081B  002E               	dw	46
   166  00081D  002F               	dw	47
   167  00081F  0030               	dw	48
   168  000821  0031               	dw	49
   169  000823  0032               	dw	50
   170  000825  0033               	dw	51
   171  000827  0034               	dw	52
   172  000829  0035               	dw	53
   173  00082B  0036               	dw	54
   174  00082D  0037               	dw	55
   175  00082F  0038               	dw	56
   176  000831  0039               	dw	57
   177  000833  003A               	dw	58
   178  000835  003B               	dw	59
   179  000837  003C               	dw	60
   180  000839                     __end_of_ApiList:
   181                           	opt stack 0
   182  000839                     _dpowers:
   183                           	opt stack 0
   184  000839  0001               	dw	1
   185  00083B  000A               	dw	10
   186  00083D  0064               	dw	100
   187  00083F  03E8               	dw	1000
   188  000841  2710               	dw	10000
   189  000843                     __end_of_dpowers:
   190                           	opt stack 0
   191  000843                     _DataLen:
   192                           	opt stack 0
   193  000843  0A                 	db	10
   194  000844                     __end_of_DataLen:
   195                           	opt stack 0
   196  0000                     _PORTEbits	set	3972
   197  0000                     _PORTBbits	set	3969
   198  0000                     _PORTCbits	set	3970
   199  0000                     _PIR2bits	set	4001
   200  0000                     _EECON2	set	4007
   201  0000                     _EEDATA	set	4008
   202  0000                     _EEADR	set	4009
   203  0000                     _EECON1bits	set	4006
   204  0000                     _RCREG1	set	4014
   205  0000                     _RCSTA1bits	set	4011
   206  0000                     _TXREG1	set	4013
   207  0000                     _SPBRG	set	4015
   208  0000                     _SPBRGH	set	4016
   209  0000                     _TXSTAbits	set	4012
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _BAUDCONbits	set	4024
   212  0000                     _T2CON	set	4042
   213  0000                     _CCP1CON	set	4029
   214  0000                     _CCPR1L	set	4030
   215  0000                     _PR2	set	4043
   216  0000                     _T0CON	set	4053
   217  0000                     _TMR0L	set	4054
   218  0000                     _TMR0H	set	4055
   219  0000                     _INTCON2	set	4081
   220  0000                     _INTCON	set	4082
   221  0000                     _RCONbits	set	4048
   222  0000                     _PIR1bits	set	3998
   223  0000                     _PIE1bits	set	3997
   224  0000                     _INTCONbits	set	4082
   225  0000                     _TRISBbits	set	3987
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISCbits	set	3988
   228  0000                     _PORTDbits	set	3971
   229  0000                     _PORTAbits	set	3968
   230  0000                     _TRISDbits	set	3989
   231  0000                     _TRISAbits	set	3986
   232  0000                     _CMCON	set	4020
   233  0000                     _ADCON1	set	4033
   234  0000                     _TRISE	set	3990
   235  0000                     _TRISD	set	3989
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISB	set	3987
   238  0000                     _TRISA	set	3986
   239  0000                     _TXIF	set	31988
   240  000844                     STR_8:
   241  000844  4D                 	db	77	;'M'
   242  000845  23                 	db	35
   243  000846  25                 	db	37
   244  000847  64                 	db	100	;'d'
   245  000848  20                 	db	32
   246  000849  25                 	db	37
   247  00084A  64                 	db	100	;'d'
   248  00084B  0D                 	db	13
   249  00084C  0A                 	db	10
   250  00084D  00                 	db	0
   251  00084E                     STR_1:
   252  00084E  45                 	db	69	;'E'
   253  00084F  23                 	db	35
   254  000850  31                 	db	49	;'1'
   255  000851  30                 	db	48	;'0'
   256  000852  0D                 	db	13
   257  000853  0A                 	db	10
   258  000854  00                 	db	0
   259  000855                     STR_2:
   260  000855  45                 	db	69	;'E'
   261  000856  23                 	db	35
   262  000857  31                 	db	49	;'1'
   263  000858  31                 	db	49	;'1'
   264  000859  0D                 	db	13
   265  00085A  0A                 	db	10
   266  00085B  00                 	db	0
   267  00085C                     STR_3:
   268  00085C  45                 	db	69	;'E'
   269  00085D  23                 	db	35
   270  00085E  31                 	db	49	;'1'
   271  00085F  32                 	db	50	;'2'
   272  000860  0D                 	db	13
   273  000861  0A                 	db	10
   274  000862  00                 	db	0
   275  000863                     STR_4:
   276  000863  45                 	db	69	;'E'
   277  000864  23                 	db	35
   278  000865  31                 	db	49	;'1'
   279  000866  33                 	db	51	;'3'
   280  000867  0D                 	db	13
   281  000868  0A                 	db	10
   282  000869  00                 	db	0
   283  00086A                     STR_5:
   284  00086A  45                 	db	69	;'E'
   285  00086B  23                 	db	35
   286  00086C  31                 	db	49	;'1'
   287  00086D  34                 	db	52	;'4'
   288  00086E  0D                 	db	13
   289  00086F  0A                 	db	10
   290  000870  00                 	db	0
   291  0000                     
   292                           ; #config settings
   293  000871  00                 	db	0	; dummy byte at the end
   294  0000                     
   295                           	psect	cinit
   296  003E88                     __pcinit:
   297                           	opt stack 0
   298  003E88                     start_initialization:
   299                           	opt stack 0
   300  003E88                     __initialization:
   301                           	opt stack 0
   302                           
   303                           ; Initialize objects allocated to BANK0 (6 bytes)
   304                           ; load TBLPTR registers with __pidataBANK0
   305  003E88  0EFA               	movlw	low __pidataBANK0
   306  003E8A  6EF6               	movwf	tblptrl,c
   307  003E8C  0E43               	movlw	high __pidataBANK0
   308  003E8E  6EF7               	movwf	tblptrh,c
   309  003E90  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   310  003E92  6EF8               	movwf	tblptru,c
   311  003E94  EE00  F0E2         	lfsr	0,__pdataBANK0
   312  003E98  EE10 F006          	lfsr	1,6
   313  003E9C                     copy_data0:
   314  003E9C  0009               	tblrd		*+
   315  003E9E  CFF5 FFEE          	movff	tablat,postinc0
   316  003EA2  50E5               	movf	postdec1,w,c
   317  003EA4  50E1               	movf	fsr1l,w,c
   318  003EA6  E1FA               	bnz	copy_data0
   319                           
   320                           ; Initialize objects allocated to COMRAM (5 bytes)
   321                           ; load TBLPTR registers with __pidataCOMRAM
   322  003EA8  0E00               	movlw	low __pidataCOMRAM
   323  003EAA  6EF6               	movwf	tblptrl,c
   324  003EAC  0E44               	movlw	high __pidataCOMRAM
   325  003EAE  6EF7               	movwf	tblptrh,c
   326  003EB0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   327  003EB2  6EF8               	movwf	tblptru,c
   328  003EB4  EE00  F048         	lfsr	0,__pdataCOMRAM
   329  003EB8  EE10 F005          	lfsr	1,5
   330  003EBC                     copy_data1:
   331  003EBC  0009               	tblrd		*+
   332  003EBE  CFF5 FFEE          	movff	tablat,postinc0
   333  003EC2  50E5               	movf	postdec1,w,c
   334  003EC4  50E1               	movf	fsr1l,w,c
   335  003EC6  E1FA               	bnz	copy_data1
   336                           
   337                           ; Clear objects allocated to BANK4 (252 bytes)
   338  003EC8  EE04  F000         	lfsr	0,__pbssBANK4
   339  003ECC  0EFC               	movlw	252
   340  003ECE                     clear_0:
   341  003ECE  6AEE               	clrf	postinc0,c
   342  003ED0  06E8               	decf	wreg,f,c
   343  003ED2  E1FD               	bnz	clear_0
   344                           
   345                           ; Clear objects allocated to BANK3 (178 bytes)
   346  003ED4  EE03  F000         	lfsr	0,__pbssBANK3
   347  003ED8  0EB2               	movlw	178
   348  003EDA                     clear_1:
   349  003EDA  6AEE               	clrf	postinc0,c
   350  003EDC  06E8               	decf	wreg,f,c
   351  003EDE  E1FD               	bnz	clear_1
   352                           
   353                           ; Clear objects allocated to BANK2 (178 bytes)
   354  003EE0  EE02  F000         	lfsr	0,__pbssBANK2
   355  003EE4  0EB2               	movlw	178
   356  003EE6                     clear_2:
   357  003EE6  6AEE               	clrf	postinc0,c
   358  003EE8  06E8               	decf	wreg,f,c
   359  003EEA  E1FD               	bnz	clear_2
   360                           
   361                           ; Clear objects allocated to BANK1 (178 bytes)
   362  003EEC  EE01  F000         	lfsr	0,__pbssBANK1
   363  003EF0  0EB2               	movlw	178
   364  003EF2                     clear_3:
   365  003EF2  6AEE               	clrf	postinc0,c
   366  003EF4  06E8               	decf	wreg,f,c
   367  003EF6  E1FD               	bnz	clear_3
   368                           
   369                           ; Clear objects allocated to BANK0 (90 bytes)
   370  003EF8  EE00  F060         	lfsr	0,__pbssBANK0
   371  003EFC  0E5A               	movlw	90
   372  003EFE                     clear_4:
   373  003EFE  6AEE               	clrf	postinc0,c
   374  003F00  06E8               	decf	wreg,f,c
   375  003F02  E1FD               	bnz	clear_4
   376                           
   377                           ; Clear objects allocated to COMRAM (34 bytes)
   378  003F04  EE00  F026         	lfsr	0,__pbssCOMRAM
   379  003F08  0E22               	movlw	34
   380  003F0A                     clear_5:
   381  003F0A  6AEE               	clrf	postinc0,c
   382  003F0C  06E8               	decf	wreg,f,c
   383  003F0E  E1FD               	bnz	clear_5
   384  003F10                     end_of_initialization:
   385                           	opt stack 0
   386  003F10                     __end_of__initialization:
   387                           	opt stack 0
   388  003F10  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   389  003F12  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   390  003F14  0E00               	movlw	low (__Lmediumconst shr (0+16))
   391  003F16  6EF8               	movwf	tblptru,c
   392  003F18  0100               	movlb	0
   393  003F1A  EFF6  F01E         	goto	_main	;jump to C main() function
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           postdec1	equ	0xFE5
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	bssCOMRAM
   404  000026                     __pbssCOMRAM:
   405                           	opt stack 0
   406  000026                     _Mountain_Delay_Counter:
   407                           	opt stack 0
   408  000026                     	ds	2
   409  000028                     _Red_Led_Counter:
   410                           	opt stack 0
   411  000028                     	ds	2
   412  00002A                     _Green_Led_Counter:
   413                           	opt stack 0
   414  00002A                     	ds	2
   415  00002C                     _Led1_Counter:
   416                           	opt stack 0
   417  00002C                     	ds	2
   418  00002E                     _Switch_Moutain:
   419                           	opt stack 0
   420  00002E                     	ds	1
   421  00002F                     _Switch_Junction:
   422                           	opt stack 0
   423  00002F                     	ds	1
   424  000030                     _Button_Contact_Counter_RF:
   425                           	opt stack 0
   426  000030                     	ds	1
   427  000031                     _Button_Contact_Counter_RB:
   428                           	opt stack 0
   429  000031                     	ds	1
   430  000032                     _Button_Contact_Counter_LF:
   431                           	opt stack 0
   432  000032                     	ds	1
   433  000033                     _Button_Contact_Counter_LB:
   434                           	opt stack 0
   435  000033                     	ds	1
   436  000034                     _Button_Contact_Counter_Middle:
   437                           	opt stack 0
   438  000034                     	ds	1
   439  000035                     _Button_Contact_Counter_Stop:
   440                           	opt stack 0
   441  000035                     	ds	1
   442  000036                     _Button_Contact_Counter_Start:
   443                           	opt stack 0
   444  000036                     	ds	1
   445  000037                     _Reed_Contact_RMD_Counter:
   446                           	opt stack 0
   447  000037                     	ds	1
   448  000038                     _Reed_Contact_RMU_Counter:
   449                           	opt stack 0
   450  000038                     	ds	1
   451  000039                     _Reed_Contact_LMD_Counter:
   452                           	opt stack 0
   453  000039                     	ds	1
   454  00003A                     _Reed_Contact_LMU_Counter:
   455                           	opt stack 0
   456  00003A                     	ds	1
   457  00003B                     _Reed_Contact_RB_Counter:
   458                           	opt stack 0
   459  00003B                     	ds	1
   460  00003C                     _Reed_Contact_RF_Counter:
   461                           	opt stack 0
   462  00003C                     	ds	1
   463  00003D                     _Reed_Contact_LB_Counter:
   464                           	opt stack 0
   465  00003D                     	ds	1
   466  00003E                     _Reed_Contact_LF_Counter:
   467                           	opt stack 0
   468  00003E                     	ds	1
   469  00003F                     _eusart1RxCount:
   470                           	opt stack 0
   471  00003F                     	ds	1
   472  000040                     _eusart1RxTail:
   473                           	opt stack 0
   474  000040                     	ds	1
   475  000041                     _eusart1RxHead:
   476                           	opt stack 0
   477  000041                     	ds	1
   478  000042                     _eusart1TxBufferRemaining:
   479                           	opt stack 0
   480  000042                     	ds	1
   481  000043                     _eusart1TxTail:
   482                           	opt stack 0
   483  000043                     	ds	1
   484  000044                     _eusart1TxHead:
   485                           	opt stack 0
   486  000044                     	ds	1
   487  000045                     _Switch_Adjust_LF:
   488                           	opt stack 0
   489  000045                     	ds	1
   490  000046                     _Switch_Adjust_LB:
   491                           	opt stack 0
   492  000046                     	ds	1
   493  000047                     _Switch_Activate_Controls:
   494                           	opt stack 0
   495  000047                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	dataCOMRAM
   506  000048                     __pdataCOMRAM:
   507                           	opt stack 0
   508  000048                     Right_Mountain_From_The_Left@Return_Val:
   509                           	opt stack 0
   510  000048                     	ds	1
   511  000049                     Left_Mountain_From_The_Left@Return_Val:
   512                           	opt stack 0
   513  000049                     	ds	1
   514  00004A                     Left_Mountain_From_The_Right@Return_Val:
   515                           	opt stack 0
   516  00004A                     	ds	1
   517  00004B                     Right_Mountain_From_The_Right@Return_Val:
   518                           	opt stack 0
   519  00004B                     	ds	1
   520  00004C                     Junction@Return_Val:
   521                           	opt stack 0
   522  00004C                     	ds	1
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	bssBANK0
   533  000060                     __pbssBANK0:
   534                           	opt stack 0
   535  000060                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   536                           	opt stack 0
   537  000060                     	ds	2
   538  000062                     Train_Move_Right_Start@Train_Move_Wait_Time:
   539                           	opt stack 0
   540  000062                     	ds	2
   541  000064                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   542                           	opt stack 0
   543  000064                     	ds	2
   544  000066                     Train_Move_Left_Start@Train_Move_Wait_Time:
   545                           	opt stack 0
   546  000066                     	ds	2
   547  000068                     _Train_Move_Pwm_Fast_Count:
   548                           	opt stack 0
   549  000068                     	ds	2
   550  00006A                     Junction@Junction_Switch_Time:
   551                           	opt stack 0
   552  00006A                     	ds	2
   553  00006C                     _WriteActive:
   554                           	opt stack 0
   555  00006C                     	ds	2
   556  00006E                     _ReadActive:
   557                           	opt stack 0
   558  00006E                     	ds	2
   559  000070                     _DelayCounter:
   560                           	opt stack 0
   561  000070                     	ds	2
   562  000072                     _Diag_Comm2:
   563                           	opt stack 0
   564  000072                     	ds	2
   565  000074                     _Pcomm_List2:
   566                           	opt stack 0
   567  000074                     	ds	2
   568  000076                     _Pcomm_List:
   569                           	opt stack 0
   570  000076                     	ds	2
   571  000078                     _Diag_Comm:
   572                           	opt stack 0
   573  000078                     	ds	2
   574  00007A                     _pLen:
   575                           	opt stack 0
   576  00007A                     	ds	2
   577  00007C                     _pData:
   578                           	opt stack 0
   579  00007C                     	ds	2
   580  00007E                     _Activate_Controls_Counter:
   581                           	opt stack 0
   582  00007E                     	ds	2
   583  000080                     _Adjust_Counter:
   584                           	opt stack 0
   585  000080                     	ds	2
   586  000082                     _Train_Move_Pwm_Count:
   587                           	opt stack 0
   588  000082                     	ds	2
   589  000084                     _Switch_Train_Move:
   590                           	opt stack 0
   591  000084                     	ds	1
   592  000085                     _TrSwitch:
   593                           	opt stack 0
   594  000085                     	ds	1
   595  000086                     _Message_To_Translate:
   596                           	opt stack 0
   597  000086                     	ds	1
   598  000087                     _RxSwitch:
   599                           	opt stack 0
   600  000087                     	ds	1
   601  000088                     _Received_Data:
   602                           	opt stack 0
   603  000088                     	ds	1
   604  000089                     _Stop_Program:
   605                           	opt stack 0
   606  000089                     	ds	1
   607  00008A                     _Switch_Train_Path:
   608                           	opt stack 0
   609  00008A                     	ds	1
   610  00008B                     _Switch_Adjust_RF:
   611                           	opt stack 0
   612  00008B                     	ds	1
   613  00008C                     _Switch_Adjust_RB:
   614                           	opt stack 0
   615  00008C                     	ds	1
   616  00008D                     _Switch_Program:
   617                           	opt stack 0
   618  00008D                     	ds	1
   619  00008E                     _Switch_Init:
   620                           	opt stack 0
   621  00008E                     	ds	1
   622  00008F                     _Update_State_Machine:
   623                           	opt stack 0
   624  00008F                     	ds	1
   625  000090                     _Comm_List:
   626                           	opt stack 0
   627  000090                     	ds	32
   628  0000B0                     _Data:
   629                           	opt stack 0
   630  0000B0                     	ds	10
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           
   640                           	psect	dataBANK0
   641  0000E2                     __pdataBANK0:
   642                           	opt stack 0
   643  0000E2                     Train_Move_Right_Brake@Return_Val:
   644                           	opt stack 0
   645  0000E2                     	ds	1
   646  0000E3                     Train_Move_Right_Start@Return_Val:
   647                           	opt stack 0
   648  0000E3                     	ds	1
   649  0000E4                     Train_Move_Left_Brake@Return_Val:
   650                           	opt stack 0
   651  0000E4                     	ds	1
   652  0000E5                     Train_Move_Left_Start@Return_Val:
   653                           	opt stack 0
   654  0000E5                     	ds	1
   655  0000E6                     Train_Path@Return_Val:
   656                           	opt stack 0
   657  0000E6                     	ds	1
   658  0000E7                     _Switch_Main:
   659                           	opt stack 0
   660  0000E7                     	ds	1
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1l	equ	0xFE1
   669                           
   670                           	psect	bssBANK1
   671  000100                     __pbssBANK1:
   672                           	opt stack 0
   673  000100                     _API:
   674                           	opt stack 0
   675  000100                     	ds	178
   676                           tblptru	equ	0xFF8
   677                           tblptrh	equ	0xFF7
   678                           tblptrl	equ	0xFF6
   679                           tablat	equ	0xFF5
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           postdec1	equ	0xFE5
   683                           fsr1l	equ	0xFE1
   684                           
   685                           	psect	bssBANK2
   686  000200                     __pbssBANK2:
   687                           	opt stack 0
   688  000200                     _API_RW:
   689                           	opt stack 0
   690  000200                     	ds	178
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           postdec1	equ	0xFE5
   698                           fsr1l	equ	0xFE1
   699                           
   700                           	psect	bssBANK3
   701  000300                     __pbssBANK3:
   702                           	opt stack 0
   703  000300                     _API_EEPROM:
   704                           	opt stack 0
   705  000300                     	ds	178
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1l	equ	0xFE1
   714                           
   715                           	psect	bssBANK4
   716  000400                     __pbssBANK4:
   717                           	opt stack 0
   718  000400                     _eusart1RxBuffer:
   719                           	opt stack 0
   720  000400                     	ds	126
   721  00047E                     _eusart1TxBuffer:
   722                           	opt stack 0
   723  00047E                     	ds	126
   724                           tblptru	equ	0xFF8
   725                           tblptrh	equ	0xFF7
   726                           tblptrl	equ	0xFF6
   727                           tablat	equ	0xFF5
   728                           postinc0	equ	0xFEE
   729                           wreg	equ	0xFE8
   730                           postdec1	equ	0xFE5
   731                           fsr1l	equ	0xFE1
   732                           
   733                           	psect	cstackBANK0
   734  0000BA                     __pcstackBANK0:
   735                           	opt stack 0
   736  0000BA                     ??_tc_low:
   737                           
   738                           ; 1 bytes @ 0x0
   739  0000BA                     	ds	21
   740  0000CF                     ?_printf:
   741                           	opt stack 0
   742  0000CF                     EEPROMxSTORE@api_list:
   743                           	opt stack 0
   744  0000CF                     Right_Mountain_From_The_Right@rc:
   745                           	opt stack 0
   746  0000CF                     Left_Mountain_From_The_Right@rc:
   747                           	opt stack 0
   748  0000CF                     Left_Mountain_From_The_Left@rc:
   749                           	opt stack 0
   750  0000CF                     Right_Mountain_From_The_Left@rc:
   751                           	opt stack 0
   752  0000CF                     printf@f:
   753                           	opt stack 0
   754  0000CF                     _Train_Move_Left_Start$2186:
   755                           	opt stack 0
   756  0000CF                     _Train_Move_Left_Brake$2187:
   757                           	opt stack 0
   758  0000CF                     _Train_Move_Right_Start$2188:
   759                           	opt stack 0
   760  0000CF                     _Train_Move_Right_Brake$2189:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x15
   764  0000CF                     	ds	1
   765  0000D0                     EEPROMxSTORE@i:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x16
   769  0000D0                     	ds	1
   770  0000D1                     Train_Path@To:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x17
   774  0000D1                     	ds	1
   775  0000D2                     Train_Path@From:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x18
   779  0000D2                     	ds	1
   780  0000D3                     ??_Update_StateMchn:
   781                           
   782                           ; 1 bytes @ 0x19
   783  0000D3                     	ds	2
   784  0000D5                     printf@ap:
   785                           	opt stack 0
   786  0000D5                     _Update_StateMchn$2184:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x1B
   790  0000D5                     	ds	2
   791  0000D7                     printf@flag:
   792                           	opt stack 0
   793  0000D7                     _Update_StateMchn$2185:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x1D
   797  0000D7                     	ds	1
   798  0000D8                     printf@prec:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x1E
   802  0000D8                     	ds	1
   803  0000D9                     printf@val:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x1F
   807  0000D9                     	ds	2
   808  0000DB                     printf@c:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x21
   812  0000DB                     	ds	1
   813  0000DC                     ??_READxRECEIVEDxMESSAGE:
   814  0000DC                     SendMessage@index:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x22
   818  0000DC                     	ds	2
   819  0000DE                     SendMessage@value:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x24
   823  0000DE                     	ds	2
   824  0000E0                     ??_main:
   825                           
   826                           ; 1 bytes @ 0x26
   827  0000E0                     	ds	2
   828                           tblptru	equ	0xFF8
   829                           tblptrh	equ	0xFF7
   830                           tblptrl	equ	0xFF6
   831                           tablat	equ	0xFF5
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           postdec1	equ	0xFE5
   835                           fsr1l	equ	0xFE1
   836                           
   837                           	psect	cstackCOMRAM
   838  000001                     __pcstackCOMRAM:
   839                           	opt stack 0
   840  000001                     ??_tc_high:
   841  000001                     
   842                           ; 1 bytes @ 0x0
   843  000001                     	ds	18
   844  000013                     ??_isdigit:
   845  000013                     ?_GETxAPIxVAL:
   846                           	opt stack 0
   847  000013                     ?_GETxAPIxRW:
   848                           	opt stack 0
   849  000013                     ?_Eeprom_Read:
   850                           	opt stack 0
   851  000013                     ?___wmul:
   852                           	opt stack 0
   853  000013                     ?___lwdiv:
   854                           	opt stack 0
   855  000013                     EUSART1_Read@readValue:
   856                           	opt stack 0
   857  000013                     putch@data:
   858                           	opt stack 0
   859  000013                     Green_Led@Operation:
   860                           	opt stack 0
   861  000013                     Red_Led@Operation:
   862                           	opt stack 0
   863  000013                     EUSART1_Initialize@baud_rate:
   864                           	opt stack 0
   865  000013                     SENDxMESSAGE@index:
   866                           	opt stack 0
   867  000013                     APIxInitialize@i:
   868                           	opt stack 0
   869  000013                     GETxAPIxRW@index:
   870                           	opt stack 0
   871  000013                     GETxAPIxVAL@index:
   872                           	opt stack 0
   873  000013                     Eeprom_Read@Location:
   874                           	opt stack 0
   875  000013                     Eeprom_Store@Location:
   876                           	opt stack 0
   877  000013                     ___wmul@multiplier:
   878                           	opt stack 0
   879  000013                     ___lwdiv@dividend:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x12
   883  000013                     	ds	1
   884  000014                     _isdigit$1841:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x13
   888  000014                     	ds	1
   889  000015                     isdigit@c:
   890                           	opt stack 0
   891  000015                     SENDxMESSAGE@value:
   892                           	opt stack 0
   893  000015                     SETxAPIxVALxNoxRET@index:
   894                           	opt stack 0
   895  000015                     Eeprom_Read@Location_Low_Byte:
   896                           	opt stack 0
   897  000015                     Eeprom_Store@Value:
   898                           	opt stack 0
   899  000015                     SetDCPWM1@dutycycle:
   900                           	opt stack 0
   901  000015                     ___wmul@multiplicand:
   902                           	opt stack 0
   903  000015                     ___lwdiv@divisor:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x14
   907  000015                     	ds	2
   908  000017                     ??_SENDxMESSAGE:
   909  000017                     ??_SetDCPWM1:
   910  000017                     ___lwdiv@counter:
   911                           	opt stack 0
   912  000017                     SETxAPIxVALxNoxRET@value:
   913                           	opt stack 0
   914  000017                     Eeprom_Read@Location_High_Byte:
   915                           	opt stack 0
   916  000017                     Eeprom_Store@Location_Low_Byte:
   917                           	opt stack 0
   918  000017                     ___wmul@product:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x16
   922  000017                     	ds	1
   923  000018                     ___lwdiv@quotient:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x17
   927  000018                     	ds	1
   928  000019                     ?_atoi:
   929                           	opt stack 0
   930  000019                     SETxAPIxVAL@index:
   931                           	opt stack 0
   932  000019                     Eeprom_Read@Return_Data:
   933                           	opt stack 0
   934  000019                     Eeprom_Store@Location_High_Byte:
   935                           	opt stack 0
   936  000019                     SetDCPWM1@DCycle:
   937                           	opt stack 0
   938  000019                     atoi@s:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x18
   942  000019                     	ds	1
   943  00001A                     ?___lwmod:
   944                           	opt stack 0
   945  00001A                     ___lwmod@dividend:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x19
   949  00001A                     	ds	1
   950  00001B                     ??_atoi:
   951  00001B                     ?_EEPROMxREAD:
   952                           	opt stack 0
   953  00001B                     ?_EEPROMxSTORE:
   954                           	opt stack 0
   955  00001B                     SETxAPIxVAL@value:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x1A
   959  00001B                     	ds	1
   960  00001C                     ___lwmod@divisor:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x1B
   964  00001C                     	ds	1
   965  00001D                     ??_EEPROMxREAD:
   966  00001D                     ??_EEPROMxSTORE:
   967  00001D                     atoi@sign:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x1C
   971  00001D                     	ds	1
   972  00001E                     ___lwmod@counter:
   973                           	opt stack 0
   974  00001E                     atoi@a:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x1D
   978  00001E                     	ds	1
   979  00001F                     ??_Debounce_Inputs:
   980  00001F                     ??_printf:
   981  00001F                     Junction@Straight_Bend:
   982                           	opt stack 0
   983  00001F                     EEPROMxREAD@Data:
   984                           	opt stack 0
   985  00001F                     SETxPWM@speed:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x1E
   989  00001F                     	ds	1
   990  000020                     ??_DIAGNOSTICxTOxPC:
   991  000020                     Junction@Junction_Left_Right:
   992                           	opt stack 0
   993  000020                     TranslateMessage@Value:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x1F
   997  000020                     	ds	1
   998  000021                     EEPROMxREAD@i:
   999                           	opt stack 0
  1000  000021                     SETxPWM@direction:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x20
  1004  000021                     	ds	1
  1005  000022                     ??_SETxPWM:
  1006  000022                     TranslateMessage@Index:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x21
  1010  000022                     	ds	2
  1011  000024                     SETxPWM@pwm_speed:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x23
  1015  000024                     	ds	2
  1016  000026                     tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           
  1025                           ; 1 bytes @ 0x25
  1026 ;;
  1027 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1028 ;;
  1029 ;; *************** function _main *****************
  1030 ;; Defined at:
  1031 ;;		line 107 in file "../Main.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1047 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1048 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1049 ;;Total ram usage:        2 bytes
  1050 ;; Hardware stack levels required when called:    9
  1051 ;; This function calls:
  1052 ;;		_APIxInitialize
  1053 ;;		_DIAGNOSTICxTOxPC
  1054 ;;		_EEPROMxREAD
  1055 ;;		_EUSART1_Initialize
  1056 ;;		_Init_Pwm
  1057 ;;		_Init_Timers
  1058 ;;		_READxRECEIVEDxMESSAGE
  1059 ;;		_Update_StateMchn
  1060 ;; This function is called by:
  1061 ;;		Startup code after reset
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text0
  1066  003DEC                     __ptext0:
  1067                           	opt stack 0
  1068  003DEC                     _main:
  1069                           	opt stack 22
  1070                           
  1071                           ;Main.c: 109: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
  1072                           
  1073                           ;incstack = 0
  1074  003DEC  6892               	setf	3986,c	;volatile
  1075  003DEE  6893               	setf	3987,c	;volatile
  1076  003DF0  6894               	setf	3988,c	;volatile
  1077  003DF2  6895               	setf	3989,c	;volatile
  1078  003DF4  6896               	setf	3990,c	;volatile
  1079                           
  1080                           ;Main.c: 110: ADCON1=0x0F;
  1081  003DF6  0E0F               	movlw	15
  1082  003DF8  6EC1               	movwf	4033,c	;volatile
  1083                           
  1084                           ;Main.c: 111: CMCON=0x07;
  1085  003DFA  0E07               	movlw	7
  1086  003DFC  6EB4               	movwf	4020,c	;volatile
  1087                           
  1088                           ;Main.c: 112: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
  1089  003DFE  9892               	bcf	3986,4,c	;volatile
  1090  003E00  9A95               	bcf	3989,5,c	;volatile
  1091  003E02  9C95               	bcf	3989,6,c	;volatile
  1092                           
  1093                           ;Main.c: 113: PORTAbits.RA4 = 0;
  1094  003E04  9880               	bcf	3968,4,c	;volatile
  1095                           
  1096                           ;Main.c: 114: PORTDbits.RD6 = 0;
  1097  003E06  9C83               	bcf	3971,6,c	;volatile
  1098                           
  1099                           ;Main.c: 115: PORTDbits.RD5 = 0;
  1100  003E08  9A83               	bcf	3971,5,c	;volatile
  1101                           
  1102                           ;Main.c: 117: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
  1103  003E0A  9092               	bcf	3986,0,c	;volatile
  1104  003E0C  9292               	bcf	3986,1,c	;volatile
  1105  003E0E  9492               	bcf	3986,2,c	;volatile
  1106  003E10  9692               	bcf	3986,3,c	;volatile
  1107                           
  1108                           ;Main.c: 118: PORTAbits.RA3 = 0;
  1109  003E12  9680               	bcf	3968,3,c	;volatile
  1110                           
  1111                           ;Main.c: 119: PORTAbits.RA2 = 0;
  1112  003E14  9480               	bcf	3968,2,c	;volatile
  1113                           
  1114                           ;Main.c: 120: PORTAbits.RA1 = 0;
  1115  003E16  9280               	bcf	3968,1,c	;volatile
  1116                           
  1117                           ;Main.c: 121: PORTAbits.RA0 = 0;
  1118  003E18  9080               	bcf	3968,0,c	;volatile
  1119                           
  1120                           ;Main.c: 123: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
  1121  003E1A  8495               	bsf	3989,2,c	;volatile
  1122  003E1C  8695               	bsf	3989,3,c	;volatile
  1123  003E1E  8095               	bsf	3989,0,c	;volatile
  1124  003E20  8295               	bsf	3989,1,c	;volatile
  1125  003E22  8294               	bsf	3988,1,c	;volatile
  1126  003E24  8895               	bsf	3989,4,c	;volatile
  1127  003E26  8096               	bsf	3990,0,c	;volatile
  1128  003E28  8296               	bsf	3990,1,c	;volatile
  1129                           
  1130                           ;Main.c: 124: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
  1131  003E2A  8093               	bsf	3987,0,c	;volatile
  1132  003E2C  8293               	bsf	3987,1,c	;volatile
  1133  003E2E  8493               	bsf	3987,2,c	;volatile
  1134  003E30  8693               	bsf	3987,3,c	;volatile
  1135  003E32  8893               	bsf	3987,4,c	;volatile
  1136  003E34  8A93               	bsf	3987,5,c	;volatile
  1137  003E36  8E95               	bsf	3989,7,c	;volatile
  1138                           
  1139                           ;Main.c: 125: APIxInitialize();
  1140  003E38  ECAD  F00E         	call	_APIxInitialize	;wreg free
  1141                           
  1142                           ;Main.c: 126: _delay((unsigned long)((1000)*(24000000/4000.0)));
  1143  003E3C  0E1F               	movlw	31
  1144  003E3E  0100               	movlb	0	; () banked
  1145  003E40  6FE1               	movwf	(??_main+1)& (0+255),b
  1146  003E42  0E71               	movlw	113
  1147  003E44  6FE0               	movwf	??_main& (0+255),b
  1148  003E46  0E1E               	movlw	30
  1149  003E48                     u9447:
  1150  003E48  2EE8               	decfsz	wreg,f,c
  1151  003E4A  D7FE               	bra	u9447
  1152  003E4C  2FE0               	decfsz	??_main& (0+255),f,b
  1153  003E4E  D7FC               	bra	u9447
  1154  003E50  2FE1               	decfsz	(??_main+1)& (0+255),f,b
  1155  003E52  D7FA               	bra	u9447
  1156  003E54  F000               	nop	
  1157  003E56                     
  1158                           ;Main.c: 128: continue;
  1159  003E56  ECD0  F01D         	call	_EEPROMxREAD	;wreg free
  1160  003E5A  501B               	movf	?_EEPROMxREAD,w,c
  1161  003E5C  101C               	iorwf	?_EEPROMxREAD+1,w,c
  1162  003E5E  B4D8               	btfsc	status,2,c
  1163  003E60  D7FA               	goto	l90
  1164                           
  1165                           ;Main.c: 129: };
  1166                           ;Main.c: 130: Init_Pwm();
  1167  003E62  EC89  F021         	call	_Init_Pwm	;wreg free
  1168                           
  1169                           ;Main.c: 131: Init_Timers();
  1170  003E66  ECEB  F021         	call	_Init_Timers	;wreg free
  1171                           
  1172                           ;Main.c: 132: EUSART1_Initialize();
  1173  003E6A  ECC2  F020         	call	_EUSART1_Initialize	;wreg free
  1174  003E6E                     
  1175                           ;Main.c: 136: {
  1176                           ;Main.c: 137: if (1 == Update_State_Machine)
  1177  003E6E  0100               	movlb	0	; () banked
  1178  003E70  058F               	decf	_Update_State_Machine& (0+255),w,b	;volatile
  1179  003E72  A4D8               	btfss	status,2,c
  1180  003E74  D004               	goto	l93
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;Main.c: 138: {
  1184                           ;Main.c: 139: Update_State_Machine = 0;
  1185  003E76  0E00               	movlw	0
  1186  003E78  6F8F               	movwf	_Update_State_Machine& (0+255),b	;volatile
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;Main.c: 140: Update_StateMchn();
  1190  003E7A  EC39  F004         	call	_Update_StateMchn	;wreg free
  1191  003E7E                     l93:
  1192                           
  1193                           ;Main.c: 141: }
  1194                           ;Main.c: 143: READxRECEIVEDxMESSAGE();
  1195  003E7E  ECC5  F01B         	call	_READxRECEIVEDxMESSAGE	;wreg free
  1196                           
  1197                           ;Main.c: 144: DIAGNOSTICxTOxPC();
  1198  003E82  EC18  F013         	call	_DIAGNOSTICxTOxPC	;wreg free
  1199  003E86  D7F3               	goto	l92
  1200  003E88                     __end_of_main:
  1201                           	opt stack 0
  1202                           tblptru	equ	0xFF8
  1203                           tblptrh	equ	0xFF7
  1204                           tblptrl	equ	0xFF6
  1205                           tablat	equ	0xFF5
  1206                           postinc0	equ	0xFEE
  1207                           wreg	equ	0xFE8
  1208                           postdec1	equ	0xFE5
  1209                           fsr1l	equ	0xFE1
  1210                           status	equ	0xFD8
  1211                           
  1212 ;; *************** function _Update_StateMchn *****************
  1213 ;; Defined at:
  1214 ;;		line 41 in file "../State_Mchn.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;		None
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;		None
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1228 ;;      Params:         0       0       0       0       0       0       0       0       0
  1229 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1230 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1231 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1232 ;;Total ram usage:        5 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    8
  1235 ;; This function calls:
  1236 ;;		_Debounce_Inputs
  1237 ;;		_EEPROMxSTORE
  1238 ;;		_GETxAPIxVAL
  1239 ;;		_Green_Led
  1240 ;;		_Junction
  1241 ;;		_Red_Led
  1242 ;;		_SETxAPIxVAL
  1243 ;;		_SETxAPIxVALxNoxRET
  1244 ;;		_SETxPWM
  1245 ;;		_Train_Path
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text1
  1252  000872                     __ptext1:
  1253                           	opt stack 0
  1254  000872                     _Update_StateMchn:
  1255                           	opt stack 22
  1256                           
  1257                           ;State_Mchn.c: 43: if (GETxAPIxVAL(72)){
  1258                           
  1259                           ;incstack = 0
  1260  000872  0E00               	movlw	0
  1261  000874  6E14               	movwf	GETxAPIxVAL@index+1,c
  1262  000876  0E48               	movlw	72
  1263  000878  6E13               	movwf	GETxAPIxVAL@index,c
  1264  00087A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1265  00087E  5013               	movf	?_GETxAPIxVAL,w,c
  1266  000880  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1267  000882  B4D8               	btfsc	status,2,c
  1268  000884  D00C               	goto	l183
  1269                           
  1270                           ;State_Mchn.c: 44: SETxAPIxVAL(72, 0);
  1271  000886  0E00               	movlw	0
  1272  000888  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1273  00088A  0E48               	movlw	72
  1274  00088C  6E19               	movwf	SETxAPIxVAL@index,c
  1275  00088E  0E00               	movlw	0
  1276  000890  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1277  000892  0E00               	movlw	0
  1278  000894  6E1B               	movwf	SETxAPIxVAL@value,c
  1279  000896  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1280  00089A  00FF               	reset		;# 
  1281                           
  1282                           ;State_Mchn.c: 46: }
  1283  00089C  D01A               	goto	l186
  1284  00089E                     l183:
  1285                           
  1286                           ;State_Mchn.c: 47: else if (GETxAPIxVAL(87)){
  1287  00089E  0E00               	movlw	0
  1288  0008A0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1289  0008A2  0E57               	movlw	87
  1290  0008A4  6E13               	movwf	GETxAPIxVAL@index,c
  1291  0008A6  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1292  0008AA  5013               	movf	?_GETxAPIxVAL,w,c
  1293  0008AC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1294  0008AE  B4D8               	btfsc	status,2,c
  1295  0008B0  D010               	goto	l186
  1296                           
  1297                           ;State_Mchn.c: 48: if (EEPROMxSTORE() == 1){
  1298  0008B2  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  1299  0008B6  041B               	decf	?_EEPROMxSTORE,w,c
  1300  0008B8  101C               	iorwf	?_EEPROMxSTORE+1,w,c
  1301  0008BA  A4D8               	btfss	status,2,c
  1302  0008BC  D00A               	goto	l186
  1303                           
  1304                           ;State_Mchn.c: 49: SETxAPIxVAL(87, 0);
  1305  0008BE  0E00               	movlw	0
  1306  0008C0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1307  0008C2  0E57               	movlw	87
  1308  0008C4  6E19               	movwf	SETxAPIxVAL@index,c
  1309  0008C6  0E00               	movlw	0
  1310  0008C8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1311  0008CA  0E00               	movlw	0
  1312  0008CC  6E1B               	movwf	SETxAPIxVAL@value,c
  1313  0008CE  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1314  0008D2                     l186:
  1315                           
  1316                           ;State_Mchn.c: 50: }
  1317                           ;State_Mchn.c: 51: }
  1318                           ;State_Mchn.c: 53: Debounce_Inputs();
  1319  0008D2  ECEA  F00A         	call	_Debounce_Inputs	;wreg free
  1320                           
  1321                           ;State_Mchn.c: 55: switch (Switch_Main)
  1322  0008D6  EFCB  F00A         	goto	l187
  1323  0008DA                     
  1324                           ;State_Mchn.c: 58: if (GETxAPIxVAL(74)){
  1325  0008DA  0E00               	movlw	0
  1326  0008DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1327  0008DE  0E4A               	movlw	74
  1328  0008E0  6E13               	movwf	GETxAPIxVAL@index,c
  1329  0008E2  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1330  0008E6  5013               	movf	?_GETxAPIxVAL,w,c
  1331  0008E8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1332  0008EA  B4D8               	btfsc	status,2,c
  1333  0008EC  D015               	goto	l189
  1334                           
  1335                           ;State_Mchn.c: 59: if(Junction(0, 1) == 0){
  1336  0008EE  0E01               	movlw	1
  1337  0008F0  6E1F               	movwf	Junction@Straight_Bend,c
  1338  0008F2  0E00               	movlw	0
  1339  0008F4  EC50  F015         	call	_Junction
  1340  0008F8  0900               	iorlw	0
  1341  0008FA  A4D8               	btfss	status,2,c
  1342  0008FC  EFD7  F00A         	goto	l310
  1343                           
  1344                           ;State_Mchn.c: 60: SETxAPIxVALxNoxRET(74, 0);
  1345  000900  0E00               	movlw	0
  1346  000902  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1347  000904  0E4A               	movlw	74
  1348  000906  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1349  000908  0E00               	movlw	0
  1350  00090A  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1351  00090C  0E00               	movlw	0
  1352  00090E  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1353  000910  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1354                           
  1355                           ;State_Mchn.c: 61: }
  1356                           ;State_Mchn.c: 62: }
  1357  000914  EFD7  F00A         	goto	l310
  1358  000918                     l189:
  1359                           
  1360                           ;State_Mchn.c: 63: else if (GETxAPIxVAL(73)){
  1361  000918  0E00               	movlw	0
  1362  00091A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1363  00091C  0E49               	movlw	73
  1364  00091E  6E13               	movwf	GETxAPIxVAL@index,c
  1365  000920  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1366  000924  5013               	movf	?_GETxAPIxVAL,w,c
  1367  000926  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1368  000928  B4D8               	btfsc	status,2,c
  1369  00092A  D015               	goto	l192
  1370                           
  1371                           ;State_Mchn.c: 64: if(Junction(0, 0) == 0){
  1372  00092C  0E00               	movlw	0
  1373  00092E  6E1F               	movwf	Junction@Straight_Bend,c
  1374  000930  0E00               	movlw	0
  1375  000932  EC50  F015         	call	_Junction
  1376  000936  0900               	iorlw	0
  1377  000938  A4D8               	btfss	status,2,c
  1378  00093A  EFD7  F00A         	goto	l310
  1379                           
  1380                           ;State_Mchn.c: 65: SETxAPIxVALxNoxRET(73, 0);
  1381  00093E  0E00               	movlw	0
  1382  000940  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1383  000942  0E49               	movlw	73
  1384  000944  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1385  000946  0E00               	movlw	0
  1386  000948  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1387  00094A  0E00               	movlw	0
  1388  00094C  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1389  00094E  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1390                           
  1391                           ;State_Mchn.c: 66: }
  1392                           ;State_Mchn.c: 67: }
  1393  000952  EFD7  F00A         	goto	l310
  1394  000956                     l192:
  1395                           
  1396                           ;State_Mchn.c: 68: else if (GETxAPIxVAL(76)){
  1397  000956  0E00               	movlw	0
  1398  000958  6E14               	movwf	GETxAPIxVAL@index+1,c
  1399  00095A  0E4C               	movlw	76
  1400  00095C  6E13               	movwf	GETxAPIxVAL@index,c
  1401  00095E  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1402  000962  5013               	movf	?_GETxAPIxVAL,w,c
  1403  000964  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1404  000966  B4D8               	btfsc	status,2,c
  1405  000968  D015               	goto	l195
  1406                           
  1407                           ;State_Mchn.c: 69: if(Junction(1, 1) == 0){
  1408  00096A  0E01               	movlw	1
  1409  00096C  6E1F               	movwf	Junction@Straight_Bend,c
  1410  00096E  0E01               	movlw	1
  1411  000970  EC50  F015         	call	_Junction
  1412  000974  0900               	iorlw	0
  1413  000976  A4D8               	btfss	status,2,c
  1414  000978  EFD7  F00A         	goto	l310
  1415                           
  1416                           ;State_Mchn.c: 70: SETxAPIxVALxNoxRET(76, 0);
  1417  00097C  0E00               	movlw	0
  1418  00097E  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1419  000980  0E4C               	movlw	76
  1420  000982  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1421  000984  0E00               	movlw	0
  1422  000986  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1423  000988  0E00               	movlw	0
  1424  00098A  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1425  00098C  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1426                           
  1427                           ;State_Mchn.c: 71: }
  1428                           ;State_Mchn.c: 72: }
  1429  000990  EFD7  F00A         	goto	l310
  1430  000994                     l195:
  1431                           
  1432                           ;State_Mchn.c: 73: else if (GETxAPIxVAL(75)){
  1433  000994  0E00               	movlw	0
  1434  000996  6E14               	movwf	GETxAPIxVAL@index+1,c
  1435  000998  0E4B               	movlw	75
  1436  00099A  6E13               	movwf	GETxAPIxVAL@index,c
  1437  00099C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1438  0009A0  5013               	movf	?_GETxAPIxVAL,w,c
  1439  0009A2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1440  0009A4  B4D8               	btfsc	status,2,c
  1441  0009A6  D015               	goto	l198
  1442                           
  1443                           ;State_Mchn.c: 74: if(Junction(1, 0) == 0){
  1444  0009A8  0E00               	movlw	0
  1445  0009AA  6E1F               	movwf	Junction@Straight_Bend,c
  1446  0009AC  0E01               	movlw	1
  1447  0009AE  EC50  F015         	call	_Junction
  1448  0009B2  0900               	iorlw	0
  1449  0009B4  A4D8               	btfss	status,2,c
  1450  0009B6  EFD7  F00A         	goto	l310
  1451                           
  1452                           ;State_Mchn.c: 75: SETxAPIxVALxNoxRET(75, 0);
  1453  0009BA  0E00               	movlw	0
  1454  0009BC  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1455  0009BE  0E4B               	movlw	75
  1456  0009C0  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1457  0009C2  0E00               	movlw	0
  1458  0009C4  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1459  0009C6  0E00               	movlw	0
  1460  0009C8  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1461  0009CA  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1462                           
  1463                           ;State_Mchn.c: 76: }
  1464                           ;State_Mchn.c: 77: }
  1465  0009CE  EFD7  F00A         	goto	l310
  1466  0009D2                     l198:
  1467                           
  1468                           ;State_Mchn.c: 78: else if (GETxAPIxVAL(77)){
  1469  0009D2  0E00               	movlw	0
  1470  0009D4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1471  0009D6  0E4D               	movlw	77
  1472  0009D8  6E13               	movwf	GETxAPIxVAL@index,c
  1473  0009DA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1474  0009DE  5013               	movf	?_GETxAPIxVAL,w,c
  1475  0009E0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1476  0009E2  B4D8               	btfsc	status,2,c
  1477  0009E4  D016               	goto	l201
  1478                           
  1479                           ;State_Mchn.c: 79: SETxAPIxVAL(69, 1);
  1480  0009E6  0E00               	movlw	0
  1481  0009E8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1482  0009EA  0E45               	movlw	69
  1483  0009EC  6E19               	movwf	SETxAPIxVAL@index,c
  1484  0009EE  0E00               	movlw	0
  1485  0009F0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1486  0009F2  0E01               	movlw	1
  1487  0009F4  6E1B               	movwf	SETxAPIxVAL@value,c
  1488  0009F6  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1489                           
  1490                           ;State_Mchn.c: 80: SETxAPIxVALxNoxRET(77, 0);
  1491  0009FA  0E00               	movlw	0
  1492  0009FC  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1493  0009FE  0E4D               	movlw	77
  1494  000A00  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1495  000A02  0E00               	movlw	0
  1496  000A04  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1497  000A06  0E00               	movlw	0
  1498  000A08  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1499  000A0A  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1500                           
  1501                           ;State_Mchn.c: 81: }
  1502  000A0E  EFD7  F00A         	goto	l310
  1503  000A12                     l201:
  1504                           
  1505                           ;State_Mchn.c: 82: else if (GETxAPIxVAL(78)){
  1506  000A12  0E00               	movlw	0
  1507  000A14  6E14               	movwf	GETxAPIxVAL@index+1,c
  1508  000A16  0E4E               	movlw	78
  1509  000A18  6E13               	movwf	GETxAPIxVAL@index,c
  1510  000A1A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1511  000A1E  5013               	movf	?_GETxAPIxVAL,w,c
  1512  000A20  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1513  000A22  B4D8               	btfsc	status,2,c
  1514  000A24  D016               	goto	l203
  1515                           
  1516                           ;State_Mchn.c: 83: SETxAPIxVAL(69, 0);
  1517  000A26  0E00               	movlw	0
  1518  000A28  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1519  000A2A  0E45               	movlw	69
  1520  000A2C  6E19               	movwf	SETxAPIxVAL@index,c
  1521  000A2E  0E00               	movlw	0
  1522  000A30  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1523  000A32  0E00               	movlw	0
  1524  000A34  6E1B               	movwf	SETxAPIxVAL@value,c
  1525  000A36  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1526                           
  1527                           ;State_Mchn.c: 84: SETxAPIxVALxNoxRET(78, 0);
  1528  000A3A  0E00               	movlw	0
  1529  000A3C  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1530  000A3E  0E4E               	movlw	78
  1531  000A40  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1532  000A42  0E00               	movlw	0
  1533  000A44  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1534  000A46  0E00               	movlw	0
  1535  000A48  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1536  000A4A  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1537                           
  1538                           ;State_Mchn.c: 85: }
  1539  000A4E  EFD7  F00A         	goto	l310
  1540  000A52                     l203:
  1541                           
  1542                           ;State_Mchn.c: 86: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1543  000A52  0E00               	movlw	0
  1544  000A54  6E14               	movwf	GETxAPIxVAL@index+1,c
  1545  000A56  0E44               	movlw	68
  1546  000A58  6E13               	movwf	GETxAPIxVAL@index,c
  1547  000A5A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1548  000A5E  C013  F0D3         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1549  000A62  C014  F0D4         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1550  000A66  0E00               	movlw	0
  1551  000A68  6E14               	movwf	GETxAPIxVAL@index+1,c
  1552  000A6A  0E4F               	movlw	79
  1553  000A6C  6E13               	movwf	GETxAPIxVAL@index,c
  1554  000A6E  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1555  000A72  5013               	movf	?_GETxAPIxVAL,w,c
  1556  000A74  0100               	movlb	0	; () banked
  1557  000A76  19D3               	xorwf	??_Update_StateMchn& (0+255),w,b
  1558  000A78  E104               	bnz	u8530
  1559  000A7A  5014               	movf	?_GETxAPIxVAL+1,w,c
  1560  000A7C  19D4               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1561  000A7E  B4D8               	btfsc	status,2,c
  1562  000A80  D02D               	goto	l205
  1563  000A82                     u8530:
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;State_Mchn.c: 87: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1567  000A82  0E00               	movlw	0
  1568  000A84  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1569  000A86  0E44               	movlw	68
  1570  000A88  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1571  000A8A  0E00               	movlw	0
  1572  000A8C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1573  000A8E  0E4F               	movlw	79
  1574  000A90  6E13               	movwf	GETxAPIxVAL@index,c
  1575  000A92  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1576  000A96  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1577  000A9A  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1578  000A9E  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1579                           
  1580                           ;State_Mchn.c: 88: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1581  000AA2  0E00               	movlw	0
  1582  000AA4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1583  000AA6  0E44               	movlw	68
  1584  000AA8  6E13               	movwf	GETxAPIxVAL@index,c
  1585  000AAA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1586  000AAE  C013  F0D5         	movff	?_GETxAPIxVAL,_Update_StateMchn$2184
  1587  000AB2  C014  F0D6         	movff	?_GETxAPIxVAL+1,_Update_StateMchn$2184+1
  1588                           
  1589                           ;State_Mchn.c: 88: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1590  000AB6  0E00               	movlw	0
  1591  000AB8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1592  000ABA  0E56               	movlw	86
  1593  000ABC  6E13               	movwf	GETxAPIxVAL@index,c
  1594  000ABE  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1595  000AC2  5013               	movf	?_GETxAPIxVAL,w,c
  1596  000AC4  0100               	movlb	0	; () banked
  1597  000AC6  6FD7               	movwf	_Update_StateMchn$2185& (0+255),b
  1598                           
  1599                           ;State_Mchn.c: 88: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1600  000AC8  C0D5  F01F         	movff	_Update_StateMchn$2184,SETxPWM@speed
  1601  000ACC  C0D6  F020         	movff	_Update_StateMchn$2184+1,SETxPWM@speed+1
  1602  000AD0  C0D7  F021         	movff	_Update_StateMchn$2185,SETxPWM@direction
  1603  000AD4  ECA0  F01E         	call	_SETxPWM	;wreg free
  1604                           
  1605                           ;State_Mchn.c: 89: }
  1606  000AD8  EFD7  F00A         	goto	l310
  1607  000ADC                     l205:
  1608                           
  1609                           ;State_Mchn.c: 90: else if (GETxAPIxVAL(86) != GETxAPIxVAL(81)){
  1610  000ADC  0E00               	movlw	0
  1611  000ADE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1612  000AE0  0E56               	movlw	86
  1613  000AE2  6E13               	movwf	GETxAPIxVAL@index,c
  1614  000AE4  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1615  000AE8  C013  F0D3         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1616  000AEC  C014  F0D4         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1617  000AF0  0E00               	movlw	0
  1618  000AF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1619  000AF4  0E51               	movlw	81
  1620  000AF6  6E13               	movwf	GETxAPIxVAL@index,c
  1621  000AF8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1622  000AFC  5013               	movf	?_GETxAPIxVAL,w,c
  1623  000AFE  0100               	movlb	0	; () banked
  1624  000B00  19D3               	xorwf	??_Update_StateMchn& (0+255),w,b
  1625  000B02  E104               	bnz	u8540
  1626  000B04  5014               	movf	?_GETxAPIxVAL+1,w,c
  1627  000B06  19D4               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1628  000B08  B4D8               	btfsc	status,2,c
  1629  000B0A  D3EA               	goto	l209
  1630  000B0C                     u8540:
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;State_Mchn.c: 91: SETxAPIxVALxNoxRET(86, GETxAPIxVAL(81));
  1634  000B0C  0E00               	movlw	0
  1635  000B0E  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1636  000B10  0E56               	movlw	86
  1637  000B12  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1638  000B14  0E00               	movlw	0
  1639  000B16  6E14               	movwf	GETxAPIxVAL@index+1,c
  1640  000B18  0E51               	movlw	81
  1641  000B1A  6E13               	movwf	GETxAPIxVAL@index,c
  1642  000B1C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1643  000B20  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1644  000B24  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1645  000B28  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
  1646                           
  1647                           ;State_Mchn.c: 92: }
  1648  000B2C  EFD7  F00A         	goto	l310
  1649  000B30  0E00               	movlw	0
  1650  000B32  ECCF  F01F         	call	_Green_Led
  1651                           
  1652                           ;State_Mchn.c: 98: Red_Led(0);
  1653  000B36  0E00               	movlw	0
  1654  000B38  EC8F  F01F         	call	_Red_Led
  1655                           
  1656                           ;State_Mchn.c: 99: Switch_Init = 1;
  1657  000B3C  0E01               	movlw	1
  1658  000B3E  D015               	goto	L1
  1659  000B40                     
  1660                           ; BSR set to: 0
  1661                           
  1662                           ; BSR set to: 0
  1663  000B40  0E00               	movlw	0
  1664  000B42  6E14               	movwf	GETxAPIxVAL@index+1,c
  1665  000B44  0E23               	movlw	35
  1666  000B46  6E13               	movwf	GETxAPIxVAL@index,c
  1667  000B48  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1668  000B4C  5013               	movf	?_GETxAPIxVAL,w,c
  1669  000B4E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1670  000B50  B4D8               	btfsc	status,2,c
  1671  000B52  D00F               	goto	l213
  1672                           
  1673                           ;State_Mchn.c: 103: {
  1674                           ;State_Mchn.c: 104: SETxAPIxVAL(39, 1);
  1675  000B54  0E00               	movlw	0
  1676  000B56  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1677  000B58  0E27               	movlw	39
  1678  000B5A  6E19               	movwf	SETxAPIxVAL@index,c
  1679  000B5C  0E00               	movlw	0
  1680  000B5E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1681  000B60  0E01               	movlw	1
  1682  000B62  6E1B               	movwf	SETxAPIxVAL@value,c
  1683  000B64  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1684  000B68  D057               	goto	l8942
  1685  000B6A                     L1:
  1686  000B6A  0100               	movlb	0	; () banked
  1687  000B6C                     L2:
  1688  000B6C  6F8E               	movwf	_Switch_Init& (0+255),b
  1689                           
  1690                           ;State_Mchn.c: 106: break;
  1691  000B6E  EFD7  F00A         	goto	l310
  1692  000B72                     l213:
  1693                           
  1694                           ;State_Mchn.c: 107: }
  1695                           ;State_Mchn.c: 108: if(GETxAPIxVAL(36))
  1696                           
  1697                           ; BSR set to: 0
  1698  000B72  0E00               	movlw	0
  1699  000B74  6E14               	movwf	GETxAPIxVAL@index+1,c
  1700  000B76  0E24               	movlw	36
  1701  000B78  6E13               	movwf	GETxAPIxVAL@index,c
  1702  000B7A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1703  000B7E  5013               	movf	?_GETxAPIxVAL,w,c
  1704  000B80  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1705  000B82  B4D8               	btfsc	status,2,c
  1706  000B84  D00B               	goto	l214
  1707                           
  1708                           ;State_Mchn.c: 109: {
  1709                           ;State_Mchn.c: 110: SETxAPIxVAL(39, 2);
  1710  000B86  0E00               	movlw	0
  1711  000B88  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1712  000B8A  0E27               	movlw	39
  1713  000B8C  6E19               	movwf	SETxAPIxVAL@index,c
  1714  000B8E  0E00               	movlw	0
  1715  000B90  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1716  000B92  0E02               	movlw	2
  1717  000B94  6E1B               	movwf	SETxAPIxVAL@value,c
  1718  000B96  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1719  000B9A  D03E               	goto	l8942
  1720  000B9C                     l214:
  1721                           
  1722                           ;State_Mchn.c: 113: }
  1723                           ;State_Mchn.c: 114: if(GETxAPIxVAL(37))
  1724                           
  1725                           ; BSR set to: 0
  1726  000B9C  0E00               	movlw	0
  1727  000B9E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1728  000BA0  0E25               	movlw	37
  1729  000BA2  6E13               	movwf	GETxAPIxVAL@index,c
  1730  000BA4  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1731  000BA8  5013               	movf	?_GETxAPIxVAL,w,c
  1732  000BAA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1733  000BAC  B4D8               	btfsc	status,2,c
  1734  000BAE  D00B               	goto	l215
  1735                           
  1736                           ;State_Mchn.c: 115: {
  1737                           ;State_Mchn.c: 116: SETxAPIxVAL(39, 3);
  1738  000BB0  0E00               	movlw	0
  1739  000BB2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1740  000BB4  0E27               	movlw	39
  1741  000BB6  6E19               	movwf	SETxAPIxVAL@index,c
  1742  000BB8  0E00               	movlw	0
  1743  000BBA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1744  000BBC  0E03               	movlw	3
  1745  000BBE  6E1B               	movwf	SETxAPIxVAL@value,c
  1746  000BC0  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1747  000BC4  D029               	goto	l8942
  1748  000BC6                     l215:
  1749                           
  1750                           ;State_Mchn.c: 119: }
  1751                           ;State_Mchn.c: 120: if(GETxAPIxVAL(38))
  1752                           
  1753                           ; BSR set to: 0
  1754  000BC6  0E00               	movlw	0
  1755  000BC8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1756  000BCA  0E26               	movlw	38
  1757  000BCC  6E13               	movwf	GETxAPIxVAL@index,c
  1758  000BCE  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1759  000BD2  5013               	movf	?_GETxAPIxVAL,w,c
  1760  000BD4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1761  000BD6  B4D8               	btfsc	status,2,c
  1762  000BD8  D00B               	goto	l216
  1763                           
  1764                           ;State_Mchn.c: 121: {
  1765                           ;State_Mchn.c: 122: SETxAPIxVAL(39, 4);
  1766  000BDA  0E00               	movlw	0
  1767  000BDC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1768  000BDE  0E27               	movlw	39
  1769  000BE0  6E19               	movwf	SETxAPIxVAL@index,c
  1770  000BE2  0E00               	movlw	0
  1771  000BE4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1772  000BE6  0E04               	movlw	4
  1773  000BE8  6E1B               	movwf	SETxAPIxVAL@value,c
  1774  000BEA  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1775  000BEE  D014               	goto	l8942
  1776  000BF0                     l216:
  1777                           
  1778                           ;State_Mchn.c: 125: }
  1779                           ;State_Mchn.c: 126: if(GETxAPIxVAL(34))
  1780                           
  1781                           ; BSR set to: 0
  1782  000BF0  0E00               	movlw	0
  1783  000BF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1784  000BF4  0E22               	movlw	34
  1785  000BF6  6E13               	movwf	GETxAPIxVAL@index,c
  1786  000BF8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1787  000BFC  5013               	movf	?_GETxAPIxVAL,w,c
  1788  000BFE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1789  000C00  B4D8               	btfsc	status,2,c
  1790  000C02  D00C               	goto	l217
  1791                           
  1792                           ;State_Mchn.c: 127: {
  1793                           ;State_Mchn.c: 128: SETxAPIxVAL(39, 5);
  1794  000C04  0E00               	movlw	0
  1795  000C06  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1796  000C08  0E27               	movlw	39
  1797  000C0A  6E19               	movwf	SETxAPIxVAL@index,c
  1798  000C0C  0E00               	movlw	0
  1799  000C0E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1800  000C10  0E05               	movlw	5
  1801  000C12  6E1B               	movwf	SETxAPIxVAL@value,c
  1802  000C14  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1803  000C18                     l8942:
  1804                           
  1805                           ;State_Mchn.c: 129: Switch_Init = 2;
  1806  000C18  0E02               	movlw	2
  1807  000C1A  D7A7               	goto	L1
  1808  000C1C                     l217:
  1809                           
  1810                           ;State_Mchn.c: 131: }
  1811                           ;State_Mchn.c: 132: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1812                           
  1813                           ; BSR set to: 0
  1814  000C1C  0E00               	movlw	0
  1815  000C1E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1816  000C20  0E27               	movlw	39
  1817  000C22  6E13               	movwf	GETxAPIxVAL@index,c
  1818  000C24  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1819  000C28  5013               	movf	?_GETxAPIxVAL,w,c
  1820  000C2A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1821  000C2C  B4D8               	btfsc	status,2,c
  1822  000C2E  D00A               	goto	l218
  1823  000C30  0E00               	movlw	0
  1824  000C32  6E14               	movwf	GETxAPIxVAL@index+1,c
  1825  000C34  0E28               	movlw	40
  1826  000C36  6E13               	movwf	GETxAPIxVAL@index,c
  1827  000C38  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1828  000C3C  5013               	movf	?_GETxAPIxVAL,w,c
  1829  000C3E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1830  000C40  A4D8               	btfss	status,2,c
  1831  000C42  D0E1               	goto	u8750
  1832  000C44                     l218:
  1833                           
  1834                           ;State_Mchn.c: 135: }
  1835                           ;State_Mchn.c: 136: Switch_Init = 1;
  1836                           
  1837                           ; BSR set to: 0
  1838  000C44  0E01               	movlw	1
  1839  000C46  0100               	movlb	0	; () banked
  1840  000C48  6F8E               	movwf	_Switch_Init& (0+255),b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;State_Mchn.c: 137: Green_Led(2);
  1844  000C4A  0E02               	movlw	2
  1845  000C4C  ECCF  F01F         	call	_Green_Led
  1846                           
  1847                           ;State_Mchn.c: 138: break;
  1848  000C50  EFD7  F00A         	goto	l310
  1849  000C54  0E00               	movlw	0
  1850  000C56  6E14               	movwf	GETxAPIxVAL@index+1,c
  1851  000C58  0E23               	movlw	35
  1852  000C5A  6E13               	movwf	GETxAPIxVAL@index,c
  1853  000C5C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1854  000C60  5013               	movf	?_GETxAPIxVAL,w,c
  1855  000C62  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1856  000C64  A4D8               	btfss	status,2,c
  1857  000C66  D035               	goto	l220
  1858  000C68  0E00               	movlw	0
  1859  000C6A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1860  000C6C  0E24               	movlw	36
  1861  000C6E  6E13               	movwf	GETxAPIxVAL@index,c
  1862  000C70  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1863  000C74  5013               	movf	?_GETxAPIxVAL,w,c
  1864  000C76  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1865  000C78  A4D8               	btfss	status,2,c
  1866  000C7A  D02B               	goto	l220
  1867  000C7C  0E00               	movlw	0
  1868  000C7E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1869  000C80  0E25               	movlw	37
  1870  000C82  6E13               	movwf	GETxAPIxVAL@index,c
  1871  000C84  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1872  000C88  5013               	movf	?_GETxAPIxVAL,w,c
  1873  000C8A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1874  000C8C  A4D8               	btfss	status,2,c
  1875  000C8E  D021               	goto	l220
  1876  000C90  0E00               	movlw	0
  1877  000C92  6E14               	movwf	GETxAPIxVAL@index+1,c
  1878  000C94  0E26               	movlw	38
  1879  000C96  6E13               	movwf	GETxAPIxVAL@index,c
  1880  000C98  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1881  000C9C  5013               	movf	?_GETxAPIxVAL,w,c
  1882  000C9E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1883  000CA0  A4D8               	btfss	status,2,c
  1884  000CA2  D017               	goto	l220
  1885  000CA4  0E00               	movlw	0
  1886  000CA6  6E14               	movwf	GETxAPIxVAL@index+1,c
  1887  000CA8  0E22               	movlw	34
  1888  000CAA  6E13               	movwf	GETxAPIxVAL@index,c
  1889  000CAC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1890  000CB0  5013               	movf	?_GETxAPIxVAL,w,c
  1891  000CB2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1892  000CB4  A4D8               	btfss	status,2,c
  1893  000CB6  D00D               	goto	l220
  1894  000CB8  0E00               	movlw	0
  1895  000CBA  6E14               	movwf	GETxAPIxVAL@index+1,c
  1896  000CBC  0E20               	movlw	32
  1897  000CBE  6E13               	movwf	GETxAPIxVAL@index,c
  1898  000CC0  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1899  000CC4  5013               	movf	?_GETxAPIxVAL,w,c
  1900  000CC6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1901  000CC8  A4D8               	btfss	status,2,c
  1902  000CCA  D003               	goto	l220
  1903                           
  1904                           ;State_Mchn.c: 141: {
  1905                           ;State_Mchn.c: 142: Switch_Init = 3;
  1906  000CCC  0E03               	movlw	3
  1907  000CCE  0100               	movlb	0	; () banked
  1908  000CD0  6F8E               	movwf	_Switch_Init& (0+255),b
  1909  000CD2                     l220:
  1910                           
  1911                           ;State_Mchn.c: 143: }
  1912                           ;State_Mchn.c: 144: Red_Led(0);
  1913                           
  1914                           ; BSR set to: 0
  1915  000CD2  0E00               	movlw	0
  1916  000CD4  EC8F  F01F         	call	_Red_Led
  1917                           
  1918                           ;State_Mchn.c: 145: Green_Led(2);
  1919  000CD8  0E02               	movlw	2
  1920  000CDA  ECCF  F01F         	call	_Green_Led
  1921                           
  1922                           ;State_Mchn.c: 146: break;
  1923  000CDE  EFD7  F00A         	goto	l310
  1924  000CE2  0E00               	movlw	0
  1925  000CE4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1926  000CE6  0E23               	movlw	35
  1927  000CE8  6E13               	movwf	GETxAPIxVAL@index,c
  1928  000CEA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1929  000CEE  5013               	movf	?_GETxAPIxVAL,w,c
  1930  000CF0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1931  000CF2  B4D8               	btfsc	status,2,c
  1932  000CF4  D00B               	goto	l222
  1933                           
  1934                           ;State_Mchn.c: 149: {
  1935                           ;State_Mchn.c: 150: SETxAPIxVAL(40, 1);
  1936  000CF6  0E00               	movlw	0
  1937  000CF8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1938  000CFA  0E28               	movlw	40
  1939  000CFC  6E19               	movwf	SETxAPIxVAL@index,c
  1940  000CFE  0E00               	movlw	0
  1941  000D00  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1942  000D02  0E01               	movlw	1
  1943  000D04  6E1B               	movwf	SETxAPIxVAL@value,c
  1944  000D06  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1945  000D0A  D07D               	goto	u8750
  1946  000D0C                     l222:
  1947                           
  1948                           ;State_Mchn.c: 153: }
  1949                           ;State_Mchn.c: 154: if(GETxAPIxVAL(36))
  1950                           
  1951                           ; BSR set to: 0
  1952  000D0C  0E00               	movlw	0
  1953  000D0E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1954  000D10  0E24               	movlw	36
  1955  000D12  6E13               	movwf	GETxAPIxVAL@index,c
  1956  000D14  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1957  000D18  5013               	movf	?_GETxAPIxVAL,w,c
  1958  000D1A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1959  000D1C  B4D8               	btfsc	status,2,c
  1960  000D1E  D00B               	goto	l223
  1961                           
  1962                           ;State_Mchn.c: 155: {
  1963                           ;State_Mchn.c: 156: SETxAPIxVAL(40, 2);
  1964  000D20  0E00               	movlw	0
  1965  000D22  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1966  000D24  0E28               	movlw	40
  1967  000D26  6E19               	movwf	SETxAPIxVAL@index,c
  1968  000D28  0E00               	movlw	0
  1969  000D2A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1970  000D2C  0E02               	movlw	2
  1971  000D2E  6E1B               	movwf	SETxAPIxVAL@value,c
  1972  000D30  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  1973  000D34  D068               	goto	u8750
  1974  000D36                     l223:
  1975                           
  1976                           ;State_Mchn.c: 159: }
  1977                           ;State_Mchn.c: 160: if(GETxAPIxVAL(37))
  1978                           
  1979                           ; BSR set to: 0
  1980  000D36  0E00               	movlw	0
  1981  000D38  6E14               	movwf	GETxAPIxVAL@index+1,c
  1982  000D3A  0E25               	movlw	37
  1983  000D3C  6E13               	movwf	GETxAPIxVAL@index,c
  1984  000D3E  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  1985  000D42  5013               	movf	?_GETxAPIxVAL,w,c
  1986  000D44  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1987  000D46  B4D8               	btfsc	status,2,c
  1988  000D48  D00B               	goto	l224
  1989                           
  1990                           ;State_Mchn.c: 161: {
  1991                           ;State_Mchn.c: 162: SETxAPIxVAL(40, 3);
  1992  000D4A  0E00               	movlw	0
  1993  000D4C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1994  000D4E  0E28               	movlw	40
  1995  000D50  6E19               	movwf	SETxAPIxVAL@index,c
  1996  000D52  0E00               	movlw	0
  1997  000D54  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1998  000D56  0E03               	movlw	3
  1999  000D58  6E1B               	movwf	SETxAPIxVAL@value,c
  2000  000D5A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  2001  000D5E  D053               	goto	u8750
  2002  000D60                     l224:
  2003                           
  2004                           ;State_Mchn.c: 165: }
  2005                           ;State_Mchn.c: 166: if(GETxAPIxVAL(38))
  2006                           
  2007                           ; BSR set to: 0
  2008  000D60  0E00               	movlw	0
  2009  000D62  6E14               	movwf	GETxAPIxVAL@index+1,c
  2010  000D64  0E26               	movlw	38
  2011  000D66  6E13               	movwf	GETxAPIxVAL@index,c
  2012  000D68  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2013  000D6C  5013               	movf	?_GETxAPIxVAL,w,c
  2014  000D6E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2015  000D70  B4D8               	btfsc	status,2,c
  2016  000D72  D00B               	goto	l225
  2017                           
  2018                           ;State_Mchn.c: 167: {
  2019                           ;State_Mchn.c: 168: SETxAPIxVAL(40, 4);
  2020  000D74  0E00               	movlw	0
  2021  000D76  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2022  000D78  0E28               	movlw	40
  2023  000D7A  6E19               	movwf	SETxAPIxVAL@index,c
  2024  000D7C  0E00               	movlw	0
  2025  000D7E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2026  000D80  0E04               	movlw	4
  2027  000D82  6E1B               	movwf	SETxAPIxVAL@value,c
  2028  000D84  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  2029  000D88  D03E               	goto	u8750
  2030  000D8A                     l225:
  2031                           
  2032                           ;State_Mchn.c: 171: }
  2033                           ;State_Mchn.c: 172: if(GETxAPIxVAL(34))
  2034                           
  2035                           ; BSR set to: 0
  2036  000D8A  0E00               	movlw	0
  2037  000D8C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2038  000D8E  0E22               	movlw	34
  2039  000D90  6E13               	movwf	GETxAPIxVAL@index,c
  2040  000D92  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2041  000D96  5013               	movf	?_GETxAPIxVAL,w,c
  2042  000D98  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2043  000D9A  B4D8               	btfsc	status,2,c
  2044  000D9C  D00B               	goto	l226
  2045                           
  2046                           ;State_Mchn.c: 173: {
  2047                           ;State_Mchn.c: 174: SETxAPIxVAL(40, 5);
  2048  000D9E  0E00               	movlw	0
  2049  000DA0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2050  000DA2  0E28               	movlw	40
  2051  000DA4  6E19               	movwf	SETxAPIxVAL@index,c
  2052  000DA6  0E00               	movlw	0
  2053  000DA8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2054  000DAA  0E05               	movlw	5
  2055  000DAC  6E1B               	movwf	SETxAPIxVAL@value,c
  2056  000DAE  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  2057  000DB2  D029               	goto	u8750
  2058  000DB4                     l226:
  2059                           
  2060                           ;State_Mchn.c: 177: }
  2061                           ;State_Mchn.c: 178: if(GETxAPIxVAL(32))
  2062                           
  2063                           ; BSR set to: 0
  2064  000DB4  0E00               	movlw	0
  2065  000DB6  6E14               	movwf	GETxAPIxVAL@index+1,c
  2066  000DB8  0E20               	movlw	32
  2067  000DBA  6E13               	movwf	GETxAPIxVAL@index,c
  2068  000DBC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2069  000DC0  5013               	movf	?_GETxAPIxVAL,w,c
  2070  000DC2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2071  000DC4  B4D8               	btfsc	status,2,c
  2072  000DC6  D00B               	goto	l227
  2073                           
  2074                           ;State_Mchn.c: 179: {
  2075                           ;State_Mchn.c: 180: SETxAPIxVAL(40, 9);
  2076  000DC8  0E00               	movlw	0
  2077  000DCA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2078  000DCC  0E28               	movlw	40
  2079  000DCE  6E19               	movwf	SETxAPIxVAL@index,c
  2080  000DD0  0E00               	movlw	0
  2081  000DD2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2082  000DD4  0E09               	movlw	9
  2083  000DD6  6E1B               	movwf	SETxAPIxVAL@value,c
  2084  000DD8  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  2085  000DDC  D014               	goto	u8750
  2086  000DDE                     l227:
  2087                           
  2088                           ;State_Mchn.c: 183: }
  2089                           ;State_Mchn.c: 184: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  2090                           
  2091                           ; BSR set to: 0
  2092  000DDE  0E00               	movlw	0
  2093  000DE0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2094  000DE2  0E27               	movlw	39
  2095  000DE4  6E13               	movwf	GETxAPIxVAL@index,c
  2096  000DE6  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2097  000DEA  5013               	movf	?_GETxAPIxVAL,w,c
  2098  000DEC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2099  000DEE  B4D8               	btfsc	status,2,c
  2100  000DF0  D00C               	goto	l228
  2101  000DF2  0E00               	movlw	0
  2102  000DF4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2103  000DF6  0E28               	movlw	40
  2104  000DF8  6E13               	movwf	GETxAPIxVAL@index,c
  2105  000DFA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2106  000DFE  5013               	movf	?_GETxAPIxVAL,w,c
  2107  000E00  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2108  000E02  B4D8               	btfsc	status,2,c
  2109  000E04  D002               	goto	l228
  2110  000E06                     u8750:
  2111                           
  2112                           ;State_Mchn.c: 185: Switch_Init = 4;
  2113  000E06  0E04               	movlw	4
  2114  000E08  D6B0               	goto	L1
  2115  000E0A                     l228:
  2116                           
  2117                           ;State_Mchn.c: 187: }
  2118                           ;State_Mchn.c: 188: Green_Led(2);
  2119                           
  2120                           ; BSR set to: 0
  2121  000E0A  0E02               	movlw	2
  2122  000E0C  ECCF  F01F         	call	_Green_Led
  2123                           
  2124                           ;State_Mchn.c: 189: Switch_Init = 3;
  2125  000E10  0E03               	movlw	3
  2126  000E12  D6AB               	goto	L1
  2127  000E14                     
  2128                           ; BSR set to: 0
  2129                           
  2130                           ; BSR set to: 0
  2131  000E14  0E00               	movlw	0
  2132  000E16  6E14               	movwf	GETxAPIxVAL@index+1,c
  2133  000E18  0E23               	movlw	35
  2134  000E1A  6E13               	movwf	GETxAPIxVAL@index,c
  2135  000E1C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2136  000E20  5013               	movf	?_GETxAPIxVAL,w,c
  2137  000E22  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2138  000E24  A4D8               	btfss	status,2,c
  2139  000E26  D07E               	goto	l232
  2140  000E28  0E00               	movlw	0
  2141  000E2A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2142  000E2C  0E24               	movlw	36
  2143  000E2E  6E13               	movwf	GETxAPIxVAL@index,c
  2144  000E30  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2145  000E34  5013               	movf	?_GETxAPIxVAL,w,c
  2146  000E36  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2147  000E38  A4D8               	btfss	status,2,c
  2148  000E3A  D074               	goto	l232
  2149  000E3C  0E00               	movlw	0
  2150  000E3E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2151  000E40  0E25               	movlw	37
  2152  000E42  6E13               	movwf	GETxAPIxVAL@index,c
  2153  000E44  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2154  000E48  5013               	movf	?_GETxAPIxVAL,w,c
  2155  000E4A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2156  000E4C  A4D8               	btfss	status,2,c
  2157  000E4E  D06A               	goto	l232
  2158  000E50  0E00               	movlw	0
  2159  000E52  6E14               	movwf	GETxAPIxVAL@index+1,c
  2160  000E54  0E26               	movlw	38
  2161  000E56  6E13               	movwf	GETxAPIxVAL@index,c
  2162  000E58  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2163  000E5C  5013               	movf	?_GETxAPIxVAL,w,c
  2164  000E5E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2165  000E60  A4D8               	btfss	status,2,c
  2166  000E62  D060               	goto	l232
  2167  000E64  0E00               	movlw	0
  2168  000E66  6E14               	movwf	GETxAPIxVAL@index+1,c
  2169  000E68  0E22               	movlw	34
  2170  000E6A  6E13               	movwf	GETxAPIxVAL@index,c
  2171  000E6C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2172  000E70  5013               	movf	?_GETxAPIxVAL,w,c
  2173  000E72  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2174  000E74  A4D8               	btfss	status,2,c
  2175  000E76  D056               	goto	l232
  2176  000E78  0E00               	movlw	0
  2177  000E7A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2178  000E7C  0E20               	movlw	32
  2179  000E7E  6E13               	movwf	GETxAPIxVAL@index,c
  2180  000E80  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2181  000E84  5013               	movf	?_GETxAPIxVAL,w,c
  2182  000E86  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2183  000E88  A4D8               	btfss	status,2,c
  2184  000E8A  D04C               	goto	l232
  2185                           
  2186                           ;State_Mchn.c: 193: {
  2187                           ;State_Mchn.c: 194: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  2188  000E8C  0E00               	movlw	0
  2189  000E8E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2190  000E90  0E27               	movlw	39
  2191  000E92  6E13               	movwf	GETxAPIxVAL@index,c
  2192  000E94  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2193  000E98  C013  F0D3         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2194  000E9C  C014  F0D4         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2195  000EA0  0E00               	movlw	0
  2196  000EA2  6E14               	movwf	GETxAPIxVAL@index+1,c
  2197  000EA4  0E28               	movlw	40
  2198  000EA6  6E13               	movwf	GETxAPIxVAL@index,c
  2199  000EA8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2200  000EAC  5013               	movf	?_GETxAPIxVAL,w,c
  2201  000EAE  0100               	movlb	0	; () banked
  2202  000EB0  19D3               	xorwf	??_Update_StateMchn& (0+255),w,b
  2203  000EB2  E11E               	bnz	l9038
  2204  000EB4  5014               	movf	?_GETxAPIxVAL+1,w,c
  2205  000EB6  19D4               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2206  000EB8  A4D8               	btfss	status,2,c
  2207  000EBA  D01A               	goto	l231
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;State_Mchn.c: 195: {
  2211                           ;State_Mchn.c: 196: SETxAPIxVAL(40, 0);
  2212  000EBC  0E00               	movlw	0
  2213  000EBE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2214  000EC0  0E28               	movlw	40
  2215  000EC2  6E19               	movwf	SETxAPIxVAL@index,c
  2216  000EC4  0E00               	movlw	0
  2217  000EC6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2218  000EC8  0E00               	movlw	0
  2219  000ECA  6E1B               	movwf	SETxAPIxVAL@value,c
  2220  000ECC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  2221                           
  2222                           ;State_Mchn.c: 197: SETxAPIxVAL(39, 0);
  2223  000ED0  0E00               	movlw	0
  2224  000ED2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2225  000ED4  0E27               	movlw	39
  2226  000ED6  6E19               	movwf	SETxAPIxVAL@index,c
  2227  000ED8  0E00               	movlw	0
  2228  000EDA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2229  000EDC  0E00               	movlw	0
  2230  000EDE  6E1B               	movwf	SETxAPIxVAL@value,c
  2231  000EE0  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  2232                           
  2233                           ;State_Mchn.c: 198: Red_Led(1);
  2234  000EE4  0E01               	movlw	1
  2235  000EE6  EC8F  F01F         	call	_Red_Led
  2236                           
  2237                           ;State_Mchn.c: 199: Switch_Init = 1;
  2238  000EEA  0E01               	movlw	1
  2239  000EEC  0100               	movlb	0	; () banked
  2240  000EEE  6F8E               	movwf	_Switch_Init& (0+255),b
  2241  000EF0                     l231:
  2242  000EF0                     l9038:
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;State_Mchn.c: 201: }
  2246                           ;State_Mchn.c: 202: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  2247  000EF0  0E00               	movlw	0
  2248  000EF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  2249  000EF4  0E27               	movlw	39
  2250  000EF6  6E13               	movwf	GETxAPIxVAL@index,c
  2251  000EF8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2252  000EFC  C013  F0D3         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2253  000F00  C014  F0D4         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2254  000F04  0E00               	movlw	0
  2255  000F06  6E14               	movwf	GETxAPIxVAL@index+1,c
  2256  000F08  0E28               	movlw	40
  2257  000F0A  6E13               	movwf	GETxAPIxVAL@index,c
  2258  000F0C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2259  000F10  5013               	movf	?_GETxAPIxVAL,w,c
  2260  000F12  0100               	movlb	0	; () banked
  2261  000F14  19D3               	xorwf	??_Update_StateMchn& (0+255),w,b
  2262  000F16  E104               	bnz	u8830
  2263  000F18  5014               	movf	?_GETxAPIxVAL+1,w,c
  2264  000F1A  19D4               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2265  000F1C  B4D8               	btfsc	status,2,c
  2266  000F1E  D002               	goto	l232
  2267  000F20                     u8830:
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;State_Mchn.c: 203: {
  2271                           ;State_Mchn.c: 204: Switch_Init = 5;
  2272  000F20  0E05               	movlw	5
  2273  000F22  6F8E               	movwf	_Switch_Init& (0+255),b
  2274  000F24                     l232:
  2275                           
  2276                           ;State_Mchn.c: 205: }
  2277                           ;State_Mchn.c: 206: }
  2278                           ;State_Mchn.c: 207: Green_Led(2);
  2279                           
  2280                           ; BSR set to: 0
  2281                           
  2282                           ; BSR set to: 0
  2283  000F24  0E02               	movlw	2
  2284  000F26  ECCF  F01F         	call	_Green_Led
  2285                           
  2286                           ;State_Mchn.c: 208: break;
  2287  000F2A  D341               	goto	l310
  2288  000F2C  0E00               	movlw	0
  2289  000F2E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2290  000F30  0E28               	movlw	40
  2291  000F32  6E13               	movwf	GETxAPIxVAL@index,c
  2292  000F34  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2293  000F38  0E09               	movlw	9
  2294  000F3A  1813               	xorwf	?_GETxAPIxVAL,w,c
  2295  000F3C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2296  000F3E  B4D8               	btfsc	status,2,c
  2297  000F40  D003               	goto	l234
  2298                           
  2299                           ;State_Mchn.c: 211: {
  2300                           ;State_Mchn.c: 212: Switch_Init = 6;
  2301  000F42  0E06               	movlw	6
  2302  000F44  0100               	movlb	0	; () banked
  2303  000F46  6F8E               	movwf	_Switch_Init& (0+255),b
  2304  000F48                     l234:
  2305                           
  2306                           ;State_Mchn.c: 213: }
  2307                           ;State_Mchn.c: 214: if(GETxAPIxVAL(40) == 9)
  2308                           
  2309                           ; BSR set to: 0
  2310  000F48  0E00               	movlw	0
  2311  000F4A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2312  000F4C  0E28               	movlw	40
  2313  000F4E  6E13               	movwf	GETxAPIxVAL@index,c
  2314  000F50  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2315  000F54  0E09               	movlw	9
  2316  000F56  1813               	xorwf	?_GETxAPIxVAL,w,c
  2317  000F58  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2318  000F5A  A4D8               	btfss	status,2,c
  2319  000F5C  D328               	goto	l310
  2320                           
  2321                           ;State_Mchn.c: 215: {
  2322                           ;State_Mchn.c: 216: Switch_Init = 9;
  2323  000F5E  0E09               	movlw	9
  2324  000F60  D604               	goto	L1
  2325  000F62                     
  2326                           ; BSR set to: 0
  2327                           
  2328                           ; BSR set to: 0
  2329  000F62  0E08               	movlw	8
  2330  000F64  D603               	goto	L2
  2331  000F66                     
  2332                           ; BSR set to: 0
  2333                           
  2334                           ; BSR set to: 0
  2335  000F66  0E00               	movlw	0
  2336  000F68  6E14               	movwf	GETxAPIxVAL@index+1,c
  2337  000F6A  0E20               	movlw	32
  2338  000F6C  6E13               	movwf	GETxAPIxVAL@index,c
  2339  000F6E  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2340  000F72  5013               	movf	?_GETxAPIxVAL,w,c
  2341  000F74  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2342  000F76  A4D8               	btfss	status,2,c
  2343  000F78  D00A               	goto	u8870
  2344  000F7A  0E00               	movlw	0
  2345  000F7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2346  000F7E  0E46               	movlw	70
  2347  000F80  6E13               	movwf	GETxAPIxVAL@index,c
  2348  000F82  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2349  000F86  5013               	movf	?_GETxAPIxVAL,w,c
  2350  000F88  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2351  000F8A  B4D8               	btfsc	status,2,c
  2352  000F8C  D011               	goto	l238
  2353  000F8E                     u8870:
  2354                           
  2355                           ;State_Mchn.c: 224: {
  2356                           ;State_Mchn.c: 225: Switch_Main = 2;
  2357  000F8E  0E02               	movlw	2
  2358  000F90  0100               	movlb	0	; () banked
  2359  000F92  6FE7               	movwf	_Switch_Main& (0+255),b
  2360                           
  2361                           ;State_Mchn.c: 226: Switch_Init = 0;
  2362  000F94  0E00               	movlw	0
  2363  000F96  6F8E               	movwf	_Switch_Init& (0+255),b
  2364                           
  2365                           ;State_Mchn.c: 227: Stop_Program = 0;
  2366  000F98  0E00               	movlw	0
  2367  000F9A  6F89               	movwf	_Stop_Program& (0+255),b
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;State_Mchn.c: 228: SETxAPIxVAL(70, 0);
  2371  000F9C  0E00               	movlw	0
  2372  000F9E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2373  000FA0  0E46               	movlw	70
  2374  000FA2  6E19               	movwf	SETxAPIxVAL@index,c
  2375  000FA4  0E00               	movlw	0
  2376  000FA6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2377  000FA8  0E00               	movlw	0
  2378  000FAA  6E1B               	movwf	SETxAPIxVAL@value,c
  2379  000FAC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  2380  000FB0                     l238:
  2381                           
  2382                           ;State_Mchn.c: 229: }
  2383                           ;State_Mchn.c: 230: Green_Led(3);
  2384  000FB0  0E03               	movlw	3
  2385  000FB2  ECCF  F01F         	call	_Green_Led
  2386                           
  2387                           ;State_Mchn.c: 231: Red_Led(0);
  2388  000FB6  0E00               	movlw	0
  2389  000FB8  EC8F  F01F         	call	_Red_Led
  2390                           
  2391                           ;State_Mchn.c: 232: break;
  2392  000FBC  D2F8               	goto	l310
  2393  000FBE  0E00               	movlw	0
  2394  000FC0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2395  000FC2  0E27               	movlw	39
  2396  000FC4  6E13               	movwf	GETxAPIxVAL@index,c
  2397  000FC6  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2398  000FCA  0E05               	movlw	5
  2399  000FCC  1813               	xorwf	?_GETxAPIxVAL,w,c
  2400  000FCE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2401  000FD0  B4D8               	btfsc	status,2,c
  2402  000FD2  D014               	goto	l243
  2403  000FD4  D02B               	goto	l245
  2404  000FD6  0E01               	movlw	1
  2405  000FD8  D005               	goto	L5
  2406  000FDA                     
  2407                           ; BSR set to: 0
  2408  000FDA  0E05               	movlw	5
  2409  000FDC  D003               	goto	L5
  2410  000FDE                     
  2411                           ; BSR set to: 0
  2412  000FDE  0E02               	movlw	2
  2413  000FE0  D001               	goto	L5
  2414  000FE2                     
  2415                           ; BSR set to: 0
  2416  000FE2  0E03               	movlw	3
  2417  000FE4                     L5:
  2418  000FE4  0100               	movlb	0	; () banked
  2419  000FE6  6F8D               	movwf	_Switch_Program& (0+255),b
  2420                           
  2421                           ;State_Mchn.c: 248: Switch_Init = 7;
  2422  000FE8  0E07               	movlw	7
  2423  000FEA  6F8E               	movwf	_Switch_Init& (0+255),b
  2424                           
  2425                           ;State_Mchn.c: 249: break;
  2426  000FEC  D01F               	goto	l245
  2427  000FEE                     
  2428                           ; BSR set to: 0
  2429  000FEE  0E08               	movlw	8
  2430  000FF0  0100               	movlb	0	; () banked
  2431  000FF2  6F8E               	movwf	_Switch_Init& (0+255),b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;State_Mchn.c: 251: Red_Led(1);
  2435  000FF4  0E01               	movlw	1
  2436  000FF6  EC8F  F01F         	call	_Red_Led
  2437                           
  2438                           ;State_Mchn.c: 253: }
  2439                           
  2440                           ;State_Mchn.c: 252: break;
  2441  000FFA  D018               	goto	l245
  2442  000FFC                     l243:
  2443  000FFC  0E00               	movlw	0
  2444  000FFE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2445  001000  0E28               	movlw	40
  2446  001002  6E13               	movwf	GETxAPIxVAL@index,c
  2447  001004  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2448                           
  2449                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2450                           ; Switch size 1, requested type "space"
  2451                           ; Number of cases is 1, Range of values is 0 to 0
  2452                           ; switch strategies available:
  2453                           ; Name         Instructions Cycles
  2454                           ; simple_byte            4     3 (average)
  2455                           ;	Chosen strategy is simple_byte
  2456  001008  5014               	movf	?_GETxAPIxVAL+1,w,c
  2457  00100A  0A00               	xorlw	0	; case 0
  2458  00100C  A4D8               	btfss	status,2,c
  2459  00100E  D7EF               	goto	l249
  2460                           
  2461                           ; Switch size 1, requested type "space"
  2462                           ; Number of cases is 4, Range of values is 1 to 4
  2463                           ; switch strategies available:
  2464                           ; Name         Instructions Cycles
  2465                           ; simple_byte           13     7 (average)
  2466                           ;	Chosen strategy is simple_byte
  2467  001010  5013               	movf	?_GETxAPIxVAL,w,c
  2468  001012  0A01               	xorlw	1	; case 1
  2469  001014  B4D8               	btfsc	status,2,c
  2470  001016  D7DF               	goto	l244
  2471  001018  0A03               	xorlw	3	; case 2
  2472  00101A  B4D8               	btfsc	status,2,c
  2473  00101C  D7DE               	goto	l246
  2474  00101E  0A01               	xorlw	1	; case 3
  2475  001020  B4D8               	btfsc	status,2,c
  2476  001022  D7DD               	goto	l247
  2477  001024  0A07               	xorlw	7	; case 4
  2478  001026  B4D8               	btfsc	status,2,c
  2479  001028  D7DC               	goto	l248
  2480  00102A  D7E1               	goto	l249
  2481  00102C                     l245:
  2482                           
  2483                           ;State_Mchn.c: 254: }
  2484                           ;State_Mchn.c: 255: if(GETxAPIxVAL(40) == 5)
  2485  00102C  0E00               	movlw	0
  2486  00102E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2487  001030  0E28               	movlw	40
  2488  001032  6E13               	movwf	GETxAPIxVAL@index,c
  2489  001034  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2490  001038  0E05               	movlw	5
  2491  00103A  1813               	xorwf	?_GETxAPIxVAL,w,c
  2492  00103C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2493  00103E  B4D8               	btfsc	status,2,c
  2494  001040  D014               	goto	l251
  2495  001042  D02B               	goto	l253
  2496  001044  0E01               	movlw	1
  2497  001046  D005               	goto	L8
  2498  001048                     
  2499                           ; BSR set to: 0
  2500  001048  0E05               	movlw	5
  2501  00104A  D003               	goto	L8
  2502  00104C                     
  2503                           ; BSR set to: 0
  2504  00104C  0E02               	movlw	2
  2505  00104E  D001               	goto	L8
  2506  001050                     
  2507                           ; BSR set to: 0
  2508  001050  0E03               	movlw	3
  2509  001052                     L8:
  2510  001052  0100               	movlb	0	; () banked
  2511  001054  6F8D               	movwf	_Switch_Program& (0+255),b
  2512                           
  2513                           ;State_Mchn.c: 269: Switch_Init = 7;
  2514  001056  0E07               	movlw	7
  2515  001058  6F8E               	movwf	_Switch_Init& (0+255),b
  2516                           
  2517                           ;State_Mchn.c: 270: break;
  2518  00105A  D01F               	goto	l253
  2519  00105C                     
  2520                           ; BSR set to: 0
  2521  00105C  0E08               	movlw	8
  2522  00105E  0100               	movlb	0	; () banked
  2523  001060  6F8E               	movwf	_Switch_Init& (0+255),b
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;State_Mchn.c: 272: Red_Led(1);
  2527  001062  0E01               	movlw	1
  2528  001064  EC8F  F01F         	call	_Red_Led
  2529                           
  2530                           ;State_Mchn.c: 274: }
  2531                           
  2532                           ;State_Mchn.c: 273: break;
  2533  001068  D018               	goto	l253
  2534  00106A                     l251:
  2535  00106A  0E00               	movlw	0
  2536  00106C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2537  00106E  0E27               	movlw	39
  2538  001070  6E13               	movwf	GETxAPIxVAL@index,c
  2539  001072  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2540                           
  2541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2542                           ; Switch size 1, requested type "space"
  2543                           ; Number of cases is 1, Range of values is 0 to 0
  2544                           ; switch strategies available:
  2545                           ; Name         Instructions Cycles
  2546                           ; simple_byte            4     3 (average)
  2547                           ;	Chosen strategy is simple_byte
  2548  001076  5014               	movf	?_GETxAPIxVAL+1,w,c
  2549  001078  0A00               	xorlw	0	; case 0
  2550  00107A  A4D8               	btfss	status,2,c
  2551  00107C  D7EF               	goto	l257
  2552                           
  2553                           ; Switch size 1, requested type "space"
  2554                           ; Number of cases is 4, Range of values is 1 to 4
  2555                           ; switch strategies available:
  2556                           ; Name         Instructions Cycles
  2557                           ; simple_byte           13     7 (average)
  2558                           ;	Chosen strategy is simple_byte
  2559  00107E  5013               	movf	?_GETxAPIxVAL,w,c
  2560  001080  0A01               	xorlw	1	; case 1
  2561  001082  B4D8               	btfsc	status,2,c
  2562  001084  D7DF               	goto	l252
  2563  001086  0A03               	xorlw	3	; case 2
  2564  001088  B4D8               	btfsc	status,2,c
  2565  00108A  D7DE               	goto	l254
  2566  00108C  0A01               	xorlw	1	; case 3
  2567  00108E  B4D8               	btfsc	status,2,c
  2568  001090  D7DD               	goto	l255
  2569  001092  0A07               	xorlw	7	; case 4
  2570  001094  B4D8               	btfsc	status,2,c
  2571  001096  D7DC               	goto	l256
  2572  001098  D7E1               	goto	l257
  2573  00109A                     l253:
  2574                           
  2575                           ;State_Mchn.c: 275: }
  2576                           ;State_Mchn.c: 276: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2577  00109A  0E00               	movlw	0
  2578  00109C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2579  00109E  0E27               	movlw	39
  2580  0010A0  6E13               	movwf	GETxAPIxVAL@index,c
  2581  0010A2  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2582  0010A6  0E05               	movlw	5
  2583  0010A8  1813               	xorwf	?_GETxAPIxVAL,w,c
  2584  0010AA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2585  0010AC  B4D8               	btfsc	status,2,c
  2586  0010AE  D27F               	goto	l310
  2587  0010B0  0E00               	movlw	0
  2588  0010B2  6E14               	movwf	GETxAPIxVAL@index+1,c
  2589  0010B4  0E28               	movlw	40
  2590  0010B6  6E13               	movwf	GETxAPIxVAL@index,c
  2591  0010B8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2592  0010BC  0E05               	movlw	5
  2593  0010BE  1813               	xorwf	?_GETxAPIxVAL,w,c
  2594  0010C0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2595  0010C2  A4D8               	btfss	status,2,c
  2596  0010C4  D095               	goto	l259
  2597  0010C6  D273               	goto	l310
  2598  0010C8                     
  2599                           ; BSR set to: 0
  2600  0010C8  0E01               	movlw	1
  2601  0010CA  D066               	goto	L19
  2602  0010CC                     
  2603                           ; BSR set to: 0
  2604  0010CC  0E02               	movlw	2
  2605  0010CE  D064               	goto	L19
  2606  0010D0                     
  2607                           ; BSR set to: 0
  2608  0010D0  0E04               	movlw	4
  2609  0010D2  D062               	goto	L19
  2610  0010D4                     
  2611                           ; BSR set to: 0
  2612  0010D4  0E08               	movlw	8
  2613  0010D6  0100               	movlb	0	; () banked
  2614  0010D8  6F8E               	movwf	_Switch_Init& (0+255),b
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;State_Mchn.c: 294: Red_Led(1);
  2618  0010DA  0E01               	movlw	1
  2619  0010DC  EC8F  F01F         	call	_Red_Led
  2620                           
  2621                           ;State_Mchn.c: 296: }
  2622                           
  2623                           ;State_Mchn.c: 295: break;
  2624  0010E0  D266               	goto	l310
  2625  0010E2  0E00               	movlw	0
  2626  0010E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2627  0010E6  0E28               	movlw	40
  2628  0010E8  6E13               	movwf	GETxAPIxVAL@index,c
  2629  0010EA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2630                           
  2631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2632                           ; Switch size 1, requested type "space"
  2633                           ; Number of cases is 1, Range of values is 0 to 0
  2634                           ; switch strategies available:
  2635                           ; Name         Instructions Cycles
  2636                           ; simple_byte            4     3 (average)
  2637                           ;	Chosen strategy is simple_byte
  2638  0010EE  5014               	movf	?_GETxAPIxVAL+1,w,c
  2639  0010F0  0A00               	xorlw	0	; case 0
  2640  0010F2  A4D8               	btfss	status,2,c
  2641  0010F4  D7EF               	goto	l267
  2642                           
  2643                           ; Switch size 1, requested type "space"
  2644                           ; Number of cases is 4, Range of values is 1 to 4
  2645                           ; switch strategies available:
  2646                           ; Name         Instructions Cycles
  2647                           ; simple_byte           13     7 (average)
  2648                           ;	Chosen strategy is simple_byte
  2649  0010F6  5013               	movf	?_GETxAPIxVAL,w,c
  2650  0010F8  0A01               	xorlw	1	; case 1
  2651  0010FA  B4D8               	btfsc	status,2,c
  2652  0010FC  D051               	goto	l291
  2653  0010FE  0A03               	xorlw	3	; case 2
  2654  001100  B4D8               	btfsc	status,2,c
  2655  001102  D7E2               	goto	l264
  2656  001104  0A01               	xorlw	1	; case 3
  2657  001106  B4D8               	btfsc	status,2,c
  2658  001108  D7E1               	goto	l265
  2659  00110A  0A07               	xorlw	7	; case 4
  2660  00110C  B4D8               	btfsc	status,2,c
  2661  00110E  D7E0               	goto	l266
  2662  001110  D7E1               	goto	l267
  2663  001112                     
  2664                           ; BSR set to: 0
  2665  001112  0E00               	movlw	0
  2666  001114  D041               	goto	L19
  2667  001116                     
  2668                           ; BSR set to: 0
  2669  001116  0E08               	movlw	8
  2670  001118  0100               	movlb	0	; () banked
  2671  00111A  6F8E               	movwf	_Switch_Init& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;State_Mchn.c: 312: Red_Led(1);
  2675  00111C  0E01               	movlw	1
  2676  00111E  EC8F  F01F         	call	_Red_Led
  2677                           
  2678                           ;State_Mchn.c: 314: }
  2679                           
  2680                           ;State_Mchn.c: 313: break;
  2681  001122  D245               	goto	l310
  2682  001124  0E00               	movlw	0
  2683  001126  6E14               	movwf	GETxAPIxVAL@index+1,c
  2684  001128  0E28               	movlw	40
  2685  00112A  6E13               	movwf	GETxAPIxVAL@index,c
  2686  00112C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2687                           
  2688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2689                           ; Switch size 1, requested type "space"
  2690                           ; Number of cases is 1, Range of values is 0 to 0
  2691                           ; switch strategies available:
  2692                           ; Name         Instructions Cycles
  2693                           ; simple_byte            4     3 (average)
  2694                           ;	Chosen strategy is simple_byte
  2695  001130  5014               	movf	?_GETxAPIxVAL+1,w,c
  2696  001132  0A00               	xorlw	0	; case 0
  2697  001134  A4D8               	btfss	status,2,c
  2698  001136  D7EF               	goto	l276
  2699                           
  2700                           ; Switch size 1, requested type "space"
  2701                           ; Number of cases is 4, Range of values is 1 to 4
  2702                           ; switch strategies available:
  2703                           ; Name         Instructions Cycles
  2704                           ; simple_byte           13     7 (average)
  2705                           ;	Chosen strategy is simple_byte
  2706  001138  5013               	movf	?_GETxAPIxVAL,w,c
  2707  00113A  0A01               	xorlw	1	; case 1
  2708  00113C  B4D8               	btfsc	status,2,c
  2709  00113E  D7C4               	goto	l264
  2710  001140  0A03               	xorlw	3	; case 2
  2711  001142  B4D8               	btfsc	status,2,c
  2712  001144  D02D               	goto	l291
  2713  001146  0A01               	xorlw	1	; case 3
  2714  001148  B4D8               	btfsc	status,2,c
  2715  00114A  D7E3               	goto	l274
  2716  00114C  0A07               	xorlw	7	; case 4
  2717  00114E  B4D8               	btfsc	status,2,c
  2718  001150  D020               	goto	l289
  2719  001152  D7E1               	goto	l276
  2720  001154                     
  2721                           ; BSR set to: 0
  2722  001154  0E08               	movlw	8
  2723  001156  0100               	movlb	0	; () banked
  2724  001158  6F8E               	movwf	_Switch_Init& (0+255),b
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;State_Mchn.c: 330: Red_Led(1);
  2728  00115A  0E01               	movlw	1
  2729  00115C  EC8F  F01F         	call	_Red_Led
  2730                           
  2731                           ;State_Mchn.c: 332: }
  2732                           
  2733                           ;State_Mchn.c: 331: break;
  2734  001160  D226               	goto	l310
  2735  001162  0E00               	movlw	0
  2736  001164  6E14               	movwf	GETxAPIxVAL@index+1,c
  2737  001166  0E28               	movlw	40
  2738  001168  6E13               	movwf	GETxAPIxVAL@index,c
  2739  00116A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2740                           
  2741                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2742                           ; Switch size 1, requested type "space"
  2743                           ; Number of cases is 1, Range of values is 0 to 0
  2744                           ; switch strategies available:
  2745                           ; Name         Instructions Cycles
  2746                           ; simple_byte            4     3 (average)
  2747                           ;	Chosen strategy is simple_byte
  2748  00116E  5014               	movf	?_GETxAPIxVAL+1,w,c
  2749  001170  0A00               	xorlw	0	; case 0
  2750  001172  A4D8               	btfss	status,2,c
  2751  001174  D7EF               	goto	l284
  2752                           
  2753                           ; Switch size 1, requested type "space"
  2754                           ; Number of cases is 4, Range of values is 1 to 4
  2755                           ; switch strategies available:
  2756                           ; Name         Instructions Cycles
  2757                           ; simple_byte           13     7 (average)
  2758                           ;	Chosen strategy is simple_byte
  2759  001176  5013               	movf	?_GETxAPIxVAL,w,c
  2760  001178  0A01               	xorlw	1	; case 1
  2761  00117A  B4D8               	btfsc	status,2,c
  2762  00117C  D7A7               	goto	l265
  2763  00117E  0A03               	xorlw	3	; case 2
  2764  001180  B4D8               	btfsc	status,2,c
  2765  001182  D7C7               	goto	l274
  2766  001184  0A01               	xorlw	1	; case 3
  2767  001186  B4D8               	btfsc	status,2,c
  2768  001188  D00B               	goto	l291
  2769  00118A  0A07               	xorlw	7	; case 4
  2770  00118C  B4D8               	btfsc	status,2,c
  2771  00118E  D003               	goto	l290
  2772  001190  D7E1               	goto	l284
  2773  001192                     l289:
  2774                           
  2775                           ; BSR set to: 0
  2776  001192  0E06               	movlw	6
  2777  001194  D001               	goto	L19
  2778  001196                     l290:
  2779                           
  2780                           ; BSR set to: 0
  2781  001196  0E03               	movlw	3
  2782  001198                     L19:
  2783  001198  0100               	movlb	0	; () banked
  2784  00119A  6F8D               	movwf	_Switch_Program& (0+255),b
  2785                           
  2786                           ;State_Mchn.c: 343: Switch_Init = 7;
  2787  00119C  0E07               	movlw	7
  2788  00119E  D4E6               	goto	L2
  2789  0011A0                     l291:
  2790                           
  2791                           ; BSR set to: 0
  2792  0011A0  0E00               	movlw	0
  2793  0011A2  D4E3               	goto	L1
  2794  0011A4                     
  2795                           ; BSR set to: 0
  2796  0011A4  0E08               	movlw	8
  2797  0011A6  0100               	movlb	0	; () banked
  2798  0011A8  6F8E               	movwf	_Switch_Init& (0+255),b
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;State_Mchn.c: 348: Red_Led(1);
  2802  0011AA  0E01               	movlw	1
  2803  0011AC  EC8F  F01F         	call	_Red_Led
  2804                           
  2805                           ;State_Mchn.c: 350: }
  2806                           
  2807                           ;State_Mchn.c: 349: break;
  2808  0011B0  D1FE               	goto	l310
  2809  0011B2  0E00               	movlw	0
  2810  0011B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2811  0011B6  0E28               	movlw	40
  2812  0011B8  6E13               	movwf	GETxAPIxVAL@index,c
  2813  0011BA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2814                           
  2815                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2816                           ; Switch size 1, requested type "space"
  2817                           ; Number of cases is 1, Range of values is 0 to 0
  2818                           ; switch strategies available:
  2819                           ; Name         Instructions Cycles
  2820                           ; simple_byte            4     3 (average)
  2821                           ;	Chosen strategy is simple_byte
  2822  0011BE  5014               	movf	?_GETxAPIxVAL+1,w,c
  2823  0011C0  0A00               	xorlw	0	; case 0
  2824  0011C2  A4D8               	btfss	status,2,c
  2825  0011C4  D7EF               	goto	l292
  2826                           
  2827                           ; Switch size 1, requested type "space"
  2828                           ; Number of cases is 4, Range of values is 1 to 4
  2829                           ; switch strategies available:
  2830                           ; Name         Instructions Cycles
  2831                           ; simple_byte           13     7 (average)
  2832                           ;	Chosen strategy is simple_byte
  2833  0011C6  5013               	movf	?_GETxAPIxVAL,w,c
  2834  0011C8  0A01               	xorlw	1	; case 1
  2835  0011CA  B4D8               	btfsc	status,2,c
  2836  0011CC  D781               	goto	l266
  2837  0011CE  0A03               	xorlw	3	; case 2
  2838  0011D0  B4D8               	btfsc	status,2,c
  2839  0011D2  D7DF               	goto	l289
  2840  0011D4  0A01               	xorlw	1	; case 3
  2841  0011D6  B4D8               	btfsc	status,2,c
  2842  0011D8  D7DE               	goto	l290
  2843  0011DA  0A07               	xorlw	7	; case 4
  2844  0011DC  B4D8               	btfsc	status,2,c
  2845  0011DE  D7E0               	goto	l291
  2846  0011E0  D7E1               	goto	l292
  2847  0011E2  0E08               	movlw	8
  2848  0011E4  0100               	movlb	0	; () banked
  2849  0011E6  6F8E               	movwf	_Switch_Init& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;State_Mchn.c: 353: Red_Led(1);
  2853  0011E8  0E01               	movlw	1
  2854  0011EA  EC8F  F01F         	call	_Red_Led
  2855                           
  2856                           ;State_Mchn.c: 355: }
  2857                           
  2858                           ;State_Mchn.c: 354: break;
  2859  0011EE  D1DF               	goto	l310
  2860  0011F0                     l259:
  2861  0011F0  0E00               	movlw	0
  2862  0011F2  6E14               	movwf	GETxAPIxVAL@index+1,c
  2863  0011F4  0E27               	movlw	39
  2864  0011F6  6E13               	movwf	GETxAPIxVAL@index,c
  2865  0011F8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2866                           
  2867                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2868                           ; Switch size 1, requested type "space"
  2869                           ; Number of cases is 1, Range of values is 0 to 0
  2870                           ; switch strategies available:
  2871                           ; Name         Instructions Cycles
  2872                           ; simple_byte            4     3 (average)
  2873                           ;	Chosen strategy is simple_byte
  2874  0011FC  5014               	movf	?_GETxAPIxVAL+1,w,c
  2875  0011FE  0A00               	xorlw	0	; case 0
  2876  001200  A4D8               	btfss	status,2,c
  2877  001202  D7EF               	goto	l293
  2878                           
  2879                           ; Switch size 1, requested type "space"
  2880                           ; Number of cases is 4, Range of values is 1 to 4
  2881                           ; switch strategies available:
  2882                           ; Name         Instructions Cycles
  2883                           ; simple_byte           13     7 (average)
  2884                           ;	Chosen strategy is simple_byte
  2885  001204  5013               	movf	?_GETxAPIxVAL,w,c
  2886  001206  0A01               	xorlw	1	; case 1
  2887  001208  B4D8               	btfsc	status,2,c
  2888  00120A  D76B               	goto	l261
  2889  00120C  0A03               	xorlw	3	; case 2
  2890  00120E  B4D8               	btfsc	status,2,c
  2891  001210  D789               	goto	l270
  2892  001212  0A01               	xorlw	1	; case 3
  2893  001214  B4D8               	btfsc	status,2,c
  2894  001216  D7A5               	goto	l278
  2895  001218  0A07               	xorlw	7	; case 4
  2896  00121A  B4D8               	btfsc	status,2,c
  2897  00121C  D7CA               	goto	l286
  2898  00121E  D7E1               	goto	l293
  2899  001220  0E0B               	movlw	11
  2900  001222  D4A3               	goto	L1
  2901  001224                     
  2902                           ; BSR set to: 0
  2903                           
  2904                           ; BSR set to: 0
  2905  001224  0E00               	movlw	0
  2906  001226  6E14               	movwf	GETxAPIxVAL@index+1,c
  2907  001228  0E20               	movlw	32
  2908  00122A  6E13               	movwf	GETxAPIxVAL@index,c
  2909  00122C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2910  001230  5013               	movf	?_GETxAPIxVAL,w,c
  2911  001232  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2912  001234  A4D8               	btfss	status,2,c
  2913  001236  D00A               	goto	u8930
  2914  001238  0E00               	movlw	0
  2915  00123A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2916  00123C  0E46               	movlw	70
  2917  00123E  6E13               	movwf	GETxAPIxVAL@index,c
  2918  001240  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2919  001244  5013               	movf	?_GETxAPIxVAL,w,c
  2920  001246  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2921  001248  B4D8               	btfsc	status,2,c
  2922  00124A  D007               	goto	l296
  2923  00124C                     u8930:
  2924                           
  2925                           ;State_Mchn.c: 363: {
  2926                           ;State_Mchn.c: 364: Switch_Main = 3;
  2927  00124C  0E03               	movlw	3
  2928  00124E  0100               	movlb	0	; () banked
  2929  001250  6FE7               	movwf	_Switch_Main& (0+255),b
  2930                           
  2931                           ;State_Mchn.c: 365: Switch_Init = 0;
  2932  001252  0E00               	movlw	0
  2933  001254  6F8E               	movwf	_Switch_Init& (0+255),b
  2934                           
  2935                           ;State_Mchn.c: 366: Stop_Program = 0;
  2936  001256  0E00               	movlw	0
  2937  001258  6F89               	movwf	_Stop_Program& (0+255),b
  2938  00125A                     l296:
  2939                           
  2940                           ;State_Mchn.c: 367: }
  2941                           ;State_Mchn.c: 368: Green_Led(3);
  2942                           
  2943                           ; BSR set to: 0
  2944  00125A  0E03               	movlw	3
  2945  00125C  ECCF  F01F         	call	_Green_Led
  2946                           
  2947                           ;State_Mchn.c: 369: Red_Led(0);
  2948  001260  0E00               	movlw	0
  2949  001262  EC8F  F01F         	call	_Red_Led
  2950                           
  2951                           ;State_Mchn.c: 370: break;
  2952  001266  D1A3               	goto	l310
  2953  001268  0E00               	movlw	0
  2954  00126A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2955  00126C  0E27               	movlw	39
  2956  00126E  6E13               	movwf	GETxAPIxVAL@index,c
  2957  001270  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  2958  001274  0E05               	movlw	5
  2959  001276  1813               	xorwf	?_GETxAPIxVAL,w,c
  2960  001278  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2961  00127A  A4D8               	btfss	status,2,c
  2962  00127C  D012               	goto	l302
  2963  00127E                     u8940:
  2964                           
  2965                           ;State_Mchn.c: 373: {
  2966                           ;State_Mchn.c: 374: Switch_Program = 0;
  2967  00127E  0E00               	movlw	0
  2968  001280  D005               	goto	L23
  2969  001282                     
  2970                           ; BSR set to: 0
  2971  001282  0E01               	movlw	1
  2972  001284  D003               	goto	L23
  2973  001286                     
  2974                           ; BSR set to: 0
  2975  001286  0E03               	movlw	3
  2976  001288  D001               	goto	L23
  2977  00128A                     
  2978                           ; BSR set to: 0
  2979  00128A  0E02               	movlw	2
  2980  00128C                     L23:
  2981  00128C  0100               	movlb	0	; () banked
  2982  00128E  6F8D               	movwf	_Switch_Program& (0+255),b
  2983  001290  0E0A               	movlw	10
  2984  001292  D46C               	goto	L2
  2985  001294                     
  2986                           ; BSR set to: 0
  2987  001294  0E0B               	movlw	11
  2988  001296  0100               	movlb	0	; () banked
  2989  001298  6F8E               	movwf	_Switch_Init& (0+255),b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;State_Mchn.c: 384: Red_Led(1);
  2993  00129A  0E01               	movlw	1
  2994  00129C  EC8F  F01F         	call	_Red_Led
  2995                           
  2996                           ;State_Mchn.c: 386: }
  2997                           
  2998                           ;State_Mchn.c: 385: break;
  2999  0012A0  D186               	goto	l310
  3000  0012A2                     l302:
  3001  0012A2  0E00               	movlw	0
  3002  0012A4  6E14               	movwf	GETxAPIxVAL@index+1,c
  3003  0012A6  0E27               	movlw	39
  3004  0012A8  6E13               	movwf	GETxAPIxVAL@index,c
  3005  0012AA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3006                           
  3007                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3008                           ; Switch size 1, requested type "space"
  3009                           ; Number of cases is 1, Range of values is 0 to 0
  3010                           ; switch strategies available:
  3011                           ; Name         Instructions Cycles
  3012                           ; simple_byte            4     3 (average)
  3013                           ;	Chosen strategy is simple_byte
  3014  0012AE  5014               	movf	?_GETxAPIxVAL+1,w,c
  3015  0012B0  0A00               	xorlw	0	; case 0
  3016  0012B2  A4D8               	btfss	status,2,c
  3017  0012B4  D7EF               	goto	l308
  3018                           
  3019                           ; Switch size 1, requested type "space"
  3020                           ; Number of cases is 4, Range of values is 1 to 4
  3021                           ; switch strategies available:
  3022                           ; Name         Instructions Cycles
  3023                           ; simple_byte           13     7 (average)
  3024                           ;	Chosen strategy is simple_byte
  3025  0012B6  5013               	movf	?_GETxAPIxVAL,w,c
  3026  0012B8  0A01               	xorlw	1	; case 1
  3027  0012BA  B4D8               	btfsc	status,2,c
  3028  0012BC  D7E2               	goto	l303
  3029  0012BE  0A03               	xorlw	3	; case 2
  3030  0012C0  B4D8               	btfsc	status,2,c
  3031  0012C2  D7E1               	goto	l305
  3032  0012C4  0A01               	xorlw	1	; case 3
  3033  0012C6  B4D8               	btfsc	status,2,c
  3034  0012C8  D7DA               	goto	u8940
  3035  0012CA  0A07               	xorlw	7	; case 4
  3036  0012CC  B4D8               	btfsc	status,2,c
  3037  0012CE  D7DD               	goto	l307
  3038  0012D0  D7E1               	goto	l308
  3039  0012D2  0E00               	movlw	0
  3040  0012D4  0100               	movlb	0	; () banked
  3041  0012D6  6F8E               	movwf	_Switch_Init& (0+255),b
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;State_Mchn.c: 390: Red_Led(1);
  3045  0012D8  0E01               	movlw	1
  3046  0012DA  EC8F  F01F         	call	_Red_Led
  3047                           
  3048                           ;State_Mchn.c: 392: }
  3049                           
  3050                           ;State_Mchn.c: 391: break;
  3051  0012DE  D167               	goto	l310
  3052  0012E0                     l209:
  3053  0012E0  0100               	movlb	0	; () banked
  3054  0012E2  518E               	movf	_Switch_Init& (0+255),w,b
  3055                           
  3056                           ; Switch size 1, requested type "space"
  3057                           ; Number of cases is 12, Range of values is 0 to 11
  3058                           ; switch strategies available:
  3059                           ; Name         Instructions Cycles
  3060                           ; simple_byte           37    19 (average)
  3061                           ;	Chosen strategy is simple_byte
  3062  0012E4  0A00               	xorlw	0	; case 0
  3063  0012E6  B4D8               	btfsc	status,2,c
  3064  0012E8  D423               	goto	l210
  3065  0012EA  0A01               	xorlw	1	; case 1
  3066  0012EC  B4D8               	btfsc	status,2,c
  3067  0012EE  D428               	goto	l212
  3068  0012F0  0A03               	xorlw	3	; case 2
  3069  0012F2  B4D8               	btfsc	status,2,c
  3070  0012F4  D4AF               	goto	l219
  3071  0012F6  0A01               	xorlw	1	; case 3
  3072  0012F8  B4D8               	btfsc	status,2,c
  3073  0012FA  D4F3               	goto	l221
  3074  0012FC  0A07               	xorlw	7	; case 4
  3075  0012FE  B4D8               	btfsc	status,2,c
  3076  001300  D589               	goto	l229
  3077  001302  0A01               	xorlw	1	; case 5
  3078  001304  B4D8               	btfsc	status,2,c
  3079  001306  D612               	goto	l233
  3080  001308  0A03               	xorlw	3	; case 6
  3081  00130A  B4D8               	btfsc	status,2,c
  3082  00130C  D62A               	goto	l236
  3083  00130E  0A01               	xorlw	1	; case 7
  3084  001310  B4D8               	btfsc	status,2,c
  3085  001312  D629               	goto	l237
  3086  001314  0A0F               	xorlw	15	; case 8
  3087  001316  B4D8               	btfsc	status,2,c
  3088  001318  D652               	goto	l241
  3089  00131A  0A01               	xorlw	1	; case 9
  3090  00131C  B4D8               	btfsc	status,2,c
  3091  00131E  D780               	goto	l294
  3092  001320  0A03               	xorlw	3	; case 10
  3093  001322  B4D8               	btfsc	status,2,c
  3094  001324  D77F               	goto	l295
  3095  001326  0A01               	xorlw	1	; case 11
  3096  001328  B4D8               	btfsc	status,2,c
  3097  00132A  D79E               	goto	l299
  3098  00132C  D7D2               	goto	l309
  3099  00132E                     
  3100                           ; BSR set to: 0
  3101                           
  3102                           ; BSR set to: 0
  3103  00132E  0E01               	movlw	1
  3104  001330  6FD1               	movwf	Train_Path@To& (0+255),b
  3105  001332  0E03               	movlw	3
  3106  001334  EC2B  F011         	call	_Train_Path
  3107  001338  0900               	iorlw	0
  3108  00133A  A4D8               	btfss	status,2,c
  3109  00133C  D087               	goto	l316
  3110                           
  3111                           ;State_Mchn.c: 399: {
  3112                           ;State_Mchn.c: 400: Switch_Program = 1;
  3113  00133E  0E01               	movlw	1
  3114  001340  0100               	movlb	0	; () banked
  3115  001342  6F8D               	movwf	_Switch_Program& (0+255),b
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;State_Mchn.c: 401: EEPROMxSTORE();
  3119  001344  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3120  001348                     l9230:
  3121                           
  3122                           ;State_Mchn.c: 402: if(Stop_Program == 1)
  3123  001348  0100               	movlb	0	; () banked
  3124  00134A  0589               	decf	_Stop_Program& (0+255),w,b
  3125  00134C  A4D8               	btfss	status,2,c
  3126  00134E  D07E               	goto	l316
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;State_Mchn.c: 403: {
  3130                           ;State_Mchn.c: 404: Switch_Main = 1;
  3131  001350  0E01               	movlw	1
  3132  001352  6FE7               	movwf	_Switch_Main& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;State_Mchn.c: 406: }
  3136                           ;State_Mchn.c: 407: }
  3137                           ;State_Mchn.c: 408: break;
  3138                           
  3139                           ; BSR set to: 0
  3140  001354  D07B               	goto	l316
  3141  001356                     
  3142                           ; BSR set to: 0
  3143                           
  3144                           ; BSR set to: 0
  3145  001356  0E03               	movlw	3
  3146  001358  6FD1               	movwf	Train_Path@To& (0+255),b
  3147  00135A  0E02               	movlw	2
  3148  00135C  EC2B  F011         	call	_Train_Path
  3149  001360  0900               	iorlw	0
  3150  001362  A4D8               	btfss	status,2,c
  3151  001364  D073               	goto	l316
  3152                           
  3153                           ;State_Mchn.c: 411: {
  3154                           ;State_Mchn.c: 412: Switch_Program = 2;
  3155  001366  0E02               	movlw	2
  3156  001368  0100               	movlb	0	; () banked
  3157  00136A  6F8D               	movwf	_Switch_Program& (0+255),b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;State_Mchn.c: 413: EEPROMxSTORE();
  3161  00136C  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3162  001370  D7EB               	goto	l9230
  3163  001372                     
  3164                           ; BSR set to: 0
  3165                           
  3166                           ; BSR set to: 0
  3167  001372  0E04               	movlw	4
  3168  001374  6FD1               	movwf	Train_Path@To& (0+255),b
  3169  001376  0E01               	movlw	1
  3170  001378  EC2B  F011         	call	_Train_Path
  3171  00137C  0900               	iorlw	0
  3172  00137E  A4D8               	btfss	status,2,c
  3173  001380  D065               	goto	l316
  3174                           
  3175                           ;State_Mchn.c: 423: {
  3176                           ;State_Mchn.c: 424: Switch_Program = 3;
  3177  001382  0E03               	movlw	3
  3178  001384  0100               	movlb	0	; () banked
  3179  001386  6F8D               	movwf	_Switch_Program& (0+255),b
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;State_Mchn.c: 425: EEPROMxSTORE();
  3183  001388  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3184  00138C  D7DD               	goto	l9230
  3185  00138E                     
  3186                           ; BSR set to: 0
  3187                           
  3188                           ; BSR set to: 0
  3189  00138E  0E01               	movlw	1
  3190  001390  6FD1               	movwf	Train_Path@To& (0+255),b
  3191  001392  0E03               	movlw	3
  3192  001394  EC2B  F011         	call	_Train_Path
  3193  001398  0900               	iorlw	0
  3194  00139A  A4D8               	btfss	status,2,c
  3195  00139C  D057               	goto	l316
  3196                           
  3197                           ;State_Mchn.c: 435: {
  3198                           ;State_Mchn.c: 436: Switch_Program = 4;
  3199  00139E  0E04               	movlw	4
  3200  0013A0  0100               	movlb	0	; () banked
  3201  0013A2  6F8D               	movwf	_Switch_Program& (0+255),b
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;State_Mchn.c: 437: EEPROMxSTORE();
  3205  0013A4  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3206  0013A8  D7CF               	goto	l9230
  3207  0013AA                     
  3208                           ; BSR set to: 0
  3209                           
  3210                           ; BSR set to: 0
  3211  0013AA  0E02               	movlw	2
  3212  0013AC  6FD1               	movwf	Train_Path@To& (0+255),b
  3213  0013AE  0E04               	movlw	4
  3214  0013B0  EC2B  F011         	call	_Train_Path
  3215  0013B4  0900               	iorlw	0
  3216  0013B6  A4D8               	btfss	status,2,c
  3217  0013B8  D049               	goto	l316
  3218                           
  3219                           ;State_Mchn.c: 447: {
  3220                           ;State_Mchn.c: 448: Switch_Program = 5;
  3221  0013BA  0E05               	movlw	5
  3222  0013BC  0100               	movlb	0	; () banked
  3223  0013BE  6F8D               	movwf	_Switch_Program& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;State_Mchn.c: 449: EEPROMxSTORE();
  3227  0013C0  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3228  0013C4  D7C1               	goto	l9230
  3229  0013C6                     
  3230                           ; BSR set to: 0
  3231                           
  3232                           ; BSR set to: 0
  3233  0013C6  0E04               	movlw	4
  3234  0013C8  6FD1               	movwf	Train_Path@To& (0+255),b
  3235  0013CA  0E01               	movlw	1
  3236  0013CC  EC2B  F011         	call	_Train_Path
  3237  0013D0  0900               	iorlw	0
  3238  0013D2  A4D8               	btfss	status,2,c
  3239  0013D4  D03B               	goto	l316
  3240                           
  3241                           ;State_Mchn.c: 459: {
  3242                           ;State_Mchn.c: 460: Switch_Program = 6;
  3243  0013D6  0E06               	movlw	6
  3244  0013D8  0100               	movlb	0	; () banked
  3245  0013DA  6F8D               	movwf	_Switch_Program& (0+255),b
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;State_Mchn.c: 461: EEPROMxSTORE();
  3249  0013DC  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3250  0013E0  D7B3               	goto	l9230
  3251  0013E2                     
  3252                           ; BSR set to: 0
  3253                           
  3254                           ; BSR set to: 0
  3255  0013E2  0E03               	movlw	3
  3256  0013E4  6FD1               	movwf	Train_Path@To& (0+255),b
  3257  0013E6  0E02               	movlw	2
  3258  0013E8  EC2B  F011         	call	_Train_Path
  3259  0013EC  0900               	iorlw	0
  3260  0013EE  A4D8               	btfss	status,2,c
  3261  0013F0  D02D               	goto	l316
  3262                           
  3263                           ;State_Mchn.c: 471: {
  3264                           ;State_Mchn.c: 472: Switch_Program = 7;
  3265  0013F2  0E07               	movlw	7
  3266  0013F4  0100               	movlb	0	; () banked
  3267  0013F6  6F8D               	movwf	_Switch_Program& (0+255),b
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;State_Mchn.c: 473: EEPROMxSTORE();
  3271  0013F8  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3272  0013FC  D7A5               	goto	l9230
  3273  0013FE                     
  3274                           ; BSR set to: 0
  3275                           
  3276                           ; BSR set to: 0
  3277  0013FE  0E02               	movlw	2
  3278  001400  6FD1               	movwf	Train_Path@To& (0+255),b
  3279  001402  0E04               	movlw	4
  3280  001404  EC2B  F011         	call	_Train_Path
  3281  001408  0900               	iorlw	0
  3282  00140A  A4D8               	btfss	status,2,c
  3283  00140C  D01F               	goto	l316
  3284                           
  3285                           ;State_Mchn.c: 483: {
  3286                           ;State_Mchn.c: 484: Switch_Program = 0;
  3287  00140E  0E00               	movlw	0
  3288  001410  0100               	movlb	0	; () banked
  3289  001412  6F8D               	movwf	_Switch_Program& (0+255),b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;State_Mchn.c: 485: EEPROMxSTORE();
  3293  001414  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3294  001418  D797               	goto	l9230
  3295  00141A                     
  3296                           ; BSR set to: 0
  3297                           
  3298                           ; BSR set to: 0
  3299  00141A  518D               	movf	_Switch_Program& (0+255),w,b
  3300                           
  3301                           ; Switch size 1, requested type "space"
  3302                           ; Number of cases is 8, Range of values is 0 to 7
  3303                           ; switch strategies available:
  3304                           ; Name         Instructions Cycles
  3305                           ; simple_byte           25    13 (average)
  3306                           ;	Chosen strategy is simple_byte
  3307  00141C  0A00               	xorlw	0	; case 0
  3308  00141E  B4D8               	btfsc	status,2,c
  3309  001420  D786               	goto	l313
  3310  001422  0A01               	xorlw	1	; case 1
  3311  001424  B4D8               	btfsc	status,2,c
  3312  001426  D797               	goto	l317
  3313  001428  0A03               	xorlw	3	; case 2
  3314  00142A  B4D8               	btfsc	status,2,c
  3315  00142C  D7A2               	goto	l320
  3316  00142E  0A01               	xorlw	1	; case 3
  3317  001430  B4D8               	btfsc	status,2,c
  3318  001432  D7AD               	goto	l323
  3319  001434  0A07               	xorlw	7	; case 4
  3320  001436  B4D8               	btfsc	status,2,c
  3321  001438  D7B8               	goto	l326
  3322  00143A  0A01               	xorlw	1	; case 5
  3323  00143C  B4D8               	btfsc	status,2,c
  3324  00143E  D7C3               	goto	l329
  3325  001440  0A03               	xorlw	3	; case 6
  3326  001442  B4D8               	btfsc	status,2,c
  3327  001444  D7CE               	goto	l332
  3328  001446  0A01               	xorlw	1	; case 7
  3329  001448  B4D8               	btfsc	status,2,c
  3330  00144A  D7D9               	goto	l335
  3331  00144C                     l316:
  3332                           
  3333                           ;State_Mchn.c: 681: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3334                           
  3335                           ; BSR set to: 0
  3336  00144C  0E00               	movlw	0
  3337  00144E  6E14               	movwf	GETxAPIxVAL@index+1,c
  3338  001450  0E21               	movlw	33
  3339  001452  6E13               	movwf	GETxAPIxVAL@index,c
  3340  001454  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3341  001458  5013               	movf	?_GETxAPIxVAL,w,c
  3342  00145A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3343  00145C  A4D8               	btfss	status,2,c
  3344  00145E  D00A               	goto	u9120
  3345  001460  0E00               	movlw	0
  3346  001462  6E14               	movwf	GETxAPIxVAL@index+1,c
  3347  001464  0E47               	movlw	71
  3348  001466  6E13               	movwf	GETxAPIxVAL@index,c
  3349  001468  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3350  00146C  5013               	movf	?_GETxAPIxVAL,w,c
  3351  00146E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3352  001470  B4D8               	btfsc	status,2,c
  3353  001472  D00D               	goto	l339
  3354  001474                     u9120:
  3355                           
  3356                           ;State_Mchn.c: 682: {
  3357                           ;State_Mchn.c: 683: Stop_Program = 1;
  3358  001474  0E01               	movlw	1
  3359  001476  0100               	movlb	0	; () banked
  3360  001478  6F89               	movwf	_Stop_Program& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;State_Mchn.c: 684: SETxAPIxVAL(71, 0);
  3364  00147A  0E00               	movlw	0
  3365  00147C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3366  00147E  0E47               	movlw	71
  3367  001480  6E19               	movwf	SETxAPIxVAL@index,c
  3368  001482  0E00               	movlw	0
  3369  001484  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3370  001486  0E00               	movlw	0
  3371  001488  6E1B               	movwf	SETxAPIxVAL@value,c
  3372  00148A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  3373  00148E                     l339:
  3374                           
  3375                           ;State_Mchn.c: 685: }
  3376                           ;State_Mchn.c: 687: if(Stop_Program == 1)
  3377  00148E  0100               	movlb	0	; () banked
  3378  001490  0589               	decf	_Stop_Program& (0+255),w,b
  3379  001492  A4D8               	btfss	status,2,c
  3380  001494  D003               	goto	l342
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;State_Mchn.c: 688: {
  3384                           ;State_Mchn.c: 689: Red_Led(2);
  3385  001496  0E02               	movlw	2
  3386  001498  EC8F  F01F         	call	_Red_Led
  3387  00149C                     l342:
  3388                           
  3389                           ;State_Mchn.c: 690: }
  3390                           ;State_Mchn.c: 692: Green_Led(1);
  3391  00149C  0E01               	movlw	1
  3392  00149E  ECCF  F01F         	call	_Green_Led
  3393                           
  3394                           ;State_Mchn.c: 694: break;
  3395  0014A2  D085               	goto	l310
  3396  0014A4  0E01               	movlw	1
  3397  0014A6  0100               	movlb	0	; () banked
  3398  0014A8  6FD1               	movwf	Train_Path@To& (0+255),b
  3399  0014AA  0E03               	movlw	3
  3400  0014AC  EC2B  F011         	call	_Train_Path
  3401  0014B0  0900               	iorlw	0
  3402  0014B2  A4D8               	btfss	status,2,c
  3403  0014B4  D044               	goto	l348
  3404                           
  3405                           ;State_Mchn.c: 700: {
  3406                           ;State_Mchn.c: 701: Switch_Program = 1;
  3407  0014B6  0E01               	movlw	1
  3408  0014B8  0100               	movlb	0	; () banked
  3409  0014BA  6F8D               	movwf	_Switch_Program& (0+255),b
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;State_Mchn.c: 702: EEPROMxSTORE();
  3413  0014BC  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3414  0014C0                     l9326:
  3415                           
  3416                           ;State_Mchn.c: 703: if(Stop_Program == 1)
  3417  0014C0  0100               	movlb	0	; () banked
  3418  0014C2  0589               	decf	_Stop_Program& (0+255),w,b
  3419  0014C4  A4D8               	btfss	status,2,c
  3420  0014C6  D03B               	goto	l348
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;State_Mchn.c: 704: {
  3424                           ;State_Mchn.c: 705: Switch_Main = 1;
  3425  0014C8  0E01               	movlw	1
  3426  0014CA  6FE7               	movwf	_Switch_Main& (0+255),b
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;State_Mchn.c: 707: }
  3430                           ;State_Mchn.c: 708: }
  3431                           ;State_Mchn.c: 709: break;
  3432                           
  3433                           ; BSR set to: 0
  3434  0014CC  D038               	goto	l348
  3435  0014CE                     
  3436                           ; BSR set to: 0
  3437                           
  3438                           ; BSR set to: 0
  3439  0014CE  0E04               	movlw	4
  3440  0014D0  6FD1               	movwf	Train_Path@To& (0+255),b
  3441  0014D2  0E01               	movlw	1
  3442  0014D4  EC2B  F011         	call	_Train_Path
  3443  0014D8  0900               	iorlw	0
  3444  0014DA  A4D8               	btfss	status,2,c
  3445  0014DC  D030               	goto	l348
  3446                           
  3447                           ;State_Mchn.c: 712: {
  3448                           ;State_Mchn.c: 713: Switch_Program = 2;
  3449  0014DE  0E02               	movlw	2
  3450  0014E0  0100               	movlb	0	; () banked
  3451  0014E2  6F8D               	movwf	_Switch_Program& (0+255),b
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;State_Mchn.c: 714: EEPROMxSTORE();
  3455  0014E4  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3456  0014E8  D7EB               	goto	l9326
  3457  0014EA                     
  3458                           ; BSR set to: 0
  3459                           
  3460                           ; BSR set to: 0
  3461  0014EA  0E02               	movlw	2
  3462  0014EC  6FD1               	movwf	Train_Path@To& (0+255),b
  3463  0014EE  0E04               	movlw	4
  3464  0014F0  EC2B  F011         	call	_Train_Path
  3465  0014F4  0900               	iorlw	0
  3466  0014F6  A4D8               	btfss	status,2,c
  3467  0014F8  D022               	goto	l348
  3468                           
  3469                           ;State_Mchn.c: 724: {
  3470                           ;State_Mchn.c: 725: Switch_Program = 3;
  3471  0014FA  0E03               	movlw	3
  3472  0014FC  0100               	movlb	0	; () banked
  3473  0014FE  6F8D               	movwf	_Switch_Program& (0+255),b
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;State_Mchn.c: 726: EEPROMxSTORE();
  3477  001500  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3478  001504  D7DD               	goto	l9326
  3479  001506                     
  3480                           ; BSR set to: 0
  3481                           
  3482                           ; BSR set to: 0
  3483  001506  0E03               	movlw	3
  3484  001508  6FD1               	movwf	Train_Path@To& (0+255),b
  3485  00150A  0E02               	movlw	2
  3486  00150C  EC2B  F011         	call	_Train_Path
  3487  001510  0900               	iorlw	0
  3488  001512  A4D8               	btfss	status,2,c
  3489  001514  D014               	goto	l348
  3490                           
  3491                           ;State_Mchn.c: 736: {
  3492                           ;State_Mchn.c: 737: Switch_Program = 0;
  3493  001516  0E00               	movlw	0
  3494  001518  0100               	movlb	0	; () banked
  3495  00151A  6F8D               	movwf	_Switch_Program& (0+255),b
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;State_Mchn.c: 738: EEPROMxSTORE();
  3499  00151C  EC40  F016         	call	_EEPROMxSTORE	;wreg free
  3500  001520  D7CF               	goto	l9326
  3501  001522                     
  3502                           ; BSR set to: 0
  3503  001522  0100               	movlb	0	; () banked
  3504  001524  518D               	movf	_Switch_Program& (0+255),w,b
  3505                           
  3506                           ; Switch size 1, requested type "space"
  3507                           ; Number of cases is 4, Range of values is 0 to 3
  3508                           ; switch strategies available:
  3509                           ; Name         Instructions Cycles
  3510                           ; simple_byte           13     7 (average)
  3511                           ;	Chosen strategy is simple_byte
  3512  001526  0A00               	xorlw	0	; case 0
  3513  001528  B4D8               	btfsc	status,2,c
  3514  00152A  D7BC               	goto	l345
  3515  00152C  0A01               	xorlw	1	; case 1
  3516  00152E  B4D8               	btfsc	status,2,c
  3517  001530  D7CE               	goto	l349
  3518  001532  0A03               	xorlw	3	; case 2
  3519  001534  B4D8               	btfsc	status,2,c
  3520  001536  D7D9               	goto	l352
  3521  001538  0A01               	xorlw	1	; case 3
  3522  00153A  B4D8               	btfsc	status,2,c
  3523  00153C  D7E4               	goto	l355
  3524  00153E                     l348:
  3525                           
  3526                           ;State_Mchn.c: 932: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3527                           
  3528                           ; BSR set to: 0
  3529  00153E  0E00               	movlw	0
  3530  001540  6E14               	movwf	GETxAPIxVAL@index+1,c
  3531  001542  0E21               	movlw	33
  3532  001544  6E13               	movwf	GETxAPIxVAL@index,c
  3533  001546  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3534  00154A  5013               	movf	?_GETxAPIxVAL,w,c
  3535  00154C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3536  00154E  A4D8               	btfss	status,2,c
  3537  001550  D00A               	goto	u9230
  3538  001552  0E00               	movlw	0
  3539  001554  6E14               	movwf	GETxAPIxVAL@index+1,c
  3540  001556  0E47               	movlw	71
  3541  001558  6E13               	movwf	GETxAPIxVAL@index,c
  3542  00155A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3543  00155E  5013               	movf	?_GETxAPIxVAL,w,c
  3544  001560  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3545  001562  B4D8               	btfsc	status,2,c
  3546  001564  D00D               	goto	l359
  3547  001566                     u9230:
  3548                           
  3549                           ;State_Mchn.c: 933: {
  3550                           ;State_Mchn.c: 934: Stop_Program = 1;
  3551  001566  0E01               	movlw	1
  3552  001568  0100               	movlb	0	; () banked
  3553  00156A  6F89               	movwf	_Stop_Program& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;State_Mchn.c: 935: SETxAPIxVAL(71, 0);
  3557  00156C  0E00               	movlw	0
  3558  00156E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3559  001570  0E47               	movlw	71
  3560  001572  6E19               	movwf	SETxAPIxVAL@index,c
  3561  001574  0E00               	movlw	0
  3562  001576  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3563  001578  0E00               	movlw	0
  3564  00157A  6E1B               	movwf	SETxAPIxVAL@value,c
  3565  00157C  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  3566  001580                     l359:
  3567                           
  3568                           ;State_Mchn.c: 936: }
  3569                           ;State_Mchn.c: 938: if(Stop_Program == 1)
  3570  001580  0100               	movlb	0	; () banked
  3571  001582  0589               	decf	_Stop_Program& (0+255),w,b
  3572  001584  A4D8               	btfss	status,2,c
  3573  001586  D003               	goto	l362
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;State_Mchn.c: 939: {
  3577                           ;State_Mchn.c: 940: Red_Led(2);
  3578  001588  0E02               	movlw	2
  3579  00158A  EC8F  F01F         	call	_Red_Led
  3580  00158E                     l362:
  3581                           
  3582                           ;State_Mchn.c: 941: }
  3583                           ;State_Mchn.c: 943: Green_Led(1);
  3584  00158E  0E01               	movlw	1
  3585  001590  ECCF  F01F         	call	_Green_Led
  3586                           
  3587                           ;State_Mchn.c: 948: }
  3588                           
  3589                           ;State_Mchn.c: 947: default : break;
  3590                           
  3591                           ;State_Mchn.c: 945: break;
  3592  001594  D00C               	goto	l310
  3593  001596                     l187:
  3594  001596  0100               	movlb	0	; () banked
  3595  001598  51E7               	movf	_Switch_Main& (0+255),w,b
  3596                           
  3597                           ; Switch size 1, requested type "space"
  3598                           ; Number of cases is 3, Range of values is 1 to 3
  3599                           ; switch strategies available:
  3600                           ; Name         Instructions Cycles
  3601                           ; simple_byte           10     6 (average)
  3602                           ;	Chosen strategy is simple_byte
  3603  00159A  0A01               	xorlw	1	; case 1
  3604  00159C  B4D8               	btfsc	status,2,c
  3605  00159E  EF6D  F004         	goto	l188
  3606  0015A2  0A03               	xorlw	3	; case 2
  3607  0015A4  B4D8               	btfsc	status,2,c
  3608  0015A6  D739               	goto	l312
  3609  0015A8  0A01               	xorlw	1	; case 3
  3610  0015AA  B4D8               	btfsc	status,2,c
  3611  0015AC  D7BA               	goto	l344
  3612  0015AE                     l310:
  3613                           
  3614                           ;State_Mchn.c: 949: SETxAPIxVAL(63, Switch_Main);
  3615                           
  3616                           ; BSR set to: 0
  3617  0015AE  0E00               	movlw	0
  3618  0015B0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3619  0015B2  0E3F               	movlw	63
  3620  0015B4  6E19               	movwf	SETxAPIxVAL@index,c
  3621  0015B6  C0E7  F01B         	movff	_Switch_Main,SETxAPIxVAL@value
  3622  0015BA  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3623  0015BC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  3624                           
  3625                           ;State_Mchn.c: 950: SETxAPIxVAL(80, Switch_Program);
  3626  0015C0  0E00               	movlw	0
  3627  0015C2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3628  0015C4  0E50               	movlw	80
  3629  0015C6  6E19               	movwf	SETxAPIxVAL@index,c
  3630  0015C8  C08D  F01B         	movff	_Switch_Program,SETxAPIxVAL@value
  3631  0015CC  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3632  0015CE  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  3633  0015D2  0012               	return		;funcret
  3634  0015D4                     __end_of_Update_StateMchn:
  3635                           	opt stack 0
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           postinc0	equ	0xFEE
  3641                           wreg	equ	0xFE8
  3642                           postdec1	equ	0xFE5
  3643                           fsr1l	equ	0xFE1
  3644                           status	equ	0xFD8
  3645                           
  3646 ;; *************** function _Train_Path *****************
  3647 ;; Defined at:
  3648 ;;		line 968 in file "../State_Mchn.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  From            1    wreg     unsigned char 
  3651 ;;  To              1   23[BANK0 ] unsigned char 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  From            1   24[BANK0 ] unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      unsigned char 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3663 ;;      Params:         0       1       0       0       0       0       0       0       0
  3664 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3666 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3667 ;;Total ram usage:        2 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    7
  3670 ;; This function calls:
  3671 ;;		_GETxAPIxVAL
  3672 ;;		_Junction
  3673 ;;		_Left_Mountain_From_The_Left
  3674 ;;		_Left_Mountain_From_The_Right
  3675 ;;		_Right_Mountain_From_The_Left
  3676 ;;		_Right_Mountain_From_The_Right
  3677 ;;		_SETxAPIxVAL
  3678 ;;		_Train_Move_Left_Brake
  3679 ;;		_Train_Move_Left_Start
  3680 ;;		_Train_Move_Right_Brake
  3681 ;;		_Train_Move_Right_Start
  3682 ;; This function is called by:
  3683 ;;		_Update_StateMchn
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text2
  3688  002256                     __ptext2:
  3689                           	opt stack 0
  3690  002256                     _Train_Path:
  3691                           	opt stack 22
  3692                           
  3693                           ;incstack = 0
  3694                           ;Train_Path@From stored from wreg
  3695  002256  0100               	movlb	0	; () banked
  3696  002258  6FD2               	movwf	Train_Path@From& (0+255),b
  3697                           
  3698                           ;State_Mchn.c: 970: static char Return_Val = 1;
  3699                           ;State_Mchn.c: 972: SETxAPIxVAL(61, From);
  3700  00225A  0E00               	movlw	0
  3701  00225C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3702  00225E  0E3D               	movlw	61
  3703  002260  6E19               	movwf	SETxAPIxVAL@index,c
  3704  002262  C0D2  F01B         	movff	Train_Path@From,SETxAPIxVAL@value
  3705  002266  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3706  002268  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  3707                           
  3708                           ;State_Mchn.c: 973: SETxAPIxVAL(62, To);
  3709  00226C  0E00               	movlw	0
  3710  00226E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3711  002270  0E3E               	movlw	62
  3712  002272  6E19               	movwf	SETxAPIxVAL@index,c
  3713  002274  C0D1  F01B         	movff	Train_Path@To,SETxAPIxVAL@value
  3714  002278  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3715  00227A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  3716                           
  3717                           ;State_Mchn.c: 975: switch(Switch_Train_Path)
  3718  00227E  D1AC               	goto	l369
  3719  002280  0E00               	movlw	0
  3720  002282  6E1F               	movwf	Junction@Straight_Bend,c
  3721  002284  0E01               	movlw	1
  3722  002286  EC50  F015         	call	_Junction
  3723  00228A  0900               	iorlw	0
  3724  00228C  B4D8               	btfsc	status,2,c
  3725  00228E  D018               	goto	u7910
  3726  002290                     l373:
  3727                           
  3728                           ;State_Mchn.c: 983: }
  3729                           ;State_Mchn.c: 984: Return_Val = 1;
  3730  002290  0E01               	movlw	1
  3731  002292  0100               	movlb	0	; () banked
  3732  002294                     L40:
  3733  002294  6FE6               	movwf	Train_Path@Return_Val& (0+255),b
  3734                           
  3735                           ;State_Mchn.c: 985: break;
  3736  002296  D1CA               	goto	l382
  3737  002298                     
  3738                           ; BSR set to: 0
  3739                           
  3740                           ; BSR set to: 0
  3741  002298  0E01               	movlw	1
  3742  00229A  6E1F               	movwf	Junction@Straight_Bend,c
  3743  00229C  0E01               	movlw	1
  3744  00229E  EC50  F015         	call	_Junction
  3745  0022A2  D7F3               	goto	L57
  3746  0022A4                     
  3747                           ; BSR set to: 0
  3748                           
  3749                           ; BSR set to: 0
  3750  0022A4  0E01               	movlw	1
  3751  0022A6  6E1F               	movwf	Junction@Straight_Bend,c
  3752  0022A8  0E00               	movlw	0
  3753  0022AA  EC50  F015         	call	_Junction
  3754  0022AE  D7ED               	goto	L57
  3755  0022B0                     
  3756                           ; BSR set to: 0
  3757                           
  3758                           ; BSR set to: 0
  3759  0022B0  0E00               	movlw	0
  3760  0022B2  6E1F               	movwf	Junction@Straight_Bend,c
  3761  0022B4  0E00               	movlw	0
  3762  0022B6  EC50  F015         	call	_Junction
  3763  0022BA  0900               	iorlw	0
  3764  0022BC  A4D8               	btfss	status,2,c
  3765  0022BE  D7E8               	goto	l373
  3766  0022C0                     u7910:
  3767                           
  3768                           ;State_Mchn.c: 1001: {
  3769                           ;State_Mchn.c: 1002: Switch_Train_Path = 1;
  3770  0022C0  0E01               	movlw	1
  3771  0022C2  D015               	goto	L41
  3772  0022C4                     
  3773                           ; BSR set to: 0
  3774  0022C4  0100               	movlb	0	; () banked
  3775  0022C6  51D2               	movf	Train_Path@From& (0+255),w,b
  3776                           
  3777                           ; Switch size 1, requested type "space"
  3778                           ; Number of cases is 4, Range of values is 1 to 4
  3779                           ; switch strategies available:
  3780                           ; Name         Instructions Cycles
  3781                           ; simple_byte           13     7 (average)
  3782                           ;	Chosen strategy is simple_byte
  3783  0022C8  0A01               	xorlw	1	; case 1
  3784  0022CA  B4D8               	btfsc	status,2,c
  3785  0022CC  D7EB               	goto	l377
  3786  0022CE  0A03               	xorlw	3	; case 2
  3787  0022D0  B4D8               	btfsc	status,2,c
  3788  0022D2  D7EE               	goto	l379
  3789  0022D4  0A01               	xorlw	1	; case 3
  3790  0022D6  B4D8               	btfsc	status,2,c
  3791  0022D8  D7D3               	goto	l372
  3792  0022DA  0A07               	xorlw	7	; case 4
  3793  0022DC  B4D8               	btfsc	status,2,c
  3794  0022DE  D7DC               	goto	l375
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;State_Mchn.c: 1009: break;
  3798  0022E0  D1A5               	goto	l382
  3799  0022E2                     
  3800                           ; BSR set to: 0
  3801                           
  3802                           ; BSR set to: 0
  3803  0022E2  0E00               	movlw	0
  3804  0022E4  6E1F               	movwf	Junction@Straight_Bend,c
  3805  0022E6  0E01               	movlw	1
  3806  0022E8  EC50  F015         	call	_Junction
  3807  0022EC  D016               	goto	L43
  3808  0022EE                     L41:
  3809  0022EE  0100               	movlb	0	; () banked
  3810  0022F0  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  3811                           
  3812                           ;State_Mchn.c: 1016: Return_Val = 1;
  3813  0022F2  0E01               	movlw	1
  3814  0022F4  6FE6               	movwf	Train_Path@Return_Val& (0+255),b
  3815  0022F6  D7CC               	goto	l373
  3816  0022F8                     
  3817                           ; BSR set to: 0
  3818                           
  3819                           ; BSR set to: 0
  3820  0022F8  0E01               	movlw	1
  3821  0022FA  6E1F               	movwf	Junction@Straight_Bend,c
  3822  0022FC  0E01               	movlw	1
  3823  0022FE  EC50  F015         	call	_Junction
  3824  002302  D00B               	goto	L43
  3825  002304                     
  3826                           ; BSR set to: 0
  3827                           
  3828                           ; BSR set to: 0
  3829  002304  0E01               	movlw	1
  3830  002306  6E1F               	movwf	Junction@Straight_Bend,c
  3831  002308  0E00               	movlw	0
  3832  00230A  EC50  F015         	call	_Junction
  3833  00230E  D005               	goto	L43
  3834  002310                     
  3835                           ; BSR set to: 0
  3836                           
  3837                           ; BSR set to: 0
  3838  002310  0E00               	movlw	0
  3839  002312  6E1F               	movwf	Junction@Straight_Bend,c
  3840  002314  0E00               	movlw	0
  3841  002316  EC50  F015         	call	_Junction
  3842  00231A                     L43:
  3843  00231A  0900               	iorlw	0
  3844  00231C  A4D8               	btfss	status,2,c
  3845  00231E  D7B8               	goto	l373
  3846                           
  3847                           ;State_Mchn.c: 1035: {
  3848                           ;State_Mchn.c: 1036: Switch_Train_Path = 2;
  3849  002320  0E02               	movlw	2
  3850  002322  D7E5               	goto	L41
  3851  002324                     
  3852                           ; BSR set to: 0
  3853                           
  3854                           ; BSR set to: 0
  3855  002324  51D1               	movf	Train_Path@To& (0+255),w,b
  3856                           
  3857                           ; Switch size 1, requested type "space"
  3858                           ; Number of cases is 4, Range of values is 1 to 4
  3859                           ; switch strategies available:
  3860                           ; Name         Instructions Cycles
  3861                           ; simple_byte           13     7 (average)
  3862                           ;	Chosen strategy is simple_byte
  3863  002326  0A01               	xorlw	1	; case 1
  3864  002328  B4D8               	btfsc	status,2,c
  3865  00232A  D7EC               	goto	l390
  3866  00232C  0A03               	xorlw	3	; case 2
  3867  00232E  B4D8               	btfsc	status,2,c
  3868  002330  D7EF               	goto	l392
  3869  002332  0A01               	xorlw	1	; case 3
  3870  002334  B4D8               	btfsc	status,2,c
  3871  002336  D7D5               	goto	l385
  3872  002338  0A07               	xorlw	7	; case 4
  3873  00233A  B4D8               	btfsc	status,2,c
  3874  00233C  D7DD               	goto	l388
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;State_Mchn.c: 1043: break;
  3878  00233E  D176               	goto	l382
  3879  002340                     
  3880                           ; BSR set to: 0
  3881                           
  3882                           ; BSR set to: 0
  3883  002340  EC81  F019         	call	_Train_Move_Right_Start	;wreg free
  3884  002344  D008               	goto	L46
  3885  002346                     
  3886                           ; BSR set to: 0
  3887                           
  3888                           ; BSR set to: 0
  3889  002346  EC81  F019         	call	_Train_Move_Right_Start	;wreg free
  3890  00234A  D005               	goto	L46
  3891  00234C                     
  3892                           ; BSR set to: 0
  3893                           
  3894                           ; BSR set to: 0
  3895  00234C  ECE5  F018         	call	_Train_Move_Left_Start	;wreg free
  3896  002350  D002               	goto	L46
  3897  002352                     
  3898                           ; BSR set to: 0
  3899                           
  3900                           ; BSR set to: 0
  3901  002352  ECE5  F018         	call	_Train_Move_Left_Start	;wreg free
  3902  002356                     L46:
  3903  002356  0900               	iorlw	0
  3904  002358  A4D8               	btfss	status,2,c
  3905  00235A  D79A               	goto	l373
  3906                           
  3907                           ;State_Mchn.c: 1069: {
  3908                           ;State_Mchn.c: 1070: Switch_Train_Path = 3;
  3909  00235C  0E03               	movlw	3
  3910  00235E  D7C7               	goto	L41
  3911  002360                     
  3912                           ; BSR set to: 0
  3913                           
  3914                           ; BSR set to: 0
  3915  002360  51D1               	movf	Train_Path@To& (0+255),w,b
  3916                           
  3917                           ; Switch size 1, requested type "space"
  3918                           ; Number of cases is 4, Range of values is 1 to 4
  3919                           ; switch strategies available:
  3920                           ; Name         Instructions Cycles
  3921                           ; simple_byte           13     7 (average)
  3922                           ;	Chosen strategy is simple_byte
  3923  002362  0A01               	xorlw	1	; case 1
  3924  002364  B4D8               	btfsc	status,2,c
  3925  002366  D7F2               	goto	l402
  3926  002368  0A03               	xorlw	3	; case 2
  3927  00236A  B4D8               	btfsc	status,2,c
  3928  00236C  D7F2               	goto	l404
  3929  00236E  0A01               	xorlw	1	; case 3
  3930  002370  B4D8               	btfsc	status,2,c
  3931  002372  D7E6               	goto	l397
  3932  002374  0A07               	xorlw	7	; case 4
  3933  002376  B4D8               	btfsc	status,2,c
  3934  002378  D7E6               	goto	l400
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;State_Mchn.c: 1077: break;
  3938  00237A  D158               	goto	l382
  3939  00237C                     
  3940                           ; BSR set to: 0
  3941                           
  3942                           ; BSR set to: 0
  3943  00237C  0E00               	movlw	0
  3944  00237E  6E14               	movwf	GETxAPIxVAL@index+1,c
  3945  002380  0E1C               	movlw	28
  3946  002382  6E13               	movwf	GETxAPIxVAL@index,c
  3947  002384  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3948  002388  0413               	decf	?_GETxAPIxVAL,w,c
  3949  00238A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3950  00238C  B4D8               	btfsc	status,2,c
  3951  00238E  D09B               	goto	u8150
  3952                           
  3953                           ;State_Mchn.c: 1084: else if(GETxAPIxVAL(41) == 1){
  3954                           
  3955                           ; BSR set to: 0
  3956                           
  3957                           ;State_Mchn.c: 1083: }
  3958                           
  3959                           ;State_Mchn.c: 1082: Switch_Train_Path = 4;
  3960  002390  0E00               	movlw	0
  3961  002392  6E14               	movwf	GETxAPIxVAL@index+1,c
  3962  002394  0E29               	movlw	41
  3963  002396  6E13               	movwf	GETxAPIxVAL@index,c
  3964  002398  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3965  00239C  0413               	decf	?_GETxAPIxVAL,w,c
  3966  00239E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3967  0023A0  B4D8               	btfsc	status,2,c
  3968  0023A2  D032               	goto	u8060
  3969                           
  3970                           ;State_Mchn.c: 1087: else if(GETxAPIxVAL(42) == 1){
  3971                           
  3972                           ; BSR set to: 0
  3973                           
  3974                           ;State_Mchn.c: 1086: }
  3975                           
  3976                           ;State_Mchn.c: 1085: Switch_Train_Path = 5;
  3977  0023A4  0E00               	movlw	0
  3978  0023A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  3979  0023A8  0E2A               	movlw	42
  3980  0023AA  6E13               	movwf	GETxAPIxVAL@index,c
  3981  0023AC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3982  0023B0  0413               	decf	?_GETxAPIxVAL,w,c
  3983  0023B2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3984  0023B4  B4D8               	btfsc	status,2,c
  3985  0023B6  D034               	goto	u8070
  3986                           
  3987                           ;State_Mchn.c: 1090: else if(GETxAPIxVAL(44) == 1){
  3988                           
  3989                           ; BSR set to: 0
  3990                           
  3991                           ;State_Mchn.c: 1089: }
  3992                           
  3993                           ;State_Mchn.c: 1088: Switch_Train_Path = 6;
  3994  0023B8  0E00               	movlw	0
  3995  0023BA  6E14               	movwf	GETxAPIxVAL@index+1,c
  3996  0023BC  0E2C               	movlw	44
  3997  0023BE  6E13               	movwf	GETxAPIxVAL@index,c
  3998  0023C0  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  3999  0023C4  0413               	decf	?_GETxAPIxVAL,w,c
  4000  0023C6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4001  0023C8  B4D8               	btfsc	status,2,c
  4002  0023CA  D036               	goto	u8080
  4003                           
  4004                           ;State_Mchn.c: 1093: else if(GETxAPIxVAL(43) == 1){
  4005                           
  4006                           ; BSR set to: 0
  4007                           
  4008                           ;State_Mchn.c: 1092: }
  4009                           
  4010                           ;State_Mchn.c: 1091: Switch_Train_Path = 7;
  4011  0023CC  0E00               	movlw	0
  4012  0023CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4013  0023D0  0E2B               	movlw	43
  4014  0023D2  6E13               	movwf	GETxAPIxVAL@index,c
  4015  0023D4  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4016  0023D8  D037               	goto	L94
  4017  0023DA                     L27:
  4018  0023DA  0100               	movlb	0	; () banked
  4019  0023DC  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  4020                           
  4021                           ; BSR set to: 0
  4022                           
  4023                           ; BSR set to: 0
  4024                           
  4025                           ; BSR set to: 0
  4026                           
  4027                           ; BSR set to: 0
  4028  0023DE  D758               	goto	l373
  4029  0023E0                     
  4030                           ; BSR set to: 0
  4031                           
  4032                           ; BSR set to: 0
  4033  0023E0  0E00               	movlw	0
  4034  0023E2  6E14               	movwf	GETxAPIxVAL@index+1,c
  4035  0023E4  0E1D               	movlw	29
  4036  0023E6  6E13               	movwf	GETxAPIxVAL@index,c
  4037  0023E8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4038  0023EC  0413               	decf	?_GETxAPIxVAL,w,c
  4039  0023EE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4040  0023F0  B4D8               	btfsc	status,2,c
  4041  0023F2  D069               	goto	u8150
  4042                           
  4043                           ;State_Mchn.c: 1101: else if(GETxAPIxVAL(41) == 1){
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ;State_Mchn.c: 1100: }
  4048                           
  4049                           ;State_Mchn.c: 1099: Switch_Train_Path = 4;
  4050  0023F4  0E00               	movlw	0
  4051  0023F6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4052  0023F8  0E29               	movlw	41
  4053  0023FA  6E13               	movwf	GETxAPIxVAL@index,c
  4054  0023FC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4055  002400  0413               	decf	?_GETxAPIxVAL,w,c
  4056  002402  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4057  002404  A4D8               	btfss	status,2,c
  4058  002406  D002               	goto	l423
  4059  002408                     u8060:
  4060                           
  4061                           ;State_Mchn.c: 1102: Switch_Train_Path = 5;
  4062  002408  0E05               	movlw	5
  4063  00240A  D7E7               	goto	L27
  4064  00240C                     l423:
  4065                           
  4066                           ;State_Mchn.c: 1104: else if(GETxAPIxVAL(42) == 1){
  4067                           
  4068                           ; BSR set to: 0
  4069  00240C  0E00               	movlw	0
  4070  00240E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4071  002410  0E2A               	movlw	42
  4072  002412  6E13               	movwf	GETxAPIxVAL@index,c
  4073  002414  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4074  002418  0413               	decf	?_GETxAPIxVAL,w,c
  4075  00241A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4076  00241C  A4D8               	btfss	status,2,c
  4077  00241E  D002               	goto	l425
  4078  002420                     u8070:
  4079                           
  4080                           ;State_Mchn.c: 1105: Switch_Train_Path = 6;
  4081  002420  0E06               	movlw	6
  4082  002422  D7DB               	goto	L27
  4083  002424                     l425:
  4084                           
  4085                           ;State_Mchn.c: 1107: else if(GETxAPIxVAL(44) == 1){
  4086                           
  4087                           ; BSR set to: 0
  4088  002424  0E00               	movlw	0
  4089  002426  6E14               	movwf	GETxAPIxVAL@index+1,c
  4090  002428  0E2C               	movlw	44
  4091  00242A  6E13               	movwf	GETxAPIxVAL@index,c
  4092  00242C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4093  002430  0413               	decf	?_GETxAPIxVAL,w,c
  4094  002432  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4095  002434  A4D8               	btfss	status,2,c
  4096  002436  D002               	goto	l427
  4097  002438                     u8080:
  4098                           
  4099                           ;State_Mchn.c: 1108: Switch_Train_Path = 7;
  4100  002438  0E07               	movlw	7
  4101  00243A  D7CF               	goto	L27
  4102  00243C                     l427:
  4103                           
  4104                           ;State_Mchn.c: 1110: else if(GETxAPIxVAL(43) == 1){
  4105                           
  4106                           ; BSR set to: 0
  4107  00243C  0E00               	movlw	0
  4108  00243E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4109  002440  0E2B               	movlw	43
  4110  002442  6E13               	movwf	GETxAPIxVAL@index,c
  4111  002444  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4112  002448                     L94:
  4113  002448  0413               	decf	?_GETxAPIxVAL,w,c
  4114  00244A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4115  00244C  A4D8               	btfss	status,2,c
  4116  00244E  D720               	goto	l373
  4117                           
  4118                           ;State_Mchn.c: 1111: Switch_Train_Path = 8;
  4119  002450  0E08               	movlw	8
  4120  002452  D7C3               	goto	L27
  4121  002454                     
  4122                           ; BSR set to: 0
  4123                           
  4124                           ; BSR set to: 0
  4125  002454  0E00               	movlw	0
  4126  002456  6E14               	movwf	GETxAPIxVAL@index+1,c
  4127  002458  0E1E               	movlw	30
  4128  00245A  6E13               	movwf	GETxAPIxVAL@index,c
  4129  00245C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4130  002460  0413               	decf	?_GETxAPIxVAL,w,c
  4131  002462  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4132  002464  B4D8               	btfsc	status,2,c
  4133  002466  D02F               	goto	u8150
  4134                           
  4135                           ;State_Mchn.c: 1119: else if(GETxAPIxVAL(41) == 1){
  4136                           
  4137                           ; BSR set to: 0
  4138                           
  4139                           ;State_Mchn.c: 1118: }
  4140                           
  4141                           ;State_Mchn.c: 1116: {
  4142                           ;State_Mchn.c: 1117: Switch_Train_Path = 4;
  4143  002468  0E00               	movlw	0
  4144  00246A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4145  00246C  0E29               	movlw	41
  4146  00246E  6E13               	movwf	GETxAPIxVAL@index,c
  4147  002470  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4148  002474  0413               	decf	?_GETxAPIxVAL,w,c
  4149  002476  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4150  002478  B4D8               	btfsc	status,2,c
  4151  00247A  D031               	goto	u8160
  4152                           
  4153                           ;State_Mchn.c: 1122: else if(GETxAPIxVAL(42) == 1){
  4154                           
  4155                           ; BSR set to: 0
  4156                           
  4157                           ;State_Mchn.c: 1121: }
  4158                           
  4159                           ;State_Mchn.c: 1120: Switch_Train_Path = 12;
  4160  00247C  0E00               	movlw	0
  4161  00247E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4162  002480  0E2A               	movlw	42
  4163  002482  6E13               	movwf	GETxAPIxVAL@index,c
  4164  002484  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4165  002488  0413               	decf	?_GETxAPIxVAL,w,c
  4166  00248A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4167  00248C  B4D8               	btfsc	status,2,c
  4168  00248E  D033               	goto	u8170
  4169                           
  4170                           ;State_Mchn.c: 1125: else if(GETxAPIxVAL(44) == 1){
  4171                           
  4172                           ; BSR set to: 0
  4173                           
  4174                           ;State_Mchn.c: 1124: }
  4175                           
  4176                           ;State_Mchn.c: 1123: Switch_Train_Path = 11;
  4177  002490  0E00               	movlw	0
  4178  002492  6E14               	movwf	GETxAPIxVAL@index+1,c
  4179  002494  0E2C               	movlw	44
  4180  002496  6E13               	movwf	GETxAPIxVAL@index,c
  4181  002498  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4182  00249C  0413               	decf	?_GETxAPIxVAL,w,c
  4183  00249E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4184  0024A0  B4D8               	btfsc	status,2,c
  4185  0024A2  D035               	goto	u8180
  4186                           
  4187                           ;State_Mchn.c: 1128: else if(GETxAPIxVAL(43) == 1){
  4188                           
  4189                           ; BSR set to: 0
  4190                           
  4191                           ;State_Mchn.c: 1127: }
  4192                           
  4193                           ;State_Mchn.c: 1126: Switch_Train_Path = 10;
  4194  0024A4  0E00               	movlw	0
  4195  0024A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4196  0024A8  0E2B               	movlw	43
  4197  0024AA  6E13               	movwf	GETxAPIxVAL@index,c
  4198  0024AC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4199  0024B0  D036               	goto	L95
  4200  0024B2                     
  4201                           ; BSR set to: 0
  4202                           
  4203                           ; BSR set to: 0
  4204  0024B2  0E00               	movlw	0
  4205  0024B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  4206  0024B6  0E1F               	movlw	31
  4207  0024B8  6E13               	movwf	GETxAPIxVAL@index,c
  4208  0024BA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4209  0024BE  0413               	decf	?_GETxAPIxVAL,w,c
  4210  0024C0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4211  0024C2  A4D8               	btfss	status,2,c
  4212  0024C4  D002               	goto	l441
  4213  0024C6                     u8150:
  4214                           
  4215                           ;State_Mchn.c: 1134: {
  4216                           ;State_Mchn.c: 1135: Switch_Train_Path = 4;
  4217  0024C6  0E04               	movlw	4
  4218  0024C8  D788               	goto	L27
  4219  0024CA                     l441:
  4220                           
  4221                           ;State_Mchn.c: 1137: else if(GETxAPIxVAL(41) == 1){
  4222                           
  4223                           ; BSR set to: 0
  4224  0024CA  0E00               	movlw	0
  4225  0024CC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4226  0024CE  0E29               	movlw	41
  4227  0024D0  6E13               	movwf	GETxAPIxVAL@index,c
  4228  0024D2  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4229  0024D6  0413               	decf	?_GETxAPIxVAL,w,c
  4230  0024D8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4231  0024DA  A4D8               	btfss	status,2,c
  4232  0024DC  D002               	goto	l443
  4233  0024DE                     u8160:
  4234                           
  4235                           ;State_Mchn.c: 1138: Switch_Train_Path = 12;
  4236  0024DE  0E0C               	movlw	12
  4237  0024E0  D77C               	goto	L27
  4238  0024E2                     l443:
  4239                           
  4240                           ;State_Mchn.c: 1140: else if(GETxAPIxVAL(42) == 1){
  4241                           
  4242                           ; BSR set to: 0
  4243  0024E2  0E00               	movlw	0
  4244  0024E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  4245  0024E6  0E2A               	movlw	42
  4246  0024E8  6E13               	movwf	GETxAPIxVAL@index,c
  4247  0024EA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4248  0024EE  0413               	decf	?_GETxAPIxVAL,w,c
  4249  0024F0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4250  0024F2  A4D8               	btfss	status,2,c
  4251  0024F4  D002               	goto	l445
  4252  0024F6                     u8170:
  4253                           
  4254                           ;State_Mchn.c: 1141: Switch_Train_Path = 11;
  4255  0024F6  0E0B               	movlw	11
  4256  0024F8  D770               	goto	L27
  4257  0024FA                     l445:
  4258                           
  4259                           ;State_Mchn.c: 1143: else if(GETxAPIxVAL(44) == 1){
  4260                           
  4261                           ; BSR set to: 0
  4262  0024FA  0E00               	movlw	0
  4263  0024FC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4264  0024FE  0E2C               	movlw	44
  4265  002500  6E13               	movwf	GETxAPIxVAL@index,c
  4266  002502  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4267  002506  0413               	decf	?_GETxAPIxVAL,w,c
  4268  002508  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4269  00250A  A4D8               	btfss	status,2,c
  4270  00250C  D002               	goto	l447
  4271  00250E                     u8180:
  4272                           
  4273                           ;State_Mchn.c: 1144: Switch_Train_Path = 10;
  4274  00250E  0E0A               	movlw	10
  4275  002510  D764               	goto	L27
  4276  002512                     l447:
  4277                           
  4278                           ;State_Mchn.c: 1146: else if(GETxAPIxVAL(43) == 1){
  4279                           
  4280                           ; BSR set to: 0
  4281  002512  0E00               	movlw	0
  4282  002514  6E14               	movwf	GETxAPIxVAL@index+1,c
  4283  002516  0E2B               	movlw	43
  4284  002518  6E13               	movwf	GETxAPIxVAL@index,c
  4285  00251A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4286  00251E                     L95:
  4287  00251E  0413               	decf	?_GETxAPIxVAL,w,c
  4288  002520  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4289  002522  A4D8               	btfss	status,2,c
  4290  002524  D6B5               	goto	l373
  4291                           
  4292                           ;State_Mchn.c: 1147: Switch_Train_Path = 9;
  4293  002526  0E09               	movlw	9
  4294  002528  D758               	goto	L27
  4295  00252A                     
  4296                           ; BSR set to: 0
  4297                           
  4298                           ; BSR set to: 0
  4299  00252A  51D1               	movf	Train_Path@To& (0+255),w,b
  4300                           
  4301                           ; Switch size 1, requested type "space"
  4302                           ; Number of cases is 4, Range of values is 1 to 4
  4303                           ; switch strategies available:
  4304                           ; Name         Instructions Cycles
  4305                           ; simple_byte           13     7 (average)
  4306                           ;	Chosen strategy is simple_byte
  4307  00252C  0A01               	xorlw	1	; case 1
  4308  00252E  B4D8               	btfsc	status,2,c
  4309  002530  D791               	goto	l430
  4310  002532  0A03               	xorlw	3	; case 2
  4311  002534  B4D8               	btfsc	status,2,c
  4312  002536  D7BD               	goto	l440
  4313  002538  0A01               	xorlw	1	; case 3
  4314  00253A  B4D8               	btfsc	status,2,c
  4315  00253C  D71F               	goto	l409
  4316  00253E  0A07               	xorlw	7	; case 4
  4317  002540  B4D8               	btfsc	status,2,c
  4318  002542  D74E               	goto	l420
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;State_Mchn.c: 1153: break;
  4322  002544  D073               	goto	l382
  4323  002546                     
  4324                           ; BSR set to: 0
  4325                           
  4326                           ; BSR set to: 0
  4327  002546  EC45  F018         	call	_Train_Move_Right_Brake	;wreg free
  4328  00254A  D008               	goto	L96
  4329  00254C                     
  4330                           ; BSR set to: 0
  4331                           
  4332                           ; BSR set to: 0
  4333  00254C  EC45  F018         	call	_Train_Move_Right_Brake	;wreg free
  4334  002550  D005               	goto	L96
  4335  002552                     
  4336                           ; BSR set to: 0
  4337                           
  4338                           ; BSR set to: 0
  4339  002552  ECA2  F017         	call	_Train_Move_Left_Brake	;wreg free
  4340  002556  D002               	goto	L96
  4341  002558                     
  4342                           ; BSR set to: 0
  4343                           
  4344                           ; BSR set to: 0
  4345  002558  ECA2  F017         	call	_Train_Move_Left_Brake	;wreg free
  4346  00255C                     L96:
  4347  00255C  0900               	iorlw	0
  4348  00255E  A4D8               	btfss	status,2,c
  4349  002560  D697               	goto	l373
  4350                           
  4351                           ;State_Mchn.c: 1182: {
  4352                           ;State_Mchn.c: 1183: Switch_Train_Path = 0;
  4353  002562  0E00               	movlw	0
  4354  002564  0100               	movlb	0	; () banked
  4355  002566  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  4356                           
  4357                           ;State_Mchn.c: 1184: Return_Val = 0;
  4358  002568  0E00               	movlw	0
  4359  00256A  D694               	goto	L40
  4360  00256C                     
  4361                           ; BSR set to: 0
  4362                           
  4363                           ; BSR set to: 0
  4364  00256C  51D1               	movf	Train_Path@To& (0+255),w,b
  4365                           
  4366                           ; Switch size 1, requested type "space"
  4367                           ; Number of cases is 4, Range of values is 1 to 4
  4368                           ; switch strategies available:
  4369                           ; Name         Instructions Cycles
  4370                           ; simple_byte           13     7 (average)
  4371                           ;	Chosen strategy is simple_byte
  4372  00256E  0A01               	xorlw	1	; case 1
  4373  002570  B4D8               	btfsc	status,2,c
  4374  002572  D7EF               	goto	l458
  4375  002574  0A03               	xorlw	3	; case 2
  4376  002576  B4D8               	btfsc	status,2,c
  4377  002578  D7EF               	goto	l460
  4378  00257A  0A01               	xorlw	1	; case 3
  4379  00257C  B4D8               	btfsc	status,2,c
  4380  00257E  D7E3               	goto	l453
  4381  002580  0A07               	xorlw	7	; case 4
  4382  002582  B4D8               	btfsc	status,2,c
  4383  002584  D7E3               	goto	l456
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;State_Mchn.c: 1191: break;
  4387  002586  D052               	goto	l382
  4388  002588                     
  4389                           ; BSR set to: 0
  4390                           ;State_Mchn.c: 1194: if(Left_Mountain_From_The_Left(1) == 0){
  4391                           
  4392                           ; BSR set to: 0
  4393  002588  0E01               	movlw	1
  4394  00258A  EC4F  F01C         	call	_Left_Mountain_From_The_Left
  4395  00258E  D01B               	goto	L53
  4396  002590                     
  4397                           ; BSR set to: 0
  4398                           ;State_Mchn.c: 1201: if(Left_Mountain_From_The_Left(2) == 0){
  4399                           
  4400                           ; BSR set to: 0
  4401  002590  0E02               	movlw	2
  4402  002592  EC4F  F01C         	call	_Left_Mountain_From_The_Left
  4403  002596  D017               	goto	L53
  4404  002598                     
  4405                           ; BSR set to: 0
  4406                           ;State_Mchn.c: 1208: if(Right_Mountain_From_The_Left(3) == 0){
  4407                           
  4408                           ; BSR set to: 0
  4409  002598  0E03               	movlw	3
  4410  00259A  EC3B  F01B         	call	_Right_Mountain_From_The_Left
  4411  00259E  D013               	goto	L53
  4412  0025A0                     
  4413                           ; BSR set to: 0
  4414                           ;State_Mchn.c: 1215: if(Right_Mountain_From_The_Left(4) == 0){
  4415                           
  4416                           ; BSR set to: 0
  4417  0025A0  0E04               	movlw	4
  4418  0025A2  EC3B  F01B         	call	_Right_Mountain_From_The_Left
  4419  0025A6  D00F               	goto	L53
  4420  0025A8                     
  4421                           ; BSR set to: 0
  4422                           ;State_Mchn.c: 1222: if(Right_Mountain_From_The_Right(4) == 0){
  4423                           
  4424                           ; BSR set to: 0
  4425  0025A8  0E04               	movlw	4
  4426  0025AA  ECB1  F01A         	call	_Right_Mountain_From_The_Right
  4427  0025AE  D00B               	goto	L53
  4428  0025B0                     
  4429                           ; BSR set to: 0
  4430                           ;State_Mchn.c: 1229: if(Right_Mountain_From_The_Right(3) == 0){
  4431                           
  4432                           ; BSR set to: 0
  4433  0025B0  0E03               	movlw	3
  4434  0025B2  ECB1  F01A         	call	_Right_Mountain_From_The_Right
  4435  0025B6  D007               	goto	L53
  4436  0025B8                     
  4437                           ; BSR set to: 0
  4438                           ;State_Mchn.c: 1236: if(Left_Mountain_From_The_Right(2) == 0){
  4439                           
  4440                           ; BSR set to: 0
  4441  0025B8  0E02               	movlw	2
  4442  0025BA  ECD8  F01C         	call	_Left_Mountain_From_The_Right
  4443  0025BE  D003               	goto	L53
  4444  0025C0                     
  4445                           ; BSR set to: 0
  4446                           ;State_Mchn.c: 1243: if(Left_Mountain_From_The_Right(1) == 0){
  4447                           
  4448                           ; BSR set to: 0
  4449  0025C0  0E01               	movlw	1
  4450  0025C2  ECD8  F01C         	call	_Left_Mountain_From_The_Right
  4451  0025C6                     L53:
  4452  0025C6  0900               	iorlw	0
  4453  0025C8  A4D8               	btfss	status,2,c
  4454  0025CA  D662               	goto	l373
  4455                           
  4456                           ;State_Mchn.c: 1244: Switch_Train_Path = 3;
  4457  0025CC  0E03               	movlw	3
  4458  0025CE  D705               	goto	L27
  4459  0025D0                     
  4460                           ; BSR set to: 0
  4461                           
  4462                           ; BSR set to: 0
  4463  0025D0  0E00               	movlw	0
  4464  0025D2  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  4465  0025D4  0E01               	movlw	1
  4466  0025D6  D65E               	goto	L40
  4467  0025D8                     l369:
  4468                           
  4469                           ; BSR set to: 0
  4470  0025D8  0100               	movlb	0	; () banked
  4471  0025DA  518A               	movf	_Switch_Train_Path& (0+255),w,b
  4472                           
  4473                           ; Switch size 1, requested type "space"
  4474                           ; Number of cases is 13, Range of values is 0 to 12
  4475                           ; switch strategies available:
  4476                           ; Name         Instructions Cycles
  4477                           ; simple_byte           40    21 (average)
  4478                           ;	Chosen strategy is simple_byte
  4479  0025DC  0A00               	xorlw	0	; case 0
  4480  0025DE  B4D8               	btfsc	status,2,c
  4481  0025E0  D671               	goto	l371
  4482  0025E2  0A01               	xorlw	1	; case 1
  4483  0025E4  B4D8               	btfsc	status,2,c
  4484  0025E6  D69E               	goto	l384
  4485  0025E8  0A03               	xorlw	3	; case 2
  4486  0025EA  B4D8               	btfsc	status,2,c
  4487  0025EC  D6B9               	goto	l396
  4488  0025EE  0A01               	xorlw	1	; case 3
  4489  0025F0  B4D8               	btfsc	status,2,c
  4490  0025F2  D79B               	goto	l408
  4491  0025F4  0A07               	xorlw	7	; case 4
  4492  0025F6  B4D8               	btfsc	status,2,c
  4493  0025F8  D7B9               	goto	l452
  4494  0025FA  0A01               	xorlw	1	; case 5
  4495  0025FC  B4D8               	btfsc	status,2,c
  4496  0025FE  D7C4               	goto	l463
  4497  002600  0A03               	xorlw	3	; case 6
  4498  002602  B4D8               	btfsc	status,2,c
  4499  002604  D7C5               	goto	l465
  4500  002606  0A01               	xorlw	1	; case 7
  4501  002608  B4D8               	btfsc	status,2,c
  4502  00260A  D7C6               	goto	l467
  4503  00260C  0A0F               	xorlw	15	; case 8
  4504  00260E  B4D8               	btfsc	status,2,c
  4505  002610  D7C7               	goto	l469
  4506  002612  0A01               	xorlw	1	; case 9
  4507  002614  B4D8               	btfsc	status,2,c
  4508  002616  D7C8               	goto	l471
  4509  002618  0A03               	xorlw	3	; case 10
  4510  00261A  B4D8               	btfsc	status,2,c
  4511  00261C  D7C9               	goto	l473
  4512  00261E  0A01               	xorlw	1	; case 11
  4513  002620  B4D8               	btfsc	status,2,c
  4514  002622  D7CA               	goto	l475
  4515  002624  0A07               	xorlw	7	; case 12
  4516  002626  B4D8               	btfsc	status,2,c
  4517  002628  D7CB               	goto	l477
  4518  00262A  D7D2               	goto	l479
  4519  00262C                     l382:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;State_Mchn.c: 1252: return(Return_Val);
  4523                           
  4524                           ; BSR set to: 0
  4525  00262C  51E6               	movf	Train_Path@Return_Val& (0+255),w,b
  4526  00262E  0012               	return	
  4527  002630                     __end_of_Train_Path:
  4528                           	opt stack 0
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           postinc0	equ	0xFEE
  4534                           wreg	equ	0xFE8
  4535                           postdec1	equ	0xFE5
  4536                           fsr1l	equ	0xFE1
  4537                           status	equ	0xFD8
  4538                           
  4539 ;; *************** function _Train_Move_Right_Start *****************
  4540 ;; Defined at:
  4541 ;;		line 27 in file "../train_move_right.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      unsigned char 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4555 ;;      Params:         0       0       0       0       0       0       0       0       0
  4556 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4558 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4559 ;;Total ram usage:        2 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    6
  4562 ;; This function calls:
  4563 ;;		_GETxAPIxVAL
  4564 ;;		_SETxAPIxVAL
  4565 ;;		_SETxPWM
  4566 ;; This function is called by:
  4567 ;;		_Train_Path
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text3
  4572  003302                     __ptext3:
  4573                           	opt stack 0
  4574  003302                     _Train_Move_Right_Start:
  4575                           	opt stack 22
  4576                           
  4577                           ;train_move_right.c: 29: static char Return_Val = 1;
  4578                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4579                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;incstack = 0
  4583  003302  D08A               	goto	l1172
  4584  003304  0E00               	movlw	0
  4585  003306  6E14               	movwf	GETxAPIxVAL@index+1,c
  4586  003308  0E14               	movlw	20
  4587  00330A  6E13               	movwf	GETxAPIxVAL@index,c
  4588  00330C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4589  003310  5013               	movf	?_GETxAPIxVAL,w,c
  4590  003312  0100               	movlb	0	; () banked
  4591  003314  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4592  003316  5014               	movf	?_GETxAPIxVAL+1,w,c
  4593  003318  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4594  00331A  A0D8               	btfss	status,0,c
  4595  00331C  D002               	goto	l1174
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;train_move_right.c: 37: {
  4599                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4600  00331E  0E01               	movlw	1
  4601  003320  D03D               	goto	L61
  4602  003322                     l1174:
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;train_move_right.c: 42: }
  4606                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4607                           
  4608                           ; BSR set to: 0
  4609  003322  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4610  003324  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4614  003326  0E00               	movlw	0
  4615  003328  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4616  00332A  D073               	goto	L62
  4617  00332C                     
  4618                           ; BSR set to: 0
  4619                           
  4620                           ; BSR set to: 0
  4621  00332C  0E00               	movlw	0
  4622  00332E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4623  003330  0E16               	movlw	22
  4624  003332  6E13               	movwf	GETxAPIxVAL@index,c
  4625  003334  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4626  003338  C013  F0CF         	movff	?_GETxAPIxVAL,_Train_Move_Right_Start$2188
  4627  00333C  C014  F0D0         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Start$2188+1
  4628  003340  C0CF  F01F         	movff	_Train_Move_Right_Start$2188,SETxPWM@speed
  4629  003344  C0D0  F020         	movff	_Train_Move_Right_Start$2188+1,SETxPWM@speed+1
  4630  003348  0E01               	movlw	1
  4631  00334A  6E21               	movwf	SETxPWM@direction,c
  4632  00334C  ECA0  F01E         	call	_SETxPWM	;wreg free
  4633                           
  4634                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4635  003350  0E00               	movlw	0
  4636  003352  6E14               	movwf	GETxAPIxVAL@index+1,c
  4637  003354  0E16               	movlw	22
  4638  003356  6E13               	movwf	GETxAPIxVAL@index,c
  4639  003358  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4640  00335C  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4641  003360  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4642                           
  4643                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4644  003364  0E00               	movlw	0
  4645  003366  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4646  003368  0E45               	movlw	69
  4647  00336A  6E19               	movwf	SETxAPIxVAL@index,c
  4648  00336C  0E00               	movlw	0
  4649  00336E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4650  003370  0E00               	movlw	0
  4651  003372  6E1B               	movwf	SETxAPIxVAL@value,c
  4652  003374  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  4653                           
  4654                           ;train_move_right.c: 51: Return_Val = 1;
  4655  003378  0E01               	movlw	1
  4656  00337A  0100               	movlb	0	; () banked
  4657  00337C  6FE3               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4658  00337E  D018               	goto	l7714
  4659  003380                     
  4660                           ; BSR set to: 0
  4661                           
  4662                           ; BSR set to: 0
  4663  003380  0E00               	movlw	0
  4664  003382  6E14               	movwf	GETxAPIxVAL@index+1,c
  4665  003384  0E12               	movlw	18
  4666  003386  6E13               	movwf	GETxAPIxVAL@index,c
  4667  003388  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4668  00338C  5013               	movf	?_GETxAPIxVAL,w,c
  4669  00338E  0100               	movlb	0	; () banked
  4670  003390  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4671  003392  5014               	movf	?_GETxAPIxVAL+1,w,c
  4672  003394  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4673  003396  A0D8               	btfss	status,0,c
  4674  003398  D007               	goto	l1178
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;train_move_right.c: 56: {
  4678                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4679  00339A  0E03               	movlw	3
  4680  00339C                     L61:
  4681  00339C  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4682                           
  4683                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4684  00339E  0E00               	movlw	0
  4685  0033A0  6F63               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4686  0033A2  0E00               	movlw	0
  4687  0033A4  6F62               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4688  0033A6  D035               	goto	L62
  4689  0033A8                     l1178:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;train_move_right.c: 61: }
  4693                           ;train_move_right.c: 62: Return_Val = 1;
  4694                           
  4695                           ; BSR set to: 0
  4696  0033A8  0E01               	movlw	1
  4697  0033AA  6FE3               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4701  0033AC  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4702  0033AE  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4703  0033B0                     l7714:
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4707  0033B0  0E02               	movlw	2
  4708  0033B2  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4709                           
  4710                           ;train_move_right.c: 65: break;
  4711  0033B4  D03F               	goto	l1175
  4712  0033B6                     
  4713                           ; BSR set to: 0
  4714                           
  4715                           ; BSR set to: 0
  4716  0033B6  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4717  0033BA  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4718  0033BE  0E01               	movlw	1
  4719  0033C0  6E21               	movwf	SETxPWM@direction,c
  4720  0033C2  ECA0  F01E         	call	_SETxPWM	;wreg free
  4721                           
  4722                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4723  0033C6  0E00               	movlw	0
  4724  0033C8  6E14               	movwf	GETxAPIxVAL@index+1,c
  4725  0033CA  0E17               	movlw	23
  4726  0033CC  6E13               	movwf	GETxAPIxVAL@index,c
  4727  0033CE  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4728  0033D2  5013               	movf	?_GETxAPIxVAL,w,c
  4729  0033D4  0100               	movlb	0	; () banked
  4730  0033D6  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4731  0033D8  5014               	movf	?_GETxAPIxVAL+1,w,c
  4732  0033DA  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4733  0033DC  A0D8               	btfss	status,0,c
  4734  0033DE  D004               	goto	l1180
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;train_move_right.c: 69: {
  4738                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4739  0033E0  0E00               	movlw	0
  4740  0033E2  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4741                           
  4742                           ;train_move_right.c: 71: Return_Val = 0;
  4743  0033E4  0E00               	movlw	0
  4744  0033E6  D016               	goto	L60
  4745  0033E8                     l1180:
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;train_move_right.c: 73: }
  4749                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4750                           
  4751                           ; BSR set to: 0
  4752  0033E8  0E00               	movlw	0
  4753  0033EA  6E14               	movwf	GETxAPIxVAL@index+1,c
  4754  0033EC  0E1A               	movlw	26
  4755  0033EE  6E13               	movwf	GETxAPIxVAL@index,c
  4756  0033F0  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4757  0033F4  5013               	movf	?_GETxAPIxVAL,w,c
  4758  0033F6  0100               	movlb	0	; () banked
  4759  0033F8  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4760  0033FA  5014               	movf	?_GETxAPIxVAL+1,w,c
  4761  0033FC  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4762  0033FE  A0D8               	btfss	status,0,c
  4763  003400  D006               	goto	l1181
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;train_move_right.c: 75: {
  4767                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4768  003402  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4769  003404  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4773  003406  0E00               	movlw	0
  4774  003408  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4775  00340A  0E00               	movlw	0
  4776  00340C  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4777  00340E                     l1181:
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;train_move_right.c: 78: }
  4781                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4782                           
  4783                           ; BSR set to: 0
  4784  00340E  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4785  003410  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4786  003412                     L62:
  4787                           
  4788                           ;train_move_right.c: 80: Return_Val = 1;
  4789  003412  0E01               	movlw	1
  4790  003414                     L60:
  4791  003414  6FE3               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;train_move_right.c: 84: }
  4795                           
  4796                           ; BSR set to: 0
  4797                           
  4798                           ;train_move_right.c: 83: default : break;
  4799                           
  4800                           ;train_move_right.c: 81: break;
  4801  003416  D00E               	goto	l1175
  4802  003418                     l1172:
  4803                           
  4804                           ; BSR set to: 0
  4805  003418  0100               	movlb	0	; () banked
  4806  00341A  5184               	movf	_Switch_Train_Move& (0+255),w,b
  4807                           
  4808                           ; Switch size 1, requested type "space"
  4809                           ; Number of cases is 4, Range of values is 0 to 3
  4810                           ; switch strategies available:
  4811                           ; Name         Instructions Cycles
  4812                           ; simple_byte           13     7 (average)
  4813                           ;	Chosen strategy is simple_byte
  4814  00341C  0A00               	xorlw	0	; case 0
  4815  00341E  B4D8               	btfsc	status,2,c
  4816  003420  D771               	goto	l1173
  4817  003422  0A01               	xorlw	1	; case 1
  4818  003424  B4D8               	btfsc	status,2,c
  4819  003426  D782               	goto	l1176
  4820  003428  0A03               	xorlw	3	; case 2
  4821  00342A  B4D8               	btfsc	status,2,c
  4822  00342C  D7A9               	goto	l1177
  4823  00342E  0A01               	xorlw	1	; case 3
  4824  003430  B4D8               	btfsc	status,2,c
  4825  003432  D7C1               	goto	l1179
  4826  003434                     l1175:
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;train_move_right.c: 86: return(Return_Val);
  4830                           
  4831                           ; BSR set to: 0
  4832  003434  51E3               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4833  003436  0012               	return	
  4834  003438                     __end_of_Train_Move_Right_Start:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           postdec1	equ	0xFE5
  4843                           fsr1l	equ	0xFE1
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function _Train_Move_Right_Brake *****************
  4847 ;; Defined at:
  4848 ;;		line 254 in file "../train_move_right.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  1    wreg      unsigned char 
  4855 ;; Registers used:
  4856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4862 ;;      Params:         0       0       0       0       0       0       0       0       0
  4863 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4865 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4866 ;;Total ram usage:        2 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    6
  4869 ;; This function calls:
  4870 ;;		_GETxAPIxVAL
  4871 ;;		_SETxAPIxVAL
  4872 ;;		_SETxPWM
  4873 ;; This function is called by:
  4874 ;;		_Train_Path
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text4
  4879  00308A                     __ptext4:
  4880                           	opt stack 0
  4881  00308A                     _Train_Move_Right_Brake:
  4882                           	opt stack 22
  4883                           
  4884                           ;train_move_right.c: 256: static char Return_Val = 1;
  4885                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4886                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;incstack = 0
  4890  00308A  D08F               	goto	l1240
  4891  00308C  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4892  003090  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4893  003094  0E01               	movlw	1
  4894  003096  6E21               	movwf	SETxPWM@direction,c
  4895  003098  ECA0  F01E         	call	_SETxPWM	;wreg free
  4896                           
  4897                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  4898  00309C  0E00               	movlw	0
  4899  00309E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4900  0030A0  0E16               	movlw	22
  4901  0030A2  6E13               	movwf	GETxAPIxVAL@index,c
  4902  0030A4  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4903  0030A8  0100               	movlb	0	; () banked
  4904  0030AA  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  4905  0030AC  5C13               	subwf	?_GETxAPIxVAL,w,c
  4906  0030AE  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4907  0030B0  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  4908  0030B2  A0D8               	btfss	status,0,c
  4909  0030B4  D002               	goto	l1242
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;train_move_right.c: 263: {
  4913                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  4914  0030B6  0E01               	movlw	1
  4915  0030B8  D074               	goto	L67
  4916  0030BA                     l1242:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;train_move_right.c: 267: }
  4920                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4921                           
  4922                           ; BSR set to: 0
  4923  0030BA  0E00               	movlw	0
  4924  0030BC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4925  0030BE  0E19               	movlw	25
  4926  0030C0  6E13               	movwf	GETxAPIxVAL@index,c
  4927  0030C2  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4928  0030C6  5013               	movf	?_GETxAPIxVAL,w,c
  4929  0030C8  0100               	movlb	0	; () banked
  4930  0030CA  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4931  0030CC  5014               	movf	?_GETxAPIxVAL+1,w,c
  4932  0030CE  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4933  0030D0  A0D8               	btfss	status,0,c
  4934  0030D2  D008               	goto	l1244
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;train_move_right.c: 269: {
  4938                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  4939  0030D4  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  4940  0030D6  A0D8               	btfss	status,0,c
  4941  0030D8  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  4945  0030DA  0E00               	movlw	0
  4946  0030DC  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4947  0030DE  0E00               	movlw	0
  4948  0030E0  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4949                           
  4950                           ;train_move_right.c: 272: }
  4951  0030E2  D060               	goto	l7830
  4952  0030E4                     l1244:
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  4956                           
  4957                           ; BSR set to: 0
  4958  0030E4  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4959  0030E6  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4960                           
  4961                           ; BSR set to: 0
  4962  0030E8  D05D               	goto	l7830
  4963  0030EA                     
  4964                           ; BSR set to: 0
  4965                           
  4966                           ; BSR set to: 0
  4967  0030EA  0E00               	movlw	0
  4968  0030EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4969  0030EE  0E12               	movlw	18
  4970  0030F0  6E13               	movwf	GETxAPIxVAL@index,c
  4971  0030F2  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  4972  0030F6  5013               	movf	?_GETxAPIxVAL,w,c
  4973  0030F8  0100               	movlb	0	; () banked
  4974  0030FA  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4975  0030FC  5014               	movf	?_GETxAPIxVAL+1,w,c
  4976  0030FE  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4977  003100  A0D8               	btfss	status,0,c
  4978  003102  D007               	goto	l1247
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;train_move_right.c: 278: {
  4982                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  4983  003104  0E02               	movlw	2
  4984  003106  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4985                           
  4986                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  4987  003108  0E00               	movlw	0
  4988  00310A  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4989  00310C  0E00               	movlw	0
  4990  00310E  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4991  003110  D049               	goto	l7830
  4992  003112                     l1247:
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;train_move_right.c: 283: }
  4996                           ;train_move_right.c: 284: Return_Val = 1;
  4997                           
  4998                           ; BSR set to: 0
  4999  003112  0E01               	movlw	1
  5000  003114  6FE2               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  5004  003116  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5005  003118  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  5009  00311A  0E01               	movlw	1
  5010  00311C  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5011                           
  5012                           ;train_move_right.c: 287: break;
  5013  00311E  D053               	goto	l1243
  5014  003120                     
  5015                           ; BSR set to: 0
  5016                           
  5017                           ; BSR set to: 0
  5018  003120  0E00               	movlw	0
  5019  003122  6E14               	movwf	GETxAPIxVAL@index+1,c
  5020  003124  0E16               	movlw	22
  5021  003126  6E13               	movwf	GETxAPIxVAL@index,c
  5022  003128  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5023  00312C  C013  F0CF         	movff	?_GETxAPIxVAL,_Train_Move_Right_Brake$2189
  5024  003130  C014  F0D0         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Brake$2189+1
  5025  003134  C0CF  F01F         	movff	_Train_Move_Right_Brake$2189,SETxPWM@speed
  5026  003138  C0D0  F020         	movff	_Train_Move_Right_Brake$2189+1,SETxPWM@speed+1
  5027  00313C  0E01               	movlw	1
  5028  00313E  6E21               	movwf	SETxPWM@direction,c
  5029  003140  ECA0  F01E         	call	_SETxPWM	;wreg free
  5030                           
  5031                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  5032  003144  0E00               	movlw	0
  5033  003146  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5034  003148  0E45               	movlw	69
  5035  00314A  6E19               	movwf	SETxAPIxVAL@index,c
  5036  00314C  0E00               	movlw	0
  5037  00314E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5038  003150  0E01               	movlw	1
  5039  003152  6E1B               	movwf	SETxAPIxVAL@value,c
  5040  003154  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  5041                           
  5042                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  5043  003158  0E00               	movlw	0
  5044  00315A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5045  00315C  0E16               	movlw	22
  5046  00315E  6E13               	movwf	GETxAPIxVAL@index,c
  5047  003160  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5048  003164  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5049  003168  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5050                           
  5051                           ;train_move_right.c: 292: Switch_Train_Move = 3;
  5052  00316C  0E03               	movlw	3
  5053  00316E  0100               	movlb	0	; () banked
  5054  003170  D018               	goto	L67
  5055  003172                     
  5056                           ; BSR set to: 0
  5057                           
  5058                           ; BSR set to: 0
  5059  003172  0E00               	movlw	0
  5060  003174  6E14               	movwf	GETxAPIxVAL@index+1,c
  5061  003176  0E14               	movlw	20
  5062  003178  6E13               	movwf	GETxAPIxVAL@index,c
  5063  00317A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5064  00317E  5013               	movf	?_GETxAPIxVAL,w,c
  5065  003180  0100               	movlb	0	; () banked
  5066  003182  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5067  003184  5014               	movf	?_GETxAPIxVAL+1,w,c
  5068  003186  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5069  003188  A0D8               	btfss	status,0,c
  5070  00318A  D008               	goto	l1250
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;train_move_right.c: 297: {
  5074                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5075  00318C  0E00               	movlw	0
  5076  00318E  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5077                           
  5078                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5079  003190  0E00               	movlw	0
  5080  003192  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5081  003194  0E00               	movlw	0
  5082  003196  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5083                           
  5084                           ;train_move_right.c: 300: Return_Val = 0;
  5085  003198  0E00               	movlw	0
  5086  00319A  D005               	goto	L65
  5087  00319C                     l1250:
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;train_move_right.c: 302: }
  5091                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5092                           
  5093                           ; BSR set to: 0
  5094  00319C  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5095  00319E  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5099  0031A0  0E03               	movlw	3
  5100  0031A2                     L67:
  5101  0031A2  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5102  0031A4                     l7830:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;train_move_right.c: 305: Return_Val = 1;
  5106  0031A4  0E01               	movlw	1
  5107  0031A6                     L65:
  5108  0031A6  6FE2               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;train_move_right.c: 309: }
  5112                           
  5113                           ; BSR set to: 0
  5114                           
  5115                           ;train_move_right.c: 308: default : break;
  5116                           
  5117                           ;train_move_right.c: 306: break;
  5118  0031A8  D00E               	goto	l1243
  5119  0031AA                     l1240:
  5120                           
  5121                           ; BSR set to: 0
  5122  0031AA  0100               	movlb	0	; () banked
  5123  0031AC  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5124                           
  5125                           ; Switch size 1, requested type "space"
  5126                           ; Number of cases is 4, Range of values is 0 to 3
  5127                           ; switch strategies available:
  5128                           ; Name         Instructions Cycles
  5129                           ; simple_byte           13     7 (average)
  5130                           ;	Chosen strategy is simple_byte
  5131  0031AE  0A00               	xorlw	0	; case 0
  5132  0031B0  B4D8               	btfsc	status,2,c
  5133  0031B2  D76C               	goto	l1241
  5134  0031B4  0A01               	xorlw	1	; case 1
  5135  0031B6  B4D8               	btfsc	status,2,c
  5136  0031B8  D798               	goto	l1246
  5137  0031BA  0A03               	xorlw	3	; case 2
  5138  0031BC  B4D8               	btfsc	status,2,c
  5139  0031BE  D7B0               	goto	l1248
  5140  0031C0  0A01               	xorlw	1	; case 3
  5141  0031C2  B4D8               	btfsc	status,2,c
  5142  0031C4  D7D6               	goto	l1249
  5143  0031C6                     l1243:
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;train_move_right.c: 311: return(Return_Val);
  5147                           
  5148                           ; BSR set to: 0
  5149  0031C6  51E2               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5150  0031C8  0012               	return	
  5151  0031CA                     __end_of_Train_Move_Right_Brake:
  5152                           	opt stack 0
  5153                           tblptru	equ	0xFF8
  5154                           tblptrh	equ	0xFF7
  5155                           tblptrl	equ	0xFF6
  5156                           tablat	equ	0xFF5
  5157                           postinc0	equ	0xFEE
  5158                           wreg	equ	0xFE8
  5159                           postdec1	equ	0xFE5
  5160                           fsr1l	equ	0xFE1
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function _Train_Move_Left_Start *****************
  5164 ;; Defined at:
  5165 ;;		line 27 in file "../train_move_left.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;		None
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      unsigned char 
  5172 ;; Registers used:
  5173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0
  5180 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5182 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5183 ;;Total ram usage:        2 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    6
  5186 ;; This function calls:
  5187 ;;		_GETxAPIxVAL
  5188 ;;		_SETxAPIxVAL
  5189 ;;		_SETxPWM
  5190 ;; This function is called by:
  5191 ;;		_Train_Path
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text5
  5196  0031CA                     __ptext5:
  5197                           	opt stack 0
  5198  0031CA                     _Train_Move_Left_Start:
  5199                           	opt stack 22
  5200                           
  5201                           ;train_move_left.c: 29: static char Return_Val = 1;
  5202                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5203                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;incstack = 0
  5207  0031CA  D08B               	goto	l1067
  5208  0031CC  0E00               	movlw	0
  5209  0031CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  5210  0031D0  0E14               	movlw	20
  5211  0031D2  6E13               	movwf	GETxAPIxVAL@index,c
  5212  0031D4  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5213  0031D8  5013               	movf	?_GETxAPIxVAL,w,c
  5214  0031DA  0100               	movlb	0	; () banked
  5215  0031DC  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5216  0031DE  5014               	movf	?_GETxAPIxVAL+1,w,c
  5217  0031E0  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5218  0031E2  A0D8               	btfss	status,0,c
  5219  0031E4  D002               	goto	l1069
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;train_move_left.c: 37: {
  5223                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5224  0031E6  0E01               	movlw	1
  5225  0031E8  D03E               	goto	L70
  5226  0031EA                     l1069:
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;train_move_left.c: 42: }
  5230                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5231                           
  5232                           ; BSR set to: 0
  5233  0031EA  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5234  0031EC  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5238  0031EE  0E00               	movlw	0
  5239  0031F0  D043               	goto	L71
  5240  0031F2                     l7746:
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;train_move_left.c: 45: Return_Val = 1;
  5244  0031F2  0E01               	movlw	1
  5245  0031F4  6FE5               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5246                           
  5247                           ;train_move_left.c: 46: break;
  5248  0031F6  D083               	goto	l1070
  5249  0031F8                     
  5250                           ; BSR set to: 0
  5251                           
  5252                           ; BSR set to: 0
  5253  0031F8  0E00               	movlw	0
  5254  0031FA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5255  0031FC  0E15               	movlw	21
  5256  0031FE  6E13               	movwf	GETxAPIxVAL@index,c
  5257  003200  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5258  003204  C013  F0CF         	movff	?_GETxAPIxVAL,_Train_Move_Left_Start$2186
  5259  003208  C014  F0D0         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Start$2186+1
  5260  00320C  C0CF  F01F         	movff	_Train_Move_Left_Start$2186,SETxPWM@speed
  5261  003210  C0D0  F020         	movff	_Train_Move_Left_Start$2186+1,SETxPWM@speed+1
  5262  003214  0E00               	movlw	0
  5263  003216  6E21               	movwf	SETxPWM@direction,c
  5264  003218  ECA0  F01E         	call	_SETxPWM	;wreg free
  5265                           
  5266                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5267  00321C  0E00               	movlw	0
  5268  00321E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5269  003220  0E15               	movlw	21
  5270  003222  6E13               	movwf	GETxAPIxVAL@index,c
  5271  003224  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5272  003228  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5273  00322C  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5274                           
  5275                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  5276  003230  0E00               	movlw	0
  5277  003232  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5278  003234  0E45               	movlw	69
  5279  003236  6E19               	movwf	SETxAPIxVAL@index,c
  5280  003238  0E00               	movlw	0
  5281  00323A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5282  00323C  0E00               	movlw	0
  5283  00323E  6E1B               	movwf	SETxAPIxVAL@value,c
  5284  003240  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  5285                           
  5286                           ;train_move_left.c: 51: Switch_Train_Move = 2;
  5287  003244  0E02               	movlw	2
  5288  003246  0100               	movlb	0	; () banked
  5289  003248  D017               	goto	L71
  5290  00324A                     
  5291                           ; BSR set to: 0
  5292                           
  5293                           ; BSR set to: 0
  5294  00324A  0E00               	movlw	0
  5295  00324C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5296  00324E  0E12               	movlw	18
  5297  003250  6E13               	movwf	GETxAPIxVAL@index,c
  5298  003252  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5299  003256  5013               	movf	?_GETxAPIxVAL,w,c
  5300  003258  0100               	movlb	0	; () banked
  5301  00325A  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5302  00325C  5014               	movf	?_GETxAPIxVAL+1,w,c
  5303  00325E  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5304  003260  A0D8               	btfss	status,0,c
  5305  003262  D007               	goto	l1073
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;train_move_left.c: 56: {
  5309                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5310  003264  0E03               	movlw	3
  5311  003266                     L70:
  5312  003266  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5313                           
  5314                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5315  003268  0E00               	movlw	0
  5316  00326A  6F67               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5317  00326C  0E00               	movlw	0
  5318  00326E  6F66               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5319  003270  D7C0               	goto	l7746
  5320  003272                     l1073:
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;train_move_left.c: 61: }
  5324                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5325                           
  5326                           ; BSR set to: 0
  5327  003272  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5328  003274  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5332  003276  0E02               	movlw	2
  5333  003278                     L71:
  5334  003278  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5335  00327A  D7BB               	goto	l7746
  5336  00327C                     
  5337                           ; BSR set to: 0
  5338                           
  5339                           ; BSR set to: 0
  5340  00327C  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5341  003280  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5342  003284  0E00               	movlw	0
  5343  003286  6E21               	movwf	SETxPWM@direction,c
  5344  003288  ECA0  F01E         	call	_SETxPWM	;wreg free
  5345                           
  5346                           ;train_move_left.c: 68: Return_Val = 1;
  5347  00328C  0E01               	movlw	1
  5348  00328E  0100               	movlb	0	; () banked
  5349  003290  6FE5               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5353  003292  0E00               	movlw	0
  5354  003294  6E14               	movwf	GETxAPIxVAL@index+1,c
  5355  003296  0E18               	movlw	24
  5356  003298  6E13               	movwf	GETxAPIxVAL@index,c
  5357  00329A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5358  00329E  5013               	movf	?_GETxAPIxVAL,w,c
  5359  0032A0  0100               	movlb	0	; () banked
  5360  0032A2  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5361  0032A4  5014               	movf	?_GETxAPIxVAL+1,w,c
  5362  0032A6  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5363  0032A8  A0D8               	btfss	status,0,c
  5364  0032AA  D004               	goto	l1075
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;train_move_left.c: 70: {
  5368                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5369  0032AC  0E00               	movlw	0
  5370  0032AE  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5371                           
  5372                           ;train_move_left.c: 72: Return_Val = 0;
  5373  0032B0  0E00               	movlw	0
  5374  0032B2  D7A0               	goto	L69
  5375  0032B4                     l1075:
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5379                           
  5380                           ; BSR set to: 0
  5381  0032B4  0E00               	movlw	0
  5382  0032B6  6E14               	movwf	GETxAPIxVAL@index+1,c
  5383  0032B8  0E1A               	movlw	26
  5384  0032BA  6E13               	movwf	GETxAPIxVAL@index,c
  5385  0032BC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5386  0032C0  5013               	movf	?_GETxAPIxVAL,w,c
  5387  0032C2  0100               	movlb	0	; () banked
  5388  0032C4  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5389  0032C6  5014               	movf	?_GETxAPIxVAL+1,w,c
  5390  0032C8  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5391  0032CA  A0D8               	btfss	status,0,c
  5392  0032CC  D007               	goto	l1077
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;train_move_left.c: 76: {
  5396                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5397  0032CE  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5398  0032D0  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5402  0032D2  0E00               	movlw	0
  5403  0032D4  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5404  0032D6  0E00               	movlw	0
  5405  0032D8  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5406                           
  5407                           ;train_move_left.c: 79: }
  5408  0032DA  D011               	goto	l1070
  5409  0032DC                     l1077:
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5413                           
  5414                           ; BSR set to: 0
  5415  0032DC  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5416  0032DE  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;train_move_left.c: 83: }
  5420                           
  5421                           ; BSR set to: 0
  5422                           
  5423                           ;train_move_left.c: 82: default : break;
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;train_move_left.c: 81: break;
  5427                           
  5428                           ; BSR set to: 0
  5429  0032E0  D00E               	goto	l1070
  5430  0032E2                     l1067:
  5431                           
  5432                           ; BSR set to: 0
  5433  0032E2  0100               	movlb	0	; () banked
  5434  0032E4  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5435                           
  5436                           ; Switch size 1, requested type "space"
  5437                           ; Number of cases is 4, Range of values is 0 to 3
  5438                           ; switch strategies available:
  5439                           ; Name         Instructions Cycles
  5440                           ; simple_byte           13     7 (average)
  5441                           ;	Chosen strategy is simple_byte
  5442  0032E6  0A00               	xorlw	0	; case 0
  5443  0032E8  B4D8               	btfsc	status,2,c
  5444  0032EA  D770               	goto	l1068
  5445  0032EC  0A01               	xorlw	1	; case 1
  5446  0032EE  B4D8               	btfsc	status,2,c
  5447  0032F0  D783               	goto	l1071
  5448  0032F2  0A03               	xorlw	3	; case 2
  5449  0032F4  B4D8               	btfsc	status,2,c
  5450  0032F6  D7A9               	goto	l1072
  5451  0032F8  0A01               	xorlw	1	; case 3
  5452  0032FA  B4D8               	btfsc	status,2,c
  5453  0032FC  D7BF               	goto	l1074
  5454  0032FE                     l1070:
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;train_move_left.c: 85: return(Return_Val);
  5458                           
  5459                           ; BSR set to: 0
  5460  0032FE  51E5               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5461  003300  0012               	return	
  5462  003302                     __end_of_Train_Move_Left_Start:
  5463                           	opt stack 0
  5464                           tblptru	equ	0xFF8
  5465                           tblptrh	equ	0xFF7
  5466                           tblptrl	equ	0xFF6
  5467                           tablat	equ	0xFF5
  5468                           postinc0	equ	0xFEE
  5469                           wreg	equ	0xFE8
  5470                           postdec1	equ	0xFE5
  5471                           fsr1l	equ	0xFE1
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _Train_Move_Left_Brake *****************
  5475 ;; Defined at:
  5476 ;;		line 256 in file "../train_move_left.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      unsigned char 
  5483 ;; Registers used:
  5484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0
  5491 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5493 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5494 ;;Total ram usage:        2 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    6
  5497 ;; This function calls:
  5498 ;;		_GETxAPIxVAL
  5499 ;;		_SETxAPIxVAL
  5500 ;;		_SETxPWM
  5501 ;; This function is called by:
  5502 ;;		_Train_Path
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text6
  5507  002F44                     __ptext6:
  5508                           	opt stack 0
  5509  002F44                     _Train_Move_Left_Brake:
  5510                           	opt stack 22
  5511                           
  5512                           ;train_move_left.c: 258: static char Return_Val = 1;
  5513                           ;train_move_left.c: 259: static unsigned int Train_Move_Wait_Time = 0;
  5514                           ;train_move_left.c: 261: switch(Switch_Train_Move)
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;incstack = 0
  5518  002F44  D092               	goto	l1137
  5519  002F46  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5520  002F4A  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5521  002F4E  0E00               	movlw	0
  5522  002F50  6E21               	movwf	SETxPWM@direction,c
  5523  002F52  ECA0  F01E         	call	_SETxPWM	;wreg free
  5524                           
  5525                           ;train_move_left.c: 264: Return_Val = 1;
  5526  002F56  0E01               	movlw	1
  5527  002F58  0100               	movlb	0	; () banked
  5528  002F5A  6FE4               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;train_move_left.c: 265: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5532  002F5C  0E00               	movlw	0
  5533  002F5E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5534  002F60  0E15               	movlw	21
  5535  002F62  6E13               	movwf	GETxAPIxVAL@index,c
  5536  002F64  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5537  002F68  0100               	movlb	0	; () banked
  5538  002F6A  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5539  002F6C  5C13               	subwf	?_GETxAPIxVAL,w,c
  5540  002F6E  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5541  002F70  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5542  002F72  A0D8               	btfss	status,0,c
  5543  002F74  D002               	goto	l1139
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;train_move_left.c: 266: {
  5547                           ;train_move_left.c: 267: Switch_Train_Move = 1;
  5548  002F76  0E01               	movlw	1
  5549  002F78  D074               	goto	L97
  5550  002F7A                     l1139:
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;train_move_left.c: 270: }
  5554                           ;train_move_left.c: 271: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5555                           
  5556                           ; BSR set to: 0
  5557  002F7A  0E00               	movlw	0
  5558  002F7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5559  002F7E  0E19               	movlw	25
  5560  002F80  6E13               	movwf	GETxAPIxVAL@index,c
  5561  002F82  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5562  002F86  5013               	movf	?_GETxAPIxVAL,w,c
  5563  002F88  0100               	movlb	0	; () banked
  5564  002F8A  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5565  002F8C  5014               	movf	?_GETxAPIxVAL+1,w,c
  5566  002F8E  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5567  002F90  A0D8               	btfss	status,0,c
  5568  002F92  D008               	goto	l1141
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;train_move_left.c: 272: {
  5572                           ;train_move_left.c: 273: Train_Move_Pwm_Count--;
  5573  002F94  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5574  002F96  A0D8               	btfss	status,0,c
  5575  002F98  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;train_move_left.c: 274: Train_Move_Pwm_Fast_Count = 0;
  5579  002F9A  0E00               	movlw	0
  5580  002F9C  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5581  002F9E  0E00               	movlw	0
  5582  002FA0  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5583                           
  5584                           ;train_move_left.c: 275: }
  5585  002FA2  D071               	goto	l1140
  5586  002FA4                     l1141:
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;train_move_left.c: 276: else{Train_Move_Pwm_Fast_Count++;}
  5590                           
  5591                           ; BSR set to: 0
  5592  002FA4  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5593  002FA6  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;train_move_left.c: 277: break;
  5597  002FA8  D06E               	goto	l1140
  5598  002FAA                     
  5599                           ; BSR set to: 0
  5600                           
  5601                           ; BSR set to: 0
  5602  002FAA  0E00               	movlw	0
  5603  002FAC  6E14               	movwf	GETxAPIxVAL@index+1,c
  5604  002FAE  0E12               	movlw	18
  5605  002FB0  6E13               	movwf	GETxAPIxVAL@index,c
  5606  002FB2  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5607  002FB6  5013               	movf	?_GETxAPIxVAL,w,c
  5608  002FB8  0100               	movlb	0	; () banked
  5609  002FBA  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5610  002FBC  5014               	movf	?_GETxAPIxVAL+1,w,c
  5611  002FBE  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5612  002FC0  A0D8               	btfss	status,0,c
  5613  002FC2  D007               	goto	l1144
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;train_move_left.c: 280: {
  5617                           ;train_move_left.c: 281: Switch_Train_Move = 2;
  5618  002FC4  0E02               	movlw	2
  5619  002FC6  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5620                           
  5621                           ;train_move_left.c: 282: Train_Move_Wait_Time = 0;
  5622  002FC8  0E00               	movlw	0
  5623  002FCA  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5624  002FCC  0E00               	movlw	0
  5625  002FCE  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5626  002FD0  D049               	goto	l7882
  5627  002FD2                     l1144:
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;train_move_left.c: 285: }
  5631                           ;train_move_left.c: 286: Return_Val = 1;
  5632                           
  5633                           ; BSR set to: 0
  5634  002FD2  0E01               	movlw	1
  5635  002FD4  6FE4               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;train_move_left.c: 287: Train_Move_Wait_Time++;
  5639  002FD6  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5640  002FD8  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;train_move_left.c: 288: Switch_Train_Move = 1;
  5644  002FDA  0E01               	movlw	1
  5645  002FDC  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5646                           
  5647                           ;train_move_left.c: 289: break;
  5648  002FDE  D053               	goto	l1140
  5649  002FE0                     
  5650                           ; BSR set to: 0
  5651                           
  5652                           ; BSR set to: 0
  5653  002FE0  0E00               	movlw	0
  5654  002FE2  6E14               	movwf	GETxAPIxVAL@index+1,c
  5655  002FE4  0E15               	movlw	21
  5656  002FE6  6E13               	movwf	GETxAPIxVAL@index,c
  5657  002FE8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5658  002FEC  C013  F0CF         	movff	?_GETxAPIxVAL,_Train_Move_Left_Brake$2187
  5659  002FF0  C014  F0D0         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Brake$2187+1
  5660  002FF4  C0CF  F01F         	movff	_Train_Move_Left_Brake$2187,SETxPWM@speed
  5661  002FF8  C0D0  F020         	movff	_Train_Move_Left_Brake$2187+1,SETxPWM@speed+1
  5662  002FFC  0E00               	movlw	0
  5663  002FFE  6E21               	movwf	SETxPWM@direction,c
  5664  003000  ECA0  F01E         	call	_SETxPWM	;wreg free
  5665                           
  5666                           ;train_move_left.c: 292: SETxAPIxVAL(69, 1);;
  5667  003004  0E00               	movlw	0
  5668  003006  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5669  003008  0E45               	movlw	69
  5670  00300A  6E19               	movwf	SETxAPIxVAL@index,c
  5671  00300C  0E00               	movlw	0
  5672  00300E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5673  003010  0E01               	movlw	1
  5674  003012  6E1B               	movwf	SETxAPIxVAL@value,c
  5675  003014  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  5676                           
  5677                           ;train_move_left.c: 293: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5678  003018  0E00               	movlw	0
  5679  00301A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5680  00301C  0E15               	movlw	21
  5681  00301E  6E13               	movwf	GETxAPIxVAL@index,c
  5682  003020  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5683  003024  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5684  003028  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5685                           
  5686                           ;train_move_left.c: 294: Switch_Train_Move = 3;
  5687  00302C  0E03               	movlw	3
  5688  00302E  0100               	movlb	0	; () banked
  5689  003030  D018               	goto	L97
  5690  003032                     
  5691                           ; BSR set to: 0
  5692                           
  5693                           ; BSR set to: 0
  5694  003032  0E00               	movlw	0
  5695  003034  6E14               	movwf	GETxAPIxVAL@index+1,c
  5696  003036  0E14               	movlw	20
  5697  003038  6E13               	movwf	GETxAPIxVAL@index,c
  5698  00303A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5699  00303E  5013               	movf	?_GETxAPIxVAL,w,c
  5700  003040  0100               	movlb	0	; () banked
  5701  003042  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5702  003044  5014               	movf	?_GETxAPIxVAL+1,w,c
  5703  003046  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5704  003048  A0D8               	btfss	status,0,c
  5705  00304A  D008               	goto	l1147
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;train_move_left.c: 299: {
  5709                           ;train_move_left.c: 300: Switch_Train_Move = 0;
  5710  00304C  0E00               	movlw	0
  5711  00304E  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5712                           
  5713                           ;train_move_left.c: 301: Train_Move_Wait_Time = 0;
  5714  003050  0E00               	movlw	0
  5715  003052  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5716  003054  0E00               	movlw	0
  5717  003056  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5718                           
  5719                           ;train_move_left.c: 302: Return_Val = 0;
  5720  003058  0E00               	movlw	0
  5721  00305A  D005               	goto	L74
  5722  00305C                     l1147:
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;train_move_left.c: 304: }
  5726                           ;train_move_left.c: 305: Train_Move_Wait_Time++;
  5727                           
  5728                           ; BSR set to: 0
  5729  00305C  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5730  00305E  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;train_move_left.c: 306: Switch_Train_Move = 3;
  5734  003060  0E03               	movlw	3
  5735  003062                     L97:
  5736  003062  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5737  003064                     l7882:
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;train_move_left.c: 307: Return_Val = 1;
  5741  003064  0E01               	movlw	1
  5742  003066                     L74:
  5743  003066  6FE4               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;train_move_left.c: 311: }
  5747                           
  5748                           ; BSR set to: 0
  5749                           
  5750                           ;train_move_left.c: 310: default : break;
  5751                           
  5752                           ;train_move_left.c: 308: break;
  5753  003068  D00E               	goto	l1140
  5754  00306A                     l1137:
  5755                           
  5756                           ; BSR set to: 0
  5757  00306A  0100               	movlb	0	; () banked
  5758  00306C  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5759                           
  5760                           ; Switch size 1, requested type "space"
  5761                           ; Number of cases is 4, Range of values is 0 to 3
  5762                           ; switch strategies available:
  5763                           ; Name         Instructions Cycles
  5764                           ; simple_byte           13     7 (average)
  5765                           ;	Chosen strategy is simple_byte
  5766  00306E  0A00               	xorlw	0	; case 0
  5767  003070  B4D8               	btfsc	status,2,c
  5768  003072  D769               	goto	l1138
  5769  003074  0A01               	xorlw	1	; case 1
  5770  003076  B4D8               	btfsc	status,2,c
  5771  003078  D798               	goto	l1143
  5772  00307A  0A03               	xorlw	3	; case 2
  5773  00307C  B4D8               	btfsc	status,2,c
  5774  00307E  D7B0               	goto	l1145
  5775  003080  0A01               	xorlw	1	; case 3
  5776  003082  B4D8               	btfsc	status,2,c
  5777  003084  D7D6               	goto	l1146
  5778  003086                     l1140:
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;train_move_left.c: 313: return(Return_Val);
  5782                           
  5783                           ; BSR set to: 0
  5784  003086  51E4               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5785  003088  0012               	return	
  5786  00308A                     __end_of_Train_Move_Left_Brake:
  5787                           	opt stack 0
  5788                           tblptru	equ	0xFF8
  5789                           tblptrh	equ	0xFF7
  5790                           tblptrl	equ	0xFF6
  5791                           tablat	equ	0xFF5
  5792                           postinc0	equ	0xFEE
  5793                           wreg	equ	0xFE8
  5794                           postdec1	equ	0xFE5
  5795                           fsr1l	equ	0xFE1
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _Right_Mountain_From_The_Right *****************
  5799 ;; Defined at:
  5800 ;;		line 103 in file "../train_move_left.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;  rc              1    wreg     unsigned char 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  rc              1   21[BANK0 ] unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      unsigned char 
  5807 ;; Registers used:
  5808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5814 ;;      Params:         0       0       0       0       0       0       0       0       0
  5815 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5817 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5818 ;;Total ram usage:        1 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    6
  5821 ;; This function calls:
  5822 ;;		_GETxAPIxVAL
  5823 ;;		_SETxPWM
  5824 ;; This function is called by:
  5825 ;;		_Train_Path
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           	psect	text7
  5830  003562                     __ptext7:
  5831                           	opt stack 0
  5832  003562                     _Right_Mountain_From_The_Right:
  5833                           	opt stack 22
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;incstack = 0
  5837                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5838  003562  0100               	movlb	0	; () banked
  5839  003564  6FCF               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  5840                           
  5841                           ;train_move_left.c: 105: static char Return_Val = 1;
  5842                           ;train_move_left.c: 107: switch (Switch_Moutain){
  5843  003566  D07E               	goto	l1085
  5844  003568  0E03               	movlw	3
  5845  00356A  0100               	movlb	0	; () banked
  5846  00356C  19CF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5847  00356E  B4D8               	btfsc	status,2,c
  5848  003570  D00C               	goto	u6990
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  5852                           
  5853                           ; BSR set to: 0
  5854                           
  5855                           ;train_move_left.c: 111: }
  5856                           
  5857                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;train_move_left.c: 109: Switch_Moutain = 1;
  5861  003572  0E00               	movlw	0
  5862  003574  6E14               	movwf	GETxAPIxVAL@index+1,c
  5863  003576  0E35               	movlw	53
  5864  003578  6E13               	movwf	GETxAPIxVAL@index,c
  5865  00357A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5866  00357E  5013               	movf	?_GETxAPIxVAL,w,c
  5867  003580  5C26               	subwf	_Mountain_Delay_Counter,w,c
  5868  003582  5014               	movf	?_GETxAPIxVAL+1,w,c
  5869  003584  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  5870  003586  A0D8               	btfss	status,0,c
  5871  003588  D007               	goto	l1089
  5872  00358A                     u6990:
  5873                           
  5874                           ;train_move_left.c: 114: Switch_Moutain = 1;
  5875  00358A  0E01               	movlw	1
  5876  00358C  6E2E               	movwf	_Switch_Moutain,c
  5877                           
  5878                           ;train_move_left.c: 115: Mountain_Delay_Counter = 0;
  5879  00358E  0E00               	movlw	0
  5880  003590  6E27               	movwf	_Mountain_Delay_Counter+1,c
  5881  003592  0E00               	movlw	0
  5882  003594  6E26               	movwf	_Mountain_Delay_Counter,c
  5883                           
  5884                           ;train_move_left.c: 116: }
  5885  003596  D063               	goto	l1103
  5886  003598                     l1089:
  5887                           
  5888                           ;train_move_left.c: 117: else{
  5889                           ;train_move_left.c: 118: Mountain_Delay_Counter++;
  5890  003598  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  5891  00359A  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  5892  00359C  D060               	goto	l1103
  5893  00359E  0E04               	movlw	4
  5894  0035A0  0100               	movlb	0	; () banked
  5895  0035A2  19CF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5896  0035A4  A4D8               	btfss	status,2,c
  5897  0035A6  D026               	goto	l1093
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;train_move_left.c: 125: SETxPWM(Train_Move_Pwm_Count, 0);
  5901  0035A8  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5902  0035AC  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5903  0035B0  0E00               	movlw	0
  5904  0035B2  6E21               	movwf	SETxPWM@direction,c
  5905  0035B4  ECA0  F01E         	call	_SETxPWM	;wreg free
  5906                           
  5907                           ;train_move_left.c: 126: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  5908  0035B8  0E00               	movlw	0
  5909  0035BA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5910  0035BC  0E2E               	movlw	46
  5911  0035BE  6E13               	movwf	GETxAPIxVAL@index,c
  5912  0035C0  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5913  0035C4  0100               	movlb	0	; () banked
  5914  0035C6  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5915  0035C8  5C13               	subwf	?_GETxAPIxVAL,w,c
  5916  0035CA  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5917  0035CC  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5918  0035CE  B0D8               	btfsc	status,0,c
  5919  0035D0  D02A               	goto	u7040
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;train_move_left.c: 133: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5923                           
  5924                           ; BSR set to: 0
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;train_move_left.c: 132: }
  5928                           
  5929                           ;train_move_left.c: 131: break;
  5930                           
  5931                           ;train_move_left.c: 130: Return_Val = 0;
  5932                           
  5933                           ;train_move_left.c: 129: Switch_Moutain = 0;
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;train_move_left.c: 127: {
  5937                           ;train_move_left.c: 128: Switch_Train_Move = 0;
  5938  0035D2  0E00               	movlw	0
  5939  0035D4  6E14               	movwf	GETxAPIxVAL@index+1,c
  5940  0035D6  0E1A               	movlw	26
  5941  0035D8  6E13               	movwf	GETxAPIxVAL@index,c
  5942  0035DA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5943  0035DE  5013               	movf	?_GETxAPIxVAL,w,c
  5944  0035E0  0100               	movlb	0	; () banked
  5945  0035E2  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5946  0035E4  5014               	movf	?_GETxAPIxVAL+1,w,c
  5947  0035E6  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5948  0035E8  A0D8               	btfss	status,0,c
  5949  0035EA  D037               	goto	l1102
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;train_move_left.c: 134: {
  5953                           ;train_move_left.c: 135: Train_Move_Pwm_Count--;
  5954  0035EC  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5955  0035EE  A0D8               	btfss	status,0,c
  5956  0035F0  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5957  0035F2  D02E               	goto	l8046
  5958  0035F4                     l1093:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;train_move_left.c: 140: else if (rc == 3){
  5962                           
  5963                           ; BSR set to: 0
  5964  0035F4  0E03               	movlw	3
  5965  0035F6  19CF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5966  0035F8  A4D8               	btfss	status,2,c
  5967  0035FA  D031               	goto	l1103
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;train_move_left.c: 141: SETxPWM(Train_Move_Pwm_Count, 0);
  5971  0035FC  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5972  003600  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5973  003604  0E00               	movlw	0
  5974  003606  6E21               	movwf	SETxPWM@direction,c
  5975  003608  ECA0  F01E         	call	_SETxPWM	;wreg free
  5976                           
  5977                           ;train_move_left.c: 142: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5978  00360C  0E00               	movlw	0
  5979  00360E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5980  003610  0E18               	movlw	24
  5981  003612  6E13               	movwf	GETxAPIxVAL@index,c
  5982  003614  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  5983  003618  5013               	movf	?_GETxAPIxVAL,w,c
  5984  00361A  0100               	movlb	0	; () banked
  5985  00361C  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5986  00361E  5014               	movf	?_GETxAPIxVAL+1,w,c
  5987  003620  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5988  003622  A0D8               	btfss	status,0,c
  5989  003624  D006               	goto	l1100
  5990  003626                     u7040:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;train_move_left.c: 143: {
  5994                           ;train_move_left.c: 144: Switch_Train_Move = 0;
  5995  003626  0E00               	movlw	0
  5996  003628  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5997                           
  5998                           ;train_move_left.c: 145: Switch_Moutain = 0;
  5999  00362A  0E00               	movlw	0
  6000  00362C  6E2E               	movwf	_Switch_Moutain,c
  6001                           
  6002                           ;train_move_left.c: 146: Return_Val = 0;
  6003  00362E  0E00               	movlw	0
  6004  003630  D017               	goto	L78
  6005  003632                     l1100:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;train_move_left.c: 149: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6009                           
  6010                           ; BSR set to: 0
  6011  003632  0E00               	movlw	0
  6012  003634  6E14               	movwf	GETxAPIxVAL@index+1,c
  6013  003636  0E1A               	movlw	26
  6014  003638  6E13               	movwf	GETxAPIxVAL@index,c
  6015  00363A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6016  00363E  5013               	movf	?_GETxAPIxVAL,w,c
  6017  003640  0100               	movlb	0	; () banked
  6018  003642  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6019  003644  5014               	movf	?_GETxAPIxVAL+1,w,c
  6020  003646  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6021  003648  A0D8               	btfss	status,0,c
  6022  00364A  D007               	goto	l1102
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;train_move_left.c: 150: {
  6026                           ;train_move_left.c: 151: Train_Move_Pwm_Count++;
  6027  00364C  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6028  00364E  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6029  003650                     l8046:
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;train_move_left.c: 152: Train_Move_Pwm_Fast_Count = 0;
  6033  003650  0E00               	movlw	0
  6034  003652  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6035  003654  0E00               	movlw	0
  6036  003656  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6037                           
  6038                           ;train_move_left.c: 153: }
  6039  003658  D002               	goto	l1103
  6040  00365A                     l1102:
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;train_move_left.c: 154: else{Train_Move_Pwm_Fast_Count++;}
  6044                           
  6045                           ; BSR set to: 0
  6046  00365A  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6047  00365C  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6048  00365E                     l1103:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;train_move_left.c: 155: }
  6052                           ;train_move_left.c: 156: Return_Val = 1;
  6053                           
  6054                           ; BSR set to: 0
  6055                           
  6056                           ; BSR set to: 0
  6057                           
  6058                           ; BSR set to: 0
  6059                           
  6060                           ; BSR set to: 0
  6061  00365E  0E01               	movlw	1
  6062  003660                     L78:
  6063  003660  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;train_move_left.c: 161: }
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;train_move_left.c: 160: break;
  6070                           
  6071                           ;train_move_left.c: 159: default:
  6072                           
  6073                           ;train_move_left.c: 157: break;
  6074  003662  D007               	goto	l1091
  6075  003664                     l1085:
  6076                           
  6077                           ; BSR set to: 0
  6078  003664  502E               	movf	_Switch_Moutain,w,c
  6079                           
  6080                           ; Switch size 1, requested type "space"
  6081                           ; Number of cases is 2, Range of values is 0 to 1
  6082                           ; switch strategies available:
  6083                           ; Name         Instructions Cycles
  6084                           ; simple_byte            7     4 (average)
  6085                           ;	Chosen strategy is simple_byte
  6086  003666  0A00               	xorlw	0	; case 0
  6087  003668  B4D8               	btfsc	status,2,c
  6088  00366A  D77E               	goto	l1086
  6089  00366C  0A01               	xorlw	1	; case 1
  6090  00366E  B4D8               	btfsc	status,2,c
  6091  003670  D796               	goto	l1092
  6092  003672                     l1091:
  6093                           
  6094                           ;train_move_left.c: 163: return(Return_Val);
  6095  003672  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  6096  003674  0012               	return	
  6097  003676                     __end_of_Right_Mountain_From_The_Right:
  6098                           	opt stack 0
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           postinc0	equ	0xFEE
  6104                           wreg	equ	0xFE8
  6105                           postdec1	equ	0xFE5
  6106                           fsr1l	equ	0xFE1
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function _Right_Mountain_From_The_Left *****************
  6110 ;; Defined at:
  6111 ;;		line 179 in file "../train_move_right.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  rc              1    wreg     unsigned char 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  rc              1   21[BANK0 ] unsigned char 
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      unsigned char 
  6118 ;; Registers used:
  6119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6125 ;;      Params:         0       0       0       0       0       0       0       0       0
  6126 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6128 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6129 ;;Total ram usage:        1 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    6
  6132 ;; This function calls:
  6133 ;;		_GETxAPIxVAL
  6134 ;;		_SETxPWM
  6135 ;; This function is called by:
  6136 ;;		_Train_Path
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           	psect	text8
  6141  003676                     __ptext8:
  6142                           	opt stack 0
  6143  003676                     _Right_Mountain_From_The_Left:
  6144                           	opt stack 22
  6145                           
  6146                           ;incstack = 0
  6147                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6148  003676  0100               	movlb	0	; () banked
  6149  003678  6FCF               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6150                           
  6151                           ;train_move_right.c: 181: static char Return_Val = 1;
  6152                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6153  00367A  D07E               	goto	l1213
  6154  00367C  0E04               	movlw	4
  6155  00367E  0100               	movlb	0	; () banked
  6156  003680  19CF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6157  003682  B4D8               	btfsc	status,2,c
  6158  003684  D00C               	goto	u6910
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  6162                           
  6163                           ; BSR set to: 0
  6164                           
  6165                           ;train_move_right.c: 187: }
  6166                           
  6167                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6171  003686  0E00               	movlw	0
  6172  003688  6E14               	movwf	GETxAPIxVAL@index+1,c
  6173  00368A  0E38               	movlw	56
  6174  00368C  6E13               	movwf	GETxAPIxVAL@index,c
  6175  00368E  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6176  003692  5013               	movf	?_GETxAPIxVAL,w,c
  6177  003694  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6178  003696  5014               	movf	?_GETxAPIxVAL+1,w,c
  6179  003698  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6180  00369A  A0D8               	btfss	status,0,c
  6181  00369C  D007               	goto	l1217
  6182  00369E                     u6910:
  6183                           
  6184                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6185  00369E  0E01               	movlw	1
  6186  0036A0  6E2E               	movwf	_Switch_Moutain,c
  6187                           
  6188                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6189  0036A2  0E00               	movlw	0
  6190  0036A4  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6191  0036A6  0E00               	movlw	0
  6192  0036A8  6E26               	movwf	_Mountain_Delay_Counter,c
  6193                           
  6194                           ;train_move_right.c: 191: }
  6195  0036AA  D063               	goto	l1231
  6196  0036AC                     l1217:
  6197                           
  6198                           ;train_move_right.c: 192: else{
  6199                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6200  0036AC  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6201  0036AE  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6202  0036B0  D060               	goto	l1231
  6203  0036B2  0E03               	movlw	3
  6204  0036B4  0100               	movlb	0	; () banked
  6205  0036B6  19CF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6206  0036B8  A4D8               	btfss	status,2,c
  6207  0036BA  D025               	goto	l1221
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6211  0036BC  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6212  0036C0  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6213  0036C4  0E01               	movlw	1
  6214  0036C6  6E21               	movwf	SETxPWM@direction,c
  6215  0036C8  ECA0  F01E         	call	_SETxPWM	;wreg free
  6216                           
  6217                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  6218  0036CC  0E00               	movlw	0
  6219  0036CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  6220  0036D0  0E2F               	movlw	47
  6221  0036D2  6E13               	movwf	GETxAPIxVAL@index,c
  6222  0036D4  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6223  0036D8  5013               	movf	?_GETxAPIxVAL,w,c
  6224  0036DA  0100               	movlb	0	; () banked
  6225  0036DC  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6226  0036DE  5014               	movf	?_GETxAPIxVAL+1,w,c
  6227  0036E0  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6228  0036E2  B0D8               	btfsc	status,0,c
  6229  0036E4  D029               	goto	u6960
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6233                           
  6234                           ; BSR set to: 0
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;train_move_right.c: 206: }
  6238                           
  6239                           ;train_move_right.c: 205: break;
  6240                           
  6241                           ;train_move_right.c: 204: Return_Val = 0;
  6242                           
  6243                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;train_move_right.c: 201: {
  6247                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6248  0036E6  0E00               	movlw	0
  6249  0036E8  6E14               	movwf	GETxAPIxVAL@index+1,c
  6250  0036EA  0E1A               	movlw	26
  6251  0036EC  6E13               	movwf	GETxAPIxVAL@index,c
  6252  0036EE  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6253  0036F2  5013               	movf	?_GETxAPIxVAL,w,c
  6254  0036F4  0100               	movlb	0	; () banked
  6255  0036F6  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6256  0036F8  5014               	movf	?_GETxAPIxVAL+1,w,c
  6257  0036FA  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6258  0036FC  A0D8               	btfss	status,0,c
  6259  0036FE  D037               	goto	l1230
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;train_move_right.c: 208: {
  6263                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6264  003700  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6265  003702  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6266  003704  D02F               	goto	l7990
  6267  003706                     l1221:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;train_move_right.c: 214: else if (rc == 4){
  6271                           
  6272                           ; BSR set to: 0
  6273  003706  0E04               	movlw	4
  6274  003708  19CF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6275  00370A  A4D8               	btfss	status,2,c
  6276  00370C  D032               	goto	l1231
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6280  00370E  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6281  003712  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6282  003716  0E01               	movlw	1
  6283  003718  6E21               	movwf	SETxPWM@direction,c
  6284  00371A  ECA0  F01E         	call	_SETxPWM	;wreg free
  6285                           
  6286                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  6287  00371E  0E00               	movlw	0
  6288  003720  6E14               	movwf	GETxAPIxVAL@index+1,c
  6289  003722  0E17               	movlw	23
  6290  003724  6E13               	movwf	GETxAPIxVAL@index,c
  6291  003726  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6292  00372A  0100               	movlb	0	; () banked
  6293  00372C  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6294  00372E  5C13               	subwf	?_GETxAPIxVAL,w,c
  6295  003730  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6296  003732  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6297  003734  A0D8               	btfss	status,0,c
  6298  003736  D006               	goto	l1228
  6299  003738                     u6960:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;train_move_right.c: 217: {
  6303                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6304  003738  0E00               	movlw	0
  6305  00373A  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6306                           
  6307                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6308  00373C  0E00               	movlw	0
  6309  00373E  6E2E               	movwf	_Switch_Moutain,c
  6310                           
  6311                           ;train_move_right.c: 220: Return_Val = 0;
  6312  003740  0E00               	movlw	0
  6313  003742  D018               	goto	L81
  6314  003744                     l1228:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6318                           
  6319                           ; BSR set to: 0
  6320  003744  0E00               	movlw	0
  6321  003746  6E14               	movwf	GETxAPIxVAL@index+1,c
  6322  003748  0E1A               	movlw	26
  6323  00374A  6E13               	movwf	GETxAPIxVAL@index,c
  6324  00374C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6325  003750  5013               	movf	?_GETxAPIxVAL,w,c
  6326  003752  0100               	movlb	0	; () banked
  6327  003754  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6328  003756  5014               	movf	?_GETxAPIxVAL+1,w,c
  6329  003758  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6330  00375A  A0D8               	btfss	status,0,c
  6331  00375C  D008               	goto	l1230
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;train_move_right.c: 224: {
  6335                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  6336  00375E  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6337  003760  A0D8               	btfss	status,0,c
  6338  003762  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6339  003764                     l7990:
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  6343  003764  0E00               	movlw	0
  6344  003766  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6345  003768  0E00               	movlw	0
  6346  00376A  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6347                           
  6348                           ;train_move_right.c: 227: }
  6349  00376C  D002               	goto	l1231
  6350  00376E                     l1230:
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  6354                           
  6355                           ; BSR set to: 0
  6356  00376E  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6357  003770  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6358  003772                     l1231:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;train_move_right.c: 229: }
  6362                           ;train_move_right.c: 230: Return_Val = 1;
  6363                           
  6364                           ; BSR set to: 0
  6365                           
  6366                           ; BSR set to: 0
  6367                           
  6368                           ; BSR set to: 0
  6369                           
  6370                           ; BSR set to: 0
  6371  003772  0E01               	movlw	1
  6372  003774                     L81:
  6373  003774  6E48               	movwf	Right_Mountain_From_The_Left@Return_Val,c
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;train_move_right.c: 235: }
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;train_move_right.c: 234: break;
  6380                           
  6381                           ;train_move_right.c: 233: default:
  6382                           
  6383                           ;train_move_right.c: 231: break;
  6384  003776  D007               	goto	l1219
  6385  003778                     l1213:
  6386                           
  6387                           ; BSR set to: 0
  6388  003778  502E               	movf	_Switch_Moutain,w,c
  6389                           
  6390                           ; Switch size 1, requested type "space"
  6391                           ; Number of cases is 2, Range of values is 0 to 1
  6392                           ; switch strategies available:
  6393                           ; Name         Instructions Cycles
  6394                           ; simple_byte            7     4 (average)
  6395                           ;	Chosen strategy is simple_byte
  6396  00377A  0A00               	xorlw	0	; case 0
  6397  00377C  B4D8               	btfsc	status,2,c
  6398  00377E  D77E               	goto	l1214
  6399  003780  0A01               	xorlw	1	; case 1
  6400  003782  B4D8               	btfsc	status,2,c
  6401  003784  D796               	goto	l1220
  6402  003786                     l1219:
  6403                           
  6404                           ;train_move_right.c: 237: return(Return_Val);
  6405  003786  5048               	movf	Right_Mountain_From_The_Left@Return_Val,w,c
  6406  003788  0012               	return	
  6407  00378A                     __end_of_Right_Mountain_From_The_Left:
  6408                           	opt stack 0
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           postdec1	equ	0xFE5
  6416                           fsr1l	equ	0xFE1
  6417                           status	equ	0xFD8
  6418                           
  6419 ;; *************** function _Left_Mountain_From_The_Right *****************
  6420 ;; Defined at:
  6421 ;;		line 180 in file "../train_move_left.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  rc              1    wreg     unsigned char 
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;  rc              1   21[BANK0 ] unsigned char 
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  1    wreg      unsigned char 
  6428 ;; Registers used:
  6429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6435 ;;      Params:         0       0       0       0       0       0       0       0       0
  6436 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6438 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6439 ;;Total ram usage:        1 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    6
  6442 ;; This function calls:
  6443 ;;		_GETxAPIxVAL
  6444 ;;		_SETxPWM
  6445 ;; This function is called by:
  6446 ;;		_Train_Path
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           	psect	text9
  6451  0039B0                     __ptext9:
  6452                           	opt stack 0
  6453  0039B0                     _Left_Mountain_From_The_Right:
  6454                           	opt stack 22
  6455                           
  6456                           ;incstack = 0
  6457                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6458  0039B0  0100               	movlb	0	; () banked
  6459  0039B2  6FCF               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6460                           
  6461                           ;train_move_left.c: 182: static char Return_Val = 1;
  6462                           ;train_move_left.c: 184: switch (Switch_Moutain){
  6463  0039B4  D07C               	goto	l1110
  6464  0039B6  0100               	movlb	0	; () banked
  6465  0039B8  05CF               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6466  0039BA  B4D8               	btfsc	status,2,c
  6467  0039BC  D00C               	goto	u7070
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;train_move_left.c: 189: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6471                           
  6472                           ; BSR set to: 0
  6473                           
  6474                           ;train_move_left.c: 188: }
  6475                           
  6476                           ;train_move_left.c: 187: Mountain_Delay_Counter = 0;
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;train_move_left.c: 186: Switch_Moutain = 1;
  6480  0039BE  0E00               	movlw	0
  6481  0039C0  6E14               	movwf	GETxAPIxVAL@index+1,c
  6482  0039C2  0E3A               	movlw	58
  6483  0039C4  6E13               	movwf	GETxAPIxVAL@index,c
  6484  0039C6  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6485  0039CA  5013               	movf	?_GETxAPIxVAL,w,c
  6486  0039CC  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6487  0039CE  5014               	movf	?_GETxAPIxVAL+1,w,c
  6488  0039D0  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6489  0039D2  A0D8               	btfss	status,0,c
  6490  0039D4  D007               	goto	l1114
  6491  0039D6                     u7070:
  6492                           
  6493                           ;train_move_left.c: 190: Switch_Moutain = 1;
  6494  0039D6  0E01               	movlw	1
  6495  0039D8  6E2E               	movwf	_Switch_Moutain,c
  6496                           
  6497                           ;train_move_left.c: 191: Mountain_Delay_Counter = 0;
  6498  0039DA  0E00               	movlw	0
  6499  0039DC  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6500  0039DE  0E00               	movlw	0
  6501  0039E0  6E26               	movwf	_Mountain_Delay_Counter,c
  6502                           
  6503                           ;train_move_left.c: 192: }
  6504  0039E2  D062               	goto	l1128
  6505  0039E4                     l1114:
  6506                           
  6507                           ;train_move_left.c: 193: else{
  6508                           ;train_move_left.c: 194: Mountain_Delay_Counter++;
  6509  0039E4  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6510  0039E6  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6511  0039E8  D05F               	goto	l1128
  6512  0039EA  0E02               	movlw	2
  6513  0039EC  0100               	movlb	0	; () banked
  6514  0039EE  19CF               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6515  0039F0  A4D8               	btfss	status,2,c
  6516  0039F2  D025               	goto	l1118
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;train_move_left.c: 200: SETxPWM(Train_Move_Pwm_Count, 0);
  6520  0039F4  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6521  0039F8  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6522  0039FC  0E00               	movlw	0
  6523  0039FE  6E21               	movwf	SETxPWM@direction,c
  6524  003A00  ECA0  F01E         	call	_SETxPWM	;wreg free
  6525                           
  6526                           ;train_move_left.c: 201: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6527  003A04  0E00               	movlw	0
  6528  003A06  6E14               	movwf	GETxAPIxVAL@index+1,c
  6529  003A08  0E34               	movlw	52
  6530  003A0A  6E13               	movwf	GETxAPIxVAL@index,c
  6531  003A0C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6532  003A10  5013               	movf	?_GETxAPIxVAL,w,c
  6533  003A12  0100               	movlb	0	; () banked
  6534  003A14  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6535  003A16  5014               	movf	?_GETxAPIxVAL+1,w,c
  6536  003A18  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6537  003A1A  B0D8               	btfsc	status,0,c
  6538  003A1C  D028               	goto	u7120
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;train_move_left.c: 208: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6542                           
  6543                           ; BSR set to: 0
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;train_move_left.c: 207: }
  6547                           
  6548                           ;train_move_left.c: 206: break;
  6549                           
  6550                           ;train_move_left.c: 205: Return_Val = 0;
  6551                           
  6552                           ;train_move_left.c: 204: Switch_Moutain = 0;
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;train_move_left.c: 202: {
  6556                           ;train_move_left.c: 203: Switch_Train_Move = 0;
  6557  003A1E  0E00               	movlw	0
  6558  003A20  6E14               	movwf	GETxAPIxVAL@index+1,c
  6559  003A22  0E1A               	movlw	26
  6560  003A24  6E13               	movwf	GETxAPIxVAL@index,c
  6561  003A26  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6562  003A2A  5013               	movf	?_GETxAPIxVAL,w,c
  6563  003A2C  0100               	movlb	0	; () banked
  6564  003A2E  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6565  003A30  5014               	movf	?_GETxAPIxVAL+1,w,c
  6566  003A32  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6567  003A34  A0D8               	btfss	status,0,c
  6568  003A36  D036               	goto	l1127
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;train_move_left.c: 209: {
  6572                           ;train_move_left.c: 210: Train_Move_Pwm_Count++;
  6573  003A38  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6574  003A3A  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6575  003A3C  D02E               	goto	l8102
  6576  003A3E                     l1118:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;train_move_left.c: 215: else if (rc == 1){
  6580                           
  6581                           ; BSR set to: 0
  6582  003A3E  05CF               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6583  003A40  A4D8               	btfss	status,2,c
  6584  003A42  D032               	goto	l1128
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;train_move_left.c: 216: SETxPWM(Train_Move_Pwm_Count, 0);
  6588  003A44  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6589  003A48  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6590  003A4C  0E00               	movlw	0
  6591  003A4E  6E21               	movwf	SETxPWM@direction,c
  6592  003A50  ECA0  F01E         	call	_SETxPWM	;wreg free
  6593                           
  6594                           ;train_move_left.c: 217: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6595  003A54  0E00               	movlw	0
  6596  003A56  6E14               	movwf	GETxAPIxVAL@index+1,c
  6597  003A58  0E18               	movlw	24
  6598  003A5A  6E13               	movwf	GETxAPIxVAL@index,c
  6599  003A5C  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6600  003A60  0100               	movlb	0	; () banked
  6601  003A62  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6602  003A64  5C13               	subwf	?_GETxAPIxVAL,w,c
  6603  003A66  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6604  003A68  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6605  003A6A  A0D8               	btfss	status,0,c
  6606  003A6C  D006               	goto	l1125
  6607  003A6E                     u7120:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;train_move_left.c: 218: {
  6611                           ;train_move_left.c: 219: Switch_Train_Move = 0;
  6612  003A6E  0E00               	movlw	0
  6613  003A70  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6614                           
  6615                           ;train_move_left.c: 220: Switch_Moutain = 0;
  6616  003A72  0E00               	movlw	0
  6617  003A74  6E2E               	movwf	_Switch_Moutain,c
  6618                           
  6619                           ;train_move_left.c: 221: Return_Val = 0;
  6620  003A76  0E00               	movlw	0
  6621  003A78  D018               	goto	L84
  6622  003A7A                     l1125:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;train_move_left.c: 224: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6626                           
  6627                           ; BSR set to: 0
  6628  003A7A  0E00               	movlw	0
  6629  003A7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  6630  003A7E  0E1A               	movlw	26
  6631  003A80  6E13               	movwf	GETxAPIxVAL@index,c
  6632  003A82  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6633  003A86  5013               	movf	?_GETxAPIxVAL,w,c
  6634  003A88  0100               	movlb	0	; () banked
  6635  003A8A  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6636  003A8C  5014               	movf	?_GETxAPIxVAL+1,w,c
  6637  003A8E  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6638  003A90  A0D8               	btfss	status,0,c
  6639  003A92  D008               	goto	l1127
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;train_move_left.c: 225: {
  6643                           ;train_move_left.c: 226: Train_Move_Pwm_Count--;
  6644  003A94  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6645  003A96  A0D8               	btfss	status,0,c
  6646  003A98  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6647  003A9A                     l8102:
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;train_move_left.c: 227: Train_Move_Pwm_Fast_Count = 0;
  6651  003A9A  0E00               	movlw	0
  6652  003A9C  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6653  003A9E  0E00               	movlw	0
  6654  003AA0  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6655                           
  6656                           ;train_move_left.c: 228: }
  6657  003AA2  D002               	goto	l1128
  6658  003AA4                     l1127:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;train_move_left.c: 229: else{Train_Move_Pwm_Fast_Count++;}
  6662                           
  6663                           ; BSR set to: 0
  6664  003AA4  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6665  003AA6  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6666  003AA8                     l1128:
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;train_move_left.c: 230: }
  6670                           ;train_move_left.c: 231: Return_Val = 1;
  6671                           
  6672                           ; BSR set to: 0
  6673                           
  6674                           ; BSR set to: 0
  6675                           
  6676                           ; BSR set to: 0
  6677                           
  6678                           ; BSR set to: 0
  6679  003AA8  0E01               	movlw	1
  6680  003AAA                     L84:
  6681  003AAA  6E4A               	movwf	Left_Mountain_From_The_Right@Return_Val,c
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;train_move_left.c: 236: }
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;train_move_left.c: 235: break;
  6688                           
  6689                           ;train_move_left.c: 234: default:
  6690                           
  6691                           ;train_move_left.c: 232: break;
  6692  003AAC  D007               	goto	l1116
  6693  003AAE                     l1110:
  6694                           
  6695                           ; BSR set to: 0
  6696  003AAE  502E               	movf	_Switch_Moutain,w,c
  6697                           
  6698                           ; Switch size 1, requested type "space"
  6699                           ; Number of cases is 2, Range of values is 0 to 1
  6700                           ; switch strategies available:
  6701                           ; Name         Instructions Cycles
  6702                           ; simple_byte            7     4 (average)
  6703                           ;	Chosen strategy is simple_byte
  6704  003AB0  0A00               	xorlw	0	; case 0
  6705  003AB2  B4D8               	btfsc	status,2,c
  6706  003AB4  D780               	goto	l1111
  6707  003AB6  0A01               	xorlw	1	; case 1
  6708  003AB8  B4D8               	btfsc	status,2,c
  6709  003ABA  D797               	goto	l1117
  6710  003ABC                     l1116:
  6711                           
  6712                           ;train_move_left.c: 238: return(Return_Val);
  6713  003ABC  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  6714  003ABE  0012               	return	
  6715  003AC0                     __end_of_Left_Mountain_From_The_Right:
  6716                           	opt stack 0
  6717                           tblptru	equ	0xFF8
  6718                           tblptrh	equ	0xFF7
  6719                           tblptrl	equ	0xFF6
  6720                           tablat	equ	0xFF5
  6721                           postinc0	equ	0xFEE
  6722                           wreg	equ	0xFE8
  6723                           postdec1	equ	0xFE5
  6724                           fsr1l	equ	0xFE1
  6725                           status	equ	0xFD8
  6726                           
  6727 ;; *************** function _Left_Mountain_From_The_Left *****************
  6728 ;; Defined at:
  6729 ;;		line 104 in file "../train_move_right.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  rc              1    wreg     unsigned char 
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  rc              1   21[BANK0 ] unsigned char 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      unsigned char 
  6736 ;; Registers used:
  6737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0
  6744 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6745 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6746 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6747 ;;Total ram usage:        1 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    6
  6750 ;; This function calls:
  6751 ;;		_GETxAPIxVAL
  6752 ;;		_SETxPWM
  6753 ;; This function is called by:
  6754 ;;		_Train_Path
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text10
  6759  00389E                     __ptext10:
  6760                           	opt stack 0
  6761  00389E                     _Left_Mountain_From_The_Left:
  6762                           	opt stack 22
  6763                           
  6764                           ;incstack = 0
  6765                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6766  00389E  0100               	movlb	0	; () banked
  6767  0038A0  6FCF               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6768                           
  6769                           ;train_move_right.c: 106: static char Return_Val = 1;
  6770                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6771  0038A2  D07D               	goto	l1188
  6772  0038A4  0E02               	movlw	2
  6773  0038A6  0100               	movlb	0	; () banked
  6774  0038A8  19CF               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6775  0038AA  B4D8               	btfsc	status,2,c
  6776  0038AC  D00C               	goto	u6830
  6777                           
  6778                           ; BSR set to: 0
  6779                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6780                           
  6781                           ; BSR set to: 0
  6782                           
  6783                           ;train_move_right.c: 112: }
  6784                           
  6785                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6789  0038AE  0E00               	movlw	0
  6790  0038B0  6E14               	movwf	GETxAPIxVAL@index+1,c
  6791  0038B2  0E3B               	movlw	59
  6792  0038B4  6E13               	movwf	GETxAPIxVAL@index,c
  6793  0038B6  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6794  0038BA  5013               	movf	?_GETxAPIxVAL,w,c
  6795  0038BC  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6796  0038BE  5014               	movf	?_GETxAPIxVAL+1,w,c
  6797  0038C0  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6798  0038C2  A0D8               	btfss	status,0,c
  6799  0038C4  D007               	goto	l1192
  6800  0038C6                     u6830:
  6801                           
  6802                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6803  0038C6  0E01               	movlw	1
  6804  0038C8  6E2E               	movwf	_Switch_Moutain,c
  6805                           
  6806                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6807  0038CA  0E00               	movlw	0
  6808  0038CC  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6809  0038CE  0E00               	movlw	0
  6810  0038D0  6E26               	movwf	_Mountain_Delay_Counter,c
  6811                           
  6812                           ;train_move_right.c: 116: }
  6813  0038D2  D062               	goto	l1206
  6814  0038D4                     l1192:
  6815                           
  6816                           ;train_move_right.c: 117: else{
  6817                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  6818  0038D4  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6819  0038D6  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6820  0038D8  D05F               	goto	l1206
  6821  0038DA  0100               	movlb	0	; () banked
  6822  0038DC  05CF               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6823  0038DE  A4D8               	btfss	status,2,c
  6824  0038E0  D026               	goto	l1196
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  6828  0038E2  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6829  0038E6  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6830  0038EA  0E01               	movlw	1
  6831  0038EC  6E21               	movwf	SETxPWM@direction,c
  6832  0038EE  ECA0  F01E         	call	_SETxPWM	;wreg free
  6833                           
  6834                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  6835  0038F2  0E00               	movlw	0
  6836  0038F4  6E14               	movwf	GETxAPIxVAL@index+1,c
  6837  0038F6  0E31               	movlw	49
  6838  0038F8  6E13               	movwf	GETxAPIxVAL@index,c
  6839  0038FA  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6840  0038FE  0100               	movlb	0	; () banked
  6841  003900  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6842  003902  5C13               	subwf	?_GETxAPIxVAL,w,c
  6843  003904  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6844  003906  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6845  003908  B0D8               	btfsc	status,0,c
  6846  00390A  D02A               	goto	u6880
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6850                           
  6851                           ; BSR set to: 0
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;train_move_right.c: 131: }
  6855                           
  6856                           ;train_move_right.c: 130: break;
  6857                           
  6858                           ;train_move_right.c: 129: Return_Val = 0;
  6859                           
  6860                           ;train_move_right.c: 128: Switch_Moutain = 0;
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;train_move_right.c: 126: {
  6864                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  6865  00390C  0E00               	movlw	0
  6866  00390E  6E14               	movwf	GETxAPIxVAL@index+1,c
  6867  003910  0E1A               	movlw	26
  6868  003912  6E13               	movwf	GETxAPIxVAL@index,c
  6869  003914  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6870  003918  5013               	movf	?_GETxAPIxVAL,w,c
  6871  00391A  0100               	movlb	0	; () banked
  6872  00391C  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6873  00391E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6874  003920  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6875  003922  A0D8               	btfss	status,0,c
  6876  003924  D037               	goto	l1205
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;train_move_right.c: 133: {
  6880                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  6881  003926  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6882  003928  A0D8               	btfss	status,0,c
  6883  00392A  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6884  00392C  D02E               	goto	l7934
  6885  00392E                     l1196:
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;train_move_right.c: 139: else if (rc == 2){
  6889                           
  6890                           ; BSR set to: 0
  6891  00392E  0E02               	movlw	2
  6892  003930  19CF               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6893  003932  A4D8               	btfss	status,2,c
  6894  003934  D031               	goto	l1206
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  6898  003936  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6899  00393A  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6900  00393E  0E01               	movlw	1
  6901  003940  6E21               	movwf	SETxPWM@direction,c
  6902  003942  ECA0  F01E         	call	_SETxPWM	;wreg free
  6903                           
  6904                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  6905  003946  0E00               	movlw	0
  6906  003948  6E14               	movwf	GETxAPIxVAL@index+1,c
  6907  00394A  0E17               	movlw	23
  6908  00394C  6E13               	movwf	GETxAPIxVAL@index,c
  6909  00394E  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6910  003952  5013               	movf	?_GETxAPIxVAL,w,c
  6911  003954  0100               	movlb	0	; () banked
  6912  003956  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6913  003958  5014               	movf	?_GETxAPIxVAL+1,w,c
  6914  00395A  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6915  00395C  A0D8               	btfss	status,0,c
  6916  00395E  D006               	goto	l1203
  6917  003960                     u6880:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;train_move_right.c: 142: {
  6921                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  6922  003960  0E00               	movlw	0
  6923  003962  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6924                           
  6925                           ;train_move_right.c: 144: Switch_Moutain = 0;
  6926  003964  0E00               	movlw	0
  6927  003966  6E2E               	movwf	_Switch_Moutain,c
  6928                           
  6929                           ;train_move_right.c: 145: Return_Val = 0;
  6930  003968  0E00               	movlw	0
  6931  00396A  D017               	goto	L87
  6932  00396C                     l1203:
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6936                           
  6937                           ; BSR set to: 0
  6938  00396C  0E00               	movlw	0
  6939  00396E  6E14               	movwf	GETxAPIxVAL@index+1,c
  6940  003970  0E1A               	movlw	26
  6941  003972  6E13               	movwf	GETxAPIxVAL@index,c
  6942  003974  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  6943  003978  5013               	movf	?_GETxAPIxVAL,w,c
  6944  00397A  0100               	movlb	0	; () banked
  6945  00397C  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6946  00397E  5014               	movf	?_GETxAPIxVAL+1,w,c
  6947  003980  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6948  003982  A0D8               	btfss	status,0,c
  6949  003984  D007               	goto	l1205
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;train_move_right.c: 149: {
  6953                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  6954  003986  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6955  003988  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6956  00398A                     l7934:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  6960  00398A  0E00               	movlw	0
  6961  00398C  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6962  00398E  0E00               	movlw	0
  6963  003990  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6964                           
  6965                           ;train_move_right.c: 152: }
  6966  003992  D002               	goto	l1206
  6967  003994                     l1205:
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  6971                           
  6972                           ; BSR set to: 0
  6973  003994  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6974  003996  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6975  003998                     l1206:
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;train_move_right.c: 154: }
  6979                           ;train_move_right.c: 155: Return_Val = 1;
  6980                           
  6981                           ; BSR set to: 0
  6982                           
  6983                           ; BSR set to: 0
  6984                           
  6985                           ; BSR set to: 0
  6986                           
  6987                           ; BSR set to: 0
  6988  003998  0E01               	movlw	1
  6989  00399A                     L87:
  6990  00399A  6E49               	movwf	Left_Mountain_From_The_Left@Return_Val,c
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;train_move_right.c: 160: }
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;train_move_right.c: 159: break;
  6997                           
  6998                           ;train_move_right.c: 158: default:
  6999                           
  7000                           ;train_move_right.c: 156: break;
  7001  00399C  D007               	goto	l1194
  7002  00399E                     l1188:
  7003                           
  7004                           ; BSR set to: 0
  7005  00399E  502E               	movf	_Switch_Moutain,w,c
  7006                           
  7007                           ; Switch size 1, requested type "space"
  7008                           ; Number of cases is 2, Range of values is 0 to 1
  7009                           ; switch strategies available:
  7010                           ; Name         Instructions Cycles
  7011                           ; simple_byte            7     4 (average)
  7012                           ;	Chosen strategy is simple_byte
  7013  0039A0  0A00               	xorlw	0	; case 0
  7014  0039A2  B4D8               	btfsc	status,2,c
  7015  0039A4  D77F               	goto	l1189
  7016  0039A6  0A01               	xorlw	1	; case 1
  7017  0039A8  B4D8               	btfsc	status,2,c
  7018  0039AA  D797               	goto	l1195
  7019  0039AC                     l1194:
  7020                           
  7021                           ;train_move_right.c: 162: return(Return_Val);
  7022  0039AC  5049               	movf	Left_Mountain_From_The_Left@Return_Val,w,c
  7023  0039AE  0012               	return	
  7024  0039B0                     __end_of_Left_Mountain_From_The_Left:
  7025                           	opt stack 0
  7026                           tblptru	equ	0xFF8
  7027                           tblptrh	equ	0xFF7
  7028                           tblptrl	equ	0xFF6
  7029                           tablat	equ	0xFF5
  7030                           postinc0	equ	0xFEE
  7031                           wreg	equ	0xFE8
  7032                           postdec1	equ	0xFE5
  7033                           fsr1l	equ	0xFE1
  7034                           status	equ	0xFD8
  7035                           
  7036 ;; *************** function _SETxPWM *****************
  7037 ;; Defined at:
  7038 ;;		line 20 in file "../set_pwm.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;  speed           2   30[COMRAM] unsigned int 
  7041 ;;  direction       1   32[COMRAM] unsigned char 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  pwm_speed       2   35[COMRAM] unsigned int 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7053 ;;      Params:         3       0       0       0       0       0       0       0       0
  7054 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7055 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7056 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7057 ;;Total ram usage:        7 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    5
  7060 ;; This function calls:
  7061 ;;		_GETxAPIxVAL
  7062 ;;		_SETxAPIxVAL
  7063 ;; This function is called by:
  7064 ;;		_Update_StateMchn
  7065 ;;		_Train_Move_Left_Start
  7066 ;;		_Right_Mountain_From_The_Right
  7067 ;;		_Left_Mountain_From_The_Right
  7068 ;;		_Train_Move_Left_Brake
  7069 ;;		_Train_Move_Right_Start
  7070 ;;		_Left_Mountain_From_The_Left
  7071 ;;		_Right_Mountain_From_The_Left
  7072 ;;		_Train_Move_Right_Brake
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text11
  7077  003D40                     __ptext11:
  7078                           	opt stack 0
  7079  003D40                     _SETxPWM:
  7080                           	opt stack 22
  7081                           
  7082                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7083                           
  7084                           ;incstack = 0
  7085  003D40  0E01               	movlw	1
  7086  003D42  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7087  003D44  6824               	setf	SETxPWM@pwm_speed,c
  7088                           
  7089                           ;set_pwm.c: 24: if (GETxAPIxVAL(86) != direction){
  7090  003D46  5021               	movf	SETxPWM@direction,w,c
  7091  003D48  6E22               	movwf	??_SETxPWM& (0+255),c
  7092  003D4A  6A23               	clrf	(??_SETxPWM+1)& (0+255),c
  7093  003D4C  0E00               	movlw	0
  7094  003D4E  6E14               	movwf	GETxAPIxVAL@index+1,c
  7095  003D50  0E56               	movlw	86
  7096  003D52  6E13               	movwf	GETxAPIxVAL@index,c
  7097  003D54  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  7098  003D58  5022               	movf	??_SETxPWM,w,c
  7099  003D5A  1813               	xorwf	?_GETxAPIxVAL,w,c
  7100  003D5C  E104               	bnz	u6520
  7101  003D5E  5023               	movf	??_SETxPWM+1,w,c
  7102  003D60  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  7103  003D62  B4D8               	btfsc	status,2,c
  7104  003D64  D009               	goto	l1261
  7105  003D66                     u6520:
  7106                           
  7107                           ;set_pwm.c: 25: SETxAPIxVAL(86, direction);
  7108  003D66  0E00               	movlw	0
  7109  003D68  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7110  003D6A  0E56               	movlw	86
  7111  003D6C  6E19               	movwf	SETxAPIxVAL@index,c
  7112  003D6E  C021  F01B         	movff	SETxPWM@direction,SETxAPIxVAL@value
  7113  003D72  6A1C               	clrf	SETxAPIxVAL@value+1,c
  7114  003D74  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7115  003D78                     l1261:
  7116                           
  7117                           ;set_pwm.c: 26: }
  7118                           ;set_pwm.c: 28: if (direction == 0){
  7119  003D78  5021               	movf	SETxPWM@direction,w,c
  7120  003D7A  A4D8               	btfss	status,2,c
  7121  003D7C  D01C               	goto	l1262
  7122                           
  7123                           ;set_pwm.c: 29: pwm_speed = 511 - (speed * 2);
  7124  003D7E  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7125  003D82  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7126  003D86  90D8               	bcf	status,0,c
  7127  003D88  3622               	rlcf	??_SETxPWM,f,c
  7128  003D8A  3623               	rlcf	??_SETxPWM+1,f,c
  7129  003D8C  1E22               	comf	??_SETxPWM,f,c
  7130  003D8E  1E23               	comf	??_SETxPWM+1,f,c
  7131  003D90  4A22               	infsnz	??_SETxPWM,f,c
  7132  003D92  2A23               	incf	??_SETxPWM+1,f,c
  7133  003D94  0EFF               	movlw	255
  7134  003D96  2422               	addwf	??_SETxPWM,w,c
  7135  003D98  6E24               	movwf	SETxPWM@pwm_speed,c
  7136  003D9A  0E01               	movlw	1
  7137  003D9C  2023               	addwfc	??_SETxPWM+1,w,c
  7138  003D9E  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7139                           
  7140                           ;set_pwm.c: 30: SETxAPIxVAL(88, pwm_speed);
  7141  003DA0  0E00               	movlw	0
  7142  003DA2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7143  003DA4  0E58               	movlw	88
  7144  003DA6  6E19               	movwf	SETxAPIxVAL@index,c
  7145  003DA8  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7146  003DAC  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7147  003DB0  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7148                           
  7149                           ;set_pwm.c: 31: }
  7150  003DB4  0012               	return	
  7151  003DB6                     l1262:
  7152                           
  7153                           ;set_pwm.c: 32: else if (direction == 1){
  7154  003DB6  0421               	decf	SETxPWM@direction,w,c
  7155  003DB8  A4D8               	btfss	status,2,c
  7156  003DBA  0012               	return	
  7157                           
  7158                           ;set_pwm.c: 33: pwm_speed = 511 + (speed * 2);
  7159  003DBC  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7160  003DC0  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7161  003DC4  90D8               	bcf	status,0,c
  7162  003DC6  3622               	rlcf	??_SETxPWM,f,c
  7163  003DC8  3623               	rlcf	??_SETxPWM+1,f,c
  7164  003DCA  0EFF               	movlw	255
  7165  003DCC  2422               	addwf	??_SETxPWM,w,c
  7166  003DCE  6E24               	movwf	SETxPWM@pwm_speed,c
  7167  003DD0  0E01               	movlw	1
  7168  003DD2  2023               	addwfc	??_SETxPWM+1,w,c
  7169  003DD4  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7170                           
  7171                           ;set_pwm.c: 34: SETxAPIxVAL(88, pwm_speed);
  7172  003DD6  0E00               	movlw	0
  7173  003DD8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7174  003DDA  0E58               	movlw	88
  7175  003DDC  6E19               	movwf	SETxAPIxVAL@index,c
  7176  003DDE  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7177  003DE2  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7178  003DE6  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7179  003DEA  0012               	return	
  7180  003DEC                     __end_of_SETxPWM:
  7181                           	opt stack 0
  7182                           tblptru	equ	0xFF8
  7183                           tblptrh	equ	0xFF7
  7184                           tblptrl	equ	0xFF6
  7185                           tablat	equ	0xFF5
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           postdec1	equ	0xFE5
  7189                           fsr1l	equ	0xFE1
  7190                           status	equ	0xFD8
  7191                           
  7192 ;; *************** function _Junction *****************
  7193 ;; Defined at:
  7194 ;;		line 26 in file "../junction.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;  Junction_Lef    1    wreg     unsigned char 
  7197 ;;  Straight_Ben    1   30[COMRAM] unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  Junction_Lef    1   31[COMRAM] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      unsigned char 
  7202 ;; Registers used:
  7203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7209 ;;      Params:         1       0       0       0       0       0       0       0       0
  7210 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7212 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7213 ;;Total ram usage:        2 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    5
  7216 ;; This function calls:
  7217 ;;		_GETxAPIxVAL
  7218 ;;		_SETxAPIxVAL
  7219 ;; This function is called by:
  7220 ;;		_Update_StateMchn
  7221 ;;		_Train_Path
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text12
  7226  002AA0                     __ptext12:
  7227                           	opt stack 0
  7228  002AA0                     _Junction:
  7229                           	opt stack 23
  7230                           
  7231                           ;incstack = 0
  7232                           ;Junction@Junction_Left_Right stored from wreg
  7233  002AA0  6E20               	movwf	Junction@Junction_Left_Right,c
  7234                           
  7235                           ;junction.c: 28: static char Return_Val = 1;
  7236                           ;junction.c: 29: static unsigned int Junction_Switch_Time = 0;
  7237                           ;junction.c: 31: switch (Switch_Junction)
  7238  002AA2  D0E2               	goto	l1022
  7239  002AA4  0E01               	movlw	1
  7240  002AA6  6E4C               	movwf	Junction@Return_Val,c
  7241                           
  7242                           ;junction.c: 34: switch (Junction_Left_Right)
  7243  002AA8  D08C               	goto	l1024
  7244  002AAA  0E00               	movlw	0
  7245  002AAC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7246  002AAE  0E40               	movlw	64
  7247  002AB0  6E19               	movwf	SETxAPIxVAL@index,c
  7248  002AB2  0E00               	movlw	0
  7249  002AB4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7250  002AB6  0E01               	movlw	1
  7251  002AB8  6E1B               	movwf	SETxAPIxVAL@value,c
  7252  002ABA  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7253                           
  7254                           ;junction.c: 39: SETxAPIxVAL(82, 1);
  7255  002ABE  0E00               	movlw	0
  7256  002AC0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7257  002AC2  0E52               	movlw	82
  7258  002AC4  6E19               	movwf	SETxAPIxVAL@index,c
  7259  002AC6  0E00               	movlw	0
  7260  002AC8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7261  002ACA  0E01               	movlw	1
  7262  002ACC  6E1B               	movwf	SETxAPIxVAL@value,c
  7263  002ACE  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7264                           
  7265                           ;junction.c: 40: SETxAPIxVAL(83, 0);
  7266  002AD2  0E00               	movlw	0
  7267  002AD4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7268  002AD6  0E53               	movlw	83
  7269  002AD8  6E19               	movwf	SETxAPIxVAL@index,c
  7270  002ADA  0E00               	movlw	0
  7271  002ADC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7272  002ADE  0E00               	movlw	0
  7273  002AE0  6E1B               	movwf	SETxAPIxVAL@value,c
  7274  002AE2  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7275                           
  7276                           ;junction.c: 41: break;
  7277  002AE6  D074               	goto	l1031
  7278  002AE8  0E00               	movlw	0
  7279  002AEA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7280  002AEC  0E41               	movlw	65
  7281  002AEE  6E19               	movwf	SETxAPIxVAL@index,c
  7282  002AF0  0E00               	movlw	0
  7283  002AF2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7284  002AF4  0E01               	movlw	1
  7285  002AF6  6E1B               	movwf	SETxAPIxVAL@value,c
  7286  002AF8  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7287                           
  7288                           ;junction.c: 43: SETxAPIxVAL(82, 0);
  7289  002AFC  0E00               	movlw	0
  7290  002AFE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7291  002B00  0E52               	movlw	82
  7292  002B02  6E19               	movwf	SETxAPIxVAL@index,c
  7293  002B04  0E00               	movlw	0
  7294  002B06  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7295  002B08  0E00               	movlw	0
  7296  002B0A  6E1B               	movwf	SETxAPIxVAL@value,c
  7297  002B0C  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7298                           
  7299                           ;junction.c: 44: SETxAPIxVAL(83, 1);
  7300  002B10  0E00               	movlw	0
  7301  002B12  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7302  002B14  0E53               	movlw	83
  7303  002B16  6E19               	movwf	SETxAPIxVAL@index,c
  7304  002B18  0E00               	movlw	0
  7305  002B1A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7306  002B1C  0E01               	movlw	1
  7307  002B1E  6E1B               	movwf	SETxAPIxVAL@value,c
  7308  002B20  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7309                           
  7310                           ;junction.c: 47: }
  7311                           
  7312                           ;junction.c: 46: default : break;
  7313                           
  7314                           ;junction.c: 45: break;
  7315  002B24  D055               	goto	l1031
  7316  002B26  501F               	movf	Junction@Straight_Bend,w,c
  7317                           
  7318                           ; Switch size 1, requested type "space"
  7319                           ; Number of cases is 2, Range of values is 0 to 1
  7320                           ; switch strategies available:
  7321                           ; Name         Instructions Cycles
  7322                           ; simple_byte            7     4 (average)
  7323                           ;	Chosen strategy is simple_byte
  7324  002B28  0A00               	xorlw	0	; case 0
  7325  002B2A  B4D8               	btfsc	status,2,c
  7326  002B2C  D7BE               	goto	l1027
  7327  002B2E  0A01               	xorlw	1	; case 1
  7328  002B30  B4D8               	btfsc	status,2,c
  7329  002B32  D7DA               	goto	l1029
  7330                           
  7331                           ;junction.c: 48: break;
  7332  002B34  D04D               	goto	l1031
  7333  002B36  0E00               	movlw	0
  7334  002B38  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7335  002B3A  0E42               	movlw	66
  7336  002B3C  6E19               	movwf	SETxAPIxVAL@index,c
  7337  002B3E  0E00               	movlw	0
  7338  002B40  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7339  002B42  0E01               	movlw	1
  7340  002B44  6E1B               	movwf	SETxAPIxVAL@value,c
  7341  002B46  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7342                           
  7343                           ;junction.c: 53: SETxAPIxVAL(84, 1);
  7344  002B4A  0E00               	movlw	0
  7345  002B4C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7346  002B4E  0E54               	movlw	84
  7347  002B50  6E19               	movwf	SETxAPIxVAL@index,c
  7348  002B52  0E00               	movlw	0
  7349  002B54  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7350  002B56  0E01               	movlw	1
  7351  002B58  6E1B               	movwf	SETxAPIxVAL@value,c
  7352  002B5A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7353                           
  7354                           ;junction.c: 54: SETxAPIxVAL(85, 0);
  7355  002B5E  0E00               	movlw	0
  7356  002B60  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7357  002B62  0E55               	movlw	85
  7358  002B64  6E19               	movwf	SETxAPIxVAL@index,c
  7359  002B66  0E00               	movlw	0
  7360  002B68  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7361  002B6A  0E00               	movlw	0
  7362  002B6C  6E1B               	movwf	SETxAPIxVAL@value,c
  7363  002B6E  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7364                           
  7365                           ;junction.c: 55: break;
  7366  002B72  D02E               	goto	l1031
  7367  002B74  0E00               	movlw	0
  7368  002B76  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7369  002B78  0E43               	movlw	67
  7370  002B7A  6E19               	movwf	SETxAPIxVAL@index,c
  7371  002B7C  0E00               	movlw	0
  7372  002B7E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7373  002B80  0E01               	movlw	1
  7374  002B82  6E1B               	movwf	SETxAPIxVAL@value,c
  7375  002B84  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7376                           
  7377                           ;junction.c: 57: SETxAPIxVAL(84, 0);
  7378  002B88  0E00               	movlw	0
  7379  002B8A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7380  002B8C  0E54               	movlw	84
  7381  002B8E  6E19               	movwf	SETxAPIxVAL@index,c
  7382  002B90  0E00               	movlw	0
  7383  002B92  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7384  002B94  0E00               	movlw	0
  7385  002B96  6E1B               	movwf	SETxAPIxVAL@value,c
  7386  002B98  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7387                           
  7388                           ;junction.c: 58: SETxAPIxVAL(85, 1);
  7389  002B9C  0E00               	movlw	0
  7390  002B9E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7391  002BA0  0E55               	movlw	85
  7392  002BA2  6E19               	movwf	SETxAPIxVAL@index,c
  7393  002BA4  0E00               	movlw	0
  7394  002BA6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7395  002BA8  0E01               	movlw	1
  7396  002BAA  6E1B               	movwf	SETxAPIxVAL@value,c
  7397  002BAC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7398                           
  7399                           ;junction.c: 61: }
  7400                           
  7401                           ;junction.c: 60: default : break;
  7402                           
  7403                           ;junction.c: 59: break;
  7404  002BB0  D00F               	goto	l1031
  7405  002BB2  501F               	movf	Junction@Straight_Bend,w,c
  7406                           
  7407                           ; Switch size 1, requested type "space"
  7408                           ; Number of cases is 2, Range of values is 0 to 1
  7409                           ; switch strategies available:
  7410                           ; Name         Instructions Cycles
  7411                           ; simple_byte            7     4 (average)
  7412                           ;	Chosen strategy is simple_byte
  7413  002BB4  0A00               	xorlw	0	; case 0
  7414  002BB6  B4D8               	btfsc	status,2,c
  7415  002BB8  D7BE               	goto	l1034
  7416  002BBA  0A01               	xorlw	1	; case 1
  7417  002BBC  B4D8               	btfsc	status,2,c
  7418  002BBE  D7DA               	goto	l1036
  7419                           
  7420                           ;junction.c: 65: }
  7421                           
  7422                           ;junction.c: 64: default : break;
  7423                           
  7424                           ;junction.c: 62: break;
  7425  002BC0  D007               	goto	l1031
  7426  002BC2                     l1024:
  7427  002BC2  5020               	movf	Junction@Junction_Left_Right,w,c
  7428                           
  7429                           ; Switch size 1, requested type "space"
  7430                           ; Number of cases is 2, Range of values is 0 to 1
  7431                           ; switch strategies available:
  7432                           ; Name         Instructions Cycles
  7433                           ; simple_byte            7     4 (average)
  7434                           ;	Chosen strategy is simple_byte
  7435  002BC4  0A00               	xorlw	0	; case 0
  7436  002BC6  B4D8               	btfsc	status,2,c
  7437  002BC8  D7AE               	goto	l1026
  7438  002BCA  0A01               	xorlw	1	; case 1
  7439  002BCC  B4D8               	btfsc	status,2,c
  7440  002BCE  D7F1               	goto	l1033
  7441  002BD0                     l1031:
  7442                           
  7443                           ;junction.c: 66: Switch_Junction = 1;
  7444  002BD0  0E01               	movlw	1
  7445  002BD2  6E2F               	movwf	_Switch_Junction,c
  7446                           
  7447                           ;junction.c: 67: break;
  7448  002BD4  D053               	goto	l1039
  7449  002BD6  0E00               	movlw	0
  7450  002BD8  6E14               	movwf	GETxAPIxVAL@index+1,c
  7451  002BDA  0E13               	movlw	19
  7452  002BDC  6E13               	movwf	GETxAPIxVAL@index,c
  7453  002BDE  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  7454  002BE2  5013               	movf	?_GETxAPIxVAL,w,c
  7455  002BE4  0100               	movlb	0	; () banked
  7456  002BE6  5D6A               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7457  002BE8  5014               	movf	?_GETxAPIxVAL+1,w,c
  7458  002BEA  596B               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7459  002BEC  A0D8               	btfss	status,0,c
  7460  002BEE  D008               	goto	l1041
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;junction.c: 70: {
  7464                           ;junction.c: 71: Switch_Junction = 2;
  7465  002BF0  0E02               	movlw	2
  7466  002BF2  6E2F               	movwf	_Switch_Junction,c
  7467                           
  7468                           ;junction.c: 72: Junction_Switch_Time = 0;
  7469  002BF4  0E00               	movlw	0
  7470  002BF6  6F6B               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7471  002BF8  0E00               	movlw	0
  7472  002BFA  6F6A               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7473                           
  7474                           ;junction.c: 73: Return_Val = 1;
  7475  002BFC  0E01               	movlw	1
  7476  002BFE  D032               	goto	L88
  7477  002C00                     l1041:
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;junction.c: 75: }
  7481                           ;junction.c: 76: Return_Val = 1;
  7482                           
  7483                           ; BSR set to: 0
  7484  002C00  0E01               	movlw	1
  7485  002C02  6E4C               	movwf	Junction@Return_Val,c
  7486                           
  7487                           ;junction.c: 77: Switch_Junction = 1;
  7488  002C04  0E01               	movlw	1
  7489  002C06  6E2F               	movwf	_Switch_Junction,c
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;junction.c: 78: Junction_Switch_Time++;
  7493  002C08  4B6A               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7494  002C0A  2B6B               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7495                           
  7496                           ;junction.c: 79: break;
  7497  002C0C  D037               	goto	l1039
  7498  002C0E                     
  7499                           ; BSR set to: 0
  7500  002C0E  0E00               	movlw	0
  7501  002C10  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7502  002C12  0E40               	movlw	64
  7503  002C14  6E19               	movwf	SETxAPIxVAL@index,c
  7504  002C16  0E00               	movlw	0
  7505  002C18  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7506  002C1A  0E00               	movlw	0
  7507  002C1C  6E1B               	movwf	SETxAPIxVAL@value,c
  7508  002C1E  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7509                           
  7510                           ;junction.c: 82: SETxAPIxVAL(65, 0);
  7511  002C22  0E00               	movlw	0
  7512  002C24  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7513  002C26  0E41               	movlw	65
  7514  002C28  6E19               	movwf	SETxAPIxVAL@index,c
  7515  002C2A  0E00               	movlw	0
  7516  002C2C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7517  002C2E  0E00               	movlw	0
  7518  002C30  6E1B               	movwf	SETxAPIxVAL@value,c
  7519  002C32  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7520                           
  7521                           ;junction.c: 83: SETxAPIxVAL(66,0);
  7522  002C36  0E00               	movlw	0
  7523  002C38  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7524  002C3A  0E42               	movlw	66
  7525  002C3C  6E19               	movwf	SETxAPIxVAL@index,c
  7526  002C3E  0E00               	movlw	0
  7527  002C40  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7528  002C42  0E00               	movlw	0
  7529  002C44  6E1B               	movwf	SETxAPIxVAL@value,c
  7530  002C46  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7531                           
  7532                           ;junction.c: 84: SETxAPIxVAL(67,0);
  7533  002C4A  0E00               	movlw	0
  7534  002C4C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7535  002C4E  0E43               	movlw	67
  7536  002C50  6E19               	movwf	SETxAPIxVAL@index,c
  7537  002C52  0E00               	movlw	0
  7538  002C54  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7539  002C56  0E00               	movlw	0
  7540  002C58  6E1B               	movwf	SETxAPIxVAL@value,c
  7541  002C5A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  7542                           
  7543                           ;junction.c: 85: Switch_Junction = 0;
  7544  002C5E  0E00               	movlw	0
  7545  002C60  6E2F               	movwf	_Switch_Junction,c
  7546                           
  7547                           ;junction.c: 86: Return_Val = 0;
  7548  002C62  0E00               	movlw	0
  7549  002C64                     L88:
  7550  002C64  6E4C               	movwf	Junction@Return_Val,c
  7551                           
  7552                           ;junction.c: 90: }
  7553                           
  7554                           ;junction.c: 89: default : break;
  7555                           
  7556                           ;junction.c: 87: break;
  7557  002C66  D00A               	goto	l1039
  7558  002C68                     l1022:
  7559  002C68  502F               	movf	_Switch_Junction,w,c
  7560                           
  7561                           ; Switch size 1, requested type "space"
  7562                           ; Number of cases is 3, Range of values is 0 to 2
  7563                           ; switch strategies available:
  7564                           ; Name         Instructions Cycles
  7565                           ; simple_byte           10     6 (average)
  7566                           ;	Chosen strategy is simple_byte
  7567  002C6A  0A00               	xorlw	0	; case 0
  7568  002C6C  B4D8               	btfsc	status,2,c
  7569  002C6E  D71A               	goto	l1023
  7570  002C70  0A01               	xorlw	1	; case 1
  7571  002C72  B4D8               	btfsc	status,2,c
  7572  002C74  D7B0               	goto	l1040
  7573  002C76  0A03               	xorlw	3	; case 2
  7574  002C78  B4D8               	btfsc	status,2,c
  7575  002C7A  D7C9               	goto	l1042
  7576  002C7C                     l1039:
  7577                           
  7578                           ;junction.c: 92: return (Return_Val);
  7579  002C7C  504C               	movf	Junction@Return_Val,w,c
  7580  002C7E  0012               	return	
  7581  002C80                     __end_of_Junction:
  7582                           	opt stack 0
  7583                           tblptru	equ	0xFF8
  7584                           tblptrh	equ	0xFF7
  7585                           tblptrl	equ	0xFF6
  7586                           tablat	equ	0xFF5
  7587                           postinc0	equ	0xFEE
  7588                           wreg	equ	0xFE8
  7589                           postdec1	equ	0xFE5
  7590                           fsr1l	equ	0xFE1
  7591                           status	equ	0xFD8
  7592                           
  7593 ;; *************** function _Red_Led *****************
  7594 ;; Defined at:
  7595 ;;		line 97 in file "../io.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  Operation       1    wreg     unsigned char 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  Operation       1   18[COMRAM] unsigned char 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg, status,2, status,0
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7609 ;;      Params:         0       0       0       0       0       0       0       0       0
  7610 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7612 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7613 ;;Total ram usage:        1 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:    3
  7616 ;; This function calls:
  7617 ;;		Nothing
  7618 ;; This function is called by:
  7619 ;;		_Update_StateMchn
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           	psect	text13
  7624  003F1E                     __ptext13:
  7625                           	opt stack 0
  7626  003F1E                     _Red_Led:
  7627                           	opt stack 26
  7628                           
  7629                           ;incstack = 0
  7630                           ;Red_Led@Operation stored from wreg
  7631  003F1E  6E13               	movwf	Red_Led@Operation,c
  7632                           
  7633                           ;io.c: 99: switch(Operation)
  7634  003F20  D030               	goto	l856
  7635  003F22                     l857:
  7636  003F22  9A83               	bcf	3971,5,c	;volatile
  7637  003F24  0012               	return	
  7638  003F26                     l859:
  7639  003F26  8A83               	bsf	3971,5,c	;volatile
  7640  003F28  0012               	return	
  7641  003F2A  4A28               	infsnz	_Red_Led_Counter,f,c
  7642  003F2C  2A29               	incf	_Red_Led_Counter+1,f,c
  7643                           
  7644                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7645  003F2E  0EB8               	movlw	184
  7646  003F30  5C28               	subwf	_Red_Led_Counter,w,c
  7647  003F32  0E0B               	movlw	11
  7648  003F34  5829               	subwfb	_Red_Led_Counter+1,w,c
  7649  003F36  A0D8               	btfss	status,0,c
  7650  003F38  D004               	goto	l861
  7651                           
  7652                           ;io.c: 107: {
  7653                           ;io.c: 108: Red_Led_Counter = 0;
  7654  003F3A  0E00               	movlw	0
  7655  003F3C  6E29               	movwf	_Red_Led_Counter+1,c
  7656  003F3E  0E00               	movlw	0
  7657  003F40  6E28               	movwf	_Red_Led_Counter,c
  7658  003F42                     l861:
  7659                           
  7660                           ;io.c: 109: }
  7661                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7662  003F42  0EDC               	movlw	220
  7663  003F44  5C28               	subwf	_Red_Led_Counter,w,c
  7664  003F46  0E05               	movlw	5
  7665  003F48  5829               	subwfb	_Red_Led_Counter+1,w,c
  7666  003F4A  A0D8               	btfss	status,0,c
  7667  003F4C  D002               	goto	l862
  7668                           
  7669                           ;io.c: 111: {
  7670                           ;io.c: 112: PORTDbits.RD5 = 1;
  7671  003F4E  8A83               	bsf	3971,5,c	;volatile
  7672                           
  7673                           ;io.c: 113: }
  7674  003F50  0012               	return	
  7675  003F52                     l862:
  7676                           
  7677                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7678  003F52  9A83               	bcf	3971,5,c	;volatile
  7679                           
  7680                           ;io.c: 115: break;
  7681  003F54  0012               	return	
  7682  003F56  4A28               	infsnz	_Red_Led_Counter,f,c
  7683  003F58  2A29               	incf	_Red_Led_Counter+1,f,c
  7684                           
  7685                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7686  003F5A  0EE8               	movlw	232
  7687  003F5C  5C28               	subwf	_Red_Led_Counter,w,c
  7688  003F5E  0E03               	movlw	3
  7689  003F60  5829               	subwfb	_Red_Led_Counter+1,w,c
  7690  003F62  A0D8               	btfss	status,0,c
  7691  003F64  D004               	goto	l865
  7692                           
  7693                           ;io.c: 119: {
  7694                           ;io.c: 120: Red_Led_Counter = 0;
  7695  003F66  0E00               	movlw	0
  7696  003F68  6E29               	movwf	_Red_Led_Counter+1,c
  7697  003F6A  0E00               	movlw	0
  7698  003F6C  6E28               	movwf	_Red_Led_Counter,c
  7699  003F6E                     l865:
  7700                           
  7701                           ;io.c: 121: }
  7702                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7703  003F6E  0EF4               	movlw	244
  7704  003F70  5C28               	subwf	_Red_Led_Counter,w,c
  7705  003F72  0E01               	movlw	1
  7706  003F74  5829               	subwfb	_Red_Led_Counter+1,w,c
  7707  003F76  A0D8               	btfss	status,0,c
  7708  003F78  D002               	goto	l866
  7709                           
  7710                           ;io.c: 123: {
  7711                           ;io.c: 124: PORTDbits.RD5 = 1;
  7712  003F7A  8A83               	bsf	3971,5,c	;volatile
  7713                           
  7714                           ;io.c: 125: }
  7715  003F7C  0012               	return	
  7716  003F7E                     l866:
  7717                           
  7718                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7719  003F7E  9A83               	bcf	3971,5,c	;volatile
  7720                           
  7721                           ;io.c: 130: }
  7722                           
  7723                           ;io.c: 129: default : break;
  7724                           
  7725                           ;io.c: 127: break;
  7726  003F80  0012               	return	
  7727  003F82                     l856:
  7728  003F82  5013               	movf	Red_Led@Operation,w,c
  7729                           
  7730                           ; Switch size 1, requested type "space"
  7731                           ; Number of cases is 4, Range of values is 0 to 3
  7732                           ; switch strategies available:
  7733                           ; Name         Instructions Cycles
  7734                           ; simple_byte           13     7 (average)
  7735                           ;	Chosen strategy is simple_byte
  7736  003F84  0A00               	xorlw	0	; case 0
  7737  003F86  B4D8               	btfsc	status,2,c
  7738  003F88  D7CC               	goto	l857
  7739  003F8A  0A01               	xorlw	1	; case 1
  7740  003F8C  B4D8               	btfsc	status,2,c
  7741  003F8E  D7CB               	goto	l859
  7742  003F90  0A03               	xorlw	3	; case 2
  7743  003F92  B4D8               	btfsc	status,2,c
  7744  003F94  D7CA               	goto	l860
  7745  003F96  0A01               	xorlw	1	; case 3
  7746  003F98  A4D8               	btfss	status,2,c
  7747  003F9A  0012               	return	
  7748  003F9C  D7DC               	goto	l864
  7749  003F9E                     __end_of_Red_Led:
  7750                           	opt stack 0
  7751                           tblptru	equ	0xFF8
  7752                           tblptrh	equ	0xFF7
  7753                           tblptrl	equ	0xFF6
  7754                           tablat	equ	0xFF5
  7755                           postinc0	equ	0xFEE
  7756                           wreg	equ	0xFE8
  7757                           postdec1	equ	0xFE5
  7758                           fsr1l	equ	0xFE1
  7759                           status	equ	0xFD8
  7760                           
  7761 ;; *************** function _Green_Led *****************
  7762 ;; Defined at:
  7763 ;;		line 47 in file "../io.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  Operation       1    wreg     unsigned char 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;  Operation       1   18[COMRAM] unsigned char 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  1    wreg      void 
  7770 ;; Registers used:
  7771 ;;		wreg, status,2, status,0
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7777 ;;      Params:         0       0       0       0       0       0       0       0       0
  7778 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7780 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7781 ;;Total ram usage:        1 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    3
  7784 ;; This function calls:
  7785 ;;		Nothing
  7786 ;; This function is called by:
  7787 ;;		_Update_StateMchn
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	text14
  7792  003F9E                     __ptext14:
  7793                           	opt stack 0
  7794  003F9E                     _Green_Led:
  7795                           	opt stack 26
  7796                           
  7797                           ;incstack = 0
  7798                           ;Green_Led@Operation stored from wreg
  7799  003F9E  6E13               	movwf	Green_Led@Operation,c
  7800                           
  7801                           ;io.c: 49: switch(Operation)
  7802  003FA0  D030               	goto	l840
  7803  003FA2                     l841:
  7804  003FA2  9C83               	bcf	3971,6,c	;volatile
  7805  003FA4  0012               	return	
  7806  003FA6                     l843:
  7807  003FA6  8C83               	bsf	3971,6,c	;volatile
  7808  003FA8  0012               	return	
  7809  003FAA  4A2A               	infsnz	_Green_Led_Counter,f,c
  7810  003FAC  2A2B               	incf	_Green_Led_Counter+1,f,c
  7811                           
  7812                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7813  003FAE  0EB8               	movlw	184
  7814  003FB0  5C2A               	subwf	_Green_Led_Counter,w,c
  7815  003FB2  0E0B               	movlw	11
  7816  003FB4  582B               	subwfb	_Green_Led_Counter+1,w,c
  7817  003FB6  A0D8               	btfss	status,0,c
  7818  003FB8  D004               	goto	l845
  7819                           
  7820                           ;io.c: 57: {
  7821                           ;io.c: 58: Green_Led_Counter = 0;
  7822  003FBA  0E00               	movlw	0
  7823  003FBC  6E2B               	movwf	_Green_Led_Counter+1,c
  7824  003FBE  0E00               	movlw	0
  7825  003FC0  6E2A               	movwf	_Green_Led_Counter,c
  7826  003FC2                     l845:
  7827                           
  7828                           ;io.c: 59: }
  7829                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  7830  003FC2  0EDC               	movlw	220
  7831  003FC4  5C2A               	subwf	_Green_Led_Counter,w,c
  7832  003FC6  0E05               	movlw	5
  7833  003FC8  582B               	subwfb	_Green_Led_Counter+1,w,c
  7834  003FCA  A0D8               	btfss	status,0,c
  7835  003FCC  D002               	goto	l846
  7836                           
  7837                           ;io.c: 61: {
  7838                           ;io.c: 62: PORTDbits.RD6 = 1;
  7839  003FCE  8C83               	bsf	3971,6,c	;volatile
  7840                           
  7841                           ;io.c: 63: }
  7842  003FD0  0012               	return	
  7843  003FD2                     l846:
  7844                           
  7845                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  7846  003FD2  9C83               	bcf	3971,6,c	;volatile
  7847                           
  7848                           ;io.c: 65: break;
  7849  003FD4  0012               	return	
  7850  003FD6  4A2A               	infsnz	_Green_Led_Counter,f,c
  7851  003FD8  2A2B               	incf	_Green_Led_Counter+1,f,c
  7852                           
  7853                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  7854  003FDA  0EE8               	movlw	232
  7855  003FDC  5C2A               	subwf	_Green_Led_Counter,w,c
  7856  003FDE  0E03               	movlw	3
  7857  003FE0  582B               	subwfb	_Green_Led_Counter+1,w,c
  7858  003FE2  A0D8               	btfss	status,0,c
  7859  003FE4  D004               	goto	l849
  7860                           
  7861                           ;io.c: 69: {
  7862                           ;io.c: 70: Green_Led_Counter = 0;
  7863  003FE6  0E00               	movlw	0
  7864  003FE8  6E2B               	movwf	_Green_Led_Counter+1,c
  7865  003FEA  0E00               	movlw	0
  7866  003FEC  6E2A               	movwf	_Green_Led_Counter,c
  7867  003FEE                     l849:
  7868                           
  7869                           ;io.c: 71: }
  7870                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  7871  003FEE  0EF4               	movlw	244
  7872  003FF0  5C2A               	subwf	_Green_Led_Counter,w,c
  7873  003FF2  0E01               	movlw	1
  7874  003FF4  582B               	subwfb	_Green_Led_Counter+1,w,c
  7875  003FF6  A0D8               	btfss	status,0,c
  7876  003FF8  D002               	goto	l850
  7877                           
  7878                           ;io.c: 73: {
  7879                           ;io.c: 74: PORTDbits.RD6 = 1;
  7880  003FFA  8C83               	bsf	3971,6,c	;volatile
  7881                           
  7882                           ;io.c: 75: }
  7883  003FFC  0012               	return	
  7884  003FFE                     l850:
  7885                           
  7886                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  7887  003FFE  9C83               	bcf	3971,6,c	;volatile
  7888                           
  7889                           ;io.c: 80: }
  7890                           
  7891                           ;io.c: 79: default : break;
  7892                           
  7893                           ;io.c: 77: break;
  7894  004000  0012               	return	
  7895  004002                     l840:
  7896  004002  5013               	movf	Green_Led@Operation,w,c
  7897                           
  7898                           ; Switch size 1, requested type "space"
  7899                           ; Number of cases is 4, Range of values is 0 to 3
  7900                           ; switch strategies available:
  7901                           ; Name         Instructions Cycles
  7902                           ; simple_byte           13     7 (average)
  7903                           ;	Chosen strategy is simple_byte
  7904  004004  0A00               	xorlw	0	; case 0
  7905  004006  B4D8               	btfsc	status,2,c
  7906  004008  D7CC               	goto	l841
  7907  00400A  0A01               	xorlw	1	; case 1
  7908  00400C  B4D8               	btfsc	status,2,c
  7909  00400E  D7CB               	goto	l843
  7910  004010  0A03               	xorlw	3	; case 2
  7911  004012  B4D8               	btfsc	status,2,c
  7912  004014  D7CA               	goto	l844
  7913  004016  0A01               	xorlw	1	; case 3
  7914  004018  A4D8               	btfss	status,2,c
  7915  00401A  0012               	return	
  7916  00401C  D7DC               	goto	l848
  7917  00401E                     __end_of_Green_Led:
  7918                           	opt stack 0
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           postinc0	equ	0xFEE
  7924                           wreg	equ	0xFE8
  7925                           postdec1	equ	0xFE5
  7926                           fsr1l	equ	0xFE1
  7927                           status	equ	0xFD8
  7928                           
  7929 ;; *************** function _EEPROMxSTORE *****************
  7930 ;; Defined at:
  7931 ;;		line 157 in file "../eeprom_settings.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  i               1   22[BANK0 ] unsigned char 
  7936 ;;  api_list        1   21[BANK0 ] unsigned char 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  2   26[COMRAM] unsigned int 
  7939 ;; Registers used:
  7940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7946 ;;      Params:         2       0       0       0       0       0       0       0       0
  7947 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7948 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7949 ;;      Totals:        10       2       0       0       0       0       0       0       0
  7950 ;;Total ram usage:       12 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    4
  7953 ;; This function calls:
  7954 ;;		_Eeprom_Store
  7955 ;; This function is called by:
  7956 ;;		_Update_StateMchn
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	text15
  7961  002C80                     __ptext15:
  7962                           	opt stack 0
  7963  002C80                     _EEPROMxSTORE:
  7964                           	opt stack 25
  7965                           
  7966                           ;eeprom_settings.c: 159: unsigned char i, api_list;
  7967                           ;eeprom_settings.c: 161: if (!ReadActive){
  7968                           
  7969                           ;incstack = 0
  7970  002C80  0100               	movlb	0	; () banked
  7971  002C82  516E               	movf	_ReadActive& (0+255),w,b
  7972  002C84  116F               	iorwf	(_ReadActive+1)& (0+255),w,b
  7973  002C86  A4D8               	btfss	status,2,c
  7974  002C88  D0AC               	goto	l767
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;eeprom_settings.c: 162: WriteActive = 1;
  7978  002C8A  0E00               	movlw	0
  7979  002C8C  6F6D               	movwf	(_WriteActive+1)& (0+255),b
  7980  002C8E  0E01               	movlw	1
  7981  002C90  6F6C               	movwf	_WriteActive& (0+255),b
  7982                           
  7983                           ;eeprom_settings.c: 163: INTCON = 0x00;
  7984  002C92  0E00               	movlw	0
  7985  002C94  6EF2               	movwf	intcon,c	;volatile
  7986                           
  7987                           ;eeprom_settings.c: 165: for(i = 0; i < 28; i++ )
  7988  002C96  0E00               	movlw	0
  7989  002C98  6FD0               	movwf	EEPROMxSTORE@i& (0+255),b
  7990  002C9A                     l8230:
  7991                           
  7992                           ; BSR set to: 0
  7993  002C9A  0E1B               	movlw	27
  7994  002C9C  65D0               	cpfsgt	EEPROMxSTORE@i& (0+255),b
  7995  002C9E  D001               	goto	l768
  7996  002CA0  D095               	goto	u7350
  7997  002CA2                     l768:
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;eeprom_settings.c: 166: {
  8001                           ;eeprom_settings.c: 167: api_list = ApiList[i];
  8002                           
  8003                           ; BSR set to: 0
  8004  002CA2  51D0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8005  002CA4  0D02               	mullw	2
  8006  002CA6  0E01               	movlw	low _ApiList
  8007  002CA8  24F3               	addwf	prodl,w,c
  8008  002CAA  6EF6               	movwf	tblptrl,c
  8009  002CAC  0E08               	movlw	high _ApiList
  8010  002CAE  20F4               	addwfc	prodh,w,c
  8011  002CB0  6EF7               	movwf	tblptrh,c
  8012  002CB2                     	if	0	;There are less than 3 active tblptr bytes
  8013  002CB2                     	endif
  8014  002CB2  0008               	tblrd		*
  8015  002CB4  CFF5 F0CF          	movff	tablat,EEPROMxSTORE@api_list
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;eeprom_settings.c: 173: if (API[ApiList[i]] != API_EEPROM[ApiList[i]])
  8019  002CB8  51D0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8020  002CBA  0D02               	mullw	2
  8021  002CBC  0E01               	movlw	low _ApiList
  8022  002CBE  24F3               	addwf	prodl,w,c
  8023  002CC0  6EF6               	movwf	tblptrl,c
  8024  002CC2  0E08               	movlw	high _ApiList
  8025  002CC4  20F4               	addwfc	prodh,w,c
  8026  002CC6  6EF7               	movwf	tblptrh,c
  8027  002CC8                     	if	0	;There are less than 3 active tblptr bytes
  8028  002CC8                     	endif
  8029  002CC8  0009               	tblrd		*+
  8030  002CCA  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8031  002CCE  0009               	tblrd		*+
  8032  002CD0  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8033  002CD4  90D8               	bcf	status,0,c
  8034  002CD6  361D               	rlcf	??_EEPROMxSTORE,f,c
  8035  002CD8  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8036  002CDA  0E00               	movlw	low _API_EEPROM
  8037  002CDC  241D               	addwf	??_EEPROMxSTORE,w,c
  8038  002CDE  6ED9               	movwf	fsr2l,c
  8039  002CE0  0E03               	movlw	high _API_EEPROM
  8040  002CE2  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8041  002CE4  6EDA               	movwf	fsr2h,c
  8042  002CE6  51D0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8043  002CE8  0D02               	mullw	2
  8044  002CEA  0E01               	movlw	low _ApiList
  8045  002CEC  24F3               	addwf	prodl,w,c
  8046  002CEE  6EF6               	movwf	tblptrl,c
  8047  002CF0  0E08               	movlw	high _ApiList
  8048  002CF2  20F4               	addwfc	prodh,w,c
  8049  002CF4  6EF7               	movwf	tblptrh,c
  8050  002CF6                     	if	0	;There are less than 3 active tblptr bytes
  8051  002CF6                     	endif
  8052  002CF6  0009               	tblrd		*+
  8053  002CF8  CFF5 F021          	movff	tablat,??_EEPROMxSTORE+4
  8054  002CFC  0009               	tblrd		*+
  8055  002CFE  CFF5 F022          	movff	tablat,??_EEPROMxSTORE+5
  8056  002D02  90D8               	bcf	status,0,c
  8057  002D04  3621               	rlcf	??_EEPROMxSTORE+4,f,c
  8058  002D06  3622               	rlcf	??_EEPROMxSTORE+5,f,c
  8059  002D08  0E00               	movlw	low _API
  8060  002D0A  2421               	addwf	??_EEPROMxSTORE+4,w,c
  8061  002D0C  6EE1               	movwf	fsr1l,c
  8062  002D0E  0E01               	movlw	high _API
  8063  002D10  2022               	addwfc	??_EEPROMxSTORE+5,w,c
  8064  002D12  6EE2               	movwf	fsr1h,c
  8065  002D14  50DE               	movf	postinc2,w,c
  8066  002D16  18E6               	xorwf	postinc1,w,c
  8067  002D18  E104               	bnz	u7340
  8068  002D1A  50DE               	movf	postinc2,w,c
  8069  002D1C  18E6               	xorwf	postinc1,w,c
  8070  002D1E  B4D8               	btfsc	status,2,c
  8071  002D20  D053               	goto	l770
  8072  002D22                     u7340:
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;eeprom_settings.c: 174: {
  8076                           ;eeprom_settings.c: 179: Eeprom_Store(i, API[ApiList[i]]);
  8077  002D22  C0D0  F013         	movff	EEPROMxSTORE@i,Eeprom_Store@Location
  8078  002D26  6A14               	clrf	Eeprom_Store@Location+1,c
  8079  002D28  51D0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8080  002D2A  0D02               	mullw	2
  8081  002D2C  0E01               	movlw	low _ApiList
  8082  002D2E  24F3               	addwf	prodl,w,c
  8083  002D30  6EF6               	movwf	tblptrl,c
  8084  002D32  0E08               	movlw	high _ApiList
  8085  002D34  20F4               	addwfc	prodh,w,c
  8086  002D36  6EF7               	movwf	tblptrh,c
  8087  002D38                     	if	0	;There are less than 3 active tblptr bytes
  8088  002D38                     	endif
  8089  002D38  0009               	tblrd		*+
  8090  002D3A  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8091  002D3E  0009               	tblrd		*+
  8092  002D40  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8093  002D44  90D8               	bcf	status,0,c
  8094  002D46  361D               	rlcf	??_EEPROMxSTORE,f,c
  8095  002D48  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8096  002D4A  0E00               	movlw	low _API
  8097  002D4C  241D               	addwf	??_EEPROMxSTORE,w,c
  8098  002D4E  6ED9               	movwf	fsr2l,c
  8099  002D50  0E01               	movlw	high _API
  8100  002D52  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8101  002D54  6EDA               	movwf	fsr2h,c
  8102  002D56  CFDE F015          	movff	postinc2,Eeprom_Store@Value
  8103  002D5A  CFDD F016          	movff	postdec2,Eeprom_Store@Value+1
  8104  002D5E  EC0F  F020         	call	_Eeprom_Store	;wreg free
  8105                           
  8106                           ;eeprom_settings.c: 180: API_EEPROM[ApiList[i]] = API[ApiList[i]];
  8107  002D62  0100               	movlb	0	; () banked
  8108  002D64  51D0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8109  002D66  0D02               	mullw	2
  8110  002D68  0E01               	movlw	low _ApiList
  8111  002D6A  24F3               	addwf	prodl,w,c
  8112  002D6C  6EF6               	movwf	tblptrl,c
  8113  002D6E  0E08               	movlw	high _ApiList
  8114  002D70  20F4               	addwfc	prodh,w,c
  8115  002D72  6EF7               	movwf	tblptrh,c
  8116  002D74                     	if	0	;There are less than 3 active tblptr bytes
  8117  002D74                     	endif
  8118  002D74  0009               	tblrd		*+
  8119  002D76  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8120  002D7A  0009               	tblrd		*+
  8121  002D7C  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8122  002D80  90D8               	bcf	status,0,c
  8123  002D82  361D               	rlcf	??_EEPROMxSTORE,f,c
  8124  002D84  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8125  002D86  0E00               	movlw	low _API
  8126  002D88  241D               	addwf	??_EEPROMxSTORE,w,c
  8127  002D8A  6ED9               	movwf	fsr2l,c
  8128  002D8C  0E01               	movlw	high _API
  8129  002D8E  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8130  002D90  6EDA               	movwf	fsr2h,c
  8131  002D92  51D0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8132  002D94  0D02               	mullw	2
  8133  002D96  0E01               	movlw	low _ApiList
  8134  002D98  24F3               	addwf	prodl,w,c
  8135  002D9A  6EF6               	movwf	tblptrl,c
  8136  002D9C  0E08               	movlw	high _ApiList
  8137  002D9E  20F4               	addwfc	prodh,w,c
  8138  002DA0  6EF7               	movwf	tblptrh,c
  8139  002DA2                     	if	0	;There are less than 3 active tblptr bytes
  8140  002DA2                     	endif
  8141  002DA2  0009               	tblrd		*+
  8142  002DA4  CFF5 F01F          	movff	tablat,??_EEPROMxSTORE+2
  8143  002DA8  0009               	tblrd		*+
  8144  002DAA  CFF5 F020          	movff	tablat,??_EEPROMxSTORE+3
  8145  002DAE  90D8               	bcf	status,0,c
  8146  002DB0  361F               	rlcf	??_EEPROMxSTORE+2,f,c
  8147  002DB2  3620               	rlcf	??_EEPROMxSTORE+3,f,c
  8148  002DB4  0E00               	movlw	low _API_EEPROM
  8149  002DB6  241F               	addwf	??_EEPROMxSTORE+2,w,c
  8150  002DB8  6EE1               	movwf	fsr1l,c
  8151  002DBA  0E03               	movlw	high _API_EEPROM
  8152  002DBC  2020               	addwfc	??_EEPROMxSTORE+3,w,c
  8153  002DBE  6EE2               	movwf	fsr1h,c
  8154  002DC0  CFDE FFE6          	movff	postinc2,postinc1
  8155  002DC4  CFDD FFE5          	movff	postdec2,postdec1
  8156  002DC8                     l770:
  8157                           
  8158                           ; BSR set to: 0
  8159                           
  8160                           ; BSR set to: 0
  8161  002DC8  2BD0               	incf	EEPROMxSTORE@i& (0+255),f,b
  8162  002DCA  D767               	goto	l8230
  8163  002DCC                     u7350:
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;eeprom_settings.c: 181: }
  8167                           ;eeprom_settings.c: 182: }
  8168                           ;eeprom_settings.c: 184: INTCON = 0xA0;
  8169                           
  8170                           ; BSR set to: 0
  8171  002DCC  0EA0               	movlw	160
  8172  002DCE  6EF2               	movwf	intcon,c	;volatile
  8173                           
  8174                           ;eeprom_settings.c: 185: WriteActive = 0;
  8175  002DD0  0E00               	movlw	0
  8176  002DD2  6F6D               	movwf	(_WriteActive+1)& (0+255),b
  8177  002DD4  0E00               	movlw	0
  8178  002DD6  6F6C               	movwf	_WriteActive& (0+255),b
  8179                           
  8180                           ;eeprom_settings.c: 186: return (1);
  8181  002DD8  0E00               	movlw	0
  8182  002DDA  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8183  002DDC  0E01               	movlw	1
  8184  002DDE  6E1B               	movwf	?_EEPROMxSTORE,c
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;eeprom_settings.c: 187: }
  8188                           
  8189                           ; BSR set to: 0
  8190  002DE0  0012               	return	
  8191  002DE2                     l767:
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;eeprom_settings.c: 188: else{
  8195                           ;eeprom_settings.c: 189: return (0);
  8196                           
  8197                           ; BSR set to: 0
  8198  002DE2  0E00               	movlw	0
  8199  002DE4  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8200  002DE6  0E00               	movlw	0
  8201  002DE8  6E1B               	movwf	?_EEPROMxSTORE,c
  8202                           
  8203                           ; BSR set to: 0
  8204  002DEA  0012               	return	
  8205  002DEC                     __end_of_EEPROMxSTORE:
  8206                           	opt stack 0
  8207                           tblptru	equ	0xFF8
  8208                           tblptrh	equ	0xFF7
  8209                           tblptrl	equ	0xFF6
  8210                           tablat	equ	0xFF5
  8211                           prodh	equ	0xFF4
  8212                           prodl	equ	0xFF3
  8213                           intcon	equ	0xFF2
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postinc1	equ	0xFE6
  8217                           postdec1	equ	0xFE5
  8218                           fsr1h	equ	0xFE2
  8219                           fsr1l	equ	0xFE1
  8220                           postinc2	equ	0xFDE
  8221                           postdec2	equ	0xFDD
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function _Eeprom_Store *****************
  8227 ;; Defined at:
  8228 ;;		line 207 in file "../eeprom_settings.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  Location        2   18[COMRAM] unsigned int 
  8231 ;;  Value           2   20[COMRAM] unsigned int 
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;  Location_Hig    2   24[COMRAM] unsigned int 
  8234 ;;  Location_Low    2   22[COMRAM] unsigned int 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  1    wreg      void 
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8244 ;;      Params:         4       0       0       0       0       0       0       0       0
  8245 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8247 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8248 ;;Total ram usage:        8 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    3
  8251 ;; This function calls:
  8252 ;;		Nothing
  8253 ;; This function is called by:
  8254 ;;		_EEPROMxSTORE
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           	psect	text16
  8259  00401E                     __ptext16:
  8260                           	opt stack 0
  8261  00401E                     _Eeprom_Store:
  8262                           	opt stack 25
  8263                           
  8264                           ;eeprom_settings.c: 209: unsigned int Location_High_Byte = Location * 2;
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;incstack = 0
  8268  00401E  90D8               	bcf	status,0,c
  8269  004020  3413               	rlcf	Eeprom_Store@Location,w,c
  8270  004022  6E19               	movwf	Eeprom_Store@Location_High_Byte,c
  8271  004024  3414               	rlcf	Eeprom_Store@Location+1,w,c
  8272  004026  6E1A               	movwf	Eeprom_Store@Location_High_Byte+1,c
  8273                           
  8274                           ;eeprom_settings.c: 210: unsigned int Location_Low_Byte = Location_High_Byte + 1;
  8275  004028  0E01               	movlw	1
  8276  00402A  2419               	addwf	Eeprom_Store@Location_High_Byte,w,c
  8277  00402C  6E17               	movwf	Eeprom_Store@Location_Low_Byte,c
  8278  00402E  0E00               	movlw	0
  8279  004030  201A               	addwfc	Eeprom_Store@Location_High_Byte+1,w,c
  8280  004032  6E18               	movwf	Eeprom_Store@Location_Low_Byte+1,c
  8281                           
  8282                           ;eeprom_settings.c: 214: EECON1bits.WRERR = 0;
  8283  004034  96A6               	bcf	4006,3,c	;volsfr
  8284                           
  8285                           ;eeprom_settings.c: 215: EEADR = (unsigned char)Location_High_Byte;
  8286  004036  C019  FFA9         	movff	Eeprom_Store@Location_High_Byte,4009	;volatile
  8287                           
  8288                           ;eeprom_settings.c: 216: EEDATA = (unsigned char)(Value >> 8);
  8289  00403A  5016               	movf	Eeprom_Store@Value+1,w,c
  8290  00403C  6EA8               	movwf	4008,c	;volatile
  8291                           
  8292                           ;eeprom_settings.c: 217: EECON1bits.EEPGD = 0;
  8293  00403E  9EA6               	bcf	4006,7,c	;volsfr
  8294                           
  8295                           ;eeprom_settings.c: 218: EECON1bits.CFGS = 0;
  8296  004040  9CA6               	bcf	4006,6,c	;volsfr
  8297                           
  8298                           ;eeprom_settings.c: 219: EECON1bits.WREN = 1;
  8299  004042  84A6               	bsf	4006,2,c	;volsfr
  8300                           
  8301                           ;eeprom_settings.c: 220: EECON2 = 0x55;
  8302  004044  0E55               	movlw	85
  8303  004046  6EA7               	movwf	4007,c	;volsfr
  8304                           
  8305                           ;eeprom_settings.c: 221: EECON2 = 0xAA;
  8306  004048  0EAA               	movlw	170
  8307  00404A  6EA7               	movwf	4007,c	;volsfr
  8308                           
  8309                           ;eeprom_settings.c: 222: EECON1bits.WR = 1;
  8310  00404C  82A6               	bsf	4006,1,c	;volsfr
  8311  00404E                     
  8312                           ;eeprom_settings.c: 224: continue;
  8313  00404E  A2A6               	btfss	4006,1,c	;volsfr
  8314  004050  D002               	goto	u7290
  8315  004052  A8A1               	btfss	4001,4,c	;volatile
  8316  004054  D7FC               	goto	l776
  8317  004056                     u7290:
  8318                           
  8319                           ;eeprom_settings.c: 225: }
  8320                           ;eeprom_settings.c: 226: PIR2bits.EEIF = 0;
  8321  004056  98A1               	bcf	4001,4,c	;volatile
  8322                           
  8323                           ;eeprom_settings.c: 236: EECON1bits.WRERR = 0;
  8324  004058  96A6               	bcf	4006,3,c	;volsfr
  8325                           
  8326                           ;eeprom_settings.c: 237: EEADR = (unsigned char)Location_Low_Byte;
  8327  00405A  C017  FFA9         	movff	Eeprom_Store@Location_Low_Byte,4009	;volatile
  8328                           
  8329                           ;eeprom_settings.c: 238: EEDATA = (unsigned char)Value;
  8330  00405E  C015  FFA8         	movff	Eeprom_Store@Value,4008	;volatile
  8331                           
  8332                           ;eeprom_settings.c: 239: EECON1bits.EEPGD = 0;
  8333  004062  9EA6               	bcf	4006,7,c	;volsfr
  8334                           
  8335                           ;eeprom_settings.c: 240: EECON1bits.CFGS = 0;
  8336  004064  9CA6               	bcf	4006,6,c	;volsfr
  8337                           
  8338                           ;eeprom_settings.c: 241: EECON1bits.WREN = 1;
  8339  004066  84A6               	bsf	4006,2,c	;volsfr
  8340                           
  8341                           ;eeprom_settings.c: 242: INTCON = 0x00;
  8342  004068  0E00               	movlw	0
  8343  00406A  6EF2               	movwf	intcon,c	;volatile
  8344                           
  8345                           ;eeprom_settings.c: 243: EECON2 = 0x55;
  8346  00406C  0E55               	movlw	85
  8347  00406E  6EA7               	movwf	4007,c	;volsfr
  8348                           
  8349                           ;eeprom_settings.c: 244: EECON2 = 0xAA;
  8350  004070  0EAA               	movlw	170
  8351  004072  6EA7               	movwf	4007,c	;volsfr
  8352                           
  8353                           ;eeprom_settings.c: 245: EECON1bits.WR = 1;
  8354  004074  82A6               	bsf	4006,1,c	;volsfr
  8355  004076                     
  8356                           ;eeprom_settings.c: 247: continue;
  8357  004076  A2A6               	btfss	4006,1,c	;volsfr
  8358  004078  D002               	goto	u7310
  8359  00407A  A8A1               	btfss	4001,4,c	;volatile
  8360  00407C  D7FC               	goto	l781
  8361  00407E                     u7310:
  8362                           
  8363                           ;eeprom_settings.c: 248: }
  8364                           ;eeprom_settings.c: 249: PIR2bits.EEIF = 0;
  8365  00407E  98A1               	bcf	4001,4,c	;volatile
  8366                           
  8367                           ;eeprom_settings.c: 259: EECON1bits.WREN = 0;
  8368  004080  94A6               	bcf	4006,2,c	;volsfr
  8369                           
  8370                           ;eeprom_settings.c: 261: EEADR = 0xFF;
  8371  004082  68A9               	setf	4009,c	;volatile
  8372  004084  0012               	return		;funcret
  8373  004086                     __end_of_Eeprom_Store:
  8374                           	opt stack 0
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           postinc0	equ	0xFEE
  8383                           wreg	equ	0xFE8
  8384                           postinc1	equ	0xFE6
  8385                           postdec1	equ	0xFE5
  8386                           fsr1h	equ	0xFE2
  8387                           fsr1l	equ	0xFE1
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _Debounce_Inputs *****************
  8395 ;; Defined at:
  8396 ;;		line 148 in file "../io.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8410 ;;      Params:         0       0       0       0       0       0       0       0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8412 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8413 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8414 ;;Total ram usage:        2 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    5
  8417 ;; This function calls:
  8418 ;;		_GETxAPIxVAL
  8419 ;;		_SETxAPIxVAL
  8420 ;;		_SetDCPWM1
  8421 ;; This function is called by:
  8422 ;;		_Update_StateMchn
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text17
  8427  0015D4                     __ptext17:
  8428                           	opt stack 0
  8429  0015D4                     _Debounce_Inputs:
  8430                           	opt stack 24
  8431                           
  8432                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  8433                           
  8434                           ;incstack = 0
  8435  0015D4  0E00               	movlw	0
  8436  0015D6  6E14               	movwf	GETxAPIxVAL@index+1,c
  8437  0015D8  0E40               	movlw	64
  8438  0015DA  6E13               	movwf	GETxAPIxVAL@index,c
  8439  0015DC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8440  0015E0  4613               	rlncf	?_GETxAPIxVAL,f,c
  8441  0015E2  4613               	rlncf	?_GETxAPIxVAL,f,c
  8442  0015E4  4613               	rlncf	?_GETxAPIxVAL,f,c
  8443  0015E6  5080               	movf	3968,w,c	;volatile
  8444  0015E8  1813               	xorwf	?_GETxAPIxVAL,w,c
  8445  0015EA  0BF7               	andlw	-9
  8446  0015EC  1813               	xorwf	?_GETxAPIxVAL,w,c
  8447  0015EE  6E80               	movwf	3968,c	;volatile
  8448                           
  8449                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  8450  0015F0  0E00               	movlw	0
  8451  0015F2  6E14               	movwf	GETxAPIxVAL@index+1,c
  8452  0015F4  0E41               	movlw	65
  8453  0015F6  6E13               	movwf	GETxAPIxVAL@index,c
  8454  0015F8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8455  0015FC  4613               	rlncf	?_GETxAPIxVAL,f,c
  8456  0015FE  4613               	rlncf	?_GETxAPIxVAL,f,c
  8457  001600  5080               	movf	3968,w,c	;volatile
  8458  001602  1813               	xorwf	?_GETxAPIxVAL,w,c
  8459  001604  0BFB               	andlw	-5
  8460  001606  1813               	xorwf	?_GETxAPIxVAL,w,c
  8461  001608  6E80               	movwf	3968,c	;volatile
  8462                           
  8463                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  8464  00160A  0E00               	movlw	0
  8465  00160C  6E14               	movwf	GETxAPIxVAL@index+1,c
  8466  00160E  0E42               	movlw	66
  8467  001610  6E13               	movwf	GETxAPIxVAL@index,c
  8468  001612  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8469  001616  4613               	rlncf	?_GETxAPIxVAL,f,c
  8470  001618  5080               	movf	3968,w,c	;volatile
  8471  00161A  1813               	xorwf	?_GETxAPIxVAL,w,c
  8472  00161C  0BFD               	andlw	-3
  8473  00161E  1813               	xorwf	?_GETxAPIxVAL,w,c
  8474  001620  6E80               	movwf	3968,c	;volatile
  8475                           
  8476                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  8477  001622  0E00               	movlw	0
  8478  001624  6E14               	movwf	GETxAPIxVAL@index+1,c
  8479  001626  0E43               	movlw	67
  8480  001628  6E13               	movwf	GETxAPIxVAL@index,c
  8481  00162A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8482  00162E  5080               	movf	3968,w,c	;volatile
  8483  001630  1813               	xorwf	?_GETxAPIxVAL,w,c
  8484  001632  0BFE               	andlw	-2
  8485  001634  1813               	xorwf	?_GETxAPIxVAL,w,c
  8486  001636  6E80               	movwf	3968,c	;volatile
  8487                           
  8488                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  8489  001638  0E00               	movlw	0
  8490  00163A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8491  00163C  0E45               	movlw	69
  8492  00163E  6E13               	movwf	GETxAPIxVAL@index,c
  8493  001640  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8494  001644  5082               	movf	3970,w,c	;volatile
  8495  001646  1813               	xorwf	?_GETxAPIxVAL,w,c
  8496  001648  0BFE               	andlw	-2
  8497  00164A  1813               	xorwf	?_GETxAPIxVAL,w,c
  8498  00164C  6E82               	movwf	3970,c	;volatile
  8499                           
  8500                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(88));
  8501  00164E  0E00               	movlw	0
  8502  001650  6E14               	movwf	GETxAPIxVAL@index+1,c
  8503  001652  0E58               	movlw	88
  8504  001654  6E13               	movwf	GETxAPIxVAL@index,c
  8505  001656  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8506  00165A  C013  F015         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8507  00165E  C014  F016         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8508  001662  EC25  F021         	call	_SetDCPWM1	;wreg free
  8509                           
  8510                           ;io.c: 157: switch(PORTDbits.RD1)
  8511  001666  D02C               	goto	l872
  8512  001668  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8513  00166A  B4D8               	btfsc	status,2,c
  8514  00166C  D002               	goto	l874
  8515                           
  8516                           ;io.c: 160: {
  8517                           ;io.c: 161: Reed_Contact_LF_Counter--;
  8518  00166E  063E               	decf	_Reed_Contact_LF_Counter,f,c
  8519                           
  8520                           ;io.c: 163: }
  8521                           
  8522                           ;io.c: 162: break;
  8523  001670  D05F               	goto	l881
  8524  001672                     l874:
  8525                           
  8526                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  8527  001672  0E00               	movlw	0
  8528  001674  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8529  001676  0E1F               	movlw	31
  8530  001678  6E19               	movwf	SETxAPIxVAL@index,c
  8531  00167A  0E00               	movlw	0
  8532  00167C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8533  00167E  0E00               	movlw	0
  8534  001680  6E1B               	movwf	SETxAPIxVAL@value,c
  8535  001682  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8536                           
  8537                           ;io.c: 165: break;
  8538  001686  D054               	goto	l881
  8539  001688  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8540  00168A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8541  00168C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8542  00168E  0E00               	movlw	0
  8543  001690  6E14               	movwf	GETxAPIxVAL@index+1,c
  8544  001692  0E1B               	movlw	27
  8545  001694  6E13               	movwf	GETxAPIxVAL@index,c
  8546  001696  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8547  00169A  501F               	movf	??_Debounce_Inputs,w,c
  8548  00169C  5C13               	subwf	?_GETxAPIxVAL,w,c
  8549  00169E  5020               	movf	??_Debounce_Inputs+1,w,c
  8550  0016A0  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8551  0016A2  A0D8               	btfss	status,0,c
  8552  0016A4  D002               	goto	l878
  8553                           
  8554                           ;io.c: 168: {
  8555                           ;io.c: 169: Reed_Contact_LF_Counter++;
  8556  0016A6  2A3E               	incf	_Reed_Contact_LF_Counter,f,c
  8557                           
  8558                           ;io.c: 171: }
  8559                           
  8560                           ;io.c: 170: break;
  8561  0016A8  D043               	goto	l881
  8562  0016AA                     l878:
  8563                           
  8564                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  8565  0016AA  0E00               	movlw	0
  8566  0016AC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8567  0016AE  0E1F               	movlw	31
  8568  0016B0  6E19               	movwf	SETxAPIxVAL@index,c
  8569  0016B2  0E00               	movlw	0
  8570  0016B4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8571  0016B6  0E01               	movlw	1
  8572  0016B8  6E1B               	movwf	SETxAPIxVAL@value,c
  8573  0016BA  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8574                           
  8575                           ;io.c: 176: }
  8576                           
  8577                           ;io.c: 175: default : break;
  8578                           
  8579                           ;io.c: 173: break;
  8580  0016BE  D038               	goto	l881
  8581  0016C0                     l872:
  8582  0016C0  A283               	btfss	3971,1,c	;volatile
  8583  0016C2  D002               	goto	u7380
  8584  0016C4  0E01               	movlw	1
  8585  0016C6  D001               	goto	u7386
  8586  0016C8                     u7380:
  8587  0016C8  0E00               	movlw	0
  8588  0016CA                     u7386:
  8589                           
  8590                           ; Switch size 1, requested type "space"
  8591                           ; Number of cases is 2, Range of values is 0 to 1
  8592                           ; switch strategies available:
  8593                           ; Name         Instructions Cycles
  8594                           ; simple_byte            7     4 (average)
  8595                           ;	Chosen strategy is simple_byte
  8596  0016CA  0A00               	xorlw	0	; case 0
  8597  0016CC  B4D8               	btfsc	status,2,c
  8598  0016CE  D7DC               	goto	l877
  8599  0016D0  0A01               	xorlw	1	; case 1
  8600  0016D2  B4D8               	btfsc	status,2,c
  8601  0016D4  D7C9               	goto	l873
  8602                           
  8603                           ;io.c: 179: switch(PORTDbits.RD0)
  8604  0016D6  D02C               	goto	l881
  8605  0016D8  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8606  0016DA  B4D8               	btfsc	status,2,c
  8607  0016DC  D002               	goto	l883
  8608                           
  8609                           ;io.c: 182: {
  8610                           ;io.c: 183: Reed_Contact_LB_Counter--;
  8611  0016DE  063D               	decf	_Reed_Contact_LB_Counter,f,c
  8612                           
  8613                           ;io.c: 185: }
  8614                           
  8615                           ;io.c: 184: break;
  8616  0016E0  D05F               	goto	l890
  8617  0016E2                     l883:
  8618                           
  8619                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  8620  0016E2  0E00               	movlw	0
  8621  0016E4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8622  0016E6  0E1E               	movlw	30
  8623  0016E8  6E19               	movwf	SETxAPIxVAL@index,c
  8624  0016EA  0E00               	movlw	0
  8625  0016EC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8626  0016EE  0E00               	movlw	0
  8627  0016F0  6E1B               	movwf	SETxAPIxVAL@value,c
  8628  0016F2  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8629                           
  8630                           ;io.c: 187: break;
  8631  0016F6  D054               	goto	l890
  8632  0016F8  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8633  0016FA  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8634  0016FC  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8635  0016FE  0E00               	movlw	0
  8636  001700  6E14               	movwf	GETxAPIxVAL@index+1,c
  8637  001702  0E1B               	movlw	27
  8638  001704  6E13               	movwf	GETxAPIxVAL@index,c
  8639  001706  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8640  00170A  501F               	movf	??_Debounce_Inputs,w,c
  8641  00170C  5C13               	subwf	?_GETxAPIxVAL,w,c
  8642  00170E  5020               	movf	??_Debounce_Inputs+1,w,c
  8643  001710  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8644  001712  A0D8               	btfss	status,0,c
  8645  001714  D002               	goto	l887
  8646                           
  8647                           ;io.c: 190: {
  8648                           ;io.c: 191: Reed_Contact_LB_Counter++;
  8649  001716  2A3D               	incf	_Reed_Contact_LB_Counter,f,c
  8650                           
  8651                           ;io.c: 193: }
  8652                           
  8653                           ;io.c: 192: break;
  8654  001718  D043               	goto	l890
  8655  00171A                     l887:
  8656                           
  8657                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  8658  00171A  0E00               	movlw	0
  8659  00171C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8660  00171E  0E1E               	movlw	30
  8661  001720  6E19               	movwf	SETxAPIxVAL@index,c
  8662  001722  0E00               	movlw	0
  8663  001724  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8664  001726  0E01               	movlw	1
  8665  001728  6E1B               	movwf	SETxAPIxVAL@value,c
  8666  00172A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8667                           
  8668                           ;io.c: 198: }
  8669                           
  8670                           ;io.c: 197: default : break;
  8671                           
  8672                           ;io.c: 195: break;
  8673  00172E  D038               	goto	l890
  8674  001730                     l881:
  8675  001730  A083               	btfss	3971,0,c	;volatile
  8676  001732  D002               	goto	u7410
  8677  001734  0E01               	movlw	1
  8678  001736  D001               	goto	u7416
  8679  001738                     u7410:
  8680  001738  0E00               	movlw	0
  8681  00173A                     u7416:
  8682                           
  8683                           ; Switch size 1, requested type "space"
  8684                           ; Number of cases is 2, Range of values is 0 to 1
  8685                           ; switch strategies available:
  8686                           ; Name         Instructions Cycles
  8687                           ; simple_byte            7     4 (average)
  8688                           ;	Chosen strategy is simple_byte
  8689  00173A  0A00               	xorlw	0	; case 0
  8690  00173C  B4D8               	btfsc	status,2,c
  8691  00173E  D7DC               	goto	l886
  8692  001740  0A01               	xorlw	1	; case 1
  8693  001742  B4D8               	btfsc	status,2,c
  8694  001744  D7C9               	goto	l882
  8695                           
  8696                           ;io.c: 201: switch(PORTDbits.RD3)
  8697  001746  D02C               	goto	l890
  8698  001748  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8699  00174A  B4D8               	btfsc	status,2,c
  8700  00174C  D002               	goto	l892
  8701                           
  8702                           ;io.c: 204: {
  8703                           ;io.c: 205: Reed_Contact_RF_Counter--;
  8704  00174E  063C               	decf	_Reed_Contact_RF_Counter,f,c
  8705                           
  8706                           ;io.c: 207: }
  8707                           
  8708                           ;io.c: 206: break;
  8709  001750  D05F               	goto	l899
  8710  001752                     l892:
  8711                           
  8712                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  8713  001752  0E00               	movlw	0
  8714  001754  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8715  001756  0E1D               	movlw	29
  8716  001758  6E19               	movwf	SETxAPIxVAL@index,c
  8717  00175A  0E00               	movlw	0
  8718  00175C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8719  00175E  0E00               	movlw	0
  8720  001760  6E1B               	movwf	SETxAPIxVAL@value,c
  8721  001762  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8722                           
  8723                           ;io.c: 209: break;
  8724  001766  D054               	goto	l899
  8725  001768  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8726  00176A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8727  00176C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8728  00176E  0E00               	movlw	0
  8729  001770  6E14               	movwf	GETxAPIxVAL@index+1,c
  8730  001772  0E1B               	movlw	27
  8731  001774  6E13               	movwf	GETxAPIxVAL@index,c
  8732  001776  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8733  00177A  501F               	movf	??_Debounce_Inputs,w,c
  8734  00177C  5C13               	subwf	?_GETxAPIxVAL,w,c
  8735  00177E  5020               	movf	??_Debounce_Inputs+1,w,c
  8736  001780  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8737  001782  A0D8               	btfss	status,0,c
  8738  001784  D002               	goto	l896
  8739                           
  8740                           ;io.c: 212: {
  8741                           ;io.c: 213: Reed_Contact_RF_Counter++;
  8742  001786  2A3C               	incf	_Reed_Contact_RF_Counter,f,c
  8743                           
  8744                           ;io.c: 215: }
  8745                           
  8746                           ;io.c: 214: break;
  8747  001788  D043               	goto	l899
  8748  00178A                     l896:
  8749                           
  8750                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  8751  00178A  0E00               	movlw	0
  8752  00178C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8753  00178E  0E1D               	movlw	29
  8754  001790  6E19               	movwf	SETxAPIxVAL@index,c
  8755  001792  0E00               	movlw	0
  8756  001794  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8757  001796  0E01               	movlw	1
  8758  001798  6E1B               	movwf	SETxAPIxVAL@value,c
  8759  00179A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8760                           
  8761                           ;io.c: 220: }
  8762                           
  8763                           ;io.c: 219: default : break;
  8764                           
  8765                           ;io.c: 217: break;
  8766  00179E  D038               	goto	l899
  8767  0017A0                     l890:
  8768  0017A0  A683               	btfss	3971,3,c	;volatile
  8769  0017A2  D002               	goto	u7440
  8770  0017A4  0E01               	movlw	1
  8771  0017A6  D001               	goto	u7446
  8772  0017A8                     u7440:
  8773  0017A8  0E00               	movlw	0
  8774  0017AA                     u7446:
  8775                           
  8776                           ; Switch size 1, requested type "space"
  8777                           ; Number of cases is 2, Range of values is 0 to 1
  8778                           ; switch strategies available:
  8779                           ; Name         Instructions Cycles
  8780                           ; simple_byte            7     4 (average)
  8781                           ;	Chosen strategy is simple_byte
  8782  0017AA  0A00               	xorlw	0	; case 0
  8783  0017AC  B4D8               	btfsc	status,2,c
  8784  0017AE  D7DC               	goto	l895
  8785  0017B0  0A01               	xorlw	1	; case 1
  8786  0017B2  B4D8               	btfsc	status,2,c
  8787  0017B4  D7C9               	goto	l891
  8788                           
  8789                           ;io.c: 223: switch(PORTDbits.RD2)
  8790  0017B6  D02C               	goto	l899
  8791  0017B8  503B               	movf	_Reed_Contact_RB_Counter,w,c
  8792  0017BA  B4D8               	btfsc	status,2,c
  8793  0017BC  D002               	goto	l901
  8794                           
  8795                           ;io.c: 226: {
  8796                           ;io.c: 227: Reed_Contact_RB_Counter--;
  8797  0017BE  063B               	decf	_Reed_Contact_RB_Counter,f,c
  8798                           
  8799                           ;io.c: 229: }
  8800                           
  8801                           ;io.c: 228: break;
  8802  0017C0  D05F               	goto	l908
  8803  0017C2                     l901:
  8804                           
  8805                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  8806  0017C2  0E00               	movlw	0
  8807  0017C4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8808  0017C6  0E1C               	movlw	28
  8809  0017C8  6E19               	movwf	SETxAPIxVAL@index,c
  8810  0017CA  0E00               	movlw	0
  8811  0017CC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8812  0017CE  0E00               	movlw	0
  8813  0017D0  6E1B               	movwf	SETxAPIxVAL@value,c
  8814  0017D2  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8815                           
  8816                           ;io.c: 231: break;
  8817  0017D6  D054               	goto	l908
  8818  0017D8  503B               	movf	_Reed_Contact_RB_Counter,w,c
  8819  0017DA  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8820  0017DC  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8821  0017DE  0E00               	movlw	0
  8822  0017E0  6E14               	movwf	GETxAPIxVAL@index+1,c
  8823  0017E2  0E1B               	movlw	27
  8824  0017E4  6E13               	movwf	GETxAPIxVAL@index,c
  8825  0017E6  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8826  0017EA  501F               	movf	??_Debounce_Inputs,w,c
  8827  0017EC  5C13               	subwf	?_GETxAPIxVAL,w,c
  8828  0017EE  5020               	movf	??_Debounce_Inputs+1,w,c
  8829  0017F0  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8830  0017F2  A0D8               	btfss	status,0,c
  8831  0017F4  D002               	goto	l905
  8832                           
  8833                           ;io.c: 234: {
  8834                           ;io.c: 235: Reed_Contact_RB_Counter++;
  8835  0017F6  2A3B               	incf	_Reed_Contact_RB_Counter,f,c
  8836                           
  8837                           ;io.c: 237: }
  8838                           
  8839                           ;io.c: 236: break;
  8840  0017F8  D043               	goto	l908
  8841  0017FA                     l905:
  8842                           
  8843                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  8844  0017FA  0E00               	movlw	0
  8845  0017FC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8846  0017FE  0E1C               	movlw	28
  8847  001800  6E19               	movwf	SETxAPIxVAL@index,c
  8848  001802  0E00               	movlw	0
  8849  001804  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8850  001806  0E01               	movlw	1
  8851  001808  6E1B               	movwf	SETxAPIxVAL@value,c
  8852  00180A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8853                           
  8854                           ;io.c: 242: }
  8855                           
  8856                           ;io.c: 241: default : break;
  8857                           
  8858                           ;io.c: 239: break;
  8859  00180E  D038               	goto	l908
  8860  001810                     l899:
  8861  001810  A483               	btfss	3971,2,c	;volatile
  8862  001812  D002               	goto	u7470
  8863  001814  0E01               	movlw	1
  8864  001816  D001               	goto	u7476
  8865  001818                     u7470:
  8866  001818  0E00               	movlw	0
  8867  00181A                     u7476:
  8868                           
  8869                           ; Switch size 1, requested type "space"
  8870                           ; Number of cases is 2, Range of values is 0 to 1
  8871                           ; switch strategies available:
  8872                           ; Name         Instructions Cycles
  8873                           ; simple_byte            7     4 (average)
  8874                           ;	Chosen strategy is simple_byte
  8875  00181A  0A00               	xorlw	0	; case 0
  8876  00181C  B4D8               	btfsc	status,2,c
  8877  00181E  D7DC               	goto	l904
  8878  001820  0A01               	xorlw	1	; case 1
  8879  001822  B4D8               	btfsc	status,2,c
  8880  001824  D7C9               	goto	l900
  8881                           
  8882                           ;io.c: 245: switch(!PORTBbits.RB0)
  8883  001826  D02C               	goto	l908
  8884  001828  5036               	movf	_Button_Contact_Counter_Start,w,c
  8885  00182A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8886  00182C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8887  00182E  0E00               	movlw	0
  8888  001830  6E14               	movwf	GETxAPIxVAL@index+1,c
  8889  001832  0E1B               	movlw	27
  8890  001834  6E13               	movwf	GETxAPIxVAL@index,c
  8891  001836  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  8892  00183A  501F               	movf	??_Debounce_Inputs,w,c
  8893  00183C  5C13               	subwf	?_GETxAPIxVAL,w,c
  8894  00183E  5020               	movf	??_Debounce_Inputs+1,w,c
  8895  001840  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8896  001842  A0D8               	btfss	status,0,c
  8897  001844  D002               	goto	l910
  8898                           
  8899                           ;io.c: 248: {
  8900                           ;io.c: 249: Button_Contact_Counter_Start++;
  8901  001846  2A36               	incf	_Button_Contact_Counter_Start,f,c
  8902                           
  8903                           ;io.c: 251: }
  8904                           
  8905                           ;io.c: 250: break;
  8906  001848  D05A               	goto	l917
  8907  00184A                     l910:
  8908                           
  8909                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  8910  00184A  0E00               	movlw	0
  8911  00184C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8912  00184E  0E20               	movlw	32
  8913  001850  6E19               	movwf	SETxAPIxVAL@index,c
  8914  001852  0E00               	movlw	0
  8915  001854  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8916  001856  0E01               	movlw	1
  8917  001858  6E1B               	movwf	SETxAPIxVAL@value,c
  8918  00185A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8919                           
  8920                           ;io.c: 253: break;
  8921  00185E  D04F               	goto	l917
  8922  001860  5036               	movf	_Button_Contact_Counter_Start,w,c
  8923  001862  B4D8               	btfsc	status,2,c
  8924  001864  D002               	goto	l914
  8925                           
  8926                           ;io.c: 256: {
  8927                           ;io.c: 257: Button_Contact_Counter_Start--;
  8928  001866  0636               	decf	_Button_Contact_Counter_Start,f,c
  8929                           
  8930                           ;io.c: 259: }
  8931                           
  8932                           ;io.c: 258: break;
  8933  001868  D04A               	goto	l917
  8934  00186A                     l914:
  8935                           
  8936                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  8937  00186A  0E00               	movlw	0
  8938  00186C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8939  00186E  0E20               	movlw	32
  8940  001870  6E19               	movwf	SETxAPIxVAL@index,c
  8941  001872  0E00               	movlw	0
  8942  001874  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8943  001876  0E00               	movlw	0
  8944  001878  6E1B               	movwf	SETxAPIxVAL@value,c
  8945  00187A  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  8946                           
  8947                           ;io.c: 264: }
  8948                           
  8949                           ;io.c: 263: default : break;
  8950                           
  8951                           ;io.c: 261: break;
  8952  00187E  D03F               	goto	l917
  8953  001880                     l908:
  8954  001880  B081               	btfsc	3969,0,c	;volatile
  8955  001882  D002               	goto	u7500
  8956  001884  0E01               	movlw	1
  8957  001886  D001               	goto	u7510
  8958  001888                     u7500:
  8959  001888  0E00               	movlw	0
  8960  00188A                     u7510:
  8961  00188A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8962  00188C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8963                           
  8964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8965                           ; Switch size 1, requested type "space"
  8966                           ; Number of cases is 1, Range of values is 0 to 0
  8967                           ; switch strategies available:
  8968                           ; Name         Instructions Cycles
  8969                           ; simple_byte            4     3 (average)
  8970                           ;	Chosen strategy is simple_byte
  8971  00188E  5020               	movf	??_Debounce_Inputs+1,w,c
  8972  001890  0A00               	xorlw	0	; case 0
  8973  001892  A4D8               	btfss	status,2,c
  8974  001894  D034               	goto	l917
  8975                           
  8976                           ; Switch size 1, requested type "space"
  8977                           ; Number of cases is 2, Range of values is 0 to 1
  8978                           ; switch strategies available:
  8979                           ; Name         Instructions Cycles
  8980                           ; simple_byte            7     4 (average)
  8981                           ;	Chosen strategy is simple_byte
  8982  001896  501F               	movf	??_Debounce_Inputs,w,c
  8983  001898  0A00               	xorlw	0	; case 0
  8984  00189A  B4D8               	btfsc	status,2,c
  8985  00189C  D7E1               	goto	l913
  8986  00189E  0A01               	xorlw	1	; case 1
  8987  0018A0  B4D8               	btfsc	status,2,c
  8988  0018A2  D7C2               	goto	l909
  8989                           
  8990                           ;io.c: 267: switch(!PORTDbits.RD7)
  8991  0018A4  D02C               	goto	l917
  8992  0018A6  5035               	movf	_Button_Contact_Counter_Stop,w,c
  8993  0018A8  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8994  0018AA  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8995  0018AC  0E00               	movlw	0
  8996  0018AE  6E14               	movwf	GETxAPIxVAL@index+1,c
  8997  0018B0  0E1B               	movlw	27
  8998  0018B2  6E13               	movwf	GETxAPIxVAL@index,c
  8999  0018B4  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9000  0018B8  501F               	movf	??_Debounce_Inputs,w,c
  9001  0018BA  5C13               	subwf	?_GETxAPIxVAL,w,c
  9002  0018BC  5020               	movf	??_Debounce_Inputs+1,w,c
  9003  0018BE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9004  0018C0  A0D8               	btfss	status,0,c
  9005  0018C2  D002               	goto	l919
  9006                           
  9007                           ;io.c: 270: {
  9008                           ;io.c: 271: Button_Contact_Counter_Stop++;
  9009  0018C4  2A35               	incf	_Button_Contact_Counter_Stop,f,c
  9010                           
  9011                           ;io.c: 273: }
  9012                           
  9013                           ;io.c: 272: break;
  9014  0018C6  D05A               	goto	l926
  9015  0018C8                     l919:
  9016                           
  9017                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  9018  0018C8  0E00               	movlw	0
  9019  0018CA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9020  0018CC  0E21               	movlw	33
  9021  0018CE  6E19               	movwf	SETxAPIxVAL@index,c
  9022  0018D0  0E00               	movlw	0
  9023  0018D2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9024  0018D4  0E01               	movlw	1
  9025  0018D6  6E1B               	movwf	SETxAPIxVAL@value,c
  9026  0018D8  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9027                           
  9028                           ;io.c: 275: break;
  9029  0018DC  D04F               	goto	l926
  9030  0018DE  5035               	movf	_Button_Contact_Counter_Stop,w,c
  9031  0018E0  B4D8               	btfsc	status,2,c
  9032  0018E2  D002               	goto	l923
  9033                           
  9034                           ;io.c: 278: {
  9035                           ;io.c: 279: Button_Contact_Counter_Stop--;
  9036  0018E4  0635               	decf	_Button_Contact_Counter_Stop,f,c
  9037                           
  9038                           ;io.c: 281: }
  9039                           
  9040                           ;io.c: 280: break;
  9041  0018E6  D04A               	goto	l926
  9042  0018E8                     l923:
  9043                           
  9044                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  9045  0018E8  0E00               	movlw	0
  9046  0018EA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9047  0018EC  0E21               	movlw	33
  9048  0018EE  6E19               	movwf	SETxAPIxVAL@index,c
  9049  0018F0  0E00               	movlw	0
  9050  0018F2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9051  0018F4  0E00               	movlw	0
  9052  0018F6  6E1B               	movwf	SETxAPIxVAL@value,c
  9053  0018F8  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9054                           
  9055                           ;io.c: 286: }
  9056                           
  9057                           ;io.c: 285: default : break;
  9058                           
  9059                           ;io.c: 283: break;
  9060  0018FC  D03F               	goto	l926
  9061  0018FE                     l917:
  9062  0018FE  BE83               	btfsc	3971,7,c	;volatile
  9063  001900  D002               	goto	u7540
  9064  001902  0E01               	movlw	1
  9065  001904  D001               	goto	u7550
  9066  001906                     u7540:
  9067  001906  0E00               	movlw	0
  9068  001908                     u7550:
  9069  001908  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9070  00190A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9071                           
  9072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9073                           ; Switch size 1, requested type "space"
  9074                           ; Number of cases is 1, Range of values is 0 to 0
  9075                           ; switch strategies available:
  9076                           ; Name         Instructions Cycles
  9077                           ; simple_byte            4     3 (average)
  9078                           ;	Chosen strategy is simple_byte
  9079  00190C  5020               	movf	??_Debounce_Inputs+1,w,c
  9080  00190E  0A00               	xorlw	0	; case 0
  9081  001910  A4D8               	btfss	status,2,c
  9082  001912  D034               	goto	l926
  9083                           
  9084                           ; Switch size 1, requested type "space"
  9085                           ; Number of cases is 2, Range of values is 0 to 1
  9086                           ; switch strategies available:
  9087                           ; Name         Instructions Cycles
  9088                           ; simple_byte            7     4 (average)
  9089                           ;	Chosen strategy is simple_byte
  9090  001914  501F               	movf	??_Debounce_Inputs,w,c
  9091  001916  0A00               	xorlw	0	; case 0
  9092  001918  B4D8               	btfsc	status,2,c
  9093  00191A  D7E1               	goto	l922
  9094  00191C  0A01               	xorlw	1	; case 1
  9095  00191E  B4D8               	btfsc	status,2,c
  9096  001920  D7C2               	goto	l918
  9097                           
  9098                           ;io.c: 289: switch(!PORTBbits.RB1)
  9099  001922  D02C               	goto	l926
  9100  001924  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9101  001926  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9102  001928  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9103  00192A  0E00               	movlw	0
  9104  00192C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9105  00192E  0E1B               	movlw	27
  9106  001930  6E13               	movwf	GETxAPIxVAL@index,c
  9107  001932  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9108  001936  501F               	movf	??_Debounce_Inputs,w,c
  9109  001938  5C13               	subwf	?_GETxAPIxVAL,w,c
  9110  00193A  5020               	movf	??_Debounce_Inputs+1,w,c
  9111  00193C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9112  00193E  A0D8               	btfss	status,0,c
  9113  001940  D002               	goto	l928
  9114                           
  9115                           ;io.c: 292: {
  9116                           ;io.c: 293: Button_Contact_Counter_Middle++;
  9117  001942  2A34               	incf	_Button_Contact_Counter_Middle,f,c
  9118                           
  9119                           ;io.c: 295: }
  9120                           
  9121                           ;io.c: 294: break;
  9122  001944  D05A               	goto	l935
  9123  001946                     l928:
  9124                           
  9125                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  9126  001946  0E00               	movlw	0
  9127  001948  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9128  00194A  0E22               	movlw	34
  9129  00194C  6E19               	movwf	SETxAPIxVAL@index,c
  9130  00194E  0E00               	movlw	0
  9131  001950  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9132  001952  0E01               	movlw	1
  9133  001954  6E1B               	movwf	SETxAPIxVAL@value,c
  9134  001956  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9135                           
  9136                           ;io.c: 297: break;
  9137  00195A  D04F               	goto	l935
  9138  00195C  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9139  00195E  B4D8               	btfsc	status,2,c
  9140  001960  D002               	goto	l932
  9141                           
  9142                           ;io.c: 300: {
  9143                           ;io.c: 301: Button_Contact_Counter_Middle--;
  9144  001962  0634               	decf	_Button_Contact_Counter_Middle,f,c
  9145                           
  9146                           ;io.c: 303: }
  9147                           
  9148                           ;io.c: 302: break;
  9149  001964  D04A               	goto	l935
  9150  001966                     l932:
  9151                           
  9152                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  9153  001966  0E00               	movlw	0
  9154  001968  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9155  00196A  0E22               	movlw	34
  9156  00196C  6E19               	movwf	SETxAPIxVAL@index,c
  9157  00196E  0E00               	movlw	0
  9158  001970  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9159  001972  0E00               	movlw	0
  9160  001974  6E1B               	movwf	SETxAPIxVAL@value,c
  9161  001976  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9162                           
  9163                           ;io.c: 308: }
  9164                           
  9165                           ;io.c: 307: default : break;
  9166                           
  9167                           ;io.c: 305: break;
  9168  00197A  D03F               	goto	l935
  9169  00197C                     l926:
  9170  00197C  B281               	btfsc	3969,1,c	;volatile
  9171  00197E  D002               	goto	u7580
  9172  001980  0E01               	movlw	1
  9173  001982  D001               	goto	u7590
  9174  001984                     u7580:
  9175  001984  0E00               	movlw	0
  9176  001986                     u7590:
  9177  001986  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9178  001988  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9179                           
  9180                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9181                           ; Switch size 1, requested type "space"
  9182                           ; Number of cases is 1, Range of values is 0 to 0
  9183                           ; switch strategies available:
  9184                           ; Name         Instructions Cycles
  9185                           ; simple_byte            4     3 (average)
  9186                           ;	Chosen strategy is simple_byte
  9187  00198A  5020               	movf	??_Debounce_Inputs+1,w,c
  9188  00198C  0A00               	xorlw	0	; case 0
  9189  00198E  A4D8               	btfss	status,2,c
  9190  001990  D034               	goto	l935
  9191                           
  9192                           ; Switch size 1, requested type "space"
  9193                           ; Number of cases is 2, Range of values is 0 to 1
  9194                           ; switch strategies available:
  9195                           ; Name         Instructions Cycles
  9196                           ; simple_byte            7     4 (average)
  9197                           ;	Chosen strategy is simple_byte
  9198  001992  501F               	movf	??_Debounce_Inputs,w,c
  9199  001994  0A00               	xorlw	0	; case 0
  9200  001996  B4D8               	btfsc	status,2,c
  9201  001998  D7E1               	goto	l931
  9202  00199A  0A01               	xorlw	1	; case 1
  9203  00199C  B4D8               	btfsc	status,2,c
  9204  00199E  D7C2               	goto	l927
  9205                           
  9206                           ;io.c: 311: switch(!PORTBbits.RB5)
  9207  0019A0  D02C               	goto	l935
  9208  0019A2  5033               	movf	_Button_Contact_Counter_LB,w,c
  9209  0019A4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9210  0019A6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9211  0019A8  0E00               	movlw	0
  9212  0019AA  6E14               	movwf	GETxAPIxVAL@index+1,c
  9213  0019AC  0E1B               	movlw	27
  9214  0019AE  6E13               	movwf	GETxAPIxVAL@index,c
  9215  0019B0  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9216  0019B4  501F               	movf	??_Debounce_Inputs,w,c
  9217  0019B6  5C13               	subwf	?_GETxAPIxVAL,w,c
  9218  0019B8  5020               	movf	??_Debounce_Inputs+1,w,c
  9219  0019BA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9220  0019BC  A0D8               	btfss	status,0,c
  9221  0019BE  D002               	goto	l937
  9222                           
  9223                           ;io.c: 314: {
  9224                           ;io.c: 315: Button_Contact_Counter_LB++;
  9225  0019C0  2A33               	incf	_Button_Contact_Counter_LB,f,c
  9226                           
  9227                           ;io.c: 317: }
  9228                           
  9229                           ;io.c: 316: break;
  9230  0019C2  D05A               	goto	l944
  9231  0019C4                     l937:
  9232                           
  9233                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  9234  0019C4  0E00               	movlw	0
  9235  0019C6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9236  0019C8  0E23               	movlw	35
  9237  0019CA  6E19               	movwf	SETxAPIxVAL@index,c
  9238  0019CC  0E00               	movlw	0
  9239  0019CE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9240  0019D0  0E01               	movlw	1
  9241  0019D2  6E1B               	movwf	SETxAPIxVAL@value,c
  9242  0019D4  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9243                           
  9244                           ;io.c: 319: break;
  9245  0019D8  D04F               	goto	l944
  9246  0019DA  5033               	movf	_Button_Contact_Counter_LB,w,c
  9247  0019DC  B4D8               	btfsc	status,2,c
  9248  0019DE  D002               	goto	l941
  9249                           
  9250                           ;io.c: 322: {
  9251                           ;io.c: 323: Button_Contact_Counter_LB--;
  9252  0019E0  0633               	decf	_Button_Contact_Counter_LB,f,c
  9253                           
  9254                           ;io.c: 325: }
  9255                           
  9256                           ;io.c: 324: break;
  9257  0019E2  D04A               	goto	l944
  9258  0019E4                     l941:
  9259                           
  9260                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  9261  0019E4  0E00               	movlw	0
  9262  0019E6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9263  0019E8  0E23               	movlw	35
  9264  0019EA  6E19               	movwf	SETxAPIxVAL@index,c
  9265  0019EC  0E00               	movlw	0
  9266  0019EE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9267  0019F0  0E00               	movlw	0
  9268  0019F2  6E1B               	movwf	SETxAPIxVAL@value,c
  9269  0019F4  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9270                           
  9271                           ;io.c: 330: }
  9272                           
  9273                           ;io.c: 329: default : break;
  9274                           
  9275                           ;io.c: 327: break;
  9276  0019F8  D03F               	goto	l944
  9277  0019FA                     l935:
  9278  0019FA  BA81               	btfsc	3969,5,c	;volatile
  9279  0019FC  D002               	goto	u7620
  9280  0019FE  0E01               	movlw	1
  9281  001A00  D001               	goto	u7630
  9282  001A02                     u7620:
  9283  001A02  0E00               	movlw	0
  9284  001A04                     u7630:
  9285  001A04  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9286  001A06  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9287                           
  9288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9289                           ; Switch size 1, requested type "space"
  9290                           ; Number of cases is 1, Range of values is 0 to 0
  9291                           ; switch strategies available:
  9292                           ; Name         Instructions Cycles
  9293                           ; simple_byte            4     3 (average)
  9294                           ;	Chosen strategy is simple_byte
  9295  001A08  5020               	movf	??_Debounce_Inputs+1,w,c
  9296  001A0A  0A00               	xorlw	0	; case 0
  9297  001A0C  A4D8               	btfss	status,2,c
  9298  001A0E  D034               	goto	l944
  9299                           
  9300                           ; Switch size 1, requested type "space"
  9301                           ; Number of cases is 2, Range of values is 0 to 1
  9302                           ; switch strategies available:
  9303                           ; Name         Instructions Cycles
  9304                           ; simple_byte            7     4 (average)
  9305                           ;	Chosen strategy is simple_byte
  9306  001A10  501F               	movf	??_Debounce_Inputs,w,c
  9307  001A12  0A00               	xorlw	0	; case 0
  9308  001A14  B4D8               	btfsc	status,2,c
  9309  001A16  D7E1               	goto	l940
  9310  001A18  0A01               	xorlw	1	; case 1
  9311  001A1A  B4D8               	btfsc	status,2,c
  9312  001A1C  D7C2               	goto	l936
  9313                           
  9314                           ;io.c: 333: switch(!PORTBbits.RB4)
  9315  001A1E  D02C               	goto	l944
  9316  001A20  5032               	movf	_Button_Contact_Counter_LF,w,c
  9317  001A22  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9318  001A24  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9319  001A26  0E00               	movlw	0
  9320  001A28  6E14               	movwf	GETxAPIxVAL@index+1,c
  9321  001A2A  0E1B               	movlw	27
  9322  001A2C  6E13               	movwf	GETxAPIxVAL@index,c
  9323  001A2E  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9324  001A32  501F               	movf	??_Debounce_Inputs,w,c
  9325  001A34  5C13               	subwf	?_GETxAPIxVAL,w,c
  9326  001A36  5020               	movf	??_Debounce_Inputs+1,w,c
  9327  001A38  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9328  001A3A  A0D8               	btfss	status,0,c
  9329  001A3C  D002               	goto	l946
  9330                           
  9331                           ;io.c: 336: {
  9332                           ;io.c: 337: Button_Contact_Counter_LF++;
  9333  001A3E  2A32               	incf	_Button_Contact_Counter_LF,f,c
  9334                           
  9335                           ;io.c: 339: }
  9336                           
  9337                           ;io.c: 338: break;
  9338  001A40  D05A               	goto	l953
  9339  001A42                     l946:
  9340                           
  9341                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  9342  001A42  0E00               	movlw	0
  9343  001A44  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9344  001A46  0E24               	movlw	36
  9345  001A48  6E19               	movwf	SETxAPIxVAL@index,c
  9346  001A4A  0E00               	movlw	0
  9347  001A4C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9348  001A4E  0E01               	movlw	1
  9349  001A50  6E1B               	movwf	SETxAPIxVAL@value,c
  9350  001A52  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9351                           
  9352                           ;io.c: 341: break;
  9353  001A56  D04F               	goto	l953
  9354  001A58  5032               	movf	_Button_Contact_Counter_LF,w,c
  9355  001A5A  B4D8               	btfsc	status,2,c
  9356  001A5C  D002               	goto	l950
  9357                           
  9358                           ;io.c: 344: {
  9359                           ;io.c: 345: Button_Contact_Counter_LF--;
  9360  001A5E  0632               	decf	_Button_Contact_Counter_LF,f,c
  9361                           
  9362                           ;io.c: 347: }
  9363                           
  9364                           ;io.c: 346: break;
  9365  001A60  D04A               	goto	l953
  9366  001A62                     l950:
  9367                           
  9368                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  9369  001A62  0E00               	movlw	0
  9370  001A64  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9371  001A66  0E24               	movlw	36
  9372  001A68  6E19               	movwf	SETxAPIxVAL@index,c
  9373  001A6A  0E00               	movlw	0
  9374  001A6C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9375  001A6E  0E00               	movlw	0
  9376  001A70  6E1B               	movwf	SETxAPIxVAL@value,c
  9377  001A72  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9378                           
  9379                           ;io.c: 352: }
  9380                           
  9381                           ;io.c: 351: default : break;
  9382                           
  9383                           ;io.c: 349: break;
  9384  001A76  D03F               	goto	l953
  9385  001A78                     l944:
  9386  001A78  B881               	btfsc	3969,4,c	;volatile
  9387  001A7A  D002               	goto	u7660
  9388  001A7C  0E01               	movlw	1
  9389  001A7E  D001               	goto	u7670
  9390  001A80                     u7660:
  9391  001A80  0E00               	movlw	0
  9392  001A82                     u7670:
  9393  001A82  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9394  001A84  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9395                           
  9396                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9397                           ; Switch size 1, requested type "space"
  9398                           ; Number of cases is 1, Range of values is 0 to 0
  9399                           ; switch strategies available:
  9400                           ; Name         Instructions Cycles
  9401                           ; simple_byte            4     3 (average)
  9402                           ;	Chosen strategy is simple_byte
  9403  001A86  5020               	movf	??_Debounce_Inputs+1,w,c
  9404  001A88  0A00               	xorlw	0	; case 0
  9405  001A8A  A4D8               	btfss	status,2,c
  9406  001A8C  D034               	goto	l953
  9407                           
  9408                           ; Switch size 1, requested type "space"
  9409                           ; Number of cases is 2, Range of values is 0 to 1
  9410                           ; switch strategies available:
  9411                           ; Name         Instructions Cycles
  9412                           ; simple_byte            7     4 (average)
  9413                           ;	Chosen strategy is simple_byte
  9414  001A8E  501F               	movf	??_Debounce_Inputs,w,c
  9415  001A90  0A00               	xorlw	0	; case 0
  9416  001A92  B4D8               	btfsc	status,2,c
  9417  001A94  D7E1               	goto	l949
  9418  001A96  0A01               	xorlw	1	; case 1
  9419  001A98  B4D8               	btfsc	status,2,c
  9420  001A9A  D7C2               	goto	l945
  9421                           
  9422                           ;io.c: 355: switch(!PORTBbits.RB3)
  9423  001A9C  D02C               	goto	l953
  9424  001A9E  5031               	movf	_Button_Contact_Counter_RB,w,c
  9425  001AA0  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9426  001AA2  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9427  001AA4  0E00               	movlw	0
  9428  001AA6  6E14               	movwf	GETxAPIxVAL@index+1,c
  9429  001AA8  0E1B               	movlw	27
  9430  001AAA  6E13               	movwf	GETxAPIxVAL@index,c
  9431  001AAC  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9432  001AB0  501F               	movf	??_Debounce_Inputs,w,c
  9433  001AB2  5C13               	subwf	?_GETxAPIxVAL,w,c
  9434  001AB4  5020               	movf	??_Debounce_Inputs+1,w,c
  9435  001AB6  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9436  001AB8  A0D8               	btfss	status,0,c
  9437  001ABA  D002               	goto	l955
  9438                           
  9439                           ;io.c: 358: {
  9440                           ;io.c: 359: Button_Contact_Counter_RB++;
  9441  001ABC  2A31               	incf	_Button_Contact_Counter_RB,f,c
  9442                           
  9443                           ;io.c: 361: }
  9444                           
  9445                           ;io.c: 360: break;
  9446  001ABE  D05A               	goto	l962
  9447  001AC0                     l955:
  9448                           
  9449                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  9450  001AC0  0E00               	movlw	0
  9451  001AC2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9452  001AC4  0E25               	movlw	37
  9453  001AC6  6E19               	movwf	SETxAPIxVAL@index,c
  9454  001AC8  0E00               	movlw	0
  9455  001ACA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9456  001ACC  0E01               	movlw	1
  9457  001ACE  6E1B               	movwf	SETxAPIxVAL@value,c
  9458  001AD0  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9459                           
  9460                           ;io.c: 363: break;
  9461  001AD4  D04F               	goto	l962
  9462  001AD6  5031               	movf	_Button_Contact_Counter_RB,w,c
  9463  001AD8  B4D8               	btfsc	status,2,c
  9464  001ADA  D002               	goto	l959
  9465                           
  9466                           ;io.c: 366: {
  9467                           ;io.c: 367: Button_Contact_Counter_RB--;
  9468  001ADC  0631               	decf	_Button_Contact_Counter_RB,f,c
  9469                           
  9470                           ;io.c: 369: }
  9471                           
  9472                           ;io.c: 368: break;
  9473  001ADE  D04A               	goto	l962
  9474  001AE0                     l959:
  9475                           
  9476                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  9477  001AE0  0E00               	movlw	0
  9478  001AE2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9479  001AE4  0E25               	movlw	37
  9480  001AE6  6E19               	movwf	SETxAPIxVAL@index,c
  9481  001AE8  0E00               	movlw	0
  9482  001AEA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9483  001AEC  0E00               	movlw	0
  9484  001AEE  6E1B               	movwf	SETxAPIxVAL@value,c
  9485  001AF0  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9486                           
  9487                           ;io.c: 374: }
  9488                           
  9489                           ;io.c: 373: default : break;
  9490                           
  9491                           ;io.c: 371: break;
  9492  001AF4  D03F               	goto	l962
  9493  001AF6                     l953:
  9494  001AF6  B681               	btfsc	3969,3,c	;volatile
  9495  001AF8  D002               	goto	u7700
  9496  001AFA  0E01               	movlw	1
  9497  001AFC  D001               	goto	u7710
  9498  001AFE                     u7700:
  9499  001AFE  0E00               	movlw	0
  9500  001B00                     u7710:
  9501  001B00  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9502  001B02  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9503                           
  9504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9505                           ; Switch size 1, requested type "space"
  9506                           ; Number of cases is 1, Range of values is 0 to 0
  9507                           ; switch strategies available:
  9508                           ; Name         Instructions Cycles
  9509                           ; simple_byte            4     3 (average)
  9510                           ;	Chosen strategy is simple_byte
  9511  001B04  5020               	movf	??_Debounce_Inputs+1,w,c
  9512  001B06  0A00               	xorlw	0	; case 0
  9513  001B08  A4D8               	btfss	status,2,c
  9514  001B0A  D034               	goto	l962
  9515                           
  9516                           ; Switch size 1, requested type "space"
  9517                           ; Number of cases is 2, Range of values is 0 to 1
  9518                           ; switch strategies available:
  9519                           ; Name         Instructions Cycles
  9520                           ; simple_byte            7     4 (average)
  9521                           ;	Chosen strategy is simple_byte
  9522  001B0C  501F               	movf	??_Debounce_Inputs,w,c
  9523  001B0E  0A00               	xorlw	0	; case 0
  9524  001B10  B4D8               	btfsc	status,2,c
  9525  001B12  D7E1               	goto	l958
  9526  001B14  0A01               	xorlw	1	; case 1
  9527  001B16  B4D8               	btfsc	status,2,c
  9528  001B18  D7C2               	goto	l954
  9529                           
  9530                           ;io.c: 377: switch(!PORTBbits.RB2)
  9531  001B1A  D02C               	goto	l962
  9532  001B1C  5030               	movf	_Button_Contact_Counter_RF,w,c
  9533  001B1E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9534  001B20  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9535  001B22  0E00               	movlw	0
  9536  001B24  6E14               	movwf	GETxAPIxVAL@index+1,c
  9537  001B26  0E1B               	movlw	27
  9538  001B28  6E13               	movwf	GETxAPIxVAL@index,c
  9539  001B2A  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9540  001B2E  501F               	movf	??_Debounce_Inputs,w,c
  9541  001B30  5C13               	subwf	?_GETxAPIxVAL,w,c
  9542  001B32  5020               	movf	??_Debounce_Inputs+1,w,c
  9543  001B34  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9544  001B36  A0D8               	btfss	status,0,c
  9545  001B38  D002               	goto	l964
  9546                           
  9547                           ;io.c: 380: {
  9548                           ;io.c: 381: Button_Contact_Counter_RF++;
  9549  001B3A  2A30               	incf	_Button_Contact_Counter_RF,f,c
  9550                           
  9551                           ;io.c: 383: }
  9552                           
  9553                           ;io.c: 382: break;
  9554  001B3C  D05A               	goto	l971
  9555  001B3E                     l964:
  9556                           
  9557                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  9558  001B3E  0E00               	movlw	0
  9559  001B40  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9560  001B42  0E26               	movlw	38
  9561  001B44  6E19               	movwf	SETxAPIxVAL@index,c
  9562  001B46  0E00               	movlw	0
  9563  001B48  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9564  001B4A  0E01               	movlw	1
  9565  001B4C  6E1B               	movwf	SETxAPIxVAL@value,c
  9566  001B4E  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9567                           
  9568                           ;io.c: 385: break;
  9569  001B52  D04F               	goto	l971
  9570  001B54  5030               	movf	_Button_Contact_Counter_RF,w,c
  9571  001B56  B4D8               	btfsc	status,2,c
  9572  001B58  D002               	goto	l968
  9573                           
  9574                           ;io.c: 388: {
  9575                           ;io.c: 389: Button_Contact_Counter_RF--;
  9576  001B5A  0630               	decf	_Button_Contact_Counter_RF,f,c
  9577                           
  9578                           ;io.c: 391: }
  9579                           
  9580                           ;io.c: 390: break;
  9581  001B5C  D04A               	goto	l971
  9582  001B5E                     l968:
  9583                           
  9584                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  9585  001B5E  0E00               	movlw	0
  9586  001B60  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9587  001B62  0E26               	movlw	38
  9588  001B64  6E19               	movwf	SETxAPIxVAL@index,c
  9589  001B66  0E00               	movlw	0
  9590  001B68  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9591  001B6A  0E00               	movlw	0
  9592  001B6C  6E1B               	movwf	SETxAPIxVAL@value,c
  9593  001B6E  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9594                           
  9595                           ;io.c: 396: }
  9596                           
  9597                           ;io.c: 395: default : break;
  9598                           
  9599                           ;io.c: 393: break;
  9600  001B72  D03F               	goto	l971
  9601  001B74                     l962:
  9602  001B74  B481               	btfsc	3969,2,c	;volatile
  9603  001B76  D002               	goto	u7740
  9604  001B78  0E01               	movlw	1
  9605  001B7A  D001               	goto	u7750
  9606  001B7C                     u7740:
  9607  001B7C  0E00               	movlw	0
  9608  001B7E                     u7750:
  9609  001B7E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9610  001B80  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9611                           
  9612                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9613                           ; Switch size 1, requested type "space"
  9614                           ; Number of cases is 1, Range of values is 0 to 0
  9615                           ; switch strategies available:
  9616                           ; Name         Instructions Cycles
  9617                           ; simple_byte            4     3 (average)
  9618                           ;	Chosen strategy is simple_byte
  9619  001B82  5020               	movf	??_Debounce_Inputs+1,w,c
  9620  001B84  0A00               	xorlw	0	; case 0
  9621  001B86  A4D8               	btfss	status,2,c
  9622  001B88  D034               	goto	l971
  9623                           
  9624                           ; Switch size 1, requested type "space"
  9625                           ; Number of cases is 2, Range of values is 0 to 1
  9626                           ; switch strategies available:
  9627                           ; Name         Instructions Cycles
  9628                           ; simple_byte            7     4 (average)
  9629                           ;	Chosen strategy is simple_byte
  9630  001B8A  501F               	movf	??_Debounce_Inputs,w,c
  9631  001B8C  0A00               	xorlw	0	; case 0
  9632  001B8E  B4D8               	btfsc	status,2,c
  9633  001B90  D7E1               	goto	l967
  9634  001B92  0A01               	xorlw	1	; case 1
  9635  001B94  B4D8               	btfsc	status,2,c
  9636  001B96  D7C2               	goto	l963
  9637                           
  9638                           ;io.c: 399: switch(PORTCbits.RC1)
  9639  001B98  D02C               	goto	l971
  9640  001B9A  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9641  001B9C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9642  001B9E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9643  001BA0  0E00               	movlw	0
  9644  001BA2  6E14               	movwf	GETxAPIxVAL@index+1,c
  9645  001BA4  0E1B               	movlw	27
  9646  001BA6  6E13               	movwf	GETxAPIxVAL@index,c
  9647  001BA8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9648  001BAC  501F               	movf	??_Debounce_Inputs,w,c
  9649  001BAE  5C13               	subwf	?_GETxAPIxVAL,w,c
  9650  001BB0  5020               	movf	??_Debounce_Inputs+1,w,c
  9651  001BB2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9652  001BB4  A0D8               	btfss	status,0,c
  9653  001BB6  D002               	goto	l973
  9654                           
  9655                           ;io.c: 402: {
  9656                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  9657  001BB8  2A3A               	incf	_Reed_Contact_LMU_Counter,f,c
  9658                           
  9659                           ;io.c: 405: }
  9660                           
  9661                           ;io.c: 404: break;
  9662  001BBA  D053               	goto	l980
  9663  001BBC                     l973:
  9664                           
  9665                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  9666  001BBC  0E00               	movlw	0
  9667  001BBE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9668  001BC0  0E29               	movlw	41
  9669  001BC2  6E19               	movwf	SETxAPIxVAL@index,c
  9670  001BC4  0E00               	movlw	0
  9671  001BC6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9672  001BC8  0E01               	movlw	1
  9673  001BCA  6E1B               	movwf	SETxAPIxVAL@value,c
  9674  001BCC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9675                           
  9676                           ;io.c: 407: break;
  9677  001BD0  D048               	goto	l980
  9678  001BD2  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9679  001BD4  B4D8               	btfsc	status,2,c
  9680  001BD6  D002               	goto	l977
  9681                           
  9682                           ;io.c: 410: {
  9683                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  9684  001BD8  063A               	decf	_Reed_Contact_LMU_Counter,f,c
  9685                           
  9686                           ;io.c: 413: }
  9687                           
  9688                           ;io.c: 412: break;
  9689  001BDA  D043               	goto	l980
  9690  001BDC                     l977:
  9691                           
  9692                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  9693  001BDC  0E00               	movlw	0
  9694  001BDE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9695  001BE0  0E29               	movlw	41
  9696  001BE2  6E19               	movwf	SETxAPIxVAL@index,c
  9697  001BE4  0E00               	movlw	0
  9698  001BE6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9699  001BE8  0E00               	movlw	0
  9700  001BEA  6E1B               	movwf	SETxAPIxVAL@value,c
  9701  001BEC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9702                           
  9703                           ;io.c: 418: }
  9704                           
  9705                           ;io.c: 417: default : break;
  9706                           
  9707                           ;io.c: 415: break;
  9708  001BF0  D038               	goto	l980
  9709  001BF2                     l971:
  9710  001BF2  A282               	btfss	3970,1,c	;volatile
  9711  001BF4  D002               	goto	u7780
  9712  001BF6  0E01               	movlw	1
  9713  001BF8  D001               	goto	u7786
  9714  001BFA                     u7780:
  9715  001BFA  0E00               	movlw	0
  9716  001BFC                     u7786:
  9717                           
  9718                           ; Switch size 1, requested type "space"
  9719                           ; Number of cases is 2, Range of values is 0 to 1
  9720                           ; switch strategies available:
  9721                           ; Name         Instructions Cycles
  9722                           ; simple_byte            7     4 (average)
  9723                           ;	Chosen strategy is simple_byte
  9724  001BFC  0A00               	xorlw	0	; case 0
  9725  001BFE  B4D8               	btfsc	status,2,c
  9726  001C00  D7CC               	goto	l972
  9727  001C02  0A01               	xorlw	1	; case 1
  9728  001C04  B4D8               	btfsc	status,2,c
  9729  001C06  D7E5               	goto	l976
  9730                           
  9731                           ;io.c: 421: switch(PORTDbits.RD4)
  9732  001C08  D02C               	goto	l980
  9733  001C0A  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9734  001C0C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9735  001C0E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9736  001C10  0E00               	movlw	0
  9737  001C12  6E14               	movwf	GETxAPIxVAL@index+1,c
  9738  001C14  0E1B               	movlw	27
  9739  001C16  6E13               	movwf	GETxAPIxVAL@index,c
  9740  001C18  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9741  001C1C  501F               	movf	??_Debounce_Inputs,w,c
  9742  001C1E  5C13               	subwf	?_GETxAPIxVAL,w,c
  9743  001C20  5020               	movf	??_Debounce_Inputs+1,w,c
  9744  001C22  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9745  001C24  A0D8               	btfss	status,0,c
  9746  001C26  D002               	goto	l982
  9747                           
  9748                           ;io.c: 424: {
  9749                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  9750  001C28  2A39               	incf	_Reed_Contact_LMD_Counter,f,c
  9751                           
  9752                           ;io.c: 427: }
  9753                           
  9754                           ;io.c: 426: break;
  9755  001C2A  D053               	goto	l989
  9756  001C2C                     l982:
  9757                           
  9758                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  9759  001C2C  0E00               	movlw	0
  9760  001C2E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9761  001C30  0E2A               	movlw	42
  9762  001C32  6E19               	movwf	SETxAPIxVAL@index,c
  9763  001C34  0E00               	movlw	0
  9764  001C36  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9765  001C38  0E01               	movlw	1
  9766  001C3A  6E1B               	movwf	SETxAPIxVAL@value,c
  9767  001C3C  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9768                           
  9769                           ;io.c: 429: break;
  9770  001C40  D048               	goto	l989
  9771  001C42  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9772  001C44  B4D8               	btfsc	status,2,c
  9773  001C46  D002               	goto	l986
  9774                           
  9775                           ;io.c: 432: {
  9776                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  9777  001C48  0639               	decf	_Reed_Contact_LMD_Counter,f,c
  9778                           
  9779                           ;io.c: 435: }
  9780                           
  9781                           ;io.c: 434: break;
  9782  001C4A  D043               	goto	l989
  9783  001C4C                     l986:
  9784                           
  9785                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9786  001C4C  0E00               	movlw	0
  9787  001C4E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9788  001C50  0E2A               	movlw	42
  9789  001C52  6E19               	movwf	SETxAPIxVAL@index,c
  9790  001C54  0E00               	movlw	0
  9791  001C56  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9792  001C58  0E00               	movlw	0
  9793  001C5A  6E1B               	movwf	SETxAPIxVAL@value,c
  9794  001C5C  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9795                           
  9796                           ;io.c: 440: }
  9797                           
  9798                           ;io.c: 439: default : break;
  9799                           
  9800                           ;io.c: 437: break;
  9801  001C60  D038               	goto	l989
  9802  001C62                     l980:
  9803  001C62  A883               	btfss	3971,4,c	;volatile
  9804  001C64  D002               	goto	u7810
  9805  001C66  0E01               	movlw	1
  9806  001C68  D001               	goto	u7816
  9807  001C6A                     u7810:
  9808  001C6A  0E00               	movlw	0
  9809  001C6C                     u7816:
  9810                           
  9811                           ; Switch size 1, requested type "space"
  9812                           ; Number of cases is 2, Range of values is 0 to 1
  9813                           ; switch strategies available:
  9814                           ; Name         Instructions Cycles
  9815                           ; simple_byte            7     4 (average)
  9816                           ;	Chosen strategy is simple_byte
  9817  001C6C  0A00               	xorlw	0	; case 0
  9818  001C6E  B4D8               	btfsc	status,2,c
  9819  001C70  D7CC               	goto	l981
  9820  001C72  0A01               	xorlw	1	; case 1
  9821  001C74  B4D8               	btfsc	status,2,c
  9822  001C76  D7E5               	goto	l985
  9823                           
  9824                           ;io.c: 443: switch(PORTEbits.RE1)
  9825  001C78  D02C               	goto	l989
  9826  001C7A  5038               	movf	_Reed_Contact_RMU_Counter,w,c
  9827  001C7C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9828  001C7E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9829  001C80  0E00               	movlw	0
  9830  001C82  6E14               	movwf	GETxAPIxVAL@index+1,c
  9831  001C84  0E1B               	movlw	27
  9832  001C86  6E13               	movwf	GETxAPIxVAL@index,c
  9833  001C88  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9834  001C8C  501F               	movf	??_Debounce_Inputs,w,c
  9835  001C8E  5C13               	subwf	?_GETxAPIxVAL,w,c
  9836  001C90  5020               	movf	??_Debounce_Inputs+1,w,c
  9837  001C92  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9838  001C94  A0D8               	btfss	status,0,c
  9839  001C96  D002               	goto	l991
  9840                           
  9841                           ;io.c: 446: {
  9842                           ;io.c: 447: Reed_Contact_RMU_Counter++;
  9843  001C98  2A38               	incf	_Reed_Contact_RMU_Counter,f,c
  9844                           
  9845                           ;io.c: 449: }
  9846                           
  9847                           ;io.c: 448: break;
  9848  001C9A  D053               	goto	l998
  9849  001C9C                     l991:
  9850                           
  9851                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
  9852  001C9C  0E00               	movlw	0
  9853  001C9E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9854  001CA0  0E2B               	movlw	43
  9855  001CA2  6E19               	movwf	SETxAPIxVAL@index,c
  9856  001CA4  0E00               	movlw	0
  9857  001CA6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9858  001CA8  0E01               	movlw	1
  9859  001CAA  6E1B               	movwf	SETxAPIxVAL@value,c
  9860  001CAC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9861                           
  9862                           ;io.c: 451: break;
  9863  001CB0  D048               	goto	l998
  9864  001CB2  5038               	movf	_Reed_Contact_RMU_Counter,w,c
  9865  001CB4  B4D8               	btfsc	status,2,c
  9866  001CB6  D002               	goto	l995
  9867                           
  9868                           ;io.c: 454: {
  9869                           ;io.c: 455: Reed_Contact_RMU_Counter--;
  9870  001CB8  0638               	decf	_Reed_Contact_RMU_Counter,f,c
  9871                           
  9872                           ;io.c: 457: }
  9873                           
  9874                           ;io.c: 456: break;
  9875  001CBA  D043               	goto	l998
  9876  001CBC                     l995:
  9877                           
  9878                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
  9879  001CBC  0E00               	movlw	0
  9880  001CBE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9881  001CC0  0E2B               	movlw	43
  9882  001CC2  6E19               	movwf	SETxAPIxVAL@index,c
  9883  001CC4  0E00               	movlw	0
  9884  001CC6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9885  001CC8  0E00               	movlw	0
  9886  001CCA  6E1B               	movwf	SETxAPIxVAL@value,c
  9887  001CCC  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9888                           
  9889                           ;io.c: 462: }
  9890                           
  9891                           ;io.c: 461: default : break;
  9892                           
  9893                           ;io.c: 459: break;
  9894  001CD0  D038               	goto	l998
  9895  001CD2                     l989:
  9896  001CD2  A284               	btfss	3972,1,c	;volatile
  9897  001CD4  D002               	goto	u7840
  9898  001CD6  0E01               	movlw	1
  9899  001CD8  D001               	goto	u7846
  9900  001CDA                     u7840:
  9901  001CDA  0E00               	movlw	0
  9902  001CDC                     u7846:
  9903                           
  9904                           ; Switch size 1, requested type "space"
  9905                           ; Number of cases is 2, Range of values is 0 to 1
  9906                           ; switch strategies available:
  9907                           ; Name         Instructions Cycles
  9908                           ; simple_byte            7     4 (average)
  9909                           ;	Chosen strategy is simple_byte
  9910  001CDC  0A00               	xorlw	0	; case 0
  9911  001CDE  B4D8               	btfsc	status,2,c
  9912  001CE0  D7CC               	goto	l990
  9913  001CE2  0A01               	xorlw	1	; case 1
  9914  001CE4  B4D8               	btfsc	status,2,c
  9915  001CE6  D7E5               	goto	l994
  9916                           
  9917                           ;io.c: 465: switch(PORTEbits.RE0)
  9918  001CE8  D02C               	goto	l998
  9919  001CEA  5037               	movf	_Reed_Contact_RMD_Counter,w,c
  9920  001CEC  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9921  001CEE  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9922  001CF0  0E00               	movlw	0
  9923  001CF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  9924  001CF4  0E1B               	movlw	27
  9925  001CF6  6E13               	movwf	GETxAPIxVAL@index,c
  9926  001CF8  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
  9927  001CFC  501F               	movf	??_Debounce_Inputs,w,c
  9928  001CFE  5C13               	subwf	?_GETxAPIxVAL,w,c
  9929  001D00  5020               	movf	??_Debounce_Inputs+1,w,c
  9930  001D02  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9931  001D04  A0D8               	btfss	status,0,c
  9932  001D06  D002               	goto	l1000
  9933                           
  9934                           ;io.c: 468: {
  9935                           ;io.c: 469: Reed_Contact_RMD_Counter++;
  9936  001D08  2A37               	incf	_Reed_Contact_RMD_Counter,f,c
  9937                           
  9938                           ;io.c: 471: }
  9939                           
  9940                           ;io.c: 470: break;
  9941  001D0A  0012               	return	
  9942  001D0C                     l1000:
  9943                           
  9944                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
  9945  001D0C  0E00               	movlw	0
  9946  001D0E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9947  001D10  0E2C               	movlw	44
  9948  001D12  6E19               	movwf	SETxAPIxVAL@index,c
  9949  001D14  0E00               	movlw	0
  9950  001D16  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9951  001D18  0E01               	movlw	1
  9952  001D1A  6E1B               	movwf	SETxAPIxVAL@value,c
  9953  001D1C  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9954                           
  9955                           ;io.c: 473: break;
  9956  001D20  0012               	return	
  9957  001D22  5037               	movf	_Reed_Contact_RMD_Counter,w,c
  9958  001D24  B4D8               	btfsc	status,2,c
  9959  001D26  D002               	goto	l1004
  9960                           
  9961                           ;io.c: 476: {
  9962                           ;io.c: 477: Reed_Contact_RMD_Counter--;
  9963  001D28  0637               	decf	_Reed_Contact_RMD_Counter,f,c
  9964                           
  9965                           ;io.c: 479: }
  9966                           
  9967                           ;io.c: 478: break;
  9968  001D2A  0012               	return	
  9969  001D2C                     l1004:
  9970                           
  9971                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
  9972  001D2C  0E00               	movlw	0
  9973  001D2E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9974  001D30  0E2C               	movlw	44
  9975  001D32  6E19               	movwf	SETxAPIxVAL@index,c
  9976  001D34  0E00               	movlw	0
  9977  001D36  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9978  001D38  0E00               	movlw	0
  9979  001D3A  6E1B               	movwf	SETxAPIxVAL@value,c
  9980  001D3C  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
  9981                           
  9982                           ;io.c: 484: }
  9983                           
  9984                           ;io.c: 483: default : break;
  9985                           
  9986                           ;io.c: 481: break;
  9987  001D40  0012               	return	
  9988  001D42                     l998:
  9989  001D42  A084               	btfss	3972,0,c	;volatile
  9990  001D44  D002               	goto	u7870
  9991  001D46  0E01               	movlw	1
  9992  001D48  D001               	goto	u7876
  9993  001D4A                     u7870:
  9994  001D4A  0E00               	movlw	0
  9995  001D4C                     u7876:
  9996                           
  9997                           ; Switch size 1, requested type "space"
  9998                           ; Number of cases is 2, Range of values is 0 to 1
  9999                           ; switch strategies available:
 10000                           ; Name         Instructions Cycles
 10001                           ; simple_byte            7     4 (average)
 10002                           ;	Chosen strategy is simple_byte
 10003  001D4C  0A00               	xorlw	0	; case 0
 10004  001D4E  B4D8               	btfsc	status,2,c
 10005  001D50  D7CC               	goto	l999
 10006  001D52  0A01               	xorlw	1	; case 1
 10007  001D54  A4D8               	btfss	status,2,c
 10008  001D56  0012               	return	
 10009  001D58  D7E4               	goto	l1003
 10010  001D5A                     __end_of_Debounce_Inputs:
 10011                           	opt stack 0
 10012                           tblptru	equ	0xFF8
 10013                           tblptrh	equ	0xFF7
 10014                           tblptrl	equ	0xFF6
 10015                           tablat	equ	0xFF5
 10016                           prodh	equ	0xFF4
 10017                           prodl	equ	0xFF3
 10018                           intcon	equ	0xFF2
 10019                           postinc0	equ	0xFEE
 10020                           wreg	equ	0xFE8
 10021                           postinc1	equ	0xFE6
 10022                           postdec1	equ	0xFE5
 10023                           fsr1h	equ	0xFE2
 10024                           fsr1l	equ	0xFE1
 10025                           postinc2	equ	0xFDE
 10026                           postdec2	equ	0xFDD
 10027                           fsr2h	equ	0xFDA
 10028                           fsr2l	equ	0xFD9
 10029                           status	equ	0xFD8
 10030                           
 10031 ;; *************** function _SetDCPWM1 *****************
 10032 ;; Defined at:
 10033 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic18\plib\PWM\pw1setdc.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;  dutycycle       2   20[COMRAM] unsigned int 
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;  DCycle          2   24[COMRAM] struct PWMDC
 10038 ;; Return value:  Size  Location     Type
 10039 ;;                  1    wreg      void 
 10040 ;; Registers used:
 10041 ;;		wreg, status,2, status,0
 10042 ;; Tracked objects:
 10043 ;;		On entry : 0/0
 10044 ;;		On exit  : 0/0
 10045 ;;		Unchanged: 0/0
 10046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10047 ;;      Params:         2       0       0       0       0       0       0       0       0
 10048 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10049 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10050 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10051 ;;Total ram usage:        6 bytes
 10052 ;; Hardware stack levels used:    1
 10053 ;; Hardware stack levels required when called:    3
 10054 ;; This function calls:
 10055 ;;		Nothing
 10056 ;; This function is called by:
 10057 ;;		_Debounce_Inputs
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           	psect	text18
 10062  00424A                     __ptext18:
 10063                           	opt stack 0
 10064  00424A                     _SetDCPWM1:
 10065                           	opt stack 25
 10066                           
 10067                           ;incstack = 0
 10068  00424A  C015  F017         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
 10069  00424E  C016  F018         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
 10070  004252  0E06               	movlw	6
 10071  004254                     u4075:
 10072  004254  90D8               	bcf	status,0,c
 10073  004256  3617               	rlcf	??_SetDCPWM1,f,c
 10074  004258  3618               	rlcf	??_SetDCPWM1+1,f,c
 10075  00425A  2EE8               	decfsz	wreg,f,c
 10076  00425C  D7FB               	goto	u4075
 10077  00425E  C017  F019         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
 10078  004262  C018  F01A         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
 10079  004266  C01A  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
 10080  00426A  C019  F017         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
 10081  00426E  90D8               	bcf	status,0,c
 10082  004270  3217               	rrcf	??_SetDCPWM1,f,c
 10083  004272  90D8               	bcf	status,0,c
 10084  004274  3217               	rrcf	??_SetDCPWM1,f,c
 10085  004276  0E30               	movlw	48
 10086  004278  1617               	andwf	??_SetDCPWM1,f,c
 10087  00427A  50BD               	movf	4029,w,c	;volatile
 10088  00427C  0BCF               	andlw	207
 10089  00427E  1017               	iorwf	??_SetDCPWM1,w,c
 10090  004280  6EBD               	movwf	4029,c	;volatile
 10091  004282  0012               	return		;funcret
 10092  004284                     __end_of_SetDCPWM1:
 10093                           	opt stack 0
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           postinc0	equ	0xFEE
 10102                           wreg	equ	0xFE8
 10103                           postinc1	equ	0xFE6
 10104                           postdec1	equ	0xFE5
 10105                           fsr1h	equ	0xFE2
 10106                           fsr1l	equ	0xFE1
 10107                           postinc2	equ	0xFDE
 10108                           postdec2	equ	0xFDD
 10109                           fsr2h	equ	0xFDA
 10110                           fsr2l	equ	0xFD9
 10111                           status	equ	0xFD8
 10112                           
 10113 ;; *************** function _READxRECEIVEDxMESSAGE *****************
 10114 ;; Defined at:
 10115 ;;		line 39 in file "../terminal.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;		None
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      void 
 10122 ;; Registers used:
 10123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10129 ;;      Params:         0       0       0       0       0       0       0       0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10131 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10132 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10133 ;;Total ram usage:        4 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    6
 10136 ;; This function calls:
 10137 ;;		_EUSART1_Read
 10138 ;;		_TranslateMessage
 10139 ;;		_printf
 10140 ;; This function is called by:
 10141 ;;		_main
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text19
 10146  00378A                     __ptext19:
 10147                           	opt stack 0
 10148  00378A                     _READxRECEIVEDxMESSAGE:
 10149                           	opt stack 24
 10150                           
 10151                           ;terminal.c: 41: if ((eusart1RxCount) > 0){
 10152                           
 10153                           ;incstack = 0
 10154  00378A  503F               	movf	_eusart1RxCount,w,c	;volatile
 10155  00378C  B4D8               	btfsc	status,2,c
 10156  00378E  D07B               	goto	l610
 10157                           
 10158                           ;terminal.c: 44: Received_Data = EUSART1_Read();
 10159  003790  EC42  F021         	call	_EUSART1_Read	;wreg free
 10160  003794  0100               	movlb	0	; () banked
 10161  003796  6F88               	movwf	_Received_Data& (0+255),b
 10162                           
 10163                           ;terminal.c: 46: switch (RxSwitch){
 10164  003798  D06B               	goto	l604
 10165  00379A                     
 10166                           ; BSR set to: 0
 10167                           ;terminal.c: 48: pData = &Data[0];
 10168                           
 10169                           ; BSR set to: 0
 10170  00379A  0EB0               	movlw	low _Data
 10171  00379C  6F7C               	movwf	_pData& (0+255),b
 10172  00379E  0E00               	movlw	high _Data
 10173  0037A0  6F7D               	movwf	(_pData+1)& (0+255),b
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;terminal.c: 49: pLen = &Data[DataLen - 1];
 10177  0037A2  0EFF               	movlw	255
 10178  0037A4  6FDC               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
 10179  0037A6  0EFF               	movlw	255
 10180  0037A8  6FDD               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
 10181  0037AA  0E43               	movlw	low _DataLen
 10182  0037AC  6EF6               	movwf	tblptrl,c
 10183  0037AE                     	if	1	;There is more than 1 active tblptr byte
 10184  0037AE  0E08               	movlw	high _DataLen
 10185  0037B0  6EF7               	movwf	tblptrh,c
 10186  0037B2                     	endif
 10187  0037B2                     	if	0	;There are less than 3 active tblptr bytes
 10188  0037B2                     	endif
 10189  0037B2  0008               	tblrd		*
 10190  0037B4  50F5               	movf	tablat,w,c
 10191  0037B6  6FDE               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
 10192  0037B8  6BDF               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
 10193  0037BA  51DC               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
 10194  0037BC  27DE               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
 10195  0037BE  51DD               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
 10196  0037C0  23DF               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
 10197  0037C2  0EB0               	movlw	low _Data
 10198  0037C4  25DE               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
 10199  0037C6  6F7A               	movwf	_pLen& (0+255),b
 10200  0037C8  0E00               	movlw	high _Data
 10201  0037CA  21DF               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
 10202  0037CC  6F7B               	movwf	(_pLen+1)& (0+255),b
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;terminal.c: 50: if (Received_Data == 's' || Received_Data == 'g'){
 10206  0037CE  0E73               	movlw	115
 10207  0037D0  1988               	xorwf	_Received_Data& (0+255),w,b
 10208  0037D2  B4D8               	btfsc	status,2,c
 10209  0037D4  D004               	goto	u9270
 10210                           
 10211                           ; BSR set to: 0
 10212  0037D6  0E67               	movlw	103
 10213  0037D8  1988               	xorwf	_Received_Data& (0+255),w,b
 10214  0037DA  A4D8               	btfss	status,2,c
 10215  0037DC  D00A               	goto	l606
 10216  0037DE                     u9270:
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;terminal.c: 51: *pData = Received_Data;
 10220                           
 10221                           ; BSR set to: 0
 10222  0037DE  C07C  FFD9         	movff	_pData,fsr2l
 10223  0037E2  C07D  FFDA         	movff	_pData+1,fsr2h
 10224  0037E6  C088  FFDF         	movff	_Received_Data,indf2
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;terminal.c: 52: *pData++;
 10228  0037EA  4B7C               	infsnz	_pData& (0+255),f,b
 10229  0037EC  2B7D               	incf	(_pData+1)& (0+255),f,b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;terminal.c: 53: RxSwitch = 1;
 10233  0037EE  0E01               	movlw	1
 10234  0037F0  D03D               	goto	L93
 10235  0037F2                     l606:
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;terminal.c: 55: else{
 10239                           ;terminal.c: 56: RxSwitch = 0;
 10240                           
 10241                           ; BSR set to: 0
 10242  0037F2  0E00               	movlw	0
 10243  0037F4  D03B               	goto	L93
 10244  0037F6                     
 10245                           ; BSR set to: 0
 10246                           ;terminal.c: 61: if (Received_Data == 'x'){
 10247                           
 10248                           ; BSR set to: 0
 10249  0037F6  0E78               	movlw	120
 10250  0037F8  1988               	xorwf	_Received_Data& (0+255),w,b
 10251  0037FA  A4D8               	btfss	status,2,c
 10252  0037FC  D7FA               	goto	l606
 10253                           
 10254                           ; BSR set to: 0
 10255                           ;terminal.c: 62: *pData = Received_Data;
 10256  0037FE  C07C  FFD9         	movff	_pData,fsr2l
 10257  003802  C07D  FFDA         	movff	_pData+1,fsr2h
 10258  003806  C088  FFDF         	movff	_Received_Data,indf2
 10259  00380A  D02D               	goto	l620
 10260  00380C                     
 10261                           ; BSR set to: 0
 10262                           ;terminal.c: 72: if (Received_Data == 'G'){
 10263                           
 10264                           ; BSR set to: 0
 10265  00380C  0E47               	movlw	71
 10266  00380E  1988               	xorwf	_Received_Data& (0+255),w,b
 10267  003810  B4D8               	btfsc	status,2,c
 10268  003812  D009               	goto	l616
 10269  003814  D013               	goto	l615
 10270  003816                     
 10271                           ; BSR set to: 0
 10272                           ;terminal.c: 76: *pData = '\0';
 10273                           
 10274                           ; BSR set to: 0
 10275  003816  C07C  FFD9         	movff	_pData,fsr2l
 10276  00381A  C07D  FFDA         	movff	_pData+1,fsr2h
 10277  00381E  0E00               	movlw	0
 10278  003820  6EDF               	movwf	indf2,c
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;terminal.c: 77: pData++;
 10282  003822  4B7C               	infsnz	_pData& (0+255),f,b
 10283  003824  2B7D               	incf	(_pData+1)& (0+255),f,b
 10284  003826                     l616:
 10285                           
 10286                           ; BSR set to: 0
 10287                           
 10288                           ; BSR set to: 0
 10289  003826  517A               	movf	_pLen& (0+255),w,b
 10290  003828  5D7C               	subwf	_pData& (0+255),w,b
 10291  00382A  517B               	movf	(_pLen+1)& (0+255),w,b
 10292  00382C  597D               	subwfb	(_pData+1)& (0+255),w,b
 10293  00382E  A0D8               	btfss	status,0,c
 10294  003830  D7F2               	goto	l617
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;terminal.c: 78: }
 10298                           ;terminal.c: 80: RxSwitch = 3;
 10299                           
 10300                           ; BSR set to: 0
 10301  003832  0E03               	movlw	3
 10302  003834  6F87               	movwf	_RxSwitch& (0+255),b
 10303                           
 10304                           ;terminal.c: 81: Message_To_Translate = 1;
 10305  003836  0E01               	movlw	1
 10306  003838  6F86               	movwf	_Message_To_Translate& (0+255),b
 10307                           
 10308                           ;terminal.c: 82: }
 10309  00383A  D025               	goto	l610
 10310  00383C                     l615:
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;terminal.c: 83: else{
 10314                           ;terminal.c: 84: *pData = Received_Data;
 10315                           
 10316                           ; BSR set to: 0
 10317  00383C  C07C  FFD9         	movff	_pData,fsr2l
 10318  003840  C07D  FFDA         	movff	_pData+1,fsr2h
 10319  003844  C088  FFDF         	movff	_Received_Data,indf2
 10320                           
 10321                           ; BSR set to: 0
 10322                           ;terminal.c: 85: if (pData > pLen){
 10323  003848  517C               	movf	_pData& (0+255),w,b
 10324  00384A  5D7A               	subwf	_pLen& (0+255),w,b
 10325  00384C  517D               	movf	(_pData+1)& (0+255),w,b
 10326  00384E  597B               	subwfb	(_pLen+1)& (0+255),w,b
 10327  003850  B0D8               	btfsc	status,0,c
 10328  003852  D009               	goto	l620
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;terminal.c: 86: printf("E#10\r\n");
 10332  003854  0E4E               	movlw	low STR_1
 10333  003856  6FCF               	movwf	printf@f& (0+255),b
 10334  003858  0E08               	movlw	high STR_1
 10335  00385A  6FD0               	movwf	(printf@f+1)& (0+255),b
 10336  00385C  EC1C  F01A         	call	_printf	;wreg free
 10337                           
 10338                           ;terminal.c: 87: RxSwitch = 0;
 10339  003860  0E00               	movlw	0
 10340  003862  0100               	movlb	0	; () banked
 10341  003864  D003               	goto	L93
 10342  003866                     l620:
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;terminal.c: 89: else{
 10346                           ;terminal.c: 90: pData++;
 10347                           
 10348                           ; BSR set to: 0
 10349  003866  4B7C               	infsnz	_pData& (0+255),f,b
 10350  003868  2B7D               	incf	(_pData+1)& (0+255),f,b
 10351                           
 10352                           ; BSR set to: 0
 10353                           ;terminal.c: 91: RxSwitch = 2;
 10354  00386A  0E02               	movlw	2
 10355  00386C                     L93:
 10356  00386C  6F87               	movwf	_RxSwitch& (0+255),b
 10357                           
 10358                           ; BSR set to: 0
 10359                           ;terminal.c: 101: }
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;terminal.c: 100: break;
 10363                           
 10364                           ;terminal.c: 99: default :
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;terminal.c: 97: break;
 10368                           
 10369                           ;terminal.c: 96: case 3 :
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;terminal.c: 92: }
 10373                           ;terminal.c: 93: }
 10374                           ;terminal.c: 94: break;
 10375                           
 10376                           ; BSR set to: 0
 10377  00386E  D00B               	goto	l610
 10378  003870                     l604:
 10379                           
 10380                           ; BSR set to: 0
 10381                           
 10382                           ; BSR set to: 0
 10383  003870  5187               	movf	_RxSwitch& (0+255),w,b
 10384                           
 10385                           ; Switch size 1, requested type "space"
 10386                           ; Number of cases is 4, Range of values is 0 to 3
 10387                           ; switch strategies available:
 10388                           ; Name         Instructions Cycles
 10389                           ; simple_byte           13     7 (average)
 10390                           ;	Chosen strategy is simple_byte
 10391  003872  0A00               	xorlw	0	; case 0
 10392  003874  B4D8               	btfsc	status,2,c
 10393  003876  D791               	goto	l605
 10394  003878  0A01               	xorlw	1	; case 1
 10395  00387A  B4D8               	btfsc	status,2,c
 10396  00387C  D7BC               	goto	l611
 10397  00387E  0A03               	xorlw	3	; case 2
 10398  003880  B4D8               	btfsc	status,2,c
 10399  003882  D7C4               	goto	l614
 10400  003884  0A01               	xorlw	1	; case 3
 10401  003886                     l610:
 10402                           
 10403                           ;terminal.c: 102: }
 10404                           ;terminal.c: 104: if (Message_To_Translate == 1){
 10405                           
 10406                           ; BSR set to: 0
 10407                           
 10408                           ; BSR set to: 0
 10409  003886  0100               	movlb	0	; () banked
 10410  003888  0586               	decf	_Message_To_Translate& (0+255),w,b
 10411  00388A  A4D8               	btfss	status,2,c
 10412  00388C  0012               	return	
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;terminal.c: 105: TranslateMessage();
 10416  00388E  ECF6  F016         	call	_TranslateMessage	;wreg free
 10417                           
 10418                           ;terminal.c: 106: Message_To_Translate = 0;
 10419  003892  0E00               	movlw	0
 10420  003894  0100               	movlb	0	; () banked
 10421  003896  6F86               	movwf	_Message_To_Translate& (0+255),b
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;terminal.c: 107: RxSwitch = 0;
 10425  003898  0E00               	movlw	0
 10426  00389A  6F87               	movwf	_RxSwitch& (0+255),b
 10427  00389C  0012               	return	
 10428  00389E                     __end_of_READxRECEIVEDxMESSAGE:
 10429                           	opt stack 0
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           intcon	equ	0xFF2
 10437                           postinc0	equ	0xFEE
 10438                           wreg	equ	0xFE8
 10439                           postinc1	equ	0xFE6
 10440                           postdec1	equ	0xFE5
 10441                           fsr1h	equ	0xFE2
 10442                           fsr1l	equ	0xFE1
 10443                           indf2	equ	0xFDF
 10444                           postinc2	equ	0xFDE
 10445                           postdec2	equ	0xFDD
 10446                           fsr2h	equ	0xFDA
 10447                           fsr2l	equ	0xFD9
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _TranslateMessage *****************
 10451 ;; Defined at:
 10452 ;;		line 125 in file "../terminal.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  Index           2   33[COMRAM] unsigned int 
 10457 ;;  Value           2   31[COMRAM] unsigned int 
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      void 
 10460 ;; Registers used:
 10461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10467 ;;      Params:         0       0       0       0       0       0       0       0       0
 10468 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10470 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10471 ;;Total ram usage:        4 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    5
 10474 ;; This function calls:
 10475 ;;		_GETxAPIxRW
 10476 ;;		_GETxAPIxVAL
 10477 ;;		_SENDxMESSAGE
 10478 ;;		_SETxAPIxVALxNoxRET
 10479 ;;		_atoi
 10480 ;;		_printf
 10481 ;; This function is called by:
 10482 ;;		_READxRECEIVEDxMESSAGE
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486                           	psect	text20
 10487  002DEC                     __ptext20:
 10488                           	opt stack 0
 10489  002DEC                     _TranslateMessage:
 10490                           	opt stack 24
 10491                           
 10492                           ;terminal.c: 127: unsigned int Value, Index;
 10493                           ;terminal.c: 129: if(Data[0] == 's'){
 10494                           
 10495                           ; BSR set to: 0
 10496                           ;incstack = 0
 10497  002DEC  0E73               	movlw	115
 10498  002DEE  0100               	movlb	0	; () banked
 10499  002DF0  19B0               	xorwf	_Data& (0+255),w,b
 10500  002DF2  A4D8               	btfss	status,2,c
 10501  002DF4  D063               	goto	l628
 10502                           
 10503                           ; BSR set to: 0
 10504                           ;terminal.c: 131: pData = &Data[2];
 10505  002DF6  0EB2               	movlw	low (_Data+2)
 10506  002DF8  6F7C               	movwf	_pData& (0+255),b
 10507  002DFA  0E00               	movlw	high (_Data+2)
 10508  002DFC  6F7D               	movwf	(_pData+1)& (0+255),b
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;terminal.c: 132: Index = (unsigned int)atoi (pData);
 10512  002DFE  C07C  F019         	movff	_pData,atoi@s
 10513  002E02  C07D  F01A         	movff	_pData+1,atoi@s+1
 10514  002E06  EC39  F01E         	call	_atoi	;wreg free
 10515  002E0A  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10516  002E0E  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10517                           
 10518                           ;terminal.c: 133: pData = &Data[5];
 10519  002E12  0EB5               	movlw	low (_Data+5)
 10520  002E14  0100               	movlb	0	; () banked
 10521  002E16  6F7C               	movwf	_pData& (0+255),b
 10522  002E18  0E00               	movlw	high (_Data+5)
 10523  002E1A  6F7D               	movwf	(_pData+1)& (0+255),b
 10524                           
 10525                           ;terminal.c: 134: Value = (unsigned int)atoi (pData);
 10526  002E1C  C07C  F019         	movff	_pData,atoi@s
 10527  002E20  C07D  F01A         	movff	_pData+1,atoi@s+1
 10528  002E24  EC39  F01E         	call	_atoi	;wreg free
 10529  002E28  C019  F020         	movff	?_atoi,TranslateMessage@Value
 10530  002E2C  C01A  F021         	movff	?_atoi+1,TranslateMessage@Value+1
 10531                           
 10532                           ;terminal.c: 136: if (GETxAPIxRW(Index) == 0){
 10533  002E30  C022  F013         	movff	TranslateMessage@Index,GETxAPIxRW@index
 10534  002E34  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxRW@index+1
 10535  002E38  ECDD  F021         	call	_GETxAPIxRW	;wreg free
 10536  002E3C  5013               	movf	?_GETxAPIxRW,w,c
 10537  002E3E  1014               	iorwf	?_GETxAPIxRW+1,w,c
 10538  002E40  A4D8               	btfss	status,2,c
 10539  002E42  D008               	goto	l629
 10540                           
 10541                           ;terminal.c: 137: printf("E#11\r\n");
 10542  002E44  0E55               	movlw	low STR_2
 10543  002E46  0100               	movlb	0	; () banked
 10544  002E48  6FCF               	movwf	printf@f& (0+255),b
 10545  002E4A  0E08               	movlw	high STR_2
 10546  002E4C  6FD0               	movwf	(printf@f+1)& (0+255),b
 10547  002E4E  EC1C  F01A         	call	_printf	;wreg free
 10548                           
 10549                           ;terminal.c: 138: }
 10550  002E52  0012               	return	
 10551  002E54                     l629:
 10552                           
 10553                           ;terminal.c: 139: else if (Index < 0xF){
 10554  002E54  5023               	movf	TranslateMessage@Index+1,w,c
 10555  002E56  E10C               	bnz	l8818
 10556  002E58  0E0F               	movlw	15
 10557  002E5A  5C22               	subwf	TranslateMessage@Index,w,c
 10558  002E5C  B0D8               	btfsc	status,0,c
 10559  002E5E  D008               	goto	l631
 10560                           
 10561                           ;terminal.c: 140: printf("E#12\r\n");
 10562  002E60  0E5C               	movlw	low STR_3
 10563  002E62  0100               	movlb	0	; () banked
 10564  002E64  6FCF               	movwf	printf@f& (0+255),b
 10565  002E66  0E08               	movlw	high STR_3
 10566  002E68  6FD0               	movwf	(printf@f+1)& (0+255),b
 10567  002E6A  EC1C  F01A         	call	_printf	;wreg free
 10568                           
 10569                           ;terminal.c: 141: }
 10570  002E6E  0012               	return	
 10571  002E70                     l631:
 10572  002E70                     l8818:
 10573                           
 10574                           ;terminal.c: 142: else if (Index > 89){
 10575  002E70  5023               	movf	TranslateMessage@Index+1,w,c
 10576  002E72  E104               	bnz	u8350
 10577  002E74  0E5A               	movlw	90
 10578  002E76  5C22               	subwf	TranslateMessage@Index,w,c
 10579  002E78  A0D8               	btfss	status,0,c
 10580  002E7A  D008               	goto	l633
 10581  002E7C                     u8350:
 10582                           
 10583                           ;terminal.c: 143: printf("E#13\r\n");
 10584  002E7C  0E63               	movlw	low STR_4
 10585  002E7E  0100               	movlb	0	; () banked
 10586  002E80  6FCF               	movwf	printf@f& (0+255),b
 10587  002E82  0E08               	movlw	high STR_4
 10588  002E84  6FD0               	movwf	(printf@f+1)& (0+255),b
 10589  002E86  EC1C  F01A         	call	_printf	;wreg free
 10590                           
 10591                           ;terminal.c: 144: }
 10592  002E8A  0012               	return	
 10593  002E8C                     l633:
 10594                           
 10595                           ;terminal.c: 145: else if (Value > 0xFFFE){
 10596  002E8C  2820               	incf	TranslateMessage@Value,w,c
 10597  002E8E  E10B               	bnz	l8826
 10598  002E90  2821               	incf	TranslateMessage@Value+1,w,c
 10599  002E92  A4D8               	btfss	status,2,c
 10600  002E94  D008               	goto	l635
 10601                           
 10602                           ;terminal.c: 146: printf("E#14\r\n");
 10603  002E96  0E6A               	movlw	low STR_5
 10604  002E98  0100               	movlb	0	; () banked
 10605  002E9A  6FCF               	movwf	printf@f& (0+255),b
 10606  002E9C  0E08               	movlw	high STR_5
 10607  002E9E  6FD0               	movwf	(printf@f+1)& (0+255),b
 10608  002EA0  EC1C  F01A         	call	_printf	;wreg free
 10609                           
 10610                           ;terminal.c: 147: }
 10611  002EA4  0012               	return	
 10612  002EA6                     l635:
 10613  002EA6                     l8826:
 10614                           
 10615                           ;terminal.c: 148: else{
 10616                           ;terminal.c: 149: SETxAPIxVALxNoxRET(Index, Value);
 10617  002EA6  C022  F015         	movff	TranslateMessage@Index,SETxAPIxVALxNoxRET@index
 10618  002EAA  C023  F016         	movff	TranslateMessage@Index+1,SETxAPIxVALxNoxRET@index+1
 10619  002EAE  C020  F017         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 10620  002EB2  C021  F018         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 10621  002EB6  EC07  F021         	call	_SETxAPIxVALxNoxRET	;wreg free
 10622                           
 10623                           ;terminal.c: 150: }
 10624                           ;terminal.c: 151: }
 10625  002EBA  0012               	return	
 10626  002EBC                     l628:
 10627                           
 10628                           ;terminal.c: 153: else if (Data[0] == 'g'){
 10629  002EBC  0E67               	movlw	103
 10630  002EBE  0100               	movlb	0	; () banked
 10631  002EC0  19B0               	xorwf	_Data& (0+255),w,b
 10632  002EC2  A4D8               	btfss	status,2,c
 10633  002EC4  0012               	return	
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;terminal.c: 155: pData = &Data[2];
 10637  002EC6  0EB2               	movlw	low (_Data+2)
 10638  002EC8  6F7C               	movwf	_pData& (0+255),b
 10639  002ECA  0E00               	movlw	high (_Data+2)
 10640  002ECC  6F7D               	movwf	(_pData+1)& (0+255),b
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;terminal.c: 156: Index = (unsigned int)atoi (pData);
 10644  002ECE  C07C  F019         	movff	_pData,atoi@s
 10645  002ED2  C07D  F01A         	movff	_pData+1,atoi@s+1
 10646  002ED6  EC39  F01E         	call	_atoi	;wreg free
 10647  002EDA  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10648  002EDE  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10649                           
 10650                           ;terminal.c: 158: if (Index < 0xF){
 10651  002EE2  5023               	movf	TranslateMessage@Index+1,w,c
 10652  002EE4  E10C               	bnz	l8838
 10653  002EE6  0E0F               	movlw	15
 10654  002EE8  5C22               	subwf	TranslateMessage@Index,w,c
 10655  002EEA  B0D8               	btfsc	status,0,c
 10656  002EEC  D008               	goto	l639
 10657                           
 10658                           ;terminal.c: 159: printf("E#12\r\n");
 10659  002EEE  0E5C               	movlw	low STR_3
 10660  002EF0  0100               	movlb	0	; () banked
 10661  002EF2  6FCF               	movwf	printf@f& (0+255),b
 10662  002EF4  0E08               	movlw	high STR_3
 10663  002EF6  6FD0               	movwf	(printf@f+1)& (0+255),b
 10664  002EF8  EC1C  F01A         	call	_printf	;wreg free
 10665                           
 10666                           ;terminal.c: 160: }
 10667  002EFC  0012               	return	
 10668  002EFE                     l639:
 10669  002EFE                     l8838:
 10670                           
 10671                           ;terminal.c: 161: else if (Index > 89){
 10672  002EFE  5023               	movf	TranslateMessage@Index+1,w,c
 10673  002F00  E104               	bnz	u8390
 10674  002F02  0E5A               	movlw	90
 10675  002F04  5C22               	subwf	TranslateMessage@Index,w,c
 10676  002F06  A0D8               	btfss	status,0,c
 10677  002F08  D008               	goto	l641
 10678  002F0A                     u8390:
 10679                           
 10680                           ;terminal.c: 162: printf("E#13\r\n");
 10681  002F0A  0E63               	movlw	low STR_4
 10682  002F0C  0100               	movlb	0	; () banked
 10683  002F0E  6FCF               	movwf	printf@f& (0+255),b
 10684  002F10  0E08               	movlw	high STR_4
 10685  002F12  6FD0               	movwf	(printf@f+1)& (0+255),b
 10686  002F14  EC1C  F01A         	call	_printf	;wreg free
 10687                           
 10688                           ;terminal.c: 163: }
 10689  002F18  0012               	return	
 10690  002F1A                     l641:
 10691                           
 10692                           ;terminal.c: 164: else{
 10693                           ;terminal.c: 165: Value = GETxAPIxVAL(Index);
 10694  002F1A  C022  F013         	movff	TranslateMessage@Index,GETxAPIxVAL@index
 10695  002F1E  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxVAL@index+1
 10696  002F22  ECCF  F021         	call	_GETxAPIxVAL	;wreg free
 10697  002F26  C013  F020         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10698  002F2A  C014  F021         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10699                           
 10700                           ;terminal.c: 166: SENDxMESSAGE(Index, Value);
 10701  002F2E  C022  F013         	movff	TranslateMessage@Index,SENDxMESSAGE@index
 10702  002F32  C023  F014         	movff	TranslateMessage@Index+1,SENDxMESSAGE@index+1
 10703  002F36  C020  F015         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10704  002F3A  C021  F016         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10705  002F3E  EC35  F014         	call	_SENDxMESSAGE	;wreg free
 10706  002F42  0012               	return	
 10707  002F44                     __end_of_TranslateMessage:
 10708                           	opt stack 0
 10709                           tblptru	equ	0xFF8
 10710                           tblptrh	equ	0xFF7
 10711                           tblptrl	equ	0xFF6
 10712                           tablat	equ	0xFF5
 10713                           prodh	equ	0xFF4
 10714                           prodl	equ	0xFF3
 10715                           intcon	equ	0xFF2
 10716                           postinc0	equ	0xFEE
 10717                           wreg	equ	0xFE8
 10718                           postinc1	equ	0xFE6
 10719                           postdec1	equ	0xFE5
 10720                           fsr1h	equ	0xFE2
 10721                           fsr1l	equ	0xFE1
 10722                           indf2	equ	0xFDF
 10723                           postinc2	equ	0xFDE
 10724                           postdec2	equ	0xFDD
 10725                           fsr2h	equ	0xFDA
 10726                           fsr2l	equ	0xFD9
 10727                           status	equ	0xFD8
 10728                           
 10729 ;; *************** function _atoi *****************
 10730 ;; Defined at:
 10731 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atoi.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  s               2   24[COMRAM] PTR const unsigned char 
 10734 ;;		 -> NULL(0), Data(10), 
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;  a               2   29[COMRAM] int 
 10737 ;;  sign            1   28[COMRAM] unsigned char 
 10738 ;; Return value:  Size  Location     Type
 10739 ;;                  2   24[COMRAM] int 
 10740 ;; Registers used:
 10741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10742 ;; Tracked objects:
 10743 ;;		On entry : 0/0
 10744 ;;		On exit  : 0/0
 10745 ;;		Unchanged: 0/0
 10746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10747 ;;      Params:         2       0       0       0       0       0       0       0       0
 10748 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10749 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10750 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10751 ;;Total ram usage:        7 bytes
 10752 ;; Hardware stack levels used:    1
 10753 ;; Hardware stack levels required when called:    4
 10754 ;; This function calls:
 10755 ;;		___wmul
 10756 ;;		_isdigit
 10757 ;; This function is called by:
 10758 ;;		_TranslateMessage
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           	psect	text21
 10763  003C72                     __ptext21:
 10764                           	opt stack 0
 10765  003C72                     _atoi:
 10766                           	opt stack 24
 10767                           
 10768                           ;incstack = 0
 10769  003C72  D002               	goto	l1466
 10770  003C74  4A19               	infsnz	atoi@s,f,c
 10771  003C76  2A1A               	incf	atoi@s+1,f,c
 10772  003C78                     l1466:
 10773  003C78  C019  FFD9         	movff	atoi@s,fsr2l
 10774  003C7C  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10775  003C80  0E20               	movlw	32
 10776  003C82  18DE               	xorwf	postinc2,w,c
 10777  003C84  B4D8               	btfsc	status,2,c
 10778  003C86  D7F6               	goto	l1467
 10779  003C88  C019  FFD9         	movff	atoi@s,fsr2l
 10780  003C8C  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10781  003C90  0E09               	movlw	9
 10782  003C92  18DE               	xorwf	postinc2,w,c
 10783  003C94  B4D8               	btfsc	status,2,c
 10784  003C96  D7EE               	goto	l1467
 10785  003C98  0E00               	movlw	0
 10786  003C9A  6E1F               	movwf	atoi@a+1,c
 10787  003C9C  0E00               	movlw	0
 10788  003C9E  6E1E               	movwf	atoi@a,c
 10789  003CA0  0E00               	movlw	0
 10790  003CA2  6E1D               	movwf	atoi@sign,c
 10791  003CA4  C019  FFD9         	movff	atoi@s,fsr2l
 10792  003CA8  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10793  003CAC  0E2D               	movlw	45
 10794  003CAE  18DE               	xorwf	postinc2,w,c
 10795  003CB0  A4D8               	btfss	status,2,c
 10796  003CB2  D002               	goto	l1469
 10797  003CB4  2A1D               	incf	atoi@sign,f,c
 10798  003CB6  D024               	goto	l8186
 10799  003CB8                     l1469:
 10800  003CB8  C019  FFD9         	movff	atoi@s,fsr2l
 10801  003CBC  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10802  003CC0  0E2B               	movlw	43
 10803  003CC2  18DE               	xorwf	postinc2,w,c
 10804  003CC4  A4D8               	btfss	status,2,c
 10805  003CC6  D01E               	goto	l1472
 10806  003CC8  D01B               	goto	l8186
 10807  003CCA  C01E  F013         	movff	atoi@a,___wmul@multiplier
 10808  003CCE  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
 10809  003CD2  0E00               	movlw	0
 10810  003CD4  6E16               	movwf	___wmul@multiplicand+1,c
 10811  003CD6  0E0A               	movlw	10
 10812  003CD8  6E15               	movwf	___wmul@multiplicand,c
 10813  003CDA  EC9D  F021         	call	___wmul	;wreg free
 10814  003CDE  C019  FFD9         	movff	atoi@s,fsr2l
 10815  003CE2  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10816  003CE6  50DF               	movf	indf2,w,c
 10817  003CE8  6E1B               	movwf	??_atoi& (0+255),c
 10818  003CEA  6A1C               	clrf	(??_atoi+1)& (0+255),c
 10819  003CEC  5013               	movf	?___wmul,w,c
 10820  003CEE  261B               	addwf	??_atoi,f,c
 10821  003CF0  5014               	movf	?___wmul+1,w,c
 10822  003CF2  221C               	addwfc	??_atoi+1,f,c
 10823  003CF4  0ED0               	movlw	208
 10824  003CF6  241B               	addwf	??_atoi,w,c
 10825  003CF8  6E1E               	movwf	atoi@a,c
 10826  003CFA  0EFF               	movlw	255
 10827  003CFC  201C               	addwfc	??_atoi+1,w,c
 10828  003CFE  6E1F               	movwf	atoi@a+1,c
 10829  003D00                     l8186:
 10830  003D00  4A19               	infsnz	atoi@s,f,c
 10831  003D02  2A1A               	incf	atoi@s+1,f,c
 10832  003D04                     l1472:
 10833  003D04  C019  FFD9         	movff	atoi@s,fsr2l
 10834  003D08  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10835  003D0C  50DF               	movf	indf2,w,c
 10836  003D0E  ECC0  F021         	call	_isdigit
 10837  003D12  B0D8               	btfsc	status,0,c
 10838  003D14  D7DA               	goto	l1473
 10839  003D16  501D               	movf	atoi@sign,w,c
 10840  003D18  B4D8               	btfsc	status,2,c
 10841  003D1A  D00D               	goto	l1475
 10842  003D1C  C01E  F01B         	movff	atoi@a,??_atoi
 10843  003D20  C01F  F01C         	movff	atoi@a+1,??_atoi+1
 10844  003D24  1E1B               	comf	??_atoi,f,c
 10845  003D26  1E1C               	comf	??_atoi+1,f,c
 10846  003D28  4A1B               	infsnz	??_atoi,f,c
 10847  003D2A  2A1C               	incf	??_atoi+1,f,c
 10848  003D2C  C01B  F019         	movff	??_atoi,?_atoi
 10849  003D30  C01C  F01A         	movff	??_atoi+1,?_atoi+1
 10850  003D34  0012               	return	
 10851  003D36                     l1475:
 10852  003D36  C01E  F019         	movff	atoi@a,?_atoi
 10853  003D3A  C01F  F01A         	movff	atoi@a+1,?_atoi+1
 10854  003D3E  0012               	return		;funcret
 10855  003D40                     __end_of_atoi:
 10856                           	opt stack 0
 10857                           tblptru	equ	0xFF8
 10858                           tblptrh	equ	0xFF7
 10859                           tblptrl	equ	0xFF6
 10860                           tablat	equ	0xFF5
 10861                           prodh	equ	0xFF4
 10862                           prodl	equ	0xFF3
 10863                           intcon	equ	0xFF2
 10864                           postinc0	equ	0xFEE
 10865                           wreg	equ	0xFE8
 10866                           postinc1	equ	0xFE6
 10867                           postdec1	equ	0xFE5
 10868                           fsr1h	equ	0xFE2
 10869                           fsr1l	equ	0xFE1
 10870                           indf2	equ	0xFDF
 10871                           postinc2	equ	0xFDE
 10872                           postdec2	equ	0xFDD
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _isdigit *****************
 10878 ;; Defined at:
 10879 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;  c               1    wreg     unsigned char 
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;  c               1   20[COMRAM] unsigned char 
 10884 ;; Return value:  Size  Location     Type
 10885 ;;		None               void
 10886 ;; Registers used:
 10887 ;;		wreg, status,2, status,0
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10893 ;;      Params:         0       0       0       0       0       0       0       0       0
 10894 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10895 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10896 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10897 ;;Total ram usage:        3 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:    3
 10900 ;; This function calls:
 10901 ;;		Nothing
 10902 ;; This function is called by:
 10903 ;;		_atoi
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           	psect	text22
 10908  004380                     __ptext22:
 10909                           	opt stack 0
 10910  004380                     _isdigit:
 10911                           	opt stack 24
 10912                           
 10913                           ;incstack = 0
 10914                           ;isdigit@c stored from wreg
 10915  004380  6E15               	movwf	isdigit@c,c
 10916  004382  0E00               	movlw	0
 10917  004384  6E14               	movwf	_isdigit$1841,c
 10918  004386  0E3A               	movlw	58
 10919  004388  6015               	cpfslt	isdigit@c,c
 10920  00438A  D005               	goto	l1647
 10921  00438C  0E2F               	movlw	47
 10922  00438E  6415               	cpfsgt	isdigit@c,c
 10923  004390  D002               	goto	l1647
 10924  004392  0E01               	movlw	1
 10925  004394  6E14               	movwf	_isdigit$1841,c
 10926  004396                     l1647:
 10927  004396  C014  F013         	movff	_isdigit$1841,??_isdigit
 10928  00439A  3013               	rrcf	??_isdigit,w,c
 10929  00439C  0012               	return	
 10930  00439E                     __end_of_isdigit:
 10931                           	opt stack 0
 10932                           tblptru	equ	0xFF8
 10933                           tblptrh	equ	0xFF7
 10934                           tblptrl	equ	0xFF6
 10935                           tablat	equ	0xFF5
 10936                           prodh	equ	0xFF4
 10937                           prodl	equ	0xFF3
 10938                           intcon	equ	0xFF2
 10939                           postinc0	equ	0xFEE
 10940                           wreg	equ	0xFE8
 10941                           postinc1	equ	0xFE6
 10942                           postdec1	equ	0xFE5
 10943                           fsr1h	equ	0xFE2
 10944                           fsr1l	equ	0xFE1
 10945                           indf2	equ	0xFDF
 10946                           postinc2	equ	0xFDE
 10947                           postdec2	equ	0xFDD
 10948                           fsr2h	equ	0xFDA
 10949                           fsr2l	equ	0xFD9
 10950                           status	equ	0xFD8
 10951                           
 10952 ;; *************** function ___wmul *****************
 10953 ;; Defined at:
 10954 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;  multiplier      2   18[COMRAM] unsigned int 
 10957 ;;  multiplicand    2   20[COMRAM] unsigned int 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  product         2   22[COMRAM] unsigned int 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;                  2   18[COMRAM] unsigned int 
 10962 ;; Registers used:
 10963 ;;		wreg, status,2, status,0, prodl, prodh
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10969 ;;      Params:         4       0       0       0       0       0       0       0       0
 10970 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10971 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10972 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10973 ;;Total ram usage:        6 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    3
 10976 ;; This function calls:
 10977 ;;		Nothing
 10978 ;; This function is called by:
 10979 ;;		_atoi
 10980 ;; This function uses a non-reentrant model
 10981 ;;
 10982                           
 10983                           	psect	text23
 10984  00433A                     __ptext23:
 10985                           	opt stack 0
 10986  00433A                     ___wmul:
 10987                           	opt stack 24
 10988                           
 10989                           ;incstack = 0
 10990  00433A  5013               	movf	___wmul@multiplier,w,c
 10991  00433C  0215               	mulwf	___wmul@multiplicand,c
 10992  00433E  CFF3 F017          	movff	prodl,___wmul@product
 10993  004342  CFF4 F018          	movff	prodh,___wmul@product+1
 10994  004346  5013               	movf	___wmul@multiplier,w,c
 10995  004348  0216               	mulwf	___wmul@multiplicand+1,c
 10996  00434A  50F3               	movf	prodl,w,c
 10997  00434C  2618               	addwf	___wmul@product+1,f,c
 10998  00434E  5014               	movf	___wmul@multiplier+1,w,c
 10999  004350  0215               	mulwf	___wmul@multiplicand,c
 11000  004352  50F3               	movf	prodl,w,c
 11001  004354  2618               	addwf	___wmul@product+1,f,c
 11002  004356  C017  F013         	movff	___wmul@product,?___wmul
 11003  00435A  C018  F014         	movff	___wmul@product+1,?___wmul+1
 11004  00435E  0012               	return	
 11005  004360                     __end_of___wmul:
 11006                           	opt stack 0
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           prodh	equ	0xFF4
 11012                           prodl	equ	0xFF3
 11013                           intcon	equ	0xFF2
 11014                           postinc0	equ	0xFEE
 11015                           wreg	equ	0xFE8
 11016                           postinc1	equ	0xFE6
 11017                           postdec1	equ	0xFE5
 11018                           fsr1h	equ	0xFE2
 11019                           fsr1l	equ	0xFE1
 11020                           indf2	equ	0xFDF
 11021                           postinc2	equ	0xFDE
 11022                           postdec2	equ	0xFDD
 11023                           fsr2h	equ	0xFDA
 11024                           fsr2l	equ	0xFD9
 11025                           status	equ	0xFD8
 11026                           
 11027 ;; *************** function _SETxAPIxVALxNoxRET *****************
 11028 ;; Defined at:
 11029 ;;		line 220 in file "../api.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;  index           2   20[COMRAM] unsigned int 
 11032 ;;  value           2   22[COMRAM] unsigned int 
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;		None
 11035 ;; Return value:  Size  Location     Type
 11036 ;;                  1    wreg      void 
 11037 ;; Registers used:
 11038 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11039 ;; Tracked objects:
 11040 ;;		On entry : 0/0
 11041 ;;		On exit  : 0/0
 11042 ;;		Unchanged: 0/0
 11043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11044 ;;      Params:         4       0       0       0       0       0       0       0       0
 11045 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11046 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11047 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11048 ;;Total ram usage:        6 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:    3
 11051 ;; This function calls:
 11052 ;;		Nothing
 11053 ;; This function is called by:
 11054 ;;		_Update_StateMchn
 11055 ;;		_TranslateMessage
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           	psect	text24
 11060  00420E                     __ptext24:
 11061                           	opt stack 0
 11062  00420E                     _SETxAPIxVALxNoxRET:
 11063                           	opt stack 26
 11064                           
 11065                           ;api.c: 221: if(API[index] != value){
 11066                           
 11067                           ;incstack = 0
 11068  00420E  90D8               	bcf	status,0,c
 11069  004210  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11070  004212  6ED9               	movwf	fsr2l,c
 11071  004214  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11072  004216  6EDA               	movwf	fsr2h,c
 11073  004218  0E00               	movlw	low _API
 11074  00421A  26D9               	addwf	fsr2l,f,c
 11075  00421C  0E01               	movlw	high _API
 11076  00421E  22DA               	addwfc	fsr2h,f,c
 11077  004220  5017               	movf	SETxAPIxVALxNoxRET@value,w,c
 11078  004222  18DE               	xorwf	postinc2,w,c
 11079  004224  E104               	bnz	u6650
 11080  004226  5018               	movf	SETxAPIxVALxNoxRET@value+1,w,c
 11081  004228  18DE               	xorwf	postinc2,w,c
 11082  00422A  B4D8               	btfsc	status,2,c
 11083  00422C  0012               	return	
 11084  00422E                     u6650:
 11085                           
 11086                           ;api.c: 222: API[index] = value;
 11087  00422E  90D8               	bcf	status,0,c
 11088  004230  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11089  004232  6ED9               	movwf	fsr2l,c
 11090  004234  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11091  004236  6EDA               	movwf	fsr2h,c
 11092  004238  0E00               	movlw	low _API
 11093  00423A  26D9               	addwf	fsr2l,f,c
 11094  00423C  0E01               	movlw	high _API
 11095  00423E  22DA               	addwfc	fsr2h,f,c
 11096  004240  C017  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 11097  004244  C018  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 11098  004248  0012               	return	
 11099  00424A                     __end_of_SETxAPIxVALxNoxRET:
 11100                           	opt stack 0
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           intcon	equ	0xFF2
 11108                           postinc0	equ	0xFEE
 11109                           wreg	equ	0xFE8
 11110                           postinc1	equ	0xFE6
 11111                           postdec1	equ	0xFE5
 11112                           fsr1h	equ	0xFE2
 11113                           fsr1l	equ	0xFE1
 11114                           indf2	equ	0xFDF
 11115                           postinc2	equ	0xFDE
 11116                           postdec2	equ	0xFDD
 11117                           fsr2h	equ	0xFDA
 11118                           fsr2l	equ	0xFD9
 11119                           status	equ	0xFD8
 11120                           
 11121 ;; *************** function _GETxAPIxVAL *****************
 11122 ;; Defined at:
 11123 ;;		line 226 in file "../api.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;  index           2   18[COMRAM] unsigned int 
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;		None
 11128 ;; Return value:  Size  Location     Type
 11129 ;;                  2   18[COMRAM] unsigned int 
 11130 ;; Registers used:
 11131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11137 ;;      Params:         2       0       0       0       0       0       0       0       0
 11138 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11139 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11140 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11141 ;;Total ram usage:        2 bytes
 11142 ;; Hardware stack levels used:    1
 11143 ;; Hardware stack levels required when called:    3
 11144 ;; This function calls:
 11145 ;;		Nothing
 11146 ;; This function is called by:
 11147 ;;		_Update_StateMchn
 11148 ;;		_Train_Path
 11149 ;;		_TranslateMessage
 11150 ;;		_Debounce_Inputs
 11151 ;;		_Junction
 11152 ;;		_Train_Move_Left_Start
 11153 ;;		_Right_Mountain_From_The_Right
 11154 ;;		_Left_Mountain_From_The_Right
 11155 ;;		_Train_Move_Left_Brake
 11156 ;;		_Train_Move_Right_Start
 11157 ;;		_Left_Mountain_From_The_Left
 11158 ;;		_Right_Mountain_From_The_Left
 11159 ;;		_Train_Move_Right_Brake
 11160 ;;		_SETxPWM
 11161 ;;		_INCRxAPIxVAL
 11162 ;;		_DECRxAPIxVAL
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text25
 11167  00439E                     __ptext25:
 11168                           	opt stack 0
 11169  00439E                     _GETxAPIxVAL:
 11170                           	opt stack 23
 11171                           
 11172                           ;api.c: 227: return API[index];
 11173                           
 11174                           ;incstack = 0
 11175  00439E  90D8               	bcf	status,0,c
 11176  0043A0  3413               	rlcf	GETxAPIxVAL@index,w,c
 11177  0043A2  6ED9               	movwf	fsr2l,c
 11178  0043A4  3414               	rlcf	GETxAPIxVAL@index+1,w,c
 11179  0043A6  6EDA               	movwf	fsr2h,c
 11180  0043A8  0E00               	movlw	low _API
 11181  0043AA  26D9               	addwf	fsr2l,f,c
 11182  0043AC  0E01               	movlw	high _API
 11183  0043AE  22DA               	addwfc	fsr2h,f,c
 11184  0043B0  CFDE F013          	movff	postinc2,?_GETxAPIxVAL
 11185  0043B4  CFDD F014          	movff	postdec2,?_GETxAPIxVAL+1
 11186  0043B8  0012               	return	
 11187  0043BA                     __end_of_GETxAPIxVAL:
 11188                           	opt stack 0
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           postinc0	equ	0xFEE
 11197                           wreg	equ	0xFE8
 11198                           postinc1	equ	0xFE6
 11199                           postdec1	equ	0xFE5
 11200                           fsr1h	equ	0xFE2
 11201                           fsr1l	equ	0xFE1
 11202                           indf2	equ	0xFDF
 11203                           postinc2	equ	0xFDE
 11204                           postdec2	equ	0xFDD
 11205                           fsr2h	equ	0xFDA
 11206                           fsr2l	equ	0xFD9
 11207                           status	equ	0xFD8
 11208                           
 11209 ;; *************** function _GETxAPIxRW *****************
 11210 ;; Defined at:
 11211 ;;		line 209 in file "../api.c"
 11212 ;; Parameters:    Size  Location     Type
 11213 ;;  index           2   18[COMRAM] unsigned int 
 11214 ;; Auto vars:     Size  Location     Type
 11215 ;;		None
 11216 ;; Return value:  Size  Location     Type
 11217 ;;                  2   18[COMRAM] unsigned int 
 11218 ;; Registers used:
 11219 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11225 ;;      Params:         2       0       0       0       0       0       0       0       0
 11226 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11227 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11228 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11229 ;;Total ram usage:        2 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    3
 11232 ;; This function calls:
 11233 ;;		Nothing
 11234 ;; This function is called by:
 11235 ;;		_TranslateMessage
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           	psect	text26
 11240  0043BA                     __ptext26:
 11241                           	opt stack 0
 11242  0043BA                     _GETxAPIxRW:
 11243                           	opt stack 25
 11244                           
 11245                           ;api.c: 210: return API_RW[index];
 11246                           
 11247                           ;incstack = 0
 11248  0043BA  90D8               	bcf	status,0,c
 11249  0043BC  3413               	rlcf	GETxAPIxRW@index,w,c
 11250  0043BE  6ED9               	movwf	fsr2l,c
 11251  0043C0  3414               	rlcf	GETxAPIxRW@index+1,w,c
 11252  0043C2  6EDA               	movwf	fsr2h,c
 11253  0043C4  0E00               	movlw	low _API_RW
 11254  0043C6  26D9               	addwf	fsr2l,f,c
 11255  0043C8  0E02               	movlw	high _API_RW
 11256  0043CA  22DA               	addwfc	fsr2h,f,c
 11257  0043CC  CFDE F013          	movff	postinc2,?_GETxAPIxRW
 11258  0043D0  CFDD F014          	movff	postdec2,?_GETxAPIxRW+1
 11259  0043D4  0012               	return	
 11260  0043D6                     __end_of_GETxAPIxRW:
 11261                           	opt stack 0
 11262                           tblptru	equ	0xFF8
 11263                           tblptrh	equ	0xFF7
 11264                           tblptrl	equ	0xFF6
 11265                           tablat	equ	0xFF5
 11266                           prodh	equ	0xFF4
 11267                           prodl	equ	0xFF3
 11268                           intcon	equ	0xFF2
 11269                           postinc0	equ	0xFEE
 11270                           wreg	equ	0xFE8
 11271                           postinc1	equ	0xFE6
 11272                           postdec1	equ	0xFE5
 11273                           fsr1h	equ	0xFE2
 11274                           fsr1l	equ	0xFE1
 11275                           indf2	equ	0xFDF
 11276                           postinc2	equ	0xFDE
 11277                           postdec2	equ	0xFDD
 11278                           fsr2h	equ	0xFDA
 11279                           fsr2l	equ	0xFD9
 11280                           status	equ	0xFD8
 11281                           
 11282 ;; *************** function _EUSART1_Read *****************
 11283 ;; Defined at:
 11284 ;;		line 143 in file "../eusart1.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;		None
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;  readValue       1   18[COMRAM] unsigned char 
 11289 ;; Return value:  Size  Location     Type
 11290 ;;                  1    wreg      unsigned char 
 11291 ;; Registers used:
 11292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11298 ;;      Params:         0       0       0       0       0       0       0       0       0
 11299 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11301 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11302 ;;Total ram usage:        1 bytes
 11303 ;; Hardware stack levels used:    1
 11304 ;; Hardware stack levels required when called:    3
 11305 ;; This function calls:
 11306 ;;		Nothing
 11307 ;; This function is called by:
 11308 ;;		_READxRECEIVEDxMESSAGE
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           	psect	text27
 11313  004284                     __ptext27:
 11314                           	opt stack 0
 11315  004284                     _EUSART1_Read:
 11316                           	opt stack 26
 11317                           
 11318                           ;eusart1.c: 144: uint8_t readValue = 0;
 11319                           
 11320                           ;incstack = 0
 11321  004284  0E00               	movlw	0
 11322  004286  6E13               	movwf	EUSART1_Read@readValue,c
 11323  004288  503F               	movf	_eusart1RxCount,w,c	;volatile
 11324  00428A  B4D8               	btfsc	status,2,c
 11325  00428C  D7FD               	goto	l523
 11326                           
 11327                           ;eusart1.c: 147: }
 11328                           ;eusart1.c: 149: PIE1bits.RC1IE = 0;
 11329  00428E  9A9D               	bcf	3997,5,c	;volatile
 11330                           
 11331                           ;eusart1.c: 151: readValue = eusart1RxBuffer[eusart1RxTail++];
 11332  004290  5040               	movf	_eusart1RxTail,w,c
 11333  004292  0D01               	mullw	1
 11334  004294  0E00               	movlw	low _eusart1RxBuffer
 11335  004296  24F3               	addwf	prodl,w,c
 11336  004298  6ED9               	movwf	fsr2l,c
 11337  00429A  0E04               	movlw	high _eusart1RxBuffer
 11338  00429C  20F4               	addwfc	prodh,w,c
 11339  00429E  6EDA               	movwf	fsr2h,c
 11340  0042A0  50DF               	movf	indf2,w,c
 11341  0042A2  6E13               	movwf	EUSART1_Read@readValue,c
 11342  0042A4  2A40               	incf	_eusart1RxTail,f,c
 11343                           
 11344                           ;eusart1.c: 152: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11345  0042A6  0E7D               	movlw	125
 11346  0042A8  6440               	cpfsgt	_eusart1RxTail,c
 11347  0042AA  D002               	goto	l525
 11348                           
 11349                           ;eusart1.c: 153: eusart1RxTail = 0;
 11350  0042AC  0E00               	movlw	0
 11351  0042AE  6E40               	movwf	_eusart1RxTail,c
 11352  0042B0                     l525:
 11353                           
 11354                           ;eusart1.c: 154: }
 11355                           ;eusart1.c: 155: eusart1RxCount--;
 11356  0042B0  063F               	decf	_eusart1RxCount,f,c	;volatile
 11357                           
 11358                           ;eusart1.c: 156: PIE1bits.RC1IE = 1;
 11359  0042B2  8A9D               	bsf	3997,5,c	;volatile
 11360                           
 11361                           ;eusart1.c: 158: return readValue;
 11362  0042B4  5013               	movf	EUSART1_Read@readValue,w,c
 11363  0042B6  0012               	return	
 11364  0042B8                     __end_of_EUSART1_Read:
 11365                           	opt stack 0
 11366                           tblptru	equ	0xFF8
 11367                           tblptrh	equ	0xFF7
 11368                           tblptrl	equ	0xFF6
 11369                           tablat	equ	0xFF5
 11370                           prodh	equ	0xFF4
 11371                           prodl	equ	0xFF3
 11372                           intcon	equ	0xFF2
 11373                           postinc0	equ	0xFEE
 11374                           wreg	equ	0xFE8
 11375                           postinc1	equ	0xFE6
 11376                           postdec1	equ	0xFE5
 11377                           fsr1h	equ	0xFE2
 11378                           fsr1l	equ	0xFE1
 11379                           indf2	equ	0xFDF
 11380                           postinc2	equ	0xFDE
 11381                           postdec2	equ	0xFDD
 11382                           fsr2h	equ	0xFDA
 11383                           fsr2l	equ	0xFD9
 11384                           status	equ	0xFD8
 11385                           
 11386 ;; *************** function _Init_Timers *****************
 11387 ;; Defined at:
 11388 ;;		line 188 in file "../Main.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;		None
 11391 ;; Auto vars:     Size  Location     Type
 11392 ;;		None
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  1    wreg      void 
 11395 ;; Registers used:
 11396 ;;		wreg, status,2
 11397 ;; Tracked objects:
 11398 ;;		On entry : 0/0
 11399 ;;		On exit  : 0/0
 11400 ;;		Unchanged: 0/0
 11401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11402 ;;      Params:         0       0       0       0       0       0       0       0       0
 11403 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11404 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11405 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11406 ;;Total ram usage:        0 bytes
 11407 ;; Hardware stack levels used:    1
 11408 ;; Hardware stack levels required when called:    3
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_main
 11413 ;; This function uses a non-reentrant model
 11414 ;;
 11415                           
 11416                           	psect	text28
 11417  0043D6                     __ptext28:
 11418                           	opt stack 0
 11419  0043D6                     _Init_Timers:
 11420                           	opt stack 27
 11421                           
 11422                           ;Main.c: 190: RCONbits.IPEN = 1;
 11423                           
 11424                           ;incstack = 0
 11425  0043D6  8ED0               	bsf	4048,7,c	;volatile
 11426                           
 11427                           ;Main.c: 191: INTCON = 0xA0;
 11428  0043D8  0EA0               	movlw	160
 11429  0043DA  6EF2               	movwf	intcon,c	;volatile
 11430                           
 11431                           ;Main.c: 192: INTCON2 = 0x84;
 11432  0043DC  0E84               	movlw	132
 11433  0043DE  6EF1               	movwf	intcon2,c	;volatile
 11434                           
 11435                           ;Main.c: 193: TMR0H = 0x0;
 11436  0043E0  0E00               	movlw	0
 11437  0043E2  6ED7               	movwf	4055,c	;volatile
 11438                           
 11439                           ;Main.c: 194: TMR0L = 0x0;
 11440  0043E4  0E00               	movlw	0
 11441  0043E6  6ED6               	movwf	4054,c	;volatile
 11442                           
 11443                           ;Main.c: 195: T0CON = 0xC3;
 11444  0043E8  0EC3               	movlw	195
 11445  0043EA  6ED5               	movwf	4053,c	;volatile
 11446  0043EC  0012               	return		;funcret
 11447  0043EE                     __end_of_Init_Timers:
 11448                           	opt stack 0
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           intcon	equ	0xFF2
 11456                           intcon2	equ	0xFF1
 11457                           postinc0	equ	0xFEE
 11458                           wreg	equ	0xFE8
 11459                           postinc1	equ	0xFE6
 11460                           postdec1	equ	0xFE5
 11461                           fsr1h	equ	0xFE2
 11462                           fsr1l	equ	0xFE1
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           postdec2	equ	0xFDD
 11466                           fsr2h	equ	0xFDA
 11467                           fsr2l	equ	0xFD9
 11468                           status	equ	0xFD8
 11469                           
 11470 ;; *************** function _Init_Pwm *****************
 11471 ;; Defined at:
 11472 ;;		line 201 in file "../Main.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;		None
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;		None
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  1    wreg      void 
 11479 ;; Registers used:
 11480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11486 ;;      Params:         0       0       0       0       0       0       0       0       0
 11487 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11488 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11489 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11490 ;;Total ram usage:        0 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    5
 11493 ;; This function calls:
 11494 ;;		_SETxAPIxVAL
 11495 ;; This function is called by:
 11496 ;;		_main
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	text29
 11501  004312                     __ptext29:
 11502                           	opt stack 0
 11503  004312                     _Init_Pwm:
 11504                           	opt stack 25
 11505                           
 11506                           ;Main.c: 204: SETxAPIxVAL(69, 1);
 11507                           
 11508                           ;incstack = 0
 11509  004312  0E00               	movlw	0
 11510  004314  6E1A               	movwf	SETxAPIxVAL@index+1,c
 11511  004316  0E45               	movlw	69
 11512  004318  6E19               	movwf	SETxAPIxVAL@index,c
 11513  00431A  0E00               	movlw	0
 11514  00431C  6E1C               	movwf	SETxAPIxVAL@value+1,c
 11515  00431E  0E01               	movlw	1
 11516  004320  6E1B               	movwf	SETxAPIxVAL@value,c
 11517  004322  EC9A  F020         	call	_SETxAPIxVAL	;wreg free
 11518                           
 11519                           ;Main.c: 205: PR2=0xFF;
 11520  004326  68CB               	setf	4043,c	;volatile
 11521                           
 11522                           ;Main.c: 206: CCPR1L = 0x7F;
 11523  004328  0E7F               	movlw	127
 11524  00432A  6EBE               	movwf	4030,c	;volatile
 11525                           
 11526                           ;Main.c: 207: CCP1CON = 0x0F;
 11527  00432C  0E0F               	movlw	15
 11528  00432E  6EBD               	movwf	4029,c	;volatile
 11529                           
 11530                           ;Main.c: 208: T2CON = 0x04;
 11531  004330  0E04               	movlw	4
 11532  004332  6ECA               	movwf	4042,c	;volatile
 11533                           
 11534                           ;Main.c: 209: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11535  004334  9494               	bcf	3988,2,c	;volatile
 11536  004336  9094               	bcf	3988,0,c	;volatile
 11537  004338  0012               	return		;funcret
 11538  00433A                     __end_of_Init_Pwm:
 11539                           	opt stack 0
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           intcon	equ	0xFF2
 11547                           intcon2	equ	0xFF1
 11548                           postinc0	equ	0xFEE
 11549                           wreg	equ	0xFE8
 11550                           postinc1	equ	0xFE6
 11551                           postdec1	equ	0xFE5
 11552                           fsr1h	equ	0xFE2
 11553                           fsr1l	equ	0xFE1
 11554                           indf2	equ	0xFDF
 11555                           postinc2	equ	0xFDE
 11556                           postdec2	equ	0xFDD
 11557                           fsr2h	equ	0xFDA
 11558                           fsr2l	equ	0xFD9
 11559                           status	equ	0xFD8
 11560                           
 11561 ;; *************** function _SETxAPIxVAL *****************
 11562 ;; Defined at:
 11563 ;;		line 213 in file "../api.c"
 11564 ;; Parameters:    Size  Location     Type
 11565 ;;  index           2   24[COMRAM] unsigned int 
 11566 ;;  value           2   26[COMRAM] unsigned int 
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;		None
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      void 
 11571 ;; Registers used:
 11572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11578 ;;      Params:         4       0       0       0       0       0       0       0       0
 11579 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11580 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11581 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11582 ;;Total ram usage:        6 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    4
 11585 ;; This function calls:
 11586 ;;		_SENDxMESSAGE
 11587 ;; This function is called by:
 11588 ;;		_Init_Pwm
 11589 ;;		_Update_StateMchn
 11590 ;;		_Train_Path
 11591 ;;		_Debounce_Inputs
 11592 ;;		_Junction
 11593 ;;		_Train_Move_Left_Start
 11594 ;;		_Train_Move_Left_Brake
 11595 ;;		_Train_Move_Right_Start
 11596 ;;		_Train_Move_Right_Brake
 11597 ;;		_SETxPWM
 11598 ;;		_INCRxAPIxVAL
 11599 ;;		_DECRxAPIxVAL
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           	psect	text30
 11604  004134                     __ptext30:
 11605                           	opt stack 0
 11606  004134                     _SETxAPIxVAL:
 11607                           	opt stack 22
 11608                           
 11609                           ;api.c: 214: if(API[index] != value){
 11610                           
 11611                           ;incstack = 0
 11612  004134  90D8               	bcf	status,0,c
 11613  004136  3419               	rlcf	SETxAPIxVAL@index,w,c
 11614  004138  6ED9               	movwf	fsr2l,c
 11615  00413A  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11616  00413C  6EDA               	movwf	fsr2h,c
 11617  00413E  0E00               	movlw	low _API
 11618  004140  26D9               	addwf	fsr2l,f,c
 11619  004142  0E01               	movlw	high _API
 11620  004144  22DA               	addwfc	fsr2h,f,c
 11621  004146  501B               	movf	SETxAPIxVAL@value,w,c
 11622  004148  18DE               	xorwf	postinc2,w,c
 11623  00414A  E104               	bnz	u6510
 11624  00414C  501C               	movf	SETxAPIxVAL@value+1,w,c
 11625  00414E  18DE               	xorwf	postinc2,w,c
 11626  004150  B4D8               	btfsc	status,2,c
 11627  004152  0012               	return	
 11628  004154                     u6510:
 11629                           
 11630                           ;api.c: 215: API[index] = value;
 11631  004154  90D8               	bcf	status,0,c
 11632  004156  3419               	rlcf	SETxAPIxVAL@index,w,c
 11633  004158  6ED9               	movwf	fsr2l,c
 11634  00415A  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11635  00415C  6EDA               	movwf	fsr2h,c
 11636  00415E  0E00               	movlw	low _API
 11637  004160  26D9               	addwf	fsr2l,f,c
 11638  004162  0E01               	movlw	high _API
 11639  004164  22DA               	addwfc	fsr2h,f,c
 11640  004166  C01B  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11641  00416A  C01C  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11642                           
 11643                           ;api.c: 216: SENDxMESSAGE(index, value);
 11644  00416E  C019  F013         	movff	SETxAPIxVAL@index,SENDxMESSAGE@index
 11645  004172  C01A  F014         	movff	SETxAPIxVAL@index+1,SENDxMESSAGE@index+1
 11646  004176  C01B  F015         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11647  00417A  C01C  F016         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11648  00417E  EC35  F014         	call	_SENDxMESSAGE	;wreg free
 11649  004182  0012               	return	
 11650  004184                     __end_of_SETxAPIxVAL:
 11651                           	opt stack 0
 11652                           tblptru	equ	0xFF8
 11653                           tblptrh	equ	0xFF7
 11654                           tblptrl	equ	0xFF6
 11655                           tablat	equ	0xFF5
 11656                           prodh	equ	0xFF4
 11657                           prodl	equ	0xFF3
 11658                           intcon	equ	0xFF2
 11659                           intcon2	equ	0xFF1
 11660                           postinc0	equ	0xFEE
 11661                           wreg	equ	0xFE8
 11662                           postinc1	equ	0xFE6
 11663                           postdec1	equ	0xFE5
 11664                           fsr1h	equ	0xFE2
 11665                           fsr1l	equ	0xFE1
 11666                           indf2	equ	0xFDF
 11667                           postinc2	equ	0xFDE
 11668                           postdec2	equ	0xFDD
 11669                           fsr2h	equ	0xFDA
 11670                           fsr2l	equ	0xFD9
 11671                           status	equ	0xFD8
 11672                           
 11673 ;; *************** function _SENDxMESSAGE *****************
 11674 ;; Defined at:
 11675 ;;		line 280 in file "../terminal.c"
 11676 ;; Parameters:    Size  Location     Type
 11677 ;;  index           2   18[COMRAM] unsigned int 
 11678 ;;  value           2   20[COMRAM] unsigned int 
 11679 ;; Auto vars:     Size  Location     Type
 11680 ;;		None
 11681 ;; Return value:  Size  Location     Type
 11682 ;;                  1    wreg      void 
 11683 ;; Registers used:
 11684 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11685 ;; Tracked objects:
 11686 ;;		On entry : 0/0
 11687 ;;		On exit  : 0/0
 11688 ;;		Unchanged: 0/0
 11689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11690 ;;      Params:         4       0       0       0       0       0       0       0       0
 11691 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11692 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11693 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11694 ;;Total ram usage:        6 bytes
 11695 ;; Hardware stack levels used:    1
 11696 ;; Hardware stack levels required when called:    3
 11697 ;; This function calls:
 11698 ;;		Nothing
 11699 ;; This function is called by:
 11700 ;;		_TranslateMessage
 11701 ;;		_SETxAPIxVAL
 11702 ;;		_INCRxAPIxVAL
 11703 ;;		_DECRxAPIxVAL
 11704 ;; This function uses a non-reentrant model
 11705 ;;
 11706                           
 11707                           	psect	text31
 11708  00286A                     __ptext31:
 11709                           	opt stack 0
 11710  00286A                     _SENDxMESSAGE:
 11711                           	opt stack 22
 11712                           
 11713                           ;terminal.c: 282: switch (Diag_Comm)
 11714                           
 11715                           ;incstack = 0
 11716  00286A  D0F8               	goto	l674
 11717  00286C  0E90               	movlw	low _Comm_List
 11718  00286E  0100               	movlb	0	; () banked
 11719  002870  6F76               	movwf	_Pcomm_List& (0+255),b
 11720  002872  0E00               	movlw	high _Comm_List
 11721  002874  6F77               	movwf	(_Pcomm_List+1)& (0+255),b
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;terminal.c: 285: *Pcomm_List = index;
 11725  002876  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11726  00287A  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11727  00287E  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11728  002882  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;terminal.c: 286: Pcomm_List++;
 11732  002886  0E02               	movlw	2
 11733  002888  2776               	addwf	_Pcomm_List& (0+255),f,b
 11734  00288A  0E00               	movlw	0
 11735  00288C  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11736                           
 11737                           ;terminal.c: 287: *Pcomm_List = value;
 11738  00288E  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11739  002892  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11740  002896  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11741  00289A  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;terminal.c: 288: Pcomm_List++;
 11745  00289E  0E02               	movlw	2
 11746  0028A0  2776               	addwf	_Pcomm_List& (0+255),f,b
 11747  0028A2  0E00               	movlw	0
 11748  0028A4  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11749                           
 11750                           ; BSR set to: 0
 11751                           ;terminal.c: 289: Diag_Comm = 1;
 11752  0028A6  0E00               	movlw	0
 11753  0028A8  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11754  0028AA  0E01               	movlw	1
 11755  0028AC  6F78               	movwf	_Diag_Comm& (0+255),b
 11756                           
 11757                           ;terminal.c: 290: break;
 11758  0028AE  0012               	return	
 11759  0028B0                     
 11760                           ; BSR set to: 0
 11761  0028B0  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11762  0028B4  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11763  0028B8  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11764  0028BC  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11765                           
 11766                           ;terminal.c: 293: Pcomm_List++;
 11767  0028C0  0E02               	movlw	2
 11768  0028C2  0100               	movlb	0	; () banked
 11769  0028C4  2776               	addwf	_Pcomm_List& (0+255),f,b
 11770  0028C6  0E00               	movlw	0
 11771  0028C8  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;terminal.c: 294: *Pcomm_List = value;
 11775  0028CA  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11776  0028CE  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11777  0028D2  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11778  0028D6  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11779                           
 11780                           ;terminal.c: 295: Pcomm_List++;
 11781  0028DA  0E02               	movlw	2
 11782  0028DC  2776               	addwf	_Pcomm_List& (0+255),f,b
 11783  0028DE  0E00               	movlw	0
 11784  0028E0  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11785                           
 11786                           ; BSR set to: 0
 11787                           ;terminal.c: 296: Diag_Comm = 2;
 11788  0028E2  0E00               	movlw	0
 11789  0028E4  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11790  0028E6  0E02               	movlw	2
 11791  0028E8  6F78               	movwf	_Diag_Comm& (0+255),b
 11792                           
 11793                           ;terminal.c: 297: break;
 11794  0028EA  0012               	return	
 11795  0028EC                     
 11796                           ; BSR set to: 0
 11797  0028EC  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11798  0028F0  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11799  0028F4  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11800  0028F8  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11801                           
 11802                           ;terminal.c: 300: Pcomm_List++;
 11803  0028FC  0E02               	movlw	2
 11804  0028FE  0100               	movlb	0	; () banked
 11805  002900  2776               	addwf	_Pcomm_List& (0+255),f,b
 11806  002902  0E00               	movlw	0
 11807  002904  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;terminal.c: 301: *Pcomm_List = value;
 11811  002906  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11812  00290A  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11813  00290E  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11814  002912  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11815                           
 11816                           ;terminal.c: 302: Pcomm_List++;
 11817  002916  0E02               	movlw	2
 11818  002918  2776               	addwf	_Pcomm_List& (0+255),f,b
 11819  00291A  0E00               	movlw	0
 11820  00291C  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;terminal.c: 303: Diag_Comm = 3;
 11824  00291E  0E00               	movlw	0
 11825  002920  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11826  002922  0E03               	movlw	3
 11827  002924  6F78               	movwf	_Diag_Comm& (0+255),b
 11828                           
 11829                           ;terminal.c: 304: break;
 11830  002926  0012               	return	
 11831  002928                     
 11832                           ; BSR set to: 0
 11833  002928  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11834  00292C  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11835  002930  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11836  002934  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11837                           
 11838                           ;terminal.c: 307: Pcomm_List++;
 11839  002938  0E02               	movlw	2
 11840  00293A  0100               	movlb	0	; () banked
 11841  00293C  2776               	addwf	_Pcomm_List& (0+255),f,b
 11842  00293E  0E00               	movlw	0
 11843  002940  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;terminal.c: 308: *Pcomm_List = value;
 11847  002942  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11848  002946  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11849  00294A  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11850  00294E  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11851                           
 11852                           ;terminal.c: 309: Pcomm_List++;
 11853  002952  0E02               	movlw	2
 11854  002954  2776               	addwf	_Pcomm_List& (0+255),f,b
 11855  002956  0E00               	movlw	0
 11856  002958  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;terminal.c: 310: Diag_Comm = 4;
 11860  00295A  0E00               	movlw	0
 11861  00295C  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11862  00295E  0E04               	movlw	4
 11863  002960  6F78               	movwf	_Diag_Comm& (0+255),b
 11864                           
 11865                           ;terminal.c: 311: break;
 11866  002962  0012               	return	
 11867  002964                     
 11868                           ; BSR set to: 0
 11869  002964  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11870  002968  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11871  00296C  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11872  002970  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11873                           
 11874                           ;terminal.c: 314: Pcomm_List++;
 11875  002974  0E02               	movlw	2
 11876  002976  0100               	movlb	0	; () banked
 11877  002978  2776               	addwf	_Pcomm_List& (0+255),f,b
 11878  00297A  0E00               	movlw	0
 11879  00297C  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;terminal.c: 315: *Pcomm_List = value;
 11883  00297E  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11884  002982  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11885  002986  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11886  00298A  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11887                           
 11888                           ;terminal.c: 316: Pcomm_List++;
 11889  00298E  0E02               	movlw	2
 11890  002990  2776               	addwf	_Pcomm_List& (0+255),f,b
 11891  002992  0E00               	movlw	0
 11892  002994  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;terminal.c: 317: Diag_Comm = 5;
 11896  002996  0E00               	movlw	0
 11897  002998  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11898  00299A  0E05               	movlw	5
 11899  00299C  6F78               	movwf	_Diag_Comm& (0+255),b
 11900                           
 11901                           ;terminal.c: 318: break;
 11902  00299E  0012               	return	
 11903  0029A0                     
 11904                           ; BSR set to: 0
 11905  0029A0  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11906  0029A4  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11907  0029A8  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11908  0029AC  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11909                           
 11910                           ;terminal.c: 321: Pcomm_List++;
 11911  0029B0  0E02               	movlw	2
 11912  0029B2  0100               	movlb	0	; () banked
 11913  0029B4  2776               	addwf	_Pcomm_List& (0+255),f,b
 11914  0029B6  0E00               	movlw	0
 11915  0029B8  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11916                           
 11917                           ; BSR set to: 0
 11918                           ;terminal.c: 322: *Pcomm_List = value;
 11919  0029BA  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11920  0029BE  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11921  0029C2  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11922  0029C6  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11923                           
 11924                           ;terminal.c: 323: Pcomm_List++;
 11925  0029CA  0E02               	movlw	2
 11926  0029CC  2776               	addwf	_Pcomm_List& (0+255),f,b
 11927  0029CE  0E00               	movlw	0
 11928  0029D0  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;terminal.c: 324: Diag_Comm = 6;
 11932  0029D2  0E00               	movlw	0
 11933  0029D4  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11934  0029D6  0E06               	movlw	6
 11935  0029D8  6F78               	movwf	_Diag_Comm& (0+255),b
 11936                           
 11937                           ;terminal.c: 325: break;
 11938  0029DA  0012               	return	
 11939  0029DC                     
 11940                           ; BSR set to: 0
 11941  0029DC  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11942  0029E0  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11943  0029E4  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11944  0029E8  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11945                           
 11946                           ;terminal.c: 328: Pcomm_List++;
 11947  0029EC  0E02               	movlw	2
 11948  0029EE  0100               	movlb	0	; () banked
 11949  0029F0  2776               	addwf	_Pcomm_List& (0+255),f,b
 11950  0029F2  0E00               	movlw	0
 11951  0029F4  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;terminal.c: 329: *Pcomm_List = value;
 11955  0029F6  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11956  0029FA  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11957  0029FE  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11958  002A02  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11959                           
 11960                           ;terminal.c: 330: Pcomm_List++;
 11961  002A06  0E02               	movlw	2
 11962  002A08  2776               	addwf	_Pcomm_List& (0+255),f,b
 11963  002A0A  0E00               	movlw	0
 11964  002A0C  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;terminal.c: 331: Diag_Comm = 7;
 11968  002A0E  0E00               	movlw	0
 11969  002A10  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 11970  002A12  0E07               	movlw	7
 11971  002A14  6F78               	movwf	_Diag_Comm& (0+255),b
 11972                           
 11973                           ;terminal.c: 332: break;
 11974  002A16  0012               	return	
 11975  002A18                     
 11976                           ; BSR set to: 0
 11977  002A18  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11978  002A1C  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11979  002A20  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11980  002A24  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11981                           
 11982                           ;terminal.c: 335: Pcomm_List++;
 11983  002A28  0E02               	movlw	2
 11984  002A2A  0100               	movlb	0	; () banked
 11985  002A2C  2776               	addwf	_Pcomm_List& (0+255),f,b
 11986  002A2E  0E00               	movlw	0
 11987  002A30  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;terminal.c: 336: *Pcomm_List = value;
 11991  002A32  C076  FFD9         	movff	_Pcomm_List,fsr2l
 11992  002A36  C077  FFDA         	movff	_Pcomm_List+1,fsr2h
 11993  002A3A  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11994  002A3E  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11995                           
 11996                           ;terminal.c: 337: Pcomm_List++;
 11997  002A42  0E02               	movlw	2
 11998  002A44  2776               	addwf	_Pcomm_List& (0+255),f,b
 11999  002A46  0E00               	movlw	0
 12000  002A48  2377               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 12001                           
 12002                           ;terminal.c: 338: Pcomm_List = &Comm_List[0][0];
 12003  002A4A  0E90               	movlw	low _Comm_List
 12004  002A4C  6F76               	movwf	_Pcomm_List& (0+255),b
 12005  002A4E  0E00               	movlw	high _Comm_List
 12006  002A50  6F77               	movwf	(_Pcomm_List+1)& (0+255),b
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;terminal.c: 339: Diag_Comm = 0;
 12010  002A52  0E00               	movlw	0
 12011  002A54  6F79               	movwf	(_Diag_Comm+1)& (0+255),b
 12012  002A56  0E00               	movlw	0
 12013  002A58  6F78               	movwf	_Diag_Comm& (0+255),b
 12014                           
 12015                           ; BSR set to: 0
 12016                           ;terminal.c: 344: }
 12017                           
 12018                           ; BSR set to: 0
 12019                           
 12020                           ;terminal.c: 343: default : break;
 12021                           
 12022                           ;terminal.c: 340: break;
 12023  002A5A  0012               	return	
 12024  002A5C                     l674:
 12025                           
 12026                           ; BSR set to: 0
 12027  002A5C  C078  F017         	movff	_Diag_Comm,??_SENDxMESSAGE
 12028  002A60  C079  F018         	movff	_Diag_Comm+1,??_SENDxMESSAGE+1
 12029                           
 12030                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12031                           ; Switch size 1, requested type "space"
 12032                           ; Number of cases is 1, Range of values is 0 to 0
 12033                           ; switch strategies available:
 12034                           ; Name         Instructions Cycles
 12035                           ; simple_byte            4     3 (average)
 12036                           ;	Chosen strategy is simple_byte
 12037  002A64  5018               	movf	??_SENDxMESSAGE+1,w,c
 12038  002A66  0A00               	xorlw	0	; case 0
 12039  002A68  A4D8               	btfss	status,2,c
 12040  002A6A  0012               	return	
 12041                           
 12042                           ; Switch size 1, requested type "space"
 12043                           ; Number of cases is 8, Range of values is 0 to 7
 12044                           ; switch strategies available:
 12045                           ; Name         Instructions Cycles
 12046                           ; simple_byte           25    13 (average)
 12047                           ;	Chosen strategy is simple_byte
 12048  002A6C  5017               	movf	??_SENDxMESSAGE,w,c
 12049  002A6E  0A00               	xorlw	0	; case 0
 12050  002A70  B4D8               	btfsc	status,2,c
 12051  002A72  D6FC               	goto	l675
 12052  002A74  0A01               	xorlw	1	; case 1
 12053  002A76  B4D8               	btfsc	status,2,c
 12054  002A78  D71B               	goto	l677
 12055  002A7A  0A03               	xorlw	3	; case 2
 12056  002A7C  B4D8               	btfsc	status,2,c
 12057  002A7E  D736               	goto	l678
 12058  002A80  0A01               	xorlw	1	; case 3
 12059  002A82  B4D8               	btfsc	status,2,c
 12060  002A84  D751               	goto	l679
 12061  002A86  0A07               	xorlw	7	; case 4
 12062  002A88  B4D8               	btfsc	status,2,c
 12063  002A8A  D76C               	goto	l680
 12064  002A8C  0A01               	xorlw	1	; case 5
 12065  002A8E  B4D8               	btfsc	status,2,c
 12066  002A90  D787               	goto	l681
 12067  002A92  0A03               	xorlw	3	; case 6
 12068  002A94  B4D8               	btfsc	status,2,c
 12069  002A96  D7A2               	goto	l682
 12070  002A98  0A01               	xorlw	1	; case 7
 12071  002A9A  A4D8               	btfss	status,2,c
 12072  002A9C  0012               	return	
 12073  002A9E  D7BC               	goto	l683
 12074  002AA0                     __end_of_SENDxMESSAGE:
 12075                           	opt stack 0
 12076                           tblptru	equ	0xFF8
 12077                           tblptrh	equ	0xFF7
 12078                           tblptrl	equ	0xFF6
 12079                           tablat	equ	0xFF5
 12080                           prodh	equ	0xFF4
 12081                           prodl	equ	0xFF3
 12082                           intcon	equ	0xFF2
 12083                           intcon2	equ	0xFF1
 12084                           postinc0	equ	0xFEE
 12085                           wreg	equ	0xFE8
 12086                           postinc1	equ	0xFE6
 12087                           postdec1	equ	0xFE5
 12088                           fsr1h	equ	0xFE2
 12089                           fsr1l	equ	0xFE1
 12090                           indf2	equ	0xFDF
 12091                           postinc2	equ	0xFDE
 12092                           postdec2	equ	0xFDD
 12093                           fsr2h	equ	0xFDA
 12094                           fsr2l	equ	0xFD9
 12095                           status	equ	0xFD8
 12096                           
 12097 ;; *************** function _EUSART1_Initialize *****************
 12098 ;; Defined at:
 12099 ;;		line 78 in file "../eusart1.c"
 12100 ;; Parameters:    Size  Location     Type
 12101 ;;		None
 12102 ;; Auto vars:     Size  Location     Type
 12103 ;;  baud_rate       2   18[COMRAM] unsigned int 
 12104 ;; Return value:  Size  Location     Type
 12105 ;;                  1    wreg      void 
 12106 ;; Registers used:
 12107 ;;		wreg, status,2
 12108 ;; Tracked objects:
 12109 ;;		On entry : 0/0
 12110 ;;		On exit  : 0/0
 12111 ;;		Unchanged: 0/0
 12112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12113 ;;      Params:         0       0       0       0       0       0       0       0       0
 12114 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12115 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12116 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12117 ;;Total ram usage:        2 bytes
 12118 ;; Hardware stack levels used:    1
 12119 ;; Hardware stack levels required when called:    3
 12120 ;; This function calls:
 12121 ;;		Nothing
 12122 ;; This function is called by:
 12123 ;;		_main
 12124 ;; This function uses a non-reentrant model
 12125 ;;
 12126                           
 12127                           	psect	text32
 12128  004184                     __ptext32:
 12129                           	opt stack 0
 12130  004184                     _EUSART1_Initialize:
 12131                           	opt stack 27
 12132                           
 12133                           ;eusart1.c: 80: PIE1bits.RC1IE = 0;
 12134                           
 12135                           ;incstack = 0
 12136  004184  9A9D               	bcf	3997,5,c	;volatile
 12137                           
 12138                           ;eusart1.c: 81: PIE1bits.TX1IE = 0;
 12139  004186  989D               	bcf	3997,4,c	;volatile
 12140                           
 12141                           ;eusart1.c: 85: BAUDCONbits.BRG16 = 1;
 12142  004188  86B8               	bsf	4024,3,c	;volatile
 12143                           
 12144                           ;eusart1.c: 87: RCSTAbits.SPEN = 1;
 12145  00418A  8EAB               	bsf	4011,7,c	;volatile
 12146                           
 12147                           ;eusart1.c: 88: RCSTAbits.RX9 = 0;
 12148  00418C  9CAB               	bcf	4011,6,c	;volatile
 12149                           
 12150                           ;eusart1.c: 89: RCSTAbits.CREN = 1;
 12151  00418E  88AB               	bsf	4011,4,c	;volatile
 12152                           
 12153                           ;eusart1.c: 90: RCSTAbits.ADDEN = 0;
 12154  004190  96AB               	bcf	4011,3,c	;volatile
 12155                           
 12156                           ;eusart1.c: 92: TXSTAbits.TX9 = 0;
 12157  004192  9CAC               	bcf	4012,6,c	;volatile
 12158                           
 12159                           ;eusart1.c: 93: TXSTAbits.TXEN = 1;
 12160  004194  8AAC               	bsf	4012,5,c	;volatile
 12161                           
 12162                           ;eusart1.c: 94: TXSTAbits.SYNC = 0;
 12163  004196  98AC               	bcf	4012,4,c	;volatile
 12164                           
 12165                           ;eusart1.c: 95: TXSTAbits.SENDB = 0;
 12166  004198  96AC               	bcf	4012,3,c	;volatile
 12167                           
 12168                           ;eusart1.c: 96: TXSTAbits.BRGH = 1;
 12169  00419A  84AC               	bsf	4012,2,c	;volatile
 12170                           
 12171                           ;eusart1.c: 97: TXSTAbits.TRMT = 1;
 12172  00419C  82AC               	bsf	4012,1,c	;volatile
 12173                           
 12174                           ;eusart1.c: 98: TXSTAbits.TX9D = 0;
 12175  00419E  90AC               	bcf	4012,0,c	;volatile
 12176                           
 12177                           ;eusart1.c: 100: unsigned int baud_rate;
 12178                           ;eusart1.c: 102: baud_rate = 417;
 12179  0041A0  0E01               	movlw	1
 12180  0041A2  6E14               	movwf	EUSART1_Initialize@baud_rate+1,c
 12181  0041A4  0EA1               	movlw	161
 12182  0041A6  6E13               	movwf	EUSART1_Initialize@baud_rate,c
 12183                           
 12184                           ;eusart1.c: 104: SPBRGH = baud_rate >> 8;
 12185  0041A8  5014               	movf	EUSART1_Initialize@baud_rate+1,w,c
 12186  0041AA  6EB0               	movwf	4016,c	;volatile
 12187                           
 12188                           ;eusart1.c: 105: SPBRG = baud_rate;
 12189  0041AC  C013  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12190                           
 12191                           ;eusart1.c: 109: eusart1TxHead = 0;
 12192  0041B0  0E00               	movlw	0
 12193  0041B2  6E44               	movwf	_eusart1TxHead,c
 12194                           
 12195                           ;eusart1.c: 110: eusart1TxTail = 0;
 12196  0041B4  0E00               	movlw	0
 12197  0041B6  6E43               	movwf	_eusart1TxTail,c
 12198                           
 12199                           ;eusart1.c: 111: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12200  0041B8  0E7E               	movlw	126
 12201  0041BA  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12202                           
 12203                           ;eusart1.c: 113: eusart1RxHead = 0;
 12204  0041BC  0E00               	movlw	0
 12205  0041BE  6E41               	movwf	_eusart1RxHead,c
 12206                           
 12207                           ;eusart1.c: 114: eusart1RxTail = 0;
 12208  0041C0  0E00               	movlw	0
 12209  0041C2  6E40               	movwf	_eusart1RxTail,c
 12210                           
 12211                           ;eusart1.c: 115: eusart1RxCount = 0;
 12212  0041C4  0E00               	movlw	0
 12213  0041C6  6E3F               	movwf	_eusart1RxCount,c	;volatile
 12214                           
 12215                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
 12216  0041C8  8A9D               	bsf	3997,5,c	;volatile
 12217  0041CA  0012               	return		;funcret
 12218  0041CC                     __end_of_EUSART1_Initialize:
 12219                           	opt stack 0
 12220                           tblptru	equ	0xFF8
 12221                           tblptrh	equ	0xFF7
 12222                           tblptrl	equ	0xFF6
 12223                           tablat	equ	0xFF5
 12224                           prodh	equ	0xFF4
 12225                           prodl	equ	0xFF3
 12226                           intcon	equ	0xFF2
 12227                           intcon2	equ	0xFF1
 12228                           postinc0	equ	0xFEE
 12229                           wreg	equ	0xFE8
 12230                           postinc1	equ	0xFE6
 12231                           postdec1	equ	0xFE5
 12232                           fsr1h	equ	0xFE2
 12233                           fsr1l	equ	0xFE1
 12234                           indf2	equ	0xFDF
 12235                           postinc2	equ	0xFDE
 12236                           postdec2	equ	0xFDD
 12237                           fsr2h	equ	0xFDA
 12238                           fsr2l	equ	0xFD9
 12239                           status	equ	0xFD8
 12240                           
 12241 ;; *************** function _EEPROMxREAD *****************
 12242 ;; Defined at:
 12243 ;;		line 60 in file "../eeprom_settings.c"
 12244 ;; Parameters:    Size  Location     Type
 12245 ;;		None
 12246 ;; Auto vars:     Size  Location     Type
 12247 ;;  Data            2   30[COMRAM] unsigned int 
 12248 ;;  i               1   32[COMRAM] unsigned char 
 12249 ;; Return value:  Size  Location     Type
 12250 ;;                  2   26[COMRAM] unsigned int 
 12251 ;; Registers used:
 12252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12253 ;; Tracked objects:
 12254 ;;		On entry : 0/0
 12255 ;;		On exit  : 0/0
 12256 ;;		Unchanged: 0/0
 12257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12258 ;;      Params:         2       0       0       0       0       0       0       0       0
 12259 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12260 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12261 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12262 ;;Total ram usage:        7 bytes
 12263 ;; Hardware stack levels used:    1
 12264 ;; Hardware stack levels required when called:    4
 12265 ;; This function calls:
 12266 ;;		_Eeprom_Read
 12267 ;; This function is called by:
 12268 ;;		_main
 12269 ;; This function uses a non-reentrant model
 12270 ;;
 12271                           
 12272                           	psect	text33
 12273  003BA0                     __ptext33:
 12274                           	opt stack 0
 12275  003BA0                     _EEPROMxREAD:
 12276                           	opt stack 26
 12277                           
 12278                           ;eeprom_settings.c: 62: unsigned char i = 0;
 12279                           
 12280                           ;incstack = 0
 12281  003BA0  0E00               	movlw	0
 12282  003BA2  6E21               	movwf	EEPROMxREAD@i,c
 12283                           
 12284                           ;eeprom_settings.c: 63: unsigned int Data = 0;
 12285  003BA4  0E00               	movlw	0
 12286  003BA6  6E20               	movwf	EEPROMxREAD@Data+1,c
 12287  003BA8  0E00               	movlw	0
 12288  003BAA  6E1F               	movwf	EEPROMxREAD@Data,c
 12289                           
 12290                           ;eeprom_settings.c: 68: if (!WriteActive){
 12291  003BAC  0100               	movlb	0	; () banked
 12292  003BAE  516C               	movf	_WriteActive& (0+255),w,b
 12293  003BB0  116D               	iorwf	(_WriteActive+1)& (0+255),w,b
 12294  003BB2  A4D8               	btfss	status,2,c
 12295  003BB4  D059               	goto	l751
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;eeprom_settings.c: 69: ReadActive = 1;
 12299  003BB6  0E00               	movlw	0
 12300  003BB8  6F6F               	movwf	(_ReadActive+1)& (0+255),b
 12301  003BBA  0E01               	movlw	1
 12302  003BBC  6F6E               	movwf	_ReadActive& (0+255),b
 12303                           
 12304                           ;eeprom_settings.c: 70: INTCON = 0x00;
 12305  003BBE  0E00               	movlw	0
 12306  003BC0  6EF2               	movwf	intcon,c	;volatile
 12307                           
 12308                           ;eeprom_settings.c: 72: for(i = 0; i < 28; i++ )
 12309  003BC2  0E00               	movlw	0
 12310  003BC4  6E21               	movwf	EEPROMxREAD@i,c
 12311  003BC6                     l6208:
 12312                           
 12313                           ; BSR set to: 0
 12314  003BC6  0E1B               	movlw	27
 12315  003BC8  6421               	cpfsgt	EEPROMxREAD@i,c
 12316  003BCA  D001               	goto	l752
 12317  003BCC  D041               	goto	u5320
 12318  003BCE                     l752:
 12319                           
 12320                           ;eeprom_settings.c: 73: {
 12321                           ;eeprom_settings.c: 74: Data = Eeprom_Read(i);
 12322                           
 12323                           ; BSR set to: 0
 12324  003BCE  C021  F013         	movff	EEPROMxREAD@i,Eeprom_Read@Location
 12325  003BD2  6A14               	clrf	Eeprom_Read@Location+1,c
 12326  003BD4  EC43  F020         	call	_Eeprom_Read	;wreg free
 12327  003BD8  C013  F01F         	movff	?_Eeprom_Read,EEPROMxREAD@Data
 12328  003BDC  C014  F020         	movff	?_Eeprom_Read+1,EEPROMxREAD@Data+1
 12329                           
 12330                           ;eeprom_settings.c: 78: API[ApiList[i]] = Data;
 12331  003BE0  5021               	movf	EEPROMxREAD@i,w,c
 12332  003BE2  0D02               	mullw	2
 12333  003BE4  0E01               	movlw	low _ApiList
 12334  003BE6  24F3               	addwf	prodl,w,c
 12335  003BE8  6EF6               	movwf	tblptrl,c
 12336  003BEA  0E08               	movlw	high _ApiList
 12337  003BEC  20F4               	addwfc	prodh,w,c
 12338  003BEE  6EF7               	movwf	tblptrh,c
 12339  003BF0                     	if	0	;There are less than 3 active tblptr bytes
 12340  003BF0                     	endif
 12341  003BF0  0009               	tblrd		*+
 12342  003BF2  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12343  003BF6  0009               	tblrd		*+
 12344  003BF8  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12345  003BFC  90D8               	bcf	status,0,c
 12346  003BFE  361D               	rlcf	??_EEPROMxREAD,f,c
 12347  003C00  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12348  003C02  0E00               	movlw	low _API
 12349  003C04  241D               	addwf	??_EEPROMxREAD,w,c
 12350  003C06  6ED9               	movwf	fsr2l,c
 12351  003C08  0E01               	movlw	high _API
 12352  003C0A  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12353  003C0C  6EDA               	movwf	fsr2h,c
 12354  003C0E  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12355  003C12  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12356                           
 12357                           ;eeprom_settings.c: 79: API_EEPROM[ApiList[i]] = Data;
 12358  003C16  5021               	movf	EEPROMxREAD@i,w,c
 12359  003C18  0D02               	mullw	2
 12360  003C1A  0E01               	movlw	low _ApiList
 12361  003C1C  24F3               	addwf	prodl,w,c
 12362  003C1E  6EF6               	movwf	tblptrl,c
 12363  003C20  0E08               	movlw	high _ApiList
 12364  003C22  20F4               	addwfc	prodh,w,c
 12365  003C24  6EF7               	movwf	tblptrh,c
 12366  003C26                     	if	0	;There are less than 3 active tblptr bytes
 12367  003C26                     	endif
 12368  003C26  0009               	tblrd		*+
 12369  003C28  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12370  003C2C  0009               	tblrd		*+
 12371  003C2E  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12372  003C32  90D8               	bcf	status,0,c
 12373  003C34  361D               	rlcf	??_EEPROMxREAD,f,c
 12374  003C36  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12375  003C38  0E00               	movlw	low _API_EEPROM
 12376  003C3A  241D               	addwf	??_EEPROMxREAD,w,c
 12377  003C3C  6ED9               	movwf	fsr2l,c
 12378  003C3E  0E03               	movlw	high _API_EEPROM
 12379  003C40  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12380  003C42  6EDA               	movwf	fsr2h,c
 12381  003C44  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12382  003C48  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12383  003C4C  2A21               	incf	EEPROMxREAD@i,f,c
 12384  003C4E  D7BB               	goto	l6208
 12385  003C50                     u5320:
 12386                           
 12387                           ;eeprom_settings.c: 81: }
 12388                           ;eeprom_settings.c: 83: INTCON = 0xA0;
 12389  003C50  0EA0               	movlw	160
 12390  003C52  6EF2               	movwf	intcon,c	;volatile
 12391                           
 12392                           ;eeprom_settings.c: 84: ReadActive = 0;
 12393  003C54  0E00               	movlw	0
 12394  003C56  0100               	movlb	0	; () banked
 12395  003C58  6F6F               	movwf	(_ReadActive+1)& (0+255),b
 12396  003C5A  0E00               	movlw	0
 12397  003C5C  6F6E               	movwf	_ReadActive& (0+255),b
 12398                           
 12399                           ;eeprom_settings.c: 85: return (1);
 12400  003C5E  0E00               	movlw	0
 12401  003C60  6E1C               	movwf	?_EEPROMxREAD+1,c
 12402  003C62  0E01               	movlw	1
 12403  003C64  6E1B               	movwf	?_EEPROMxREAD,c
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;eeprom_settings.c: 86: }
 12407                           
 12408                           ; BSR set to: 0
 12409  003C66  0012               	return	
 12410  003C68                     l751:
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;eeprom_settings.c: 87: else{
 12414                           ;eeprom_settings.c: 88: return (0);
 12415                           
 12416                           ; BSR set to: 0
 12417  003C68  0E00               	movlw	0
 12418  003C6A  6E1C               	movwf	?_EEPROMxREAD+1,c
 12419  003C6C  0E00               	movlw	0
 12420  003C6E  6E1B               	movwf	?_EEPROMxREAD,c
 12421                           
 12422                           ; BSR set to: 0
 12423  003C70  0012               	return	
 12424  003C72                     __end_of_EEPROMxREAD:
 12425                           	opt stack 0
 12426                           tblptru	equ	0xFF8
 12427                           tblptrh	equ	0xFF7
 12428                           tblptrl	equ	0xFF6
 12429                           tablat	equ	0xFF5
 12430                           prodh	equ	0xFF4
 12431                           prodl	equ	0xFF3
 12432                           intcon	equ	0xFF2
 12433                           intcon2	equ	0xFF1
 12434                           postinc0	equ	0xFEE
 12435                           wreg	equ	0xFE8
 12436                           postinc1	equ	0xFE6
 12437                           postdec1	equ	0xFE5
 12438                           fsr1h	equ	0xFE2
 12439                           fsr1l	equ	0xFE1
 12440                           indf2	equ	0xFDF
 12441                           postinc2	equ	0xFDE
 12442                           postdec2	equ	0xFDD
 12443                           fsr2h	equ	0xFDA
 12444                           fsr2l	equ	0xFD9
 12445                           status	equ	0xFD8
 12446                           
 12447 ;; *************** function _Eeprom_Read *****************
 12448 ;; Defined at:
 12449 ;;		line 107 in file "../eeprom_settings.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;  Location        2   18[COMRAM] unsigned int 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;  Return_Data     2   24[COMRAM] unsigned int 
 12454 ;;  Location_Hig    2   22[COMRAM] unsigned int 
 12455 ;;  Location_Low    2   20[COMRAM] unsigned int 
 12456 ;; Return value:  Size  Location     Type
 12457 ;;                  2   18[COMRAM] unsigned int 
 12458 ;; Registers used:
 12459 ;;		wreg, status,2, status,0
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12465 ;;      Params:         2       0       0       0       0       0       0       0       0
 12466 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12467 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12468 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12469 ;;Total ram usage:        8 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    3
 12472 ;; This function calls:
 12473 ;;		Nothing
 12474 ;; This function is called by:
 12475 ;;		_EEPROMxREAD
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           	psect	text34
 12480  004086                     __ptext34:
 12481                           	opt stack 0
 12482  004086                     _Eeprom_Read:
 12483                           	opt stack 26
 12484                           
 12485                           ;eeprom_settings.c: 109: unsigned int Location_High_Byte = Location * 2;
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;incstack = 0
 12489  004086  90D8               	bcf	status,0,c
 12490  004088  3413               	rlcf	Eeprom_Read@Location,w,c
 12491  00408A  6E17               	movwf	Eeprom_Read@Location_High_Byte,c
 12492  00408C  3414               	rlcf	Eeprom_Read@Location+1,w,c
 12493  00408E  6E18               	movwf	Eeprom_Read@Location_High_Byte+1,c
 12494                           
 12495                           ;eeprom_settings.c: 110: unsigned int Location_Low_Byte = Location_High_Byte + 1;
 12496  004090  0E01               	movlw	1
 12497  004092  2417               	addwf	Eeprom_Read@Location_High_Byte,w,c
 12498  004094  6E15               	movwf	Eeprom_Read@Location_Low_Byte,c
 12499  004096  0E00               	movlw	0
 12500  004098  2018               	addwfc	Eeprom_Read@Location_High_Byte+1,w,c
 12501  00409A  6E16               	movwf	Eeprom_Read@Location_Low_Byte+1,c
 12502                           
 12503                           ;eeprom_settings.c: 111: unsigned int Return_Data = 0;
 12504  00409C  0E00               	movlw	0
 12505  00409E  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12506  0040A0  0E00               	movlw	0
 12507  0040A2  6E19               	movwf	Eeprom_Read@Return_Data,c
 12508                           
 12509                           ;eeprom_settings.c: 115: EECON1bits.EEPGD = 0;
 12510  0040A4  9EA6               	bcf	4006,7,c	;volsfr
 12511                           
 12512                           ;eeprom_settings.c: 116: EECON1bits.CFGS = 0;
 12513  0040A6  9CA6               	bcf	4006,6,c	;volsfr
 12514                           
 12515                           ;eeprom_settings.c: 117: EEADR = Location_High_Byte;
 12516  0040A8  C017  FFA9         	movff	Eeprom_Read@Location_High_Byte,4009	;volatile
 12517                           
 12518                           ;eeprom_settings.c: 118: EECON1bits.RD = 1;
 12519  0040AC  80A6               	bsf	4006,0,c	;volsfr
 12520  0040AE  B0A6               	btfsc	4006,0,c	;volsfr
 12521  0040B0  D7FE               	goto	l759
 12522                           
 12523                           ;eeprom_settings.c: 120: Return_Data = EEDATA;
 12524  0040B2  CFA8 F019          	movff	4008,Eeprom_Read@Return_Data	;volatile
 12525  0040B6  6A1A               	clrf	Eeprom_Read@Return_Data+1,c
 12526                           
 12527                           ;eeprom_settings.c: 121: Return_Data = Return_Data << 8;
 12528  0040B8  5019               	movf	Eeprom_Read@Return_Data,w,c
 12529  0040BA  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12530  0040BC  6A19               	clrf	Eeprom_Read@Return_Data,c
 12531                           
 12532                           ;eeprom_settings.c: 126: EECON1bits.EEPGD = 0;
 12533  0040BE  9EA6               	bcf	4006,7,c	;volsfr
 12534                           
 12535                           ;eeprom_settings.c: 127: EECON1bits.CFGS = 0;
 12536  0040C0  9CA6               	bcf	4006,6,c	;volsfr
 12537                           
 12538                           ;eeprom_settings.c: 128: EEADR = Location_Low_Byte;
 12539  0040C2  C015  FFA9         	movff	Eeprom_Read@Location_Low_Byte,4009	;volatile
 12540                           
 12541                           ;eeprom_settings.c: 129: EECON1bits.RD = 1;
 12542  0040C6  80A6               	bsf	4006,0,c	;volsfr
 12543  0040C8  B0A6               	btfsc	4006,0,c	;volsfr
 12544  0040CA  D7FE               	goto	l762
 12545                           
 12546                           ;eeprom_settings.c: 131: Return_Data = Return_Data | EEDATA;
 12547  0040CC  5019               	movf	Eeprom_Read@Return_Data,w,c
 12548  0040CE  10A8               	iorwf	4008,w,c	;volatile
 12549  0040D0  6E19               	movwf	Eeprom_Read@Return_Data,c
 12550  0040D2  501A               	movf	Eeprom_Read@Return_Data+1,w,c
 12551  0040D4  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12552                           
 12553                           ;eeprom_settings.c: 136: EEADR = 0xFF;
 12554  0040D6  68A9               	setf	4009,c	;volatile
 12555                           
 12556                           ;eeprom_settings.c: 140: return (Return_Data);
 12557  0040D8  C019  F013         	movff	Eeprom_Read@Return_Data,?_Eeprom_Read
 12558  0040DC  C01A  F014         	movff	Eeprom_Read@Return_Data+1,?_Eeprom_Read+1
 12559  0040E0  0012               	return	
 12560  0040E2                     __end_of_Eeprom_Read:
 12561                           	opt stack 0
 12562                           tblptru	equ	0xFF8
 12563                           tblptrh	equ	0xFF7
 12564                           tblptrl	equ	0xFF6
 12565                           tablat	equ	0xFF5
 12566                           prodh	equ	0xFF4
 12567                           prodl	equ	0xFF3
 12568                           intcon	equ	0xFF2
 12569                           intcon2	equ	0xFF1
 12570                           postinc0	equ	0xFEE
 12571                           wreg	equ	0xFE8
 12572                           postinc1	equ	0xFE6
 12573                           postdec1	equ	0xFE5
 12574                           fsr1h	equ	0xFE2
 12575                           fsr1l	equ	0xFE1
 12576                           indf2	equ	0xFDF
 12577                           postinc2	equ	0xFDE
 12578                           postdec2	equ	0xFDD
 12579                           fsr2h	equ	0xFDA
 12580                           fsr2l	equ	0xFD9
 12581                           status	equ	0xFD8
 12582                           
 12583 ;; *************** function _DIAGNOSTICxTOxPC *****************
 12584 ;; Defined at:
 12585 ;;		line 194 in file "../terminal.c"
 12586 ;; Parameters:    Size  Location     Type
 12587 ;;		None
 12588 ;; Auto vars:     Size  Location     Type
 12589 ;;		None
 12590 ;; Return value:  Size  Location     Type
 12591 ;;                  1    wreg      void 
 12592 ;; Registers used:
 12593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12594 ;; Tracked objects:
 12595 ;;		On entry : 0/0
 12596 ;;		On exit  : 0/0
 12597 ;;		Unchanged: 0/0
 12598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12599 ;;      Params:         0       0       0       0       0       0       0       0       0
 12600 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12601 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12602 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12603 ;;Total ram usage:        2 bytes
 12604 ;; Hardware stack levels used:    1
 12605 ;; Hardware stack levels required when called:    6
 12606 ;; This function calls:
 12607 ;;		_SendMessage
 12608 ;; This function is called by:
 12609 ;;		_main
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           	psect	text35
 12614  002630                     __ptext35:
 12615                           	opt stack 0
 12616  002630                     _DIAGNOSTICxTOxPC:
 12617                           	opt stack 24
 12618                           
 12619                           ;terminal.c: 196: if (DelayCounter > 10000){
 12620                           
 12621                           ;incstack = 0
 12622  002630  0E11               	movlw	17
 12623  002632  0100               	movlb	0	; () banked
 12624  002634  5D70               	subwf	_DelayCounter& (0+255),w,b
 12625  002636  0E27               	movlw	39
 12626  002638  5971               	subwfb	(_DelayCounter+1)& (0+255),w,b
 12627  00263A  A0D8               	btfss	status,0,c
 12628  00263C  D113               	goto	l649
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;terminal.c: 197: DelayCounter = 0;
 12632  00263E  0E00               	movlw	0
 12633  002640  6F71               	movwf	(_DelayCounter+1)& (0+255),b
 12634  002642  0E00               	movlw	0
 12635  002644  6F70               	movwf	_DelayCounter& (0+255),b
 12636                           
 12637                           ;terminal.c: 199: switch (Diag_Comm2)
 12638  002646  D0E9               	goto	l650
 12639  002648                     
 12640                           ; BSR set to: 0
 12641                           
 12642                           ; BSR set to: 0
 12643  002648  0E90               	movlw	low _Comm_List
 12644  00264A  6F76               	movwf	_Pcomm_List& (0+255),b
 12645  00264C  0E00               	movlw	high _Comm_List
 12646  00264E  6F77               	movwf	(_Pcomm_List+1)& (0+255),b
 12647                           
 12648                           ;terminal.c: 202: Pcomm_List2 = &Comm_List[0][0];
 12649  002650  0E90               	movlw	low _Comm_List
 12650  002652  6F74               	movwf	_Pcomm_List2& (0+255),b
 12651  002654  0E00               	movlw	high _Comm_List
 12652  002656  6F75               	movwf	(_Pcomm_List2+1)& (0+255),b
 12653                           
 12654                           ; BSR set to: 0
 12655                           ;terminal.c: 203: Diag_Comm2 = 1;
 12656  002658  0E00               	movlw	0
 12657  00265A  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12658  00265C  0E01               	movlw	1
 12659  00265E  6F72               	movwf	_Diag_Comm2& (0+255),b
 12660                           
 12661                           ;terminal.c: 204: break;
 12662  002660  0012               	return	
 12663  002662                     
 12664                           ; BSR set to: 0
 12665                           
 12666                           ; BSR set to: 0
 12667  002662  0E90               	movlw	low _Comm_List
 12668  002664  6F74               	movwf	_Pcomm_List2& (0+255),b
 12669  002666  0E00               	movlw	high _Comm_List
 12670  002668  6F75               	movwf	(_Pcomm_List2+1)& (0+255),b
 12671                           
 12672                           ;terminal.c: 207: if (Pcomm_List2 != Pcomm_List)
 12673  00266A  5176               	movf	_Pcomm_List& (0+255),w,b
 12674  00266C  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12675  00266E  E104               	bnz	u9340
 12676  002670  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12677  002672  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12678  002674  B4D8               	btfsc	status,2,c
 12679  002676  0012               	return	
 12680  002678                     u9340:
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;terminal.c: 208: {
 12684                           ;terminal.c: 209: SendMessage(Comm_List[0][0], Comm_List[0][1]);
 12685  002678  C090  F0DC         	movff	_Comm_List,SendMessage@index
 12686  00267C  C091  F0DD         	movff	_Comm_List+1,SendMessage@index+1
 12687  002680  C092  F0DE         	movff	_Comm_List+2,SendMessage@value
 12688  002684  C093  F0DF         	movff	_Comm_List+3,SendMessage@value+1
 12689  002688  ECB0  F021         	call	_SendMessage	;wreg free
 12690                           
 12691                           ;terminal.c: 210: Pcomm_List2+=2;
 12692  00268C  0E04               	movlw	4
 12693  00268E  0100               	movlb	0	; () banked
 12694  002690  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12695  002692  0E00               	movlw	0
 12696  002694  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;terminal.c: 211: Diag_Comm2 = 2;
 12700  002696  0E00               	movlw	0
 12701  002698  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12702  00269A  0E02               	movlw	2
 12703  00269C  6F72               	movwf	_Diag_Comm2& (0+255),b
 12704                           
 12705                           ; BSR set to: 0
 12706                           ;terminal.c: 212: }
 12707                           ;terminal.c: 213: break;
 12708  00269E  0012               	return	
 12709  0026A0                     
 12710                           ; BSR set to: 0
 12711                           
 12712                           ; BSR set to: 0
 12713  0026A0  5176               	movf	_Pcomm_List& (0+255),w,b
 12714  0026A2  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12715  0026A4  E104               	bnz	u9350
 12716  0026A6  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12717  0026A8  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12718  0026AA  B4D8               	btfsc	status,2,c
 12719  0026AC  0012               	return	
 12720  0026AE                     u9350:
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;terminal.c: 216: {
 12724                           ;terminal.c: 217: SendMessage(Comm_List[1][0], Comm_List[1][1]);
 12725  0026AE  C094  F0DC         	movff	_Comm_List+4,SendMessage@index
 12726  0026B2  C095  F0DD         	movff	_Comm_List+5,SendMessage@index+1
 12727  0026B6  C096  F0DE         	movff	_Comm_List+6,SendMessage@value
 12728  0026BA  C097  F0DF         	movff	_Comm_List+7,SendMessage@value+1
 12729  0026BE  ECB0  F021         	call	_SendMessage	;wreg free
 12730                           
 12731                           ;terminal.c: 218: Pcomm_List2+=2;
 12732  0026C2  0E04               	movlw	4
 12733  0026C4  0100               	movlb	0	; () banked
 12734  0026C6  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12735  0026C8  0E00               	movlw	0
 12736  0026CA  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;terminal.c: 219: Diag_Comm2 = 3;
 12740  0026CC  0E00               	movlw	0
 12741  0026CE  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12742  0026D0  0E03               	movlw	3
 12743  0026D2  6F72               	movwf	_Diag_Comm2& (0+255),b
 12744                           
 12745                           ; BSR set to: 0
 12746                           ;terminal.c: 220: }
 12747                           ;terminal.c: 221: break;
 12748  0026D4  0012               	return	
 12749  0026D6                     
 12750                           ; BSR set to: 0
 12751                           
 12752                           ; BSR set to: 0
 12753  0026D6  5176               	movf	_Pcomm_List& (0+255),w,b
 12754  0026D8  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12755  0026DA  E104               	bnz	u9360
 12756  0026DC  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12757  0026DE  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12758  0026E0  B4D8               	btfsc	status,2,c
 12759  0026E2  0012               	return	
 12760  0026E4                     u9360:
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;terminal.c: 224: {
 12764                           ;terminal.c: 225: SendMessage(Comm_List[2][0], Comm_List[2][1]);
 12765  0026E4  C098  F0DC         	movff	_Comm_List+8,SendMessage@index
 12766  0026E8  C099  F0DD         	movff	_Comm_List+9,SendMessage@index+1
 12767  0026EC  C09A  F0DE         	movff	_Comm_List+10,SendMessage@value
 12768  0026F0  C09B  F0DF         	movff	_Comm_List+11,SendMessage@value+1
 12769  0026F4  ECB0  F021         	call	_SendMessage	;wreg free
 12770                           
 12771                           ;terminal.c: 226: Pcomm_List2+=2;
 12772  0026F8  0E04               	movlw	4
 12773  0026FA  0100               	movlb	0	; () banked
 12774  0026FC  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12775  0026FE  0E00               	movlw	0
 12776  002700  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;terminal.c: 227: Diag_Comm2 = 4;
 12780  002702  0E00               	movlw	0
 12781  002704  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12782  002706  0E04               	movlw	4
 12783  002708  6F72               	movwf	_Diag_Comm2& (0+255),b
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;terminal.c: 228: }
 12787                           ;terminal.c: 229: break;
 12788  00270A  0012               	return	
 12789  00270C                     
 12790                           ; BSR set to: 0
 12791                           
 12792                           ; BSR set to: 0
 12793  00270C  5176               	movf	_Pcomm_List& (0+255),w,b
 12794  00270E  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12795  002710  E104               	bnz	u9370
 12796  002712  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12797  002714  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12798  002716  B4D8               	btfsc	status,2,c
 12799  002718  0012               	return	
 12800  00271A                     u9370:
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;terminal.c: 232: {
 12804                           ;terminal.c: 233: SendMessage(Comm_List[3][0], Comm_List[3][1]);
 12805  00271A  C09C  F0DC         	movff	_Comm_List+12,SendMessage@index
 12806  00271E  C09D  F0DD         	movff	_Comm_List+13,SendMessage@index+1
 12807  002722  C09E  F0DE         	movff	_Comm_List+14,SendMessage@value
 12808  002726  C09F  F0DF         	movff	_Comm_List+15,SendMessage@value+1
 12809  00272A  ECB0  F021         	call	_SendMessage	;wreg free
 12810                           
 12811                           ;terminal.c: 234: Pcomm_List2+=2;
 12812  00272E  0E04               	movlw	4
 12813  002730  0100               	movlb	0	; () banked
 12814  002732  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12815  002734  0E00               	movlw	0
 12816  002736  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12817                           
 12818                           ; BSR set to: 0
 12819                           ;terminal.c: 235: Diag_Comm2 = 5;
 12820  002738  0E00               	movlw	0
 12821  00273A  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12822  00273C  0E05               	movlw	5
 12823  00273E  6F72               	movwf	_Diag_Comm2& (0+255),b
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;terminal.c: 236: }
 12827                           ;terminal.c: 237: break;
 12828  002740  0012               	return	
 12829  002742                     
 12830                           ; BSR set to: 0
 12831                           
 12832                           ; BSR set to: 0
 12833  002742  5176               	movf	_Pcomm_List& (0+255),w,b
 12834  002744  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12835  002746  E104               	bnz	u9380
 12836  002748  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12837  00274A  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12838  00274C  B4D8               	btfsc	status,2,c
 12839  00274E  0012               	return	
 12840  002750                     u9380:
 12841                           
 12842                           ; BSR set to: 0
 12843                           ;terminal.c: 240: {
 12844                           ;terminal.c: 241: SendMessage(Comm_List[4][0], Comm_List[4][1]);
 12845  002750  C0A0  F0DC         	movff	_Comm_List+16,SendMessage@index
 12846  002754  C0A1  F0DD         	movff	_Comm_List+17,SendMessage@index+1
 12847  002758  C0A2  F0DE         	movff	_Comm_List+18,SendMessage@value
 12848  00275C  C0A3  F0DF         	movff	_Comm_List+19,SendMessage@value+1
 12849  002760  ECB0  F021         	call	_SendMessage	;wreg free
 12850                           
 12851                           ;terminal.c: 242: Pcomm_List2+=2;
 12852  002764  0E04               	movlw	4
 12853  002766  0100               	movlb	0	; () banked
 12854  002768  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12855  00276A  0E00               	movlw	0
 12856  00276C  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;terminal.c: 243: Diag_Comm2 = 6;
 12860  00276E  0E00               	movlw	0
 12861  002770  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12862  002772  0E06               	movlw	6
 12863  002774  6F72               	movwf	_Diag_Comm2& (0+255),b
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;terminal.c: 244: }
 12867                           ;terminal.c: 245: break;
 12868  002776  0012               	return	
 12869  002778                     
 12870                           ; BSR set to: 0
 12871                           
 12872                           ; BSR set to: 0
 12873  002778  5176               	movf	_Pcomm_List& (0+255),w,b
 12874  00277A  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12875  00277C  E104               	bnz	u9390
 12876  00277E  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12877  002780  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12878  002782  B4D8               	btfsc	status,2,c
 12879  002784  0012               	return	
 12880  002786                     u9390:
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;terminal.c: 248: {
 12884                           ;terminal.c: 249: SendMessage(Comm_List[5][0], Comm_List[5][1]);
 12885  002786  C0A4  F0DC         	movff	_Comm_List+20,SendMessage@index
 12886  00278A  C0A5  F0DD         	movff	_Comm_List+21,SendMessage@index+1
 12887  00278E  C0A6  F0DE         	movff	_Comm_List+22,SendMessage@value
 12888  002792  C0A7  F0DF         	movff	_Comm_List+23,SendMessage@value+1
 12889  002796  ECB0  F021         	call	_SendMessage	;wreg free
 12890                           
 12891                           ;terminal.c: 250: Pcomm_List2+=2;
 12892  00279A  0E04               	movlw	4
 12893  00279C  0100               	movlb	0	; () banked
 12894  00279E  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12895  0027A0  0E00               	movlw	0
 12896  0027A2  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;terminal.c: 251: Diag_Comm2 = 7;
 12900  0027A4  0E00               	movlw	0
 12901  0027A6  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12902  0027A8  0E07               	movlw	7
 12903  0027AA  6F72               	movwf	_Diag_Comm2& (0+255),b
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;terminal.c: 252: }
 12907                           ;terminal.c: 253: break;
 12908  0027AC  0012               	return	
 12909  0027AE                     
 12910                           ; BSR set to: 0
 12911                           
 12912                           ; BSR set to: 0
 12913  0027AE  5176               	movf	_Pcomm_List& (0+255),w,b
 12914  0027B0  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12915  0027B2  E104               	bnz	u9400
 12916  0027B4  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12917  0027B6  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12918  0027B8  B4D8               	btfsc	status,2,c
 12919  0027BA  0012               	return	
 12920  0027BC                     u9400:
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;terminal.c: 256: {
 12924                           ;terminal.c: 257: SendMessage(Comm_List[6][0], Comm_List[6][1]);
 12925  0027BC  C0A8  F0DC         	movff	_Comm_List+24,SendMessage@index
 12926  0027C0  C0A9  F0DD         	movff	_Comm_List+25,SendMessage@index+1
 12927  0027C4  C0AA  F0DE         	movff	_Comm_List+26,SendMessage@value
 12928  0027C8  C0AB  F0DF         	movff	_Comm_List+27,SendMessage@value+1
 12929  0027CC  ECB0  F021         	call	_SendMessage	;wreg free
 12930                           
 12931                           ;terminal.c: 258: Pcomm_List2+=2;
 12932  0027D0  0E04               	movlw	4
 12933  0027D2  0100               	movlb	0	; () banked
 12934  0027D4  2774               	addwf	_Pcomm_List2& (0+255),f,b
 12935  0027D6  0E00               	movlw	0
 12936  0027D8  2375               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;terminal.c: 259: Diag_Comm2 = 8;
 12940  0027DA  0E00               	movlw	0
 12941  0027DC  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12942  0027DE  0E08               	movlw	8
 12943  0027E0  6F72               	movwf	_Diag_Comm2& (0+255),b
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;terminal.c: 260: }
 12947                           ;terminal.c: 261: break;
 12948  0027E2  0012               	return	
 12949  0027E4                     
 12950                           ; BSR set to: 0
 12951                           
 12952                           ; BSR set to: 0
 12953  0027E4  5176               	movf	_Pcomm_List& (0+255),w,b
 12954  0027E6  1974               	xorwf	_Pcomm_List2& (0+255),w,b
 12955  0027E8  E104               	bnz	u9410
 12956  0027EA  5177               	movf	(_Pcomm_List+1)& (0+255),w,b
 12957  0027EC  1975               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12958  0027EE  B4D8               	btfsc	status,2,c
 12959  0027F0  0012               	return	
 12960  0027F2                     u9410:
 12961                           
 12962                           ; BSR set to: 0
 12963                           ;terminal.c: 265: {
 12964                           ;terminal.c: 266: SendMessage(Comm_List[7][0], Comm_List[7][1]);
 12965  0027F2  C0AC  F0DC         	movff	_Comm_List+28,SendMessage@index
 12966  0027F6  C0AD  F0DD         	movff	_Comm_List+29,SendMessage@index+1
 12967  0027FA  C0AE  F0DE         	movff	_Comm_List+30,SendMessage@value
 12968  0027FE  C0AF  F0DF         	movff	_Comm_List+31,SendMessage@value+1
 12969  002802  ECB0  F021         	call	_SendMessage	;wreg free
 12970                           
 12971                           ;terminal.c: 267: Pcomm_List2 = &Comm_List[0][0];
 12972  002806  0E90               	movlw	low _Comm_List
 12973  002808  0100               	movlb	0	; () banked
 12974  00280A  6F74               	movwf	_Pcomm_List2& (0+255),b
 12975  00280C  0E00               	movlw	high _Comm_List
 12976  00280E  6F75               	movwf	(_Pcomm_List2+1)& (0+255),b
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;terminal.c: 268: Diag_Comm2 = 1;
 12980  002810  0E00               	movlw	0
 12981  002812  6F73               	movwf	(_Diag_Comm2+1)& (0+255),b
 12982  002814  0E01               	movlw	1
 12983  002816  6F72               	movwf	_Diag_Comm2& (0+255),b
 12984                           
 12985                           ; BSR set to: 0
 12986                           ;terminal.c: 273: }
 12987                           
 12988                           ; BSR set to: 0
 12989                           
 12990                           ;terminal.c: 272: default : break;
 12991                           
 12992                           ; BSR set to: 0
 12993                           ;terminal.c: 269: }
 12994                           ;terminal.c: 270: break;
 12995  002818  0012               	return	
 12996  00281A                     l650:
 12997                           
 12998                           ; BSR set to: 0
 12999                           
 13000                           ; BSR set to: 0
 13001  00281A  C072  F020         	movff	_Diag_Comm2,??_DIAGNOSTICxTOxPC
 13002  00281E  C073  F021         	movff	_Diag_Comm2+1,??_DIAGNOSTICxTOxPC+1
 13003                           
 13004                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13005                           ; Switch size 1, requested type "space"
 13006                           ; Number of cases is 1, Range of values is 0 to 0
 13007                           ; switch strategies available:
 13008                           ; Name         Instructions Cycles
 13009                           ; simple_byte            4     3 (average)
 13010                           ;	Chosen strategy is simple_byte
 13011  002822  5021               	movf	??_DIAGNOSTICxTOxPC+1,w,c
 13012  002824  0A00               	xorlw	0	; case 0
 13013  002826  A4D8               	btfss	status,2,c
 13014  002828  0012               	return	
 13015                           
 13016                           ; BSR set to: 0
 13017                           ; Switch size 1, requested type "space"
 13018                           ; Number of cases is 9, Range of values is 0 to 8
 13019                           ; switch strategies available:
 13020                           ; Name         Instructions Cycles
 13021                           ; simple_byte           28    15 (average)
 13022                           ;	Chosen strategy is simple_byte
 13023  00282A  5020               	movf	??_DIAGNOSTICxTOxPC,w,c
 13024  00282C  0A00               	xorlw	0	; case 0
 13025  00282E  B4D8               	btfsc	status,2,c
 13026  002830  D70B               	goto	l651
 13027  002832  0A01               	xorlw	1	; case 1
 13028  002834  B4D8               	btfsc	status,2,c
 13029  002836  D715               	goto	l653
 13030  002838  0A03               	xorlw	3	; case 2
 13031  00283A  B4D8               	btfsc	status,2,c
 13032  00283C  D731               	goto	l655
 13033  00283E  0A01               	xorlw	1	; case 3
 13034  002840  B4D8               	btfsc	status,2,c
 13035  002842  D749               	goto	l657
 13036  002844  0A07               	xorlw	7	; case 4
 13037  002846  B4D8               	btfsc	status,2,c
 13038  002848  D761               	goto	l659
 13039  00284A  0A01               	xorlw	1	; case 5
 13040  00284C  B4D8               	btfsc	status,2,c
 13041  00284E  D779               	goto	l661
 13042  002850  0A03               	xorlw	3	; case 6
 13043  002852  B4D8               	btfsc	status,2,c
 13044  002854  D791               	goto	l663
 13045  002856  0A01               	xorlw	1	; case 7
 13046  002858  B4D8               	btfsc	status,2,c
 13047  00285A  D7A9               	goto	l665
 13048  00285C  0A0F               	xorlw	15	; case 8
 13049  00285E  A4D8               	btfss	status,2,c
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;terminal.c: 274: }
 13053  002860  0012               	return	
 13054  002862  D7C0               	goto	l667
 13055  002864                     l649:
 13056                           
 13057                           ; BSR set to: 0
 13058                           ;terminal.c: 275: else{
 13059                           ;terminal.c: 276: DelayCounter++;
 13060                           
 13061                           ; BSR set to: 0
 13062  002864  4B70               	infsnz	_DelayCounter& (0+255),f,b
 13063  002866  2B71               	incf	(_DelayCounter+1)& (0+255),f,b
 13064  002868  0012               	return	
 13065  00286A                     __end_of_DIAGNOSTICxTOxPC:
 13066                           	opt stack 0
 13067                           tblptru	equ	0xFF8
 13068                           tblptrh	equ	0xFF7
 13069                           tblptrl	equ	0xFF6
 13070                           tablat	equ	0xFF5
 13071                           prodh	equ	0xFF4
 13072                           prodl	equ	0xFF3
 13073                           intcon	equ	0xFF2
 13074                           intcon2	equ	0xFF1
 13075                           postinc0	equ	0xFEE
 13076                           wreg	equ	0xFE8
 13077                           postinc1	equ	0xFE6
 13078                           postdec1	equ	0xFE5
 13079                           fsr1h	equ	0xFE2
 13080                           fsr1l	equ	0xFE1
 13081                           indf2	equ	0xFDF
 13082                           postinc2	equ	0xFDE
 13083                           postdec2	equ	0xFDD
 13084                           fsr2h	equ	0xFDA
 13085                           fsr2l	equ	0xFD9
 13086                           status	equ	0xFD8
 13087                           
 13088 ;; *************** function _SendMessage *****************
 13089 ;; Defined at:
 13090 ;;		line 185 in file "../terminal.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  index           2   34[BANK0 ] unsigned int 
 13093 ;;  value           2   36[BANK0 ] unsigned int 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;		None
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13105 ;;      Params:         0       4       0       0       0       0       0       0       0
 13106 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13108 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13109 ;;Total ram usage:        4 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    5
 13112 ;; This function calls:
 13113 ;;		_printf
 13114 ;; This function is called by:
 13115 ;;		_DIAGNOSTICxTOxPC
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text36
 13120  004360                     __ptext36:
 13121                           	opt stack 0
 13122  004360                     _SendMessage:
 13123                           	opt stack 24
 13124                           
 13125                           ;terminal.c: 191: printf("M#%d %d\r\n", index, value);
 13126                           
 13127                           ; BSR set to: 0
 13128                           ;incstack = 0
 13129  004360  0E44               	movlw	low STR_8
 13130  004362  0100               	movlb	0	; () banked
 13131  004364  6FCF               	movwf	printf@f& (0+255),b
 13132  004366  0E08               	movlw	high STR_8
 13133  004368  6FD0               	movwf	(printf@f+1)& (0+255),b
 13134  00436A  C0DC  F0D1         	movff	SendMessage@index,?_printf+2
 13135  00436E  C0DD  F0D2         	movff	SendMessage@index+1,?_printf+3
 13136  004372  C0DE  F0D3         	movff	SendMessage@value,?_printf+4
 13137  004376  C0DF  F0D4         	movff	SendMessage@value+1,?_printf+5
 13138  00437A  EC1C  F01A         	call	_printf	;wreg free
 13139  00437E  0012               	return		;funcret
 13140  004380                     __end_of_SendMessage:
 13141                           	opt stack 0
 13142                           tblptru	equ	0xFF8
 13143                           tblptrh	equ	0xFF7
 13144                           tblptrl	equ	0xFF6
 13145                           tablat	equ	0xFF5
 13146                           prodh	equ	0xFF4
 13147                           prodl	equ	0xFF3
 13148                           intcon	equ	0xFF2
 13149                           intcon2	equ	0xFF1
 13150                           postinc0	equ	0xFEE
 13151                           wreg	equ	0xFE8
 13152                           postinc1	equ	0xFE6
 13153                           postdec1	equ	0xFE5
 13154                           fsr1h	equ	0xFE2
 13155                           fsr1l	equ	0xFE1
 13156                           indf2	equ	0xFDF
 13157                           postinc2	equ	0xFDE
 13158                           postdec2	equ	0xFDD
 13159                           fsr2h	equ	0xFDA
 13160                           fsr2l	equ	0xFD9
 13161                           status	equ	0xFD8
 13162                           
 13163 ;; *************** function _printf *****************
 13164 ;; Defined at:
 13165 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 13166 ;; Parameters:    Size  Location     Type
 13167 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 13168 ;;		 -> STR_8(10), STR_7(7), STR_6(7), STR_5(7), 
 13169 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
 13170 ;; Auto vars:     Size  Location     Type
 13171 ;;  tmpval          4    0        struct .
 13172 ;;  cp              3    0        PTR const unsigned char 
 13173 ;;  val             2   31[BANK0 ] unsigned int 
 13174 ;;  ap              2   27[BANK0 ] PTR void [1]
 13175 ;;		 -> ?_printf(2), 
 13176 ;;  len             2    0        unsigned int 
 13177 ;;  c               1   33[BANK0 ] char 
 13178 ;;  prec            1   30[BANK0 ] char 
 13179 ;;  flag            1   29[BANK0 ] unsigned char 
 13180 ;; Return value:  Size  Location     Type
 13181 ;;                  2   21[BANK0 ] int 
 13182 ;; Registers used:
 13183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13189 ;;      Params:         0       6       0       0       0       0       0       0       0
 13190 ;;      Locals:         0       7       0       0       0       0       0       0       0
 13191 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13192 ;;      Totals:         1      13       0       0       0       0       0       0       0
 13193 ;;Total ram usage:       14 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    4
 13196 ;; This function calls:
 13197 ;;		___lwdiv
 13198 ;;		___lwmod
 13199 ;;		_putch
 13200 ;; This function is called by:
 13201 ;;		_READxRECEIVEDxMESSAGE
 13202 ;;		_TranslateMessage
 13203 ;;		_SendMessage
 13204 ;; This function uses a non-reentrant model
 13205 ;;
 13206                           
 13207                           	psect	text37
 13208  003438                     __ptext37:
 13209                           	opt stack 0
 13210  003438                     _printf:
 13211                           	opt stack 25
 13212                           
 13213                           ;doprnt.c: 466: va_list ap;
 13214                           ;doprnt.c: 499: signed char c;
 13215                           ;doprnt.c: 506: signed char prec;
 13216                           ;doprnt.c: 508: unsigned char flag;
 13217                           ;doprnt.c: 523: union {
 13218                           ;doprnt.c: 524: unsigned long vd;
 13219                           ;doprnt.c: 525: double integ;
 13220                           ;doprnt.c: 526: } tmpval;
 13221                           ;doprnt.c: 528: unsigned int val;
 13222                           ;doprnt.c: 529: unsigned len;
 13223                           ;doprnt.c: 530: const char * cp;
 13224                           ;doprnt.c: 533: *ap = __va_start();
 13225                           
 13226                           ;incstack = 0
 13227  003438  0ED1               	movlw	low (?_printf+2)
 13228  00343A  0100               	movlb	0	; () banked
 13229  00343C  6FD5               	movwf	printf@ap& (0+255),b
 13230  00343E  0E00               	movlw	high (?_printf+2)
 13231  003440  6FD6               	movwf	(printf@ap+1)& (0+255),b
 13232                           
 13233                           ;doprnt.c: 536: while(c = *f++) {
 13234  003442  D081               	goto	u7200
 13235  003444                     
 13236                           ; BSR set to: 0
 13237                           ;doprnt.c: 538: if(c != '%')
 13238                           
 13239                           ; BSR set to: 0
 13240  003444  0E25               	movlw	37
 13241  003446  19DB               	xorwf	printf@c& (0+255),w,b
 13242  003448  B4D8               	btfsc	status,2,c
 13243  00344A  D004               	goto	l1278
 13244                           
 13245                           ; BSR set to: 0
 13246                           ;doprnt.c: 540: {
 13247                           ;doprnt.c: 541: (putch(c) );
 13248  00344C  51DB               	movf	printf@c& (0+255),w,b
 13249  00344E  ECF7  F021         	call	_putch
 13250                           
 13251                           ;doprnt.c: 542: continue;
 13252  003452  D079               	goto	u7200
 13253  003454                     l1278:
 13254                           
 13255                           ;doprnt.c: 543: }
 13256                           ;doprnt.c: 548: flag = 0;
 13257  003454  0E00               	movlw	0
 13258  003456  0100               	movlb	0	; () banked
 13259  003458  6FD7               	movwf	printf@flag& (0+255),b
 13260                           
 13261                           ; BSR set to: 0
 13262                           
 13263                           ; BSR set to: 0
 13264                           
 13265                           ; BSR set to: 0
 13266                           ;doprnt.c: 822: }
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;doprnt.c: 813: continue;
 13270                           
 13271                           ;doprnt.c: 802: default:
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;doprnt.c: 698: case 'i':
 13275                           ;doprnt.c: 699: break;
 13276                           
 13277                           ; BSR set to: 0
 13278                           
 13279                           ;doprnt.c: 697: case 'd':
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;doprnt.c: 638: goto alldone;
 13283                           
 13284                           ;doprnt.c: 637: case 0:
 13285                           
 13286                           ;doprnt.c: 635: switch(c = *f++) {
 13287  00345A  C0CF  FFF6         	movff	printf@f,tblptrl
 13288  00345E  C0D0  FFF7         	movff	printf@f+1,tblptrh
 13289  003462  4BCF               	infsnz	printf@f& (0+255),f,b
 13290  003464  2BD0               	incf	(printf@f+1)& (0+255),f,b
 13291  003466                     	if	0	;tblptru may be non-zero
 13292  003466                     	endif
 13293  003466                     	if	0	;tblptru may be non-zero
 13294  003466                     	endif
 13295  003466  0008               	tblrd		*
 13296  003468  CFF5 F0DB          	movff	tablat,printf@c
 13297  00346C  51DB               	movf	printf@c& (0+255),w,b
 13298                           
 13299                           ; Switch size 1, requested type "space"
 13300                           ; Number of cases is 3, Range of values is 0 to 105
 13301                           ; switch strategies available:
 13302                           ; Name         Instructions Cycles
 13303                           ; simple_byte           10     6 (average)
 13304                           ;	Chosen strategy is simple_byte
 13305  00346E  0A00               	xorlw	0	; case 0
 13306  003470  B4D8               	btfsc	status,2,c
 13307  003472  0012               	return	
 13308  003474  0A64               	xorlw	100	; case 100
 13309  003476  B4D8               	btfsc	status,2,c
 13310  003478  D003               	goto	l1284
 13311  00347A  0A0D               	xorlw	13	; case 105
 13312  00347C  A4D8               	btfss	status,2,c
 13313  00347E  D063               	goto	u7200
 13314  003480                     l1284:
 13315                           
 13316                           ; BSR set to: 0
 13317                           ;doprnt.c: 1253: {
 13318                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13319                           
 13320                           ; BSR set to: 0
 13321  003480  C0D5  FFD9         	movff	printf@ap,fsr2l
 13322  003484  C0D6  FFDA         	movff	printf@ap+1,fsr2h
 13323  003488  CFDE F0D9          	movff	postinc2,printf@val
 13324  00348C  CFDD F0DA          	movff	postdec2,printf@val+1
 13325                           
 13326                           ; BSR set to: 0
 13327  003490  0E02               	movlw	2
 13328  003492  27D5               	addwf	printf@ap& (0+255),f,b
 13329  003494  0E00               	movlw	0
 13330  003496  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
 13331                           
 13332                           ; BSR set to: 0
 13333                           ;doprnt.c: 1261: if((int)val < 0) {
 13334  003498  AFDA               	btfss	(printf@val+1)& (0+255),7,b
 13335  00349A  D006               	goto	l1286
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;doprnt.c: 1262: flag |= 0x03;
 13339  00349C  0E03               	movlw	3
 13340  00349E  13D7               	iorwf	printf@flag& (0+255),f,b
 13341                           
 13342                           ; BSR set to: 0
 13343                           ;doprnt.c: 1263: val = -val;
 13344  0034A0  6DD9               	negf	printf@val& (0+255),b
 13345  0034A2  1FDA               	comf	(printf@val+1)& (0+255),f,b
 13346  0034A4  B0D8               	btfsc	status,0,c
 13347  0034A6  2BDA               	incf	(printf@val+1)& (0+255),f,b
 13348  0034A8                     l1286:
 13349                           
 13350                           ; BSR set to: 0
 13351                           ;doprnt.c: 1264: }
 13352                           ;doprnt.c: 1266: }
 13353                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13354                           
 13355                           ; BSR set to: 0
 13356  0034A8  0E01               	movlw	1
 13357  0034AA  6FDB               	movwf	printf@c& (0+255),b
 13358  0034AC                     l8140:
 13359                           
 13360                           ; BSR set to: 0
 13361  0034AC  0E05               	movlw	5
 13362  0034AE  19DB               	xorwf	printf@c& (0+255),w,b
 13363  0034B0  B4D8               	btfsc	status,2,c
 13364  0034B2  D012               	goto	u7180
 13365                           
 13366                           ; BSR set to: 0
 13367                           ;doprnt.c: 1306: if(val < dpowers[c])
 13368                           
 13369                           ; BSR set to: 0
 13370                           
 13371                           ; BSR set to: 0
 13372  0034B4  51DB               	movf	printf@c& (0+255),w,b
 13373  0034B6  0D02               	mullw	2
 13374  0034B8  0E39               	movlw	low _dpowers
 13375  0034BA  24F3               	addwf	prodl,w,c
 13376  0034BC  6EF6               	movwf	tblptrl,c
 13377  0034BE  0E08               	movlw	high _dpowers
 13378  0034C0  20F4               	addwfc	prodh,w,c
 13379  0034C2  6EF7               	movwf	tblptrh,c
 13380  0034C4                     	if	0	;There are less than 3 active tblptr bytes
 13381  0034C4                     	endif
 13382  0034C4  0009               	tblrd		*+
 13383  0034C6  50F5               	movf	tablat,w,c
 13384  0034C8  5DD9               	subwf	printf@val& (0+255),w,b
 13385  0034CA  0009               	tblrd		*+
 13386  0034CC  50F5               	movf	tablat,w,c
 13387  0034CE  59DA               	subwfb	(printf@val+1)& (0+255),w,b
 13388  0034D0  A0D8               	btfss	status,0,c
 13389  0034D2  D002               	goto	u7180
 13390                           
 13391                           ; BSR set to: 0
 13392                           
 13393                           ; BSR set to: 0
 13394                           
 13395                           ; BSR set to: 0
 13396                           ;doprnt.c: 1307: break;
 13397  0034D4  2BDB               	incf	printf@c& (0+255),f,b
 13398  0034D6  D7EA               	goto	l8140
 13399  0034D8                     u7180:
 13400                           
 13401                           ; BSR set to: 0
 13402                           ;doprnt.c: 1422: {
 13403                           ;doprnt.c: 1438: if(flag & 0x03)
 13404                           
 13405                           ; BSR set to: 0
 13406  0034D8  C0D7  F01F         	movff	printf@flag,??_printf
 13407  0034DC  0E03               	movlw	3
 13408  0034DE  161F               	andwf	??_printf,f,c
 13409  0034E0  B4D8               	btfsc	status,2,c
 13410  0034E2  D003               	goto	l1290
 13411                           
 13412                           ; BSR set to: 0
 13413                           ;doprnt.c: 1439: (putch('-') );
 13414  0034E4  0E2D               	movlw	45
 13415  0034E6  ECF7  F021         	call	_putch
 13416  0034EA                     l1290:
 13417                           
 13418                           ;doprnt.c: 1469: }
 13419                           ;doprnt.c: 1472: prec = c;
 13420  0034EA  C0DB  F0D8         	movff	printf@c,printf@prec
 13421                           
 13422                           ;doprnt.c: 1474: while(prec--) {
 13423  0034EE  D026               	goto	l1291
 13424  0034F0                     
 13425                           ;doprnt.c: 1478: {
 13426                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13427  0034F0  0100               	movlb	0	; () banked
 13428  0034F2  51D8               	movf	printf@prec& (0+255),w,b
 13429  0034F4  0D02               	mullw	2
 13430  0034F6  0E39               	movlw	low _dpowers
 13431  0034F8  24F3               	addwf	prodl,w,c
 13432  0034FA  6EF6               	movwf	tblptrl,c
 13433  0034FC  0E08               	movlw	high _dpowers
 13434  0034FE  20F4               	addwfc	prodh,w,c
 13435  003500  6EF7               	movwf	tblptrh,c
 13436  003502                     	if	0	;There are less than 3 active tblptr bytes
 13437  003502                     	endif
 13438  003502  0009               	tblrd		*+
 13439  003504  CFF5 F015          	movff	tablat,___lwdiv@divisor
 13440  003508  000A               	tblrd		*-
 13441  00350A  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
 13442  00350E  C0D9  F013         	movff	printf@val,___lwdiv@dividend
 13443  003512  C0DA  F014         	movff	printf@val+1,___lwdiv@dividend+1
 13444  003516  EC71  F020         	call	___lwdiv	;wreg free
 13445  00351A  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
 13446  00351E  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
 13447  003522  0E00               	movlw	0
 13448  003524  6E1D               	movwf	___lwmod@divisor+1,c
 13449  003526  0E0A               	movlw	10
 13450  003528  6E1C               	movwf	___lwmod@divisor,c
 13451  00352A  ECE6  F020         	call	___lwmod	;wreg free
 13452  00352E  501A               	movf	?___lwmod,w,c
 13453  003530  0F30               	addlw	48
 13454  003532  0100               	movlb	0	; () banked
 13455  003534  6FDB               	movwf	printf@c& (0+255),b
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;doprnt.c: 1523: }
 13459                           ;doprnt.c: 1524: (putch(c) );
 13460  003536  51DB               	movf	printf@c& (0+255),w,b
 13461  003538  ECF7  F021         	call	_putch
 13462  00353C                     l1291:
 13463  00353C  0100               	movlb	0	; () banked
 13464  00353E  07D8               	decf	printf@prec& (0+255),f,b
 13465  003540  29D8               	incf	printf@prec& (0+255),w,b
 13466  003542  A4D8               	btfss	status,2,c
 13467  003544  D7D5               	goto	l1292
 13468  003546                     u7200:
 13469                           
 13470                           ; BSR set to: 0
 13471                           
 13472                           ; BSR set to: 0
 13473  003546  C0CF  FFF6         	movff	printf@f,tblptrl
 13474  00354A  C0D0  FFF7         	movff	printf@f+1,tblptrh
 13475  00354E  0100               	movlb	0	; () banked
 13476  003550  4BCF               	infsnz	printf@f& (0+255),f,b
 13477  003552  2BD0               	incf	(printf@f+1)& (0+255),f,b
 13478  003554                     	if	0	;tblptru may be non-zero
 13479  003554                     	endif
 13480  003554                     	if	0	;tblptru may be non-zero
 13481  003554                     	endif
 13482  003554  0008               	tblrd		*
 13483  003556  CFF5 F0DB          	movff	tablat,printf@c
 13484  00355A  51DB               	movf	printf@c& (0+255),w,b
 13485  00355C  B4D8               	btfsc	status,2,c
 13486  00355E  0012               	return	
 13487  003560  D771               	goto	l1277
 13488  003562                     __end_of_printf:
 13489                           	opt stack 0
 13490                           tblptru	equ	0xFF8
 13491                           tblptrh	equ	0xFF7
 13492                           tblptrl	equ	0xFF6
 13493                           tablat	equ	0xFF5
 13494                           prodh	equ	0xFF4
 13495                           prodl	equ	0xFF3
 13496                           intcon	equ	0xFF2
 13497                           intcon2	equ	0xFF1
 13498                           postinc0	equ	0xFEE
 13499                           wreg	equ	0xFE8
 13500                           postinc1	equ	0xFE6
 13501                           postdec1	equ	0xFE5
 13502                           fsr1h	equ	0xFE2
 13503                           fsr1l	equ	0xFE1
 13504                           indf2	equ	0xFDF
 13505                           postinc2	equ	0xFDE
 13506                           postdec2	equ	0xFDD
 13507                           fsr2h	equ	0xFDA
 13508                           fsr2l	equ	0xFD9
 13509                           status	equ	0xFD8
 13510                           
 13511 ;; *************** function _putch *****************
 13512 ;; Defined at:
 13513 ;;		line 178 in file "../eusart1.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;  data            1    wreg     unsigned char 
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  data            1   18[COMRAM] unsigned char 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      void 
 13520 ;; Registers used:
 13521 ;;		wreg
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13527 ;;      Params:         0       0       0       0       0       0       0       0       0
 13528 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13530 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13531 ;;Total ram usage:        1 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    3
 13534 ;; This function calls:
 13535 ;;		Nothing
 13536 ;; This function is called by:
 13537 ;;		_printf
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           	psect	text38
 13542  0043EE                     __ptext38:
 13543                           	opt stack 0
 13544  0043EE                     _putch:
 13545                           	opt stack 25
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;incstack = 0
 13549                           ;putch@data stored from wreg
 13550  0043EE  6E13               	movwf	putch@data,c
 13551  0043F0                     
 13552                           ;eusart1.c: 180: continue;
 13553                           
 13554                           ;eusart1.c: 179: while(! TXIF)
 13555  0043F0  A89E               	btfss	3998,4,c	;volatile
 13556  0043F2  D7FE               	goto	l7576
 13557                           
 13558                           ;eusart1.c: 181: TXREG1 = data;
 13559  0043F4  C013  FFAD         	movff	putch@data,4013	;volatile
 13560  0043F8  0012               	return		;funcret
 13561  0043FA                     __end_of_putch:
 13562                           	opt stack 0
 13563                           tblptru	equ	0xFF8
 13564                           tblptrh	equ	0xFF7
 13565                           tblptrl	equ	0xFF6
 13566                           tablat	equ	0xFF5
 13567                           prodh	equ	0xFF4
 13568                           prodl	equ	0xFF3
 13569                           intcon	equ	0xFF2
 13570                           intcon2	equ	0xFF1
 13571                           postinc0	equ	0xFEE
 13572                           wreg	equ	0xFE8
 13573                           postinc1	equ	0xFE6
 13574                           postdec1	equ	0xFE5
 13575                           fsr1h	equ	0xFE2
 13576                           fsr1l	equ	0xFE1
 13577                           indf2	equ	0xFDF
 13578                           postinc2	equ	0xFDE
 13579                           postdec2	equ	0xFDD
 13580                           fsr2h	equ	0xFDA
 13581                           fsr2l	equ	0xFD9
 13582                           status	equ	0xFD8
 13583                           
 13584 ;; *************** function ___lwmod *****************
 13585 ;; Defined at:
 13586 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;  dividend        2   25[COMRAM] unsigned int 
 13589 ;;  divisor         2   27[COMRAM] unsigned int 
 13590 ;; Auto vars:     Size  Location     Type
 13591 ;;  counter         1   29[COMRAM] unsigned char 
 13592 ;; Return value:  Size  Location     Type
 13593 ;;                  2   25[COMRAM] unsigned int 
 13594 ;; Registers used:
 13595 ;;		wreg, status,2, status,0
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13601 ;;      Params:         4       0       0       0       0       0       0       0       0
 13602 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13603 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13604 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13605 ;;Total ram usage:        5 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    3
 13608 ;; This function calls:
 13609 ;;		Nothing
 13610 ;; This function is called by:
 13611 ;;		_printf
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           	psect	text39
 13616  0041CC                     __ptext39:
 13617                           	opt stack 0
 13618  0041CC                     ___lwmod:
 13619                           	opt stack 25
 13620                           
 13621                           ;incstack = 0
 13622  0041CC  501C               	movf	___lwmod@divisor,w,c
 13623  0041CE  101D               	iorwf	___lwmod@divisor+1,w,c
 13624  0041D0  B4D8               	btfsc	status,2,c
 13625  0041D2  D018               	goto	l1741
 13626  0041D4  0E01               	movlw	1
 13627  0041D6  6E1E               	movwf	___lwmod@counter,c
 13628  0041D8  D004               	goto	l1736
 13629  0041DA  90D8               	bcf	status,0,c
 13630  0041DC  361C               	rlcf	___lwmod@divisor,f,c
 13631  0041DE  361D               	rlcf	___lwmod@divisor+1,f,c
 13632  0041E0  2A1E               	incf	___lwmod@counter,f,c
 13633  0041E2                     l1736:
 13634  0041E2  AE1D               	btfss	___lwmod@divisor+1,7,c
 13635  0041E4  D7FA               	goto	l1737
 13636  0041E6                     u6620:
 13637  0041E6  501C               	movf	___lwmod@divisor,w,c
 13638  0041E8  5C1A               	subwf	___lwmod@dividend,w,c
 13639  0041EA  501D               	movf	___lwmod@divisor+1,w,c
 13640  0041EC  581B               	subwfb	___lwmod@dividend+1,w,c
 13641  0041EE  A0D8               	btfss	status,0,c
 13642  0041F0  D004               	goto	l1740
 13643  0041F2  501C               	movf	___lwmod@divisor,w,c
 13644  0041F4  5E1A               	subwf	___lwmod@dividend,f,c
 13645  0041F6  501D               	movf	___lwmod@divisor+1,w,c
 13646  0041F8  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13647  0041FA                     l1740:
 13648  0041FA  90D8               	bcf	status,0,c
 13649  0041FC  321D               	rrcf	___lwmod@divisor+1,f,c
 13650  0041FE  321C               	rrcf	___lwmod@divisor,f,c
 13651  004200  2E1E               	decfsz	___lwmod@counter,f,c
 13652  004202  D7F1               	goto	u6620
 13653  004204                     l1741:
 13654  004204  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13655  004208  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13656  00420C  0012               	return		;funcret
 13657  00420E                     __end_of___lwmod:
 13658                           	opt stack 0
 13659                           tblptru	equ	0xFF8
 13660                           tblptrh	equ	0xFF7
 13661                           tblptrl	equ	0xFF6
 13662                           tablat	equ	0xFF5
 13663                           prodh	equ	0xFF4
 13664                           prodl	equ	0xFF3
 13665                           intcon	equ	0xFF2
 13666                           intcon2	equ	0xFF1
 13667                           postinc0	equ	0xFEE
 13668                           wreg	equ	0xFE8
 13669                           postinc1	equ	0xFE6
 13670                           postdec1	equ	0xFE5
 13671                           fsr1h	equ	0xFE2
 13672                           fsr1l	equ	0xFE1
 13673                           indf2	equ	0xFDF
 13674                           postinc2	equ	0xFDE
 13675                           postdec2	equ	0xFDD
 13676                           fsr2h	equ	0xFDA
 13677                           fsr2l	equ	0xFD9
 13678                           status	equ	0xFD8
 13679                           
 13680 ;; *************** function ___lwdiv *****************
 13681 ;; Defined at:
 13682 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13683 ;; Parameters:    Size  Location     Type
 13684 ;;  dividend        2   18[COMRAM] unsigned int 
 13685 ;;  divisor         2   20[COMRAM] unsigned int 
 13686 ;; Auto vars:     Size  Location     Type
 13687 ;;  quotient        2   23[COMRAM] unsigned int 
 13688 ;;  counter         1   22[COMRAM] unsigned char 
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  2   18[COMRAM] unsigned int 
 13691 ;; Registers used:
 13692 ;;		wreg, status,2, status,0
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13698 ;;      Params:         4       0       0       0       0       0       0       0       0
 13699 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13700 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13701 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13702 ;;Total ram usage:        7 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; Hardware stack levels required when called:    3
 13705 ;; This function calls:
 13706 ;;		Nothing
 13707 ;; This function is called by:
 13708 ;;		_printf
 13709 ;; This function uses a non-reentrant model
 13710 ;;
 13711                           
 13712                           	psect	text40
 13713  0040E2                     __ptext40:
 13714                           	opt stack 0
 13715  0040E2                     ___lwdiv:
 13716                           	opt stack 25
 13717                           
 13718                           ;incstack = 0
 13719  0040E2  0E00               	movlw	0
 13720  0040E4  6E19               	movwf	___lwdiv@quotient+1,c
 13721  0040E6  0E00               	movlw	0
 13722  0040E8  6E18               	movwf	___lwdiv@quotient,c
 13723  0040EA  5015               	movf	___lwdiv@divisor,w,c
 13724  0040EC  1016               	iorwf	___lwdiv@divisor+1,w,c
 13725  0040EE  B4D8               	btfsc	status,2,c
 13726  0040F0  D01C               	goto	l1731
 13727  0040F2  0E01               	movlw	1
 13728  0040F4  6E17               	movwf	___lwdiv@counter,c
 13729  0040F6  D004               	goto	l1726
 13730  0040F8  90D8               	bcf	status,0,c
 13731  0040FA  3615               	rlcf	___lwdiv@divisor,f,c
 13732  0040FC  3616               	rlcf	___lwdiv@divisor+1,f,c
 13733  0040FE  2A17               	incf	___lwdiv@counter,f,c
 13734  004100                     l1726:
 13735  004100  AE16               	btfss	___lwdiv@divisor+1,7,c
 13736  004102  D7FA               	goto	l1727
 13737  004104                     u6590:
 13738  004104  90D8               	bcf	status,0,c
 13739  004106  3618               	rlcf	___lwdiv@quotient,f,c
 13740  004108  3619               	rlcf	___lwdiv@quotient+1,f,c
 13741  00410A  5015               	movf	___lwdiv@divisor,w,c
 13742  00410C  5C13               	subwf	___lwdiv@dividend,w,c
 13743  00410E  5016               	movf	___lwdiv@divisor+1,w,c
 13744  004110  5814               	subwfb	___lwdiv@dividend+1,w,c
 13745  004112  A0D8               	btfss	status,0,c
 13746  004114  D005               	goto	l1730
 13747  004116  5015               	movf	___lwdiv@divisor,w,c
 13748  004118  5E13               	subwf	___lwdiv@dividend,f,c
 13749  00411A  5016               	movf	___lwdiv@divisor+1,w,c
 13750  00411C  5A14               	subwfb	___lwdiv@dividend+1,f,c
 13751  00411E  8018               	bsf	___lwdiv@quotient,0,c
 13752  004120                     l1730:
 13753  004120  90D8               	bcf	status,0,c
 13754  004122  3216               	rrcf	___lwdiv@divisor+1,f,c
 13755  004124  3215               	rrcf	___lwdiv@divisor,f,c
 13756  004126  2E17               	decfsz	___lwdiv@counter,f,c
 13757  004128  D7ED               	goto	u6590
 13758  00412A                     l1731:
 13759  00412A  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
 13760  00412E  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13761  004132  0012               	return		;funcret
 13762  004134                     __end_of___lwdiv:
 13763                           	opt stack 0
 13764                           tblptru	equ	0xFF8
 13765                           tblptrh	equ	0xFF7
 13766                           tblptrl	equ	0xFF6
 13767                           tablat	equ	0xFF5
 13768                           prodh	equ	0xFF4
 13769                           prodl	equ	0xFF3
 13770                           intcon	equ	0xFF2
 13771                           intcon2	equ	0xFF1
 13772                           postinc0	equ	0xFEE
 13773                           wreg	equ	0xFE8
 13774                           postinc1	equ	0xFE6
 13775                           postdec1	equ	0xFE5
 13776                           fsr1h	equ	0xFE2
 13777                           fsr1l	equ	0xFE1
 13778                           indf2	equ	0xFDF
 13779                           postinc2	equ	0xFDE
 13780                           postdec2	equ	0xFDD
 13781                           fsr2h	equ	0xFDA
 13782                           fsr2l	equ	0xFD9
 13783                           status	equ	0xFD8
 13784                           
 13785 ;; *************** function _APIxInitialize *****************
 13786 ;; Defined at:
 13787 ;;		line 33 in file "../api.c"
 13788 ;; Parameters:    Size  Location     Type
 13789 ;;		None
 13790 ;; Auto vars:     Size  Location     Type
 13791 ;;  i               2   18[COMRAM] unsigned int 
 13792 ;; Return value:  Size  Location     Type
 13793 ;;                  1    wreg      void 
 13794 ;; Registers used:
 13795 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13796 ;; Tracked objects:
 13797 ;;		On entry : 0/0
 13798 ;;		On exit  : 0/0
 13799 ;;		Unchanged: 0/0
 13800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13801 ;;      Params:         0       0       0       0       0       0       0       0       0
 13802 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13803 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13804 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13805 ;;Total ram usage:        2 bytes
 13806 ;; Hardware stack levels used:    1
 13807 ;; Hardware stack levels required when called:    3
 13808 ;; This function calls:
 13809 ;;		Nothing
 13810 ;; This function is called by:
 13811 ;;		_main
 13812 ;; This function uses a non-reentrant model
 13813 ;;
 13814                           
 13815                           	psect	text41
 13816  001D5A                     __ptext41:
 13817                           	opt stack 0
 13818  001D5A                     _APIxInitialize:
 13819                           	opt stack 27
 13820                           
 13821                           ;api.c: 35: unsigned int i;
 13822                           ;api.c: 36: for(i = 0; i < (89); i++ )
 13823                           
 13824                           ;incstack = 0
 13825  001D5A  0E00               	movlw	0
 13826  001D5C  6E14               	movwf	APIxInitialize@i+1,c
 13827  001D5E  0E00               	movlw	0
 13828  001D60  6E13               	movwf	APIxInitialize@i,c
 13829  001D62                     l6190:
 13830  001D62  5014               	movf	APIxInitialize@i+1,w,c
 13831  001D64  E12E               	bnz	l6200
 13832  001D66  0E59               	movlw	89
 13833  001D68  5C13               	subwf	APIxInitialize@i,w,c
 13834  001D6A  B0D8               	btfsc	status,0,c
 13835  001D6C  D02A               	goto	u5290
 13836                           
 13837                           ;api.c: 37: {
 13838                           ;api.c: 38: API_RW[i] = 0;
 13839  001D6E  90D8               	bcf	status,0,c
 13840  001D70  3413               	rlcf	APIxInitialize@i,w,c
 13841  001D72  6ED9               	movwf	fsr2l,c
 13842  001D74  3414               	rlcf	APIxInitialize@i+1,w,c
 13843  001D76  6EDA               	movwf	fsr2h,c
 13844  001D78  0E00               	movlw	low _API_RW
 13845  001D7A  26D9               	addwf	fsr2l,f,c
 13846  001D7C  0E02               	movlw	high _API_RW
 13847  001D7E  22DA               	addwfc	fsr2h,f,c
 13848  001D80  0E00               	movlw	0
 13849  001D82  6EDE               	movwf	postinc2,c
 13850  001D84  0E00               	movlw	0
 13851  001D86  6EDD               	movwf	postdec2,c
 13852                           
 13853                           ;api.c: 39: API[i] = 0;
 13854  001D88  90D8               	bcf	status,0,c
 13855  001D8A  3413               	rlcf	APIxInitialize@i,w,c
 13856  001D8C  6ED9               	movwf	fsr2l,c
 13857  001D8E  3414               	rlcf	APIxInitialize@i+1,w,c
 13858  001D90  6EDA               	movwf	fsr2h,c
 13859  001D92  0E00               	movlw	low _API
 13860  001D94  26D9               	addwf	fsr2l,f,c
 13861  001D96  0E01               	movlw	high _API
 13862  001D98  22DA               	addwfc	fsr2h,f,c
 13863  001D9A  0E00               	movlw	0
 13864  001D9C  6EDE               	movwf	postinc2,c
 13865  001D9E  0E00               	movlw	0
 13866  001DA0  6EDD               	movwf	postdec2,c
 13867                           
 13868                           ;api.c: 40: API_EEPROM[i] = 0xFFFF;
 13869  001DA2  90D8               	bcf	status,0,c
 13870  001DA4  3413               	rlcf	APIxInitialize@i,w,c
 13871  001DA6  6ED9               	movwf	fsr2l,c
 13872  001DA8  3414               	rlcf	APIxInitialize@i+1,w,c
 13873  001DAA  6EDA               	movwf	fsr2h,c
 13874  001DAC  0E00               	movlw	low _API_EEPROM
 13875  001DAE  26D9               	addwf	fsr2l,f,c
 13876  001DB0  0E03               	movlw	high _API_EEPROM
 13877  001DB2  22DA               	addwfc	fsr2h,f,c
 13878  001DB4  0EFF               	movlw	255
 13879  001DB6  6EDE               	movwf	postinc2,c
 13880  001DB8  0EFF               	movlw	255
 13881  001DBA  6EDD               	movwf	postdec2,c
 13882  001DBC  4A13               	infsnz	APIxInitialize@i,f,c
 13883  001DBE  2A14               	incf	APIxInitialize@i+1,f,c
 13884  001DC0  D7D0               	goto	l6190
 13885  001DC2                     u5290:
 13886  001DC2                     l6200:
 13887                           
 13888                           ;api.c: 41: }
 13889                           ;api.c: 44: API_RW[16] = 0;
 13890  001DC2  0E00               	movlw	0
 13891  001DC4  0102               	movlb	2	; () banked
 13892  001DC6  6F21               	movwf	(_API_RW+33)& (0+255),b
 13893  001DC8  0E00               	movlw	0
 13894  001DCA  6F20               	movwf	(_API_RW+32)& (0+255),b
 13895                           
 13896                           ;api.c: 45: API_RW[17] = 0;
 13897  001DCC  0E00               	movlw	0
 13898  001DCE  6F23               	movwf	(_API_RW+35)& (0+255),b
 13899  001DD0  0E00               	movlw	0
 13900  001DD2  6F22               	movwf	(_API_RW+34)& (0+255),b
 13901                           
 13902                           ;api.c: 46: API_RW[18] = 1;
 13903  001DD4  0E00               	movlw	0
 13904  001DD6  6F25               	movwf	(_API_RW+37)& (0+255),b
 13905  001DD8  0E01               	movlw	1
 13906  001DDA  6F24               	movwf	(_API_RW+36)& (0+255),b
 13907                           
 13908                           ;api.c: 47: API_RW[19] = 1;
 13909  001DDC  0E00               	movlw	0
 13910  001DDE  6F27               	movwf	(_API_RW+39)& (0+255),b
 13911  001DE0  0E01               	movlw	1
 13912  001DE2  6F26               	movwf	(_API_RW+38)& (0+255),b
 13913                           
 13914                           ;api.c: 48: API_RW[20] = 1;
 13915  001DE4  0E00               	movlw	0
 13916  001DE6  6F29               	movwf	(_API_RW+41)& (0+255),b
 13917  001DE8  0E01               	movlw	1
 13918  001DEA  6F28               	movwf	(_API_RW+40)& (0+255),b
 13919                           
 13920                           ;api.c: 49: API_RW[21] = 1;
 13921  001DEC  0E00               	movlw	0
 13922  001DEE  6F2B               	movwf	(_API_RW+43)& (0+255),b
 13923  001DF0  0E01               	movlw	1
 13924  001DF2  6F2A               	movwf	(_API_RW+42)& (0+255),b
 13925                           
 13926                           ;api.c: 50: API_RW[22] = 1;
 13927  001DF4  0E00               	movlw	0
 13928  001DF6  6F2D               	movwf	(_API_RW+45)& (0+255),b
 13929  001DF8  0E01               	movlw	1
 13930  001DFA  6F2C               	movwf	(_API_RW+44)& (0+255),b
 13931                           
 13932                           ;api.c: 51: API_RW[23] = 1;
 13933  001DFC  0E00               	movlw	0
 13934  001DFE  6F2F               	movwf	(_API_RW+47)& (0+255),b
 13935  001E00  0E01               	movlw	1
 13936  001E02  6F2E               	movwf	(_API_RW+46)& (0+255),b
 13937                           
 13938                           ;api.c: 52: API_RW[24] = 1;
 13939  001E04  0E00               	movlw	0
 13940  001E06  6F31               	movwf	(_API_RW+49)& (0+255),b
 13941  001E08  0E01               	movlw	1
 13942  001E0A  6F30               	movwf	(_API_RW+48)& (0+255),b
 13943                           
 13944                           ;api.c: 53: API_RW[25] = 1;
 13945  001E0C  0E00               	movlw	0
 13946  001E0E  6F33               	movwf	(_API_RW+51)& (0+255),b
 13947  001E10  0E01               	movlw	1
 13948  001E12  6F32               	movwf	(_API_RW+50)& (0+255),b
 13949                           
 13950                           ;api.c: 54: API_RW[26] = 1;
 13951  001E14  0E00               	movlw	0
 13952  001E16  6F35               	movwf	(_API_RW+53)& (0+255),b
 13953  001E18  0E01               	movlw	1
 13954  001E1A  6F34               	movwf	(_API_RW+52)& (0+255),b
 13955                           
 13956                           ;api.c: 55: API_RW[27] = 1;
 13957  001E1C  0E00               	movlw	0
 13958  001E1E  6F37               	movwf	(_API_RW+55)& (0+255),b
 13959  001E20  0E01               	movlw	1
 13960  001E22  6F36               	movwf	(_API_RW+54)& (0+255),b
 13961                           
 13962                           ;api.c: 56: API_RW[28] = 0;
 13963  001E24  0E00               	movlw	0
 13964  001E26  6F39               	movwf	(_API_RW+57)& (0+255),b
 13965  001E28  0E00               	movlw	0
 13966  001E2A  6F38               	movwf	(_API_RW+56)& (0+255),b
 13967                           
 13968                           ;api.c: 57: API_RW[29] = 0;
 13969  001E2C  0E00               	movlw	0
 13970  001E2E  6F3B               	movwf	(_API_RW+59)& (0+255),b
 13971  001E30  0E00               	movlw	0
 13972  001E32  6F3A               	movwf	(_API_RW+58)& (0+255),b
 13973                           
 13974                           ;api.c: 58: API_RW[30] = 0;
 13975  001E34  0E00               	movlw	0
 13976  001E36  6F3D               	movwf	(_API_RW+61)& (0+255),b
 13977  001E38  0E00               	movlw	0
 13978  001E3A  6F3C               	movwf	(_API_RW+60)& (0+255),b
 13979                           
 13980                           ;api.c: 59: API_RW[31] = 0;
 13981  001E3C  0E00               	movlw	0
 13982  001E3E  6F3F               	movwf	(_API_RW+63)& (0+255),b
 13983  001E40  0E00               	movlw	0
 13984  001E42  6F3E               	movwf	(_API_RW+62)& (0+255),b
 13985                           
 13986                           ;api.c: 60: API_RW[32] = 0;
 13987  001E44  0E00               	movlw	0
 13988  001E46  6F41               	movwf	(_API_RW+65)& (0+255),b
 13989  001E48  0E00               	movlw	0
 13990  001E4A  6F40               	movwf	(_API_RW+64)& (0+255),b
 13991                           
 13992                           ;api.c: 61: API_RW[33] = 0;
 13993  001E4C  0E00               	movlw	0
 13994  001E4E  6F43               	movwf	(_API_RW+67)& (0+255),b
 13995  001E50  0E00               	movlw	0
 13996  001E52  6F42               	movwf	(_API_RW+66)& (0+255),b
 13997                           
 13998                           ;api.c: 62: API_RW[34] = 0;
 13999  001E54  0E00               	movlw	0
 14000  001E56  6F45               	movwf	(_API_RW+69)& (0+255),b
 14001  001E58  0E00               	movlw	0
 14002  001E5A  6F44               	movwf	(_API_RW+68)& (0+255),b
 14003                           
 14004                           ;api.c: 63: API_RW[35] = 0;
 14005  001E5C  0E00               	movlw	0
 14006  001E5E  6F47               	movwf	(_API_RW+71)& (0+255),b
 14007  001E60  0E00               	movlw	0
 14008  001E62  6F46               	movwf	(_API_RW+70)& (0+255),b
 14009                           
 14010                           ;api.c: 64: API_RW[36] = 0;
 14011  001E64  0E00               	movlw	0
 14012  001E66  6F49               	movwf	(_API_RW+73)& (0+255),b
 14013  001E68  0E00               	movlw	0
 14014  001E6A  6F48               	movwf	(_API_RW+72)& (0+255),b
 14015                           
 14016                           ;api.c: 65: API_RW[37] = 0;
 14017  001E6C  0E00               	movlw	0
 14018  001E6E  6F4B               	movwf	(_API_RW+75)& (0+255),b
 14019  001E70  0E00               	movlw	0
 14020  001E72  6F4A               	movwf	(_API_RW+74)& (0+255),b
 14021                           
 14022                           ;api.c: 66: API_RW[38] = 0;
 14023  001E74  0E00               	movlw	0
 14024  001E76  6F4D               	movwf	(_API_RW+77)& (0+255),b
 14025  001E78  0E00               	movlw	0
 14026  001E7A  6F4C               	movwf	(_API_RW+76)& (0+255),b
 14027                           
 14028                           ;api.c: 67: API_RW[39] = 1;
 14029  001E7C  0E00               	movlw	0
 14030  001E7E  6F4F               	movwf	(_API_RW+79)& (0+255),b
 14031  001E80  0E01               	movlw	1
 14032  001E82  6F4E               	movwf	(_API_RW+78)& (0+255),b
 14033                           
 14034                           ;api.c: 68: API_RW[40] = 1;
 14035  001E84  0E00               	movlw	0
 14036  001E86  6F51               	movwf	(_API_RW+81)& (0+255),b
 14037  001E88  0E01               	movlw	1
 14038  001E8A  6F50               	movwf	(_API_RW+80)& (0+255),b
 14039                           
 14040                           ;api.c: 69: API_RW[41] = 0;
 14041  001E8C  0E00               	movlw	0
 14042  001E8E  6F53               	movwf	(_API_RW+83)& (0+255),b
 14043  001E90  0E00               	movlw	0
 14044  001E92  6F52               	movwf	(_API_RW+82)& (0+255),b
 14045                           
 14046                           ;api.c: 70: API_RW[42] = 0;
 14047  001E94  0E00               	movlw	0
 14048  001E96  6F55               	movwf	(_API_RW+85)& (0+255),b
 14049  001E98  0E00               	movlw	0
 14050  001E9A  6F54               	movwf	(_API_RW+84)& (0+255),b
 14051                           
 14052                           ;api.c: 71: API_RW[43] = 0;
 14053  001E9C  0E00               	movlw	0
 14054  001E9E  6F57               	movwf	(_API_RW+87)& (0+255),b
 14055  001EA0  0E00               	movlw	0
 14056  001EA2  6F56               	movwf	(_API_RW+86)& (0+255),b
 14057                           
 14058                           ;api.c: 72: API_RW[44] = 0;
 14059  001EA4  0E00               	movlw	0
 14060  001EA6  6F59               	movwf	(_API_RW+89)& (0+255),b
 14061  001EA8  0E00               	movlw	0
 14062  001EAA  6F58               	movwf	(_API_RW+88)& (0+255),b
 14063                           
 14064                           ;api.c: 73: API_RW[45] = 1;
 14065  001EAC  0E00               	movlw	0
 14066  001EAE  6F5B               	movwf	(_API_RW+91)& (0+255),b
 14067  001EB0  0E01               	movlw	1
 14068  001EB2  6F5A               	movwf	(_API_RW+90)& (0+255),b
 14069                           
 14070                           ;api.c: 74: API_RW[46] = 1;
 14071  001EB4  0E00               	movlw	0
 14072  001EB6  6F5D               	movwf	(_API_RW+93)& (0+255),b
 14073  001EB8  0E01               	movlw	1
 14074  001EBA  6F5C               	movwf	(_API_RW+92)& (0+255),b
 14075                           
 14076                           ;api.c: 75: API_RW[47] = 1;
 14077  001EBC  0E00               	movlw	0
 14078  001EBE  6F5F               	movwf	(_API_RW+95)& (0+255),b
 14079  001EC0  0E01               	movlw	1
 14080  001EC2  6F5E               	movwf	(_API_RW+94)& (0+255),b
 14081                           
 14082                           ;api.c: 76: API_RW[48] = 1;
 14083  001EC4  0E00               	movlw	0
 14084  001EC6  6F61               	movwf	(_API_RW+97)& (0+255),b
 14085  001EC8  0E01               	movlw	1
 14086  001ECA  6F60               	movwf	(_API_RW+96)& (0+255),b
 14087                           
 14088                           ;api.c: 77: API_RW[49] = 1;
 14089  001ECC  0E00               	movlw	0
 14090  001ECE  6F63               	movwf	(_API_RW+99)& (0+255),b
 14091  001ED0  0E01               	movlw	1
 14092  001ED2  6F62               	movwf	(_API_RW+98)& (0+255),b
 14093                           
 14094                           ;api.c: 78: API_RW[50] = 1;
 14095  001ED4  0E00               	movlw	0
 14096  001ED6  6F65               	movwf	(_API_RW+101)& (0+255),b
 14097  001ED8  0E01               	movlw	1
 14098  001EDA  6F64               	movwf	(_API_RW+100)& (0+255),b
 14099                           
 14100                           ;api.c: 79: API_RW[51] = 1;
 14101  001EDC  0E00               	movlw	0
 14102  001EDE  6F67               	movwf	(_API_RW+103)& (0+255),b
 14103  001EE0  0E01               	movlw	1
 14104  001EE2  6F66               	movwf	(_API_RW+102)& (0+255),b
 14105                           
 14106                           ;api.c: 80: API_RW[52] = 1;
 14107  001EE4  0E00               	movlw	0
 14108  001EE6  6F69               	movwf	(_API_RW+105)& (0+255),b
 14109  001EE8  0E01               	movlw	1
 14110  001EEA  6F68               	movwf	(_API_RW+104)& (0+255),b
 14111                           
 14112                           ;api.c: 81: API_RW[53] = 1;
 14113  001EEC  0E00               	movlw	0
 14114  001EEE  6F6B               	movwf	(_API_RW+107)& (0+255),b
 14115  001EF0  0E01               	movlw	1
 14116  001EF2  6F6A               	movwf	(_API_RW+106)& (0+255),b
 14117                           
 14118                           ;api.c: 82: API_RW[54] = 1;
 14119  001EF4  0E00               	movlw	0
 14120  001EF6  6F6D               	movwf	(_API_RW+109)& (0+255),b
 14121  001EF8  0E01               	movlw	1
 14122  001EFA  6F6C               	movwf	(_API_RW+108)& (0+255),b
 14123                           
 14124                           ;api.c: 83: API_RW[55] = 1;
 14125  001EFC  0E00               	movlw	0
 14126  001EFE  6F6F               	movwf	(_API_RW+111)& (0+255),b
 14127  001F00  0E01               	movlw	1
 14128  001F02  6F6E               	movwf	(_API_RW+110)& (0+255),b
 14129                           
 14130                           ;api.c: 84: API_RW[56] = 1;
 14131  001F04  0E00               	movlw	0
 14132  001F06  6F71               	movwf	(_API_RW+113)& (0+255),b
 14133  001F08  0E01               	movlw	1
 14134  001F0A  6F70               	movwf	(_API_RW+112)& (0+255),b
 14135                           
 14136                           ;api.c: 85: API_RW[57] = 1;
 14137  001F0C  0E00               	movlw	0
 14138  001F0E  6F73               	movwf	(_API_RW+115)& (0+255),b
 14139  001F10  0E01               	movlw	1
 14140  001F12  6F72               	movwf	(_API_RW+114)& (0+255),b
 14141                           
 14142                           ;api.c: 86: API_RW[58] = 1;
 14143  001F14  0E00               	movlw	0
 14144  001F16  6F75               	movwf	(_API_RW+117)& (0+255),b
 14145  001F18  0E01               	movlw	1
 14146  001F1A  6F74               	movwf	(_API_RW+116)& (0+255),b
 14147                           
 14148                           ;api.c: 87: API_RW[59] = 1;
 14149  001F1C  0E00               	movlw	0
 14150  001F1E  6F77               	movwf	(_API_RW+119)& (0+255),b
 14151  001F20  0E01               	movlw	1
 14152  001F22  6F76               	movwf	(_API_RW+118)& (0+255),b
 14153                           
 14154                           ;api.c: 88: API_RW[60] = 1;
 14155  001F24  0E00               	movlw	0
 14156  001F26  6F79               	movwf	(_API_RW+121)& (0+255),b
 14157  001F28  0E01               	movlw	1
 14158  001F2A  6F78               	movwf	(_API_RW+120)& (0+255),b
 14159                           
 14160                           ;api.c: 89: API_RW[61] = 0;
 14161  001F2C  0E00               	movlw	0
 14162  001F2E  6F7B               	movwf	(_API_RW+123)& (0+255),b
 14163  001F30  0E00               	movlw	0
 14164  001F32  6F7A               	movwf	(_API_RW+122)& (0+255),b
 14165                           
 14166                           ;api.c: 90: API_RW[62] = 0;
 14167  001F34  0E00               	movlw	0
 14168  001F36  6F7D               	movwf	(_API_RW+125)& (0+255),b
 14169  001F38  0E00               	movlw	0
 14170  001F3A  6F7C               	movwf	(_API_RW+124)& (0+255),b
 14171                           
 14172                           ;api.c: 91: API_RW[63] = 0;
 14173  001F3C  0E00               	movlw	0
 14174  001F3E  6F7F               	movwf	(_API_RW+127)& (0+255),b
 14175  001F40  0E00               	movlw	0
 14176  001F42  6F7E               	movwf	(_API_RW+126)& (0+255),b
 14177                           
 14178                           ;api.c: 92: API_RW[64] = 0;
 14179  001F44  0E00               	movlw	0
 14180  001F46  6F81               	movwf	(_API_RW+129)& (0+255),b
 14181  001F48  0E00               	movlw	0
 14182  001F4A  6F80               	movwf	(_API_RW+128)& (0+255),b
 14183                           
 14184                           ;api.c: 93: API_RW[65] = 0;
 14185  001F4C  0E00               	movlw	0
 14186  001F4E  6F83               	movwf	(_API_RW+131)& (0+255),b
 14187  001F50  0E00               	movlw	0
 14188  001F52  6F82               	movwf	(_API_RW+130)& (0+255),b
 14189                           
 14190                           ;api.c: 94: API_RW[66] = 0;
 14191  001F54  0E00               	movlw	0
 14192  001F56  6F85               	movwf	(_API_RW+133)& (0+255),b
 14193  001F58  0E00               	movlw	0
 14194  001F5A  6F84               	movwf	(_API_RW+132)& (0+255),b
 14195                           
 14196                           ;api.c: 95: API_RW[67] = 0;
 14197  001F5C  0E00               	movlw	0
 14198  001F5E  6F87               	movwf	(_API_RW+135)& (0+255),b
 14199  001F60  0E00               	movlw	0
 14200  001F62  6F86               	movwf	(_API_RW+134)& (0+255),b
 14201                           
 14202                           ;api.c: 96: API_RW[68] = 0;
 14203  001F64  0E00               	movlw	0
 14204  001F66  6F89               	movwf	(_API_RW+137)& (0+255),b
 14205  001F68  0E00               	movlw	0
 14206  001F6A  6F88               	movwf	(_API_RW+136)& (0+255),b
 14207                           
 14208                           ;api.c: 97: API_RW[69] = 0;
 14209  001F6C  0E00               	movlw	0
 14210  001F6E  6F8B               	movwf	(_API_RW+139)& (0+255),b
 14211  001F70  0E00               	movlw	0
 14212  001F72  6F8A               	movwf	(_API_RW+138)& (0+255),b
 14213                           
 14214                           ;api.c: 98: API_RW[70] = 1;
 14215  001F74  0E00               	movlw	0
 14216  001F76  6F8D               	movwf	(_API_RW+141)& (0+255),b
 14217  001F78  0E01               	movlw	1
 14218  001F7A  6F8C               	movwf	(_API_RW+140)& (0+255),b
 14219                           
 14220                           ;api.c: 99: API_RW[71] = 1;
 14221  001F7C  0E00               	movlw	0
 14222  001F7E  6F8F               	movwf	(_API_RW+143)& (0+255),b
 14223  001F80  0E01               	movlw	1
 14224  001F82  6F8E               	movwf	(_API_RW+142)& (0+255),b
 14225                           
 14226                           ;api.c: 100: API_RW[72] = 1;
 14227  001F84  0E00               	movlw	0
 14228  001F86  6F91               	movwf	(_API_RW+145)& (0+255),b
 14229  001F88  0E01               	movlw	1
 14230  001F8A  6F90               	movwf	(_API_RW+144)& (0+255),b
 14231                           
 14232                           ;api.c: 101: API_RW[73] = 1;
 14233  001F8C  0E00               	movlw	0
 14234  001F8E  6F93               	movwf	(_API_RW+147)& (0+255),b
 14235  001F90  0E01               	movlw	1
 14236  001F92  6F92               	movwf	(_API_RW+146)& (0+255),b
 14237                           
 14238                           ;api.c: 102: API_RW[74] = 1;
 14239  001F94  0E00               	movlw	0
 14240  001F96  6F95               	movwf	(_API_RW+149)& (0+255),b
 14241  001F98  0E01               	movlw	1
 14242  001F9A  6F94               	movwf	(_API_RW+148)& (0+255),b
 14243                           
 14244                           ;api.c: 103: API_RW[75] = 1;
 14245  001F9C  0E00               	movlw	0
 14246  001F9E  6F97               	movwf	(_API_RW+151)& (0+255),b
 14247  001FA0  0E01               	movlw	1
 14248  001FA2  6F96               	movwf	(_API_RW+150)& (0+255),b
 14249                           
 14250                           ;api.c: 104: API_RW[76] = 1;
 14251  001FA4  0E00               	movlw	0
 14252  001FA6  6F99               	movwf	(_API_RW+153)& (0+255),b
 14253  001FA8  0E01               	movlw	1
 14254  001FAA  6F98               	movwf	(_API_RW+152)& (0+255),b
 14255                           
 14256                           ;api.c: 105: API_RW[77] = 1;
 14257  001FAC  0E00               	movlw	0
 14258  001FAE  6F9B               	movwf	(_API_RW+155)& (0+255),b
 14259  001FB0  0E01               	movlw	1
 14260  001FB2  6F9A               	movwf	(_API_RW+154)& (0+255),b
 14261                           
 14262                           ;api.c: 106: API_RW[78] = 1;
 14263  001FB4  0E00               	movlw	0
 14264  001FB6  6F9D               	movwf	(_API_RW+157)& (0+255),b
 14265  001FB8  0E01               	movlw	1
 14266  001FBA  6F9C               	movwf	(_API_RW+156)& (0+255),b
 14267                           
 14268                           ;api.c: 107: API_RW[79] = 1;
 14269  001FBC  0E00               	movlw	0
 14270  001FBE  6F9F               	movwf	(_API_RW+159)& (0+255),b
 14271  001FC0  0E01               	movlw	1
 14272  001FC2  6F9E               	movwf	(_API_RW+158)& (0+255),b
 14273                           
 14274                           ;api.c: 108: API_RW[80] = 0;
 14275  001FC4  0E00               	movlw	0
 14276  001FC6  6FA1               	movwf	(_API_RW+161)& (0+255),b
 14277  001FC8  0E00               	movlw	0
 14278  001FCA  6FA0               	movwf	(_API_RW+160)& (0+255),b
 14279                           
 14280                           ;api.c: 109: API_RW[81] = 1;
 14281  001FCC  0E00               	movlw	0
 14282  001FCE  6FA3               	movwf	(_API_RW+163)& (0+255),b
 14283  001FD0  0E01               	movlw	1
 14284  001FD2  6FA2               	movwf	(_API_RW+162)& (0+255),b
 14285                           
 14286                           ;api.c: 110: API_RW[82] = 0;
 14287  001FD4  0E00               	movlw	0
 14288  001FD6  6FA5               	movwf	(_API_RW+165)& (0+255),b
 14289  001FD8  0E00               	movlw	0
 14290  001FDA  6FA4               	movwf	(_API_RW+164)& (0+255),b
 14291                           
 14292                           ;api.c: 111: API_RW[83] = 0;
 14293  001FDC  0E00               	movlw	0
 14294  001FDE  6FA7               	movwf	(_API_RW+167)& (0+255),b
 14295  001FE0  0E00               	movlw	0
 14296  001FE2  6FA6               	movwf	(_API_RW+166)& (0+255),b
 14297                           
 14298                           ;api.c: 112: API_RW[84] = 0;
 14299  001FE4  0E00               	movlw	0
 14300  001FE6  6FA9               	movwf	(_API_RW+169)& (0+255),b
 14301  001FE8  0E00               	movlw	0
 14302  001FEA  6FA8               	movwf	(_API_RW+168)& (0+255),b
 14303                           
 14304                           ;api.c: 113: API_RW[85] = 0;
 14305  001FEC  0E00               	movlw	0
 14306  001FEE  6FAB               	movwf	(_API_RW+171)& (0+255),b
 14307  001FF0  0E00               	movlw	0
 14308  001FF2  6FAA               	movwf	(_API_RW+170)& (0+255),b
 14309                           
 14310                           ;api.c: 114: API_RW[86] = 0;
 14311  001FF4  0E00               	movlw	0
 14312  001FF6  6FAD               	movwf	(_API_RW+173)& (0+255),b
 14313  001FF8  0E00               	movlw	0
 14314  001FFA  6FAC               	movwf	(_API_RW+172)& (0+255),b
 14315                           
 14316                           ;api.c: 115: API_RW[87] = 1;
 14317  001FFC  0E00               	movlw	0
 14318  001FFE  6FAF               	movwf	(_API_RW+175)& (0+255),b
 14319  002000  0E01               	movlw	1
 14320  002002  6FAE               	movwf	(_API_RW+174)& (0+255),b
 14321                           
 14322                           ;api.c: 116: API_RW[88] = 0;
 14323  002004  0E00               	movlw	0
 14324  002006  6FB1               	movwf	(_API_RW+177)& (0+255),b
 14325  002008  0E00               	movlw	0
 14326  00200A  6FB0               	movwf	(_API_RW+176)& (0+255),b
 14327                           
 14328                           ;api.c: 120: API[16] = 89;
 14329  00200C  0E00               	movlw	0
 14330  00200E  0101               	movlb	1	; () banked
 14331  002010  6F21               	movwf	(_API+33)& (0+255),b
 14332  002012  0E59               	movlw	89
 14333  002014  6F20               	movwf	(_API+32)& (0+255),b
 14334                           
 14335                           ;api.c: 121: API[17] = 0;
 14336  002016  0E00               	movlw	0
 14337  002018  6F23               	movwf	(_API+35)& (0+255),b
 14338  00201A  0E00               	movlw	0
 14339  00201C  6F22               	movwf	(_API+34)& (0+255),b
 14340                           
 14341                           ;api.c: 122: API[18] = 10000;
 14342  00201E  0E27               	movlw	39
 14343  002020  6F25               	movwf	(_API+37)& (0+255),b
 14344  002022  0E10               	movlw	16
 14345  002024  6F24               	movwf	(_API+36)& (0+255),b
 14346                           
 14347                           ;api.c: 123: API[19] = 800;
 14348  002026  0E03               	movlw	3
 14349  002028  6F27               	movwf	(_API+39)& (0+255),b
 14350  00202A  0E20               	movlw	32
 14351  00202C  6F26               	movwf	(_API+38)& (0+255),b
 14352                           
 14353                           ;api.c: 124: API[20] = 5000;
 14354  00202E  0E13               	movlw	19
 14355  002030  6F29               	movwf	(_API+41)& (0+255),b
 14356  002032  0E88               	movlw	136
 14357  002034  6F28               	movwf	(_API+40)& (0+255),b
 14358                           
 14359                           ;api.c: 125: API[21] = 20;
 14360  002036  0E00               	movlw	0
 14361  002038  6F2B               	movwf	(_API+43)& (0+255),b
 14362  00203A  0E14               	movlw	20
 14363  00203C  6F2A               	movwf	(_API+42)& (0+255),b
 14364                           
 14365                           ;api.c: 126: API[22] = 20;
 14366  00203E  0E00               	movlw	0
 14367  002040  6F2D               	movwf	(_API+45)& (0+255),b
 14368  002042  0E14               	movlw	20
 14369  002044  6F2C               	movwf	(_API+44)& (0+255),b
 14370                           
 14371                           ;api.c: 127: API[23] = 107;
 14372  002046  0E00               	movlw	0
 14373  002048  6F2F               	movwf	(_API+47)& (0+255),b
 14374  00204A  0E6B               	movlw	107
 14375  00204C  6F2E               	movwf	(_API+46)& (0+255),b
 14376                           
 14377                           ;api.c: 128: API[24] = 107;
 14378  00204E  0E00               	movlw	0
 14379  002050  6F31               	movwf	(_API+49)& (0+255),b
 14380  002052  0E6B               	movlw	107
 14381  002054  6F30               	movwf	(_API+48)& (0+255),b
 14382                           
 14383                           ;api.c: 129: API[25] = 80;
 14384  002056  0E00               	movlw	0
 14385  002058  6F33               	movwf	(_API+51)& (0+255),b
 14386  00205A  0E50               	movlw	80
 14387  00205C  6F32               	movwf	(_API+50)& (0+255),b
 14388                           
 14389                           ;api.c: 130: API[26] = 45;
 14390  00205E  0E00               	movlw	0
 14391  002060  6F35               	movwf	(_API+53)& (0+255),b
 14392  002062  0E2D               	movlw	45
 14393  002064  6F34               	movwf	(_API+52)& (0+255),b
 14394                           
 14395                           ;api.c: 131: API[27] = 20;
 14396  002066  0E00               	movlw	0
 14397  002068  6F37               	movwf	(_API+55)& (0+255),b
 14398  00206A  0E14               	movlw	20
 14399  00206C  6F36               	movwf	(_API+54)& (0+255),b
 14400                           
 14401                           ;api.c: 132: API[28] = 0;
 14402  00206E  0E00               	movlw	0
 14403  002070  6F39               	movwf	(_API+57)& (0+255),b
 14404  002072  0E00               	movlw	0
 14405  002074  6F38               	movwf	(_API+56)& (0+255),b
 14406                           
 14407                           ;api.c: 133: API[29] = 0;
 14408  002076  0E00               	movlw	0
 14409  002078  6F3B               	movwf	(_API+59)& (0+255),b
 14410  00207A  0E00               	movlw	0
 14411  00207C  6F3A               	movwf	(_API+58)& (0+255),b
 14412                           
 14413                           ;api.c: 134: API[30] = 0;
 14414  00207E  0E00               	movlw	0
 14415  002080  6F3D               	movwf	(_API+61)& (0+255),b
 14416  002082  0E00               	movlw	0
 14417  002084  6F3C               	movwf	(_API+60)& (0+255),b
 14418                           
 14419                           ;api.c: 135: API[31] = 0;
 14420  002086  0E00               	movlw	0
 14421  002088  6F3F               	movwf	(_API+63)& (0+255),b
 14422  00208A  0E00               	movlw	0
 14423  00208C  6F3E               	movwf	(_API+62)& (0+255),b
 14424                           
 14425                           ;api.c: 136: API[32] = 0;
 14426  00208E  0E00               	movlw	0
 14427  002090  6F41               	movwf	(_API+65)& (0+255),b
 14428  002092  0E00               	movlw	0
 14429  002094  6F40               	movwf	(_API+64)& (0+255),b
 14430                           
 14431                           ;api.c: 137: API[33] = 0;
 14432  002096  0E00               	movlw	0
 14433  002098  6F43               	movwf	(_API+67)& (0+255),b
 14434  00209A  0E00               	movlw	0
 14435  00209C  6F42               	movwf	(_API+66)& (0+255),b
 14436                           
 14437                           ;api.c: 138: API[34] = 0;
 14438  00209E  0E00               	movlw	0
 14439  0020A0  6F45               	movwf	(_API+69)& (0+255),b
 14440  0020A2  0E00               	movlw	0
 14441  0020A4  6F44               	movwf	(_API+68)& (0+255),b
 14442                           
 14443                           ;api.c: 139: API[35] = 0;
 14444  0020A6  0E00               	movlw	0
 14445  0020A8  6F47               	movwf	(_API+71)& (0+255),b
 14446  0020AA  0E00               	movlw	0
 14447  0020AC  6F46               	movwf	(_API+70)& (0+255),b
 14448                           
 14449                           ;api.c: 140: API[36] = 0;
 14450  0020AE  0E00               	movlw	0
 14451  0020B0  6F49               	movwf	(_API+73)& (0+255),b
 14452  0020B2  0E00               	movlw	0
 14453  0020B4  6F48               	movwf	(_API+72)& (0+255),b
 14454                           
 14455                           ;api.c: 141: API[37] = 0;
 14456  0020B6  0E00               	movlw	0
 14457  0020B8  6F4B               	movwf	(_API+75)& (0+255),b
 14458  0020BA  0E00               	movlw	0
 14459  0020BC  6F4A               	movwf	(_API+74)& (0+255),b
 14460                           
 14461                           ;api.c: 142: API[38] = 0;
 14462  0020BE  0E00               	movlw	0
 14463  0020C0  6F4D               	movwf	(_API+77)& (0+255),b
 14464  0020C2  0E00               	movlw	0
 14465  0020C4  6F4C               	movwf	(_API+76)& (0+255),b
 14466                           
 14467                           ;api.c: 143: API[39] = 0;
 14468  0020C6  0E00               	movlw	0
 14469  0020C8  6F4F               	movwf	(_API+79)& (0+255),b
 14470  0020CA  0E00               	movlw	0
 14471  0020CC  6F4E               	movwf	(_API+78)& (0+255),b
 14472                           
 14473                           ;api.c: 144: API[40] = 0;
 14474  0020CE  0E00               	movlw	0
 14475  0020D0  6F51               	movwf	(_API+81)& (0+255),b
 14476  0020D2  0E00               	movlw	0
 14477  0020D4  6F50               	movwf	(_API+80)& (0+255),b
 14478                           
 14479                           ;api.c: 145: API[41] = 0;
 14480  0020D6  0E00               	movlw	0
 14481  0020D8  6F53               	movwf	(_API+83)& (0+255),b
 14482  0020DA  0E00               	movlw	0
 14483  0020DC  6F52               	movwf	(_API+82)& (0+255),b
 14484                           
 14485                           ;api.c: 146: API[42] = 0;
 14486  0020DE  0E00               	movlw	0
 14487  0020E0  6F55               	movwf	(_API+85)& (0+255),b
 14488  0020E2  0E00               	movlw	0
 14489  0020E4  6F54               	movwf	(_API+84)& (0+255),b
 14490                           
 14491                           ;api.c: 147: API[43] = 0;
 14492  0020E6  0E00               	movlw	0
 14493  0020E8  6F57               	movwf	(_API+87)& (0+255),b
 14494  0020EA  0E00               	movlw	0
 14495  0020EC  6F56               	movwf	(_API+86)& (0+255),b
 14496                           
 14497                           ;api.c: 148: API[44] = 0;
 14498  0020EE  0E00               	movlw	0
 14499  0020F0  6F59               	movwf	(_API+89)& (0+255),b
 14500  0020F2  0E00               	movlw	0
 14501  0020F4  6F58               	movwf	(_API+88)& (0+255),b
 14502                           
 14503                           ;api.c: 149: API[45] = 0;
 14504  0020F6  0E00               	movlw	0
 14505  0020F8  6F5B               	movwf	(_API+91)& (0+255),b
 14506  0020FA  0E00               	movlw	0
 14507  0020FC  6F5A               	movwf	(_API+90)& (0+255),b
 14508                           
 14509                           ;api.c: 150: API[46] = 80;
 14510  0020FE  0E00               	movlw	0
 14511  002100  6F5D               	movwf	(_API+93)& (0+255),b
 14512  002102  0E50               	movlw	80
 14513  002104  6F5C               	movwf	(_API+92)& (0+255),b
 14514                           
 14515                           ;api.c: 151: API[47] = 120;
 14516  002106  0E00               	movlw	0
 14517  002108  6F5F               	movwf	(_API+95)& (0+255),b
 14518  00210A  0E78               	movlw	120
 14519  00210C  6F5E               	movwf	(_API+94)& (0+255),b
 14520                           
 14521                           ;api.c: 152: API[48] = 0;
 14522  00210E  0E00               	movlw	0
 14523  002110  6F61               	movwf	(_API+97)& (0+255),b
 14524  002112  0E00               	movlw	0
 14525  002114  6F60               	movwf	(_API+96)& (0+255),b
 14526                           
 14527                           ;api.c: 153: API[49] = 80;
 14528  002116  0E00               	movlw	0
 14529  002118  6F63               	movwf	(_API+99)& (0+255),b
 14530  00211A  0E50               	movlw	80
 14531  00211C  6F62               	movwf	(_API+98)& (0+255),b
 14532                           
 14533                           ;api.c: 154: API[50] = 0;
 14534  00211E  0E00               	movlw	0
 14535  002120  6F65               	movwf	(_API+101)& (0+255),b
 14536  002122  0E00               	movlw	0
 14537  002124  6F64               	movwf	(_API+100)& (0+255),b
 14538                           
 14539                           ;api.c: 155: API[51] = 0;
 14540  002126  0E00               	movlw	0
 14541  002128  6F67               	movwf	(_API+103)& (0+255),b
 14542  00212A  0E00               	movlw	0
 14543  00212C  6F66               	movwf	(_API+102)& (0+255),b
 14544                           
 14545                           ;api.c: 156: API[52] = 120;
 14546  00212E  0E00               	movlw	0
 14547  002130  6F69               	movwf	(_API+105)& (0+255),b
 14548  002132  0E78               	movlw	120
 14549  002134  6F68               	movwf	(_API+104)& (0+255),b
 14550                           
 14551                           ;api.c: 157: API[53] = 100;
 14552  002136  0E00               	movlw	0
 14553  002138  6F6B               	movwf	(_API+107)& (0+255),b
 14554  00213A  0E64               	movlw	100
 14555  00213C  6F6A               	movwf	(_API+106)& (0+255),b
 14556                           
 14557                           ;api.c: 158: API[54] = 100;
 14558  00213E  0E00               	movlw	0
 14559  002140  6F6D               	movwf	(_API+109)& (0+255),b
 14560  002142  0E64               	movlw	100
 14561  002144  6F6C               	movwf	(_API+108)& (0+255),b
 14562                           
 14563                           ;api.c: 159: API[55] = 100;
 14564  002146  0E00               	movlw	0
 14565  002148  6F6F               	movwf	(_API+111)& (0+255),b
 14566  00214A  0E64               	movlw	100
 14567  00214C  6F6E               	movwf	(_API+110)& (0+255),b
 14568                           
 14569                           ;api.c: 160: API[56] = 100;
 14570  00214E  0E00               	movlw	0
 14571  002150  6F71               	movwf	(_API+113)& (0+255),b
 14572  002152  0E64               	movlw	100
 14573  002154  6F70               	movwf	(_API+112)& (0+255),b
 14574                           
 14575                           ;api.c: 161: API[57] = 100;
 14576  002156  0E00               	movlw	0
 14577  002158  6F73               	movwf	(_API+115)& (0+255),b
 14578  00215A  0E64               	movlw	100
 14579  00215C  6F72               	movwf	(_API+114)& (0+255),b
 14580                           
 14581                           ;api.c: 162: API[58] = 100;
 14582  00215E  0E00               	movlw	0
 14583  002160  6F75               	movwf	(_API+117)& (0+255),b
 14584  002162  0E64               	movlw	100
 14585  002164  6F74               	movwf	(_API+116)& (0+255),b
 14586                           
 14587                           ;api.c: 163: API[59] = 100;
 14588  002166  0E00               	movlw	0
 14589  002168  6F77               	movwf	(_API+119)& (0+255),b
 14590  00216A  0E64               	movlw	100
 14591  00216C  6F76               	movwf	(_API+118)& (0+255),b
 14592                           
 14593                           ;api.c: 164: API[60] = 100;
 14594  00216E  0E00               	movlw	0
 14595  002170  6F79               	movwf	(_API+121)& (0+255),b
 14596  002172  0E64               	movlw	100
 14597  002174  6F78               	movwf	(_API+120)& (0+255),b
 14598                           
 14599                           ;api.c: 165: API[61] = 0;
 14600  002176  0E00               	movlw	0
 14601  002178  6F7B               	movwf	(_API+123)& (0+255),b
 14602  00217A  0E00               	movlw	0
 14603  00217C  6F7A               	movwf	(_API+122)& (0+255),b
 14604                           
 14605                           ;api.c: 166: API[62] = 0;
 14606  00217E  0E00               	movlw	0
 14607  002180  6F7D               	movwf	(_API+125)& (0+255),b
 14608  002182  0E00               	movlw	0
 14609  002184  6F7C               	movwf	(_API+124)& (0+255),b
 14610                           
 14611                           ;api.c: 167: API[63] = 1;
 14612  002186  0E00               	movlw	0
 14613  002188  6F7F               	movwf	(_API+127)& (0+255),b
 14614  00218A  0E01               	movlw	1
 14615  00218C  6F7E               	movwf	(_API+126)& (0+255),b
 14616                           
 14617                           ;api.c: 168: API[64] = 0;
 14618  00218E  0E00               	movlw	0
 14619  002190  6F81               	movwf	(_API+129)& (0+255),b
 14620  002192  0E00               	movlw	0
 14621  002194  6F80               	movwf	(_API+128)& (0+255),b
 14622                           
 14623                           ;api.c: 169: API[65] = 0;
 14624  002196  0E00               	movlw	0
 14625  002198  6F83               	movwf	(_API+131)& (0+255),b
 14626  00219A  0E00               	movlw	0
 14627  00219C  6F82               	movwf	(_API+130)& (0+255),b
 14628                           
 14629                           ;api.c: 170: API[66] = 0;
 14630  00219E  0E00               	movlw	0
 14631  0021A0  6F85               	movwf	(_API+133)& (0+255),b
 14632  0021A2  0E00               	movlw	0
 14633  0021A4  6F84               	movwf	(_API+132)& (0+255),b
 14634                           
 14635                           ;api.c: 171: API[67] = 0;
 14636  0021A6  0E00               	movlw	0
 14637  0021A8  6F87               	movwf	(_API+135)& (0+255),b
 14638  0021AA  0E00               	movlw	0
 14639  0021AC  6F86               	movwf	(_API+134)& (0+255),b
 14640                           
 14641                           ;api.c: 172: API[68] = 0;
 14642  0021AE  0E00               	movlw	0
 14643  0021B0  6F89               	movwf	(_API+137)& (0+255),b
 14644  0021B2  0E00               	movlw	0
 14645  0021B4  6F88               	movwf	(_API+136)& (0+255),b
 14646                           
 14647                           ;api.c: 173: API[69] = 1;
 14648  0021B6  0E00               	movlw	0
 14649  0021B8  6F8B               	movwf	(_API+139)& (0+255),b
 14650  0021BA  0E01               	movlw	1
 14651  0021BC  6F8A               	movwf	(_API+138)& (0+255),b
 14652                           
 14653                           ;api.c: 174: API[70] = 0;
 14654  0021BE  0E00               	movlw	0
 14655  0021C0  6F8D               	movwf	(_API+141)& (0+255),b
 14656  0021C2  0E00               	movlw	0
 14657  0021C4  6F8C               	movwf	(_API+140)& (0+255),b
 14658                           
 14659                           ;api.c: 175: API[71] = 0;
 14660  0021C6  0E00               	movlw	0
 14661  0021C8  6F8F               	movwf	(_API+143)& (0+255),b
 14662  0021CA  0E00               	movlw	0
 14663  0021CC  6F8E               	movwf	(_API+142)& (0+255),b
 14664                           
 14665                           ;api.c: 176: API[72] = 0;
 14666  0021CE  0E00               	movlw	0
 14667  0021D0  6F91               	movwf	(_API+145)& (0+255),b
 14668  0021D2  0E00               	movlw	0
 14669  0021D4  6F90               	movwf	(_API+144)& (0+255),b
 14670                           
 14671                           ;api.c: 177: API[73] = 0;
 14672  0021D6  0E00               	movlw	0
 14673  0021D8  6F93               	movwf	(_API+147)& (0+255),b
 14674  0021DA  0E00               	movlw	0
 14675  0021DC  6F92               	movwf	(_API+146)& (0+255),b
 14676                           
 14677                           ;api.c: 178: API[74] = 0;
 14678  0021DE  0E00               	movlw	0
 14679  0021E0  6F95               	movwf	(_API+149)& (0+255),b
 14680  0021E2  0E00               	movlw	0
 14681  0021E4  6F94               	movwf	(_API+148)& (0+255),b
 14682                           
 14683                           ;api.c: 179: API[75] = 0;
 14684  0021E6  0E00               	movlw	0
 14685  0021E8  6F97               	movwf	(_API+151)& (0+255),b
 14686  0021EA  0E00               	movlw	0
 14687  0021EC  6F96               	movwf	(_API+150)& (0+255),b
 14688                           
 14689                           ;api.c: 180: API[76] = 0;
 14690  0021EE  0E00               	movlw	0
 14691  0021F0  6F99               	movwf	(_API+153)& (0+255),b
 14692  0021F2  0E00               	movlw	0
 14693  0021F4  6F98               	movwf	(_API+152)& (0+255),b
 14694                           
 14695                           ;api.c: 181: API[77] = 0;
 14696  0021F6  0E00               	movlw	0
 14697  0021F8  6F9B               	movwf	(_API+155)& (0+255),b
 14698  0021FA  0E00               	movlw	0
 14699  0021FC  6F9A               	movwf	(_API+154)& (0+255),b
 14700                           
 14701                           ;api.c: 182: API[78] = 0;
 14702  0021FE  0E00               	movlw	0
 14703  002200  6F9D               	movwf	(_API+157)& (0+255),b
 14704  002202  0E00               	movlw	0
 14705  002204  6F9C               	movwf	(_API+156)& (0+255),b
 14706                           
 14707                           ;api.c: 183: API[79] = 0;
 14708  002206  0E00               	movlw	0
 14709  002208  6F9F               	movwf	(_API+159)& (0+255),b
 14710  00220A  0E00               	movlw	0
 14711  00220C  6F9E               	movwf	(_API+158)& (0+255),b
 14712                           
 14713                           ;api.c: 184: API[80] = 0;
 14714  00220E  0E00               	movlw	0
 14715  002210  6FA1               	movwf	(_API+161)& (0+255),b
 14716  002212  0E00               	movlw	0
 14717  002214  6FA0               	movwf	(_API+160)& (0+255),b
 14718                           
 14719                           ;api.c: 185: API[81] = 0;
 14720  002216  0E00               	movlw	0
 14721  002218  6FA3               	movwf	(_API+163)& (0+255),b
 14722  00221A  0E00               	movlw	0
 14723  00221C  6FA2               	movwf	(_API+162)& (0+255),b
 14724                           
 14725                           ;api.c: 186: API[82] = 1;
 14726  00221E  0E00               	movlw	0
 14727  002220  6FA5               	movwf	(_API+165)& (0+255),b
 14728  002222  0E01               	movlw	1
 14729  002224  6FA4               	movwf	(_API+164)& (0+255),b
 14730                           
 14731                           ;api.c: 187: API[83] = 0;
 14732  002226  0E00               	movlw	0
 14733  002228  6FA7               	movwf	(_API+167)& (0+255),b
 14734  00222A  0E00               	movlw	0
 14735  00222C  6FA6               	movwf	(_API+166)& (0+255),b
 14736                           
 14737                           ;api.c: 188: API[84] = 1;
 14738  00222E  0E00               	movlw	0
 14739  002230  6FA9               	movwf	(_API+169)& (0+255),b
 14740  002232  0E01               	movlw	1
 14741  002234  6FA8               	movwf	(_API+168)& (0+255),b
 14742                           
 14743                           ;api.c: 189: API[85] = 0;
 14744  002236  0E00               	movlw	0
 14745  002238  6FAB               	movwf	(_API+171)& (0+255),b
 14746  00223A  0E00               	movlw	0
 14747  00223C  6FAA               	movwf	(_API+170)& (0+255),b
 14748                           
 14749                           ;api.c: 190: API[86] = 0;
 14750  00223E  0E00               	movlw	0
 14751  002240  6FAD               	movwf	(_API+173)& (0+255),b
 14752  002242  0E00               	movlw	0
 14753  002244  6FAC               	movwf	(_API+172)& (0+255),b
 14754                           
 14755                           ;api.c: 191: API[87] = 0;
 14756  002246  0E00               	movlw	0
 14757  002248  6FAF               	movwf	(_API+175)& (0+255),b
 14758  00224A  0E00               	movlw	0
 14759  00224C  6FAE               	movwf	(_API+174)& (0+255),b
 14760                           
 14761                           ;api.c: 192: API[88] = 511;
 14762  00224E  0E01               	movlw	1
 14763  002250  6FB1               	movwf	(_API+177)& (0+255),b
 14764  002252  69B0               	setf	(_API+176)& (0+255),b
 14765                           
 14766                           ; BSR set to: 1
 14767  002254  0012               	return		;funcret
 14768  002256                     __end_of_APIxInitialize:
 14769                           	opt stack 0
 14770                           tblptru	equ	0xFF8
 14771                           tblptrh	equ	0xFF7
 14772                           tblptrl	equ	0xFF6
 14773                           tablat	equ	0xFF5
 14774                           prodh	equ	0xFF4
 14775                           prodl	equ	0xFF3
 14776                           intcon	equ	0xFF2
 14777                           intcon2	equ	0xFF1
 14778                           postinc0	equ	0xFEE
 14779                           wreg	equ	0xFE8
 14780                           postinc1	equ	0xFE6
 14781                           postdec1	equ	0xFE5
 14782                           fsr1h	equ	0xFE2
 14783                           fsr1l	equ	0xFE1
 14784                           indf2	equ	0xFDF
 14785                           postinc2	equ	0xFDE
 14786                           postdec2	equ	0xFDD
 14787                           fsr2h	equ	0xFDA
 14788                           fsr2l	equ	0xFD9
 14789                           status	equ	0xFD8
 14790                           
 14791 ;; *************** function _tc_low *****************
 14792 ;; Defined at:
 14793 ;;		line 153 in file "../Main.c"
 14794 ;; Parameters:    Size  Location     Type
 14795 ;;		None
 14796 ;; Auto vars:     Size  Location     Type
 14797 ;;		None
 14798 ;; Return value:  Size  Location     Type
 14799 ;;                  1    wreg      void 
 14800 ;; Registers used:
 14801 ;;		None
 14802 ;; Tracked objects:
 14803 ;;		On entry : 0/0
 14804 ;;		On exit  : 0/0
 14805 ;;		Unchanged: 0/0
 14806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14807 ;;      Params:         0       0       0       0       0       0       0       0       0
 14808 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14809 ;;      Temps:          0      21       0       0       0       0       0       0       0
 14810 ;;      Totals:         0      21       0       0       0       0       0       0       0
 14811 ;;Total ram usage:       21 bytes
 14812 ;; Hardware stack levels used:    1
 14813 ;; Hardware stack levels required when called:    2
 14814 ;; This function calls:
 14815 ;;		Nothing
 14816 ;; This function is called by:
 14817 ;;		Interrupt level 1
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           	psect	intcodelo
 14822  000018                     __pintcodelo:
 14823                           	opt stack 0
 14824  000018                     _tc_low:
 14825                           	opt stack 22
 14826                           
 14827                           ; BSR set to: 1
 14828                           ;incstack = 0
 14829  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 14830  00001A  CFD8 F0BA          	movff	status,??_tc_low
 14831  00001E  CFE8 F0BB          	movff	wreg,??_tc_low+1
 14832  000022  CFE0 F0BC          	movff	bsr,??_tc_low+2
 14833  000026  CFFA F0BD          	movff	pclath,??_tc_low+3
 14834  00002A  CFFB F0BE          	movff	pclatu,??_tc_low+4
 14835  00002E  CFE9 F0BF          	movff	fsr0l,??_tc_low+5
 14836  000032  CFEA F0C0          	movff	fsr0h,??_tc_low+6
 14837  000036  CFE1 F0C1          	movff	fsr1l,??_tc_low+7
 14838  00003A  CFE2 F0C2          	movff	fsr1h,??_tc_low+8
 14839  00003E  CFD9 F0C3          	movff	fsr2l,??_tc_low+9
 14840  000042  CFDA F0C4          	movff	fsr2h,??_tc_low+10
 14841  000046  CFF3 F0C5          	movff	prodl,??_tc_low+11
 14842  00004A  CFF4 F0C6          	movff	prodh,??_tc_low+12
 14843  00004E  CFF6 F0C7          	movff	tblptrl,??_tc_low+13
 14844  000052  CFF7 F0C8          	movff	tblptrh,??_tc_low+14
 14845  000056  CFF8 F0C9          	movff	tblptru,??_tc_low+15
 14846  00005A  CFF5 F0CA          	movff	tablat,??_tc_low+16
 14847  00005E  C04D  F0CB         	movff	btemp,??_tc_low+17
 14848  000062  C04E  F0CC         	movff	btemp+1,??_tc_low+18
 14849  000066  C04F  F0CD         	movff	btemp+2,??_tc_low+19
 14850  00006A  C050  F0CE         	movff	btemp+3,??_tc_low+20
 14851  00006E  C0CE  F050         	movff	??_tc_low+20,btemp+3
 14852  000072  C0CD  F04F         	movff	??_tc_low+19,btemp+2
 14853  000076  C0CC  F04E         	movff	??_tc_low+18,btemp+1
 14854  00007A  C0CB  F04D         	movff	??_tc_low+17,btemp
 14855  00007E  C0CA  FFF5         	movff	??_tc_low+16,tablat
 14856  000082  C0C9  FFF8         	movff	??_tc_low+15,tblptru
 14857  000086  C0C8  FFF7         	movff	??_tc_low+14,tblptrh
 14858  00008A  C0C7  FFF6         	movff	??_tc_low+13,tblptrl
 14859  00008E  C0C6  FFF4         	movff	??_tc_low+12,prodh
 14860  000092  C0C5  FFF3         	movff	??_tc_low+11,prodl
 14861  000096  C0C4  FFDA         	movff	??_tc_low+10,fsr2h
 14862  00009A  C0C3  FFD9         	movff	??_tc_low+9,fsr2l
 14863  00009E  C0C2  FFE2         	movff	??_tc_low+8,fsr1h
 14864  0000A2  C0C1  FFE1         	movff	??_tc_low+7,fsr1l
 14865  0000A6  C0C0  FFEA         	movff	??_tc_low+6,fsr0h
 14866  0000AA  C0BF  FFE9         	movff	??_tc_low+5,fsr0l
 14867  0000AE  C0BE  FFFB         	movff	??_tc_low+4,pclatu
 14868  0000B2  C0BD  FFFA         	movff	??_tc_low+3,pclath
 14869  0000B6  C0BC  FFE0         	movff	??_tc_low+2,bsr
 14870  0000BA  C0BB  FFE8         	movff	??_tc_low+1,wreg
 14871  0000BE  C0BA  FFD8         	movff	??_tc_low,status
 14872  0000C2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 14873  0000C4  0010               	retfie	
 14874  0000C6                     __end_of_tc_low:
 14875                           	opt stack 0
 14876                           pclatu	equ	0xFFB
 14877                           pclath	equ	0xFFA
 14878                           tblptru	equ	0xFF8
 14879                           tblptrh	equ	0xFF7
 14880                           tblptrl	equ	0xFF6
 14881                           tablat	equ	0xFF5
 14882                           prodh	equ	0xFF4
 14883                           prodl	equ	0xFF3
 14884                           intcon	equ	0xFF2
 14885                           intcon2	equ	0xFF1
 14886                           postinc0	equ	0xFEE
 14887                           fsr0h	equ	0xFEA
 14888                           fsr0l	equ	0xFE9
 14889                           wreg	equ	0xFE8
 14890                           postinc1	equ	0xFE6
 14891                           postdec1	equ	0xFE5
 14892                           fsr1h	equ	0xFE2
 14893                           fsr1l	equ	0xFE1
 14894                           bsr	equ	0xFE0
 14895                           indf2	equ	0xFDF
 14896                           postinc2	equ	0xFDE
 14897                           postdec2	equ	0xFDD
 14898                           fsr2h	equ	0xFDA
 14899                           fsr2l	equ	0xFD9
 14900                           status	equ	0xFD8
 14901                           
 14902 ;; *************** function _tc_high *****************
 14903 ;; Defined at:
 14904 ;;		line 157 in file "../Main.c"
 14905 ;; Parameters:    Size  Location     Type
 14906 ;;		None
 14907 ;; Auto vars:     Size  Location     Type
 14908 ;;		None
 14909 ;; Return value:  Size  Location     Type
 14910 ;;                  1    wreg      void 
 14911 ;; Registers used:
 14912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14913 ;; Tracked objects:
 14914 ;;		On entry : 0/0
 14915 ;;		On exit  : 0/0
 14916 ;;		Unchanged: 0/0
 14917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14918 ;;      Params:         0       0       0       0       0       0       0       0       0
 14919 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14920 ;;      Temps:         18       0       0       0       0       0       0       0       0
 14921 ;;      Totals:        18       0       0       0       0       0       0       0       0
 14922 ;;Total ram usage:       18 bytes
 14923 ;; Hardware stack levels used:    1
 14924 ;; Hardware stack levels required when called:    1
 14925 ;; This function calls:
 14926 ;;		_EUSART1_Receive_ISR
 14927 ;;		_EUSART1_Transmit_ISR
 14928 ;; This function is called by:
 14929 ;;		Interrupt level 2
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           	psect	intcode
 14934  000008                     __pintcode:
 14935                           	opt stack 0
 14936  000008                     _tc_high:
 14937                           	opt stack 22
 14938                           
 14939                           ;incstack = 0
 14940  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14941  00000A  ED60  F01D         	call	int_func,f	;refresh shadow registers
 14942                           pclatu	equ	0xFFB
 14943                           pclath	equ	0xFFA
 14944                           tblptru	equ	0xFF8
 14945                           tblptrh	equ	0xFF7
 14946                           tblptrl	equ	0xFF6
 14947                           tablat	equ	0xFF5
 14948                           prodh	equ	0xFF4
 14949                           prodl	equ	0xFF3
 14950                           intcon	equ	0xFF2
 14951                           intcon2	equ	0xFF1
 14952                           postinc0	equ	0xFEE
 14953                           fsr0h	equ	0xFEA
 14954                           fsr0l	equ	0xFE9
 14955                           wreg	equ	0xFE8
 14956                           postinc1	equ	0xFE6
 14957                           postdec1	equ	0xFE5
 14958                           fsr1h	equ	0xFE2
 14959                           fsr1l	equ	0xFE1
 14960                           bsr	equ	0xFE0
 14961                           indf2	equ	0xFDF
 14962                           postinc2	equ	0xFDE
 14963                           postdec2	equ	0xFDD
 14964                           fsr2h	equ	0xFDA
 14965                           fsr2l	equ	0xFD9
 14966                           status	equ	0xFD8
 14967                           
 14968                           	psect	intcode_body
 14969  003AC0                     __pintcode_body:
 14970                           	opt stack 22
 14971  003AC0                     int_func:
 14972                           	opt stack 22
 14973  003AC0  0006               	pop		; remove dummy address from shadow register refresh
 14974  003AC2  CFFA F001          	movff	pclath,??_tc_high
 14975  003AC6  CFFB F002          	movff	pclatu,??_tc_high+1
 14976  003ACA  CFE9 F003          	movff	fsr0l,??_tc_high+2
 14977  003ACE  CFEA F004          	movff	fsr0h,??_tc_high+3
 14978  003AD2  CFE1 F005          	movff	fsr1l,??_tc_high+4
 14979  003AD6  CFE2 F006          	movff	fsr1h,??_tc_high+5
 14980  003ADA  CFD9 F007          	movff	fsr2l,??_tc_high+6
 14981  003ADE  CFDA F008          	movff	fsr2h,??_tc_high+7
 14982  003AE2  CFF3 F009          	movff	prodl,??_tc_high+8
 14983  003AE6  CFF4 F00A          	movff	prodh,??_tc_high+9
 14984  003AEA  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 14985  003AEE  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 14986  003AF2  CFF8 F00D          	movff	tblptru,??_tc_high+12
 14987  003AF6  CFF5 F00E          	movff	tablat,??_tc_high+13
 14988  003AFA  C04D  F00F         	movff	btemp,??_tc_high+14
 14989  003AFE  C04E  F010         	movff	btemp+1,??_tc_high+15
 14990  003B02  C04F  F011         	movff	btemp+2,??_tc_high+16
 14991  003B06  C050  F012         	movff	btemp+3,??_tc_high+17
 14992                           
 14993                           ;Main.c: 159: if (INTCONbits.TMR0IF)
 14994  003B0A  A4F2               	btfss	intcon,2,c	;volatile
 14995  003B0C  D019               	goto	i2l106
 14996                           
 14997                           ;Main.c: 160: {
 14998                           ;Main.c: 161: if(Led1_Counter <= 100)
 14999  003B0E  502D               	movf	_Led1_Counter+1,w,c	;volatile
 15000  003B10  E106               	bnz	i2l107
 15001  003B12  0E65               	movlw	101
 15002  003B14  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 15003  003B16  B0D8               	btfsc	status,0,c
 15004  003B18  D002               	goto	i2l107
 15005                           
 15006                           ;Main.c: 162: {
 15007                           ;Main.c: 163: PORTAbits.RA4 = 1;
 15008  003B1A  8880               	bsf	3968,4,c	;volatile
 15009                           
 15010                           ;Main.c: 164: }
 15011  003B1C  D001               	goto	i2l108
 15012  003B1E                     i2l107:
 15013                           
 15014                           ;Main.c: 165: else
 15015                           ;Main.c: 166: {
 15016                           ;Main.c: 167: PORTAbits.RA4 = 0;
 15017  003B1E  9880               	bcf	3968,4,c	;volatile
 15018  003B20                     i2l108:
 15019                           
 15020                           ;Main.c: 168: }
 15021                           ;Main.c: 169: if(Led1_Counter >= 700)
 15022  003B20  0EBC               	movlw	188
 15023  003B22  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 15024  003B24  0E02               	movlw	2
 15025  003B26  582D               	subwfb	_Led1_Counter+1,w,c	;volatile
 15026  003B28  A0D8               	btfss	status,0,c
 15027  003B2A  D004               	goto	i2l109
 15028                           
 15029                           ;Main.c: 170: {
 15030                           ;Main.c: 171: Led1_Counter = 0;
 15031  003B2C  0E00               	movlw	0
 15032  003B2E  6E2D               	movwf	_Led1_Counter+1,c	;volatile
 15033  003B30  0E00               	movlw	0
 15034  003B32  6E2C               	movwf	_Led1_Counter,c	;volatile
 15035  003B34                     i2l109:
 15036                           
 15037                           ;Main.c: 172: }
 15038                           ;Main.c: 173: Led1_Counter++;
 15039  003B34  4A2C               	infsnz	_Led1_Counter,f,c	;volatile
 15040  003B36  2A2D               	incf	_Led1_Counter+1,f,c	;volatile
 15041                           
 15042                           ;Main.c: 174: Update_State_Machine = 1;
 15043  003B38  0E01               	movlw	1
 15044  003B3A  0100               	movlb	0	; () banked
 15045  003B3C  6F8F               	movwf	_Update_State_Machine& (0+255),b	;volatile
 15046                           
 15047                           ; BSR set to: 0
 15048                           ;Main.c: 175: INTCONbits.TMR0IF = 0;
 15049  003B3E  94F2               	bcf	intcon,2,c	;volatile
 15050  003B40                     i2l106:
 15051                           
 15052                           ;Main.c: 176: }
 15053                           ;Main.c: 178: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 15054                           
 15055                           ; BSR set to: 0
 15056  003B40  BA9D               	btfsc	3997,5,c	;volatile
 15057  003B42  AA9E               	btfss	3998,5,c	;volatile
 15058  003B44  D002               	goto	i2l110
 15059                           
 15060                           ;Main.c: 179: EUSART1_Receive_ISR();
 15061  003B46  EC73  F021         	call	_EUSART1_Receive_ISR	;wreg free
 15062  003B4A                     i2l110:
 15063                           
 15064                           ;Main.c: 180: }
 15065                           ;Main.c: 181: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 15066  003B4A  B89D               	btfsc	3997,4,c	;volatile
 15067  003B4C  A89E               	btfss	3998,4,c	;volatile
 15068  003B4E  D002               	goto	i2l111
 15069                           
 15070                           ;Main.c: 182: EUSART1_Transmit_ISR();
 15071  003B50  EC5C  F021         	call	_EUSART1_Transmit_ISR	;wreg free
 15072  003B54                     i2l111:
 15073  003B54  C012  F050         	movff	??_tc_high+17,btemp+3
 15074  003B58  C011  F04F         	movff	??_tc_high+16,btemp+2
 15075  003B5C  C010  F04E         	movff	??_tc_high+15,btemp+1
 15076  003B60  C00F  F04D         	movff	??_tc_high+14,btemp
 15077  003B64  C00E  FFF5         	movff	??_tc_high+13,tablat
 15078  003B68  C00D  FFF8         	movff	??_tc_high+12,tblptru
 15079  003B6C  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 15080  003B70  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 15081  003B74  C00A  FFF4         	movff	??_tc_high+9,prodh
 15082  003B78  C009  FFF3         	movff	??_tc_high+8,prodl
 15083  003B7C  C008  FFDA         	movff	??_tc_high+7,fsr2h
 15084  003B80  C007  FFD9         	movff	??_tc_high+6,fsr2l
 15085  003B84  C006  FFE2         	movff	??_tc_high+5,fsr1h
 15086  003B88  C005  FFE1         	movff	??_tc_high+4,fsr1l
 15087  003B8C  C004  FFEA         	movff	??_tc_high+3,fsr0h
 15088  003B90  C003  FFE9         	movff	??_tc_high+2,fsr0l
 15089  003B94  C002  FFFB         	movff	??_tc_high+1,pclatu
 15090  003B98  C001  FFFA         	movff	??_tc_high,pclath
 15091  003B9C  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15092  003B9E  0011               	retfie		f
 15093  003BA0                     __end_of_tc_high:
 15094                           	opt stack 0
 15095                           pclatu	equ	0xFFB
 15096                           pclath	equ	0xFFA
 15097                           tblptru	equ	0xFF8
 15098                           tblptrh	equ	0xFF7
 15099                           tblptrl	equ	0xFF6
 15100                           tablat	equ	0xFF5
 15101                           prodh	equ	0xFF4
 15102                           prodl	equ	0xFF3
 15103                           intcon	equ	0xFF2
 15104                           intcon2	equ	0xFF1
 15105                           postinc0	equ	0xFEE
 15106                           fsr0h	equ	0xFEA
 15107                           fsr0l	equ	0xFE9
 15108                           wreg	equ	0xFE8
 15109                           postinc1	equ	0xFE6
 15110                           postdec1	equ	0xFE5
 15111                           fsr1h	equ	0xFE2
 15112                           fsr1l	equ	0xFE1
 15113                           bsr	equ	0xFE0
 15114                           indf2	equ	0xFDF
 15115                           postinc2	equ	0xFDE
 15116                           postdec2	equ	0xFDD
 15117                           fsr2h	equ	0xFDA
 15118                           fsr2l	equ	0xFD9
 15119                           status	equ	0xFD8
 15120                           
 15121 ;; *************** function _EUSART1_Transmit_ISR *****************
 15122 ;; Defined at:
 15123 ;;		line 184 in file "../eusart1.c"
 15124 ;; Parameters:    Size  Location     Type
 15125 ;;		None
 15126 ;; Auto vars:     Size  Location     Type
 15127 ;;		None
 15128 ;; Return value:  Size  Location     Type
 15129 ;;                  1    wreg      void 
 15130 ;; Registers used:
 15131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15132 ;; Tracked objects:
 15133 ;;		On entry : 0/0
 15134 ;;		On exit  : 0/0
 15135 ;;		Unchanged: 0/0
 15136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15137 ;;      Params:         0       0       0       0       0       0       0       0       0
 15138 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15139 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15140 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15141 ;;Total ram usage:        0 bytes
 15142 ;; Hardware stack levels used:    1
 15143 ;; This function calls:
 15144 ;;		Nothing
 15145 ;; This function is called by:
 15146 ;;		_tc_high
 15147 ;; This function uses a non-reentrant model
 15148 ;;
 15149                           
 15150                           	psect	text44
 15151  0042B8                     __ptext44:
 15152                           	opt stack 0
 15153  0042B8                     _EUSART1_Transmit_ISR:
 15154                           	opt stack 22
 15155                           
 15156                           ;eusart1.c: 187: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 15157                           
 15158                           ;incstack = 0
 15159  0042B8  0E7E               	movlw	126
 15160  0042BA  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 15161  0042BC  D012               	goto	i2l544
 15162                           
 15163                           ;eusart1.c: 188: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15164  0042BE  5043               	movf	_eusart1TxTail,w,c
 15165  0042C0  0D01               	mullw	1
 15166  0042C2  0E7E               	movlw	low _eusart1TxBuffer
 15167  0042C4  24F3               	addwf	prodl,w,c
 15168  0042C6  6ED9               	movwf	fsr2l,c
 15169  0042C8  0E04               	movlw	high _eusart1TxBuffer
 15170  0042CA  20F4               	addwfc	prodh,w,c
 15171  0042CC  6EDA               	movwf	fsr2h,c
 15172  0042CE  50DF               	movf	indf2,w,c
 15173  0042D0  6EAD               	movwf	4013,c	;volatile
 15174  0042D2  2A43               	incf	_eusart1TxTail,f,c
 15175                           
 15176                           ;eusart1.c: 189: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 15177  0042D4  0E7D               	movlw	125
 15178  0042D6  6443               	cpfsgt	_eusart1TxTail,c
 15179  0042D8  D002               	goto	i2l545
 15180                           
 15181                           ;eusart1.c: 190: eusart1TxTail = 0;
 15182  0042DA  0E00               	movlw	0
 15183  0042DC  6E43               	movwf	_eusart1TxTail,c
 15184  0042DE                     i2l545:
 15185                           
 15186                           ;eusart1.c: 191: }
 15187                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 15188  0042DE  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 15189                           
 15190                           ;eusart1.c: 193: } else {
 15191  0042E0  0012               	return	
 15192  0042E2                     i2l544:
 15193                           
 15194                           ;eusart1.c: 194: PIE1bits.TX1IE = 0;
 15195  0042E2  989D               	bcf	3997,4,c	;volatile
 15196  0042E4  0012               	return	
 15197  0042E6                     __end_of_EUSART1_Transmit_ISR:
 15198                           	opt stack 0
 15199                           pclatu	equ	0xFFB
 15200                           pclath	equ	0xFFA
 15201                           tblptru	equ	0xFF8
 15202                           tblptrh	equ	0xFF7
 15203                           tblptrl	equ	0xFF6
 15204                           tablat	equ	0xFF5
 15205                           prodh	equ	0xFF4
 15206                           prodl	equ	0xFF3
 15207                           intcon	equ	0xFF2
 15208                           intcon2	equ	0xFF1
 15209                           postinc0	equ	0xFEE
 15210                           fsr0h	equ	0xFEA
 15211                           fsr0l	equ	0xFE9
 15212                           wreg	equ	0xFE8
 15213                           postinc1	equ	0xFE6
 15214                           postdec1	equ	0xFE5
 15215                           fsr1h	equ	0xFE2
 15216                           fsr1l	equ	0xFE1
 15217                           bsr	equ	0xFE0
 15218                           indf2	equ	0xFDF
 15219                           postinc2	equ	0xFDE
 15220                           postdec2	equ	0xFDD
 15221                           fsr2h	equ	0xFDA
 15222                           fsr2l	equ	0xFD9
 15223                           status	equ	0xFD8
 15224                           
 15225 ;; *************** function _EUSART1_Receive_ISR *****************
 15226 ;; Defined at:
 15227 ;;		line 198 in file "../eusart1.c"
 15228 ;; Parameters:    Size  Location     Type
 15229 ;;		None
 15230 ;; Auto vars:     Size  Location     Type
 15231 ;;		None
 15232 ;; Return value:  Size  Location     Type
 15233 ;;                  1    wreg      void 
 15234 ;; Registers used:
 15235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15236 ;; Tracked objects:
 15237 ;;		On entry : 0/0
 15238 ;;		On exit  : 0/0
 15239 ;;		Unchanged: 0/0
 15240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15241 ;;      Params:         0       0       0       0       0       0       0       0       0
 15242 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15243 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15244 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15245 ;;Total ram usage:        0 bytes
 15246 ;; Hardware stack levels used:    1
 15247 ;; This function calls:
 15248 ;;		Nothing
 15249 ;; This function is called by:
 15250 ;;		_tc_high
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           	psect	text45
 15255  0042E6                     __ptext45:
 15256                           	opt stack 0
 15257  0042E6                     _EUSART1_Receive_ISR:
 15258                           	opt stack 22
 15259                           
 15260                           ;eusart1.c: 199: if (1 == RCSTA1bits.OERR) {
 15261                           
 15262                           ;incstack = 0
 15263  0042E6  A2AB               	btfss	4011,1,c	;volatile
 15264  0042E8  D002               	goto	i2l550
 15265                           
 15266                           ;eusart1.c: 202: RCSTA1bits.CREN = 0;
 15267  0042EA  98AB               	bcf	4011,4,c	;volatile
 15268                           
 15269                           ;eusart1.c: 203: RCSTA1bits.CREN = 1;
 15270  0042EC  88AB               	bsf	4011,4,c	;volatile
 15271  0042EE                     i2l550:
 15272                           
 15273                           ;eusart1.c: 204: }
 15274                           ;eusart1.c: 207: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15275  0042EE  5041               	movf	_eusart1RxHead,w,c
 15276  0042F0  0D01               	mullw	1
 15277  0042F2  0E00               	movlw	low _eusart1RxBuffer
 15278  0042F4  24F3               	addwf	prodl,w,c
 15279  0042F6  6ED9               	movwf	fsr2l,c
 15280  0042F8  0E04               	movlw	high _eusart1RxBuffer
 15281  0042FA  20F4               	addwfc	prodh,w,c
 15282  0042FC  6EDA               	movwf	fsr2h,c
 15283  0042FE  CFAE FFDF          	movff	4014,indf2	;volatile
 15284  004302  2A41               	incf	_eusart1RxHead,f,c
 15285                           
 15286                           ;eusart1.c: 208: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 15287  004304  0E7D               	movlw	125
 15288  004306  6441               	cpfsgt	_eusart1RxHead,c
 15289  004308  D002               	goto	i2l551
 15290                           
 15291                           ;eusart1.c: 209: eusart1RxHead = 0;
 15292  00430A  0E00               	movlw	0
 15293  00430C  6E41               	movwf	_eusart1RxHead,c
 15294  00430E                     i2l551:
 15295                           
 15296                           ;eusart1.c: 210: }
 15297                           ;eusart1.c: 211: eusart1RxCount++;
 15298  00430E  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 15299  004310  0012               	return		;funcret
 15300  004312                     __end_of_EUSART1_Receive_ISR:
 15301                           	opt stack 0
 15302                           pclatu	equ	0xFFB
 15303                           pclath	equ	0xFFA
 15304                           tblptru	equ	0xFF8
 15305                           tblptrh	equ	0xFF7
 15306                           tblptrl	equ	0xFF6
 15307                           tablat	equ	0xFF5
 15308                           prodh	equ	0xFF4
 15309                           prodl	equ	0xFF3
 15310                           intcon	equ	0xFF2
 15311                           intcon2	equ	0xFF1
 15312                           postinc0	equ	0xFEE
 15313                           fsr0h	equ	0xFEA
 15314                           fsr0l	equ	0xFE9
 15315                           wreg	equ	0xFE8
 15316                           postinc1	equ	0xFE6
 15317                           postdec1	equ	0xFE5
 15318                           fsr1h	equ	0xFE2
 15319                           fsr1l	equ	0xFE1
 15320                           bsr	equ	0xFE0
 15321                           indf2	equ	0xFDF
 15322                           postinc2	equ	0xFDE
 15323                           postdec2	equ	0xFDD
 15324                           fsr2h	equ	0xFDA
 15325                           fsr2l	equ	0xFD9
 15326                           status	equ	0xFD8
 15327                           pclatu	equ	0xFFB
 15328                           pclath	equ	0xFFA
 15329                           tblptru	equ	0xFF8
 15330                           tblptrh	equ	0xFF7
 15331                           tblptrl	equ	0xFF6
 15332                           tablat	equ	0xFF5
 15333                           prodh	equ	0xFF4
 15334                           prodl	equ	0xFF3
 15335                           intcon	equ	0xFF2
 15336                           intcon2	equ	0xFF1
 15337                           postinc0	equ	0xFEE
 15338                           fsr0h	equ	0xFEA
 15339                           fsr0l	equ	0xFE9
 15340                           wreg	equ	0xFE8
 15341                           postinc1	equ	0xFE6
 15342                           postdec1	equ	0xFE5
 15343                           fsr1h	equ	0xFE2
 15344                           fsr1l	equ	0xFE1
 15345                           bsr	equ	0xFE0
 15346                           indf2	equ	0xFDF
 15347                           postinc2	equ	0xFDE
 15348                           postdec2	equ	0xFDD
 15349                           fsr2h	equ	0xFDA
 15350                           fsr2l	equ	0xFD9
 15351                           status	equ	0xFD8
 15352                           
 15353                           	psect	rparam
 15354  0000                     pclatu	equ	0xFFB
 15355                           pclath	equ	0xFFA
 15356                           tblptru	equ	0xFF8
 15357                           tblptrh	equ	0xFF7
 15358                           tblptrl	equ	0xFF6
 15359                           tablat	equ	0xFF5
 15360                           prodh	equ	0xFF4
 15361                           prodl	equ	0xFF3
 15362                           intcon	equ	0xFF2
 15363                           intcon2	equ	0xFF1
 15364                           postinc0	equ	0xFEE
 15365                           fsr0h	equ	0xFEA
 15366                           fsr0l	equ	0xFE9
 15367                           wreg	equ	0xFE8
 15368                           postinc1	equ	0xFE6
 15369                           postdec1	equ	0xFE5
 15370                           fsr1h	equ	0xFE2
 15371                           fsr1l	equ	0xFE1
 15372                           bsr	equ	0xFE0
 15373                           indf2	equ	0xFDF
 15374                           postinc2	equ	0xFDE
 15375                           postdec2	equ	0xFDD
 15376                           fsr2h	equ	0xFDA
 15377                           fsr2l	equ	0xFD9
 15378                           status	equ	0xFD8
 15379                           
 15380                           	psect	temp
 15381  00004D                     btemp:
 15382                           	opt stack 0
 15383  00004D                     	ds	1
 15384  0000                     int$flags	set	btemp
 15385  0000                     wtemp6	set	btemp+1
 15386                           pclatu	equ	0xFFB
 15387                           pclath	equ	0xFFA
 15388                           tblptru	equ	0xFF8
 15389                           tblptrh	equ	0xFF7
 15390                           tblptrl	equ	0xFF6
 15391                           tablat	equ	0xFF5
 15392                           prodh	equ	0xFF4
 15393                           prodl	equ	0xFF3
 15394                           intcon	equ	0xFF2
 15395                           intcon2	equ	0xFF1
 15396                           postinc0	equ	0xFEE
 15397                           fsr0h	equ	0xFEA
 15398                           fsr0l	equ	0xFE9
 15399                           wreg	equ	0xFE8
 15400                           postinc1	equ	0xFE6
 15401                           postdec1	equ	0xFE5
 15402                           fsr1h	equ	0xFE2
 15403                           fsr1l	equ	0xFE1
 15404                           bsr	equ	0xFE0
 15405                           indf2	equ	0xFDF
 15406                           postinc2	equ	0xFDE
 15407                           postdec2	equ	0xFDD
 15408                           fsr2h	equ	0xFDA
 15409                           fsr2l	equ	0xFD9
 15410                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    67
    Data        11
    BSS         910
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      76
    BANK0           160     40     136
    BANK1           256      0     178
    BANK2           256      0     178
    BANK3           256      0     178
    BANK4           256      0     252
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Pcomm_List2	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    Pcomm_List	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_SETxPWM
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _EEPROMxSTORE->_Eeprom_Store
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_atoi
    _TranslateMessage->_printf
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _EEPROMxREAD->_Eeprom_Read
    _SendMessage->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_READxRECEIVEDxMESSAGE
    _Update_StateMchn->_Train_Path
    _Train_Path->_Train_Move_Left_Brake
    _Train_Path->_Train_Move_Left_Start
    _Train_Path->_Train_Move_Right_Brake
    _Train_Path->_Train_Move_Right_Start
    _READxRECEIVEDxMESSAGE->_printf
    _TranslateMessage->_printf
    _DIAGNOSTICxTOxPC->_SendMessage
    _SendMessage->_printf

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  681883
                                             38 BANK0      2     2      0
                     _APIxInitialize
                   _DIAGNOSTICxTOxPC
                        _EEPROMxREAD
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     5     5      0  638582
                                             25 BANK0      5     5      0
                    _Debounce_Inputs
                       _EEPROMxSTORE
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                            _SETxPWM
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  510500
                                             23 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                2     2      0   63817
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   48074
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   33550
                                             30 COMRAM     7     4      3
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1   31406
                                             30 COMRAM     2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMxSTORE                                        12    10      2     660
                                             26 COMRAM    10     8      2
                                             21 BANK0      2     2      0
                       _Eeprom_Store
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Store                                         8     4      4     372
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0   30377
                                             30 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     144
                                             20 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   23298
                                             34 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   21127
                                             31 COMRAM     4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   6     2      4    1744
                                             20 COMRAM     6     2      4
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (5) _GETxAPIxVAL                                          2     0      2   14431
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0   15802
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          6     2      4   15802
                                             24 COMRAM     6     2      4
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         6     2      4    1216
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROMxREAD                                          7     5      2     395
                                             26 COMRAM     7     5      2
                        _Eeprom_Read
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read                                          8     6      2     236
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _DIAGNOSTICxTOxPC                                     2     2      0    3649
                                             31 COMRAM     2     2      0
                        _SendMessage
 ---------------------------------------------------------------------------------
 (2) _SendMessage                                          4     0      4    3649
                                             34 BANK0      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2147
                                             30 COMRAM     1     1      0
                                             21 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     112
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _DIAGNOSTICxTOxPC
     _SendMessage
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _EEPROMxREAD
     _Eeprom_Read
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _EEPROMxSTORE
       _Eeprom_Store
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _SETxPWM
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _SETxAPIxVAL
         _SENDxMESSAGE
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      FC      13       98.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      B2      11       69.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      B2       9       69.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B2       7       69.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      88       5       85.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3E6      20        0.0%
DATA                 0      0     3E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Dec 04 22:42:19 2017

                  _eusart1TxBufferRemaining 0042                           ?_DIAGNOSTICxTOxPC 0001  
                                        l90 3E56                                          l92 3E6E  
                                        l93 3E7E                                 __CFG_BOR$ON 000000  
                                        bsr 000FE0                         ___wmul@multiplicand 0015  
                               __CFG_BORV$1 000000                                 ?_GETxAPIxRW 0013  
                              __CFG_CP0$OFF 000000                          ??_DIAGNOSTICxTOxPC 0020  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l201 0A12  
                                       l210 0B30                                         l203 0A52  
                                       l220 0CD2                                         l212 0B40  
                                       l221 0CE2                                         l213 0B72  
                                       l205 0ADC                                         l310 15AE  
                                       l302 12A2                                         l222 0D0C  
                                       l214 0B9C                                         l303 1282  
                                       l231 0EF0                                         l223 0D36  
                                       l215 0BC6                                         l400 2346  
                                       l312 141A                                         l320 1372  
                                       l232 0F24                                         l224 0D60  
                                       l216 0BF0                                         l313 132E  
                                       l209 12E0                                         l305 1286  
                                       l241 0FBE                                         l233 0F2C  
                                       l225 0D8A                                         l217 0C1C  
                                       l402 234C                                         l234 0F48  
                                       l226 0DB4                                         l218 0C44  
                                       l323 138E                                         l307 128A  
                                       l251 106A                                         l243 0FFC  
                                       l227 0DDE                                         l219 0C54  
                                       l420 23E0                                         l404 2352  
                                       l316 144C                                         l332 13E2  
                                       l308 1294                                         l252 1044  
                                       l244 0FD6                                         l236 0F62  
                                       l228 0E0A                                         l317 1356  
                                       l309 12D2                                         l261 10E2  
                                       l253 109A                                         l245 102C  
                                       l237 0F66                                         l229 0E14  
                                       l430 2454                                         l342 149C  
                                       l326 13AA                                         l270 1124  
                                       l254 1048                                         l246 0FDA  
                                       l238 0FB0                                         l423 240C  
                                       l335 13FE                                         l255 104C  
                                       l247 0FDE                                         l183 089E  
                                       l408 252A                                         l440 24B2  
                                       l344 1522                                         l352 14EA  
                                       l264 10C8                                         l256 1050  
                                       l248 0FE2                                         l192 0956  
                                       l441 24CA                                         l425 2424  
                                       l409 237C                                         l345 14A4  
                                       l329 13C6                                         l265 10CC  
                                       l257 105C                                         l249 0FEE  
                                       l610 3886                                         l362 158E  
                                       l290 1196                                         l274 1112  
                                       l266 10D0                                         l186 08D2  
                                       l523 4288                                         l611 37F6  
                                       l443 24E2                                         l427 243C  
                                       l371 22C4                                         l187 1596  
                                       l355 1506                                         l339 148E  
                                       l259 11F0                                         l291 11A0  
                                       l267 10D4                                         l195 0994  
                                       l604 3870                                         l620 3866  
                                       l452 256C                                         l460 2558  
                                       l372 2280                                         l348 153E  
                                       l292 11A4                                         l284 1154  
                                       l276 1116                                         l188 08DA  
                                       l525 42B0                                         l605 379A  
                                       l453 2546                                         l445 24FA  
                                       l373 2290                                         l349 14CE  
                                       l293 11E2                                         l189 0918  
                                       l614 380C                                         l606 37F2  
                                       l382 262C                                         l390 2304  
                                       l294 1220                                         l286 11B2  
                                       l278 1162                                         l198 09D2  
                                       l631 2E70                                         l615 383C  
                                       l471 25A8                                         l463 2588  
                                       l447 2512                                         l375 2298  
                                       l359 1580                                         l295 1224  
                                       l616 3826                                         l456 254C  
                                       l384 2324                                         l392 2310  
                                       l296 125A                                         l641 2F1A  
                                       l633 2E8C                                         l617 3816  
                                       l369 25D8                                         l473 25B0  
                                       l465 2590                                         l385 22E2  
                                       l377 22A4                                         l289 1192  
                                       l650 281A                                         l458 2552  
                                       l651 2648                                         l635 2EA6  
                                       l475 25B8                                         l467 2598  
                                       l379 22B0                                         l299 1268  
                                       l628 2EBC                                         l900 17B8  
                                       l396 2360                                         l388 22F8  
                                       l661 2742                                         l653 2662  
                                       l629 2E54                                         l901 17C2  
                                       l477 25C0                                         l469 25A0  
                                       l397 2340                                         l910 184A  
                                       l663 2778                                         l655 26A0  
                                       l751 3C68                                         l639 2EFE  
                                       l479 25D0                                         l752 3BCE  
                                       l680 2964                                         l904 17D8  
                                       l840 4002                                         l649 2864  
                                       l665 27AE                                         l657 26D6  
                                       l681 29A0                                         l913 1860  
                                       l905 17FA                                         l841 3FA2  
                                       l762 40C8                                         l674 2A5C  
                                       l682 29DC                                         l922 18DE  
                                       l914 186A                                         l770 2DC8  
                                       l850 3FFE                                         l667 27E4  
                                       l659 270C                                         l683 2A18  
                                       l675 286C                                         l931 195C  
                                       l923 18E8                                         l843 3FA6  
                                       l940 19DA                                         l932 1966  
                                       l908 1880                                         l844 3FAA  
                                       l860 3F2A                                         l677 28B0  
                                       l941 19E4                                         l917 18FE  
                                       l909 1828                                         l781 4076  
                                       l845 3FC2                                         l861 3F42  
                                       l678 28EC                                         l950 1A62  
                                       l926 197C                                         l918 18A6  
                                       l846 3FD2                                         l862 3F52  
                                       l759 40AE                                         l679 2928  
                                       l935 19FA                                         l927 1924  
                                       l919 18C8                                         l767 2DE2  
                                       l944 1A78                                         l936 19A2  
                                       l928 1946                                         l872 16C0  
                                       l776 404E                                         l768 2CA2  
                                       l848 3FD6                                         l856 3F82  
                                       l864 3F56                                         l953 1AF6  
                                       l945 1A20                                         l937 19C4  
                                       l881 1730                                         l873 1668  
                                       l849 3FEE                                         l865 3F6E  
                                       l857 3F22                                         l962 1B74  
                                       l954 1A9E                                         l946 1A42  
                                       l890 17A0                                         l882 16D8  
                                       l874 1672                                         l866 3F7E  
                                       l971 1BF2                                         l963 1B1C  
                                       l955 1AC0                                         l891 1748  
                                       l883 16E2                                         l859 3F26  
                                       l980 1C62                                         l972 1B9A  
                                       l964 1B3E                                         l892 1752  
                                       l981 1C0A                                         l973 1BBC  
                                       l949 1A58                                         l877 1688  
                                       _API 0100                                         l990 1C7A  
                                       l982 1C2C                                         l958 1AD6  
                                       l886 16F8                                         l878 16AA  
                                       l991 1C9C                                         l967 1B54  
                                       l959 1AE0                                         l895 1768  
                                       l887 171A                                         l976 1BD2  
                                       l968 1B5E                                         l896 178A  
                                       l985 1C42                                         l977 1BDC  
                                       l994 1CB2                                         l986 1C4C  
                                       l995 1CBC                                         l899 1810  
                                       l989 1CD2                                         l998 1D42  
                                       l999 1CEA                                __CFG_CPB$OFF 000000  
                              _Stop_Program 0089                                         _PR2 000FCB  
                              __CFG_CPD$OFF 000000                Eeprom_Read@Location_Low_Byte 0015  
                                       prod 000FF3                                         wreg 000FE8  
                    ?_READxRECEIVEDxMESSAGE 0001            Train_Move_Right_Start@Return_Val 00E3  
                              ?_GETxAPIxVAL 0013                                  _Diag_Comm2 0072  
                           APIxInitialize@i 0013                                __CFG_LVP$OFF 000000  
       __end_of_Left_Mountain_From_The_Left 39B0                 _Left_Mountain_From_The_Left 389E  
                              __CFG_WDT$OFF 000000                                        l1000 1D0C  
                                      l1003 1D22                                        l1004 1D2C  
                                      l1100 3632       __end_of_Right_Mountain_From_The_Right 3676  
    __size_of_Right_Mountain_From_The_Right 0114               _Right_Mountain_From_The_Right 3562  
                                      l1022 2C68                                        l1110 3AAE  
                                      l1102 365A                                        l1031 2BD0  
                                      l1023 2AA4                                        l1111 39B6  
                                      l1103 365E                                        l1040 2BD6  
                                      l1024 2BC2                                        l1041 2C00  
                                      l1033 2BB2                                        l1042 2C0E  
                                      l1034 2B36                                        l1026 2B26  
                                      l1114 39E4                                        l1027 2AAA  
                                      l1203 396C                                        l1036 2B74  
                                      l1116 3ABC                                        l1220 36B2  
                                      l1140 3086                                        l1029 2AE8  
                                      l1205 3994                                        l1125 3A7A  
                                      l1117 39EA                                        l1213 3778  
                                      l1221 3706                                        l1141 2FA4  
                                      l1206 3998                                        l1118 3A3E  
                                      l1230 376E                                        l1214 367C  
                                      l1070 32FE                                        l1039 2C7C  
                                      l1127 3AA4                                        l1231 3772  
                                      l1143 2FAA                                        l1071 31F8  
                                      l1128 3AA8                                        l1144 2FD2  
                                      l1072 324A                                        l1240 31AA  
                                      l1217 36AC                                        l1137 306A  
                                      l1145 2FE0                                        l1073 3272  
                                      l1241 308C                                        l1146 3032  
                                      l1138 2F46                                        l1074 327C  
                                      l1250 319C                                        l1242 30BA  
                                      l1219 3786                                        l1091 3672  
                                      l1147 305C                                        l1139 2F7A  
                                      l1067 32E2                                        l1075 32B4  
                                      l1243 31C6                                        l1228 3744  
                                      l1092 359E                                        l1068 31CC  
                                      l1244 30E4                                        l1172 3418  
                                      l1180 33E8                                        l1261 3D78  
                                      l1085 3664                                        l1093 35F4  
                                      l1077 32DC                                        l1069 31EA  
                                      l1181 340E                                        l1173 3304  
                                      l1262 3DB6                                        l1086 3568  
                                      l1246 30EA                                        l1174 3322  
                                      l1247 3112                                        l1175 3434  
                                      l1192 38D4                                        l1248 3120  
                                      l1176 332C                                        l1089 3598  
                                      l1249 3172                                        l1177 3380  
                                      l1290 34EA                                        l1194 39AC  
                                      l1178 33A8                                        l1291 353C  
                                      l1195 38DA                                        l1179 33B6  
                                      l1292 34F0                                        l1284 3480  
                                      l1188 399E                                        l1196 392E  
                                      l1277 3444                                        l1189 38A4  
                                      l1286 34A8                                        l1278 3454  
                                      l1472 3D04                                        l1473 3CCA  
                                      l1730 4120                                        l1466 3C78  
                                      l1731 412A                                        l1475 3D36  
                                      l1467 3C74                                        l1740 41FA  
                                      l1741 4204                                        l1469 3CB8  
                                      l1726 4100                                        l1727 40F8  
                                      l1647 4396                                        l1736 41E2  
                                      l1737 41DA                                        l6200 1DC2  
                                      l6208 3BC6                                        l6190 1D62  
                                      l8102 3A9A                                        l8140 34AC  
                                      l8230 2C9A                                        l8046 3650  
                                      l9230 1348                                        l9038 0EF0  
                                      l8186 3D00                                        l7714 33B0  
                                      l7830 31A4                                        l9326 14C0  
                                      l7576 43F0                                        l7746 31F2  
                                      l7934 398A                                        l8826 2EA6  
                                      l8818 2E70                                        l7882 3064  
                                      l8838 2EFE                                        l7990 3764  
                                      l8942 0C18                                        STR_1 084E  
                                      STR_2 0855                                        STR_3 085C  
                                      STR_4 0863                                        STR_5 086A  
                                      STR_6 085C                                        STR_7 0863  
                                      STR_8 0844              Right_Mountain_From_The_Left@rc 00CF  
                                      u4075 4254                                        u5320 3C50  
                                      u7200 3546                                        u7120 3A6E  
                                      u7040 3626                                        u5290 1DC2  
                                      u6510 4154                                        u7310 407E  
                                      u7070 39D6                                        u6520 3D66  
                                      u7410 1738                                        u6620 41E6  
                                      u7180 34D8                                        u7500 1888  
                                      u7340 2D22                                        u8060 2408  
                                      u7510 188A                                        u7350 2DCC  
                                      u8150 24C6                                        u8070 2420  
                                      u7440 17A8                                        u7416 173A  
                                      u8160 24DE                                        u8080 2438  
                                      u9120 1474                                        u6650 422E  
                                      u7290 4056                                        u8170 24F6  
                                      u7700 1AFE                                        u7620 1A02  
                                      u7540 1906                                        u7380 16C8  
                                      u8180 250E                                        u6590 4104  
                                      u8350 2E7C                                        u7710 1B00  
                                      u7630 1A04                                        u7550 1908  
                                      u7470 1818                                        u7446 17AA  
                                      u6830 38C6                                        u6910 369E  
                                      u9230 1566                                        u9400 27BC  
                                      u9410 27F2                                        u7810 1C6A  
                                      u7386 16CA                                        u8530 0A82  
                                      u9340 2678                                        u7740 1B7C  
                                      u7660 1A80                                        u7580 1984  
                                      u7476 181A                                        u8540 0B0C  
                                      u9350 26AE                                        u8390 2F0A  
                                      u9270 37DE                                        u7750 1B7E  
                                      u7670 1A82                                        u7590 1986  
                                      u7910 22C0                                        u9360 26E4  
                                      u7840 1CDA                                        u7816 1C6C  
                                      u6880 3960                                        u6960 3738  
                                      u9370 271A                                        u9380 2750  
                                      u7780 1BFA                                        u9390 2786  
                                      u7870 1D4A                                        u7846 1CDC  
                                      u6990 358A                                        u8830 0F20  
                                      u8750 0E06                                        u9447 3E48  
                                      u7786 1BFC                                        u8930 124C  
                                      u7876 1D4C                                        u8940 127E  
                                      u8870 0F8E                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                        _Data 00B0  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 2256  
            __size_of_Train_Move_Left_Brake 0146               __end_of_Train_Move_Left_Brake 308A  
                                      _pLen 007A                                        _atoi 3C72  
                                      _main 3DEC                               ?_EUSART1_Read 0001  
            __size_of_Train_Move_Left_Start 0138                       _Update_StateMchn$2184 00D5  
                     _Update_StateMchn$2185 00D7                             __end_of_SETxPWM 3DEC  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        fsr0l 000FE9  
                                      indf2 000FDF                                        fsr1l 000FE1  
                                      fsr2l 000FD9                                        btemp 004D  
             __end_of_Train_Move_Left_Start 3302                                        prodh 000FF4  
                                      prodl 000FF3                                        start 00C6  
                           __end_of_DataLen 0844                         __end_of_Eeprom_Read 40E2  
                             __CFG_IESO$OFF 000000                             __end_of_ApiList 0839  
               EUSART1_Initialize@baud_rate 0013                          Green_Led@Operation 0013  
                             __CFG_MCLRE$ON 000000                                ___param_bank 000000  
                      Eeprom_Store@Location 0013                               ??_Init_Timers 0013  
                           __end_of_Red_Led 3F9E                               __CFG_PLLDIV$5 000000  
                           EEPROMxREAD@Data 001F                        __end_of_EEPROMxSTORE 2DEC  
                            __CFG_CCP2MX$ON 000000                                       ?_atoi 0019  
                                     ?_main 0001                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 0013  
                                     _T0CON 000FD5                  __end_of_SETxAPIxVALxNoxRET 424A  
                                     _T2CON 000FCA                             __end_of___lwdiv 4134  
                              SETxPWM@speed 001F                                       i2l110 3B4A  
                                     i2l111 3B54                             __end_of___lwmod 420E  
                                     i2l106 3B40                                       i2l107 3B1E  
                                     i2l108 3B20                                       i2l109 3B34  
                                     i2l550 42EE                                       i2l551 430E  
                                     i2l544 42E2                                       i2l545 42DE  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 42B8  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                                     _pData 007C                              __CFG_EBTRB$OFF 000000  
                           __end_of_dpowers 0843                             __end_of_isdigit 439E  
                           __end_of_tc_high 3BA0                                       atoi@a 001E  
                                     atoi@s 0019                                       _putch 43EE  
                                     pclath 000FFA                                       tablat 000FF5  
                           ?_APIxInitialize 0001                              ??_EUSART1_Read 0013  
                                     status 000FD8                                       wtemp6 004E  
 Train_Move_Left_Brake@Train_Move_Wait_Time 0064                   __size_of_TranslateMessage 0158  
                       __size_of_GETxAPIxRW 001C                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 4086                                  _ReadActive 006E  
                      __size_of_EEPROMxREAD 00D2                             __initialization 3E88  
                              __end_of_atoi 3D40                  __end_of_EUSART1_Initialize 41CC  
                              __end_of_main 3E88                               ??_SendMessage 0020  
                          __end_of_Init_Pwm 433A                                      ??_atoi 001B  
                                    ??_main 00E0                         __end_of_Init_Timers 43EE  
                             __activetblptr 000002                      Eeprom_Read@Return_Data 0019  
                          __end_of_Junction 2C80                                _Led1_Counter 002C  
                                _Pcomm_List 0076                           _Green_Led_Counter 002A  
                     ?_EUSART1_Transmit_ISR 0001                           ?_Update_StateMchn 0001  
                        ??_Update_StateMchn 00D3                                      _ADCON1 000FC1  
                                    _EEDATA 000FA8                                      _CCPR1L 000FBE  
                                 ??_SETxPWM 0022                                      _EECON2 000FA7  
                                    ?_putch 0001                                      _API_RW 0200  
                        __size_of_Green_Led 0080                                 _Eeprom_Read 4086  
                                    _INTCON 000FF2                     ?_Train_Move_Right_Brake 0001  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 003A                     ?_Train_Move_Right_Start 0001  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 0001  
                                 ??_Red_Led 0013                              __CFG_XINST$OFF 000000  
           Train_Move_Left_Brake@Return_Val 00E4                                      ___wmul 433A  
                            __CFG_STVREN$ON 000000                                   ??___lwdiv 0017  
                                 ??___lwmod 001E                                      clear_0 3ECE  
                                    clear_1 3EDA                                      clear_2 3EE6  
                              _DelayCounter 0070                                      clear_3 3EF2  
                                    clear_4 3EFE                                      clear_5 3F0A  
                                    _tc_low 0018                                      _printf 3438  
                            _Switch_Moutain 002E                                  _Train_Path 2256  
   Right_Mountain_From_The_Right@Return_Val 004B      Left_Mountain_From_The_Right@Return_Val 004A  
                              __pdataCOMRAM 0048                              _Switch_Program 008D  
                                 ??_isdigit 0013                                   ??_tc_high 0001  
                       __end_of_SendMessage 4380                   _Activate_Controls_Counter 007E  
                              __mediumconst 0000                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                              ?_SETxAPIxVAL 0019                   _Button_Contact_Counter_LB 0033  
                 _Button_Contact_Counter_LF 0032                   _Button_Contact_Counter_RB 0031  
                 _Button_Contact_Counter_RF 0030              __end_of_Train_Move_Right_Brake 31CA  
                           _eusart1RxBuffer 0400                        __size_of_GETxAPIxVAL 001C  
                           _eusart1TxBuffer 047E              __end_of_Train_Move_Right_Start 3438  
                      _Train_Move_Pwm_Count 0082                                  __accesstop 0060  
                   __end_of__initialization 3F10                             __CFG_PBADEN$OFF 000000  
                             ___rparam_used 000001                       __size_of_EEPROMxSTORE 016C  
                             _Received_Data 0088                              __pcstackCOMRAM 0001  
                              __pidataBANK0 43FA                                 _Init_Timers 43D6  
                             __end_of_putch 43FA                           __end_of_Green_Led 401E  
                              ??_GETxAPIxRW 0015                     ??_READxRECEIVEDxMESSAGE 00DC  
                      __end_of_EUSART1_Read 42B8                           __end_of_SetDCPWM1 4284  
                           _Red_Led_Counter 0028                      ??_EUSART1_Transmit_ISR 0001  
Train_Move_Right_Start@Train_Move_Wait_Time 0062                    __size_of_Debounce_Inputs 0786  
               __end_of_EUSART1_Receive_ISR 4312            Train_Move_Right_Brake@Return_Val 00E2  
                             ?_SENDxMESSAGE 0013                   __size_of_DIAGNOSTICxTOxPC 023A  
                                   ??_putch 0013                               _eusart1RxHead 0041  
                             _eusart1TxHead 0044                       __size_of_Eeprom_Store 0068  
               Junction@Junction_Left_Right 0020                               _eusart1RxTail 0040  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                __pbssBANK2 0200                                  __pbssBANK3 0300  
                                __pbssBANK4 0400                               _eusart1TxTail 0043  
                              _EEPROMxSTORE 2C80                                   ?_Init_Pwm 0001  
                          _TranslateMessage 2DEC                                 _Pcomm_List2 0074  
                        __end_of_GETxAPIxRW 43D6                            GETxAPIxVAL@index 0013  
                          SETxAPIxVAL@index 0019                                   ?_Junction 001F  
                          SETxAPIxVAL@value 001B        __size_of_Left_Mountain_From_The_Left 0112  
                                   ?___wmul 0013                            SendMessage@index 00DC  
                          SendMessage@value 00DE                                     _CCP1CON 000FBD  
                               _SendMessage 4360                                     ?_tc_low 0001  
                                   ?_printf 00CF                                 ?_Train_Path 00D1  
                              _Eeprom_Store 401E                                     _INTCON2 000FF1  
 Train_Move_Left_Start@Train_Move_Wait_Time 0066                              ??_SENDxMESSAGE 0017  
                          ??_APIxInitialize 0013                                     _SETxPWM 3D40  
                          SETxPWM@direction 0021                                     _DataLen 0843  
                                   _ApiList 0801                          _SETxAPIxVALxNoxRET 420E  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 001F  
                         Eeprom_Store@Value 0015                                     _Red_Led 3F1E  
                     _Train_Move_Left_Brake 2F44                                  ??_Junction 0020  
                                   __Hparam 0000                         ?_SETxAPIxVALxNoxRET 0015  
                     _Train_Move_Left_Start 31CA                                     __Lparam 0000  
                      _Message_To_Translate 0086                             __size_of___wmul 0026  
                                   ___lwdiv 40E2                                     ___lwmod 41CC  
                              __psmallconst 0800                                     __pcinit 3E88  
                                   __ramtop 0800                             __size_of_tc_low 00AE  
                                   __ptext0 3DEC                                     __ptext1 0872  
                                   __ptext2 2256                                     __ptext3 3302  
                                   __ptext4 308A                                     __ptext5 31CA  
                                   __ptext6 2F44                                     __ptext7 3562  
                                   __ptext8 3676                                     __ptext9 39B0  
                      Train_Path@Return_Val 00E6                             __size_of_printf 012A  
                                   _dpowers 0839                                     _isdigit 4380  
                                   _tc_high 0008                        ??_SETxAPIxVALxNoxRET 0019  
                        _EUSART1_Initialize 4184                   _Train_Move_Pwm_Fast_Count 0068  
                            __pintcode_body 3AC0                        end_of_initialization 3F10  
                           _Switch_Junction 002F                                ?_Eeprom_Read 0013  
                         ??_Debounce_Inputs 001F                         ?_EUSART1_Initialize 0001  
                      __size_of_SETxAPIxVAL 0050                               __Lmediumconst 0000  
                                   int_func 3AC0                            SETxPWM@pwm_speed 0024  
                             ??_EEPROMxREAD 001D                   __size_of_Update_StateMchn 0D62  
                       __size_of_Train_Path 03DA                                   _RCSTAbits 000FAB  
                                   printf@c 00DB                                     printf@f 00CF  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                       __size_of_EUSART1_Read 0034  
                      EEPROMxSTORE@api_list 00CF              Left_Mountain_From_The_Right@rc 00CF  
                      ??_EUSART1_Initialize 0013                                   _PORTAbits 000F80  
                                 _PORTBbits 000F81                                   _PORTCbits 000F82  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                                 _TRISEbits 000F96                         Eeprom_Read@Location 0013  
                          _DIAGNOSTICxTOxPC 2630                Junction@Junction_Switch_Time 006A  
                                 _Diag_Comm 0078                      ?_Train_Move_Left_Brake 0001  
                              _EUSART1_Read 4284                                   _TXSTAbits 000FAC  
                    ?_Train_Move_Left_Start 0001                                 _Switch_Main 00E7  
                               _Switch_Init 008E                               EEPROMxSTORE@i 00D0  
                      __end_of_SENDxMESSAGE 2AA0                         __end_of_EEPROMxREAD 3C72  
                              ?_Init_Timers 0001                                 _WriteActive 006C  
                                 _Comm_List 0090                          Junction@Return_Val 004C  
                            __end_of___wmul 4360                                 _BAUDCONbits 000FB8  
                             __pidataCOMRAM 4400                 _Train_Move_Right_Brake$2189 00CF  
                      _Update_State_Machine 008F                              __end_of_tc_low 00C6  
                  __end_of_TranslateMessage 2F44                 _Button_Contact_Counter_Stop 0035  
                            __end_of_printf 3562              __size_of_READxRECEIVEDxMESSAGE 0114  
                                 _Green_Led 3F9E               __end_of_READxRECEIVEDxMESSAGE 389E  
                       start_initialization 3E88                               ??_GETxAPIxVAL 0015  
                                 _SetDCPWM1 424A                             SetDCPWM1@DCycle 0019  
                    _Mountain_Delay_Counter 0026                ?_Left_Mountain_From_The_Left 0001  
             Eeprom_Store@Location_Low_Byte 0017                           __size_of_Init_Pwm 0028  
             Eeprom_Read@Location_High_Byte 0017                           __size_of_Junction 01E0  
                                  ??___wmul 0017                                 __pdataBANK0 00E2  
                          __CFG_LPT1OSC$OFF 000000                                ?_SendMessage 00DC  
                                  ??_tc_low 00BA                                    ??_printf 001F  
                            _eusart1RxCount 003F                                ??_Train_Path 0026  
                                ?_Green_Led 0001                                 __pbssCOMRAM 0026  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 00BA  
                                ?_SetDCPWM1 0015  Train_Move_Right_Brake@Train_Move_Wait_Time 0060  
                              _isdigit$1841 0014                                    ?_SETxPWM 001F  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 43BA  
             ??_Left_Mountain_From_The_Left 0026                        __size_of_Eeprom_Read 005C  
                               _EEPROMxREAD 3BA0                                    ?_Red_Led 0001  
                          _Update_StateMchn 0872                            ___lwdiv@dividend 0013  
     Left_Mountain_From_The_Left@Return_Val 0049      Right_Mountain_From_The_Left@Return_Val 0048  
                        __end_of_Train_Path 2630                                   __pintcode 0008  
                                  ?___lwdiv 0013        __end_of_Left_Mountain_From_The_Right 3AC0  
     __size_of_Left_Mountain_From_The_Right 0110                _Left_Mountain_From_The_Right 39B0  
                                  ?___lwmod 001A                                 __pintcodelo 0018  
                           GETxAPIxRW@index 0013                             _Debounce_Inputs 15D4  
                               __smallconst 0800                    ??_Train_Move_Right_Brake 0026  
                                  ?_isdigit 0001                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 00CF                    ??_Train_Move_Right_Start 0026  
                     TranslateMessage@Index 0022                       Junction@Straight_Bend 001F  
                     TranslateMessage@Value 0020                _Button_Contact_Counter_Start 0036  
                  _Reed_Contact_LMD_Counter 0039                            ___lwdiv@quotient 0018  
                _Train_Move_Left_Brake$2187 00CF                              __size_of_putch 000C  
               _Train_Move_Right_Start$2188 00CF                              ___wmul@product 0017  
                     __size_of_SENDxMESSAGE 0236        __end_of_Right_Mountain_From_The_Left 378A  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 3676  
                                  _PIE1bits 000F9D                              _Adjust_Counter 0080  
             Left_Mountain_From_The_Left@rc 00CF                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1              Eeprom_Store@Location_High_Byte 0019  
                                  _RCONbits 000FD0                              Train_Path@From 00D2  
                  __end_of_DIAGNOSTICxTOxPC 286A                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           ___wmul@multiplier 0013  
                         SENDxMESSAGE@index 0013                           SENDxMESSAGE@value 0015  
                               ??_Green_Led 0013                                  printf@flag 00D7  
                                printf@prec 00D8                                EEPROMxREAD@i 0021  
               __size_of_SETxAPIxVALxNoxRET 003C                                 ??_SetDCPWM1 0017  
                               _GETxAPIxVAL 439E                               ??_SETxAPIxVAL 001D  
                              _SENDxMESSAGE 286A                                   copy_data0 3E9C  
                                 copy_data1 3EBC                     ??_Train_Move_Left_Brake 0026  
                  _Reed_Contact_LMU_Counter 003A                            __size_of_SETxPWM 00AC  
                   ??_Train_Move_Left_Start 0026                          SetDCPWM1@dutycycle 0015  
                                  _Init_Pwm 4312                       EUSART1_Read@readValue 0013  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 04FC  
                                  __Hrparam 0000                                    _Junction 2AA0  
                          __size_of_Red_Led 0080               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                                    _TrSwitch 0085  
                                  _RxSwitch 0087                    _Reed_Contact_RMD_Counter 0037  
                   __end_of_Debounce_Inputs 1D5A                 __size_of_EUSART1_Initialize 0048  
                          __size_of___lwdiv 0052                            __size_of___lwmod 0042  
                         _Switch_Train_Path 008A                           _Switch_Train_Move 0084  
                          _Switch_Adjust_LB 0046                            _Switch_Adjust_LF 0045  
                          _Switch_Adjust_RB 008C                            _Switch_Adjust_RF 008B  
                      __size_of_SendMessage 0020                           ?_TranslateMessage 0001  
                                _API_EEPROM 0300             __size_of_Train_Move_Right_Brake 0140  
                          __size_of_isdigit 001E                            __size_of_tc_high 3B98  
                        ??_TranslateMessage 0020                             ___lwdiv@divisor 0015  
           __size_of_Train_Move_Right_Start 0136                             ___lwdiv@counter 0017  
                                  __ptext10 389E                                    __ptext11 3D40  
                                  __ptext20 2DEC                                    __ptext12 2AA0  
                                  __ptext21 3C72                                    __ptext13 3F1E  
                                  __ptext30 4134                                    __ptext22 4380  
                                  __ptext14 3F9E                                    __ptext31 286A  
                                  __ptext23 433A                                    __ptext15 2C80  
                                  __ptext40 40E2                                    __ptext32 4184  
                                  __ptext24 420E                                    __ptext16 401E  
                                  __ptext41 1D5A                                    __ptext33 3BA0  
                                  __ptext25 439E                                    __ptext17 15D4  
                                  __ptext34 4086                                    __ptext26 43BA  
                                  __ptext18 424A                                    __ptext35 2630  
                                  __ptext27 4284                                    __ptext19 378A  
                                  __ptext44 42B8                                    __ptext36 4360  
                                  __ptext28 43D6                                    __ptext45 42E6  
                                  __ptext37 3438                                    __ptext29 4312  
                                  __ptext38 43EE                                    __ptext39 41CC  
                             ?_EEPROMxSTORE 001B                               __size_of_atoi 00CE  
                             __size_of_main 009C                         __end_of_SETxAPIxVAL 4184  
                   _Reed_Contact_LB_Counter 003D                                    int$flags 004D  
                   _Reed_Contact_LF_Counter 003E                                    atoi@sign 001D  
                _Train_Move_Left_Start$2186 00CF                    _Reed_Contact_RMU_Counter 0038  
                                 printf@val 00D9                         _EUSART1_Receive_ISR 42E6  
                                _GETxAPIxRW 43BA                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0013                               ?_Eeprom_Store 0013  
                  __end_of_Update_StateMchn 15D4                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0026              ??_Left_Mountain_From_The_Right 0026  
                     _READxRECEIVEDxMESSAGE 378A                                    isdigit@c 0015  
                   _Reed_Contact_RB_Counter 003B                              ??_EEPROMxSTORE 001D  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                            ___lwmod@dividend 001A  
                              ?_EEPROMxREAD 001B                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 003C                      _Train_Move_Right_Brake 308A  
              __end_of_EUSART1_Transmit_ISR 42E6                      _Train_Move_Right_Start 3302  
           Train_Move_Left_Start@Return_Val 00E5                                Train_Path@To 00D1  
                                  printf@ap 00D5                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0047              ??_Right_Mountain_From_The_Left 0026  
                            ??_Eeprom_Store 0017                             ___lwmod@divisor 001C  
                           ___lwmod@counter 001E                     SETxAPIxVALxNoxRET@index 0015  
                               _SETxAPIxVAL 4134                     SETxAPIxVALxNoxRET@value 0017  
                             ??_Eeprom_Read 0015                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 0001                              _APIxInitialize 1D5A  
             _Button_Contact_Counter_Middle 0034  
