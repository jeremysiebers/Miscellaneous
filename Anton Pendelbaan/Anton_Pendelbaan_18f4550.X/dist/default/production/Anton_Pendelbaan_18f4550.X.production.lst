

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Oct 17 23:18:44 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	idataBANK0
    56  0038AC                     __pidataBANK0:
    57                           	opt stack 0
    58                           
    59                           ;initializer for Junction@Return_Val
    60  0038AC  01                 	db	1
    61                           
    62                           ;initializer for Left_Mountain_From_The_Left@Return_Val
    63  0038AD  01                 	db	1
    64                           
    65                           ;initializer for Left_Mountain_From_The_Right@Return_Val
    66  0038AE  01                 	db	1
    67                           
    68                           ;initializer for Right_Mountain_From_The_Left@Return_Val
    69  0038AF  01                 	db	1
    70                           
    71                           ;initializer for Right_Mountain_From_The_Right@Return_Val
    72  0038B0  01                 	db	1
    73                           
    74                           ;initializer for Train_Move_Left_Brake@Return_Val
    75  0038B1  01                 	db	1
    76                           
    77                           ;initializer for Train_Move_Left_Start@Return_Val
    78  0038B2  01                 	db	1
    79                           
    80                           ;initializer for Train_Move_Right_Brake@Return_Val
    81  0038B3  01                 	db	1
    82                           
    83                           ;initializer for Train_Move_Right_Start@Return_Val
    84  0038B4  01                 	db	1
    85                           
    86                           ;initializer for Train_Path@Return_Val
    87  0038B5  01                 	db	1
    88                           
    89                           	psect	smallconst
    90  000800                     __psmallconst:
    91                           	opt stack 0
    92  000800  00                 	db	0
    93  000801                     _hexpowers:
    94                           	opt stack 0
    95  000801  0001               	dw	1
    96  000803  0010               	dw	16
    97  000805  0100               	dw	256
    98  000807  1000               	dw	4096
    99  000809                     __end_of_hexpowers:
   100                           	opt stack 0
   101  0000                     _ADCON1	set	4033
   102  0000                     _BAUDCONbits	set	4024
   103  0000                     _CCP1CON	set	4029
   104  0000                     _CCPR1L	set	4030
   105  0000                     _CMCON	set	4020
   106  0000                     _EEADR	set	4009
   107  0000                     _EECON1bits	set	4006
   108  0000                     _EECON2	set	4007
   109  0000                     _EEDATA	set	4008
   110  0000                     _INTCON	set	4082
   111  0000                     _INTCON2	set	4081
   112  0000                     _INTCONbits	set	4082
   113  0000                     _PIE1bits	set	3997
   114  0000                     _PIR1bits	set	3998
   115  0000                     _PIR2bits	set	4001
   116  0000                     _PORTAbits	set	3968
   117  0000                     _PORTBbits	set	3969
   118  0000                     _PORTCbits	set	3970
   119  0000                     _PORTDbits	set	3971
   120  0000                     _PORTEbits	set	3972
   121  0000                     _PR2	set	4043
   122  0000                     _RCONbits	set	4048
   123  0000                     _RCREG1	set	4014
   124  0000                     _RCSTA1bits	set	4011
   125  0000                     _RCSTAbits	set	4011
   126  0000                     _SPBRG	set	4015
   127  0000                     _SPBRGH	set	4016
   128  0000                     _T0CON	set	4053
   129  0000                     _T2CON	set	4042
   130  0000                     _TMR0H	set	4055
   131  0000                     _TMR0L	set	4054
   132  0000                     _TRISA	set	3986
   133  0000                     _TRISAbits	set	3986
   134  0000                     _TRISB	set	3987
   135  0000                     _TRISBbits	set	3987
   136  0000                     _TRISC	set	3988
   137  0000                     _TRISCbits	set	3988
   138  0000                     _TRISD	set	3989
   139  0000                     _TRISDbits	set	3989
   140  0000                     _TRISE	set	3990
   141  0000                     _TRISEbits	set	3990
   142  0000                     _TXREG1	set	4013
   143  0000                     _TXSTAbits	set	4012
   144  0000                     _TXIF	set	31988
   145  000809                     STR_2:
   146  000809  30                 	db	48	;'0'
   147  00080A  31                 	db	49	;'1'
   148  00080B  32                 	db	50	;'2'
   149  00080C  33                 	db	51	;'3'
   150  00080D  34                 	db	52	;'4'
   151  00080E  35                 	db	53	;'5'
   152  00080F  36                 	db	54	;'6'
   153  000810  37                 	db	55	;'7'
   154  000811  38                 	db	56	;'8'
   155  000812  39                 	db	57	;'9'
   156  000813  61                 	db	97	;'a'
   157  000814  62                 	db	98	;'b'
   158  000815  63                 	db	99	;'c'
   159  000816  64                 	db	100	;'d'
   160  000817  65                 	db	101	;'e'
   161  000818  66                 	db	102	;'f'
   162  000819  00                 	db	0
   163  00081A                     STR_1:
   164  00081A  0D                 	db	13
   165  00081B  0A                 	db	10
   166  00081C  4D                 	db	77	;'M'
   167  00081D  23                 	db	35
   168  00081E  25                 	db	37
   169  00081F  78                 	db	120	;'x'
   170  000820  20                 	db	32
   171  000821  25                 	db	37
   172  000822  78                 	db	120	;'x'
   173  000823  25                 	db	37
   174  000824  78                 	db	120	;'x'
   175  000825  0D                 	db	13
   176  000826  0A                 	db	10
   177  000827  00                 	db	0
   178                           
   179                           ; #config settings
   180  000828  00                 	db	0	; dummy byte at the end
   181  0000                     
   182                           	psect	cinit
   183  0035F2                     __pcinit:
   184                           	opt stack 0
   185  0035F2                     start_initialization:
   186                           	opt stack 0
   187  0035F2                     __initialization:
   188                           	opt stack 0
   189                           
   190                           ; Clear objects allocated to BANK2 (252 bytes)
   191  0035F2  EE02  F000         	lfsr	0,__pbssBANK2
   192  0035F6  0EFC               	movlw	252
   193  0035F8                     clear_0:
   194  0035F8  6AEE               	clrf	postinc0,c
   195  0035FA  06E8               	decf	wreg,f,c
   196  0035FC  E1FD               	bnz	clear_0
   197                           
   198                           ; Clear objects allocated to BANK1 (252 bytes)
   199  0035FE  EE01  F000         	lfsr	0,__pbssBANK1
   200  003602  0EFC               	movlw	252
   201  003604                     clear_1:
   202  003604  6AEE               	clrf	postinc0,c
   203  003606  06E8               	decf	wreg,f,c
   204  003608  E1FD               	bnz	clear_1
   205                           
   206                           ; Clear objects allocated to BANK0 (30 bytes)
   207  00360A  EE00  F086         	lfsr	0,__pbssBANK0
   208  00360E  0E1E               	movlw	30
   209  003610                     clear_2:
   210  003610  6AEE               	clrf	postinc0,c
   211  003612  06E8               	decf	wreg,f,c
   212  003614  E1FD               	bnz	clear_2
   213                           
   214                           ; Clear objects allocated to COMRAM (31 bytes)
   215  003616  EE00  F021         	lfsr	0,__pbssCOMRAM
   216  00361A  0E1F               	movlw	31
   217  00361C                     clear_3:
   218  00361C  6AEE               	clrf	postinc0,c
   219  00361E  06E8               	decf	wreg,f,c
   220  003620  E1FD               	bnz	clear_3
   221                           
   222                           ; Initialize objects allocated to BANK0 (10 bytes)
   223                           ; load TBLPTR registers with __pidataBANK0
   224  003622  0EAC               	movlw	low __pidataBANK0
   225  003624  6EF6               	movwf	tblptrl,c
   226  003626  0E38               	movlw	high __pidataBANK0
   227  003628  6EF7               	movwf	tblptrh,c
   228  00362A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   229  00362C  6EF8               	movwf	tblptru,c
   230  00362E  EE00  F0A4         	lfsr	0,__pdataBANK0
   231  003632  EE10 F00A          	lfsr	1,10
   232  003636                     copy_data0:
   233  003636  0009               	tblrd		*+
   234  003638  CFF5 FFEE          	movff	tablat,postinc0
   235  00363C  50E5               	movf	postdec1,w,c
   236  00363E  50E1               	movf	fsr1l,w,c
   237  003640  E1FA               	bnz	copy_data0
   238  003642                     end_of_initialization:
   239                           	opt stack 0
   240  003642                     __end_of__initialization:
   241                           	opt stack 0
   242  003642  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  003644  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  003646  0E00               	movlw	low (__Lmediumconst shr (0+16))
   245  003648  6EF8               	movwf	tblptru,c
   246  00364A  0100               	movlb	0
   247  00364C  EFBF  F01A         	goto	_main	;jump to C main() function
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           postdec1	equ	0xFE5
   255                           fsr1l	equ	0xFE1
   256                           
   257                           	psect	bssCOMRAM
   258  000021                     __pbssCOMRAM:
   259                           	opt stack 0
   260  000021                     _Adjust_Counter:
   261                           	opt stack 0
   262  000021                     	ds	2
   263  000023                     _Train_Move_Pwm_Count:
   264                           	opt stack 0
   265  000023                     	ds	2
   266  000025                     _Train_Move_Pwm_Fast_Count:
   267                           	opt stack 0
   268  000025                     	ds	2
   269  000027                     _Button_Contact_Counter_Start:
   270                           	opt stack 0
   271  000027                     	ds	1
   272  000028                     _Button_Contact_Counter_Stop:
   273                           	opt stack 0
   274  000028                     	ds	1
   275  000029                     _Reed_Contact_LB_Counter:
   276                           	opt stack 0
   277  000029                     	ds	1
   278  00002A                     _Reed_Contact_LF_Counter:
   279                           	opt stack 0
   280  00002A                     	ds	1
   281  00002B                     _Reed_Contact_LMD_Counter:
   282                           	opt stack 0
   283  00002B                     	ds	1
   284  00002C                     _Reed_Contact_LMU_Counter:
   285                           	opt stack 0
   286  00002C                     	ds	1
   287  00002D                     _Reed_Contact_RB_Counter:
   288                           	opt stack 0
   289  00002D                     	ds	1
   290  00002E                     _Reed_Contact_RF_Counter:
   291                           	opt stack 0
   292  00002E                     	ds	1
   293  00002F                     _Reed_Contact_RMD_Counter:
   294                           	opt stack 0
   295  00002F                     	ds	1
   296  000030                     _Reed_Contact_RMU_Counter:
   297                           	opt stack 0
   298  000030                     	ds	1
   299  000031                     _Stop_Program:
   300                           	opt stack 0
   301  000031                     	ds	1
   302  000032                     _Switch_Activate_Controls:
   303                           	opt stack 0
   304  000032                     	ds	1
   305  000033                     _Switch_Adjust_LB:
   306                           	opt stack 0
   307  000033                     	ds	1
   308  000034                     _Switch_Adjust_LF:
   309                           	opt stack 0
   310  000034                     	ds	1
   311  000035                     _Switch_Adjust_RB:
   312                           	opt stack 0
   313  000035                     	ds	1
   314  000036                     _Switch_Adjust_RF:
   315                           	opt stack 0
   316  000036                     	ds	1
   317  000037                     _Switch_Moutain:
   318                           	opt stack 0
   319  000037                     	ds	1
   320  000038                     _Switch_Program:
   321                           	opt stack 0
   322  000038                     	ds	1
   323  000039                     _Switch_Train_Move:
   324                           	opt stack 0
   325  000039                     	ds	1
   326  00003A                     _eusart1RxCount:
   327                           	opt stack 0
   328  00003A                     	ds	1
   329  00003B                     _eusart1RxHead:
   330                           	opt stack 0
   331  00003B                     	ds	1
   332  00003C                     _eusart1RxTail:
   333                           	opt stack 0
   334  00003C                     	ds	1
   335  00003D                     _eusart1TxBufferRemaining:
   336                           	opt stack 0
   337  00003D                     	ds	1
   338  00003E                     _eusart1TxHead:
   339                           	opt stack 0
   340  00003E                     	ds	1
   341  00003F                     _eusart1TxTail:
   342                           	opt stack 0
   343  00003F                     	ds	1
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           postdec1	equ	0xFE5
   351                           fsr1l	equ	0xFE1
   352                           
   353                           	psect	bssBANK0
   354  000086                     __pbssBANK0:
   355                           	opt stack 0
   356  000086                     Junction@Junction_Switch_Time:
   357                           	opt stack 0
   358  000086                     	ds	2
   359  000088                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   360                           	opt stack 0
   361  000088                     	ds	2
   362  00008A                     Train_Move_Left_Start@Train_Move_Wait_Time:
   363                           	opt stack 0
   364  00008A                     	ds	2
   365  00008C                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   366                           	opt stack 0
   367  00008C                     	ds	2
   368  00008E                     Train_Move_Right_Start@Train_Move_Wait_Time:
   369                           	opt stack 0
   370  00008E                     	ds	2
   371  000090                     _Activate_Controls_Counter:
   372                           	opt stack 0
   373  000090                     	ds	2
   374  000092                     _Green_Led_Counter:
   375                           	opt stack 0
   376  000092                     	ds	2
   377  000094                     _Led1_Counter:
   378                           	opt stack 0
   379  000094                     	ds	2
   380  000096                     _Mountain_Delay_Counter:
   381                           	opt stack 0
   382  000096                     	ds	2
   383  000098                     _Red_Led_Counter:
   384                           	opt stack 0
   385  000098                     	ds	2
   386  00009A                     _Button_Contact_Counter_LB:
   387                           	opt stack 0
   388  00009A                     	ds	1
   389  00009B                     _Button_Contact_Counter_LF:
   390                           	opt stack 0
   391  00009B                     	ds	1
   392  00009C                     _Button_Contact_Counter_Middle:
   393                           	opt stack 0
   394  00009C                     	ds	1
   395  00009D                     _Button_Contact_Counter_RB:
   396                           	opt stack 0
   397  00009D                     	ds	1
   398  00009E                     _Button_Contact_Counter_RF:
   399                           	opt stack 0
   400  00009E                     	ds	1
   401  00009F                     _Switch_Init:
   402                           	opt stack 0
   403  00009F                     	ds	1
   404  0000A0                     _Switch_Junction:
   405                           	opt stack 0
   406  0000A0                     	ds	1
   407  0000A1                     _Switch_Main:
   408                           	opt stack 0
   409  0000A1                     	ds	1
   410  0000A2                     _Switch_Train_Path:
   411                           	opt stack 0
   412  0000A2                     	ds	1
   413  0000A3                     _Update_State_Machine:
   414                           	opt stack 0
   415  0000A3                     	ds	1
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           postdec1	equ	0xFE5
   423                           fsr1l	equ	0xFE1
   424                           
   425                           	psect	dataBANK0
   426  0000A4                     __pdataBANK0:
   427                           	opt stack 0
   428  0000A4                     Junction@Return_Val:
   429                           	opt stack 0
   430  0000A4                     	ds	1
   431  0000A5                     Left_Mountain_From_The_Left@Return_Val:
   432                           	opt stack 0
   433  0000A5                     	ds	1
   434  0000A6                     Left_Mountain_From_The_Right@Return_Val:
   435                           	opt stack 0
   436  0000A6                     	ds	1
   437  0000A7                     Right_Mountain_From_The_Left@Return_Val:
   438                           	opt stack 0
   439  0000A7                     	ds	1
   440  0000A8                     Right_Mountain_From_The_Right@Return_Val:
   441                           	opt stack 0
   442  0000A8                     	ds	1
   443  0000A9                     Train_Move_Left_Brake@Return_Val:
   444                           	opt stack 0
   445  0000A9                     	ds	1
   446  0000AA                     Train_Move_Left_Start@Return_Val:
   447                           	opt stack 0
   448  0000AA                     	ds	1
   449  0000AB                     Train_Move_Right_Brake@Return_Val:
   450                           	opt stack 0
   451  0000AB                     	ds	1
   452  0000AC                     Train_Move_Right_Start@Return_Val:
   453                           	opt stack 0
   454  0000AC                     	ds	1
   455  0000AD                     Train_Path@Return_Val:
   456                           	opt stack 0
   457  0000AD                     	ds	1
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           postdec1	equ	0xFE5
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	bssBANK1
   468  000100                     __pbssBANK1:
   469                           	opt stack 0
   470  000100                     _API:
   471                           	opt stack 0
   472  000100                     	ds	126
   473  00017E                     _API_RW:
   474                           	opt stack 0
   475  00017E                     	ds	126
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485                           	psect	bssBANK2
   486  000200                     __pbssBANK2:
   487                           	opt stack 0
   488  000200                     _eusart1RxBuffer:
   489                           	opt stack 0
   490  000200                     	ds	126
   491  00027E                     _eusart1TxBuffer:
   492                           	opt stack 0
   493  00027E                     	ds	126
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	cstackBANK0
   504  000060                     __pcstackBANK0:
   505                           	opt stack 0
   506  000060                     ?_GETxAPIxVAL:
   507                           	opt stack 0
   508  000060                     ?___lwdiv:
   509                           	opt stack 0
   510  000060                     EUSART1_Initialize@baud_rate:
   511                           	opt stack 0
   512  000060                     INIT_TERMINAL@i:
   513                           	opt stack 0
   514  000060                     APIxInitialize@i:
   515                           	opt stack 0
   516  000060                     SetDCPWM1@dutycycle:
   517                           	opt stack 0
   518  000060                     ___lwdiv@dividend:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x0
   522  000060                     	ds	2
   523  000062                     ??_SetDCPWM1:
   524  000062                     Junction@Straight_Bend:
   525                           	opt stack 0
   526  000062                     ___lwdiv@divisor:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x2
   530  000062                     	ds	1
   531  000063                     Junction@Junction_Left_Right:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x3
   535  000063                     	ds	1
   536  000064                     ___lwdiv@counter:
   537                           	opt stack 0
   538  000064                     SetDCPWM1@DCycle:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x4
   542  000064                     	ds	1
   543  000065                     ___lwdiv@quotient:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x5
   547  000065                     	ds	1
   548  000066                     SETxPWM@speed:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x6
   552  000066                     	ds	1
   553  000067                     ?_printf:
   554                           	opt stack 0
   555  000067                     printf@f:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x7
   559  000067                     	ds	1
   560  000068                     SETxPWM@direction:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x8
   564  000068                     	ds	1
   565  000069                     ??_SETxPWM:
   566                           
   567                           ; 1 bytes @ 0x9
   568  000069                     	ds	2
   569  00006B                     SETxPWM@pwm_speed:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0xB
   573  00006B                     	ds	2
   574  00006D                     Right_Mountain_From_The_Right@rc:
   575                           	opt stack 0
   576  00006D                     Left_Mountain_From_The_Right@rc:
   577                           	opt stack 0
   578  00006D                     Left_Mountain_From_The_Left@rc:
   579                           	opt stack 0
   580  00006D                     Right_Mountain_From_The_Left@rc:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0xD
   584  00006D                     	ds	1
   585  00006E                     Train_Path@To:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0xE
   589  00006E                     	ds	1
   590  00006F                     Train_Path@From:
   591                           	opt stack 0
   592  00006F                     printf@flag:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0xF
   596  00006F                     	ds	1
   597  000070                     printf@idx:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x10
   601  000070                     	ds	1
   602  000071                     printf@ap:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x11
   606  000071                     	ds	2
   607  000073                     printf@val:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x13
   611  000073                     	ds	2
   612  000075                     printf@prec:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x15
   616  000075                     	ds	1
   617  000076                     printf@c:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x16
   621  000076                     	ds	1
   622  000077                     SENDxMESSAGE@value:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x17
   626  000077                     	ds	2
   627  000079                     SENDxMESSAGE@index:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x19
   631  000079                     	ds	1
   632  00007A                     SENDxMESSAGE@high:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x1A
   636  00007A                     	ds	1
   637  00007B                     SENDxMESSAGE@low:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x1B
   641  00007B                     	ds	1
   642  00007C                     SETxAPIxVAL@value:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x1C
   646  00007C                     	ds	2
   647  00007E                     
   648                           ; 1 bytes @ 0x1E
   649  00007E                     	ds	2
   650  000080                     SETxAPIxVAL@index:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x20
   654  000080                     	ds	1
   655  000081                     ??_Debounce_Inputs:
   656  000081                     INCRxAPIxVAL@value:
   657                           	opt stack 0
   658  000081                     DECRxAPIxVAL@value:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x21
   662  000081                     	ds	2
   663  000083                     INCRxAPIxVAL@index:
   664                           	opt stack 0
   665  000083                     DECRxAPIxVAL@index:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x23
   669  000083                     	ds	1
   670  000084                     ??_Update_StateMchn:
   671                           
   672                           ; 1 bytes @ 0x24
   673  000084                     	ds	2
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           postinc0	equ	0xFEE
   679                           wreg	equ	0xFE8
   680                           postdec1	equ	0xFE5
   681                           fsr1l	equ	0xFE1
   682                           
   683                           	psect	cstackCOMRAM
   684  000001                     __pcstackCOMRAM:
   685                           	opt stack 0
   686  000001                     ??_tc_high:
   687  000001                     
   688                           ; 1 bytes @ 0x0
   689  000001                     	ds	14
   690  00000F                     ??_tc_low:
   691                           
   692                           ; 1 bytes @ 0xE
   693  00000F                     	ds	17
   694  000020                     putch@data:
   695                           	opt stack 0
   696  000020                     GETxAPIxVAL@index:
   697                           	opt stack 0
   698  000020                     Green_Led@Operation:
   699                           	opt stack 0
   700  000020                     Red_Led@Operation:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x1F
   704  000020                     	ds	1
   705  000021                     tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           postdec1	equ	0xFE5
   712                           fsr1l	equ	0xFE1
   713                           
   714                           ; 1 bytes @ 0x20
   715 ;;
   716 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   717 ;;
   718 ;; *************** function _main *****************
   719 ;; Defined at:
   720 ;;		line 105 in file "../Main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   734 ;;      Params:         0       0       0       0       0       0       0       0       0
   735 ;;      Locals:         0       0       0       0       0       0       0       0       0
   736 ;;      Temps:          0       0       0       0       0       0       0       0       0
   737 ;;      Totals:         0       0       0       0       0       0       0       0       0
   738 ;;Total ram usage:        0 bytes
   739 ;; Hardware stack levels required when called:    9
   740 ;; This function calls:
   741 ;;		_APIxInitialize
   742 ;;		_EUSART1_Initialize
   743 ;;		_INIT_TERMINAL
   744 ;;		_Init_Pwm
   745 ;;		_Init_Timers
   746 ;;		_Update_StateMchn
   747 ;; This function is called by:
   748 ;;		Startup code after reset
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text0
   753  00357E                     __ptext0:
   754                           	opt stack 0
   755  00357E                     _main:
   756                           	opt stack 22
   757                           
   758                           ;Main.c: 107: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
   759                           
   760                           ;incstack = 0
   761  00357E  6892               	setf	3986,c	;volatile
   762  003580  6893               	setf	3987,c	;volatile
   763  003582  6894               	setf	3988,c	;volatile
   764  003584  6895               	setf	3989,c	;volatile
   765  003586  6896               	setf	3990,c	;volatile
   766                           
   767                           ;Main.c: 108: ADCON1=0x0F;
   768  003588  0E0F               	movlw	15
   769  00358A  6EC1               	movwf	4033,c	;volatile
   770                           
   771                           ;Main.c: 109: CMCON=0x07;
   772  00358C  0E07               	movlw	7
   773  00358E  6EB4               	movwf	4020,c	;volatile
   774                           
   775                           ;Main.c: 110: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
   776  003590  9892               	bcf	3986,4,c	;volatile
   777  003592  9A95               	bcf	3989,5,c	;volatile
   778  003594  9C95               	bcf	3989,6,c	;volatile
   779                           
   780                           ;Main.c: 111: PORTAbits.RA4 = 0;
   781  003596  9880               	bcf	3968,4,c	;volatile
   782                           
   783                           ;Main.c: 112: PORTDbits.RD6 = 0;
   784  003598  9C83               	bcf	3971,6,c	;volatile
   785                           
   786                           ;Main.c: 113: PORTDbits.RD5 = 0;
   787  00359A  9A83               	bcf	3971,5,c	;volatile
   788                           
   789                           ;Main.c: 115: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
   790  00359C  9092               	bcf	3986,0,c	;volatile
   791  00359E  9292               	bcf	3986,1,c	;volatile
   792  0035A0  9492               	bcf	3986,2,c	;volatile
   793  0035A2  9692               	bcf	3986,3,c	;volatile
   794                           
   795                           ;Main.c: 116: PORTAbits.RA3 = 0;
   796  0035A4  9680               	bcf	3968,3,c	;volatile
   797                           
   798                           ;Main.c: 117: PORTAbits.RA2 = 0;
   799  0035A6  9480               	bcf	3968,2,c	;volatile
   800                           
   801                           ;Main.c: 118: PORTAbits.RA1 = 0;
   802  0035A8  9280               	bcf	3968,1,c	;volatile
   803                           
   804                           ;Main.c: 119: PORTAbits.RA0 = 0;
   805  0035AA  9080               	bcf	3968,0,c	;volatile
   806                           
   807                           ;Main.c: 121: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
   808  0035AC  8495               	bsf	3989,2,c	;volatile
   809  0035AE  8695               	bsf	3989,3,c	;volatile
   810  0035B0  8095               	bsf	3989,0,c	;volatile
   811  0035B2  8295               	bsf	3989,1,c	;volatile
   812  0035B4  8294               	bsf	3988,1,c	;volatile
   813  0035B6  8895               	bsf	3989,4,c	;volatile
   814  0035B8  8096               	bsf	3990,0,c	;volatile
   815  0035BA  8296               	bsf	3990,1,c	;volatile
   816                           
   817                           ;Main.c: 122: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
   818  0035BC  8093               	bsf	3987,0,c	;volatile
   819  0035BE  8293               	bsf	3987,1,c	;volatile
   820  0035C0  8493               	bsf	3987,2,c	;volatile
   821  0035C2  8693               	bsf	3987,3,c	;volatile
   822  0035C4  8893               	bsf	3987,4,c	;volatile
   823  0035C6  8A93               	bsf	3987,5,c	;volatile
   824  0035C8  8E95               	bsf	3989,7,c	;volatile
   825                           
   826                           ;Main.c: 123: APIxInitialize();
   827  0035CA  ECCE  F00F         	call	_APIxInitialize	;wreg free
   828                           
   829                           ;Main.c: 124: Init_Pwm();
   830  0035CE  EC45  F01C         	call	_Init_Pwm	;wreg free
   831                           
   832                           ;Main.c: 125: Init_Timers();
   833  0035D2  EC39  F01C         	call	_Init_Timers	;wreg free
   834                           
   835                           ;Main.c: 126: EUSART1_Initialize();
   836  0035D6  EC52  F01B         	call	_EUSART1_Initialize	;wreg free
   837                           
   838                           ;Main.c: 127: INIT_TERMINAL();
   839  0035DA  ECB7  F01B         	call	_INIT_TERMINAL	;wreg free
   840  0035DE                     l9713:
   841                           
   842                           ;Main.c: 130: {
   843                           ;Main.c: 131: if (1 == Update_State_Machine)
   844  0035DE  0100               	movlb	0	; () banked
   845  0035E0  05A3               	decf	_Update_State_Machine& (0+255),w,b
   846  0035E2  A4D8               	btfss	status,2,c
   847  0035E4  D7FC               	goto	l9713
   848                           
   849                           ; BSR set to: 0
   850                           ;Main.c: 132: {
   851                           ;Main.c: 133: Update_State_Machine = 0;
   852  0035E6  0E00               	movlw	0
   853  0035E8  0100               	movlb	0	; () banked
   854  0035EA  6FA3               	movwf	_Update_State_Machine& (0+255),b
   855                           
   856                           ; BSR set to: 0
   857                           ;Main.c: 134: Update_StateMchn();
   858  0035EC  EC15  F004         	call	_Update_StateMchn	;wreg free
   859  0035F0  D7F6               	goto	l9713
   860  0035F2                     __end_of_main:
   861                           	opt stack 0
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           postdec1	equ	0xFE5
   869                           fsr1l	equ	0xFE1
   870                           status	equ	0xFD8
   871                           
   872 ;; *************** function _Update_StateMchn *****************
   873 ;; Defined at:
   874 ;;		line 63 in file "../State_Mchn.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;		None
   877 ;; Auto vars:     Size  Location     Type
   878 ;;		None
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   888 ;;      Params:         0       0       0       0       0       0       0       0       0
   889 ;;      Locals:         0       0       0       0       0       0       0       0       0
   890 ;;      Temps:          0       2       0       0       0       0       0       0       0
   891 ;;      Totals:         0       2       0       0       0       0       0       0       0
   892 ;;Total ram usage:        2 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:    8
   895 ;; This function calls:
   896 ;;		_DECRxAPIxVAL
   897 ;;		_Debounce_Inputs
   898 ;;		_Eeprom_Store
   899 ;;		_GETxAPIxVAL
   900 ;;		_Green_Led
   901 ;;		_INCRxAPIxVAL
   902 ;;		_Red_Led
   903 ;;		_SETxAPIxVAL
   904 ;;		_Train_Path
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text1
   911  00082A                     __ptext1:
   912                           	opt stack 0
   913  00082A                     _Update_StateMchn:
   914                           	opt stack 22
   915                           
   916                           ;State_Mchn.c: 65: Debounce_Inputs();
   917                           
   918                           ;incstack = 0
   919  00082A  EC44  F00C         	call	_Debounce_Inputs	;wreg free
   920                           
   921                           ;State_Mchn.c: 67: switch (Switch_Main)
   922  00082E  EF36  F00C         	goto	l9543
   923  000832                     l8779:
   924  000832  0E00               	movlw	0
   925  000834  ECF3  F019         	call	_Green_Led
   926                           
   927                           ;State_Mchn.c: 72: Red_Led(0);
   928  000838  0E00               	movlw	0
   929  00083A  ECA7  F019         	call	_Red_Led
   930                           
   931                           ;State_Mchn.c: 73: Switch_Init = 1;
   932  00083E  0E01               	movlw	1
   933  000840  0100               	movlb	0	; () banked
   934  000842  6F9F               	movwf	_Switch_Init& (0+255),b
   935                           
   936                           ;State_Mchn.c: 74: break;
   937  000844  0012               	return	
   938  000846                     l8783:
   939                           
   940                           ; BSR set to: 0
   941  000846  0E13               	movlw	19
   942  000848  EC2B  F01C         	call	_GETxAPIxVAL
   943  00084C  0100               	movlb	0	; () banked
   944  00084E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
   945  000850  0100               	movlb	0	; () banked
   946  000852  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   947  000854  B4D8               	btfsc	status,2,c
   948  000856  D00C               	goto	l8789
   949                           
   950                           ; BSR set to: 0
   951                           ;State_Mchn.c: 77: {
   952                           ;State_Mchn.c: 78: SETxAPIxVAL(23, 0);
   953  000858  0E00               	movlw	0
   954  00085A  0100               	movlb	0	; () banked
   955  00085C  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   956  00085E  0E00               	movlw	0
   957  000860  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
   958  000862  0E17               	movlw	23
   959  000864  EC28  F01B         	call	_SETxAPIxVAL
   960                           
   961                           ;State_Mchn.c: 79: Switch_Init = 2;
   962  000868  0E02               	movlw	2
   963  00086A  0100               	movlb	0	; () banked
   964  00086C  6F9F               	movwf	_Switch_Init& (0+255),b
   965                           
   966                           ;State_Mchn.c: 80: break;
   967  00086E  0012               	return	
   968  000870                     l8789:
   969                           
   970                           ; BSR set to: 0
   971                           ;State_Mchn.c: 81: }
   972                           ;State_Mchn.c: 82: if(GETxAPIxVAL(20))
   973  000870  0E14               	movlw	20
   974  000872  EC2B  F01C         	call	_GETxAPIxVAL
   975  000876  0100               	movlb	0	; () banked
   976  000878  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
   977  00087A  0100               	movlb	0	; () banked
   978  00087C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   979  00087E  B4D8               	btfsc	status,2,c
   980  000880  D00C               	goto	l8795
   981                           
   982                           ; BSR set to: 0
   983                           ;State_Mchn.c: 83: {
   984                           ;State_Mchn.c: 84: SETxAPIxVAL(23, 1);
   985  000882  0E00               	movlw	0
   986  000884  0100               	movlb	0	; () banked
   987  000886  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   988  000888  0E01               	movlw	1
   989  00088A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
   990  00088C  0E17               	movlw	23
   991  00088E  EC28  F01B         	call	_SETxAPIxVAL
   992                           
   993                           ;State_Mchn.c: 85: Switch_Init = 2;
   994  000892  0E02               	movlw	2
   995  000894  0100               	movlb	0	; () banked
   996  000896  6F9F               	movwf	_Switch_Init& (0+255),b
   997                           
   998                           ;State_Mchn.c: 86: break;
   999  000898  0012               	return	
  1000  00089A                     l8795:
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;State_Mchn.c: 87: }
  1004                           ;State_Mchn.c: 88: if(GETxAPIxVAL(21))
  1005  00089A  0E15               	movlw	21
  1006  00089C  EC2B  F01C         	call	_GETxAPIxVAL
  1007  0008A0  0100               	movlb	0	; () banked
  1008  0008A2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1009  0008A4  0100               	movlb	0	; () banked
  1010  0008A6  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1011  0008A8  B4D8               	btfsc	status,2,c
  1012  0008AA  D00C               	goto	l8801
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;State_Mchn.c: 89: {
  1016                           ;State_Mchn.c: 90: SETxAPIxVAL(23, 2);
  1017  0008AC  0E00               	movlw	0
  1018  0008AE  0100               	movlb	0	; () banked
  1019  0008B0  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1020  0008B2  0E02               	movlw	2
  1021  0008B4  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1022  0008B6  0E17               	movlw	23
  1023  0008B8  EC28  F01B         	call	_SETxAPIxVAL
  1024                           
  1025                           ;State_Mchn.c: 91: Switch_Init = 2;
  1026  0008BC  0E02               	movlw	2
  1027  0008BE  0100               	movlb	0	; () banked
  1028  0008C0  6F9F               	movwf	_Switch_Init& (0+255),b
  1029                           
  1030                           ;State_Mchn.c: 92: break;
  1031  0008C2  0012               	return	
  1032  0008C4                     l8801:
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;State_Mchn.c: 93: }
  1036                           ;State_Mchn.c: 94: if(GETxAPIxVAL(22))
  1037  0008C4  0E16               	movlw	22
  1038  0008C6  EC2B  F01C         	call	_GETxAPIxVAL
  1039  0008CA  0100               	movlb	0	; () banked
  1040  0008CC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1041  0008CE  0100               	movlb	0	; () banked
  1042  0008D0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1043  0008D2  B4D8               	btfsc	status,2,c
  1044  0008D4  D00C               	goto	l8807
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;State_Mchn.c: 95: {
  1048                           ;State_Mchn.c: 96: SETxAPIxVAL(23, 3);
  1049  0008D6  0E00               	movlw	0
  1050  0008D8  0100               	movlb	0	; () banked
  1051  0008DA  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1052  0008DC  0E03               	movlw	3
  1053  0008DE  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1054  0008E0  0E17               	movlw	23
  1055  0008E2  EC28  F01B         	call	_SETxAPIxVAL
  1056                           
  1057                           ;State_Mchn.c: 97: Switch_Init = 2;
  1058  0008E6  0E02               	movlw	2
  1059  0008E8  0100               	movlb	0	; () banked
  1060  0008EA  6F9F               	movwf	_Switch_Init& (0+255),b
  1061                           
  1062                           ;State_Mchn.c: 98: break;
  1063  0008EC  0012               	return	
  1064  0008EE                     l8807:
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;State_Mchn.c: 99: }
  1068                           ;State_Mchn.c: 100: if(GETxAPIxVAL(18))
  1069  0008EE  0E12               	movlw	18
  1070  0008F0  EC2B  F01C         	call	_GETxAPIxVAL
  1071  0008F4  0100               	movlb	0	; () banked
  1072  0008F6  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1073  0008F8  0100               	movlb	0	; () banked
  1074  0008FA  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1075  0008FC  B4D8               	btfsc	status,2,c
  1076  0008FE  D00C               	goto	l8813
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;State_Mchn.c: 101: {
  1080                           ;State_Mchn.c: 102: SETxAPIxVAL(23, 4);
  1081  000900  0E00               	movlw	0
  1082  000902  0100               	movlb	0	; () banked
  1083  000904  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1084  000906  0E04               	movlw	4
  1085  000908  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1086  00090A  0E17               	movlw	23
  1087  00090C  EC28  F01B         	call	_SETxAPIxVAL
  1088                           
  1089                           ;State_Mchn.c: 103: Switch_Init = 2;
  1090  000910  0E02               	movlw	2
  1091  000912  0100               	movlb	0	; () banked
  1092  000914  6F9F               	movwf	_Switch_Init& (0+255),b
  1093                           
  1094                           ;State_Mchn.c: 104: break;
  1095  000916  0012               	return	
  1096  000918                     l8813:
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;State_Mchn.c: 105: }
  1100                           ;State_Mchn.c: 106: Switch_Init = 1;
  1101  000918  0E01               	movlw	1
  1102  00091A  0100               	movlb	0	; () banked
  1103  00091C  6F9F               	movwf	_Switch_Init& (0+255),b
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;State_Mchn.c: 107: Green_Led(2);
  1107  00091E  0E02               	movlw	2
  1108  000920  ECF3  F019         	call	_Green_Led
  1109                           
  1110                           ;State_Mchn.c: 108: break;
  1111  000924  0012               	return	
  1112  000926                     l8817:
  1113  000926  0E13               	movlw	19
  1114  000928  EC2B  F01C         	call	_GETxAPIxVAL
  1115  00092C  0100               	movlb	0	; () banked
  1116  00092E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1117  000930  0100               	movlb	0	; () banked
  1118  000932  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1119  000934  A4D8               	btfss	status,2,c
  1120  000936  D030               	goto	l8831
  1121                           
  1122                           ; BSR set to: 0
  1123  000938  0E14               	movlw	20
  1124  00093A  EC2B  F01C         	call	_GETxAPIxVAL
  1125  00093E  0100               	movlb	0	; () banked
  1126  000940  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1127  000942  0100               	movlb	0	; () banked
  1128  000944  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1129  000946  A4D8               	btfss	status,2,c
  1130  000948  D027               	goto	l8831
  1131                           
  1132                           ; BSR set to: 0
  1133  00094A  0E15               	movlw	21
  1134  00094C  EC2B  F01C         	call	_GETxAPIxVAL
  1135  000950  0100               	movlb	0	; () banked
  1136  000952  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1137  000954  0100               	movlb	0	; () banked
  1138  000956  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1139  000958  A4D8               	btfss	status,2,c
  1140  00095A  D01E               	goto	l8831
  1141                           
  1142                           ; BSR set to: 0
  1143  00095C  0E16               	movlw	22
  1144  00095E  EC2B  F01C         	call	_GETxAPIxVAL
  1145  000962  0100               	movlb	0	; () banked
  1146  000964  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1147  000966  0100               	movlb	0	; () banked
  1148  000968  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1149  00096A  A4D8               	btfss	status,2,c
  1150  00096C  D015               	goto	l8831
  1151                           
  1152                           ; BSR set to: 0
  1153  00096E  0E12               	movlw	18
  1154  000970  EC2B  F01C         	call	_GETxAPIxVAL
  1155  000974  0100               	movlb	0	; () banked
  1156  000976  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1157  000978  0100               	movlb	0	; () banked
  1158  00097A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1159  00097C  A4D8               	btfss	status,2,c
  1160  00097E  D00C               	goto	l8831
  1161                           
  1162                           ; BSR set to: 0
  1163  000980  0E10               	movlw	16
  1164  000982  EC2B  F01C         	call	_GETxAPIxVAL
  1165  000986  0100               	movlb	0	; () banked
  1166  000988  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1167  00098A  0100               	movlb	0	; () banked
  1168  00098C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1169  00098E  A4D8               	btfss	status,2,c
  1170  000990  D003               	goto	l8831
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;State_Mchn.c: 111: {
  1174                           ;State_Mchn.c: 112: Switch_Init = 3;
  1175  000992  0E03               	movlw	3
  1176  000994  0100               	movlb	0	; () banked
  1177  000996  6F9F               	movwf	_Switch_Init& (0+255),b
  1178  000998                     l8831:
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;State_Mchn.c: 113: }
  1182                           ;State_Mchn.c: 114: Red_Led(0);
  1183  000998  0E00               	movlw	0
  1184  00099A  ECA7  F019         	call	_Red_Led
  1185                           
  1186                           ;State_Mchn.c: 115: Green_Led(2);
  1187  00099E  0E02               	movlw	2
  1188  0009A0  ECF3  F019         	call	_Green_Led
  1189                           
  1190                           ;State_Mchn.c: 116: break;
  1191  0009A4  0012               	return	
  1192  0009A6                     l8835:
  1193  0009A6  0E13               	movlw	19
  1194  0009A8  EC2B  F01C         	call	_GETxAPIxVAL
  1195  0009AC  0100               	movlb	0	; () banked
  1196  0009AE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1197  0009B0  0100               	movlb	0	; () banked
  1198  0009B2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1199  0009B4  B4D8               	btfsc	status,2,c
  1200  0009B6  D00C               	goto	l8841
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;State_Mchn.c: 119: {
  1204                           ;State_Mchn.c: 120: SETxAPIxVAL(24, 0);
  1205  0009B8  0E00               	movlw	0
  1206  0009BA  0100               	movlb	0	; () banked
  1207  0009BC  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1208  0009BE  0E00               	movlw	0
  1209  0009C0  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1210  0009C2  0E18               	movlw	24
  1211  0009C4  EC28  F01B         	call	_SETxAPIxVAL
  1212                           
  1213                           ;State_Mchn.c: 121: Switch_Init = 4;
  1214  0009C8  0E04               	movlw	4
  1215  0009CA  0100               	movlb	0	; () banked
  1216  0009CC  6F9F               	movwf	_Switch_Init& (0+255),b
  1217                           
  1218                           ;State_Mchn.c: 122: break;
  1219  0009CE  0012               	return	
  1220  0009D0                     l8841:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;State_Mchn.c: 123: }
  1224                           ;State_Mchn.c: 124: if(GETxAPIxVAL(20))
  1225  0009D0  0E14               	movlw	20
  1226  0009D2  EC2B  F01C         	call	_GETxAPIxVAL
  1227  0009D6  0100               	movlb	0	; () banked
  1228  0009D8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1229  0009DA  0100               	movlb	0	; () banked
  1230  0009DC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1231  0009DE  B4D8               	btfsc	status,2,c
  1232  0009E0  D00C               	goto	l8847
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;State_Mchn.c: 125: {
  1236                           ;State_Mchn.c: 126: SETxAPIxVAL(24, 1);
  1237  0009E2  0E00               	movlw	0
  1238  0009E4  0100               	movlb	0	; () banked
  1239  0009E6  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1240  0009E8  0E01               	movlw	1
  1241  0009EA  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1242  0009EC  0E18               	movlw	24
  1243  0009EE  EC28  F01B         	call	_SETxAPIxVAL
  1244                           
  1245                           ;State_Mchn.c: 127: Switch_Init = 4;
  1246  0009F2  0E04               	movlw	4
  1247  0009F4  0100               	movlb	0	; () banked
  1248  0009F6  6F9F               	movwf	_Switch_Init& (0+255),b
  1249                           
  1250                           ;State_Mchn.c: 128: break;
  1251  0009F8  0012               	return	
  1252  0009FA                     l8847:
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;State_Mchn.c: 129: }
  1256                           ;State_Mchn.c: 130: if(GETxAPIxVAL(21))
  1257  0009FA  0E15               	movlw	21
  1258  0009FC  EC2B  F01C         	call	_GETxAPIxVAL
  1259  000A00  0100               	movlb	0	; () banked
  1260  000A02  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1261  000A04  0100               	movlb	0	; () banked
  1262  000A06  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1263  000A08  B4D8               	btfsc	status,2,c
  1264  000A0A  D00C               	goto	l8853
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;State_Mchn.c: 131: {
  1268                           ;State_Mchn.c: 132: SETxAPIxVAL(24, 2);
  1269  000A0C  0E00               	movlw	0
  1270  000A0E  0100               	movlb	0	; () banked
  1271  000A10  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1272  000A12  0E02               	movlw	2
  1273  000A14  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1274  000A16  0E18               	movlw	24
  1275  000A18  EC28  F01B         	call	_SETxAPIxVAL
  1276                           
  1277                           ;State_Mchn.c: 133: Switch_Init = 4;
  1278  000A1C  0E04               	movlw	4
  1279  000A1E  0100               	movlb	0	; () banked
  1280  000A20  6F9F               	movwf	_Switch_Init& (0+255),b
  1281                           
  1282                           ;State_Mchn.c: 134: break;
  1283  000A22  0012               	return	
  1284  000A24                     l8853:
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;State_Mchn.c: 135: }
  1288                           ;State_Mchn.c: 136: if(GETxAPIxVAL(22))
  1289  000A24  0E16               	movlw	22
  1290  000A26  EC2B  F01C         	call	_GETxAPIxVAL
  1291  000A2A  0100               	movlb	0	; () banked
  1292  000A2C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1293  000A2E  0100               	movlb	0	; () banked
  1294  000A30  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1295  000A32  B4D8               	btfsc	status,2,c
  1296  000A34  D00C               	goto	l8859
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;State_Mchn.c: 137: {
  1300                           ;State_Mchn.c: 138: SETxAPIxVAL(24, 3);
  1301  000A36  0E00               	movlw	0
  1302  000A38  0100               	movlb	0	; () banked
  1303  000A3A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1304  000A3C  0E03               	movlw	3
  1305  000A3E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1306  000A40  0E18               	movlw	24
  1307  000A42  EC28  F01B         	call	_SETxAPIxVAL
  1308                           
  1309                           ;State_Mchn.c: 139: Switch_Init = 4;
  1310  000A46  0E04               	movlw	4
  1311  000A48  0100               	movlb	0	; () banked
  1312  000A4A  6F9F               	movwf	_Switch_Init& (0+255),b
  1313                           
  1314                           ;State_Mchn.c: 140: break;
  1315  000A4C  0012               	return	
  1316  000A4E                     l8859:
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;State_Mchn.c: 141: }
  1320                           ;State_Mchn.c: 142: if(GETxAPIxVAL(18))
  1321  000A4E  0E12               	movlw	18
  1322  000A50  EC2B  F01C         	call	_GETxAPIxVAL
  1323  000A54  0100               	movlb	0	; () banked
  1324  000A56  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1325  000A58  0100               	movlb	0	; () banked
  1326  000A5A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1327  000A5C  B4D8               	btfsc	status,2,c
  1328  000A5E  D00C               	goto	l8865
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;State_Mchn.c: 143: {
  1332                           ;State_Mchn.c: 144: SETxAPIxVAL(24, 4);
  1333  000A60  0E00               	movlw	0
  1334  000A62  0100               	movlb	0	; () banked
  1335  000A64  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1336  000A66  0E04               	movlw	4
  1337  000A68  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1338  000A6A  0E18               	movlw	24
  1339  000A6C  EC28  F01B         	call	_SETxAPIxVAL
  1340                           
  1341                           ;State_Mchn.c: 145: Switch_Init = 4;
  1342  000A70  0E04               	movlw	4
  1343  000A72  0100               	movlb	0	; () banked
  1344  000A74  6F9F               	movwf	_Switch_Init& (0+255),b
  1345                           
  1346                           ;State_Mchn.c: 146: break;
  1347  000A76  0012               	return	
  1348  000A78                     l8865:
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;State_Mchn.c: 147: }
  1352                           ;State_Mchn.c: 148: if(GETxAPIxVAL(16))
  1353  000A78  0E10               	movlw	16
  1354  000A7A  EC2B  F01C         	call	_GETxAPIxVAL
  1355  000A7E  0100               	movlb	0	; () banked
  1356  000A80  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1357  000A82  0100               	movlb	0	; () banked
  1358  000A84  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1359  000A86  B4D8               	btfsc	status,2,c
  1360  000A88  D00C               	goto	l8871
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;State_Mchn.c: 149: {
  1364                           ;State_Mchn.c: 150: SETxAPIxVAL(24, 9);
  1365  000A8A  0E00               	movlw	0
  1366  000A8C  0100               	movlb	0	; () banked
  1367  000A8E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1368  000A90  0E09               	movlw	9
  1369  000A92  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  1370  000A94  0E18               	movlw	24
  1371  000A96  EC28  F01B         	call	_SETxAPIxVAL
  1372                           
  1373                           ;State_Mchn.c: 151: Switch_Init = 4;
  1374  000A9A  0E04               	movlw	4
  1375  000A9C  0100               	movlb	0	; () banked
  1376  000A9E  6F9F               	movwf	_Switch_Init& (0+255),b
  1377                           
  1378                           ;State_Mchn.c: 152: break;
  1379  000AA0  0012               	return	
  1380  000AA2                     l8871:
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;State_Mchn.c: 153: }
  1384                           ;State_Mchn.c: 154: Green_Led(2);
  1385  000AA2  0E02               	movlw	2
  1386  000AA4  ECF3  F019         	call	_Green_Led
  1387                           
  1388                           ;State_Mchn.c: 155: Switch_Init = 3;
  1389  000AA8  0E03               	movlw	3
  1390  000AAA  0100               	movlb	0	; () banked
  1391  000AAC  6F9F               	movwf	_Switch_Init& (0+255),b
  1392                           
  1393                           ;State_Mchn.c: 156: break;
  1394  000AAE  0012               	return	
  1395  000AB0                     l8875:
  1396                           
  1397                           ; BSR set to: 0
  1398  000AB0  0E13               	movlw	19
  1399  000AB2  EC2B  F01C         	call	_GETxAPIxVAL
  1400  000AB6  0100               	movlb	0	; () banked
  1401  000AB8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1402  000ABA  0100               	movlb	0	; () banked
  1403  000ABC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1404  000ABE  A4D8               	btfss	status,2,c
  1405  000AC0  D060               	goto	l8897
  1406                           
  1407                           ; BSR set to: 0
  1408  000AC2  0E14               	movlw	20
  1409  000AC4  EC2B  F01C         	call	_GETxAPIxVAL
  1410  000AC8  0100               	movlb	0	; () banked
  1411  000ACA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1412  000ACC  0100               	movlb	0	; () banked
  1413  000ACE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1414  000AD0  A4D8               	btfss	status,2,c
  1415  000AD2  D057               	goto	l8897
  1416                           
  1417                           ; BSR set to: 0
  1418  000AD4  0E15               	movlw	21
  1419  000AD6  EC2B  F01C         	call	_GETxAPIxVAL
  1420  000ADA  0100               	movlb	0	; () banked
  1421  000ADC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1422  000ADE  0100               	movlb	0	; () banked
  1423  000AE0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1424  000AE2  A4D8               	btfss	status,2,c
  1425  000AE4  D04E               	goto	l8897
  1426                           
  1427                           ; BSR set to: 0
  1428  000AE6  0E16               	movlw	22
  1429  000AE8  EC2B  F01C         	call	_GETxAPIxVAL
  1430  000AEC  0100               	movlb	0	; () banked
  1431  000AEE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1432  000AF0  0100               	movlb	0	; () banked
  1433  000AF2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1434  000AF4  A4D8               	btfss	status,2,c
  1435  000AF6  D045               	goto	l8897
  1436                           
  1437                           ; BSR set to: 0
  1438  000AF8  0E12               	movlw	18
  1439  000AFA  EC2B  F01C         	call	_GETxAPIxVAL
  1440  000AFE  0100               	movlb	0	; () banked
  1441  000B00  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1442  000B02  0100               	movlb	0	; () banked
  1443  000B04  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1444  000B06  A4D8               	btfss	status,2,c
  1445  000B08  D03C               	goto	l8897
  1446                           
  1447                           ; BSR set to: 0
  1448  000B0A  0E10               	movlw	16
  1449  000B0C  EC2B  F01C         	call	_GETxAPIxVAL
  1450  000B10  0100               	movlb	0	; () banked
  1451  000B12  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1452  000B14  0100               	movlb	0	; () banked
  1453  000B16  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1454  000B18  A4D8               	btfss	status,2,c
  1455  000B1A  D033               	goto	l8897
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;State_Mchn.c: 159: {
  1459                           ;State_Mchn.c: 160: if(GETxAPIxVAL(23) == GETxAPIxVAL(24))
  1460  000B1C  0E17               	movlw	23
  1461  000B1E  EC2B  F01C         	call	_GETxAPIxVAL
  1462  000B22  C060  F084         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1463  000B26  C061  F085         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1464  000B2A  0E18               	movlw	24
  1465  000B2C  EC2B  F01C         	call	_GETxAPIxVAL
  1466  000B30  0100               	movlb	0	; () banked
  1467  000B32  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1468  000B34  0100               	movlb	0	; () banked
  1469  000B36  1984               	xorwf	??_Update_StateMchn& (0+255),w,b
  1470  000B38  E10C               	bnz	l8893
  1471  000B3A  0100               	movlb	0	; () banked
  1472  000B3C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1473  000B3E  0100               	movlb	0	; () banked
  1474  000B40  1985               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1475  000B42  A4D8               	btfss	status,2,c
  1476  000B44  D006               	goto	l8893
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;State_Mchn.c: 161: {
  1480                           ;State_Mchn.c: 162: Red_Led(1);
  1481  000B46  0E01               	movlw	1
  1482  000B48  ECA7  F019         	call	_Red_Led
  1483                           
  1484                           ;State_Mchn.c: 163: Switch_Init = 1;
  1485  000B4C  0E01               	movlw	1
  1486  000B4E  0100               	movlb	0	; () banked
  1487  000B50  6F9F               	movwf	_Switch_Init& (0+255),b
  1488  000B52                     l8893:
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;State_Mchn.c: 164: }
  1492                           ;State_Mchn.c: 165: if(GETxAPIxVAL(23) != GETxAPIxVAL(24))
  1493  000B52  0E17               	movlw	23
  1494  000B54  EC2B  F01C         	call	_GETxAPIxVAL
  1495  000B58  C060  F084         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1496  000B5C  C061  F085         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1497  000B60  0E18               	movlw	24
  1498  000B62  EC2B  F01C         	call	_GETxAPIxVAL
  1499  000B66  0100               	movlb	0	; () banked
  1500  000B68  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1501  000B6A  0100               	movlb	0	; () banked
  1502  000B6C  1984               	xorwf	??_Update_StateMchn& (0+255),w,b
  1503  000B6E  E106               	bnz	u7750
  1504  000B70  0100               	movlb	0	; () banked
  1505  000B72  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1506  000B74  0100               	movlb	0	; () banked
  1507  000B76  1985               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1508  000B78  B4D8               	btfsc	status,2,c
  1509  000B7A  D003               	goto	l8897
  1510  000B7C                     u7750:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;State_Mchn.c: 166: {
  1514                           ;State_Mchn.c: 167: Switch_Init = 5;
  1515  000B7C  0E05               	movlw	5
  1516  000B7E  0100               	movlb	0	; () banked
  1517  000B80  6F9F               	movwf	_Switch_Init& (0+255),b
  1518  000B82                     l8897:
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;State_Mchn.c: 168: }
  1522                           ;State_Mchn.c: 169: }
  1523                           ;State_Mchn.c: 170: Green_Led(2);
  1524  000B82  0E02               	movlw	2
  1525  000B84  ECF3  F019         	call	_Green_Led
  1526                           
  1527                           ;State_Mchn.c: 171: break;
  1528  000B88  0012               	return	
  1529  000B8A                     l8899:
  1530  000B8A  0E18               	movlw	24
  1531  000B8C  EC2B  F01C         	call	_GETxAPIxVAL
  1532  000B90  0E09               	movlw	9
  1533  000B92  0100               	movlb	0	; () banked
  1534  000B94  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1535  000B96  0100               	movlb	0	; () banked
  1536  000B98  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1537  000B9A  B4D8               	btfsc	status,2,c
  1538  000B9C  D003               	goto	l8903
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;State_Mchn.c: 174: {
  1542                           ;State_Mchn.c: 175: Switch_Init = 6;
  1543  000B9E  0E06               	movlw	6
  1544  000BA0  0100               	movlb	0	; () banked
  1545  000BA2  6F9F               	movwf	_Switch_Init& (0+255),b
  1546  000BA4                     l8903:
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;State_Mchn.c: 176: }
  1550                           ;State_Mchn.c: 177: if(GETxAPIxVAL(24) == 9)
  1551  000BA4  0E18               	movlw	24
  1552  000BA6  EC2B  F01C         	call	_GETxAPIxVAL
  1553  000BAA  0E09               	movlw	9
  1554  000BAC  0100               	movlb	0	; () banked
  1555  000BAE  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1556  000BB0  0100               	movlb	0	; () banked
  1557  000BB2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1558  000BB4  A4D8               	btfss	status,2,c
  1559  000BB6  0012               	return	
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;State_Mchn.c: 178: {
  1563                           ;State_Mchn.c: 179: Switch_Init = 9;
  1564  000BB8  0E09               	movlw	9
  1565  000BBA  0100               	movlb	0	; () banked
  1566  000BBC  6F9F               	movwf	_Switch_Init& (0+255),b
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;State_Mchn.c: 180: }
  1570                           ;State_Mchn.c: 181: break;
  1571  000BBE  0012               	return	
  1572  000BC0                     l8907:
  1573                           
  1574                           ; BSR set to: 0
  1575  000BC0  0E08               	movlw	8
  1576  000BC2  0100               	movlb	0	; () banked
  1577  000BC4  6F9F               	movwf	_Switch_Init& (0+255),b
  1578                           
  1579                           ;State_Mchn.c: 184: break;
  1580  000BC6  0012               	return	
  1581  000BC8                     l8909:
  1582                           
  1583                           ; BSR set to: 0
  1584  000BC8  0E10               	movlw	16
  1585  000BCA  EC2B  F01C         	call	_GETxAPIxVAL
  1586  000BCE  0100               	movlb	0	; () banked
  1587  000BD0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1588  000BD2  0100               	movlb	0	; () banked
  1589  000BD4  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1590  000BD6  B4D8               	btfsc	status,2,c
  1591  000BD8  D008               	goto	l8913
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;State_Mchn.c: 187: {
  1595                           ;State_Mchn.c: 188: Switch_Main = 1;
  1596  000BDA  0E01               	movlw	1
  1597  000BDC  0100               	movlb	0	; () banked
  1598  000BDE  6FA1               	movwf	_Switch_Main& (0+255),b
  1599                           
  1600                           ;State_Mchn.c: 189: Switch_Init = 0;
  1601  000BE0  0E00               	movlw	0
  1602  000BE2  0100               	movlb	0	; () banked
  1603  000BE4  6F9F               	movwf	_Switch_Init& (0+255),b
  1604                           
  1605                           ;State_Mchn.c: 190: Stop_Program = 0;
  1606  000BE6  0E00               	movlw	0
  1607  000BE8  6E31               	movwf	_Stop_Program,c
  1608  000BEA                     l8913:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;State_Mchn.c: 191: }
  1612                           ;State_Mchn.c: 192: Green_Led(3);
  1613  000BEA  0E03               	movlw	3
  1614  000BEC  ECF3  F019         	call	_Green_Led
  1615                           
  1616                           ;State_Mchn.c: 193: Red_Led(0);
  1617  000BF0  0E00               	movlw	0
  1618  000BF2  ECA7  F019         	call	_Red_Led
  1619                           
  1620                           ;State_Mchn.c: 194: break;
  1621  000BF6  0012               	return	
  1622  000BF8                     l8917:
  1623  000BF8  0E17               	movlw	23
  1624  000BFA  EC2B  F01C         	call	_GETxAPIxVAL
  1625  000BFE  0E04               	movlw	4
  1626  000C00  0100               	movlb	0	; () banked
  1627  000C02  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1628  000C04  0100               	movlb	0	; () banked
  1629  000C06  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1630  000C08  B4D8               	btfsc	status,2,c
  1631  000C0A  D014               	goto	l8935
  1632  000C0C  D02A               	goto	l8937
  1633  000C0E                     l8921:
  1634                           
  1635                           ; BSR set to: 0
  1636  000C0E  0E01               	movlw	1
  1637  000C10  D005               	goto	L3
  1638  000C12                     l8923:
  1639                           
  1640                           ; BSR set to: 0
  1641  000C12  0E05               	movlw	5
  1642  000C14  D003               	goto	L3
  1643  000C16                     l8925:
  1644                           
  1645                           ; BSR set to: 0
  1646  000C16  0E02               	movlw	2
  1647  000C18  D001               	goto	L3
  1648  000C1A                     l8927:
  1649                           
  1650                           ; BSR set to: 0
  1651  000C1A  0E03               	movlw	3
  1652  000C1C                     L3:
  1653  000C1C  6E38               	movwf	_Switch_Program,c
  1654                           
  1655                           ;State_Mchn.c: 210: Switch_Init = 7;
  1656  000C1E  0E07               	movlw	7
  1657  000C20  0100               	movlb	0	; () banked
  1658  000C22  6F9F               	movwf	_Switch_Init& (0+255),b
  1659                           
  1660                           ;State_Mchn.c: 211: break;
  1661  000C24  D01E               	goto	l8937
  1662  000C26                     l8929:
  1663                           
  1664                           ; BSR set to: 0
  1665  000C26  0E08               	movlw	8
  1666  000C28  0100               	movlb	0	; () banked
  1667  000C2A  6F9F               	movwf	_Switch_Init& (0+255),b
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;State_Mchn.c: 213: Red_Led(1);
  1671  000C2C  0E01               	movlw	1
  1672  000C2E  ECA7  F019         	call	_Red_Led
  1673                           
  1674                           ;State_Mchn.c: 215: }
  1675                           
  1676                           ;State_Mchn.c: 214: break;
  1677  000C32  D017               	goto	l8937
  1678  000C34                     l8935:
  1679  000C34  0E18               	movlw	24
  1680  000C36  EC2B  F01C         	call	_GETxAPIxVAL
  1681                           
  1682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1683                           ; Switch size 1, requested type "space"
  1684                           ; Number of cases is 1, Range of values is 0 to 0
  1685                           ; switch strategies available:
  1686                           ; Name         Instructions Cycles
  1687                           ; simple_byte            4     3 (average)
  1688                           ;	Chosen strategy is simple_byte
  1689  000C3A  0100               	movlb	0	; () banked
  1690  000C3C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1691  000C3E  0A00               	xorlw	0	; case 0
  1692  000C40  A4D8               	btfss	status,2,c
  1693  000C42  D7F1               	goto	l8929
  1694                           
  1695                           ; BSR set to: 0
  1696                           ; Switch size 1, requested type "space"
  1697                           ; Number of cases is 4, Range of values is 0 to 3
  1698                           ; switch strategies available:
  1699                           ; Name         Instructions Cycles
  1700                           ; simple_byte           13     7 (average)
  1701                           ;	Chosen strategy is simple_byte
  1702  000C44  0100               	movlb	0	; () banked
  1703  000C46  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1704  000C48  0A00               	xorlw	0	; case 0
  1705  000C4A  B4D8               	btfsc	status,2,c
  1706  000C4C  D7E0               	goto	l8921
  1707  000C4E  0A01               	xorlw	1	; case 1
  1708  000C50  B4D8               	btfsc	status,2,c
  1709  000C52  D7DF               	goto	l8923
  1710  000C54  0A03               	xorlw	3	; case 2
  1711  000C56  B4D8               	btfsc	status,2,c
  1712  000C58  D7DE               	goto	l8925
  1713  000C5A  0A01               	xorlw	1	; case 3
  1714  000C5C  B4D8               	btfsc	status,2,c
  1715  000C5E  D7DD               	goto	l8927
  1716  000C60  D7E2               	goto	l8929
  1717  000C62                     l8937:
  1718                           
  1719                           ;State_Mchn.c: 216: }
  1720                           ;State_Mchn.c: 217: if(GETxAPIxVAL(24) == 4)
  1721  000C62  0E18               	movlw	24
  1722  000C64  EC2B  F01C         	call	_GETxAPIxVAL
  1723  000C68  0E04               	movlw	4
  1724  000C6A  0100               	movlb	0	; () banked
  1725  000C6C  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1726  000C6E  0100               	movlb	0	; () banked
  1727  000C70  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1728  000C72  B4D8               	btfsc	status,2,c
  1729  000C74  D014               	goto	l8955
  1730  000C76  D02A               	goto	l8957
  1731  000C78                     l8941:
  1732                           
  1733                           ; BSR set to: 0
  1734  000C78  0E01               	movlw	1
  1735  000C7A  D005               	goto	L6
  1736  000C7C                     l8943:
  1737                           
  1738                           ; BSR set to: 0
  1739  000C7C  0E05               	movlw	5
  1740  000C7E  D003               	goto	L6
  1741  000C80                     l8945:
  1742                           
  1743                           ; BSR set to: 0
  1744  000C80  0E02               	movlw	2
  1745  000C82  D001               	goto	L6
  1746  000C84                     l8947:
  1747                           
  1748                           ; BSR set to: 0
  1749  000C84  0E03               	movlw	3
  1750  000C86                     L6:
  1751  000C86  6E38               	movwf	_Switch_Program,c
  1752                           
  1753                           ;State_Mchn.c: 231: Switch_Init = 7;
  1754  000C88  0E07               	movlw	7
  1755  000C8A  0100               	movlb	0	; () banked
  1756  000C8C  6F9F               	movwf	_Switch_Init& (0+255),b
  1757                           
  1758                           ;State_Mchn.c: 232: break;
  1759  000C8E  D01E               	goto	l8957
  1760  000C90                     l8949:
  1761                           
  1762                           ; BSR set to: 0
  1763  000C90  0E08               	movlw	8
  1764  000C92  0100               	movlb	0	; () banked
  1765  000C94  6F9F               	movwf	_Switch_Init& (0+255),b
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;State_Mchn.c: 234: Red_Led(1);
  1769  000C96  0E01               	movlw	1
  1770  000C98  ECA7  F019         	call	_Red_Led
  1771                           
  1772                           ;State_Mchn.c: 236: }
  1773                           
  1774                           ;State_Mchn.c: 235: break;
  1775  000C9C  D017               	goto	l8957
  1776  000C9E                     l8955:
  1777  000C9E  0E17               	movlw	23
  1778  000CA0  EC2B  F01C         	call	_GETxAPIxVAL
  1779                           
  1780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1781                           ; Switch size 1, requested type "space"
  1782                           ; Number of cases is 1, Range of values is 0 to 0
  1783                           ; switch strategies available:
  1784                           ; Name         Instructions Cycles
  1785                           ; simple_byte            4     3 (average)
  1786                           ;	Chosen strategy is simple_byte
  1787  000CA4  0100               	movlb	0	; () banked
  1788  000CA6  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1789  000CA8  0A00               	xorlw	0	; case 0
  1790  000CAA  A4D8               	btfss	status,2,c
  1791  000CAC  D7F1               	goto	l8949
  1792                           
  1793                           ; BSR set to: 0
  1794                           ; Switch size 1, requested type "space"
  1795                           ; Number of cases is 4, Range of values is 0 to 3
  1796                           ; switch strategies available:
  1797                           ; Name         Instructions Cycles
  1798                           ; simple_byte           13     7 (average)
  1799                           ;	Chosen strategy is simple_byte
  1800  000CAE  0100               	movlb	0	; () banked
  1801  000CB0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1802  000CB2  0A00               	xorlw	0	; case 0
  1803  000CB4  B4D8               	btfsc	status,2,c
  1804  000CB6  D7E0               	goto	l8941
  1805  000CB8  0A01               	xorlw	1	; case 1
  1806  000CBA  B4D8               	btfsc	status,2,c
  1807  000CBC  D7DF               	goto	l8943
  1808  000CBE  0A03               	xorlw	3	; case 2
  1809  000CC0  B4D8               	btfsc	status,2,c
  1810  000CC2  D7DE               	goto	l8945
  1811  000CC4  0A01               	xorlw	1	; case 3
  1812  000CC6  B4D8               	btfsc	status,2,c
  1813  000CC8  D7DD               	goto	l8947
  1814  000CCA  D7E2               	goto	l8949
  1815  000CCC                     l8957:
  1816                           
  1817                           ;State_Mchn.c: 237: }
  1818                           ;State_Mchn.c: 238: if((GETxAPIxVAL(23) != 4) && (GETxAPIxVAL(24) != 4))
  1819  000CCC  0E17               	movlw	23
  1820  000CCE  EC2B  F01C         	call	_GETxAPIxVAL
  1821  000CD2  0E04               	movlw	4
  1822  000CD4  0100               	movlb	0	; () banked
  1823  000CD6  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1824  000CD8  0100               	movlb	0	; () banked
  1825  000CDA  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1826  000CDC  B4D8               	btfsc	status,2,c
  1827  000CDE  0012               	return	
  1828                           
  1829                           ; BSR set to: 0
  1830  000CE0  0E18               	movlw	24
  1831  000CE2  EC2B  F01C         	call	_GETxAPIxVAL
  1832  000CE6  0E04               	movlw	4
  1833  000CE8  0100               	movlb	0	; () banked
  1834  000CEA  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1835  000CEC  0100               	movlb	0	; () banked
  1836  000CEE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1837  000CF0  B4D8               	btfsc	status,2,c
  1838  000CF2  0012               	return	
  1839  000CF4  D0D7               	goto	l9033
  1840  000CF6                     l8963:
  1841                           
  1842                           ; BSR set to: 0
  1843  000CF6  0E00               	movlw	0
  1844  000CF8  0100               	movlb	0	; () banked
  1845  000CFA  6F9F               	movwf	_Switch_Init& (0+255),b
  1846                           
  1847                           ;State_Mchn.c: 245: break;
  1848  000CFC  0012               	return	
  1849  000CFE                     l8965:
  1850                           
  1851                           ; BSR set to: 0
  1852  000CFE  0E01               	movlw	1
  1853  000D00  6E38               	movwf	_Switch_Program,c
  1854                           
  1855                           ;State_Mchn.c: 247: Switch_Init = 7;
  1856  000D02  0E07               	movlw	7
  1857  000D04  0100               	movlb	0	; () banked
  1858  000D06  6F9F               	movwf	_Switch_Init& (0+255),b
  1859                           
  1860                           ;State_Mchn.c: 248: break;
  1861  000D08  0012               	return	
  1862  000D0A                     l8967:
  1863                           
  1864                           ; BSR set to: 0
  1865  000D0A  0E02               	movlw	2
  1866  000D0C  6E38               	movwf	_Switch_Program,c
  1867                           
  1868                           ;State_Mchn.c: 250: Switch_Init = 7;
  1869  000D0E  0E07               	movlw	7
  1870  000D10  0100               	movlb	0	; () banked
  1871  000D12  6F9F               	movwf	_Switch_Init& (0+255),b
  1872                           
  1873                           ;State_Mchn.c: 251: break;
  1874  000D14  0012               	return	
  1875  000D16                     l8969:
  1876                           
  1877                           ; BSR set to: 0
  1878  000D16  0E04               	movlw	4
  1879  000D18  6E38               	movwf	_Switch_Program,c
  1880                           
  1881                           ;State_Mchn.c: 253: Switch_Init = 7;
  1882  000D1A  0E07               	movlw	7
  1883  000D1C  0100               	movlb	0	; () banked
  1884  000D1E  6F9F               	movwf	_Switch_Init& (0+255),b
  1885                           
  1886                           ;State_Mchn.c: 254: break;
  1887  000D20  0012               	return	
  1888  000D22                     l8971:
  1889                           
  1890                           ; BSR set to: 0
  1891  000D22  0E08               	movlw	8
  1892  000D24  0100               	movlb	0	; () banked
  1893  000D26  6F9F               	movwf	_Switch_Init& (0+255),b
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;State_Mchn.c: 256: Red_Led(1);
  1897  000D28  0E01               	movlw	1
  1898  000D2A  ECA7  F019         	call	_Red_Led
  1899                           
  1900                           ;State_Mchn.c: 258: }
  1901                           
  1902                           ;State_Mchn.c: 257: break;
  1903  000D2E  0012               	return	
  1904  000D30                     l8977:
  1905  000D30  0E18               	movlw	24
  1906  000D32  EC2B  F01C         	call	_GETxAPIxVAL
  1907                           
  1908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1909                           ; Switch size 1, requested type "space"
  1910                           ; Number of cases is 1, Range of values is 0 to 0
  1911                           ; switch strategies available:
  1912                           ; Name         Instructions Cycles
  1913                           ; simple_byte            4     3 (average)
  1914                           ;	Chosen strategy is simple_byte
  1915  000D36  0100               	movlb	0	; () banked
  1916  000D38  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1917  000D3A  0A00               	xorlw	0	; case 0
  1918  000D3C  A4D8               	btfss	status,2,c
  1919  000D3E  D7F1               	goto	l8971
  1920                           
  1921                           ; BSR set to: 0
  1922                           ; Switch size 1, requested type "space"
  1923                           ; Number of cases is 4, Range of values is 0 to 3
  1924                           ; switch strategies available:
  1925                           ; Name         Instructions Cycles
  1926                           ; simple_byte           13     7 (average)
  1927                           ;	Chosen strategy is simple_byte
  1928  000D40  0100               	movlb	0	; () banked
  1929  000D42  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  1930  000D44  0A00               	xorlw	0	; case 0
  1931  000D46  B4D8               	btfsc	status,2,c
  1932  000D48  D7D6               	goto	l8963
  1933  000D4A  0A01               	xorlw	1	; case 1
  1934  000D4C  B4D8               	btfsc	status,2,c
  1935  000D4E  D7D7               	goto	l8965
  1936  000D50  0A03               	xorlw	3	; case 2
  1937  000D52  B4D8               	btfsc	status,2,c
  1938  000D54  D7DA               	goto	l8967
  1939  000D56  0A01               	xorlw	1	; case 3
  1940  000D58  B4D8               	btfsc	status,2,c
  1941  000D5A  D7DD               	goto	l8969
  1942  000D5C  D7E2               	goto	l8971
  1943  000D5E                     l8979:
  1944                           
  1945                           ; BSR set to: 0
  1946  000D5E  0E01               	movlw	1
  1947  000D60  6E38               	movwf	_Switch_Program,c
  1948                           
  1949                           ;State_Mchn.c: 263: Switch_Init = 7;
  1950  000D62  0E07               	movlw	7
  1951  000D64  0100               	movlb	0	; () banked
  1952  000D66  6F9F               	movwf	_Switch_Init& (0+255),b
  1953                           
  1954                           ;State_Mchn.c: 264: break;
  1955  000D68  0012               	return	
  1956  000D6A                     l8981:
  1957                           
  1958                           ; BSR set to: 0
  1959  000D6A  0E00               	movlw	0
  1960  000D6C  0100               	movlb	0	; () banked
  1961  000D6E  6F9F               	movwf	_Switch_Init& (0+255),b
  1962                           
  1963                           ;State_Mchn.c: 266: break;
  1964  000D70  0012               	return	
  1965  000D72                     l8983:
  1966                           
  1967                           ; BSR set to: 0
  1968  000D72  0E00               	movlw	0
  1969  000D74  6E38               	movwf	_Switch_Program,c
  1970                           
  1971                           ;State_Mchn.c: 268: Switch_Init = 7;
  1972  000D76  0E07               	movlw	7
  1973  000D78  0100               	movlb	0	; () banked
  1974  000D7A  6F9F               	movwf	_Switch_Init& (0+255),b
  1975                           
  1976                           ;State_Mchn.c: 269: break;
  1977  000D7C  0012               	return	
  1978  000D7E                     l8985:
  1979                           
  1980                           ; BSR set to: 0
  1981  000D7E  0E06               	movlw	6
  1982  000D80  6E38               	movwf	_Switch_Program,c
  1983                           
  1984                           ;State_Mchn.c: 271: Switch_Init = 7;
  1985  000D82  0E07               	movlw	7
  1986  000D84  0100               	movlb	0	; () banked
  1987  000D86  6F9F               	movwf	_Switch_Init& (0+255),b
  1988                           
  1989                           ;State_Mchn.c: 272: break;
  1990  000D88  0012               	return	
  1991  000D8A                     l8987:
  1992                           
  1993                           ; BSR set to: 0
  1994  000D8A  0E08               	movlw	8
  1995  000D8C  0100               	movlb	0	; () banked
  1996  000D8E  6F9F               	movwf	_Switch_Init& (0+255),b
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;State_Mchn.c: 274: Red_Led(1);
  2000  000D90  0E01               	movlw	1
  2001  000D92  ECA7  F019         	call	_Red_Led
  2002                           
  2003                           ;State_Mchn.c: 276: }
  2004                           
  2005                           ;State_Mchn.c: 275: break;
  2006  000D96  0012               	return	
  2007  000D98                     l8993:
  2008  000D98  0E18               	movlw	24
  2009  000D9A  EC2B  F01C         	call	_GETxAPIxVAL
  2010                           
  2011                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2012                           ; Switch size 1, requested type "space"
  2013                           ; Number of cases is 1, Range of values is 0 to 0
  2014                           ; switch strategies available:
  2015                           ; Name         Instructions Cycles
  2016                           ; simple_byte            4     3 (average)
  2017                           ;	Chosen strategy is simple_byte
  2018  000D9E  0100               	movlb	0	; () banked
  2019  000DA0  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2020  000DA2  0A00               	xorlw	0	; case 0
  2021  000DA4  A4D8               	btfss	status,2,c
  2022  000DA6  D7F1               	goto	l8987
  2023                           
  2024                           ; BSR set to: 0
  2025                           ; Switch size 1, requested type "space"
  2026                           ; Number of cases is 4, Range of values is 0 to 3
  2027                           ; switch strategies available:
  2028                           ; Name         Instructions Cycles
  2029                           ; simple_byte           13     7 (average)
  2030                           ;	Chosen strategy is simple_byte
  2031  000DA8  0100               	movlb	0	; () banked
  2032  000DAA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2033  000DAC  0A00               	xorlw	0	; case 0
  2034  000DAE  B4D8               	btfsc	status,2,c
  2035  000DB0  D7D6               	goto	l8979
  2036  000DB2  0A01               	xorlw	1	; case 1
  2037  000DB4  B4D8               	btfsc	status,2,c
  2038  000DB6  D7D9               	goto	l8981
  2039  000DB8  0A03               	xorlw	3	; case 2
  2040  000DBA  B4D8               	btfsc	status,2,c
  2041  000DBC  D7DA               	goto	l8983
  2042  000DBE  0A01               	xorlw	1	; case 3
  2043  000DC0  B4D8               	btfsc	status,2,c
  2044  000DC2  D7DD               	goto	l8985
  2045  000DC4  D7E2               	goto	l8987
  2046  000DC6                     l8995:
  2047                           
  2048                           ; BSR set to: 0
  2049  000DC6  0E02               	movlw	2
  2050  000DC8  6E38               	movwf	_Switch_Program,c
  2051                           
  2052                           ;State_Mchn.c: 281: Switch_Init = 7;
  2053  000DCA  0E07               	movlw	7
  2054  000DCC  0100               	movlb	0	; () banked
  2055  000DCE  6F9F               	movwf	_Switch_Init& (0+255),b
  2056                           
  2057                           ;State_Mchn.c: 282: break;
  2058  000DD0  0012               	return	
  2059  000DD2                     l8997:
  2060                           
  2061                           ; BSR set to: 0
  2062  000DD2  0E00               	movlw	0
  2063  000DD4  6E38               	movwf	_Switch_Program,c
  2064                           
  2065                           ;State_Mchn.c: 284: Switch_Init = 7;
  2066  000DD6  0E07               	movlw	7
  2067  000DD8  0100               	movlb	0	; () banked
  2068  000DDA  6F9F               	movwf	_Switch_Init& (0+255),b
  2069                           
  2070                           ;State_Mchn.c: 285: break;
  2071  000DDC  0012               	return	
  2072  000DDE                     l8999:
  2073                           
  2074                           ; BSR set to: 0
  2075  000DDE  0E00               	movlw	0
  2076  000DE0  0100               	movlb	0	; () banked
  2077  000DE2  6F9F               	movwf	_Switch_Init& (0+255),b
  2078                           
  2079                           ;State_Mchn.c: 287: break;
  2080  000DE4  0012               	return	
  2081  000DE6                     l9001:
  2082                           
  2083                           ; BSR set to: 0
  2084  000DE6  0E03               	movlw	3
  2085  000DE8  6E38               	movwf	_Switch_Program,c
  2086                           
  2087                           ;State_Mchn.c: 289: Switch_Init = 7;
  2088  000DEA  0E07               	movlw	7
  2089  000DEC  0100               	movlb	0	; () banked
  2090  000DEE  6F9F               	movwf	_Switch_Init& (0+255),b
  2091                           
  2092                           ;State_Mchn.c: 290: break;
  2093  000DF0  0012               	return	
  2094  000DF2                     l9003:
  2095                           
  2096                           ; BSR set to: 0
  2097  000DF2  0E08               	movlw	8
  2098  000DF4  0100               	movlb	0	; () banked
  2099  000DF6  6F9F               	movwf	_Switch_Init& (0+255),b
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;State_Mchn.c: 292: Red_Led(1);
  2103  000DF8  0E01               	movlw	1
  2104  000DFA  ECA7  F019         	call	_Red_Led
  2105                           
  2106                           ;State_Mchn.c: 294: }
  2107                           
  2108                           ;State_Mchn.c: 293: break;
  2109  000DFE  0012               	return	
  2110  000E00                     l9009:
  2111  000E00  0E18               	movlw	24
  2112  000E02  EC2B  F01C         	call	_GETxAPIxVAL
  2113                           
  2114                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2115                           ; Switch size 1, requested type "space"
  2116                           ; Number of cases is 1, Range of values is 0 to 0
  2117                           ; switch strategies available:
  2118                           ; Name         Instructions Cycles
  2119                           ; simple_byte            4     3 (average)
  2120                           ;	Chosen strategy is simple_byte
  2121  000E06  0100               	movlb	0	; () banked
  2122  000E08  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2123  000E0A  0A00               	xorlw	0	; case 0
  2124  000E0C  A4D8               	btfss	status,2,c
  2125  000E0E  D7F1               	goto	l9003
  2126                           
  2127                           ; BSR set to: 0
  2128                           ; Switch size 1, requested type "space"
  2129                           ; Number of cases is 4, Range of values is 0 to 3
  2130                           ; switch strategies available:
  2131                           ; Name         Instructions Cycles
  2132                           ; simple_byte           13     7 (average)
  2133                           ;	Chosen strategy is simple_byte
  2134  000E10  0100               	movlb	0	; () banked
  2135  000E12  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2136  000E14  0A00               	xorlw	0	; case 0
  2137  000E16  B4D8               	btfsc	status,2,c
  2138  000E18  D7D6               	goto	l8995
  2139  000E1A  0A01               	xorlw	1	; case 1
  2140  000E1C  B4D8               	btfsc	status,2,c
  2141  000E1E  D7D9               	goto	l8997
  2142  000E20  0A03               	xorlw	3	; case 2
  2143  000E22  B4D8               	btfsc	status,2,c
  2144  000E24  D7DC               	goto	l8999
  2145  000E26  0A01               	xorlw	1	; case 3
  2146  000E28  B4D8               	btfsc	status,2,c
  2147  000E2A  D7DD               	goto	l9001
  2148  000E2C  D7E2               	goto	l9003
  2149  000E2E                     l9011:
  2150                           
  2151                           ; BSR set to: 0
  2152  000E2E  0E04               	movlw	4
  2153  000E30  6E38               	movwf	_Switch_Program,c
  2154                           
  2155                           ;State_Mchn.c: 299: Switch_Init = 7;
  2156  000E32  0E07               	movlw	7
  2157  000E34  0100               	movlb	0	; () banked
  2158  000E36  6F9F               	movwf	_Switch_Init& (0+255),b
  2159                           
  2160                           ;State_Mchn.c: 300: break;
  2161  000E38  0012               	return	
  2162  000E3A                     l9013:
  2163                           
  2164                           ; BSR set to: 0
  2165  000E3A  0E06               	movlw	6
  2166  000E3C  6E38               	movwf	_Switch_Program,c
  2167                           
  2168                           ;State_Mchn.c: 302: Switch_Init = 7;
  2169  000E3E  0E07               	movlw	7
  2170  000E40  0100               	movlb	0	; () banked
  2171  000E42  6F9F               	movwf	_Switch_Init& (0+255),b
  2172                           
  2173                           ;State_Mchn.c: 303: break;
  2174  000E44  0012               	return	
  2175  000E46                     l9015:
  2176                           
  2177                           ; BSR set to: 0
  2178  000E46  0E03               	movlw	3
  2179  000E48  6E38               	movwf	_Switch_Program,c
  2180                           
  2181                           ;State_Mchn.c: 305: Switch_Init = 7;
  2182  000E4A  0E07               	movlw	7
  2183  000E4C  0100               	movlb	0	; () banked
  2184  000E4E  6F9F               	movwf	_Switch_Init& (0+255),b
  2185                           
  2186                           ;State_Mchn.c: 306: break;
  2187  000E50  0012               	return	
  2188  000E52                     l9017:
  2189                           
  2190                           ; BSR set to: 0
  2191  000E52  0E00               	movlw	0
  2192  000E54  0100               	movlb	0	; () banked
  2193  000E56  6F9F               	movwf	_Switch_Init& (0+255),b
  2194                           
  2195                           ;State_Mchn.c: 308: break;
  2196  000E58  0012               	return	
  2197  000E5A                     l9019:
  2198                           
  2199                           ; BSR set to: 0
  2200  000E5A  0E08               	movlw	8
  2201  000E5C  0100               	movlb	0	; () banked
  2202  000E5E  6F9F               	movwf	_Switch_Init& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;State_Mchn.c: 310: Red_Led(1);
  2206  000E60  0E01               	movlw	1
  2207  000E62  ECA7  F019         	call	_Red_Led
  2208                           
  2209                           ;State_Mchn.c: 312: }
  2210                           
  2211                           ;State_Mchn.c: 311: break;
  2212  000E66  0012               	return	
  2213  000E68                     l9025:
  2214  000E68  0E18               	movlw	24
  2215  000E6A  EC2B  F01C         	call	_GETxAPIxVAL
  2216                           
  2217                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2218                           ; Switch size 1, requested type "space"
  2219                           ; Number of cases is 1, Range of values is 0 to 0
  2220                           ; switch strategies available:
  2221                           ; Name         Instructions Cycles
  2222                           ; simple_byte            4     3 (average)
  2223                           ;	Chosen strategy is simple_byte
  2224  000E6E  0100               	movlb	0	; () banked
  2225  000E70  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2226  000E72  0A00               	xorlw	0	; case 0
  2227  000E74  A4D8               	btfss	status,2,c
  2228  000E76  D7F1               	goto	l9019
  2229                           
  2230                           ; BSR set to: 0
  2231                           ; Switch size 1, requested type "space"
  2232                           ; Number of cases is 4, Range of values is 0 to 3
  2233                           ; switch strategies available:
  2234                           ; Name         Instructions Cycles
  2235                           ; simple_byte           13     7 (average)
  2236                           ;	Chosen strategy is simple_byte
  2237  000E78  0100               	movlb	0	; () banked
  2238  000E7A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2239  000E7C  0A00               	xorlw	0	; case 0
  2240  000E7E  B4D8               	btfsc	status,2,c
  2241  000E80  D7D6               	goto	l9011
  2242  000E82  0A01               	xorlw	1	; case 1
  2243  000E84  B4D8               	btfsc	status,2,c
  2244  000E86  D7D9               	goto	l9013
  2245  000E88  0A03               	xorlw	3	; case 2
  2246  000E8A  B4D8               	btfsc	status,2,c
  2247  000E8C  D7DC               	goto	l9015
  2248  000E8E  0A01               	xorlw	1	; case 3
  2249  000E90  B4D8               	btfsc	status,2,c
  2250  000E92  D7DF               	goto	l9017
  2251  000E94  D7E2               	goto	l9019
  2252  000E96                     l9027:
  2253                           
  2254                           ; BSR set to: 0
  2255  000E96  0E08               	movlw	8
  2256  000E98  0100               	movlb	0	; () banked
  2257  000E9A  6F9F               	movwf	_Switch_Init& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;State_Mchn.c: 315: Red_Led(1);
  2261  000E9C  0E01               	movlw	1
  2262  000E9E  ECA7  F019         	call	_Red_Led
  2263                           
  2264                           ;State_Mchn.c: 317: }
  2265                           
  2266                           ;State_Mchn.c: 316: break;
  2267  000EA2  0012               	return	
  2268  000EA4                     l9033:
  2269  000EA4  0E17               	movlw	23
  2270  000EA6  EC2B  F01C         	call	_GETxAPIxVAL
  2271                           
  2272                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2273                           ; Switch size 1, requested type "space"
  2274                           ; Number of cases is 1, Range of values is 0 to 0
  2275                           ; switch strategies available:
  2276                           ; Name         Instructions Cycles
  2277                           ; simple_byte            4     3 (average)
  2278                           ;	Chosen strategy is simple_byte
  2279  000EAA  0100               	movlb	0	; () banked
  2280  000EAC  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2281  000EAE  0A00               	xorlw	0	; case 0
  2282  000EB0  A4D8               	btfss	status,2,c
  2283  000EB2  D7F1               	goto	l9027
  2284                           
  2285                           ; BSR set to: 0
  2286                           ; Switch size 1, requested type "space"
  2287                           ; Number of cases is 4, Range of values is 0 to 3
  2288                           ; switch strategies available:
  2289                           ; Name         Instructions Cycles
  2290                           ; simple_byte           13     7 (average)
  2291                           ;	Chosen strategy is simple_byte
  2292  000EB4  0100               	movlb	0	; () banked
  2293  000EB6  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2294  000EB8  0A00               	xorlw	0	; case 0
  2295  000EBA  B4D8               	btfsc	status,2,c
  2296  000EBC  D739               	goto	l8977
  2297  000EBE  0A01               	xorlw	1	; case 1
  2298  000EC0  B4D8               	btfsc	status,2,c
  2299  000EC2  D76A               	goto	l8993
  2300  000EC4  0A03               	xorlw	3	; case 2
  2301  000EC6  B4D8               	btfsc	status,2,c
  2302  000EC8  D79B               	goto	l9009
  2303  000ECA  0A01               	xorlw	1	; case 3
  2304  000ECC  B4D8               	btfsc	status,2,c
  2305  000ECE  D7CC               	goto	l9025
  2306  000ED0  D7E2               	goto	l9027
  2307  000ED2                     l9035:
  2308                           
  2309                           ; BSR set to: 0
  2310  000ED2  0E0B               	movlw	11
  2311  000ED4  0100               	movlb	0	; () banked
  2312  000ED6  6F9F               	movwf	_Switch_Init& (0+255),b
  2313                           
  2314                           ;State_Mchn.c: 322: break;
  2315  000ED8  0012               	return	
  2316  000EDA                     l9037:
  2317                           
  2318                           ; BSR set to: 0
  2319  000EDA  0E10               	movlw	16
  2320  000EDC  EC2B  F01C         	call	_GETxAPIxVAL
  2321  000EE0  0100               	movlb	0	; () banked
  2322  000EE2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2323  000EE4  0100               	movlb	0	; () banked
  2324  000EE6  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2325  000EE8  B4D8               	btfsc	status,2,c
  2326  000EEA  D008               	goto	l9041
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;State_Mchn.c: 325: {
  2330                           ;State_Mchn.c: 326: Switch_Main = 2;
  2331  000EEC  0E02               	movlw	2
  2332  000EEE  0100               	movlb	0	; () banked
  2333  000EF0  6FA1               	movwf	_Switch_Main& (0+255),b
  2334                           
  2335                           ;State_Mchn.c: 327: Switch_Init = 0;
  2336  000EF2  0E00               	movlw	0
  2337  000EF4  0100               	movlb	0	; () banked
  2338  000EF6  6F9F               	movwf	_Switch_Init& (0+255),b
  2339                           
  2340                           ;State_Mchn.c: 328: Stop_Program = 0;
  2341  000EF8  0E00               	movlw	0
  2342  000EFA  6E31               	movwf	_Stop_Program,c
  2343  000EFC                     l9041:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;State_Mchn.c: 329: }
  2347                           ;State_Mchn.c: 330: Green_Led(3);
  2348  000EFC  0E03               	movlw	3
  2349  000EFE  ECF3  F019         	call	_Green_Led
  2350                           
  2351                           ;State_Mchn.c: 331: Red_Led(0);
  2352  000F02  0E00               	movlw	0
  2353  000F04  ECA7  F019         	call	_Red_Led
  2354                           
  2355                           ;State_Mchn.c: 332: break;
  2356  000F08  0012               	return	
  2357  000F0A                     l9045:
  2358  000F0A  0E17               	movlw	23
  2359  000F0C  EC2B  F01C         	call	_GETxAPIxVAL
  2360  000F10  0E04               	movlw	4
  2361  000F12  0100               	movlb	0	; () banked
  2362  000F14  1960               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2363  000F16  0100               	movlb	0	; () banked
  2364  000F18  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2365  000F1A  A4D8               	btfss	status,2,c
  2366  000F1C  D025               	goto	l9063
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;State_Mchn.c: 335: {
  2370                           ;State_Mchn.c: 336: Switch_Program = 0;
  2371  000F1E  0E00               	movlw	0
  2372  000F20  6E38               	movwf	_Switch_Program,c
  2373                           
  2374                           ;State_Mchn.c: 337: Switch_Init = 10;
  2375  000F22  0E0A               	movlw	10
  2376  000F24  0100               	movlb	0	; () banked
  2377  000F26  6F9F               	movwf	_Switch_Init& (0+255),b
  2378                           
  2379                           ;State_Mchn.c: 338: }
  2380  000F28  0012               	return	
  2381  000F2A                     l9049:
  2382                           
  2383                           ; BSR set to: 0
  2384  000F2A  0E01               	movlw	1
  2385  000F2C  6E38               	movwf	_Switch_Program,c
  2386  000F2E  0E0A               	movlw	10
  2387  000F30  0100               	movlb	0	; () banked
  2388  000F32  6F9F               	movwf	_Switch_Init& (0+255),b
  2389  000F34  0012               	return	
  2390  000F36                     l9051:
  2391                           
  2392                           ; BSR set to: 0
  2393  000F36  0E03               	movlw	3
  2394  000F38  6E38               	movwf	_Switch_Program,c
  2395  000F3A  0E0A               	movlw	10
  2396  000F3C  0100               	movlb	0	; () banked
  2397  000F3E  6F9F               	movwf	_Switch_Init& (0+255),b
  2398  000F40  0012               	return	
  2399  000F42                     l9053:
  2400                           
  2401                           ; BSR set to: 0
  2402  000F42  0E00               	movlw	0
  2403  000F44  6E38               	movwf	_Switch_Program,c
  2404  000F46  0E0A               	movlw	10
  2405  000F48  0100               	movlb	0	; () banked
  2406  000F4A  6F9F               	movwf	_Switch_Init& (0+255),b
  2407  000F4C  0012               	return	
  2408  000F4E                     l9055:
  2409                           
  2410                           ; BSR set to: 0
  2411  000F4E  0E02               	movlw	2
  2412  000F50  6E38               	movwf	_Switch_Program,c
  2413  000F52  0E0A               	movlw	10
  2414  000F54  0100               	movlb	0	; () banked
  2415  000F56  6F9F               	movwf	_Switch_Init& (0+255),b
  2416  000F58  0012               	return	
  2417  000F5A                     l9057:
  2418                           
  2419                           ; BSR set to: 0
  2420  000F5A  0E0B               	movlw	11
  2421  000F5C  0100               	movlb	0	; () banked
  2422  000F5E  6F9F               	movwf	_Switch_Init& (0+255),b
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;State_Mchn.c: 346: Red_Led(1);
  2426  000F60  0E01               	movlw	1
  2427  000F62  ECA7  F019         	call	_Red_Led
  2428                           
  2429                           ;State_Mchn.c: 348: }
  2430                           
  2431                           ;State_Mchn.c: 347: break;
  2432  000F66  0012               	return	
  2433  000F68                     l9063:
  2434  000F68  0E17               	movlw	23
  2435  000F6A  EC2B  F01C         	call	_GETxAPIxVAL
  2436                           
  2437                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2438                           ; Switch size 1, requested type "space"
  2439                           ; Number of cases is 1, Range of values is 0 to 0
  2440                           ; switch strategies available:
  2441                           ; Name         Instructions Cycles
  2442                           ; simple_byte            4     3 (average)
  2443                           ;	Chosen strategy is simple_byte
  2444  000F6E  0100               	movlb	0	; () banked
  2445  000F70  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2446  000F72  0A00               	xorlw	0	; case 0
  2447  000F74  A4D8               	btfss	status,2,c
  2448  000F76  D7F1               	goto	l9057
  2449                           
  2450                           ; BSR set to: 0
  2451                           ; Switch size 1, requested type "space"
  2452                           ; Number of cases is 4, Range of values is 0 to 3
  2453                           ; switch strategies available:
  2454                           ; Name         Instructions Cycles
  2455                           ; simple_byte           13     7 (average)
  2456                           ;	Chosen strategy is simple_byte
  2457  000F78  0100               	movlb	0	; () banked
  2458  000F7A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2459  000F7C  0A00               	xorlw	0	; case 0
  2460  000F7E  B4D8               	btfsc	status,2,c
  2461  000F80  D7D4               	goto	l9049
  2462  000F82  0A01               	xorlw	1	; case 1
  2463  000F84  B4D8               	btfsc	status,2,c
  2464  000F86  D7D7               	goto	l9051
  2465  000F88  0A03               	xorlw	3	; case 2
  2466  000F8A  B4D8               	btfsc	status,2,c
  2467  000F8C  D7DA               	goto	l9053
  2468  000F8E  0A01               	xorlw	1	; case 3
  2469  000F90  B4D8               	btfsc	status,2,c
  2470  000F92  D7DD               	goto	l9055
  2471  000F94  D7E2               	goto	l9057
  2472  000F96                     l9065:
  2473                           
  2474                           ; BSR set to: 0
  2475  000F96  0E00               	movlw	0
  2476  000F98  0100               	movlb	0	; () banked
  2477  000F9A  6F9F               	movwf	_Switch_Init& (0+255),b
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;State_Mchn.c: 352: Red_Led(1);
  2481  000F9C  0E01               	movlw	1
  2482  000F9E  ECA7  F019         	call	_Red_Led
  2483                           
  2484                           ;State_Mchn.c: 354: }
  2485                           
  2486                           ;State_Mchn.c: 353: break;
  2487  000FA2  0012               	return	
  2488  000FA4                     l9071:
  2489  000FA4  0100               	movlb	0	; () banked
  2490  000FA6  519F               	movf	_Switch_Init& (0+255),w,b
  2491                           
  2492                           ; Switch size 1, requested type "space"
  2493                           ; Number of cases is 12, Range of values is 0 to 11
  2494                           ; switch strategies available:
  2495                           ; Name         Instructions Cycles
  2496                           ; simple_byte           37    19 (average)
  2497                           ;	Chosen strategy is simple_byte
  2498  000FA8  0A00               	xorlw	0	; case 0
  2499  000FAA  B4D8               	btfsc	status,2,c
  2500  000FAC  D442               	goto	l8779
  2501  000FAE  0A01               	xorlw	1	; case 1
  2502  000FB0  B4D8               	btfsc	status,2,c
  2503  000FB2  D449               	goto	l8783
  2504  000FB4  0A03               	xorlw	3	; case 2
  2505  000FB6  B4D8               	btfsc	status,2,c
  2506  000FB8  D4B6               	goto	l8817
  2507  000FBA  0A01               	xorlw	1	; case 3
  2508  000FBC  B4D8               	btfsc	status,2,c
  2509  000FBE  D4F3               	goto	l8835
  2510  000FC0  0A07               	xorlw	7	; case 4
  2511  000FC2  B4D8               	btfsc	status,2,c
  2512  000FC4  D575               	goto	l8875
  2513  000FC6  0A01               	xorlw	1	; case 5
  2514  000FC8  B4D8               	btfsc	status,2,c
  2515  000FCA  D5DF               	goto	l8899
  2516  000FCC  0A03               	xorlw	3	; case 6
  2517  000FCE  B4D8               	btfsc	status,2,c
  2518  000FD0  D5F7               	goto	l8907
  2519  000FD2  0A01               	xorlw	1	; case 7
  2520  000FD4  B4D8               	btfsc	status,2,c
  2521  000FD6  D5F8               	goto	l8909
  2522  000FD8  0A0F               	xorlw	15	; case 8
  2523  000FDA  B4D8               	btfsc	status,2,c
  2524  000FDC  D60D               	goto	l8917
  2525  000FDE  0A01               	xorlw	1	; case 9
  2526  000FE0  B4D8               	btfsc	status,2,c
  2527  000FE2  D777               	goto	l9035
  2528  000FE4  0A03               	xorlw	3	; case 10
  2529  000FE6  B4D8               	btfsc	status,2,c
  2530  000FE8  D778               	goto	l9037
  2531  000FEA  0A01               	xorlw	1	; case 11
  2532  000FEC  B4D8               	btfsc	status,2,c
  2533  000FEE  D78D               	goto	l9045
  2534  000FF0  D7D2               	goto	l9065
  2535  000FF2                     l9073:
  2536                           
  2537                           ; BSR set to: 0
  2538  000FF2  0E00               	movlw	0
  2539  000FF4  0100               	movlb	0	; () banked
  2540  000FF6  6F6E               	movwf	Train_Path@To& (0+255),b
  2541  000FF8  0E02               	movlw	2
  2542  000FFA  ECB6  F011         	call	_Train_Path
  2543  000FFE  0900               	iorlw	0
  2544  001000  A4D8               	btfss	status,2,c
  2545  001002  D222               	goto	l9321
  2546                           
  2547                           ;State_Mchn.c: 360: {
  2548                           ;State_Mchn.c: 361: Switch_Program = 1;
  2549  001004  0E01               	movlw	1
  2550  001006  6E38               	movwf	_Switch_Program,c
  2551                           
  2552                           ;State_Mchn.c: 362: Eeprom_Store();
  2553  001008  EC75  F018         	call	_Eeprom_Store	;wreg free
  2554  00100C                     l9079:
  2555                           
  2556                           ;State_Mchn.c: 363: if(Stop_Program == 1)
  2557  00100C  0431               	decf	_Stop_Program,w,c
  2558  00100E  A4D8               	btfss	status,2,c
  2559  001010  D21B               	goto	l9321
  2560                           
  2561                           ;State_Mchn.c: 364: {
  2562                           ;State_Mchn.c: 365: Switch_Main = 0;
  2563  001012  0E00               	movlw	0
  2564  001014  0100               	movlb	0	; () banked
  2565  001016  6FA1               	movwf	_Switch_Main& (0+255),b
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;State_Mchn.c: 367: }
  2569                           ;State_Mchn.c: 368: }
  2570                           ;State_Mchn.c: 369: break;
  2571                           
  2572                           ; BSR set to: 0
  2573  001018  D217               	goto	l9321
  2574  00101A                     l9083:
  2575                           
  2576                           ; BSR set to: 0
  2577  00101A  0E02               	movlw	2
  2578  00101C  0100               	movlb	0	; () banked
  2579  00101E  6F6E               	movwf	Train_Path@To& (0+255),b
  2580  001020  0E01               	movlw	1
  2581  001022  ECB6  F011         	call	_Train_Path
  2582  001026  0900               	iorlw	0
  2583  001028  A4D8               	btfss	status,2,c
  2584  00102A  D20E               	goto	l9321
  2585                           
  2586                           ;State_Mchn.c: 372: {
  2587                           ;State_Mchn.c: 373: Switch_Program = 2;
  2588  00102C  0E02               	movlw	2
  2589  00102E  6E38               	movwf	_Switch_Program,c
  2590                           
  2591                           ;State_Mchn.c: 374: Eeprom_Store();
  2592  001030  EC75  F018         	call	_Eeprom_Store	;wreg free
  2593  001034  D7EB               	goto	l9079
  2594  001036                     l9093:
  2595                           
  2596                           ; BSR set to: 0
  2597  001036  0E03               	movlw	3
  2598  001038  0100               	movlb	0	; () banked
  2599  00103A  6F6E               	movwf	Train_Path@To& (0+255),b
  2600  00103C  0E00               	movlw	0
  2601  00103E  ECB6  F011         	call	_Train_Path
  2602  001042  0900               	iorlw	0
  2603  001044  A4D8               	btfss	status,2,c
  2604  001046  D200               	goto	l9321
  2605                           
  2606                           ;State_Mchn.c: 384: {
  2607                           ;State_Mchn.c: 385: Switch_Program = 3;
  2608  001048  0E03               	movlw	3
  2609  00104A  6E38               	movwf	_Switch_Program,c
  2610                           
  2611                           ;State_Mchn.c: 386: Eeprom_Store();
  2612  00104C  EC75  F018         	call	_Eeprom_Store	;wreg free
  2613  001050  D7DD               	goto	l9079
  2614  001052                     l9103:
  2615                           
  2616                           ; BSR set to: 0
  2617  001052  0E00               	movlw	0
  2618  001054  0100               	movlb	0	; () banked
  2619  001056  6F6E               	movwf	Train_Path@To& (0+255),b
  2620  001058  0E02               	movlw	2
  2621  00105A  ECB6  F011         	call	_Train_Path
  2622  00105E  0900               	iorlw	0
  2623  001060  A4D8               	btfss	status,2,c
  2624  001062  D1F2               	goto	l9321
  2625                           
  2626                           ;State_Mchn.c: 396: {
  2627                           ;State_Mchn.c: 397: Switch_Program = 4;
  2628  001064  0E04               	movlw	4
  2629  001066  6E38               	movwf	_Switch_Program,c
  2630                           
  2631                           ;State_Mchn.c: 398: Eeprom_Store();
  2632  001068  EC75  F018         	call	_Eeprom_Store	;wreg free
  2633  00106C  D7CF               	goto	l9079
  2634  00106E                     l9113:
  2635                           
  2636                           ; BSR set to: 0
  2637  00106E  0E01               	movlw	1
  2638  001070  0100               	movlb	0	; () banked
  2639  001072  6F6E               	movwf	Train_Path@To& (0+255),b
  2640  001074  0E03               	movlw	3
  2641  001076  ECB6  F011         	call	_Train_Path
  2642  00107A  0900               	iorlw	0
  2643  00107C  A4D8               	btfss	status,2,c
  2644  00107E  D1E4               	goto	l9321
  2645                           
  2646                           ;State_Mchn.c: 408: {
  2647                           ;State_Mchn.c: 409: Switch_Program = 5;
  2648  001080  0E05               	movlw	5
  2649  001082  6E38               	movwf	_Switch_Program,c
  2650                           
  2651                           ;State_Mchn.c: 410: Eeprom_Store();
  2652  001084  EC75  F018         	call	_Eeprom_Store	;wreg free
  2653  001088  D7C1               	goto	l9079
  2654  00108A                     l9123:
  2655                           
  2656                           ; BSR set to: 0
  2657  00108A  0E03               	movlw	3
  2658  00108C  0100               	movlb	0	; () banked
  2659  00108E  6F6E               	movwf	Train_Path@To& (0+255),b
  2660  001090  0E00               	movlw	0
  2661  001092  ECB6  F011         	call	_Train_Path
  2662  001096  0900               	iorlw	0
  2663  001098  A4D8               	btfss	status,2,c
  2664  00109A  D1D6               	goto	l9321
  2665                           
  2666                           ;State_Mchn.c: 420: {
  2667                           ;State_Mchn.c: 421: Switch_Program = 6;
  2668  00109C  0E06               	movlw	6
  2669  00109E  6E38               	movwf	_Switch_Program,c
  2670                           
  2671                           ;State_Mchn.c: 422: Eeprom_Store();
  2672  0010A0  EC75  F018         	call	_Eeprom_Store	;wreg free
  2673  0010A4  D7B3               	goto	l9079
  2674  0010A6                     l9133:
  2675                           
  2676                           ; BSR set to: 0
  2677  0010A6  0E02               	movlw	2
  2678  0010A8  0100               	movlb	0	; () banked
  2679  0010AA  6F6E               	movwf	Train_Path@To& (0+255),b
  2680  0010AC  0E01               	movlw	1
  2681  0010AE  ECB6  F011         	call	_Train_Path
  2682  0010B2  0900               	iorlw	0
  2683  0010B4  A4D8               	btfss	status,2,c
  2684  0010B6  D1C8               	goto	l9321
  2685                           
  2686                           ;State_Mchn.c: 432: {
  2687                           ;State_Mchn.c: 433: Switch_Program = 7;
  2688  0010B8  0E07               	movlw	7
  2689  0010BA  6E38               	movwf	_Switch_Program,c
  2690                           
  2691                           ;State_Mchn.c: 434: Eeprom_Store();
  2692  0010BC  EC75  F018         	call	_Eeprom_Store	;wreg free
  2693  0010C0  D7A5               	goto	l9079
  2694  0010C2                     l9143:
  2695                           
  2696                           ; BSR set to: 0
  2697  0010C2  0E01               	movlw	1
  2698  0010C4  0100               	movlb	0	; () banked
  2699  0010C6  6F6E               	movwf	Train_Path@To& (0+255),b
  2700  0010C8  0E03               	movlw	3
  2701  0010CA  ECB6  F011         	call	_Train_Path
  2702  0010CE  0900               	iorlw	0
  2703  0010D0  A4D8               	btfss	status,2,c
  2704  0010D2  D1BA               	goto	l9321
  2705                           
  2706                           ;State_Mchn.c: 444: {
  2707                           ;State_Mchn.c: 445: Switch_Program = 0;
  2708  0010D4  0E00               	movlw	0
  2709  0010D6  6E38               	movwf	_Switch_Program,c
  2710                           
  2711                           ;State_Mchn.c: 446: Eeprom_Store();
  2712  0010D8  EC75  F018         	call	_Eeprom_Store	;wreg free
  2713  0010DC  D797               	goto	l9079
  2714  0010DE                     l9155:
  2715                           
  2716                           ; BSR set to: 0
  2717  0010DE  5038               	movf	_Switch_Program,w,c
  2718                           
  2719                           ; Switch size 1, requested type "space"
  2720                           ; Number of cases is 8, Range of values is 0 to 7
  2721                           ; switch strategies available:
  2722                           ; Name         Instructions Cycles
  2723                           ; simple_byte           25    13 (average)
  2724                           ;	Chosen strategy is simple_byte
  2725  0010E0  0A00               	xorlw	0	; case 0
  2726  0010E2  B4D8               	btfsc	status,2,c
  2727  0010E4  D786               	goto	l9073
  2728  0010E6  0A01               	xorlw	1	; case 1
  2729  0010E8  B4D8               	btfsc	status,2,c
  2730  0010EA  D797               	goto	l9083
  2731  0010EC  0A03               	xorlw	3	; case 2
  2732  0010EE  B4D8               	btfsc	status,2,c
  2733  0010F0  D7A2               	goto	l9093
  2734  0010F2  0A01               	xorlw	1	; case 3
  2735  0010F4  B4D8               	btfsc	status,2,c
  2736  0010F6  D7AD               	goto	l9103
  2737  0010F8  0A07               	xorlw	7	; case 4
  2738  0010FA  B4D8               	btfsc	status,2,c
  2739  0010FC  D7B8               	goto	l9113
  2740  0010FE  0A01               	xorlw	1	; case 5
  2741  001100  B4D8               	btfsc	status,2,c
  2742  001102  D7C3               	goto	l9123
  2743  001104  0A03               	xorlw	3	; case 6
  2744  001106  B4D8               	btfsc	status,2,c
  2745  001108  D7CE               	goto	l9133
  2746  00110A  0A01               	xorlw	1	; case 7
  2747  00110C  B4D8               	btfsc	status,2,c
  2748  00110E  D7D9               	goto	l9143
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;State_Mchn.c: 460: switch(Switch_Activate_Controls)
  2752  001110  D19B               	goto	l9321
  2753  001112                     l9157:
  2754  001112  0E14               	movlw	20
  2755  001114  EC2B  F01C         	call	_GETxAPIxVAL
  2756  001118  0100               	movlb	0	; () banked
  2757  00111A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2758  00111C  0100               	movlb	0	; () banked
  2759  00111E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2760  001120  B4D8               	btfsc	status,2,c
  2761  001122  D00F               	goto	l9165
  2762                           
  2763                           ; BSR set to: 0
  2764  001124  0E16               	movlw	22
  2765  001126  EC2B  F01C         	call	_GETxAPIxVAL
  2766  00112A  0100               	movlb	0	; () banked
  2767  00112C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2768  00112E  0100               	movlb	0	; () banked
  2769  001130  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2770  001132  B4D8               	btfsc	status,2,c
  2771  001134  D006               	goto	l9165
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;State_Mchn.c: 463: {
  2775                           ;State_Mchn.c: 464: Switch_Activate_Controls = 1;
  2776  001136  0E01               	movlw	1
  2777  001138  6E32               	movwf	_Switch_Activate_Controls,c
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;State_Mchn.c: 465: Red_Led(3);
  2781  00113A  0E03               	movlw	3
  2782  00113C  ECA7  F019         	call	_Red_Led
  2783                           
  2784                           ;State_Mchn.c: 466: }
  2785  001140  D18E               	goto	l9323
  2786  001142                     l9165:
  2787                           
  2788                           ;State_Mchn.c: 467: else
  2789                           ;State_Mchn.c: 468: {
  2790                           ;State_Mchn.c: 469: Switch_Activate_Controls = 0;
  2791  001142  0E00               	movlw	0
  2792  001144  6E32               	movwf	_Switch_Activate_Controls,c
  2793                           
  2794                           ;State_Mchn.c: 470: Red_Led(0);
  2795  001146  0E00               	movlw	0
  2796  001148  ECA7  F019         	call	_Red_Led
  2797                           
  2798                           ;State_Mchn.c: 471: }
  2799                           ;State_Mchn.c: 472: break;
  2800  00114C  D188               	goto	l9323
  2801  00114E                     l9169:
  2802  00114E  0E14               	movlw	20
  2803  001150  EC2B  F01C         	call	_GETxAPIxVAL
  2804  001154  0100               	movlb	0	; () banked
  2805  001156  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2806  001158  0100               	movlb	0	; () banked
  2807  00115A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2808  00115C  A4D8               	btfss	status,2,c
  2809  00115E  D00F               	goto	l9177
  2810                           
  2811                           ; BSR set to: 0
  2812  001160  0E16               	movlw	22
  2813  001162  EC2B  F01C         	call	_GETxAPIxVAL
  2814  001166  0100               	movlb	0	; () banked
  2815  001168  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2816  00116A  0100               	movlb	0	; () banked
  2817  00116C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2818  00116E  A4D8               	btfss	status,2,c
  2819  001170  D006               	goto	l9177
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;State_Mchn.c: 475: {
  2823                           ;State_Mchn.c: 476: Switch_Activate_Controls = 2;
  2824  001172  0E02               	movlw	2
  2825  001174  6E32               	movwf	_Switch_Activate_Controls,c
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;State_Mchn.c: 477: Red_Led(3);
  2829  001176  0E03               	movlw	3
  2830  001178  ECA7  F019         	call	_Red_Led
  2831                           
  2832                           ;State_Mchn.c: 478: }
  2833  00117C  D005               	goto	l9181
  2834  00117E                     l9177:
  2835                           
  2836                           ;State_Mchn.c: 479: else
  2837                           ;State_Mchn.c: 480: {
  2838                           ;State_Mchn.c: 481: Switch_Activate_Controls = 1;
  2839  00117E  0E01               	movlw	1
  2840  001180  6E32               	movwf	_Switch_Activate_Controls,c
  2841                           
  2842                           ;State_Mchn.c: 482: Red_Led(3);
  2843  001182  0E03               	movlw	3
  2844  001184  ECA7  F019         	call	_Red_Led
  2845  001188                     l9181:
  2846                           
  2847                           ;State_Mchn.c: 483: }
  2848                           ;State_Mchn.c: 484: Activate_Controls_Counter = 10000;
  2849  001188  0E27               	movlw	39
  2850  00118A  0100               	movlb	0	; () banked
  2851  00118C  6F91               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2852  00118E  0E10               	movlw	16
  2853  001190  6F90               	movwf	_Activate_Controls_Counter& (0+255),b
  2854                           
  2855                           ;State_Mchn.c: 485: break;
  2856  001192  D165               	goto	l9323
  2857  001194                     l9183:
  2858  001194  0E14               	movlw	20
  2859  001196  EC2B  F01C         	call	_GETxAPIxVAL
  2860  00119A  0100               	movlb	0	; () banked
  2861  00119C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2862  00119E  0100               	movlb	0	; () banked
  2863  0011A0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2864  0011A2  A4D8               	btfss	status,2,c
  2865  0011A4  D020               	goto	l9193
  2866                           
  2867                           ; BSR set to: 0
  2868  0011A6  0E16               	movlw	22
  2869  0011A8  EC2B  F01C         	call	_GETxAPIxVAL
  2870  0011AC  0100               	movlb	0	; () banked
  2871  0011AE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2872  0011B0  0100               	movlb	0	; () banked
  2873  0011B2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2874  0011B4  A4D8               	btfss	status,2,c
  2875  0011B6  D017               	goto	l9193
  2876                           
  2877                           ; BSR set to: 0
  2878  0011B8  0E15               	movlw	21
  2879  0011BA  EC2B  F01C         	call	_GETxAPIxVAL
  2880  0011BE  0100               	movlb	0	; () banked
  2881  0011C0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2882  0011C2  0100               	movlb	0	; () banked
  2883  0011C4  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2884  0011C6  A4D8               	btfss	status,2,c
  2885  0011C8  D00E               	goto	l9193
  2886                           
  2887                           ; BSR set to: 0
  2888  0011CA  0E13               	movlw	19
  2889  0011CC  EC2B  F01C         	call	_GETxAPIxVAL
  2890  0011D0  0100               	movlb	0	; () banked
  2891  0011D2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2892  0011D4  0100               	movlb	0	; () banked
  2893  0011D6  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2894  0011D8  A4D8               	btfss	status,2,c
  2895  0011DA  D005               	goto	l9193
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;State_Mchn.c: 488: {
  2899                           ;State_Mchn.c: 489: Activate_Controls_Counter--;
  2900  0011DC  0100               	movlb	0	; () banked
  2901  0011DE  0790               	decf	_Activate_Controls_Counter& (0+255),f,b
  2902  0011E0  A0D8               	btfss	status,0,c
  2903  0011E2  0791               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  2904                           
  2905                           ;State_Mchn.c: 490: }
  2906  0011E4  D005               	goto	l9195
  2907  0011E6                     l9193:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;State_Mchn.c: 491: else
  2911                           ;State_Mchn.c: 492: {
  2912                           ;State_Mchn.c: 493: Activate_Controls_Counter = 10000;
  2913  0011E6  0E27               	movlw	39
  2914  0011E8  0100               	movlb	0	; () banked
  2915  0011EA  6F91               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2916  0011EC  0E10               	movlw	16
  2917  0011EE  6F90               	movwf	_Activate_Controls_Counter& (0+255),b
  2918  0011F0                     l9195:
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;State_Mchn.c: 494: }
  2922                           ;State_Mchn.c: 496: Red_Led(3);
  2923  0011F0  0E03               	movlw	3
  2924  0011F2  ECA7  F019         	call	_Red_Led
  2925                           
  2926                           ;State_Mchn.c: 498: switch(GETxAPIxVAL(19))
  2927  0011F6  D04A               	goto	l9225
  2928  0011F8                     l9197:
  2929  0011F8  0E00               	movlw	0
  2930  0011FA  D03B               	goto	L8
  2931  0011FC                     l9199:
  2932  0011FC  0E07               	movlw	7
  2933  0011FE  EC2B  F01C         	call	_GETxAPIxVAL
  2934  001202  C060  F084         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2935  001206  C061  F085         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2936  00120A  0E06               	movlw	6
  2937  00120C  EC2B  F01C         	call	_GETxAPIxVAL
  2938  001210  0100               	movlb	0	; () banked
  2939  001212  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2940  001214  0100               	movlb	0	; () banked
  2941  001216  5D84               	subwf	??_Update_StateMchn& (0+255),w,b
  2942  001218  0100               	movlb	0	; () banked
  2943  00121A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2944  00121C  0100               	movlb	0	; () banked
  2945  00121E  5985               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  2946  001220  A0D8               	btfss	status,0,c
  2947  001222  D003               	goto	l9203
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;State_Mchn.c: 506: {
  2951                           ;State_Mchn.c: 507: DECRxAPIxVAL(7);
  2952  001224  0E07               	movlw	7
  2953  001226  ECD1  F01B         	call	_DECRxAPIxVAL
  2954  00122A                     l9203:
  2955                           
  2956                           ;State_Mchn.c: 508: }
  2957                           ;State_Mchn.c: 509: if(GETxAPIxVAL(8) <= GETxAPIxVAL(5))
  2958  00122A  0E05               	movlw	5
  2959  00122C  EC2B  F01C         	call	_GETxAPIxVAL
  2960  001230  C060  F084         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2961  001234  C061  F085         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2962  001238  0E08               	movlw	8
  2963  00123A  EC2B  F01C         	call	_GETxAPIxVAL
  2964  00123E  0100               	movlb	0	; () banked
  2965  001240  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  2966  001242  0100               	movlb	0	; () banked
  2967  001244  5D84               	subwf	??_Update_StateMchn& (0+255),w,b
  2968  001246  0100               	movlb	0	; () banked
  2969  001248  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2970  00124A  0100               	movlb	0	; () banked
  2971  00124C  5985               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  2972  00124E  A0D8               	btfss	status,0,c
  2973  001250  D003               	goto	l9207
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;State_Mchn.c: 510: {
  2977                           ;State_Mchn.c: 511: INCRxAPIxVAL(8);
  2978  001252  0E08               	movlw	8
  2979  001254  ECFF  F01B         	call	_INCRxAPIxVAL
  2980  001258                     l9207:
  2981                           
  2982                           ;State_Mchn.c: 512: }
  2983                           ;State_Mchn.c: 513: Switch_Adjust_LB = 1;
  2984  001258  0E01               	movlw	1
  2985  00125A  D00B               	goto	L8
  2986  00125C                     l9209:
  2987  00125C  5022               	movf	_Adjust_Counter+1,w,c
  2988  00125E  E104               	bnz	u8110
  2989  001260  0E14               	movlw	20
  2990  001262  5C21               	subwf	_Adjust_Counter,w,c
  2991  001264  A0D8               	btfss	status,0,c
  2992  001266  D007               	goto	l9215
  2993  001268                     u8110:
  2994                           
  2995                           ;State_Mchn.c: 517: {
  2996                           ;State_Mchn.c: 518: Adjust_Counter = 0;
  2997  001268  0E00               	movlw	0
  2998  00126A  6E22               	movwf	_Adjust_Counter+1,c
  2999  00126C  0E00               	movlw	0
  3000  00126E  6E21               	movwf	_Adjust_Counter,c
  3001  001270  D7C3               	goto	l9197
  3002  001272                     L8:
  3003  001272  6E33               	movwf	_Switch_Adjust_LB,c
  3004                           
  3005                           ;State_Mchn.c: 521: }
  3006                           
  3007                           ;State_Mchn.c: 520: break;
  3008  001274  D051               	goto	l9255
  3009  001276                     l9215:
  3010                           
  3011                           ;State_Mchn.c: 522: else {Adjust_Counter++;}
  3012  001276  4A21               	infsnz	_Adjust_Counter,f,c
  3013  001278  2A22               	incf	_Adjust_Counter+1,f,c
  3014                           
  3015                           ;State_Mchn.c: 523: break;
  3016  00127A  D04E               	goto	l9255
  3017  00127C                     l9221:
  3018  00127C  5033               	movf	_Switch_Adjust_LB,w,c
  3019                           
  3020                           ; Switch size 1, requested type "space"
  3021                           ; Number of cases is 2, Range of values is 0 to 1
  3022                           ; switch strategies available:
  3023                           ; Name         Instructions Cycles
  3024                           ; simple_byte            7     4 (average)
  3025                           ;	Chosen strategy is simple_byte
  3026  00127E  0A00               	xorlw	0	; case 0
  3027  001280  B4D8               	btfsc	status,2,c
  3028  001282  D7BC               	goto	l9199
  3029  001284  0A01               	xorlw	1	; case 1
  3030  001286  B4D8               	btfsc	status,2,c
  3031  001288  D7E9               	goto	l9209
  3032  00128A  D7B6               	goto	l9197
  3033  00128C                     l9225:
  3034  00128C  0E13               	movlw	19
  3035  00128E  EC2B  F01C         	call	_GETxAPIxVAL
  3036                           
  3037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3038                           ; Switch size 1, requested type "space"
  3039                           ; Number of cases is 1, Range of values is 0 to 0
  3040                           ; switch strategies available:
  3041                           ; Name         Instructions Cycles
  3042                           ; simple_byte            4     3 (average)
  3043                           ;	Chosen strategy is simple_byte
  3044  001292  0100               	movlb	0	; () banked
  3045  001294  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3046  001296  0A00               	xorlw	0	; case 0
  3047  001298  A4D8               	btfss	status,2,c
  3048  00129A  D03E               	goto	l9255
  3049                           
  3050                           ; BSR set to: 0
  3051                           ; Switch size 1, requested type "space"
  3052                           ; Number of cases is 2, Range of values is 0 to 1
  3053                           ; switch strategies available:
  3054                           ; Name         Instructions Cycles
  3055                           ; simple_byte            7     4 (average)
  3056                           ;	Chosen strategy is simple_byte
  3057  00129C  0100               	movlb	0	; () banked
  3058  00129E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3059  0012A0  0A00               	xorlw	0	; case 0
  3060  0012A2  B4D8               	btfsc	status,2,c
  3061  0012A4  D7A9               	goto	l9197
  3062  0012A6  0A01               	xorlw	1	; case 1
  3063  0012A8  B4D8               	btfsc	status,2,c
  3064  0012AA  D7E8               	goto	l9221
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;State_Mchn.c: 534: switch(GETxAPIxVAL(20))
  3068  0012AC  D035               	goto	l9255
  3069  0012AE                     l9227:
  3070                           
  3071                           ; BSR set to: 0
  3072  0012AE  0E00               	movlw	0
  3073  0012B0  D026               	goto	L10
  3074  0012B2                     l9229:
  3075  0012B2  0E07               	movlw	7
  3076  0012B4  EC2B  F01C         	call	_GETxAPIxVAL
  3077  0012B8  0100               	movlb	0	; () banked
  3078  0012BA  2960               	incf	?_GETxAPIxVAL& (0+255),w,b
  3079  0012BC  0E03               	movlw	3
  3080  0012BE  0100               	movlb	0	; () banked
  3081  0012C0  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  3082  0012C2  B0D8               	btfsc	status,0,c
  3083  0012C4  D003               	goto	l9233
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;State_Mchn.c: 542: {
  3087                           ;State_Mchn.c: 543: INCRxAPIxVAL(7);
  3088  0012C6  0E07               	movlw	7
  3089  0012C8  ECFF  F01B         	call	_INCRxAPIxVAL
  3090  0012CC                     l9233:
  3091                           
  3092                           ;State_Mchn.c: 544: }
  3093                           ;State_Mchn.c: 545: if(GETxAPIxVAL(8) >= 1)
  3094  0012CC  0E08               	movlw	8
  3095  0012CE  EC2B  F01C         	call	_GETxAPIxVAL
  3096  0012D2  0100               	movlb	0	; () banked
  3097  0012D4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3098  0012D6  0100               	movlb	0	; () banked
  3099  0012D8  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3100  0012DA  B4D8               	btfsc	status,2,c
  3101  0012DC  D003               	goto	l9237
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;State_Mchn.c: 546: {
  3105                           ;State_Mchn.c: 547: DECRxAPIxVAL(8);
  3106  0012DE  0E08               	movlw	8
  3107  0012E0  ECD1  F01B         	call	_DECRxAPIxVAL
  3108  0012E4                     l9237:
  3109                           
  3110                           ;State_Mchn.c: 548: }
  3111                           ;State_Mchn.c: 549: Switch_Adjust_LF = 1;
  3112  0012E4  0E01               	movlw	1
  3113  0012E6  D00B               	goto	L10
  3114  0012E8                     l9239:
  3115  0012E8  5022               	movf	_Adjust_Counter+1,w,c
  3116  0012EA  E104               	bnz	u8140
  3117  0012EC  0E14               	movlw	20
  3118  0012EE  5C21               	subwf	_Adjust_Counter,w,c
  3119  0012F0  A0D8               	btfss	status,0,c
  3120  0012F2  D007               	goto	l9245
  3121  0012F4                     u8140:
  3122                           
  3123                           ;State_Mchn.c: 553: {
  3124                           ;State_Mchn.c: 554: Adjust_Counter = 0;
  3125  0012F4  0E00               	movlw	0
  3126  0012F6  6E22               	movwf	_Adjust_Counter+1,c
  3127  0012F8  0E00               	movlw	0
  3128  0012FA  6E21               	movwf	_Adjust_Counter,c
  3129  0012FC  D7D8               	goto	l9227
  3130  0012FE                     L10:
  3131  0012FE  6E34               	movwf	_Switch_Adjust_LF,c
  3132                           
  3133                           ;State_Mchn.c: 557: }
  3134                           
  3135                           ;State_Mchn.c: 556: break;
  3136  001300  D046               	goto	l9281
  3137  001302                     l9245:
  3138                           
  3139                           ;State_Mchn.c: 558: else {Adjust_Counter++;}
  3140  001302  4A21               	infsnz	_Adjust_Counter,f,c
  3141  001304  2A22               	incf	_Adjust_Counter+1,f,c
  3142                           
  3143                           ;State_Mchn.c: 559: break;
  3144  001306  D043               	goto	l9281
  3145  001308                     l9251:
  3146  001308  5034               	movf	_Switch_Adjust_LF,w,c
  3147                           
  3148                           ; Switch size 1, requested type "space"
  3149                           ; Number of cases is 2, Range of values is 0 to 1
  3150                           ; switch strategies available:
  3151                           ; Name         Instructions Cycles
  3152                           ; simple_byte            7     4 (average)
  3153                           ;	Chosen strategy is simple_byte
  3154  00130A  0A00               	xorlw	0	; case 0
  3155  00130C  B4D8               	btfsc	status,2,c
  3156  00130E  D7D1               	goto	l9229
  3157  001310  0A01               	xorlw	1	; case 1
  3158  001312  B4D8               	btfsc	status,2,c
  3159  001314  D7E9               	goto	l9239
  3160  001316  D7CB               	goto	l9227
  3161  001318                     l9255:
  3162  001318  0E14               	movlw	20
  3163  00131A  EC2B  F01C         	call	_GETxAPIxVAL
  3164                           
  3165                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3166                           ; Switch size 1, requested type "space"
  3167                           ; Number of cases is 1, Range of values is 0 to 0
  3168                           ; switch strategies available:
  3169                           ; Name         Instructions Cycles
  3170                           ; simple_byte            4     3 (average)
  3171                           ;	Chosen strategy is simple_byte
  3172  00131E  0100               	movlb	0	; () banked
  3173  001320  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3174  001322  0A00               	xorlw	0	; case 0
  3175  001324  A4D8               	btfss	status,2,c
  3176  001326  D033               	goto	l9281
  3177                           
  3178                           ; BSR set to: 0
  3179                           ; Switch size 1, requested type "space"
  3180                           ; Number of cases is 2, Range of values is 0 to 1
  3181                           ; switch strategies available:
  3182                           ; Name         Instructions Cycles
  3183                           ; simple_byte            7     4 (average)
  3184                           ;	Chosen strategy is simple_byte
  3185  001328  0100               	movlb	0	; () banked
  3186  00132A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3187  00132C  0A00               	xorlw	0	; case 0
  3188  00132E  B4D8               	btfsc	status,2,c
  3189  001330  D7BE               	goto	l9227
  3190  001332  0A01               	xorlw	1	; case 1
  3191  001334  B4D8               	btfsc	status,2,c
  3192  001336  D7E8               	goto	l9251
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;State_Mchn.c: 569: switch(GETxAPIxVAL(21))
  3196  001338  D02A               	goto	l9281
  3197  00133A                     l9257:
  3198                           
  3199                           ; BSR set to: 0
  3200  00133A  0E00               	movlw	0
  3201  00133C  D01B               	goto	L12
  3202  00133E                     l9259:
  3203  00133E  0E09               	movlw	9
  3204  001340  EC2B  F01C         	call	_GETxAPIxVAL
  3205  001344  0100               	movlb	0	; () banked
  3206  001346  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3207  001348  E108               	bnz	l9263
  3208  00134A  0EFB               	movlw	251
  3209  00134C  0100               	movlb	0	; () banked
  3210  00134E  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  3211  001350  B0D8               	btfsc	status,0,c
  3212  001352  D003               	goto	l9263
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;State_Mchn.c: 577: {
  3216                           ;State_Mchn.c: 578: INCRxAPIxVAL(9);
  3217  001354  0E09               	movlw	9
  3218  001356  ECFF  F01B         	call	_INCRxAPIxVAL
  3219  00135A                     l9263:
  3220                           
  3221                           ;State_Mchn.c: 579: }
  3222                           ;State_Mchn.c: 580: Switch_Adjust_RB = 1;
  3223  00135A  0E01               	movlw	1
  3224  00135C  D00B               	goto	L12
  3225  00135E                     l9265:
  3226  00135E  5022               	movf	_Adjust_Counter+1,w,c
  3227  001360  E104               	bnz	u8160
  3228  001362  0E14               	movlw	20
  3229  001364  5C21               	subwf	_Adjust_Counter,w,c
  3230  001366  A0D8               	btfss	status,0,c
  3231  001368  D007               	goto	l9271
  3232  00136A                     u8160:
  3233                           
  3234                           ;State_Mchn.c: 584: {
  3235                           ;State_Mchn.c: 585: Adjust_Counter = 0;
  3236  00136A  0E00               	movlw	0
  3237  00136C  6E22               	movwf	_Adjust_Counter+1,c
  3238  00136E  0E00               	movlw	0
  3239  001370  6E21               	movwf	_Adjust_Counter,c
  3240  001372  D7E3               	goto	l9257
  3241  001374                     L12:
  3242  001374  6E35               	movwf	_Switch_Adjust_RB,c
  3243                           
  3244                           ;State_Mchn.c: 588: }
  3245                           
  3246                           ;State_Mchn.c: 587: break;
  3247  001376  D044               	goto	l9307
  3248  001378                     l9271:
  3249                           
  3250                           ;State_Mchn.c: 589: else {Adjust_Counter++;}
  3251  001378  4A21               	infsnz	_Adjust_Counter,f,c
  3252  00137A  2A22               	incf	_Adjust_Counter+1,f,c
  3253                           
  3254                           ;State_Mchn.c: 590: break;
  3255  00137C  D041               	goto	l9307
  3256  00137E                     l9277:
  3257  00137E  5035               	movf	_Switch_Adjust_RB,w,c
  3258                           
  3259                           ; Switch size 1, requested type "space"
  3260                           ; Number of cases is 2, Range of values is 0 to 1
  3261                           ; switch strategies available:
  3262                           ; Name         Instructions Cycles
  3263                           ; simple_byte            7     4 (average)
  3264                           ;	Chosen strategy is simple_byte
  3265  001380  0A00               	xorlw	0	; case 0
  3266  001382  B4D8               	btfsc	status,2,c
  3267  001384  D7DC               	goto	l9259
  3268  001386  0A01               	xorlw	1	; case 1
  3269  001388  B4D8               	btfsc	status,2,c
  3270  00138A  D7E9               	goto	l9265
  3271  00138C  D7D6               	goto	l9257
  3272  00138E                     l9281:
  3273  00138E  0E15               	movlw	21
  3274  001390  EC2B  F01C         	call	_GETxAPIxVAL
  3275                           
  3276                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3277                           ; Switch size 1, requested type "space"
  3278                           ; Number of cases is 1, Range of values is 0 to 0
  3279                           ; switch strategies available:
  3280                           ; Name         Instructions Cycles
  3281                           ; simple_byte            4     3 (average)
  3282                           ;	Chosen strategy is simple_byte
  3283  001394  0100               	movlb	0	; () banked
  3284  001396  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3285  001398  0A00               	xorlw	0	; case 0
  3286  00139A  A4D8               	btfss	status,2,c
  3287  00139C  D031               	goto	l9307
  3288                           
  3289                           ; BSR set to: 0
  3290                           ; Switch size 1, requested type "space"
  3291                           ; Number of cases is 2, Range of values is 0 to 1
  3292                           ; switch strategies available:
  3293                           ; Name         Instructions Cycles
  3294                           ; simple_byte            7     4 (average)
  3295                           ;	Chosen strategy is simple_byte
  3296  00139E  0100               	movlb	0	; () banked
  3297  0013A0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3298  0013A2  0A00               	xorlw	0	; case 0
  3299  0013A4  B4D8               	btfsc	status,2,c
  3300  0013A6  D7C9               	goto	l9257
  3301  0013A8  0A01               	xorlw	1	; case 1
  3302  0013AA  B4D8               	btfsc	status,2,c
  3303  0013AC  D7E8               	goto	l9277
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;State_Mchn.c: 601: switch(GETxAPIxVAL(22))
  3307  0013AE  D028               	goto	l9307
  3308  0013B0                     l9283:
  3309                           
  3310                           ; BSR set to: 0
  3311  0013B0  0E00               	movlw	0
  3312  0013B2  D019               	goto	L14
  3313  0013B4                     l9285:
  3314  0013B4  0E09               	movlw	9
  3315  0013B6  EC2B  F01C         	call	_GETxAPIxVAL
  3316  0013BA  0100               	movlb	0	; () banked
  3317  0013BC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3318  0013BE  0100               	movlb	0	; () banked
  3319  0013C0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3320  0013C2  B4D8               	btfsc	status,2,c
  3321  0013C4  D003               	goto	l9289
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;State_Mchn.c: 609: {
  3325                           ;State_Mchn.c: 610: DECRxAPIxVAL(9);
  3326  0013C6  0E09               	movlw	9
  3327  0013C8  ECD1  F01B         	call	_DECRxAPIxVAL
  3328  0013CC                     l9289:
  3329                           
  3330                           ;State_Mchn.c: 611: } Switch_Adjust_RF = 1;
  3331  0013CC  0E01               	movlw	1
  3332  0013CE  D00B               	goto	L14
  3333  0013D0                     l9291:
  3334  0013D0  5022               	movf	_Adjust_Counter+1,w,c
  3335  0013D2  E104               	bnz	u8180
  3336  0013D4  0E14               	movlw	20
  3337  0013D6  5C21               	subwf	_Adjust_Counter,w,c
  3338  0013D8  A0D8               	btfss	status,0,c
  3339  0013DA  D007               	goto	l9297
  3340  0013DC                     u8180:
  3341                           
  3342                           ;State_Mchn.c: 615: {
  3343                           ;State_Mchn.c: 616: Adjust_Counter = 0;
  3344  0013DC  0E00               	movlw	0
  3345  0013DE  6E22               	movwf	_Adjust_Counter+1,c
  3346  0013E0  0E00               	movlw	0
  3347  0013E2  6E21               	movwf	_Adjust_Counter,c
  3348  0013E4  D7E5               	goto	l9283
  3349  0013E6                     L14:
  3350  0013E6  6E36               	movwf	_Switch_Adjust_RF,c
  3351                           
  3352                           ;State_Mchn.c: 619: }
  3353                           
  3354                           ;State_Mchn.c: 618: break;
  3355  0013E8  D01B               	goto	l9309
  3356  0013EA                     l9297:
  3357                           
  3358                           ;State_Mchn.c: 620: else {Adjust_Counter++;}
  3359  0013EA  4A21               	infsnz	_Adjust_Counter,f,c
  3360  0013EC  2A22               	incf	_Adjust_Counter+1,f,c
  3361                           
  3362                           ;State_Mchn.c: 621: break;
  3363  0013EE  D018               	goto	l9309
  3364  0013F0                     l9303:
  3365  0013F0  5036               	movf	_Switch_Adjust_RF,w,c
  3366                           
  3367                           ; Switch size 1, requested type "space"
  3368                           ; Number of cases is 2, Range of values is 0 to 1
  3369                           ; switch strategies available:
  3370                           ; Name         Instructions Cycles
  3371                           ; simple_byte            7     4 (average)
  3372                           ;	Chosen strategy is simple_byte
  3373  0013F2  0A00               	xorlw	0	; case 0
  3374  0013F4  B4D8               	btfsc	status,2,c
  3375  0013F6  D7DE               	goto	l9285
  3376  0013F8  0A01               	xorlw	1	; case 1
  3377  0013FA  B4D8               	btfsc	status,2,c
  3378  0013FC  D7E9               	goto	l9291
  3379  0013FE  D7D8               	goto	l9283
  3380  001400                     l9307:
  3381  001400  0E16               	movlw	22
  3382  001402  EC2B  F01C         	call	_GETxAPIxVAL
  3383                           
  3384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3385                           ; Switch size 1, requested type "space"
  3386                           ; Number of cases is 1, Range of values is 0 to 0
  3387                           ; switch strategies available:
  3388                           ; Name         Instructions Cycles
  3389                           ; simple_byte            4     3 (average)
  3390                           ;	Chosen strategy is simple_byte
  3391  001406  0100               	movlb	0	; () banked
  3392  001408  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3393  00140A  0A00               	xorlw	0	; case 0
  3394  00140C  A4D8               	btfss	status,2,c
  3395  00140E  D008               	goto	l9309
  3396                           
  3397                           ; BSR set to: 0
  3398                           ; Switch size 1, requested type "space"
  3399                           ; Number of cases is 2, Range of values is 0 to 1
  3400                           ; switch strategies available:
  3401                           ; Name         Instructions Cycles
  3402                           ; simple_byte            7     4 (average)
  3403                           ;	Chosen strategy is simple_byte
  3404  001410  0100               	movlb	0	; () banked
  3405  001412  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3406  001414  0A00               	xorlw	0	; case 0
  3407  001416  B4D8               	btfsc	status,2,c
  3408  001418  D7CB               	goto	l9283
  3409  00141A  0A01               	xorlw	1	; case 1
  3410  00141C  B4D8               	btfsc	status,2,c
  3411  00141E  D7E8               	goto	l9303
  3412  001420                     l9309:
  3413                           
  3414                           ;State_Mchn.c: 630: if(Activate_Controls_Counter <= 1)
  3415  001420  0100               	movlb	0	; () banked
  3416  001422  5191               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  3417  001424  E11C               	bnz	l9323
  3418  001426  0E02               	movlw	2
  3419  001428  0100               	movlb	0	; () banked
  3420  00142A  5D90               	subwf	_Activate_Controls_Counter& (0+255),w,b
  3421  00142C  B0D8               	btfsc	status,0,c
  3422  00142E  D017               	goto	l9323
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;State_Mchn.c: 631: {
  3426                           ;State_Mchn.c: 632: Switch_Activate_Controls = 0;
  3427  001430  0E00               	movlw	0
  3428  001432  6E32               	movwf	_Switch_Activate_Controls,c
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;State_Mchn.c: 633: Red_Led(0);
  3432  001434  0E00               	movlw	0
  3433  001436  ECA7  F019         	call	_Red_Led
  3434                           
  3435                           ;State_Mchn.c: 634: }
  3436                           ;State_Mchn.c: 635: break;
  3437  00143A  D011               	goto	l9323
  3438  00143C                     l9315:
  3439  00143C  0E00               	movlw	0
  3440  00143E  6E32               	movwf	_Switch_Activate_Controls,c
  3441                           
  3442                           ;State_Mchn.c: 638: Red_Led(0);
  3443  001440  0E00               	movlw	0
  3444  001442  ECA7  F019         	call	_Red_Led
  3445                           
  3446                           ;State_Mchn.c: 640: }
  3447                           
  3448                           ;State_Mchn.c: 639: break;
  3449  001446  D00B               	goto	l9323
  3450  001448                     l9321:
  3451  001448  5032               	movf	_Switch_Activate_Controls,w,c
  3452                           
  3453                           ; Switch size 1, requested type "space"
  3454                           ; Number of cases is 3, Range of values is 0 to 2
  3455                           ; switch strategies available:
  3456                           ; Name         Instructions Cycles
  3457                           ; simple_byte           10     6 (average)
  3458                           ;	Chosen strategy is simple_byte
  3459  00144A  0A00               	xorlw	0	; case 0
  3460  00144C  B4D8               	btfsc	status,2,c
  3461  00144E  D661               	goto	l9157
  3462  001450  0A01               	xorlw	1	; case 1
  3463  001452  B4D8               	btfsc	status,2,c
  3464  001454  D67C               	goto	l9169
  3465  001456  0A03               	xorlw	3	; case 2
  3466  001458  B4D8               	btfsc	status,2,c
  3467  00145A  D69C               	goto	l9183
  3468  00145C  D7EF               	goto	l9315
  3469  00145E                     l9323:
  3470                           
  3471                           ;State_Mchn.c: 642: if(GETxAPIxVAL(17))
  3472  00145E  0E11               	movlw	17
  3473  001460  EC2B  F01C         	call	_GETxAPIxVAL
  3474  001464  0100               	movlb	0	; () banked
  3475  001466  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3476  001468  0100               	movlb	0	; () banked
  3477  00146A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3478  00146C  B4D8               	btfsc	status,2,c
  3479  00146E  D002               	goto	l9327
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;State_Mchn.c: 643: {
  3483                           ;State_Mchn.c: 644: Stop_Program = 1;
  3484  001470  0E01               	movlw	1
  3485  001472  6E31               	movwf	_Stop_Program,c
  3486  001474                     l9327:
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;State_Mchn.c: 645: }
  3490                           ;State_Mchn.c: 647: if(Stop_Program == 1)
  3491  001474  0431               	decf	_Stop_Program,w,c
  3492  001476  A4D8               	btfss	status,2,c
  3493  001478  D003               	goto	l362
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;State_Mchn.c: 648: {
  3497                           ;State_Mchn.c: 649: Red_Led(2);
  3498  00147A  0E02               	movlw	2
  3499  00147C  ECA7  F019         	call	_Red_Led
  3500  001480                     l362:
  3501                           
  3502                           ;State_Mchn.c: 650: }
  3503                           ;State_Mchn.c: 652: Green_Led(1);
  3504  001480  0E01               	movlw	1
  3505  001482  ECF3  F019         	call	_Green_Led
  3506                           
  3507                           ;State_Mchn.c: 654: break;
  3508  001486  0012               	return	
  3509  001488                     l9331:
  3510  001488  0E00               	movlw	0
  3511  00148A  0100               	movlb	0	; () banked
  3512  00148C  6F6E               	movwf	Train_Path@To& (0+255),b
  3513  00148E  0E02               	movlw	2
  3514  001490  ECB6  F011         	call	_Train_Path
  3515  001494  0900               	iorlw	0
  3516  001496  A4D8               	btfss	status,2,c
  3517  001498  D1DE               	goto	l9539
  3518                           
  3519                           ;State_Mchn.c: 660: {
  3520                           ;State_Mchn.c: 661: Switch_Program = 1;
  3521  00149A  0E01               	movlw	1
  3522  00149C  6E38               	movwf	_Switch_Program,c
  3523                           
  3524                           ;State_Mchn.c: 662: Eeprom_Store();
  3525  00149E  EC75  F018         	call	_Eeprom_Store	;wreg free
  3526  0014A2                     l9337:
  3527                           
  3528                           ;State_Mchn.c: 663: if(Stop_Program == 1)
  3529  0014A2  0431               	decf	_Stop_Program,w,c
  3530  0014A4  A4D8               	btfss	status,2,c
  3531  0014A6  D1D7               	goto	l9539
  3532                           
  3533                           ;State_Mchn.c: 664: {
  3534                           ;State_Mchn.c: 665: Switch_Main = 0;
  3535  0014A8  0E00               	movlw	0
  3536  0014AA  0100               	movlb	0	; () banked
  3537  0014AC  6FA1               	movwf	_Switch_Main& (0+255),b
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;State_Mchn.c: 667: }
  3541                           ;State_Mchn.c: 668: }
  3542                           ;State_Mchn.c: 669: break;
  3543                           
  3544                           ; BSR set to: 0
  3545  0014AE  D1D3               	goto	l9539
  3546  0014B0                     l9341:
  3547  0014B0  0E03               	movlw	3
  3548  0014B2  0100               	movlb	0	; () banked
  3549  0014B4  6F6E               	movwf	Train_Path@To& (0+255),b
  3550  0014B6  0E00               	movlw	0
  3551  0014B8  ECB6  F011         	call	_Train_Path
  3552  0014BC  0900               	iorlw	0
  3553  0014BE  A4D8               	btfss	status,2,c
  3554  0014C0  D1CA               	goto	l9539
  3555                           
  3556                           ;State_Mchn.c: 672: {
  3557                           ;State_Mchn.c: 673: Switch_Program = 2;
  3558  0014C2  0E02               	movlw	2
  3559  0014C4  6E38               	movwf	_Switch_Program,c
  3560                           
  3561                           ;State_Mchn.c: 674: Eeprom_Store();
  3562  0014C6  EC75  F018         	call	_Eeprom_Store	;wreg free
  3563  0014CA  D7EB               	goto	l9337
  3564  0014CC                     l9351:
  3565  0014CC  0E01               	movlw	1
  3566  0014CE  0100               	movlb	0	; () banked
  3567  0014D0  6F6E               	movwf	Train_Path@To& (0+255),b
  3568  0014D2  0E03               	movlw	3
  3569  0014D4  ECB6  F011         	call	_Train_Path
  3570  0014D8  0900               	iorlw	0
  3571  0014DA  A4D8               	btfss	status,2,c
  3572  0014DC  D1BC               	goto	l9539
  3573                           
  3574                           ;State_Mchn.c: 684: {
  3575                           ;State_Mchn.c: 685: Switch_Program = 3;
  3576  0014DE  0E03               	movlw	3
  3577  0014E0  6E38               	movwf	_Switch_Program,c
  3578                           
  3579                           ;State_Mchn.c: 686: Eeprom_Store();
  3580  0014E2  EC75  F018         	call	_Eeprom_Store	;wreg free
  3581  0014E6  D7DD               	goto	l9337
  3582  0014E8                     l9361:
  3583  0014E8  0E02               	movlw	2
  3584  0014EA  0100               	movlb	0	; () banked
  3585  0014EC  6F6E               	movwf	Train_Path@To& (0+255),b
  3586  0014EE  0E01               	movlw	1
  3587  0014F0  ECB6  F011         	call	_Train_Path
  3588  0014F4  0900               	iorlw	0
  3589  0014F6  A4D8               	btfss	status,2,c
  3590  0014F8  D1AE               	goto	l9539
  3591                           
  3592                           ;State_Mchn.c: 696: {
  3593                           ;State_Mchn.c: 697: Switch_Program = 0;
  3594  0014FA  0E00               	movlw	0
  3595  0014FC  6E38               	movwf	_Switch_Program,c
  3596                           
  3597                           ;State_Mchn.c: 698: Eeprom_Store();
  3598  0014FE  EC75  F018         	call	_Eeprom_Store	;wreg free
  3599  001502  D7CF               	goto	l9337
  3600  001504                     l9373:
  3601  001504  5038               	movf	_Switch_Program,w,c
  3602                           
  3603                           ; Switch size 1, requested type "space"
  3604                           ; Number of cases is 4, Range of values is 0 to 3
  3605                           ; switch strategies available:
  3606                           ; Name         Instructions Cycles
  3607                           ; simple_byte           13     7 (average)
  3608                           ;	Chosen strategy is simple_byte
  3609  001506  0A00               	xorlw	0	; case 0
  3610  001508  B4D8               	btfsc	status,2,c
  3611  00150A  D7BE               	goto	l9331
  3612  00150C  0A01               	xorlw	1	; case 1
  3613  00150E  B4D8               	btfsc	status,2,c
  3614  001510  D7CF               	goto	l9341
  3615  001512  0A03               	xorlw	3	; case 2
  3616  001514  B4D8               	btfsc	status,2,c
  3617  001516  D7DA               	goto	l9351
  3618  001518  0A01               	xorlw	1	; case 3
  3619  00151A  B4D8               	btfsc	status,2,c
  3620  00151C  D7E5               	goto	l9361
  3621                           
  3622                           ;State_Mchn.c: 710: switch(Switch_Activate_Controls)
  3623  00151E  D19B               	goto	l9539
  3624  001520                     l9375:
  3625  001520  0E14               	movlw	20
  3626  001522  EC2B  F01C         	call	_GETxAPIxVAL
  3627  001526  0100               	movlb	0	; () banked
  3628  001528  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3629  00152A  0100               	movlb	0	; () banked
  3630  00152C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3631  00152E  B4D8               	btfsc	status,2,c
  3632  001530  D00F               	goto	l9383
  3633                           
  3634                           ; BSR set to: 0
  3635  001532  0E16               	movlw	22
  3636  001534  EC2B  F01C         	call	_GETxAPIxVAL
  3637  001538  0100               	movlb	0	; () banked
  3638  00153A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3639  00153C  0100               	movlb	0	; () banked
  3640  00153E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3641  001540  B4D8               	btfsc	status,2,c
  3642  001542  D006               	goto	l9383
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;State_Mchn.c: 713: {
  3646                           ;State_Mchn.c: 714: Switch_Activate_Controls = 1;
  3647  001544  0E01               	movlw	1
  3648  001546  6E32               	movwf	_Switch_Activate_Controls,c
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;State_Mchn.c: 715: Red_Led(3);
  3652  001548  0E03               	movlw	3
  3653  00154A  ECA7  F019         	call	_Red_Led
  3654                           
  3655                           ;State_Mchn.c: 716: }
  3656  00154E  0012               	return	
  3657  001550                     l9383:
  3658                           
  3659                           ;State_Mchn.c: 717: else
  3660                           ;State_Mchn.c: 718: {
  3661                           ;State_Mchn.c: 719: Switch_Activate_Controls = 0;
  3662  001550  0E00               	movlw	0
  3663  001552  6E32               	movwf	_Switch_Activate_Controls,c
  3664                           
  3665                           ;State_Mchn.c: 720: Red_Led(0);
  3666  001554  0E00               	movlw	0
  3667  001556  ECA7  F019         	call	_Red_Led
  3668                           
  3669                           ;State_Mchn.c: 721: }
  3670                           ;State_Mchn.c: 722: break;
  3671  00155A  0012               	return	
  3672  00155C                     l9387:
  3673  00155C  0E14               	movlw	20
  3674  00155E  EC2B  F01C         	call	_GETxAPIxVAL
  3675  001562  0100               	movlb	0	; () banked
  3676  001564  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3677  001566  0100               	movlb	0	; () banked
  3678  001568  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3679  00156A  A4D8               	btfss	status,2,c
  3680  00156C  D00F               	goto	l9395
  3681                           
  3682                           ; BSR set to: 0
  3683  00156E  0E16               	movlw	22
  3684  001570  EC2B  F01C         	call	_GETxAPIxVAL
  3685  001574  0100               	movlb	0	; () banked
  3686  001576  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3687  001578  0100               	movlb	0	; () banked
  3688  00157A  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3689  00157C  A4D8               	btfss	status,2,c
  3690  00157E  D006               	goto	l9395
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;State_Mchn.c: 725: {
  3694                           ;State_Mchn.c: 726: Switch_Activate_Controls = 2;
  3695  001580  0E02               	movlw	2
  3696  001582  6E32               	movwf	_Switch_Activate_Controls,c
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;State_Mchn.c: 727: Red_Led(3);
  3700  001584  0E03               	movlw	3
  3701  001586  ECA7  F019         	call	_Red_Led
  3702                           
  3703                           ;State_Mchn.c: 728: }
  3704  00158A  D005               	goto	l9399
  3705  00158C                     l9395:
  3706                           
  3707                           ;State_Mchn.c: 729: else
  3708                           ;State_Mchn.c: 730: {
  3709                           ;State_Mchn.c: 731: Switch_Activate_Controls = 1;
  3710  00158C  0E01               	movlw	1
  3711  00158E  6E32               	movwf	_Switch_Activate_Controls,c
  3712                           
  3713                           ;State_Mchn.c: 732: Red_Led(3);
  3714  001590  0E03               	movlw	3
  3715  001592  ECA7  F019         	call	_Red_Led
  3716  001596                     l9399:
  3717                           
  3718                           ;State_Mchn.c: 733: }
  3719                           ;State_Mchn.c: 734: Activate_Controls_Counter = 10000;
  3720  001596  0E27               	movlw	39
  3721  001598  0100               	movlb	0	; () banked
  3722  00159A  6F91               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3723  00159C  0E10               	movlw	16
  3724  00159E  6F90               	movwf	_Activate_Controls_Counter& (0+255),b
  3725                           
  3726                           ;State_Mchn.c: 735: break;
  3727  0015A0  0012               	return	
  3728  0015A2                     l9401:
  3729  0015A2  0E14               	movlw	20
  3730  0015A4  EC2B  F01C         	call	_GETxAPIxVAL
  3731  0015A8  0100               	movlb	0	; () banked
  3732  0015AA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3733  0015AC  0100               	movlb	0	; () banked
  3734  0015AE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3735  0015B0  A4D8               	btfss	status,2,c
  3736  0015B2  D020               	goto	l9411
  3737                           
  3738                           ; BSR set to: 0
  3739  0015B4  0E16               	movlw	22
  3740  0015B6  EC2B  F01C         	call	_GETxAPIxVAL
  3741  0015BA  0100               	movlb	0	; () banked
  3742  0015BC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3743  0015BE  0100               	movlb	0	; () banked
  3744  0015C0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3745  0015C2  A4D8               	btfss	status,2,c
  3746  0015C4  D017               	goto	l9411
  3747                           
  3748                           ; BSR set to: 0
  3749  0015C6  0E15               	movlw	21
  3750  0015C8  EC2B  F01C         	call	_GETxAPIxVAL
  3751  0015CC  0100               	movlb	0	; () banked
  3752  0015CE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3753  0015D0  0100               	movlb	0	; () banked
  3754  0015D2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3755  0015D4  A4D8               	btfss	status,2,c
  3756  0015D6  D00E               	goto	l9411
  3757                           
  3758                           ; BSR set to: 0
  3759  0015D8  0E13               	movlw	19
  3760  0015DA  EC2B  F01C         	call	_GETxAPIxVAL
  3761  0015DE  0100               	movlb	0	; () banked
  3762  0015E0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3763  0015E2  0100               	movlb	0	; () banked
  3764  0015E4  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3765  0015E6  A4D8               	btfss	status,2,c
  3766  0015E8  D005               	goto	l9411
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;State_Mchn.c: 738: {
  3770                           ;State_Mchn.c: 739: Activate_Controls_Counter--;
  3771  0015EA  0100               	movlb	0	; () banked
  3772  0015EC  0790               	decf	_Activate_Controls_Counter& (0+255),f,b
  3773  0015EE  A0D8               	btfss	status,0,c
  3774  0015F0  0791               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  3775                           
  3776                           ;State_Mchn.c: 740: }
  3777  0015F2  D005               	goto	l9413
  3778  0015F4                     l9411:
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;State_Mchn.c: 741: else
  3782                           ;State_Mchn.c: 742: {
  3783                           ;State_Mchn.c: 743: Activate_Controls_Counter = 10000;
  3784  0015F4  0E27               	movlw	39
  3785  0015F6  0100               	movlb	0	; () banked
  3786  0015F8  6F91               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3787  0015FA  0E10               	movlw	16
  3788  0015FC  6F90               	movwf	_Activate_Controls_Counter& (0+255),b
  3789  0015FE                     l9413:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;State_Mchn.c: 744: }
  3793                           ;State_Mchn.c: 746: Red_Led(3);
  3794  0015FE  0E03               	movlw	3
  3795  001600  ECA7  F019         	call	_Red_Led
  3796                           
  3797                           ;State_Mchn.c: 748: switch(GETxAPIxVAL(19))
  3798  001604  D04A               	goto	l9443
  3799  001606                     l9415:
  3800  001606  0E00               	movlw	0
  3801  001608  D03B               	goto	L16
  3802  00160A                     l9417:
  3803  00160A  0E07               	movlw	7
  3804  00160C  EC2B  F01C         	call	_GETxAPIxVAL
  3805  001610  C060  F084         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3806  001614  C061  F085         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3807  001618  0E06               	movlw	6
  3808  00161A  EC2B  F01C         	call	_GETxAPIxVAL
  3809  00161E  0100               	movlb	0	; () banked
  3810  001620  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3811  001622  0100               	movlb	0	; () banked
  3812  001624  5D84               	subwf	??_Update_StateMchn& (0+255),w,b
  3813  001626  0100               	movlb	0	; () banked
  3814  001628  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3815  00162A  0100               	movlb	0	; () banked
  3816  00162C  5985               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  3817  00162E  A0D8               	btfss	status,0,c
  3818  001630  D003               	goto	l9421
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;State_Mchn.c: 756: {
  3822                           ;State_Mchn.c: 757: DECRxAPIxVAL(7);
  3823  001632  0E07               	movlw	7
  3824  001634  ECD1  F01B         	call	_DECRxAPIxVAL
  3825  001638                     l9421:
  3826                           
  3827                           ;State_Mchn.c: 758: }
  3828                           ;State_Mchn.c: 759: if(GETxAPIxVAL(8) <= GETxAPIxVAL(5))
  3829  001638  0E05               	movlw	5
  3830  00163A  EC2B  F01C         	call	_GETxAPIxVAL
  3831  00163E  C060  F084         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3832  001642  C061  F085         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3833  001646  0E08               	movlw	8
  3834  001648  EC2B  F01C         	call	_GETxAPIxVAL
  3835  00164C  0100               	movlb	0	; () banked
  3836  00164E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3837  001650  0100               	movlb	0	; () banked
  3838  001652  5D84               	subwf	??_Update_StateMchn& (0+255),w,b
  3839  001654  0100               	movlb	0	; () banked
  3840  001656  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3841  001658  0100               	movlb	0	; () banked
  3842  00165A  5985               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  3843  00165C  A0D8               	btfss	status,0,c
  3844  00165E  D003               	goto	l9425
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;State_Mchn.c: 760: {
  3848                           ;State_Mchn.c: 761: INCRxAPIxVAL(8);
  3849  001660  0E08               	movlw	8
  3850  001662  ECFF  F01B         	call	_INCRxAPIxVAL
  3851  001666                     l9425:
  3852                           
  3853                           ;State_Mchn.c: 762: }
  3854                           ;State_Mchn.c: 763: Switch_Adjust_LB = 1;
  3855  001666  0E01               	movlw	1
  3856  001668  D00B               	goto	L16
  3857  00166A                     l9427:
  3858  00166A  5022               	movf	_Adjust_Counter+1,w,c
  3859  00166C  E104               	bnz	u8400
  3860  00166E  0E14               	movlw	20
  3861  001670  5C21               	subwf	_Adjust_Counter,w,c
  3862  001672  A0D8               	btfss	status,0,c
  3863  001674  D007               	goto	l9433
  3864  001676                     u8400:
  3865                           
  3866                           ;State_Mchn.c: 767: {
  3867                           ;State_Mchn.c: 768: Adjust_Counter = 0;
  3868  001676  0E00               	movlw	0
  3869  001678  6E22               	movwf	_Adjust_Counter+1,c
  3870  00167A  0E00               	movlw	0
  3871  00167C  6E21               	movwf	_Adjust_Counter,c
  3872  00167E  D7C3               	goto	l9415
  3873  001680                     L16:
  3874  001680  6E33               	movwf	_Switch_Adjust_LB,c
  3875                           
  3876                           ;State_Mchn.c: 771: }
  3877                           
  3878                           ;State_Mchn.c: 770: break;
  3879  001682  D051               	goto	l9473
  3880  001684                     l9433:
  3881                           
  3882                           ;State_Mchn.c: 772: else {Adjust_Counter++;}
  3883  001684  4A21               	infsnz	_Adjust_Counter,f,c
  3884  001686  2A22               	incf	_Adjust_Counter+1,f,c
  3885                           
  3886                           ;State_Mchn.c: 773: break;
  3887  001688  D04E               	goto	l9473
  3888  00168A                     l9439:
  3889  00168A  5033               	movf	_Switch_Adjust_LB,w,c
  3890                           
  3891                           ; Switch size 1, requested type "space"
  3892                           ; Number of cases is 2, Range of values is 0 to 1
  3893                           ; switch strategies available:
  3894                           ; Name         Instructions Cycles
  3895                           ; simple_byte            7     4 (average)
  3896                           ;	Chosen strategy is simple_byte
  3897  00168C  0A00               	xorlw	0	; case 0
  3898  00168E  B4D8               	btfsc	status,2,c
  3899  001690  D7BC               	goto	l9417
  3900  001692  0A01               	xorlw	1	; case 1
  3901  001694  B4D8               	btfsc	status,2,c
  3902  001696  D7E9               	goto	l9427
  3903  001698  D7B6               	goto	l9415
  3904  00169A                     l9443:
  3905  00169A  0E13               	movlw	19
  3906  00169C  EC2B  F01C         	call	_GETxAPIxVAL
  3907                           
  3908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3909                           ; Switch size 1, requested type "space"
  3910                           ; Number of cases is 1, Range of values is 0 to 0
  3911                           ; switch strategies available:
  3912                           ; Name         Instructions Cycles
  3913                           ; simple_byte            4     3 (average)
  3914                           ;	Chosen strategy is simple_byte
  3915  0016A0  0100               	movlb	0	; () banked
  3916  0016A2  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3917  0016A4  0A00               	xorlw	0	; case 0
  3918  0016A6  A4D8               	btfss	status,2,c
  3919  0016A8  D03E               	goto	l9473
  3920                           
  3921                           ; BSR set to: 0
  3922                           ; Switch size 1, requested type "space"
  3923                           ; Number of cases is 2, Range of values is 0 to 1
  3924                           ; switch strategies available:
  3925                           ; Name         Instructions Cycles
  3926                           ; simple_byte            7     4 (average)
  3927                           ;	Chosen strategy is simple_byte
  3928  0016AA  0100               	movlb	0	; () banked
  3929  0016AC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3930  0016AE  0A00               	xorlw	0	; case 0
  3931  0016B0  B4D8               	btfsc	status,2,c
  3932  0016B2  D7A9               	goto	l9415
  3933  0016B4  0A01               	xorlw	1	; case 1
  3934  0016B6  B4D8               	btfsc	status,2,c
  3935  0016B8  D7E8               	goto	l9439
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;State_Mchn.c: 784: switch(GETxAPIxVAL(20))
  3939  0016BA  D035               	goto	l9473
  3940  0016BC                     l9445:
  3941                           
  3942                           ; BSR set to: 0
  3943  0016BC  0E00               	movlw	0
  3944  0016BE  D026               	goto	L18
  3945  0016C0                     l9447:
  3946  0016C0  0E07               	movlw	7
  3947  0016C2  EC2B  F01C         	call	_GETxAPIxVAL
  3948  0016C6  0100               	movlb	0	; () banked
  3949  0016C8  2960               	incf	?_GETxAPIxVAL& (0+255),w,b
  3950  0016CA  0E03               	movlw	3
  3951  0016CC  0100               	movlb	0	; () banked
  3952  0016CE  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  3953  0016D0  B0D8               	btfsc	status,0,c
  3954  0016D2  D003               	goto	l9451
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;State_Mchn.c: 792: {
  3958                           ;State_Mchn.c: 793: INCRxAPIxVAL(7);
  3959  0016D4  0E07               	movlw	7
  3960  0016D6  ECFF  F01B         	call	_INCRxAPIxVAL
  3961  0016DA                     l9451:
  3962                           
  3963                           ;State_Mchn.c: 794: }
  3964                           ;State_Mchn.c: 795: if(GETxAPIxVAL(8) >= 1)
  3965  0016DA  0E08               	movlw	8
  3966  0016DC  EC2B  F01C         	call	_GETxAPIxVAL
  3967  0016E0  0100               	movlb	0	; () banked
  3968  0016E2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  3969  0016E4  0100               	movlb	0	; () banked
  3970  0016E6  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3971  0016E8  B4D8               	btfsc	status,2,c
  3972  0016EA  D003               	goto	l9455
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;State_Mchn.c: 796: {
  3976                           ;State_Mchn.c: 797: DECRxAPIxVAL(8);
  3977  0016EC  0E08               	movlw	8
  3978  0016EE  ECD1  F01B         	call	_DECRxAPIxVAL
  3979  0016F2                     l9455:
  3980                           
  3981                           ;State_Mchn.c: 798: }
  3982                           ;State_Mchn.c: 799: Switch_Adjust_LF = 1;
  3983  0016F2  0E01               	movlw	1
  3984  0016F4  D00B               	goto	L18
  3985  0016F6                     l9457:
  3986  0016F6  5022               	movf	_Adjust_Counter+1,w,c
  3987  0016F8  E104               	bnz	u8430
  3988  0016FA  0E14               	movlw	20
  3989  0016FC  5C21               	subwf	_Adjust_Counter,w,c
  3990  0016FE  A0D8               	btfss	status,0,c
  3991  001700  D007               	goto	l9463
  3992  001702                     u8430:
  3993                           
  3994                           ;State_Mchn.c: 803: {
  3995                           ;State_Mchn.c: 804: Adjust_Counter = 0;
  3996  001702  0E00               	movlw	0
  3997  001704  6E22               	movwf	_Adjust_Counter+1,c
  3998  001706  0E00               	movlw	0
  3999  001708  6E21               	movwf	_Adjust_Counter,c
  4000  00170A  D7D8               	goto	l9445
  4001  00170C                     L18:
  4002  00170C  6E34               	movwf	_Switch_Adjust_LF,c
  4003                           
  4004                           ;State_Mchn.c: 807: }
  4005                           
  4006                           ;State_Mchn.c: 806: break;
  4007  00170E  D046               	goto	l9499
  4008  001710                     l9463:
  4009                           
  4010                           ;State_Mchn.c: 808: else {Adjust_Counter++;}
  4011  001710  4A21               	infsnz	_Adjust_Counter,f,c
  4012  001712  2A22               	incf	_Adjust_Counter+1,f,c
  4013                           
  4014                           ;State_Mchn.c: 809: break;
  4015  001714  D043               	goto	l9499
  4016  001716                     l9469:
  4017  001716  5034               	movf	_Switch_Adjust_LF,w,c
  4018                           
  4019                           ; Switch size 1, requested type "space"
  4020                           ; Number of cases is 2, Range of values is 0 to 1
  4021                           ; switch strategies available:
  4022                           ; Name         Instructions Cycles
  4023                           ; simple_byte            7     4 (average)
  4024                           ;	Chosen strategy is simple_byte
  4025  001718  0A00               	xorlw	0	; case 0
  4026  00171A  B4D8               	btfsc	status,2,c
  4027  00171C  D7D1               	goto	l9447
  4028  00171E  0A01               	xorlw	1	; case 1
  4029  001720  B4D8               	btfsc	status,2,c
  4030  001722  D7E9               	goto	l9457
  4031  001724  D7CB               	goto	l9445
  4032  001726                     l9473:
  4033  001726  0E14               	movlw	20
  4034  001728  EC2B  F01C         	call	_GETxAPIxVAL
  4035                           
  4036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4037                           ; Switch size 1, requested type "space"
  4038                           ; Number of cases is 1, Range of values is 0 to 0
  4039                           ; switch strategies available:
  4040                           ; Name         Instructions Cycles
  4041                           ; simple_byte            4     3 (average)
  4042                           ;	Chosen strategy is simple_byte
  4043  00172C  0100               	movlb	0	; () banked
  4044  00172E  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4045  001730  0A00               	xorlw	0	; case 0
  4046  001732  A4D8               	btfss	status,2,c
  4047  001734  D033               	goto	l9499
  4048                           
  4049                           ; BSR set to: 0
  4050                           ; Switch size 1, requested type "space"
  4051                           ; Number of cases is 2, Range of values is 0 to 1
  4052                           ; switch strategies available:
  4053                           ; Name         Instructions Cycles
  4054                           ; simple_byte            7     4 (average)
  4055                           ;	Chosen strategy is simple_byte
  4056  001736  0100               	movlb	0	; () banked
  4057  001738  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4058  00173A  0A00               	xorlw	0	; case 0
  4059  00173C  B4D8               	btfsc	status,2,c
  4060  00173E  D7BE               	goto	l9445
  4061  001740  0A01               	xorlw	1	; case 1
  4062  001742  B4D8               	btfsc	status,2,c
  4063  001744  D7E8               	goto	l9469
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;State_Mchn.c: 819: switch(GETxAPIxVAL(21))
  4067  001746  D02A               	goto	l9499
  4068  001748                     l9475:
  4069                           
  4070                           ; BSR set to: 0
  4071  001748  0E00               	movlw	0
  4072  00174A  D01B               	goto	L20
  4073  00174C                     l9477:
  4074  00174C  0E09               	movlw	9
  4075  00174E  EC2B  F01C         	call	_GETxAPIxVAL
  4076  001752  0100               	movlb	0	; () banked
  4077  001754  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4078  001756  E108               	bnz	l9481
  4079  001758  0EFB               	movlw	251
  4080  00175A  0100               	movlb	0	; () banked
  4081  00175C  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  4082  00175E  B0D8               	btfsc	status,0,c
  4083  001760  D003               	goto	l9481
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;State_Mchn.c: 827: {
  4087                           ;State_Mchn.c: 828: INCRxAPIxVAL(9);
  4088  001762  0E09               	movlw	9
  4089  001764  ECFF  F01B         	call	_INCRxAPIxVAL
  4090  001768                     l9481:
  4091                           
  4092                           ;State_Mchn.c: 829: }
  4093                           ;State_Mchn.c: 830: Switch_Adjust_RB = 1;
  4094  001768  0E01               	movlw	1
  4095  00176A  D00B               	goto	L20
  4096  00176C                     l9483:
  4097  00176C  5022               	movf	_Adjust_Counter+1,w,c
  4098  00176E  E104               	bnz	u8450
  4099  001770  0E14               	movlw	20
  4100  001772  5C21               	subwf	_Adjust_Counter,w,c
  4101  001774  A0D8               	btfss	status,0,c
  4102  001776  D007               	goto	l9489
  4103  001778                     u8450:
  4104                           
  4105                           ;State_Mchn.c: 834: {
  4106                           ;State_Mchn.c: 835: Adjust_Counter = 0;
  4107  001778  0E00               	movlw	0
  4108  00177A  6E22               	movwf	_Adjust_Counter+1,c
  4109  00177C  0E00               	movlw	0
  4110  00177E  6E21               	movwf	_Adjust_Counter,c
  4111  001780  D7E3               	goto	l9475
  4112  001782                     L20:
  4113  001782  6E35               	movwf	_Switch_Adjust_RB,c
  4114                           
  4115                           ;State_Mchn.c: 838: }
  4116                           
  4117                           ;State_Mchn.c: 837: break;
  4118  001784  D044               	goto	l9525
  4119  001786                     l9489:
  4120                           
  4121                           ;State_Mchn.c: 839: else {Adjust_Counter++;}
  4122  001786  4A21               	infsnz	_Adjust_Counter,f,c
  4123  001788  2A22               	incf	_Adjust_Counter+1,f,c
  4124                           
  4125                           ;State_Mchn.c: 840: break;
  4126  00178A  D041               	goto	l9525
  4127  00178C                     l9495:
  4128  00178C  5035               	movf	_Switch_Adjust_RB,w,c
  4129                           
  4130                           ; Switch size 1, requested type "space"
  4131                           ; Number of cases is 2, Range of values is 0 to 1
  4132                           ; switch strategies available:
  4133                           ; Name         Instructions Cycles
  4134                           ; simple_byte            7     4 (average)
  4135                           ;	Chosen strategy is simple_byte
  4136  00178E  0A00               	xorlw	0	; case 0
  4137  001790  B4D8               	btfsc	status,2,c
  4138  001792  D7DC               	goto	l9477
  4139  001794  0A01               	xorlw	1	; case 1
  4140  001796  B4D8               	btfsc	status,2,c
  4141  001798  D7E9               	goto	l9483
  4142  00179A  D7D6               	goto	l9475
  4143  00179C                     l9499:
  4144  00179C  0E15               	movlw	21
  4145  00179E  EC2B  F01C         	call	_GETxAPIxVAL
  4146                           
  4147                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4148                           ; Switch size 1, requested type "space"
  4149                           ; Number of cases is 1, Range of values is 0 to 0
  4150                           ; switch strategies available:
  4151                           ; Name         Instructions Cycles
  4152                           ; simple_byte            4     3 (average)
  4153                           ;	Chosen strategy is simple_byte
  4154  0017A2  0100               	movlb	0	; () banked
  4155  0017A4  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4156  0017A6  0A00               	xorlw	0	; case 0
  4157  0017A8  A4D8               	btfss	status,2,c
  4158  0017AA  D031               	goto	l9525
  4159                           
  4160                           ; BSR set to: 0
  4161                           ; Switch size 1, requested type "space"
  4162                           ; Number of cases is 2, Range of values is 0 to 1
  4163                           ; switch strategies available:
  4164                           ; Name         Instructions Cycles
  4165                           ; simple_byte            7     4 (average)
  4166                           ;	Chosen strategy is simple_byte
  4167  0017AC  0100               	movlb	0	; () banked
  4168  0017AE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4169  0017B0  0A00               	xorlw	0	; case 0
  4170  0017B2  B4D8               	btfsc	status,2,c
  4171  0017B4  D7C9               	goto	l9475
  4172  0017B6  0A01               	xorlw	1	; case 1
  4173  0017B8  B4D8               	btfsc	status,2,c
  4174  0017BA  D7E8               	goto	l9495
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;State_Mchn.c: 851: switch(GETxAPIxVAL(22))
  4178  0017BC  D028               	goto	l9525
  4179  0017BE                     l9501:
  4180                           
  4181                           ; BSR set to: 0
  4182  0017BE  0E00               	movlw	0
  4183  0017C0  D019               	goto	L22
  4184  0017C2                     l9503:
  4185  0017C2  0E09               	movlw	9
  4186  0017C4  EC2B  F01C         	call	_GETxAPIxVAL
  4187  0017C8  0100               	movlb	0	; () banked
  4188  0017CA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4189  0017CC  0100               	movlb	0	; () banked
  4190  0017CE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4191  0017D0  B4D8               	btfsc	status,2,c
  4192  0017D2  D003               	goto	l9507
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;State_Mchn.c: 859: {
  4196                           ;State_Mchn.c: 860: DECRxAPIxVAL(9);
  4197  0017D4  0E09               	movlw	9
  4198  0017D6  ECD1  F01B         	call	_DECRxAPIxVAL
  4199  0017DA                     l9507:
  4200                           
  4201                           ;State_Mchn.c: 861: }
  4202                           ;State_Mchn.c: 862: Switch_Adjust_RF = 1;
  4203  0017DA  0E01               	movlw	1
  4204  0017DC  D00B               	goto	L22
  4205  0017DE                     l9509:
  4206  0017DE  5022               	movf	_Adjust_Counter+1,w,c
  4207  0017E0  E104               	bnz	u8470
  4208  0017E2  0E14               	movlw	20
  4209  0017E4  5C21               	subwf	_Adjust_Counter,w,c
  4210  0017E6  A0D8               	btfss	status,0,c
  4211  0017E8  D007               	goto	l9515
  4212  0017EA                     u8470:
  4213                           
  4214                           ;State_Mchn.c: 866: {
  4215                           ;State_Mchn.c: 867: Adjust_Counter = 0;
  4216  0017EA  0E00               	movlw	0
  4217  0017EC  6E22               	movwf	_Adjust_Counter+1,c
  4218  0017EE  0E00               	movlw	0
  4219  0017F0  6E21               	movwf	_Adjust_Counter,c
  4220  0017F2  D7E5               	goto	l9501
  4221  0017F4                     L22:
  4222  0017F4  6E36               	movwf	_Switch_Adjust_RF,c
  4223                           
  4224                           ;State_Mchn.c: 870: }
  4225                           
  4226                           ;State_Mchn.c: 869: break;
  4227  0017F6  D01B               	goto	l9527
  4228  0017F8                     l9515:
  4229                           
  4230                           ;State_Mchn.c: 871: else {Adjust_Counter++;}
  4231  0017F8  4A21               	infsnz	_Adjust_Counter,f,c
  4232  0017FA  2A22               	incf	_Adjust_Counter+1,f,c
  4233                           
  4234                           ;State_Mchn.c: 872: break;
  4235  0017FC  D018               	goto	l9527
  4236  0017FE                     l9521:
  4237  0017FE  5036               	movf	_Switch_Adjust_RF,w,c
  4238                           
  4239                           ; Switch size 1, requested type "space"
  4240                           ; Number of cases is 2, Range of values is 0 to 1
  4241                           ; switch strategies available:
  4242                           ; Name         Instructions Cycles
  4243                           ; simple_byte            7     4 (average)
  4244                           ;	Chosen strategy is simple_byte
  4245  001800  0A00               	xorlw	0	; case 0
  4246  001802  B4D8               	btfsc	status,2,c
  4247  001804  D7DE               	goto	l9503
  4248  001806  0A01               	xorlw	1	; case 1
  4249  001808  B4D8               	btfsc	status,2,c
  4250  00180A  D7E9               	goto	l9509
  4251  00180C  D7D8               	goto	l9501
  4252  00180E                     l9525:
  4253  00180E  0E16               	movlw	22
  4254  001810  EC2B  F01C         	call	_GETxAPIxVAL
  4255                           
  4256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4257                           ; Switch size 1, requested type "space"
  4258                           ; Number of cases is 1, Range of values is 0 to 0
  4259                           ; switch strategies available:
  4260                           ; Name         Instructions Cycles
  4261                           ; simple_byte            4     3 (average)
  4262                           ;	Chosen strategy is simple_byte
  4263  001814  0100               	movlb	0	; () banked
  4264  001816  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4265  001818  0A00               	xorlw	0	; case 0
  4266  00181A  A4D8               	btfss	status,2,c
  4267  00181C  D008               	goto	l9527
  4268                           
  4269                           ; BSR set to: 0
  4270                           ; Switch size 1, requested type "space"
  4271                           ; Number of cases is 2, Range of values is 0 to 1
  4272                           ; switch strategies available:
  4273                           ; Name         Instructions Cycles
  4274                           ; simple_byte            7     4 (average)
  4275                           ;	Chosen strategy is simple_byte
  4276  00181E  0100               	movlb	0	; () banked
  4277  001820  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  4278  001822  0A00               	xorlw	0	; case 0
  4279  001824  B4D8               	btfsc	status,2,c
  4280  001826  D7CB               	goto	l9501
  4281  001828  0A01               	xorlw	1	; case 1
  4282  00182A  B4D8               	btfsc	status,2,c
  4283  00182C  D7E8               	goto	l9521
  4284  00182E                     l9527:
  4285                           
  4286                           ;State_Mchn.c: 881: if(Activate_Controls_Counter <= 1)
  4287  00182E  0100               	movlb	0	; () banked
  4288  001830  5191               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  4289  001832  E129               	bnz	l447
  4290  001834  0E02               	movlw	2
  4291  001836  0100               	movlb	0	; () banked
  4292  001838  5D90               	subwf	_Activate_Controls_Counter& (0+255),w,b
  4293  00183A  B0D8               	btfsc	status,0,c
  4294  00183C  0012               	return	
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;State_Mchn.c: 882: {
  4298                           ;State_Mchn.c: 883: Switch_Activate_Controls = 0;
  4299  00183E  0E00               	movlw	0
  4300  001840  6E32               	movwf	_Switch_Activate_Controls,c
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;State_Mchn.c: 884: Red_Led(0);
  4304  001842  0E00               	movlw	0
  4305  001844  ECA7  F019         	call	_Red_Led
  4306                           
  4307                           ;State_Mchn.c: 885: }
  4308                           ;State_Mchn.c: 886: break;
  4309  001848  0012               	return	
  4310  00184A                     l9533:
  4311  00184A  0E00               	movlw	0
  4312  00184C  6E32               	movwf	_Switch_Activate_Controls,c
  4313                           
  4314                           ;State_Mchn.c: 889: Red_Led(0);
  4315  00184E  0E00               	movlw	0
  4316  001850  ECA7  F019         	call	_Red_Led
  4317                           
  4318                           ;State_Mchn.c: 891: }
  4319                           
  4320                           ;State_Mchn.c: 890: break;
  4321  001854  0012               	return	
  4322  001856                     l9539:
  4323  001856  5032               	movf	_Switch_Activate_Controls,w,c
  4324                           
  4325                           ; Switch size 1, requested type "space"
  4326                           ; Number of cases is 3, Range of values is 0 to 2
  4327                           ; switch strategies available:
  4328                           ; Name         Instructions Cycles
  4329                           ; simple_byte           10     6 (average)
  4330                           ;	Chosen strategy is simple_byte
  4331  001858  0A00               	xorlw	0	; case 0
  4332  00185A  B4D8               	btfsc	status,2,c
  4333  00185C  D661               	goto	l9375
  4334  00185E  0A01               	xorlw	1	; case 1
  4335  001860  B4D8               	btfsc	status,2,c
  4336  001862  D67C               	goto	l9387
  4337  001864  0A03               	xorlw	3	; case 2
  4338  001866  B4D8               	btfsc	status,2,c
  4339  001868  D69C               	goto	l9401
  4340  00186A  D7EF               	goto	l9533
  4341  00186C                     l9543:
  4342  00186C  0100               	movlb	0	; () banked
  4343  00186E  51A1               	movf	_Switch_Main& (0+255),w,b
  4344                           
  4345                           ; Switch size 1, requested type "space"
  4346                           ; Number of cases is 3, Range of values is 0 to 2
  4347                           ; switch strategies available:
  4348                           ; Name         Instructions Cycles
  4349                           ; simple_byte           10     6 (average)
  4350                           ;	Chosen strategy is simple_byte
  4351  001870  0A00               	xorlw	0	; case 0
  4352  001872  B4D8               	btfsc	status,2,c
  4353  001874  EFD2  F007         	goto	l9071
  4354  001878  0A01               	xorlw	1	; case 1
  4355  00187A  B4D8               	btfsc	status,2,c
  4356  00187C  D430               	goto	l9155
  4357  00187E  0A03               	xorlw	3	; case 2
  4358  001880  A4D8               	btfss	status,2,c
  4359  001882  0012               	return	
  4360  001884  D63F               	goto	l9373
  4361  001886                     l447:
  4362  001886  0012               	return		;funcret
  4363  001888                     __end_of_Update_StateMchn:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           postdec1	equ	0xFE5
  4372                           fsr1l	equ	0xFE1
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _Train_Path *****************
  4376 ;; Defined at:
  4377 ;;		line 912 in file "../State_Mchn.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  From            1    wreg     unsigned char 
  4380 ;;  To              1   14[BANK0 ] unsigned char 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  From            1   15[BANK0 ] unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      unsigned char 
  4385 ;; Registers used:
  4386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4392 ;;      Params:         0       1       0       0       0       0       0       0       0
  4393 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4395 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4396 ;;Total ram usage:        2 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    6
  4399 ;; This function calls:
  4400 ;;		_GETxAPIxVAL
  4401 ;;		_Junction
  4402 ;;		_Left_Mountain_From_The_Left
  4403 ;;		_Left_Mountain_From_The_Right
  4404 ;;		_Right_Mountain_From_The_Left
  4405 ;;		_Right_Mountain_From_The_Right
  4406 ;;		_Train_Move_Left_Brake
  4407 ;;		_Train_Move_Left_Start
  4408 ;;		_Train_Move_Right_Brake
  4409 ;;		_Train_Move_Right_Start
  4410 ;; This function is called by:
  4411 ;;		_Update_StateMchn
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text2
  4416  00236C                     __ptext2:
  4417                           	opt stack 0
  4418  00236C                     _Train_Path:
  4419                           	opt stack 23
  4420                           
  4421                           ;incstack = 0
  4422                           ;Train_Path@From stored from wreg
  4423  00236C  0100               	movlb	0	; () banked
  4424  00236E  6F6F               	movwf	Train_Path@From& (0+255),b
  4425                           
  4426                           ;State_Mchn.c: 914: static char Return_Val = 1;
  4427                           ;State_Mchn.c: 916: switch(Switch_Train_Path)
  4428  002370  D1A1               	goto	l8671
  4429  002372                     l8463:
  4430  002372  0E00               	movlw	0
  4431  002374  0100               	movlb	0	; () banked
  4432  002376  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4433  002378  0E01               	movlw	1
  4434  00237A  ECDE  F018         	call	_Junction
  4435  00237E  0900               	iorlw	0
  4436  002380  B4D8               	btfsc	status,2,c
  4437  002382  D01B               	goto	l8477
  4438  002384                     l456:
  4439                           
  4440                           ;State_Mchn.c: 924: }
  4441                           ;State_Mchn.c: 925: Return_Val = 1;
  4442  002384  0E01               	movlw	1
  4443  002386                     L39:
  4444  002386  0100               	movlb	0	; () banked
  4445  002388  6FAD               	movwf	Train_Path@Return_Val& (0+255),b
  4446                           
  4447                           ;State_Mchn.c: 926: break;
  4448  00238A  D1BE               	goto	l8673
  4449  00238C                     l8467:
  4450                           
  4451                           ; BSR set to: 0
  4452  00238C  0E01               	movlw	1
  4453  00238E  0100               	movlb	0	; () banked
  4454  002390  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4455  002392  0E01               	movlw	1
  4456  002394  ECDE  F018         	call	_Junction
  4457  002398  D7F2               	goto	L58
  4458  00239A                     l8471:
  4459                           
  4460                           ; BSR set to: 0
  4461  00239A  0E01               	movlw	1
  4462  00239C  0100               	movlb	0	; () banked
  4463  00239E  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4464  0023A0  0E00               	movlw	0
  4465  0023A2  ECDE  F018         	call	_Junction
  4466  0023A6  D7EB               	goto	L58
  4467  0023A8                     l8475:
  4468                           
  4469                           ; BSR set to: 0
  4470  0023A8  0E00               	movlw	0
  4471  0023AA  0100               	movlb	0	; () banked
  4472  0023AC  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4473  0023AE  0E00               	movlw	0
  4474  0023B0  ECDE  F018         	call	_Junction
  4475  0023B4  0900               	iorlw	0
  4476  0023B6  A4D8               	btfss	status,2,c
  4477  0023B8  D7E5               	goto	l456
  4478  0023BA                     l8477:
  4479                           
  4480                           ;State_Mchn.c: 942: {
  4481                           ;State_Mchn.c: 943: Switch_Train_Path = 1;
  4482  0023BA  0E01               	movlw	1
  4483  0023BC  D016               	goto	L40
  4484  0023BE                     l8481:
  4485  0023BE  0100               	movlb	0	; () banked
  4486  0023C0  516F               	movf	Train_Path@From& (0+255),w,b
  4487                           
  4488                           ; Switch size 1, requested type "space"
  4489                           ; Number of cases is 4, Range of values is 0 to 3
  4490                           ; switch strategies available:
  4491                           ; Name         Instructions Cycles
  4492                           ; simple_byte           13     7 (average)
  4493                           ;	Chosen strategy is simple_byte
  4494  0023C2  0A00               	xorlw	0	; case 0
  4495  0023C4  B4D8               	btfsc	status,2,c
  4496  0023C6  D7E9               	goto	l8471
  4497  0023C8  0A01               	xorlw	1	; case 1
  4498  0023CA  B4D8               	btfsc	status,2,c
  4499  0023CC  D7ED               	goto	l8475
  4500  0023CE  0A03               	xorlw	3	; case 2
  4501  0023D0  B4D8               	btfsc	status,2,c
  4502  0023D2  D7CF               	goto	l8463
  4503  0023D4  0A01               	xorlw	1	; case 3
  4504  0023D6  B4D8               	btfsc	status,2,c
  4505  0023D8  D7D9               	goto	l8467
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;State_Mchn.c: 950: break;
  4509  0023DA  D196               	goto	l8673
  4510  0023DC                     l8483:
  4511                           
  4512                           ; BSR set to: 0
  4513  0023DC  0E00               	movlw	0
  4514  0023DE  0100               	movlb	0	; () banked
  4515  0023E0  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4516  0023E2  0E01               	movlw	1
  4517  0023E4  ECDE  F018         	call	_Junction
  4518  0023E8  D01A               	goto	L45
  4519  0023EA                     L40:
  4520  0023EA  0100               	movlb	0	; () banked
  4521  0023EC  6FA2               	movwf	_Switch_Train_Path& (0+255),b
  4522                           
  4523                           ;State_Mchn.c: 957: Return_Val = 1;
  4524  0023EE  0E01               	movlw	1
  4525  0023F0  0100               	movlb	0	; () banked
  4526  0023F2  6FAD               	movwf	Train_Path@Return_Val& (0+255),b
  4527  0023F4  D7C7               	goto	l456
  4528  0023F6                     l8487:
  4529                           
  4530                           ; BSR set to: 0
  4531  0023F6  0E01               	movlw	1
  4532  0023F8  0100               	movlb	0	; () banked
  4533  0023FA  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4534  0023FC  0E01               	movlw	1
  4535  0023FE  ECDE  F018         	call	_Junction
  4536  002402  D00D               	goto	L45
  4537  002404                     l8491:
  4538                           
  4539                           ; BSR set to: 0
  4540  002404  0E01               	movlw	1
  4541  002406  0100               	movlb	0	; () banked
  4542  002408  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4543  00240A  0E00               	movlw	0
  4544  00240C  ECDE  F018         	call	_Junction
  4545  002410  D006               	goto	L45
  4546  002412                     l8495:
  4547                           
  4548                           ; BSR set to: 0
  4549  002412  0E00               	movlw	0
  4550  002414  0100               	movlb	0	; () banked
  4551  002416  6F62               	movwf	Junction@Straight_Bend& (0+255),b
  4552  002418  0E00               	movlw	0
  4553  00241A  ECDE  F018         	call	_Junction
  4554  00241E                     L45:
  4555  00241E  0900               	iorlw	0
  4556  002420  A4D8               	btfss	status,2,c
  4557  002422  D7B0               	goto	l456
  4558                           
  4559                           ;State_Mchn.c: 976: {
  4560                           ;State_Mchn.c: 977: Switch_Train_Path = 2;
  4561  002424  0E02               	movlw	2
  4562  002426  D7E1               	goto	L40
  4563  002428                     l8501:
  4564                           
  4565                           ; BSR set to: 0
  4566  002428  0100               	movlb	0	; () banked
  4567  00242A  516E               	movf	Train_Path@To& (0+255),w,b
  4568                           
  4569                           ; Switch size 1, requested type "space"
  4570                           ; Number of cases is 4, Range of values is 0 to 3
  4571                           ; switch strategies available:
  4572                           ; Name         Instructions Cycles
  4573                           ; simple_byte           13     7 (average)
  4574                           ;	Chosen strategy is simple_byte
  4575  00242C  0A00               	xorlw	0	; case 0
  4576  00242E  B4D8               	btfsc	status,2,c
  4577  002430  D7E9               	goto	l8491
  4578  002432  0A01               	xorlw	1	; case 1
  4579  002434  B4D8               	btfsc	status,2,c
  4580  002436  D7ED               	goto	l8495
  4581  002438  0A03               	xorlw	3	; case 2
  4582  00243A  B4D8               	btfsc	status,2,c
  4583  00243C  D7CF               	goto	l8483
  4584  00243E  0A01               	xorlw	1	; case 3
  4585  002440  B4D8               	btfsc	status,2,c
  4586  002442  D7D9               	goto	l8487
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;State_Mchn.c: 984: break;
  4590  002444  D161               	goto	l8673
  4591  002446                     l8503:
  4592                           
  4593                           ; BSR set to: 0
  4594  002446  EC3B  F015         	call	_Train_Move_Right_Start	;wreg free
  4595  00244A  D008               	goto	L48
  4596  00244C                     l8507:
  4597                           
  4598                           ; BSR set to: 0
  4599  00244C  EC3B  F015         	call	_Train_Move_Right_Start	;wreg free
  4600  002450  D005               	goto	L48
  4601  002452                     l8511:
  4602                           
  4603                           ; BSR set to: 0
  4604  002452  ECC6  F015         	call	_Train_Move_Left_Start	;wreg free
  4605  002456  D002               	goto	L48
  4606  002458                     l8515:
  4607                           
  4608                           ; BSR set to: 0
  4609  002458  ECC6  F015         	call	_Train_Move_Left_Start	;wreg free
  4610  00245C                     L48:
  4611  00245C  0900               	iorlw	0
  4612  00245E  A4D8               	btfss	status,2,c
  4613  002460  D791               	goto	l456
  4614                           
  4615                           ;State_Mchn.c: 1010: {
  4616                           ;State_Mchn.c: 1011: Switch_Train_Path = 3;
  4617  002462  0E03               	movlw	3
  4618  002464  D7C2               	goto	L40
  4619  002466                     l8521:
  4620                           
  4621                           ; BSR set to: 0
  4622  002466  0100               	movlb	0	; () banked
  4623  002468  516E               	movf	Train_Path@To& (0+255),w,b
  4624                           
  4625                           ; Switch size 1, requested type "space"
  4626                           ; Number of cases is 4, Range of values is 0 to 3
  4627                           ; switch strategies available:
  4628                           ; Name         Instructions Cycles
  4629                           ; simple_byte           13     7 (average)
  4630                           ;	Chosen strategy is simple_byte
  4631  00246A  0A00               	xorlw	0	; case 0
  4632  00246C  B4D8               	btfsc	status,2,c
  4633  00246E  D7F1               	goto	l8511
  4634  002470  0A01               	xorlw	1	; case 1
  4635  002472  B4D8               	btfsc	status,2,c
  4636  002474  D7F1               	goto	l8515
  4637  002476  0A03               	xorlw	3	; case 2
  4638  002478  B4D8               	btfsc	status,2,c
  4639  00247A  D7E5               	goto	l8503
  4640  00247C  0A01               	xorlw	1	; case 3
  4641  00247E  B4D8               	btfsc	status,2,c
  4642  002480  D7E5               	goto	l8507
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;State_Mchn.c: 1018: break;
  4646  002482  D142               	goto	l8673
  4647  002484                     l8523:
  4648                           
  4649                           ; BSR set to: 0
  4650  002484  0E0C               	movlw	12
  4651  002486  EC2B  F01C         	call	_GETxAPIxVAL
  4652  00248A  0100               	movlb	0	; () banked
  4653  00248C  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4654  00248E  0100               	movlb	0	; () banked
  4655  002490  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4656  002492  B4D8               	btfsc	status,2,c
  4657  002494  D088               	goto	l8585
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;State_Mchn.c: 1025: else if(GETxAPIxVAL(25) == 1){
  4661                           
  4662                           ; BSR set to: 0
  4663                           
  4664                           ;State_Mchn.c: 1024: }
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;State_Mchn.c: 1023: Switch_Train_Path = 4;
  4668  002496  0E19               	movlw	25
  4669  002498  EC2B  F01C         	call	_GETxAPIxVAL
  4670  00249C  0100               	movlb	0	; () banked
  4671  00249E  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4672  0024A0  0100               	movlb	0	; () banked
  4673  0024A2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4674  0024A4  A4D8               	btfss	status,2,c
  4675  0024A6  D002               	goto	l8531
  4676  0024A8                     
  4677                           ; BSR set to: 0
  4678                           ;State_Mchn.c: 1026: Switch_Train_Path = 5;
  4679  0024A8  0E05               	movlw	5
  4680  0024AA  D049               	goto	L30
  4681  0024AC                     l8531:
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;State_Mchn.c: 1028: else if(GETxAPIxVAL(26) == 1){
  4685  0024AC  0E1A               	movlw	26
  4686  0024AE  EC2B  F01C         	call	_GETxAPIxVAL
  4687  0024B2  0100               	movlb	0	; () banked
  4688  0024B4  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4689  0024B6  0100               	movlb	0	; () banked
  4690  0024B8  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4691  0024BA  A4D8               	btfss	status,2,c
  4692  0024BC  D002               	goto	l8535
  4693  0024BE                     
  4694                           ; BSR set to: 0
  4695                           ;State_Mchn.c: 1029: Switch_Train_Path = 6;
  4696  0024BE  0E06               	movlw	6
  4697  0024C0  D03E               	goto	L30
  4698  0024C2                     l8535:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;State_Mchn.c: 1031: else if(GETxAPIxVAL(28) == 1){
  4702  0024C2  0E1C               	movlw	28
  4703  0024C4  EC2B  F01C         	call	_GETxAPIxVAL
  4704  0024C8  0100               	movlb	0	; () banked
  4705  0024CA  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4706  0024CC  0100               	movlb	0	; () banked
  4707  0024CE  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4708  0024D0  A4D8               	btfss	status,2,c
  4709  0024D2  D002               	goto	l8539
  4710  0024D4                     
  4711                           ; BSR set to: 0
  4712                           ;State_Mchn.c: 1032: Switch_Train_Path = 7;
  4713  0024D4  0E07               	movlw	7
  4714  0024D6  D033               	goto	L30
  4715  0024D8                     l8539:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;State_Mchn.c: 1034: else if(GETxAPIxVAL(27) == 1){
  4719  0024D8  0E1B               	movlw	27
  4720  0024DA  EC2B  F01C         	call	_GETxAPIxVAL
  4721  0024DE  0100               	movlb	0	; () banked
  4722  0024E0  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4723  0024E2  0100               	movlb	0	; () banked
  4724  0024E4  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4725  0024E6  A4D8               	btfss	status,2,c
  4726  0024E8  D74D               	goto	l456
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;State_Mchn.c: 1035: Switch_Train_Path = 8;
  4730  0024EA  0E08               	movlw	8
  4731  0024EC  D028               	goto	L30
  4732  0024EE                     l8543:
  4733                           
  4734                           ; BSR set to: 0
  4735  0024EE  0E0D               	movlw	13
  4736  0024F0  EC2B  F01C         	call	_GETxAPIxVAL
  4737  0024F4  0100               	movlb	0	; () banked
  4738  0024F6  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4739  0024F8  0100               	movlb	0	; () banked
  4740  0024FA  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4741  0024FC  B4D8               	btfsc	status,2,c
  4742  0024FE  D053               	goto	l8585
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;State_Mchn.c: 1042: else if(GETxAPIxVAL(25) == 1){
  4746                           
  4747                           ; BSR set to: 0
  4748                           
  4749                           ;State_Mchn.c: 1041: }
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;State_Mchn.c: 1040: Switch_Train_Path = 4;
  4753  002500  0E19               	movlw	25
  4754  002502  EC2B  F01C         	call	_GETxAPIxVAL
  4755  002506  0100               	movlb	0	; () banked
  4756  002508  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4757  00250A  0100               	movlb	0	; () banked
  4758  00250C  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4759  00250E  B4D8               	btfsc	status,2,c
  4760  002510  D7CB               	goto	L91
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;State_Mchn.c: 1045: else if(GETxAPIxVAL(26) == 1){
  4764                           
  4765                           ; BSR set to: 0
  4766                           
  4767                           ;State_Mchn.c: 1044: }
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;State_Mchn.c: 1043: Switch_Train_Path = 5;
  4771  002512  0E1A               	movlw	26
  4772  002514  EC2B  F01C         	call	_GETxAPIxVAL
  4773  002518  0100               	movlb	0	; () banked
  4774  00251A  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4775  00251C  0100               	movlb	0	; () banked
  4776  00251E  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4777  002520  B4D8               	btfsc	status,2,c
  4778  002522  D7CD               	goto	L92
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;State_Mchn.c: 1048: else if(GETxAPIxVAL(28) == 1){
  4782                           
  4783                           ; BSR set to: 0
  4784                           
  4785                           ;State_Mchn.c: 1047: }
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;State_Mchn.c: 1046: Switch_Train_Path = 6;
  4789  002524  0E1C               	movlw	28
  4790  002526  EC2B  F01C         	call	_GETxAPIxVAL
  4791  00252A  0100               	movlb	0	; () banked
  4792  00252C  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4793  00252E  0100               	movlb	0	; () banked
  4794  002530  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4795  002532  B4D8               	btfsc	status,2,c
  4796  002534  D7CF               	goto	L93
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;State_Mchn.c: 1051: else if(GETxAPIxVAL(27) == 1){
  4800                           
  4801                           ; BSR set to: 0
  4802                           
  4803                           ;State_Mchn.c: 1050: }
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;State_Mchn.c: 1049: Switch_Train_Path = 7;
  4807  002536  0E1B               	movlw	27
  4808  002538  EC2B  F01C         	call	_GETxAPIxVAL
  4809  00253C  D7D0               	goto	L41
  4810  00253E                     L30:
  4811  00253E  0100               	movlb	0	; () banked
  4812  002540  6FA2               	movwf	_Switch_Train_Path& (0+255),b
  4813                           
  4814                           ; BSR set to: 0
  4815                           
  4816                           ; BSR set to: 0
  4817                           
  4818                           ; BSR set to: 0
  4819  002542  D720               	goto	l456
  4820  002544                     l8563:
  4821                           
  4822                           ; BSR set to: 0
  4823  002544  0E0E               	movlw	14
  4824  002546  EC2B  F01C         	call	_GETxAPIxVAL
  4825  00254A  0100               	movlb	0	; () banked
  4826  00254C  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4827  00254E  0100               	movlb	0	; () banked
  4828  002550  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4829  002552  B4D8               	btfsc	status,2,c
  4830  002554  D028               	goto	l8585
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;State_Mchn.c: 1060: else if(GETxAPIxVAL(25) == 1){
  4834                           
  4835                           ; BSR set to: 0
  4836                           
  4837                           ;State_Mchn.c: 1059: }
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;State_Mchn.c: 1057: {
  4841                           ;State_Mchn.c: 1058: Switch_Train_Path = 4;
  4842  002556  0E19               	movlw	25
  4843  002558  EC2B  F01C         	call	_GETxAPIxVAL
  4844  00255C  0100               	movlb	0	; () banked
  4845  00255E  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4846  002560  0100               	movlb	0	; () banked
  4847  002562  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4848  002564  B4D8               	btfsc	status,2,c
  4849  002566  D02A               	goto	l8589
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;State_Mchn.c: 1063: else if(GETxAPIxVAL(26) == 1){
  4853                           
  4854                           ; BSR set to: 0
  4855                           
  4856                           ;State_Mchn.c: 1062: }
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;State_Mchn.c: 1061: Switch_Train_Path = 12;
  4860  002568  0E1A               	movlw	26
  4861  00256A  EC2B  F01C         	call	_GETxAPIxVAL
  4862  00256E  0100               	movlb	0	; () banked
  4863  002570  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4864  002572  0100               	movlb	0	; () banked
  4865  002574  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4866  002576  B4D8               	btfsc	status,2,c
  4867  002578  D02C               	goto	l8593
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;State_Mchn.c: 1066: else if(GETxAPIxVAL(28) == 1){
  4871                           
  4872                           ; BSR set to: 0
  4873                           
  4874                           ;State_Mchn.c: 1065: }
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;State_Mchn.c: 1064: Switch_Train_Path = 11;
  4878  00257A  0E1C               	movlw	28
  4879  00257C  EC2B  F01C         	call	_GETxAPIxVAL
  4880  002580  0100               	movlb	0	; () banked
  4881  002582  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4882  002584  0100               	movlb	0	; () banked
  4883  002586  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4884  002588  B4D8               	btfsc	status,2,c
  4885  00258A  D02E               	goto	l8597
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;State_Mchn.c: 1069: else if(GETxAPIxVAL(27) == 1){
  4889                           
  4890                           ; BSR set to: 0
  4891                           
  4892                           ;State_Mchn.c: 1068: }
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;State_Mchn.c: 1067: Switch_Train_Path = 10;
  4896  00258C  0E1B               	movlw	27
  4897  00258E  EC2B  F01C         	call	_GETxAPIxVAL
  4898  002592  D02F               	goto	L49
  4899  002594                     l8583:
  4900                           
  4901                           ; BSR set to: 0
  4902  002594  0E0F               	movlw	15
  4903  002596  EC2B  F01C         	call	_GETxAPIxVAL
  4904  00259A  0100               	movlb	0	; () banked
  4905  00259C  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4906  00259E  0100               	movlb	0	; () banked
  4907  0025A0  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4908  0025A2  A4D8               	btfss	status,2,c
  4909  0025A4  D002               	goto	l8587
  4910  0025A6                     l8585:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;State_Mchn.c: 1075: {
  4914                           ;State_Mchn.c: 1076: Switch_Train_Path = 4;
  4915  0025A6  0E04               	movlw	4
  4916  0025A8  D7CA               	goto	L30
  4917  0025AA                     l8587:
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;State_Mchn.c: 1078: else if(GETxAPIxVAL(25) == 1){
  4921  0025AA  0E19               	movlw	25
  4922  0025AC  EC2B  F01C         	call	_GETxAPIxVAL
  4923  0025B0  0100               	movlb	0	; () banked
  4924  0025B2  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4925  0025B4  0100               	movlb	0	; () banked
  4926  0025B6  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4927  0025B8  A4D8               	btfss	status,2,c
  4928  0025BA  D002               	goto	l8591
  4929  0025BC                     l8589:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;State_Mchn.c: 1079: Switch_Train_Path = 12;
  4933  0025BC  0E0C               	movlw	12
  4934  0025BE  D7BF               	goto	L30
  4935  0025C0                     l8591:
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;State_Mchn.c: 1081: else if(GETxAPIxVAL(26) == 1){
  4939  0025C0  0E1A               	movlw	26
  4940  0025C2  EC2B  F01C         	call	_GETxAPIxVAL
  4941  0025C6  0100               	movlb	0	; () banked
  4942  0025C8  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4943  0025CA  0100               	movlb	0	; () banked
  4944  0025CC  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4945  0025CE  A4D8               	btfss	status,2,c
  4946  0025D0  D002               	goto	l8595
  4947  0025D2                     l8593:
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;State_Mchn.c: 1082: Switch_Train_Path = 11;
  4951  0025D2  0E0B               	movlw	11
  4952  0025D4  D7B4               	goto	L30
  4953  0025D6                     l8595:
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;State_Mchn.c: 1084: else if(GETxAPIxVAL(28) == 1){
  4957  0025D6  0E1C               	movlw	28
  4958  0025D8  EC2B  F01C         	call	_GETxAPIxVAL
  4959  0025DC  0100               	movlb	0	; () banked
  4960  0025DE  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4961  0025E0  0100               	movlb	0	; () banked
  4962  0025E2  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4963  0025E4  A4D8               	btfss	status,2,c
  4964  0025E6  D002               	goto	l8599
  4965  0025E8                     l8597:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;State_Mchn.c: 1085: Switch_Train_Path = 10;
  4969  0025E8  0E0A               	movlw	10
  4970  0025EA  D7A9               	goto	L30
  4971  0025EC                     l8599:
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;State_Mchn.c: 1087: else if(GETxAPIxVAL(27) == 1){
  4975  0025EC  0E1B               	movlw	27
  4976  0025EE  EC2B  F01C         	call	_GETxAPIxVAL
  4977  0025F2                     L49:
  4978  0025F2  0100               	movlb	0	; () banked
  4979  0025F4  0560               	decf	?_GETxAPIxVAL& (0+255),w,b
  4980  0025F6  0100               	movlb	0	; () banked
  4981  0025F8  1161               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4982  0025FA  A4D8               	btfss	status,2,c
  4983  0025FC  D6C3               	goto	l456
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;State_Mchn.c: 1088: Switch_Train_Path = 9;
  4987  0025FE  0E09               	movlw	9
  4988  002600  D79E               	goto	L30
  4989  002602                     l8605:
  4990                           
  4991                           ; BSR set to: 0
  4992  002602  0100               	movlb	0	; () banked
  4993  002604  516E               	movf	Train_Path@To& (0+255),w,b
  4994                           
  4995                           ; Switch size 1, requested type "space"
  4996                           ; Number of cases is 4, Range of values is 0 to 3
  4997                           ; switch strategies available:
  4998                           ; Name         Instructions Cycles
  4999                           ; simple_byte           13     7 (average)
  5000                           ;	Chosen strategy is simple_byte
  5001  002606  0A00               	xorlw	0	; case 0
  5002  002608  B4D8               	btfsc	status,2,c
  5003  00260A  D79C               	goto	l8563
  5004  00260C  0A01               	xorlw	1	; case 1
  5005  00260E  B4D8               	btfsc	status,2,c
  5006  002610  D7C1               	goto	l8583
  5007  002612  0A03               	xorlw	3	; case 2
  5008  002614  B4D8               	btfsc	status,2,c
  5009  002616  D736               	goto	l8523
  5010  002618  0A01               	xorlw	1	; case 3
  5011  00261A  B4D8               	btfsc	status,2,c
  5012  00261C  D768               	goto	l8543
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;State_Mchn.c: 1094: break;
  5016  00261E  D074               	goto	l8673
  5017  002620                     l8607:
  5018                           
  5019                           ; BSR set to: 0
  5020  002620  ECAC  F014         	call	_Train_Move_Right_Brake	;wreg free
  5021  002624  D008               	goto	L89
  5022  002626                     l8613:
  5023                           
  5024                           ; BSR set to: 0
  5025  002626  ECAC  F014         	call	_Train_Move_Right_Brake	;wreg free
  5026  00262A  D005               	goto	L89
  5027  00262C                     l8619:
  5028                           
  5029                           ; BSR set to: 0
  5030  00262C  EC1A  F014         	call	_Train_Move_Left_Brake	;wreg free
  5031  002630  D002               	goto	L89
  5032  002632                     l8625:
  5033                           
  5034                           ; BSR set to: 0
  5035  002632  EC1A  F014         	call	_Train_Move_Left_Brake	;wreg free
  5036  002636                     L89:
  5037  002636  0900               	iorlw	0
  5038  002638  A4D8               	btfss	status,2,c
  5039  00263A  D6A4               	goto	l456
  5040                           
  5041                           ;State_Mchn.c: 1123: {
  5042                           ;State_Mchn.c: 1124: Switch_Train_Path = 0;
  5043  00263C  0E00               	movlw	0
  5044  00263E  0100               	movlb	0	; () banked
  5045  002640  6FA2               	movwf	_Switch_Train_Path& (0+255),b
  5046                           
  5047                           ;State_Mchn.c: 1125: Return_Val = 0;
  5048  002642  0E00               	movlw	0
  5049  002644  D6A0               	goto	L39
  5050  002646                     l8633:
  5051                           
  5052                           ; BSR set to: 0
  5053  002646  0100               	movlb	0	; () banked
  5054  002648  516E               	movf	Train_Path@To& (0+255),w,b
  5055                           
  5056                           ; Switch size 1, requested type "space"
  5057                           ; Number of cases is 4, Range of values is 0 to 3
  5058                           ; switch strategies available:
  5059                           ; Name         Instructions Cycles
  5060                           ; simple_byte           13     7 (average)
  5061                           ;	Chosen strategy is simple_byte
  5062  00264A  0A00               	xorlw	0	; case 0
  5063  00264C  B4D8               	btfsc	status,2,c
  5064  00264E  D7EE               	goto	l8619
  5065  002650  0A01               	xorlw	1	; case 1
  5066  002652  B4D8               	btfsc	status,2,c
  5067  002654  D7EE               	goto	l8625
  5068  002656  0A03               	xorlw	3	; case 2
  5069  002658  B4D8               	btfsc	status,2,c
  5070  00265A  D7E2               	goto	l8607
  5071  00265C  0A01               	xorlw	1	; case 3
  5072  00265E  B4D8               	btfsc	status,2,c
  5073  002660  D7E2               	goto	l8613
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;State_Mchn.c: 1132: break;
  5077  002662  D052               	goto	l8673
  5078  002664                     l8635:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;State_Mchn.c: 1135: if(Left_Mountain_From_The_Left(1) == 0){
  5082  002664  0E01               	movlw	1
  5083  002666  EC64  F017         	call	_Left_Mountain_From_The_Left
  5084  00266A  D01B               	goto	L90
  5085  00266C                     l8639:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;State_Mchn.c: 1142: if(Left_Mountain_From_The_Left(2) == 0){
  5089  00266C  0E02               	movlw	2
  5090  00266E  EC64  F017         	call	_Left_Mountain_From_The_Left
  5091  002672  D017               	goto	L90
  5092  002674                     l8643:
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;State_Mchn.c: 1149: if(Right_Mountain_From_The_Left(3) == 0){
  5096  002674  0E03               	movlw	3
  5097  002676  ECDA  F016         	call	_Right_Mountain_From_The_Left
  5098  00267A  D013               	goto	L90
  5099  00267C                     l8647:
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;State_Mchn.c: 1156: if(Right_Mountain_From_The_Left(4) == 0){
  5103  00267C  0E04               	movlw	4
  5104  00267E  ECDA  F016         	call	_Right_Mountain_From_The_Left
  5105  002682  D00F               	goto	L90
  5106  002684                     l8651:
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;State_Mchn.c: 1163: if(Right_Mountain_From_The_Right(4) == 0){
  5110  002684  0E04               	movlw	4
  5111  002686  EC50  F016         	call	_Right_Mountain_From_The_Right
  5112  00268A  D00B               	goto	L90
  5113  00268C                     l8655:
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;State_Mchn.c: 1170: if(Right_Mountain_From_The_Right(3) == 0){
  5117  00268C  0E03               	movlw	3
  5118  00268E  EC50  F016         	call	_Right_Mountain_From_The_Right
  5119  002692  D007               	goto	L90
  5120  002694                     l8659:
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;State_Mchn.c: 1177: if(Left_Mountain_From_The_Right(2) == 0){
  5124  002694  0E02               	movlw	2
  5125  002696  ECED  F017         	call	_Left_Mountain_From_The_Right
  5126  00269A  D003               	goto	L90
  5127  00269C                     l8663:
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;State_Mchn.c: 1184: if(Left_Mountain_From_The_Right(1) == 0){
  5131  00269C  0E01               	movlw	1
  5132  00269E  ECED  F017         	call	_Left_Mountain_From_The_Right
  5133  0026A2                     L90:
  5134  0026A2  0900               	iorlw	0
  5135  0026A4  A4D8               	btfss	status,2,c
  5136  0026A6  D66E               	goto	l456
  5137                           
  5138                           ;State_Mchn.c: 1185: Switch_Train_Path = 3;
  5139  0026A8  0E03               	movlw	3
  5140  0026AA  D001               	goto	L42
  5141  0026AC                     l8667:
  5142                           
  5143                           ; BSR set to: 0
  5144  0026AC  0E00               	movlw	0
  5145  0026AE                     L42:
  5146  0026AE  0100               	movlb	0	; () banked
  5147  0026B0  6FA2               	movwf	_Switch_Train_Path& (0+255),b
  5148  0026B2  D668               	goto	l456
  5149  0026B4                     l8671:
  5150  0026B4  0100               	movlb	0	; () banked
  5151  0026B6  51A2               	movf	_Switch_Train_Path& (0+255),w,b
  5152                           
  5153                           ; Switch size 1, requested type "space"
  5154                           ; Number of cases is 13, Range of values is 0 to 12
  5155                           ; switch strategies available:
  5156                           ; Name         Instructions Cycles
  5157                           ; simple_byte           40    21 (average)
  5158                           ;	Chosen strategy is simple_byte
  5159  0026B8  0A00               	xorlw	0	; case 0
  5160  0026BA  B4D8               	btfsc	status,2,c
  5161  0026BC  D680               	goto	l8481
  5162  0026BE  0A01               	xorlw	1	; case 1
  5163  0026C0  B4D8               	btfsc	status,2,c
  5164  0026C2  D6B2               	goto	l8501
  5165  0026C4  0A03               	xorlw	3	; case 2
  5166  0026C6  B4D8               	btfsc	status,2,c
  5167  0026C8  D6CE               	goto	l8521
  5168  0026CA  0A01               	xorlw	1	; case 3
  5169  0026CC  B4D8               	btfsc	status,2,c
  5170  0026CE  D799               	goto	l8605
  5171  0026D0  0A07               	xorlw	7	; case 4
  5172  0026D2  B4D8               	btfsc	status,2,c
  5173  0026D4  D7B8               	goto	l8633
  5174  0026D6  0A01               	xorlw	1	; case 5
  5175  0026D8  B4D8               	btfsc	status,2,c
  5176  0026DA  D7C4               	goto	l8635
  5177  0026DC  0A03               	xorlw	3	; case 6
  5178  0026DE  B4D8               	btfsc	status,2,c
  5179  0026E0  D7C5               	goto	l8639
  5180  0026E2  0A01               	xorlw	1	; case 7
  5181  0026E4  B4D8               	btfsc	status,2,c
  5182  0026E6  D7C6               	goto	l8643
  5183  0026E8  0A0F               	xorlw	15	; case 8
  5184  0026EA  B4D8               	btfsc	status,2,c
  5185  0026EC  D7C7               	goto	l8647
  5186  0026EE  0A01               	xorlw	1	; case 9
  5187  0026F0  B4D8               	btfsc	status,2,c
  5188  0026F2  D7C8               	goto	l8651
  5189  0026F4  0A03               	xorlw	3	; case 10
  5190  0026F6  B4D8               	btfsc	status,2,c
  5191  0026F8  D7C9               	goto	l8655
  5192  0026FA  0A01               	xorlw	1	; case 11
  5193  0026FC  B4D8               	btfsc	status,2,c
  5194  0026FE  D7CA               	goto	l8659
  5195  002700  0A07               	xorlw	7	; case 12
  5196  002702  B4D8               	btfsc	status,2,c
  5197  002704  D7CB               	goto	l8663
  5198  002706  D7D2               	goto	l8667
  5199  002708                     l8673:
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;State_Mchn.c: 1193: return(Return_Val);
  5203  002708  0100               	movlb	0	; () banked
  5204  00270A  51AD               	movf	Train_Path@Return_Val& (0+255),w,b
  5205  00270C  0012               	return	
  5206  00270E                     __end_of_Train_Path:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           postinc0	equ	0xFEE
  5213                           wreg	equ	0xFE8
  5214                           postdec1	equ	0xFE5
  5215                           fsr1l	equ	0xFE1
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function _Train_Move_Right_Start *****************
  5219 ;; Defined at:
  5220 ;;		line 27 in file "../train_move_right.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      unsigned char 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5234 ;;      Params:         0       0       0       0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5237 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5238 ;;Total ram usage:        0 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    5
  5241 ;; This function calls:
  5242 ;;		_GETxAPIxVAL
  5243 ;;		_SETxPWM
  5244 ;; This function is called by:
  5245 ;;		_Train_Path
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text3
  5250  002A76                     __ptext3:
  5251                           	opt stack 0
  5252  002A76                     _Train_Move_Right_Start:
  5253                           	opt stack 23
  5254                           
  5255                           ;train_move_right.c: 29: static char Return_Val = 1;
  5256                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5257                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;incstack = 0
  5261  002A76  D07A               	goto	l7721
  5262  002A78                     l7677:
  5263  002A78  0E04               	movlw	4
  5264  002A7A  EC2B  F01C         	call	_GETxAPIxVAL
  5265  002A7E  0100               	movlb	0	; () banked
  5266  002A80  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5267  002A82  0100               	movlb	0	; () banked
  5268  002A84  5D8E               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  5269  002A86  0100               	movlb	0	; () banked
  5270  002A88  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5271  002A8A  0100               	movlb	0	; () banked
  5272  002A8C  598F               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5273  002A8E  A0D8               	btfss	status,0,c
  5274  002A90  D002               	goto	l7681
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;train_move_right.c: 37: {
  5278                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  5279  002A92  0E01               	movlw	1
  5280  002A94  D02C               	goto	L62
  5281  002A96                     l7681:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;train_move_right.c: 42: }
  5285                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  5286  002A96  0100               	movlb	0	; () banked
  5287  002A98  4B8E               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  5288  002A9A  2B8F               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  5292  002A9C  0E00               	movlw	0
  5293  002A9E  6E39               	movwf	_Switch_Train_Move,c
  5294  002AA0  D061               	goto	L63
  5295  002AA2                     l7687:
  5296  002AA2  0E06               	movlw	6
  5297  002AA4  EC2B  F01C         	call	_GETxAPIxVAL
  5298  002AA8  C060  F066         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5299  002AAC  C061  F067         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5300  002AB0  0E01               	movlw	1
  5301  002AB2  0100               	movlb	0	; () banked
  5302  002AB4  6F68               	movwf	SETxPWM@direction& (0+255),b
  5303  002AB6  EC3F  F01A         	call	_SETxPWM	;wreg free
  5304                           
  5305                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(6);
  5306  002ABA  0E06               	movlw	6
  5307  002ABC  EC2B  F01C         	call	_GETxAPIxVAL
  5308  002AC0  C060  F023         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5309  002AC4  C061  F024         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5310                           
  5311                           ;train_move_right.c: 50: PORTCbits.RC0 = 0;
  5312  002AC8  9082               	bcf	3970,0,c	;volatile
  5313                           
  5314                           ;train_move_right.c: 51: Return_Val = 1;
  5315  002ACA  0E01               	movlw	1
  5316  002ACC  0100               	movlb	0	; () banked
  5317  002ACE  6FAC               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5318  002AD0  D01B               	goto	l7703
  5319  002AD2                     l7695:
  5320  002AD2  0E02               	movlw	2
  5321  002AD4  EC2B  F01C         	call	_GETxAPIxVAL
  5322  002AD8  0100               	movlb	0	; () banked
  5323  002ADA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5324  002ADC  0100               	movlb	0	; () banked
  5325  002ADE  5D8E               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  5326  002AE0  0100               	movlb	0	; () banked
  5327  002AE2  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5328  002AE4  0100               	movlb	0	; () banked
  5329  002AE6  598F               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5330  002AE8  A0D8               	btfss	status,0,c
  5331  002AEA  D008               	goto	l7699
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;train_move_right.c: 56: {
  5335                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  5336  002AEC  0E03               	movlw	3
  5337  002AEE                     L62:
  5338  002AEE  6E39               	movwf	_Switch_Train_Move,c
  5339                           
  5340                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  5341  002AF0  0E00               	movlw	0
  5342  002AF2  0100               	movlb	0	; () banked
  5343  002AF4  6F8F               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  5344  002AF6  0E00               	movlw	0
  5345  002AF8  6F8E               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  5346  002AFA  D034               	goto	L63
  5347  002AFC                     l7699:
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;train_move_right.c: 61: }
  5351                           ;train_move_right.c: 62: Return_Val = 1;
  5352  002AFC  0E01               	movlw	1
  5353  002AFE  0100               	movlb	0	; () banked
  5354  002B00  6FAC               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  5358  002B02  0100               	movlb	0	; () banked
  5359  002B04  4B8E               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  5360  002B06  2B8F               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5361  002B08                     l7703:
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  5365  002B08  0E02               	movlw	2
  5366  002B0A  6E39               	movwf	_Switch_Train_Move,c
  5367                           
  5368                           ;train_move_right.c: 65: break;
  5369  002B0C  D03C               	goto	l7723
  5370  002B0E                     l7705:
  5371  002B0E  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5372  002B12  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5373  002B16  0E01               	movlw	1
  5374  002B18  0100               	movlb	0	; () banked
  5375  002B1A  6F68               	movwf	SETxPWM@direction& (0+255),b
  5376  002B1C  EC3F  F01A         	call	_SETxPWM	;wreg free
  5377                           
  5378                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(7))
  5379  002B20  0E07               	movlw	7
  5380  002B22  EC2B  F01C         	call	_GETxAPIxVAL
  5381  002B26  0100               	movlb	0	; () banked
  5382  002B28  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5383  002B2A  5C23               	subwf	_Train_Move_Pwm_Count,w,c
  5384  002B2C  0100               	movlb	0	; () banked
  5385  002B2E  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5386  002B30  5824               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5387  002B32  A0D8               	btfss	status,0,c
  5388  002B34  D004               	goto	l7711
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;train_move_right.c: 69: {
  5392                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  5393  002B36  0E00               	movlw	0
  5394  002B38  6E39               	movwf	_Switch_Train_Move,c
  5395                           
  5396                           ;train_move_right.c: 71: Return_Val = 0;
  5397  002B3A  0E00               	movlw	0
  5398  002B3C  D014               	goto	L61
  5399  002B3E                     l7711:
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;train_move_right.c: 73: }
  5403                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  5404  002B3E  0E0A               	movlw	10
  5405  002B40  EC2B  F01C         	call	_GETxAPIxVAL
  5406  002B44  0100               	movlb	0	; () banked
  5407  002B46  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5408  002B48  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5409  002B4A  0100               	movlb	0	; () banked
  5410  002B4C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5411  002B4E  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5412  002B50  A0D8               	btfss	status,0,c
  5413  002B52  D006               	goto	l7717
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;train_move_right.c: 75: {
  5417                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  5418  002B54  4A23               	infsnz	_Train_Move_Pwm_Count,f,c
  5419  002B56  2A24               	incf	_Train_Move_Pwm_Count+1,f,c
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  5423  002B58  0E00               	movlw	0
  5424  002B5A  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5425  002B5C  0E00               	movlw	0
  5426  002B5E  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  5427  002B60                     l7717:
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;train_move_right.c: 78: }
  5431                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  5432  002B60  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5433  002B62  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5434  002B64                     L63:
  5435                           
  5436                           ;train_move_right.c: 80: Return_Val = 1;
  5437  002B64  0E01               	movlw	1
  5438  002B66                     L61:
  5439  002B66  0100               	movlb	0	; () banked
  5440  002B68  6FAC               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;train_move_right.c: 84: }
  5444                           
  5445                           ; BSR set to: 0
  5446                           
  5447                           ;train_move_right.c: 83: default : break;
  5448                           
  5449                           ;train_move_right.c: 81: break;
  5450  002B6A  D00D               	goto	l7723
  5451  002B6C                     l7721:
  5452  002B6C  5039               	movf	_Switch_Train_Move,w,c
  5453                           
  5454                           ; Switch size 1, requested type "space"
  5455                           ; Number of cases is 4, Range of values is 0 to 3
  5456                           ; switch strategies available:
  5457                           ; Name         Instructions Cycles
  5458                           ; simple_byte           13     7 (average)
  5459                           ;	Chosen strategy is simple_byte
  5460  002B6E  0A00               	xorlw	0	; case 0
  5461  002B70  B4D8               	btfsc	status,2,c
  5462  002B72  D782               	goto	l7677
  5463  002B74  0A01               	xorlw	1	; case 1
  5464  002B76  B4D8               	btfsc	status,2,c
  5465  002B78  D794               	goto	l7687
  5466  002B7A  0A03               	xorlw	3	; case 2
  5467  002B7C  B4D8               	btfsc	status,2,c
  5468  002B7E  D7A9               	goto	l7695
  5469  002B80  0A01               	xorlw	1	; case 3
  5470  002B82  B4D8               	btfsc	status,2,c
  5471  002B84  D7C4               	goto	l7705
  5472  002B86                     l7723:
  5473                           
  5474                           ;train_move_right.c: 86: return(Return_Val);
  5475  002B86  0100               	movlb	0	; () banked
  5476  002B88  51AC               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  5477  002B8A  0012               	return	
  5478  002B8C                     __end_of_Train_Move_Right_Start:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           postinc0	equ	0xFEE
  5485                           wreg	equ	0xFE8
  5486                           postdec1	equ	0xFE5
  5487                           fsr1l	equ	0xFE1
  5488                           status	equ	0xFD8
  5489                           
  5490 ;; *************** function _Train_Move_Right_Brake *****************
  5491 ;; Defined at:
  5492 ;;		line 254 in file "../train_move_right.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  1    wreg      unsigned char 
  5499 ;; Registers used:
  5500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5506 ;;      Params:         0       0       0       0       0       0       0       0       0
  5507 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5508 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5509 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5510 ;;Total ram usage:        0 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    5
  5513 ;; This function calls:
  5514 ;;		_GETxAPIxVAL
  5515 ;;		_SETxPWM
  5516 ;; This function is called by:
  5517 ;;		_Train_Path
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text4
  5522  002958                     __ptext4:
  5523                           	opt stack 0
  5524  002958                     _Train_Move_Right_Brake:
  5525                           	opt stack 23
  5526                           
  5527                           ;train_move_right.c: 256: static char Return_Val = 1;
  5528                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5529                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;incstack = 0
  5533  002958  D07E               	goto	l7831
  5534  00295A                     l7785:
  5535  00295A  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5536  00295E  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5537  002962  0E01               	movlw	1
  5538  002964  0100               	movlb	0	; () banked
  5539  002966  6F68               	movwf	SETxPWM@direction& (0+255),b
  5540  002968  EC3F  F01A         	call	_SETxPWM	;wreg free
  5541                           
  5542                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(6))
  5543  00296C  0E06               	movlw	6
  5544  00296E  EC2B  F01C         	call	_GETxAPIxVAL
  5545  002972  5023               	movf	_Train_Move_Pwm_Count,w,c
  5546  002974  0100               	movlb	0	; () banked
  5547  002976  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5548  002978  5024               	movf	_Train_Move_Pwm_Count+1,w,c
  5549  00297A  0100               	movlb	0	; () banked
  5550  00297C  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5551  00297E  A0D8               	btfss	status,0,c
  5552  002980  D002               	goto	l7791
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;train_move_right.c: 263: {
  5556                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  5557  002982  0E01               	movlw	1
  5558  002984  D063               	goto	L68
  5559  002986                     l7791:
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;train_move_right.c: 267: }
  5563                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(9))
  5564  002986  0E09               	movlw	9
  5565  002988  EC2B  F01C         	call	_GETxAPIxVAL
  5566  00298C  0100               	movlb	0	; () banked
  5567  00298E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5568  002990  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5569  002992  0100               	movlb	0	; () banked
  5570  002994  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5571  002996  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5572  002998  A0D8               	btfss	status,0,c
  5573  00299A  D008               	goto	l7797
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;train_move_right.c: 269: {
  5577                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  5578  00299C  0623               	decf	_Train_Move_Pwm_Count,f,c
  5579  00299E  A0D8               	btfss	status,0,c
  5580  0029A0  0624               	decf	_Train_Move_Pwm_Count+1,f,c
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  5584  0029A2  0E00               	movlw	0
  5585  0029A4  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5586  0029A6  0E00               	movlw	0
  5587  0029A8  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  5588                           
  5589                           ;train_move_right.c: 272: }
  5590  0029AA  D051               	goto	l7827
  5591  0029AC                     l7797:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  5595  0029AC  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5596  0029AE  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5597  0029B0  D04E               	goto	l7827
  5598  0029B2                     l7801:
  5599  0029B2  0E02               	movlw	2
  5600  0029B4  EC2B  F01C         	call	_GETxAPIxVAL
  5601  0029B8  0100               	movlb	0	; () banked
  5602  0029BA  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5603  0029BC  0100               	movlb	0	; () banked
  5604  0029BE  5D8C               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5605  0029C0  0100               	movlb	0	; () banked
  5606  0029C2  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5607  0029C4  0100               	movlb	0	; () banked
  5608  0029C6  598D               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5609  0029C8  A0D8               	btfss	status,0,c
  5610  0029CA  D008               	goto	l7805
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;train_move_right.c: 278: {
  5614                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  5615  0029CC  0E02               	movlw	2
  5616  0029CE  6E39               	movwf	_Switch_Train_Move,c
  5617                           
  5618                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  5619  0029D0  0E00               	movlw	0
  5620  0029D2  0100               	movlb	0	; () banked
  5621  0029D4  6F8D               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5622  0029D6  0E00               	movlw	0
  5623  0029D8  6F8C               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5624  0029DA  D039               	goto	l7827
  5625  0029DC                     l7805:
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;train_move_right.c: 283: }
  5629                           ;train_move_right.c: 284: Return_Val = 1;
  5630  0029DC  0E01               	movlw	1
  5631  0029DE  0100               	movlb	0	; () banked
  5632  0029E0  6FAB               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  5636  0029E2  0100               	movlb	0	; () banked
  5637  0029E4  4B8C               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5638  0029E6  2B8D               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  5642  0029E8  0E01               	movlw	1
  5643  0029EA  6E39               	movwf	_Switch_Train_Move,c
  5644                           
  5645                           ;train_move_right.c: 287: break;
  5646  0029EC  D041               	goto	l7833
  5647  0029EE                     l7811:
  5648  0029EE  0E06               	movlw	6
  5649  0029F0  EC2B  F01C         	call	_GETxAPIxVAL
  5650  0029F4  C060  F066         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5651  0029F8  C061  F067         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5652  0029FC  0E01               	movlw	1
  5653  0029FE  0100               	movlb	0	; () banked
  5654  002A00  6F68               	movwf	SETxPWM@direction& (0+255),b
  5655  002A02  EC3F  F01A         	call	_SETxPWM	;wreg free
  5656                           
  5657                           ;train_move_right.c: 290: PORTCbits.RC0 = 1;
  5658  002A06  8082               	bsf	3970,0,c	;volatile
  5659                           
  5660                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(6);
  5661  002A08  0E06               	movlw	6
  5662  002A0A  EC2B  F01C         	call	_GETxAPIxVAL
  5663  002A0E  C060  F023         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5664  002A12  C061  F024         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5665  002A16  D019               	goto	l7825
  5666  002A18                     l7819:
  5667  002A18  0E04               	movlw	4
  5668  002A1A  EC2B  F01C         	call	_GETxAPIxVAL
  5669  002A1E  0100               	movlb	0	; () banked
  5670  002A20  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5671  002A22  0100               	movlb	0	; () banked
  5672  002A24  5D8C               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5673  002A26  0100               	movlb	0	; () banked
  5674  002A28  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5675  002A2A  0100               	movlb	0	; () banked
  5676  002A2C  598D               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5677  002A2E  A0D8               	btfss	status,0,c
  5678  002A30  D009               	goto	l7823
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;train_move_right.c: 297: {
  5682                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5683  002A32  0E00               	movlw	0
  5684  002A34  6E39               	movwf	_Switch_Train_Move,c
  5685                           
  5686                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5687  002A36  0E00               	movlw	0
  5688  002A38  0100               	movlb	0	; () banked
  5689  002A3A  6F8D               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5690  002A3C  0E00               	movlw	0
  5691  002A3E  6F8C               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5692                           
  5693                           ;train_move_right.c: 300: Return_Val = 0;
  5694  002A40  0E00               	movlw	0
  5695  002A42  D006               	goto	L66
  5696  002A44                     l7823:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;train_move_right.c: 302: }
  5700                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5701  002A44  0100               	movlb	0	; () banked
  5702  002A46  4B8C               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5703  002A48  2B8D               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5704  002A4A                     l7825:
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5708  002A4A  0E03               	movlw	3
  5709  002A4C                     L68:
  5710  002A4C  6E39               	movwf	_Switch_Train_Move,c
  5711  002A4E                     l7827:
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;train_move_right.c: 305: Return_Val = 1;
  5715  002A4E  0E01               	movlw	1
  5716  002A50                     L66:
  5717  002A50  0100               	movlb	0	; () banked
  5718  002A52  6FAB               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;train_move_right.c: 309: }
  5722                           
  5723                           ; BSR set to: 0
  5724                           
  5725                           ;train_move_right.c: 308: default : break;
  5726                           
  5727                           ;train_move_right.c: 306: break;
  5728  002A54  D00D               	goto	l7833
  5729  002A56                     l7831:
  5730  002A56  5039               	movf	_Switch_Train_Move,w,c
  5731                           
  5732                           ; Switch size 1, requested type "space"
  5733                           ; Number of cases is 4, Range of values is 0 to 3
  5734                           ; switch strategies available:
  5735                           ; Name         Instructions Cycles
  5736                           ; simple_byte           13     7 (average)
  5737                           ;	Chosen strategy is simple_byte
  5738  002A58  0A00               	xorlw	0	; case 0
  5739  002A5A  B4D8               	btfsc	status,2,c
  5740  002A5C  D77E               	goto	l7785
  5741  002A5E  0A01               	xorlw	1	; case 1
  5742  002A60  B4D8               	btfsc	status,2,c
  5743  002A62  D7A7               	goto	l7801
  5744  002A64  0A03               	xorlw	3	; case 2
  5745  002A66  B4D8               	btfsc	status,2,c
  5746  002A68  D7C2               	goto	l7811
  5747  002A6A  0A01               	xorlw	1	; case 3
  5748  002A6C  B4D8               	btfsc	status,2,c
  5749  002A6E  D7D4               	goto	l7819
  5750  002A70                     l7833:
  5751                           
  5752                           ;train_move_right.c: 311: return(Return_Val);
  5753  002A70  0100               	movlb	0	; () banked
  5754  002A72  51AB               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5755  002A74  0012               	return	
  5756  002A76                     __end_of_Train_Move_Right_Brake:
  5757                           	opt stack 0
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           postinc0	equ	0xFEE
  5763                           wreg	equ	0xFE8
  5764                           postdec1	equ	0xFE5
  5765                           fsr1l	equ	0xFE1
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function _Train_Move_Left_Start *****************
  5769 ;; Defined at:
  5770 ;;		line 27 in file "../train_move_left.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;		None
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;		None
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      unsigned char 
  5777 ;; Registers used:
  5778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5784 ;;      Params:         0       0       0       0       0       0       0       0       0
  5785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5787 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5788 ;;Total ram usage:        0 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    5
  5791 ;; This function calls:
  5792 ;;		_GETxAPIxVAL
  5793 ;;		_SETxPWM
  5794 ;; This function is called by:
  5795 ;;		_Train_Path
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text5
  5800  002B8C                     __ptext5:
  5801                           	opt stack 0
  5802  002B8C                     _Train_Move_Left_Start:
  5803                           	opt stack 23
  5804                           
  5805                           ;train_move_left.c: 29: static char Return_Val = 1;
  5806                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5807                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;incstack = 0
  5811  002B8C  D079               	goto	l7777
  5812  002B8E                     l7729:
  5813  002B8E  0E04               	movlw	4
  5814  002B90  EC2B  F01C         	call	_GETxAPIxVAL
  5815  002B94  0100               	movlb	0	; () banked
  5816  002B96  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5817  002B98  0100               	movlb	0	; () banked
  5818  002B9A  5D8A               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5819  002B9C  0100               	movlb	0	; () banked
  5820  002B9E  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5821  002BA0  0100               	movlb	0	; () banked
  5822  002BA2  598B               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5823  002BA4  A0D8               	btfss	status,0,c
  5824  002BA6  D002               	goto	l7733
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;train_move_left.c: 37: {
  5828                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5829  002BA8  0E01               	movlw	1
  5830  002BAA  D02E               	goto	L71
  5831  002BAC                     l7733:
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;train_move_left.c: 42: }
  5835                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5836  002BAC  0100               	movlb	0	; () banked
  5837  002BAE  4B8A               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5838  002BB0  2B8B               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5842  002BB2  0E00               	movlw	0
  5843  002BB4  D019               	goto	L69
  5844  002BB6                     l7737:
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;train_move_left.c: 45: Return_Val = 1;
  5848  002BB6  0E01               	movlw	1
  5849  002BB8  0100               	movlb	0	; () banked
  5850  002BBA  6FAA               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5851                           
  5852                           ;train_move_left.c: 46: break;
  5853  002BBC  D06E               	goto	l7779
  5854  002BBE                     l7739:
  5855  002BBE  0E05               	movlw	5
  5856  002BC0  EC2B  F01C         	call	_GETxAPIxVAL
  5857  002BC4  C060  F066         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5858  002BC8  C061  F067         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5859  002BCC  0E00               	movlw	0
  5860  002BCE  0100               	movlb	0	; () banked
  5861  002BD0  6F68               	movwf	SETxPWM@direction& (0+255),b
  5862  002BD2  EC3F  F01A         	call	_SETxPWM	;wreg free
  5863                           
  5864                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(5);
  5865  002BD6  0E05               	movlw	5
  5866  002BD8  EC2B  F01C         	call	_GETxAPIxVAL
  5867  002BDC  C060  F023         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5868  002BE0  C061  F024         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5869                           
  5870                           ;train_move_left.c: 50: PORTCbits.RC0 = 0;
  5871  002BE4  9082               	bcf	3970,0,c	;volatile
  5872  002BE6  D01A               	goto	l7753
  5873  002BE8                     L69:
  5874  002BE8  6E39               	movwf	_Switch_Train_Move,c
  5875  002BEA  D7E5               	goto	l7737
  5876  002BEC                     l7747:
  5877  002BEC  0E02               	movlw	2
  5878  002BEE  EC2B  F01C         	call	_GETxAPIxVAL
  5879  002BF2  0100               	movlb	0	; () banked
  5880  002BF4  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5881  002BF6  0100               	movlb	0	; () banked
  5882  002BF8  5D8A               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5883  002BFA  0100               	movlb	0	; () banked
  5884  002BFC  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5885  002BFE  0100               	movlb	0	; () banked
  5886  002C00  598B               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5887  002C02  A0D8               	btfss	status,0,c
  5888  002C04  D008               	goto	l7751
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;train_move_left.c: 56: {
  5892                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5893  002C06  0E03               	movlw	3
  5894  002C08                     L71:
  5895  002C08  6E39               	movwf	_Switch_Train_Move,c
  5896                           
  5897                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5898  002C0A  0E00               	movlw	0
  5899  002C0C  0100               	movlb	0	; () banked
  5900  002C0E  6F8B               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5901  002C10  0E00               	movlw	0
  5902  002C12  6F8A               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5903  002C14  D7D0               	goto	l7737
  5904  002C16                     l7751:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;train_move_left.c: 61: }
  5908                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5909  002C16  0100               	movlb	0	; () banked
  5910  002C18  4B8A               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5911  002C1A  2B8B               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5912  002C1C                     l7753:
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5916  002C1C  0E02               	movlw	2
  5917  002C1E  D7E4               	goto	L69
  5918  002C20                     l7757:
  5919  002C20  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5920  002C24  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5921  002C28  0E00               	movlw	0
  5922  002C2A  0100               	movlb	0	; () banked
  5923  002C2C  6F68               	movwf	SETxPWM@direction& (0+255),b
  5924  002C2E  EC3F  F01A         	call	_SETxPWM	;wreg free
  5925                           
  5926                           ;train_move_left.c: 68: Return_Val = 1;
  5927  002C32  0E01               	movlw	1
  5928  002C34  0100               	movlb	0	; () banked
  5929  002C36  6FAA               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(8))
  5933  002C38  0E08               	movlw	8
  5934  002C3A  EC2B  F01C         	call	_GETxAPIxVAL
  5935  002C3E  0100               	movlb	0	; () banked
  5936  002C40  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5937  002C42  5C23               	subwf	_Train_Move_Pwm_Count,w,c
  5938  002C44  0100               	movlb	0	; () banked
  5939  002C46  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5940  002C48  5824               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5941  002C4A  A0D8               	btfss	status,0,c
  5942  002C4C  D004               	goto	l7767
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;train_move_left.c: 70: {
  5946                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5947  002C4E  0E00               	movlw	0
  5948  002C50  6E39               	movwf	_Switch_Train_Move,c
  5949                           
  5950                           ;train_move_left.c: 72: Return_Val = 0;
  5951  002C52  0E00               	movlw	0
  5952  002C54  D7B1               	goto	L70
  5953  002C56                     l7767:
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  5957  002C56  0E0A               	movlw	10
  5958  002C58  EC2B  F01C         	call	_GETxAPIxVAL
  5959  002C5C  0100               	movlb	0	; () banked
  5960  002C5E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  5961  002C60  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5962  002C62  0100               	movlb	0	; () banked
  5963  002C64  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5964  002C66  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5965  002C68  A0D8               	btfss	status,0,c
  5966  002C6A  D007               	goto	l7773
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;train_move_left.c: 76: {
  5970                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5971  002C6C  4A23               	infsnz	_Train_Move_Pwm_Count,f,c
  5972  002C6E  2A24               	incf	_Train_Move_Pwm_Count+1,f,c
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5976  002C70  0E00               	movlw	0
  5977  002C72  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5978  002C74  0E00               	movlw	0
  5979  002C76  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  5980                           
  5981                           ;train_move_left.c: 79: }
  5982  002C78  D010               	goto	l7779
  5983  002C7A                     l7773:
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5987  002C7A  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5988  002C7C  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;train_move_left.c: 83: }
  5992                           
  5993                           ; BSR set to: 0
  5994                           
  5995                           ;train_move_left.c: 82: default : break;
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;train_move_left.c: 81: break;
  5999                           
  6000                           ; BSR set to: 0
  6001  002C7E  D00D               	goto	l7779
  6002  002C80                     l7777:
  6003  002C80  5039               	movf	_Switch_Train_Move,w,c
  6004                           
  6005                           ; Switch size 1, requested type "space"
  6006                           ; Number of cases is 4, Range of values is 0 to 3
  6007                           ; switch strategies available:
  6008                           ; Name         Instructions Cycles
  6009                           ; simple_byte           13     7 (average)
  6010                           ;	Chosen strategy is simple_byte
  6011  002C82  0A00               	xorlw	0	; case 0
  6012  002C84  B4D8               	btfsc	status,2,c
  6013  002C86  D783               	goto	l7729
  6014  002C88  0A01               	xorlw	1	; case 1
  6015  002C8A  B4D8               	btfsc	status,2,c
  6016  002C8C  D798               	goto	l7739
  6017  002C8E  0A03               	xorlw	3	; case 2
  6018  002C90  B4D8               	btfsc	status,2,c
  6019  002C92  D7AC               	goto	l7747
  6020  002C94  0A01               	xorlw	1	; case 3
  6021  002C96  B4D8               	btfsc	status,2,c
  6022  002C98  D7C3               	goto	l7757
  6023  002C9A                     l7779:
  6024                           
  6025                           ;train_move_left.c: 85: return(Return_Val);
  6026  002C9A  0100               	movlb	0	; () banked
  6027  002C9C  51AA               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  6028  002C9E  0012               	return	
  6029  002CA0                     __end_of_Train_Move_Left_Start:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           postinc0	equ	0xFEE
  6036                           wreg	equ	0xFE8
  6037                           postdec1	equ	0xFE5
  6038                           fsr1l	equ	0xFE1
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _Train_Move_Left_Brake *****************
  6042 ;; Defined at:
  6043 ;;		line 254 in file "../train_move_left.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;		None
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      unsigned char 
  6050 ;; Registers used:
  6051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6057 ;;      Params:         0       0       0       0       0       0       0       0       0
  6058 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6060 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6061 ;;Total ram usage:        0 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    5
  6064 ;; This function calls:
  6065 ;;		_GETxAPIxVAL
  6066 ;;		_SETxPWM
  6067 ;; This function is called by:
  6068 ;;		_Train_Path
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text6
  6073  002834                     __ptext6:
  6074                           	opt stack 0
  6075  002834                     _Train_Move_Left_Brake:
  6076                           	opt stack 23
  6077                           
  6078                           ;train_move_left.c: 256: static char Return_Val = 1;
  6079                           ;train_move_left.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  6080                           ;train_move_left.c: 259: switch(Switch_Train_Move)
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;incstack = 0
  6084  002834  D081               	goto	l7885
  6085  002836                     l7839:
  6086  002836  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6087  00283A  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6088  00283E  0E00               	movlw	0
  6089  002840  0100               	movlb	0	; () banked
  6090  002842  6F68               	movwf	SETxPWM@direction& (0+255),b
  6091  002844  EC3F  F01A         	call	_SETxPWM	;wreg free
  6092                           
  6093                           ;train_move_left.c: 262: Return_Val = 1;
  6094  002848  0E01               	movlw	1
  6095  00284A  0100               	movlb	0	; () banked
  6096  00284C  6FA9               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;train_move_left.c: 263: if (Train_Move_Pwm_Count <= GETxAPIxVAL(5))
  6100  00284E  0E05               	movlw	5
  6101  002850  EC2B  F01C         	call	_GETxAPIxVAL
  6102  002854  5023               	movf	_Train_Move_Pwm_Count,w,c
  6103  002856  0100               	movlb	0	; () banked
  6104  002858  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6105  00285A  5024               	movf	_Train_Move_Pwm_Count+1,w,c
  6106  00285C  0100               	movlb	0	; () banked
  6107  00285E  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6108  002860  A0D8               	btfss	status,0,c
  6109  002862  D002               	goto	l7847
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;train_move_left.c: 264: {
  6113                           ;train_move_left.c: 265: Switch_Train_Move = 1;
  6114  002864  0E01               	movlw	1
  6115  002866  D063               	goto	L94
  6116  002868                     l7847:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;train_move_left.c: 268: }
  6120                           ;train_move_left.c: 269: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(9))
  6121  002868  0E09               	movlw	9
  6122  00286A  EC2B  F01C         	call	_GETxAPIxVAL
  6123  00286E  0100               	movlb	0	; () banked
  6124  002870  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6125  002872  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6126  002874  0100               	movlb	0	; () banked
  6127  002876  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6128  002878  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6129  00287A  A0D8               	btfss	status,0,c
  6130  00287C  D008               	goto	l7853
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;train_move_left.c: 270: {
  6134                           ;train_move_left.c: 271: Train_Move_Pwm_Count--;
  6135  00287E  0623               	decf	_Train_Move_Pwm_Count,f,c
  6136  002880  A0D8               	btfss	status,0,c
  6137  002882  0624               	decf	_Train_Move_Pwm_Count+1,f,c
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;train_move_left.c: 272: Train_Move_Pwm_Fast_Count = 0;
  6141  002884  0E00               	movlw	0
  6142  002886  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6143  002888  0E00               	movlw	0
  6144  00288A  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  6145                           
  6146                           ;train_move_left.c: 273: }
  6147  00288C  D062               	goto	l7887
  6148  00288E                     l7853:
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;train_move_left.c: 274: else{Train_Move_Pwm_Fast_Count++;}
  6152  00288E  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6153  002890  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;train_move_left.c: 275: break;
  6157  002892  D05F               	goto	l7887
  6158  002894                     l7855:
  6159  002894  0E02               	movlw	2
  6160  002896  EC2B  F01C         	call	_GETxAPIxVAL
  6161  00289A  0100               	movlb	0	; () banked
  6162  00289C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6163  00289E  0100               	movlb	0	; () banked
  6164  0028A0  5D88               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  6165  0028A2  0100               	movlb	0	; () banked
  6166  0028A4  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6167  0028A6  0100               	movlb	0	; () banked
  6168  0028A8  5989               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  6169  0028AA  A0D8               	btfss	status,0,c
  6170  0028AC  D008               	goto	l7859
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;train_move_left.c: 278: {
  6174                           ;train_move_left.c: 279: Switch_Train_Move = 2;
  6175  0028AE  0E02               	movlw	2
  6176  0028B0  6E39               	movwf	_Switch_Train_Move,c
  6177                           
  6178                           ;train_move_left.c: 280: Train_Move_Wait_Time = 0;
  6179  0028B2  0E00               	movlw	0
  6180  0028B4  0100               	movlb	0	; () banked
  6181  0028B6  6F89               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  6182  0028B8  0E00               	movlw	0
  6183  0028BA  6F88               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  6184  0028BC  D039               	goto	l7881
  6185  0028BE                     l7859:
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;train_move_left.c: 283: }
  6189                           ;train_move_left.c: 284: Return_Val = 1;
  6190  0028BE  0E01               	movlw	1
  6191  0028C0  0100               	movlb	0	; () banked
  6192  0028C2  6FA9               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;train_move_left.c: 285: Train_Move_Wait_Time++;
  6196  0028C4  0100               	movlb	0	; () banked
  6197  0028C6  4B88               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  6198  0028C8  2B89               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;train_move_left.c: 286: Switch_Train_Move = 1;
  6202  0028CA  0E01               	movlw	1
  6203  0028CC  6E39               	movwf	_Switch_Train_Move,c
  6204                           
  6205                           ;train_move_left.c: 287: break;
  6206  0028CE  D041               	goto	l7887
  6207  0028D0                     l7865:
  6208  0028D0  0E05               	movlw	5
  6209  0028D2  EC2B  F01C         	call	_GETxAPIxVAL
  6210  0028D6  C060  F066         	movff	?_GETxAPIxVAL,SETxPWM@speed
  6211  0028DA  C061  F067         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  6212  0028DE  0E00               	movlw	0
  6213  0028E0  0100               	movlb	0	; () banked
  6214  0028E2  6F68               	movwf	SETxPWM@direction& (0+255),b
  6215  0028E4  EC3F  F01A         	call	_SETxPWM	;wreg free
  6216                           
  6217                           ;train_move_left.c: 290: PORTCbits.RC0 = 1;
  6218  0028E8  8082               	bsf	3970,0,c	;volatile
  6219                           
  6220                           ;train_move_left.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(5);
  6221  0028EA  0E05               	movlw	5
  6222  0028EC  EC2B  F01C         	call	_GETxAPIxVAL
  6223  0028F0  C060  F023         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  6224  0028F4  C061  F024         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  6225  0028F8  D019               	goto	L95
  6226  0028FA                     l7873:
  6227  0028FA  0E04               	movlw	4
  6228  0028FC  EC2B  F01C         	call	_GETxAPIxVAL
  6229  002900  0100               	movlb	0	; () banked
  6230  002902  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6231  002904  0100               	movlb	0	; () banked
  6232  002906  5D88               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  6233  002908  0100               	movlb	0	; () banked
  6234  00290A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6235  00290C  0100               	movlb	0	; () banked
  6236  00290E  5989               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  6237  002910  A0D8               	btfss	status,0,c
  6238  002912  D009               	goto	l7877
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;train_move_left.c: 297: {
  6242                           ;train_move_left.c: 298: Switch_Train_Move = 0;
  6243  002914  0E00               	movlw	0
  6244  002916  6E39               	movwf	_Switch_Train_Move,c
  6245                           
  6246                           ;train_move_left.c: 299: Train_Move_Wait_Time = 0;
  6247  002918  0E00               	movlw	0
  6248  00291A  0100               	movlb	0	; () banked
  6249  00291C  6F89               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  6250  00291E  0E00               	movlw	0
  6251  002920  6F88               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  6252                           
  6253                           ;train_move_left.c: 300: Return_Val = 0;
  6254  002922  0E00               	movlw	0
  6255  002924  D006               	goto	L74
  6256  002926                     l7877:
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;train_move_left.c: 302: }
  6260                           ;train_move_left.c: 303: Train_Move_Wait_Time++;
  6261  002926  0100               	movlb	0	; () banked
  6262  002928  4B88               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  6263  00292A  2B89               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  6264  00292C                     L95:
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;train_move_left.c: 304: Switch_Train_Move = 3;
  6268  00292C  0E03               	movlw	3
  6269  00292E                     L94:
  6270  00292E  6E39               	movwf	_Switch_Train_Move,c
  6271  002930                     l7881:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;train_move_left.c: 305: Return_Val = 1;
  6275  002930  0E01               	movlw	1
  6276  002932                     L74:
  6277  002932  0100               	movlb	0	; () banked
  6278  002934  6FA9               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;train_move_left.c: 309: }
  6282                           
  6283                           ; BSR set to: 0
  6284                           
  6285                           ;train_move_left.c: 308: default : break;
  6286                           
  6287                           ;train_move_left.c: 306: break;
  6288  002936  D00D               	goto	l7887
  6289  002938                     l7885:
  6290  002938  5039               	movf	_Switch_Train_Move,w,c
  6291                           
  6292                           ; Switch size 1, requested type "space"
  6293                           ; Number of cases is 4, Range of values is 0 to 3
  6294                           ; switch strategies available:
  6295                           ; Name         Instructions Cycles
  6296                           ; simple_byte           13     7 (average)
  6297                           ;	Chosen strategy is simple_byte
  6298  00293A  0A00               	xorlw	0	; case 0
  6299  00293C  B4D8               	btfsc	status,2,c
  6300  00293E  D77B               	goto	l7839
  6301  002940  0A01               	xorlw	1	; case 1
  6302  002942  B4D8               	btfsc	status,2,c
  6303  002944  D7A7               	goto	l7855
  6304  002946  0A03               	xorlw	3	; case 2
  6305  002948  B4D8               	btfsc	status,2,c
  6306  00294A  D7C2               	goto	l7865
  6307  00294C  0A01               	xorlw	1	; case 3
  6308  00294E  B4D8               	btfsc	status,2,c
  6309  002950  D7D4               	goto	l7873
  6310  002952                     l7887:
  6311                           
  6312                           ;train_move_left.c: 311: return(Return_Val);
  6313  002952  0100               	movlb	0	; () banked
  6314  002954  51A9               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  6315  002956  0012               	return	
  6316  002958                     __end_of_Train_Move_Left_Brake:
  6317                           	opt stack 0
  6318                           tblptru	equ	0xFF8
  6319                           tblptrh	equ	0xFF7
  6320                           tblptrl	equ	0xFF6
  6321                           tablat	equ	0xFF5
  6322                           postinc0	equ	0xFEE
  6323                           wreg	equ	0xFE8
  6324                           postdec1	equ	0xFE5
  6325                           fsr1l	equ	0xFE1
  6326                           status	equ	0xFD8
  6327                           
  6328 ;; *************** function _Right_Mountain_From_The_Right *****************
  6329 ;; Defined at:
  6330 ;;		line 103 in file "../train_move_left.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;  rc              1    wreg     unsigned char 
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;  rc              1   13[BANK0 ] unsigned char 
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      unsigned char 
  6337 ;; Registers used:
  6338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6344 ;;      Params:         0       0       0       0       0       0       0       0       0
  6345 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6346 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6347 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6348 ;;Total ram usage:        1 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:    5
  6351 ;; This function calls:
  6352 ;;		_GETxAPIxVAL
  6353 ;;		_SETxPWM
  6354 ;; This function is called by:
  6355 ;;		_Train_Path
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text7
  6360  002CA0                     __ptext7:
  6361                           	opt stack 0
  6362  002CA0                     _Right_Mountain_From_The_Right:
  6363                           	opt stack 23
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;incstack = 0
  6367                           ;Right_Mountain_From_The_Right@rc stored from wreg
  6368  002CA0  0100               	movlb	0	; () banked
  6369  002CA2  6F6D               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  6370                           
  6371                           ;train_move_left.c: 105: static char Return_Val = 1;
  6372                           ;train_move_left.c: 107: switch (Switch_Moutain){
  6373  002CA4  D07D               	goto	l8065
  6374  002CA6                     l8013:
  6375  002CA6  0E03               	movlw	3
  6376  002CA8  0100               	movlb	0	; () banked
  6377  002CAA  196D               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6378  002CAC  B4D8               	btfsc	status,2,c
  6379  002CAE  D00D               	goto	l8019
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(37)){
  6383                           
  6384                           ; BSR set to: 0
  6385                           
  6386                           ;train_move_left.c: 111: }
  6387                           
  6388                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;train_move_left.c: 109: Switch_Moutain = 1;
  6392  002CB0  0E25               	movlw	37
  6393  002CB2  EC2B  F01C         	call	_GETxAPIxVAL
  6394  002CB6  0100               	movlb	0	; () banked
  6395  002CB8  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6396  002CBA  0100               	movlb	0	; () banked
  6397  002CBC  5D96               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6398  002CBE  0100               	movlb	0	; () banked
  6399  002CC0  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6400  002CC2  0100               	movlb	0	; () banked
  6401  002CC4  5997               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6402  002CC6  A0D8               	btfss	status,0,c
  6403  002CC8  D008               	goto	l8021
  6404  002CCA                     l8019:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;train_move_left.c: 113: Switch_Moutain = 1;
  6408  002CCA  0E01               	movlw	1
  6409  002CCC  6E37               	movwf	_Switch_Moutain,c
  6410                           
  6411                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  6412  002CCE  0E00               	movlw	0
  6413  002CD0  0100               	movlb	0	; () banked
  6414  002CD2  6F97               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6415  002CD4  0E00               	movlw	0
  6416  002CD6  6F96               	movwf	_Mountain_Delay_Counter& (0+255),b
  6417                           
  6418                           ;train_move_left.c: 115: }
  6419  002CD8  D05F               	goto	l8061
  6420  002CDA                     l8021:
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;train_move_left.c: 116: else{
  6424                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  6425  002CDA  0100               	movlb	0	; () banked
  6426  002CDC  4B96               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6427  002CDE  2B97               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6428                           
  6429                           ; BSR set to: 0
  6430  002CE0  D05B               	goto	l8061
  6431  002CE2                     l8025:
  6432  002CE2  0E04               	movlw	4
  6433  002CE4  0100               	movlb	0	; () banked
  6434  002CE6  196D               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6435  002CE8  A4D8               	btfss	status,2,c
  6436  002CEA  D023               	goto	l8043
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;train_move_left.c: 123: SETxPWM(Train_Move_Pwm_Count, 0);
  6440  002CEC  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6441  002CF0  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6442  002CF4  0E00               	movlw	0
  6443  002CF6  0100               	movlb	0	; () banked
  6444  002CF8  6F68               	movwf	SETxPWM@direction& (0+255),b
  6445  002CFA  EC3F  F01A         	call	_SETxPWM	;wreg free
  6446                           
  6447                           ;train_move_left.c: 124: if (Train_Move_Pwm_Count <= GETxAPIxVAL(30))
  6448  002CFE  0E1E               	movlw	30
  6449  002D00  EC2B  F01C         	call	_GETxAPIxVAL
  6450  002D04  5023               	movf	_Train_Move_Pwm_Count,w,c
  6451  002D06  0100               	movlb	0	; () banked
  6452  002D08  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6453  002D0A  5024               	movf	_Train_Move_Pwm_Count+1,w,c
  6454  002D0C  0100               	movlb	0	; () banked
  6455  002D0E  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6456  002D10  B0D8               	btfsc	status,0,c
  6457  002D12  D028               	goto	l8049
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;train_move_left.c: 131: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6461                           
  6462                           ; BSR set to: 0
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;train_move_left.c: 130: }
  6466                           
  6467                           ;train_move_left.c: 129: break;
  6468                           
  6469                           ;train_move_left.c: 128: Return_Val = 0;
  6470                           
  6471                           ;train_move_left.c: 127: Switch_Moutain = 0;
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;train_move_left.c: 125: {
  6475                           ;train_move_left.c: 126: Switch_Train_Move = 0;
  6476  002D14  0E0A               	movlw	10
  6477  002D16  EC2B  F01C         	call	_GETxAPIxVAL
  6478  002D1A  0100               	movlb	0	; () banked
  6479  002D1C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6480  002D1E  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6481  002D20  0100               	movlb	0	; () banked
  6482  002D22  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6483  002D24  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6484  002D26  A0D8               	btfss	status,0,c
  6485  002D28  D035               	goto	l8059
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;train_move_left.c: 132: {
  6489                           ;train_move_left.c: 133: Train_Move_Pwm_Count--;
  6490  002D2A  0623               	decf	_Train_Move_Pwm_Count,f,c
  6491  002D2C  A0D8               	btfss	status,0,c
  6492  002D2E  0624               	decf	_Train_Move_Pwm_Count+1,f,c
  6493  002D30  D02C               	goto	l8057
  6494  002D32                     l8043:
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;train_move_left.c: 138: else if (rc == 3){
  6498  002D32  0E03               	movlw	3
  6499  002D34  0100               	movlb	0	; () banked
  6500  002D36  196D               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6501  002D38  A4D8               	btfss	status,2,c
  6502  002D3A  D02E               	goto	l8061
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;train_move_left.c: 139: SETxPWM(Train_Move_Pwm_Count, 0);
  6506  002D3C  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6507  002D40  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6508  002D44  0E00               	movlw	0
  6509  002D46  0100               	movlb	0	; () banked
  6510  002D48  6F68               	movwf	SETxPWM@direction& (0+255),b
  6511  002D4A  EC3F  F01A         	call	_SETxPWM	;wreg free
  6512                           
  6513                           ;train_move_left.c: 140: if (Train_Move_Pwm_Count >= GETxAPIxVAL(8))
  6514  002D4E  0E08               	movlw	8
  6515  002D50  EC2B  F01C         	call	_GETxAPIxVAL
  6516  002D54  0100               	movlb	0	; () banked
  6517  002D56  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6518  002D58  5C23               	subwf	_Train_Move_Pwm_Count,w,c
  6519  002D5A  0100               	movlb	0	; () banked
  6520  002D5C  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6521  002D5E  5824               	subwfb	_Train_Move_Pwm_Count+1,w,c
  6522  002D60  A0D8               	btfss	status,0,c
  6523  002D62  D006               	goto	l8053
  6524  002D64                     l8049:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;train_move_left.c: 141: {
  6528                           ;train_move_left.c: 142: Switch_Train_Move = 0;
  6529  002D64  0E00               	movlw	0
  6530  002D66  6E39               	movwf	_Switch_Train_Move,c
  6531                           
  6532                           ;train_move_left.c: 143: Switch_Moutain = 0;
  6533  002D68  0E00               	movlw	0
  6534  002D6A  6E37               	movwf	_Switch_Moutain,c
  6535                           
  6536                           ;train_move_left.c: 144: Return_Val = 0;
  6537  002D6C  0E00               	movlw	0
  6538  002D6E  D015               	goto	L78
  6539  002D70                     l8053:
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;train_move_left.c: 147: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6543  002D70  0E0A               	movlw	10
  6544  002D72  EC2B  F01C         	call	_GETxAPIxVAL
  6545  002D76  0100               	movlb	0	; () banked
  6546  002D78  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6547  002D7A  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6548  002D7C  0100               	movlb	0	; () banked
  6549  002D7E  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6550  002D80  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6551  002D82  A0D8               	btfss	status,0,c
  6552  002D84  D007               	goto	l8059
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;train_move_left.c: 148: {
  6556                           ;train_move_left.c: 149: Train_Move_Pwm_Count++;
  6557  002D86  4A23               	infsnz	_Train_Move_Pwm_Count,f,c
  6558  002D88  2A24               	incf	_Train_Move_Pwm_Count+1,f,c
  6559  002D8A                     l8057:
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;train_move_left.c: 150: Train_Move_Pwm_Fast_Count = 0;
  6563  002D8A  0E00               	movlw	0
  6564  002D8C  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6565  002D8E  0E00               	movlw	0
  6566  002D90  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  6567                           
  6568                           ;train_move_left.c: 151: }
  6569  002D92  D002               	goto	l8061
  6570  002D94                     l8059:
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;train_move_left.c: 152: else{Train_Move_Pwm_Fast_Count++;}
  6574  002D94  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6575  002D96  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6576  002D98                     l8061:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;train_move_left.c: 153: }
  6580                           ;train_move_left.c: 154: Return_Val = 1;
  6581  002D98  0E01               	movlw	1
  6582  002D9A                     L78:
  6583  002D9A  0100               	movlb	0	; () banked
  6584  002D9C  6FA8               	movwf	Right_Mountain_From_The_Right@Return_Val& (0+255),b
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;train_move_left.c: 159: }
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;train_move_left.c: 158: break;
  6591                           
  6592                           ;train_move_left.c: 157: default:
  6593                           
  6594                           ;train_move_left.c: 155: break;
  6595  002D9E  D007               	goto	l8067
  6596  002DA0                     l8065:
  6597  002DA0  5037               	movf	_Switch_Moutain,w,c
  6598                           
  6599                           ; Switch size 1, requested type "space"
  6600                           ; Number of cases is 2, Range of values is 0 to 1
  6601                           ; switch strategies available:
  6602                           ; Name         Instructions Cycles
  6603                           ; simple_byte            7     4 (average)
  6604                           ;	Chosen strategy is simple_byte
  6605  002DA2  0A00               	xorlw	0	; case 0
  6606  002DA4  B4D8               	btfsc	status,2,c
  6607  002DA6  D77F               	goto	l8013
  6608  002DA8  0A01               	xorlw	1	; case 1
  6609  002DAA  B4D8               	btfsc	status,2,c
  6610  002DAC  D79A               	goto	l8025
  6611  002DAE                     l8067:
  6612                           
  6613                           ;train_move_left.c: 161: return(Return_Val);
  6614  002DAE  0100               	movlb	0	; () banked
  6615  002DB0  51A8               	movf	Right_Mountain_From_The_Right@Return_Val& (0+255),w,b
  6616  002DB2  0012               	return	
  6617  002DB4                     __end_of_Right_Mountain_From_The_Right:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           postinc0	equ	0xFEE
  6624                           wreg	equ	0xFE8
  6625                           postdec1	equ	0xFE5
  6626                           fsr1l	equ	0xFE1
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _Right_Mountain_From_The_Left *****************
  6630 ;; Defined at:
  6631 ;;		line 179 in file "../train_move_right.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  rc              1    wreg     unsigned char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  rc              1   13[BANK0 ] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      unsigned char 
  6638 ;; Registers used:
  6639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6645 ;;      Params:         0       0       0       0       0       0       0       0       0
  6646 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6648 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6649 ;;Total ram usage:        1 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    5
  6652 ;; This function calls:
  6653 ;;		_GETxAPIxVAL
  6654 ;;		_SETxPWM
  6655 ;; This function is called by:
  6656 ;;		_Train_Path
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text8
  6661  002DB4                     __ptext8:
  6662                           	opt stack 0
  6663  002DB4                     _Right_Mountain_From_The_Left:
  6664                           	opt stack 23
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;incstack = 0
  6668                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6669  002DB4  0100               	movlb	0	; () banked
  6670  002DB6  6F6D               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6671                           
  6672                           ;train_move_right.c: 181: static char Return_Val = 1;
  6673                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6674  002DB8  D07D               	goto	l8005
  6675  002DBA                     l7953:
  6676  002DBA  0E04               	movlw	4
  6677  002DBC  0100               	movlb	0	; () banked
  6678  002DBE  196D               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6679  002DC0  B4D8               	btfsc	status,2,c
  6680  002DC2  D00D               	goto	l7959
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(40)){
  6684                           
  6685                           ; BSR set to: 0
  6686                           
  6687                           ;train_move_right.c: 187: }
  6688                           
  6689                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6693  002DC4  0E28               	movlw	40
  6694  002DC6  EC2B  F01C         	call	_GETxAPIxVAL
  6695  002DCA  0100               	movlb	0	; () banked
  6696  002DCC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6697  002DCE  0100               	movlb	0	; () banked
  6698  002DD0  5D96               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6699  002DD2  0100               	movlb	0	; () banked
  6700  002DD4  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6701  002DD6  0100               	movlb	0	; () banked
  6702  002DD8  5997               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6703  002DDA  A0D8               	btfss	status,0,c
  6704  002DDC  D008               	goto	l7961
  6705  002DDE                     l7959:
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6709  002DDE  0E01               	movlw	1
  6710  002DE0  6E37               	movwf	_Switch_Moutain,c
  6711                           
  6712                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6713  002DE2  0E00               	movlw	0
  6714  002DE4  0100               	movlb	0	; () banked
  6715  002DE6  6F97               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6716  002DE8  0E00               	movlw	0
  6717  002DEA  6F96               	movwf	_Mountain_Delay_Counter& (0+255),b
  6718                           
  6719                           ;train_move_right.c: 191: }
  6720  002DEC  D05F               	goto	l8001
  6721  002DEE                     l7961:
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;train_move_right.c: 192: else{
  6725                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6726  002DEE  0100               	movlb	0	; () banked
  6727  002DF0  4B96               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6728  002DF2  2B97               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6729                           
  6730                           ; BSR set to: 0
  6731  002DF4  D05B               	goto	l8001
  6732  002DF6                     l7965:
  6733  002DF6  0E03               	movlw	3
  6734  002DF8  0100               	movlb	0	; () banked
  6735  002DFA  196D               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6736  002DFC  A4D8               	btfss	status,2,c
  6737  002DFE  D022               	goto	l7983
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6741  002E00  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6742  002E04  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6743  002E08  0E01               	movlw	1
  6744  002E0A  0100               	movlb	0	; () banked
  6745  002E0C  6F68               	movwf	SETxPWM@direction& (0+255),b
  6746  002E0E  EC3F  F01A         	call	_SETxPWM	;wreg free
  6747                           
  6748                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(31))
  6749  002E12  0E1F               	movlw	31
  6750  002E14  EC2B  F01C         	call	_GETxAPIxVAL
  6751  002E18  0100               	movlb	0	; () banked
  6752  002E1A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6753  002E1C  5C23               	subwf	_Train_Move_Pwm_Count,w,c
  6754  002E1E  0100               	movlb	0	; () banked
  6755  002E20  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6756  002E22  5824               	subwfb	_Train_Move_Pwm_Count+1,w,c
  6757  002E24  B0D8               	btfsc	status,0,c
  6758  002E26  D027               	goto	l7989
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6762                           
  6763                           ; BSR set to: 0
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;train_move_right.c: 206: }
  6767                           
  6768                           ;train_move_right.c: 205: break;
  6769                           
  6770                           ;train_move_right.c: 204: Return_Val = 0;
  6771                           
  6772                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;train_move_right.c: 201: {
  6776                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6777  002E28  0E0A               	movlw	10
  6778  002E2A  EC2B  F01C         	call	_GETxAPIxVAL
  6779  002E2E  0100               	movlb	0	; () banked
  6780  002E30  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6781  002E32  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6782  002E34  0100               	movlb	0	; () banked
  6783  002E36  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6784  002E38  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6785  002E3A  A0D8               	btfss	status,0,c
  6786  002E3C  D035               	goto	l7999
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;train_move_right.c: 208: {
  6790                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6791  002E3E  4A23               	infsnz	_Train_Move_Pwm_Count,f,c
  6792  002E40  2A24               	incf	_Train_Move_Pwm_Count+1,f,c
  6793  002E42  D02D               	goto	l7997
  6794  002E44                     l7983:
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;train_move_right.c: 214: else if (rc == 4){
  6798  002E44  0E04               	movlw	4
  6799  002E46  0100               	movlb	0	; () banked
  6800  002E48  196D               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6801  002E4A  A4D8               	btfss	status,2,c
  6802  002E4C  D02F               	goto	l8001
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6806  002E4E  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6807  002E52  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6808  002E56  0E01               	movlw	1
  6809  002E58  0100               	movlb	0	; () banked
  6810  002E5A  6F68               	movwf	SETxPWM@direction& (0+255),b
  6811  002E5C  EC3F  F01A         	call	_SETxPWM	;wreg free
  6812                           
  6813                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(7))
  6814  002E60  0E07               	movlw	7
  6815  002E62  EC2B  F01C         	call	_GETxAPIxVAL
  6816  002E66  5023               	movf	_Train_Move_Pwm_Count,w,c
  6817  002E68  0100               	movlb	0	; () banked
  6818  002E6A  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6819  002E6C  5024               	movf	_Train_Move_Pwm_Count+1,w,c
  6820  002E6E  0100               	movlb	0	; () banked
  6821  002E70  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6822  002E72  A0D8               	btfss	status,0,c
  6823  002E74  D006               	goto	l7993
  6824  002E76                     l7989:
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;train_move_right.c: 217: {
  6828                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6829  002E76  0E00               	movlw	0
  6830  002E78  6E39               	movwf	_Switch_Train_Move,c
  6831                           
  6832                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6833  002E7A  0E00               	movlw	0
  6834  002E7C  6E37               	movwf	_Switch_Moutain,c
  6835                           
  6836                           ;train_move_right.c: 220: Return_Val = 0;
  6837  002E7E  0E00               	movlw	0
  6838  002E80  D016               	goto	L81
  6839  002E82                     l7993:
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6843  002E82  0E0A               	movlw	10
  6844  002E84  EC2B  F01C         	call	_GETxAPIxVAL
  6845  002E88  0100               	movlb	0	; () banked
  6846  002E8A  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6847  002E8C  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6848  002E8E  0100               	movlb	0	; () banked
  6849  002E90  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6850  002E92  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6851  002E94  A0D8               	btfss	status,0,c
  6852  002E96  D008               	goto	l7999
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;train_move_right.c: 224: {
  6856                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  6857  002E98  0623               	decf	_Train_Move_Pwm_Count,f,c
  6858  002E9A  A0D8               	btfss	status,0,c
  6859  002E9C  0624               	decf	_Train_Move_Pwm_Count+1,f,c
  6860  002E9E                     l7997:
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  6864  002E9E  0E00               	movlw	0
  6865  002EA0  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6866  002EA2  0E00               	movlw	0
  6867  002EA4  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  6868                           
  6869                           ;train_move_right.c: 227: }
  6870  002EA6  D002               	goto	l8001
  6871  002EA8                     l7999:
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  6875  002EA8  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6876  002EAA  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6877  002EAC                     l8001:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;train_move_right.c: 229: }
  6881                           ;train_move_right.c: 230: Return_Val = 1;
  6882  002EAC  0E01               	movlw	1
  6883  002EAE                     L81:
  6884  002EAE  0100               	movlb	0	; () banked
  6885  002EB0  6FA7               	movwf	Right_Mountain_From_The_Left@Return_Val& (0+255),b
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;train_move_right.c: 235: }
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;train_move_right.c: 234: break;
  6892                           
  6893                           ;train_move_right.c: 233: default:
  6894                           
  6895                           ;train_move_right.c: 231: break;
  6896  002EB2  D007               	goto	l8007
  6897  002EB4                     l8005:
  6898  002EB4  5037               	movf	_Switch_Moutain,w,c
  6899                           
  6900                           ; Switch size 1, requested type "space"
  6901                           ; Number of cases is 2, Range of values is 0 to 1
  6902                           ; switch strategies available:
  6903                           ; Name         Instructions Cycles
  6904                           ; simple_byte            7     4 (average)
  6905                           ;	Chosen strategy is simple_byte
  6906  002EB6  0A00               	xorlw	0	; case 0
  6907  002EB8  B4D8               	btfsc	status,2,c
  6908  002EBA  D77F               	goto	l7953
  6909  002EBC  0A01               	xorlw	1	; case 1
  6910  002EBE  B4D8               	btfsc	status,2,c
  6911  002EC0  D79A               	goto	l7965
  6912  002EC2                     l8007:
  6913                           
  6914                           ;train_move_right.c: 237: return(Return_Val);
  6915  002EC2  0100               	movlb	0	; () banked
  6916  002EC4  51A7               	movf	Right_Mountain_From_The_Left@Return_Val& (0+255),w,b
  6917  002EC6  0012               	return	
  6918  002EC8                     __end_of_Right_Mountain_From_The_Left:
  6919                           	opt stack 0
  6920                           tblptru	equ	0xFF8
  6921                           tblptrh	equ	0xFF7
  6922                           tblptrl	equ	0xFF6
  6923                           tablat	equ	0xFF5
  6924                           postinc0	equ	0xFEE
  6925                           wreg	equ	0xFE8
  6926                           postdec1	equ	0xFE5
  6927                           fsr1l	equ	0xFE1
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _Left_Mountain_From_The_Right *****************
  6931 ;; Defined at:
  6932 ;;		line 178 in file "../train_move_left.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  rc              1    wreg     unsigned char 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  rc              1   13[BANK0 ] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      unsigned char 
  6939 ;; Registers used:
  6940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6946 ;;      Params:         0       0       0       0       0       0       0       0       0
  6947 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6948 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6949 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6950 ;;Total ram usage:        1 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    5
  6953 ;; This function calls:
  6954 ;;		_GETxAPIxVAL
  6955 ;;		_SETxPWM
  6956 ;; This function is called by:
  6957 ;;		_Train_Path
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text9
  6962  002FDA                     __ptext9:
  6963                           	opt stack 0
  6964  002FDA                     _Left_Mountain_From_The_Right:
  6965                           	opt stack 23
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;incstack = 0
  6969                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6970  002FDA  0100               	movlb	0	; () banked
  6971  002FDC  6F6D               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6972                           
  6973                           ;train_move_left.c: 180: static char Return_Val = 1;
  6974                           ;train_move_left.c: 182: switch (Switch_Moutain){
  6975  002FDE  D07B               	goto	l8125
  6976  002FE0                     l8073:
  6977  002FE0  0100               	movlb	0	; () banked
  6978  002FE2  056D               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6979  002FE4  B4D8               	btfsc	status,2,c
  6980  002FE6  D00D               	goto	l8079
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;train_move_left.c: 187: else if(Mountain_Delay_Counter >= GETxAPIxVAL(42)){
  6984                           
  6985                           ; BSR set to: 0
  6986                           
  6987                           ;train_move_left.c: 186: }
  6988                           
  6989                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;train_move_left.c: 184: Switch_Moutain = 1;
  6993  002FE8  0E2A               	movlw	42
  6994  002FEA  EC2B  F01C         	call	_GETxAPIxVAL
  6995  002FEE  0100               	movlb	0	; () banked
  6996  002FF0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  6997  002FF2  0100               	movlb	0	; () banked
  6998  002FF4  5D96               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6999  002FF6  0100               	movlb	0	; () banked
  7000  002FF8  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7001  002FFA  0100               	movlb	0	; () banked
  7002  002FFC  5997               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  7003  002FFE  A0D8               	btfss	status,0,c
  7004  003000  D008               	goto	l8081
  7005  003002                     l8079:
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;train_move_left.c: 188: Switch_Moutain = 1;
  7009  003002  0E01               	movlw	1
  7010  003004  6E37               	movwf	_Switch_Moutain,c
  7011                           
  7012                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  7013  003006  0E00               	movlw	0
  7014  003008  0100               	movlb	0	; () banked
  7015  00300A  6F97               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  7016  00300C  0E00               	movlw	0
  7017  00300E  6F96               	movwf	_Mountain_Delay_Counter& (0+255),b
  7018                           
  7019                           ;train_move_left.c: 190: }
  7020  003010  D05E               	goto	l8121
  7021  003012                     l8081:
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;train_move_left.c: 191: else{
  7025                           ;train_move_left.c: 192: Mountain_Delay_Counter++;
  7026  003012  0100               	movlb	0	; () banked
  7027  003014  4B96               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  7028  003016  2B97               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  7029                           
  7030                           ; BSR set to: 0
  7031  003018  D05A               	goto	l8121
  7032  00301A                     l8085:
  7033  00301A  0E02               	movlw	2
  7034  00301C  0100               	movlb	0	; () banked
  7035  00301E  196D               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  7036  003020  A4D8               	btfss	status,2,c
  7037  003022  D022               	goto	l8103
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;train_move_left.c: 198: SETxPWM(Train_Move_Pwm_Count, 0);
  7041  003024  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7042  003028  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7043  00302C  0E00               	movlw	0
  7044  00302E  0100               	movlb	0	; () banked
  7045  003030  6F68               	movwf	SETxPWM@direction& (0+255),b
  7046  003032  EC3F  F01A         	call	_SETxPWM	;wreg free
  7047                           
  7048                           ;train_move_left.c: 199: if (Train_Move_Pwm_Count >= GETxAPIxVAL(36))
  7049  003036  0E24               	movlw	36
  7050  003038  EC2B  F01C         	call	_GETxAPIxVAL
  7051  00303C  0100               	movlb	0	; () banked
  7052  00303E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7053  003040  5C23               	subwf	_Train_Move_Pwm_Count,w,c
  7054  003042  0100               	movlb	0	; () banked
  7055  003044  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7056  003046  5824               	subwfb	_Train_Move_Pwm_Count+1,w,c
  7057  003048  B0D8               	btfsc	status,0,c
  7058  00304A  D026               	goto	l8109
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;train_move_left.c: 206: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  7062                           
  7063                           ; BSR set to: 0
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;train_move_left.c: 205: }
  7067                           
  7068                           ;train_move_left.c: 204: break;
  7069                           
  7070                           ;train_move_left.c: 203: Return_Val = 0;
  7071                           
  7072                           ;train_move_left.c: 202: Switch_Moutain = 0;
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;train_move_left.c: 200: {
  7076                           ;train_move_left.c: 201: Switch_Train_Move = 0;
  7077  00304C  0E0A               	movlw	10
  7078  00304E  EC2B  F01C         	call	_GETxAPIxVAL
  7079  003052  0100               	movlb	0	; () banked
  7080  003054  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7081  003056  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  7082  003058  0100               	movlb	0	; () banked
  7083  00305A  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7084  00305C  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  7085  00305E  A0D8               	btfss	status,0,c
  7086  003060  D034               	goto	l8119
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;train_move_left.c: 207: {
  7090                           ;train_move_left.c: 208: Train_Move_Pwm_Count++;
  7091  003062  4A23               	infsnz	_Train_Move_Pwm_Count,f,c
  7092  003064  2A24               	incf	_Train_Move_Pwm_Count+1,f,c
  7093  003066  D02C               	goto	l8117
  7094  003068                     l8103:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;train_move_left.c: 213: else if (rc == 1){
  7098  003068  0100               	movlb	0	; () banked
  7099  00306A  056D               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  7100  00306C  A4D8               	btfss	status,2,c
  7101  00306E  D02F               	goto	l8121
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;train_move_left.c: 214: SETxPWM(Train_Move_Pwm_Count, 0);
  7105  003070  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7106  003074  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7107  003078  0E00               	movlw	0
  7108  00307A  0100               	movlb	0	; () banked
  7109  00307C  6F68               	movwf	SETxPWM@direction& (0+255),b
  7110  00307E  EC3F  F01A         	call	_SETxPWM	;wreg free
  7111                           
  7112                           ;train_move_left.c: 215: if (Train_Move_Pwm_Count <= GETxAPIxVAL(8))
  7113  003082  0E08               	movlw	8
  7114  003084  EC2B  F01C         	call	_GETxAPIxVAL
  7115  003088  5023               	movf	_Train_Move_Pwm_Count,w,c
  7116  00308A  0100               	movlb	0	; () banked
  7117  00308C  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7118  00308E  5024               	movf	_Train_Move_Pwm_Count+1,w,c
  7119  003090  0100               	movlb	0	; () banked
  7120  003092  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7121  003094  A0D8               	btfss	status,0,c
  7122  003096  D006               	goto	l8113
  7123  003098                     l8109:
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;train_move_left.c: 216: {
  7127                           ;train_move_left.c: 217: Switch_Train_Move = 0;
  7128  003098  0E00               	movlw	0
  7129  00309A  6E39               	movwf	_Switch_Train_Move,c
  7130                           
  7131                           ;train_move_left.c: 218: Switch_Moutain = 0;
  7132  00309C  0E00               	movlw	0
  7133  00309E  6E37               	movwf	_Switch_Moutain,c
  7134                           
  7135                           ;train_move_left.c: 219: Return_Val = 0;
  7136  0030A0  0E00               	movlw	0
  7137  0030A2  D016               	goto	L84
  7138  0030A4                     l8113:
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;train_move_left.c: 222: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  7142  0030A4  0E0A               	movlw	10
  7143  0030A6  EC2B  F01C         	call	_GETxAPIxVAL
  7144  0030AA  0100               	movlb	0	; () banked
  7145  0030AC  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7146  0030AE  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  7147  0030B0  0100               	movlb	0	; () banked
  7148  0030B2  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7149  0030B4  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  7150  0030B6  A0D8               	btfss	status,0,c
  7151  0030B8  D008               	goto	l8119
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;train_move_left.c: 223: {
  7155                           ;train_move_left.c: 224: Train_Move_Pwm_Count--;
  7156  0030BA  0623               	decf	_Train_Move_Pwm_Count,f,c
  7157  0030BC  A0D8               	btfss	status,0,c
  7158  0030BE  0624               	decf	_Train_Move_Pwm_Count+1,f,c
  7159  0030C0                     l8117:
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;train_move_left.c: 225: Train_Move_Pwm_Fast_Count = 0;
  7163  0030C0  0E00               	movlw	0
  7164  0030C2  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  7165  0030C4  0E00               	movlw	0
  7166  0030C6  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  7167                           
  7168                           ;train_move_left.c: 226: }
  7169  0030C8  D002               	goto	l8121
  7170  0030CA                     l8119:
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;train_move_left.c: 227: else{Train_Move_Pwm_Fast_Count++;}
  7174  0030CA  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  7175  0030CC  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  7176  0030CE                     l8121:
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;train_move_left.c: 228: }
  7180                           ;train_move_left.c: 229: Return_Val = 1;
  7181  0030CE  0E01               	movlw	1
  7182  0030D0                     L84:
  7183  0030D0  0100               	movlb	0	; () banked
  7184  0030D2  6FA6               	movwf	Left_Mountain_From_The_Right@Return_Val& (0+255),b
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;train_move_left.c: 234: }
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;train_move_left.c: 233: break;
  7191                           
  7192                           ;train_move_left.c: 232: default:
  7193                           
  7194                           ;train_move_left.c: 230: break;
  7195  0030D4  D007               	goto	l8127
  7196  0030D6                     l8125:
  7197  0030D6  5037               	movf	_Switch_Moutain,w,c
  7198                           
  7199                           ; Switch size 1, requested type "space"
  7200                           ; Number of cases is 2, Range of values is 0 to 1
  7201                           ; switch strategies available:
  7202                           ; Name         Instructions Cycles
  7203                           ; simple_byte            7     4 (average)
  7204                           ;	Chosen strategy is simple_byte
  7205  0030D8  0A00               	xorlw	0	; case 0
  7206  0030DA  B4D8               	btfsc	status,2,c
  7207  0030DC  D781               	goto	l8073
  7208  0030DE  0A01               	xorlw	1	; case 1
  7209  0030E0  B4D8               	btfsc	status,2,c
  7210  0030E2  D79B               	goto	l8085
  7211  0030E4                     l8127:
  7212                           
  7213                           ;train_move_left.c: 236: return(Return_Val);
  7214  0030E4  0100               	movlb	0	; () banked
  7215  0030E6  51A6               	movf	Left_Mountain_From_The_Right@Return_Val& (0+255),w,b
  7216  0030E8  0012               	return	
  7217  0030EA                     __end_of_Left_Mountain_From_The_Right:
  7218                           	opt stack 0
  7219                           tblptru	equ	0xFF8
  7220                           tblptrh	equ	0xFF7
  7221                           tblptrl	equ	0xFF6
  7222                           tablat	equ	0xFF5
  7223                           postinc0	equ	0xFEE
  7224                           wreg	equ	0xFE8
  7225                           postdec1	equ	0xFE5
  7226                           fsr1l	equ	0xFE1
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _Left_Mountain_From_The_Left *****************
  7230 ;; Defined at:
  7231 ;;		line 104 in file "../train_move_right.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  rc              1    wreg     unsigned char 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  rc              1   13[BANK0 ] unsigned char 
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      unsigned char 
  7238 ;; Registers used:
  7239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7245 ;;      Params:         0       0       0       0       0       0       0       0       0
  7246 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7248 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7249 ;;Total ram usage:        1 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    5
  7252 ;; This function calls:
  7253 ;;		_GETxAPIxVAL
  7254 ;;		_SETxPWM
  7255 ;; This function is called by:
  7256 ;;		_Train_Path
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           	psect	text10
  7261  002EC8                     __ptext10:
  7262                           	opt stack 0
  7263  002EC8                     _Left_Mountain_From_The_Left:
  7264                           	opt stack 23
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;incstack = 0
  7268                           ;Left_Mountain_From_The_Left@rc stored from wreg
  7269  002EC8  0100               	movlb	0	; () banked
  7270  002ECA  6F6D               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  7271                           
  7272                           ;train_move_right.c: 106: static char Return_Val = 1;
  7273                           ;train_move_right.c: 108: switch (Switch_Moutain){
  7274  002ECC  D07C               	goto	l7945
  7275  002ECE                     l7893:
  7276  002ECE  0E02               	movlw	2
  7277  002ED0  0100               	movlb	0	; () banked
  7278  002ED2  196D               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7279  002ED4  B4D8               	btfsc	status,2,c
  7280  002ED6  D00D               	goto	l7899
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(43)){
  7284                           
  7285                           ; BSR set to: 0
  7286                           
  7287                           ;train_move_right.c: 112: }
  7288                           
  7289                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;train_move_right.c: 110: Switch_Moutain = 1;
  7293  002ED8  0E2B               	movlw	43
  7294  002EDA  EC2B  F01C         	call	_GETxAPIxVAL
  7295  002EDE  0100               	movlb	0	; () banked
  7296  002EE0  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7297  002EE2  0100               	movlb	0	; () banked
  7298  002EE4  5D96               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  7299  002EE6  0100               	movlb	0	; () banked
  7300  002EE8  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7301  002EEA  0100               	movlb	0	; () banked
  7302  002EEC  5997               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  7303  002EEE  A0D8               	btfss	status,0,c
  7304  002EF0  D008               	goto	l7901
  7305  002EF2                     l7899:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;train_move_right.c: 114: Switch_Moutain = 1;
  7309  002EF2  0E01               	movlw	1
  7310  002EF4  6E37               	movwf	_Switch_Moutain,c
  7311                           
  7312                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  7313  002EF6  0E00               	movlw	0
  7314  002EF8  0100               	movlb	0	; () banked
  7315  002EFA  6F97               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  7316  002EFC  0E00               	movlw	0
  7317  002EFE  6F96               	movwf	_Mountain_Delay_Counter& (0+255),b
  7318                           
  7319                           ;train_move_right.c: 116: }
  7320  002F00  D05E               	goto	l7941
  7321  002F02                     l7901:
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;train_move_right.c: 117: else{
  7325                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  7326  002F02  0100               	movlb	0	; () banked
  7327  002F04  4B96               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  7328  002F06  2B97               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  7329                           
  7330                           ; BSR set to: 0
  7331  002F08  D05A               	goto	l7941
  7332  002F0A                     l7905:
  7333  002F0A  0100               	movlb	0	; () banked
  7334  002F0C  056D               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7335  002F0E  A4D8               	btfss	status,2,c
  7336  002F10  D023               	goto	l7923
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  7340  002F12  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7341  002F16  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7342  002F1A  0E01               	movlw	1
  7343  002F1C  0100               	movlb	0	; () banked
  7344  002F1E  6F68               	movwf	SETxPWM@direction& (0+255),b
  7345  002F20  EC3F  F01A         	call	_SETxPWM	;wreg free
  7346                           
  7347                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(33))
  7348  002F24  0E21               	movlw	33
  7349  002F26  EC2B  F01C         	call	_GETxAPIxVAL
  7350  002F2A  5023               	movf	_Train_Move_Pwm_Count,w,c
  7351  002F2C  0100               	movlb	0	; () banked
  7352  002F2E  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7353  002F30  5024               	movf	_Train_Move_Pwm_Count+1,w,c
  7354  002F32  0100               	movlb	0	; () banked
  7355  002F34  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7356  002F36  B0D8               	btfsc	status,0,c
  7357  002F38  D028               	goto	l7929
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  7361                           
  7362                           ; BSR set to: 0
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;train_move_right.c: 131: }
  7366                           
  7367                           ;train_move_right.c: 130: break;
  7368                           
  7369                           ;train_move_right.c: 129: Return_Val = 0;
  7370                           
  7371                           ;train_move_right.c: 128: Switch_Moutain = 0;
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;train_move_right.c: 126: {
  7375                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  7376  002F3A  0E0A               	movlw	10
  7377  002F3C  EC2B  F01C         	call	_GETxAPIxVAL
  7378  002F40  0100               	movlb	0	; () banked
  7379  002F42  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7380  002F44  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  7381  002F46  0100               	movlb	0	; () banked
  7382  002F48  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7383  002F4A  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  7384  002F4C  A0D8               	btfss	status,0,c
  7385  002F4E  D035               	goto	l7939
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;train_move_right.c: 133: {
  7389                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  7390  002F50  0623               	decf	_Train_Move_Pwm_Count,f,c
  7391  002F52  A0D8               	btfss	status,0,c
  7392  002F54  0624               	decf	_Train_Move_Pwm_Count+1,f,c
  7393  002F56  D02C               	goto	l7937
  7394  002F58                     l7923:
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;train_move_right.c: 139: else if (rc == 2){
  7398  002F58  0E02               	movlw	2
  7399  002F5A  0100               	movlb	0	; () banked
  7400  002F5C  196D               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7401  002F5E  A4D8               	btfss	status,2,c
  7402  002F60  D02E               	goto	l7941
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  7406  002F62  C023  F066         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7407  002F66  C024  F067         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7408  002F6A  0E01               	movlw	1
  7409  002F6C  0100               	movlb	0	; () banked
  7410  002F6E  6F68               	movwf	SETxPWM@direction& (0+255),b
  7411  002F70  EC3F  F01A         	call	_SETxPWM	;wreg free
  7412                           
  7413                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(7))
  7414  002F74  0E07               	movlw	7
  7415  002F76  EC2B  F01C         	call	_GETxAPIxVAL
  7416  002F7A  0100               	movlb	0	; () banked
  7417  002F7C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7418  002F7E  5C23               	subwf	_Train_Move_Pwm_Count,w,c
  7419  002F80  0100               	movlb	0	; () banked
  7420  002F82  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7421  002F84  5824               	subwfb	_Train_Move_Pwm_Count+1,w,c
  7422  002F86  A0D8               	btfss	status,0,c
  7423  002F88  D006               	goto	l7933
  7424  002F8A                     l7929:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;train_move_right.c: 142: {
  7428                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  7429  002F8A  0E00               	movlw	0
  7430  002F8C  6E39               	movwf	_Switch_Train_Move,c
  7431                           
  7432                           ;train_move_right.c: 144: Switch_Moutain = 0;
  7433  002F8E  0E00               	movlw	0
  7434  002F90  6E37               	movwf	_Switch_Moutain,c
  7435                           
  7436                           ;train_move_right.c: 145: Return_Val = 0;
  7437  002F92  0E00               	movlw	0
  7438  002F94  D015               	goto	L87
  7439  002F96                     l7933:
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  7443  002F96  0E0A               	movlw	10
  7444  002F98  EC2B  F01C         	call	_GETxAPIxVAL
  7445  002F9C  0100               	movlb	0	; () banked
  7446  002F9E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7447  002FA0  5C25               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  7448  002FA2  0100               	movlb	0	; () banked
  7449  002FA4  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7450  002FA6  5826               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  7451  002FA8  A0D8               	btfss	status,0,c
  7452  002FAA  D007               	goto	l7939
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;train_move_right.c: 149: {
  7456                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  7457  002FAC  4A23               	infsnz	_Train_Move_Pwm_Count,f,c
  7458  002FAE  2A24               	incf	_Train_Move_Pwm_Count+1,f,c
  7459  002FB0                     l7937:
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  7463  002FB0  0E00               	movlw	0
  7464  002FB2  6E26               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  7465  002FB4  0E00               	movlw	0
  7466  002FB6  6E25               	movwf	_Train_Move_Pwm_Fast_Count,c
  7467                           
  7468                           ;train_move_right.c: 152: }
  7469  002FB8  D002               	goto	l7941
  7470  002FBA                     l7939:
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  7474  002FBA  4A25               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  7475  002FBC  2A26               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  7476  002FBE                     l7941:
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;train_move_right.c: 154: }
  7480                           ;train_move_right.c: 155: Return_Val = 1;
  7481  002FBE  0E01               	movlw	1
  7482  002FC0                     L87:
  7483  002FC0  0100               	movlb	0	; () banked
  7484  002FC2  6FA5               	movwf	Left_Mountain_From_The_Left@Return_Val& (0+255),b
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;train_move_right.c: 160: }
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;train_move_right.c: 159: break;
  7491                           
  7492                           ;train_move_right.c: 158: default:
  7493                           
  7494                           ;train_move_right.c: 156: break;
  7495  002FC4  D007               	goto	l7947
  7496  002FC6                     l7945:
  7497  002FC6  5037               	movf	_Switch_Moutain,w,c
  7498                           
  7499                           ; Switch size 1, requested type "space"
  7500                           ; Number of cases is 2, Range of values is 0 to 1
  7501                           ; switch strategies available:
  7502                           ; Name         Instructions Cycles
  7503                           ; simple_byte            7     4 (average)
  7504                           ;	Chosen strategy is simple_byte
  7505  002FC8  0A00               	xorlw	0	; case 0
  7506  002FCA  B4D8               	btfsc	status,2,c
  7507  002FCC  D780               	goto	l7893
  7508  002FCE  0A01               	xorlw	1	; case 1
  7509  002FD0  B4D8               	btfsc	status,2,c
  7510  002FD2  D79B               	goto	l7905
  7511  002FD4                     l7947:
  7512                           
  7513                           ;train_move_right.c: 162: return(Return_Val);
  7514  002FD4  0100               	movlb	0	; () banked
  7515  002FD6  51A5               	movf	Left_Mountain_From_The_Left@Return_Val& (0+255),w,b
  7516  002FD8  0012               	return	
  7517  002FDA                     __end_of_Left_Mountain_From_The_Left:
  7518                           	opt stack 0
  7519                           tblptru	equ	0xFF8
  7520                           tblptrh	equ	0xFF7
  7521                           tblptrl	equ	0xFF6
  7522                           tablat	equ	0xFF5
  7523                           postinc0	equ	0xFEE
  7524                           wreg	equ	0xFE8
  7525                           postdec1	equ	0xFE5
  7526                           fsr1l	equ	0xFE1
  7527                           status	equ	0xFD8
  7528                           
  7529 ;; *************** function _SETxPWM *****************
  7530 ;; Defined at:
  7531 ;;		line 20 in file "../set_pwm.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  speed           2    6[BANK0 ] unsigned int 
  7534 ;;  direction       1    8[BANK0 ] unsigned char 
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;  pwm_speed       2   11[BANK0 ] unsigned int 
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      void 
  7539 ;; Registers used:
  7540 ;;		wreg, status,2, status,0, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7546 ;;      Params:         0       3       0       0       0       0       0       0       0
  7547 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7548 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7549 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7550 ;;Total ram usage:        7 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    4
  7553 ;; This function calls:
  7554 ;;		_SetDCPWM1
  7555 ;; This function is called by:
  7556 ;;		_Train_Move_Left_Start
  7557 ;;		_Right_Mountain_From_The_Right
  7558 ;;		_Left_Mountain_From_The_Right
  7559 ;;		_Train_Move_Left_Brake
  7560 ;;		_Train_Move_Right_Start
  7561 ;;		_Left_Mountain_From_The_Left
  7562 ;;		_Right_Mountain_From_The_Left
  7563 ;;		_Train_Move_Right_Brake
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           	psect	text11
  7568  00347E                     __ptext11:
  7569                           	opt stack 0
  7570  00347E                     _SETxPWM:
  7571                           	opt stack 23
  7572                           
  7573                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;incstack = 0
  7577  00347E  0E01               	movlw	1
  7578  003480  0100               	movlb	0	; () banked
  7579  003482  6F6C               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7580  003484  696B               	setf	SETxPWM@pwm_speed& (0+255),b
  7581                           
  7582                           ;set_pwm.c: 24: if (direction == 0){
  7583  003486  0100               	movlb	0	; () banked
  7584  003488  5168               	movf	SETxPWM@direction& (0+255),w,b
  7585  00348A  0100               	movlb	0	; () banked
  7586  00348C  A4D8               	btfss	status,2,c
  7587  00348E  D01E               	goto	l7627
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;set_pwm.c: 25: pwm_speed = 511 - (speed * 2);
  7591  003490  C066  F069         	movff	SETxPWM@speed,??_SETxPWM
  7592  003494  C067  F06A         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7593  003498  90D8               	bcf	status,0,c
  7594  00349A  0100               	movlb	0	; () banked
  7595  00349C  3769               	rlcf	??_SETxPWM& (0+255),f,b
  7596  00349E  376A               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  7597  0034A0  0100               	movlb	0	; () banked
  7598  0034A2  1F69               	comf	??_SETxPWM& (0+255),f,b
  7599  0034A4  1F6A               	comf	(??_SETxPWM+1)& (0+255),f,b
  7600  0034A6  4B69               	infsnz	??_SETxPWM& (0+255),f,b
  7601  0034A8  2B6A               	incf	(??_SETxPWM+1)& (0+255),f,b
  7602  0034AA  0EFF               	movlw	255
  7603  0034AC  0100               	movlb	0	; () banked
  7604  0034AE  2569               	addwf	??_SETxPWM& (0+255),w,b
  7605  0034B0  0100               	movlb	0	; () banked
  7606  0034B2  6F6B               	movwf	SETxPWM@pwm_speed& (0+255),b
  7607  0034B4  0E01               	movlw	1
  7608  0034B6  0100               	movlb	0	; () banked
  7609  0034B8  216A               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  7610  0034BA  0100               	movlb	0	; () banked
  7611  0034BC  6F6C               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;set_pwm.c: 26: SetDCPWM1(pwm_speed);
  7615  0034BE  C06B  F060         	movff	SETxPWM@pwm_speed,SetDCPWM1@dutycycle
  7616  0034C2  C06C  F061         	movff	SETxPWM@pwm_speed+1,SetDCPWM1@dutycycle+1
  7617  0034C6  EC78  F01B         	call	_SetDCPWM1	;wreg free
  7618                           
  7619                           ;set_pwm.c: 27: }
  7620  0034CA  0012               	return	
  7621  0034CC                     l7627:
  7622                           
  7623                           ;set_pwm.c: 28: else if (direction == 1){
  7624  0034CC  0100               	movlb	0	; () banked
  7625  0034CE  0568               	decf	SETxPWM@direction& (0+255),w,b
  7626  0034D0  A4D8               	btfss	status,2,c
  7627  0034D2  0012               	return	
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;set_pwm.c: 29: pwm_speed = 511 + (speed * 2);
  7631  0034D4  C066  F069         	movff	SETxPWM@speed,??_SETxPWM
  7632  0034D8  C067  F06A         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7633  0034DC  90D8               	bcf	status,0,c
  7634  0034DE  0100               	movlb	0	; () banked
  7635  0034E0  3769               	rlcf	??_SETxPWM& (0+255),f,b
  7636  0034E2  376A               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  7637  0034E4  0EFF               	movlw	255
  7638  0034E6  0100               	movlb	0	; () banked
  7639  0034E8  2569               	addwf	??_SETxPWM& (0+255),w,b
  7640  0034EA  0100               	movlb	0	; () banked
  7641  0034EC  6F6B               	movwf	SETxPWM@pwm_speed& (0+255),b
  7642  0034EE  0E01               	movlw	1
  7643  0034F0  0100               	movlb	0	; () banked
  7644  0034F2  216A               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  7645  0034F4  0100               	movlb	0	; () banked
  7646  0034F6  6F6C               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;set_pwm.c: 30: SetDCPWM1(pwm_speed);
  7650  0034F8  C06B  F060         	movff	SETxPWM@pwm_speed,SetDCPWM1@dutycycle
  7651  0034FC  C06C  F061         	movff	SETxPWM@pwm_speed+1,SetDCPWM1@dutycycle+1
  7652  003500  EC78  F01B         	call	_SetDCPWM1	;wreg free
  7653  003504  0012               	return	
  7654  003506                     __end_of_SETxPWM:
  7655                           	opt stack 0
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           postdec1	equ	0xFE5
  7663                           fsr1l	equ	0xFE1
  7664                           status	equ	0xFD8
  7665                           
  7666 ;; *************** function _SetDCPWM1 *****************
  7667 ;; Defined at:
  7668 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic18\plib\PWM\pw1setdc.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, status,2, status,0
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7682 ;;      Params:         0       2       0       0       0       0       0       0       0
  7683 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7684 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7685 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7686 ;;Total ram usage:        6 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; Hardware stack levels required when called:    3
  7689 ;; This function calls:
  7690 ;;		Nothing
  7691 ;; This function is called by:
  7692 ;;		_SETxPWM
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           	psect	text12
  7697  0036F0                     __ptext12:
  7698                           	opt stack 0
  7699  0036F0                     _SetDCPWM1:
  7700                           	opt stack 23
  7701                           
  7702                           ;incstack = 0
  7703  0036F0  C060  F062         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  7704  0036F4  C061  F063         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  7705  0036F8  0E06               	movlw	6
  7706  0036FA                     u5935:
  7707  0036FA  90D8               	bcf	status,0,c
  7708  0036FC  0100               	movlb	0	; () banked
  7709  0036FE  3762               	rlcf	??_SetDCPWM1& (0+255),f,b
  7710  003700  3763               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  7711  003702  2EE8               	decfsz	wreg,f,c
  7712  003704  D7FA               	goto	u5935
  7713  003706  C062  F064         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  7714  00370A  C063  F065         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  7715                           
  7716                           ; BSR set to: 0
  7717  00370E  C065  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  7718  003712  C064  F062         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  7719  003716  0100               	movlb	0	; () banked
  7720  003718  90D8               	bcf	status,0,c
  7721  00371A  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  7722  00371C  0100               	movlb	0	; () banked
  7723  00371E  90D8               	bcf	status,0,c
  7724  003720  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  7725  003722  0E30               	movlw	48
  7726  003724  0100               	movlb	0	; () banked
  7727  003726  1762               	andwf	??_SetDCPWM1& (0+255),f,b
  7728  003728  50BD               	movf	4029,w,c	;volatile
  7729  00372A  0BCF               	andlw	207
  7730  00372C  0100               	movlb	0	; () banked
  7731  00372E  1162               	iorwf	??_SetDCPWM1& (0+255),w,b
  7732  003730  6EBD               	movwf	4029,c	;volatile
  7733                           
  7734                           ; BSR set to: 0
  7735  003732  0012               	return		;funcret
  7736  003734                     __end_of_SetDCPWM1:
  7737                           	opt stack 0
  7738                           tblptru	equ	0xFF8
  7739                           tblptrh	equ	0xFF7
  7740                           tblptrl	equ	0xFF6
  7741                           tablat	equ	0xFF5
  7742                           postinc0	equ	0xFEE
  7743                           wreg	equ	0xFE8
  7744                           postdec1	equ	0xFE5
  7745                           fsr1l	equ	0xFE1
  7746                           status	equ	0xFD8
  7747                           
  7748 ;; *************** function _Junction *****************
  7749 ;; Defined at:
  7750 ;;		line 23 in file "../junction.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  Junction_Lef    1    wreg     unsigned char 
  7753 ;;  Straight_Ben    1    2[BANK0 ] unsigned char 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  Junction_Lef    1    3[BANK0 ] unsigned char 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      unsigned char 
  7758 ;; Registers used:
  7759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7765 ;;      Params:         0       1       0       0       0       0       0       0       0
  7766 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7768 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7769 ;;Total ram usage:        2 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    4
  7772 ;; This function calls:
  7773 ;;		_GETxAPIxVAL
  7774 ;; This function is called by:
  7775 ;;		_Train_Path
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           	psect	text13
  7780  0031BC                     __ptext13:
  7781                           	opt stack 0
  7782  0031BC                     _Junction:
  7783                           	opt stack 24
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;incstack = 0
  7787                           ;Junction@Junction_Left_Right stored from wreg
  7788  0031BC  0100               	movlb	0	; () banked
  7789  0031BE  6F63               	movwf	Junction@Junction_Left_Right& (0+255),b
  7790                           
  7791                           ;junction.c: 25: static char Return_Val = 1;
  7792                           ;junction.c: 26: static unsigned int Junction_Switch_Time = 0;
  7793                           ;junction.c: 28: switch (Switch_Junction)
  7794  0031C0  D056               	goto	l7669
  7795  0031C2                     l7641:
  7796  0031C2  0E01               	movlw	1
  7797  0031C4  0100               	movlb	0	; () banked
  7798  0031C6  6FA4               	movwf	Junction@Return_Val& (0+255),b
  7799                           
  7800                           ;junction.c: 31: switch (Junction_Left_Right)
  7801  0031C8  D01A               	goto	l7653
  7802  0031CA                     l944:
  7803                           
  7804                           ; BSR set to: 0
  7805  0031CA  8680               	bsf	3968,3,c	;volatile
  7806  0031CC  D020               	goto	l7655
  7807  0031CE                     l946:
  7808                           
  7809                           ; BSR set to: 0
  7810  0031CE  8480               	bsf	3968,2,c	;volatile
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;junction.c: 38: }
  7814                           
  7815                           ; BSR set to: 0
  7816                           
  7817                           ;junction.c: 37: default : break;
  7818  0031D0  D01E               	goto	l7655
  7819  0031D2                     l7645:
  7820                           
  7821                           ; BSR set to: 0
  7822  0031D2  0100               	movlb	0	; () banked
  7823  0031D4  5162               	movf	Junction@Straight_Bend& (0+255),w,b
  7824                           
  7825                           ; Switch size 1, requested type "space"
  7826                           ; Number of cases is 2, Range of values is 0 to 1
  7827                           ; switch strategies available:
  7828                           ; Name         Instructions Cycles
  7829                           ; simple_byte            7     4 (average)
  7830                           ;	Chosen strategy is simple_byte
  7831  0031D6  0A00               	xorlw	0	; case 0
  7832  0031D8  B4D8               	btfsc	status,2,c
  7833  0031DA  D7F7               	goto	l944
  7834  0031DC  0A01               	xorlw	1	; case 1
  7835  0031DE  B4D8               	btfsc	status,2,c
  7836  0031E0  D7F6               	goto	l946
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;junction.c: 39: break;
  7840  0031E2  D015               	goto	l7655
  7841  0031E4                     l951:
  7842                           
  7843                           ; BSR set to: 0
  7844  0031E4  8280               	bsf	3968,1,c	;volatile
  7845  0031E6  D013               	goto	l7655
  7846  0031E8                     l953:
  7847                           
  7848                           ; BSR set to: 0
  7849  0031E8  8080               	bsf	3968,0,c	;volatile
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;junction.c: 46: }
  7853                           
  7854                           ; BSR set to: 0
  7855                           
  7856                           ;junction.c: 45: default : break;
  7857  0031EA  D011               	goto	l7655
  7858  0031EC                     l7649:
  7859                           
  7860                           ; BSR set to: 0
  7861  0031EC  0100               	movlb	0	; () banked
  7862  0031EE  5162               	movf	Junction@Straight_Bend& (0+255),w,b
  7863                           
  7864                           ; Switch size 1, requested type "space"
  7865                           ; Number of cases is 2, Range of values is 0 to 1
  7866                           ; switch strategies available:
  7867                           ; Name         Instructions Cycles
  7868                           ; simple_byte            7     4 (average)
  7869                           ;	Chosen strategy is simple_byte
  7870  0031F0  0A00               	xorlw	0	; case 0
  7871  0031F2  B4D8               	btfsc	status,2,c
  7872  0031F4  D7F7               	goto	l951
  7873  0031F6  0A01               	xorlw	1	; case 1
  7874  0031F8  B4D8               	btfsc	status,2,c
  7875  0031FA  D7F6               	goto	l953
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;junction.c: 50: }
  7879                           
  7880                           ; BSR set to: 0
  7881                           
  7882                           ;junction.c: 49: default : break;
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;junction.c: 47: break;
  7886  0031FC  D008               	goto	l7655
  7887  0031FE                     l7653:
  7888                           
  7889                           ; BSR set to: 0
  7890  0031FE  0100               	movlb	0	; () banked
  7891  003200  5163               	movf	Junction@Junction_Left_Right& (0+255),w,b
  7892                           
  7893                           ; Switch size 1, requested type "space"
  7894                           ; Number of cases is 2, Range of values is 0 to 1
  7895                           ; switch strategies available:
  7896                           ; Name         Instructions Cycles
  7897                           ; simple_byte            7     4 (average)
  7898                           ;	Chosen strategy is simple_byte
  7899  003202  0A00               	xorlw	0	; case 0
  7900  003204  B4D8               	btfsc	status,2,c
  7901  003206  D7E5               	goto	l7645
  7902  003208  0A01               	xorlw	1	; case 1
  7903  00320A  B4D8               	btfsc	status,2,c
  7904  00320C  D7EF               	goto	l7649
  7905  00320E                     l7655:
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;junction.c: 51: Switch_Junction = 1;
  7909  00320E  0E01               	movlw	1
  7910  003210  0100               	movlb	0	; () banked
  7911  003212  6FA0               	movwf	_Switch_Junction& (0+255),b
  7912                           
  7913                           ;junction.c: 52: break;
  7914  003214  D037               	goto	l7671
  7915  003216                     l7657:
  7916                           
  7917                           ; BSR set to: 0
  7918  003216  0E03               	movlw	3
  7919  003218  EC2B  F01C         	call	_GETxAPIxVAL
  7920  00321C  0100               	movlb	0	; () banked
  7921  00321E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  7922  003220  0100               	movlb	0	; () banked
  7923  003222  5D86               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7924  003224  0100               	movlb	0	; () banked
  7925  003226  5161               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7926  003228  0100               	movlb	0	; () banked
  7927  00322A  5987               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7928  00322C  A0D8               	btfss	status,0,c
  7929  00322E  D00A               	goto	l7661
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;junction.c: 55: {
  7933                           ;junction.c: 56: Switch_Junction = 2;
  7934  003230  0E02               	movlw	2
  7935  003232  0100               	movlb	0	; () banked
  7936  003234  6FA0               	movwf	_Switch_Junction& (0+255),b
  7937                           
  7938                           ;junction.c: 57: Junction_Switch_Time = 0;
  7939  003236  0E00               	movlw	0
  7940  003238  0100               	movlb	0	; () banked
  7941  00323A  6F87               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7942  00323C  0E00               	movlw	0
  7943  00323E  6F86               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7944                           
  7945                           ;junction.c: 58: Return_Val = 1;
  7946  003240  0E01               	movlw	1
  7947  003242  D012               	goto	L88
  7948  003244                     l7661:
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;junction.c: 60: }
  7952                           ;junction.c: 61: Return_Val = 1;
  7953  003244  0E01               	movlw	1
  7954  003246  0100               	movlb	0	; () banked
  7955  003248  6FA4               	movwf	Junction@Return_Val& (0+255),b
  7956                           
  7957                           ;junction.c: 62: Switch_Junction = 1;
  7958  00324A  0E01               	movlw	1
  7959  00324C  0100               	movlb	0	; () banked
  7960  00324E  6FA0               	movwf	_Switch_Junction& (0+255),b
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;junction.c: 63: Junction_Switch_Time++;
  7964  003250  0100               	movlb	0	; () banked
  7965  003252  4B86               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7966  003254  2B87               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7967                           
  7968                           ;junction.c: 64: break;
  7969  003256  D016               	goto	l7671
  7970  003258                     l959:
  7971                           
  7972                           ; BSR set to: 0
  7973  003258  9680               	bcf	3968,3,c	;volatile
  7974                           
  7975                           ;junction.c: 67: PORTAbits.RA2 = 0;
  7976  00325A  9480               	bcf	3968,2,c	;volatile
  7977                           
  7978                           ;junction.c: 68: PORTAbits.RA1 = 0;
  7979  00325C  9280               	bcf	3968,1,c	;volatile
  7980                           
  7981                           ;junction.c: 69: PORTAbits.RA0 = 0;
  7982  00325E  9080               	bcf	3968,0,c	;volatile
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;junction.c: 70: Switch_Junction = 0;
  7986  003260  0E00               	movlw	0
  7987  003262  0100               	movlb	0	; () banked
  7988  003264  6FA0               	movwf	_Switch_Junction& (0+255),b
  7989                           
  7990                           ;junction.c: 71: Return_Val = 0;
  7991  003266  0E00               	movlw	0
  7992  003268                     L88:
  7993  003268  0100               	movlb	0	; () banked
  7994  00326A  6FA4               	movwf	Junction@Return_Val& (0+255),b
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;junction.c: 75: }
  7998                           
  7999                           ; BSR set to: 0
  8000                           
  8001                           ;junction.c: 74: default : break;
  8002                           
  8003                           ;junction.c: 72: break;
  8004  00326C  D00B               	goto	l7671
  8005  00326E                     l7669:
  8006  00326E  0100               	movlb	0	; () banked
  8007  003270  51A0               	movf	_Switch_Junction& (0+255),w,b
  8008                           
  8009                           ; Switch size 1, requested type "space"
  8010                           ; Number of cases is 3, Range of values is 0 to 2
  8011                           ; switch strategies available:
  8012                           ; Name         Instructions Cycles
  8013                           ; simple_byte           10     6 (average)
  8014                           ;	Chosen strategy is simple_byte
  8015  003272  0A00               	xorlw	0	; case 0
  8016  003274  B4D8               	btfsc	status,2,c
  8017  003276  D7A5               	goto	l7641
  8018  003278  0A01               	xorlw	1	; case 1
  8019  00327A  B4D8               	btfsc	status,2,c
  8020  00327C  D7CC               	goto	l7657
  8021  00327E  0A03               	xorlw	3	; case 2
  8022  003280  B4D8               	btfsc	status,2,c
  8023  003282  D7EA               	goto	l959
  8024  003284                     l7671:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;junction.c: 77: return (Return_Val);
  8028  003284  0100               	movlb	0	; () banked
  8029  003286  51A4               	movf	Junction@Return_Val& (0+255),w,b
  8030  003288  0012               	return	
  8031  00328A                     __end_of_Junction:
  8032                           	opt stack 0
  8033                           tblptru	equ	0xFF8
  8034                           tblptrh	equ	0xFF7
  8035                           tblptrl	equ	0xFF6
  8036                           tablat	equ	0xFF5
  8037                           postinc0	equ	0xFEE
  8038                           wreg	equ	0xFE8
  8039                           postdec1	equ	0xFE5
  8040                           fsr1l	equ	0xFE1
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function _Red_Led *****************
  8044 ;; Defined at:
  8045 ;;		line 97 in file "../io.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;  Operation       1    wreg     unsigned char 
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  Operation       1   31[COMRAM] unsigned char 
  8050 ;; Return value:  Size  Location     Type
  8051 ;;                  1    wreg      void 
  8052 ;; Registers used:
  8053 ;;		wreg, status,2, status,0
  8054 ;; Tracked objects:
  8055 ;;		On entry : 0/0
  8056 ;;		On exit  : 0/0
  8057 ;;		Unchanged: 0/0
  8058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8059 ;;      Params:         0       0       0       0       0       0       0       0       0
  8060 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8062 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8063 ;;Total ram usage:        1 bytes
  8064 ;; Hardware stack levels used:    1
  8065 ;; Hardware stack levels required when called:    3
  8066 ;; This function calls:
  8067 ;;		Nothing
  8068 ;; This function is called by:
  8069 ;;		_Update_StateMchn
  8070 ;; This function uses a non-reentrant model
  8071 ;;
  8072                           
  8073                           	psect	text14
  8074  00334E                     __ptext14:
  8075                           	opt stack 0
  8076  00334E                     _Red_Led:
  8077                           	opt stack 26
  8078                           
  8079                           ; BSR set to: 0
  8080                           ;incstack = 0
  8081                           ;Red_Led@Operation stored from wreg
  8082  00334E  6E20               	movwf	Red_Led@Operation,c
  8083                           
  8084                           ;io.c: 99: switch(Operation)
  8085  003350  D03C               	goto	l5559
  8086  003352                     l774:
  8087  003352  9A83               	bcf	3971,5,c	;volatile
  8088  003354  0012               	return	
  8089  003356                     l776:
  8090  003356  8A83               	bsf	3971,5,c	;volatile
  8091  003358  0012               	return	
  8092  00335A                     l5537:
  8093  00335A  0100               	movlb	0	; () banked
  8094  00335C  4B98               	infsnz	_Red_Led_Counter& (0+255),f,b
  8095  00335E  2B99               	incf	(_Red_Led_Counter+1)& (0+255),f,b
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  8099  003360  0EB8               	movlw	184
  8100  003362  0100               	movlb	0	; () banked
  8101  003364  5D98               	subwf	_Red_Led_Counter& (0+255),w,b
  8102  003366  0E0B               	movlw	11
  8103  003368  0100               	movlb	0	; () banked
  8104  00336A  5999               	subwfb	(_Red_Led_Counter+1)& (0+255),w,b
  8105  00336C  A0D8               	btfss	status,0,c
  8106  00336E  D005               	goto	l5543
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;io.c: 107: {
  8110                           ;io.c: 108: Red_Led_Counter = 0;
  8111  003370  0E00               	movlw	0
  8112  003372  0100               	movlb	0	; () banked
  8113  003374  6F99               	movwf	(_Red_Led_Counter+1)& (0+255),b
  8114  003376  0E00               	movlw	0
  8115  003378  6F98               	movwf	_Red_Led_Counter& (0+255),b
  8116  00337A                     l5543:
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;io.c: 109: }
  8120                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  8121  00337A  0EDC               	movlw	220
  8122  00337C  0100               	movlb	0	; () banked
  8123  00337E  5D98               	subwf	_Red_Led_Counter& (0+255),w,b
  8124  003380  0E05               	movlw	5
  8125  003382  0100               	movlb	0	; () banked
  8126  003384  5999               	subwfb	(_Red_Led_Counter+1)& (0+255),w,b
  8127  003386  A0D8               	btfss	status,0,c
  8128  003388  D002               	goto	l779
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;io.c: 111: {
  8132                           ;io.c: 112: PORTDbits.RD5 = 1;
  8133  00338A  8A83               	bsf	3971,5,c	;volatile
  8134                           
  8135                           ;io.c: 113: }
  8136  00338C  0012               	return	
  8137  00338E                     l779:
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  8141  00338E  9A83               	bcf	3971,5,c	;volatile
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;io.c: 115: break;
  8145  003390  0012               	return	
  8146  003392                     l5547:
  8147  003392  0100               	movlb	0	; () banked
  8148  003394  4B98               	infsnz	_Red_Led_Counter& (0+255),f,b
  8149  003396  2B99               	incf	(_Red_Led_Counter+1)& (0+255),f,b
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  8153  003398  0EE8               	movlw	232
  8154  00339A  0100               	movlb	0	; () banked
  8155  00339C  5D98               	subwf	_Red_Led_Counter& (0+255),w,b
  8156  00339E  0E03               	movlw	3
  8157  0033A0  0100               	movlb	0	; () banked
  8158  0033A2  5999               	subwfb	(_Red_Led_Counter+1)& (0+255),w,b
  8159  0033A4  A0D8               	btfss	status,0,c
  8160  0033A6  D005               	goto	l5553
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;io.c: 119: {
  8164                           ;io.c: 120: Red_Led_Counter = 0;
  8165  0033A8  0E00               	movlw	0
  8166  0033AA  0100               	movlb	0	; () banked
  8167  0033AC  6F99               	movwf	(_Red_Led_Counter+1)& (0+255),b
  8168  0033AE  0E00               	movlw	0
  8169  0033B0  6F98               	movwf	_Red_Led_Counter& (0+255),b
  8170  0033B2                     l5553:
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;io.c: 121: }
  8174                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  8175  0033B2  0EF4               	movlw	244
  8176  0033B4  0100               	movlb	0	; () banked
  8177  0033B6  5D98               	subwf	_Red_Led_Counter& (0+255),w,b
  8178  0033B8  0E01               	movlw	1
  8179  0033BA  0100               	movlb	0	; () banked
  8180  0033BC  5999               	subwfb	(_Red_Led_Counter+1)& (0+255),w,b
  8181  0033BE  A0D8               	btfss	status,0,c
  8182  0033C0  D002               	goto	l783
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;io.c: 123: {
  8186                           ;io.c: 124: PORTDbits.RD5 = 1;
  8187  0033C2  8A83               	bsf	3971,5,c	;volatile
  8188                           
  8189                           ;io.c: 125: }
  8190  0033C4  0012               	return	
  8191  0033C6                     l783:
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  8195  0033C6  9A83               	bcf	3971,5,c	;volatile
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;io.c: 130: }
  8199                           
  8200                           ; BSR set to: 0
  8201                           
  8202                           ;io.c: 129: default : break;
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;io.c: 127: break;
  8206  0033C8  0012               	return	
  8207  0033CA                     l5559:
  8208  0033CA  5020               	movf	Red_Led@Operation,w,c
  8209                           
  8210                           ; Switch size 1, requested type "space"
  8211                           ; Number of cases is 4, Range of values is 0 to 3
  8212                           ; switch strategies available:
  8213                           ; Name         Instructions Cycles
  8214                           ; simple_byte           13     7 (average)
  8215                           ;	Chosen strategy is simple_byte
  8216  0033CC  0A00               	xorlw	0	; case 0
  8217  0033CE  B4D8               	btfsc	status,2,c
  8218  0033D0  D7C0               	goto	l774
  8219  0033D2  0A01               	xorlw	1	; case 1
  8220  0033D4  B4D8               	btfsc	status,2,c
  8221  0033D6  D7BF               	goto	l776
  8222  0033D8  0A03               	xorlw	3	; case 2
  8223  0033DA  B4D8               	btfsc	status,2,c
  8224  0033DC  D7BE               	goto	l5537
  8225  0033DE  0A01               	xorlw	1	; case 3
  8226  0033E0  A4D8               	btfss	status,2,c
  8227  0033E2  0012               	return	
  8228  0033E4  D7D6               	goto	l5547
  8229  0033E6                     __end_of_Red_Led:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           postinc0	equ	0xFEE
  8236                           wreg	equ	0xFE8
  8237                           postdec1	equ	0xFE5
  8238                           fsr1l	equ	0xFE1
  8239                           status	equ	0xFD8
  8240                           
  8241 ;; *************** function _INCRxAPIxVAL *****************
  8242 ;; Defined at:
  8243 ;;		line 161 in file "../api.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;  index           1    wreg     unsigned char 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  index           1   35[BANK0 ] unsigned char 
  8248 ;;  value           2   33[BANK0 ] unsigned int 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  1    wreg      void 
  8251 ;; Registers used:
  8252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8258 ;;      Params:         0       0       0       0       0       0       0       0       0
  8259 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8261 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8262 ;;Total ram usage:        3 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    7
  8265 ;; This function calls:
  8266 ;;		_GETxAPIxVAL
  8267 ;;		_SETxAPIxVAL
  8268 ;; This function is called by:
  8269 ;;		_Update_StateMchn
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text15
  8274  0037FE                     __ptext15:
  8275                           	opt stack 0
  8276  0037FE                     _INCRxAPIxVAL:
  8277                           	opt stack 22
  8278                           
  8279                           ;incstack = 0
  8280                           ;INCRxAPIxVAL@index stored from wreg
  8281  0037FE  0100               	movlb	0	; () banked
  8282  003800  6F83               	movwf	INCRxAPIxVAL@index& (0+255),b
  8283                           
  8284                           ;api.c: 162: unsigned int value;
  8285                           ;api.c: 163: value = GETxAPIxVAL(index);
  8286  003802  0100               	movlb	0	; () banked
  8287  003804  5183               	movf	INCRxAPIxVAL@index& (0+255),w,b
  8288  003806  EC2B  F01C         	call	_GETxAPIxVAL
  8289  00380A  C060  F081         	movff	?_GETxAPIxVAL,INCRxAPIxVAL@value
  8290  00380E  C061  F082         	movff	?_GETxAPIxVAL+1,INCRxAPIxVAL@value+1
  8291                           
  8292                           ;api.c: 164: value++;
  8293  003812  0100               	movlb	0	; () banked
  8294  003814  4B81               	infsnz	INCRxAPIxVAL@value& (0+255),f,b
  8295  003816  2B82               	incf	(INCRxAPIxVAL@value+1)& (0+255),f,b
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;api.c: 165: SETxAPIxVAL(index, value);
  8299  003818  C081  F07C         	movff	INCRxAPIxVAL@value,SETxAPIxVAL@value
  8300  00381C  C082  F07D         	movff	INCRxAPIxVAL@value+1,SETxAPIxVAL@value+1
  8301  003820  0100               	movlb	0	; () banked
  8302  003822  5183               	movf	INCRxAPIxVAL@index& (0+255),w,b
  8303  003824  EC28  F01B         	call	_SETxAPIxVAL
  8304  003828  0012               	return		;funcret
  8305  00382A                     __end_of_INCRxAPIxVAL:
  8306                           	opt stack 0
  8307                           tblptru	equ	0xFF8
  8308                           tblptrh	equ	0xFF7
  8309                           tblptrl	equ	0xFF6
  8310                           tablat	equ	0xFF5
  8311                           postinc0	equ	0xFEE
  8312                           wreg	equ	0xFE8
  8313                           postdec1	equ	0xFE5
  8314                           fsr1l	equ	0xFE1
  8315                           status	equ	0xFD8
  8316                           
  8317 ;; *************** function _Green_Led *****************
  8318 ;; Defined at:
  8319 ;;		line 47 in file "../io.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  Operation       1    wreg     unsigned char 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  Operation       1   31[COMRAM] unsigned char 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      void 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8333 ;;      Params:         0       0       0       0       0       0       0       0       0
  8334 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8336 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8337 ;;Total ram usage:        1 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    3
  8340 ;; This function calls:
  8341 ;;		Nothing
  8342 ;; This function is called by:
  8343 ;;		_Update_StateMchn
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           	psect	text16
  8348  0033E6                     __ptext16:
  8349                           	opt stack 0
  8350  0033E6                     _Green_Led:
  8351                           	opt stack 26
  8352                           
  8353                           ;incstack = 0
  8354                           ;Green_Led@Operation stored from wreg
  8355  0033E6  6E20               	movwf	Green_Led@Operation,c
  8356                           
  8357                           ;io.c: 49: switch(Operation)
  8358  0033E8  D03C               	goto	l5533
  8359  0033EA                     l758:
  8360  0033EA  9C83               	bcf	3971,6,c	;volatile
  8361  0033EC  0012               	return	
  8362  0033EE                     l760:
  8363  0033EE  8C83               	bsf	3971,6,c	;volatile
  8364  0033F0  0012               	return	
  8365  0033F2                     l5511:
  8366  0033F2  0100               	movlb	0	; () banked
  8367  0033F4  4B92               	infsnz	_Green_Led_Counter& (0+255),f,b
  8368  0033F6  2B93               	incf	(_Green_Led_Counter+1)& (0+255),f,b
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  8372  0033F8  0EB8               	movlw	184
  8373  0033FA  0100               	movlb	0	; () banked
  8374  0033FC  5D92               	subwf	_Green_Led_Counter& (0+255),w,b
  8375  0033FE  0E0B               	movlw	11
  8376  003400  0100               	movlb	0	; () banked
  8377  003402  5993               	subwfb	(_Green_Led_Counter+1)& (0+255),w,b
  8378  003404  A0D8               	btfss	status,0,c
  8379  003406  D005               	goto	l5517
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;io.c: 57: {
  8383                           ;io.c: 58: Green_Led_Counter = 0;
  8384  003408  0E00               	movlw	0
  8385  00340A  0100               	movlb	0	; () banked
  8386  00340C  6F93               	movwf	(_Green_Led_Counter+1)& (0+255),b
  8387  00340E  0E00               	movlw	0
  8388  003410  6F92               	movwf	_Green_Led_Counter& (0+255),b
  8389  003412                     l5517:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;io.c: 59: }
  8393                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  8394  003412  0EDC               	movlw	220
  8395  003414  0100               	movlb	0	; () banked
  8396  003416  5D92               	subwf	_Green_Led_Counter& (0+255),w,b
  8397  003418  0E05               	movlw	5
  8398  00341A  0100               	movlb	0	; () banked
  8399  00341C  5993               	subwfb	(_Green_Led_Counter+1)& (0+255),w,b
  8400  00341E  A0D8               	btfss	status,0,c
  8401  003420  D002               	goto	l763
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;io.c: 61: {
  8405                           ;io.c: 62: PORTDbits.RD6 = 1;
  8406  003422  8C83               	bsf	3971,6,c	;volatile
  8407                           
  8408                           ;io.c: 63: }
  8409  003424  0012               	return	
  8410  003426                     l763:
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  8414  003426  9C83               	bcf	3971,6,c	;volatile
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;io.c: 65: break;
  8418  003428  0012               	return	
  8419  00342A                     l5521:
  8420  00342A  0100               	movlb	0	; () banked
  8421  00342C  4B92               	infsnz	_Green_Led_Counter& (0+255),f,b
  8422  00342E  2B93               	incf	(_Green_Led_Counter+1)& (0+255),f,b
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  8426  003430  0EE8               	movlw	232
  8427  003432  0100               	movlb	0	; () banked
  8428  003434  5D92               	subwf	_Green_Led_Counter& (0+255),w,b
  8429  003436  0E03               	movlw	3
  8430  003438  0100               	movlb	0	; () banked
  8431  00343A  5993               	subwfb	(_Green_Led_Counter+1)& (0+255),w,b
  8432  00343C  A0D8               	btfss	status,0,c
  8433  00343E  D005               	goto	l5527
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;io.c: 69: {
  8437                           ;io.c: 70: Green_Led_Counter = 0;
  8438  003440  0E00               	movlw	0
  8439  003442  0100               	movlb	0	; () banked
  8440  003444  6F93               	movwf	(_Green_Led_Counter+1)& (0+255),b
  8441  003446  0E00               	movlw	0
  8442  003448  6F92               	movwf	_Green_Led_Counter& (0+255),b
  8443  00344A                     l5527:
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;io.c: 71: }
  8447                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  8448  00344A  0EF4               	movlw	244
  8449  00344C  0100               	movlb	0	; () banked
  8450  00344E  5D92               	subwf	_Green_Led_Counter& (0+255),w,b
  8451  003450  0E01               	movlw	1
  8452  003452  0100               	movlb	0	; () banked
  8453  003454  5993               	subwfb	(_Green_Led_Counter+1)& (0+255),w,b
  8454  003456  A0D8               	btfss	status,0,c
  8455  003458  D002               	goto	l767
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;io.c: 73: {
  8459                           ;io.c: 74: PORTDbits.RD6 = 1;
  8460  00345A  8C83               	bsf	3971,6,c	;volatile
  8461                           
  8462                           ;io.c: 75: }
  8463  00345C  0012               	return	
  8464  00345E                     l767:
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  8468  00345E  9C83               	bcf	3971,6,c	;volatile
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;io.c: 80: }
  8472                           
  8473                           ; BSR set to: 0
  8474                           
  8475                           ;io.c: 79: default : break;
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;io.c: 77: break;
  8479  003460  0012               	return	
  8480  003462                     l5533:
  8481  003462  5020               	movf	Green_Led@Operation,w,c
  8482                           
  8483                           ; Switch size 1, requested type "space"
  8484                           ; Number of cases is 4, Range of values is 0 to 3
  8485                           ; switch strategies available:
  8486                           ; Name         Instructions Cycles
  8487                           ; simple_byte           13     7 (average)
  8488                           ;	Chosen strategy is simple_byte
  8489  003464  0A00               	xorlw	0	; case 0
  8490  003466  B4D8               	btfsc	status,2,c
  8491  003468  D7C0               	goto	l758
  8492  00346A  0A01               	xorlw	1	; case 1
  8493  00346C  B4D8               	btfsc	status,2,c
  8494  00346E  D7BF               	goto	l760
  8495  003470  0A03               	xorlw	3	; case 2
  8496  003472  B4D8               	btfsc	status,2,c
  8497  003474  D7BE               	goto	l5511
  8498  003476  0A01               	xorlw	1	; case 3
  8499  003478  A4D8               	btfss	status,2,c
  8500  00347A  0012               	return	
  8501  00347C  D7D6               	goto	l5521
  8502  00347E                     __end_of_Green_Led:
  8503                           	opt stack 0
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           postinc0	equ	0xFEE
  8509                           wreg	equ	0xFE8
  8510                           postdec1	equ	0xFE5
  8511                           fsr1l	equ	0xFE1
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function _Eeprom_Store *****************
  8515 ;; Defined at:
  8516 ;;		line 21 in file "../eeprom_settings.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;		None
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;		None
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      void 
  8523 ;; Registers used:
  8524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0
  8531 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8533 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8534 ;;Total ram usage:        0 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    4
  8537 ;; This function calls:
  8538 ;;		_GETxAPIxVAL
  8539 ;; This function is called by:
  8540 ;;		_Update_StateMchn
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text17
  8545  0030EA                     __ptext17:
  8546                           	opt stack 0
  8547  0030EA                     _Eeprom_Store:
  8548                           	opt stack 25
  8549                           
  8550                           ;eeprom_settings.c: 23: INTCON = 0x00;
  8551                           
  8552                           ;incstack = 0
  8553  0030EA  0E00               	movlw	0
  8554  0030EC  6EF2               	movwf	intcon,c	;volatile
  8555                           
  8556                           ;eeprom_settings.c: 25: EECON1bits.EEPGD = 0;
  8557  0030EE  9EA6               	bcf	4006,7,c	;volatile
  8558                           
  8559                           ;eeprom_settings.c: 26: EECON1bits.WREN = 1;
  8560  0030F0  84A6               	bsf	4006,2,c	;volatile
  8561                           
  8562                           ;eeprom_settings.c: 27: EEADR = 0x01;
  8563  0030F2  0E01               	movlw	1
  8564  0030F4  6EA9               	movwf	4009,c	;volatile
  8565                           
  8566                           ;eeprom_settings.c: 28: EEDATA = GETxAPIxVAL(7);
  8567  0030F6  0E07               	movlw	7
  8568  0030F8  EC2B  F01C         	call	_GETxAPIxVAL
  8569  0030FC  0100               	movlb	0	; () banked
  8570  0030FE  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8571  003100  6EA8               	movwf	4008,c	;volatile
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;eeprom_settings.c: 29: EECON2 = 0x55;
  8575  003102  0E55               	movlw	85
  8576  003104  6EA7               	movwf	4007,c	;volatile
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;eeprom_settings.c: 30: EECON2 = 0xaa;
  8580  003106  0EAA               	movlw	170
  8581  003108  6EA7               	movwf	4007,c	;volatile
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;eeprom_settings.c: 31: EECON1bits.WR = 1;
  8585  00310A  82A6               	bsf	4006,1,c	;volatile
  8586  00310C                     l691:
  8587  00310C  A8A1               	btfss	4001,4,c	;volatile
  8588  00310E  D7FE               	goto	l691
  8589                           
  8590                           ;eeprom_settings.c: 33: PIR2bits.EEIF = 0;
  8591  003110  98A1               	bcf	4001,4,c	;volatile
  8592                           
  8593                           ;eeprom_settings.c: 35: EECON1bits.EEPGD = 0;
  8594  003112  9EA6               	bcf	4006,7,c	;volatile
  8595                           
  8596                           ;eeprom_settings.c: 36: EECON1bits.WREN = 1;
  8597  003114  84A6               	bsf	4006,2,c	;volatile
  8598                           
  8599                           ;eeprom_settings.c: 37: EEADR = 0x00;
  8600  003116  0E00               	movlw	0
  8601  003118  6EA9               	movwf	4009,c	;volatile
  8602                           
  8603                           ;eeprom_settings.c: 38: EEDATA = GETxAPIxVAL(7)>>8;
  8604  00311A  0E07               	movlw	7
  8605  00311C  EC2B  F01C         	call	_GETxAPIxVAL
  8606  003120  0100               	movlb	0	; () banked
  8607  003122  C061  F060         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  8608  003126  0100               	movlb	0	; () banked
  8609  003128  6B61               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  8610  00312A  0100               	movlb	0	; () banked
  8611  00312C  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8612  00312E  6EA8               	movwf	4008,c	;volatile
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;eeprom_settings.c: 39: EECON2 = 0x55;
  8616  003130  0E55               	movlw	85
  8617  003132  6EA7               	movwf	4007,c	;volatile
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;eeprom_settings.c: 40: EECON2 = 0xaa;
  8621  003134  0EAA               	movlw	170
  8622  003136  6EA7               	movwf	4007,c	;volatile
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;eeprom_settings.c: 41: EECON1bits.WR = 1;
  8626  003138  82A6               	bsf	4006,1,c	;volatile
  8627  00313A                     l694:
  8628  00313A  A8A1               	btfss	4001,4,c	;volatile
  8629  00313C  D7FE               	goto	l694
  8630                           
  8631                           ;eeprom_settings.c: 43: PIR2bits.EEIF = 0;
  8632  00313E  98A1               	bcf	4001,4,c	;volatile
  8633                           
  8634                           ;eeprom_settings.c: 45: EECON1bits.EEPGD = 0;
  8635  003140  9EA6               	bcf	4006,7,c	;volatile
  8636                           
  8637                           ;eeprom_settings.c: 46: EECON1bits.WREN = 1;
  8638  003142  84A6               	bsf	4006,2,c	;volatile
  8639                           
  8640                           ;eeprom_settings.c: 47: EEADR = 0x03;
  8641  003144  0E03               	movlw	3
  8642  003146  6EA9               	movwf	4009,c	;volatile
  8643                           
  8644                           ;eeprom_settings.c: 48: EEDATA = GETxAPIxVAL(8);
  8645  003148  0E08               	movlw	8
  8646  00314A  EC2B  F01C         	call	_GETxAPIxVAL
  8647  00314E  0100               	movlb	0	; () banked
  8648  003150  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8649  003152  6EA8               	movwf	4008,c	;volatile
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;eeprom_settings.c: 49: EECON2 = 0x55;
  8653  003154  0E55               	movlw	85
  8654  003156  6EA7               	movwf	4007,c	;volatile
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;eeprom_settings.c: 50: EECON2 = 0xaa;
  8658  003158  0EAA               	movlw	170
  8659  00315A  6EA7               	movwf	4007,c	;volatile
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;eeprom_settings.c: 51: EECON1bits.WR = 1;
  8663  00315C  82A6               	bsf	4006,1,c	;volatile
  8664  00315E                     l697:
  8665  00315E  A8A1               	btfss	4001,4,c	;volatile
  8666  003160  D7FE               	goto	l697
  8667                           
  8668                           ;eeprom_settings.c: 53: PIR2bits.EEIF = 0;
  8669  003162  98A1               	bcf	4001,4,c	;volatile
  8670                           
  8671                           ;eeprom_settings.c: 55: EECON1bits.EEPGD = 0;
  8672  003164  9EA6               	bcf	4006,7,c	;volatile
  8673                           
  8674                           ;eeprom_settings.c: 56: EECON1bits.WREN = 1;
  8675  003166  84A6               	bsf	4006,2,c	;volatile
  8676                           
  8677                           ;eeprom_settings.c: 57: EEADR = 0x02;
  8678  003168  0E02               	movlw	2
  8679  00316A  6EA9               	movwf	4009,c	;volatile
  8680                           
  8681                           ;eeprom_settings.c: 58: EEDATA = GETxAPIxVAL(8)>>8;
  8682  00316C  0E08               	movlw	8
  8683  00316E  EC2B  F01C         	call	_GETxAPIxVAL
  8684  003172  0100               	movlb	0	; () banked
  8685  003174  C061  F060         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  8686  003178  0100               	movlb	0	; () banked
  8687  00317A  6B61               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  8688  00317C  0100               	movlb	0	; () banked
  8689  00317E  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8690  003180  6EA8               	movwf	4008,c	;volatile
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;eeprom_settings.c: 59: EECON2 = 0x55;
  8694  003182  0E55               	movlw	85
  8695  003184  6EA7               	movwf	4007,c	;volatile
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;eeprom_settings.c: 60: EECON2 = 0xaa;
  8699  003186  0EAA               	movlw	170
  8700  003188  6EA7               	movwf	4007,c	;volatile
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;eeprom_settings.c: 61: EECON1bits.WR = 1;
  8704  00318A  82A6               	bsf	4006,1,c	;volatile
  8705  00318C                     l700:
  8706  00318C  A8A1               	btfss	4001,4,c	;volatile
  8707  00318E  D7FE               	goto	l700
  8708                           
  8709                           ;eeprom_settings.c: 63: PIR2bits.EEIF = 0;
  8710  003190  98A1               	bcf	4001,4,c	;volatile
  8711                           
  8712                           ;eeprom_settings.c: 65: EECON1bits.EEPGD = 0;
  8713  003192  9EA6               	bcf	4006,7,c	;volatile
  8714                           
  8715                           ;eeprom_settings.c: 66: EECON1bits.WREN = 1;
  8716  003194  84A6               	bsf	4006,2,c	;volatile
  8717                           
  8718                           ;eeprom_settings.c: 67: EEADR = 0x04;
  8719  003196  0E04               	movlw	4
  8720  003198  6EA9               	movwf	4009,c	;volatile
  8721                           
  8722                           ;eeprom_settings.c: 68: EEDATA = GETxAPIxVAL(9);
  8723  00319A  0E09               	movlw	9
  8724  00319C  EC2B  F01C         	call	_GETxAPIxVAL
  8725  0031A0  0100               	movlb	0	; () banked
  8726  0031A2  5160               	movf	?_GETxAPIxVAL& (0+255),w,b
  8727  0031A4  6EA8               	movwf	4008,c	;volatile
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;eeprom_settings.c: 69: EECON2 = 0x55;
  8731  0031A6  0E55               	movlw	85
  8732  0031A8  6EA7               	movwf	4007,c	;volatile
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;eeprom_settings.c: 70: EECON2 = 0xaa;
  8736  0031AA  0EAA               	movlw	170
  8737  0031AC  6EA7               	movwf	4007,c	;volatile
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;eeprom_settings.c: 71: EECON1bits.WR = 1;
  8741  0031AE  82A6               	bsf	4006,1,c	;volatile
  8742  0031B0                     l703:
  8743  0031B0  A8A1               	btfss	4001,4,c	;volatile
  8744  0031B2  D7FE               	goto	l703
  8745                           
  8746                           ;eeprom_settings.c: 73: PIR2bits.EEIF = 0;
  8747  0031B4  98A1               	bcf	4001,4,c	;volatile
  8748                           
  8749                           ;eeprom_settings.c: 76: INTCON = 0xA0;
  8750  0031B6  0EA0               	movlw	160
  8751  0031B8  6EF2               	movwf	intcon,c	;volatile
  8752  0031BA  0012               	return		;funcret
  8753  0031BC                     __end_of_Eeprom_Store:
  8754                           	opt stack 0
  8755                           tblptru	equ	0xFF8
  8756                           tblptrh	equ	0xFF7
  8757                           tblptrl	equ	0xFF6
  8758                           tablat	equ	0xFF5
  8759                           intcon	equ	0xFF2
  8760                           postinc0	equ	0xFEE
  8761                           wreg	equ	0xFE8
  8762                           postdec1	equ	0xFE5
  8763                           fsr1l	equ	0xFE1
  8764                           status	equ	0xFD8
  8765                           
  8766 ;; *************** function _Debounce_Inputs *****************
  8767 ;; Defined at:
  8768 ;;		line 148 in file "../io.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      void 
  8775 ;; Registers used:
  8776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8782 ;;      Params:         0       0       0       0       0       0       0       0       0
  8783 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8784 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8785 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8786 ;;Total ram usage:        2 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    7
  8789 ;; This function calls:
  8790 ;;		_GETxAPIxVAL
  8791 ;;		_SETxAPIxVAL
  8792 ;; This function is called by:
  8793 ;;		_Update_StateMchn
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797                           	psect	text18
  8798  001888                     __ptext18:
  8799                           	opt stack 0
  8800  001888                     _Debounce_Inputs:
  8801                           	opt stack 22
  8802                           
  8803                           ;io.c: 150: switch(PORTDbits.RD1)
  8804                           
  8805                           ;incstack = 0
  8806  001888  D02A               	goto	l8151
  8807  00188A                     l8133:
  8808  00188A  502A               	movf	_Reed_Contact_LF_Counter,w,c
  8809  00188C  B4D8               	btfsc	status,2,c
  8810  00188E  D002               	goto	l8139
  8811                           
  8812                           ;io.c: 153: {
  8813                           ;io.c: 154: Reed_Contact_LF_Counter--;
  8814  001890  062A               	decf	_Reed_Contact_LF_Counter,f,c
  8815                           
  8816                           ;io.c: 156: }
  8817                           
  8818                           ;io.c: 155: break;
  8819  001892  D05B               	goto	l8171
  8820  001894                     l8139:
  8821                           
  8822                           ;io.c: 157: else {SETxAPIxVAL(15, 0);}
  8823  001894  0E00               	movlw	0
  8824  001896  0100               	movlb	0	; () banked
  8825  001898  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8826  00189A  0E00               	movlw	0
  8827  00189C  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8828  00189E  0E0F               	movlw	15
  8829  0018A0  EC28  F01B         	call	_SETxAPIxVAL
  8830                           
  8831                           ;io.c: 158: break;
  8832  0018A4  D052               	goto	l8171
  8833  0018A6                     l8141:
  8834  0018A6  502A               	movf	_Reed_Contact_LF_Counter,w,c
  8835  0018A8  0100               	movlb	0	; () banked
  8836  0018AA  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  8837  0018AC  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8838  0018AE  0E0B               	movlw	11
  8839  0018B0  EC2B  F01C         	call	_GETxAPIxVAL
  8840  0018B4  0100               	movlb	0	; () banked
  8841  0018B6  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  8842  0018B8  0100               	movlb	0	; () banked
  8843  0018BA  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8844  0018BC  0100               	movlb	0	; () banked
  8845  0018BE  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8846  0018C0  0100               	movlb	0	; () banked
  8847  0018C2  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8848  0018C4  A0D8               	btfss	status,0,c
  8849  0018C6  D002               	goto	l8147
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;io.c: 161: {
  8853                           ;io.c: 162: Reed_Contact_LF_Counter++;
  8854  0018C8  2A2A               	incf	_Reed_Contact_LF_Counter,f,c
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;io.c: 164: }
  8858                           
  8859                           ;io.c: 163: break;
  8860  0018CA  D03F               	goto	l8171
  8861  0018CC                     l8147:
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;io.c: 165: else {SETxAPIxVAL(15, 1);}
  8865  0018CC  0E00               	movlw	0
  8866  0018CE  0100               	movlb	0	; () banked
  8867  0018D0  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8868  0018D2  0E01               	movlw	1
  8869  0018D4  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8870  0018D6  0E0F               	movlw	15
  8871  0018D8  EC28  F01B         	call	_SETxAPIxVAL
  8872                           
  8873                           ;io.c: 169: }
  8874                           
  8875                           ;io.c: 168: default : break;
  8876                           
  8877                           ;io.c: 166: break;
  8878  0018DC  D036               	goto	l8171
  8879  0018DE                     l8151:
  8880  0018DE  A283               	btfss	3971,1,c	;volatile
  8881  0018E0  D002               	goto	u6480
  8882  0018E2  0E01               	movlw	1
  8883  0018E4  D001               	goto	u6486
  8884  0018E6                     u6480:
  8885  0018E6  0E00               	movlw	0
  8886  0018E8                     u6486:
  8887                           
  8888                           ; Switch size 1, requested type "space"
  8889                           ; Number of cases is 2, Range of values is 0 to 1
  8890                           ; switch strategies available:
  8891                           ; Name         Instructions Cycles
  8892                           ; simple_byte            7     4 (average)
  8893                           ;	Chosen strategy is simple_byte
  8894  0018E8  0A00               	xorlw	0	; case 0
  8895  0018EA  B4D8               	btfsc	status,2,c
  8896  0018EC  D7DC               	goto	l8141
  8897  0018EE  0A01               	xorlw	1	; case 1
  8898  0018F0  B4D8               	btfsc	status,2,c
  8899  0018F2  D7CB               	goto	l8133
  8900                           
  8901                           ;io.c: 172: switch(PORTDbits.RD0)
  8902  0018F4  D02A               	goto	l8171
  8903  0018F6                     l8153:
  8904  0018F6  5029               	movf	_Reed_Contact_LB_Counter,w,c
  8905  0018F8  B4D8               	btfsc	status,2,c
  8906  0018FA  D002               	goto	l8159
  8907                           
  8908                           ;io.c: 175: {
  8909                           ;io.c: 176: Reed_Contact_LB_Counter--;
  8910  0018FC  0629               	decf	_Reed_Contact_LB_Counter,f,c
  8911                           
  8912                           ;io.c: 178: }
  8913                           
  8914                           ;io.c: 177: break;
  8915  0018FE  D05B               	goto	l8191
  8916  001900                     l8159:
  8917                           
  8918                           ;io.c: 179: else {SETxAPIxVAL(14, 0);}
  8919  001900  0E00               	movlw	0
  8920  001902  0100               	movlb	0	; () banked
  8921  001904  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8922  001906  0E00               	movlw	0
  8923  001908  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8924  00190A  0E0E               	movlw	14
  8925  00190C  EC28  F01B         	call	_SETxAPIxVAL
  8926                           
  8927                           ;io.c: 180: break;
  8928  001910  D052               	goto	l8191
  8929  001912                     l8161:
  8930  001912  5029               	movf	_Reed_Contact_LB_Counter,w,c
  8931  001914  0100               	movlb	0	; () banked
  8932  001916  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  8933  001918  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8934  00191A  0E0B               	movlw	11
  8935  00191C  EC2B  F01C         	call	_GETxAPIxVAL
  8936  001920  0100               	movlb	0	; () banked
  8937  001922  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  8938  001924  0100               	movlb	0	; () banked
  8939  001926  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8940  001928  0100               	movlb	0	; () banked
  8941  00192A  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8942  00192C  0100               	movlb	0	; () banked
  8943  00192E  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8944  001930  A0D8               	btfss	status,0,c
  8945  001932  D002               	goto	l8167
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;io.c: 183: {
  8949                           ;io.c: 184: Reed_Contact_LB_Counter++;
  8950  001934  2A29               	incf	_Reed_Contact_LB_Counter,f,c
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;io.c: 186: }
  8954                           
  8955                           ;io.c: 185: break;
  8956  001936  D03F               	goto	l8191
  8957  001938                     l8167:
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;io.c: 187: else {SETxAPIxVAL(14, 1);}
  8961  001938  0E00               	movlw	0
  8962  00193A  0100               	movlb	0	; () banked
  8963  00193C  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8964  00193E  0E01               	movlw	1
  8965  001940  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  8966  001942  0E0E               	movlw	14
  8967  001944  EC28  F01B         	call	_SETxAPIxVAL
  8968                           
  8969                           ;io.c: 191: }
  8970                           
  8971                           ;io.c: 190: default : break;
  8972                           
  8973                           ;io.c: 188: break;
  8974  001948  D036               	goto	l8191
  8975  00194A                     l8171:
  8976  00194A  A083               	btfss	3971,0,c	;volatile
  8977  00194C  D002               	goto	u6510
  8978  00194E  0E01               	movlw	1
  8979  001950  D001               	goto	u6516
  8980  001952                     u6510:
  8981  001952  0E00               	movlw	0
  8982  001954                     u6516:
  8983                           
  8984                           ; Switch size 1, requested type "space"
  8985                           ; Number of cases is 2, Range of values is 0 to 1
  8986                           ; switch strategies available:
  8987                           ; Name         Instructions Cycles
  8988                           ; simple_byte            7     4 (average)
  8989                           ;	Chosen strategy is simple_byte
  8990  001954  0A00               	xorlw	0	; case 0
  8991  001956  B4D8               	btfsc	status,2,c
  8992  001958  D7DC               	goto	l8161
  8993  00195A  0A01               	xorlw	1	; case 1
  8994  00195C  B4D8               	btfsc	status,2,c
  8995  00195E  D7CB               	goto	l8153
  8996                           
  8997                           ;io.c: 194: switch(PORTDbits.RD3)
  8998  001960  D02A               	goto	l8191
  8999  001962                     l8173:
  9000  001962  502E               	movf	_Reed_Contact_RF_Counter,w,c
  9001  001964  B4D8               	btfsc	status,2,c
  9002  001966  D002               	goto	l8179
  9003                           
  9004                           ;io.c: 197: {
  9005                           ;io.c: 198: Reed_Contact_RF_Counter--;
  9006  001968  062E               	decf	_Reed_Contact_RF_Counter,f,c
  9007                           
  9008                           ;io.c: 200: }
  9009                           
  9010                           ;io.c: 199: break;
  9011  00196A  D05B               	goto	l8211
  9012  00196C                     l8179:
  9013                           
  9014                           ;io.c: 201: else {SETxAPIxVAL(13, 0);}
  9015  00196C  0E00               	movlw	0
  9016  00196E  0100               	movlb	0	; () banked
  9017  001970  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9018  001972  0E00               	movlw	0
  9019  001974  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9020  001976  0E0D               	movlw	13
  9021  001978  EC28  F01B         	call	_SETxAPIxVAL
  9022                           
  9023                           ;io.c: 202: break;
  9024  00197C  D052               	goto	l8211
  9025  00197E                     l8181:
  9026  00197E  502E               	movf	_Reed_Contact_RF_Counter,w,c
  9027  001980  0100               	movlb	0	; () banked
  9028  001982  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9029  001984  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9030  001986  0E0B               	movlw	11
  9031  001988  EC2B  F01C         	call	_GETxAPIxVAL
  9032  00198C  0100               	movlb	0	; () banked
  9033  00198E  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9034  001990  0100               	movlb	0	; () banked
  9035  001992  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9036  001994  0100               	movlb	0	; () banked
  9037  001996  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9038  001998  0100               	movlb	0	; () banked
  9039  00199A  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9040  00199C  A0D8               	btfss	status,0,c
  9041  00199E  D002               	goto	l8187
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;io.c: 205: {
  9045                           ;io.c: 206: Reed_Contact_RF_Counter++;
  9046  0019A0  2A2E               	incf	_Reed_Contact_RF_Counter,f,c
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;io.c: 208: }
  9050                           
  9051                           ;io.c: 207: break;
  9052  0019A2  D03F               	goto	l8211
  9053  0019A4                     l8187:
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;io.c: 209: else {SETxAPIxVAL(13, 1);}
  9057  0019A4  0E00               	movlw	0
  9058  0019A6  0100               	movlb	0	; () banked
  9059  0019A8  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9060  0019AA  0E01               	movlw	1
  9061  0019AC  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9062  0019AE  0E0D               	movlw	13
  9063  0019B0  EC28  F01B         	call	_SETxAPIxVAL
  9064                           
  9065                           ;io.c: 213: }
  9066                           
  9067                           ;io.c: 212: default : break;
  9068                           
  9069                           ;io.c: 210: break;
  9070  0019B4  D036               	goto	l8211
  9071  0019B6                     l8191:
  9072  0019B6  A683               	btfss	3971,3,c	;volatile
  9073  0019B8  D002               	goto	u6540
  9074  0019BA  0E01               	movlw	1
  9075  0019BC  D001               	goto	u6546
  9076  0019BE                     u6540:
  9077  0019BE  0E00               	movlw	0
  9078  0019C0                     u6546:
  9079                           
  9080                           ; Switch size 1, requested type "space"
  9081                           ; Number of cases is 2, Range of values is 0 to 1
  9082                           ; switch strategies available:
  9083                           ; Name         Instructions Cycles
  9084                           ; simple_byte            7     4 (average)
  9085                           ;	Chosen strategy is simple_byte
  9086  0019C0  0A00               	xorlw	0	; case 0
  9087  0019C2  B4D8               	btfsc	status,2,c
  9088  0019C4  D7DC               	goto	l8181
  9089  0019C6  0A01               	xorlw	1	; case 1
  9090  0019C8  B4D8               	btfsc	status,2,c
  9091  0019CA  D7CB               	goto	l8173
  9092                           
  9093                           ;io.c: 216: switch(PORTDbits.RD2)
  9094  0019CC  D02A               	goto	l8211
  9095  0019CE                     l8193:
  9096  0019CE  502D               	movf	_Reed_Contact_RB_Counter,w,c
  9097  0019D0  B4D8               	btfsc	status,2,c
  9098  0019D2  D002               	goto	l8199
  9099                           
  9100                           ;io.c: 219: {
  9101                           ;io.c: 220: Reed_Contact_RB_Counter--;
  9102  0019D4  062D               	decf	_Reed_Contact_RB_Counter,f,c
  9103                           
  9104                           ;io.c: 222: }
  9105                           
  9106                           ;io.c: 221: break;
  9107  0019D6  D05B               	goto	l8231
  9108  0019D8                     l8199:
  9109                           
  9110                           ;io.c: 223: else {SETxAPIxVAL(12, 0);}
  9111  0019D8  0E00               	movlw	0
  9112  0019DA  0100               	movlb	0	; () banked
  9113  0019DC  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9114  0019DE  0E00               	movlw	0
  9115  0019E0  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9116  0019E2  0E0C               	movlw	12
  9117  0019E4  EC28  F01B         	call	_SETxAPIxVAL
  9118                           
  9119                           ;io.c: 224: break;
  9120  0019E8  D052               	goto	l8231
  9121  0019EA                     l8201:
  9122  0019EA  502D               	movf	_Reed_Contact_RB_Counter,w,c
  9123  0019EC  0100               	movlb	0	; () banked
  9124  0019EE  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9125  0019F0  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9126  0019F2  0E0B               	movlw	11
  9127  0019F4  EC2B  F01C         	call	_GETxAPIxVAL
  9128  0019F8  0100               	movlb	0	; () banked
  9129  0019FA  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9130  0019FC  0100               	movlb	0	; () banked
  9131  0019FE  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9132  001A00  0100               	movlb	0	; () banked
  9133  001A02  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9134  001A04  0100               	movlb	0	; () banked
  9135  001A06  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9136  001A08  A0D8               	btfss	status,0,c
  9137  001A0A  D002               	goto	l8207
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;io.c: 227: {
  9141                           ;io.c: 228: Reed_Contact_RB_Counter++;
  9142  001A0C  2A2D               	incf	_Reed_Contact_RB_Counter,f,c
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;io.c: 230: }
  9146                           
  9147                           ;io.c: 229: break;
  9148  001A0E  D03F               	goto	l8231
  9149  001A10                     l8207:
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;io.c: 231: else {SETxAPIxVAL(12, 1);}
  9153  001A10  0E00               	movlw	0
  9154  001A12  0100               	movlb	0	; () banked
  9155  001A14  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9156  001A16  0E01               	movlw	1
  9157  001A18  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9158  001A1A  0E0C               	movlw	12
  9159  001A1C  EC28  F01B         	call	_SETxAPIxVAL
  9160                           
  9161                           ;io.c: 235: }
  9162                           
  9163                           ;io.c: 234: default : break;
  9164                           
  9165                           ;io.c: 232: break;
  9166  001A20  D036               	goto	l8231
  9167  001A22                     l8211:
  9168  001A22  A483               	btfss	3971,2,c	;volatile
  9169  001A24  D002               	goto	u6570
  9170  001A26  0E01               	movlw	1
  9171  001A28  D001               	goto	u6576
  9172  001A2A                     u6570:
  9173  001A2A  0E00               	movlw	0
  9174  001A2C                     u6576:
  9175                           
  9176                           ; Switch size 1, requested type "space"
  9177                           ; Number of cases is 2, Range of values is 0 to 1
  9178                           ; switch strategies available:
  9179                           ; Name         Instructions Cycles
  9180                           ; simple_byte            7     4 (average)
  9181                           ;	Chosen strategy is simple_byte
  9182  001A2C  0A00               	xorlw	0	; case 0
  9183  001A2E  B4D8               	btfsc	status,2,c
  9184  001A30  D7DC               	goto	l8201
  9185  001A32  0A01               	xorlw	1	; case 1
  9186  001A34  B4D8               	btfsc	status,2,c
  9187  001A36  D7CB               	goto	l8193
  9188                           
  9189                           ;io.c: 238: switch(!PORTBbits.RB0)
  9190  001A38  D02A               	goto	l8231
  9191  001A3A                     l8213:
  9192  001A3A  5027               	movf	_Button_Contact_Counter_Start,w,c
  9193  001A3C  0100               	movlb	0	; () banked
  9194  001A3E  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9195  001A40  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9196  001A42  0E0B               	movlw	11
  9197  001A44  EC2B  F01C         	call	_GETxAPIxVAL
  9198  001A48  0100               	movlb	0	; () banked
  9199  001A4A  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9200  001A4C  0100               	movlb	0	; () banked
  9201  001A4E  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9202  001A50  0100               	movlb	0	; () banked
  9203  001A52  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9204  001A54  0100               	movlb	0	; () banked
  9205  001A56  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9206  001A58  A0D8               	btfss	status,0,c
  9207  001A5A  D002               	goto	l8219
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;io.c: 241: {
  9211                           ;io.c: 242: Button_Contact_Counter_Start++;
  9212  001A5C  2A27               	incf	_Button_Contact_Counter_Start,f,c
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;io.c: 244: }
  9216                           
  9217                           ;io.c: 243: break;
  9218  001A5E  D057               	goto	l8251
  9219  001A60                     l8219:
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;io.c: 245: else {SETxAPIxVAL(16, 1); }
  9223  001A60  0E00               	movlw	0
  9224  001A62  0100               	movlb	0	; () banked
  9225  001A64  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9226  001A66  0E01               	movlw	1
  9227  001A68  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9228  001A6A  0E10               	movlw	16
  9229  001A6C  EC28  F01B         	call	_SETxAPIxVAL
  9230                           
  9231                           ;io.c: 246: break;
  9232  001A70  D04E               	goto	l8251
  9233  001A72                     l8221:
  9234  001A72  5027               	movf	_Button_Contact_Counter_Start,w,c
  9235  001A74  B4D8               	btfsc	status,2,c
  9236  001A76  D002               	goto	l8227
  9237                           
  9238                           ;io.c: 249: {
  9239                           ;io.c: 250: Button_Contact_Counter_Start--;
  9240  001A78  0627               	decf	_Button_Contact_Counter_Start,f,c
  9241                           
  9242                           ;io.c: 252: }
  9243                           
  9244                           ;io.c: 251: break;
  9245  001A7A  D049               	goto	l8251
  9246  001A7C                     l8227:
  9247                           
  9248                           ;io.c: 253: else {SETxAPIxVAL(16, 0);}
  9249  001A7C  0E00               	movlw	0
  9250  001A7E  0100               	movlb	0	; () banked
  9251  001A80  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9252  001A82  0E00               	movlw	0
  9253  001A84  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9254  001A86  0E10               	movlw	16
  9255  001A88  EC28  F01B         	call	_SETxAPIxVAL
  9256                           
  9257                           ;io.c: 257: }
  9258                           
  9259                           ;io.c: 256: default : break;
  9260                           
  9261                           ;io.c: 254: break;
  9262  001A8C  D040               	goto	l8251
  9263  001A8E                     l8231:
  9264  001A8E  B081               	btfsc	3969,0,c	;volatile
  9265  001A90  D002               	goto	u6600
  9266  001A92  0E01               	movlw	1
  9267  001A94  D001               	goto	u6610
  9268  001A96                     u6600:
  9269  001A96  0E00               	movlw	0
  9270  001A98                     u6610:
  9271  001A98  0100               	movlb	0	; () banked
  9272  001A9A  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9273  001A9C  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9274                           
  9275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9276                           ; Switch size 1, requested type "space"
  9277                           ; Number of cases is 1, Range of values is 0 to 0
  9278                           ; switch strategies available:
  9279                           ; Name         Instructions Cycles
  9280                           ; simple_byte            4     3 (average)
  9281                           ;	Chosen strategy is simple_byte
  9282  001A9E  0100               	movlb	0	; () banked
  9283  001AA0  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9284  001AA2  0A00               	xorlw	0	; case 0
  9285  001AA4  A4D8               	btfss	status,2,c
  9286  001AA6  D033               	goto	l8251
  9287                           
  9288                           ; BSR set to: 0
  9289                           ; Switch size 1, requested type "space"
  9290                           ; Number of cases is 2, Range of values is 0 to 1
  9291                           ; switch strategies available:
  9292                           ; Name         Instructions Cycles
  9293                           ; simple_byte            7     4 (average)
  9294                           ;	Chosen strategy is simple_byte
  9295  001AA8  0100               	movlb	0	; () banked
  9296  001AAA  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9297  001AAC  0A00               	xorlw	0	; case 0
  9298  001AAE  B4D8               	btfsc	status,2,c
  9299  001AB0  D7E0               	goto	l8221
  9300  001AB2  0A01               	xorlw	1	; case 1
  9301  001AB4  B4D8               	btfsc	status,2,c
  9302  001AB6  D7C1               	goto	l8213
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;io.c: 260: switch(!PORTDbits.RD7)
  9306  001AB8  D02A               	goto	l8251
  9307  001ABA                     l8233:
  9308                           
  9309                           ; BSR set to: 0
  9310  001ABA  5028               	movf	_Button_Contact_Counter_Stop,w,c
  9311  001ABC  0100               	movlb	0	; () banked
  9312  001ABE  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9313  001AC0  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9314  001AC2  0E0B               	movlw	11
  9315  001AC4  EC2B  F01C         	call	_GETxAPIxVAL
  9316  001AC8  0100               	movlb	0	; () banked
  9317  001ACA  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9318  001ACC  0100               	movlb	0	; () banked
  9319  001ACE  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9320  001AD0  0100               	movlb	0	; () banked
  9321  001AD2  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9322  001AD4  0100               	movlb	0	; () banked
  9323  001AD6  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9324  001AD8  A0D8               	btfss	status,0,c
  9325  001ADA  D002               	goto	l8239
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;io.c: 263: {
  9329                           ;io.c: 264: Button_Contact_Counter_Stop++;
  9330  001ADC  2A28               	incf	_Button_Contact_Counter_Stop,f,c
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;io.c: 266: }
  9334                           
  9335                           ;io.c: 265: break;
  9336  001ADE  D05C               	goto	l8271
  9337  001AE0                     l8239:
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;io.c: 267: else {SETxAPIxVAL(17, 1); }
  9341  001AE0  0E00               	movlw	0
  9342  001AE2  0100               	movlb	0	; () banked
  9343  001AE4  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9344  001AE6  0E01               	movlw	1
  9345  001AE8  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9346  001AEA  0E11               	movlw	17
  9347  001AEC  EC28  F01B         	call	_SETxAPIxVAL
  9348                           
  9349                           ;io.c: 268: break;
  9350  001AF0  D053               	goto	l8271
  9351  001AF2                     l8241:
  9352  001AF2  5028               	movf	_Button_Contact_Counter_Stop,w,c
  9353  001AF4  B4D8               	btfsc	status,2,c
  9354  001AF6  D002               	goto	l8247
  9355                           
  9356                           ;io.c: 271: {
  9357                           ;io.c: 272: Button_Contact_Counter_Stop--;
  9358  001AF8  0628               	decf	_Button_Contact_Counter_Stop,f,c
  9359                           
  9360                           ;io.c: 274: }
  9361                           
  9362                           ;io.c: 273: break;
  9363  001AFA  D04E               	goto	l8271
  9364  001AFC                     l8247:
  9365                           
  9366                           ;io.c: 275: else {SETxAPIxVAL(17, 0);}
  9367  001AFC  0E00               	movlw	0
  9368  001AFE  0100               	movlb	0	; () banked
  9369  001B00  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9370  001B02  0E00               	movlw	0
  9371  001B04  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9372  001B06  0E11               	movlw	17
  9373  001B08  EC28  F01B         	call	_SETxAPIxVAL
  9374                           
  9375                           ;io.c: 279: }
  9376                           
  9377                           ;io.c: 278: default : break;
  9378                           
  9379                           ;io.c: 276: break;
  9380  001B0C  D045               	goto	l8271
  9381  001B0E                     l8251:
  9382  001B0E  BE83               	btfsc	3971,7,c	;volatile
  9383  001B10  D002               	goto	u6640
  9384  001B12  0E01               	movlw	1
  9385  001B14  D001               	goto	u6650
  9386  001B16                     u6640:
  9387  001B16  0E00               	movlw	0
  9388  001B18                     u6650:
  9389  001B18  0100               	movlb	0	; () banked
  9390  001B1A  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9391  001B1C  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9392                           
  9393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9394                           ; Switch size 1, requested type "space"
  9395                           ; Number of cases is 1, Range of values is 0 to 0
  9396                           ; switch strategies available:
  9397                           ; Name         Instructions Cycles
  9398                           ; simple_byte            4     3 (average)
  9399                           ;	Chosen strategy is simple_byte
  9400  001B1E  0100               	movlb	0	; () banked
  9401  001B20  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9402  001B22  0A00               	xorlw	0	; case 0
  9403  001B24  A4D8               	btfss	status,2,c
  9404  001B26  D038               	goto	l8271
  9405                           
  9406                           ; BSR set to: 0
  9407                           ; Switch size 1, requested type "space"
  9408                           ; Number of cases is 2, Range of values is 0 to 1
  9409                           ; switch strategies available:
  9410                           ; Name         Instructions Cycles
  9411                           ; simple_byte            7     4 (average)
  9412                           ;	Chosen strategy is simple_byte
  9413  001B28  0100               	movlb	0	; () banked
  9414  001B2A  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9415  001B2C  0A00               	xorlw	0	; case 0
  9416  001B2E  B4D8               	btfsc	status,2,c
  9417  001B30  D7E0               	goto	l8241
  9418  001B32  0A01               	xorlw	1	; case 1
  9419  001B34  B4D8               	btfsc	status,2,c
  9420  001B36  D7C1               	goto	l8233
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;io.c: 282: switch(!PORTBbits.RB1)
  9424  001B38  D02F               	goto	l8271
  9425  001B3A                     l8253:
  9426                           
  9427                           ; BSR set to: 0
  9428  001B3A  0100               	movlb	0	; () banked
  9429  001B3C  519C               	movf	_Button_Contact_Counter_Middle& (0+255),w,b
  9430  001B3E  0100               	movlb	0	; () banked
  9431  001B40  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9432  001B42  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9433  001B44  0E0B               	movlw	11
  9434  001B46  EC2B  F01C         	call	_GETxAPIxVAL
  9435  001B4A  0100               	movlb	0	; () banked
  9436  001B4C  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9437  001B4E  0100               	movlb	0	; () banked
  9438  001B50  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9439  001B52  0100               	movlb	0	; () banked
  9440  001B54  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9441  001B56  0100               	movlb	0	; () banked
  9442  001B58  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9443  001B5A  A0D8               	btfss	status,0,c
  9444  001B5C  D003               	goto	l8259
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;io.c: 285: {
  9448                           ;io.c: 286: Button_Contact_Counter_Middle++;
  9449  001B5E  0100               	movlb	0	; () banked
  9450  001B60  2B9C               	incf	_Button_Contact_Counter_Middle& (0+255),f,b
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;io.c: 288: }
  9454                           
  9455                           ;io.c: 287: break;
  9456  001B62  D05F               	goto	l8291
  9457  001B64                     l8259:
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;io.c: 289: else {SETxAPIxVAL(18, 1); }
  9461  001B64  0E00               	movlw	0
  9462  001B66  0100               	movlb	0	; () banked
  9463  001B68  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9464  001B6A  0E01               	movlw	1
  9465  001B6C  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9466  001B6E  0E12               	movlw	18
  9467  001B70  EC28  F01B         	call	_SETxAPIxVAL
  9468                           
  9469                           ;io.c: 290: break;
  9470  001B74  D056               	goto	l8291
  9471  001B76                     l8261:
  9472  001B76  0100               	movlb	0	; () banked
  9473  001B78  519C               	movf	_Button_Contact_Counter_Middle& (0+255),w,b
  9474  001B7A  0100               	movlb	0	; () banked
  9475  001B7C  B4D8               	btfsc	status,2,c
  9476  001B7E  D003               	goto	l8267
  9477                           
  9478                           ; BSR set to: 0
  9479                           ;io.c: 293: {
  9480                           ;io.c: 294: Button_Contact_Counter_Middle--;
  9481  001B80  0100               	movlb	0	; () banked
  9482  001B82  079C               	decf	_Button_Contact_Counter_Middle& (0+255),f,b
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;io.c: 296: }
  9486                           
  9487                           ;io.c: 295: break;
  9488  001B84  D04E               	goto	l8291
  9489  001B86                     l8267:
  9490                           
  9491                           ; BSR set to: 0
  9492                           ;io.c: 297: else {SETxAPIxVAL(18, 0);}
  9493  001B86  0E00               	movlw	0
  9494  001B88  0100               	movlb	0	; () banked
  9495  001B8A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9496  001B8C  0E00               	movlw	0
  9497  001B8E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9498  001B90  0E12               	movlw	18
  9499  001B92  EC28  F01B         	call	_SETxAPIxVAL
  9500                           
  9501                           ;io.c: 301: }
  9502                           
  9503                           ;io.c: 300: default : break;
  9504                           
  9505                           ;io.c: 298: break;
  9506  001B96  D045               	goto	l8291
  9507  001B98                     l8271:
  9508  001B98  B281               	btfsc	3969,1,c	;volatile
  9509  001B9A  D002               	goto	u6680
  9510  001B9C  0E01               	movlw	1
  9511  001B9E  D001               	goto	u6690
  9512  001BA0                     u6680:
  9513  001BA0  0E00               	movlw	0
  9514  001BA2                     u6690:
  9515  001BA2  0100               	movlb	0	; () banked
  9516  001BA4  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9517  001BA6  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9518                           
  9519                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9520                           ; Switch size 1, requested type "space"
  9521                           ; Number of cases is 1, Range of values is 0 to 0
  9522                           ; switch strategies available:
  9523                           ; Name         Instructions Cycles
  9524                           ; simple_byte            4     3 (average)
  9525                           ;	Chosen strategy is simple_byte
  9526  001BA8  0100               	movlb	0	; () banked
  9527  001BAA  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9528  001BAC  0A00               	xorlw	0	; case 0
  9529  001BAE  A4D8               	btfss	status,2,c
  9530  001BB0  D038               	goto	l8291
  9531                           
  9532                           ; BSR set to: 0
  9533                           ; Switch size 1, requested type "space"
  9534                           ; Number of cases is 2, Range of values is 0 to 1
  9535                           ; switch strategies available:
  9536                           ; Name         Instructions Cycles
  9537                           ; simple_byte            7     4 (average)
  9538                           ;	Chosen strategy is simple_byte
  9539  001BB2  0100               	movlb	0	; () banked
  9540  001BB4  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9541  001BB6  0A00               	xorlw	0	; case 0
  9542  001BB8  B4D8               	btfsc	status,2,c
  9543  001BBA  D7DD               	goto	l8261
  9544  001BBC  0A01               	xorlw	1	; case 1
  9545  001BBE  B4D8               	btfsc	status,2,c
  9546  001BC0  D7BC               	goto	l8253
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;io.c: 304: switch(!PORTBbits.RB5)
  9550  001BC2  D02F               	goto	l8291
  9551  001BC4                     l8273:
  9552                           
  9553                           ; BSR set to: 0
  9554  001BC4  0100               	movlb	0	; () banked
  9555  001BC6  519A               	movf	_Button_Contact_Counter_LB& (0+255),w,b
  9556  001BC8  0100               	movlb	0	; () banked
  9557  001BCA  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9558  001BCC  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9559  001BCE  0E0B               	movlw	11
  9560  001BD0  EC2B  F01C         	call	_GETxAPIxVAL
  9561  001BD4  0100               	movlb	0	; () banked
  9562  001BD6  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9563  001BD8  0100               	movlb	0	; () banked
  9564  001BDA  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9565  001BDC  0100               	movlb	0	; () banked
  9566  001BDE  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9567  001BE0  0100               	movlb	0	; () banked
  9568  001BE2  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9569  001BE4  A0D8               	btfss	status,0,c
  9570  001BE6  D003               	goto	l8279
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;io.c: 307: {
  9574                           ;io.c: 308: Button_Contact_Counter_LB++;
  9575  001BE8  0100               	movlb	0	; () banked
  9576  001BEA  2B9A               	incf	_Button_Contact_Counter_LB& (0+255),f,b
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;io.c: 310: }
  9580                           
  9581                           ;io.c: 309: break;
  9582  001BEC  D05F               	goto	l8311
  9583  001BEE                     l8279:
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;io.c: 311: else {SETxAPIxVAL(19, 1); }
  9587  001BEE  0E00               	movlw	0
  9588  001BF0  0100               	movlb	0	; () banked
  9589  001BF2  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9590  001BF4  0E01               	movlw	1
  9591  001BF6  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9592  001BF8  0E13               	movlw	19
  9593  001BFA  EC28  F01B         	call	_SETxAPIxVAL
  9594                           
  9595                           ;io.c: 312: break;
  9596  001BFE  D056               	goto	l8311
  9597  001C00                     l8281:
  9598  001C00  0100               	movlb	0	; () banked
  9599  001C02  519A               	movf	_Button_Contact_Counter_LB& (0+255),w,b
  9600  001C04  0100               	movlb	0	; () banked
  9601  001C06  B4D8               	btfsc	status,2,c
  9602  001C08  D003               	goto	l8287
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;io.c: 315: {
  9606                           ;io.c: 316: Button_Contact_Counter_LB--;
  9607  001C0A  0100               	movlb	0	; () banked
  9608  001C0C  079A               	decf	_Button_Contact_Counter_LB& (0+255),f,b
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;io.c: 318: }
  9612                           
  9613                           ;io.c: 317: break;
  9614  001C0E  D04E               	goto	l8311
  9615  001C10                     l8287:
  9616                           
  9617                           ; BSR set to: 0
  9618                           ;io.c: 319: else {SETxAPIxVAL(19, 0);}
  9619  001C10  0E00               	movlw	0
  9620  001C12  0100               	movlb	0	; () banked
  9621  001C14  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9622  001C16  0E00               	movlw	0
  9623  001C18  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9624  001C1A  0E13               	movlw	19
  9625  001C1C  EC28  F01B         	call	_SETxAPIxVAL
  9626                           
  9627                           ;io.c: 323: }
  9628                           
  9629                           ;io.c: 322: default : break;
  9630                           
  9631                           ;io.c: 320: break;
  9632  001C20  D045               	goto	l8311
  9633  001C22                     l8291:
  9634  001C22  BA81               	btfsc	3969,5,c	;volatile
  9635  001C24  D002               	goto	u6720
  9636  001C26  0E01               	movlw	1
  9637  001C28  D001               	goto	u6730
  9638  001C2A                     u6720:
  9639  001C2A  0E00               	movlw	0
  9640  001C2C                     u6730:
  9641  001C2C  0100               	movlb	0	; () banked
  9642  001C2E  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9643  001C30  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9644                           
  9645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9646                           ; Switch size 1, requested type "space"
  9647                           ; Number of cases is 1, Range of values is 0 to 0
  9648                           ; switch strategies available:
  9649                           ; Name         Instructions Cycles
  9650                           ; simple_byte            4     3 (average)
  9651                           ;	Chosen strategy is simple_byte
  9652  001C32  0100               	movlb	0	; () banked
  9653  001C34  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9654  001C36  0A00               	xorlw	0	; case 0
  9655  001C38  A4D8               	btfss	status,2,c
  9656  001C3A  D038               	goto	l8311
  9657                           
  9658                           ; BSR set to: 0
  9659                           ; Switch size 1, requested type "space"
  9660                           ; Number of cases is 2, Range of values is 0 to 1
  9661                           ; switch strategies available:
  9662                           ; Name         Instructions Cycles
  9663                           ; simple_byte            7     4 (average)
  9664                           ;	Chosen strategy is simple_byte
  9665  001C3C  0100               	movlb	0	; () banked
  9666  001C3E  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9667  001C40  0A00               	xorlw	0	; case 0
  9668  001C42  B4D8               	btfsc	status,2,c
  9669  001C44  D7DD               	goto	l8281
  9670  001C46  0A01               	xorlw	1	; case 1
  9671  001C48  B4D8               	btfsc	status,2,c
  9672  001C4A  D7BC               	goto	l8273
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;io.c: 326: switch(!PORTBbits.RB4)
  9676  001C4C  D02F               	goto	l8311
  9677  001C4E                     l8293:
  9678                           
  9679                           ; BSR set to: 0
  9680  001C4E  0100               	movlb	0	; () banked
  9681  001C50  519B               	movf	_Button_Contact_Counter_LF& (0+255),w,b
  9682  001C52  0100               	movlb	0	; () banked
  9683  001C54  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9684  001C56  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9685  001C58  0E0B               	movlw	11
  9686  001C5A  EC2B  F01C         	call	_GETxAPIxVAL
  9687  001C5E  0100               	movlb	0	; () banked
  9688  001C60  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9689  001C62  0100               	movlb	0	; () banked
  9690  001C64  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9691  001C66  0100               	movlb	0	; () banked
  9692  001C68  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9693  001C6A  0100               	movlb	0	; () banked
  9694  001C6C  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9695  001C6E  A0D8               	btfss	status,0,c
  9696  001C70  D003               	goto	l8299
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;io.c: 329: {
  9700                           ;io.c: 330: Button_Contact_Counter_LF++;
  9701  001C72  0100               	movlb	0	; () banked
  9702  001C74  2B9B               	incf	_Button_Contact_Counter_LF& (0+255),f,b
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;io.c: 332: }
  9706                           
  9707                           ;io.c: 331: break;
  9708  001C76  D05F               	goto	l8331
  9709  001C78                     l8299:
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;io.c: 333: else {SETxAPIxVAL(20, 1); }
  9713  001C78  0E00               	movlw	0
  9714  001C7A  0100               	movlb	0	; () banked
  9715  001C7C  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9716  001C7E  0E01               	movlw	1
  9717  001C80  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9718  001C82  0E14               	movlw	20
  9719  001C84  EC28  F01B         	call	_SETxAPIxVAL
  9720                           
  9721                           ;io.c: 334: break;
  9722  001C88  D056               	goto	l8331
  9723  001C8A                     l8301:
  9724  001C8A  0100               	movlb	0	; () banked
  9725  001C8C  519B               	movf	_Button_Contact_Counter_LF& (0+255),w,b
  9726  001C8E  0100               	movlb	0	; () banked
  9727  001C90  B4D8               	btfsc	status,2,c
  9728  001C92  D003               	goto	l8307
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;io.c: 337: {
  9732                           ;io.c: 338: Button_Contact_Counter_LF--;
  9733  001C94  0100               	movlb	0	; () banked
  9734  001C96  079B               	decf	_Button_Contact_Counter_LF& (0+255),f,b
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;io.c: 340: }
  9738                           
  9739                           ;io.c: 339: break;
  9740  001C98  D04E               	goto	l8331
  9741  001C9A                     l8307:
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;io.c: 341: else {SETxAPIxVAL(20, 0);}
  9745  001C9A  0E00               	movlw	0
  9746  001C9C  0100               	movlb	0	; () banked
  9747  001C9E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9748  001CA0  0E00               	movlw	0
  9749  001CA2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9750  001CA4  0E14               	movlw	20
  9751  001CA6  EC28  F01B         	call	_SETxAPIxVAL
  9752                           
  9753                           ;io.c: 345: }
  9754                           
  9755                           ;io.c: 344: default : break;
  9756                           
  9757                           ;io.c: 342: break;
  9758  001CAA  D045               	goto	l8331
  9759  001CAC                     l8311:
  9760  001CAC  B881               	btfsc	3969,4,c	;volatile
  9761  001CAE  D002               	goto	u6760
  9762  001CB0  0E01               	movlw	1
  9763  001CB2  D001               	goto	u6770
  9764  001CB4                     u6760:
  9765  001CB4  0E00               	movlw	0
  9766  001CB6                     u6770:
  9767  001CB6  0100               	movlb	0	; () banked
  9768  001CB8  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9769  001CBA  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9770                           
  9771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9772                           ; Switch size 1, requested type "space"
  9773                           ; Number of cases is 1, Range of values is 0 to 0
  9774                           ; switch strategies available:
  9775                           ; Name         Instructions Cycles
  9776                           ; simple_byte            4     3 (average)
  9777                           ;	Chosen strategy is simple_byte
  9778  001CBC  0100               	movlb	0	; () banked
  9779  001CBE  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9780  001CC0  0A00               	xorlw	0	; case 0
  9781  001CC2  A4D8               	btfss	status,2,c
  9782  001CC4  D038               	goto	l8331
  9783                           
  9784                           ; BSR set to: 0
  9785                           ; Switch size 1, requested type "space"
  9786                           ; Number of cases is 2, Range of values is 0 to 1
  9787                           ; switch strategies available:
  9788                           ; Name         Instructions Cycles
  9789                           ; simple_byte            7     4 (average)
  9790                           ;	Chosen strategy is simple_byte
  9791  001CC6  0100               	movlb	0	; () banked
  9792  001CC8  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9793  001CCA  0A00               	xorlw	0	; case 0
  9794  001CCC  B4D8               	btfsc	status,2,c
  9795  001CCE  D7DD               	goto	l8301
  9796  001CD0  0A01               	xorlw	1	; case 1
  9797  001CD2  B4D8               	btfsc	status,2,c
  9798  001CD4  D7BC               	goto	l8293
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;io.c: 348: switch(!PORTBbits.RB3)
  9802  001CD6  D02F               	goto	l8331
  9803  001CD8                     l8313:
  9804                           
  9805                           ; BSR set to: 0
  9806  001CD8  0100               	movlb	0	; () banked
  9807  001CDA  519D               	movf	_Button_Contact_Counter_RB& (0+255),w,b
  9808  001CDC  0100               	movlb	0	; () banked
  9809  001CDE  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9810  001CE0  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9811  001CE2  0E0B               	movlw	11
  9812  001CE4  EC2B  F01C         	call	_GETxAPIxVAL
  9813  001CE8  0100               	movlb	0	; () banked
  9814  001CEA  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9815  001CEC  0100               	movlb	0	; () banked
  9816  001CEE  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9817  001CF0  0100               	movlb	0	; () banked
  9818  001CF2  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9819  001CF4  0100               	movlb	0	; () banked
  9820  001CF6  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9821  001CF8  A0D8               	btfss	status,0,c
  9822  001CFA  D003               	goto	l8319
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;io.c: 351: {
  9826                           ;io.c: 352: Button_Contact_Counter_RB++;
  9827  001CFC  0100               	movlb	0	; () banked
  9828  001CFE  2B9D               	incf	_Button_Contact_Counter_RB& (0+255),f,b
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;io.c: 354: }
  9832                           
  9833                           ;io.c: 353: break;
  9834  001D00  D05F               	goto	l8351
  9835  001D02                     l8319:
  9836                           
  9837                           ; BSR set to: 0
  9838                           ;io.c: 355: else {SETxAPIxVAL(21, 1); }
  9839  001D02  0E00               	movlw	0
  9840  001D04  0100               	movlb	0	; () banked
  9841  001D06  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9842  001D08  0E01               	movlw	1
  9843  001D0A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9844  001D0C  0E15               	movlw	21
  9845  001D0E  EC28  F01B         	call	_SETxAPIxVAL
  9846                           
  9847                           ;io.c: 356: break;
  9848  001D12  D056               	goto	l8351
  9849  001D14                     l8321:
  9850  001D14  0100               	movlb	0	; () banked
  9851  001D16  519D               	movf	_Button_Contact_Counter_RB& (0+255),w,b
  9852  001D18  0100               	movlb	0	; () banked
  9853  001D1A  B4D8               	btfsc	status,2,c
  9854  001D1C  D003               	goto	l8327
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;io.c: 359: {
  9858                           ;io.c: 360: Button_Contact_Counter_RB--;
  9859  001D1E  0100               	movlb	0	; () banked
  9860  001D20  079D               	decf	_Button_Contact_Counter_RB& (0+255),f,b
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;io.c: 362: }
  9864                           
  9865                           ;io.c: 361: break;
  9866  001D22  D04E               	goto	l8351
  9867  001D24                     l8327:
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;io.c: 363: else {SETxAPIxVAL(21, 0);}
  9871  001D24  0E00               	movlw	0
  9872  001D26  0100               	movlb	0	; () banked
  9873  001D28  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9874  001D2A  0E00               	movlw	0
  9875  001D2C  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9876  001D2E  0E15               	movlw	21
  9877  001D30  EC28  F01B         	call	_SETxAPIxVAL
  9878                           
  9879                           ;io.c: 367: }
  9880                           
  9881                           ;io.c: 366: default : break;
  9882                           
  9883                           ;io.c: 364: break;
  9884  001D34  D045               	goto	l8351
  9885  001D36                     l8331:
  9886  001D36  B681               	btfsc	3969,3,c	;volatile
  9887  001D38  D002               	goto	u6800
  9888  001D3A  0E01               	movlw	1
  9889  001D3C  D001               	goto	u6810
  9890  001D3E                     u6800:
  9891  001D3E  0E00               	movlw	0
  9892  001D40                     u6810:
  9893  001D40  0100               	movlb	0	; () banked
  9894  001D42  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9895  001D44  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9896                           
  9897                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9898                           ; Switch size 1, requested type "space"
  9899                           ; Number of cases is 1, Range of values is 0 to 0
  9900                           ; switch strategies available:
  9901                           ; Name         Instructions Cycles
  9902                           ; simple_byte            4     3 (average)
  9903                           ;	Chosen strategy is simple_byte
  9904  001D46  0100               	movlb	0	; () banked
  9905  001D48  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9906  001D4A  0A00               	xorlw	0	; case 0
  9907  001D4C  A4D8               	btfss	status,2,c
  9908  001D4E  D038               	goto	l8351
  9909                           
  9910                           ; BSR set to: 0
  9911                           ; Switch size 1, requested type "space"
  9912                           ; Number of cases is 2, Range of values is 0 to 1
  9913                           ; switch strategies available:
  9914                           ; Name         Instructions Cycles
  9915                           ; simple_byte            7     4 (average)
  9916                           ;	Chosen strategy is simple_byte
  9917  001D50  0100               	movlb	0	; () banked
  9918  001D52  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9919  001D54  0A00               	xorlw	0	; case 0
  9920  001D56  B4D8               	btfsc	status,2,c
  9921  001D58  D7DD               	goto	l8321
  9922  001D5A  0A01               	xorlw	1	; case 1
  9923  001D5C  B4D8               	btfsc	status,2,c
  9924  001D5E  D7BC               	goto	l8313
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;io.c: 370: switch(!PORTBbits.RB2)
  9928  001D60  D02F               	goto	l8351
  9929  001D62                     l8333:
  9930                           
  9931                           ; BSR set to: 0
  9932  001D62  0100               	movlb	0	; () banked
  9933  001D64  519E               	movf	_Button_Contact_Counter_RF& (0+255),w,b
  9934  001D66  0100               	movlb	0	; () banked
  9935  001D68  6F81               	movwf	??_Debounce_Inputs& (0+255),b
  9936  001D6A  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9937  001D6C  0E0B               	movlw	11
  9938  001D6E  EC2B  F01C         	call	_GETxAPIxVAL
  9939  001D72  0100               	movlb	0	; () banked
  9940  001D74  5181               	movf	??_Debounce_Inputs& (0+255),w,b
  9941  001D76  0100               	movlb	0	; () banked
  9942  001D78  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9943  001D7A  0100               	movlb	0	; () banked
  9944  001D7C  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9945  001D7E  0100               	movlb	0	; () banked
  9946  001D80  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9947  001D82  A0D8               	btfss	status,0,c
  9948  001D84  D003               	goto	l8339
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;io.c: 373: {
  9952                           ;io.c: 374: Button_Contact_Counter_RF++;
  9953  001D86  0100               	movlb	0	; () banked
  9954  001D88  2B9E               	incf	_Button_Contact_Counter_RF& (0+255),f,b
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;io.c: 376: }
  9958                           
  9959                           ;io.c: 375: break;
  9960  001D8A  D05A               	goto	l8371
  9961  001D8C                     l8339:
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;io.c: 377: else {SETxAPIxVAL(22, 1); }
  9965  001D8C  0E00               	movlw	0
  9966  001D8E  0100               	movlb	0	; () banked
  9967  001D90  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9968  001D92  0E01               	movlw	1
  9969  001D94  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
  9970  001D96  0E16               	movlw	22
  9971  001D98  EC28  F01B         	call	_SETxAPIxVAL
  9972                           
  9973                           ;io.c: 378: break;
  9974  001D9C  D051               	goto	l8371
  9975  001D9E                     l8341:
  9976  001D9E  0100               	movlb	0	; () banked
  9977  001DA0  519E               	movf	_Button_Contact_Counter_RF& (0+255),w,b
  9978  001DA2  0100               	movlb	0	; () banked
  9979  001DA4  B4D8               	btfsc	status,2,c
  9980  001DA6  D003               	goto	l8347
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;io.c: 381: {
  9984                           ;io.c: 382: Button_Contact_Counter_RF--;
  9985  001DA8  0100               	movlb	0	; () banked
  9986  001DAA  079E               	decf	_Button_Contact_Counter_RF& (0+255),f,b
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;io.c: 384: }
  9990                           
  9991                           ;io.c: 383: break;
  9992  001DAC  D049               	goto	l8371
  9993  001DAE                     l8347:
  9994                           
  9995                           ; BSR set to: 0
  9996                           ;io.c: 385: else {SETxAPIxVAL(22, 0);}
  9997  001DAE  0E00               	movlw	0
  9998  001DB0  0100               	movlb	0	; () banked
  9999  001DB2  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10000  001DB4  0E00               	movlw	0
 10001  001DB6  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10002  001DB8  0E16               	movlw	22
 10003  001DBA  EC28  F01B         	call	_SETxAPIxVAL
 10004                           
 10005                           ;io.c: 389: }
 10006                           
 10007                           ;io.c: 388: default : break;
 10008                           
 10009                           ;io.c: 386: break;
 10010  001DBE  D040               	goto	l8371
 10011  001DC0                     l8351:
 10012  001DC0  B481               	btfsc	3969,2,c	;volatile
 10013  001DC2  D002               	goto	u6840
 10014  001DC4  0E01               	movlw	1
 10015  001DC6  D001               	goto	u6850
 10016  001DC8                     u6840:
 10017  001DC8  0E00               	movlw	0
 10018  001DCA                     u6850:
 10019  001DCA  0100               	movlb	0	; () banked
 10020  001DCC  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10021  001DCE  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10022                           
 10023                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10024                           ; Switch size 1, requested type "space"
 10025                           ; Number of cases is 1, Range of values is 0 to 0
 10026                           ; switch strategies available:
 10027                           ; Name         Instructions Cycles
 10028                           ; simple_byte            4     3 (average)
 10029                           ;	Chosen strategy is simple_byte
 10030  001DD0  0100               	movlb	0	; () banked
 10031  001DD2  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10032  001DD4  0A00               	xorlw	0	; case 0
 10033  001DD6  A4D8               	btfss	status,2,c
 10034  001DD8  D033               	goto	l8371
 10035                           
 10036                           ; BSR set to: 0
 10037                           ; Switch size 1, requested type "space"
 10038                           ; Number of cases is 2, Range of values is 0 to 1
 10039                           ; switch strategies available:
 10040                           ; Name         Instructions Cycles
 10041                           ; simple_byte            7     4 (average)
 10042                           ;	Chosen strategy is simple_byte
 10043  001DDA  0100               	movlb	0	; () banked
 10044  001DDC  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10045  001DDE  0A00               	xorlw	0	; case 0
 10046  001DE0  B4D8               	btfsc	status,2,c
 10047  001DE2  D7DD               	goto	l8341
 10048  001DE4  0A01               	xorlw	1	; case 1
 10049  001DE6  B4D8               	btfsc	status,2,c
 10050  001DE8  D7BC               	goto	l8333
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;io.c: 392: switch(PORTCbits.RC1)
 10054  001DEA  D02A               	goto	l8371
 10055  001DEC                     l8353:
 10056  001DEC  502C               	movf	_Reed_Contact_LMU_Counter,w,c
 10057  001DEE  0100               	movlb	0	; () banked
 10058  001DF0  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10059  001DF2  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10060  001DF4  0E0B               	movlw	11
 10061  001DF6  EC2B  F01C         	call	_GETxAPIxVAL
 10062  001DFA  0100               	movlb	0	; () banked
 10063  001DFC  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10064  001DFE  0100               	movlb	0	; () banked
 10065  001E00  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10066  001E02  0100               	movlb	0	; () banked
 10067  001E04  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10068  001E06  0100               	movlb	0	; () banked
 10069  001E08  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10070  001E0A  A0D8               	btfss	status,0,c
 10071  001E0C  D002               	goto	l8359
 10072                           
 10073                           ; BSR set to: 0
 10074                           ;io.c: 395: {
 10075                           ;io.c: 396: Reed_Contact_LMU_Counter++;
 10076  001E0E  2A2C               	incf	_Reed_Contact_LMU_Counter,f,c
 10077                           
 10078                           ; BSR set to: 0
 10079                           ;io.c: 398: }
 10080                           
 10081                           ;io.c: 397: break;
 10082  001E10  D04D               	goto	l8391
 10083  001E12                     l8359:
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;io.c: 399: else {SETxAPIxVAL(25, 1); }
 10087  001E12  0E00               	movlw	0
 10088  001E14  0100               	movlb	0	; () banked
 10089  001E16  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10090  001E18  0E01               	movlw	1
 10091  001E1A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10092  001E1C  0E19               	movlw	25
 10093  001E1E  EC28  F01B         	call	_SETxAPIxVAL
 10094                           
 10095                           ;io.c: 400: break;
 10096  001E22  D044               	goto	l8391
 10097  001E24                     l8361:
 10098  001E24  502C               	movf	_Reed_Contact_LMU_Counter,w,c
 10099  001E26  B4D8               	btfsc	status,2,c
 10100  001E28  D002               	goto	l8367
 10101                           
 10102                           ;io.c: 403: {
 10103                           ;io.c: 404: Reed_Contact_LMU_Counter--;
 10104  001E2A  062C               	decf	_Reed_Contact_LMU_Counter,f,c
 10105                           
 10106                           ;io.c: 406: }
 10107                           
 10108                           ;io.c: 405: break;
 10109  001E2C  D03F               	goto	l8391
 10110  001E2E                     l8367:
 10111                           
 10112                           ;io.c: 407: else {SETxAPIxVAL(25, 0);}
 10113  001E2E  0E00               	movlw	0
 10114  001E30  0100               	movlb	0	; () banked
 10115  001E32  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10116  001E34  0E00               	movlw	0
 10117  001E36  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10118  001E38  0E19               	movlw	25
 10119  001E3A  EC28  F01B         	call	_SETxAPIxVAL
 10120                           
 10121                           ;io.c: 411: }
 10122                           
 10123                           ;io.c: 410: default : break;
 10124                           
 10125                           ;io.c: 408: break;
 10126  001E3E  D036               	goto	l8391
 10127  001E40                     l8371:
 10128  001E40  A282               	btfss	3970,1,c	;volatile
 10129  001E42  D002               	goto	u6880
 10130  001E44  0E01               	movlw	1
 10131  001E46  D001               	goto	u6886
 10132  001E48                     u6880:
 10133  001E48  0E00               	movlw	0
 10134  001E4A                     u6886:
 10135                           
 10136                           ; Switch size 1, requested type "space"
 10137                           ; Number of cases is 2, Range of values is 0 to 1
 10138                           ; switch strategies available:
 10139                           ; Name         Instructions Cycles
 10140                           ; simple_byte            7     4 (average)
 10141                           ;	Chosen strategy is simple_byte
 10142  001E4A  0A00               	xorlw	0	; case 0
 10143  001E4C  B4D8               	btfsc	status,2,c
 10144  001E4E  D7CE               	goto	l8353
 10145  001E50  0A01               	xorlw	1	; case 1
 10146  001E52  B4D8               	btfsc	status,2,c
 10147  001E54  D7E7               	goto	l8361
 10148                           
 10149                           ;io.c: 414: switch(PORTDbits.RD4)
 10150  001E56  D02A               	goto	l8391
 10151  001E58                     l8373:
 10152  001E58  502B               	movf	_Reed_Contact_LMD_Counter,w,c
 10153  001E5A  0100               	movlb	0	; () banked
 10154  001E5C  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10155  001E5E  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10156  001E60  0E0B               	movlw	11
 10157  001E62  EC2B  F01C         	call	_GETxAPIxVAL
 10158  001E66  0100               	movlb	0	; () banked
 10159  001E68  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10160  001E6A  0100               	movlb	0	; () banked
 10161  001E6C  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10162  001E6E  0100               	movlb	0	; () banked
 10163  001E70  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10164  001E72  0100               	movlb	0	; () banked
 10165  001E74  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10166  001E76  A0D8               	btfss	status,0,c
 10167  001E78  D002               	goto	l8379
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;io.c: 417: {
 10171                           ;io.c: 418: Reed_Contact_LMD_Counter++;
 10172  001E7A  2A2B               	incf	_Reed_Contact_LMD_Counter,f,c
 10173                           
 10174                           ; BSR set to: 0
 10175                           ;io.c: 420: }
 10176                           
 10177                           ;io.c: 419: break;
 10178  001E7C  D04D               	goto	l8411
 10179  001E7E                     l8379:
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;io.c: 421: else {SETxAPIxVAL(26, 1); }
 10183  001E7E  0E00               	movlw	0
 10184  001E80  0100               	movlb	0	; () banked
 10185  001E82  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10186  001E84  0E01               	movlw	1
 10187  001E86  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10188  001E88  0E1A               	movlw	26
 10189  001E8A  EC28  F01B         	call	_SETxAPIxVAL
 10190                           
 10191                           ;io.c: 422: break;
 10192  001E8E  D044               	goto	l8411
 10193  001E90                     l8381:
 10194  001E90  502B               	movf	_Reed_Contact_LMD_Counter,w,c
 10195  001E92  B4D8               	btfsc	status,2,c
 10196  001E94  D002               	goto	l8387
 10197                           
 10198                           ;io.c: 425: {
 10199                           ;io.c: 426: Reed_Contact_LMD_Counter--;
 10200  001E96  062B               	decf	_Reed_Contact_LMD_Counter,f,c
 10201                           
 10202                           ;io.c: 428: }
 10203                           
 10204                           ;io.c: 427: break;
 10205  001E98  D03F               	goto	l8411
 10206  001E9A                     l8387:
 10207                           
 10208                           ;io.c: 429: else {SETxAPIxVAL(26, 0);}
 10209  001E9A  0E00               	movlw	0
 10210  001E9C  0100               	movlb	0	; () banked
 10211  001E9E  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10212  001EA0  0E00               	movlw	0
 10213  001EA2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10214  001EA4  0E1A               	movlw	26
 10215  001EA6  EC28  F01B         	call	_SETxAPIxVAL
 10216                           
 10217                           ;io.c: 433: }
 10218                           
 10219                           ;io.c: 432: default : break;
 10220                           
 10221                           ;io.c: 430: break;
 10222  001EAA  D036               	goto	l8411
 10223  001EAC                     l8391:
 10224  001EAC  A883               	btfss	3971,4,c	;volatile
 10225  001EAE  D002               	goto	u6910
 10226  001EB0  0E01               	movlw	1
 10227  001EB2  D001               	goto	u6916
 10228  001EB4                     u6910:
 10229  001EB4  0E00               	movlw	0
 10230  001EB6                     u6916:
 10231                           
 10232                           ; Switch size 1, requested type "space"
 10233                           ; Number of cases is 2, Range of values is 0 to 1
 10234                           ; switch strategies available:
 10235                           ; Name         Instructions Cycles
 10236                           ; simple_byte            7     4 (average)
 10237                           ;	Chosen strategy is simple_byte
 10238  001EB6  0A00               	xorlw	0	; case 0
 10239  001EB8  B4D8               	btfsc	status,2,c
 10240  001EBA  D7CE               	goto	l8373
 10241  001EBC  0A01               	xorlw	1	; case 1
 10242  001EBE  B4D8               	btfsc	status,2,c
 10243  001EC0  D7E7               	goto	l8381
 10244                           
 10245                           ;io.c: 436: switch(PORTEbits.RE1)
 10246  001EC2  D02A               	goto	l8411
 10247  001EC4                     l8393:
 10248  001EC4  5030               	movf	_Reed_Contact_RMU_Counter,w,c
 10249  001EC6  0100               	movlb	0	; () banked
 10250  001EC8  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10251  001ECA  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10252  001ECC  0E0B               	movlw	11
 10253  001ECE  EC2B  F01C         	call	_GETxAPIxVAL
 10254  001ED2  0100               	movlb	0	; () banked
 10255  001ED4  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10256  001ED6  0100               	movlb	0	; () banked
 10257  001ED8  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10258  001EDA  0100               	movlb	0	; () banked
 10259  001EDC  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10260  001EDE  0100               	movlb	0	; () banked
 10261  001EE0  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10262  001EE2  A0D8               	btfss	status,0,c
 10263  001EE4  D002               	goto	l8399
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;io.c: 439: {
 10267                           ;io.c: 440: Reed_Contact_RMU_Counter++;
 10268  001EE6  2A30               	incf	_Reed_Contact_RMU_Counter,f,c
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;io.c: 442: }
 10272                           
 10273                           ;io.c: 441: break;
 10274  001EE8  D04D               	goto	l8431
 10275  001EEA                     l8399:
 10276                           
 10277                           ; BSR set to: 0
 10278                           ;io.c: 443: else {SETxAPIxVAL(27, 1); }
 10279  001EEA  0E00               	movlw	0
 10280  001EEC  0100               	movlb	0	; () banked
 10281  001EEE  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10282  001EF0  0E01               	movlw	1
 10283  001EF2  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10284  001EF4  0E1B               	movlw	27
 10285  001EF6  EC28  F01B         	call	_SETxAPIxVAL
 10286                           
 10287                           ;io.c: 444: break;
 10288  001EFA  D044               	goto	l8431
 10289  001EFC                     l8401:
 10290  001EFC  5030               	movf	_Reed_Contact_RMU_Counter,w,c
 10291  001EFE  B4D8               	btfsc	status,2,c
 10292  001F00  D002               	goto	l8407
 10293                           
 10294                           ;io.c: 447: {
 10295                           ;io.c: 448: Reed_Contact_RMU_Counter--;
 10296  001F02  0630               	decf	_Reed_Contact_RMU_Counter,f,c
 10297                           
 10298                           ;io.c: 450: }
 10299                           
 10300                           ;io.c: 449: break;
 10301  001F04  D03F               	goto	l8431
 10302  001F06                     l8407:
 10303                           
 10304                           ;io.c: 451: else {SETxAPIxVAL(27, 0);}
 10305  001F06  0E00               	movlw	0
 10306  001F08  0100               	movlb	0	; () banked
 10307  001F0A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10308  001F0C  0E00               	movlw	0
 10309  001F0E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10310  001F10  0E1B               	movlw	27
 10311  001F12  EC28  F01B         	call	_SETxAPIxVAL
 10312                           
 10313                           ;io.c: 455: }
 10314                           
 10315                           ;io.c: 454: default : break;
 10316                           
 10317                           ;io.c: 452: break;
 10318  001F16  D036               	goto	l8431
 10319  001F18                     l8411:
 10320  001F18  A284               	btfss	3972,1,c	;volatile
 10321  001F1A  D002               	goto	u6940
 10322  001F1C  0E01               	movlw	1
 10323  001F1E  D001               	goto	u6946
 10324  001F20                     u6940:
 10325  001F20  0E00               	movlw	0
 10326  001F22                     u6946:
 10327                           
 10328                           ; Switch size 1, requested type "space"
 10329                           ; Number of cases is 2, Range of values is 0 to 1
 10330                           ; switch strategies available:
 10331                           ; Name         Instructions Cycles
 10332                           ; simple_byte            7     4 (average)
 10333                           ;	Chosen strategy is simple_byte
 10334  001F22  0A00               	xorlw	0	; case 0
 10335  001F24  B4D8               	btfsc	status,2,c
 10336  001F26  D7CE               	goto	l8393
 10337  001F28  0A01               	xorlw	1	; case 1
 10338  001F2A  B4D8               	btfsc	status,2,c
 10339  001F2C  D7E7               	goto	l8401
 10340                           
 10341                           ;io.c: 458: switch(PORTEbits.RE0)
 10342  001F2E  D02A               	goto	l8431
 10343  001F30                     l8413:
 10344  001F30  502F               	movf	_Reed_Contact_RMD_Counter,w,c
 10345  001F32  0100               	movlb	0	; () banked
 10346  001F34  6F81               	movwf	??_Debounce_Inputs& (0+255),b
 10347  001F36  6B82               	clrf	(??_Debounce_Inputs+1)& (0+255),b
 10348  001F38  0E0B               	movlw	11
 10349  001F3A  EC2B  F01C         	call	_GETxAPIxVAL
 10350  001F3E  0100               	movlb	0	; () banked
 10351  001F40  5181               	movf	??_Debounce_Inputs& (0+255),w,b
 10352  001F42  0100               	movlb	0	; () banked
 10353  001F44  5D60               	subwf	?_GETxAPIxVAL& (0+255),w,b
 10354  001F46  0100               	movlb	0	; () banked
 10355  001F48  5182               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
 10356  001F4A  0100               	movlb	0	; () banked
 10357  001F4C  5961               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
 10358  001F4E  A0D8               	btfss	status,0,c
 10359  001F50  D002               	goto	l8419
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;io.c: 461: {
 10363                           ;io.c: 462: Reed_Contact_RMD_Counter++;
 10364  001F52  2A2F               	incf	_Reed_Contact_RMD_Counter,f,c
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;io.c: 464: }
 10368                           
 10369                           ;io.c: 463: break;
 10370  001F54  0012               	return	
 10371  001F56                     l8419:
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;io.c: 465: else {SETxAPIxVAL(28, 1); }
 10375  001F56  0E00               	movlw	0
 10376  001F58  0100               	movlb	0	; () banked
 10377  001F5A  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10378  001F5C  0E01               	movlw	1
 10379  001F5E  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10380  001F60  0E1C               	movlw	28
 10381  001F62  EC28  F01B         	call	_SETxAPIxVAL
 10382                           
 10383                           ;io.c: 466: break;
 10384  001F66  0012               	return	
 10385  001F68                     l8421:
 10386  001F68  502F               	movf	_Reed_Contact_RMD_Counter,w,c
 10387  001F6A  B4D8               	btfsc	status,2,c
 10388  001F6C  D002               	goto	l8427
 10389                           
 10390                           ;io.c: 469: {
 10391                           ;io.c: 470: Reed_Contact_RMD_Counter--;
 10392  001F6E  062F               	decf	_Reed_Contact_RMD_Counter,f,c
 10393                           
 10394                           ;io.c: 472: }
 10395                           
 10396                           ;io.c: 471: break;
 10397  001F70  0012               	return	
 10398  001F72                     l8427:
 10399                           
 10400                           ;io.c: 473: else {SETxAPIxVAL(28, 0);}
 10401  001F72  0E00               	movlw	0
 10402  001F74  0100               	movlb	0	; () banked
 10403  001F76  6F7D               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 10404  001F78  0E00               	movlw	0
 10405  001F7A  6F7C               	movwf	SETxAPIxVAL@value& (0+255),b
 10406  001F7C  0E1C               	movlw	28
 10407  001F7E  EC28  F01B         	call	_SETxAPIxVAL
 10408                           
 10409                           ;io.c: 477: }
 10410                           
 10411                           ;io.c: 476: default : break;
 10412                           
 10413                           ;io.c: 474: break;
 10414  001F82  0012               	return	
 10415  001F84                     l8431:
 10416  001F84  A084               	btfss	3972,0,c	;volatile
 10417  001F86  D002               	goto	u6970
 10418  001F88  0E01               	movlw	1
 10419  001F8A  D001               	goto	u6976
 10420  001F8C                     u6970:
 10421  001F8C  0E00               	movlw	0
 10422  001F8E                     u6976:
 10423                           
 10424                           ; Switch size 1, requested type "space"
 10425                           ; Number of cases is 2, Range of values is 0 to 1
 10426                           ; switch strategies available:
 10427                           ; Name         Instructions Cycles
 10428                           ; simple_byte            7     4 (average)
 10429                           ;	Chosen strategy is simple_byte
 10430  001F8E  0A00               	xorlw	0	; case 0
 10431  001F90  B4D8               	btfsc	status,2,c
 10432  001F92  D7CE               	goto	l8413
 10433  001F94  0A01               	xorlw	1	; case 1
 10434  001F96  A4D8               	btfss	status,2,c
 10435  001F98  0012               	return	
 10436  001F9A  D7E6               	goto	l8421
 10437  001F9C                     __end_of_Debounce_Inputs:
 10438                           	opt stack 0
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           intcon	equ	0xFF2
 10444                           postinc0	equ	0xFEE
 10445                           wreg	equ	0xFE8
 10446                           postdec1	equ	0xFE5
 10447                           fsr1l	equ	0xFE1
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _DECRxAPIxVAL *****************
 10451 ;; Defined at:
 10452 ;;		line 168 in file "../api.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  index           1    wreg     unsigned char 
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  index           1   35[BANK0 ] unsigned char 
 10457 ;;  value           2   33[BANK0 ] unsigned int 
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      void 
 10460 ;; Registers used:
 10461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10467 ;;      Params:         0       0       0       0       0       0       0       0       0
 10468 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10470 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10471 ;;Total ram usage:        3 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    7
 10474 ;; This function calls:
 10475 ;;		_GETxAPIxVAL
 10476 ;;		_SETxAPIxVAL
 10477 ;; This function is called by:
 10478 ;;		_Update_StateMchn
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text19
 10483  0037A2                     __ptext19:
 10484                           	opt stack 0
 10485  0037A2                     _DECRxAPIxVAL:
 10486                           	opt stack 22
 10487                           
 10488                           ;incstack = 0
 10489                           ;DECRxAPIxVAL@index stored from wreg
 10490  0037A2  0100               	movlb	0	; () banked
 10491  0037A4  6F83               	movwf	DECRxAPIxVAL@index& (0+255),b
 10492                           
 10493                           ;api.c: 169: unsigned int value;
 10494                           ;api.c: 170: value = GETxAPIxVAL(index);
 10495  0037A6  0100               	movlb	0	; () banked
 10496  0037A8  5183               	movf	DECRxAPIxVAL@index& (0+255),w,b
 10497  0037AA  EC2B  F01C         	call	_GETxAPIxVAL
 10498  0037AE  C060  F081         	movff	?_GETxAPIxVAL,DECRxAPIxVAL@value
 10499  0037B2  C061  F082         	movff	?_GETxAPIxVAL+1,DECRxAPIxVAL@value+1
 10500                           
 10501                           ;api.c: 171: value--;
 10502  0037B6  0100               	movlb	0	; () banked
 10503  0037B8  0781               	decf	DECRxAPIxVAL@value& (0+255),f,b
 10504  0037BA  A0D8               	btfss	status,0,c
 10505  0037BC  0782               	decf	(DECRxAPIxVAL@value+1)& (0+255),f,b
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;api.c: 172: SETxAPIxVAL(index, value);
 10509  0037BE  C081  F07C         	movff	DECRxAPIxVAL@value,SETxAPIxVAL@value
 10510  0037C2  C082  F07D         	movff	DECRxAPIxVAL@value+1,SETxAPIxVAL@value+1
 10511  0037C6  0100               	movlb	0	; () banked
 10512  0037C8  5183               	movf	DECRxAPIxVAL@index& (0+255),w,b
 10513  0037CA  EC28  F01B         	call	_SETxAPIxVAL
 10514  0037CE  0012               	return		;funcret
 10515  0037D0                     __end_of_DECRxAPIxVAL:
 10516                           	opt stack 0
 10517                           tblptru	equ	0xFF8
 10518                           tblptrh	equ	0xFF7
 10519                           tblptrl	equ	0xFF6
 10520                           tablat	equ	0xFF5
 10521                           intcon	equ	0xFF2
 10522                           postinc0	equ	0xFEE
 10523                           wreg	equ	0xFE8
 10524                           postdec1	equ	0xFE5
 10525                           fsr1l	equ	0xFE1
 10526                           status	equ	0xFD8
 10527                           
 10528 ;; *************** function _SETxAPIxVAL *****************
 10529 ;; Defined at:
 10530 ;;		line 151 in file "../api.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;  index           1    wreg     unsigned char 
 10533 ;;  value           2   28[BANK0 ] unsigned int 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  index           1   32[BANK0 ] unsigned char 
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  1    wreg      void 
 10538 ;; Registers used:
 10539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10545 ;;      Params:         0       2       0       0       0       0       0       0       0
 10546 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10547 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10548 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10549 ;;Total ram usage:        5 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; Hardware stack levels required when called:    6
 10552 ;; This function calls:
 10553 ;;		_SENDxMESSAGE
 10554 ;; This function is called by:
 10555 ;;		_Update_StateMchn
 10556 ;;		_INCRxAPIxVAL
 10557 ;;		_DECRxAPIxVAL
 10558 ;;		_Debounce_Inputs
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           	psect	text20
 10563  003650                     __ptext20:
 10564                           	opt stack 0
 10565  003650                     _SETxAPIxVAL:
 10566                           	opt stack 23
 10567                           
 10568                           ;incstack = 0
 10569                           ;SETxAPIxVAL@index stored from wreg
 10570  003650  0100               	movlb	0	; () banked
 10571  003652  6F80               	movwf	SETxAPIxVAL@index& (0+255),b
 10572                           
 10573                           ;api.c: 152: if(API[index] != value){
 10574  003654  0100               	movlb	0	; () banked
 10575  003656  5180               	movf	SETxAPIxVAL@index& (0+255),w,b
 10576  003658  0D02               	mullw	2
 10577  00365A  0E00               	movlw	low _API
 10578  00365C  24F3               	addwf	prodl,w,c
 10579  00365E  6ED9               	movwf	fsr2l,c
 10580  003660  0E01               	movlw	high _API
 10581  003662  20F4               	addwfc	prodh,w,c
 10582  003664  6EDA               	movwf	fsr2h,c
 10583  003666  0100               	movlb	0	; () banked
 10584  003668  517C               	movf	SETxAPIxVAL@value& (0+255),w,b
 10585  00366A  18DE               	xorwf	postinc2,w,c
 10586  00366C  E105               	bnz	u5960
 10587  00366E  0100               	movlb	0	; () banked
 10588  003670  517D               	movf	(SETxAPIxVAL@value+1)& (0+255),w,b
 10589  003672  18DE               	xorwf	postinc2,w,c
 10590  003674  B4D8               	btfsc	status,2,c
 10591  003676  0012               	return	
 10592  003678                     u5960:
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;api.c: 153: API[index] = value;
 10596  003678  0100               	movlb	0	; () banked
 10597  00367A  5180               	movf	SETxAPIxVAL@index& (0+255),w,b
 10598  00367C  0D02               	mullw	2
 10599  00367E  0E00               	movlw	low _API
 10600  003680  24F3               	addwf	prodl,w,c
 10601  003682  6ED9               	movwf	fsr2l,c
 10602  003684  0E01               	movlw	high _API
 10603  003686  20F4               	addwfc	prodh,w,c
 10604  003688  6EDA               	movwf	fsr2h,c
 10605  00368A  C07C  FFDE         	movff	SETxAPIxVAL@value,postinc2
 10606  00368E  C07D  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;api.c: 154: SENDxMESSAGE(index, value);
 10610  003692  C07C  F077         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 10611  003696  C07D  F078         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 10612  00369A  0100               	movlb	0	; () banked
 10613  00369C  5180               	movf	SETxAPIxVAL@index& (0+255),w,b
 10614  00369E  EC9A  F01B         	call	_SENDxMESSAGE
 10615  0036A2  0012               	return	
 10616  0036A4                     __end_of_SETxAPIxVAL:
 10617                           	opt stack 0
 10618                           tblptru	equ	0xFF8
 10619                           tblptrh	equ	0xFF7
 10620                           tblptrl	equ	0xFF6
 10621                           tablat	equ	0xFF5
 10622                           prodh	equ	0xFF4
 10623                           prodl	equ	0xFF3
 10624                           intcon	equ	0xFF2
 10625                           postinc0	equ	0xFEE
 10626                           wreg	equ	0xFE8
 10627                           postdec1	equ	0xFE5
 10628                           fsr1l	equ	0xFE1
 10629                           postinc2	equ	0xFDE
 10630                           postdec2	equ	0xFDD
 10631                           fsr2h	equ	0xFDA
 10632                           fsr2l	equ	0xFD9
 10633                           status	equ	0xFD8
 10634                           
 10635 ;; *************** function _SENDxMESSAGE *****************
 10636 ;; Defined at:
 10637 ;;		line 23 in file "../terminal.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  index           1    wreg     unsigned char 
 10640 ;;  value           2   23[BANK0 ] unsigned int 
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  index           1   25[BANK0 ] unsigned char 
 10643 ;;  low             1   27[BANK0 ] unsigned char 
 10644 ;;  high            1   26[BANK0 ] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  1    wreg      void 
 10647 ;; Registers used:
 10648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10654 ;;      Params:         0       2       0       0       0       0       0       0       0
 10655 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10657 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10658 ;;Total ram usage:        5 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; Hardware stack levels required when called:    5
 10661 ;; This function calls:
 10662 ;;		_printf
 10663 ;; This function is called by:
 10664 ;;		_SETxAPIxVAL
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text21
 10669  003734                     __ptext21:
 10670                           	opt stack 0
 10671  003734                     _SENDxMESSAGE:
 10672                           	opt stack 23
 10673                           
 10674                           ;incstack = 0
 10675                           ;SENDxMESSAGE@index stored from wreg
 10676  003734  0100               	movlb	0	; () banked
 10677  003736  6F79               	movwf	SENDxMESSAGE@index& (0+255),b
 10678                           
 10679                           ;terminal.c: 26: unsigned char high = value >> 8;
 10680  003738  0100               	movlb	0	; () banked
 10681  00373A  5178               	movf	(SENDxMESSAGE@value+1)& (0+255),w,b
 10682  00373C  0100               	movlb	0	; () banked
 10683  00373E  6F7A               	movwf	SENDxMESSAGE@high& (0+255),b
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;terminal.c: 27: unsigned char low = value;
 10687  003740  C077  F07B         	movff	SENDxMESSAGE@value,SENDxMESSAGE@low
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;terminal.c: 29: printf("\r\nM#%x %x%x\r\n", index, high, low);
 10691  003744  0E1A               	movlw	low STR_1
 10692  003746  0100               	movlb	0	; () banked
 10693  003748  6F67               	movwf	printf@f& (0+255),b
 10694  00374A  0E08               	movlw	high STR_1
 10695  00374C  0100               	movlb	0	; () banked
 10696  00374E  6F68               	movwf	(printf@f+1)& (0+255),b
 10697  003750  C079  F069         	movff	SENDxMESSAGE@index,?_printf+2
 10698  003754  0100               	movlb	0	; () banked
 10699  003756  6B6A               	clrf	(?_printf+3)& (0+255),b
 10700  003758  C07A  F06B         	movff	SENDxMESSAGE@high,?_printf+4
 10701  00375C  0100               	movlb	0	; () banked
 10702  00375E  6B6C               	clrf	(?_printf+5)& (0+255),b
 10703  003760  C07B  F06D         	movff	SENDxMESSAGE@low,?_printf+6
 10704  003764  0100               	movlb	0	; () banked
 10705  003766  6B6E               	clrf	(?_printf+7)& (0+255),b
 10706  003768  EC87  F013         	call	_printf	;wreg free
 10707  00376C  0012               	return		;funcret
 10708  00376E                     __end_of_SENDxMESSAGE:
 10709                           	opt stack 0
 10710                           tblptru	equ	0xFF8
 10711                           tblptrh	equ	0xFF7
 10712                           tblptrl	equ	0xFF6
 10713                           tablat	equ	0xFF5
 10714                           prodh	equ	0xFF4
 10715                           prodl	equ	0xFF3
 10716                           intcon	equ	0xFF2
 10717                           postinc0	equ	0xFEE
 10718                           wreg	equ	0xFE8
 10719                           postdec1	equ	0xFE5
 10720                           fsr1l	equ	0xFE1
 10721                           postinc2	equ	0xFDE
 10722                           postdec2	equ	0xFDD
 10723                           fsr2h	equ	0xFDA
 10724                           fsr2l	equ	0xFD9
 10725                           status	equ	0xFD8
 10726                           
 10727 ;; *************** function _printf *****************
 10728 ;; Defined at:
 10729 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;  f               2    7[BANK0 ] PTR const unsigned char 
 10732 ;;		 -> STR_1(14), 
 10733 ;; Auto vars:     Size  Location     Type
 10734 ;;  idx             1   16[BANK0 ] unsigned char 
 10735 ;;  tmpval          4    0        struct .
 10736 ;;  cp              3    0        PTR const unsigned char 
 10737 ;;  val             2   19[BANK0 ] unsigned int 
 10738 ;;  ap              2   17[BANK0 ] PTR void [1]
 10739 ;;		 -> ?_printf(2), 
 10740 ;;  len             2    0        unsigned int 
 10741 ;;  c               1   22[BANK0 ] char 
 10742 ;;  prec            1   21[BANK0 ] char 
 10743 ;;  flag            1   15[BANK0 ] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  2    7[BANK0 ] int 
 10746 ;; Registers used:
 10747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10753 ;;      Params:         0       8       0       0       0       0       0       0       0
 10754 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10756 ;;      Totals:         0      16       0       0       0       0       0       0       0
 10757 ;;Total ram usage:       16 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    4
 10760 ;; This function calls:
 10761 ;;		___lwdiv
 10762 ;;		_putch
 10763 ;; This function is called by:
 10764 ;;		_SENDxMESSAGE
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           	psect	text22
 10769  00270E                     __ptext22:
 10770                           	opt stack 0
 10771  00270E                     _printf:
 10772                           	opt stack 23
 10773                           
 10774                           ;doprnt.c: 466: va_list ap;
 10775                           ;doprnt.c: 499: signed char c;
 10776                           ;doprnt.c: 506: signed char prec;
 10777                           ;doprnt.c: 508: unsigned char flag;
 10778                           ;doprnt.c: 523: union {
 10779                           ;doprnt.c: 524: unsigned long vd;
 10780                           ;doprnt.c: 525: double integ;
 10781                           ;doprnt.c: 526: } tmpval;
 10782                           ;doprnt.c: 528: unsigned int val;
 10783                           ;doprnt.c: 529: unsigned len;
 10784                           ;doprnt.c: 530: const char * cp;
 10785                           ;doprnt.c: 533: *ap = __va_start();
 10786                           
 10787                           ;incstack = 0
 10788  00270E  0E69               	movlw	low (?_printf+2)
 10789  002710  0100               	movlb	0	; () banked
 10790  002712  6F71               	movwf	printf@ap& (0+255),b
 10791  002714  0E00               	movlw	high (?_printf+2)
 10792  002716  0100               	movlb	0	; () banked
 10793  002718  6F72               	movwf	(printf@ap+1)& (0+255),b
 10794                           
 10795                           ;doprnt.c: 536: while(c = *f++) {
 10796  00271A  D07D               	goto	l7605
 10797  00271C                     l7569:
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;doprnt.c: 538: if(c != '%')
 10801  00271C  0E25               	movlw	37
 10802  00271E  0100               	movlb	0	; () banked
 10803  002720  1976               	xorwf	printf@c& (0+255),w,b
 10804  002722  B4D8               	btfsc	status,2,c
 10805  002724  D005               	goto	l7573
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;doprnt.c: 540: {
 10809                           ;doprnt.c: 541: (putch(c) );
 10810  002726  0100               	movlb	0	; () banked
 10811  002728  5176               	movf	printf@c& (0+255),w,b
 10812  00272A  EC50  F01C         	call	_putch
 10813                           
 10814                           ;doprnt.c: 542: continue;
 10815  00272E  D073               	goto	l7605
 10816  002730                     l7573:
 10817                           
 10818                           ;doprnt.c: 543: }
 10819                           ;doprnt.c: 548: flag = 0;
 10820  002730  0E00               	movlw	0
 10821  002732  0100               	movlb	0	; () banked
 10822  002734  6F6F               	movwf	printf@flag& (0+255),b
 10823                           
 10824                           ; BSR set to: 0
 10825                           
 10826                           ; BSR set to: 0
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;doprnt.c: 822: }
 10830                           
 10831                           ; BSR set to: 0
 10832                           ;doprnt.c: 813: continue;
 10833                           
 10834                           ;doprnt.c: 802: default:
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;doprnt.c: 723: break;
 10838                           
 10839                           ;doprnt.c: 718: case 'x':
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;doprnt.c: 638: goto alldone;
 10843                           
 10844                           ;doprnt.c: 637: case 0:
 10845                           
 10846                           ;doprnt.c: 635: switch(c = *f++) {
 10847  002736  C067  FFF6         	movff	printf@f,tblptrl
 10848  00273A  C068  FFF7         	movff	printf@f+1,tblptrh
 10849  00273E  0100               	movlb	0	; () banked
 10850  002740  4B67               	infsnz	printf@f& (0+255),f,b
 10851  002742  2B68               	incf	(printf@f+1)& (0+255),f,b
 10852  002744                     	if	0	;tblptru may be non-zero
 10853  002744                     	endif
 10854  002744                     	if	0	;tblptru may be non-zero
 10855  002744                     	endif
 10856  002744  0008               	tblrd		*
 10857  002746  CFF5 F076          	movff	tablat,printf@c
 10858  00274A  0100               	movlb	0	; () banked
 10859  00274C  5176               	movf	printf@c& (0+255),w,b
 10860                           
 10861                           ; Switch size 1, requested type "space"
 10862                           ; Number of cases is 2, Range of values is 0 to 120
 10863                           ; switch strategies available:
 10864                           ; Name         Instructions Cycles
 10865                           ; simple_byte            7     4 (average)
 10866                           ;	Chosen strategy is simple_byte
 10867  00274E  0A00               	xorlw	0	; case 0
 10868  002750  B4D8               	btfsc	status,2,c
 10869  002752  0012               	return	
 10870  002754  0A78               	xorlw	120	; case 120
 10871  002756  A4D8               	btfss	status,2,c
 10872  002758  D05E               	goto	l7605
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;doprnt.c: 1273: {
 10876                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10877                           
 10878                           ; BSR set to: 0
 10879  00275A  C071  FFD9         	movff	printf@ap,fsr2l
 10880  00275E  C072  FFDA         	movff	printf@ap+1,fsr2h
 10881  002762  CFDE F073          	movff	postinc2,printf@val
 10882  002766  CFDD F074          	movff	postdec2,printf@val+1
 10883                           
 10884                           ; BSR set to: 0
 10885  00276A  0E02               	movlw	2
 10886  00276C  0100               	movlb	0	; () banked
 10887  00276E  2771               	addwf	printf@ap& (0+255),f,b
 10888  002770  0E00               	movlw	0
 10889  002772  2372               	addwfc	(printf@ap+1)& (0+255),f,b
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;doprnt.c: 1287: }
 10893                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10894  002774  0E01               	movlw	1
 10895  002776  0100               	movlb	0	; () banked
 10896  002778  6F76               	movwf	printf@c& (0+255),b
 10897  00277A                     l7585:
 10898                           
 10899                           ; BSR set to: 0
 10900  00277A  0E04               	movlw	4
 10901  00277C  0100               	movlb	0	; () banked
 10902  00277E  1976               	xorwf	printf@c& (0+255),w,b
 10903  002780  B4D8               	btfsc	status,2,c
 10904  002782  D016               	goto	l1200
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10908                           
 10909                           ; BSR set to: 0
 10910                           
 10911                           ; BSR set to: 0
 10912  002784  0100               	movlb	0	; () banked
 10913  002786  5176               	movf	printf@c& (0+255),w,b
 10914  002788  0D02               	mullw	2
 10915  00278A  0E01               	movlw	low _hexpowers
 10916  00278C  24F3               	addwf	prodl,w,c
 10917  00278E  6EF6               	movwf	tblptrl,c
 10918  002790  0E08               	movlw	high _hexpowers
 10919  002792  20F4               	addwfc	prodh,w,c
 10920  002794  6EF7               	movwf	tblptrh,c
 10921  002796                     	if	0	;There are less than 3 active tblptr bytes
 10922  002796                     	endif
 10923  002796  0009               	tblrd		*+
 10924  002798  50F5               	movf	tablat,w,c
 10925  00279A  0100               	movlb	0	; () banked
 10926  00279C  5D73               	subwf	printf@val& (0+255),w,b
 10927  00279E  0009               	tblrd		*+
 10928  0027A0  50F5               	movf	tablat,w,c
 10929  0027A2  0100               	movlb	0	; () banked
 10930  0027A4  5974               	subwfb	(printf@val+1)& (0+255),w,b
 10931  0027A6  A0D8               	btfss	status,0,c
 10932  0027A8  D003               	goto	l1200
 10933                           
 10934                           ; BSR set to: 0
 10935                           
 10936                           ; BSR set to: 0
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;doprnt.c: 1318: break;
 10940  0027AA  0100               	movlb	0	; () banked
 10941  0027AC  2B76               	incf	printf@c& (0+255),f,b
 10942  0027AE  D7E5               	goto	l7585
 10943  0027B0                     l1200:
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;doprnt.c: 1422: {
 10947                           ;doprnt.c: 1469: }
 10948                           ;doprnt.c: 1472: prec = c;
 10949  0027B0  C076  F075         	movff	printf@c,printf@prec
 10950                           
 10951                           ;doprnt.c: 1474: while(prec--) {
 10952  0027B4  D02A               	goto	l7603
 10953  0027B6                     l7597:
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;doprnt.c: 1478: {
 10957                           ;doprnt.c: 1499: {
 10958                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10959  0027B6  C073  F060         	movff	printf@val,___lwdiv@dividend
 10960  0027BA  C074  F061         	movff	printf@val+1,___lwdiv@dividend+1
 10961  0027BE  0100               	movlb	0	; () banked
 10962  0027C0  5175               	movf	printf@prec& (0+255),w,b
 10963  0027C2  0D02               	mullw	2
 10964  0027C4  0E01               	movlw	low _hexpowers
 10965  0027C6  24F3               	addwf	prodl,w,c
 10966  0027C8  6EF6               	movwf	tblptrl,c
 10967  0027CA  0E08               	movlw	high _hexpowers
 10968  0027CC  20F4               	addwfc	prodh,w,c
 10969  0027CE  6EF7               	movwf	tblptrh,c
 10970  0027D0                     	if	0	;There are less than 3 active tblptr bytes
 10971  0027D0                     	endif
 10972  0027D0  0009               	tblrd		*+
 10973  0027D2  CFF5 F062          	movff	tablat,___lwdiv@divisor
 10974  0027D6  000A               	tblrd		*-
 10975  0027D8  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 10976  0027DC  EC83  F01A         	call	___lwdiv	;wreg free
 10977  0027E0  0100               	movlb	0	; () banked
 10978  0027E2  5160               	movf	?___lwdiv& (0+255),w,b
 10979  0027E4  0B0F               	andlw	15
 10980  0027E6  0100               	movlb	0	; () banked
 10981  0027E8  6F70               	movwf	printf@idx& (0+255),b
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10985  0027EA  0100               	movlb	0	; () banked
 10986  0027EC  5170               	movf	printf@idx& (0+255),w,b
 10987  0027EE  0D01               	mullw	1
 10988  0027F0  0E09               	movlw	low STR_2
 10989  0027F2  24F3               	addwf	prodl,w,c
 10990  0027F4  6EF6               	movwf	tblptrl,c
 10991  0027F6  0E08               	movlw	high STR_2
 10992  0027F8  20F4               	addwfc	prodh,w,c
 10993  0027FA  6EF7               	movwf	tblptrh,c
 10994  0027FC                     	if	0	;There are less than 3 active tblptr bytes
 10995  0027FC                     	endif
 10996  0027FC  0008               	tblrd		*
 10997  0027FE  CFF5 F076          	movff	tablat,printf@c
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;doprnt.c: 1508: }
 11001                           ;doprnt.c: 1523: }
 11002                           ;doprnt.c: 1524: (putch(c) );
 11003  002802  0100               	movlb	0	; () banked
 11004  002804  5176               	movf	printf@c& (0+255),w,b
 11005  002806  EC50  F01C         	call	_putch
 11006  00280A                     l7603:
 11007  00280A  0100               	movlb	0	; () banked
 11008  00280C  0775               	decf	printf@prec& (0+255),f,b
 11009  00280E  0100               	movlb	0	; () banked
 11010  002810  2975               	incf	printf@prec& (0+255),w,b
 11011  002812  A4D8               	btfss	status,2,c
 11012  002814  D7D0               	goto	l7597
 11013  002816                     l7605:
 11014  002816  C067  FFF6         	movff	printf@f,tblptrl
 11015  00281A  C068  FFF7         	movff	printf@f+1,tblptrh
 11016  00281E  0100               	movlb	0	; () banked
 11017  002820  4B67               	infsnz	printf@f& (0+255),f,b
 11018  002822  2B68               	incf	(printf@f+1)& (0+255),f,b
 11019  002824                     	if	0	;tblptru may be non-zero
 11020  002824                     	endif
 11021  002824                     	if	0	;tblptru may be non-zero
 11022  002824                     	endif
 11023  002824  0008               	tblrd		*
 11024  002826  CFF5 F076          	movff	tablat,printf@c
 11025  00282A  0100               	movlb	0	; () banked
 11026  00282C  5176               	movf	printf@c& (0+255),w,b
 11027  00282E  B4D8               	btfsc	status,2,c
 11028  002830  0012               	return	
 11029  002832  D774               	goto	l7569
 11030  002834                     __end_of_printf:
 11031                           	opt stack 0
 11032                           tblptru	equ	0xFF8
 11033                           tblptrh	equ	0xFF7
 11034                           tblptrl	equ	0xFF6
 11035                           tablat	equ	0xFF5
 11036                           prodh	equ	0xFF4
 11037                           prodl	equ	0xFF3
 11038                           intcon	equ	0xFF2
 11039                           postinc0	equ	0xFEE
 11040                           wreg	equ	0xFE8
 11041                           postdec1	equ	0xFE5
 11042                           fsr1l	equ	0xFE1
 11043                           postinc2	equ	0xFDE
 11044                           postdec2	equ	0xFDD
 11045                           fsr2h	equ	0xFDA
 11046                           fsr2l	equ	0xFD9
 11047                           status	equ	0xFD8
 11048                           
 11049 ;; *************** function _putch *****************
 11050 ;; Defined at:
 11051 ;;		line 177 in file "../eusart1.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  data            1    wreg     unsigned char 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;  data            1   31[COMRAM] unsigned char 
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      void 
 11058 ;; Registers used:
 11059 ;;		wreg
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0
 11066 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11067 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11068 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11069 ;;Total ram usage:        1 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    3
 11072 ;; This function calls:
 11073 ;;		Nothing
 11074 ;; This function is called by:
 11075 ;;		_printf
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           	psect	text23
 11080  0038A0                     __ptext23:
 11081                           	opt stack 0
 11082  0038A0                     _putch:
 11083                           	opt stack 23
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;incstack = 0
 11087                           ;putch@data stored from wreg
 11088  0038A0  6E20               	movwf	putch@data,c
 11089  0038A2                     l621:
 11090  0038A2  A89E               	btfss	3998,4,c	;volatile
 11091  0038A4  D7FE               	goto	l621
 11092                           
 11093                           ;eusart1.c: 180: TXREG1 = data;
 11094  0038A6  C020  FFAD         	movff	putch@data,4013	;volatile
 11095  0038AA  0012               	return		;funcret
 11096  0038AC                     __end_of_putch:
 11097                           	opt stack 0
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           postinc0	equ	0xFEE
 11106                           wreg	equ	0xFE8
 11107                           postdec1	equ	0xFE5
 11108                           fsr1l	equ	0xFE1
 11109                           postinc2	equ	0xFDE
 11110                           postdec2	equ	0xFDD
 11111                           fsr2h	equ	0xFDA
 11112                           fsr2l	equ	0xFD9
 11113                           status	equ	0xFD8
 11114                           
 11115 ;; *************** function ___lwdiv *****************
 11116 ;; Defined at:
 11117 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11118 ;; Parameters:    Size  Location     Type
 11119 ;;  dividend        2    0[BANK0 ] unsigned int 
 11120 ;;  divisor         2    2[BANK0 ] unsigned int 
 11121 ;; Auto vars:     Size  Location     Type
 11122 ;;  quotient        2    5[BANK0 ] unsigned int 
 11123 ;;  counter         1    4[BANK0 ] unsigned char 
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  2    0[BANK0 ] unsigned int 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2, status,0
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11133 ;;      Params:         0       4       0       0       0       0       0       0       0
 11134 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11135 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11136 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11137 ;;Total ram usage:        7 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    3
 11140 ;; This function calls:
 11141 ;;		Nothing
 11142 ;; This function is called by:
 11143 ;;		_printf
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text24
 11148  003506                     __ptext24:
 11149                           	opt stack 0
 11150  003506                     ___lwdiv:
 11151                           	opt stack 23
 11152                           
 11153                           ;incstack = 0
 11154  003506  0E00               	movlw	0
 11155  003508  0100               	movlb	0	; () banked
 11156  00350A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11157  00350C  0E00               	movlw	0
 11158  00350E  6F65               	movwf	___lwdiv@quotient& (0+255),b
 11159                           
 11160                           ; BSR set to: 0
 11161  003510  0100               	movlb	0	; () banked
 11162  003512  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11163  003514  0100               	movlb	0	; () banked
 11164  003516  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11165  003518  B4D8               	btfsc	status,2,c
 11166  00351A  D02C               	goto	l1616
 11167                           
 11168                           ; BSR set to: 0
 11169  00351C  0E01               	movlw	1
 11170  00351E  0100               	movlb	0	; () banked
 11171  003520  6F64               	movwf	___lwdiv@counter& (0+255),b
 11172  003522  D006               	goto	l7553
 11173  003524                     l7551:
 11174                           
 11175                           ; BSR set to: 0
 11176  003524  0100               	movlb	0	; () banked
 11177  003526  90D8               	bcf	status,0,c
 11178  003528  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 11179  00352A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11180  00352C  0100               	movlb	0	; () banked
 11181  00352E  2B64               	incf	___lwdiv@counter& (0+255),f,b
 11182  003530                     l7553:
 11183                           
 11184                           ; BSR set to: 0
 11185  003530  0100               	movlb	0	; () banked
 11186  003532  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11187  003534  D7F7               	goto	l7551
 11188  003536                     l7555:
 11189                           
 11190                           ; BSR set to: 0
 11191  003536  0100               	movlb	0	; () banked
 11192  003538  90D8               	bcf	status,0,c
 11193  00353A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 11194  00353C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11195                           
 11196                           ; BSR set to: 0
 11197  00353E  0100               	movlb	0	; () banked
 11198  003540  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11199  003542  0100               	movlb	0	; () banked
 11200  003544  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 11201  003546  0100               	movlb	0	; () banked
 11202  003548  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11203  00354A  0100               	movlb	0	; () banked
 11204  00354C  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11205  00354E  A0D8               	btfss	status,0,c
 11206  003550  D00A               	goto	l7563
 11207                           
 11208                           ; BSR set to: 0
 11209  003552  0100               	movlb	0	; () banked
 11210  003554  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11211  003556  0100               	movlb	0	; () banked
 11212  003558  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 11213  00355A  0100               	movlb	0	; () banked
 11214  00355C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11215  00355E  0100               	movlb	0	; () banked
 11216  003560  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11217                           
 11218                           ; BSR set to: 0
 11219  003562  0100               	movlb	0	; () banked
 11220  003564  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 11221  003566                     l7563:
 11222                           
 11223                           ; BSR set to: 0
 11224  003566  0100               	movlb	0	; () banked
 11225  003568  90D8               	bcf	status,0,c
 11226  00356A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11227  00356C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 11228                           
 11229                           ; BSR set to: 0
 11230  00356E  0100               	movlb	0	; () banked
 11231  003570  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 11232  003572  D7E1               	goto	l7555
 11233  003574                     l1616:
 11234                           
 11235                           ; BSR set to: 0
 11236  003574  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 11237  003578  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11238                           
 11239                           ; BSR set to: 0
 11240  00357C  0012               	return		;funcret
 11241  00357E                     __end_of___lwdiv:
 11242                           	opt stack 0
 11243                           tblptru	equ	0xFF8
 11244                           tblptrh	equ	0xFF7
 11245                           tblptrl	equ	0xFF6
 11246                           tablat	equ	0xFF5
 11247                           prodh	equ	0xFF4
 11248                           prodl	equ	0xFF3
 11249                           intcon	equ	0xFF2
 11250                           postinc0	equ	0xFEE
 11251                           wreg	equ	0xFE8
 11252                           postdec1	equ	0xFE5
 11253                           fsr1l	equ	0xFE1
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           fsr2h	equ	0xFDA
 11257                           fsr2l	equ	0xFD9
 11258                           status	equ	0xFD8
 11259                           
 11260 ;; *************** function _GETxAPIxVAL *****************
 11261 ;; Defined at:
 11262 ;;		line 157 in file "../api.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;  index           1    wreg     unsigned char 
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;  index           1   31[COMRAM] unsigned char 
 11267 ;; Return value:  Size  Location     Type
 11268 ;;                  2    0[BANK0 ] unsigned int 
 11269 ;; Registers used:
 11270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/0
 11273 ;;		On exit  : 0/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11276 ;;      Params:         0       2       0       0       0       0       0       0       0
 11277 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11278 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11279 ;;      Totals:         1       2       0       0       0       0       0       0       0
 11280 ;;Total ram usage:        3 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:    3
 11283 ;; This function calls:
 11284 ;;		Nothing
 11285 ;; This function is called by:
 11286 ;;		_Update_StateMchn
 11287 ;;		_Train_Path
 11288 ;;		_INCRxAPIxVAL
 11289 ;;		_DECRxAPIxVAL
 11290 ;;		_Eeprom_Store
 11291 ;;		_Debounce_Inputs
 11292 ;;		_Junction
 11293 ;;		_Train_Move_Left_Start
 11294 ;;		_Right_Mountain_From_The_Right
 11295 ;;		_Left_Mountain_From_The_Right
 11296 ;;		_Train_Move_Left_Brake
 11297 ;;		_Train_Move_Right_Start
 11298 ;;		_Left_Mountain_From_The_Left
 11299 ;;		_Right_Mountain_From_The_Left
 11300 ;;		_Train_Move_Right_Brake
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text25
 11305  003856                     __ptext25:
 11306                           	opt stack 0
 11307  003856                     _GETxAPIxVAL:
 11308                           	opt stack 24
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;incstack = 0
 11312                           ;GETxAPIxVAL@index stored from wreg
 11313  003856  6E20               	movwf	GETxAPIxVAL@index,c
 11314                           
 11315                           ;api.c: 158: return API[index];
 11316  003858  5020               	movf	GETxAPIxVAL@index,w,c
 11317  00385A  0D02               	mullw	2
 11318  00385C  0E00               	movlw	low _API
 11319  00385E  24F3               	addwf	prodl,w,c
 11320  003860  6ED9               	movwf	fsr2l,c
 11321  003862  0E01               	movlw	high _API
 11322  003864  20F4               	addwfc	prodh,w,c
 11323  003866  6EDA               	movwf	fsr2h,c
 11324  003868  CFDE F060          	movff	postinc2,?_GETxAPIxVAL
 11325  00386C  CFDD F061          	movff	postdec2,?_GETxAPIxVAL+1
 11326  003870  0012               	return	
 11327  003872                     __end_of_GETxAPIxVAL:
 11328                           	opt stack 0
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           prodh	equ	0xFF4
 11334                           prodl	equ	0xFF3
 11335                           intcon	equ	0xFF2
 11336                           postinc0	equ	0xFEE
 11337                           wreg	equ	0xFE8
 11338                           postdec1	equ	0xFE5
 11339                           fsr1l	equ	0xFE1
 11340                           postinc2	equ	0xFDE
 11341                           postdec2	equ	0xFDD
 11342                           fsr2h	equ	0xFDA
 11343                           fsr2l	equ	0xFD9
 11344                           status	equ	0xFD8
 11345                           
 11346 ;; *************** function _Init_Timers *****************
 11347 ;; Defined at:
 11348 ;;		line 180 in file "../Main.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;		None
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;		None
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      void 
 11355 ;; Registers used:
 11356 ;;		wreg, status,2
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11362 ;;      Params:         0       0       0       0       0       0       0       0       0
 11363 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11364 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11365 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11366 ;;Total ram usage:        0 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    3
 11369 ;; This function calls:
 11370 ;;		Nothing
 11371 ;; This function is called by:
 11372 ;;		_main
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           	psect	text26
 11377  003872                     __ptext26:
 11378                           	opt stack 0
 11379  003872                     _Init_Timers:
 11380                           	opt stack 27
 11381                           
 11382                           ;Main.c: 182: RCONbits.IPEN = 1;
 11383                           
 11384                           ;incstack = 0
 11385  003872  8ED0               	bsf	4048,7,c	;volatile
 11386                           
 11387                           ;Main.c: 183: INTCON = 0xA0;
 11388  003874  0EA0               	movlw	160
 11389  003876  6EF2               	movwf	intcon,c	;volatile
 11390                           
 11391                           ;Main.c: 184: INTCON2 = 0x84;
 11392  003878  0E84               	movlw	132
 11393  00387A  6EF1               	movwf	intcon2,c	;volatile
 11394                           
 11395                           ;Main.c: 185: TMR0H = 0x0;
 11396  00387C  0E00               	movlw	0
 11397  00387E  6ED7               	movwf	4055,c	;volatile
 11398                           
 11399                           ;Main.c: 186: TMR0L = 0x0;
 11400  003880  0E00               	movlw	0
 11401  003882  6ED6               	movwf	4054,c	;volatile
 11402                           
 11403                           ;Main.c: 187: T0CON = 0xC3;
 11404  003884  0EC3               	movlw	195
 11405  003886  6ED5               	movwf	4053,c	;volatile
 11406  003888  0012               	return		;funcret
 11407  00388A                     __end_of_Init_Timers:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           intcon	equ	0xFF2
 11416                           intcon2	equ	0xFF1
 11417                           postinc0	equ	0xFEE
 11418                           wreg	equ	0xFE8
 11419                           postdec1	equ	0xFE5
 11420                           fsr1l	equ	0xFE1
 11421                           postinc2	equ	0xFDE
 11422                           postdec2	equ	0xFDD
 11423                           fsr2h	equ	0xFDA
 11424                           fsr2l	equ	0xFD9
 11425                           status	equ	0xFD8
 11426                           
 11427 ;; *************** function _Init_Pwm *****************
 11428 ;; Defined at:
 11429 ;;		line 193 in file "../Main.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;		None
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      void 
 11436 ;; Registers used:
 11437 ;;		wreg, status,2
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11443 ;;      Params:         0       0       0       0       0       0       0       0       0
 11444 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11446 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11447 ;;Total ram usage:        0 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    3
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_main
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text27
 11458  00388A                     __ptext27:
 11459                           	opt stack 0
 11460  00388A                     _Init_Pwm:
 11461                           	opt stack 27
 11462                           
 11463                           ;Main.c: 196: PORTCbits.RC0 = 1;
 11464                           
 11465                           ;incstack = 0
 11466  00388A  8082               	bsf	3970,0,c	;volatile
 11467                           
 11468                           ;Main.c: 197: PR2=0xFF;
 11469  00388C  68CB               	setf	4043,c	;volatile
 11470                           
 11471                           ;Main.c: 198: CCPR1L = 0x7F;
 11472  00388E  0E7F               	movlw	127
 11473  003890  6EBE               	movwf	4030,c	;volatile
 11474                           
 11475                           ;Main.c: 199: CCP1CON = 0x0F;
 11476  003892  0E0F               	movlw	15
 11477  003894  6EBD               	movwf	4029,c	;volatile
 11478                           
 11479                           ;Main.c: 200: T2CON = 0x04;
 11480  003896  0E04               	movlw	4
 11481  003898  6ECA               	movwf	4042,c	;volatile
 11482                           
 11483                           ;Main.c: 201: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11484  00389A  9494               	bcf	3988,2,c	;volatile
 11485  00389C  9094               	bcf	3988,0,c	;volatile
 11486  00389E  0012               	return		;funcret
 11487  0038A0                     __end_of_Init_Pwm:
 11488                           	opt stack 0
 11489                           tblptru	equ	0xFF8
 11490                           tblptrh	equ	0xFF7
 11491                           tblptrl	equ	0xFF6
 11492                           tablat	equ	0xFF5
 11493                           prodh	equ	0xFF4
 11494                           prodl	equ	0xFF3
 11495                           intcon	equ	0xFF2
 11496                           intcon2	equ	0xFF1
 11497                           postinc0	equ	0xFEE
 11498                           wreg	equ	0xFE8
 11499                           postdec1	equ	0xFE5
 11500                           fsr1l	equ	0xFE1
 11501                           postinc2	equ	0xFDE
 11502                           postdec2	equ	0xFDD
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8
 11506                           
 11507 ;; *************** function _INIT_TERMINAL *****************
 11508 ;; Defined at:
 11509 ;;		line 14 in file "../terminal.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;		None
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;  i               2    0[BANK0 ] int 
 11514 ;; Return value:  Size  Location     Type
 11515 ;;                  1    wreg      void 
 11516 ;; Registers used:
 11517 ;;		wreg, status,2, status,0
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11523 ;;      Params:         0       0       0       0       0       0       0       0       0
 11524 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11525 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11526 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11527 ;;Total ram usage:        2 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:    3
 11530 ;; This function calls:
 11531 ;;		Nothing
 11532 ;; This function is called by:
 11533 ;;		_main
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           	psect	text28
 11538  00376E                     __ptext28:
 11539                           	opt stack 0
 11540  00376E                     _INIT_TERMINAL:
 11541                           	opt stack 27
 11542                           
 11543                           ;terminal.c: 15: int i = 0;
 11544                           
 11545                           ;incstack = 0
 11546  00376E  0E00               	movlw	0
 11547  003770  0100               	movlb	0	; () banked
 11548  003772  6F61               	movwf	(INIT_TERMINAL@i+1)& (0+255),b
 11549  003774  0E00               	movlw	0
 11550  003776  6F60               	movwf	INIT_TERMINAL@i& (0+255),b
 11551                           
 11552                           ;terminal.c: 16: for (i=0; i<22; i++){
 11553  003778  0E00               	movlw	0
 11554  00377A  0100               	movlb	0	; () banked
 11555  00377C  6F61               	movwf	(INIT_TERMINAL@i+1)& (0+255),b
 11556  00377E  0E00               	movlw	0
 11557  003780  6F60               	movwf	INIT_TERMINAL@i& (0+255),b
 11558  003782                     l8769:
 11559                           
 11560                           ; BSR set to: 0
 11561  003782  0100               	movlb	0	; () banked
 11562  003784  BF61               	btfsc	(INIT_TERMINAL@i+1)& (0+255),7,b
 11563  003786  D008               	goto	l8773
 11564  003788  0100               	movlb	0	; () banked
 11565  00378A  5161               	movf	(INIT_TERMINAL@i+1)& (0+255),w,b
 11566  00378C  E109               	bnz	l642
 11567  00378E  0E16               	movlw	22
 11568  003790  0100               	movlb	0	; () banked
 11569  003792  5D60               	subwf	INIT_TERMINAL@i& (0+255),w,b
 11570  003794  B0D8               	btfsc	status,0,c
 11571  003796  0012               	return	
 11572  003798                     l8773:
 11573                           
 11574                           ; BSR set to: 0
 11575  003798  0100               	movlb	0	; () banked
 11576  00379A  4B60               	infsnz	INIT_TERMINAL@i& (0+255),f,b
 11577  00379C  2B61               	incf	(INIT_TERMINAL@i+1)& (0+255),f,b
 11578  00379E  D7F1               	goto	l8769
 11579  0037A0                     l642:
 11580                           
 11581                           ; BSR set to: 0
 11582  0037A0  0012               	return		;funcret
 11583  0037A2                     __end_of_INIT_TERMINAL:
 11584                           	opt stack 0
 11585                           tblptru	equ	0xFF8
 11586                           tblptrh	equ	0xFF7
 11587                           tblptrl	equ	0xFF6
 11588                           tablat	equ	0xFF5
 11589                           prodh	equ	0xFF4
 11590                           prodl	equ	0xFF3
 11591                           intcon	equ	0xFF2
 11592                           intcon2	equ	0xFF1
 11593                           postinc0	equ	0xFEE
 11594                           wreg	equ	0xFE8
 11595                           postdec1	equ	0xFE5
 11596                           fsr1l	equ	0xFE1
 11597                           postinc2	equ	0xFDE
 11598                           postdec2	equ	0xFDD
 11599                           fsr2h	equ	0xFDA
 11600                           fsr2l	equ	0xFD9
 11601                           status	equ	0xFD8
 11602                           
 11603 ;; *************** function _EUSART1_Initialize *****************
 11604 ;; Defined at:
 11605 ;;		line 77 in file "../eusart1.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;		None
 11608 ;; Auto vars:     Size  Location     Type
 11609 ;;  baud_rate       2    0[BANK0 ] unsigned int 
 11610 ;; Return value:  Size  Location     Type
 11611 ;;                  1    wreg      void 
 11612 ;; Registers used:
 11613 ;;		wreg, status,2
 11614 ;; Tracked objects:
 11615 ;;		On entry : 0/0
 11616 ;;		On exit  : 0/0
 11617 ;;		Unchanged: 0/0
 11618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11619 ;;      Params:         0       0       0       0       0       0       0       0       0
 11620 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11621 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11622 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11623 ;;Total ram usage:        2 bytes
 11624 ;; Hardware stack levels used:    1
 11625 ;; Hardware stack levels required when called:    3
 11626 ;; This function calls:
 11627 ;;		Nothing
 11628 ;; This function is called by:
 11629 ;;		_main
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           	psect	text29
 11634  0036A4                     __ptext29:
 11635                           	opt stack 0
 11636  0036A4                     _EUSART1_Initialize:
 11637                           	opt stack 27
 11638                           
 11639                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;incstack = 0
 11643  0036A4  9A9D               	bcf	3997,5,c	;volatile
 11644                           
 11645                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 11646  0036A6  989D               	bcf	3997,4,c	;volatile
 11647                           
 11648                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 11649  0036A8  86B8               	bsf	4024,3,c	;volatile
 11650                           
 11651                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 11652  0036AA  8EAB               	bsf	4011,7,c	;volatile
 11653                           
 11654                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 11655  0036AC  9CAB               	bcf	4011,6,c	;volatile
 11656                           
 11657                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 11658  0036AE  88AB               	bsf	4011,4,c	;volatile
 11659                           
 11660                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 11661  0036B0  96AB               	bcf	4011,3,c	;volatile
 11662                           
 11663                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 11664  0036B2  9CAC               	bcf	4012,6,c	;volatile
 11665                           
 11666                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 11667  0036B4  8AAC               	bsf	4012,5,c	;volatile
 11668                           
 11669                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 11670  0036B6  98AC               	bcf	4012,4,c	;volatile
 11671                           
 11672                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 11673  0036B8  96AC               	bcf	4012,3,c	;volatile
 11674                           
 11675                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 11676  0036BA  84AC               	bsf	4012,2,c	;volatile
 11677                           
 11678                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 11679  0036BC  82AC               	bsf	4012,1,c	;volatile
 11680                           
 11681                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 11682  0036BE  90AC               	bcf	4012,0,c	;volatile
 11683                           
 11684                           ;eusart1.c: 99: unsigned int baud_rate;
 11685                           ;eusart1.c: 101: baud_rate = 417;
 11686  0036C0  0E01               	movlw	1
 11687  0036C2  0100               	movlb	0	; () banked
 11688  0036C4  6F61               	movwf	(EUSART1_Initialize@baud_rate+1)& (0+255),b
 11689  0036C6  0EA1               	movlw	161
 11690  0036C8  6F60               	movwf	EUSART1_Initialize@baud_rate& (0+255),b
 11691                           
 11692                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 11693  0036CA  0100               	movlb	0	; () banked
 11694  0036CC  5161               	movf	(EUSART1_Initialize@baud_rate+1)& (0+255),w,b
 11695  0036CE  6EB0               	movwf	4016,c	;volatile
 11696                           
 11697                           ; BSR set to: 0
 11698                           ;eusart1.c: 104: SPBRG = baud_rate;
 11699  0036D0  C060  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 11700                           
 11701                           ;eusart1.c: 108: eusart1TxHead = 0;
 11702  0036D4  0E00               	movlw	0
 11703  0036D6  6E3E               	movwf	_eusart1TxHead,c
 11704                           
 11705                           ;eusart1.c: 109: eusart1TxTail = 0;
 11706  0036D8  0E00               	movlw	0
 11707  0036DA  6E3F               	movwf	_eusart1TxTail,c
 11708                           
 11709                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 11710  0036DC  0E7E               	movlw	126
 11711  0036DE  6E3D               	movwf	_eusart1TxBufferRemaining,c	;volatile
 11712                           
 11713                           ;eusart1.c: 112: eusart1RxHead = 0;
 11714  0036E0  0E00               	movlw	0
 11715  0036E2  6E3B               	movwf	_eusart1RxHead,c
 11716                           
 11717                           ;eusart1.c: 113: eusart1RxTail = 0;
 11718  0036E4  0E00               	movlw	0
 11719  0036E6  6E3C               	movwf	_eusart1RxTail,c
 11720                           
 11721                           ;eusart1.c: 114: eusart1RxCount = 0;
 11722  0036E8  0E00               	movlw	0
 11723  0036EA  6E3A               	movwf	_eusart1RxCount,c	;volatile
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 11727  0036EC  8A9D               	bsf	3997,5,c	;volatile
 11728                           
 11729                           ; BSR set to: 0
 11730  0036EE  0012               	return		;funcret
 11731  0036F0                     __end_of_EUSART1_Initialize:
 11732                           	opt stack 0
 11733                           tblptru	equ	0xFF8
 11734                           tblptrh	equ	0xFF7
 11735                           tblptrl	equ	0xFF6
 11736                           tablat	equ	0xFF5
 11737                           prodh	equ	0xFF4
 11738                           prodl	equ	0xFF3
 11739                           intcon	equ	0xFF2
 11740                           intcon2	equ	0xFF1
 11741                           postinc0	equ	0xFEE
 11742                           wreg	equ	0xFE8
 11743                           postdec1	equ	0xFE5
 11744                           fsr1l	equ	0xFE1
 11745                           postinc2	equ	0xFDE
 11746                           postdec2	equ	0xFDD
 11747                           fsr2h	equ	0xFDA
 11748                           fsr2l	equ	0xFD9
 11749                           status	equ	0xFD8
 11750                           
 11751 ;; *************** function _APIxInitialize *****************
 11752 ;; Defined at:
 11753 ;;		line 31 in file "../api.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;		None
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;  i               2    0[BANK0 ] unsigned int 
 11758 ;; Return value:  Size  Location     Type
 11759 ;;                  1    wreg      void 
 11760 ;; Registers used:
 11761 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11762 ;; Tracked objects:
 11763 ;;		On entry : 0/0
 11764 ;;		On exit  : 0/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11767 ;;      Params:         0       0       0       0       0       0       0       0       0
 11768 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11769 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11770 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11771 ;;Total ram usage:        2 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    3
 11774 ;; This function calls:
 11775 ;;		Nothing
 11776 ;; This function is called by:
 11777 ;;		_main
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           	psect	text30
 11782  001F9C                     __ptext30:
 11783                           	opt stack 0
 11784  001F9C                     _APIxInitialize:
 11785                           	opt stack 27
 11786                           
 11787                           ;api.c: 33: unsigned int i;
 11788                           ;api.c: 34: for(i = 0; i < (63 + 1); i++ )
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;incstack = 0
 11792  001F9C  0E00               	movlw	0
 11793  001F9E  0100               	movlb	0	; () banked
 11794  001FA0  6F61               	movwf	(APIxInitialize@i+1)& (0+255),b
 11795  001FA2  0E00               	movlw	0
 11796  001FA4  6F60               	movwf	APIxInitialize@i& (0+255),b
 11797  001FA6                     l8747:
 11798                           
 11799                           ; BSR set to: 0
 11800  001FA6  0100               	movlb	0	; () banked
 11801  001FA8  5161               	movf	(APIxInitialize@i+1)& (0+255),w,b
 11802  001FAA  E127               	bnz	l8757
 11803  001FAC  0E40               	movlw	64
 11804  001FAE  0100               	movlb	0	; () banked
 11805  001FB0  5D60               	subwf	APIxInitialize@i& (0+255),w,b
 11806  001FB2  B0D8               	btfsc	status,0,c
 11807  001FB4  D022               	goto	l8757
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;api.c: 35: {
 11811                           ;api.c: 36: API_RW[i] = 0;
 11812                           
 11813                           ; BSR set to: 0
 11814                           
 11815                           ; BSR set to: 0
 11816  001FB6  90D8               	bcf	status,0,c
 11817  001FB8  0100               	movlb	0	; () banked
 11818  001FBA  3560               	rlcf	APIxInitialize@i& (0+255),w,b
 11819  001FBC  6ED9               	movwf	fsr2l,c
 11820  001FBE  0100               	movlb	0	; () banked
 11821  001FC0  3561               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 11822  001FC2  6EDA               	movwf	fsr2h,c
 11823  001FC4  0E7E               	movlw	low _API_RW
 11824  001FC6  26D9               	addwf	fsr2l,f,c
 11825  001FC8  0E01               	movlw	high _API_RW
 11826  001FCA  22DA               	addwfc	fsr2h,f,c
 11827  001FCC  0E00               	movlw	0
 11828  001FCE  6EDE               	movwf	postinc2,c
 11829  001FD0  0E00               	movlw	0
 11830  001FD2  6EDD               	movwf	postdec2,c
 11831                           
 11832                           ;api.c: 37: API[i] = 0;
 11833  001FD4  90D8               	bcf	status,0,c
 11834  001FD6  0100               	movlb	0	; () banked
 11835  001FD8  3560               	rlcf	APIxInitialize@i& (0+255),w,b
 11836  001FDA  6ED9               	movwf	fsr2l,c
 11837  001FDC  0100               	movlb	0	; () banked
 11838  001FDE  3561               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 11839  001FE0  6EDA               	movwf	fsr2h,c
 11840  001FE2  0E00               	movlw	low _API
 11841  001FE4  26D9               	addwf	fsr2l,f,c
 11842  001FE6  0E01               	movlw	high _API
 11843  001FE8  22DA               	addwfc	fsr2h,f,c
 11844  001FEA  0E00               	movlw	0
 11845  001FEC  6EDE               	movwf	postinc2,c
 11846  001FEE  0E00               	movlw	0
 11847  001FF0  6EDD               	movwf	postdec2,c
 11848                           
 11849                           ; BSR set to: 0
 11850  001FF2  0100               	movlb	0	; () banked
 11851  001FF4  4B60               	infsnz	APIxInitialize@i& (0+255),f,b
 11852  001FF6  2B61               	incf	(APIxInitialize@i+1)& (0+255),f,b
 11853  001FF8  D7D6               	goto	l8747
 11854  001FFA                     l8757:
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;api.c: 38: }
 11858                           ;api.c: 41: API_RW[0] = 0;
 11859  001FFA  0E00               	movlw	0
 11860  001FFC  0101               	movlb	1	; () banked
 11861  001FFE  6F7F               	movwf	(_API_RW+1)& (0+255),b
 11862  002000  0E00               	movlw	0
 11863  002002  6F7E               	movwf	_API_RW& (0+255),b
 11864                           
 11865                           ;api.c: 42: API_RW[2] = 1;
 11866  002004  0E00               	movlw	0
 11867  002006  0101               	movlb	1	; () banked
 11868  002008  6F83               	movwf	(_API_RW+5)& (0+255),b
 11869  00200A  0E01               	movlw	1
 11870  00200C  6F82               	movwf	(_API_RW+4)& (0+255),b
 11871                           
 11872                           ;api.c: 43: API_RW[3] = 1;
 11873  00200E  0E00               	movlw	0
 11874  002010  0101               	movlb	1	; () banked
 11875  002012  6F85               	movwf	(_API_RW+7)& (0+255),b
 11876  002014  0E01               	movlw	1
 11877  002016  6F84               	movwf	(_API_RW+6)& (0+255),b
 11878                           
 11879                           ;api.c: 44: API_RW[4] = 1;
 11880  002018  0E00               	movlw	0
 11881  00201A  0101               	movlb	1	; () banked
 11882  00201C  6F87               	movwf	(_API_RW+9)& (0+255),b
 11883  00201E  0E01               	movlw	1
 11884  002020  6F86               	movwf	(_API_RW+8)& (0+255),b
 11885                           
 11886                           ;api.c: 45: API_RW[5] = 1;
 11887  002022  0E00               	movlw	0
 11888  002024  0101               	movlb	1	; () banked
 11889  002026  6F89               	movwf	(_API_RW+11)& (0+255),b
 11890  002028  0E01               	movlw	1
 11891  00202A  6F88               	movwf	(_API_RW+10)& (0+255),b
 11892                           
 11893                           ;api.c: 46: API_RW[6] = 1;
 11894  00202C  0E00               	movlw	0
 11895  00202E  0101               	movlb	1	; () banked
 11896  002030  6F8B               	movwf	(_API_RW+13)& (0+255),b
 11897  002032  0E01               	movlw	1
 11898  002034  6F8A               	movwf	(_API_RW+12)& (0+255),b
 11899                           
 11900                           ;api.c: 47: API_RW[7] = 1;
 11901  002036  0E00               	movlw	0
 11902  002038  0101               	movlb	1	; () banked
 11903  00203A  6F8D               	movwf	(_API_RW+15)& (0+255),b
 11904  00203C  0E01               	movlw	1
 11905  00203E  6F8C               	movwf	(_API_RW+14)& (0+255),b
 11906                           
 11907                           ;api.c: 48: API_RW[8] = 1;
 11908  002040  0E00               	movlw	0
 11909  002042  0101               	movlb	1	; () banked
 11910  002044  6F8F               	movwf	(_API_RW+17)& (0+255),b
 11911  002046  0E01               	movlw	1
 11912  002048  6F8E               	movwf	(_API_RW+16)& (0+255),b
 11913                           
 11914                           ;api.c: 49: API_RW[9] = 1;
 11915  00204A  0E00               	movlw	0
 11916  00204C  0101               	movlb	1	; () banked
 11917  00204E  6F91               	movwf	(_API_RW+19)& (0+255),b
 11918  002050  0E01               	movlw	1
 11919  002052  6F90               	movwf	(_API_RW+18)& (0+255),b
 11920                           
 11921                           ;api.c: 50: API_RW[10] = 1;
 11922  002054  0E00               	movlw	0
 11923  002056  0101               	movlb	1	; () banked
 11924  002058  6F93               	movwf	(_API_RW+21)& (0+255),b
 11925  00205A  0E01               	movlw	1
 11926  00205C  6F92               	movwf	(_API_RW+20)& (0+255),b
 11927                           
 11928                           ;api.c: 51: API_RW[11] = 1;
 11929  00205E  0E00               	movlw	0
 11930  002060  0101               	movlb	1	; () banked
 11931  002062  6F95               	movwf	(_API_RW+23)& (0+255),b
 11932  002064  0E01               	movlw	1
 11933  002066  6F94               	movwf	(_API_RW+22)& (0+255),b
 11934                           
 11935                           ;api.c: 52: API_RW[12] = 0;
 11936  002068  0E00               	movlw	0
 11937  00206A  0101               	movlb	1	; () banked
 11938  00206C  6F97               	movwf	(_API_RW+25)& (0+255),b
 11939  00206E  0E00               	movlw	0
 11940  002070  6F96               	movwf	(_API_RW+24)& (0+255),b
 11941                           
 11942                           ;api.c: 53: API_RW[13] = 0;
 11943  002072  0E00               	movlw	0
 11944  002074  0101               	movlb	1	; () banked
 11945  002076  6F99               	movwf	(_API_RW+27)& (0+255),b
 11946  002078  0E00               	movlw	0
 11947  00207A  6F98               	movwf	(_API_RW+26)& (0+255),b
 11948                           
 11949                           ;api.c: 54: API_RW[14] = 0;
 11950  00207C  0E00               	movlw	0
 11951  00207E  0101               	movlb	1	; () banked
 11952  002080  6F9B               	movwf	(_API_RW+29)& (0+255),b
 11953  002082  0E00               	movlw	0
 11954  002084  6F9A               	movwf	(_API_RW+28)& (0+255),b
 11955                           
 11956                           ;api.c: 55: API_RW[15] = 0;
 11957  002086  0E00               	movlw	0
 11958  002088  0101               	movlb	1	; () banked
 11959  00208A  6F9D               	movwf	(_API_RW+31)& (0+255),b
 11960  00208C  0E00               	movlw	0
 11961  00208E  6F9C               	movwf	(_API_RW+30)& (0+255),b
 11962                           
 11963                           ;api.c: 56: API_RW[16] = 0;
 11964  002090  0E00               	movlw	0
 11965  002092  0101               	movlb	1	; () banked
 11966  002094  6F9F               	movwf	(_API_RW+33)& (0+255),b
 11967  002096  0E00               	movlw	0
 11968  002098  6F9E               	movwf	(_API_RW+32)& (0+255),b
 11969                           
 11970                           ;api.c: 57: API_RW[17] = 0;
 11971  00209A  0E00               	movlw	0
 11972  00209C  0101               	movlb	1	; () banked
 11973  00209E  6FA1               	movwf	(_API_RW+35)& (0+255),b
 11974  0020A0  0E00               	movlw	0
 11975  0020A2  6FA0               	movwf	(_API_RW+34)& (0+255),b
 11976                           
 11977                           ;api.c: 58: API_RW[18] = 0;
 11978  0020A4  0E00               	movlw	0
 11979  0020A6  0101               	movlb	1	; () banked
 11980  0020A8  6FA3               	movwf	(_API_RW+37)& (0+255),b
 11981  0020AA  0E00               	movlw	0
 11982  0020AC  6FA2               	movwf	(_API_RW+36)& (0+255),b
 11983                           
 11984                           ;api.c: 59: API_RW[19] = 0;
 11985  0020AE  0E00               	movlw	0
 11986  0020B0  0101               	movlb	1	; () banked
 11987  0020B2  6FA5               	movwf	(_API_RW+39)& (0+255),b
 11988  0020B4  0E00               	movlw	0
 11989  0020B6  6FA4               	movwf	(_API_RW+38)& (0+255),b
 11990                           
 11991                           ;api.c: 60: API_RW[20] = 0;
 11992  0020B8  0E00               	movlw	0
 11993  0020BA  0101               	movlb	1	; () banked
 11994  0020BC  6FA7               	movwf	(_API_RW+41)& (0+255),b
 11995  0020BE  0E00               	movlw	0
 11996  0020C0  6FA6               	movwf	(_API_RW+40)& (0+255),b
 11997                           
 11998                           ;api.c: 61: API_RW[21] = 0;
 11999  0020C2  0E00               	movlw	0
 12000  0020C4  0101               	movlb	1	; () banked
 12001  0020C6  6FA9               	movwf	(_API_RW+43)& (0+255),b
 12002  0020C8  0E00               	movlw	0
 12003  0020CA  6FA8               	movwf	(_API_RW+42)& (0+255),b
 12004                           
 12005                           ;api.c: 62: API_RW[22] = 0;
 12006  0020CC  0E00               	movlw	0
 12007  0020CE  0101               	movlb	1	; () banked
 12008  0020D0  6FAB               	movwf	(_API_RW+45)& (0+255),b
 12009  0020D2  0E00               	movlw	0
 12010  0020D4  6FAA               	movwf	(_API_RW+44)& (0+255),b
 12011                           
 12012                           ;api.c: 63: API_RW[23] = 1;
 12013  0020D6  0E00               	movlw	0
 12014  0020D8  0101               	movlb	1	; () banked
 12015  0020DA  6FAD               	movwf	(_API_RW+47)& (0+255),b
 12016  0020DC  0E01               	movlw	1
 12017  0020DE  6FAC               	movwf	(_API_RW+46)& (0+255),b
 12018                           
 12019                           ;api.c: 64: API_RW[24] = 1;
 12020  0020E0  0E00               	movlw	0
 12021  0020E2  0101               	movlb	1	; () banked
 12022  0020E4  6FAF               	movwf	(_API_RW+49)& (0+255),b
 12023  0020E6  0E01               	movlw	1
 12024  0020E8  6FAE               	movwf	(_API_RW+48)& (0+255),b
 12025                           
 12026                           ;api.c: 65: API_RW[25] = 0;
 12027  0020EA  0E00               	movlw	0
 12028  0020EC  0101               	movlb	1	; () banked
 12029  0020EE  6FB1               	movwf	(_API_RW+51)& (0+255),b
 12030  0020F0  0E00               	movlw	0
 12031  0020F2  6FB0               	movwf	(_API_RW+50)& (0+255),b
 12032                           
 12033                           ;api.c: 66: API_RW[26] = 0;
 12034  0020F4  0E00               	movlw	0
 12035  0020F6  0101               	movlb	1	; () banked
 12036  0020F8  6FB3               	movwf	(_API_RW+53)& (0+255),b
 12037  0020FA  0E00               	movlw	0
 12038  0020FC  6FB2               	movwf	(_API_RW+52)& (0+255),b
 12039                           
 12040                           ;api.c: 67: API_RW[27] = 0;
 12041  0020FE  0E00               	movlw	0
 12042  002100  0101               	movlb	1	; () banked
 12043  002102  6FB5               	movwf	(_API_RW+55)& (0+255),b
 12044  002104  0E00               	movlw	0
 12045  002106  6FB4               	movwf	(_API_RW+54)& (0+255),b
 12046                           
 12047                           ;api.c: 68: API_RW[28] = 0;
 12048  002108  0E00               	movlw	0
 12049  00210A  0101               	movlb	1	; () banked
 12050  00210C  6FB7               	movwf	(_API_RW+57)& (0+255),b
 12051  00210E  0E00               	movlw	0
 12052  002110  6FB6               	movwf	(_API_RW+56)& (0+255),b
 12053                           
 12054                           ;api.c: 69: API_RW[29] = 1;
 12055  002112  0E00               	movlw	0
 12056  002114  0101               	movlb	1	; () banked
 12057  002116  6FB9               	movwf	(_API_RW+59)& (0+255),b
 12058  002118  0E01               	movlw	1
 12059  00211A  6FB8               	movwf	(_API_RW+58)& (0+255),b
 12060                           
 12061                           ;api.c: 70: API_RW[30] = 1;
 12062  00211C  0E00               	movlw	0
 12063  00211E  0101               	movlb	1	; () banked
 12064  002120  6FBB               	movwf	(_API_RW+61)& (0+255),b
 12065  002122  0E01               	movlw	1
 12066  002124  6FBA               	movwf	(_API_RW+60)& (0+255),b
 12067                           
 12068                           ;api.c: 71: API_RW[31] = 1;
 12069  002126  0E00               	movlw	0
 12070  002128  0101               	movlb	1	; () banked
 12071  00212A  6FBD               	movwf	(_API_RW+63)& (0+255),b
 12072  00212C  0E01               	movlw	1
 12073  00212E  6FBC               	movwf	(_API_RW+62)& (0+255),b
 12074                           
 12075                           ;api.c: 72: API_RW[32] = 1;
 12076  002130  0E00               	movlw	0
 12077  002132  0101               	movlb	1	; () banked
 12078  002134  6FBF               	movwf	(_API_RW+65)& (0+255),b
 12079  002136  0E01               	movlw	1
 12080  002138  6FBE               	movwf	(_API_RW+64)& (0+255),b
 12081                           
 12082                           ;api.c: 73: API_RW[33] = 1;
 12083  00213A  0E00               	movlw	0
 12084  00213C  0101               	movlb	1	; () banked
 12085  00213E  6FC1               	movwf	(_API_RW+67)& (0+255),b
 12086  002140  0E01               	movlw	1
 12087  002142  6FC0               	movwf	(_API_RW+66)& (0+255),b
 12088                           
 12089                           ;api.c: 74: API_RW[34] = 1;
 12090  002144  0E00               	movlw	0
 12091  002146  0101               	movlb	1	; () banked
 12092  002148  6FC3               	movwf	(_API_RW+69)& (0+255),b
 12093  00214A  0E01               	movlw	1
 12094  00214C  6FC2               	movwf	(_API_RW+68)& (0+255),b
 12095                           
 12096                           ;api.c: 75: API_RW[35] = 1;
 12097  00214E  0E00               	movlw	0
 12098  002150  0101               	movlb	1	; () banked
 12099  002152  6FC5               	movwf	(_API_RW+71)& (0+255),b
 12100  002154  0E01               	movlw	1
 12101  002156  6FC4               	movwf	(_API_RW+70)& (0+255),b
 12102                           
 12103                           ;api.c: 76: API_RW[36] = 1;
 12104  002158  0E00               	movlw	0
 12105  00215A  0101               	movlb	1	; () banked
 12106  00215C  6FC7               	movwf	(_API_RW+73)& (0+255),b
 12107  00215E  0E01               	movlw	1
 12108  002160  6FC6               	movwf	(_API_RW+72)& (0+255),b
 12109                           
 12110                           ;api.c: 77: API_RW[37] = 1;
 12111  002162  0E00               	movlw	0
 12112  002164  0101               	movlb	1	; () banked
 12113  002166  6FC9               	movwf	(_API_RW+75)& (0+255),b
 12114  002168  0E01               	movlw	1
 12115  00216A  6FC8               	movwf	(_API_RW+74)& (0+255),b
 12116                           
 12117                           ;api.c: 78: API_RW[38] = 1;
 12118  00216C  0E00               	movlw	0
 12119  00216E  0101               	movlb	1	; () banked
 12120  002170  6FCB               	movwf	(_API_RW+77)& (0+255),b
 12121  002172  0E01               	movlw	1
 12122  002174  6FCA               	movwf	(_API_RW+76)& (0+255),b
 12123                           
 12124                           ;api.c: 79: API_RW[39] = 1;
 12125  002176  0E00               	movlw	0
 12126  002178  0101               	movlb	1	; () banked
 12127  00217A  6FCD               	movwf	(_API_RW+79)& (0+255),b
 12128  00217C  0E01               	movlw	1
 12129  00217E  6FCC               	movwf	(_API_RW+78)& (0+255),b
 12130                           
 12131                           ;api.c: 80: API_RW[40] = 1;
 12132  002180  0E00               	movlw	0
 12133  002182  0101               	movlb	1	; () banked
 12134  002184  6FCF               	movwf	(_API_RW+81)& (0+255),b
 12135  002186  0E01               	movlw	1
 12136  002188  6FCE               	movwf	(_API_RW+80)& (0+255),b
 12137                           
 12138                           ;api.c: 81: API_RW[41] = 1;
 12139  00218A  0E00               	movlw	0
 12140  00218C  0101               	movlb	1	; () banked
 12141  00218E  6FD1               	movwf	(_API_RW+83)& (0+255),b
 12142  002190  0E01               	movlw	1
 12143  002192  6FD0               	movwf	(_API_RW+82)& (0+255),b
 12144                           
 12145                           ;api.c: 82: API_RW[42] = 1;
 12146  002194  0E00               	movlw	0
 12147  002196  0101               	movlb	1	; () banked
 12148  002198  6FD3               	movwf	(_API_RW+85)& (0+255),b
 12149  00219A  0E01               	movlw	1
 12150  00219C  6FD2               	movwf	(_API_RW+84)& (0+255),b
 12151                           
 12152                           ;api.c: 83: API_RW[43] = 1;
 12153  00219E  0E00               	movlw	0
 12154  0021A0  0101               	movlb	1	; () banked
 12155  0021A2  6FD5               	movwf	(_API_RW+87)& (0+255),b
 12156  0021A4  0E01               	movlw	1
 12157  0021A6  6FD4               	movwf	(_API_RW+86)& (0+255),b
 12158                           
 12159                           ;api.c: 84: API_RW[44] = 1;
 12160  0021A8  0E00               	movlw	0
 12161  0021AA  0101               	movlb	1	; () banked
 12162  0021AC  6FD7               	movwf	(_API_RW+89)& (0+255),b
 12163  0021AE  0E01               	movlw	1
 12164  0021B0  6FD6               	movwf	(_API_RW+88)& (0+255),b
 12165                           
 12166                           ;api.c: 87: API[0] = 63;
 12167  0021B2  0E00               	movlw	0
 12168  0021B4  0101               	movlb	1	; () banked
 12169  0021B6  6F01               	movwf	(_API+1)& (0+255),b
 12170  0021B8  0E3F               	movlw	63
 12171  0021BA  6F00               	movwf	_API& (0+255),b
 12172                           
 12173                           ;api.c: 88: API[2] = 10000;
 12174  0021BC  0E27               	movlw	39
 12175  0021BE  0101               	movlb	1	; () banked
 12176  0021C0  6F05               	movwf	(_API+5)& (0+255),b
 12177  0021C2  0E10               	movlw	16
 12178  0021C4  6F04               	movwf	(_API+4)& (0+255),b
 12179                           
 12180                           ;api.c: 89: API[3] = 800;
 12181  0021C6  0E03               	movlw	3
 12182  0021C8  0101               	movlb	1	; () banked
 12183  0021CA  6F07               	movwf	(_API+7)& (0+255),b
 12184  0021CC  0E20               	movlw	32
 12185  0021CE  6F06               	movwf	(_API+6)& (0+255),b
 12186                           
 12187                           ;api.c: 90: API[4] = 5000;
 12188  0021D0  0E13               	movlw	19
 12189  0021D2  0101               	movlb	1	; () banked
 12190  0021D4  6F09               	movwf	(_API+9)& (0+255),b
 12191  0021D6  0E88               	movlw	136
 12192  0021D8  6F08               	movwf	(_API+8)& (0+255),b
 12193                           
 12194                           ;api.c: 91: API[5] = 20;
 12195  0021DA  0E00               	movlw	0
 12196  0021DC  0101               	movlb	1	; () banked
 12197  0021DE  6F0B               	movwf	(_API+11)& (0+255),b
 12198  0021E0  0E14               	movlw	20
 12199  0021E2  6F0A               	movwf	(_API+10)& (0+255),b
 12200                           
 12201                           ;api.c: 92: API[6] = 20;
 12202  0021E4  0E00               	movlw	0
 12203  0021E6  0101               	movlb	1	; () banked
 12204  0021E8  6F0D               	movwf	(_API+13)& (0+255),b
 12205  0021EA  0E14               	movlw	20
 12206  0021EC  6F0C               	movwf	(_API+12)& (0+255),b
 12207                           
 12208                           ;api.c: 93: API[7] = 107;
 12209  0021EE  0E00               	movlw	0
 12210  0021F0  0101               	movlb	1	; () banked
 12211  0021F2  6F0F               	movwf	(_API+15)& (0+255),b
 12212  0021F4  0E6B               	movlw	107
 12213  0021F6  6F0E               	movwf	(_API+14)& (0+255),b
 12214                           
 12215                           ;api.c: 94: API[8] = 107;
 12216  0021F8  0E00               	movlw	0
 12217  0021FA  0101               	movlb	1	; () banked
 12218  0021FC  6F11               	movwf	(_API+17)& (0+255),b
 12219  0021FE  0E6B               	movlw	107
 12220  002200  6F10               	movwf	(_API+16)& (0+255),b
 12221                           
 12222                           ;api.c: 95: API[9] = 80;
 12223  002202  0E00               	movlw	0
 12224  002204  0101               	movlb	1	; () banked
 12225  002206  6F13               	movwf	(_API+19)& (0+255),b
 12226  002208  0E50               	movlw	80
 12227  00220A  6F12               	movwf	(_API+18)& (0+255),b
 12228                           
 12229                           ;api.c: 96: API[10] = 45;
 12230  00220C  0E00               	movlw	0
 12231  00220E  0101               	movlb	1	; () banked
 12232  002210  6F15               	movwf	(_API+21)& (0+255),b
 12233  002212  0E2D               	movlw	45
 12234  002214  6F14               	movwf	(_API+20)& (0+255),b
 12235                           
 12236                           ;api.c: 97: API[11] = 20;
 12237  002216  0E00               	movlw	0
 12238  002218  0101               	movlb	1	; () banked
 12239  00221A  6F17               	movwf	(_API+23)& (0+255),b
 12240  00221C  0E14               	movlw	20
 12241  00221E  6F16               	movwf	(_API+22)& (0+255),b
 12242                           
 12243                           ;api.c: 98: API[12] = 0;
 12244  002220  0E00               	movlw	0
 12245  002222  0101               	movlb	1	; () banked
 12246  002224  6F19               	movwf	(_API+25)& (0+255),b
 12247  002226  0E00               	movlw	0
 12248  002228  6F18               	movwf	(_API+24)& (0+255),b
 12249                           
 12250                           ;api.c: 99: API[13] = 0;
 12251  00222A  0E00               	movlw	0
 12252  00222C  0101               	movlb	1	; () banked
 12253  00222E  6F1B               	movwf	(_API+27)& (0+255),b
 12254  002230  0E00               	movlw	0
 12255  002232  6F1A               	movwf	(_API+26)& (0+255),b
 12256                           
 12257                           ;api.c: 100: API[14] = 0;
 12258  002234  0E00               	movlw	0
 12259  002236  0101               	movlb	1	; () banked
 12260  002238  6F1D               	movwf	(_API+29)& (0+255),b
 12261  00223A  0E00               	movlw	0
 12262  00223C  6F1C               	movwf	(_API+28)& (0+255),b
 12263                           
 12264                           ;api.c: 101: API[15] = 0;
 12265  00223E  0E00               	movlw	0
 12266  002240  0101               	movlb	1	; () banked
 12267  002242  6F1F               	movwf	(_API+31)& (0+255),b
 12268  002244  0E00               	movlw	0
 12269  002246  6F1E               	movwf	(_API+30)& (0+255),b
 12270                           
 12271                           ;api.c: 102: API[16] = 0;
 12272  002248  0E00               	movlw	0
 12273  00224A  0101               	movlb	1	; () banked
 12274  00224C  6F21               	movwf	(_API+33)& (0+255),b
 12275  00224E  0E00               	movlw	0
 12276  002250  6F20               	movwf	(_API+32)& (0+255),b
 12277                           
 12278                           ;api.c: 103: API[17] = 0;
 12279  002252  0E00               	movlw	0
 12280  002254  0101               	movlb	1	; () banked
 12281  002256  6F23               	movwf	(_API+35)& (0+255),b
 12282  002258  0E00               	movlw	0
 12283  00225A  6F22               	movwf	(_API+34)& (0+255),b
 12284                           
 12285                           ;api.c: 104: API[18] = 0;
 12286  00225C  0E00               	movlw	0
 12287  00225E  0101               	movlb	1	; () banked
 12288  002260  6F25               	movwf	(_API+37)& (0+255),b
 12289  002262  0E00               	movlw	0
 12290  002264  6F24               	movwf	(_API+36)& (0+255),b
 12291                           
 12292                           ;api.c: 105: API[19] = 0;
 12293  002266  0E00               	movlw	0
 12294  002268  0101               	movlb	1	; () banked
 12295  00226A  6F27               	movwf	(_API+39)& (0+255),b
 12296  00226C  0E00               	movlw	0
 12297  00226E  6F26               	movwf	(_API+38)& (0+255),b
 12298                           
 12299                           ;api.c: 106: API[20] = 0;
 12300  002270  0E00               	movlw	0
 12301  002272  0101               	movlb	1	; () banked
 12302  002274  6F29               	movwf	(_API+41)& (0+255),b
 12303  002276  0E00               	movlw	0
 12304  002278  6F28               	movwf	(_API+40)& (0+255),b
 12305                           
 12306                           ;api.c: 107: API[21] = 0;
 12307  00227A  0E00               	movlw	0
 12308  00227C  0101               	movlb	1	; () banked
 12309  00227E  6F2B               	movwf	(_API+43)& (0+255),b
 12310  002280  0E00               	movlw	0
 12311  002282  6F2A               	movwf	(_API+42)& (0+255),b
 12312                           
 12313                           ;api.c: 108: API[22] = 0;
 12314  002284  0E00               	movlw	0
 12315  002286  0101               	movlb	1	; () banked
 12316  002288  6F2D               	movwf	(_API+45)& (0+255),b
 12317  00228A  0E00               	movlw	0
 12318  00228C  6F2C               	movwf	(_API+44)& (0+255),b
 12319                           
 12320                           ;api.c: 109: API[23] = 9;
 12321  00228E  0E00               	movlw	0
 12322  002290  0101               	movlb	1	; () banked
 12323  002292  6F2F               	movwf	(_API+47)& (0+255),b
 12324  002294  0E09               	movlw	9
 12325  002296  6F2E               	movwf	(_API+46)& (0+255),b
 12326                           
 12327                           ;api.c: 110: API[24] = 9;
 12328  002298  0E00               	movlw	0
 12329  00229A  0101               	movlb	1	; () banked
 12330  00229C  6F31               	movwf	(_API+49)& (0+255),b
 12331  00229E  0E09               	movlw	9
 12332  0022A0  6F30               	movwf	(_API+48)& (0+255),b
 12333                           
 12334                           ;api.c: 111: API[25] = 0;
 12335  0022A2  0E00               	movlw	0
 12336  0022A4  0101               	movlb	1	; () banked
 12337  0022A6  6F33               	movwf	(_API+51)& (0+255),b
 12338  0022A8  0E00               	movlw	0
 12339  0022AA  6F32               	movwf	(_API+50)& (0+255),b
 12340                           
 12341                           ;api.c: 112: API[26] = 0;
 12342  0022AC  0E00               	movlw	0
 12343  0022AE  0101               	movlb	1	; () banked
 12344  0022B0  6F35               	movwf	(_API+53)& (0+255),b
 12345  0022B2  0E00               	movlw	0
 12346  0022B4  6F34               	movwf	(_API+52)& (0+255),b
 12347                           
 12348                           ;api.c: 113: API[27] = 0;
 12349  0022B6  0E00               	movlw	0
 12350  0022B8  0101               	movlb	1	; () banked
 12351  0022BA  6F37               	movwf	(_API+55)& (0+255),b
 12352  0022BC  0E00               	movlw	0
 12353  0022BE  6F36               	movwf	(_API+54)& (0+255),b
 12354                           
 12355                           ;api.c: 114: API[28] = 0;
 12356  0022C0  0E00               	movlw	0
 12357  0022C2  0101               	movlb	1	; () banked
 12358  0022C4  6F39               	movwf	(_API+57)& (0+255),b
 12359  0022C6  0E00               	movlw	0
 12360  0022C8  6F38               	movwf	(_API+56)& (0+255),b
 12361                           
 12362                           ;api.c: 115: API[29] = 0;
 12363  0022CA  0E00               	movlw	0
 12364  0022CC  0101               	movlb	1	; () banked
 12365  0022CE  6F3B               	movwf	(_API+59)& (0+255),b
 12366  0022D0  0E00               	movlw	0
 12367  0022D2  6F3A               	movwf	(_API+58)& (0+255),b
 12368                           
 12369                           ;api.c: 116: API[30] = 80;
 12370  0022D4  0E00               	movlw	0
 12371  0022D6  0101               	movlb	1	; () banked
 12372  0022D8  6F3D               	movwf	(_API+61)& (0+255),b
 12373  0022DA  0E50               	movlw	80
 12374  0022DC  6F3C               	movwf	(_API+60)& (0+255),b
 12375                           
 12376                           ;api.c: 117: API[31] = 120;
 12377  0022DE  0E00               	movlw	0
 12378  0022E0  0101               	movlb	1	; () banked
 12379  0022E2  6F3F               	movwf	(_API+63)& (0+255),b
 12380  0022E4  0E78               	movlw	120
 12381  0022E6  6F3E               	movwf	(_API+62)& (0+255),b
 12382                           
 12383                           ;api.c: 118: API[32] = 0;
 12384  0022E8  0E00               	movlw	0
 12385  0022EA  0101               	movlb	1	; () banked
 12386  0022EC  6F41               	movwf	(_API+65)& (0+255),b
 12387  0022EE  0E00               	movlw	0
 12388  0022F0  6F40               	movwf	(_API+64)& (0+255),b
 12389                           
 12390                           ;api.c: 119: API[33] = 80;
 12391  0022F2  0E00               	movlw	0
 12392  0022F4  0101               	movlb	1	; () banked
 12393  0022F6  6F43               	movwf	(_API+67)& (0+255),b
 12394  0022F8  0E50               	movlw	80
 12395  0022FA  6F42               	movwf	(_API+66)& (0+255),b
 12396                           
 12397                           ;api.c: 120: API[34] = 0;
 12398  0022FC  0E00               	movlw	0
 12399  0022FE  0101               	movlb	1	; () banked
 12400  002300  6F45               	movwf	(_API+69)& (0+255),b
 12401  002302  0E00               	movlw	0
 12402  002304  6F44               	movwf	(_API+68)& (0+255),b
 12403                           
 12404                           ;api.c: 121: API[35] = 0;
 12405  002306  0E00               	movlw	0
 12406  002308  0101               	movlb	1	; () banked
 12407  00230A  6F47               	movwf	(_API+71)& (0+255),b
 12408  00230C  0E00               	movlw	0
 12409  00230E  6F46               	movwf	(_API+70)& (0+255),b
 12410                           
 12411                           ;api.c: 122: API[36] = 120;
 12412  002310  0E00               	movlw	0
 12413  002312  0101               	movlb	1	; () banked
 12414  002314  6F49               	movwf	(_API+73)& (0+255),b
 12415  002316  0E78               	movlw	120
 12416  002318  6F48               	movwf	(_API+72)& (0+255),b
 12417                           
 12418                           ;api.c: 123: API[37] = 100;
 12419  00231A  0E00               	movlw	0
 12420  00231C  0101               	movlb	1	; () banked
 12421  00231E  6F4B               	movwf	(_API+75)& (0+255),b
 12422  002320  0E64               	movlw	100
 12423  002322  6F4A               	movwf	(_API+74)& (0+255),b
 12424                           
 12425                           ;api.c: 124: API[38] = 100;
 12426  002324  0E00               	movlw	0
 12427  002326  0101               	movlb	1	; () banked
 12428  002328  6F4D               	movwf	(_API+77)& (0+255),b
 12429  00232A  0E64               	movlw	100
 12430  00232C  6F4C               	movwf	(_API+76)& (0+255),b
 12431                           
 12432                           ;api.c: 125: API[39] = 100;
 12433  00232E  0E00               	movlw	0
 12434  002330  0101               	movlb	1	; () banked
 12435  002332  6F4F               	movwf	(_API+79)& (0+255),b
 12436  002334  0E64               	movlw	100
 12437  002336  6F4E               	movwf	(_API+78)& (0+255),b
 12438                           
 12439                           ;api.c: 126: API[40] = 100;
 12440  002338  0E00               	movlw	0
 12441  00233A  0101               	movlb	1	; () banked
 12442  00233C  6F51               	movwf	(_API+81)& (0+255),b
 12443  00233E  0E64               	movlw	100
 12444  002340  6F50               	movwf	(_API+80)& (0+255),b
 12445                           
 12446                           ;api.c: 127: API[41] = 100;
 12447  002342  0E00               	movlw	0
 12448  002344  0101               	movlb	1	; () banked
 12449  002346  6F53               	movwf	(_API+83)& (0+255),b
 12450  002348  0E64               	movlw	100
 12451  00234A  6F52               	movwf	(_API+82)& (0+255),b
 12452                           
 12453                           ;api.c: 128: API[42] = 100;
 12454  00234C  0E00               	movlw	0
 12455  00234E  0101               	movlb	1	; () banked
 12456  002350  6F55               	movwf	(_API+85)& (0+255),b
 12457  002352  0E64               	movlw	100
 12458  002354  6F54               	movwf	(_API+84)& (0+255),b
 12459                           
 12460                           ;api.c: 129: API[43] = 100;
 12461  002356  0E00               	movlw	0
 12462  002358  0101               	movlb	1	; () banked
 12463  00235A  6F57               	movwf	(_API+87)& (0+255),b
 12464  00235C  0E64               	movlw	100
 12465  00235E  6F56               	movwf	(_API+86)& (0+255),b
 12466                           
 12467                           ;api.c: 130: API[44] = 100;
 12468  002360  0E00               	movlw	0
 12469  002362  0101               	movlb	1	; () banked
 12470  002364  6F59               	movwf	(_API+89)& (0+255),b
 12471  002366  0E64               	movlw	100
 12472  002368  6F58               	movwf	(_API+88)& (0+255),b
 12473                           
 12474                           ; BSR set to: 1
 12475  00236A  0012               	return		;funcret
 12476  00236C                     __end_of_APIxInitialize:
 12477                           	opt stack 0
 12478                           tblptru	equ	0xFF8
 12479                           tblptrh	equ	0xFF7
 12480                           tblptrl	equ	0xFF6
 12481                           tablat	equ	0xFF5
 12482                           prodh	equ	0xFF4
 12483                           prodl	equ	0xFF3
 12484                           intcon	equ	0xFF2
 12485                           intcon2	equ	0xFF1
 12486                           postinc0	equ	0xFEE
 12487                           wreg	equ	0xFE8
 12488                           postdec1	equ	0xFE5
 12489                           fsr1l	equ	0xFE1
 12490                           postinc2	equ	0xFDE
 12491                           postdec2	equ	0xFDD
 12492                           fsr2h	equ	0xFDA
 12493                           fsr2l	equ	0xFD9
 12494                           status	equ	0xFD8
 12495                           
 12496 ;; *************** function _tc_low *****************
 12497 ;; Defined at:
 12498 ;;		line 145 in file "../Main.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;		None
 12501 ;; Auto vars:     Size  Location     Type
 12502 ;;		None
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  1    wreg      void 
 12505 ;; Registers used:
 12506 ;;		None
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12512 ;;      Params:         0       0       0       0       0       0       0       0       0
 12513 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12514 ;;      Temps:         17       0       0       0       0       0       0       0       0
 12515 ;;      Totals:        17       0       0       0       0       0       0       0       0
 12516 ;;Total ram usage:       17 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    2
 12519 ;; This function calls:
 12520 ;;		Nothing
 12521 ;; This function is called by:
 12522 ;;		Interrupt level 1
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           	psect	intcodelo
 12527  000018                     __pintcodelo:
 12528                           	opt stack 0
 12529  000018                     _tc_low:
 12530                           	opt stack 22
 12531                           
 12532                           ; BSR set to: 1
 12533                           ;incstack = 0
 12534  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12535  00001A  CFD8 F00F          	movff	status,??_tc_low
 12536  00001E  CFE8 F010          	movff	wreg,??_tc_low+1
 12537  000022  CFE0 F011          	movff	bsr,??_tc_low+2
 12538  000026  CFFA F012          	movff	pclath,??_tc_low+3
 12539  00002A  CFFB F013          	movff	pclatu,??_tc_low+4
 12540  00002E  CFE9 F014          	movff	fsr0l,??_tc_low+5
 12541  000032  CFEA F015          	movff	fsr0h,??_tc_low+6
 12542  000036  CFE1 F016          	movff	fsr1l,??_tc_low+7
 12543  00003A  CFE2 F017          	movff	fsr1h,??_tc_low+8
 12544  00003E  CFD9 F018          	movff	fsr2l,??_tc_low+9
 12545  000042  CFDA F019          	movff	fsr2h,??_tc_low+10
 12546  000046  CFF3 F01A          	movff	prodl,??_tc_low+11
 12547  00004A  CFF4 F01B          	movff	prodh,??_tc_low+12
 12548  00004E  CFF6 F01C          	movff	tblptrl,??_tc_low+13
 12549  000052  CFF7 F01D          	movff	tblptrh,??_tc_low+14
 12550  000056  CFF8 F01E          	movff	tblptru,??_tc_low+15
 12551  00005A  CFF5 F01F          	movff	tablat,??_tc_low+16
 12552  00005E  C01F  FFF5         	movff	??_tc_low+16,tablat
 12553  000062  C01E  FFF8         	movff	??_tc_low+15,tblptru
 12554  000066  C01D  FFF7         	movff	??_tc_low+14,tblptrh
 12555  00006A  C01C  FFF6         	movff	??_tc_low+13,tblptrl
 12556  00006E  C01B  FFF4         	movff	??_tc_low+12,prodh
 12557  000072  C01A  FFF3         	movff	??_tc_low+11,prodl
 12558  000076  C019  FFDA         	movff	??_tc_low+10,fsr2h
 12559  00007A  C018  FFD9         	movff	??_tc_low+9,fsr2l
 12560  00007E  C017  FFE2         	movff	??_tc_low+8,fsr1h
 12561  000082  C016  FFE1         	movff	??_tc_low+7,fsr1l
 12562  000086  C015  FFEA         	movff	??_tc_low+6,fsr0h
 12563  00008A  C014  FFE9         	movff	??_tc_low+5,fsr0l
 12564  00008E  C013  FFFB         	movff	??_tc_low+4,pclatu
 12565  000092  C012  FFFA         	movff	??_tc_low+3,pclath
 12566  000096  C011  FFE0         	movff	??_tc_low+2,bsr
 12567  00009A  C010  FFE8         	movff	??_tc_low+1,wreg
 12568  00009E  C00F  FFD8         	movff	??_tc_low,status
 12569  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12570  0000A4  0010               	retfie	
 12571  0000A6                     __end_of_tc_low:
 12572                           	opt stack 0
 12573                           pclatu	equ	0xFFB
 12574                           pclath	equ	0xFFA
 12575                           tblptru	equ	0xFF8
 12576                           tblptrh	equ	0xFF7
 12577                           tblptrl	equ	0xFF6
 12578                           tablat	equ	0xFF5
 12579                           prodh	equ	0xFF4
 12580                           prodl	equ	0xFF3
 12581                           intcon	equ	0xFF2
 12582                           intcon2	equ	0xFF1
 12583                           postinc0	equ	0xFEE
 12584                           fsr0h	equ	0xFEA
 12585                           fsr0l	equ	0xFE9
 12586                           wreg	equ	0xFE8
 12587                           postdec1	equ	0xFE5
 12588                           fsr1h	equ	0xFE2
 12589                           fsr1l	equ	0xFE1
 12590                           bsr	equ	0xFE0
 12591                           postinc2	equ	0xFDE
 12592                           postdec2	equ	0xFDD
 12593                           fsr2h	equ	0xFDA
 12594                           fsr2l	equ	0xFD9
 12595                           status	equ	0xFD8
 12596                           
 12597 ;; *************** function _tc_high *****************
 12598 ;; Defined at:
 12599 ;;		line 149 in file "../Main.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;		None
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;		None
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      void 
 12606 ;; Registers used:
 12607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12613 ;;      Params:         0       0       0       0       0       0       0       0       0
 12614 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12615 ;;      Temps:         14       0       0       0       0       0       0       0       0
 12616 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12617 ;;Total ram usage:       14 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; Hardware stack levels required when called:    1
 12620 ;; This function calls:
 12621 ;;		_EUSART1_Receive_ISR
 12622 ;;		_EUSART1_Transmit_ISR
 12623 ;; This function is called by:
 12624 ;;		Interrupt level 2
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           	psect	intcode
 12629  000008                     __pintcode:
 12630                           	opt stack 0
 12631  000008                     _tc_high:
 12632                           	opt stack 22
 12633                           
 12634                           ;incstack = 0
 12635  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12636  00000A  CFFA F001          	movff	pclath,??_tc_high
 12637  00000E  CFFB F002          	movff	pclatu,??_tc_high+1
 12638  000012  ED45  F019         	call	int_func,f	;refresh shadow registers
 12639                           pclatu	equ	0xFFB
 12640                           pclath	equ	0xFFA
 12641                           tblptru	equ	0xFF8
 12642                           tblptrh	equ	0xFF7
 12643                           tblptrl	equ	0xFF6
 12644                           tablat	equ	0xFF5
 12645                           prodh	equ	0xFF4
 12646                           prodl	equ	0xFF3
 12647                           intcon	equ	0xFF2
 12648                           intcon2	equ	0xFF1
 12649                           postinc0	equ	0xFEE
 12650                           fsr0h	equ	0xFEA
 12651                           fsr0l	equ	0xFE9
 12652                           wreg	equ	0xFE8
 12653                           postdec1	equ	0xFE5
 12654                           fsr1h	equ	0xFE2
 12655                           fsr1l	equ	0xFE1
 12656                           bsr	equ	0xFE0
 12657                           postinc2	equ	0xFDE
 12658                           postdec2	equ	0xFDD
 12659                           fsr2h	equ	0xFDA
 12660                           fsr2l	equ	0xFD9
 12661                           status	equ	0xFD8
 12662                           
 12663                           	psect	intcode_body
 12664  00328A                     __pintcode_body:
 12665                           	opt stack 22
 12666  00328A                     int_func:
 12667                           	opt stack 22
 12668  00328A  0006               	pop		; remove dummy address from shadow register refresh
 12669  00328C  CFE9 F003          	movff	fsr0l,??_tc_high+2
 12670  003290  CFEA F004          	movff	fsr0h,??_tc_high+3
 12671  003294  CFE1 F005          	movff	fsr1l,??_tc_high+4
 12672  003298  CFE2 F006          	movff	fsr1h,??_tc_high+5
 12673  00329C  CFD9 F007          	movff	fsr2l,??_tc_high+6
 12674  0032A0  CFDA F008          	movff	fsr2h,??_tc_high+7
 12675  0032A4  CFF3 F009          	movff	prodl,??_tc_high+8
 12676  0032A8  CFF4 F00A          	movff	prodh,??_tc_high+9
 12677  0032AC  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 12678  0032B0  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 12679  0032B4  CFF8 F00D          	movff	tblptru,??_tc_high+12
 12680  0032B8  CFF5 F00E          	movff	tablat,??_tc_high+13
 12681                           
 12682                           ;Main.c: 151: if (INTCONbits.TMR0IF)
 12683  0032BC  A4F2               	btfss	intcon,2,c	;volatile
 12684  0032BE  D01F               	goto	i2l6873
 12685                           
 12686                           ;Main.c: 152: {
 12687                           ;Main.c: 153: if(Led1_Counter <= 100)
 12688  0032C0  0100               	movlb	0	; () banked
 12689  0032C2  5195               	movf	(_Led1_Counter+1)& (0+255),w,b
 12690  0032C4  E107               	bnz	i2l92
 12691  0032C6  0E65               	movlw	101
 12692  0032C8  0100               	movlb	0	; () banked
 12693  0032CA  5D94               	subwf	_Led1_Counter& (0+255),w,b
 12694  0032CC  B0D8               	btfsc	status,0,c
 12695  0032CE  D002               	goto	i2l92
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;Main.c: 154: {
 12699                           ;Main.c: 155: PORTAbits.RA4 = 1;
 12700  0032D0  8880               	bsf	3968,4,c	;volatile
 12701                           
 12702                           ;Main.c: 156: }
 12703  0032D2  D001               	goto	i2l6863
 12704  0032D4                     i2l92:
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;Main.c: 157: else
 12708                           ;Main.c: 158: {
 12709                           ;Main.c: 159: PORTAbits.RA4 = 0;
 12710  0032D4  9880               	bcf	3968,4,c	;volatile
 12711  0032D6                     i2l6863:
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;Main.c: 160: }
 12715                           ;Main.c: 161: if(Led1_Counter >= 700)
 12716  0032D6  0EBC               	movlw	188
 12717  0032D8  0100               	movlb	0	; () banked
 12718  0032DA  5D94               	subwf	_Led1_Counter& (0+255),w,b
 12719  0032DC  0E02               	movlw	2
 12720  0032DE  0100               	movlb	0	; () banked
 12721  0032E0  5995               	subwfb	(_Led1_Counter+1)& (0+255),w,b
 12722  0032E2  A0D8               	btfss	status,0,c
 12723  0032E4  D005               	goto	i2l6867
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;Main.c: 162: {
 12727                           ;Main.c: 163: Led1_Counter = 0;
 12728  0032E6  0E00               	movlw	0
 12729  0032E8  0100               	movlb	0	; () banked
 12730  0032EA  6F95               	movwf	(_Led1_Counter+1)& (0+255),b
 12731  0032EC  0E00               	movlw	0
 12732  0032EE  6F94               	movwf	_Led1_Counter& (0+255),b
 12733  0032F0                     i2l6867:
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;Main.c: 164: }
 12737                           ;Main.c: 165: Led1_Counter++;
 12738  0032F0  0100               	movlb	0	; () banked
 12739  0032F2  4B94               	infsnz	_Led1_Counter& (0+255),f,b
 12740  0032F4  2B95               	incf	(_Led1_Counter+1)& (0+255),f,b
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;Main.c: 166: Update_State_Machine = 1;
 12744  0032F6  0E01               	movlw	1
 12745  0032F8  0100               	movlb	0	; () banked
 12746  0032FA  6FA3               	movwf	_Update_State_Machine& (0+255),b
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;Main.c: 167: INTCONbits.TMR0IF = 0;
 12750  0032FC  94F2               	bcf	intcon,2,c	;volatile
 12751  0032FE                     i2l6873:
 12752                           
 12753                           ;Main.c: 168: }
 12754                           ;Main.c: 170: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 12755  0032FE  BA9D               	btfsc	3997,5,c	;volatile
 12756  003300  AA9E               	btfss	3998,5,c	;volatile
 12757  003302  D002               	goto	i2l6879
 12758                           
 12759                           ;Main.c: 171: EUSART1_Receive_ISR();
 12760  003304  EC15  F01C         	call	_EUSART1_Receive_ISR	;wreg free
 12761  003308                     i2l6879:
 12762                           
 12763                           ;Main.c: 172: }
 12764                           ;Main.c: 173: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 12765  003308  B89D               	btfsc	3997,4,c	;volatile
 12766  00330A  A89E               	btfss	3998,4,c	;volatile
 12767  00330C  D002               	goto	i2l97
 12768                           
 12769                           ;Main.c: 174: EUSART1_Transmit_ISR();
 12770  00330E  ECE8  F01B         	call	_EUSART1_Transmit_ISR	;wreg free
 12771  003312                     i2l97:
 12772  003312  C00E  FFF5         	movff	??_tc_high+13,tablat
 12773  003316  C00D  FFF8         	movff	??_tc_high+12,tblptru
 12774  00331A  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 12775  00331E  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 12776  003322  C00A  FFF4         	movff	??_tc_high+9,prodh
 12777  003326  C009  FFF3         	movff	??_tc_high+8,prodl
 12778  00332A  C008  FFDA         	movff	??_tc_high+7,fsr2h
 12779  00332E  C007  FFD9         	movff	??_tc_high+6,fsr2l
 12780  003332  C006  FFE2         	movff	??_tc_high+5,fsr1h
 12781  003336  C005  FFE1         	movff	??_tc_high+4,fsr1l
 12782  00333A  C004  FFEA         	movff	??_tc_high+3,fsr0h
 12783  00333E  C003  FFE9         	movff	??_tc_high+2,fsr0l
 12784  003342  C002  FFFB         	movff	??_tc_high+1,pclatu
 12785  003346  C001  FFFA         	movff	??_tc_high,pclath
 12786  00334A  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12787  00334C  0011               	retfie		f
 12788  00334E                     __end_of_tc_high:
 12789                           	opt stack 0
 12790                           pclatu	equ	0xFFB
 12791                           pclath	equ	0xFFA
 12792                           tblptru	equ	0xFF8
 12793                           tblptrh	equ	0xFF7
 12794                           tblptrl	equ	0xFF6
 12795                           tablat	equ	0xFF5
 12796                           prodh	equ	0xFF4
 12797                           prodl	equ	0xFF3
 12798                           intcon	equ	0xFF2
 12799                           intcon2	equ	0xFF1
 12800                           postinc0	equ	0xFEE
 12801                           fsr0h	equ	0xFEA
 12802                           fsr0l	equ	0xFE9
 12803                           wreg	equ	0xFE8
 12804                           postdec1	equ	0xFE5
 12805                           fsr1h	equ	0xFE2
 12806                           fsr1l	equ	0xFE1
 12807                           bsr	equ	0xFE0
 12808                           postinc2	equ	0xFDE
 12809                           postdec2	equ	0xFDD
 12810                           fsr2h	equ	0xFDA
 12811                           fsr2l	equ	0xFD9
 12812                           status	equ	0xFD8
 12813                           
 12814 ;; *************** function _EUSART1_Transmit_ISR *****************
 12815 ;; Defined at:
 12816 ;;		line 183 in file "../eusart1.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;		None
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;		None
 12821 ;; Return value:  Size  Location     Type
 12822 ;;                  1    wreg      void 
 12823 ;; Registers used:
 12824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12825 ;; Tracked objects:
 12826 ;;		On entry : 0/0
 12827 ;;		On exit  : 0/0
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12830 ;;      Params:         0       0       0       0       0       0       0       0       0
 12831 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12832 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12833 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12834 ;;Total ram usage:        0 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; This function calls:
 12837 ;;		Nothing
 12838 ;; This function is called by:
 12839 ;;		_tc_high
 12840 ;; This function uses a non-reentrant model
 12841 ;;
 12842                           
 12843                           	psect	text33
 12844  0037D0                     __ptext33:
 12845                           	opt stack 0
 12846  0037D0                     _EUSART1_Transmit_ISR:
 12847                           	opt stack 22
 12848                           
 12849                           ;eusart1.c: 186: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 12850                           
 12851                           ;incstack = 0
 12852  0037D0  0E7E               	movlw	126
 12853  0037D2  603D               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 12854  0037D4  D012               	goto	i2l627
 12855                           
 12856                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 12857  0037D6  503F               	movf	_eusart1TxTail,w,c
 12858  0037D8  0D01               	mullw	1
 12859  0037DA  0E7E               	movlw	low _eusart1TxBuffer
 12860  0037DC  24F3               	addwf	prodl,w,c
 12861  0037DE  6ED9               	movwf	fsr2l,c
 12862  0037E0  0E02               	movlw	high _eusart1TxBuffer
 12863  0037E2  20F4               	addwfc	prodh,w,c
 12864  0037E4  6EDA               	movwf	fsr2h,c
 12865  0037E6  50DF               	movf	indf2,w,c
 12866  0037E8  6EAD               	movwf	4013,c	;volatile
 12867  0037EA  2A3F               	incf	_eusart1TxTail,f,c
 12868                           
 12869                           ;eusart1.c: 188: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 12870  0037EC  0E7D               	movlw	125
 12871  0037EE  643F               	cpfsgt	_eusart1TxTail,c
 12872  0037F0  D002               	goto	i2l6777
 12873                           
 12874                           ;eusart1.c: 189: eusart1TxTail = 0;
 12875  0037F2  0E00               	movlw	0
 12876  0037F4  6E3F               	movwf	_eusart1TxTail,c
 12877  0037F6                     i2l6777:
 12878                           
 12879                           ;eusart1.c: 190: }
 12880                           ;eusart1.c: 191: eusart1TxBufferRemaining++;
 12881  0037F6  2A3D               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 12882                           
 12883                           ;eusart1.c: 192: } else {
 12884  0037F8  0012               	return	
 12885  0037FA                     i2l627:
 12886                           
 12887                           ;eusart1.c: 193: PIE1bits.TX1IE = 0;
 12888  0037FA  989D               	bcf	3997,4,c	;volatile
 12889  0037FC  0012               	return	
 12890  0037FE                     __end_of_EUSART1_Transmit_ISR:
 12891                           	opt stack 0
 12892                           pclatu	equ	0xFFB
 12893                           pclath	equ	0xFFA
 12894                           tblptru	equ	0xFF8
 12895                           tblptrh	equ	0xFF7
 12896                           tblptrl	equ	0xFF6
 12897                           tablat	equ	0xFF5
 12898                           prodh	equ	0xFF4
 12899                           prodl	equ	0xFF3
 12900                           intcon	equ	0xFF2
 12901                           intcon2	equ	0xFF1
 12902                           postinc0	equ	0xFEE
 12903                           fsr0h	equ	0xFEA
 12904                           fsr0l	equ	0xFE9
 12905                           wreg	equ	0xFE8
 12906                           postdec1	equ	0xFE5
 12907                           fsr1h	equ	0xFE2
 12908                           fsr1l	equ	0xFE1
 12909                           bsr	equ	0xFE0
 12910                           indf2	equ	0xFDF
 12911                           postinc2	equ	0xFDE
 12912                           postdec2	equ	0xFDD
 12913                           fsr2h	equ	0xFDA
 12914                           fsr2l	equ	0xFD9
 12915                           status	equ	0xFD8
 12916                           
 12917 ;; *************** function _EUSART1_Receive_ISR *****************
 12918 ;; Defined at:
 12919 ;;		line 197 in file "../eusart1.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;		None
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;		None
 12924 ;; Return value:  Size  Location     Type
 12925 ;;                  1    wreg      void 
 12926 ;; Registers used:
 12927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12928 ;; Tracked objects:
 12929 ;;		On entry : 0/0
 12930 ;;		On exit  : 0/0
 12931 ;;		Unchanged: 0/0
 12932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12933 ;;      Params:         0       0       0       0       0       0       0       0       0
 12934 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12936 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12937 ;;Total ram usage:        0 bytes
 12938 ;; Hardware stack levels used:    1
 12939 ;; This function calls:
 12940 ;;		Nothing
 12941 ;; This function is called by:
 12942 ;;		_tc_high
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           	psect	text34
 12947  00382A                     __ptext34:
 12948                           	opt stack 0
 12949  00382A                     _EUSART1_Receive_ISR:
 12950                           	opt stack 22
 12951                           
 12952                           ;eusart1.c: 198: if (1 == RCSTA1bits.OERR) {
 12953                           
 12954                           ;incstack = 0
 12955  00382A  A2AB               	btfss	4011,1,c	;volatile
 12956  00382C  D002               	goto	i2l6757
 12957                           
 12958                           ;eusart1.c: 201: RCSTA1bits.CREN = 0;
 12959  00382E  98AB               	bcf	4011,4,c	;volatile
 12960                           
 12961                           ;eusart1.c: 202: RCSTA1bits.CREN = 1;
 12962  003830  88AB               	bsf	4011,4,c	;volatile
 12963  003832                     i2l6757:
 12964                           
 12965                           ;eusart1.c: 203: }
 12966                           ;eusart1.c: 206: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 12967  003832  503B               	movf	_eusart1RxHead,w,c
 12968  003834  0D01               	mullw	1
 12969  003836  0E00               	movlw	low _eusart1RxBuffer
 12970  003838  24F3               	addwf	prodl,w,c
 12971  00383A  6ED9               	movwf	fsr2l,c
 12972  00383C  0E02               	movlw	high _eusart1RxBuffer
 12973  00383E  20F4               	addwfc	prodh,w,c
 12974  003840  6EDA               	movwf	fsr2h,c
 12975  003842  CFAE FFDF          	movff	4014,indf2	;volatile
 12976  003846  2A3B               	incf	_eusart1RxHead,f,c
 12977                           
 12978                           ;eusart1.c: 207: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 12979  003848  0E7D               	movlw	125
 12980  00384A  643B               	cpfsgt	_eusart1RxHead,c
 12981  00384C  D002               	goto	i2l6765
 12982                           
 12983                           ;eusart1.c: 208: eusart1RxHead = 0;
 12984  00384E  0E00               	movlw	0
 12985  003850  6E3B               	movwf	_eusart1RxHead,c
 12986  003852                     i2l6765:
 12987                           
 12988                           ;eusart1.c: 209: }
 12989                           ;eusart1.c: 210: eusart1RxCount++;
 12990  003852  2A3A               	incf	_eusart1RxCount,f,c	;volatile
 12991  003854  0012               	return		;funcret
 12992  003856                     __end_of_EUSART1_Receive_ISR:
 12993                           	opt stack 0
 12994                           pclatu	equ	0xFFB
 12995                           pclath	equ	0xFFA
 12996                           tblptru	equ	0xFF8
 12997                           tblptrh	equ	0xFF7
 12998                           tblptrl	equ	0xFF6
 12999                           tablat	equ	0xFF5
 13000                           prodh	equ	0xFF4
 13001                           prodl	equ	0xFF3
 13002                           intcon	equ	0xFF2
 13003                           intcon2	equ	0xFF1
 13004                           postinc0	equ	0xFEE
 13005                           fsr0h	equ	0xFEA
 13006                           fsr0l	equ	0xFE9
 13007                           wreg	equ	0xFE8
 13008                           postdec1	equ	0xFE5
 13009                           fsr1h	equ	0xFE2
 13010                           fsr1l	equ	0xFE1
 13011                           bsr	equ	0xFE0
 13012                           indf2	equ	0xFDF
 13013                           postinc2	equ	0xFDE
 13014                           postdec2	equ	0xFDD
 13015                           fsr2h	equ	0xFDA
 13016                           fsr2l	equ	0xFD9
 13017                           status	equ	0xFD8
 13018                           pclatu	equ	0xFFB
 13019                           pclath	equ	0xFFA
 13020                           tblptru	equ	0xFF8
 13021                           tblptrh	equ	0xFF7
 13022                           tblptrl	equ	0xFF6
 13023                           tablat	equ	0xFF5
 13024                           prodh	equ	0xFF4
 13025                           prodl	equ	0xFF3
 13026                           intcon	equ	0xFF2
 13027                           intcon2	equ	0xFF1
 13028                           postinc0	equ	0xFEE
 13029                           fsr0h	equ	0xFEA
 13030                           fsr0l	equ	0xFE9
 13031                           wreg	equ	0xFE8
 13032                           postdec1	equ	0xFE5
 13033                           fsr1h	equ	0xFE2
 13034                           fsr1l	equ	0xFE1
 13035                           bsr	equ	0xFE0
 13036                           indf2	equ	0xFDF
 13037                           postinc2	equ	0xFDE
 13038                           postdec2	equ	0xFDD
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043                           	psect	rparam
 13044  0000                     pclatu	equ	0xFFB
 13045                           pclath	equ	0xFFA
 13046                           tblptru	equ	0xFF8
 13047                           tblptrh	equ	0xFF7
 13048                           tblptrl	equ	0xFF6
 13049                           tablat	equ	0xFF5
 13050                           prodh	equ	0xFF4
 13051                           prodl	equ	0xFF3
 13052                           intcon	equ	0xFF2
 13053                           intcon2	equ	0xFF1
 13054                           postinc0	equ	0xFEE
 13055                           fsr0h	equ	0xFEA
 13056                           fsr0l	equ	0xFE9
 13057                           wreg	equ	0xFE8
 13058                           postdec1	equ	0xFE5
 13059                           fsr1h	equ	0xFE2
 13060                           fsr1l	equ	0xFE1
 13061                           bsr	equ	0xFE0
 13062                           indf2	equ	0xFDF
 13063                           postinc2	equ	0xFDE
 13064                           postdec2	equ	0xFDD
 13065                           fsr2h	equ	0xFDA
 13066                           fsr2l	equ	0xFD9
 13067                           status	equ	0xFD8
 13068                           
 13069                           	psect	temp
 13070  000040                     btemp:
 13071                           	opt stack 0
 13072  000040                     	ds	1
 13073  0000                     int$flags	set	btemp
 13074                           pclatu	equ	0xFFB
 13075                           pclath	equ	0xFFA
 13076                           tblptru	equ	0xFF8
 13077                           tblptrh	equ	0xFF7
 13078                           tblptrl	equ	0xFF6
 13079                           tablat	equ	0xFF5
 13080                           prodh	equ	0xFF4
 13081                           prodl	equ	0xFF3
 13082                           intcon	equ	0xFF2
 13083                           intcon2	equ	0xFF1
 13084                           postinc0	equ	0xFEE
 13085                           fsr0h	equ	0xFEA
 13086                           fsr0l	equ	0xFE9
 13087                           wreg	equ	0xFE8
 13088                           postdec1	equ	0xFE5
 13089                           fsr1h	equ	0xFE2
 13090                           fsr1l	equ	0xFE1
 13091                           bsr	equ	0xFE0
 13092                           indf2	equ	0xFDF
 13093                           postinc2	equ	0xFDE
 13094                           postdec2	equ	0xFDD
 13095                           fsr2h	equ	0xFDA
 13096                           fsr2l	equ	0xFD9
 13097                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    8
    Data        10
    BSS         565
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160     38      78
    BANK1           256      0     252
    BANK2           256      0     252
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_GETxAPIxVAL
    _Update_StateMchn->_Green_Led
    _Update_StateMchn->_Red_Led
    _Train_Path->_GETxAPIxVAL
    _Train_Move_Right_Start->_GETxAPIxVAL
    _Train_Move_Right_Brake->_GETxAPIxVAL
    _Train_Move_Left_Start->_GETxAPIxVAL
    _Train_Move_Left_Brake->_GETxAPIxVAL
    _Right_Mountain_From_The_Right->_GETxAPIxVAL
    _Right_Mountain_From_The_Left->_GETxAPIxVAL
    _Left_Mountain_From_The_Right->_GETxAPIxVAL
    _Left_Mountain_From_The_Left->_GETxAPIxVAL
    _SETxPWM->_GETxAPIxVAL
    _Junction->_GETxAPIxVAL
    _INCRxAPIxVAL->_GETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_GETxAPIxVAL
    _DECRxAPIxVAL->_GETxAPIxVAL
    _printf->_putch

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Update_StateMchn
    _Update_StateMchn->_DECRxAPIxVAL
    _Update_StateMchn->_INCRxAPIxVAL
    _Train_Path->_Left_Mountain_From_The_Left
    _Train_Path->_Left_Mountain_From_The_Right
    _Train_Path->_Right_Mountain_From_The_Left
    _Train_Path->_Right_Mountain_From_The_Right
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SetDCPWM1
    _Junction->_GETxAPIxVAL
    _INCRxAPIxVAL->_SETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_SETxAPIxVAL
    _DECRxAPIxVAL->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _SENDxMESSAGE->_printf
    _printf->___lwdiv

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   45373
                     _APIxInitialize
                 _EUSART1_Initialize
                      _INIT_TERMINAL
                           _Init_Pwm
                        _Init_Timers
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     2     2      0   45107
                                             36 BANK0      2     2      0
                       _DECRxAPIxVAL
                    _Debounce_Inputs
                       _Eeprom_Store
                        _GETxAPIxVAL
                          _Green_Led
                       _INCRxAPIxVAL
                            _Red_Led
                        _SETxAPIxVAL
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1   25766
                                             14 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               0     0      0    2943
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               0     0      0    2943
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                0     0      0    2943
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                0     0      0    2943
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0    3036
                                             13 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0    3036
                                             13 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0    3036
                                             13 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0    3036
                                             13 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3    2912
                                              6 BANK0      7     4      3
                        _GETxAPIxVAL (ARG)
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (5) _SetDCPWM1                                            6     4      2     253
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1     740
                                              2 BANK0      2     1      1
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _INCRxAPIxVAL                                         3     3      0    4866
                                             33 BANK0      3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Store                                         0     0      0      31
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0    4767
                                             33 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _DECRxAPIxVAL                                         3     3      0    4866
                                             33 BANK0      3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVAL                                          5     3      2    4736
                                             28 BANK0      5     3      2
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (3) _SENDxMESSAGE                                         5     3      2    1239
                                             23 BANK0      5     3      2
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              25    17      8    1001
                                              7 BANK0     16     8      8
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _GETxAPIxVAL                                          3     1      2      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INIT_TERMINAL                                        2     2      0      71
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             14    14      0       0
                                              0 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _EUSART1_Initialize
   _INIT_TERMINAL
   _Init_Pwm
   _Init_Timers
   _Update_StateMchn
     _DECRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             _putch
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             _putch
     _Eeprom_Store
       _GETxAPIxVAL
     _GETxAPIxVAL
     _Green_Led
     _INCRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             _putch
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           _putch
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FC       9       98.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      4E       5       48.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     285      20        0.0%
DATA                 0      0     285       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Oct 17 23:18:44 2017

                  _eusart1TxBufferRemaining 003D                                          bsr 000FE0  
                               __CFG_BORV$3 000000                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l362 1480  
                                       l700 318C                                         l621 38A2  
                                       l703 31B0                                         l447 1886  
                                       l456 2384                                         l642 37A0  
                                       l760 33EE                                         l691 310C  
                                       l763 3426                                         l694 313A  
                                       l758 33EA                                         l774 3352  
                                       l767 345E                                         l783 33C6  
                                       l951 31E4                                         l776 3356  
                                       l944 31CA                                         l697 315E  
                                       l953 31E8                                         l946 31CE  
                                       l779 338E                                         _API 0100  
                                       l959 3258                                __CFG_CPB$OFF 000000  
                              _Stop_Program 0031                                         _PR2 000FCB  
                              __CFG_CPD$OFF 000000                                __CFG_BOR$OFF 000000  
                                       prod 000FF3                                         wreg 000FE8  
                    __size_of_INIT_TERMINAL 0034            Train_Move_Right_Start@Return_Val 00AC  
                              ?_GETxAPIxVAL 0060                             APIxInitialize@i 0060  
                              __CFG_LVP$OFF 000000         __end_of_Left_Mountain_From_The_Left 2FDA  
               _Left_Mountain_From_The_Left 2EC8                                __CFG_WDT$OFF 000000  
     __end_of_Right_Mountain_From_The_Right 2DB4      __size_of_Right_Mountain_From_The_Right 0114  
             _Right_Mountain_From_The_Right 2CA0                                        l1200 27B0  
                                      l1616 3574                                        l5511 33F2  
                                      l5521 342A                                        l8001 2EAC  
                                      l5517 3412                                        l5533 3462  
                                      l8005 2EB4                                        l8021 2CDA  
                                      l8013 2CA6                                        l5527 344A  
                                      l5543 337A                                        l8103 3068  
                                      l8007 2EC2                                        l8201 19EA  
                                      l5553 33B2                                        l5537 335A  
                                      l8113 30A4                                        l8121 30CE  
                                      l8025 2CE2                                        l9001 0DE6  
                                      l8211 1A22                                        l5547 3392  
                                      l8043 2D32                                        l8019 2CCA  
                                      l9011 0E2E                                        l9003 0DF2  
                                      l8301 1C8A                                        l8221 1A72  
                                      l8213 1A3A                                        l8141 18A6  
                                      l8133 188A                                        l8117 30C0  
                                      l8109 3098                                        l8125 30D6  
                                      l8053 2D70                                        l8061 2D98  
                                      l9013 0E3A                                        l8311 1CAC  
                                      l8207 1A10                                        l8231 1A8E  
                                      l8151 18DE                                        l5559 33CA  
                                      l8119 30CA                                        l8127 30E4  
                                      l9103 1052                                        l9015 0E46  
                                      l8401 1EFC                                        l8321 1D14  
                                      l8313 1CD8                                        l8241 1AF2  
                                      l8233 1ABA                                        l8161 1912  
                                      l8153 18F6                                        l8081 3012  
                                      l8073 2FE0                                        l8057 2D8A  
                                      l8049 2D64                                        l8065 2DA0  
                                      l9113 106E                                        l9041 0EFC  
                                      l9017 0E52                                        l9025 0E68  
                                      l9009 0E00                                        l9033 0EA4  
                                      l7603 280A                                        l8411 1F18  
                                      l8307 1C9A                                        l8331 1D36  
                                      l8227 1A7C                                        l8251 1B0E  
                                      l8219 1A60                                        l8147 18CC  
                                      l8171 194A                                        l8139 1894  
                                      l8059 2D94                                        l8067 2DAE  
                                      l9203 122A                                        l9123 108A  
                                      l9051 0F36                                        l9035 0ED2  
                                      l9027 0E96                                        l9019 0E5A  
                                      l7605 2816                                        l8421 1F68  
                                      l8413 1F30                                        l8341 1D9E  
                                      l8333 1D62                                        l8261 1B76  
                                      l8253 1B3A                                        l8181 197E  
                                      l8173 1962                                        l8085 301A  
                                      l8501 2428                                        l9221 127C  
                                      l9133 10A6                                        l9053 0F42  
                                      l9045 0F0A                                        l9037 0EDA  
                                      l7551 3524                                        l8407 1F06  
                                      l8431 1F84                                        l8327 1D24  
                                      l8351 1DC0                                        l8319 1D02  
                                      l8247 1AFC                                        l8271 1B98  
                                      l8239 1AE0                                        l8167 1938  
                                      l8191 19B6                                        l8159 1900  
                                      l8079 3002                                        l7711 2B3E  
                                      l7703 2B08                                        l8511 2452  
                                      l8503 2446                                        l9303 13F0  
                                      l9215 1276                                        l9207 1258  
                                      l9143 10C2                                        l9055 0F4E  
                                      l9063 0F68                                        l9071 0FA4  
                                      l7553 3530                                        l8361 1E24  
                                      l8353 1DEC                                        l8281 1C00  
                                      l8273 1BC4                                        l8193 19CE  
                                      l7641 31C2                                        l7801 29B2  
                                      l7705 2B0E                                        l7721 2B6C  
                                      l8521 2466                                        l9401 15A2  
                                      l9233 12CC                                        l9209 125C  
                                      l9225 128C                                        l9321 1448  
                                      l9073 0FF2                                        l9065 0F96  
                                      l9057 0F5A                                        l9049 0F2A  
                                      l7563 3566                                        l7555 3536  
                                      l8427 1F72                                        l8419 1F56  
                                      l8347 1DAE                                        l8371 1E40  
                                      l8339 1D8C                                        l8267 1B86  
                                      l8291 1C22                                        l8259 1B64  
                                      l8187 19A4                                        l8179 196C  
                                      l7627 34CC                                        l7811 29EE  
                                      l7723 2B86                                        l8531 24AC  
                                      l8523 2484                                        l8515 2458  
                                      l8507 244C                                        l9411 15F4  
                                      l9331 1488                                        l9315 143C  
                                      l9307 1400                                        l9251 1308  
                                      l9227 12AE                                        l9323 145E  
                                      l9083 101A                                        l9155 10DE  
                                      l7573 2730                                        l8381 1E90  
                                      l8373 1E58                                        l8293 1C4E  
                                      l7661 3244                                        l7645 31D2  
                                      l7653 31FE                                        l7901 2F02  
                                      l7733 2BAC                                        l7805 29DC  
                                      l7717 2B60                                        l8613 2626  
                                      l8605 2602                                        l9501 17BE  
                                      l9421 1638                                        l9413 15FE  
                                      l9341 14B0                                        l9309 1420  
                                      l9245 1302                                        l9237 12E4  
                                      l9229 12B2                                        l9181 1188  
                                      l9165 1142                                        l9157 1112  
                                      l9093 1036                                        l8367 1E2E  
                                      l8391 1EAC                                        l8359 1E12  
                                      l8287 1C10                                        l8279 1BEE  
                                      l8199 19D8                                        l7671 3284  
                                      l7655 320E                                        l7751 2C16  
                                      l7823 2A44                                        l7831 2A56  
                                      l8607 2620                                        l8543 24EE  
                                      l8535 24C2                                        l8471 239A  
                                      l8463 2372                                        l9503 17C2  
                                      l9415 1606                                        l9351 14CC  
                                      l9327 1474                                        l9271 1378  
                                      l9263 135A                                        l9239 12E8  
                                      l9255 1318                                        l9183 1194  
                                      l9079 100C                                        l7585 277A  
                                      l7569 271C                                        l8393 1EC4  
                                      l7657 3216                                        l7649 31EC  
                                      l7905 2F0A                                        l7753 2C1C  
                                      l7737 2BB6                                        l7729 2B8E  
                                      l7825 2A4A                                        l7833 2A70  
                                      l7681 2A96                                        l8625 2632  
                                      l8633 2646                                        l8481 23BE  
                                      l9521 17FE                                        l9433 1684  
                                      l9425 1666                                        l9417 160A  
                                      l9361 14E8                                        l9337 14A2  
                                      l9265 135E                                        l9257 133A  
                                      l9281 138E                                        l9193 11E6  
                                      l9177 117E                                        l9169 114E  
                                      l8801 08C4                                        l8387 1E9A  
                                      l8379 1E7E                                        l8299 1C78  
                                      l7923 2F58                                        l7747 2BEC  
                                      l7739 2BBE                                        l7827 2A4E  
                                      l7819 2A18                                        l8651 2684  
                                      l8643 2674                                        l8635 2664  
                                      l8619 262C                                        l8563 2544  
                                      l8539 24D8                                        l8491 2404  
                                      l8483 23DC                                        l8475 23A8  
                                      l8467 238C                                        l9515 17F8  
                                      l9507 17DA                                        l9451 16DA  
                                      l9427 166A                                        l9443 169A  
                                      l9291 13D0                                        l9283 13B0  
                                      l9259 133E                                        l9195 11F0  
                                      l7597 27B6                                        l7669 326E  
                                      l7933 2F96                                        l7941 2FBE  
                                      l7853 288E                                        l7773 2C7A  
                                      l7757 2C20                                        l7677 2A78  
                                      l8477 23BA                                        l9533 184A  
                                      l9509 17DE                                        l9525 180E  
                                      l9445 16BC                                        l9373 1504  
                                      l9285 13B4                                        l9277 137E  
                                      l9197 11F8                                        l8813 0918  
                                      l8399 1EEA                                        l7855 2894  
                                      l7847 2868                                        l7839 2836  
                                      l7767 2C56                                        l7791 2986  
                                      l7695 2AD2                                        l7687 2AA2  
                                      l8663 269C                                        l8655 268C  
                                      l8647 267C                                        l8639 266C  
                                      l8591 25C0                                        l8583 2594  
                                      l8495 2412                                        l8487 23F6  
                                      l8671 26B4                                        l9527 182E  
                                      l9463 1710                                        l9455 16F2  
                                      l9447 16C0                                        l9439 168A  
                                      l9383 1550                                        l9375 1520  
                                      l9199 11FC                                        l8903 0BA4  
                                      l8831 0998                                        l8807 08EE  
                                      l9543 186C                                        l7937 2FB0  
                                      l7929 2F8A                                        l7945 2FC6  
                                      l7961 2DEE                                        l7953 2DBA  
                                      l7881 2930                                        l7873 28FA  
                                      l7865 28D0                                        l7777 2C80  
                                      l7785 295A                                        l8593 25D2  
                                      l8585 25A6                                        l8673 2708  
                                      l9481 1768                                        l9457 16F6  
                                      l9473 1726                                        l9297 13EA  
                                      l9289 13CC                                        l8921 0C0E  
                                      l8913 0BEA                                        l8841 09D0  
                                      l8817 0926                                        l9713 35DE  
                                      l8747 1FA6                                        l7939 2FBA  
                                      l7947 2FD4                                        l7859 28BE  
                                      l7779 2C9A                                        l7699 2AFC  
                                      l8667 26AC                                        l8659 2694  
                                      l8595 25D6                                        l8587 25AA  
                                      l9483 176C                                        l9475 1748  
                                      l9395 158C                                        l9387 155C  
                                      l9539 1856                                        l8923 0C12  
                                      l8907 0BC0                                        l8835 09A6  
                                      l8757 1FFA                                        l8773 3798  
                                      l7893 2ECE                                        l7965 2DF6  
                                      l7877 2926                                        l7885 2938  
                                      l7797 29AC                                        l8597 25E8  
                                      l8589 25BC                                        l9477 174C  
                                      l9469 1716                                        l8941 0C78  
                                      l8925 0C16                                        l8917 0BF8  
                                      l8909 0BC8                                        l8853 0A24  
                                      l7983 2E44                                        l7959 2DDE  
                                      l7887 2952                                        l8599 25EC  
                                      l9495 178C                                        l9399 1596  
                                      l8943 0C7C                                        l8927 0C1A  
                                      l8935 0C34                                        l8871 0AA2  
                                      l8847 09FA                                        l8783 0846  
                                      l8769 3782                                        l7993 2E82  
                                      l9489 1786                                        l8945 0C80  
                                      l8929 0C26                                        l8937 0C62  
                                      l8865 0A78                                        l7899 2EF2  
                                      l9499 179C                                        l8971 0D22  
                                      l8963 0CF6                                        l8947 0C84  
                                      l8955 0C9E                                        l8875 0AB0  
                                      l8859 0A4E                                        l8795 089A  
                                      l8779 0832                                        l7997 2E9E  
                                      l7989 2E76                                        l8981 0D6A  
                                      l8965 0CFE                                        l8949 0C90  
                                      l8957 0CCC                                        l8893 0B52  
                                      l8789 0870                                        l7999 2EA8  
                                      l8983 0D72                                        l8967 0D0A  
                                      STR_1 081A                                        STR_2 0809  
                                      l8985 0D7E                                        l8993 0D98  
                                      l8969 0D16                                        l8977 0D30  
                                      l8897 0B82                                        l8995 0DC6  
                                      l8987 0D8A                                        l8979 0D5E  
                                      l8899 0B8A                                        l8997 0DD2  
                                      l8999 0DDE              Right_Mountain_From_The_Left@rc 006D  
                                      u6510 1952                                        u8110 1268  
                                      u6600 1A96                                        u6610 1A98  
                                      u6540 19BE                                        u6516 1954  
                                      u8140 12F4                                        u6800 1D3E  
                                      u6720 1C2A                                        u6640 1B16  
                                      u6480 18E6                                        u8400 1676  
                                      u8160 136A                                        u6810 1D40  
                                      u6730 1C2C                                        u6650 1B18  
                                      u6570 1A2A                                        u6546 19C0  
                                      i2l92 32D4                                        u8180 13DC  
                                      u6910 1EB4                                        u6486 18E8  
                                      u8430 1702                                        u5935 36FA  
                                      u5960 3678                                        u6840 1DC8  
                                      u6760 1CB4                                        u6680 1BA0  
                                      u6576 1A2C                                        i2l97 3312  
                                      u6850 1DCA                                        u6770 1CB6  
                                      u6690 1BA2                                        u8450 1778  
                                      u6940 1F20                                        u6916 1EB6  
                                      u8470 17EA                                        u7750 0B7C  
                                      u6880 1E48                                        u6970 1F8C  
                                      u6946 1F22                                        u6886 1E4A  
                                      u6976 1F8E                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                __CFG_PWRT$ON 000000  
                    __end_of_APIxInitialize 236C              __size_of_Train_Move_Left_Brake 0124  
             __end_of_Train_Move_Left_Brake 2958                                        _main 357E  
            __size_of_Train_Move_Left_Start 0114                             __end_of_SETxPWM 3506  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                                        btemp 0040  
             __end_of_Train_Move_Left_Start 2CA0                                        pclat 000FFA  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 00A6                               __CFG_IESO$OFF 000000  
               EUSART1_Initialize@baud_rate 0060                          Green_Led@Operation 0020  
                            INIT_TERMINAL@i 0060                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000010                               ??_Init_Timers 0020  
                           __end_of_Red_Led 33E6                               __CFG_PLLDIV$5 000000  
                             ?_INCRxAPIxVAL 0001                              __CFG_CCP2MX$ON 000000  
                                     ?_main 0001                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 0020  
                                     _T0CON 000FD5                                       _T2CON 000FCA  
                           __end_of___lwdiv 357E                                SETxPWM@speed 0066  
                                     i2l627 37FA                                       _TMR0H 000FD7  
                                     _TMR0L 000FD6                                       _SPBRG 000FAF  
                             __CFG_USBDIV$2 000000                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                             __CFG_WRT0$OFF 000000                               __CFG_WRT1$OFF 000000  
                             __CFG_WRT2$OFF 000000                               __CFG_WRT3$OFF 000000  
                      _EUSART1_Transmit_ISR 37D0                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                              __CFG_EBTRB$OFF 000000  
                           __end_of_tc_high 334E                                       _putch 38A0  
                                     tablat 000FF5                             ?_APIxInitialize 0001  
                                     status 000FD8   Train_Move_Left_Brake@Train_Move_Wait_Time 0088  
                            __CFG_ICPRT$OFF 000000                        __end_of_Eeprom_Store 31BC  
                             _INIT_TERMINAL 376E                             __initialization 35F2  
                __end_of_EUSART1_Initialize 36F0                                __end_of_main 35F2  
                            ??_INCRxAPIxVAL 0021                            __end_of_Init_Pwm 38A0  
                                    ??_main 0021                         __end_of_Init_Timers 388A  
                             __activetblptr 000002                            __end_of_Junction 328A  
                              _Led1_Counter 0094                           _Green_Led_Counter 0092  
                     ?_EUSART1_Transmit_ISR 0001                           ?_Update_StateMchn 0001  
                        ??_Update_StateMchn 0084                                      _ADCON1 000FC1  
                                    _EEDATA 000FA8                                      _CCPR1L 000FBE  
                                 ??_SETxPWM 0069                                      _EECON2 000FA7  
                                    ?_putch 0001                                      _API_RW 017E  
                        __size_of_Green_Led 0098                       __size_of_DECRxAPIxVAL 002E  
                                    _INTCON 000FF2                                      i2l6765 3852  
                                    i2l6757 3832                                      i2l6863 32D6  
                                    i2l6777 37F6                                      i2l6873 32FE  
                                    i2l6867 32F0                     ?_Train_Move_Right_Brake 0001  
                                    i2l6879 3308                                      _RCREG1 000FAE  
                                    _SPBRGH 000FB0                          __size_of_SetDCPWM1 0044  
                   ?_Train_Move_Right_Start 0001                                      _TXREG1 000FAD  
            ?_Right_Mountain_From_The_Right 0001                                   ??_Red_Led 0020  
                            ?_INIT_TERMINAL 0001                              __CFG_XINST$OFF 000000  
           Train_Move_Left_Brake@Return_Val 00A9                              __CFG_STVREN$ON 000000  
                                 ??___lwdiv 0020                                      clear_0 35F8  
                                    clear_1 3604                                      clear_2 3610  
                                    clear_3 361C                                      _tc_low 0018  
                                    _printf 270E                              _Switch_Moutain 0037  
                                _Train_Path 236C     Right_Mountain_From_The_Right@Return_Val 00A8  
    Left_Mountain_From_The_Right@Return_Val 00A6                              _Switch_Program 0038  
                              _DECRxAPIxVAL 37A2                                   ??_tc_high 0001  
                 _Activate_Controls_Counter 0090                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 007C  
                 _Button_Contact_Counter_LB 009A                   _Button_Contact_Counter_LF 009B  
                 _Button_Contact_Counter_RB 009D                   _Button_Contact_Counter_RF 009E  
            __end_of_Train_Move_Right_Brake 2A76                             _eusart1RxBuffer 0200  
                      __size_of_GETxAPIxVAL 001C                             _eusart1TxBuffer 027E  
            __end_of_Train_Move_Right_Start 2B8C                        _Train_Move_Pwm_Count 0023  
                                __accesstop 0060                     __end_of__initialization 3642  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                            __pcstackCOMRAM 0001                                __pidataBANK0 38AC  
                               _Init_Timers 3872                               __end_of_putch 38AC  
                         __end_of_Green_Led 347E                           __end_of_SetDCPWM1 3734  
                           _Red_Led_Counter 0098                      ??_EUSART1_Transmit_ISR 0001  
Train_Move_Right_Start@Train_Move_Wait_Time 008E                    __size_of_Debounce_Inputs 0714  
               __end_of_EUSART1_Receive_ISR 3856            Train_Move_Right_Brake@Return_Val 00AB  
                             ?_SENDxMESSAGE 0077                                     ??_putch 0020  
                             _eusart1RxHead 003B                               _eusart1TxHead 003E  
                     __size_of_Eeprom_Store 00D2                 Junction@Junction_Left_Right 0063  
                             _eusart1RxTail 003C                                  __pbssBANK0 0086  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                             _eusart1TxTail 003F                        __end_of_INCRxAPIxVAL 382A  
                                 ?_Init_Pwm 0001                             ??_INIT_TERMINAL 0020  
                          GETxAPIxVAL@index 0020                            SETxAPIxVAL@index 0080  
                                 ?_Junction 0062                            SETxAPIxVAL@value 007C  
      __size_of_Left_Mountain_From_The_Left 0112                                     _CCP1CON 000FBD  
                                   ?_tc_low 0001                                     ?_printf 0067  
                               ?_Train_Path 006E                                _Eeprom_Store 30EA  
                                   _INTCON2 000FF1   Train_Move_Left_Start@Train_Move_Wait_Time 008A  
                            ??_SENDxMESSAGE 0021                            ??_APIxInitialize 0020  
                                   _SETxPWM 347E                            SETxPWM@direction 0068  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 0020  
                                   _Red_Led 334E                       _Train_Move_Left_Brake 2834  
                                ??_Junction 0021                                     __Hparam 0000  
                     _Train_Move_Left_Start 2B8C                                     __Lparam 0000  
                                   ___lwdiv 3506                                __psmallconst 0800  
                                   __pcinit 35F2                                     __ramtop 0800  
                           __size_of_tc_low 008E                                     __ptext0 357E  
                                   __ptext1 082A                                     __ptext2 236C  
                                   __ptext3 2A76                                     __ptext4 2958  
                                   __ptext5 2B8C                                     __ptext6 2834  
                                   __ptext7 2CA0                                     __ptext8 2DB4  
                                   __ptext9 2FDA                        Train_Path@Return_Val 00AD  
                           __size_of_printf 0126                           __end_of_hexpowers 0809  
                                   _tc_high 0008                          _EUSART1_Initialize 36A4  
                           SENDxMESSAGE@low 007B                   _Train_Move_Pwm_Fast_Count 0025  
                            __pintcode_body 328A                        end_of_initialization 3642  
                           _Switch_Junction 00A0                           ??_Debounce_Inputs 0081  
                       ?_EUSART1_Initialize 0001                        __size_of_SETxAPIxVAL 0054  
                             __Lmediumconst 0000                                     int_func 328A  
                          SETxPWM@pwm_speed 006B                           INCRxAPIxVAL@index 0083  
                 __size_of_Update_StateMchn 105E                           INCRxAPIxVAL@value 0081  
                       __size_of_Train_Path 03A2                                   _RCSTAbits 000FAB  
                                   printf@c 0076                                     printf@f 0067  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc2 000FDE  
            Left_Mountain_From_The_Right@rc 006D                        ??_EUSART1_Initialize 0020  
                                 _PORTAbits 000F80                                   _PORTBbits 000F81  
                                 _PORTCbits 000F82                                   _PORTDbits 000F83  
                                 _PORTEbits 000F84                                   _TRISAbits 000F92  
                                 _TRISBbits 000F93                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                                   _TRISEbits 000F96  
                     __size_of_INCRxAPIxVAL 002C                Junction@Junction_Switch_Time 0086  
                    ?_Train_Move_Left_Brake 0001                                   _TXSTAbits 000FAC  
                    ?_Train_Move_Left_Start 0001                                 _Switch_Main 00A1  
                               _Switch_Init 009F                        __end_of_SENDxMESSAGE 376E  
                              ?_Init_Timers 0001                          Junction@Return_Val 00A4  
                               _BAUDCONbits 000FB8                                _INCRxAPIxVAL 37FE  
                      _Update_State_Machine 00A3                              __end_of_tc_low 00A6  
               _Button_Contact_Counter_Stop 0028                              __end_of_printf 2834  
                                 _Green_Led 33E6                         start_initialization 35F2  
                             ??_GETxAPIxVAL 0020                                   _SetDCPWM1 36F0  
                           SetDCPWM1@DCycle 0064                      _Mountain_Delay_Counter 0096  
              ?_Left_Mountain_From_The_Left 0001                           __size_of_Init_Pwm 0016  
                         __size_of_Junction 00CE                                 __pdataBANK0 00A4  
                          __CFG_LPT1OSC$OFF 000000                                    ??_tc_low 000F  
                                  ??_printf 0021                              _eusart1RxCount 003A  
                              ??_Train_Path 0021                                  ?_Green_Led 0001  
                               __pbssCOMRAM 0021               __size_of_EUSART1_Transmit_ISR 002E  
                             __pcstackBANK0 0060                                  ?_SetDCPWM1 0060  
Train_Move_Right_Brake@Train_Move_Wait_Time 008C                                    ?_SETxPWM 0066  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 3872  
             ??_Left_Mountain_From_The_Left 0021                                    ?_Red_Led 0001  
                          _Update_StateMchn 082A                       __end_of_INIT_TERMINAL 37A2  
                          ___lwdiv@dividend 0060      Right_Mountain_From_The_Left@Return_Val 00A7  
     Left_Mountain_From_The_Left@Return_Val 00A5                          __end_of_Train_Path 270E  
                                 __pintcode 0008                                    ?___lwdiv 0060  
      __end_of_Left_Mountain_From_The_Right 30EA       __size_of_Left_Mountain_From_The_Right 0110  
              _Left_Mountain_From_The_Right 2FDA                                 __pintcodelo 0018  
                           _Debounce_Inputs 1888                                 __smallconst 0800  
                  ??_Train_Move_Right_Brake 0021                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 006D                    ??_Train_Move_Right_Start 0021  
                     Junction@Straight_Bend 0062                                   _hexpowers 0801  
              _Button_Contact_Counter_Start 0027                    _Reed_Contact_LMD_Counter 002B  
                          ___lwdiv@quotient 0065                              __size_of_putch 000C  
                     __size_of_SENDxMESSAGE 003A        __end_of_Right_Mountain_From_The_Left 2EC8  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 2DB4  
                                  _PIE1bits 000F9D                              _Adjust_Counter 0021  
             Left_Mountain_From_The_Left@rc 006D                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1                                    _RCONbits 000FD0  
                            Train_Path@From 006F                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           SENDxMESSAGE@index 0079  
                         SENDxMESSAGE@value 0077                                 ??_Green_Led 0020  
                                printf@flag 006F                               ?_DECRxAPIxVAL 0001  
                                printf@prec 0075                                 ??_SetDCPWM1 0062  
                               _GETxAPIxVAL 3856                               ??_SETxAPIxVAL 007E  
                              _SENDxMESSAGE 3734                                   copy_data0 3636  
                   ??_Train_Move_Left_Brake 0021                    _Reed_Contact_LMU_Counter 002C  
                          __size_of_SETxPWM 0088                     ??_Train_Move_Left_Start 0021  
                        SetDCPWM1@dutycycle 0060                                    _Init_Pwm 388A  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 03D0  
                                  __Hrparam 0000                                    _Junction 31BC  
                          __size_of_Red_Led 0098               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                    _Reed_Contact_RMD_Counter 002F  
                   __end_of_Debounce_Inputs 1F9C                 __size_of_EUSART1_Initialize 004C  
                          __size_of___lwdiv 0078                           _Switch_Train_Path 00A2  
                         _Switch_Train_Move 0039                            _Switch_Adjust_LB 0033  
                          _Switch_Adjust_LF 0034                            _Switch_Adjust_RB 0035  
                          _Switch_Adjust_RF 0036                              ??_DECRxAPIxVAL 0021  
           __size_of_Train_Move_Right_Brake 011E                            __size_of_tc_high 3346  
                           ___lwdiv@divisor 0062             __size_of_Train_Move_Right_Start 0116  
                           ___lwdiv@counter 0064                                    __ptext10 2EC8  
                                  __ptext11 347E                                    __ptext20 3650  
                                  __ptext12 36F0                                    __ptext21 3734  
                                  __ptext13 31BC                                    __ptext30 1F9C  
                                  __ptext22 270E                                    __ptext14 334E  
                                  __ptext23 38A0                                    __ptext15 37FE  
                                  __ptext24 3506                                    __ptext16 33E6  
                                  __ptext33 37D0                                    __ptext25 3856  
                                  __ptext17 30EA                                    __ptext34 382A  
                                  __ptext26 3872                                    __ptext18 1888  
                                  __ptext27 388A                                    __ptext19 37A2  
                                  __ptext28 376E                                    __ptext29 36A4  
                             __size_of_main 0074                         __end_of_SETxAPIxVAL 36A4  
                   _Reed_Contact_LB_Counter 0029                                    int$flags 0040  
                   _Reed_Contact_LF_Counter 002A                           DECRxAPIxVAL@index 0083  
                          SENDxMESSAGE@high 007A                           DECRxAPIxVAL@value 0081  
                  _Reed_Contact_RMU_Counter 0030                                   printf@idx 0070  
                                 printf@val 0073                         _EUSART1_Receive_ISR 382A  
                     __CFG_CPUDIV$OSC2_PLL3 000000                                   putch@data 0020  
                             ?_Eeprom_Store 0001                    __end_of_Update_StateMchn 1888  
                                _INTCONbits 000FF2             ??_Right_Mountain_From_The_Right 0021  
            ??_Left_Mountain_From_The_Right 0021                     _Reed_Contact_RB_Counter 002D  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 002E                      _Train_Move_Right_Brake 2958  
              __end_of_EUSART1_Transmit_ISR 37FE                      _Train_Move_Right_Start 2A76  
           Train_Move_Left_Start@Return_Val 00AA                                Train_Path@To 006E  
                                  printf@ap 0071                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0032              ??_Right_Mountain_From_The_Left 0021  
                            ??_Eeprom_Store 0021                                 _SETxAPIxVAL 3650  
                        __CFG_FOSC$HSPLL_HS 000000                       ??_EUSART1_Receive_ISR 0001  
                            _APIxInitialize 1F9C               _Button_Contact_Counter_Middle 009C  
                      __end_of_DECRxAPIxVAL 37D0  
