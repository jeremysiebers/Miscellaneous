

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Nov 22 22:52:42 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataBANK0
    63  003C9C                     __pidataBANK0:
    64                           	opt stack 0
    65                           
    66                           ;initializer for Junction@Return_Val
    67  003C9C  01                 	db	1
    68                           
    69                           ;initializer for Left_Mountain_From_The_Left@Return_Val
    70  003C9D  01                 	db	1
    71                           
    72                           ;initializer for Left_Mountain_From_The_Right@Return_Val
    73  003C9E  01                 	db	1
    74                           
    75                           ;initializer for Right_Mountain_From_The_Left@Return_Val
    76  003C9F  01                 	db	1
    77                           
    78                           ;initializer for Right_Mountain_From_The_Right@Return_Val
    79  003CA0  01                 	db	1
    80                           
    81                           ;initializer for Train_Move_Left_Brake@Return_Val
    82  003CA1  01                 	db	1
    83                           
    84                           ;initializer for Train_Move_Left_Start@Return_Val
    85  003CA2  01                 	db	1
    86                           
    87                           ;initializer for Train_Move_Right_Brake@Return_Val
    88  003CA3  01                 	db	1
    89                           
    90                           ;initializer for Train_Move_Right_Start@Return_Val
    91  003CA4  01                 	db	1
    92                           
    93                           ;initializer for Train_Path@Return_Val
    94  003CA5  01                 	db	1
    95                           
    96                           ;initializer for _Switch_Main
    97  003CA6  01                 	db	1
    98                           
    99                           	psect	smallconst
   100  000800                     __psmallconst:
   101                           	opt stack 0
   102  000800  00                 	db	0
   103  000801                     _dpowers:
   104                           	opt stack 0
   105  000801  0001               	dw	1
   106  000803  000A               	dw	10
   107  000805  0064               	dw	100
   108  000807  03E8               	dw	1000
   109  000809  2710               	dw	10000
   110  00080B                     __end_of_dpowers:
   111                           	opt stack 0
   112  00080B                     _DataLen:
   113                           	opt stack 0
   114  00080B  0A                 	db	10
   115  00080C                     __end_of_DataLen:
   116                           	opt stack 0
   117  0000                     _ADCON1	set	4033
   118  0000                     _BAUDCONbits	set	4024
   119  0000                     _CCP1CON	set	4029
   120  0000                     _CCPR1L	set	4030
   121  0000                     _CMCON	set	4020
   122  0000                     _EEADR	set	4009
   123  0000                     _EECON1bits	set	4006
   124  0000                     _EECON2	set	4007
   125  0000                     _EEDATA	set	4008
   126  0000                     _INTCON	set	4082
   127  0000                     _INTCON2	set	4081
   128  0000                     _INTCONbits	set	4082
   129  0000                     _PIE1bits	set	3997
   130  0000                     _PIR1bits	set	3998
   131  0000                     _PIR2bits	set	4001
   132  0000                     _PORTAbits	set	3968
   133  0000                     _PORTBbits	set	3969
   134  0000                     _PORTCbits	set	3970
   135  0000                     _PORTDbits	set	3971
   136  0000                     _PORTEbits	set	3972
   137  0000                     _PR2	set	4043
   138  0000                     _RCONbits	set	4048
   139  0000                     _RCREG1	set	4014
   140  0000                     _RCSTA1bits	set	4011
   141  0000                     _RCSTAbits	set	4011
   142  0000                     _SPBRG	set	4015
   143  0000                     _SPBRGH	set	4016
   144  0000                     _T0CON	set	4053
   145  0000                     _T2CON	set	4042
   146  0000                     _TMR0H	set	4055
   147  0000                     _TMR0L	set	4054
   148  0000                     _TRISA	set	3986
   149  0000                     _TRISAbits	set	3986
   150  0000                     _TRISB	set	3987
   151  0000                     _TRISBbits	set	3987
   152  0000                     _TRISC	set	3988
   153  0000                     _TRISCbits	set	3988
   154  0000                     _TRISD	set	3989
   155  0000                     _TRISDbits	set	3989
   156  0000                     _TRISE	set	3990
   157  0000                     _TRISEbits	set	3990
   158  0000                     _TXREG1	set	4013
   159  0000                     _TXSTAbits	set	4012
   160  0000                     _TXIF	set	31988
   161  00080C                     STR_8:
   162  00080C  0D                 	db	13
   163  00080D  0A                 	db	10
   164  00080E  4D                 	db	77	;'M'
   165  00080F  23                 	db	35
   166  000810  25                 	db	37
   167  000811  64                 	db	100	;'d'
   168  000812  20                 	db	32
   169  000813  25                 	db	37
   170  000814  64                 	db	100	;'d'
   171  000815  0D                 	db	13
   172  000816  0A                 	db	10
   173  000817  00                 	db	0
   174  000818                     STR_1:
   175  000818  0D                 	db	13
   176  000819  0A                 	db	10
   177  00081A  45                 	db	69	;'E'
   178  00081B  23                 	db	35
   179  00081C  31                 	db	49	;'1'
   180  00081D  30                 	db	48	;'0'
   181  00081E  0D                 	db	13
   182  00081F  0A                 	db	10
   183  000820  00                 	db	0
   184  000821                     STR_2:
   185  000821  0D                 	db	13
   186  000822  0A                 	db	10
   187  000823  45                 	db	69	;'E'
   188  000824  23                 	db	35
   189  000825  31                 	db	49	;'1'
   190  000826  31                 	db	49	;'1'
   191  000827  0D                 	db	13
   192  000828  0A                 	db	10
   193  000829  00                 	db	0
   194  00082A                     STR_3:
   195  00082A  0D                 	db	13
   196  00082B  0A                 	db	10
   197  00082C  45                 	db	69	;'E'
   198  00082D  23                 	db	35
   199  00082E  31                 	db	49	;'1'
   200  00082F  32                 	db	50	;'2'
   201  000830  0D                 	db	13
   202  000831  0A                 	db	10
   203  000832  00                 	db	0
   204  000833                     STR_4:
   205  000833  0D                 	db	13
   206  000834  0A                 	db	10
   207  000835  45                 	db	69	;'E'
   208  000836  23                 	db	35
   209  000837  31                 	db	49	;'1'
   210  000838  33                 	db	51	;'3'
   211  000839  0D                 	db	13
   212  00083A  0A                 	db	10
   213  00083B  00                 	db	0
   214  00083C                     STR_5:
   215  00083C  0D                 	db	13
   216  00083D  0A                 	db	10
   217  00083E  45                 	db	69	;'E'
   218  00083F  23                 	db	35
   219  000840  31                 	db	49	;'1'
   220  000841  34                 	db	52	;'4'
   221  000842  0D                 	db	13
   222  000843  0A                 	db	10
   223  000844  00                 	db	0
   224  0000                     
   225                           ; #config settings
   226  000845  00                 	db	0	; dummy byte at the end
   227  0000                     
   228                           	psect	cinit
   229  00391C                     __pcinit:
   230                           	opt stack 0
   231  00391C                     start_initialization:
   232                           	opt stack 0
   233  00391C                     __initialization:
   234                           	opt stack 0
   235                           
   236                           ; Clear objects allocated to BANK3 (252 bytes)
   237  00391C  EE03  F000         	lfsr	0,__pbssBANK3
   238  003920  0EFC               	movlw	252
   239  003922                     clear_0:
   240  003922  6AEE               	clrf	postinc0,c
   241  003924  06E8               	decf	wreg,f,c
   242  003926  E1FD               	bnz	clear_0
   243                           
   244                           ; Clear objects allocated to BANK2 (164 bytes)
   245  003928  EE02  F000         	lfsr	0,__pbssBANK2
   246  00392C  0EA4               	movlw	164
   247  00392E                     clear_1:
   248  00392E  6AEE               	clrf	postinc0,c
   249  003930  06E8               	decf	wreg,f,c
   250  003932  E1FD               	bnz	clear_1
   251                           
   252                           ; Clear objects allocated to BANK1 (164 bytes)
   253  003934  EE01  F000         	lfsr	0,__pbssBANK1
   254  003938  0EA4               	movlw	164
   255  00393A                     clear_2:
   256  00393A  6AEE               	clrf	postinc0,c
   257  00393C  06E8               	decf	wreg,f,c
   258  00393E  E1FD               	bnz	clear_2
   259                           
   260                           ; Clear objects allocated to BANK0 (47 bytes)
   261  003940  EE00  F060         	lfsr	0,__pbssBANK0
   262  003944  0E2F               	movlw	47
   263  003946                     clear_3:
   264  003946  6AEE               	clrf	postinc0,c
   265  003948  06E8               	decf	wreg,f,c
   266  00394A  E1FD               	bnz	clear_3
   267                           
   268                           ; Clear objects allocated to COMRAM (31 bytes)
   269  00394C  EE00  F021         	lfsr	0,__pbssCOMRAM
   270  003950  0E1F               	movlw	31
   271  003952                     clear_4:
   272  003952  6AEE               	clrf	postinc0,c
   273  003954  06E8               	decf	wreg,f,c
   274  003956  E1FD               	bnz	clear_4
   275                           
   276                           ; Initialize objects allocated to BANK0 (11 bytes)
   277                           ; load TBLPTR registers with __pidataBANK0
   278  003958  0E9C               	movlw	low __pidataBANK0
   279  00395A  6EF6               	movwf	tblptrl,c
   280  00395C  0E3C               	movlw	high __pidataBANK0
   281  00395E  6EF7               	movwf	tblptrh,c
   282  003960  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   283  003962  6EF8               	movwf	tblptru,c
   284  003964  EE00  F0BC         	lfsr	0,__pdataBANK0
   285  003968  EE10 F00B          	lfsr	1,11
   286  00396C                     copy_data0:
   287  00396C  0009               	tblrd		*+
   288  00396E  CFF5 FFEE          	movff	tablat,postinc0
   289  003972  50E5               	movf	postdec1,w,c
   290  003974  50E1               	movf	fsr1l,w,c
   291  003976  E1FA               	bnz	copy_data0
   292  003978                     end_of_initialization:
   293                           	opt stack 0
   294  003978                     __end_of__initialization:
   295                           	opt stack 0
   296  003978  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   297  00397A  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   298  00397C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   299  00397E  6EF8               	movwf	tblptru,c
   300  003980  0100               	movlb	0
   301  003982  EF54  F01C         	goto	_main	;jump to C main() function
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	bssCOMRAM
   312  000021                     __pbssCOMRAM:
   313                           	opt stack 0
   314  000021                     _Green_Led_Counter:
   315                           	opt stack 0
   316  000021                     	ds	2
   317  000023                     _Red_Led_Counter:
   318                           	opt stack 0
   319  000023                     	ds	2
   320  000025                     _Button_Contact_Counter_LB:
   321                           	opt stack 0
   322  000025                     	ds	1
   323  000026                     _Button_Contact_Counter_LF:
   324                           	opt stack 0
   325  000026                     	ds	1
   326  000027                     _Button_Contact_Counter_Middle:
   327                           	opt stack 0
   328  000027                     	ds	1
   329  000028                     _Button_Contact_Counter_RB:
   330                           	opt stack 0
   331  000028                     	ds	1
   332  000029                     _Button_Contact_Counter_RF:
   333                           	opt stack 0
   334  000029                     	ds	1
   335  00002A                     _Button_Contact_Counter_Start:
   336                           	opt stack 0
   337  00002A                     	ds	1
   338  00002B                     _Button_Contact_Counter_Stop:
   339                           	opt stack 0
   340  00002B                     	ds	1
   341  00002C                     _Reed_Contact_LB_Counter:
   342                           	opt stack 0
   343  00002C                     	ds	1
   344  00002D                     _Reed_Contact_LF_Counter:
   345                           	opt stack 0
   346  00002D                     	ds	1
   347  00002E                     _Reed_Contact_LMD_Counter:
   348                           	opt stack 0
   349  00002E                     	ds	1
   350  00002F                     _Reed_Contact_LMU_Counter:
   351                           	opt stack 0
   352  00002F                     	ds	1
   353  000030                     _Reed_Contact_RB_Counter:
   354                           	opt stack 0
   355  000030                     	ds	1
   356  000031                     _Reed_Contact_RF_Counter:
   357                           	opt stack 0
   358  000031                     	ds	1
   359  000032                     _Reed_Contact_RMD_Counter:
   360                           	opt stack 0
   361  000032                     	ds	1
   362  000033                     _Reed_Contact_RMU_Counter:
   363                           	opt stack 0
   364  000033                     	ds	1
   365  000034                     _Switch_Activate_Controls:
   366                           	opt stack 0
   367  000034                     	ds	1
   368  000035                     _Switch_Adjust_LB:
   369                           	opt stack 0
   370  000035                     	ds	1
   371  000036                     _Switch_Adjust_LF:
   372                           	opt stack 0
   373  000036                     	ds	1
   374  000037                     _Switch_Adjust_RB:
   375                           	opt stack 0
   376  000037                     	ds	1
   377  000038                     _Switch_Adjust_RF:
   378                           	opt stack 0
   379  000038                     	ds	1
   380  000039                     _TrSwitch:
   381                           	opt stack 0
   382  000039                     	ds	1
   383  00003A                     _eusart1RxCount:
   384                           	opt stack 0
   385  00003A                     	ds	1
   386  00003B                     _eusart1RxHead:
   387                           	opt stack 0
   388  00003B                     	ds	1
   389  00003C                     _eusart1RxTail:
   390                           	opt stack 0
   391  00003C                     	ds	1
   392  00003D                     _eusart1TxBufferRemaining:
   393                           	opt stack 0
   394  00003D                     	ds	1
   395  00003E                     _eusart1TxHead:
   396                           	opt stack 0
   397  00003E                     	ds	1
   398  00003F                     _eusart1TxTail:
   399                           	opt stack 0
   400  00003F                     	ds	1
   401                           tblptru	equ	0xFF8
   402                           tblptrh	equ	0xFF7
   403                           tblptrl	equ	0xFF6
   404                           tablat	equ	0xFF5
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           postdec1	equ	0xFE5
   408                           fsr1l	equ	0xFE1
   409                           
   410                           	psect	bssBANK0
   411  000060                     __pbssBANK0:
   412                           	opt stack 0
   413  000060                     Junction@Junction_Switch_Time:
   414                           	opt stack 0
   415  000060                     	ds	2
   416  000062                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   417                           	opt stack 0
   418  000062                     	ds	2
   419  000064                     Train_Move_Left_Start@Train_Move_Wait_Time:
   420                           	opt stack 0
   421  000064                     	ds	2
   422  000066                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   423                           	opt stack 0
   424  000066                     	ds	2
   425  000068                     Train_Move_Right_Start@Train_Move_Wait_Time:
   426                           	opt stack 0
   427  000068                     	ds	2
   428  00006A                     _Activate_Controls_Counter:
   429                           	opt stack 0
   430  00006A                     	ds	2
   431  00006C                     _Adjust_Counter:
   432                           	opt stack 0
   433  00006C                     	ds	2
   434  00006E                     _Led1_Counter:
   435                           	opt stack 0
   436  00006E                     	ds	2
   437  000070                     _Mountain_Delay_Counter:
   438                           	opt stack 0
   439  000070                     	ds	2
   440  000072                     _Train_Move_Pwm_Count:
   441                           	opt stack 0
   442  000072                     	ds	2
   443  000074                     _Train_Move_Pwm_Fast_Count:
   444                           	opt stack 0
   445  000074                     	ds	2
   446  000076                     _pData:
   447                           	opt stack 0
   448  000076                     	ds	2
   449  000078                     _pLen:
   450                           	opt stack 0
   451  000078                     	ds	2
   452  00007A                     _Message_To_Translate:
   453                           	opt stack 0
   454  00007A                     	ds	1
   455  00007B                     _Received_Data:
   456                           	opt stack 0
   457  00007B                     	ds	1
   458  00007C                     _RxSwitch:
   459                           	opt stack 0
   460  00007C                     	ds	1
   461  00007D                     _Stop_Program:
   462                           	opt stack 0
   463  00007D                     	ds	1
   464  00007E                     _Switch_Init:
   465                           	opt stack 0
   466  00007E                     	ds	1
   467  00007F                     _Switch_Junction:
   468                           	opt stack 0
   469  00007F                     	ds	1
   470  000080                     _Switch_Moutain:
   471                           	opt stack 0
   472  000080                     	ds	1
   473  000081                     _Switch_Program:
   474                           	opt stack 0
   475  000081                     	ds	1
   476  000082                     _Switch_Train_Move:
   477                           	opt stack 0
   478  000082                     	ds	1
   479  000083                     _Switch_Train_Path:
   480                           	opt stack 0
   481  000083                     	ds	1
   482  000084                     _Update_State_Machine:
   483                           	opt stack 0
   484  000084                     	ds	1
   485  000085                     _Data:
   486                           	opt stack 0
   487  000085                     	ds	10
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1l	equ	0xFE1
   496                           
   497                           	psect	dataBANK0
   498  0000BC                     __pdataBANK0:
   499                           	opt stack 0
   500  0000BC                     Junction@Return_Val:
   501                           	opt stack 0
   502  0000BC                     	ds	1
   503  0000BD                     Left_Mountain_From_The_Left@Return_Val:
   504                           	opt stack 0
   505  0000BD                     	ds	1
   506  0000BE                     Left_Mountain_From_The_Right@Return_Val:
   507                           	opt stack 0
   508  0000BE                     	ds	1
   509  0000BF                     Right_Mountain_From_The_Left@Return_Val:
   510                           	opt stack 0
   511  0000BF                     	ds	1
   512  0000C0                     Right_Mountain_From_The_Right@Return_Val:
   513                           	opt stack 0
   514  0000C0                     	ds	1
   515  0000C1                     Train_Move_Left_Brake@Return_Val:
   516                           	opt stack 0
   517  0000C1                     	ds	1
   518  0000C2                     Train_Move_Left_Start@Return_Val:
   519                           	opt stack 0
   520  0000C2                     	ds	1
   521  0000C3                     Train_Move_Right_Brake@Return_Val:
   522                           	opt stack 0
   523  0000C3                     	ds	1
   524  0000C4                     Train_Move_Right_Start@Return_Val:
   525                           	opt stack 0
   526  0000C4                     	ds	1
   527  0000C5                     Train_Path@Return_Val:
   528                           	opt stack 0
   529  0000C5                     	ds	1
   530  0000C6                     _Switch_Main:
   531                           	opt stack 0
   532  0000C6                     	ds	1
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1l	equ	0xFE1
   541                           
   542                           	psect	bssBANK1
   543  000100                     __pbssBANK1:
   544                           	opt stack 0
   545  000100                     _API:
   546                           	opt stack 0
   547  000100                     	ds	164
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           wreg	equ	0xFE8
   554                           postdec1	equ	0xFE5
   555                           fsr1l	equ	0xFE1
   556                           
   557                           	psect	bssBANK2
   558  000200                     __pbssBANK2:
   559                           	opt stack 0
   560  000200                     _API_RW:
   561                           	opt stack 0
   562  000200                     	ds	164
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	bssBANK3
   573  000300                     __pbssBANK3:
   574                           	opt stack 0
   575  000300                     _eusart1RxBuffer:
   576                           	opt stack 0
   577  000300                     	ds	126
   578  00037E                     _eusart1TxBuffer:
   579                           	opt stack 0
   580  00037E                     	ds	126
   581                           tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           tblptrl	equ	0xFF6
   584                           tablat	equ	0xFF5
   585                           postinc0	equ	0xFEE
   586                           wreg	equ	0xFE8
   587                           postdec1	equ	0xFE5
   588                           fsr1l	equ	0xFE1
   589                           
   590                           	psect	cstackBANK0
   591  00008F                     __pcstackBANK0:
   592                           	opt stack 0
   593  00008F                     ?_GETxAPIxVAL:
   594                           	opt stack 0
   595  00008F                     ?_GETxAPIxRW:
   596                           	opt stack 0
   597  00008F                     ?___wmul:
   598                           	opt stack 0
   599  00008F                     ?___lwdiv:
   600                           	opt stack 0
   601  00008F                     _isdigit$1868:
   602                           	opt stack 0
   603  00008F                     EUSART1_Initialize@baud_rate:
   604                           	opt stack 0
   605  00008F                     APIxInitialize@i:
   606                           	opt stack 0
   607  00008F                     ___wmul@multiplier:
   608                           	opt stack 0
   609  00008F                     ___lwdiv@dividend:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x0
   613  00008F                     	ds	1
   614  000090                     isdigit@c:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1
   618  000090                     	ds	1
   619  000091                     SETxAPIxVALxNoxRET@value:
   620                           	opt stack 0
   621  000091                     SetDCPWM1@dutycycle:
   622                           	opt stack 0
   623  000091                     ___wmul@multiplicand:
   624                           	opt stack 0
   625  000091                     ___lwdiv@divisor:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x2
   629  000091                     	ds	2
   630  000093                     ??_SetDCPWM1:
   631  000093                     ___lwdiv@counter:
   632                           	opt stack 0
   633  000093                     ___wmul@product:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x4
   637  000093                     	ds	1
   638  000094                     ___lwdiv@quotient:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x5
   642  000094                     	ds	1
   643  000095                     ?_atoi:
   644                           	opt stack 0
   645  000095                     SETxAPIxVALxNoxRET@index:
   646                           	opt stack 0
   647  000095                     SetDCPWM1@DCycle:
   648                           	opt stack 0
   649  000095                     atoi@s:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x6
   653  000095                     	ds	1
   654  000096                     ?___lwmod:
   655                           	opt stack 0
   656  000096                     ___lwmod@dividend:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x7
   660  000096                     	ds	1
   661  000097                     ??_atoi:
   662                           
   663                           ; 1 bytes @ 0x8
   664  000097                     	ds	1
   665  000098                     ___lwmod@divisor:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x9
   669  000098                     	ds	1
   670  000099                     atoi@sign:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0xA
   674  000099                     	ds	1
   675  00009A                     ?_printf:
   676                           	opt stack 0
   677  00009A                     printf@f:
   678                           	opt stack 0
   679  00009A                     atoi@a:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0xB
   683  00009A                     	ds	6
   684  0000A0                     ??_printf:
   685                           
   686                           ; 1 bytes @ 0x11
   687  0000A0                     	ds	1
   688  0000A1                     printf@ap:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x12
   692  0000A1                     	ds	2
   693  0000A3                     printf@flag:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x14
   697  0000A3                     	ds	1
   698  0000A4                     printf@prec:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x15
   702  0000A4                     	ds	1
   703  0000A5                     printf@val:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x16
   707  0000A5                     	ds	2
   708  0000A7                     printf@c:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x18
   712  0000A7                     	ds	1
   713  0000A8                     SENDxMESSAGE@value:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x19
   717  0000A8                     	ds	2
   718  0000AA                     SENDxMESSAGE@index:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x1B
   722  0000AA                     	ds	1
   723  0000AB                     TranslateMessage@Value:
   724                           	opt stack 0
   725  0000AB                     SETxAPIxVAL@value:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x1C
   729  0000AB                     	ds	2
   730  0000AD                     TranslateMessage@Index:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x1E
   734  0000AD                     	ds	2
   735  0000AF                     ??_READxRECEIVEDxMESSAGE:
   736  0000AF                     SETxAPIxVAL@index:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x20
   740  0000AF                     	ds	1
   741  0000B0                     ??_Debounce_Inputs:
   742  0000B0                     Junction@Straight_Bend:
   743                           	opt stack 0
   744  0000B0                     SETxPWM@speed:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x21
   748  0000B0                     	ds	1
   749  0000B1                     Junction@Junction_Left_Right:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x22
   753  0000B1                     	ds	1
   754  0000B2                     SETxPWM@direction:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x23
   758  0000B2                     	ds	1
   759  0000B3                     ??_SETxPWM:
   760                           
   761                           ; 1 bytes @ 0x24
   762  0000B3                     	ds	2
   763  0000B5                     SETxPWM@pwm_speed:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x26
   767  0000B5                     	ds	2
   768  0000B7                     Right_Mountain_From_The_Right@rc:
   769                           	opt stack 0
   770  0000B7                     Left_Mountain_From_The_Right@rc:
   771                           	opt stack 0
   772  0000B7                     Left_Mountain_From_The_Left@rc:
   773                           	opt stack 0
   774  0000B7                     Right_Mountain_From_The_Left@rc:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x28
   778  0000B7                     	ds	1
   779  0000B8                     Train_Path@To:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x29
   783  0000B8                     	ds	1
   784  0000B9                     Train_Path@From:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x2A
   788  0000B9                     	ds	1
   789  0000BA                     ??_Update_StateMchn:
   790                           
   791                           ; 1 bytes @ 0x2B
   792  0000BA                     	ds	2
   793                           tblptru	equ	0xFF8
   794                           tblptrh	equ	0xFF7
   795                           tblptrl	equ	0xFF6
   796                           tablat	equ	0xFF5
   797                           postinc0	equ	0xFEE
   798                           wreg	equ	0xFE8
   799                           postdec1	equ	0xFE5
   800                           fsr1l	equ	0xFE1
   801                           
   802                           	psect	cstackCOMRAM
   803  000001                     __pcstackCOMRAM:
   804                           	opt stack 0
   805  000001                     ??_tc_high:
   806  000001                     
   807                           ; 1 bytes @ 0x0
   808  000001                     	ds	14
   809  00000F                     ??_tc_low:
   810                           
   811                           ; 1 bytes @ 0xE
   812  00000F                     	ds	17
   813  000020                     ??_isdigit:
   814  000020                     EUSART1_Read@readValue:
   815                           	opt stack 0
   816  000020                     putch@data:
   817                           	opt stack 0
   818  000020                     GETxAPIxRW@index:
   819                           	opt stack 0
   820  000020                     GETxAPIxVAL@index:
   821                           	opt stack 0
   822  000020                     Green_Led@Operation:
   823                           	opt stack 0
   824  000020                     Red_Led@Operation:
   825                           	opt stack 0
   826  000020                     ___lwmod@counter:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x1F
   830  000020                     	ds	1
   831  000021                     tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           postdec1	equ	0xFE5
   838                           fsr1l	equ	0xFE1
   839                           
   840                           ; 1 bytes @ 0x20
   841 ;;
   842 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   843 ;;
   844 ;; *************** function _main *****************
   845 ;; Defined at:
   846 ;;		line 105 in file "../Main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   860 ;;      Params:         0       0       0       0       0       0       0       0       0
   861 ;;      Locals:         0       0       0       0       0       0       0       0       0
   862 ;;      Temps:          0       0       0       0       0       0       0       0       0
   863 ;;      Totals:         0       0       0       0       0       0       0       0       0
   864 ;;Total ram usage:        0 bytes
   865 ;; Hardware stack levels required when called:   11
   866 ;; This function calls:
   867 ;;		_APIxInitialize
   868 ;;		_EUSART1_Initialize
   869 ;;		_Init_Pwm
   870 ;;		_Init_Timers
   871 ;;		_READxRECEIVEDxMESSAGE
   872 ;;		_Update_StateMchn
   873 ;; This function is called by:
   874 ;;		Startup code after reset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text0
   879  0038A8                     __ptext0:
   880                           	opt stack 0
   881  0038A8                     _main:
   882                           	opt stack 20
   883                           
   884                           ;Main.c: 107: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
   885                           
   886                           ;incstack = 0
   887  0038A8  6892               	setf	3986,c	;volatile
   888  0038AA  6893               	setf	3987,c	;volatile
   889  0038AC  6894               	setf	3988,c	;volatile
   890  0038AE  6895               	setf	3989,c	;volatile
   891  0038B0  6896               	setf	3990,c	;volatile
   892                           
   893                           ;Main.c: 108: ADCON1=0x0F;
   894  0038B2  0E0F               	movlw	15
   895  0038B4  6EC1               	movwf	4033,c	;volatile
   896                           
   897                           ;Main.c: 109: CMCON=0x07;
   898  0038B6  0E07               	movlw	7
   899  0038B8  6EB4               	movwf	4020,c	;volatile
   900                           
   901                           ;Main.c: 110: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
   902  0038BA  9892               	bcf	3986,4,c	;volatile
   903  0038BC  9A95               	bcf	3989,5,c	;volatile
   904  0038BE  9C95               	bcf	3989,6,c	;volatile
   905                           
   906                           ;Main.c: 111: PORTAbits.RA4 = 0;
   907  0038C0  9880               	bcf	3968,4,c	;volatile
   908                           
   909                           ;Main.c: 112: PORTDbits.RD6 = 0;
   910  0038C2  9C83               	bcf	3971,6,c	;volatile
   911                           
   912                           ;Main.c: 113: PORTDbits.RD5 = 0;
   913  0038C4  9A83               	bcf	3971,5,c	;volatile
   914                           
   915                           ;Main.c: 115: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
   916  0038C6  9092               	bcf	3986,0,c	;volatile
   917  0038C8  9292               	bcf	3986,1,c	;volatile
   918  0038CA  9492               	bcf	3986,2,c	;volatile
   919  0038CC  9692               	bcf	3986,3,c	;volatile
   920                           
   921                           ;Main.c: 116: PORTAbits.RA3 = 0;
   922  0038CE  9680               	bcf	3968,3,c	;volatile
   923                           
   924                           ;Main.c: 117: PORTAbits.RA2 = 0;
   925  0038D0  9480               	bcf	3968,2,c	;volatile
   926                           
   927                           ;Main.c: 118: PORTAbits.RA1 = 0;
   928  0038D2  9280               	bcf	3968,1,c	;volatile
   929                           
   930                           ;Main.c: 119: PORTAbits.RA0 = 0;
   931  0038D4  9080               	bcf	3968,0,c	;volatile
   932                           
   933                           ;Main.c: 121: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
   934  0038D6  8495               	bsf	3989,2,c	;volatile
   935  0038D8  8695               	bsf	3989,3,c	;volatile
   936  0038DA  8095               	bsf	3989,0,c	;volatile
   937  0038DC  8295               	bsf	3989,1,c	;volatile
   938  0038DE  8294               	bsf	3988,1,c	;volatile
   939  0038E0  8895               	bsf	3989,4,c	;volatile
   940  0038E2  8096               	bsf	3990,0,c	;volatile
   941  0038E4  8296               	bsf	3990,1,c	;volatile
   942                           
   943                           ;Main.c: 122: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
   944  0038E6  8093               	bsf	3987,0,c	;volatile
   945  0038E8  8293               	bsf	3987,1,c	;volatile
   946  0038EA  8493               	bsf	3987,2,c	;volatile
   947  0038EC  8693               	bsf	3987,3,c	;volatile
   948  0038EE  8893               	bsf	3987,4,c	;volatile
   949  0038F0  8A93               	bsf	3987,5,c	;volatile
   950  0038F2  8E95               	bsf	3989,7,c	;volatile
   951                           
   952                           ;Main.c: 123: APIxInitialize();
   953  0038F4  ECD5  F00D         	call	_APIxInitialize	;wreg free
   954                           
   955                           ;Main.c: 124: Init_Pwm();
   956  0038F8  EC0E  F01E         	call	_Init_Pwm	;wreg free
   957                           
   958                           ;Main.c: 125: Init_Timers();
   959  0038FC  EC3C  F01E         	call	_Init_Timers	;wreg free
   960                           
   961                           ;Main.c: 126: EUSART1_Initialize();
   962  003900  EC1B  F01D         	call	_EUSART1_Initialize	;wreg free
   963  003904                     l8909:
   964                           
   965                           ;Main.c: 129: {
   966                           ;Main.c: 130: if (1 == Update_State_Machine)
   967  003904  0100               	movlb	0	; () banked
   968  003906  0584               	decf	_Update_State_Machine& (0+255),w,b
   969  003908  A4D8               	btfss	status,2,c
   970  00390A  D005               	goto	l8915
   971                           
   972                           ; BSR set to: 0
   973                           ;Main.c: 131: {
   974                           ;Main.c: 132: Update_State_Machine = 0;
   975  00390C  0E00               	movlw	0
   976  00390E  0100               	movlb	0	; () banked
   977  003910  6F84               	movwf	_Update_State_Machine& (0+255),b
   978                           
   979                           ; BSR set to: 0
   980                           ;Main.c: 133: Update_StateMchn();
   981  003912  EC23  F004         	call	_Update_StateMchn	;wreg free
   982  003916                     l8915:
   983                           
   984                           ;Main.c: 134: }
   985                           ;Main.c: 136: READxRECEIVEDxMESSAGE();
   986  003916  EC27  F013         	call	_READxRECEIVEDxMESSAGE	;wreg free
   987  00391A  D7F4               	goto	l8909
   988  00391C                     __end_of_main:
   989                           	opt stack 0
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           status	equ	0xFD8
   999                           
  1000 ;; *************** function _Update_StateMchn *****************
  1001 ;; Defined at:
  1002 ;;		line 41 in file "../State_Mchn.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;		None
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1016 ;;      Params:         0       0       0       0       0       0       0       0       0
  1017 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1018 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1019 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1020 ;;Total ram usage:        2 bytes
  1021 ;; Hardware stack levels used:    1
  1022 ;; Hardware stack levels required when called:   10
  1023 ;; This function calls:
  1024 ;;		_Debounce_Inputs
  1025 ;;		_Eeprom_Store
  1026 ;;		_GETxAPIxVAL
  1027 ;;		_Green_Led
  1028 ;;		_Junction
  1029 ;;		_Red_Led
  1030 ;;		_SETxAPIxVAL
  1031 ;;		_SETxAPIxVALxNoxRET
  1032 ;;		_Train_Path
  1033 ;; This function is called by:
  1034 ;;		_main
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text1
  1039  000846                     __ptext1:
  1040                           	opt stack 0
  1041  000846                     _Update_StateMchn:
  1042                           	opt stack 20
  1043                           
  1044                           ;State_Mchn.c: 43: if (GETxAPIxVAL(72)){
  1045                           
  1046                           ;incstack = 0
  1047  000846  0E48               	movlw	72
  1048  000848  EC20  F01E         	call	_GETxAPIxVAL
  1049  00084C  0100               	movlb	0	; () banked
  1050  00084E  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1051  000850  0100               	movlb	0	; () banked
  1052  000852  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1053  000854  B4D8               	btfsc	status,2,c
  1054  000856  D009               	goto	l166
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;State_Mchn.c: 44: SETxAPIxVAL(72, 0);
  1058  000858  0E00               	movlw	0
  1059  00085A  0100               	movlb	0	; () banked
  1060  00085C  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1061  00085E  0E00               	movlw	0
  1062  000860  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1063  000862  0E48               	movlw	72
  1064  000864  ECF1  F01C         	call	_SETxAPIxVAL
  1065  000868  00FF               	reset		;# 
  1066  00086A                     l166:
  1067                           
  1068                           ;State_Mchn.c: 46: }
  1069                           ;State_Mchn.c: 48: Debounce_Inputs();
  1070  00086A  EC1D  F00A         	call	_Debounce_Inputs	;wreg free
  1071                           
  1072                           ;State_Mchn.c: 50: switch (Switch_Main)
  1073  00086E  EF02  F00A         	goto	l8737
  1074  000872                     l8233:
  1075                           
  1076                           ;State_Mchn.c: 53: if (GETxAPIxVAL(74)){
  1077  000872  0E4A               	movlw	74
  1078  000874  EC20  F01E         	call	_GETxAPIxVAL
  1079  000878  0100               	movlb	0	; () banked
  1080  00087A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1081  00087C  0100               	movlb	0	; () banked
  1082  00087E  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1083  000880  B4D8               	btfsc	status,2,c
  1084  000882  D014               	goto	l8239
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;State_Mchn.c: 54: if(Junction(0, 1) == 0){
  1088  000884  0E01               	movlw	1
  1089  000886  0100               	movlb	0	; () banked
  1090  000888  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  1091  00088A  0E00               	movlw	0
  1092  00088C  ECC4  F015         	call	_Junction
  1093  000890  0900               	iorlw	0
  1094  000892  A4D8               	btfss	status,2,c
  1095  000894  EF0E  F00A         	goto	l8739
  1096                           
  1097                           ;State_Mchn.c: 55: SETxAPIxVAL(74, 0);
  1098  000898  0E00               	movlw	0
  1099  00089A  0100               	movlb	0	; () banked
  1100  00089C  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1101  00089E  0E00               	movlw	0
  1102  0008A0  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1103  0008A2  0E4A               	movlw	74
  1104  0008A4  ECF1  F01C         	call	_SETxAPIxVAL
  1105                           
  1106                           ;State_Mchn.c: 56: }
  1107                           ;State_Mchn.c: 57: }
  1108  0008A8  EF0E  F00A         	goto	l8739
  1109  0008AC                     l8239:
  1110                           
  1111                           ;State_Mchn.c: 58: else if (GETxAPIxVAL(73)){
  1112  0008AC  0E49               	movlw	73
  1113  0008AE  EC20  F01E         	call	_GETxAPIxVAL
  1114  0008B2  0100               	movlb	0	; () banked
  1115  0008B4  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1116  0008B6  0100               	movlb	0	; () banked
  1117  0008B8  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1118  0008BA  B4D8               	btfsc	status,2,c
  1119  0008BC  D014               	goto	l8245
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;State_Mchn.c: 59: if(Junction(0, 0) == 0){
  1123  0008BE  0E00               	movlw	0
  1124  0008C0  0100               	movlb	0	; () banked
  1125  0008C2  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  1126  0008C4  0E00               	movlw	0
  1127  0008C6  ECC4  F015         	call	_Junction
  1128  0008CA  0900               	iorlw	0
  1129  0008CC  A4D8               	btfss	status,2,c
  1130  0008CE  EF0E  F00A         	goto	l8739
  1131                           
  1132                           ;State_Mchn.c: 60: SETxAPIxVAL(73, 0);
  1133  0008D2  0E00               	movlw	0
  1134  0008D4  0100               	movlb	0	; () banked
  1135  0008D6  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1136  0008D8  0E00               	movlw	0
  1137  0008DA  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1138  0008DC  0E49               	movlw	73
  1139  0008DE  ECF1  F01C         	call	_SETxAPIxVAL
  1140                           
  1141                           ;State_Mchn.c: 61: }
  1142                           ;State_Mchn.c: 62: }
  1143  0008E2  EF0E  F00A         	goto	l8739
  1144  0008E6                     l8245:
  1145                           
  1146                           ;State_Mchn.c: 63: else if (GETxAPIxVAL(76)){
  1147  0008E6  0E4C               	movlw	76
  1148  0008E8  EC20  F01E         	call	_GETxAPIxVAL
  1149  0008EC  0100               	movlb	0	; () banked
  1150  0008EE  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1151  0008F0  0100               	movlb	0	; () banked
  1152  0008F2  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1153  0008F4  B4D8               	btfsc	status,2,c
  1154  0008F6  D014               	goto	l8251
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;State_Mchn.c: 64: if(Junction(1, 1) == 0){
  1158  0008F8  0E01               	movlw	1
  1159  0008FA  0100               	movlb	0	; () banked
  1160  0008FC  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  1161  0008FE  0E01               	movlw	1
  1162  000900  ECC4  F015         	call	_Junction
  1163  000904  0900               	iorlw	0
  1164  000906  A4D8               	btfss	status,2,c
  1165  000908  EF0E  F00A         	goto	l8739
  1166                           
  1167                           ;State_Mchn.c: 65: SETxAPIxVAL(76, 0);
  1168  00090C  0E00               	movlw	0
  1169  00090E  0100               	movlb	0	; () banked
  1170  000910  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1171  000912  0E00               	movlw	0
  1172  000914  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1173  000916  0E4C               	movlw	76
  1174  000918  ECF1  F01C         	call	_SETxAPIxVAL
  1175                           
  1176                           ;State_Mchn.c: 66: }
  1177                           ;State_Mchn.c: 67: }
  1178  00091C  EF0E  F00A         	goto	l8739
  1179  000920                     l8251:
  1180                           
  1181                           ;State_Mchn.c: 68: else if (GETxAPIxVAL(75)){
  1182  000920  0E4B               	movlw	75
  1183  000922  EC20  F01E         	call	_GETxAPIxVAL
  1184  000926  0100               	movlb	0	; () banked
  1185  000928  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1186  00092A  0100               	movlb	0	; () banked
  1187  00092C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1188  00092E  B4D8               	btfsc	status,2,c
  1189  000930  D014               	goto	l8257
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;State_Mchn.c: 69: if(Junction(1, 0) == 0){
  1193  000932  0E00               	movlw	0
  1194  000934  0100               	movlb	0	; () banked
  1195  000936  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  1196  000938  0E01               	movlw	1
  1197  00093A  ECC4  F015         	call	_Junction
  1198  00093E  0900               	iorlw	0
  1199  000940  A4D8               	btfss	status,2,c
  1200  000942  EF0E  F00A         	goto	l8739
  1201                           
  1202                           ;State_Mchn.c: 70: SETxAPIxVAL(75, 0);
  1203  000946  0E00               	movlw	0
  1204  000948  0100               	movlb	0	; () banked
  1205  00094A  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1206  00094C  0E00               	movlw	0
  1207  00094E  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1208  000950  0E4B               	movlw	75
  1209  000952  ECF1  F01C         	call	_SETxAPIxVAL
  1210                           
  1211                           ;State_Mchn.c: 71: }
  1212                           ;State_Mchn.c: 72: }
  1213  000956  EF0E  F00A         	goto	l8739
  1214  00095A                     l8257:
  1215                           
  1216                           ;State_Mchn.c: 73: else if (GETxAPIxVAL(77)){
  1217  00095A  0E4D               	movlw	77
  1218  00095C  EC20  F01E         	call	_GETxAPIxVAL
  1219  000960  0100               	movlb	0	; () banked
  1220  000962  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1221  000964  0100               	movlb	0	; () banked
  1222  000966  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1223  000968  B4D8               	btfsc	status,2,c
  1224  00096A  D012               	goto	l8261
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;State_Mchn.c: 74: SETxAPIxVAL(69, 1);
  1228  00096C  0E00               	movlw	0
  1229  00096E  0100               	movlb	0	; () banked
  1230  000970  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1231  000972  0E01               	movlw	1
  1232  000974  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1233  000976  0E45               	movlw	69
  1234  000978  ECF1  F01C         	call	_SETxAPIxVAL
  1235                           
  1236                           ;State_Mchn.c: 75: SETxAPIxVAL(77, 0);
  1237  00097C  0E00               	movlw	0
  1238  00097E  0100               	movlb	0	; () banked
  1239  000980  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1240  000982  0E00               	movlw	0
  1241  000984  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1242  000986  0E4D               	movlw	77
  1243  000988  ECF1  F01C         	call	_SETxAPIxVAL
  1244                           
  1245                           ;State_Mchn.c: 76: }
  1246  00098C  EF0E  F00A         	goto	l8739
  1247  000990                     l8261:
  1248                           
  1249                           ;State_Mchn.c: 77: else if (GETxAPIxVAL(78)){
  1250  000990  0E4E               	movlw	78
  1251  000992  EC20  F01E         	call	_GETxAPIxVAL
  1252  000996  0100               	movlb	0	; () banked
  1253  000998  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1254  00099A  0100               	movlb	0	; () banked
  1255  00099C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1256  00099E  B4D8               	btfsc	status,2,c
  1257  0009A0  D012               	goto	l8265
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;State_Mchn.c: 78: SETxAPIxVAL(69, 0);
  1261  0009A2  0E00               	movlw	0
  1262  0009A4  0100               	movlb	0	; () banked
  1263  0009A6  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1264  0009A8  0E00               	movlw	0
  1265  0009AA  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1266  0009AC  0E45               	movlw	69
  1267  0009AE  ECF1  F01C         	call	_SETxAPIxVAL
  1268                           
  1269                           ;State_Mchn.c: 79: SETxAPIxVAL(78, 0);
  1270  0009B2  0E00               	movlw	0
  1271  0009B4  0100               	movlb	0	; () banked
  1272  0009B6  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1273  0009B8  0E00               	movlw	0
  1274  0009BA  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1275  0009BC  0E4E               	movlw	78
  1276  0009BE  ECF1  F01C         	call	_SETxAPIxVAL
  1277                           
  1278                           ;State_Mchn.c: 80: }
  1279  0009C2  EF0E  F00A         	goto	l8739
  1280  0009C6                     l8265:
  1281                           
  1282                           ;State_Mchn.c: 81: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1283  0009C6  0E44               	movlw	68
  1284  0009C8  EC20  F01E         	call	_GETxAPIxVAL
  1285  0009CC  C08F  F0BA         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1286  0009D0  C090  F0BB         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1287  0009D4  0E4F               	movlw	79
  1288  0009D6  EC20  F01E         	call	_GETxAPIxVAL
  1289  0009DA  0100               	movlb	0	; () banked
  1290  0009DC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1291  0009DE  0100               	movlb	0	; () banked
  1292  0009E0  19BA               	xorwf	??_Update_StateMchn& (0+255),w,b
  1293  0009E2  E106               	bnz	u8120
  1294  0009E4  0100               	movlb	0	; () banked
  1295  0009E6  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1296  0009E8  0100               	movlb	0	; () banked
  1297  0009EA  19BB               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1298  0009EC  B4D8               	btfsc	status,2,c
  1299  0009EE  D3A9               	goto	l8581
  1300  0009F0                     u8120:
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;State_Mchn.c: 82: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1304  0009F0  0E4F               	movlw	79
  1305  0009F2  EC20  F01E         	call	_GETxAPIxVAL
  1306  0009F6  C08F  F091         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1307  0009FA  C090  F092         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1308  0009FE  0E44               	movlw	68
  1309  000A00  EC63  F01D         	call	_SETxAPIxVALxNoxRET
  1310                           
  1311                           ;State_Mchn.c: 83: SETxAPIxVALxNoxRET(GETxAPIxVAL(68), GETxAPIxVAL(81));
  1312  000A04  0E51               	movlw	81
  1313  000A06  EC20  F01E         	call	_GETxAPIxVAL
  1314  000A0A  C08F  F091         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1315  000A0E  C090  F092         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1316  000A12  0E44               	movlw	68
  1317  000A14  EC20  F01E         	call	_GETxAPIxVAL
  1318  000A18  0100               	movlb	0	; () banked
  1319  000A1A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1320  000A1C  EC63  F01D         	call	_SETxAPIxVALxNoxRET
  1321                           
  1322                           ;State_Mchn.c: 84: }
  1323  000A20  EF0E  F00A         	goto	l8739
  1324  000A24                     l8269:
  1325  000A24  0E00               	movlw	0
  1326  000A26  ECD8  F01B         	call	_Green_Led
  1327                           
  1328                           ;State_Mchn.c: 90: Red_Led(0);
  1329  000A2A  0E00               	movlw	0
  1330  000A2C  EC98  F01B         	call	_Red_Led
  1331                           
  1332                           ;State_Mchn.c: 91: Switch_Init = 1;
  1333  000A30  0E01               	movlw	1
  1334  000A32  D012               	goto	L1
  1335  000A34                     l8273:
  1336                           
  1337                           ; BSR set to: 0
  1338  000A34  0E23               	movlw	35
  1339  000A36  EC20  F01E         	call	_GETxAPIxVAL
  1340  000A3A  0100               	movlb	0	; () banked
  1341  000A3C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1342  000A3E  0100               	movlb	0	; () banked
  1343  000A40  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1344  000A42  B4D8               	btfsc	status,2,c
  1345  000A44  D00D               	goto	l8279
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;State_Mchn.c: 95: {
  1349                           ;State_Mchn.c: 96: SETxAPIxVAL(39, 1);
  1350  000A46  0E00               	movlw	0
  1351  000A48  0100               	movlb	0	; () banked
  1352  000A4A  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1353  000A4C  0E01               	movlw	1
  1354  000A4E  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1355  000A50  0E27               	movlw	39
  1356  000A52  ECF1  F01C         	call	_SETxAPIxVAL
  1357  000A56  D04B               	goto	l8301
  1358  000A58                     L1:
  1359  000A58  0100               	movlb	0	; () banked
  1360  000A5A  6F7E               	movwf	_Switch_Init& (0+255),b
  1361                           
  1362                           ;State_Mchn.c: 98: break;
  1363  000A5C  EF0E  F00A         	goto	l8739
  1364  000A60                     l8279:
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;State_Mchn.c: 99: }
  1368                           ;State_Mchn.c: 100: if(GETxAPIxVAL(36))
  1369  000A60  0E24               	movlw	36
  1370  000A62  EC20  F01E         	call	_GETxAPIxVAL
  1371  000A66  0100               	movlb	0	; () banked
  1372  000A68  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1373  000A6A  0100               	movlb	0	; () banked
  1374  000A6C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1375  000A6E  B4D8               	btfsc	status,2,c
  1376  000A70  D009               	goto	l8285
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;State_Mchn.c: 101: {
  1380                           ;State_Mchn.c: 102: SETxAPIxVAL(39, 2);
  1381  000A72  0E00               	movlw	0
  1382  000A74  0100               	movlb	0	; () banked
  1383  000A76  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1384  000A78  0E02               	movlw	2
  1385  000A7A  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1386  000A7C  0E27               	movlw	39
  1387  000A7E  ECF1  F01C         	call	_SETxAPIxVAL
  1388  000A82  D035               	goto	l8301
  1389  000A84                     l8285:
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;State_Mchn.c: 105: }
  1393                           ;State_Mchn.c: 106: if(GETxAPIxVAL(37))
  1394  000A84  0E25               	movlw	37
  1395  000A86  EC20  F01E         	call	_GETxAPIxVAL
  1396  000A8A  0100               	movlb	0	; () banked
  1397  000A8C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1398  000A8E  0100               	movlb	0	; () banked
  1399  000A90  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1400  000A92  B4D8               	btfsc	status,2,c
  1401  000A94  D009               	goto	l8291
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;State_Mchn.c: 107: {
  1405                           ;State_Mchn.c: 108: SETxAPIxVAL(39, 3);
  1406  000A96  0E00               	movlw	0
  1407  000A98  0100               	movlb	0	; () banked
  1408  000A9A  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1409  000A9C  0E03               	movlw	3
  1410  000A9E  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1411  000AA0  0E27               	movlw	39
  1412  000AA2  ECF1  F01C         	call	_SETxAPIxVAL
  1413  000AA6  D023               	goto	l8301
  1414  000AA8                     l8291:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;State_Mchn.c: 111: }
  1418                           ;State_Mchn.c: 112: if(GETxAPIxVAL(38))
  1419  000AA8  0E26               	movlw	38
  1420  000AAA  EC20  F01E         	call	_GETxAPIxVAL
  1421  000AAE  0100               	movlb	0	; () banked
  1422  000AB0  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1423  000AB2  0100               	movlb	0	; () banked
  1424  000AB4  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1425  000AB6  B4D8               	btfsc	status,2,c
  1426  000AB8  D009               	goto	l8297
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;State_Mchn.c: 113: {
  1430                           ;State_Mchn.c: 114: SETxAPIxVAL(39, 4);
  1431  000ABA  0E00               	movlw	0
  1432  000ABC  0100               	movlb	0	; () banked
  1433  000ABE  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1434  000AC0  0E04               	movlw	4
  1435  000AC2  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1436  000AC4  0E27               	movlw	39
  1437  000AC6  ECF1  F01C         	call	_SETxAPIxVAL
  1438  000ACA  D011               	goto	l8301
  1439  000ACC                     l8297:
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;State_Mchn.c: 117: }
  1443                           ;State_Mchn.c: 118: if(GETxAPIxVAL(34))
  1444  000ACC  0E22               	movlw	34
  1445  000ACE  EC20  F01E         	call	_GETxAPIxVAL
  1446  000AD2  0100               	movlb	0	; () banked
  1447  000AD4  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1448  000AD6  0100               	movlb	0	; () banked
  1449  000AD8  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1450  000ADA  B4D8               	btfsc	status,2,c
  1451  000ADC  D00A               	goto	l8303
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;State_Mchn.c: 119: {
  1455                           ;State_Mchn.c: 120: SETxAPIxVAL(39, 5);
  1456  000ADE  0E00               	movlw	0
  1457  000AE0  0100               	movlb	0	; () banked
  1458  000AE2  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1459  000AE4  0E05               	movlw	5
  1460  000AE6  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1461  000AE8  0E27               	movlw	39
  1462  000AEA  ECF1  F01C         	call	_SETxAPIxVAL
  1463  000AEE                     l8301:
  1464                           
  1465                           ;State_Mchn.c: 121: Switch_Init = 2;
  1466  000AEE  0E02               	movlw	2
  1467  000AF0  D7B3               	goto	L1
  1468  000AF2                     l8303:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;State_Mchn.c: 123: }
  1472                           ;State_Mchn.c: 124: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1473  000AF2  0E27               	movlw	39
  1474  000AF4  EC20  F01E         	call	_GETxAPIxVAL
  1475  000AF8  0100               	movlb	0	; () banked
  1476  000AFA  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1477  000AFC  0100               	movlb	0	; () banked
  1478  000AFE  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1479  000B00  B4D8               	btfsc	status,2,c
  1480  000B02  D009               	goto	l8309
  1481                           
  1482                           ; BSR set to: 0
  1483  000B04  0E28               	movlw	40
  1484  000B06  EC20  F01E         	call	_GETxAPIxVAL
  1485  000B0A  0100               	movlb	0	; () banked
  1486  000B0C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1487  000B0E  0100               	movlb	0	; () banked
  1488  000B10  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1489  000B12  A4D8               	btfss	status,2,c
  1490  000B14  D0C7               	goto	l8371
  1491  000B16                     l8309:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;State_Mchn.c: 127: }
  1495                           ;State_Mchn.c: 128: Switch_Init = 1;
  1496  000B16  0E01               	movlw	1
  1497  000B18  0100               	movlb	0	; () banked
  1498  000B1A  6F7E               	movwf	_Switch_Init& (0+255),b
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;State_Mchn.c: 129: Green_Led(2);
  1502  000B1C  0E02               	movlw	2
  1503  000B1E  ECD8  F01B         	call	_Green_Led
  1504                           
  1505                           ;State_Mchn.c: 130: break;
  1506  000B22  EF0E  F00A         	goto	l8739
  1507  000B26                     l8313:
  1508  000B26  0E23               	movlw	35
  1509  000B28  EC20  F01E         	call	_GETxAPIxVAL
  1510  000B2C  0100               	movlb	0	; () banked
  1511  000B2E  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1512  000B30  0100               	movlb	0	; () banked
  1513  000B32  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1514  000B34  A4D8               	btfss	status,2,c
  1515  000B36  D030               	goto	l8327
  1516                           
  1517                           ; BSR set to: 0
  1518  000B38  0E24               	movlw	36
  1519  000B3A  EC20  F01E         	call	_GETxAPIxVAL
  1520  000B3E  0100               	movlb	0	; () banked
  1521  000B40  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1522  000B42  0100               	movlb	0	; () banked
  1523  000B44  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1524  000B46  A4D8               	btfss	status,2,c
  1525  000B48  D027               	goto	l8327
  1526                           
  1527                           ; BSR set to: 0
  1528  000B4A  0E25               	movlw	37
  1529  000B4C  EC20  F01E         	call	_GETxAPIxVAL
  1530  000B50  0100               	movlb	0	; () banked
  1531  000B52  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1532  000B54  0100               	movlb	0	; () banked
  1533  000B56  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1534  000B58  A4D8               	btfss	status,2,c
  1535  000B5A  D01E               	goto	l8327
  1536                           
  1537                           ; BSR set to: 0
  1538  000B5C  0E26               	movlw	38
  1539  000B5E  EC20  F01E         	call	_GETxAPIxVAL
  1540  000B62  0100               	movlb	0	; () banked
  1541  000B64  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1542  000B66  0100               	movlb	0	; () banked
  1543  000B68  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1544  000B6A  A4D8               	btfss	status,2,c
  1545  000B6C  D015               	goto	l8327
  1546                           
  1547                           ; BSR set to: 0
  1548  000B6E  0E22               	movlw	34
  1549  000B70  EC20  F01E         	call	_GETxAPIxVAL
  1550  000B74  0100               	movlb	0	; () banked
  1551  000B76  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1552  000B78  0100               	movlb	0	; () banked
  1553  000B7A  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1554  000B7C  A4D8               	btfss	status,2,c
  1555  000B7E  D00C               	goto	l8327
  1556                           
  1557                           ; BSR set to: 0
  1558  000B80  0E20               	movlw	32
  1559  000B82  EC20  F01E         	call	_GETxAPIxVAL
  1560  000B86  0100               	movlb	0	; () banked
  1561  000B88  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1562  000B8A  0100               	movlb	0	; () banked
  1563  000B8C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1564  000B8E  A4D8               	btfss	status,2,c
  1565  000B90  D003               	goto	l8327
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;State_Mchn.c: 133: {
  1569                           ;State_Mchn.c: 134: Switch_Init = 3;
  1570  000B92  0E03               	movlw	3
  1571  000B94  0100               	movlb	0	; () banked
  1572  000B96  6F7E               	movwf	_Switch_Init& (0+255),b
  1573  000B98                     l8327:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;State_Mchn.c: 135: }
  1577                           ;State_Mchn.c: 136: Red_Led(0);
  1578  000B98  0E00               	movlw	0
  1579  000B9A  EC98  F01B         	call	_Red_Led
  1580                           
  1581                           ;State_Mchn.c: 137: Green_Led(2);
  1582  000B9E  0E02               	movlw	2
  1583  000BA0  ECD8  F01B         	call	_Green_Led
  1584                           
  1585                           ;State_Mchn.c: 138: break;
  1586  000BA4  EF0E  F00A         	goto	l8739
  1587  000BA8                     l8331:
  1588  000BA8  0E23               	movlw	35
  1589  000BAA  EC20  F01E         	call	_GETxAPIxVAL
  1590  000BAE  0100               	movlb	0	; () banked
  1591  000BB0  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1592  000BB2  0100               	movlb	0	; () banked
  1593  000BB4  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1594  000BB6  B4D8               	btfsc	status,2,c
  1595  000BB8  D009               	goto	l8337
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;State_Mchn.c: 141: {
  1599                           ;State_Mchn.c: 142: SETxAPIxVAL(40, 1);
  1600  000BBA  0E00               	movlw	0
  1601  000BBC  0100               	movlb	0	; () banked
  1602  000BBE  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1603  000BC0  0E01               	movlw	1
  1604  000BC2  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1605  000BC4  0E28               	movlw	40
  1606  000BC6  ECF1  F01C         	call	_SETxAPIxVAL
  1607  000BCA  D06C               	goto	l8371
  1608  000BCC                     l8337:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;State_Mchn.c: 145: }
  1612                           ;State_Mchn.c: 146: if(GETxAPIxVAL(36))
  1613  000BCC  0E24               	movlw	36
  1614  000BCE  EC20  F01E         	call	_GETxAPIxVAL
  1615  000BD2  0100               	movlb	0	; () banked
  1616  000BD4  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1617  000BD6  0100               	movlb	0	; () banked
  1618  000BD8  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1619  000BDA  B4D8               	btfsc	status,2,c
  1620  000BDC  D009               	goto	l8343
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;State_Mchn.c: 147: {
  1624                           ;State_Mchn.c: 148: SETxAPIxVAL(40, 2);
  1625  000BDE  0E00               	movlw	0
  1626  000BE0  0100               	movlb	0	; () banked
  1627  000BE2  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1628  000BE4  0E02               	movlw	2
  1629  000BE6  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1630  000BE8  0E28               	movlw	40
  1631  000BEA  ECF1  F01C         	call	_SETxAPIxVAL
  1632  000BEE  D05A               	goto	l8371
  1633  000BF0                     l8343:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;State_Mchn.c: 151: }
  1637                           ;State_Mchn.c: 152: if(GETxAPIxVAL(37))
  1638  000BF0  0E25               	movlw	37
  1639  000BF2  EC20  F01E         	call	_GETxAPIxVAL
  1640  000BF6  0100               	movlb	0	; () banked
  1641  000BF8  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1642  000BFA  0100               	movlb	0	; () banked
  1643  000BFC  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1644  000BFE  B4D8               	btfsc	status,2,c
  1645  000C00  D009               	goto	l8349
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;State_Mchn.c: 153: {
  1649                           ;State_Mchn.c: 154: SETxAPIxVAL(40, 3);
  1650  000C02  0E00               	movlw	0
  1651  000C04  0100               	movlb	0	; () banked
  1652  000C06  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1653  000C08  0E03               	movlw	3
  1654  000C0A  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1655  000C0C  0E28               	movlw	40
  1656  000C0E  ECF1  F01C         	call	_SETxAPIxVAL
  1657  000C12  D048               	goto	l8371
  1658  000C14                     l8349:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;State_Mchn.c: 157: }
  1662                           ;State_Mchn.c: 158: if(GETxAPIxVAL(38))
  1663  000C14  0E26               	movlw	38
  1664  000C16  EC20  F01E         	call	_GETxAPIxVAL
  1665  000C1A  0100               	movlb	0	; () banked
  1666  000C1C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1667  000C1E  0100               	movlb	0	; () banked
  1668  000C20  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1669  000C22  B4D8               	btfsc	status,2,c
  1670  000C24  D009               	goto	l8355
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;State_Mchn.c: 159: {
  1674                           ;State_Mchn.c: 160: SETxAPIxVAL(40, 4);
  1675  000C26  0E00               	movlw	0
  1676  000C28  0100               	movlb	0	; () banked
  1677  000C2A  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1678  000C2C  0E04               	movlw	4
  1679  000C2E  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1680  000C30  0E28               	movlw	40
  1681  000C32  ECF1  F01C         	call	_SETxAPIxVAL
  1682  000C36  D036               	goto	l8371
  1683  000C38                     l8355:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;State_Mchn.c: 163: }
  1687                           ;State_Mchn.c: 164: if(GETxAPIxVAL(34))
  1688  000C38  0E22               	movlw	34
  1689  000C3A  EC20  F01E         	call	_GETxAPIxVAL
  1690  000C3E  0100               	movlb	0	; () banked
  1691  000C40  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1692  000C42  0100               	movlb	0	; () banked
  1693  000C44  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1694  000C46  B4D8               	btfsc	status,2,c
  1695  000C48  D009               	goto	l8361
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;State_Mchn.c: 165: {
  1699                           ;State_Mchn.c: 166: SETxAPIxVAL(40, 5);
  1700  000C4A  0E00               	movlw	0
  1701  000C4C  0100               	movlb	0	; () banked
  1702  000C4E  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1703  000C50  0E05               	movlw	5
  1704  000C52  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1705  000C54  0E28               	movlw	40
  1706  000C56  ECF1  F01C         	call	_SETxAPIxVAL
  1707  000C5A  D024               	goto	l8371
  1708  000C5C                     l8361:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;State_Mchn.c: 169: }
  1712                           ;State_Mchn.c: 170: if(GETxAPIxVAL(32))
  1713  000C5C  0E20               	movlw	32
  1714  000C5E  EC20  F01E         	call	_GETxAPIxVAL
  1715  000C62  0100               	movlb	0	; () banked
  1716  000C64  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1717  000C66  0100               	movlb	0	; () banked
  1718  000C68  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1719  000C6A  B4D8               	btfsc	status,2,c
  1720  000C6C  D009               	goto	l8367
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;State_Mchn.c: 171: {
  1724                           ;State_Mchn.c: 172: SETxAPIxVAL(40, 9);
  1725  000C6E  0E00               	movlw	0
  1726  000C70  0100               	movlb	0	; () banked
  1727  000C72  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1728  000C74  0E09               	movlw	9
  1729  000C76  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1730  000C78  0E28               	movlw	40
  1731  000C7A  ECF1  F01C         	call	_SETxAPIxVAL
  1732  000C7E  D012               	goto	l8371
  1733  000C80                     l8367:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;State_Mchn.c: 175: }
  1737                           ;State_Mchn.c: 176: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1738  000C80  0E27               	movlw	39
  1739  000C82  EC20  F01E         	call	_GETxAPIxVAL
  1740  000C86  0100               	movlb	0	; () banked
  1741  000C88  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1742  000C8A  0100               	movlb	0	; () banked
  1743  000C8C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1744  000C8E  B4D8               	btfsc	status,2,c
  1745  000C90  D00B               	goto	l8373
  1746                           
  1747                           ; BSR set to: 0
  1748  000C92  0E28               	movlw	40
  1749  000C94  EC20  F01E         	call	_GETxAPIxVAL
  1750  000C98  0100               	movlb	0	; () banked
  1751  000C9A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1752  000C9C  0100               	movlb	0	; () banked
  1753  000C9E  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1754  000CA0  B4D8               	btfsc	status,2,c
  1755  000CA2  D002               	goto	l8373
  1756  000CA4                     l8371:
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;State_Mchn.c: 177: Switch_Init = 4;
  1760  000CA4  0E04               	movlw	4
  1761  000CA6  D6D8               	goto	L1
  1762  000CA8                     l8373:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;State_Mchn.c: 179: }
  1766                           ;State_Mchn.c: 180: Green_Led(2);
  1767  000CA8  0E02               	movlw	2
  1768  000CAA  ECD8  F01B         	call	_Green_Led
  1769                           
  1770                           ;State_Mchn.c: 181: Switch_Init = 3;
  1771  000CAE  0E03               	movlw	3
  1772  000CB0  D6D3               	goto	L1
  1773  000CB2                     l8377:
  1774                           
  1775                           ; BSR set to: 0
  1776  000CB2  0E23               	movlw	35
  1777  000CB4  EC20  F01E         	call	_GETxAPIxVAL
  1778  000CB8  0100               	movlb	0	; () banked
  1779  000CBA  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1780  000CBC  0100               	movlb	0	; () banked
  1781  000CBE  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1782  000CC0  A4D8               	btfss	status,2,c
  1783  000CC2  D070               	goto	l8401
  1784                           
  1785                           ; BSR set to: 0
  1786  000CC4  0E24               	movlw	36
  1787  000CC6  EC20  F01E         	call	_GETxAPIxVAL
  1788  000CCA  0100               	movlb	0	; () banked
  1789  000CCC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1790  000CCE  0100               	movlb	0	; () banked
  1791  000CD0  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1792  000CD2  A4D8               	btfss	status,2,c
  1793  000CD4  D067               	goto	l8401
  1794                           
  1795                           ; BSR set to: 0
  1796  000CD6  0E25               	movlw	37
  1797  000CD8  EC20  F01E         	call	_GETxAPIxVAL
  1798  000CDC  0100               	movlb	0	; () banked
  1799  000CDE  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1800  000CE0  0100               	movlb	0	; () banked
  1801  000CE2  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1802  000CE4  A4D8               	btfss	status,2,c
  1803  000CE6  D05E               	goto	l8401
  1804                           
  1805                           ; BSR set to: 0
  1806  000CE8  0E26               	movlw	38
  1807  000CEA  EC20  F01E         	call	_GETxAPIxVAL
  1808  000CEE  0100               	movlb	0	; () banked
  1809  000CF0  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1810  000CF2  0100               	movlb	0	; () banked
  1811  000CF4  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1812  000CF6  A4D8               	btfss	status,2,c
  1813  000CF8  D055               	goto	l8401
  1814                           
  1815                           ; BSR set to: 0
  1816  000CFA  0E22               	movlw	34
  1817  000CFC  EC20  F01E         	call	_GETxAPIxVAL
  1818  000D00  0100               	movlb	0	; () banked
  1819  000D02  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1820  000D04  0100               	movlb	0	; () banked
  1821  000D06  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1822  000D08  A4D8               	btfss	status,2,c
  1823  000D0A  D04C               	goto	l8401
  1824                           
  1825                           ; BSR set to: 0
  1826  000D0C  0E20               	movlw	32
  1827  000D0E  EC20  F01E         	call	_GETxAPIxVAL
  1828  000D12  0100               	movlb	0	; () banked
  1829  000D14  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1830  000D16  0100               	movlb	0	; () banked
  1831  000D18  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1832  000D1A  A4D8               	btfss	status,2,c
  1833  000D1C  D043               	goto	l8401
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;State_Mchn.c: 185: {
  1837                           ;State_Mchn.c: 186: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  1838  000D1E  0E27               	movlw	39
  1839  000D20  EC20  F01E         	call	_GETxAPIxVAL
  1840  000D24  C08F  F0BA         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1841  000D28  C090  F0BB         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1842  000D2C  0E28               	movlw	40
  1843  000D2E  EC20  F01E         	call	_GETxAPIxVAL
  1844  000D32  0100               	movlb	0	; () banked
  1845  000D34  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1846  000D36  0100               	movlb	0	; () banked
  1847  000D38  19BA               	xorwf	??_Update_StateMchn& (0+255),w,b
  1848  000D3A  E11C               	bnz	l8397
  1849  000D3C  0100               	movlb	0	; () banked
  1850  000D3E  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1851  000D40  0100               	movlb	0	; () banked
  1852  000D42  19BB               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1853  000D44  A4D8               	btfss	status,2,c
  1854  000D46  D016               	goto	l8397
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;State_Mchn.c: 187: {
  1858                           ;State_Mchn.c: 188: SETxAPIxVAL(40, 0);
  1859  000D48  0E00               	movlw	0
  1860  000D4A  0100               	movlb	0	; () banked
  1861  000D4C  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1862  000D4E  0E00               	movlw	0
  1863  000D50  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1864  000D52  0E28               	movlw	40
  1865  000D54  ECF1  F01C         	call	_SETxAPIxVAL
  1866                           
  1867                           ;State_Mchn.c: 189: SETxAPIxVAL(39, 0);
  1868  000D58  0E00               	movlw	0
  1869  000D5A  0100               	movlb	0	; () banked
  1870  000D5C  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1871  000D5E  0E00               	movlw	0
  1872  000D60  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  1873  000D62  0E27               	movlw	39
  1874  000D64  ECF1  F01C         	call	_SETxAPIxVAL
  1875                           
  1876                           ;State_Mchn.c: 190: Red_Led(1);
  1877  000D68  0E01               	movlw	1
  1878  000D6A  EC98  F01B         	call	_Red_Led
  1879                           
  1880                           ;State_Mchn.c: 191: Switch_Init = 1;
  1881  000D6E  0E01               	movlw	1
  1882  000D70  0100               	movlb	0	; () banked
  1883  000D72  6F7E               	movwf	_Switch_Init& (0+255),b
  1884  000D74                     l8397:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;State_Mchn.c: 193: }
  1888                           ;State_Mchn.c: 194: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  1889  000D74  0E27               	movlw	39
  1890  000D76  EC20  F01E         	call	_GETxAPIxVAL
  1891  000D7A  C08F  F0BA         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1892  000D7E  C090  F0BB         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1893  000D82  0E28               	movlw	40
  1894  000D84  EC20  F01E         	call	_GETxAPIxVAL
  1895  000D88  0100               	movlb	0	; () banked
  1896  000D8A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1897  000D8C  0100               	movlb	0	; () banked
  1898  000D8E  19BA               	xorwf	??_Update_StateMchn& (0+255),w,b
  1899  000D90  E106               	bnz	u8410
  1900  000D92  0100               	movlb	0	; () banked
  1901  000D94  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1902  000D96  0100               	movlb	0	; () banked
  1903  000D98  19BB               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1904  000D9A  B4D8               	btfsc	status,2,c
  1905  000D9C  D003               	goto	l8401
  1906  000D9E                     u8410:
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;State_Mchn.c: 195: {
  1910                           ;State_Mchn.c: 196: Switch_Init = 5;
  1911  000D9E  0E05               	movlw	5
  1912  000DA0  0100               	movlb	0	; () banked
  1913  000DA2  6F7E               	movwf	_Switch_Init& (0+255),b
  1914  000DA4                     l8401:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;State_Mchn.c: 197: }
  1918                           ;State_Mchn.c: 198: }
  1919                           ;State_Mchn.c: 199: Green_Led(2);
  1920  000DA4  0E02               	movlw	2
  1921  000DA6  ECD8  F01B         	call	_Green_Led
  1922                           
  1923                           ;State_Mchn.c: 200: break;
  1924  000DAA  D338               	goto	l8739
  1925  000DAC                     l8403:
  1926  000DAC  0E28               	movlw	40
  1927  000DAE  EC20  F01E         	call	_GETxAPIxVAL
  1928  000DB2  0E09               	movlw	9
  1929  000DB4  0100               	movlb	0	; () banked
  1930  000DB6  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1931  000DB8  0100               	movlb	0	; () banked
  1932  000DBA  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1933  000DBC  B4D8               	btfsc	status,2,c
  1934  000DBE  D003               	goto	l8407
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;State_Mchn.c: 203: {
  1938                           ;State_Mchn.c: 204: Switch_Init = 6;
  1939  000DC0  0E06               	movlw	6
  1940  000DC2  0100               	movlb	0	; () banked
  1941  000DC4  6F7E               	movwf	_Switch_Init& (0+255),b
  1942  000DC6                     l8407:
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;State_Mchn.c: 205: }
  1946                           ;State_Mchn.c: 206: if(GETxAPIxVAL(40) == 9)
  1947  000DC6  0E28               	movlw	40
  1948  000DC8  EC20  F01E         	call	_GETxAPIxVAL
  1949  000DCC  0E09               	movlw	9
  1950  000DCE  0100               	movlb	0	; () banked
  1951  000DD0  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1952  000DD2  0100               	movlb	0	; () banked
  1953  000DD4  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1954  000DD6  A4D8               	btfss	status,2,c
  1955  000DD8  D321               	goto	l8739
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;State_Mchn.c: 207: {
  1959                           ;State_Mchn.c: 208: Switch_Init = 9;
  1960  000DDA  0E09               	movlw	9
  1961  000DDC  D63D               	goto	L1
  1962  000DDE                     l8411:
  1963                           
  1964                           ; BSR set to: 0
  1965  000DDE  0E08               	movlw	8
  1966  000DE0  D63B               	goto	L1
  1967  000DE2                     l8413:
  1968                           
  1969                           ; BSR set to: 0
  1970  000DE2  0E20               	movlw	32
  1971  000DE4  EC20  F01E         	call	_GETxAPIxVAL
  1972  000DE8  0100               	movlb	0	; () banked
  1973  000DEA  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1974  000DEC  0100               	movlb	0	; () banked
  1975  000DEE  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1976  000DF0  A4D8               	btfss	status,2,c
  1977  000DF2  D009               	goto	l8417
  1978                           
  1979                           ; BSR set to: 0
  1980  000DF4  0E46               	movlw	70
  1981  000DF6  EC20  F01E         	call	_GETxAPIxVAL
  1982  000DFA  0100               	movlb	0	; () banked
  1983  000DFC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  1984  000DFE  0100               	movlb	0	; () banked
  1985  000E00  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1986  000E02  B4D8               	btfsc	status,2,c
  1987  000E04  D011               	goto	l8421
  1988  000E06                     l8417:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;State_Mchn.c: 216: {
  1992                           ;State_Mchn.c: 217: Switch_Main = 2;
  1993  000E06  0E02               	movlw	2
  1994  000E08  0100               	movlb	0	; () banked
  1995  000E0A  6FC6               	movwf	_Switch_Main& (0+255),b
  1996                           
  1997                           ;State_Mchn.c: 218: Switch_Init = 0;
  1998  000E0C  0E00               	movlw	0
  1999  000E0E  0100               	movlb	0	; () banked
  2000  000E10  6F7E               	movwf	_Switch_Init& (0+255),b
  2001                           
  2002                           ;State_Mchn.c: 219: Stop_Program = 0;
  2003  000E12  0E00               	movlw	0
  2004  000E14  0100               	movlb	0	; () banked
  2005  000E16  6F7D               	movwf	_Stop_Program& (0+255),b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;State_Mchn.c: 220: SETxAPIxVAL(70, 0);
  2009  000E18  0E00               	movlw	0
  2010  000E1A  0100               	movlb	0	; () banked
  2011  000E1C  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  2012  000E1E  0E00               	movlw	0
  2013  000E20  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  2014  000E22  0E46               	movlw	70
  2015  000E24  ECF1  F01C         	call	_SETxAPIxVAL
  2016  000E28                     l8421:
  2017                           
  2018                           ;State_Mchn.c: 221: }
  2019                           ;State_Mchn.c: 222: Green_Led(3);
  2020  000E28  0E03               	movlw	3
  2021  000E2A  ECD8  F01B         	call	_Green_Led
  2022                           
  2023                           ;State_Mchn.c: 223: Red_Led(0);
  2024  000E2E  0E00               	movlw	0
  2025  000E30  EC98  F01B         	call	_Red_Led
  2026                           
  2027                           ;State_Mchn.c: 224: break;
  2028  000E34  D2F3               	goto	l8739
  2029  000E36                     l8425:
  2030  000E36  0E27               	movlw	39
  2031  000E38  EC20  F01E         	call	_GETxAPIxVAL
  2032  000E3C  0E05               	movlw	5
  2033  000E3E  0100               	movlb	0	; () banked
  2034  000E40  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2035  000E42  0100               	movlb	0	; () banked
  2036  000E44  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2037  000E46  B4D8               	btfsc	status,2,c
  2038  000E48  D015               	goto	l8443
  2039  000E4A  D02B               	goto	l8445
  2040  000E4C                     l8429:
  2041                           
  2042                           ; BSR set to: 0
  2043  000E4C  0E01               	movlw	1
  2044  000E4E  D005               	goto	L4
  2045  000E50                     l8431:
  2046                           
  2047                           ; BSR set to: 0
  2048  000E50  0E05               	movlw	5
  2049  000E52  D003               	goto	L4
  2050  000E54                     l8433:
  2051                           
  2052                           ; BSR set to: 0
  2053  000E54  0E02               	movlw	2
  2054  000E56  D001               	goto	L4
  2055  000E58                     l8435:
  2056                           
  2057                           ; BSR set to: 0
  2058  000E58  0E03               	movlw	3
  2059  000E5A                     L4:
  2060  000E5A  0100               	movlb	0	; () banked
  2061  000E5C  6F81               	movwf	_Switch_Program& (0+255),b
  2062                           
  2063                           ;State_Mchn.c: 240: Switch_Init = 7;
  2064  000E5E  0E07               	movlw	7
  2065  000E60  0100               	movlb	0	; () banked
  2066  000E62  6F7E               	movwf	_Switch_Init& (0+255),b
  2067                           
  2068                           ;State_Mchn.c: 241: break;
  2069  000E64  D01E               	goto	l8445
  2070  000E66                     l8437:
  2071                           
  2072                           ; BSR set to: 0
  2073  000E66  0E08               	movlw	8
  2074  000E68  0100               	movlb	0	; () banked
  2075  000E6A  6F7E               	movwf	_Switch_Init& (0+255),b
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;State_Mchn.c: 243: Red_Led(1);
  2079  000E6C  0E01               	movlw	1
  2080  000E6E  EC98  F01B         	call	_Red_Led
  2081                           
  2082                           ;State_Mchn.c: 245: }
  2083                           
  2084                           ;State_Mchn.c: 244: break;
  2085  000E72  D017               	goto	l8445
  2086  000E74                     l8443:
  2087  000E74  0E28               	movlw	40
  2088  000E76  EC20  F01E         	call	_GETxAPIxVAL
  2089                           
  2090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2091                           ; Switch size 1, requested type "space"
  2092                           ; Number of cases is 1, Range of values is 0 to 0
  2093                           ; switch strategies available:
  2094                           ; Name         Instructions Cycles
  2095                           ; simple_byte            4     3 (average)
  2096                           ;	Chosen strategy is simple_byte
  2097  000E7A  0100               	movlb	0	; () banked
  2098  000E7C  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2099  000E7E  0A00               	xorlw	0	; case 0
  2100  000E80  A4D8               	btfss	status,2,c
  2101  000E82  D7F1               	goto	l8437
  2102                           
  2103                           ; BSR set to: 0
  2104                           ; Switch size 1, requested type "space"
  2105                           ; Number of cases is 4, Range of values is 1 to 4
  2106                           ; switch strategies available:
  2107                           ; Name         Instructions Cycles
  2108                           ; simple_byte           13     7 (average)
  2109                           ;	Chosen strategy is simple_byte
  2110  000E84  0100               	movlb	0	; () banked
  2111  000E86  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2112  000E88  0A01               	xorlw	1	; case 1
  2113  000E8A  B4D8               	btfsc	status,2,c
  2114  000E8C  D7DF               	goto	l8429
  2115  000E8E  0A03               	xorlw	3	; case 2
  2116  000E90  B4D8               	btfsc	status,2,c
  2117  000E92  D7DE               	goto	l8431
  2118  000E94  0A01               	xorlw	1	; case 3
  2119  000E96  B4D8               	btfsc	status,2,c
  2120  000E98  D7DD               	goto	l8433
  2121  000E9A  0A07               	xorlw	7	; case 4
  2122  000E9C  B4D8               	btfsc	status,2,c
  2123  000E9E  D7DC               	goto	l8435
  2124  000EA0  D7E2               	goto	l8437
  2125  000EA2                     l8445:
  2126                           
  2127                           ;State_Mchn.c: 246: }
  2128                           ;State_Mchn.c: 247: if(GETxAPIxVAL(40) == 5)
  2129  000EA2  0E28               	movlw	40
  2130  000EA4  EC20  F01E         	call	_GETxAPIxVAL
  2131  000EA8  0E05               	movlw	5
  2132  000EAA  0100               	movlb	0	; () banked
  2133  000EAC  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2134  000EAE  0100               	movlb	0	; () banked
  2135  000EB0  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2136  000EB2  B4D8               	btfsc	status,2,c
  2137  000EB4  D015               	goto	l8463
  2138  000EB6  D02B               	goto	l8465
  2139  000EB8                     l8449:
  2140                           
  2141                           ; BSR set to: 0
  2142  000EB8  0E01               	movlw	1
  2143  000EBA  D005               	goto	L7
  2144  000EBC                     l8451:
  2145                           
  2146                           ; BSR set to: 0
  2147  000EBC  0E05               	movlw	5
  2148  000EBE  D003               	goto	L7
  2149  000EC0                     l8453:
  2150                           
  2151                           ; BSR set to: 0
  2152  000EC0  0E02               	movlw	2
  2153  000EC2  D001               	goto	L7
  2154  000EC4                     l8455:
  2155                           
  2156                           ; BSR set to: 0
  2157  000EC4  0E03               	movlw	3
  2158  000EC6                     L7:
  2159  000EC6  0100               	movlb	0	; () banked
  2160  000EC8  6F81               	movwf	_Switch_Program& (0+255),b
  2161                           
  2162                           ;State_Mchn.c: 261: Switch_Init = 7;
  2163  000ECA  0E07               	movlw	7
  2164  000ECC  0100               	movlb	0	; () banked
  2165  000ECE  6F7E               	movwf	_Switch_Init& (0+255),b
  2166                           
  2167                           ;State_Mchn.c: 262: break;
  2168  000ED0  D01E               	goto	l8465
  2169  000ED2                     l8457:
  2170                           
  2171                           ; BSR set to: 0
  2172  000ED2  0E08               	movlw	8
  2173  000ED4  0100               	movlb	0	; () banked
  2174  000ED6  6F7E               	movwf	_Switch_Init& (0+255),b
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;State_Mchn.c: 264: Red_Led(1);
  2178  000ED8  0E01               	movlw	1
  2179  000EDA  EC98  F01B         	call	_Red_Led
  2180                           
  2181                           ;State_Mchn.c: 266: }
  2182                           
  2183                           ;State_Mchn.c: 265: break;
  2184  000EDE  D017               	goto	l8465
  2185  000EE0                     l8463:
  2186  000EE0  0E27               	movlw	39
  2187  000EE2  EC20  F01E         	call	_GETxAPIxVAL
  2188                           
  2189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2190                           ; Switch size 1, requested type "space"
  2191                           ; Number of cases is 1, Range of values is 0 to 0
  2192                           ; switch strategies available:
  2193                           ; Name         Instructions Cycles
  2194                           ; simple_byte            4     3 (average)
  2195                           ;	Chosen strategy is simple_byte
  2196  000EE6  0100               	movlb	0	; () banked
  2197  000EE8  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2198  000EEA  0A00               	xorlw	0	; case 0
  2199  000EEC  A4D8               	btfss	status,2,c
  2200  000EEE  D7F1               	goto	l8457
  2201                           
  2202                           ; BSR set to: 0
  2203                           ; Switch size 1, requested type "space"
  2204                           ; Number of cases is 4, Range of values is 1 to 4
  2205                           ; switch strategies available:
  2206                           ; Name         Instructions Cycles
  2207                           ; simple_byte           13     7 (average)
  2208                           ;	Chosen strategy is simple_byte
  2209  000EF0  0100               	movlb	0	; () banked
  2210  000EF2  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2211  000EF4  0A01               	xorlw	1	; case 1
  2212  000EF6  B4D8               	btfsc	status,2,c
  2213  000EF8  D7DF               	goto	l8449
  2214  000EFA  0A03               	xorlw	3	; case 2
  2215  000EFC  B4D8               	btfsc	status,2,c
  2216  000EFE  D7DE               	goto	l8451
  2217  000F00  0A01               	xorlw	1	; case 3
  2218  000F02  B4D8               	btfsc	status,2,c
  2219  000F04  D7DD               	goto	l8453
  2220  000F06  0A07               	xorlw	7	; case 4
  2221  000F08  B4D8               	btfsc	status,2,c
  2222  000F0A  D7DC               	goto	l8455
  2223  000F0C  D7E2               	goto	l8457
  2224  000F0E                     l8465:
  2225                           
  2226                           ;State_Mchn.c: 267: }
  2227                           ;State_Mchn.c: 268: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2228  000F0E  0E27               	movlw	39
  2229  000F10  EC20  F01E         	call	_GETxAPIxVAL
  2230  000F14  0E05               	movlw	5
  2231  000F16  0100               	movlb	0	; () banked
  2232  000F18  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2233  000F1A  0100               	movlb	0	; () banked
  2234  000F1C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2235  000F1E  B4D8               	btfsc	status,2,c
  2236  000F20  D27D               	goto	l8739
  2237                           
  2238                           ; BSR set to: 0
  2239  000F22  0E28               	movlw	40
  2240  000F24  EC20  F01E         	call	_GETxAPIxVAL
  2241  000F28  0E05               	movlw	5
  2242  000F2A  0100               	movlb	0	; () banked
  2243  000F2C  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2244  000F2E  0100               	movlb	0	; () banked
  2245  000F30  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2246  000F32  A4D8               	btfss	status,2,c
  2247  000F34  D091               	goto	l8541
  2248  000F36  D272               	goto	l8739
  2249  000F38                     l8473:
  2250                           
  2251                           ; BSR set to: 0
  2252  000F38  0E01               	movlw	1
  2253  000F3A  D063               	goto	L18
  2254  000F3C                     l8475:
  2255                           
  2256                           ; BSR set to: 0
  2257  000F3C  0E02               	movlw	2
  2258  000F3E  D061               	goto	L18
  2259  000F40                     l8477:
  2260                           
  2261                           ; BSR set to: 0
  2262  000F40  0E04               	movlw	4
  2263  000F42  D05F               	goto	L18
  2264  000F44                     l8479:
  2265                           
  2266                           ; BSR set to: 0
  2267  000F44  0E08               	movlw	8
  2268  000F46  0100               	movlb	0	; () banked
  2269  000F48  6F7E               	movwf	_Switch_Init& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;State_Mchn.c: 286: Red_Led(1);
  2273  000F4A  0E01               	movlw	1
  2274  000F4C  EC98  F01B         	call	_Red_Led
  2275                           
  2276                           ;State_Mchn.c: 288: }
  2277                           
  2278                           ;State_Mchn.c: 287: break;
  2279  000F50  D265               	goto	l8739
  2280  000F52                     l8485:
  2281  000F52  0E28               	movlw	40
  2282  000F54  EC20  F01E         	call	_GETxAPIxVAL
  2283                           
  2284                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2285                           ; Switch size 1, requested type "space"
  2286                           ; Number of cases is 1, Range of values is 0 to 0
  2287                           ; switch strategies available:
  2288                           ; Name         Instructions Cycles
  2289                           ; simple_byte            4     3 (average)
  2290                           ;	Chosen strategy is simple_byte
  2291  000F58  0100               	movlb	0	; () banked
  2292  000F5A  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2293  000F5C  0A00               	xorlw	0	; case 0
  2294  000F5E  A4D8               	btfss	status,2,c
  2295  000F60  D7F1               	goto	l8479
  2296                           
  2297                           ; BSR set to: 0
  2298                           ; Switch size 1, requested type "space"
  2299                           ; Number of cases is 4, Range of values is 1 to 4
  2300                           ; switch strategies available:
  2301                           ; Name         Instructions Cycles
  2302                           ; simple_byte           13     7 (average)
  2303                           ;	Chosen strategy is simple_byte
  2304  000F62  0100               	movlb	0	; () banked
  2305  000F64  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2306  000F66  0A01               	xorlw	1	; case 1
  2307  000F68  B4D8               	btfsc	status,2,c
  2308  000F6A  D04F               	goto	l8525
  2309  000F6C  0A03               	xorlw	3	; case 2
  2310  000F6E  B4D8               	btfsc	status,2,c
  2311  000F70  D7E3               	goto	l8473
  2312  000F72  0A01               	xorlw	1	; case 3
  2313  000F74  B4D8               	btfsc	status,2,c
  2314  000F76  D7E2               	goto	l8475
  2315  000F78  0A07               	xorlw	7	; case 4
  2316  000F7A  B4D8               	btfsc	status,2,c
  2317  000F7C  D7E1               	goto	l8477
  2318  000F7E  D7E2               	goto	l8479
  2319  000F80                     l8491:
  2320                           
  2321                           ; BSR set to: 0
  2322  000F80  0E00               	movlw	0
  2323  000F82  D03F               	goto	L18
  2324  000F84                     l8495:
  2325                           
  2326                           ; BSR set to: 0
  2327  000F84  0E08               	movlw	8
  2328  000F86  0100               	movlb	0	; () banked
  2329  000F88  6F7E               	movwf	_Switch_Init& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;State_Mchn.c: 304: Red_Led(1);
  2333  000F8A  0E01               	movlw	1
  2334  000F8C  EC98  F01B         	call	_Red_Led
  2335                           
  2336                           ;State_Mchn.c: 306: }
  2337                           
  2338                           ;State_Mchn.c: 305: break;
  2339  000F90  D245               	goto	l8739
  2340  000F92                     l8501:
  2341  000F92  0E28               	movlw	40
  2342  000F94  EC20  F01E         	call	_GETxAPIxVAL
  2343                           
  2344                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2345                           ; Switch size 1, requested type "space"
  2346                           ; Number of cases is 1, Range of values is 0 to 0
  2347                           ; switch strategies available:
  2348                           ; Name         Instructions Cycles
  2349                           ; simple_byte            4     3 (average)
  2350                           ;	Chosen strategy is simple_byte
  2351  000F98  0100               	movlb	0	; () banked
  2352  000F9A  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2353  000F9C  0A00               	xorlw	0	; case 0
  2354  000F9E  A4D8               	btfss	status,2,c
  2355  000FA0  D7F1               	goto	l8495
  2356                           
  2357                           ; BSR set to: 0
  2358                           ; Switch size 1, requested type "space"
  2359                           ; Number of cases is 4, Range of values is 1 to 4
  2360                           ; switch strategies available:
  2361                           ; Name         Instructions Cycles
  2362                           ; simple_byte           13     7 (average)
  2363                           ;	Chosen strategy is simple_byte
  2364  000FA2  0100               	movlb	0	; () banked
  2365  000FA4  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2366  000FA6  0A01               	xorlw	1	; case 1
  2367  000FA8  B4D8               	btfsc	status,2,c
  2368  000FAA  D7C6               	goto	l8473
  2369  000FAC  0A03               	xorlw	3	; case 2
  2370  000FAE  B4D8               	btfsc	status,2,c
  2371  000FB0  D02C               	goto	l8525
  2372  000FB2  0A01               	xorlw	1	; case 3
  2373  000FB4  B4D8               	btfsc	status,2,c
  2374  000FB6  D7E4               	goto	l8491
  2375  000FB8  0A07               	xorlw	7	; case 4
  2376  000FBA  B4D8               	btfsc	status,2,c
  2377  000FBC  D01F               	goto	l8521
  2378  000FBE  D7E2               	goto	l8495
  2379  000FC0                     l8511:
  2380                           
  2381                           ; BSR set to: 0
  2382  000FC0  0E08               	movlw	8
  2383  000FC2  0100               	movlb	0	; () banked
  2384  000FC4  6F7E               	movwf	_Switch_Init& (0+255),b
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;State_Mchn.c: 322: Red_Led(1);
  2388  000FC6  0E01               	movlw	1
  2389  000FC8  EC98  F01B         	call	_Red_Led
  2390                           
  2391                           ;State_Mchn.c: 324: }
  2392                           
  2393                           ;State_Mchn.c: 323: break;
  2394  000FCC  D227               	goto	l8739
  2395  000FCE                     l8517:
  2396  000FCE  0E28               	movlw	40
  2397  000FD0  EC20  F01E         	call	_GETxAPIxVAL
  2398                           
  2399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2400                           ; Switch size 1, requested type "space"
  2401                           ; Number of cases is 1, Range of values is 0 to 0
  2402                           ; switch strategies available:
  2403                           ; Name         Instructions Cycles
  2404                           ; simple_byte            4     3 (average)
  2405                           ;	Chosen strategy is simple_byte
  2406  000FD4  0100               	movlb	0	; () banked
  2407  000FD6  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2408  000FD8  0A00               	xorlw	0	; case 0
  2409  000FDA  A4D8               	btfss	status,2,c
  2410  000FDC  D7F1               	goto	l8511
  2411                           
  2412                           ; BSR set to: 0
  2413                           ; Switch size 1, requested type "space"
  2414                           ; Number of cases is 4, Range of values is 1 to 4
  2415                           ; switch strategies available:
  2416                           ; Name         Instructions Cycles
  2417                           ; simple_byte           13     7 (average)
  2418                           ;	Chosen strategy is simple_byte
  2419  000FDE  0100               	movlb	0	; () banked
  2420  000FE0  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2421  000FE2  0A01               	xorlw	1	; case 1
  2422  000FE4  B4D8               	btfsc	status,2,c
  2423  000FE6  D7AA               	goto	l8475
  2424  000FE8  0A03               	xorlw	3	; case 2
  2425  000FEA  B4D8               	btfsc	status,2,c
  2426  000FEC  D7C9               	goto	l8491
  2427  000FEE  0A01               	xorlw	1	; case 3
  2428  000FF0  B4D8               	btfsc	status,2,c
  2429  000FF2  D00B               	goto	l8525
  2430  000FF4  0A07               	xorlw	7	; case 4
  2431  000FF6  B4D8               	btfsc	status,2,c
  2432  000FF8  D003               	goto	l8523
  2433  000FFA  D7E2               	goto	l8511
  2434  000FFC                     l8521:
  2435                           
  2436                           ; BSR set to: 0
  2437  000FFC  0E06               	movlw	6
  2438  000FFE  D001               	goto	L18
  2439  001000                     l8523:
  2440                           
  2441                           ; BSR set to: 0
  2442  001000  0E03               	movlw	3
  2443  001002                     L18:
  2444  001002  0100               	movlb	0	; () banked
  2445  001004  6F81               	movwf	_Switch_Program& (0+255),b
  2446                           
  2447                           ;State_Mchn.c: 335: Switch_Init = 7;
  2448  001006  0E07               	movlw	7
  2449  001008  D527               	goto	L1
  2450  00100A                     l8525:
  2451                           
  2452                           ; BSR set to: 0
  2453  00100A  0E00               	movlw	0
  2454  00100C  D525               	goto	L1
  2455  00100E                     l8527:
  2456                           
  2457                           ; BSR set to: 0
  2458  00100E  0E08               	movlw	8
  2459  001010  0100               	movlb	0	; () banked
  2460  001012  6F7E               	movwf	_Switch_Init& (0+255),b
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;State_Mchn.c: 340: Red_Led(1);
  2464  001014  0E01               	movlw	1
  2465  001016  EC98  F01B         	call	_Red_Led
  2466                           
  2467                           ;State_Mchn.c: 342: }
  2468                           
  2469                           ;State_Mchn.c: 341: break;
  2470  00101A  D200               	goto	l8739
  2471  00101C                     l8533:
  2472  00101C  0E28               	movlw	40
  2473  00101E  EC20  F01E         	call	_GETxAPIxVAL
  2474                           
  2475                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2476                           ; Switch size 1, requested type "space"
  2477                           ; Number of cases is 1, Range of values is 0 to 0
  2478                           ; switch strategies available:
  2479                           ; Name         Instructions Cycles
  2480                           ; simple_byte            4     3 (average)
  2481                           ;	Chosen strategy is simple_byte
  2482  001022  0100               	movlb	0	; () banked
  2483  001024  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2484  001026  0A00               	xorlw	0	; case 0
  2485  001028  A4D8               	btfss	status,2,c
  2486  00102A  D7F1               	goto	l8527
  2487                           
  2488                           ; BSR set to: 0
  2489                           ; Switch size 1, requested type "space"
  2490                           ; Number of cases is 4, Range of values is 1 to 4
  2491                           ; switch strategies available:
  2492                           ; Name         Instructions Cycles
  2493                           ; simple_byte           13     7 (average)
  2494                           ;	Chosen strategy is simple_byte
  2495  00102C  0100               	movlb	0	; () banked
  2496  00102E  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2497  001030  0A01               	xorlw	1	; case 1
  2498  001032  B4D8               	btfsc	status,2,c
  2499  001034  D785               	goto	l8477
  2500  001036  0A03               	xorlw	3	; case 2
  2501  001038  B4D8               	btfsc	status,2,c
  2502  00103A  D7E0               	goto	l8521
  2503  00103C  0A01               	xorlw	1	; case 3
  2504  00103E  B4D8               	btfsc	status,2,c
  2505  001040  D7DF               	goto	l8523
  2506  001042  0A07               	xorlw	7	; case 4
  2507  001044  B4D8               	btfsc	status,2,c
  2508  001046  D7E1               	goto	l8525
  2509  001048  D7E2               	goto	l8527
  2510  00104A                     l8535:
  2511                           
  2512                           ; BSR set to: 0
  2513  00104A  0E08               	movlw	8
  2514  00104C  0100               	movlb	0	; () banked
  2515  00104E  6F7E               	movwf	_Switch_Init& (0+255),b
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;State_Mchn.c: 345: Red_Led(1);
  2519  001050  0E01               	movlw	1
  2520  001052  EC98  F01B         	call	_Red_Led
  2521                           
  2522                           ;State_Mchn.c: 347: }
  2523                           
  2524                           ;State_Mchn.c: 346: break;
  2525  001056  D1E2               	goto	l8739
  2526  001058                     l8541:
  2527  001058  0E27               	movlw	39
  2528  00105A  EC20  F01E         	call	_GETxAPIxVAL
  2529                           
  2530                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2531                           ; Switch size 1, requested type "space"
  2532                           ; Number of cases is 1, Range of values is 0 to 0
  2533                           ; switch strategies available:
  2534                           ; Name         Instructions Cycles
  2535                           ; simple_byte            4     3 (average)
  2536                           ;	Chosen strategy is simple_byte
  2537  00105E  0100               	movlb	0	; () banked
  2538  001060  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2539  001062  0A00               	xorlw	0	; case 0
  2540  001064  A4D8               	btfss	status,2,c
  2541  001066  D7F1               	goto	l8535
  2542                           
  2543                           ; BSR set to: 0
  2544                           ; Switch size 1, requested type "space"
  2545                           ; Number of cases is 4, Range of values is 1 to 4
  2546                           ; switch strategies available:
  2547                           ; Name         Instructions Cycles
  2548                           ; simple_byte           13     7 (average)
  2549                           ;	Chosen strategy is simple_byte
  2550  001068  0100               	movlb	0	; () banked
  2551  00106A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2552  00106C  0A01               	xorlw	1	; case 1
  2553  00106E  B4D8               	btfsc	status,2,c
  2554  001070  D770               	goto	l8485
  2555  001072  0A03               	xorlw	3	; case 2
  2556  001074  B4D8               	btfsc	status,2,c
  2557  001076  D78D               	goto	l8501
  2558  001078  0A01               	xorlw	1	; case 3
  2559  00107A  B4D8               	btfsc	status,2,c
  2560  00107C  D7A8               	goto	l8517
  2561  00107E  0A07               	xorlw	7	; case 4
  2562  001080  B4D8               	btfsc	status,2,c
  2563  001082  D7CC               	goto	l8533
  2564  001084  D7E2               	goto	l8535
  2565  001086                     l8543:
  2566                           
  2567                           ; BSR set to: 0
  2568  001086  0E0B               	movlw	11
  2569  001088  D4E7               	goto	L1
  2570  00108A                     l8545:
  2571                           
  2572                           ; BSR set to: 0
  2573  00108A  0E20               	movlw	32
  2574  00108C  EC20  F01E         	call	_GETxAPIxVAL
  2575  001090  0100               	movlb	0	; () banked
  2576  001092  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2577  001094  0100               	movlb	0	; () banked
  2578  001096  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2579  001098  A4D8               	btfss	status,2,c
  2580  00109A  D009               	goto	l8549
  2581                           
  2582                           ; BSR set to: 0
  2583  00109C  0E46               	movlw	70
  2584  00109E  EC20  F01E         	call	_GETxAPIxVAL
  2585  0010A2  0100               	movlb	0	; () banked
  2586  0010A4  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2587  0010A6  0100               	movlb	0	; () banked
  2588  0010A8  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2589  0010AA  B4D8               	btfsc	status,2,c
  2590  0010AC  D009               	goto	l8551
  2591  0010AE                     l8549:
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;State_Mchn.c: 355: {
  2595                           ;State_Mchn.c: 356: Switch_Main = 3;
  2596  0010AE  0E03               	movlw	3
  2597  0010B0  0100               	movlb	0	; () banked
  2598  0010B2  6FC6               	movwf	_Switch_Main& (0+255),b
  2599                           
  2600                           ;State_Mchn.c: 357: Switch_Init = 0;
  2601  0010B4  0E00               	movlw	0
  2602  0010B6  0100               	movlb	0	; () banked
  2603  0010B8  6F7E               	movwf	_Switch_Init& (0+255),b
  2604                           
  2605                           ;State_Mchn.c: 358: Stop_Program = 0;
  2606  0010BA  0E00               	movlw	0
  2607  0010BC  0100               	movlb	0	; () banked
  2608  0010BE  6F7D               	movwf	_Stop_Program& (0+255),b
  2609  0010C0                     l8551:
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;State_Mchn.c: 359: }
  2613                           ;State_Mchn.c: 360: Green_Led(3);
  2614  0010C0  0E03               	movlw	3
  2615  0010C2  ECD8  F01B         	call	_Green_Led
  2616                           
  2617                           ;State_Mchn.c: 361: Red_Led(0);
  2618  0010C6  0E00               	movlw	0
  2619  0010C8  EC98  F01B         	call	_Red_Led
  2620                           
  2621                           ;State_Mchn.c: 362: break;
  2622  0010CC  D1A7               	goto	l8739
  2623  0010CE                     l8555:
  2624  0010CE  0E27               	movlw	39
  2625  0010D0  EC20  F01E         	call	_GETxAPIxVAL
  2626  0010D4  0E05               	movlw	5
  2627  0010D6  0100               	movlb	0	; () banked
  2628  0010D8  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2629  0010DA  0100               	movlb	0	; () banked
  2630  0010DC  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2631  0010DE  A4D8               	btfss	status,2,c
  2632  0010E0  D012               	goto	l8573
  2633  0010E2                     l8557:
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;State_Mchn.c: 365: {
  2637                           ;State_Mchn.c: 366: Switch_Program = 0;
  2638  0010E2  0E00               	movlw	0
  2639  0010E4  D005               	goto	L22
  2640  0010E6                     l8559:
  2641                           
  2642                           ; BSR set to: 0
  2643  0010E6  0E01               	movlw	1
  2644  0010E8  D003               	goto	L22
  2645  0010EA                     l8561:
  2646                           
  2647                           ; BSR set to: 0
  2648  0010EA  0E03               	movlw	3
  2649  0010EC  D001               	goto	L22
  2650  0010EE                     l8565:
  2651                           
  2652                           ; BSR set to: 0
  2653  0010EE  0E02               	movlw	2
  2654  0010F0                     L22:
  2655  0010F0  0100               	movlb	0	; () banked
  2656  0010F2  6F81               	movwf	_Switch_Program& (0+255),b
  2657  0010F4  0E0A               	movlw	10
  2658  0010F6  D4B0               	goto	L1
  2659  0010F8                     l8567:
  2660                           
  2661                           ; BSR set to: 0
  2662  0010F8  0E0B               	movlw	11
  2663  0010FA  0100               	movlb	0	; () banked
  2664  0010FC  6F7E               	movwf	_Switch_Init& (0+255),b
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;State_Mchn.c: 376: Red_Led(1);
  2668  0010FE  0E01               	movlw	1
  2669  001100  EC98  F01B         	call	_Red_Led
  2670                           
  2671                           ;State_Mchn.c: 378: }
  2672                           
  2673                           ;State_Mchn.c: 377: break;
  2674  001104  D18B               	goto	l8739
  2675  001106                     l8573:
  2676  001106  0E27               	movlw	39
  2677  001108  EC20  F01E         	call	_GETxAPIxVAL
  2678                           
  2679                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2680                           ; Switch size 1, requested type "space"
  2681                           ; Number of cases is 1, Range of values is 0 to 0
  2682                           ; switch strategies available:
  2683                           ; Name         Instructions Cycles
  2684                           ; simple_byte            4     3 (average)
  2685                           ;	Chosen strategy is simple_byte
  2686  00110C  0100               	movlb	0	; () banked
  2687  00110E  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2688  001110  0A00               	xorlw	0	; case 0
  2689  001112  A4D8               	btfss	status,2,c
  2690  001114  D7F1               	goto	l8567
  2691                           
  2692                           ; BSR set to: 0
  2693                           ; Switch size 1, requested type "space"
  2694                           ; Number of cases is 4, Range of values is 1 to 4
  2695                           ; switch strategies available:
  2696                           ; Name         Instructions Cycles
  2697                           ; simple_byte           13     7 (average)
  2698                           ;	Chosen strategy is simple_byte
  2699  001116  0100               	movlb	0	; () banked
  2700  001118  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  2701  00111A  0A01               	xorlw	1	; case 1
  2702  00111C  B4D8               	btfsc	status,2,c
  2703  00111E  D7E3               	goto	l8559
  2704  001120  0A03               	xorlw	3	; case 2
  2705  001122  B4D8               	btfsc	status,2,c
  2706  001124  D7E2               	goto	l8561
  2707  001126  0A01               	xorlw	1	; case 3
  2708  001128  B4D8               	btfsc	status,2,c
  2709  00112A  D7DB               	goto	l8557
  2710  00112C  0A07               	xorlw	7	; case 4
  2711  00112E  B4D8               	btfsc	status,2,c
  2712  001130  D7DE               	goto	l8565
  2713  001132  D7E2               	goto	l8567
  2714  001134                     l8575:
  2715                           
  2716                           ; BSR set to: 0
  2717  001134  0E00               	movlw	0
  2718  001136  0100               	movlb	0	; () banked
  2719  001138  6F7E               	movwf	_Switch_Init& (0+255),b
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;State_Mchn.c: 382: Red_Led(1);
  2723  00113A  0E01               	movlw	1
  2724  00113C  EC98  F01B         	call	_Red_Led
  2725                           
  2726                           ;State_Mchn.c: 384: }
  2727                           
  2728                           ;State_Mchn.c: 383: break;
  2729  001140  D16D               	goto	l8739
  2730  001142                     l8581:
  2731  001142  0100               	movlb	0	; () banked
  2732  001144  517E               	movf	_Switch_Init& (0+255),w,b
  2733                           
  2734                           ; Switch size 1, requested type "space"
  2735                           ; Number of cases is 12, Range of values is 0 to 11
  2736                           ; switch strategies available:
  2737                           ; Name         Instructions Cycles
  2738                           ; simple_byte           37    19 (average)
  2739                           ;	Chosen strategy is simple_byte
  2740  001146  0A00               	xorlw	0	; case 0
  2741  001148  B4D8               	btfsc	status,2,c
  2742  00114A  D46C               	goto	l8269
  2743  00114C  0A01               	xorlw	1	; case 1
  2744  00114E  B4D8               	btfsc	status,2,c
  2745  001150  D471               	goto	l8273
  2746  001152  0A03               	xorlw	3	; case 2
  2747  001154  B4D8               	btfsc	status,2,c
  2748  001156  D4E7               	goto	l8313
  2749  001158  0A01               	xorlw	1	; case 3
  2750  00115A  B4D8               	btfsc	status,2,c
  2751  00115C  D525               	goto	l8331
  2752  00115E  0A07               	xorlw	7	; case 4
  2753  001160  B4D8               	btfsc	status,2,c
  2754  001162  D5A7               	goto	l8377
  2755  001164  0A01               	xorlw	1	; case 5
  2756  001166  B4D8               	btfsc	status,2,c
  2757  001168  D621               	goto	l8403
  2758  00116A  0A03               	xorlw	3	; case 6
  2759  00116C  B4D8               	btfsc	status,2,c
  2760  00116E  D637               	goto	l8411
  2761  001170  0A01               	xorlw	1	; case 7
  2762  001172  B4D8               	btfsc	status,2,c
  2763  001174  D636               	goto	l8413
  2764  001176  0A0F               	xorlw	15	; case 8
  2765  001178  B4D8               	btfsc	status,2,c
  2766  00117A  D65D               	goto	l8425
  2767  00117C  0A01               	xorlw	1	; case 9
  2768  00117E  B4D8               	btfsc	status,2,c
  2769  001180  D782               	goto	l8543
  2770  001182  0A03               	xorlw	3	; case 10
  2771  001184  B4D8               	btfsc	status,2,c
  2772  001186  D781               	goto	l8545
  2773  001188  0A01               	xorlw	1	; case 11
  2774  00118A  B4D8               	btfsc	status,2,c
  2775  00118C  D7A0               	goto	l8555
  2776  00118E  D7D2               	goto	l8575
  2777  001190                     l8583:
  2778                           
  2779                           ; BSR set to: 0
  2780  001190  0E01               	movlw	1
  2781  001192  0100               	movlb	0	; () banked
  2782  001194  6FB8               	movwf	Train_Path@To& (0+255),b
  2783  001196  0E03               	movlw	3
  2784  001198  EC8D  F010         	call	_Train_Path
  2785  00119C  0900               	iorlw	0
  2786  00119E  A4D8               	btfss	status,2,c
  2787  0011A0  D090               	goto	l8667
  2788                           
  2789                           ;State_Mchn.c: 391: {
  2790                           ;State_Mchn.c: 392: Switch_Program = 1;
  2791  0011A2  0E01               	movlw	1
  2792  0011A4  0100               	movlb	0	; () banked
  2793  0011A6  6F81               	movwf	_Switch_Program& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;State_Mchn.c: 393: Eeprom_Store();
  2797  0011A8  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2798  0011AC                     l8589:
  2799                           
  2800                           ;State_Mchn.c: 394: if(Stop_Program == 1)
  2801  0011AC  0100               	movlb	0	; () banked
  2802  0011AE  057D               	decf	_Stop_Program& (0+255),w,b
  2803  0011B0  A4D8               	btfss	status,2,c
  2804  0011B2  D087               	goto	l8667
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;State_Mchn.c: 395: {
  2808                           ;State_Mchn.c: 396: Switch_Main = 1;
  2809  0011B4  0E01               	movlw	1
  2810  0011B6  0100               	movlb	0	; () banked
  2811  0011B8  6FC6               	movwf	_Switch_Main& (0+255),b
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;State_Mchn.c: 398: }
  2815                           ;State_Mchn.c: 399: }
  2816                           ;State_Mchn.c: 400: break;
  2817                           
  2818                           ; BSR set to: 0
  2819  0011BA  D083               	goto	l8667
  2820  0011BC                     l8593:
  2821                           
  2822                           ; BSR set to: 0
  2823  0011BC  0E03               	movlw	3
  2824  0011BE  0100               	movlb	0	; () banked
  2825  0011C0  6FB8               	movwf	Train_Path@To& (0+255),b
  2826  0011C2  0E02               	movlw	2
  2827  0011C4  EC8D  F010         	call	_Train_Path
  2828  0011C8  0900               	iorlw	0
  2829  0011CA  A4D8               	btfss	status,2,c
  2830  0011CC  D07A               	goto	l8667
  2831                           
  2832                           ;State_Mchn.c: 403: {
  2833                           ;State_Mchn.c: 404: Switch_Program = 2;
  2834  0011CE  0E02               	movlw	2
  2835  0011D0  0100               	movlb	0	; () banked
  2836  0011D2  6F81               	movwf	_Switch_Program& (0+255),b
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;State_Mchn.c: 405: Eeprom_Store();
  2840  0011D4  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2841  0011D8  D7E9               	goto	l8589
  2842  0011DA                     l8603:
  2843                           
  2844                           ; BSR set to: 0
  2845  0011DA  0E04               	movlw	4
  2846  0011DC  0100               	movlb	0	; () banked
  2847  0011DE  6FB8               	movwf	Train_Path@To& (0+255),b
  2848  0011E0  0E01               	movlw	1
  2849  0011E2  EC8D  F010         	call	_Train_Path
  2850  0011E6  0900               	iorlw	0
  2851  0011E8  A4D8               	btfss	status,2,c
  2852  0011EA  D06B               	goto	l8667
  2853                           
  2854                           ;State_Mchn.c: 415: {
  2855                           ;State_Mchn.c: 416: Switch_Program = 3;
  2856  0011EC  0E03               	movlw	3
  2857  0011EE  0100               	movlb	0	; () banked
  2858  0011F0  6F81               	movwf	_Switch_Program& (0+255),b
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;State_Mchn.c: 417: Eeprom_Store();
  2862  0011F2  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2863  0011F6  D7DA               	goto	l8589
  2864  0011F8                     l8613:
  2865                           
  2866                           ; BSR set to: 0
  2867  0011F8  0E01               	movlw	1
  2868  0011FA  0100               	movlb	0	; () banked
  2869  0011FC  6FB8               	movwf	Train_Path@To& (0+255),b
  2870  0011FE  0E03               	movlw	3
  2871  001200  EC8D  F010         	call	_Train_Path
  2872  001204  0900               	iorlw	0
  2873  001206  A4D8               	btfss	status,2,c
  2874  001208  D05C               	goto	l8667
  2875                           
  2876                           ;State_Mchn.c: 427: {
  2877                           ;State_Mchn.c: 428: Switch_Program = 4;
  2878  00120A  0E04               	movlw	4
  2879  00120C  0100               	movlb	0	; () banked
  2880  00120E  6F81               	movwf	_Switch_Program& (0+255),b
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;State_Mchn.c: 429: Eeprom_Store();
  2884  001210  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2885  001214  D7CB               	goto	l8589
  2886  001216                     l8623:
  2887                           
  2888                           ; BSR set to: 0
  2889  001216  0E02               	movlw	2
  2890  001218  0100               	movlb	0	; () banked
  2891  00121A  6FB8               	movwf	Train_Path@To& (0+255),b
  2892  00121C  0E04               	movlw	4
  2893  00121E  EC8D  F010         	call	_Train_Path
  2894  001222  0900               	iorlw	0
  2895  001224  A4D8               	btfss	status,2,c
  2896  001226  D04D               	goto	l8667
  2897                           
  2898                           ;State_Mchn.c: 439: {
  2899                           ;State_Mchn.c: 440: Switch_Program = 5;
  2900  001228  0E05               	movlw	5
  2901  00122A  0100               	movlb	0	; () banked
  2902  00122C  6F81               	movwf	_Switch_Program& (0+255),b
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;State_Mchn.c: 441: Eeprom_Store();
  2906  00122E  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2907  001232  D7BC               	goto	l8589
  2908  001234                     l8633:
  2909                           
  2910                           ; BSR set to: 0
  2911  001234  0E04               	movlw	4
  2912  001236  0100               	movlb	0	; () banked
  2913  001238  6FB8               	movwf	Train_Path@To& (0+255),b
  2914  00123A  0E01               	movlw	1
  2915  00123C  EC8D  F010         	call	_Train_Path
  2916  001240  0900               	iorlw	0
  2917  001242  A4D8               	btfss	status,2,c
  2918  001244  D03E               	goto	l8667
  2919                           
  2920                           ;State_Mchn.c: 451: {
  2921                           ;State_Mchn.c: 452: Switch_Program = 6;
  2922  001246  0E06               	movlw	6
  2923  001248  0100               	movlb	0	; () banked
  2924  00124A  6F81               	movwf	_Switch_Program& (0+255),b
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;State_Mchn.c: 453: Eeprom_Store();
  2928  00124C  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2929  001250  D7AD               	goto	l8589
  2930  001252                     l8643:
  2931                           
  2932                           ; BSR set to: 0
  2933  001252  0E03               	movlw	3
  2934  001254  0100               	movlb	0	; () banked
  2935  001256  6FB8               	movwf	Train_Path@To& (0+255),b
  2936  001258  0E02               	movlw	2
  2937  00125A  EC8D  F010         	call	_Train_Path
  2938  00125E  0900               	iorlw	0
  2939  001260  A4D8               	btfss	status,2,c
  2940  001262  D02F               	goto	l8667
  2941                           
  2942                           ;State_Mchn.c: 463: {
  2943                           ;State_Mchn.c: 464: Switch_Program = 7;
  2944  001264  0E07               	movlw	7
  2945  001266  0100               	movlb	0	; () banked
  2946  001268  6F81               	movwf	_Switch_Program& (0+255),b
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;State_Mchn.c: 465: Eeprom_Store();
  2950  00126A  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2951  00126E  D79E               	goto	l8589
  2952  001270                     l8653:
  2953                           
  2954                           ; BSR set to: 0
  2955  001270  0E02               	movlw	2
  2956  001272  0100               	movlb	0	; () banked
  2957  001274  6FB8               	movwf	Train_Path@To& (0+255),b
  2958  001276  0E04               	movlw	4
  2959  001278  EC8D  F010         	call	_Train_Path
  2960  00127C  0900               	iorlw	0
  2961  00127E  A4D8               	btfss	status,2,c
  2962  001280  D020               	goto	l8667
  2963                           
  2964                           ;State_Mchn.c: 475: {
  2965                           ;State_Mchn.c: 476: Switch_Program = 0;
  2966  001282  0E00               	movlw	0
  2967  001284  0100               	movlb	0	; () banked
  2968  001286  6F81               	movwf	_Switch_Program& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;State_Mchn.c: 477: Eeprom_Store();
  2972  001288  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  2973  00128C  D78F               	goto	l8589
  2974  00128E                     l8665:
  2975                           
  2976                           ; BSR set to: 0
  2977  00128E  0100               	movlb	0	; () banked
  2978  001290  5181               	movf	_Switch_Program& (0+255),w,b
  2979                           
  2980                           ; Switch size 1, requested type "space"
  2981                           ; Number of cases is 8, Range of values is 0 to 7
  2982                           ; switch strategies available:
  2983                           ; Name         Instructions Cycles
  2984                           ; simple_byte           25    13 (average)
  2985                           ;	Chosen strategy is simple_byte
  2986  001292  0A00               	xorlw	0	; case 0
  2987  001294  B4D8               	btfsc	status,2,c
  2988  001296  D77C               	goto	l8583
  2989  001298  0A01               	xorlw	1	; case 1
  2990  00129A  B4D8               	btfsc	status,2,c
  2991  00129C  D78F               	goto	l8593
  2992  00129E  0A03               	xorlw	3	; case 2
  2993  0012A0  B4D8               	btfsc	status,2,c
  2994  0012A2  D79B               	goto	l8603
  2995  0012A4  0A01               	xorlw	1	; case 3
  2996  0012A6  B4D8               	btfsc	status,2,c
  2997  0012A8  D7A7               	goto	l8613
  2998  0012AA  0A07               	xorlw	7	; case 4
  2999  0012AC  B4D8               	btfsc	status,2,c
  3000  0012AE  D7B3               	goto	l8623
  3001  0012B0  0A01               	xorlw	1	; case 5
  3002  0012B2  B4D8               	btfsc	status,2,c
  3003  0012B4  D7BF               	goto	l8633
  3004  0012B6  0A03               	xorlw	3	; case 6
  3005  0012B8  B4D8               	btfsc	status,2,c
  3006  0012BA  D7CB               	goto	l8643
  3007  0012BC  0A01               	xorlw	1	; case 7
  3008  0012BE  B4D8               	btfsc	status,2,c
  3009  0012C0  D7D7               	goto	l8653
  3010  0012C2                     l8667:
  3011                           
  3012                           ;State_Mchn.c: 673: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3013  0012C2  0E21               	movlw	33
  3014  0012C4  EC20  F01E         	call	_GETxAPIxVAL
  3015  0012C8  0100               	movlb	0	; () banked
  3016  0012CA  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  3017  0012CC  0100               	movlb	0	; () banked
  3018  0012CE  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3019  0012D0  A4D8               	btfss	status,2,c
  3020  0012D2  D009               	goto	l8671
  3021                           
  3022                           ; BSR set to: 0
  3023  0012D4  0E47               	movlw	71
  3024  0012D6  EC20  F01E         	call	_GETxAPIxVAL
  3025  0012DA  0100               	movlb	0	; () banked
  3026  0012DC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  3027  0012DE  0100               	movlb	0	; () banked
  3028  0012E0  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3029  0012E2  B4D8               	btfsc	status,2,c
  3030  0012E4  D00B               	goto	l8675
  3031  0012E6                     l8671:
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;State_Mchn.c: 674: {
  3035                           ;State_Mchn.c: 675: Stop_Program = 1;
  3036  0012E6  0E01               	movlw	1
  3037  0012E8  0100               	movlb	0	; () banked
  3038  0012EA  6F7D               	movwf	_Stop_Program& (0+255),b
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;State_Mchn.c: 676: SETxAPIxVAL(71, 0);
  3042  0012EC  0E00               	movlw	0
  3043  0012EE  0100               	movlb	0	; () banked
  3044  0012F0  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  3045  0012F2  0E00               	movlw	0
  3046  0012F4  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  3047  0012F6  0E47               	movlw	71
  3048  0012F8  ECF1  F01C         	call	_SETxAPIxVAL
  3049  0012FC                     l8675:
  3050                           
  3051                           ;State_Mchn.c: 677: }
  3052                           ;State_Mchn.c: 679: if(Stop_Program == 1)
  3053  0012FC  0100               	movlb	0	; () banked
  3054  0012FE  057D               	decf	_Stop_Program& (0+255),w,b
  3055  001300  A4D8               	btfss	status,2,c
  3056  001302  D003               	goto	l320
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;State_Mchn.c: 680: {
  3060                           ;State_Mchn.c: 681: Red_Led(2);
  3061  001304  0E02               	movlw	2
  3062  001306  EC98  F01B         	call	_Red_Led
  3063  00130A                     l320:
  3064                           
  3065                           ;State_Mchn.c: 682: }
  3066                           ;State_Mchn.c: 684: Green_Led(1);
  3067  00130A  0E01               	movlw	1
  3068  00130C  ECD8  F01B         	call	_Green_Led
  3069                           
  3070                           ;State_Mchn.c: 686: break;
  3071  001310  D085               	goto	l8739
  3072  001312                     l8679:
  3073  001312  0E01               	movlw	1
  3074  001314  0100               	movlb	0	; () banked
  3075  001316  6FB8               	movwf	Train_Path@To& (0+255),b
  3076  001318  0E03               	movlw	3
  3077  00131A  EC8D  F010         	call	_Train_Path
  3078  00131E  0900               	iorlw	0
  3079  001320  A4D8               	btfss	status,2,c
  3080  001322  D048               	goto	l8723
  3081                           
  3082                           ;State_Mchn.c: 692: {
  3083                           ;State_Mchn.c: 693: Switch_Program = 1;
  3084  001324  0E01               	movlw	1
  3085  001326  0100               	movlb	0	; () banked
  3086  001328  6F81               	movwf	_Switch_Program& (0+255),b
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;State_Mchn.c: 694: Eeprom_Store();
  3090  00132A  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  3091  00132E                     l8685:
  3092                           
  3093                           ;State_Mchn.c: 695: if(Stop_Program == 1)
  3094  00132E  0100               	movlb	0	; () banked
  3095  001330  057D               	decf	_Stop_Program& (0+255),w,b
  3096  001332  A4D8               	btfss	status,2,c
  3097  001334  D03F               	goto	l8723
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;State_Mchn.c: 696: {
  3101                           ;State_Mchn.c: 697: Switch_Main = 1;
  3102  001336  0E01               	movlw	1
  3103  001338  0100               	movlb	0	; () banked
  3104  00133A  6FC6               	movwf	_Switch_Main& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;State_Mchn.c: 699: }
  3108                           ;State_Mchn.c: 700: }
  3109                           ;State_Mchn.c: 701: break;
  3110                           
  3111                           ; BSR set to: 0
  3112  00133C  D03B               	goto	l8723
  3113  00133E                     l8689:
  3114                           
  3115                           ; BSR set to: 0
  3116  00133E  0E04               	movlw	4
  3117  001340  0100               	movlb	0	; () banked
  3118  001342  6FB8               	movwf	Train_Path@To& (0+255),b
  3119  001344  0E01               	movlw	1
  3120  001346  EC8D  F010         	call	_Train_Path
  3121  00134A  0900               	iorlw	0
  3122  00134C  A4D8               	btfss	status,2,c
  3123  00134E  D032               	goto	l8723
  3124                           
  3125                           ;State_Mchn.c: 704: {
  3126                           ;State_Mchn.c: 705: Switch_Program = 2;
  3127  001350  0E02               	movlw	2
  3128  001352  0100               	movlb	0	; () banked
  3129  001354  6F81               	movwf	_Switch_Program& (0+255),b
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;State_Mchn.c: 706: Eeprom_Store();
  3133  001356  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  3134  00135A  D7E9               	goto	l8685
  3135  00135C                     l8699:
  3136                           
  3137                           ; BSR set to: 0
  3138  00135C  0E02               	movlw	2
  3139  00135E  0100               	movlb	0	; () banked
  3140  001360  6FB8               	movwf	Train_Path@To& (0+255),b
  3141  001362  0E04               	movlw	4
  3142  001364  EC8D  F010         	call	_Train_Path
  3143  001368  0900               	iorlw	0
  3144  00136A  A4D8               	btfss	status,2,c
  3145  00136C  D023               	goto	l8723
  3146                           
  3147                           ;State_Mchn.c: 716: {
  3148                           ;State_Mchn.c: 717: Switch_Program = 3;
  3149  00136E  0E03               	movlw	3
  3150  001370  0100               	movlb	0	; () banked
  3151  001372  6F81               	movwf	_Switch_Program& (0+255),b
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;State_Mchn.c: 718: Eeprom_Store();
  3155  001374  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  3156  001378  D7DA               	goto	l8685
  3157  00137A                     l8709:
  3158                           
  3159                           ; BSR set to: 0
  3160  00137A  0E03               	movlw	3
  3161  00137C  0100               	movlb	0	; () banked
  3162  00137E  6FB8               	movwf	Train_Path@To& (0+255),b
  3163  001380  0E02               	movlw	2
  3164  001382  EC8D  F010         	call	_Train_Path
  3165  001386  0900               	iorlw	0
  3166  001388  A4D8               	btfss	status,2,c
  3167  00138A  D014               	goto	l8723
  3168                           
  3169                           ;State_Mchn.c: 728: {
  3170                           ;State_Mchn.c: 729: Switch_Program = 0;
  3171  00138C  0E00               	movlw	0
  3172  00138E  0100               	movlb	0	; () banked
  3173  001390  6F81               	movwf	_Switch_Program& (0+255),b
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;State_Mchn.c: 730: Eeprom_Store();
  3177  001392  EC7B  F01A         	call	_Eeprom_Store	;wreg free
  3178  001396  D7CB               	goto	l8685
  3179  001398                     l8721:
  3180  001398  0100               	movlb	0	; () banked
  3181  00139A  5181               	movf	_Switch_Program& (0+255),w,b
  3182                           
  3183                           ; Switch size 1, requested type "space"
  3184                           ; Number of cases is 4, Range of values is 0 to 3
  3185                           ; switch strategies available:
  3186                           ; Name         Instructions Cycles
  3187                           ; simple_byte           13     7 (average)
  3188                           ;	Chosen strategy is simple_byte
  3189  00139C  0A00               	xorlw	0	; case 0
  3190  00139E  B4D8               	btfsc	status,2,c
  3191  0013A0  D7B8               	goto	l8679
  3192  0013A2  0A01               	xorlw	1	; case 1
  3193  0013A4  B4D8               	btfsc	status,2,c
  3194  0013A6  D7CB               	goto	l8689
  3195  0013A8  0A03               	xorlw	3	; case 2
  3196  0013AA  B4D8               	btfsc	status,2,c
  3197  0013AC  D7D7               	goto	l8699
  3198  0013AE  0A01               	xorlw	1	; case 3
  3199  0013B0  B4D8               	btfsc	status,2,c
  3200  0013B2  D7E3               	goto	l8709
  3201  0013B4                     l8723:
  3202                           
  3203                           ;State_Mchn.c: 924: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3204  0013B4  0E21               	movlw	33
  3205  0013B6  EC20  F01E         	call	_GETxAPIxVAL
  3206  0013BA  0100               	movlb	0	; () banked
  3207  0013BC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  3208  0013BE  0100               	movlb	0	; () banked
  3209  0013C0  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3210  0013C2  A4D8               	btfss	status,2,c
  3211  0013C4  D009               	goto	l8727
  3212                           
  3213                           ; BSR set to: 0
  3214  0013C6  0E47               	movlw	71
  3215  0013C8  EC20  F01E         	call	_GETxAPIxVAL
  3216  0013CC  0100               	movlb	0	; () banked
  3217  0013CE  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  3218  0013D0  0100               	movlb	0	; () banked
  3219  0013D2  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3220  0013D4  B4D8               	btfsc	status,2,c
  3221  0013D6  D00B               	goto	l8731
  3222  0013D8                     l8727:
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;State_Mchn.c: 925: {
  3226                           ;State_Mchn.c: 926: Stop_Program = 1;
  3227  0013D8  0E01               	movlw	1
  3228  0013DA  0100               	movlb	0	; () banked
  3229  0013DC  6F7D               	movwf	_Stop_Program& (0+255),b
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;State_Mchn.c: 927: SETxAPIxVAL(71, 0);
  3233  0013DE  0E00               	movlw	0
  3234  0013E0  0100               	movlb	0	; () banked
  3235  0013E2  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  3236  0013E4  0E00               	movlw	0
  3237  0013E6  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  3238  0013E8  0E47               	movlw	71
  3239  0013EA  ECF1  F01C         	call	_SETxAPIxVAL
  3240  0013EE                     l8731:
  3241                           
  3242                           ;State_Mchn.c: 928: }
  3243                           ;State_Mchn.c: 930: if(Stop_Program == 1)
  3244  0013EE  0100               	movlb	0	; () banked
  3245  0013F0  057D               	decf	_Stop_Program& (0+255),w,b
  3246  0013F2  A4D8               	btfss	status,2,c
  3247  0013F4  D003               	goto	l340
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;State_Mchn.c: 931: {
  3251                           ;State_Mchn.c: 932: Red_Led(2);
  3252  0013F6  0E02               	movlw	2
  3253  0013F8  EC98  F01B         	call	_Red_Led
  3254  0013FC                     l340:
  3255                           
  3256                           ;State_Mchn.c: 933: }
  3257                           ;State_Mchn.c: 935: Green_Led(1);
  3258  0013FC  0E01               	movlw	1
  3259  0013FE  ECD8  F01B         	call	_Green_Led
  3260                           
  3261                           ;State_Mchn.c: 940: }
  3262                           
  3263                           ;State_Mchn.c: 939: default : break;
  3264                           
  3265                           ;State_Mchn.c: 937: break;
  3266  001402  D00C               	goto	l8739
  3267  001404                     l8737:
  3268  001404  0100               	movlb	0	; () banked
  3269  001406  51C6               	movf	_Switch_Main& (0+255),w,b
  3270                           
  3271                           ; Switch size 1, requested type "space"
  3272                           ; Number of cases is 3, Range of values is 1 to 3
  3273                           ; switch strategies available:
  3274                           ; Name         Instructions Cycles
  3275                           ; simple_byte           10     6 (average)
  3276                           ;	Chosen strategy is simple_byte
  3277  001408  0A01               	xorlw	1	; case 1
  3278  00140A  B4D8               	btfsc	status,2,c
  3279  00140C  EF39  F004         	goto	l8233
  3280  001410  0A03               	xorlw	3	; case 2
  3281  001412  B4D8               	btfsc	status,2,c
  3282  001414  D73C               	goto	l8665
  3283  001416  0A01               	xorlw	1	; case 3
  3284  001418  B4D8               	btfsc	status,2,c
  3285  00141A  D7BE               	goto	l8721
  3286  00141C                     l8739:
  3287                           
  3288                           ;State_Mchn.c: 941: SETxAPIxVAL(63, Switch_Main);
  3289  00141C  C0C6  F0AB         	movff	_Switch_Main,SETxAPIxVAL@value
  3290  001420  0100               	movlb	0	; () banked
  3291  001422  6BAC               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3292  001424  0E3F               	movlw	63
  3293  001426  ECF1  F01C         	call	_SETxAPIxVAL
  3294                           
  3295                           ;State_Mchn.c: 942: SETxAPIxVAL(80, Switch_Program);
  3296  00142A  C081  F0AB         	movff	_Switch_Program,SETxAPIxVAL@value
  3297  00142E  0100               	movlb	0	; () banked
  3298  001430  6BAC               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3299  001432  0E50               	movlw	80
  3300  001434  ECF1  F01C         	call	_SETxAPIxVAL
  3301  001438  0012               	return		;funcret
  3302  00143A                     __end_of_Update_StateMchn:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           postdec1	equ	0xFE5
  3311                           fsr1l	equ	0xFE1
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function _Train_Path *****************
  3315 ;; Defined at:
  3316 ;;		line 960 in file "../State_Mchn.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  From            1    wreg     unsigned char 
  3319 ;;  To              1   41[BANK0 ] unsigned char 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  From            1   42[BANK0 ] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      unsigned char 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3331 ;;      Params:         0       1       0       0       0       0       0       0       0
  3332 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3334 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3335 ;;Total ram usage:        2 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    9
  3338 ;; This function calls:
  3339 ;;		_GETxAPIxVAL
  3340 ;;		_Junction
  3341 ;;		_Left_Mountain_From_The_Left
  3342 ;;		_Left_Mountain_From_The_Right
  3343 ;;		_Right_Mountain_From_The_Left
  3344 ;;		_Right_Mountain_From_The_Right
  3345 ;;		_SETxAPIxVAL
  3346 ;;		_Train_Move_Left_Brake
  3347 ;;		_Train_Move_Left_Start
  3348 ;;		_Train_Move_Right_Brake
  3349 ;;		_Train_Move_Right_Start
  3350 ;; This function is called by:
  3351 ;;		_Update_StateMchn
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text2
  3356  00211A                     __ptext2:
  3357                           	opt stack 0
  3358  00211A                     _Train_Path:
  3359                           	opt stack 20
  3360                           
  3361                           ;incstack = 0
  3362                           ;Train_Path@From stored from wreg
  3363  00211A  0100               	movlb	0	; () banked
  3364  00211C  6FB9               	movwf	Train_Path@From& (0+255),b
  3365                           
  3366                           ;State_Mchn.c: 962: static char Return_Val = 1;
  3367                           ;State_Mchn.c: 964: SETxAPIxVAL(61, From);
  3368  00211E  C0B9  F0AB         	movff	Train_Path@From,SETxAPIxVAL@value
  3369  002122  0100               	movlb	0	; () banked
  3370  002124  6BAC               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3371  002126  0E3D               	movlw	61
  3372  002128  ECF1  F01C         	call	_SETxAPIxVAL
  3373                           
  3374                           ;State_Mchn.c: 965: SETxAPIxVAL(62, To);
  3375  00212C  C0B8  F0AB         	movff	Train_Path@To,SETxAPIxVAL@value
  3376  002130  0100               	movlb	0	; () banked
  3377  002132  6BAC               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3378  002134  0E3E               	movlw	62
  3379  002136  ECF1  F01C         	call	_SETxAPIxVAL
  3380                           
  3381                           ;State_Mchn.c: 967: switch(Switch_Train_Path)
  3382  00213A  D1A1               	goto	l8089
  3383  00213C                     l7881:
  3384  00213C  0E00               	movlw	0
  3385  00213E  0100               	movlb	0	; () banked
  3386  002140  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3387  002142  0E01               	movlw	1
  3388  002144  ECC4  F015         	call	_Junction
  3389  002148  0900               	iorlw	0
  3390  00214A  B4D8               	btfsc	status,2,c
  3391  00214C  D01B               	goto	l7895
  3392  00214E                     l351:
  3393                           
  3394                           ;State_Mchn.c: 975: }
  3395                           ;State_Mchn.c: 976: Return_Val = 1;
  3396  00214E  0E01               	movlw	1
  3397  002150                     L39:
  3398  002150  0100               	movlb	0	; () banked
  3399  002152  6FC5               	movwf	Train_Path@Return_Val& (0+255),b
  3400                           
  3401                           ;State_Mchn.c: 977: break;
  3402  002154  D1BE               	goto	l8091
  3403  002156                     l7885:
  3404                           
  3405                           ; BSR set to: 0
  3406  002156  0E01               	movlw	1
  3407  002158  0100               	movlb	0	; () banked
  3408  00215A  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3409  00215C  0E01               	movlw	1
  3410  00215E  ECC4  F015         	call	_Junction
  3411  002162  D7F2               	goto	L58
  3412  002164                     l7889:
  3413                           
  3414                           ; BSR set to: 0
  3415  002164  0E01               	movlw	1
  3416  002166  0100               	movlb	0	; () banked
  3417  002168  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3418  00216A  0E00               	movlw	0
  3419  00216C  ECC4  F015         	call	_Junction
  3420  002170  D7EB               	goto	L58
  3421  002172                     l7893:
  3422                           
  3423                           ; BSR set to: 0
  3424  002172  0E00               	movlw	0
  3425  002174  0100               	movlb	0	; () banked
  3426  002176  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3427  002178  0E00               	movlw	0
  3428  00217A  ECC4  F015         	call	_Junction
  3429  00217E  0900               	iorlw	0
  3430  002180  A4D8               	btfss	status,2,c
  3431  002182  D7E5               	goto	l351
  3432  002184                     l7895:
  3433                           
  3434                           ;State_Mchn.c: 993: {
  3435                           ;State_Mchn.c: 994: Switch_Train_Path = 1;
  3436  002184  0E01               	movlw	1
  3437  002186  D016               	goto	L40
  3438  002188                     l7899:
  3439  002188  0100               	movlb	0	; () banked
  3440  00218A  51B9               	movf	Train_Path@From& (0+255),w,b
  3441                           
  3442                           ; Switch size 1, requested type "space"
  3443                           ; Number of cases is 4, Range of values is 1 to 4
  3444                           ; switch strategies available:
  3445                           ; Name         Instructions Cycles
  3446                           ; simple_byte           13     7 (average)
  3447                           ;	Chosen strategy is simple_byte
  3448  00218C  0A01               	xorlw	1	; case 1
  3449  00218E  B4D8               	btfsc	status,2,c
  3450  002190  D7E9               	goto	l7889
  3451  002192  0A03               	xorlw	3	; case 2
  3452  002194  B4D8               	btfsc	status,2,c
  3453  002196  D7ED               	goto	l7893
  3454  002198  0A01               	xorlw	1	; case 3
  3455  00219A  B4D8               	btfsc	status,2,c
  3456  00219C  D7CF               	goto	l7881
  3457  00219E  0A07               	xorlw	7	; case 4
  3458  0021A0  B4D8               	btfsc	status,2,c
  3459  0021A2  D7D9               	goto	l7885
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;State_Mchn.c: 1001: break;
  3463  0021A4  D196               	goto	l8091
  3464  0021A6                     l7901:
  3465                           
  3466                           ; BSR set to: 0
  3467  0021A6  0E00               	movlw	0
  3468  0021A8  0100               	movlb	0	; () banked
  3469  0021AA  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3470  0021AC  0E01               	movlw	1
  3471  0021AE  ECC4  F015         	call	_Junction
  3472  0021B2  D01A               	goto	L45
  3473  0021B4                     L40:
  3474  0021B4  0100               	movlb	0	; () banked
  3475  0021B6  6F83               	movwf	_Switch_Train_Path& (0+255),b
  3476                           
  3477                           ;State_Mchn.c: 1008: Return_Val = 1;
  3478  0021B8  0E01               	movlw	1
  3479  0021BA  0100               	movlb	0	; () banked
  3480  0021BC  6FC5               	movwf	Train_Path@Return_Val& (0+255),b
  3481  0021BE  D7C7               	goto	l351
  3482  0021C0                     l7905:
  3483                           
  3484                           ; BSR set to: 0
  3485  0021C0  0E01               	movlw	1
  3486  0021C2  0100               	movlb	0	; () banked
  3487  0021C4  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3488  0021C6  0E01               	movlw	1
  3489  0021C8  ECC4  F015         	call	_Junction
  3490  0021CC  D00D               	goto	L45
  3491  0021CE                     l7909:
  3492                           
  3493                           ; BSR set to: 0
  3494  0021CE  0E01               	movlw	1
  3495  0021D0  0100               	movlb	0	; () banked
  3496  0021D2  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3497  0021D4  0E00               	movlw	0
  3498  0021D6  ECC4  F015         	call	_Junction
  3499  0021DA  D006               	goto	L45
  3500  0021DC                     l7913:
  3501                           
  3502                           ; BSR set to: 0
  3503  0021DC  0E00               	movlw	0
  3504  0021DE  0100               	movlb	0	; () banked
  3505  0021E0  6FB0               	movwf	Junction@Straight_Bend& (0+255),b
  3506  0021E2  0E00               	movlw	0
  3507  0021E4  ECC4  F015         	call	_Junction
  3508  0021E8                     L45:
  3509  0021E8  0900               	iorlw	0
  3510  0021EA  A4D8               	btfss	status,2,c
  3511  0021EC  D7B0               	goto	l351
  3512                           
  3513                           ;State_Mchn.c: 1027: {
  3514                           ;State_Mchn.c: 1028: Switch_Train_Path = 2;
  3515  0021EE  0E02               	movlw	2
  3516  0021F0  D7E1               	goto	L40
  3517  0021F2                     l7919:
  3518                           
  3519                           ; BSR set to: 0
  3520  0021F2  0100               	movlb	0	; () banked
  3521  0021F4  51B8               	movf	Train_Path@To& (0+255),w,b
  3522                           
  3523                           ; Switch size 1, requested type "space"
  3524                           ; Number of cases is 4, Range of values is 1 to 4
  3525                           ; switch strategies available:
  3526                           ; Name         Instructions Cycles
  3527                           ; simple_byte           13     7 (average)
  3528                           ;	Chosen strategy is simple_byte
  3529  0021F6  0A01               	xorlw	1	; case 1
  3530  0021F8  B4D8               	btfsc	status,2,c
  3531  0021FA  D7E9               	goto	l7909
  3532  0021FC  0A03               	xorlw	3	; case 2
  3533  0021FE  B4D8               	btfsc	status,2,c
  3534  002200  D7ED               	goto	l7913
  3535  002202  0A01               	xorlw	1	; case 3
  3536  002204  B4D8               	btfsc	status,2,c
  3537  002206  D7CF               	goto	l7901
  3538  002208  0A07               	xorlw	7	; case 4
  3539  00220A  B4D8               	btfsc	status,2,c
  3540  00220C  D7D9               	goto	l7905
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;State_Mchn.c: 1035: break;
  3544  00220E  D161               	goto	l8091
  3545  002210                     l7921:
  3546                           
  3547                           ; BSR set to: 0
  3548  002210  EC63  F016         	call	_Train_Move_Right_Start	;wreg free
  3549  002214  D008               	goto	L48
  3550  002216                     l7925:
  3551                           
  3552                           ; BSR set to: 0
  3553  002216  EC63  F016         	call	_Train_Move_Right_Start	;wreg free
  3554  00221A  D005               	goto	L48
  3555  00221C                     l7929:
  3556                           
  3557                           ; BSR set to: 0
  3558  00221C  EC01  F017         	call	_Train_Move_Left_Start	;wreg free
  3559  002220  D002               	goto	L48
  3560  002222                     l7933:
  3561                           
  3562                           ; BSR set to: 0
  3563  002222  EC01  F017         	call	_Train_Move_Left_Start	;wreg free
  3564  002226                     L48:
  3565  002226  0900               	iorlw	0
  3566  002228  A4D8               	btfss	status,2,c
  3567  00222A  D791               	goto	l351
  3568                           
  3569                           ;State_Mchn.c: 1061: {
  3570                           ;State_Mchn.c: 1062: Switch_Train_Path = 3;
  3571  00222C  0E03               	movlw	3
  3572  00222E  D7C2               	goto	L40
  3573  002230                     l7939:
  3574                           
  3575                           ; BSR set to: 0
  3576  002230  0100               	movlb	0	; () banked
  3577  002232  51B8               	movf	Train_Path@To& (0+255),w,b
  3578                           
  3579                           ; Switch size 1, requested type "space"
  3580                           ; Number of cases is 4, Range of values is 1 to 4
  3581                           ; switch strategies available:
  3582                           ; Name         Instructions Cycles
  3583                           ; simple_byte           13     7 (average)
  3584                           ;	Chosen strategy is simple_byte
  3585  002234  0A01               	xorlw	1	; case 1
  3586  002236  B4D8               	btfsc	status,2,c
  3587  002238  D7F1               	goto	l7929
  3588  00223A  0A03               	xorlw	3	; case 2
  3589  00223C  B4D8               	btfsc	status,2,c
  3590  00223E  D7F1               	goto	l7933
  3591  002240  0A01               	xorlw	1	; case 3
  3592  002242  B4D8               	btfsc	status,2,c
  3593  002244  D7E5               	goto	l7921
  3594  002246  0A07               	xorlw	7	; case 4
  3595  002248  B4D8               	btfsc	status,2,c
  3596  00224A  D7E5               	goto	l7925
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;State_Mchn.c: 1069: break;
  3600  00224C  D142               	goto	l8091
  3601  00224E                     l7941:
  3602                           
  3603                           ; BSR set to: 0
  3604  00224E  0E1C               	movlw	28
  3605  002250  EC20  F01E         	call	_GETxAPIxVAL
  3606  002254  0100               	movlb	0	; () banked
  3607  002256  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3608  002258  0100               	movlb	0	; () banked
  3609  00225A  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3610  00225C  B4D8               	btfsc	status,2,c
  3611  00225E  D088               	goto	l8003
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;State_Mchn.c: 1076: else if(GETxAPIxVAL(41) == 1){
  3615                           
  3616                           ; BSR set to: 0
  3617                           
  3618                           ;State_Mchn.c: 1075: }
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;State_Mchn.c: 1074: Switch_Train_Path = 4;
  3622  002260  0E29               	movlw	41
  3623  002262  EC20  F01E         	call	_GETxAPIxVAL
  3624  002266  0100               	movlb	0	; () banked
  3625  002268  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3626  00226A  0100               	movlb	0	; () banked
  3627  00226C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3628  00226E  A4D8               	btfss	status,2,c
  3629  002270  D002               	goto	l7949
  3630  002272                     
  3631                           ; BSR set to: 0
  3632                           ;State_Mchn.c: 1077: Switch_Train_Path = 5;
  3633  002272  0E05               	movlw	5
  3634  002274  D049               	goto	L30
  3635  002276                     l7949:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;State_Mchn.c: 1079: else if(GETxAPIxVAL(42) == 1){
  3639  002276  0E2A               	movlw	42
  3640  002278  EC20  F01E         	call	_GETxAPIxVAL
  3641  00227C  0100               	movlb	0	; () banked
  3642  00227E  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3643  002280  0100               	movlb	0	; () banked
  3644  002282  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3645  002284  A4D8               	btfss	status,2,c
  3646  002286  D002               	goto	l7953
  3647  002288                     
  3648                           ; BSR set to: 0
  3649                           ;State_Mchn.c: 1080: Switch_Train_Path = 6;
  3650  002288  0E06               	movlw	6
  3651  00228A  D03E               	goto	L30
  3652  00228C                     l7953:
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;State_Mchn.c: 1082: else if(GETxAPIxVAL(44) == 1){
  3656  00228C  0E2C               	movlw	44
  3657  00228E  EC20  F01E         	call	_GETxAPIxVAL
  3658  002292  0100               	movlb	0	; () banked
  3659  002294  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3660  002296  0100               	movlb	0	; () banked
  3661  002298  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3662  00229A  A4D8               	btfss	status,2,c
  3663  00229C  D002               	goto	l7957
  3664  00229E                     
  3665                           ; BSR set to: 0
  3666                           ;State_Mchn.c: 1083: Switch_Train_Path = 7;
  3667  00229E  0E07               	movlw	7
  3668  0022A0  D033               	goto	L30
  3669  0022A2                     l7957:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;State_Mchn.c: 1085: else if(GETxAPIxVAL(43) == 1){
  3673  0022A2  0E2B               	movlw	43
  3674  0022A4  EC20  F01E         	call	_GETxAPIxVAL
  3675  0022A8  0100               	movlb	0	; () banked
  3676  0022AA  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3677  0022AC  0100               	movlb	0	; () banked
  3678  0022AE  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3679  0022B0  A4D8               	btfss	status,2,c
  3680  0022B2  D74D               	goto	l351
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;State_Mchn.c: 1086: Switch_Train_Path = 8;
  3684  0022B4  0E08               	movlw	8
  3685  0022B6  D028               	goto	L30
  3686  0022B8                     l7961:
  3687                           
  3688                           ; BSR set to: 0
  3689  0022B8  0E1D               	movlw	29
  3690  0022BA  EC20  F01E         	call	_GETxAPIxVAL
  3691  0022BE  0100               	movlb	0	; () banked
  3692  0022C0  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3693  0022C2  0100               	movlb	0	; () banked
  3694  0022C4  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3695  0022C6  B4D8               	btfsc	status,2,c
  3696  0022C8  D053               	goto	l8003
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;State_Mchn.c: 1093: else if(GETxAPIxVAL(41) == 1){
  3700                           
  3701                           ; BSR set to: 0
  3702                           
  3703                           ;State_Mchn.c: 1092: }
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;State_Mchn.c: 1091: Switch_Train_Path = 4;
  3707  0022CA  0E29               	movlw	41
  3708  0022CC  EC20  F01E         	call	_GETxAPIxVAL
  3709  0022D0  0100               	movlb	0	; () banked
  3710  0022D2  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3711  0022D4  0100               	movlb	0	; () banked
  3712  0022D6  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3713  0022D8  B4D8               	btfsc	status,2,c
  3714  0022DA  D7CB               	goto	L94
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;State_Mchn.c: 1096: else if(GETxAPIxVAL(42) == 1){
  3718                           
  3719                           ; BSR set to: 0
  3720                           
  3721                           ;State_Mchn.c: 1095: }
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;State_Mchn.c: 1094: Switch_Train_Path = 5;
  3725  0022DC  0E2A               	movlw	42
  3726  0022DE  EC20  F01E         	call	_GETxAPIxVAL
  3727  0022E2  0100               	movlb	0	; () banked
  3728  0022E4  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3729  0022E6  0100               	movlb	0	; () banked
  3730  0022E8  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3731  0022EA  B4D8               	btfsc	status,2,c
  3732  0022EC  D7CD               	goto	L95
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;State_Mchn.c: 1099: else if(GETxAPIxVAL(44) == 1){
  3736                           
  3737                           ; BSR set to: 0
  3738                           
  3739                           ;State_Mchn.c: 1098: }
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;State_Mchn.c: 1097: Switch_Train_Path = 6;
  3743  0022EE  0E2C               	movlw	44
  3744  0022F0  EC20  F01E         	call	_GETxAPIxVAL
  3745  0022F4  0100               	movlb	0	; () banked
  3746  0022F6  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3747  0022F8  0100               	movlb	0	; () banked
  3748  0022FA  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3749  0022FC  B4D8               	btfsc	status,2,c
  3750  0022FE  D7CF               	goto	L96
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;State_Mchn.c: 1102: else if(GETxAPIxVAL(43) == 1){
  3754                           
  3755                           ; BSR set to: 0
  3756                           
  3757                           ;State_Mchn.c: 1101: }
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;State_Mchn.c: 1100: Switch_Train_Path = 7;
  3761  002300  0E2B               	movlw	43
  3762  002302  EC20  F01E         	call	_GETxAPIxVAL
  3763  002306  D7D0               	goto	L41
  3764  002308                     L30:
  3765  002308  0100               	movlb	0	; () banked
  3766  00230A  6F83               	movwf	_Switch_Train_Path& (0+255),b
  3767                           
  3768                           ; BSR set to: 0
  3769                           
  3770                           ; BSR set to: 0
  3771                           
  3772                           ; BSR set to: 0
  3773  00230C  D720               	goto	l351
  3774  00230E                     l7981:
  3775                           
  3776                           ; BSR set to: 0
  3777  00230E  0E1E               	movlw	30
  3778  002310  EC20  F01E         	call	_GETxAPIxVAL
  3779  002314  0100               	movlb	0	; () banked
  3780  002316  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3781  002318  0100               	movlb	0	; () banked
  3782  00231A  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3783  00231C  B4D8               	btfsc	status,2,c
  3784  00231E  D028               	goto	l8003
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;State_Mchn.c: 1111: else if(GETxAPIxVAL(41) == 1){
  3788                           
  3789                           ; BSR set to: 0
  3790                           
  3791                           ;State_Mchn.c: 1110: }
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;State_Mchn.c: 1108: {
  3795                           ;State_Mchn.c: 1109: Switch_Train_Path = 4;
  3796  002320  0E29               	movlw	41
  3797  002322  EC20  F01E         	call	_GETxAPIxVAL
  3798  002326  0100               	movlb	0	; () banked
  3799  002328  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3800  00232A  0100               	movlb	0	; () banked
  3801  00232C  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3802  00232E  B4D8               	btfsc	status,2,c
  3803  002330  D02A               	goto	l8007
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;State_Mchn.c: 1114: else if(GETxAPIxVAL(42) == 1){
  3807                           
  3808                           ; BSR set to: 0
  3809                           
  3810                           ;State_Mchn.c: 1113: }
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;State_Mchn.c: 1112: Switch_Train_Path = 12;
  3814  002332  0E2A               	movlw	42
  3815  002334  EC20  F01E         	call	_GETxAPIxVAL
  3816  002338  0100               	movlb	0	; () banked
  3817  00233A  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3818  00233C  0100               	movlb	0	; () banked
  3819  00233E  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3820  002340  B4D8               	btfsc	status,2,c
  3821  002342  D02C               	goto	l8011
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;State_Mchn.c: 1117: else if(GETxAPIxVAL(44) == 1){
  3825                           
  3826                           ; BSR set to: 0
  3827                           
  3828                           ;State_Mchn.c: 1116: }
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;State_Mchn.c: 1115: Switch_Train_Path = 11;
  3832  002344  0E2C               	movlw	44
  3833  002346  EC20  F01E         	call	_GETxAPIxVAL
  3834  00234A  0100               	movlb	0	; () banked
  3835  00234C  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3836  00234E  0100               	movlb	0	; () banked
  3837  002350  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3838  002352  B4D8               	btfsc	status,2,c
  3839  002354  D02E               	goto	l8015
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;State_Mchn.c: 1120: else if(GETxAPIxVAL(43) == 1){
  3843                           
  3844                           ; BSR set to: 0
  3845                           
  3846                           ;State_Mchn.c: 1119: }
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;State_Mchn.c: 1118: Switch_Train_Path = 10;
  3850  002356  0E2B               	movlw	43
  3851  002358  EC20  F01E         	call	_GETxAPIxVAL
  3852  00235C  D02F               	goto	L49
  3853  00235E                     l8001:
  3854                           
  3855                           ; BSR set to: 0
  3856  00235E  0E1F               	movlw	31
  3857  002360  EC20  F01E         	call	_GETxAPIxVAL
  3858  002364  0100               	movlb	0	; () banked
  3859  002366  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3860  002368  0100               	movlb	0	; () banked
  3861  00236A  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3862  00236C  A4D8               	btfss	status,2,c
  3863  00236E  D002               	goto	l8005
  3864  002370                     l8003:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;State_Mchn.c: 1126: {
  3868                           ;State_Mchn.c: 1127: Switch_Train_Path = 4;
  3869  002370  0E04               	movlw	4
  3870  002372  D7CA               	goto	L30
  3871  002374                     l8005:
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;State_Mchn.c: 1129: else if(GETxAPIxVAL(41) == 1){
  3875  002374  0E29               	movlw	41
  3876  002376  EC20  F01E         	call	_GETxAPIxVAL
  3877  00237A  0100               	movlb	0	; () banked
  3878  00237C  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3879  00237E  0100               	movlb	0	; () banked
  3880  002380  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3881  002382  A4D8               	btfss	status,2,c
  3882  002384  D002               	goto	l8009
  3883  002386                     l8007:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;State_Mchn.c: 1130: Switch_Train_Path = 12;
  3887  002386  0E0C               	movlw	12
  3888  002388  D7BF               	goto	L30
  3889  00238A                     l8009:
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;State_Mchn.c: 1132: else if(GETxAPIxVAL(42) == 1){
  3893  00238A  0E2A               	movlw	42
  3894  00238C  EC20  F01E         	call	_GETxAPIxVAL
  3895  002390  0100               	movlb	0	; () banked
  3896  002392  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3897  002394  0100               	movlb	0	; () banked
  3898  002396  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3899  002398  A4D8               	btfss	status,2,c
  3900  00239A  D002               	goto	l8013
  3901  00239C                     l8011:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;State_Mchn.c: 1133: Switch_Train_Path = 11;
  3905  00239C  0E0B               	movlw	11
  3906  00239E  D7B4               	goto	L30
  3907  0023A0                     l8013:
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;State_Mchn.c: 1135: else if(GETxAPIxVAL(44) == 1){
  3911  0023A0  0E2C               	movlw	44
  3912  0023A2  EC20  F01E         	call	_GETxAPIxVAL
  3913  0023A6  0100               	movlb	0	; () banked
  3914  0023A8  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3915  0023AA  0100               	movlb	0	; () banked
  3916  0023AC  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3917  0023AE  A4D8               	btfss	status,2,c
  3918  0023B0  D002               	goto	l8017
  3919  0023B2                     l8015:
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;State_Mchn.c: 1136: Switch_Train_Path = 10;
  3923  0023B2  0E0A               	movlw	10
  3924  0023B4  D7A9               	goto	L30
  3925  0023B6                     l8017:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;State_Mchn.c: 1138: else if(GETxAPIxVAL(43) == 1){
  3929  0023B6  0E2B               	movlw	43
  3930  0023B8  EC20  F01E         	call	_GETxAPIxVAL
  3931  0023BC                     L49:
  3932  0023BC  0100               	movlb	0	; () banked
  3933  0023BE  058F               	decf	?_GETxAPIxVAL& (0+255),w,b
  3934  0023C0  0100               	movlb	0	; () banked
  3935  0023C2  1190               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3936  0023C4  A4D8               	btfss	status,2,c
  3937  0023C6  D6C3               	goto	l351
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;State_Mchn.c: 1139: Switch_Train_Path = 9;
  3941  0023C8  0E09               	movlw	9
  3942  0023CA  D79E               	goto	L30
  3943  0023CC                     l8023:
  3944                           
  3945                           ; BSR set to: 0
  3946  0023CC  0100               	movlb	0	; () banked
  3947  0023CE  51B8               	movf	Train_Path@To& (0+255),w,b
  3948                           
  3949                           ; Switch size 1, requested type "space"
  3950                           ; Number of cases is 4, Range of values is 1 to 4
  3951                           ; switch strategies available:
  3952                           ; Name         Instructions Cycles
  3953                           ; simple_byte           13     7 (average)
  3954                           ;	Chosen strategy is simple_byte
  3955  0023D0  0A01               	xorlw	1	; case 1
  3956  0023D2  B4D8               	btfsc	status,2,c
  3957  0023D4  D79C               	goto	l7981
  3958  0023D6  0A03               	xorlw	3	; case 2
  3959  0023D8  B4D8               	btfsc	status,2,c
  3960  0023DA  D7C1               	goto	l8001
  3961  0023DC  0A01               	xorlw	1	; case 3
  3962  0023DE  B4D8               	btfsc	status,2,c
  3963  0023E0  D736               	goto	l7941
  3964  0023E2  0A07               	xorlw	7	; case 4
  3965  0023E4  B4D8               	btfsc	status,2,c
  3966  0023E6  D768               	goto	l7961
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;State_Mchn.c: 1145: break;
  3970  0023E8  D074               	goto	l8091
  3971  0023EA                     l8025:
  3972                           
  3973                           ; BSR set to: 0
  3974  0023EA  EC22  F015         	call	_Train_Move_Right_Brake	;wreg free
  3975  0023EE  D008               	goto	L92
  3976  0023F0                     l8031:
  3977                           
  3978                           ; BSR set to: 0
  3979  0023F0  EC22  F015         	call	_Train_Move_Right_Brake	;wreg free
  3980  0023F4  D005               	goto	L92
  3981  0023F6                     l8037:
  3982                           
  3983                           ; BSR set to: 0
  3984  0023F6  EC7D  F014         	call	_Train_Move_Left_Brake	;wreg free
  3985  0023FA  D002               	goto	L92
  3986  0023FC                     l8043:
  3987                           
  3988                           ; BSR set to: 0
  3989  0023FC  EC7D  F014         	call	_Train_Move_Left_Brake	;wreg free
  3990  002400                     L92:
  3991  002400  0900               	iorlw	0
  3992  002402  A4D8               	btfss	status,2,c
  3993  002404  D6A4               	goto	l351
  3994                           
  3995                           ;State_Mchn.c: 1174: {
  3996                           ;State_Mchn.c: 1175: Switch_Train_Path = 0;
  3997  002406  0E00               	movlw	0
  3998  002408  0100               	movlb	0	; () banked
  3999  00240A  6F83               	movwf	_Switch_Train_Path& (0+255),b
  4000                           
  4001                           ;State_Mchn.c: 1176: Return_Val = 0;
  4002  00240C  0E00               	movlw	0
  4003  00240E  D6A0               	goto	L39
  4004  002410                     l8051:
  4005                           
  4006                           ; BSR set to: 0
  4007  002410  0100               	movlb	0	; () banked
  4008  002412  51B8               	movf	Train_Path@To& (0+255),w,b
  4009                           
  4010                           ; Switch size 1, requested type "space"
  4011                           ; Number of cases is 4, Range of values is 1 to 4
  4012                           ; switch strategies available:
  4013                           ; Name         Instructions Cycles
  4014                           ; simple_byte           13     7 (average)
  4015                           ;	Chosen strategy is simple_byte
  4016  002414  0A01               	xorlw	1	; case 1
  4017  002416  B4D8               	btfsc	status,2,c
  4018  002418  D7EE               	goto	l8037
  4019  00241A  0A03               	xorlw	3	; case 2
  4020  00241C  B4D8               	btfsc	status,2,c
  4021  00241E  D7EE               	goto	l8043
  4022  002420  0A01               	xorlw	1	; case 3
  4023  002422  B4D8               	btfsc	status,2,c
  4024  002424  D7E2               	goto	l8025
  4025  002426  0A07               	xorlw	7	; case 4
  4026  002428  B4D8               	btfsc	status,2,c
  4027  00242A  D7E2               	goto	l8031
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;State_Mchn.c: 1183: break;
  4031  00242C  D052               	goto	l8091
  4032  00242E                     l8053:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;State_Mchn.c: 1186: if(Left_Mountain_From_The_Left(1) == 0){
  4036  00242E  0E01               	movlw	1
  4037  002430  ECD1  F018         	call	_Left_Mountain_From_The_Left
  4038  002434  D01B               	goto	L93
  4039  002436                     l8057:
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;State_Mchn.c: 1193: if(Left_Mountain_From_The_Left(2) == 0){
  4043  002436  0E02               	movlw	2
  4044  002438  ECD1  F018         	call	_Left_Mountain_From_The_Left
  4045  00243C  D017               	goto	L93
  4046  00243E                     l8061:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;State_Mchn.c: 1200: if(Right_Mountain_From_The_Left(3) == 0){
  4050  00243E  0E03               	movlw	3
  4051  002440  EC37  F018         	call	_Right_Mountain_From_The_Left
  4052  002444  D013               	goto	L93
  4053  002446                     l8065:
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;State_Mchn.c: 1207: if(Right_Mountain_From_The_Left(4) == 0){
  4057  002446  0E04               	movlw	4
  4058  002448  EC37  F018         	call	_Right_Mountain_From_The_Left
  4059  00244C  D00F               	goto	L93
  4060  00244E                     l8069:
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;State_Mchn.c: 1214: if(Right_Mountain_From_The_Right(4) == 0){
  4064  00244E  0E04               	movlw	4
  4065  002450  EC9D  F017         	call	_Right_Mountain_From_The_Right
  4066  002454  D00B               	goto	L93
  4067  002456                     l8073:
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;State_Mchn.c: 1221: if(Right_Mountain_From_The_Right(3) == 0){
  4071  002456  0E03               	movlw	3
  4072  002458  EC9D  F017         	call	_Right_Mountain_From_The_Right
  4073  00245C  D007               	goto	L93
  4074  00245E                     l8077:
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;State_Mchn.c: 1228: if(Left_Mountain_From_The_Right(2) == 0){
  4078  00245E  0E02               	movlw	2
  4079  002460  EC6A  F019         	call	_Left_Mountain_From_The_Right
  4080  002464  D003               	goto	L93
  4081  002466                     l8081:
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;State_Mchn.c: 1235: if(Left_Mountain_From_The_Right(1) == 0){
  4085  002466  0E01               	movlw	1
  4086  002468  EC6A  F019         	call	_Left_Mountain_From_The_Right
  4087  00246C                     L93:
  4088  00246C  0900               	iorlw	0
  4089  00246E  A4D8               	btfss	status,2,c
  4090  002470  D66E               	goto	l351
  4091                           
  4092                           ;State_Mchn.c: 1236: Switch_Train_Path = 3;
  4093  002472  0E03               	movlw	3
  4094  002474  D001               	goto	L42
  4095  002476                     l8085:
  4096                           
  4097                           ; BSR set to: 0
  4098  002476  0E00               	movlw	0
  4099  002478                     L42:
  4100  002478  0100               	movlb	0	; () banked
  4101  00247A  6F83               	movwf	_Switch_Train_Path& (0+255),b
  4102  00247C  D668               	goto	l351
  4103  00247E                     l8089:
  4104  00247E  0100               	movlb	0	; () banked
  4105  002480  5183               	movf	_Switch_Train_Path& (0+255),w,b
  4106                           
  4107                           ; Switch size 1, requested type "space"
  4108                           ; Number of cases is 13, Range of values is 0 to 12
  4109                           ; switch strategies available:
  4110                           ; Name         Instructions Cycles
  4111                           ; simple_byte           40    21 (average)
  4112                           ;	Chosen strategy is simple_byte
  4113  002482  0A00               	xorlw	0	; case 0
  4114  002484  B4D8               	btfsc	status,2,c
  4115  002486  D680               	goto	l7899
  4116  002488  0A01               	xorlw	1	; case 1
  4117  00248A  B4D8               	btfsc	status,2,c
  4118  00248C  D6B2               	goto	l7919
  4119  00248E  0A03               	xorlw	3	; case 2
  4120  002490  B4D8               	btfsc	status,2,c
  4121  002492  D6CE               	goto	l7939
  4122  002494  0A01               	xorlw	1	; case 3
  4123  002496  B4D8               	btfsc	status,2,c
  4124  002498  D799               	goto	l8023
  4125  00249A  0A07               	xorlw	7	; case 4
  4126  00249C  B4D8               	btfsc	status,2,c
  4127  00249E  D7B8               	goto	l8051
  4128  0024A0  0A01               	xorlw	1	; case 5
  4129  0024A2  B4D8               	btfsc	status,2,c
  4130  0024A4  D7C4               	goto	l8053
  4131  0024A6  0A03               	xorlw	3	; case 6
  4132  0024A8  B4D8               	btfsc	status,2,c
  4133  0024AA  D7C5               	goto	l8057
  4134  0024AC  0A01               	xorlw	1	; case 7
  4135  0024AE  B4D8               	btfsc	status,2,c
  4136  0024B0  D7C6               	goto	l8061
  4137  0024B2  0A0F               	xorlw	15	; case 8
  4138  0024B4  B4D8               	btfsc	status,2,c
  4139  0024B6  D7C7               	goto	l8065
  4140  0024B8  0A01               	xorlw	1	; case 9
  4141  0024BA  B4D8               	btfsc	status,2,c
  4142  0024BC  D7C8               	goto	l8069
  4143  0024BE  0A03               	xorlw	3	; case 10
  4144  0024C0  B4D8               	btfsc	status,2,c
  4145  0024C2  D7C9               	goto	l8073
  4146  0024C4  0A01               	xorlw	1	; case 11
  4147  0024C6  B4D8               	btfsc	status,2,c
  4148  0024C8  D7CA               	goto	l8077
  4149  0024CA  0A07               	xorlw	7	; case 12
  4150  0024CC  B4D8               	btfsc	status,2,c
  4151  0024CE  D7CB               	goto	l8081
  4152  0024D0  D7D2               	goto	l8085
  4153  0024D2                     l8091:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;State_Mchn.c: 1244: return(Return_Val);
  4157  0024D2  0100               	movlb	0	; () banked
  4158  0024D4  51C5               	movf	Train_Path@Return_Val& (0+255),w,b
  4159  0024D6  0012               	return	
  4160  0024D8                     __end_of_Train_Path:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           tblptrh	equ	0xFF7
  4164                           tblptrl	equ	0xFF6
  4165                           tablat	equ	0xFF5
  4166                           postinc0	equ	0xFEE
  4167                           wreg	equ	0xFE8
  4168                           postdec1	equ	0xFE5
  4169                           fsr1l	equ	0xFE1
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _Train_Move_Right_Start *****************
  4173 ;; Defined at:
  4174 ;;		line 27 in file "../train_move_right.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      unsigned char 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4188 ;;      Params:         0       0       0       0       0       0       0       0       0
  4189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4191 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4192 ;;Total ram usage:        0 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    8
  4195 ;; This function calls:
  4196 ;;		_GETxAPIxVAL
  4197 ;;		_SETxAPIxVAL
  4198 ;;		_SETxPWM
  4199 ;; This function is called by:
  4200 ;;		_Train_Path
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text3
  4205  002CC6                     __ptext3:
  4206                           	opt stack 0
  4207  002CC6                     _Train_Move_Right_Start:
  4208                           	opt stack 20
  4209                           
  4210                           ;train_move_right.c: 29: static char Return_Val = 1;
  4211                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4212                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;incstack = 0
  4216  002CC6  D08C               	goto	l7101
  4217  002CC8                     l7055:
  4218  002CC8  0E14               	movlw	20
  4219  002CCA  EC20  F01E         	call	_GETxAPIxVAL
  4220  002CCE  0100               	movlb	0	; () banked
  4221  002CD0  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4222  002CD2  0100               	movlb	0	; () banked
  4223  002CD4  5D68               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4224  002CD6  0100               	movlb	0	; () banked
  4225  002CD8  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4226  002CDA  0100               	movlb	0	; () banked
  4227  002CDC  5969               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4228  002CDE  A0D8               	btfss	status,0,c
  4229  002CE0  D002               	goto	l7059
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;train_move_right.c: 37: {
  4233                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4234  002CE2  0E01               	movlw	1
  4235  002CE4  D034               	goto	L62
  4236  002CE6                     l7059:
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;train_move_right.c: 42: }
  4240                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4241  002CE6  0100               	movlb	0	; () banked
  4242  002CE8  4B68               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4243  002CEA  2B69               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4247  002CEC  0E00               	movlw	0
  4248  002CEE  0100               	movlb	0	; () banked
  4249  002CF0  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4250  002CF2  D072               	goto	L63
  4251  002CF4                     l7065:
  4252                           
  4253                           ; BSR set to: 0
  4254  002CF4  0E16               	movlw	22
  4255  002CF6  EC20  F01E         	call	_GETxAPIxVAL
  4256  002CFA  C08F  F0B0         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4257  002CFE  C090  F0B1         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4258  002D02  0E01               	movlw	1
  4259  002D04  0100               	movlb	0	; () banked
  4260  002D06  6FB2               	movwf	SETxPWM@direction& (0+255),b
  4261  002D08  EC46  F01B         	call	_SETxPWM	;wreg free
  4262                           
  4263                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4264  002D0C  0E16               	movlw	22
  4265  002D0E  EC20  F01E         	call	_GETxAPIxVAL
  4266  002D12  C08F  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4267  002D16  C090  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4268                           
  4269                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4270  002D1A  0E00               	movlw	0
  4271  002D1C  0100               	movlb	0	; () banked
  4272  002D1E  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4273  002D20  0E00               	movlw	0
  4274  002D22  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  4275  002D24  0E45               	movlw	69
  4276  002D26  ECF1  F01C         	call	_SETxAPIxVAL
  4277                           
  4278                           ;train_move_right.c: 51: Return_Val = 1;
  4279  002D2A  0E01               	movlw	1
  4280  002D2C  0100               	movlb	0	; () banked
  4281  002D2E  6FC4               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4282  002D30  D01C               	goto	l7083
  4283  002D32                     l7075:
  4284                           
  4285                           ; BSR set to: 0
  4286  002D32  0E12               	movlw	18
  4287  002D34  EC20  F01E         	call	_GETxAPIxVAL
  4288  002D38  0100               	movlb	0	; () banked
  4289  002D3A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4290  002D3C  0100               	movlb	0	; () banked
  4291  002D3E  5D68               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4292  002D40  0100               	movlb	0	; () banked
  4293  002D42  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4294  002D44  0100               	movlb	0	; () banked
  4295  002D46  5969               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4296  002D48  A0D8               	btfss	status,0,c
  4297  002D4A  D009               	goto	l7079
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;train_move_right.c: 56: {
  4301                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4302  002D4C  0E03               	movlw	3
  4303  002D4E                     L62:
  4304  002D4E  0100               	movlb	0	; () banked
  4305  002D50  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4306                           
  4307                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4308  002D52  0E00               	movlw	0
  4309  002D54  0100               	movlb	0	; () banked
  4310  002D56  6F69               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4311  002D58  0E00               	movlw	0
  4312  002D5A  6F68               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4313  002D5C  D03D               	goto	L63
  4314  002D5E                     l7079:
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;train_move_right.c: 61: }
  4318                           ;train_move_right.c: 62: Return_Val = 1;
  4319  002D5E  0E01               	movlw	1
  4320  002D60  0100               	movlb	0	; () banked
  4321  002D62  6FC4               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4325  002D64  0100               	movlb	0	; () banked
  4326  002D66  4B68               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4327  002D68  2B69               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4328  002D6A                     l7083:
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4332  002D6A  0E02               	movlw	2
  4333  002D6C  0100               	movlb	0	; () banked
  4334  002D6E  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4335                           
  4336                           ;train_move_right.c: 65: break;
  4337  002D70  D045               	goto	l7103
  4338  002D72                     l7085:
  4339                           
  4340                           ; BSR set to: 0
  4341  002D72  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4342  002D76  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4343  002D7A  0E01               	movlw	1
  4344  002D7C  0100               	movlb	0	; () banked
  4345  002D7E  6FB2               	movwf	SETxPWM@direction& (0+255),b
  4346  002D80  EC46  F01B         	call	_SETxPWM	;wreg free
  4347                           
  4348                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4349  002D84  0E17               	movlw	23
  4350  002D86  EC20  F01E         	call	_GETxAPIxVAL
  4351  002D8A  0100               	movlb	0	; () banked
  4352  002D8C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4353  002D8E  0100               	movlb	0	; () banked
  4354  002D90  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4355  002D92  0100               	movlb	0	; () banked
  4356  002D94  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4357  002D96  0100               	movlb	0	; () banked
  4358  002D98  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4359  002D9A  A0D8               	btfss	status,0,c
  4360  002D9C  D005               	goto	l7091
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;train_move_right.c: 69: {
  4364                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4365  002D9E  0E00               	movlw	0
  4366  002DA0  0100               	movlb	0	; () banked
  4367  002DA2  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4368                           
  4369                           ;train_move_right.c: 71: Return_Val = 0;
  4370  002DA4  0E00               	movlw	0
  4371  002DA6  D019               	goto	L61
  4372  002DA8                     l7091:
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;train_move_right.c: 73: }
  4376                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4377  002DA8  0E1A               	movlw	26
  4378  002DAA  EC20  F01E         	call	_GETxAPIxVAL
  4379  002DAE  0100               	movlb	0	; () banked
  4380  002DB0  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4381  002DB2  0100               	movlb	0	; () banked
  4382  002DB4  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4383  002DB6  0100               	movlb	0	; () banked
  4384  002DB8  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4385  002DBA  0100               	movlb	0	; () banked
  4386  002DBC  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4387  002DBE  A0D8               	btfss	status,0,c
  4388  002DC0  D008               	goto	l7097
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;train_move_right.c: 75: {
  4392                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4393  002DC2  0100               	movlb	0	; () banked
  4394  002DC4  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4395  002DC6  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4399  002DC8  0E00               	movlw	0
  4400  002DCA  0100               	movlb	0	; () banked
  4401  002DCC  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4402  002DCE  0E00               	movlw	0
  4403  002DD0  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4404  002DD2                     l7097:
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;train_move_right.c: 78: }
  4408                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4409  002DD2  0100               	movlb	0	; () banked
  4410  002DD4  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4411  002DD6  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4412  002DD8                     L63:
  4413                           
  4414                           ;train_move_right.c: 80: Return_Val = 1;
  4415  002DD8  0E01               	movlw	1
  4416  002DDA                     L61:
  4417  002DDA  0100               	movlb	0	; () banked
  4418  002DDC  6FC4               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;train_move_right.c: 84: }
  4422                           
  4423                           ; BSR set to: 0
  4424                           
  4425                           ;train_move_right.c: 83: default : break;
  4426                           
  4427                           ;train_move_right.c: 81: break;
  4428  002DDE  D00E               	goto	l7103
  4429  002DE0                     l7101:
  4430  002DE0  0100               	movlb	0	; () banked
  4431  002DE2  5182               	movf	_Switch_Train_Move& (0+255),w,b
  4432                           
  4433                           ; Switch size 1, requested type "space"
  4434                           ; Number of cases is 4, Range of values is 0 to 3
  4435                           ; switch strategies available:
  4436                           ; Name         Instructions Cycles
  4437                           ; simple_byte           13     7 (average)
  4438                           ;	Chosen strategy is simple_byte
  4439  002DE4  0A00               	xorlw	0	; case 0
  4440  002DE6  B4D8               	btfsc	status,2,c
  4441  002DE8  D76F               	goto	l7055
  4442  002DEA  0A01               	xorlw	1	; case 1
  4443  002DEC  B4D8               	btfsc	status,2,c
  4444  002DEE  D782               	goto	l7065
  4445  002DF0  0A03               	xorlw	3	; case 2
  4446  002DF2  B4D8               	btfsc	status,2,c
  4447  002DF4  D79E               	goto	l7075
  4448  002DF6  0A01               	xorlw	1	; case 3
  4449  002DF8  B4D8               	btfsc	status,2,c
  4450  002DFA  D7BB               	goto	l7085
  4451  002DFC                     l7103:
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;train_move_right.c: 86: return(Return_Val);
  4455  002DFC  0100               	movlb	0	; () banked
  4456  002DFE  51C4               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4457  002E00  0012               	return	
  4458  002E02                     __end_of_Train_Move_Right_Start:
  4459                           	opt stack 0
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           postinc0	equ	0xFEE
  4465                           wreg	equ	0xFE8
  4466                           postdec1	equ	0xFE5
  4467                           fsr1l	equ	0xFE1
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function _Train_Move_Right_Brake *****************
  4471 ;; Defined at:
  4472 ;;		line 254 in file "../train_move_right.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;		None
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      unsigned char 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4486 ;;      Params:         0       0       0       0       0       0       0       0       0
  4487 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4489 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4490 ;;Total ram usage:        0 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    8
  4493 ;; This function calls:
  4494 ;;		_GETxAPIxVAL
  4495 ;;		_SETxAPIxVAL
  4496 ;;		_SETxPWM
  4497 ;; This function is called by:
  4498 ;;		_Train_Path
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text4
  4503  002A44                     __ptext4:
  4504                           	opt stack 0
  4505  002A44                     _Train_Move_Right_Brake:
  4506                           	opt stack 20
  4507                           
  4508                           ;train_move_right.c: 256: static char Return_Val = 1;
  4509                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4510                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;incstack = 0
  4514  002A44  D090               	goto	l7213
  4515  002A46                     l7167:
  4516  002A46  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4517  002A4A  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4518  002A4E  0E01               	movlw	1
  4519  002A50  0100               	movlb	0	; () banked
  4520  002A52  6FB2               	movwf	SETxPWM@direction& (0+255),b
  4521  002A54  EC46  F01B         	call	_SETxPWM	;wreg free
  4522                           
  4523                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  4524  002A58  0E16               	movlw	22
  4525  002A5A  EC20  F01E         	call	_GETxAPIxVAL
  4526  002A5E  0100               	movlb	0	; () banked
  4527  002A60  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  4528  002A62  0100               	movlb	0	; () banked
  4529  002A64  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  4530  002A66  0100               	movlb	0	; () banked
  4531  002A68  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4532  002A6A  0100               	movlb	0	; () banked
  4533  002A6C  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  4534  002A6E  A0D8               	btfss	status,0,c
  4535  002A70  D002               	goto	l7173
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;train_move_right.c: 263: {
  4539                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  4540  002A72  0E01               	movlw	1
  4541  002A74  D072               	goto	L68
  4542  002A76                     l7173:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;train_move_right.c: 267: }
  4546                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4547  002A76  0E19               	movlw	25
  4548  002A78  EC20  F01E         	call	_GETxAPIxVAL
  4549  002A7C  0100               	movlb	0	; () banked
  4550  002A7E  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4551  002A80  0100               	movlb	0	; () banked
  4552  002A82  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4553  002A84  0100               	movlb	0	; () banked
  4554  002A86  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4555  002A88  0100               	movlb	0	; () banked
  4556  002A8A  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4557  002A8C  A0D8               	btfss	status,0,c
  4558  002A8E  D00A               	goto	l7179
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;train_move_right.c: 269: {
  4562                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  4563  002A90  0100               	movlb	0	; () banked
  4564  002A92  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  4565  002A94  A0D8               	btfss	status,0,c
  4566  002A96  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  4570  002A98  0E00               	movlw	0
  4571  002A9A  0100               	movlb	0	; () banked
  4572  002A9C  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4573  002A9E  0E00               	movlw	0
  4574  002AA0  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4575                           
  4576                           ;train_move_right.c: 272: }
  4577  002AA2  D05D               	goto	l7209
  4578  002AA4                     l7179:
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  4582  002AA4  0100               	movlb	0	; () banked
  4583  002AA6  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4584  002AA8  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4585  002AAA  D059               	goto	l7209
  4586  002AAC                     l7183:
  4587                           
  4588                           ; BSR set to: 0
  4589  002AAC  0E12               	movlw	18
  4590  002AAE  EC20  F01E         	call	_GETxAPIxVAL
  4591  002AB2  0100               	movlb	0	; () banked
  4592  002AB4  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4593  002AB6  0100               	movlb	0	; () banked
  4594  002AB8  5D66               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4595  002ABA  0100               	movlb	0	; () banked
  4596  002ABC  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4597  002ABE  0100               	movlb	0	; () banked
  4598  002AC0  5967               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4599  002AC2  A0D8               	btfss	status,0,c
  4600  002AC4  D009               	goto	l7187
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;train_move_right.c: 278: {
  4604                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  4605  002AC6  0E02               	movlw	2
  4606  002AC8  0100               	movlb	0	; () banked
  4607  002ACA  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4608                           
  4609                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  4610  002ACC  0E00               	movlw	0
  4611  002ACE  0100               	movlb	0	; () banked
  4612  002AD0  6F67               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4613  002AD2  0E00               	movlw	0
  4614  002AD4  6F66               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4615  002AD6  D043               	goto	l7209
  4616  002AD8                     l7187:
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;train_move_right.c: 283: }
  4620                           ;train_move_right.c: 284: Return_Val = 1;
  4621  002AD8  0E01               	movlw	1
  4622  002ADA  0100               	movlb	0	; () banked
  4623  002ADC  6FC3               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  4627  002ADE  0100               	movlb	0	; () banked
  4628  002AE0  4B66               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4629  002AE2  2B67               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  4633  002AE4  0E01               	movlw	1
  4634  002AE6  0100               	movlb	0	; () banked
  4635  002AE8  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4636                           
  4637                           ;train_move_right.c: 287: break;
  4638  002AEA  D04B               	goto	l7215
  4639  002AEC                     l7193:
  4640                           
  4641                           ; BSR set to: 0
  4642  002AEC  0E16               	movlw	22
  4643  002AEE  EC20  F01E         	call	_GETxAPIxVAL
  4644  002AF2  C08F  F0B0         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4645  002AF6  C090  F0B1         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4646  002AFA  0E01               	movlw	1
  4647  002AFC  0100               	movlb	0	; () banked
  4648  002AFE  6FB2               	movwf	SETxPWM@direction& (0+255),b
  4649  002B00  EC46  F01B         	call	_SETxPWM	;wreg free
  4650                           
  4651                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  4652  002B04  0E00               	movlw	0
  4653  002B06  0100               	movlb	0	; () banked
  4654  002B08  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4655  002B0A  0E01               	movlw	1
  4656  002B0C  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  4657  002B0E  0E45               	movlw	69
  4658  002B10  ECF1  F01C         	call	_SETxAPIxVAL
  4659                           
  4660                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4661  002B14  0E16               	movlw	22
  4662  002B16  EC20  F01E         	call	_GETxAPIxVAL
  4663  002B1A  C08F  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4664  002B1E  C090  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4665  002B22  D01A               	goto	l7207
  4666  002B24                     l7201:
  4667                           
  4668                           ; BSR set to: 0
  4669  002B24  0E14               	movlw	20
  4670  002B26  EC20  F01E         	call	_GETxAPIxVAL
  4671  002B2A  0100               	movlb	0	; () banked
  4672  002B2C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4673  002B2E  0100               	movlb	0	; () banked
  4674  002B30  5D66               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4675  002B32  0100               	movlb	0	; () banked
  4676  002B34  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4677  002B36  0100               	movlb	0	; () banked
  4678  002B38  5967               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4679  002B3A  A0D8               	btfss	status,0,c
  4680  002B3C  D00A               	goto	l7205
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;train_move_right.c: 297: {
  4684                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  4685  002B3E  0E00               	movlw	0
  4686  002B40  0100               	movlb	0	; () banked
  4687  002B42  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4688                           
  4689                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  4690  002B44  0E00               	movlw	0
  4691  002B46  0100               	movlb	0	; () banked
  4692  002B48  6F67               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4693  002B4A  0E00               	movlw	0
  4694  002B4C  6F66               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4695                           
  4696                           ;train_move_right.c: 300: Return_Val = 0;
  4697  002B4E  0E00               	movlw	0
  4698  002B50  D007               	goto	L66
  4699  002B52                     l7205:
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;train_move_right.c: 302: }
  4703                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  4704  002B52  0100               	movlb	0	; () banked
  4705  002B54  4B66               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4706  002B56  2B67               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4707  002B58                     l7207:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  4711  002B58  0E03               	movlw	3
  4712  002B5A                     L68:
  4713  002B5A  0100               	movlb	0	; () banked
  4714  002B5C  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4715  002B5E                     l7209:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;train_move_right.c: 305: Return_Val = 1;
  4719  002B5E  0E01               	movlw	1
  4720  002B60                     L66:
  4721  002B60  0100               	movlb	0	; () banked
  4722  002B62  6FC3               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;train_move_right.c: 309: }
  4726                           
  4727                           ; BSR set to: 0
  4728                           
  4729                           ;train_move_right.c: 308: default : break;
  4730                           
  4731                           ;train_move_right.c: 306: break;
  4732  002B64  D00E               	goto	l7215
  4733  002B66                     l7213:
  4734  002B66  0100               	movlb	0	; () banked
  4735  002B68  5182               	movf	_Switch_Train_Move& (0+255),w,b
  4736                           
  4737                           ; Switch size 1, requested type "space"
  4738                           ; Number of cases is 4, Range of values is 0 to 3
  4739                           ; switch strategies available:
  4740                           ; Name         Instructions Cycles
  4741                           ; simple_byte           13     7 (average)
  4742                           ;	Chosen strategy is simple_byte
  4743  002B6A  0A00               	xorlw	0	; case 0
  4744  002B6C  B4D8               	btfsc	status,2,c
  4745  002B6E  D76B               	goto	l7167
  4746  002B70  0A01               	xorlw	1	; case 1
  4747  002B72  B4D8               	btfsc	status,2,c
  4748  002B74  D79B               	goto	l7183
  4749  002B76  0A03               	xorlw	3	; case 2
  4750  002B78  B4D8               	btfsc	status,2,c
  4751  002B7A  D7B8               	goto	l7193
  4752  002B7C  0A01               	xorlw	1	; case 3
  4753  002B7E  B4D8               	btfsc	status,2,c
  4754  002B80  D7D1               	goto	l7201
  4755  002B82                     l7215:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;train_move_right.c: 311: return(Return_Val);
  4759  002B82  0100               	movlb	0	; () banked
  4760  002B84  51C3               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  4761  002B86  0012               	return	
  4762  002B88                     __end_of_Train_Move_Right_Brake:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           postinc0	equ	0xFEE
  4769                           wreg	equ	0xFE8
  4770                           postdec1	equ	0xFE5
  4771                           fsr1l	equ	0xFE1
  4772                           status	equ	0xFD8
  4773                           
  4774 ;; *************** function _Train_Move_Left_Start *****************
  4775 ;; Defined at:
  4776 ;;		line 27 in file "../train_move_left.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;		None
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;		None
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      unsigned char 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4790 ;;      Params:         0       0       0       0       0       0       0       0       0
  4791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4793 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4794 ;;Total ram usage:        0 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    8
  4797 ;; This function calls:
  4798 ;;		_GETxAPIxVAL
  4799 ;;		_SETxAPIxVAL
  4800 ;;		_SETxPWM
  4801 ;; This function is called by:
  4802 ;;		_Train_Path
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text5
  4807  002E02                     __ptext5:
  4808                           	opt stack 0
  4809  002E02                     _Train_Move_Left_Start:
  4810                           	opt stack 20
  4811                           
  4812                           ;train_move_left.c: 29: static char Return_Val = 1;
  4813                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4814                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;incstack = 0
  4818  002E02  D08A               	goto	l7159
  4819  002E04                     l7109:
  4820  002E04  0E14               	movlw	20
  4821  002E06  EC20  F01E         	call	_GETxAPIxVAL
  4822  002E0A  0100               	movlb	0	; () banked
  4823  002E0C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4824  002E0E  0100               	movlb	0	; () banked
  4825  002E10  5D64               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  4826  002E12  0100               	movlb	0	; () banked
  4827  002E14  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4828  002E16  0100               	movlb	0	; () banked
  4829  002E18  5965               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4830  002E1A  A0D8               	btfss	status,0,c
  4831  002E1C  D002               	goto	l7113
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;train_move_left.c: 37: {
  4835                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  4836  002E1E  0E01               	movlw	1
  4837  002E20  D036               	goto	L71
  4838  002E22                     l7113:
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;train_move_left.c: 42: }
  4842                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  4843  002E22  0100               	movlb	0	; () banked
  4844  002E24  4B64               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  4845  002E26  2B65               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  4849  002E28  0E00               	movlw	0
  4850  002E2A  D020               	goto	L69
  4851  002E2C                     l7117:
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;train_move_left.c: 45: Return_Val = 1;
  4855  002E2C  0E01               	movlw	1
  4856  002E2E  0100               	movlb	0	; () banked
  4857  002E30  6FC2               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  4858                           
  4859                           ;train_move_left.c: 46: break;
  4860  002E32  D080               	goto	l7161
  4861  002E34                     l7119:
  4862                           
  4863                           ; BSR set to: 0
  4864  002E34  0E15               	movlw	21
  4865  002E36  EC20  F01E         	call	_GETxAPIxVAL
  4866  002E3A  C08F  F0B0         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4867  002E3E  C090  F0B1         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4868  002E42  0E00               	movlw	0
  4869  002E44  0100               	movlb	0	; () banked
  4870  002E46  6FB2               	movwf	SETxPWM@direction& (0+255),b
  4871  002E48  EC46  F01B         	call	_SETxPWM	;wreg free
  4872                           
  4873                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  4874  002E4C  0E15               	movlw	21
  4875  002E4E  EC20  F01E         	call	_GETxAPIxVAL
  4876  002E52  C08F  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4877  002E56  C090  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4878                           
  4879                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  4880  002E5A  0E00               	movlw	0
  4881  002E5C  0100               	movlb	0	; () banked
  4882  002E5E  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4883  002E60  0E00               	movlw	0
  4884  002E62  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  4885  002E64  0E45               	movlw	69
  4886  002E66  ECF1  F01C         	call	_SETxAPIxVAL
  4887  002E6A  D01C               	goto	l7135
  4888  002E6C                     L69:
  4889  002E6C  0100               	movlb	0	; () banked
  4890  002E6E  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4891  002E70  D7DD               	goto	l7117
  4892  002E72                     l7129:
  4893                           
  4894                           ; BSR set to: 0
  4895  002E72  0E12               	movlw	18
  4896  002E74  EC20  F01E         	call	_GETxAPIxVAL
  4897  002E78  0100               	movlb	0	; () banked
  4898  002E7A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4899  002E7C  0100               	movlb	0	; () banked
  4900  002E7E  5D64               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  4901  002E80  0100               	movlb	0	; () banked
  4902  002E82  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4903  002E84  0100               	movlb	0	; () banked
  4904  002E86  5965               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4905  002E88  A0D8               	btfss	status,0,c
  4906  002E8A  D009               	goto	l7133
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;train_move_left.c: 56: {
  4910                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  4911  002E8C  0E03               	movlw	3
  4912  002E8E                     L71:
  4913  002E8E  0100               	movlb	0	; () banked
  4914  002E90  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4915                           
  4916                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  4917  002E92  0E00               	movlw	0
  4918  002E94  0100               	movlb	0	; () banked
  4919  002E96  6F65               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  4920  002E98  0E00               	movlw	0
  4921  002E9A  6F64               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  4922  002E9C  D7C7               	goto	l7117
  4923  002E9E                     l7133:
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;train_move_left.c: 61: }
  4927                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  4928  002E9E  0100               	movlb	0	; () banked
  4929  002EA0  4B64               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  4930  002EA2  2B65               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4931  002EA4                     l7135:
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  4935  002EA4  0E02               	movlw	2
  4936  002EA6  D7E2               	goto	L69
  4937  002EA8                     l7139:
  4938                           
  4939                           ; BSR set to: 0
  4940  002EA8  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4941  002EAC  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4942  002EB0  0E00               	movlw	0
  4943  002EB2  0100               	movlb	0	; () banked
  4944  002EB4  6FB2               	movwf	SETxPWM@direction& (0+255),b
  4945  002EB6  EC46  F01B         	call	_SETxPWM	;wreg free
  4946                           
  4947                           ;train_move_left.c: 68: Return_Val = 1;
  4948  002EBA  0E01               	movlw	1
  4949  002EBC  0100               	movlb	0	; () banked
  4950  002EBE  6FC2               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  4954  002EC0  0E18               	movlw	24
  4955  002EC2  EC20  F01E         	call	_GETxAPIxVAL
  4956  002EC6  0100               	movlb	0	; () banked
  4957  002EC8  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4958  002ECA  0100               	movlb	0	; () banked
  4959  002ECC  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4960  002ECE  0100               	movlb	0	; () banked
  4961  002ED0  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4962  002ED2  0100               	movlb	0	; () banked
  4963  002ED4  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4964  002ED6  A0D8               	btfss	status,0,c
  4965  002ED8  D005               	goto	l7149
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;train_move_left.c: 70: {
  4969                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  4970  002EDA  0E00               	movlw	0
  4971  002EDC  0100               	movlb	0	; () banked
  4972  002EDE  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4973                           
  4974                           ;train_move_left.c: 72: Return_Val = 0;
  4975  002EE0  0E00               	movlw	0
  4976  002EE2  D7A5               	goto	L70
  4977  002EE4                     l7149:
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4981  002EE4  0E1A               	movlw	26
  4982  002EE6  EC20  F01E         	call	_GETxAPIxVAL
  4983  002EEA  0100               	movlb	0	; () banked
  4984  002EEC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  4985  002EEE  0100               	movlb	0	; () banked
  4986  002EF0  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4987  002EF2  0100               	movlb	0	; () banked
  4988  002EF4  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4989  002EF6  0100               	movlb	0	; () banked
  4990  002EF8  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4991  002EFA  A0D8               	btfss	status,0,c
  4992  002EFC  D009               	goto	l7155
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;train_move_left.c: 76: {
  4996                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  4997  002EFE  0100               	movlb	0	; () banked
  4998  002F00  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4999  002F02  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5003  002F04  0E00               	movlw	0
  5004  002F06  0100               	movlb	0	; () banked
  5005  002F08  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5006  002F0A  0E00               	movlw	0
  5007  002F0C  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5008                           
  5009                           ;train_move_left.c: 79: }
  5010  002F0E  D012               	goto	l7161
  5011  002F10                     l7155:
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5015  002F10  0100               	movlb	0	; () banked
  5016  002F12  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5017  002F14  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;train_move_left.c: 83: }
  5021                           
  5022                           ; BSR set to: 0
  5023                           
  5024                           ;train_move_left.c: 82: default : break;
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;train_move_left.c: 81: break;
  5028                           
  5029                           ; BSR set to: 0
  5030  002F16  D00E               	goto	l7161
  5031  002F18                     l7159:
  5032  002F18  0100               	movlb	0	; () banked
  5033  002F1A  5182               	movf	_Switch_Train_Move& (0+255),w,b
  5034                           
  5035                           ; Switch size 1, requested type "space"
  5036                           ; Number of cases is 4, Range of values is 0 to 3
  5037                           ; switch strategies available:
  5038                           ; Name         Instructions Cycles
  5039                           ; simple_byte           13     7 (average)
  5040                           ;	Chosen strategy is simple_byte
  5041  002F1C  0A00               	xorlw	0	; case 0
  5042  002F1E  B4D8               	btfsc	status,2,c
  5043  002F20  D771               	goto	l7109
  5044  002F22  0A01               	xorlw	1	; case 1
  5045  002F24  B4D8               	btfsc	status,2,c
  5046  002F26  D786               	goto	l7119
  5047  002F28  0A03               	xorlw	3	; case 2
  5048  002F2A  B4D8               	btfsc	status,2,c
  5049  002F2C  D7A2               	goto	l7129
  5050  002F2E  0A01               	xorlw	1	; case 3
  5051  002F30  B4D8               	btfsc	status,2,c
  5052  002F32  D7BA               	goto	l7139
  5053  002F34                     l7161:
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;train_move_left.c: 85: return(Return_Val);
  5057  002F34  0100               	movlb	0	; () banked
  5058  002F36  51C2               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5059  002F38  0012               	return	
  5060  002F3A                     __end_of_Train_Move_Left_Start:
  5061                           	opt stack 0
  5062                           tblptru	equ	0xFF8
  5063                           tblptrh	equ	0xFF7
  5064                           tblptrl	equ	0xFF6
  5065                           tablat	equ	0xFF5
  5066                           postinc0	equ	0xFEE
  5067                           wreg	equ	0xFE8
  5068                           postdec1	equ	0xFE5
  5069                           fsr1l	equ	0xFE1
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _Train_Move_Left_Brake *****************
  5073 ;; Defined at:
  5074 ;;		line 254 in file "../train_move_left.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;		None
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      unsigned char 
  5081 ;; Registers used:
  5082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5088 ;;      Params:         0       0       0       0       0       0       0       0       0
  5089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5091 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5092 ;;Total ram usage:        0 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    8
  5095 ;; This function calls:
  5096 ;;		_GETxAPIxVAL
  5097 ;;		_SETxAPIxVAL
  5098 ;;		_SETxPWM
  5099 ;; This function is called by:
  5100 ;;		_Train_Path
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           	psect	text6
  5105  0028FA                     __ptext6:
  5106                           	opt stack 0
  5107  0028FA                     _Train_Move_Left_Brake:
  5108                           	opt stack 20
  5109                           
  5110                           ;train_move_left.c: 256: static char Return_Val = 1;
  5111                           ;train_move_left.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5112                           ;train_move_left.c: 259: switch(Switch_Train_Move)
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;incstack = 0
  5116  0028FA  D093               	goto	l7267
  5117  0028FC                     l7221:
  5118  0028FC  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5119  002900  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5120  002904  0E00               	movlw	0
  5121  002906  0100               	movlb	0	; () banked
  5122  002908  6FB2               	movwf	SETxPWM@direction& (0+255),b
  5123  00290A  EC46  F01B         	call	_SETxPWM	;wreg free
  5124                           
  5125                           ;train_move_left.c: 262: Return_Val = 1;
  5126  00290E  0E01               	movlw	1
  5127  002910  0100               	movlb	0	; () banked
  5128  002912  6FC1               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;train_move_left.c: 263: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5132  002914  0E15               	movlw	21
  5133  002916  EC20  F01E         	call	_GETxAPIxVAL
  5134  00291A  0100               	movlb	0	; () banked
  5135  00291C  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5136  00291E  0100               	movlb	0	; () banked
  5137  002920  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5138  002922  0100               	movlb	0	; () banked
  5139  002924  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5140  002926  0100               	movlb	0	; () banked
  5141  002928  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5142  00292A  A0D8               	btfss	status,0,c
  5143  00292C  D002               	goto	l7229
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;train_move_left.c: 264: {
  5147                           ;train_move_left.c: 265: Switch_Train_Move = 1;
  5148  00292E  0E01               	movlw	1
  5149  002930  D072               	goto	L97
  5150  002932                     l7229:
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;train_move_left.c: 268: }
  5154                           ;train_move_left.c: 269: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5155  002932  0E19               	movlw	25
  5156  002934  EC20  F01E         	call	_GETxAPIxVAL
  5157  002938  0100               	movlb	0	; () banked
  5158  00293A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5159  00293C  0100               	movlb	0	; () banked
  5160  00293E  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5161  002940  0100               	movlb	0	; () banked
  5162  002942  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5163  002944  0100               	movlb	0	; () banked
  5164  002946  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5165  002948  A0D8               	btfss	status,0,c
  5166  00294A  D00A               	goto	l7235
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;train_move_left.c: 270: {
  5170                           ;train_move_left.c: 271: Train_Move_Pwm_Count--;
  5171  00294C  0100               	movlb	0	; () banked
  5172  00294E  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5173  002950  A0D8               	btfss	status,0,c
  5174  002952  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;train_move_left.c: 272: Train_Move_Pwm_Fast_Count = 0;
  5178  002954  0E00               	movlw	0
  5179  002956  0100               	movlb	0	; () banked
  5180  002958  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5181  00295A  0E00               	movlw	0
  5182  00295C  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5183                           
  5184                           ;train_move_left.c: 273: }
  5185  00295E  D06F               	goto	l7269
  5186  002960                     l7235:
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;train_move_left.c: 274: else{Train_Move_Pwm_Fast_Count++;}
  5190  002960  0100               	movlb	0	; () banked
  5191  002962  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5192  002964  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;train_move_left.c: 275: break;
  5196  002966  D06B               	goto	l7269
  5197  002968                     l7237:
  5198                           
  5199                           ; BSR set to: 0
  5200  002968  0E12               	movlw	18
  5201  00296A  EC20  F01E         	call	_GETxAPIxVAL
  5202  00296E  0100               	movlb	0	; () banked
  5203  002970  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5204  002972  0100               	movlb	0	; () banked
  5205  002974  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5206  002976  0100               	movlb	0	; () banked
  5207  002978  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5208  00297A  0100               	movlb	0	; () banked
  5209  00297C  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5210  00297E  A0D8               	btfss	status,0,c
  5211  002980  D009               	goto	l7241
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;train_move_left.c: 278: {
  5215                           ;train_move_left.c: 279: Switch_Train_Move = 2;
  5216  002982  0E02               	movlw	2
  5217  002984  0100               	movlb	0	; () banked
  5218  002986  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5219                           
  5220                           ;train_move_left.c: 280: Train_Move_Wait_Time = 0;
  5221  002988  0E00               	movlw	0
  5222  00298A  0100               	movlb	0	; () banked
  5223  00298C  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5224  00298E  0E00               	movlw	0
  5225  002990  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5226  002992  D043               	goto	l7263
  5227  002994                     l7241:
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;train_move_left.c: 283: }
  5231                           ;train_move_left.c: 284: Return_Val = 1;
  5232  002994  0E01               	movlw	1
  5233  002996  0100               	movlb	0	; () banked
  5234  002998  6FC1               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;train_move_left.c: 285: Train_Move_Wait_Time++;
  5238  00299A  0100               	movlb	0	; () banked
  5239  00299C  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5240  00299E  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;train_move_left.c: 286: Switch_Train_Move = 1;
  5244  0029A0  0E01               	movlw	1
  5245  0029A2  0100               	movlb	0	; () banked
  5246  0029A4  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5247                           
  5248                           ;train_move_left.c: 287: break;
  5249  0029A6  D04B               	goto	l7269
  5250  0029A8                     l7247:
  5251                           
  5252                           ; BSR set to: 0
  5253  0029A8  0E15               	movlw	21
  5254  0029AA  EC20  F01E         	call	_GETxAPIxVAL
  5255  0029AE  C08F  F0B0         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5256  0029B2  C090  F0B1         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5257  0029B6  0E00               	movlw	0
  5258  0029B8  0100               	movlb	0	; () banked
  5259  0029BA  6FB2               	movwf	SETxPWM@direction& (0+255),b
  5260  0029BC  EC46  F01B         	call	_SETxPWM	;wreg free
  5261                           
  5262                           ;train_move_left.c: 290: SETxAPIxVAL(69, 1);;
  5263  0029C0  0E00               	movlw	0
  5264  0029C2  0100               	movlb	0	; () banked
  5265  0029C4  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  5266  0029C6  0E01               	movlw	1
  5267  0029C8  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  5268  0029CA  0E45               	movlw	69
  5269  0029CC  ECF1  F01C         	call	_SETxAPIxVAL
  5270                           
  5271                           ;train_move_left.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5272  0029D0  0E15               	movlw	21
  5273  0029D2  EC20  F01E         	call	_GETxAPIxVAL
  5274  0029D6  C08F  F072         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5275  0029DA  C090  F073         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5276  0029DE  D01A               	goto	L98
  5277  0029E0                     l7255:
  5278                           
  5279                           ; BSR set to: 0
  5280  0029E0  0E14               	movlw	20
  5281  0029E2  EC20  F01E         	call	_GETxAPIxVAL
  5282  0029E6  0100               	movlb	0	; () banked
  5283  0029E8  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5284  0029EA  0100               	movlb	0	; () banked
  5285  0029EC  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5286  0029EE  0100               	movlb	0	; () banked
  5287  0029F0  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5288  0029F2  0100               	movlb	0	; () banked
  5289  0029F4  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5290  0029F6  A0D8               	btfss	status,0,c
  5291  0029F8  D00A               	goto	l7259
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;train_move_left.c: 297: {
  5295                           ;train_move_left.c: 298: Switch_Train_Move = 0;
  5296  0029FA  0E00               	movlw	0
  5297  0029FC  0100               	movlb	0	; () banked
  5298  0029FE  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5299                           
  5300                           ;train_move_left.c: 299: Train_Move_Wait_Time = 0;
  5301  002A00  0E00               	movlw	0
  5302  002A02  0100               	movlb	0	; () banked
  5303  002A04  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5304  002A06  0E00               	movlw	0
  5305  002A08  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5306                           
  5307                           ;train_move_left.c: 300: Return_Val = 0;
  5308  002A0A  0E00               	movlw	0
  5309  002A0C  D007               	goto	L74
  5310  002A0E                     l7259:
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;train_move_left.c: 302: }
  5314                           ;train_move_left.c: 303: Train_Move_Wait_Time++;
  5315  002A0E  0100               	movlb	0	; () banked
  5316  002A10  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5317  002A12  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5318  002A14                     L98:
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;train_move_left.c: 304: Switch_Train_Move = 3;
  5322  002A14  0E03               	movlw	3
  5323  002A16                     L97:
  5324  002A16  0100               	movlb	0	; () banked
  5325  002A18  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5326  002A1A                     l7263:
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;train_move_left.c: 305: Return_Val = 1;
  5330  002A1A  0E01               	movlw	1
  5331  002A1C                     L74:
  5332  002A1C  0100               	movlb	0	; () banked
  5333  002A1E  6FC1               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;train_move_left.c: 309: }
  5337                           
  5338                           ; BSR set to: 0
  5339                           
  5340                           ;train_move_left.c: 308: default : break;
  5341                           
  5342                           ;train_move_left.c: 306: break;
  5343  002A20  D00E               	goto	l7269
  5344  002A22                     l7267:
  5345  002A22  0100               	movlb	0	; () banked
  5346  002A24  5182               	movf	_Switch_Train_Move& (0+255),w,b
  5347                           
  5348                           ; Switch size 1, requested type "space"
  5349                           ; Number of cases is 4, Range of values is 0 to 3
  5350                           ; switch strategies available:
  5351                           ; Name         Instructions Cycles
  5352                           ; simple_byte           13     7 (average)
  5353                           ;	Chosen strategy is simple_byte
  5354  002A26  0A00               	xorlw	0	; case 0
  5355  002A28  B4D8               	btfsc	status,2,c
  5356  002A2A  D768               	goto	l7221
  5357  002A2C  0A01               	xorlw	1	; case 1
  5358  002A2E  B4D8               	btfsc	status,2,c
  5359  002A30  D79B               	goto	l7237
  5360  002A32  0A03               	xorlw	3	; case 2
  5361  002A34  B4D8               	btfsc	status,2,c
  5362  002A36  D7B8               	goto	l7247
  5363  002A38  0A01               	xorlw	1	; case 3
  5364  002A3A  B4D8               	btfsc	status,2,c
  5365  002A3C  D7D1               	goto	l7255
  5366  002A3E                     l7269:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;train_move_left.c: 311: return(Return_Val);
  5370  002A3E  0100               	movlb	0	; () banked
  5371  002A40  51C1               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5372  002A42  0012               	return	
  5373  002A44                     __end_of_Train_Move_Left_Brake:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           postinc0	equ	0xFEE
  5380                           wreg	equ	0xFE8
  5381                           postdec1	equ	0xFE5
  5382                           fsr1l	equ	0xFE1
  5383                           status	equ	0xFD8
  5384                           
  5385 ;; *************** function _Right_Mountain_From_The_Right *****************
  5386 ;; Defined at:
  5387 ;;		line 103 in file "../train_move_left.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;  rc              1    wreg     unsigned char 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  rc              1   40[BANK0 ] unsigned char 
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  1    wreg      unsigned char 
  5394 ;; Registers used:
  5395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5401 ;;      Params:         0       0       0       0       0       0       0       0       0
  5402 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5404 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5405 ;;Total ram usage:        1 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    8
  5408 ;; This function calls:
  5409 ;;		_GETxAPIxVAL
  5410 ;;		_SETxPWM
  5411 ;; This function is called by:
  5412 ;;		_Train_Path
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text7
  5417  002F3A                     __ptext7:
  5418                           	opt stack 0
  5419  002F3A                     _Right_Mountain_From_The_Right:
  5420                           	opt stack 20
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;incstack = 0
  5424                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5425  002F3A  0100               	movlb	0	; () banked
  5426  002F3C  6FB7               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  5427                           
  5428                           ;train_move_left.c: 105: static char Return_Val = 1;
  5429                           ;train_move_left.c: 107: switch (Switch_Moutain){
  5430  002F3E  D08C               	goto	l7447
  5431  002F40                     l7395:
  5432  002F40  0E03               	movlw	3
  5433  002F42  0100               	movlb	0	; () banked
  5434  002F44  19B7               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5435  002F46  B4D8               	btfsc	status,2,c
  5436  002F48  D00D               	goto	l7401
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  5440                           
  5441                           ; BSR set to: 0
  5442                           
  5443                           ;train_move_left.c: 111: }
  5444                           
  5445                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;train_move_left.c: 109: Switch_Moutain = 1;
  5449  002F4A  0E35               	movlw	53
  5450  002F4C  EC20  F01E         	call	_GETxAPIxVAL
  5451  002F50  0100               	movlb	0	; () banked
  5452  002F52  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5453  002F54  0100               	movlb	0	; () banked
  5454  002F56  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  5455  002F58  0100               	movlb	0	; () banked
  5456  002F5A  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5457  002F5C  0100               	movlb	0	; () banked
  5458  002F5E  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  5459  002F60  A0D8               	btfss	status,0,c
  5460  002F62  D009               	goto	l7403
  5461  002F64                     l7401:
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;train_move_left.c: 113: Switch_Moutain = 1;
  5465  002F64  0E01               	movlw	1
  5466  002F66  0100               	movlb	0	; () banked
  5467  002F68  6F80               	movwf	_Switch_Moutain& (0+255),b
  5468                           
  5469                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  5470  002F6A  0E00               	movlw	0
  5471  002F6C  0100               	movlb	0	; () banked
  5472  002F6E  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  5473  002F70  0E00               	movlw	0
  5474  002F72  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  5475                           
  5476                           ;train_move_left.c: 115: }
  5477  002F74  D06D               	goto	l7443
  5478  002F76                     l7403:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;train_move_left.c: 116: else{
  5482                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  5483  002F76  0100               	movlb	0	; () banked
  5484  002F78  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  5485  002F7A  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  5486                           
  5487                           ; BSR set to: 0
  5488  002F7C  D069               	goto	l7443
  5489  002F7E                     l7407:
  5490                           
  5491                           ; BSR set to: 0
  5492  002F7E  0E04               	movlw	4
  5493  002F80  0100               	movlb	0	; () banked
  5494  002F82  19B7               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5495  002F84  A4D8               	btfss	status,2,c
  5496  002F86  D028               	goto	l7425
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;train_move_left.c: 123: SETxPWM(Train_Move_Pwm_Count, 0);
  5500  002F88  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5501  002F8C  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5502  002F90  0E00               	movlw	0
  5503  002F92  0100               	movlb	0	; () banked
  5504  002F94  6FB2               	movwf	SETxPWM@direction& (0+255),b
  5505  002F96  EC46  F01B         	call	_SETxPWM	;wreg free
  5506                           
  5507                           ;train_move_left.c: 124: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  5508  002F9A  0E2E               	movlw	46
  5509  002F9C  EC20  F01E         	call	_GETxAPIxVAL
  5510  002FA0  0100               	movlb	0	; () banked
  5511  002FA2  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5512  002FA4  0100               	movlb	0	; () banked
  5513  002FA6  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5514  002FA8  0100               	movlb	0	; () banked
  5515  002FAA  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5516  002FAC  0100               	movlb	0	; () banked
  5517  002FAE  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5518  002FB0  B0D8               	btfsc	status,0,c
  5519  002FB2  D02D               	goto	l7431
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;train_move_left.c: 131: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5523                           
  5524                           ; BSR set to: 0
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;train_move_left.c: 130: }
  5528                           
  5529                           ;train_move_left.c: 129: break;
  5530                           
  5531                           ;train_move_left.c: 128: Return_Val = 0;
  5532                           
  5533                           ;train_move_left.c: 127: Switch_Moutain = 0;
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;train_move_left.c: 125: {
  5537                           ;train_move_left.c: 126: Switch_Train_Move = 0;
  5538  002FB4  0E1A               	movlw	26
  5539  002FB6  EC20  F01E         	call	_GETxAPIxVAL
  5540  002FBA  0100               	movlb	0	; () banked
  5541  002FBC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5542  002FBE  0100               	movlb	0	; () banked
  5543  002FC0  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5544  002FC2  0100               	movlb	0	; () banked
  5545  002FC4  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5546  002FC6  0100               	movlb	0	; () banked
  5547  002FC8  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5548  002FCA  A0D8               	btfss	status,0,c
  5549  002FCC  D03E               	goto	l7441
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;train_move_left.c: 132: {
  5553                           ;train_move_left.c: 133: Train_Move_Pwm_Count--;
  5554  002FCE  0100               	movlb	0	; () banked
  5555  002FD0  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5556  002FD2  A0D8               	btfss	status,0,c
  5557  002FD4  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5558  002FD6  D033               	goto	l7439
  5559  002FD8                     l7425:
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;train_move_left.c: 138: else if (rc == 3){
  5563  002FD8  0E03               	movlw	3
  5564  002FDA  0100               	movlb	0	; () banked
  5565  002FDC  19B7               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5566  002FDE  A4D8               	btfss	status,2,c
  5567  002FE0  D037               	goto	l7443
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;train_move_left.c: 139: SETxPWM(Train_Move_Pwm_Count, 0);
  5571  002FE2  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5572  002FE6  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5573  002FEA  0E00               	movlw	0
  5574  002FEC  0100               	movlb	0	; () banked
  5575  002FEE  6FB2               	movwf	SETxPWM@direction& (0+255),b
  5576  002FF0  EC46  F01B         	call	_SETxPWM	;wreg free
  5577                           
  5578                           ;train_move_left.c: 140: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5579  002FF4  0E18               	movlw	24
  5580  002FF6  EC20  F01E         	call	_GETxAPIxVAL
  5581  002FFA  0100               	movlb	0	; () banked
  5582  002FFC  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5583  002FFE  0100               	movlb	0	; () banked
  5584  003000  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5585  003002  0100               	movlb	0	; () banked
  5586  003004  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5587  003006  0100               	movlb	0	; () banked
  5588  003008  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5589  00300A  A0D8               	btfss	status,0,c
  5590  00300C  D008               	goto	l7435
  5591  00300E                     l7431:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;train_move_left.c: 141: {
  5595                           ;train_move_left.c: 142: Switch_Train_Move = 0;
  5596  00300E  0E00               	movlw	0
  5597  003010  0100               	movlb	0	; () banked
  5598  003012  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5599                           
  5600                           ;train_move_left.c: 143: Switch_Moutain = 0;
  5601  003014  0E00               	movlw	0
  5602  003016  0100               	movlb	0	; () banked
  5603  003018  6F80               	movwf	_Switch_Moutain& (0+255),b
  5604                           
  5605                           ;train_move_left.c: 144: Return_Val = 0;
  5606  00301A  0E00               	movlw	0
  5607  00301C  D01A               	goto	L78
  5608  00301E                     l7435:
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;train_move_left.c: 147: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5612  00301E  0E1A               	movlw	26
  5613  003020  EC20  F01E         	call	_GETxAPIxVAL
  5614  003024  0100               	movlb	0	; () banked
  5615  003026  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5616  003028  0100               	movlb	0	; () banked
  5617  00302A  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5618  00302C  0100               	movlb	0	; () banked
  5619  00302E  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5620  003030  0100               	movlb	0	; () banked
  5621  003032  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5622  003034  A0D8               	btfss	status,0,c
  5623  003036  D009               	goto	l7441
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;train_move_left.c: 148: {
  5627                           ;train_move_left.c: 149: Train_Move_Pwm_Count++;
  5628  003038  0100               	movlb	0	; () banked
  5629  00303A  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5630  00303C  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5631  00303E                     l7439:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;train_move_left.c: 150: Train_Move_Pwm_Fast_Count = 0;
  5635  00303E  0E00               	movlw	0
  5636  003040  0100               	movlb	0	; () banked
  5637  003042  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5638  003044  0E00               	movlw	0
  5639  003046  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5640                           
  5641                           ;train_move_left.c: 151: }
  5642  003048  D003               	goto	l7443
  5643  00304A                     l7441:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;train_move_left.c: 152: else{Train_Move_Pwm_Fast_Count++;}
  5647  00304A  0100               	movlb	0	; () banked
  5648  00304C  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5649  00304E  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5650  003050                     l7443:
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;train_move_left.c: 153: }
  5654                           ;train_move_left.c: 154: Return_Val = 1;
  5655  003050  0E01               	movlw	1
  5656  003052                     L78:
  5657  003052  0100               	movlb	0	; () banked
  5658  003054  6FC0               	movwf	Right_Mountain_From_The_Right@Return_Val& (0+255),b
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;train_move_left.c: 159: }
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;train_move_left.c: 158: break;
  5665                           
  5666                           ;train_move_left.c: 157: default:
  5667                           
  5668                           ;train_move_left.c: 155: break;
  5669  003056  D008               	goto	l7449
  5670  003058                     l7447:
  5671  003058  0100               	movlb	0	; () banked
  5672  00305A  5180               	movf	_Switch_Moutain& (0+255),w,b
  5673                           
  5674                           ; Switch size 1, requested type "space"
  5675                           ; Number of cases is 2, Range of values is 0 to 1
  5676                           ; switch strategies available:
  5677                           ; Name         Instructions Cycles
  5678                           ; simple_byte            7     4 (average)
  5679                           ;	Chosen strategy is simple_byte
  5680  00305C  0A00               	xorlw	0	; case 0
  5681  00305E  B4D8               	btfsc	status,2,c
  5682  003060  D76F               	goto	l7395
  5683  003062  0A01               	xorlw	1	; case 1
  5684  003064  B4D8               	btfsc	status,2,c
  5685  003066  D78B               	goto	l7407
  5686  003068                     l7449:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;train_move_left.c: 161: return(Return_Val);
  5690  003068  0100               	movlb	0	; () banked
  5691  00306A  51C0               	movf	Right_Mountain_From_The_Right@Return_Val& (0+255),w,b
  5692  00306C  0012               	return	
  5693  00306E                     __end_of_Right_Mountain_From_The_Right:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           postdec1	equ	0xFE5
  5702                           fsr1l	equ	0xFE1
  5703                           status	equ	0xFD8
  5704                           
  5705 ;; *************** function _Right_Mountain_From_The_Left *****************
  5706 ;; Defined at:
  5707 ;;		line 179 in file "../train_move_right.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  rc              1    wreg     unsigned char 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  rc              1   40[BANK0 ] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      unsigned char 
  5714 ;; Registers used:
  5715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5721 ;;      Params:         0       0       0       0       0       0       0       0       0
  5722 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5724 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5725 ;;Total ram usage:        1 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    8
  5728 ;; This function calls:
  5729 ;;		_GETxAPIxVAL
  5730 ;;		_SETxPWM
  5731 ;; This function is called by:
  5732 ;;		_Train_Path
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           	psect	text8
  5737  00306E                     __ptext8:
  5738                           	opt stack 0
  5739  00306E                     _Right_Mountain_From_The_Left:
  5740                           	opt stack 20
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;incstack = 0
  5744                           ;Right_Mountain_From_The_Left@rc stored from wreg
  5745  00306E  0100               	movlb	0	; () banked
  5746  003070  6FB7               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  5747                           
  5748                           ;train_move_right.c: 181: static char Return_Val = 1;
  5749                           ;train_move_right.c: 183: switch (Switch_Moutain){
  5750  003072  D08C               	goto	l7387
  5751  003074                     l7335:
  5752  003074  0E04               	movlw	4
  5753  003076  0100               	movlb	0	; () banked
  5754  003078  19B7               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5755  00307A  B4D8               	btfsc	status,2,c
  5756  00307C  D00D               	goto	l7341
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  5760                           
  5761                           ; BSR set to: 0
  5762                           
  5763                           ;train_move_right.c: 187: }
  5764                           
  5765                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;train_move_right.c: 185: Switch_Moutain = 1;
  5769  00307E  0E38               	movlw	56
  5770  003080  EC20  F01E         	call	_GETxAPIxVAL
  5771  003084  0100               	movlb	0	; () banked
  5772  003086  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5773  003088  0100               	movlb	0	; () banked
  5774  00308A  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  5775  00308C  0100               	movlb	0	; () banked
  5776  00308E  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5777  003090  0100               	movlb	0	; () banked
  5778  003092  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  5779  003094  A0D8               	btfss	status,0,c
  5780  003096  D009               	goto	l7343
  5781  003098                     l7341:
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;train_move_right.c: 189: Switch_Moutain = 1;
  5785  003098  0E01               	movlw	1
  5786  00309A  0100               	movlb	0	; () banked
  5787  00309C  6F80               	movwf	_Switch_Moutain& (0+255),b
  5788                           
  5789                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  5790  00309E  0E00               	movlw	0
  5791  0030A0  0100               	movlb	0	; () banked
  5792  0030A2  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  5793  0030A4  0E00               	movlw	0
  5794  0030A6  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  5795                           
  5796                           ;train_move_right.c: 191: }
  5797  0030A8  D06D               	goto	l7383
  5798  0030AA                     l7343:
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;train_move_right.c: 192: else{
  5802                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  5803  0030AA  0100               	movlb	0	; () banked
  5804  0030AC  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  5805  0030AE  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  5806                           
  5807                           ; BSR set to: 0
  5808  0030B0  D069               	goto	l7383
  5809  0030B2                     l7347:
  5810                           
  5811                           ; BSR set to: 0
  5812  0030B2  0E03               	movlw	3
  5813  0030B4  0100               	movlb	0	; () banked
  5814  0030B6  19B7               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5815  0030B8  A4D8               	btfss	status,2,c
  5816  0030BA  D027               	goto	l7365
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  5820  0030BC  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5821  0030C0  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5822  0030C4  0E01               	movlw	1
  5823  0030C6  0100               	movlb	0	; () banked
  5824  0030C8  6FB2               	movwf	SETxPWM@direction& (0+255),b
  5825  0030CA  EC46  F01B         	call	_SETxPWM	;wreg free
  5826                           
  5827                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  5828  0030CE  0E2F               	movlw	47
  5829  0030D0  EC20  F01E         	call	_GETxAPIxVAL
  5830  0030D4  0100               	movlb	0	; () banked
  5831  0030D6  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5832  0030D8  0100               	movlb	0	; () banked
  5833  0030DA  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5834  0030DC  0100               	movlb	0	; () banked
  5835  0030DE  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5836  0030E0  0100               	movlb	0	; () banked
  5837  0030E2  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5838  0030E4  B0D8               	btfsc	status,0,c
  5839  0030E6  D02C               	goto	l7371
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5843                           
  5844                           ; BSR set to: 0
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;train_move_right.c: 206: }
  5848                           
  5849                           ;train_move_right.c: 205: break;
  5850                           
  5851                           ;train_move_right.c: 204: Return_Val = 0;
  5852                           
  5853                           ;train_move_right.c: 203: Switch_Moutain = 0;
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;train_move_right.c: 201: {
  5857                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  5858  0030E8  0E1A               	movlw	26
  5859  0030EA  EC20  F01E         	call	_GETxAPIxVAL
  5860  0030EE  0100               	movlb	0	; () banked
  5861  0030F0  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5862  0030F2  0100               	movlb	0	; () banked
  5863  0030F4  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5864  0030F6  0100               	movlb	0	; () banked
  5865  0030F8  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5866  0030FA  0100               	movlb	0	; () banked
  5867  0030FC  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5868  0030FE  A0D8               	btfss	status,0,c
  5869  003100  D03E               	goto	l7381
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;train_move_right.c: 208: {
  5873                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  5874  003102  0100               	movlb	0	; () banked
  5875  003104  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5876  003106  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5877  003108  D034               	goto	l7379
  5878  00310A                     l7365:
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;train_move_right.c: 214: else if (rc == 4){
  5882  00310A  0E04               	movlw	4
  5883  00310C  0100               	movlb	0	; () banked
  5884  00310E  19B7               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5885  003110  A4D8               	btfss	status,2,c
  5886  003112  D038               	goto	l7383
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  5890  003114  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5891  003118  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5892  00311C  0E01               	movlw	1
  5893  00311E  0100               	movlb	0	; () banked
  5894  003120  6FB2               	movwf	SETxPWM@direction& (0+255),b
  5895  003122  EC46  F01B         	call	_SETxPWM	;wreg free
  5896                           
  5897                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  5898  003126  0E17               	movlw	23
  5899  003128  EC20  F01E         	call	_GETxAPIxVAL
  5900  00312C  0100               	movlb	0	; () banked
  5901  00312E  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5902  003130  0100               	movlb	0	; () banked
  5903  003132  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5904  003134  0100               	movlb	0	; () banked
  5905  003136  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5906  003138  0100               	movlb	0	; () banked
  5907  00313A  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5908  00313C  A0D8               	btfss	status,0,c
  5909  00313E  D008               	goto	l7375
  5910  003140                     l7371:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;train_move_right.c: 217: {
  5914                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  5915  003140  0E00               	movlw	0
  5916  003142  0100               	movlb	0	; () banked
  5917  003144  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5918                           
  5919                           ;train_move_right.c: 219: Switch_Moutain = 0;
  5920  003146  0E00               	movlw	0
  5921  003148  0100               	movlb	0	; () banked
  5922  00314A  6F80               	movwf	_Switch_Moutain& (0+255),b
  5923                           
  5924                           ;train_move_right.c: 220: Return_Val = 0;
  5925  00314C  0E00               	movlw	0
  5926  00314E  D01B               	goto	L81
  5927  003150                     l7375:
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5931  003150  0E1A               	movlw	26
  5932  003152  EC20  F01E         	call	_GETxAPIxVAL
  5933  003156  0100               	movlb	0	; () banked
  5934  003158  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  5935  00315A  0100               	movlb	0	; () banked
  5936  00315C  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5937  00315E  0100               	movlb	0	; () banked
  5938  003160  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5939  003162  0100               	movlb	0	; () banked
  5940  003164  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5941  003166  A0D8               	btfss	status,0,c
  5942  003168  D00A               	goto	l7381
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;train_move_right.c: 224: {
  5946                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  5947  00316A  0100               	movlb	0	; () banked
  5948  00316C  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5949  00316E  A0D8               	btfss	status,0,c
  5950  003170  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5951  003172                     l7379:
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  5955  003172  0E00               	movlw	0
  5956  003174  0100               	movlb	0	; () banked
  5957  003176  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5958  003178  0E00               	movlw	0
  5959  00317A  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5960                           
  5961                           ;train_move_right.c: 227: }
  5962  00317C  D003               	goto	l7383
  5963  00317E                     l7381:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  5967  00317E  0100               	movlb	0	; () banked
  5968  003180  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5969  003182  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5970  003184                     l7383:
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;train_move_right.c: 229: }
  5974                           ;train_move_right.c: 230: Return_Val = 1;
  5975  003184  0E01               	movlw	1
  5976  003186                     L81:
  5977  003186  0100               	movlb	0	; () banked
  5978  003188  6FBF               	movwf	Right_Mountain_From_The_Left@Return_Val& (0+255),b
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;train_move_right.c: 235: }
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;train_move_right.c: 234: break;
  5985                           
  5986                           ;train_move_right.c: 233: default:
  5987                           
  5988                           ;train_move_right.c: 231: break;
  5989  00318A  D008               	goto	l7389
  5990  00318C                     l7387:
  5991  00318C  0100               	movlb	0	; () banked
  5992  00318E  5180               	movf	_Switch_Moutain& (0+255),w,b
  5993                           
  5994                           ; Switch size 1, requested type "space"
  5995                           ; Number of cases is 2, Range of values is 0 to 1
  5996                           ; switch strategies available:
  5997                           ; Name         Instructions Cycles
  5998                           ; simple_byte            7     4 (average)
  5999                           ;	Chosen strategy is simple_byte
  6000  003190  0A00               	xorlw	0	; case 0
  6001  003192  B4D8               	btfsc	status,2,c
  6002  003194  D76F               	goto	l7335
  6003  003196  0A01               	xorlw	1	; case 1
  6004  003198  B4D8               	btfsc	status,2,c
  6005  00319A  D78B               	goto	l7347
  6006  00319C                     l7389:
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;train_move_right.c: 237: return(Return_Val);
  6010  00319C  0100               	movlb	0	; () banked
  6011  00319E  51BF               	movf	Right_Mountain_From_The_Left@Return_Val& (0+255),w,b
  6012  0031A0  0012               	return	
  6013  0031A2                     __end_of_Right_Mountain_From_The_Left:
  6014                           	opt stack 0
  6015                           tblptru	equ	0xFF8
  6016                           tblptrh	equ	0xFF7
  6017                           tblptrl	equ	0xFF6
  6018                           tablat	equ	0xFF5
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           postdec1	equ	0xFE5
  6022                           fsr1l	equ	0xFE1
  6023                           status	equ	0xFD8
  6024                           
  6025 ;; *************** function _Left_Mountain_From_The_Right *****************
  6026 ;; Defined at:
  6027 ;;		line 178 in file "../train_move_left.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  rc              1    wreg     unsigned char 
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;  rc              1   40[BANK0 ] unsigned char 
  6032 ;; Return value:  Size  Location     Type
  6033 ;;                  1    wreg      unsigned char 
  6034 ;; Registers used:
  6035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6041 ;;      Params:         0       0       0       0       0       0       0       0       0
  6042 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6044 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6045 ;;Total ram usage:        1 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; Hardware stack levels required when called:    8
  6048 ;; This function calls:
  6049 ;;		_GETxAPIxVAL
  6050 ;;		_SETxPWM
  6051 ;; This function is called by:
  6052 ;;		_Train_Path
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text9
  6057  0032D4                     __ptext9:
  6058                           	opt stack 0
  6059  0032D4                     _Left_Mountain_From_The_Right:
  6060                           	opt stack 20
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;incstack = 0
  6064                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6065  0032D4  0100               	movlb	0	; () banked
  6066  0032D6  6FB7               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6067                           
  6068                           ;train_move_left.c: 180: static char Return_Val = 1;
  6069                           ;train_move_left.c: 182: switch (Switch_Moutain){
  6070  0032D8  D08A               	goto	l7507
  6071  0032DA                     l7455:
  6072  0032DA  0100               	movlb	0	; () banked
  6073  0032DC  05B7               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6074  0032DE  B4D8               	btfsc	status,2,c
  6075  0032E0  D00D               	goto	l7461
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;train_move_left.c: 187: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6079                           
  6080                           ; BSR set to: 0
  6081                           
  6082                           ;train_move_left.c: 186: }
  6083                           
  6084                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;train_move_left.c: 184: Switch_Moutain = 1;
  6088  0032E2  0E3A               	movlw	58
  6089  0032E4  EC20  F01E         	call	_GETxAPIxVAL
  6090  0032E8  0100               	movlb	0	; () banked
  6091  0032EA  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6092  0032EC  0100               	movlb	0	; () banked
  6093  0032EE  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6094  0032F0  0100               	movlb	0	; () banked
  6095  0032F2  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6096  0032F4  0100               	movlb	0	; () banked
  6097  0032F6  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6098  0032F8  A0D8               	btfss	status,0,c
  6099  0032FA  D009               	goto	l7463
  6100  0032FC                     l7461:
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;train_move_left.c: 188: Switch_Moutain = 1;
  6104  0032FC  0E01               	movlw	1
  6105  0032FE  0100               	movlb	0	; () banked
  6106  003300  6F80               	movwf	_Switch_Moutain& (0+255),b
  6107                           
  6108                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  6109  003302  0E00               	movlw	0
  6110  003304  0100               	movlb	0	; () banked
  6111  003306  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6112  003308  0E00               	movlw	0
  6113  00330A  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  6114                           
  6115                           ;train_move_left.c: 190: }
  6116  00330C  D06C               	goto	l7503
  6117  00330E                     l7463:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;train_move_left.c: 191: else{
  6121                           ;train_move_left.c: 192: Mountain_Delay_Counter++;
  6122  00330E  0100               	movlb	0	; () banked
  6123  003310  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6124  003312  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6125                           
  6126                           ; BSR set to: 0
  6127  003314  D068               	goto	l7503
  6128  003316                     l7467:
  6129                           
  6130                           ; BSR set to: 0
  6131  003316  0E02               	movlw	2
  6132  003318  0100               	movlb	0	; () banked
  6133  00331A  19B7               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6134  00331C  A4D8               	btfss	status,2,c
  6135  00331E  D027               	goto	l7485
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;train_move_left.c: 198: SETxPWM(Train_Move_Pwm_Count, 0);
  6139  003320  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6140  003324  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6141  003328  0E00               	movlw	0
  6142  00332A  0100               	movlb	0	; () banked
  6143  00332C  6FB2               	movwf	SETxPWM@direction& (0+255),b
  6144  00332E  EC46  F01B         	call	_SETxPWM	;wreg free
  6145                           
  6146                           ;train_move_left.c: 199: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6147  003332  0E34               	movlw	52
  6148  003334  EC20  F01E         	call	_GETxAPIxVAL
  6149  003338  0100               	movlb	0	; () banked
  6150  00333A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6151  00333C  0100               	movlb	0	; () banked
  6152  00333E  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6153  003340  0100               	movlb	0	; () banked
  6154  003342  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6155  003344  0100               	movlb	0	; () banked
  6156  003346  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6157  003348  B0D8               	btfsc	status,0,c
  6158  00334A  D02B               	goto	l7491
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;train_move_left.c: 206: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6162                           
  6163                           ; BSR set to: 0
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;train_move_left.c: 205: }
  6167                           
  6168                           ;train_move_left.c: 204: break;
  6169                           
  6170                           ;train_move_left.c: 203: Return_Val = 0;
  6171                           
  6172                           ;train_move_left.c: 202: Switch_Moutain = 0;
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;train_move_left.c: 200: {
  6176                           ;train_move_left.c: 201: Switch_Train_Move = 0;
  6177  00334C  0E1A               	movlw	26
  6178  00334E  EC20  F01E         	call	_GETxAPIxVAL
  6179  003352  0100               	movlb	0	; () banked
  6180  003354  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6181  003356  0100               	movlb	0	; () banked
  6182  003358  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6183  00335A  0100               	movlb	0	; () banked
  6184  00335C  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6185  00335E  0100               	movlb	0	; () banked
  6186  003360  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6187  003362  A0D8               	btfss	status,0,c
  6188  003364  D03D               	goto	l7501
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;train_move_left.c: 207: {
  6192                           ;train_move_left.c: 208: Train_Move_Pwm_Count++;
  6193  003366  0100               	movlb	0	; () banked
  6194  003368  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6195  00336A  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6196  00336C  D033               	goto	l7499
  6197  00336E                     l7485:
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;train_move_left.c: 213: else if (rc == 1){
  6201  00336E  0100               	movlb	0	; () banked
  6202  003370  05B7               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6203  003372  A4D8               	btfss	status,2,c
  6204  003374  D038               	goto	l7503
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;train_move_left.c: 214: SETxPWM(Train_Move_Pwm_Count, 0);
  6208  003376  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6209  00337A  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6210  00337E  0E00               	movlw	0
  6211  003380  0100               	movlb	0	; () banked
  6212  003382  6FB2               	movwf	SETxPWM@direction& (0+255),b
  6213  003384  EC46  F01B         	call	_SETxPWM	;wreg free
  6214                           
  6215                           ;train_move_left.c: 215: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6216  003388  0E18               	movlw	24
  6217  00338A  EC20  F01E         	call	_GETxAPIxVAL
  6218  00338E  0100               	movlb	0	; () banked
  6219  003390  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6220  003392  0100               	movlb	0	; () banked
  6221  003394  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6222  003396  0100               	movlb	0	; () banked
  6223  003398  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6224  00339A  0100               	movlb	0	; () banked
  6225  00339C  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6226  00339E  A0D8               	btfss	status,0,c
  6227  0033A0  D008               	goto	l7495
  6228  0033A2                     l7491:
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;train_move_left.c: 216: {
  6232                           ;train_move_left.c: 217: Switch_Train_Move = 0;
  6233  0033A2  0E00               	movlw	0
  6234  0033A4  0100               	movlb	0	; () banked
  6235  0033A6  6F82               	movwf	_Switch_Train_Move& (0+255),b
  6236                           
  6237                           ;train_move_left.c: 218: Switch_Moutain = 0;
  6238  0033A8  0E00               	movlw	0
  6239  0033AA  0100               	movlb	0	; () banked
  6240  0033AC  6F80               	movwf	_Switch_Moutain& (0+255),b
  6241                           
  6242                           ;train_move_left.c: 219: Return_Val = 0;
  6243  0033AE  0E00               	movlw	0
  6244  0033B0  D01B               	goto	L84
  6245  0033B2                     l7495:
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;train_move_left.c: 222: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6249  0033B2  0E1A               	movlw	26
  6250  0033B4  EC20  F01E         	call	_GETxAPIxVAL
  6251  0033B8  0100               	movlb	0	; () banked
  6252  0033BA  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6253  0033BC  0100               	movlb	0	; () banked
  6254  0033BE  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6255  0033C0  0100               	movlb	0	; () banked
  6256  0033C2  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6257  0033C4  0100               	movlb	0	; () banked
  6258  0033C6  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6259  0033C8  A0D8               	btfss	status,0,c
  6260  0033CA  D00A               	goto	l7501
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;train_move_left.c: 223: {
  6264                           ;train_move_left.c: 224: Train_Move_Pwm_Count--;
  6265  0033CC  0100               	movlb	0	; () banked
  6266  0033CE  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6267  0033D0  A0D8               	btfss	status,0,c
  6268  0033D2  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6269  0033D4                     l7499:
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;train_move_left.c: 225: Train_Move_Pwm_Fast_Count = 0;
  6273  0033D4  0E00               	movlw	0
  6274  0033D6  0100               	movlb	0	; () banked
  6275  0033D8  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6276  0033DA  0E00               	movlw	0
  6277  0033DC  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6278                           
  6279                           ;train_move_left.c: 226: }
  6280  0033DE  D003               	goto	l7503
  6281  0033E0                     l7501:
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;train_move_left.c: 227: else{Train_Move_Pwm_Fast_Count++;}
  6285  0033E0  0100               	movlb	0	; () banked
  6286  0033E2  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6287  0033E4  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6288  0033E6                     l7503:
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;train_move_left.c: 228: }
  6292                           ;train_move_left.c: 229: Return_Val = 1;
  6293  0033E6  0E01               	movlw	1
  6294  0033E8                     L84:
  6295  0033E8  0100               	movlb	0	; () banked
  6296  0033EA  6FBE               	movwf	Left_Mountain_From_The_Right@Return_Val& (0+255),b
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;train_move_left.c: 234: }
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;train_move_left.c: 233: break;
  6303                           
  6304                           ;train_move_left.c: 232: default:
  6305                           
  6306                           ;train_move_left.c: 230: break;
  6307  0033EC  D008               	goto	l7509
  6308  0033EE                     l7507:
  6309  0033EE  0100               	movlb	0	; () banked
  6310  0033F0  5180               	movf	_Switch_Moutain& (0+255),w,b
  6311                           
  6312                           ; Switch size 1, requested type "space"
  6313                           ; Number of cases is 2, Range of values is 0 to 1
  6314                           ; switch strategies available:
  6315                           ; Name         Instructions Cycles
  6316                           ; simple_byte            7     4 (average)
  6317                           ;	Chosen strategy is simple_byte
  6318  0033F2  0A00               	xorlw	0	; case 0
  6319  0033F4  B4D8               	btfsc	status,2,c
  6320  0033F6  D771               	goto	l7455
  6321  0033F8  0A01               	xorlw	1	; case 1
  6322  0033FA  B4D8               	btfsc	status,2,c
  6323  0033FC  D78C               	goto	l7467
  6324  0033FE                     l7509:
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;train_move_left.c: 236: return(Return_Val);
  6328  0033FE  0100               	movlb	0	; () banked
  6329  003400  51BE               	movf	Left_Mountain_From_The_Right@Return_Val& (0+255),w,b
  6330  003402  0012               	return	
  6331  003404                     __end_of_Left_Mountain_From_The_Right:
  6332                           	opt stack 0
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           postinc0	equ	0xFEE
  6338                           wreg	equ	0xFE8
  6339                           postdec1	equ	0xFE5
  6340                           fsr1l	equ	0xFE1
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function _Left_Mountain_From_The_Left *****************
  6344 ;; Defined at:
  6345 ;;		line 104 in file "../train_move_right.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  rc              1    wreg     unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  rc              1   40[BANK0 ] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      unsigned char 
  6352 ;; Registers used:
  6353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6359 ;;      Params:         0       0       0       0       0       0       0       0       0
  6360 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6362 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6363 ;;Total ram usage:        1 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    8
  6366 ;; This function calls:
  6367 ;;		_GETxAPIxVAL
  6368 ;;		_SETxPWM
  6369 ;; This function is called by:
  6370 ;;		_Train_Path
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text10
  6375  0031A2                     __ptext10:
  6376                           	opt stack 0
  6377  0031A2                     _Left_Mountain_From_The_Left:
  6378                           	opt stack 20
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;incstack = 0
  6382                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6383  0031A2  0100               	movlb	0	; () banked
  6384  0031A4  6FB7               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6385                           
  6386                           ;train_move_right.c: 106: static char Return_Val = 1;
  6387                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6388  0031A6  D08B               	goto	l7327
  6389  0031A8                     l7275:
  6390  0031A8  0E02               	movlw	2
  6391  0031AA  0100               	movlb	0	; () banked
  6392  0031AC  19B7               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6393  0031AE  B4D8               	btfsc	status,2,c
  6394  0031B0  D00D               	goto	l7281
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6398                           
  6399                           ; BSR set to: 0
  6400                           
  6401                           ;train_move_right.c: 112: }
  6402                           
  6403                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6407  0031B2  0E3B               	movlw	59
  6408  0031B4  EC20  F01E         	call	_GETxAPIxVAL
  6409  0031B8  0100               	movlb	0	; () banked
  6410  0031BA  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6411  0031BC  0100               	movlb	0	; () banked
  6412  0031BE  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6413  0031C0  0100               	movlb	0	; () banked
  6414  0031C2  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6415  0031C4  0100               	movlb	0	; () banked
  6416  0031C6  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6417  0031C8  A0D8               	btfss	status,0,c
  6418  0031CA  D009               	goto	l7283
  6419  0031CC                     l7281:
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6423  0031CC  0E01               	movlw	1
  6424  0031CE  0100               	movlb	0	; () banked
  6425  0031D0  6F80               	movwf	_Switch_Moutain& (0+255),b
  6426                           
  6427                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6428  0031D2  0E00               	movlw	0
  6429  0031D4  0100               	movlb	0	; () banked
  6430  0031D6  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6431  0031D8  0E00               	movlw	0
  6432  0031DA  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  6433                           
  6434                           ;train_move_right.c: 116: }
  6435  0031DC  D06C               	goto	l7323
  6436  0031DE                     l7283:
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;train_move_right.c: 117: else{
  6440                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  6441  0031DE  0100               	movlb	0	; () banked
  6442  0031E0  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6443  0031E2  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6444                           
  6445                           ; BSR set to: 0
  6446  0031E4  D068               	goto	l7323
  6447  0031E6                     l7287:
  6448                           
  6449                           ; BSR set to: 0
  6450  0031E6  0100               	movlb	0	; () banked
  6451  0031E8  05B7               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6452  0031EA  A4D8               	btfss	status,2,c
  6453  0031EC  D028               	goto	l7305
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  6457  0031EE  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6458  0031F2  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6459  0031F6  0E01               	movlw	1
  6460  0031F8  0100               	movlb	0	; () banked
  6461  0031FA  6FB2               	movwf	SETxPWM@direction& (0+255),b
  6462  0031FC  EC46  F01B         	call	_SETxPWM	;wreg free
  6463                           
  6464                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  6465  003200  0E31               	movlw	49
  6466  003202  EC20  F01E         	call	_GETxAPIxVAL
  6467  003206  0100               	movlb	0	; () banked
  6468  003208  5172               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6469  00320A  0100               	movlb	0	; () banked
  6470  00320C  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6471  00320E  0100               	movlb	0	; () banked
  6472  003210  5173               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6473  003212  0100               	movlb	0	; () banked
  6474  003214  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6475  003216  B0D8               	btfsc	status,0,c
  6476  003218  D02D               	goto	l7311
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6480                           
  6481                           ; BSR set to: 0
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;train_move_right.c: 131: }
  6485                           
  6486                           ;train_move_right.c: 130: break;
  6487                           
  6488                           ;train_move_right.c: 129: Return_Val = 0;
  6489                           
  6490                           ;train_move_right.c: 128: Switch_Moutain = 0;
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;train_move_right.c: 126: {
  6494                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  6495  00321A  0E1A               	movlw	26
  6496  00321C  EC20  F01E         	call	_GETxAPIxVAL
  6497  003220  0100               	movlb	0	; () banked
  6498  003222  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6499  003224  0100               	movlb	0	; () banked
  6500  003226  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6501  003228  0100               	movlb	0	; () banked
  6502  00322A  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6503  00322C  0100               	movlb	0	; () banked
  6504  00322E  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6505  003230  A0D8               	btfss	status,0,c
  6506  003232  D03E               	goto	l7321
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;train_move_right.c: 133: {
  6510                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  6511  003234  0100               	movlb	0	; () banked
  6512  003236  0772               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6513  003238  A0D8               	btfss	status,0,c
  6514  00323A  0773               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6515  00323C  D033               	goto	l7319
  6516  00323E                     l7305:
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;train_move_right.c: 139: else if (rc == 2){
  6520  00323E  0E02               	movlw	2
  6521  003240  0100               	movlb	0	; () banked
  6522  003242  19B7               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6523  003244  A4D8               	btfss	status,2,c
  6524  003246  D037               	goto	l7323
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  6528  003248  C072  F0B0         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6529  00324C  C073  F0B1         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6530  003250  0E01               	movlw	1
  6531  003252  0100               	movlb	0	; () banked
  6532  003254  6FB2               	movwf	SETxPWM@direction& (0+255),b
  6533  003256  EC46  F01B         	call	_SETxPWM	;wreg free
  6534                           
  6535                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  6536  00325A  0E17               	movlw	23
  6537  00325C  EC20  F01E         	call	_GETxAPIxVAL
  6538  003260  0100               	movlb	0	; () banked
  6539  003262  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6540  003264  0100               	movlb	0	; () banked
  6541  003266  5D72               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6542  003268  0100               	movlb	0	; () banked
  6543  00326A  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6544  00326C  0100               	movlb	0	; () banked
  6545  00326E  5973               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6546  003270  A0D8               	btfss	status,0,c
  6547  003272  D008               	goto	l7315
  6548  003274                     l7311:
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;train_move_right.c: 142: {
  6552                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  6553  003274  0E00               	movlw	0
  6554  003276  0100               	movlb	0	; () banked
  6555  003278  6F82               	movwf	_Switch_Train_Move& (0+255),b
  6556                           
  6557                           ;train_move_right.c: 144: Switch_Moutain = 0;
  6558  00327A  0E00               	movlw	0
  6559  00327C  0100               	movlb	0	; () banked
  6560  00327E  6F80               	movwf	_Switch_Moutain& (0+255),b
  6561                           
  6562                           ;train_move_right.c: 145: Return_Val = 0;
  6563  003280  0E00               	movlw	0
  6564  003282  D01A               	goto	L87
  6565  003284                     l7315:
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6569  003284  0E1A               	movlw	26
  6570  003286  EC20  F01E         	call	_GETxAPIxVAL
  6571  00328A  0100               	movlb	0	; () banked
  6572  00328C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  6573  00328E  0100               	movlb	0	; () banked
  6574  003290  5D74               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6575  003292  0100               	movlb	0	; () banked
  6576  003294  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6577  003296  0100               	movlb	0	; () banked
  6578  003298  5975               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6579  00329A  A0D8               	btfss	status,0,c
  6580  00329C  D009               	goto	l7321
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;train_move_right.c: 149: {
  6584                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  6585  00329E  0100               	movlb	0	; () banked
  6586  0032A0  4B72               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6587  0032A2  2B73               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6588  0032A4                     l7319:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  6592  0032A4  0E00               	movlw	0
  6593  0032A6  0100               	movlb	0	; () banked
  6594  0032A8  6F75               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6595  0032AA  0E00               	movlw	0
  6596  0032AC  6F74               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6597                           
  6598                           ;train_move_right.c: 152: }
  6599  0032AE  D003               	goto	l7323
  6600  0032B0                     l7321:
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  6604  0032B0  0100               	movlb	0	; () banked
  6605  0032B2  4B74               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6606  0032B4  2B75               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6607  0032B6                     l7323:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;train_move_right.c: 154: }
  6611                           ;train_move_right.c: 155: Return_Val = 1;
  6612  0032B6  0E01               	movlw	1
  6613  0032B8                     L87:
  6614  0032B8  0100               	movlb	0	; () banked
  6615  0032BA  6FBD               	movwf	Left_Mountain_From_The_Left@Return_Val& (0+255),b
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;train_move_right.c: 160: }
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;train_move_right.c: 159: break;
  6622                           
  6623                           ;train_move_right.c: 158: default:
  6624                           
  6625                           ;train_move_right.c: 156: break;
  6626  0032BC  D008               	goto	l7329
  6627  0032BE                     l7327:
  6628  0032BE  0100               	movlb	0	; () banked
  6629  0032C0  5180               	movf	_Switch_Moutain& (0+255),w,b
  6630                           
  6631                           ; Switch size 1, requested type "space"
  6632                           ; Number of cases is 2, Range of values is 0 to 1
  6633                           ; switch strategies available:
  6634                           ; Name         Instructions Cycles
  6635                           ; simple_byte            7     4 (average)
  6636                           ;	Chosen strategy is simple_byte
  6637  0032C2  0A00               	xorlw	0	; case 0
  6638  0032C4  B4D8               	btfsc	status,2,c
  6639  0032C6  D770               	goto	l7275
  6640  0032C8  0A01               	xorlw	1	; case 1
  6641  0032CA  B4D8               	btfsc	status,2,c
  6642  0032CC  D78C               	goto	l7287
  6643  0032CE                     l7329:
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;train_move_right.c: 162: return(Return_Val);
  6647  0032CE  0100               	movlb	0	; () banked
  6648  0032D0  51BD               	movf	Left_Mountain_From_The_Left@Return_Val& (0+255),w,b
  6649  0032D2  0012               	return	
  6650  0032D4                     __end_of_Left_Mountain_From_The_Left:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           postinc0	equ	0xFEE
  6657                           wreg	equ	0xFE8
  6658                           postdec1	equ	0xFE5
  6659                           fsr1l	equ	0xFE1
  6660                           status	equ	0xFD8
  6661                           
  6662 ;; *************** function _SETxPWM *****************
  6663 ;; Defined at:
  6664 ;;		line 20 in file "../set_pwm.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;  speed           2   33[BANK0 ] unsigned int 
  6667 ;;  direction       1   35[BANK0 ] unsigned char 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  pwm_speed       2   38[BANK0 ] unsigned int 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      void 
  6672 ;; Registers used:
  6673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6679 ;;      Params:         0       3       0       0       0       0       0       0       0
  6680 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6681 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6682 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6683 ;;Total ram usage:        7 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    7
  6686 ;; This function calls:
  6687 ;;		_SETxAPIxVAL
  6688 ;; This function is called by:
  6689 ;;		_Train_Move_Left_Start
  6690 ;;		_Right_Mountain_From_The_Right
  6691 ;;		_Left_Mountain_From_The_Right
  6692 ;;		_Train_Move_Left_Brake
  6693 ;;		_Train_Move_Right_Start
  6694 ;;		_Left_Mountain_From_The_Left
  6695 ;;		_Right_Mountain_From_The_Left
  6696 ;;		_Train_Move_Right_Brake
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text11
  6701  00368C                     __ptext11:
  6702                           	opt stack 0
  6703  00368C                     _SETxPWM:
  6704                           	opt stack 20
  6705                           
  6706                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;incstack = 0
  6710  00368C  0E01               	movlw	1
  6711  00368E  0100               	movlb	0	; () banked
  6712  003690  6FB6               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6713  003692  69B5               	setf	SETxPWM@pwm_speed& (0+255),b
  6714                           
  6715                           ;set_pwm.c: 24: if (direction == 0 && speed > 0){
  6716  003694  0100               	movlb	0	; () banked
  6717  003696  51B2               	movf	SETxPWM@direction& (0+255),w,b
  6718  003698  0100               	movlb	0	; () banked
  6719  00369A  A4D8               	btfss	status,2,c
  6720  00369C  D025               	goto	l6975
  6721                           
  6722                           ; BSR set to: 0
  6723  00369E  0100               	movlb	0	; () banked
  6724  0036A0  51B0               	movf	SETxPWM@speed& (0+255),w,b
  6725  0036A2  0100               	movlb	0	; () banked
  6726  0036A4  11B1               	iorwf	(SETxPWM@speed+1)& (0+255),w,b
  6727  0036A6  B4D8               	btfsc	status,2,c
  6728  0036A8  D01F               	goto	l6975
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;set_pwm.c: 25: pwm_speed = 511 - (speed * 2);
  6732  0036AA  C0B0  F0B3         	movff	SETxPWM@speed,??_SETxPWM
  6733  0036AE  C0B1  F0B4         	movff	SETxPWM@speed+1,??_SETxPWM+1
  6734  0036B2  90D8               	bcf	status,0,c
  6735  0036B4  0100               	movlb	0	; () banked
  6736  0036B6  37B3               	rlcf	??_SETxPWM& (0+255),f,b
  6737  0036B8  37B4               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  6738  0036BA  0100               	movlb	0	; () banked
  6739  0036BC  1FB3               	comf	??_SETxPWM& (0+255),f,b
  6740  0036BE  1FB4               	comf	(??_SETxPWM+1)& (0+255),f,b
  6741  0036C0  4BB3               	infsnz	??_SETxPWM& (0+255),f,b
  6742  0036C2  2BB4               	incf	(??_SETxPWM+1)& (0+255),f,b
  6743  0036C4  0EFF               	movlw	255
  6744  0036C6  0100               	movlb	0	; () banked
  6745  0036C8  25B3               	addwf	??_SETxPWM& (0+255),w,b
  6746  0036CA  0100               	movlb	0	; () banked
  6747  0036CC  6FB5               	movwf	SETxPWM@pwm_speed& (0+255),b
  6748  0036CE  0E01               	movlw	1
  6749  0036D0  0100               	movlb	0	; () banked
  6750  0036D2  21B4               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  6751  0036D4  0100               	movlb	0	; () banked
  6752  0036D6  6FB6               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;set_pwm.c: 26: SETxAPIxVAL(68, pwm_speed);
  6756  0036D8  C0B5  F0AB         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  6757  0036DC  C0B6  F0AC         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  6758  0036E0  0E44               	movlw	68
  6759  0036E2  ECF1  F01C         	call	_SETxAPIxVAL
  6760                           
  6761                           ;set_pwm.c: 28: }
  6762  0036E6  0012               	return	
  6763  0036E8                     l6975:
  6764                           
  6765                           ;set_pwm.c: 29: else if (direction == 1 && speed > 0){
  6766  0036E8  0100               	movlb	0	; () banked
  6767  0036EA  05B2               	decf	SETxPWM@direction& (0+255),w,b
  6768  0036EC  A4D8               	btfss	status,2,c
  6769  0036EE  0012               	return	
  6770                           
  6771                           ; BSR set to: 0
  6772  0036F0  0100               	movlb	0	; () banked
  6773  0036F2  51B0               	movf	SETxPWM@speed& (0+255),w,b
  6774  0036F4  0100               	movlb	0	; () banked
  6775  0036F6  11B1               	iorwf	(SETxPWM@speed+1)& (0+255),w,b
  6776  0036F8  B4D8               	btfsc	status,2,c
  6777  0036FA  0012               	return	
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;set_pwm.c: 30: pwm_speed = 511 + (speed * 2);
  6781  0036FC  C0B0  F0B3         	movff	SETxPWM@speed,??_SETxPWM
  6782  003700  C0B1  F0B4         	movff	SETxPWM@speed+1,??_SETxPWM+1
  6783  003704  90D8               	bcf	status,0,c
  6784  003706  0100               	movlb	0	; () banked
  6785  003708  37B3               	rlcf	??_SETxPWM& (0+255),f,b
  6786  00370A  37B4               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  6787  00370C  0EFF               	movlw	255
  6788  00370E  0100               	movlb	0	; () banked
  6789  003710  25B3               	addwf	??_SETxPWM& (0+255),w,b
  6790  003712  0100               	movlb	0	; () banked
  6791  003714  6FB5               	movwf	SETxPWM@pwm_speed& (0+255),b
  6792  003716  0E01               	movlw	1
  6793  003718  0100               	movlb	0	; () banked
  6794  00371A  21B4               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  6795  00371C  0100               	movlb	0	; () banked
  6796  00371E  6FB6               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;set_pwm.c: 31: SETxAPIxVAL(68, pwm_speed);
  6800  003720  C0B5  F0AB         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  6801  003724  C0B6  F0AC         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  6802  003728  0E44               	movlw	68
  6803  00372A  ECF1  F01C         	call	_SETxAPIxVAL
  6804  00372E  0012               	return	
  6805  003730                     __end_of_SETxPWM:
  6806                           	opt stack 0
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           postinc0	equ	0xFEE
  6812                           wreg	equ	0xFE8
  6813                           postdec1	equ	0xFE5
  6814                           fsr1l	equ	0xFE1
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _Junction *****************
  6818 ;; Defined at:
  6819 ;;		line 23 in file "../junction.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  Junction_Lef    1    wreg     unsigned char 
  6822 ;;  Straight_Ben    1   33[BANK0 ] unsigned char 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  Junction_Lef    1   34[BANK0 ] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      unsigned char 
  6827 ;; Registers used:
  6828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6834 ;;      Params:         0       1       0       0       0       0       0       0       0
  6835 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6837 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6838 ;;Total ram usage:        2 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    7
  6841 ;; This function calls:
  6842 ;;		_GETxAPIxVAL
  6843 ;;		_SETxAPIxVAL
  6844 ;; This function is called by:
  6845 ;;		_Update_StateMchn
  6846 ;;		_Train_Path
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text12
  6851  002B88                     __ptext12:
  6852                           	opt stack 0
  6853  002B88                     _Junction:
  6854                           	opt stack 21
  6855                           
  6856                           ;incstack = 0
  6857                           ;Junction@Junction_Left_Right stored from wreg
  6858  002B88  0100               	movlb	0	; () banked
  6859  002B8A  6FB1               	movwf	Junction@Junction_Left_Right& (0+255),b
  6860                           
  6861                           ;junction.c: 25: static char Return_Val = 1;
  6862                           ;junction.c: 26: static unsigned int Junction_Switch_Time = 0;
  6863                           ;junction.c: 28: switch (Switch_Junction)
  6864  002B8C  D08E               	goto	l7043
  6865  002B8E                     l7003:
  6866  002B8E  0E01               	movlw	1
  6867  002B90  0100               	movlb	0	; () banked
  6868  002B92  6FBC               	movwf	Junction@Return_Val& (0+255),b
  6869                           
  6870                           ;junction.c: 31: switch (Junction_Left_Right)
  6871  002B94  D036               	goto	l7023
  6872  002B96                     l7005:
  6873                           
  6874                           ; BSR set to: 0
  6875  002B96  0E00               	movlw	0
  6876  002B98  0100               	movlb	0	; () banked
  6877  002B9A  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6878  002B9C  0E01               	movlw	1
  6879  002B9E  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  6880  002BA0  0E40               	movlw	64
  6881  002BA2  ECF1  F01C         	call	_SETxAPIxVAL
  6882  002BA6  D035               	goto	l7025
  6883  002BA8                     l7007:
  6884  002BA8  0E00               	movlw	0
  6885  002BAA  0100               	movlb	0	; () banked
  6886  002BAC  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6887  002BAE  0E01               	movlw	1
  6888  002BB0  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  6889  002BB2  0E41               	movlw	65
  6890  002BB4  ECF1  F01C         	call	_SETxAPIxVAL
  6891                           
  6892                           ;junction.c: 38: }
  6893                           
  6894                           ;junction.c: 37: default : break;
  6895  002BB8  D02C               	goto	l7025
  6896  002BBA                     l7011:
  6897  002BBA  0100               	movlb	0	; () banked
  6898  002BBC  51B0               	movf	Junction@Straight_Bend& (0+255),w,b
  6899                           
  6900                           ; Switch size 1, requested type "space"
  6901                           ; Number of cases is 2, Range of values is 0 to 1
  6902                           ; switch strategies available:
  6903                           ; Name         Instructions Cycles
  6904                           ; simple_byte            7     4 (average)
  6905                           ;	Chosen strategy is simple_byte
  6906  002BBE  0A00               	xorlw	0	; case 0
  6907  002BC0  B4D8               	btfsc	status,2,c
  6908  002BC2  D7E9               	goto	l7005
  6909  002BC4  0A01               	xorlw	1	; case 1
  6910  002BC6  B4D8               	btfsc	status,2,c
  6911  002BC8  D7EF               	goto	l7007
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;junction.c: 39: break;
  6915  002BCA  D023               	goto	l7025
  6916  002BCC                     l7013:
  6917                           
  6918                           ; BSR set to: 0
  6919  002BCC  0E00               	movlw	0
  6920  002BCE  0100               	movlb	0	; () banked
  6921  002BD0  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6922  002BD2  0E01               	movlw	1
  6923  002BD4  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  6924  002BD6  0E42               	movlw	66
  6925  002BD8  ECF1  F01C         	call	_SETxAPIxVAL
  6926  002BDC  D01A               	goto	l7025
  6927  002BDE                     l7015:
  6928  002BDE  0E00               	movlw	0
  6929  002BE0  0100               	movlb	0	; () banked
  6930  002BE2  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6931  002BE4  0E01               	movlw	1
  6932  002BE6  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  6933  002BE8  0E43               	movlw	67
  6934  002BEA  ECF1  F01C         	call	_SETxAPIxVAL
  6935                           
  6936                           ;junction.c: 46: }
  6937                           
  6938                           ;junction.c: 45: default : break;
  6939  002BEE  D011               	goto	l7025
  6940  002BF0                     l7019:
  6941  002BF0  0100               	movlb	0	; () banked
  6942  002BF2  51B0               	movf	Junction@Straight_Bend& (0+255),w,b
  6943                           
  6944                           ; Switch size 1, requested type "space"
  6945                           ; Number of cases is 2, Range of values is 0 to 1
  6946                           ; switch strategies available:
  6947                           ; Name         Instructions Cycles
  6948                           ; simple_byte            7     4 (average)
  6949                           ;	Chosen strategy is simple_byte
  6950  002BF4  0A00               	xorlw	0	; case 0
  6951  002BF6  B4D8               	btfsc	status,2,c
  6952  002BF8  D7E9               	goto	l7013
  6953  002BFA  0A01               	xorlw	1	; case 1
  6954  002BFC  B4D8               	btfsc	status,2,c
  6955  002BFE  D7EF               	goto	l7015
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;junction.c: 50: }
  6959                           
  6960                           ; BSR set to: 0
  6961                           
  6962                           ;junction.c: 49: default : break;
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;junction.c: 47: break;
  6966  002C00  D008               	goto	l7025
  6967  002C02                     l7023:
  6968                           
  6969                           ; BSR set to: 0
  6970  002C02  0100               	movlb	0	; () banked
  6971  002C04  51B1               	movf	Junction@Junction_Left_Right& (0+255),w,b
  6972                           
  6973                           ; Switch size 1, requested type "space"
  6974                           ; Number of cases is 2, Range of values is 0 to 1
  6975                           ; switch strategies available:
  6976                           ; Name         Instructions Cycles
  6977                           ; simple_byte            7     4 (average)
  6978                           ;	Chosen strategy is simple_byte
  6979  002C06  0A00               	xorlw	0	; case 0
  6980  002C08  B4D8               	btfsc	status,2,c
  6981  002C0A  D7D7               	goto	l7011
  6982  002C0C  0A01               	xorlw	1	; case 1
  6983  002C0E  B4D8               	btfsc	status,2,c
  6984  002C10  D7EF               	goto	l7019
  6985  002C12                     l7025:
  6986                           
  6987                           ;junction.c: 51: Switch_Junction = 1;
  6988  002C12  0E01               	movlw	1
  6989  002C14  0100               	movlb	0	; () banked
  6990  002C16  6F7F               	movwf	_Switch_Junction& (0+255),b
  6991                           
  6992                           ;junction.c: 52: break;
  6993  002C18  D053               	goto	l7045
  6994  002C1A                     l7027:
  6995                           
  6996                           ; BSR set to: 0
  6997  002C1A  0E13               	movlw	19
  6998  002C1C  EC20  F01E         	call	_GETxAPIxVAL
  6999  002C20  0100               	movlb	0	; () banked
  7000  002C22  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  7001  002C24  0100               	movlb	0	; () banked
  7002  002C26  5D60               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7003  002C28  0100               	movlb	0	; () banked
  7004  002C2A  5190               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7005  002C2C  0100               	movlb	0	; () banked
  7006  002C2E  5961               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7007  002C30  A0D8               	btfss	status,0,c
  7008  002C32  D00A               	goto	l7031
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;junction.c: 55: {
  7012                           ;junction.c: 56: Switch_Junction = 2;
  7013  002C34  0E02               	movlw	2
  7014  002C36  0100               	movlb	0	; () banked
  7015  002C38  6F7F               	movwf	_Switch_Junction& (0+255),b
  7016                           
  7017                           ;junction.c: 57: Junction_Switch_Time = 0;
  7018  002C3A  0E00               	movlw	0
  7019  002C3C  0100               	movlb	0	; () banked
  7020  002C3E  6F61               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7021  002C40  0E00               	movlw	0
  7022  002C42  6F60               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7023                           
  7024                           ;junction.c: 58: Return_Val = 1;
  7025  002C44  0E01               	movlw	1
  7026  002C46  D02E               	goto	L88
  7027  002C48                     l7031:
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;junction.c: 60: }
  7031                           ;junction.c: 61: Return_Val = 1;
  7032  002C48  0E01               	movlw	1
  7033  002C4A  0100               	movlb	0	; () banked
  7034  002C4C  6FBC               	movwf	Junction@Return_Val& (0+255),b
  7035                           
  7036                           ;junction.c: 62: Switch_Junction = 1;
  7037  002C4E  0E01               	movlw	1
  7038  002C50  0100               	movlb	0	; () banked
  7039  002C52  6F7F               	movwf	_Switch_Junction& (0+255),b
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;junction.c: 63: Junction_Switch_Time++;
  7043  002C54  0100               	movlb	0	; () banked
  7044  002C56  4B60               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7045  002C58  2B61               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7046                           
  7047                           ;junction.c: 64: break;
  7048  002C5A  D032               	goto	l7045
  7049  002C5C                     l7035:
  7050                           
  7051                           ; BSR set to: 0
  7052  002C5C  0E00               	movlw	0
  7053  002C5E  0100               	movlb	0	; () banked
  7054  002C60  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7055  002C62  0E00               	movlw	0
  7056  002C64  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  7057  002C66  0E40               	movlw	64
  7058  002C68  ECF1  F01C         	call	_SETxAPIxVAL
  7059                           
  7060                           ;junction.c: 67: SETxAPIxVAL(65, 0);
  7061  002C6C  0E00               	movlw	0
  7062  002C6E  0100               	movlb	0	; () banked
  7063  002C70  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7064  002C72  0E00               	movlw	0
  7065  002C74  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  7066  002C76  0E41               	movlw	65
  7067  002C78  ECF1  F01C         	call	_SETxAPIxVAL
  7068                           
  7069                           ;junction.c: 68: SETxAPIxVAL(66,0);
  7070  002C7C  0E00               	movlw	0
  7071  002C7E  0100               	movlb	0	; () banked
  7072  002C80  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7073  002C82  0E00               	movlw	0
  7074  002C84  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  7075  002C86  0E42               	movlw	66
  7076  002C88  ECF1  F01C         	call	_SETxAPIxVAL
  7077                           
  7078                           ;junction.c: 69: SETxAPIxVAL(67,0);
  7079  002C8C  0E00               	movlw	0
  7080  002C8E  0100               	movlb	0	; () banked
  7081  002C90  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7082  002C92  0E00               	movlw	0
  7083  002C94  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  7084  002C96  0E43               	movlw	67
  7085  002C98  ECF1  F01C         	call	_SETxAPIxVAL
  7086                           
  7087                           ;junction.c: 70: Switch_Junction = 0;
  7088  002C9C  0E00               	movlw	0
  7089  002C9E  0100               	movlb	0	; () banked
  7090  002CA0  6F7F               	movwf	_Switch_Junction& (0+255),b
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;junction.c: 71: Return_Val = 0;
  7094  002CA2  0E00               	movlw	0
  7095  002CA4                     L88:
  7096  002CA4  0100               	movlb	0	; () banked
  7097  002CA6  6FBC               	movwf	Junction@Return_Val& (0+255),b
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;junction.c: 75: }
  7101                           
  7102                           ; BSR set to: 0
  7103                           
  7104                           ;junction.c: 74: default : break;
  7105                           
  7106                           ;junction.c: 72: break;
  7107  002CA8  D00B               	goto	l7045
  7108  002CAA                     l7043:
  7109  002CAA  0100               	movlb	0	; () banked
  7110  002CAC  517F               	movf	_Switch_Junction& (0+255),w,b
  7111                           
  7112                           ; Switch size 1, requested type "space"
  7113                           ; Number of cases is 3, Range of values is 0 to 2
  7114                           ; switch strategies available:
  7115                           ; Name         Instructions Cycles
  7116                           ; simple_byte           10     6 (average)
  7117                           ;	Chosen strategy is simple_byte
  7118  002CAE  0A00               	xorlw	0	; case 0
  7119  002CB0  B4D8               	btfsc	status,2,c
  7120  002CB2  D76D               	goto	l7003
  7121  002CB4  0A01               	xorlw	1	; case 1
  7122  002CB6  B4D8               	btfsc	status,2,c
  7123  002CB8  D7B0               	goto	l7027
  7124  002CBA  0A03               	xorlw	3	; case 2
  7125  002CBC  B4D8               	btfsc	status,2,c
  7126  002CBE  D7CE               	goto	l7035
  7127  002CC0                     l7045:
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;junction.c: 77: return (Return_Val);
  7131  002CC0  0100               	movlb	0	; () banked
  7132  002CC2  51BC               	movf	Junction@Return_Val& (0+255),w,b
  7133  002CC4  0012               	return	
  7134  002CC6                     __end_of_Junction:
  7135                           	opt stack 0
  7136                           tblptru	equ	0xFF8
  7137                           tblptrh	equ	0xFF7
  7138                           tblptrl	equ	0xFF6
  7139                           tablat	equ	0xFF5
  7140                           postinc0	equ	0xFEE
  7141                           wreg	equ	0xFE8
  7142                           postdec1	equ	0xFE5
  7143                           fsr1l	equ	0xFE1
  7144                           status	equ	0xFD8
  7145                           
  7146 ;; *************** function _Red_Led *****************
  7147 ;; Defined at:
  7148 ;;		line 97 in file "../io.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  Operation       1    wreg     unsigned char 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  Operation       1   31[COMRAM] unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, status,2, status,0
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7162 ;;      Params:         0       0       0       0       0       0       0       0       0
  7163 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7165 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7166 ;;Total ram usage:        1 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    3
  7169 ;; This function calls:
  7170 ;;		Nothing
  7171 ;; This function is called by:
  7172 ;;		_Update_StateMchn
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           	psect	text13
  7177  003730                     __ptext13:
  7178                           	opt stack 0
  7179  003730                     _Red_Led:
  7180                           	opt stack 26
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;incstack = 0
  7184                           ;Red_Led@Operation stored from wreg
  7185  003730  6E20               	movwf	Red_Led@Operation,c
  7186                           
  7187                           ;io.c: 99: switch(Operation)
  7188  003732  D030               	goto	l5411
  7189  003734                     l751:
  7190  003734  9A83               	bcf	3971,5,c	;volatile
  7191  003736  0012               	return	
  7192  003738                     l753:
  7193  003738  8A83               	bsf	3971,5,c	;volatile
  7194  00373A  0012               	return	
  7195  00373C                     l5389:
  7196  00373C  4A23               	infsnz	_Red_Led_Counter,f,c
  7197  00373E  2A24               	incf	_Red_Led_Counter+1,f,c
  7198                           
  7199                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7200  003740  0EB8               	movlw	184
  7201  003742  5C23               	subwf	_Red_Led_Counter,w,c
  7202  003744  0E0B               	movlw	11
  7203  003746  5824               	subwfb	_Red_Led_Counter+1,w,c
  7204  003748  A0D8               	btfss	status,0,c
  7205  00374A  D004               	goto	l5395
  7206                           
  7207                           ;io.c: 107: {
  7208                           ;io.c: 108: Red_Led_Counter = 0;
  7209  00374C  0E00               	movlw	0
  7210  00374E  6E24               	movwf	_Red_Led_Counter+1,c
  7211  003750  0E00               	movlw	0
  7212  003752  6E23               	movwf	_Red_Led_Counter,c
  7213  003754                     l5395:
  7214                           
  7215                           ;io.c: 109: }
  7216                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7217  003754  0EDC               	movlw	220
  7218  003756  5C23               	subwf	_Red_Led_Counter,w,c
  7219  003758  0E05               	movlw	5
  7220  00375A  5824               	subwfb	_Red_Led_Counter+1,w,c
  7221  00375C  A0D8               	btfss	status,0,c
  7222  00375E  D002               	goto	l756
  7223                           
  7224                           ;io.c: 111: {
  7225                           ;io.c: 112: PORTDbits.RD5 = 1;
  7226  003760  8A83               	bsf	3971,5,c	;volatile
  7227                           
  7228                           ;io.c: 113: }
  7229  003762  0012               	return	
  7230  003764                     l756:
  7231                           
  7232                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7233  003764  9A83               	bcf	3971,5,c	;volatile
  7234                           
  7235                           ;io.c: 115: break;
  7236  003766  0012               	return	
  7237  003768                     l5399:
  7238  003768  4A23               	infsnz	_Red_Led_Counter,f,c
  7239  00376A  2A24               	incf	_Red_Led_Counter+1,f,c
  7240                           
  7241                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7242  00376C  0EE8               	movlw	232
  7243  00376E  5C23               	subwf	_Red_Led_Counter,w,c
  7244  003770  0E03               	movlw	3
  7245  003772  5824               	subwfb	_Red_Led_Counter+1,w,c
  7246  003774  A0D8               	btfss	status,0,c
  7247  003776  D004               	goto	l5405
  7248                           
  7249                           ;io.c: 119: {
  7250                           ;io.c: 120: Red_Led_Counter = 0;
  7251  003778  0E00               	movlw	0
  7252  00377A  6E24               	movwf	_Red_Led_Counter+1,c
  7253  00377C  0E00               	movlw	0
  7254  00377E  6E23               	movwf	_Red_Led_Counter,c
  7255  003780                     l5405:
  7256                           
  7257                           ;io.c: 121: }
  7258                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7259  003780  0EF4               	movlw	244
  7260  003782  5C23               	subwf	_Red_Led_Counter,w,c
  7261  003784  0E01               	movlw	1
  7262  003786  5824               	subwfb	_Red_Led_Counter+1,w,c
  7263  003788  A0D8               	btfss	status,0,c
  7264  00378A  D002               	goto	l760
  7265                           
  7266                           ;io.c: 123: {
  7267                           ;io.c: 124: PORTDbits.RD5 = 1;
  7268  00378C  8A83               	bsf	3971,5,c	;volatile
  7269                           
  7270                           ;io.c: 125: }
  7271  00378E  0012               	return	
  7272  003790                     l760:
  7273                           
  7274                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7275  003790  9A83               	bcf	3971,5,c	;volatile
  7276                           
  7277                           ;io.c: 130: }
  7278                           
  7279                           ;io.c: 129: default : break;
  7280                           
  7281                           ;io.c: 127: break;
  7282  003792  0012               	return	
  7283  003794                     l5411:
  7284  003794  5020               	movf	Red_Led@Operation,w,c
  7285                           
  7286                           ; Switch size 1, requested type "space"
  7287                           ; Number of cases is 4, Range of values is 0 to 3
  7288                           ; switch strategies available:
  7289                           ; Name         Instructions Cycles
  7290                           ; simple_byte           13     7 (average)
  7291                           ;	Chosen strategy is simple_byte
  7292  003796  0A00               	xorlw	0	; case 0
  7293  003798  B4D8               	btfsc	status,2,c
  7294  00379A  D7CC               	goto	l751
  7295  00379C  0A01               	xorlw	1	; case 1
  7296  00379E  B4D8               	btfsc	status,2,c
  7297  0037A0  D7CB               	goto	l753
  7298  0037A2  0A03               	xorlw	3	; case 2
  7299  0037A4  B4D8               	btfsc	status,2,c
  7300  0037A6  D7CA               	goto	l5389
  7301  0037A8  0A01               	xorlw	1	; case 3
  7302  0037AA  A4D8               	btfss	status,2,c
  7303  0037AC  0012               	return	
  7304  0037AE  D7DC               	goto	l5399
  7305  0037B0                     __end_of_Red_Led:
  7306                           	opt stack 0
  7307                           tblptru	equ	0xFF8
  7308                           tblptrh	equ	0xFF7
  7309                           tblptrl	equ	0xFF6
  7310                           tablat	equ	0xFF5
  7311                           postinc0	equ	0xFEE
  7312                           wreg	equ	0xFE8
  7313                           postdec1	equ	0xFE5
  7314                           fsr1l	equ	0xFE1
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function _Green_Led *****************
  7318 ;; Defined at:
  7319 ;;		line 47 in file "../io.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  Operation       1    wreg     unsigned char 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  Operation       1   31[COMRAM] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      void 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7333 ;;      Params:         0       0       0       0       0       0       0       0       0
  7334 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7336 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7337 ;;Total ram usage:        1 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    3
  7340 ;; This function calls:
  7341 ;;		Nothing
  7342 ;; This function is called by:
  7343 ;;		_Update_StateMchn
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           	psect	text14
  7348  0037B0                     __ptext14:
  7349                           	opt stack 0
  7350  0037B0                     _Green_Led:
  7351                           	opt stack 26
  7352                           
  7353                           ;incstack = 0
  7354                           ;Green_Led@Operation stored from wreg
  7355  0037B0  6E20               	movwf	Green_Led@Operation,c
  7356                           
  7357                           ;io.c: 49: switch(Operation)
  7358  0037B2  D030               	goto	l5385
  7359  0037B4                     l735:
  7360  0037B4  9C83               	bcf	3971,6,c	;volatile
  7361  0037B6  0012               	return	
  7362  0037B8                     l737:
  7363  0037B8  8C83               	bsf	3971,6,c	;volatile
  7364  0037BA  0012               	return	
  7365  0037BC                     l5363:
  7366  0037BC  4A21               	infsnz	_Green_Led_Counter,f,c
  7367  0037BE  2A22               	incf	_Green_Led_Counter+1,f,c
  7368                           
  7369                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7370  0037C0  0EB8               	movlw	184
  7371  0037C2  5C21               	subwf	_Green_Led_Counter,w,c
  7372  0037C4  0E0B               	movlw	11
  7373  0037C6  5822               	subwfb	_Green_Led_Counter+1,w,c
  7374  0037C8  A0D8               	btfss	status,0,c
  7375  0037CA  D004               	goto	l5369
  7376                           
  7377                           ;io.c: 57: {
  7378                           ;io.c: 58: Green_Led_Counter = 0;
  7379  0037CC  0E00               	movlw	0
  7380  0037CE  6E22               	movwf	_Green_Led_Counter+1,c
  7381  0037D0  0E00               	movlw	0
  7382  0037D2  6E21               	movwf	_Green_Led_Counter,c
  7383  0037D4                     l5369:
  7384                           
  7385                           ;io.c: 59: }
  7386                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  7387  0037D4  0EDC               	movlw	220
  7388  0037D6  5C21               	subwf	_Green_Led_Counter,w,c
  7389  0037D8  0E05               	movlw	5
  7390  0037DA  5822               	subwfb	_Green_Led_Counter+1,w,c
  7391  0037DC  A0D8               	btfss	status,0,c
  7392  0037DE  D002               	goto	l740
  7393                           
  7394                           ;io.c: 61: {
  7395                           ;io.c: 62: PORTDbits.RD6 = 1;
  7396  0037E0  8C83               	bsf	3971,6,c	;volatile
  7397                           
  7398                           ;io.c: 63: }
  7399  0037E2  0012               	return	
  7400  0037E4                     l740:
  7401                           
  7402                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  7403  0037E4  9C83               	bcf	3971,6,c	;volatile
  7404                           
  7405                           ;io.c: 65: break;
  7406  0037E6  0012               	return	
  7407  0037E8                     l5373:
  7408  0037E8  4A21               	infsnz	_Green_Led_Counter,f,c
  7409  0037EA  2A22               	incf	_Green_Led_Counter+1,f,c
  7410                           
  7411                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  7412  0037EC  0EE8               	movlw	232
  7413  0037EE  5C21               	subwf	_Green_Led_Counter,w,c
  7414  0037F0  0E03               	movlw	3
  7415  0037F2  5822               	subwfb	_Green_Led_Counter+1,w,c
  7416  0037F4  A0D8               	btfss	status,0,c
  7417  0037F6  D004               	goto	l5379
  7418                           
  7419                           ;io.c: 69: {
  7420                           ;io.c: 70: Green_Led_Counter = 0;
  7421  0037F8  0E00               	movlw	0
  7422  0037FA  6E22               	movwf	_Green_Led_Counter+1,c
  7423  0037FC  0E00               	movlw	0
  7424  0037FE  6E21               	movwf	_Green_Led_Counter,c
  7425  003800                     l5379:
  7426                           
  7427                           ;io.c: 71: }
  7428                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  7429  003800  0EF4               	movlw	244
  7430  003802  5C21               	subwf	_Green_Led_Counter,w,c
  7431  003804  0E01               	movlw	1
  7432  003806  5822               	subwfb	_Green_Led_Counter+1,w,c
  7433  003808  A0D8               	btfss	status,0,c
  7434  00380A  D002               	goto	l744
  7435                           
  7436                           ;io.c: 73: {
  7437                           ;io.c: 74: PORTDbits.RD6 = 1;
  7438  00380C  8C83               	bsf	3971,6,c	;volatile
  7439                           
  7440                           ;io.c: 75: }
  7441  00380E  0012               	return	
  7442  003810                     l744:
  7443                           
  7444                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  7445  003810  9C83               	bcf	3971,6,c	;volatile
  7446                           
  7447                           ;io.c: 80: }
  7448                           
  7449                           ;io.c: 79: default : break;
  7450                           
  7451                           ;io.c: 77: break;
  7452  003812  0012               	return	
  7453  003814                     l5385:
  7454  003814  5020               	movf	Green_Led@Operation,w,c
  7455                           
  7456                           ; Switch size 1, requested type "space"
  7457                           ; Number of cases is 4, Range of values is 0 to 3
  7458                           ; switch strategies available:
  7459                           ; Name         Instructions Cycles
  7460                           ; simple_byte           13     7 (average)
  7461                           ;	Chosen strategy is simple_byte
  7462  003816  0A00               	xorlw	0	; case 0
  7463  003818  B4D8               	btfsc	status,2,c
  7464  00381A  D7CC               	goto	l735
  7465  00381C  0A01               	xorlw	1	; case 1
  7466  00381E  B4D8               	btfsc	status,2,c
  7467  003820  D7CB               	goto	l737
  7468  003822  0A03               	xorlw	3	; case 2
  7469  003824  B4D8               	btfsc	status,2,c
  7470  003826  D7CA               	goto	l5363
  7471  003828  0A01               	xorlw	1	; case 3
  7472  00382A  A4D8               	btfss	status,2,c
  7473  00382C  0012               	return	
  7474  00382E  D7DC               	goto	l5373
  7475  003830                     __end_of_Green_Led:
  7476                           	opt stack 0
  7477                           tblptru	equ	0xFF8
  7478                           tblptrh	equ	0xFF7
  7479                           tblptrl	equ	0xFF6
  7480                           tablat	equ	0xFF5
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           postdec1	equ	0xFE5
  7484                           fsr1l	equ	0xFE1
  7485                           status	equ	0xFD8
  7486                           
  7487 ;; *************** function _Eeprom_Store *****************
  7488 ;; Defined at:
  7489 ;;		line 21 in file "../eeprom_settings.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7503 ;;      Params:         0       0       0       0       0       0       0       0       0
  7504 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7505 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7506 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7507 ;;Total ram usage:        0 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    4
  7510 ;; This function calls:
  7511 ;;		_GETxAPIxVAL
  7512 ;; This function is called by:
  7513 ;;		_Update_StateMchn
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text15
  7518  0034F6                     __ptext15:
  7519                           	opt stack 0
  7520  0034F6                     _Eeprom_Store:
  7521                           	opt stack 25
  7522                           
  7523                           ;eeprom_settings.c: 23: INTCON = 0x00;
  7524                           
  7525                           ;incstack = 0
  7526  0034F6  0E00               	movlw	0
  7527  0034F8  6EF2               	movwf	intcon,c	;volatile
  7528                           
  7529                           ;eeprom_settings.c: 25: EECON1bits.EEPGD = 0;
  7530  0034FA  9EA6               	bcf	4006,7,c	;volatile
  7531                           
  7532                           ;eeprom_settings.c: 26: EECON1bits.WREN = 1;
  7533  0034FC  84A6               	bsf	4006,2,c	;volatile
  7534                           
  7535                           ;eeprom_settings.c: 27: EEADR = 0x01;
  7536  0034FE  0E01               	movlw	1
  7537  003500  6EA9               	movwf	4009,c	;volatile
  7538                           
  7539                           ;eeprom_settings.c: 28: EEDATA = GETxAPIxVAL(23);
  7540  003502  0E17               	movlw	23
  7541  003504  EC20  F01E         	call	_GETxAPIxVAL
  7542  003508  0100               	movlb	0	; () banked
  7543  00350A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  7544  00350C  6EA8               	movwf	4008,c	;volatile
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;eeprom_settings.c: 29: EECON2 = 0x55;
  7548  00350E  0E55               	movlw	85
  7549  003510  6EA7               	movwf	4007,c	;volatile
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;eeprom_settings.c: 30: EECON2 = 0xaa;
  7553  003512  0EAA               	movlw	170
  7554  003514  6EA7               	movwf	4007,c	;volatile
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;eeprom_settings.c: 31: EECON1bits.WR = 1;
  7558  003516  82A6               	bsf	4006,1,c	;volatile
  7559  003518                     l664:
  7560  003518  A8A1               	btfss	4001,4,c	;volatile
  7561  00351A  D7FE               	goto	l664
  7562                           
  7563                           ;eeprom_settings.c: 33: PIR2bits.EEIF = 0;
  7564  00351C  98A1               	bcf	4001,4,c	;volatile
  7565                           
  7566                           ;eeprom_settings.c: 35: EECON1bits.EEPGD = 0;
  7567  00351E  9EA6               	bcf	4006,7,c	;volatile
  7568                           
  7569                           ;eeprom_settings.c: 36: EECON1bits.WREN = 1;
  7570  003520  84A6               	bsf	4006,2,c	;volatile
  7571                           
  7572                           ;eeprom_settings.c: 37: EEADR = 0x00;
  7573  003522  0E00               	movlw	0
  7574  003524  6EA9               	movwf	4009,c	;volatile
  7575                           
  7576                           ;eeprom_settings.c: 38: EEDATA = GETxAPIxVAL(23)>>8;
  7577  003526  0E17               	movlw	23
  7578  003528  EC20  F01E         	call	_GETxAPIxVAL
  7579  00352C  0100               	movlb	0	; () banked
  7580  00352E  C090  F08F         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  7581  003532  0100               	movlb	0	; () banked
  7582  003534  6B90               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  7583  003536  0100               	movlb	0	; () banked
  7584  003538  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  7585  00353A  6EA8               	movwf	4008,c	;volatile
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;eeprom_settings.c: 39: EECON2 = 0x55;
  7589  00353C  0E55               	movlw	85
  7590  00353E  6EA7               	movwf	4007,c	;volatile
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;eeprom_settings.c: 40: EECON2 = 0xaa;
  7594  003540  0EAA               	movlw	170
  7595  003542  6EA7               	movwf	4007,c	;volatile
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;eeprom_settings.c: 41: EECON1bits.WR = 1;
  7599  003544  82A6               	bsf	4006,1,c	;volatile
  7600  003546                     l667:
  7601  003546  A8A1               	btfss	4001,4,c	;volatile
  7602  003548  D7FE               	goto	l667
  7603                           
  7604                           ;eeprom_settings.c: 43: PIR2bits.EEIF = 0;
  7605  00354A  98A1               	bcf	4001,4,c	;volatile
  7606                           
  7607                           ;eeprom_settings.c: 45: EECON1bits.EEPGD = 0;
  7608  00354C  9EA6               	bcf	4006,7,c	;volatile
  7609                           
  7610                           ;eeprom_settings.c: 46: EECON1bits.WREN = 1;
  7611  00354E  84A6               	bsf	4006,2,c	;volatile
  7612                           
  7613                           ;eeprom_settings.c: 47: EEADR = 0x03;
  7614  003550  0E03               	movlw	3
  7615  003552  6EA9               	movwf	4009,c	;volatile
  7616                           
  7617                           ;eeprom_settings.c: 48: EEDATA = GETxAPIxVAL(24);
  7618  003554  0E18               	movlw	24
  7619  003556  EC20  F01E         	call	_GETxAPIxVAL
  7620  00355A  0100               	movlb	0	; () banked
  7621  00355C  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  7622  00355E  6EA8               	movwf	4008,c	;volatile
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;eeprom_settings.c: 49: EECON2 = 0x55;
  7626  003560  0E55               	movlw	85
  7627  003562  6EA7               	movwf	4007,c	;volatile
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;eeprom_settings.c: 50: EECON2 = 0xaa;
  7631  003564  0EAA               	movlw	170
  7632  003566  6EA7               	movwf	4007,c	;volatile
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;eeprom_settings.c: 51: EECON1bits.WR = 1;
  7636  003568  82A6               	bsf	4006,1,c	;volatile
  7637  00356A                     l670:
  7638  00356A  A8A1               	btfss	4001,4,c	;volatile
  7639  00356C  D7FE               	goto	l670
  7640                           
  7641                           ;eeprom_settings.c: 53: PIR2bits.EEIF = 0;
  7642  00356E  98A1               	bcf	4001,4,c	;volatile
  7643                           
  7644                           ;eeprom_settings.c: 55: EECON1bits.EEPGD = 0;
  7645  003570  9EA6               	bcf	4006,7,c	;volatile
  7646                           
  7647                           ;eeprom_settings.c: 56: EECON1bits.WREN = 1;
  7648  003572  84A6               	bsf	4006,2,c	;volatile
  7649                           
  7650                           ;eeprom_settings.c: 57: EEADR = 0x02;
  7651  003574  0E02               	movlw	2
  7652  003576  6EA9               	movwf	4009,c	;volatile
  7653                           
  7654                           ;eeprom_settings.c: 58: EEDATA = GETxAPIxVAL(24)>>8;
  7655  003578  0E18               	movlw	24
  7656  00357A  EC20  F01E         	call	_GETxAPIxVAL
  7657  00357E  0100               	movlb	0	; () banked
  7658  003580  C090  F08F         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  7659  003584  0100               	movlb	0	; () banked
  7660  003586  6B90               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  7661  003588  0100               	movlb	0	; () banked
  7662  00358A  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  7663  00358C  6EA8               	movwf	4008,c	;volatile
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;eeprom_settings.c: 59: EECON2 = 0x55;
  7667  00358E  0E55               	movlw	85
  7668  003590  6EA7               	movwf	4007,c	;volatile
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;eeprom_settings.c: 60: EECON2 = 0xaa;
  7672  003592  0EAA               	movlw	170
  7673  003594  6EA7               	movwf	4007,c	;volatile
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;eeprom_settings.c: 61: EECON1bits.WR = 1;
  7677  003596  82A6               	bsf	4006,1,c	;volatile
  7678  003598                     l673:
  7679  003598  A8A1               	btfss	4001,4,c	;volatile
  7680  00359A  D7FE               	goto	l673
  7681                           
  7682                           ;eeprom_settings.c: 63: PIR2bits.EEIF = 0;
  7683  00359C  98A1               	bcf	4001,4,c	;volatile
  7684                           
  7685                           ;eeprom_settings.c: 65: EECON1bits.EEPGD = 0;
  7686  00359E  9EA6               	bcf	4006,7,c	;volatile
  7687                           
  7688                           ;eeprom_settings.c: 66: EECON1bits.WREN = 1;
  7689  0035A0  84A6               	bsf	4006,2,c	;volatile
  7690                           
  7691                           ;eeprom_settings.c: 67: EEADR = 0x04;
  7692  0035A2  0E04               	movlw	4
  7693  0035A4  6EA9               	movwf	4009,c	;volatile
  7694                           
  7695                           ;eeprom_settings.c: 68: EEDATA = GETxAPIxVAL(25);
  7696  0035A6  0E19               	movlw	25
  7697  0035A8  EC20  F01E         	call	_GETxAPIxVAL
  7698  0035AC  0100               	movlb	0	; () banked
  7699  0035AE  518F               	movf	?_GETxAPIxVAL& (0+255),w,b
  7700  0035B0  6EA8               	movwf	4008,c	;volatile
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;eeprom_settings.c: 69: EECON2 = 0x55;
  7704  0035B2  0E55               	movlw	85
  7705  0035B4  6EA7               	movwf	4007,c	;volatile
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;eeprom_settings.c: 70: EECON2 = 0xaa;
  7709  0035B6  0EAA               	movlw	170
  7710  0035B8  6EA7               	movwf	4007,c	;volatile
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;eeprom_settings.c: 71: EECON1bits.WR = 1;
  7714  0035BA  82A6               	bsf	4006,1,c	;volatile
  7715  0035BC                     l676:
  7716  0035BC  A8A1               	btfss	4001,4,c	;volatile
  7717  0035BE  D7FE               	goto	l676
  7718                           
  7719                           ;eeprom_settings.c: 73: PIR2bits.EEIF = 0;
  7720  0035C0  98A1               	bcf	4001,4,c	;volatile
  7721                           
  7722                           ;eeprom_settings.c: 76: INTCON = 0xA0;
  7723  0035C2  0EA0               	movlw	160
  7724  0035C4  6EF2               	movwf	intcon,c	;volatile
  7725  0035C6  0012               	return		;funcret
  7726  0035C8                     __end_of_Eeprom_Store:
  7727                           	opt stack 0
  7728                           tblptru	equ	0xFF8
  7729                           tblptrh	equ	0xFF7
  7730                           tblptrl	equ	0xFF6
  7731                           tablat	equ	0xFF5
  7732                           intcon	equ	0xFF2
  7733                           postinc0	equ	0xFEE
  7734                           wreg	equ	0xFE8
  7735                           postdec1	equ	0xFE5
  7736                           fsr1l	equ	0xFE1
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function _Debounce_Inputs *****************
  7740 ;; Defined at:
  7741 ;;		line 148 in file "../io.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;		None
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7757 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7758 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7759 ;;Total ram usage:        2 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    7
  7762 ;; This function calls:
  7763 ;;		_GETxAPIxVAL
  7764 ;;		_SETxAPIxVAL
  7765 ;;		_SetDCPWM1
  7766 ;; This function is called by:
  7767 ;;		_Update_StateMchn
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text16
  7772  00143A                     __ptext16:
  7773                           	opt stack 0
  7774  00143A                     _Debounce_Inputs:
  7775                           	opt stack 22
  7776                           
  7777                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  7778                           
  7779                           ;incstack = 0
  7780  00143A  0E40               	movlw	64
  7781  00143C  EC20  F01E         	call	_GETxAPIxVAL
  7782  001440  0100               	movlb	0	; () banked
  7783  001442  478F               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7784  001444  0100               	movlb	0	; () banked
  7785  001446  478F               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7786  001448  0100               	movlb	0	; () banked
  7787  00144A  478F               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7788  00144C  5080               	movf	3968,w,c	;volatile
  7789  00144E  0100               	movlb	0	; () banked
  7790  001450  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7791  001452  0BF7               	andlw	-9
  7792  001454  0100               	movlb	0	; () banked
  7793  001456  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7794  001458  6E80               	movwf	3968,c	;volatile
  7795                           
  7796                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  7797  00145A  0E41               	movlw	65
  7798  00145C  EC20  F01E         	call	_GETxAPIxVAL
  7799  001460  0100               	movlb	0	; () banked
  7800  001462  478F               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7801  001464  0100               	movlb	0	; () banked
  7802  001466  478F               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7803  001468  5080               	movf	3968,w,c	;volatile
  7804  00146A  0100               	movlb	0	; () banked
  7805  00146C  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7806  00146E  0BFB               	andlw	-5
  7807  001470  0100               	movlb	0	; () banked
  7808  001472  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7809  001474  6E80               	movwf	3968,c	;volatile
  7810                           
  7811                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  7812  001476  0E42               	movlw	66
  7813  001478  EC20  F01E         	call	_GETxAPIxVAL
  7814  00147C  0100               	movlb	0	; () banked
  7815  00147E  478F               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7816  001480  5080               	movf	3968,w,c	;volatile
  7817  001482  0100               	movlb	0	; () banked
  7818  001484  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7819  001486  0BFD               	andlw	-3
  7820  001488  0100               	movlb	0	; () banked
  7821  00148A  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7822  00148C  6E80               	movwf	3968,c	;volatile
  7823                           
  7824                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  7825  00148E  0E43               	movlw	67
  7826  001490  EC20  F01E         	call	_GETxAPIxVAL
  7827  001494  5080               	movf	3968,w,c	;volatile
  7828  001496  0100               	movlb	0	; () banked
  7829  001498  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7830  00149A  0BFE               	andlw	-2
  7831  00149C  0100               	movlb	0	; () banked
  7832  00149E  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7833  0014A0  6E80               	movwf	3968,c	;volatile
  7834                           
  7835                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  7836  0014A2  0E45               	movlw	69
  7837  0014A4  EC20  F01E         	call	_GETxAPIxVAL
  7838  0014A8  5082               	movf	3970,w,c	;volatile
  7839  0014AA  0100               	movlb	0	; () banked
  7840  0014AC  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7841  0014AE  0BFE               	andlw	-2
  7842  0014B0  0100               	movlb	0	; () banked
  7843  0014B2  198F               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7844  0014B4  6E82               	movwf	3970,c	;volatile
  7845                           
  7846                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(68));
  7847  0014B6  0E44               	movlw	68
  7848  0014B8  EC20  F01E         	call	_GETxAPIxVAL
  7849  0014BC  C08F  F091         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  7850  0014C0  C090  F092         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  7851  0014C4  EC41  F01D         	call	_SetDCPWM1	;wreg free
  7852                           
  7853                           ;io.c: 157: switch(PORTDbits.RD1)
  7854  0014C8  D02A               	goto	l7569
  7855  0014CA                     l7551:
  7856  0014CA  502D               	movf	_Reed_Contact_LF_Counter,w,c
  7857  0014CC  B4D8               	btfsc	status,2,c
  7858  0014CE  D002               	goto	l7557
  7859                           
  7860                           ;io.c: 160: {
  7861                           ;io.c: 161: Reed_Contact_LF_Counter--;
  7862  0014D0  062D               	decf	_Reed_Contact_LF_Counter,f,c
  7863                           
  7864                           ;io.c: 163: }
  7865                           
  7866                           ;io.c: 162: break;
  7867  0014D2  D05B               	goto	l7589
  7868  0014D4                     l7557:
  7869                           
  7870                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  7871  0014D4  0E00               	movlw	0
  7872  0014D6  0100               	movlb	0	; () banked
  7873  0014D8  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7874  0014DA  0E00               	movlw	0
  7875  0014DC  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  7876  0014DE  0E1F               	movlw	31
  7877  0014E0  ECF1  F01C         	call	_SETxAPIxVAL
  7878                           
  7879                           ;io.c: 165: break;
  7880  0014E4  D052               	goto	l7589
  7881  0014E6                     l7559:
  7882  0014E6  502D               	movf	_Reed_Contact_LF_Counter,w,c
  7883  0014E8  0100               	movlb	0	; () banked
  7884  0014EA  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  7885  0014EC  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7886  0014EE  0E1B               	movlw	27
  7887  0014F0  EC20  F01E         	call	_GETxAPIxVAL
  7888  0014F4  0100               	movlb	0	; () banked
  7889  0014F6  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  7890  0014F8  0100               	movlb	0	; () banked
  7891  0014FA  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7892  0014FC  0100               	movlb	0	; () banked
  7893  0014FE  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7894  001500  0100               	movlb	0	; () banked
  7895  001502  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7896  001504  A0D8               	btfss	status,0,c
  7897  001506  D002               	goto	l7565
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;io.c: 168: {
  7901                           ;io.c: 169: Reed_Contact_LF_Counter++;
  7902  001508  2A2D               	incf	_Reed_Contact_LF_Counter,f,c
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;io.c: 171: }
  7906                           
  7907                           ;io.c: 170: break;
  7908  00150A  D03F               	goto	l7589
  7909  00150C                     l7565:
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  7913  00150C  0E00               	movlw	0
  7914  00150E  0100               	movlb	0	; () banked
  7915  001510  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7916  001512  0E01               	movlw	1
  7917  001514  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  7918  001516  0E1F               	movlw	31
  7919  001518  ECF1  F01C         	call	_SETxAPIxVAL
  7920                           
  7921                           ;io.c: 176: }
  7922                           
  7923                           ;io.c: 175: default : break;
  7924                           
  7925                           ;io.c: 173: break;
  7926  00151C  D036               	goto	l7589
  7927  00151E                     l7569:
  7928  00151E  A283               	btfss	3971,1,c	;volatile
  7929  001520  D002               	goto	u6920
  7930  001522  0E01               	movlw	1
  7931  001524  D001               	goto	u6926
  7932  001526                     u6920:
  7933  001526  0E00               	movlw	0
  7934  001528                     u6926:
  7935                           
  7936                           ; Switch size 1, requested type "space"
  7937                           ; Number of cases is 2, Range of values is 0 to 1
  7938                           ; switch strategies available:
  7939                           ; Name         Instructions Cycles
  7940                           ; simple_byte            7     4 (average)
  7941                           ;	Chosen strategy is simple_byte
  7942  001528  0A00               	xorlw	0	; case 0
  7943  00152A  B4D8               	btfsc	status,2,c
  7944  00152C  D7DC               	goto	l7559
  7945  00152E  0A01               	xorlw	1	; case 1
  7946  001530  B4D8               	btfsc	status,2,c
  7947  001532  D7CB               	goto	l7551
  7948                           
  7949                           ;io.c: 179: switch(PORTDbits.RD0)
  7950  001534  D02A               	goto	l7589
  7951  001536                     l7571:
  7952  001536  502C               	movf	_Reed_Contact_LB_Counter,w,c
  7953  001538  B4D8               	btfsc	status,2,c
  7954  00153A  D002               	goto	l7577
  7955                           
  7956                           ;io.c: 182: {
  7957                           ;io.c: 183: Reed_Contact_LB_Counter--;
  7958  00153C  062C               	decf	_Reed_Contact_LB_Counter,f,c
  7959                           
  7960                           ;io.c: 185: }
  7961                           
  7962                           ;io.c: 184: break;
  7963  00153E  D05B               	goto	l7609
  7964  001540                     l7577:
  7965                           
  7966                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  7967  001540  0E00               	movlw	0
  7968  001542  0100               	movlb	0	; () banked
  7969  001544  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7970  001546  0E00               	movlw	0
  7971  001548  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  7972  00154A  0E1E               	movlw	30
  7973  00154C  ECF1  F01C         	call	_SETxAPIxVAL
  7974                           
  7975                           ;io.c: 187: break;
  7976  001550  D052               	goto	l7609
  7977  001552                     l7579:
  7978  001552  502C               	movf	_Reed_Contact_LB_Counter,w,c
  7979  001554  0100               	movlb	0	; () banked
  7980  001556  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  7981  001558  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7982  00155A  0E1B               	movlw	27
  7983  00155C  EC20  F01E         	call	_GETxAPIxVAL
  7984  001560  0100               	movlb	0	; () banked
  7985  001562  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  7986  001564  0100               	movlb	0	; () banked
  7987  001566  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7988  001568  0100               	movlb	0	; () banked
  7989  00156A  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7990  00156C  0100               	movlb	0	; () banked
  7991  00156E  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7992  001570  A0D8               	btfss	status,0,c
  7993  001572  D002               	goto	l7585
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;io.c: 190: {
  7997                           ;io.c: 191: Reed_Contact_LB_Counter++;
  7998  001574  2A2C               	incf	_Reed_Contact_LB_Counter,f,c
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;io.c: 193: }
  8002                           
  8003                           ;io.c: 192: break;
  8004  001576  D03F               	goto	l7609
  8005  001578                     l7585:
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  8009  001578  0E00               	movlw	0
  8010  00157A  0100               	movlb	0	; () banked
  8011  00157C  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8012  00157E  0E01               	movlw	1
  8013  001580  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8014  001582  0E1E               	movlw	30
  8015  001584  ECF1  F01C         	call	_SETxAPIxVAL
  8016                           
  8017                           ;io.c: 198: }
  8018                           
  8019                           ;io.c: 197: default : break;
  8020                           
  8021                           ;io.c: 195: break;
  8022  001588  D036               	goto	l7609
  8023  00158A                     l7589:
  8024  00158A  A083               	btfss	3971,0,c	;volatile
  8025  00158C  D002               	goto	u6950
  8026  00158E  0E01               	movlw	1
  8027  001590  D001               	goto	u6956
  8028  001592                     u6950:
  8029  001592  0E00               	movlw	0
  8030  001594                     u6956:
  8031                           
  8032                           ; Switch size 1, requested type "space"
  8033                           ; Number of cases is 2, Range of values is 0 to 1
  8034                           ; switch strategies available:
  8035                           ; Name         Instructions Cycles
  8036                           ; simple_byte            7     4 (average)
  8037                           ;	Chosen strategy is simple_byte
  8038  001594  0A00               	xorlw	0	; case 0
  8039  001596  B4D8               	btfsc	status,2,c
  8040  001598  D7DC               	goto	l7579
  8041  00159A  0A01               	xorlw	1	; case 1
  8042  00159C  B4D8               	btfsc	status,2,c
  8043  00159E  D7CB               	goto	l7571
  8044                           
  8045                           ;io.c: 201: switch(PORTDbits.RD3)
  8046  0015A0  D02A               	goto	l7609
  8047  0015A2                     l7591:
  8048  0015A2  5031               	movf	_Reed_Contact_RF_Counter,w,c
  8049  0015A4  B4D8               	btfsc	status,2,c
  8050  0015A6  D002               	goto	l7597
  8051                           
  8052                           ;io.c: 204: {
  8053                           ;io.c: 205: Reed_Contact_RF_Counter--;
  8054  0015A8  0631               	decf	_Reed_Contact_RF_Counter,f,c
  8055                           
  8056                           ;io.c: 207: }
  8057                           
  8058                           ;io.c: 206: break;
  8059  0015AA  D05B               	goto	l7629
  8060  0015AC                     l7597:
  8061                           
  8062                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  8063  0015AC  0E00               	movlw	0
  8064  0015AE  0100               	movlb	0	; () banked
  8065  0015B0  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8066  0015B2  0E00               	movlw	0
  8067  0015B4  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8068  0015B6  0E1D               	movlw	29
  8069  0015B8  ECF1  F01C         	call	_SETxAPIxVAL
  8070                           
  8071                           ;io.c: 209: break;
  8072  0015BC  D052               	goto	l7629
  8073  0015BE                     l7599:
  8074  0015BE  5031               	movf	_Reed_Contact_RF_Counter,w,c
  8075  0015C0  0100               	movlb	0	; () banked
  8076  0015C2  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8077  0015C4  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8078  0015C6  0E1B               	movlw	27
  8079  0015C8  EC20  F01E         	call	_GETxAPIxVAL
  8080  0015CC  0100               	movlb	0	; () banked
  8081  0015CE  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8082  0015D0  0100               	movlb	0	; () banked
  8083  0015D2  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8084  0015D4  0100               	movlb	0	; () banked
  8085  0015D6  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8086  0015D8  0100               	movlb	0	; () banked
  8087  0015DA  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8088  0015DC  A0D8               	btfss	status,0,c
  8089  0015DE  D002               	goto	l7605
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;io.c: 212: {
  8093                           ;io.c: 213: Reed_Contact_RF_Counter++;
  8094  0015E0  2A31               	incf	_Reed_Contact_RF_Counter,f,c
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;io.c: 215: }
  8098                           
  8099                           ;io.c: 214: break;
  8100  0015E2  D03F               	goto	l7629
  8101  0015E4                     l7605:
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  8105  0015E4  0E00               	movlw	0
  8106  0015E6  0100               	movlb	0	; () banked
  8107  0015E8  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8108  0015EA  0E01               	movlw	1
  8109  0015EC  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8110  0015EE  0E1D               	movlw	29
  8111  0015F0  ECF1  F01C         	call	_SETxAPIxVAL
  8112                           
  8113                           ;io.c: 220: }
  8114                           
  8115                           ;io.c: 219: default : break;
  8116                           
  8117                           ;io.c: 217: break;
  8118  0015F4  D036               	goto	l7629
  8119  0015F6                     l7609:
  8120  0015F6  A683               	btfss	3971,3,c	;volatile
  8121  0015F8  D002               	goto	u6980
  8122  0015FA  0E01               	movlw	1
  8123  0015FC  D001               	goto	u6986
  8124  0015FE                     u6980:
  8125  0015FE  0E00               	movlw	0
  8126  001600                     u6986:
  8127                           
  8128                           ; Switch size 1, requested type "space"
  8129                           ; Number of cases is 2, Range of values is 0 to 1
  8130                           ; switch strategies available:
  8131                           ; Name         Instructions Cycles
  8132                           ; simple_byte            7     4 (average)
  8133                           ;	Chosen strategy is simple_byte
  8134  001600  0A00               	xorlw	0	; case 0
  8135  001602  B4D8               	btfsc	status,2,c
  8136  001604  D7DC               	goto	l7599
  8137  001606  0A01               	xorlw	1	; case 1
  8138  001608  B4D8               	btfsc	status,2,c
  8139  00160A  D7CB               	goto	l7591
  8140                           
  8141                           ;io.c: 223: switch(PORTDbits.RD2)
  8142  00160C  D02A               	goto	l7629
  8143  00160E                     l7611:
  8144  00160E  5030               	movf	_Reed_Contact_RB_Counter,w,c
  8145  001610  B4D8               	btfsc	status,2,c
  8146  001612  D002               	goto	l7617
  8147                           
  8148                           ;io.c: 226: {
  8149                           ;io.c: 227: Reed_Contact_RB_Counter--;
  8150  001614  0630               	decf	_Reed_Contact_RB_Counter,f,c
  8151                           
  8152                           ;io.c: 229: }
  8153                           
  8154                           ;io.c: 228: break;
  8155  001616  D05B               	goto	l7649
  8156  001618                     l7617:
  8157                           
  8158                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  8159  001618  0E00               	movlw	0
  8160  00161A  0100               	movlb	0	; () banked
  8161  00161C  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8162  00161E  0E00               	movlw	0
  8163  001620  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8164  001622  0E1C               	movlw	28
  8165  001624  ECF1  F01C         	call	_SETxAPIxVAL
  8166                           
  8167                           ;io.c: 231: break;
  8168  001628  D052               	goto	l7649
  8169  00162A                     l7619:
  8170  00162A  5030               	movf	_Reed_Contact_RB_Counter,w,c
  8171  00162C  0100               	movlb	0	; () banked
  8172  00162E  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8173  001630  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8174  001632  0E1B               	movlw	27
  8175  001634  EC20  F01E         	call	_GETxAPIxVAL
  8176  001638  0100               	movlb	0	; () banked
  8177  00163A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8178  00163C  0100               	movlb	0	; () banked
  8179  00163E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8180  001640  0100               	movlb	0	; () banked
  8181  001642  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8182  001644  0100               	movlb	0	; () banked
  8183  001646  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8184  001648  A0D8               	btfss	status,0,c
  8185  00164A  D002               	goto	l7625
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;io.c: 234: {
  8189                           ;io.c: 235: Reed_Contact_RB_Counter++;
  8190  00164C  2A30               	incf	_Reed_Contact_RB_Counter,f,c
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;io.c: 237: }
  8194                           
  8195                           ;io.c: 236: break;
  8196  00164E  D03F               	goto	l7649
  8197  001650                     l7625:
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  8201  001650  0E00               	movlw	0
  8202  001652  0100               	movlb	0	; () banked
  8203  001654  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8204  001656  0E01               	movlw	1
  8205  001658  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8206  00165A  0E1C               	movlw	28
  8207  00165C  ECF1  F01C         	call	_SETxAPIxVAL
  8208                           
  8209                           ;io.c: 242: }
  8210                           
  8211                           ;io.c: 241: default : break;
  8212                           
  8213                           ;io.c: 239: break;
  8214  001660  D036               	goto	l7649
  8215  001662                     l7629:
  8216  001662  A483               	btfss	3971,2,c	;volatile
  8217  001664  D002               	goto	u7010
  8218  001666  0E01               	movlw	1
  8219  001668  D001               	goto	u7016
  8220  00166A                     u7010:
  8221  00166A  0E00               	movlw	0
  8222  00166C                     u7016:
  8223                           
  8224                           ; Switch size 1, requested type "space"
  8225                           ; Number of cases is 2, Range of values is 0 to 1
  8226                           ; switch strategies available:
  8227                           ; Name         Instructions Cycles
  8228                           ; simple_byte            7     4 (average)
  8229                           ;	Chosen strategy is simple_byte
  8230  00166C  0A00               	xorlw	0	; case 0
  8231  00166E  B4D8               	btfsc	status,2,c
  8232  001670  D7DC               	goto	l7619
  8233  001672  0A01               	xorlw	1	; case 1
  8234  001674  B4D8               	btfsc	status,2,c
  8235  001676  D7CB               	goto	l7611
  8236                           
  8237                           ;io.c: 245: switch(!PORTBbits.RB0)
  8238  001678  D02A               	goto	l7649
  8239  00167A                     l7631:
  8240  00167A  502A               	movf	_Button_Contact_Counter_Start,w,c
  8241  00167C  0100               	movlb	0	; () banked
  8242  00167E  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8243  001680  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8244  001682  0E1B               	movlw	27
  8245  001684  EC20  F01E         	call	_GETxAPIxVAL
  8246  001688  0100               	movlb	0	; () banked
  8247  00168A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8248  00168C  0100               	movlb	0	; () banked
  8249  00168E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8250  001690  0100               	movlb	0	; () banked
  8251  001692  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8252  001694  0100               	movlb	0	; () banked
  8253  001696  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8254  001698  A0D8               	btfss	status,0,c
  8255  00169A  D002               	goto	l7637
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;io.c: 248: {
  8259                           ;io.c: 249: Button_Contact_Counter_Start++;
  8260  00169C  2A2A               	incf	_Button_Contact_Counter_Start,f,c
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;io.c: 251: }
  8264                           
  8265                           ;io.c: 250: break;
  8266  00169E  D057               	goto	l7669
  8267  0016A0                     l7637:
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  8271  0016A0  0E00               	movlw	0
  8272  0016A2  0100               	movlb	0	; () banked
  8273  0016A4  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8274  0016A6  0E01               	movlw	1
  8275  0016A8  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8276  0016AA  0E20               	movlw	32
  8277  0016AC  ECF1  F01C         	call	_SETxAPIxVAL
  8278                           
  8279                           ;io.c: 253: break;
  8280  0016B0  D04E               	goto	l7669
  8281  0016B2                     l7639:
  8282  0016B2  502A               	movf	_Button_Contact_Counter_Start,w,c
  8283  0016B4  B4D8               	btfsc	status,2,c
  8284  0016B6  D002               	goto	l7645
  8285                           
  8286                           ;io.c: 256: {
  8287                           ;io.c: 257: Button_Contact_Counter_Start--;
  8288  0016B8  062A               	decf	_Button_Contact_Counter_Start,f,c
  8289                           
  8290                           ;io.c: 259: }
  8291                           
  8292                           ;io.c: 258: break;
  8293  0016BA  D049               	goto	l7669
  8294  0016BC                     l7645:
  8295                           
  8296                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  8297  0016BC  0E00               	movlw	0
  8298  0016BE  0100               	movlb	0	; () banked
  8299  0016C0  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8300  0016C2  0E00               	movlw	0
  8301  0016C4  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8302  0016C6  0E20               	movlw	32
  8303  0016C8  ECF1  F01C         	call	_SETxAPIxVAL
  8304                           
  8305                           ;io.c: 264: }
  8306                           
  8307                           ;io.c: 263: default : break;
  8308                           
  8309                           ;io.c: 261: break;
  8310  0016CC  D040               	goto	l7669
  8311  0016CE                     l7649:
  8312  0016CE  B081               	btfsc	3969,0,c	;volatile
  8313  0016D0  D002               	goto	u7040
  8314  0016D2  0E01               	movlw	1
  8315  0016D4  D001               	goto	u7050
  8316  0016D6                     u7040:
  8317  0016D6  0E00               	movlw	0
  8318  0016D8                     u7050:
  8319  0016D8  0100               	movlb	0	; () banked
  8320  0016DA  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8321  0016DC  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8322                           
  8323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8324                           ; Switch size 1, requested type "space"
  8325                           ; Number of cases is 1, Range of values is 0 to 0
  8326                           ; switch strategies available:
  8327                           ; Name         Instructions Cycles
  8328                           ; simple_byte            4     3 (average)
  8329                           ;	Chosen strategy is simple_byte
  8330  0016DE  0100               	movlb	0	; () banked
  8331  0016E0  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8332  0016E2  0A00               	xorlw	0	; case 0
  8333  0016E4  A4D8               	btfss	status,2,c
  8334  0016E6  D033               	goto	l7669
  8335                           
  8336                           ; BSR set to: 0
  8337                           ; Switch size 1, requested type "space"
  8338                           ; Number of cases is 2, Range of values is 0 to 1
  8339                           ; switch strategies available:
  8340                           ; Name         Instructions Cycles
  8341                           ; simple_byte            7     4 (average)
  8342                           ;	Chosen strategy is simple_byte
  8343  0016E8  0100               	movlb	0	; () banked
  8344  0016EA  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8345  0016EC  0A00               	xorlw	0	; case 0
  8346  0016EE  B4D8               	btfsc	status,2,c
  8347  0016F0  D7E0               	goto	l7639
  8348  0016F2  0A01               	xorlw	1	; case 1
  8349  0016F4  B4D8               	btfsc	status,2,c
  8350  0016F6  D7C1               	goto	l7631
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;io.c: 267: switch(!PORTDbits.RD7)
  8354  0016F8  D02A               	goto	l7669
  8355  0016FA                     l7651:
  8356                           
  8357                           ; BSR set to: 0
  8358  0016FA  502B               	movf	_Button_Contact_Counter_Stop,w,c
  8359  0016FC  0100               	movlb	0	; () banked
  8360  0016FE  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8361  001700  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8362  001702  0E1B               	movlw	27
  8363  001704  EC20  F01E         	call	_GETxAPIxVAL
  8364  001708  0100               	movlb	0	; () banked
  8365  00170A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8366  00170C  0100               	movlb	0	; () banked
  8367  00170E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8368  001710  0100               	movlb	0	; () banked
  8369  001712  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8370  001714  0100               	movlb	0	; () banked
  8371  001716  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8372  001718  A0D8               	btfss	status,0,c
  8373  00171A  D002               	goto	l7657
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;io.c: 270: {
  8377                           ;io.c: 271: Button_Contact_Counter_Stop++;
  8378  00171C  2A2B               	incf	_Button_Contact_Counter_Stop,f,c
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;io.c: 273: }
  8382                           
  8383                           ;io.c: 272: break;
  8384  00171E  D057               	goto	l7689
  8385  001720                     l7657:
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  8389  001720  0E00               	movlw	0
  8390  001722  0100               	movlb	0	; () banked
  8391  001724  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8392  001726  0E01               	movlw	1
  8393  001728  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8394  00172A  0E21               	movlw	33
  8395  00172C  ECF1  F01C         	call	_SETxAPIxVAL
  8396                           
  8397                           ;io.c: 275: break;
  8398  001730  D04E               	goto	l7689
  8399  001732                     l7659:
  8400  001732  502B               	movf	_Button_Contact_Counter_Stop,w,c
  8401  001734  B4D8               	btfsc	status,2,c
  8402  001736  D002               	goto	l7665
  8403                           
  8404                           ;io.c: 278: {
  8405                           ;io.c: 279: Button_Contact_Counter_Stop--;
  8406  001738  062B               	decf	_Button_Contact_Counter_Stop,f,c
  8407                           
  8408                           ;io.c: 281: }
  8409                           
  8410                           ;io.c: 280: break;
  8411  00173A  D049               	goto	l7689
  8412  00173C                     l7665:
  8413                           
  8414                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  8415  00173C  0E00               	movlw	0
  8416  00173E  0100               	movlb	0	; () banked
  8417  001740  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8418  001742  0E00               	movlw	0
  8419  001744  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8420  001746  0E21               	movlw	33
  8421  001748  ECF1  F01C         	call	_SETxAPIxVAL
  8422                           
  8423                           ;io.c: 286: }
  8424                           
  8425                           ;io.c: 285: default : break;
  8426                           
  8427                           ;io.c: 283: break;
  8428  00174C  D040               	goto	l7689
  8429  00174E                     l7669:
  8430  00174E  BE83               	btfsc	3971,7,c	;volatile
  8431  001750  D002               	goto	u7080
  8432  001752  0E01               	movlw	1
  8433  001754  D001               	goto	u7090
  8434  001756                     u7080:
  8435  001756  0E00               	movlw	0
  8436  001758                     u7090:
  8437  001758  0100               	movlb	0	; () banked
  8438  00175A  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8439  00175C  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8440                           
  8441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8442                           ; Switch size 1, requested type "space"
  8443                           ; Number of cases is 1, Range of values is 0 to 0
  8444                           ; switch strategies available:
  8445                           ; Name         Instructions Cycles
  8446                           ; simple_byte            4     3 (average)
  8447                           ;	Chosen strategy is simple_byte
  8448  00175E  0100               	movlb	0	; () banked
  8449  001760  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8450  001762  0A00               	xorlw	0	; case 0
  8451  001764  A4D8               	btfss	status,2,c
  8452  001766  D033               	goto	l7689
  8453                           
  8454                           ; BSR set to: 0
  8455                           ; Switch size 1, requested type "space"
  8456                           ; Number of cases is 2, Range of values is 0 to 1
  8457                           ; switch strategies available:
  8458                           ; Name         Instructions Cycles
  8459                           ; simple_byte            7     4 (average)
  8460                           ;	Chosen strategy is simple_byte
  8461  001768  0100               	movlb	0	; () banked
  8462  00176A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8463  00176C  0A00               	xorlw	0	; case 0
  8464  00176E  B4D8               	btfsc	status,2,c
  8465  001770  D7E0               	goto	l7659
  8466  001772  0A01               	xorlw	1	; case 1
  8467  001774  B4D8               	btfsc	status,2,c
  8468  001776  D7C1               	goto	l7651
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;io.c: 289: switch(!PORTBbits.RB1)
  8472  001778  D02A               	goto	l7689
  8473  00177A                     l7671:
  8474                           
  8475                           ; BSR set to: 0
  8476  00177A  5027               	movf	_Button_Contact_Counter_Middle,w,c
  8477  00177C  0100               	movlb	0	; () banked
  8478  00177E  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8479  001780  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8480  001782  0E1B               	movlw	27
  8481  001784  EC20  F01E         	call	_GETxAPIxVAL
  8482  001788  0100               	movlb	0	; () banked
  8483  00178A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8484  00178C  0100               	movlb	0	; () banked
  8485  00178E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8486  001790  0100               	movlb	0	; () banked
  8487  001792  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8488  001794  0100               	movlb	0	; () banked
  8489  001796  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8490  001798  A0D8               	btfss	status,0,c
  8491  00179A  D002               	goto	l7677
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;io.c: 292: {
  8495                           ;io.c: 293: Button_Contact_Counter_Middle++;
  8496  00179C  2A27               	incf	_Button_Contact_Counter_Middle,f,c
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;io.c: 295: }
  8500                           
  8501                           ;io.c: 294: break;
  8502  00179E  D057               	goto	l7709
  8503  0017A0                     l7677:
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  8507  0017A0  0E00               	movlw	0
  8508  0017A2  0100               	movlb	0	; () banked
  8509  0017A4  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8510  0017A6  0E01               	movlw	1
  8511  0017A8  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8512  0017AA  0E22               	movlw	34
  8513  0017AC  ECF1  F01C         	call	_SETxAPIxVAL
  8514                           
  8515                           ;io.c: 297: break;
  8516  0017B0  D04E               	goto	l7709
  8517  0017B2                     l7679:
  8518  0017B2  5027               	movf	_Button_Contact_Counter_Middle,w,c
  8519  0017B4  B4D8               	btfsc	status,2,c
  8520  0017B6  D002               	goto	l7685
  8521                           
  8522                           ;io.c: 300: {
  8523                           ;io.c: 301: Button_Contact_Counter_Middle--;
  8524  0017B8  0627               	decf	_Button_Contact_Counter_Middle,f,c
  8525                           
  8526                           ;io.c: 303: }
  8527                           
  8528                           ;io.c: 302: break;
  8529  0017BA  D049               	goto	l7709
  8530  0017BC                     l7685:
  8531                           
  8532                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  8533  0017BC  0E00               	movlw	0
  8534  0017BE  0100               	movlb	0	; () banked
  8535  0017C0  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8536  0017C2  0E00               	movlw	0
  8537  0017C4  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8538  0017C6  0E22               	movlw	34
  8539  0017C8  ECF1  F01C         	call	_SETxAPIxVAL
  8540                           
  8541                           ;io.c: 308: }
  8542                           
  8543                           ;io.c: 307: default : break;
  8544                           
  8545                           ;io.c: 305: break;
  8546  0017CC  D040               	goto	l7709
  8547  0017CE                     l7689:
  8548  0017CE  B281               	btfsc	3969,1,c	;volatile
  8549  0017D0  D002               	goto	u7120
  8550  0017D2  0E01               	movlw	1
  8551  0017D4  D001               	goto	u7130
  8552  0017D6                     u7120:
  8553  0017D6  0E00               	movlw	0
  8554  0017D8                     u7130:
  8555  0017D8  0100               	movlb	0	; () banked
  8556  0017DA  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8557  0017DC  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8558                           
  8559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8560                           ; Switch size 1, requested type "space"
  8561                           ; Number of cases is 1, Range of values is 0 to 0
  8562                           ; switch strategies available:
  8563                           ; Name         Instructions Cycles
  8564                           ; simple_byte            4     3 (average)
  8565                           ;	Chosen strategy is simple_byte
  8566  0017DE  0100               	movlb	0	; () banked
  8567  0017E0  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8568  0017E2  0A00               	xorlw	0	; case 0
  8569  0017E4  A4D8               	btfss	status,2,c
  8570  0017E6  D033               	goto	l7709
  8571                           
  8572                           ; BSR set to: 0
  8573                           ; Switch size 1, requested type "space"
  8574                           ; Number of cases is 2, Range of values is 0 to 1
  8575                           ; switch strategies available:
  8576                           ; Name         Instructions Cycles
  8577                           ; simple_byte            7     4 (average)
  8578                           ;	Chosen strategy is simple_byte
  8579  0017E8  0100               	movlb	0	; () banked
  8580  0017EA  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8581  0017EC  0A00               	xorlw	0	; case 0
  8582  0017EE  B4D8               	btfsc	status,2,c
  8583  0017F0  D7E0               	goto	l7679
  8584  0017F2  0A01               	xorlw	1	; case 1
  8585  0017F4  B4D8               	btfsc	status,2,c
  8586  0017F6  D7C1               	goto	l7671
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;io.c: 311: switch(!PORTBbits.RB5)
  8590  0017F8  D02A               	goto	l7709
  8591  0017FA                     l7691:
  8592                           
  8593                           ; BSR set to: 0
  8594  0017FA  5025               	movf	_Button_Contact_Counter_LB,w,c
  8595  0017FC  0100               	movlb	0	; () banked
  8596  0017FE  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8597  001800  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8598  001802  0E1B               	movlw	27
  8599  001804  EC20  F01E         	call	_GETxAPIxVAL
  8600  001808  0100               	movlb	0	; () banked
  8601  00180A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8602  00180C  0100               	movlb	0	; () banked
  8603  00180E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8604  001810  0100               	movlb	0	; () banked
  8605  001812  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8606  001814  0100               	movlb	0	; () banked
  8607  001816  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8608  001818  A0D8               	btfss	status,0,c
  8609  00181A  D002               	goto	l7697
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;io.c: 314: {
  8613                           ;io.c: 315: Button_Contact_Counter_LB++;
  8614  00181C  2A25               	incf	_Button_Contact_Counter_LB,f,c
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;io.c: 317: }
  8618                           
  8619                           ;io.c: 316: break;
  8620  00181E  D057               	goto	l7729
  8621  001820                     l7697:
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  8625  001820  0E00               	movlw	0
  8626  001822  0100               	movlb	0	; () banked
  8627  001824  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8628  001826  0E01               	movlw	1
  8629  001828  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8630  00182A  0E23               	movlw	35
  8631  00182C  ECF1  F01C         	call	_SETxAPIxVAL
  8632                           
  8633                           ;io.c: 319: break;
  8634  001830  D04E               	goto	l7729
  8635  001832                     l7699:
  8636  001832  5025               	movf	_Button_Contact_Counter_LB,w,c
  8637  001834  B4D8               	btfsc	status,2,c
  8638  001836  D002               	goto	l7705
  8639                           
  8640                           ;io.c: 322: {
  8641                           ;io.c: 323: Button_Contact_Counter_LB--;
  8642  001838  0625               	decf	_Button_Contact_Counter_LB,f,c
  8643                           
  8644                           ;io.c: 325: }
  8645                           
  8646                           ;io.c: 324: break;
  8647  00183A  D049               	goto	l7729
  8648  00183C                     l7705:
  8649                           
  8650                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  8651  00183C  0E00               	movlw	0
  8652  00183E  0100               	movlb	0	; () banked
  8653  001840  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8654  001842  0E00               	movlw	0
  8655  001844  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8656  001846  0E23               	movlw	35
  8657  001848  ECF1  F01C         	call	_SETxAPIxVAL
  8658                           
  8659                           ;io.c: 330: }
  8660                           
  8661                           ;io.c: 329: default : break;
  8662                           
  8663                           ;io.c: 327: break;
  8664  00184C  D040               	goto	l7729
  8665  00184E                     l7709:
  8666  00184E  BA81               	btfsc	3969,5,c	;volatile
  8667  001850  D002               	goto	u7160
  8668  001852  0E01               	movlw	1
  8669  001854  D001               	goto	u7170
  8670  001856                     u7160:
  8671  001856  0E00               	movlw	0
  8672  001858                     u7170:
  8673  001858  0100               	movlb	0	; () banked
  8674  00185A  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8675  00185C  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8676                           
  8677                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8678                           ; Switch size 1, requested type "space"
  8679                           ; Number of cases is 1, Range of values is 0 to 0
  8680                           ; switch strategies available:
  8681                           ; Name         Instructions Cycles
  8682                           ; simple_byte            4     3 (average)
  8683                           ;	Chosen strategy is simple_byte
  8684  00185E  0100               	movlb	0	; () banked
  8685  001860  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8686  001862  0A00               	xorlw	0	; case 0
  8687  001864  A4D8               	btfss	status,2,c
  8688  001866  D033               	goto	l7729
  8689                           
  8690                           ; BSR set to: 0
  8691                           ; Switch size 1, requested type "space"
  8692                           ; Number of cases is 2, Range of values is 0 to 1
  8693                           ; switch strategies available:
  8694                           ; Name         Instructions Cycles
  8695                           ; simple_byte            7     4 (average)
  8696                           ;	Chosen strategy is simple_byte
  8697  001868  0100               	movlb	0	; () banked
  8698  00186A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8699  00186C  0A00               	xorlw	0	; case 0
  8700  00186E  B4D8               	btfsc	status,2,c
  8701  001870  D7E0               	goto	l7699
  8702  001872  0A01               	xorlw	1	; case 1
  8703  001874  B4D8               	btfsc	status,2,c
  8704  001876  D7C1               	goto	l7691
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;io.c: 333: switch(!PORTBbits.RB4)
  8708  001878  D02A               	goto	l7729
  8709  00187A                     l7711:
  8710                           
  8711                           ; BSR set to: 0
  8712  00187A  5026               	movf	_Button_Contact_Counter_LF,w,c
  8713  00187C  0100               	movlb	0	; () banked
  8714  00187E  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8715  001880  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8716  001882  0E1B               	movlw	27
  8717  001884  EC20  F01E         	call	_GETxAPIxVAL
  8718  001888  0100               	movlb	0	; () banked
  8719  00188A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8720  00188C  0100               	movlb	0	; () banked
  8721  00188E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8722  001890  0100               	movlb	0	; () banked
  8723  001892  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8724  001894  0100               	movlb	0	; () banked
  8725  001896  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8726  001898  A0D8               	btfss	status,0,c
  8727  00189A  D002               	goto	l7717
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;io.c: 336: {
  8731                           ;io.c: 337: Button_Contact_Counter_LF++;
  8732  00189C  2A26               	incf	_Button_Contact_Counter_LF,f,c
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;io.c: 339: }
  8736                           
  8737                           ;io.c: 338: break;
  8738  00189E  D057               	goto	l7749
  8739  0018A0                     l7717:
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  8743  0018A0  0E00               	movlw	0
  8744  0018A2  0100               	movlb	0	; () banked
  8745  0018A4  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8746  0018A6  0E01               	movlw	1
  8747  0018A8  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8748  0018AA  0E24               	movlw	36
  8749  0018AC  ECF1  F01C         	call	_SETxAPIxVAL
  8750                           
  8751                           ;io.c: 341: break;
  8752  0018B0  D04E               	goto	l7749
  8753  0018B2                     l7719:
  8754  0018B2  5026               	movf	_Button_Contact_Counter_LF,w,c
  8755  0018B4  B4D8               	btfsc	status,2,c
  8756  0018B6  D002               	goto	l7725
  8757                           
  8758                           ;io.c: 344: {
  8759                           ;io.c: 345: Button_Contact_Counter_LF--;
  8760  0018B8  0626               	decf	_Button_Contact_Counter_LF,f,c
  8761                           
  8762                           ;io.c: 347: }
  8763                           
  8764                           ;io.c: 346: break;
  8765  0018BA  D049               	goto	l7749
  8766  0018BC                     l7725:
  8767                           
  8768                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  8769  0018BC  0E00               	movlw	0
  8770  0018BE  0100               	movlb	0	; () banked
  8771  0018C0  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8772  0018C2  0E00               	movlw	0
  8773  0018C4  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8774  0018C6  0E24               	movlw	36
  8775  0018C8  ECF1  F01C         	call	_SETxAPIxVAL
  8776                           
  8777                           ;io.c: 352: }
  8778                           
  8779                           ;io.c: 351: default : break;
  8780                           
  8781                           ;io.c: 349: break;
  8782  0018CC  D040               	goto	l7749
  8783  0018CE                     l7729:
  8784  0018CE  B881               	btfsc	3969,4,c	;volatile
  8785  0018D0  D002               	goto	u7200
  8786  0018D2  0E01               	movlw	1
  8787  0018D4  D001               	goto	u7210
  8788  0018D6                     u7200:
  8789  0018D6  0E00               	movlw	0
  8790  0018D8                     u7210:
  8791  0018D8  0100               	movlb	0	; () banked
  8792  0018DA  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8793  0018DC  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8794                           
  8795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8796                           ; Switch size 1, requested type "space"
  8797                           ; Number of cases is 1, Range of values is 0 to 0
  8798                           ; switch strategies available:
  8799                           ; Name         Instructions Cycles
  8800                           ; simple_byte            4     3 (average)
  8801                           ;	Chosen strategy is simple_byte
  8802  0018DE  0100               	movlb	0	; () banked
  8803  0018E0  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8804  0018E2  0A00               	xorlw	0	; case 0
  8805  0018E4  A4D8               	btfss	status,2,c
  8806  0018E6  D033               	goto	l7749
  8807                           
  8808                           ; BSR set to: 0
  8809                           ; Switch size 1, requested type "space"
  8810                           ; Number of cases is 2, Range of values is 0 to 1
  8811                           ; switch strategies available:
  8812                           ; Name         Instructions Cycles
  8813                           ; simple_byte            7     4 (average)
  8814                           ;	Chosen strategy is simple_byte
  8815  0018E8  0100               	movlb	0	; () banked
  8816  0018EA  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8817  0018EC  0A00               	xorlw	0	; case 0
  8818  0018EE  B4D8               	btfsc	status,2,c
  8819  0018F0  D7E0               	goto	l7719
  8820  0018F2  0A01               	xorlw	1	; case 1
  8821  0018F4  B4D8               	btfsc	status,2,c
  8822  0018F6  D7C1               	goto	l7711
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;io.c: 355: switch(!PORTBbits.RB3)
  8826  0018F8  D02A               	goto	l7749
  8827  0018FA                     l7731:
  8828                           
  8829                           ; BSR set to: 0
  8830  0018FA  5028               	movf	_Button_Contact_Counter_RB,w,c
  8831  0018FC  0100               	movlb	0	; () banked
  8832  0018FE  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8833  001900  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8834  001902  0E1B               	movlw	27
  8835  001904  EC20  F01E         	call	_GETxAPIxVAL
  8836  001908  0100               	movlb	0	; () banked
  8837  00190A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8838  00190C  0100               	movlb	0	; () banked
  8839  00190E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8840  001910  0100               	movlb	0	; () banked
  8841  001912  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8842  001914  0100               	movlb	0	; () banked
  8843  001916  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8844  001918  A0D8               	btfss	status,0,c
  8845  00191A  D002               	goto	l7737
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;io.c: 358: {
  8849                           ;io.c: 359: Button_Contact_Counter_RB++;
  8850  00191C  2A28               	incf	_Button_Contact_Counter_RB,f,c
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;io.c: 361: }
  8854                           
  8855                           ;io.c: 360: break;
  8856  00191E  D057               	goto	l7769
  8857  001920                     l7737:
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  8861  001920  0E00               	movlw	0
  8862  001922  0100               	movlb	0	; () banked
  8863  001924  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8864  001926  0E01               	movlw	1
  8865  001928  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8866  00192A  0E25               	movlw	37
  8867  00192C  ECF1  F01C         	call	_SETxAPIxVAL
  8868                           
  8869                           ;io.c: 363: break;
  8870  001930  D04E               	goto	l7769
  8871  001932                     l7739:
  8872  001932  5028               	movf	_Button_Contact_Counter_RB,w,c
  8873  001934  B4D8               	btfsc	status,2,c
  8874  001936  D002               	goto	l7745
  8875                           
  8876                           ;io.c: 366: {
  8877                           ;io.c: 367: Button_Contact_Counter_RB--;
  8878  001938  0628               	decf	_Button_Contact_Counter_RB,f,c
  8879                           
  8880                           ;io.c: 369: }
  8881                           
  8882                           ;io.c: 368: break;
  8883  00193A  D049               	goto	l7769
  8884  00193C                     l7745:
  8885                           
  8886                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  8887  00193C  0E00               	movlw	0
  8888  00193E  0100               	movlb	0	; () banked
  8889  001940  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8890  001942  0E00               	movlw	0
  8891  001944  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8892  001946  0E25               	movlw	37
  8893  001948  ECF1  F01C         	call	_SETxAPIxVAL
  8894                           
  8895                           ;io.c: 374: }
  8896                           
  8897                           ;io.c: 373: default : break;
  8898                           
  8899                           ;io.c: 371: break;
  8900  00194C  D040               	goto	l7769
  8901  00194E                     l7749:
  8902  00194E  B681               	btfsc	3969,3,c	;volatile
  8903  001950  D002               	goto	u7240
  8904  001952  0E01               	movlw	1
  8905  001954  D001               	goto	u7250
  8906  001956                     u7240:
  8907  001956  0E00               	movlw	0
  8908  001958                     u7250:
  8909  001958  0100               	movlb	0	; () banked
  8910  00195A  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8911  00195C  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8912                           
  8913                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8914                           ; Switch size 1, requested type "space"
  8915                           ; Number of cases is 1, Range of values is 0 to 0
  8916                           ; switch strategies available:
  8917                           ; Name         Instructions Cycles
  8918                           ; simple_byte            4     3 (average)
  8919                           ;	Chosen strategy is simple_byte
  8920  00195E  0100               	movlb	0	; () banked
  8921  001960  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8922  001962  0A00               	xorlw	0	; case 0
  8923  001964  A4D8               	btfss	status,2,c
  8924  001966  D033               	goto	l7769
  8925                           
  8926                           ; BSR set to: 0
  8927                           ; Switch size 1, requested type "space"
  8928                           ; Number of cases is 2, Range of values is 0 to 1
  8929                           ; switch strategies available:
  8930                           ; Name         Instructions Cycles
  8931                           ; simple_byte            7     4 (average)
  8932                           ;	Chosen strategy is simple_byte
  8933  001968  0100               	movlb	0	; () banked
  8934  00196A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8935  00196C  0A00               	xorlw	0	; case 0
  8936  00196E  B4D8               	btfsc	status,2,c
  8937  001970  D7E0               	goto	l7739
  8938  001972  0A01               	xorlw	1	; case 1
  8939  001974  B4D8               	btfsc	status,2,c
  8940  001976  D7C1               	goto	l7731
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;io.c: 377: switch(!PORTBbits.RB2)
  8944  001978  D02A               	goto	l7769
  8945  00197A                     l7751:
  8946                           
  8947                           ; BSR set to: 0
  8948  00197A  5029               	movf	_Button_Contact_Counter_RF,w,c
  8949  00197C  0100               	movlb	0	; () banked
  8950  00197E  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  8951  001980  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8952  001982  0E1B               	movlw	27
  8953  001984  EC20  F01E         	call	_GETxAPIxVAL
  8954  001988  0100               	movlb	0	; () banked
  8955  00198A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  8956  00198C  0100               	movlb	0	; () banked
  8957  00198E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8958  001990  0100               	movlb	0	; () banked
  8959  001992  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8960  001994  0100               	movlb	0	; () banked
  8961  001996  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8962  001998  A0D8               	btfss	status,0,c
  8963  00199A  D002               	goto	l7757
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;io.c: 380: {
  8967                           ;io.c: 381: Button_Contact_Counter_RF++;
  8968  00199C  2A29               	incf	_Button_Contact_Counter_RF,f,c
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;io.c: 383: }
  8972                           
  8973                           ;io.c: 382: break;
  8974  00199E  D057               	goto	l7789
  8975  0019A0                     l7757:
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  8979  0019A0  0E00               	movlw	0
  8980  0019A2  0100               	movlb	0	; () banked
  8981  0019A4  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8982  0019A6  0E01               	movlw	1
  8983  0019A8  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  8984  0019AA  0E26               	movlw	38
  8985  0019AC  ECF1  F01C         	call	_SETxAPIxVAL
  8986                           
  8987                           ;io.c: 385: break;
  8988  0019B0  D04E               	goto	l7789
  8989  0019B2                     l7759:
  8990  0019B2  5029               	movf	_Button_Contact_Counter_RF,w,c
  8991  0019B4  B4D8               	btfsc	status,2,c
  8992  0019B6  D002               	goto	l7765
  8993                           
  8994                           ;io.c: 388: {
  8995                           ;io.c: 389: Button_Contact_Counter_RF--;
  8996  0019B8  0629               	decf	_Button_Contact_Counter_RF,f,c
  8997                           
  8998                           ;io.c: 391: }
  8999                           
  9000                           ;io.c: 390: break;
  9001  0019BA  D049               	goto	l7789
  9002  0019BC                     l7765:
  9003                           
  9004                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  9005  0019BC  0E00               	movlw	0
  9006  0019BE  0100               	movlb	0	; () banked
  9007  0019C0  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9008  0019C2  0E00               	movlw	0
  9009  0019C4  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9010  0019C6  0E26               	movlw	38
  9011  0019C8  ECF1  F01C         	call	_SETxAPIxVAL
  9012                           
  9013                           ;io.c: 396: }
  9014                           
  9015                           ;io.c: 395: default : break;
  9016                           
  9017                           ;io.c: 393: break;
  9018  0019CC  D040               	goto	l7789
  9019  0019CE                     l7769:
  9020  0019CE  B481               	btfsc	3969,2,c	;volatile
  9021  0019D0  D002               	goto	u7280
  9022  0019D2  0E01               	movlw	1
  9023  0019D4  D001               	goto	u7290
  9024  0019D6                     u7280:
  9025  0019D6  0E00               	movlw	0
  9026  0019D8                     u7290:
  9027  0019D8  0100               	movlb	0	; () banked
  9028  0019DA  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  9029  0019DC  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9030                           
  9031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9032                           ; Switch size 1, requested type "space"
  9033                           ; Number of cases is 1, Range of values is 0 to 0
  9034                           ; switch strategies available:
  9035                           ; Name         Instructions Cycles
  9036                           ; simple_byte            4     3 (average)
  9037                           ;	Chosen strategy is simple_byte
  9038  0019DE  0100               	movlb	0	; () banked
  9039  0019E0  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9040  0019E2  0A00               	xorlw	0	; case 0
  9041  0019E4  A4D8               	btfss	status,2,c
  9042  0019E6  D033               	goto	l7789
  9043                           
  9044                           ; BSR set to: 0
  9045                           ; Switch size 1, requested type "space"
  9046                           ; Number of cases is 2, Range of values is 0 to 1
  9047                           ; switch strategies available:
  9048                           ; Name         Instructions Cycles
  9049                           ; simple_byte            7     4 (average)
  9050                           ;	Chosen strategy is simple_byte
  9051  0019E8  0100               	movlb	0	; () banked
  9052  0019EA  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  9053  0019EC  0A00               	xorlw	0	; case 0
  9054  0019EE  B4D8               	btfsc	status,2,c
  9055  0019F0  D7E0               	goto	l7759
  9056  0019F2  0A01               	xorlw	1	; case 1
  9057  0019F4  B4D8               	btfsc	status,2,c
  9058  0019F6  D7C1               	goto	l7751
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;io.c: 399: switch(PORTCbits.RC1)
  9062  0019F8  D02A               	goto	l7789
  9063  0019FA                     l7771:
  9064  0019FA  502F               	movf	_Reed_Contact_LMU_Counter,w,c
  9065  0019FC  0100               	movlb	0	; () banked
  9066  0019FE  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  9067  001A00  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9068  001A02  0E1B               	movlw	27
  9069  001A04  EC20  F01E         	call	_GETxAPIxVAL
  9070  001A08  0100               	movlb	0	; () banked
  9071  001A0A  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  9072  001A0C  0100               	movlb	0	; () banked
  9073  001A0E  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9074  001A10  0100               	movlb	0	; () banked
  9075  001A12  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9076  001A14  0100               	movlb	0	; () banked
  9077  001A16  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9078  001A18  A0D8               	btfss	status,0,c
  9079  001A1A  D002               	goto	l7777
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;io.c: 402: {
  9083                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  9084  001A1C  2A2F               	incf	_Reed_Contact_LMU_Counter,f,c
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;io.c: 405: }
  9088                           
  9089                           ;io.c: 404: break;
  9090  001A1E  D04D               	goto	l7809
  9091  001A20                     l7777:
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  9095  001A20  0E00               	movlw	0
  9096  001A22  0100               	movlb	0	; () banked
  9097  001A24  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9098  001A26  0E01               	movlw	1
  9099  001A28  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9100  001A2A  0E29               	movlw	41
  9101  001A2C  ECF1  F01C         	call	_SETxAPIxVAL
  9102                           
  9103                           ;io.c: 407: break;
  9104  001A30  D044               	goto	l7809
  9105  001A32                     l7779:
  9106  001A32  502F               	movf	_Reed_Contact_LMU_Counter,w,c
  9107  001A34  B4D8               	btfsc	status,2,c
  9108  001A36  D002               	goto	l7785
  9109                           
  9110                           ;io.c: 410: {
  9111                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  9112  001A38  062F               	decf	_Reed_Contact_LMU_Counter,f,c
  9113                           
  9114                           ;io.c: 413: }
  9115                           
  9116                           ;io.c: 412: break;
  9117  001A3A  D03F               	goto	l7809
  9118  001A3C                     l7785:
  9119                           
  9120                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  9121  001A3C  0E00               	movlw	0
  9122  001A3E  0100               	movlb	0	; () banked
  9123  001A40  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9124  001A42  0E00               	movlw	0
  9125  001A44  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9126  001A46  0E29               	movlw	41
  9127  001A48  ECF1  F01C         	call	_SETxAPIxVAL
  9128                           
  9129                           ;io.c: 418: }
  9130                           
  9131                           ;io.c: 417: default : break;
  9132                           
  9133                           ;io.c: 415: break;
  9134  001A4C  D036               	goto	l7809
  9135  001A4E                     l7789:
  9136  001A4E  A282               	btfss	3970,1,c	;volatile
  9137  001A50  D002               	goto	u7320
  9138  001A52  0E01               	movlw	1
  9139  001A54  D001               	goto	u7326
  9140  001A56                     u7320:
  9141  001A56  0E00               	movlw	0
  9142  001A58                     u7326:
  9143                           
  9144                           ; Switch size 1, requested type "space"
  9145                           ; Number of cases is 2, Range of values is 0 to 1
  9146                           ; switch strategies available:
  9147                           ; Name         Instructions Cycles
  9148                           ; simple_byte            7     4 (average)
  9149                           ;	Chosen strategy is simple_byte
  9150  001A58  0A00               	xorlw	0	; case 0
  9151  001A5A  B4D8               	btfsc	status,2,c
  9152  001A5C  D7CE               	goto	l7771
  9153  001A5E  0A01               	xorlw	1	; case 1
  9154  001A60  B4D8               	btfsc	status,2,c
  9155  001A62  D7E7               	goto	l7779
  9156                           
  9157                           ;io.c: 421: switch(PORTDbits.RD4)
  9158  001A64  D02A               	goto	l7809
  9159  001A66                     l7791:
  9160  001A66  502E               	movf	_Reed_Contact_LMD_Counter,w,c
  9161  001A68  0100               	movlb	0	; () banked
  9162  001A6A  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  9163  001A6C  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9164  001A6E  0E1B               	movlw	27
  9165  001A70  EC20  F01E         	call	_GETxAPIxVAL
  9166  001A74  0100               	movlb	0	; () banked
  9167  001A76  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  9168  001A78  0100               	movlb	0	; () banked
  9169  001A7A  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9170  001A7C  0100               	movlb	0	; () banked
  9171  001A7E  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9172  001A80  0100               	movlb	0	; () banked
  9173  001A82  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9174  001A84  A0D8               	btfss	status,0,c
  9175  001A86  D002               	goto	l7797
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;io.c: 424: {
  9179                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  9180  001A88  2A2E               	incf	_Reed_Contact_LMD_Counter,f,c
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;io.c: 427: }
  9184                           
  9185                           ;io.c: 426: break;
  9186  001A8A  D04D               	goto	l7829
  9187  001A8C                     l7797:
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  9191  001A8C  0E00               	movlw	0
  9192  001A8E  0100               	movlb	0	; () banked
  9193  001A90  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9194  001A92  0E01               	movlw	1
  9195  001A94  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9196  001A96  0E2A               	movlw	42
  9197  001A98  ECF1  F01C         	call	_SETxAPIxVAL
  9198                           
  9199                           ;io.c: 429: break;
  9200  001A9C  D044               	goto	l7829
  9201  001A9E                     l7799:
  9202  001A9E  502E               	movf	_Reed_Contact_LMD_Counter,w,c
  9203  001AA0  B4D8               	btfsc	status,2,c
  9204  001AA2  D002               	goto	l7805
  9205                           
  9206                           ;io.c: 432: {
  9207                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  9208  001AA4  062E               	decf	_Reed_Contact_LMD_Counter,f,c
  9209                           
  9210                           ;io.c: 435: }
  9211                           
  9212                           ;io.c: 434: break;
  9213  001AA6  D03F               	goto	l7829
  9214  001AA8                     l7805:
  9215                           
  9216                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9217  001AA8  0E00               	movlw	0
  9218  001AAA  0100               	movlb	0	; () banked
  9219  001AAC  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9220  001AAE  0E00               	movlw	0
  9221  001AB0  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9222  001AB2  0E2A               	movlw	42
  9223  001AB4  ECF1  F01C         	call	_SETxAPIxVAL
  9224                           
  9225                           ;io.c: 440: }
  9226                           
  9227                           ;io.c: 439: default : break;
  9228                           
  9229                           ;io.c: 437: break;
  9230  001AB8  D036               	goto	l7829
  9231  001ABA                     l7809:
  9232  001ABA  A883               	btfss	3971,4,c	;volatile
  9233  001ABC  D002               	goto	u7350
  9234  001ABE  0E01               	movlw	1
  9235  001AC0  D001               	goto	u7356
  9236  001AC2                     u7350:
  9237  001AC2  0E00               	movlw	0
  9238  001AC4                     u7356:
  9239                           
  9240                           ; Switch size 1, requested type "space"
  9241                           ; Number of cases is 2, Range of values is 0 to 1
  9242                           ; switch strategies available:
  9243                           ; Name         Instructions Cycles
  9244                           ; simple_byte            7     4 (average)
  9245                           ;	Chosen strategy is simple_byte
  9246  001AC4  0A00               	xorlw	0	; case 0
  9247  001AC6  B4D8               	btfsc	status,2,c
  9248  001AC8  D7CE               	goto	l7791
  9249  001ACA  0A01               	xorlw	1	; case 1
  9250  001ACC  B4D8               	btfsc	status,2,c
  9251  001ACE  D7E7               	goto	l7799
  9252                           
  9253                           ;io.c: 443: switch(PORTEbits.RE1)
  9254  001AD0  D02A               	goto	l7829
  9255  001AD2                     l7811:
  9256  001AD2  5033               	movf	_Reed_Contact_RMU_Counter,w,c
  9257  001AD4  0100               	movlb	0	; () banked
  9258  001AD6  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  9259  001AD8  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9260  001ADA  0E1B               	movlw	27
  9261  001ADC  EC20  F01E         	call	_GETxAPIxVAL
  9262  001AE0  0100               	movlb	0	; () banked
  9263  001AE2  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  9264  001AE4  0100               	movlb	0	; () banked
  9265  001AE6  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9266  001AE8  0100               	movlb	0	; () banked
  9267  001AEA  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9268  001AEC  0100               	movlb	0	; () banked
  9269  001AEE  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9270  001AF0  A0D8               	btfss	status,0,c
  9271  001AF2  D002               	goto	l7817
  9272                           
  9273                           ; BSR set to: 0
  9274                           ;io.c: 446: {
  9275                           ;io.c: 447: Reed_Contact_RMU_Counter++;
  9276  001AF4  2A33               	incf	_Reed_Contact_RMU_Counter,f,c
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;io.c: 449: }
  9280                           
  9281                           ;io.c: 448: break;
  9282  001AF6  D04D               	goto	l7849
  9283  001AF8                     l7817:
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
  9287  001AF8  0E00               	movlw	0
  9288  001AFA  0100               	movlb	0	; () banked
  9289  001AFC  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9290  001AFE  0E01               	movlw	1
  9291  001B00  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9292  001B02  0E2B               	movlw	43
  9293  001B04  ECF1  F01C         	call	_SETxAPIxVAL
  9294                           
  9295                           ;io.c: 451: break;
  9296  001B08  D044               	goto	l7849
  9297  001B0A                     l7819:
  9298  001B0A  5033               	movf	_Reed_Contact_RMU_Counter,w,c
  9299  001B0C  B4D8               	btfsc	status,2,c
  9300  001B0E  D002               	goto	l7825
  9301                           
  9302                           ;io.c: 454: {
  9303                           ;io.c: 455: Reed_Contact_RMU_Counter--;
  9304  001B10  0633               	decf	_Reed_Contact_RMU_Counter,f,c
  9305                           
  9306                           ;io.c: 457: }
  9307                           
  9308                           ;io.c: 456: break;
  9309  001B12  D03F               	goto	l7849
  9310  001B14                     l7825:
  9311                           
  9312                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
  9313  001B14  0E00               	movlw	0
  9314  001B16  0100               	movlb	0	; () banked
  9315  001B18  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9316  001B1A  0E00               	movlw	0
  9317  001B1C  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9318  001B1E  0E2B               	movlw	43
  9319  001B20  ECF1  F01C         	call	_SETxAPIxVAL
  9320                           
  9321                           ;io.c: 462: }
  9322                           
  9323                           ;io.c: 461: default : break;
  9324                           
  9325                           ;io.c: 459: break;
  9326  001B24  D036               	goto	l7849
  9327  001B26                     l7829:
  9328  001B26  A284               	btfss	3972,1,c	;volatile
  9329  001B28  D002               	goto	u7380
  9330  001B2A  0E01               	movlw	1
  9331  001B2C  D001               	goto	u7386
  9332  001B2E                     u7380:
  9333  001B2E  0E00               	movlw	0
  9334  001B30                     u7386:
  9335                           
  9336                           ; Switch size 1, requested type "space"
  9337                           ; Number of cases is 2, Range of values is 0 to 1
  9338                           ; switch strategies available:
  9339                           ; Name         Instructions Cycles
  9340                           ; simple_byte            7     4 (average)
  9341                           ;	Chosen strategy is simple_byte
  9342  001B30  0A00               	xorlw	0	; case 0
  9343  001B32  B4D8               	btfsc	status,2,c
  9344  001B34  D7CE               	goto	l7811
  9345  001B36  0A01               	xorlw	1	; case 1
  9346  001B38  B4D8               	btfsc	status,2,c
  9347  001B3A  D7E7               	goto	l7819
  9348                           
  9349                           ;io.c: 465: switch(PORTEbits.RE0)
  9350  001B3C  D02A               	goto	l7849
  9351  001B3E                     l7831:
  9352  001B3E  5032               	movf	_Reed_Contact_RMD_Counter,w,c
  9353  001B40  0100               	movlb	0	; () banked
  9354  001B42  6FB0               	movwf	??_Debounce_Inputs& (0+255),b
  9355  001B44  6BB1               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9356  001B46  0E1B               	movlw	27
  9357  001B48  EC20  F01E         	call	_GETxAPIxVAL
  9358  001B4C  0100               	movlb	0	; () banked
  9359  001B4E  51B0               	movf	??_Debounce_Inputs& (0+255),w,b
  9360  001B50  0100               	movlb	0	; () banked
  9361  001B52  5D8F               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9362  001B54  0100               	movlb	0	; () banked
  9363  001B56  51B1               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9364  001B58  0100               	movlb	0	; () banked
  9365  001B5A  5990               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9366  001B5C  A0D8               	btfss	status,0,c
  9367  001B5E  D002               	goto	l7837
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;io.c: 468: {
  9371                           ;io.c: 469: Reed_Contact_RMD_Counter++;
  9372  001B60  2A32               	incf	_Reed_Contact_RMD_Counter,f,c
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;io.c: 471: }
  9376                           
  9377                           ;io.c: 470: break;
  9378  001B62  0012               	return	
  9379  001B64                     l7837:
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
  9383  001B64  0E00               	movlw	0
  9384  001B66  0100               	movlb	0	; () banked
  9385  001B68  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9386  001B6A  0E01               	movlw	1
  9387  001B6C  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9388  001B6E  0E2C               	movlw	44
  9389  001B70  ECF1  F01C         	call	_SETxAPIxVAL
  9390                           
  9391                           ;io.c: 473: break;
  9392  001B74  0012               	return	
  9393  001B76                     l7839:
  9394  001B76  5032               	movf	_Reed_Contact_RMD_Counter,w,c
  9395  001B78  B4D8               	btfsc	status,2,c
  9396  001B7A  D002               	goto	l7845
  9397                           
  9398                           ;io.c: 476: {
  9399                           ;io.c: 477: Reed_Contact_RMD_Counter--;
  9400  001B7C  0632               	decf	_Reed_Contact_RMD_Counter,f,c
  9401                           
  9402                           ;io.c: 479: }
  9403                           
  9404                           ;io.c: 478: break;
  9405  001B7E  0012               	return	
  9406  001B80                     l7845:
  9407                           
  9408                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
  9409  001B80  0E00               	movlw	0
  9410  001B82  0100               	movlb	0	; () banked
  9411  001B84  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9412  001B86  0E00               	movlw	0
  9413  001B88  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
  9414  001B8A  0E2C               	movlw	44
  9415  001B8C  ECF1  F01C         	call	_SETxAPIxVAL
  9416                           
  9417                           ;io.c: 484: }
  9418                           
  9419                           ;io.c: 483: default : break;
  9420                           
  9421                           ;io.c: 481: break;
  9422  001B90  0012               	return	
  9423  001B92                     l7849:
  9424  001B92  A084               	btfss	3972,0,c	;volatile
  9425  001B94  D002               	goto	u7410
  9426  001B96  0E01               	movlw	1
  9427  001B98  D001               	goto	u7416
  9428  001B9A                     u7410:
  9429  001B9A  0E00               	movlw	0
  9430  001B9C                     u7416:
  9431                           
  9432                           ; Switch size 1, requested type "space"
  9433                           ; Number of cases is 2, Range of values is 0 to 1
  9434                           ; switch strategies available:
  9435                           ; Name         Instructions Cycles
  9436                           ; simple_byte            7     4 (average)
  9437                           ;	Chosen strategy is simple_byte
  9438  001B9C  0A00               	xorlw	0	; case 0
  9439  001B9E  B4D8               	btfsc	status,2,c
  9440  001BA0  D7CE               	goto	l7831
  9441  001BA2  0A01               	xorlw	1	; case 1
  9442  001BA4  A4D8               	btfss	status,2,c
  9443  001BA6  0012               	return	
  9444  001BA8  D7E6               	goto	l7839
  9445  001BAA                     __end_of_Debounce_Inputs:
  9446                           	opt stack 0
  9447                           tblptru	equ	0xFF8
  9448                           tblptrh	equ	0xFF7
  9449                           tblptrl	equ	0xFF6
  9450                           tablat	equ	0xFF5
  9451                           intcon	equ	0xFF2
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           postdec1	equ	0xFE5
  9455                           fsr1l	equ	0xFE1
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function _SetDCPWM1 *****************
  9459 ;; Defined at:
  9460 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic18\plib\PWM\pw1setdc.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  dutycycle       2    2[BANK0 ] unsigned int 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;  DCycle          2    6[BANK0 ] struct PWMDC
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      void 
  9467 ;; Registers used:
  9468 ;;		wreg, status,2, status,0
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9474 ;;      Params:         0       2       0       0       0       0       0       0       0
  9475 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9476 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9477 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9478 ;;Total ram usage:        6 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    3
  9481 ;; This function calls:
  9482 ;;		Nothing
  9483 ;; This function is called by:
  9484 ;;		_Debounce_Inputs
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488                           	psect	text17
  9489  003A82                     __ptext17:
  9490                           	opt stack 0
  9491  003A82                     _SetDCPWM1:
  9492                           	opt stack 25
  9493                           
  9494                           ;incstack = 0
  9495  003A82  C091  F093         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9496  003A86  C092  F094         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9497  003A8A  0E06               	movlw	6
  9498  003A8C                     u6895:
  9499  003A8C  90D8               	bcf	status,0,c
  9500  003A8E  0100               	movlb	0	; () banked
  9501  003A90  3793               	rlcf	??_SetDCPWM1& (0+255),f,b
  9502  003A92  3794               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  9503  003A94  2EE8               	decfsz	wreg,f,c
  9504  003A96  D7FA               	goto	u6895
  9505  003A98  C093  F095         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9506  003A9C  C094  F096         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  9507                           
  9508                           ; BSR set to: 0
  9509  003AA0  C096  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  9510  003AA4  C095  F093         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  9511  003AA8  0100               	movlb	0	; () banked
  9512  003AAA  90D8               	bcf	status,0,c
  9513  003AAC  3393               	rrcf	??_SetDCPWM1& (0+255),f,b
  9514  003AAE  0100               	movlb	0	; () banked
  9515  003AB0  90D8               	bcf	status,0,c
  9516  003AB2  3393               	rrcf	??_SetDCPWM1& (0+255),f,b
  9517  003AB4  0E30               	movlw	48
  9518  003AB6  0100               	movlb	0	; () banked
  9519  003AB8  1793               	andwf	??_SetDCPWM1& (0+255),f,b
  9520  003ABA  50BD               	movf	4029,w,c	;volatile
  9521  003ABC  0BCF               	andlw	207
  9522  003ABE  0100               	movlb	0	; () banked
  9523  003AC0  1193               	iorwf	??_SetDCPWM1& (0+255),w,b
  9524  003AC2  6EBD               	movwf	4029,c	;volatile
  9525                           
  9526                           ; BSR set to: 0
  9527  003AC4  0012               	return		;funcret
  9528  003AC6                     __end_of_SetDCPWM1:
  9529                           	opt stack 0
  9530                           tblptru	equ	0xFF8
  9531                           tblptrh	equ	0xFF7
  9532                           tblptrl	equ	0xFF6
  9533                           tablat	equ	0xFF5
  9534                           intcon	equ	0xFF2
  9535                           postinc0	equ	0xFEE
  9536                           wreg	equ	0xFE8
  9537                           postdec1	equ	0xFE5
  9538                           fsr1l	equ	0xFE1
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _READxRECEIVEDxMESSAGE *****************
  9542 ;; Defined at:
  9543 ;;		line 32 in file "../terminal.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;		None
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;		None
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  1    wreg      void 
  9550 ;; Registers used:
  9551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9557 ;;      Params:         0       0       0       0       0       0       0       0       0
  9558 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9559 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9560 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9561 ;;Total ram usage:        4 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    7
  9564 ;; This function calls:
  9565 ;;		_EUSART1_Read
  9566 ;;		_TranslateMessage
  9567 ;;		_printf
  9568 ;; This function is called by:
  9569 ;;		_main
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           	psect	text18
  9574  00264E                     __ptext18:
  9575                           	opt stack 0
  9576  00264E                     _READxRECEIVEDxMESSAGE:
  9577                           	opt stack 23
  9578                           
  9579                           ;terminal.c: 34: if ((eusart1RxCount) > 0){
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;incstack = 0
  9583  00264E  503A               	movf	_eusart1RxCount,w,c	;volatile
  9584  002650  B4D8               	btfsc	status,2,c
  9585  002652  D09C               	goto	l8831
  9586                           
  9587                           ;terminal.c: 37: Received_Data = EUSART1_Read();
  9588  002654  ECA0  F01D         	call	_EUSART1_Read	;wreg free
  9589  002658  0100               	movlb	0	; () banked
  9590  00265A  6F7B               	movwf	_Received_Data& (0+255),b
  9591                           
  9592                           ;terminal.c: 39: switch (RxSwitch){
  9593  00265C  D08B               	goto	l8829
  9594  00265E                     l8777:
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;terminal.c: 41: pData = &Data[0];
  9598  00265E  0E85               	movlw	low _Data
  9599  002660  0100               	movlb	0	; () banked
  9600  002662  6F76               	movwf	_pData& (0+255),b
  9601  002664  0E00               	movlw	high _Data
  9602  002666  0100               	movlb	0	; () banked
  9603  002668  6F77               	movwf	(_pData+1)& (0+255),b
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;terminal.c: 42: pLen = &Data[DataLen - 1];
  9607  00266A  0EFF               	movlw	255
  9608  00266C  0100               	movlb	0	; () banked
  9609  00266E  6FAF               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
  9610  002670  0EFF               	movlw	255
  9611  002672  0100               	movlb	0	; () banked
  9612  002674  6FB0               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
  9613  002676  0E0B               	movlw	low _DataLen
  9614  002678  6EF6               	movwf	tblptrl,c
  9615  00267A                     	if	1	;There is more than 1 active tblptr byte
  9616  00267A  0E08               	movlw	high _DataLen
  9617  00267C  6EF7               	movwf	tblptrh,c
  9618  00267E                     	endif
  9619  00267E                     	if	0	;There are less than 3 active tblptr bytes
  9620  00267E                     	endif
  9621  00267E  0008               	tblrd		*
  9622  002680  50F5               	movf	tablat,w,c
  9623  002682  0100               	movlb	0	; () banked
  9624  002684  6FB1               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
  9625  002686  6BB2               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
  9626  002688  0100               	movlb	0	; () banked
  9627  00268A  51AF               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
  9628  00268C  0100               	movlb	0	; () banked
  9629  00268E  27B1               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
  9630  002690  0100               	movlb	0	; () banked
  9631  002692  51B0               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
  9632  002694  0100               	movlb	0	; () banked
  9633  002696  23B2               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
  9634  002698  0E85               	movlw	low _Data
  9635  00269A  0100               	movlb	0	; () banked
  9636  00269C  25B1               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
  9637  00269E  0100               	movlb	0	; () banked
  9638  0026A0  6F78               	movwf	_pLen& (0+255),b
  9639  0026A2  0E00               	movlw	high _Data
  9640  0026A4  0100               	movlb	0	; () banked
  9641  0026A6  21B2               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
  9642  0026A8  0100               	movlb	0	; () banked
  9643  0026AA  6F79               	movwf	(_pLen+1)& (0+255),b
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;terminal.c: 43: if (Received_Data == 's' || Received_Data == 'g'){
  9647  0026AC  0E73               	movlw	115
  9648  0026AE  0100               	movlb	0	; () banked
  9649  0026B0  197B               	xorwf	_Received_Data& (0+255),w,b
  9650  0026B2  B4D8               	btfsc	status,2,c
  9651  0026B4  D005               	goto	l8785
  9652                           
  9653                           ; BSR set to: 0
  9654  0026B6  0E67               	movlw	103
  9655  0026B8  0100               	movlb	0	; () banked
  9656  0026BA  197B               	xorwf	_Received_Data& (0+255),w,b
  9657  0026BC  A4D8               	btfss	status,2,c
  9658  0026BE  D00B               	goto	l8791
  9659  0026C0                     l8785:
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;terminal.c: 44: *pData = Received_Data;
  9663  0026C0  C076  FFD9         	movff	_pData,fsr2l
  9664  0026C4  C077  FFDA         	movff	_pData+1,fsr2h
  9665  0026C8  C07B  FFDF         	movff	_Received_Data,indf2
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;terminal.c: 45: *pData++;
  9669  0026CC  0100               	movlb	0	; () banked
  9670  0026CE  4B76               	infsnz	_pData& (0+255),f,b
  9671  0026D0  2B77               	incf	(_pData+1)& (0+255),f,b
  9672                           
  9673                           ; BSR set to: 0
  9674                           ;terminal.c: 46: RxSwitch = 1;
  9675  0026D2  0E01               	movlw	1
  9676  0026D4  D00F               	goto	L91
  9677  0026D6                     l8791:
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;terminal.c: 48: else{
  9681                           ;terminal.c: 49: RxSwitch = 0;
  9682  0026D6  0E00               	movlw	0
  9683  0026D8  D00D               	goto	L91
  9684  0026DA                     l8793:
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;terminal.c: 54: if (Received_Data == 'x'){
  9688  0026DA  0E78               	movlw	120
  9689  0026DC  0100               	movlb	0	; () banked
  9690  0026DE  197B               	xorwf	_Received_Data& (0+255),w,b
  9691  0026E0  A4D8               	btfss	status,2,c
  9692  0026E2  D7F9               	goto	l8791
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;terminal.c: 55: *pData = Received_Data;
  9696  0026E4  C076  FFD9         	movff	_pData,fsr2l
  9697  0026E8  C077  FFDA         	movff	_pData+1,fsr2h
  9698  0026EC  C07B  FFDF         	movff	_Received_Data,indf2
  9699  0026F0  D03D               	goto	l8823
  9700  0026F2                     l8799:
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;terminal.c: 57: RxSwitch = 2;
  9704  0026F2  0E02               	movlw	2
  9705  0026F4                     L91:
  9706  0026F4  0100               	movlb	0	; () banked
  9707  0026F6  6F7C               	movwf	_RxSwitch& (0+255),b
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;terminal.c: 61: }
  9711                           ;terminal.c: 62: break;
  9712  0026F8  D049               	goto	l8831
  9713  0026FA                     l8803:
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;terminal.c: 65: if (Received_Data == 'G'){
  9717  0026FA  0E47               	movlw	71
  9718  0026FC  0100               	movlb	0	; () banked
  9719  0026FE  197B               	xorwf	_Received_Data& (0+255),w,b
  9720  002700  B4D8               	btfsc	status,2,c
  9721  002702  D00A               	goto	l8811
  9722  002704  D01A               	goto	l8815
  9723  002706                     l8807:
  9724                           
  9725                           ; BSR set to: 0
  9726                           ;terminal.c: 69: *pData = '\0';
  9727  002706  C076  FFD9         	movff	_pData,fsr2l
  9728  00270A  C077  FFDA         	movff	_pData+1,fsr2h
  9729  00270E  0E00               	movlw	0
  9730  002710  6EDF               	movwf	indf2,c
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;terminal.c: 70: pData++;
  9734  002712  0100               	movlb	0	; () banked
  9735  002714  4B76               	infsnz	_pData& (0+255),f,b
  9736  002716  2B77               	incf	(_pData+1)& (0+255),f,b
  9737  002718                     l8811:
  9738                           
  9739                           ; BSR set to: 0
  9740  002718  0100               	movlb	0	; () banked
  9741  00271A  5178               	movf	_pLen& (0+255),w,b
  9742  00271C  0100               	movlb	0	; () banked
  9743  00271E  5D76               	subwf	_pData& (0+255),w,b
  9744  002720  0100               	movlb	0	; () banked
  9745  002722  5179               	movf	(_pLen+1)& (0+255),w,b
  9746  002724  0100               	movlb	0	; () banked
  9747  002726  5977               	subwfb	(_pData+1)& (0+255),w,b
  9748  002728  A0D8               	btfss	status,0,c
  9749  00272A  D7ED               	goto	l8807
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;terminal.c: 71: }
  9753                           ;terminal.c: 73: RxSwitch = 3;
  9754                           
  9755                           ; BSR set to: 0
  9756  00272C  0E03               	movlw	3
  9757  00272E  0100               	movlb	0	; () banked
  9758  002730  6F7C               	movwf	_RxSwitch& (0+255),b
  9759                           
  9760                           ;terminal.c: 74: Message_To_Translate = 1;
  9761  002732  0E01               	movlw	1
  9762  002734  0100               	movlb	0	; () banked
  9763  002736  6F7A               	movwf	_Message_To_Translate& (0+255),b
  9764                           
  9765                           ;terminal.c: 75: }
  9766  002738  D029               	goto	l8831
  9767  00273A                     l8815:
  9768                           
  9769                           ; BSR set to: 0
  9770                           ;terminal.c: 76: else{
  9771                           ;terminal.c: 77: *pData = Received_Data;
  9772  00273A  C076  FFD9         	movff	_pData,fsr2l
  9773  00273E  C077  FFDA         	movff	_pData+1,fsr2h
  9774  002742  C07B  FFDF         	movff	_Received_Data,indf2
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;terminal.c: 78: if (pData > pLen){
  9778  002746  0100               	movlb	0	; () banked
  9779  002748  5176               	movf	_pData& (0+255),w,b
  9780  00274A  0100               	movlb	0	; () banked
  9781  00274C  5D78               	subwf	_pLen& (0+255),w,b
  9782  00274E  0100               	movlb	0	; () banked
  9783  002750  5177               	movf	(_pData+1)& (0+255),w,b
  9784  002752  0100               	movlb	0	; () banked
  9785  002754  5979               	subwfb	(_pLen+1)& (0+255),w,b
  9786  002756  B0D8               	btfsc	status,0,c
  9787  002758  D009               	goto	l8823
  9788                           
  9789                           ; BSR set to: 0
  9790                           ;terminal.c: 79: printf("\r\nE#10\r\n");
  9791  00275A  0E18               	movlw	low STR_1
  9792  00275C  0100               	movlb	0	; () banked
  9793  00275E  6F9A               	movwf	printf@f& (0+255),b
  9794  002760  0E08               	movlw	high STR_1
  9795  002762  0100               	movlb	0	; () banked
  9796  002764  6F9B               	movwf	(printf@f+1)& (0+255),b
  9797  002766  ECD3  F013         	call	_printf	;wreg free
  9798  00276A  D7B5               	goto	l8791
  9799  00276C                     l8823:
  9800                           
  9801                           ; BSR set to: 0
  9802                           ;terminal.c: 82: else{
  9803                           ;terminal.c: 83: pData++;
  9804  00276C  0100               	movlb	0	; () banked
  9805  00276E  4B76               	infsnz	_pData& (0+255),f,b
  9806  002770  2B77               	incf	(_pData+1)& (0+255),f,b
  9807  002772  D7BF               	goto	l8799
  9808  002774                     l8829:
  9809                           
  9810                           ; BSR set to: 0
  9811  002774  0100               	movlb	0	; () banked
  9812  002776  517C               	movf	_RxSwitch& (0+255),w,b
  9813                           
  9814                           ; Switch size 1, requested type "space"
  9815                           ; Number of cases is 4, Range of values is 0 to 3
  9816                           ; switch strategies available:
  9817                           ; Name         Instructions Cycles
  9818                           ; simple_byte           13     7 (average)
  9819                           ;	Chosen strategy is simple_byte
  9820  002778  0A00               	xorlw	0	; case 0
  9821  00277A  B4D8               	btfsc	status,2,c
  9822  00277C  D770               	goto	l8777
  9823  00277E  0A01               	xorlw	1	; case 1
  9824  002780  B4D8               	btfsc	status,2,c
  9825  002782  D7AB               	goto	l8793
  9826  002784  0A03               	xorlw	3	; case 2
  9827  002786  B4D8               	btfsc	status,2,c
  9828  002788  D7B8               	goto	l8803
  9829  00278A  0A01               	xorlw	1	; case 3
  9830  00278C                     l8831:
  9831                           
  9832                           ;terminal.c: 95: }
  9833                           ;terminal.c: 97: if (Message_To_Translate == 1){
  9834  00278C  0100               	movlb	0	; () banked
  9835  00278E  057A               	decf	_Message_To_Translate& (0+255),w,b
  9836  002790  A4D8               	btfss	status,2,c
  9837  002792  0012               	return	
  9838                           
  9839                           ; BSR set to: 0
  9840                           ;terminal.c: 98: TranslateMessage();
  9841  002794  EC6C  F012         	call	_TranslateMessage	;wreg free
  9842                           
  9843                           ;terminal.c: 99: Message_To_Translate = 0;
  9844  002798  0E00               	movlw	0
  9845  00279A  0100               	movlb	0	; () banked
  9846  00279C  6F7A               	movwf	_Message_To_Translate& (0+255),b
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;terminal.c: 100: RxSwitch = 0;
  9850  00279E  0E00               	movlw	0
  9851  0027A0  0100               	movlb	0	; () banked
  9852  0027A2  6F7C               	movwf	_RxSwitch& (0+255),b
  9853  0027A4  0012               	return	
  9854  0027A6                     __end_of_READxRECEIVEDxMESSAGE:
  9855                           	opt stack 0
  9856                           tblptru	equ	0xFF8
  9857                           tblptrh	equ	0xFF7
  9858                           tblptrl	equ	0xFF6
  9859                           tablat	equ	0xFF5
  9860                           intcon	equ	0xFF2
  9861                           postinc0	equ	0xFEE
  9862                           wreg	equ	0xFE8
  9863                           postdec1	equ	0xFE5
  9864                           fsr1l	equ	0xFE1
  9865                           indf2	equ	0xFDF
  9866                           fsr2h	equ	0xFDA
  9867                           fsr2l	equ	0xFD9
  9868                           status	equ	0xFD8
  9869                           
  9870 ;; *************** function _TranslateMessage *****************
  9871 ;; Defined at:
  9872 ;;		line 118 in file "../terminal.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;		None
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;  Index           2   30[BANK0 ] unsigned int 
  9877 ;;  Value           2   28[BANK0 ] unsigned int 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  1    wreg      void 
  9880 ;; Registers used:
  9881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9887 ;;      Params:         0       0       0       0       0       0       0       0       0
  9888 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9889 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9890 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9891 ;;Total ram usage:        4 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    6
  9894 ;; This function calls:
  9895 ;;		_GETxAPIxRW
  9896 ;;		_GETxAPIxVAL
  9897 ;;		_SENDxMESSAGE
  9898 ;;		_SETxAPIxVALxNoxRET
  9899 ;;		_atoi
  9900 ;;		_printf
  9901 ;; This function is called by:
  9902 ;;		_READxRECEIVEDxMESSAGE
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text19
  9907  0024D8                     __ptext19:
  9908                           	opt stack 0
  9909  0024D8                     _TranslateMessage:
  9910                           	opt stack 23
  9911                           
  9912                           ;terminal.c: 120: unsigned int Value, Index;
  9913                           ;terminal.c: 122: if(Data[0] == 's'){
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;incstack = 0
  9917  0024D8  0E73               	movlw	115
  9918  0024DA  0100               	movlb	0	; () banked
  9919  0024DC  1985               	xorwf	_Data& (0+255),w,b
  9920  0024DE  A4D8               	btfss	status,2,c
  9921  0024E0  D06E               	goto	l8175
  9922                           
  9923                           ; BSR set to: 0
  9924                           ;terminal.c: 124: pData = &Data[2];
  9925  0024E2  0E87               	movlw	low (_Data+2)
  9926  0024E4  0100               	movlb	0	; () banked
  9927  0024E6  6F76               	movwf	_pData& (0+255),b
  9928  0024E8  0E00               	movlw	high (_Data+2)
  9929  0024EA  0100               	movlb	0	; () banked
  9930  0024EC  6F77               	movwf	(_pData+1)& (0+255),b
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;terminal.c: 125: Index = (unsigned int)atoi (pData);
  9934  0024EE  C076  F095         	movff	_pData,atoi@s
  9935  0024F2  C077  F096         	movff	_pData+1,atoi@s+1
  9936  0024F6  EC02  F01A         	call	_atoi	;wreg free
  9937  0024FA  C095  F0AD         	movff	?_atoi,TranslateMessage@Index
  9938  0024FE  C096  F0AE         	movff	?_atoi+1,TranslateMessage@Index+1
  9939                           
  9940                           ;terminal.c: 126: pData = &Data[5];
  9941  002502  0E8A               	movlw	low (_Data+5)
  9942  002504  0100               	movlb	0	; () banked
  9943  002506  6F76               	movwf	_pData& (0+255),b
  9944  002508  0E00               	movlw	high (_Data+5)
  9945  00250A  0100               	movlb	0	; () banked
  9946  00250C  6F77               	movwf	(_pData+1)& (0+255),b
  9947                           
  9948                           ;terminal.c: 127: Value = (unsigned int)atoi (pData);
  9949  00250E  C076  F095         	movff	_pData,atoi@s
  9950  002512  C077  F096         	movff	_pData+1,atoi@s+1
  9951  002516  EC02  F01A         	call	_atoi	;wreg free
  9952  00251A  C095  F0AB         	movff	?_atoi,TranslateMessage@Value
  9953  00251E  C096  F0AC         	movff	?_atoi+1,TranslateMessage@Value+1
  9954                           
  9955                           ;terminal.c: 129: if (GETxAPIxRW(Index) == 0){
  9956  002522  0100               	movlb	0	; () banked
  9957  002524  51AD               	movf	TranslateMessage@Index& (0+255),w,b
  9958  002526  EC2E  F01E         	call	_GETxAPIxRW
  9959  00252A  0100               	movlb	0	; () banked
  9960  00252C  518F               	movf	?_GETxAPIxRW& (0+255),w,b
  9961  00252E  0100               	movlb	0	; () banked
  9962  002530  1190               	iorwf	(?_GETxAPIxRW+1)& (0+255),w,b
  9963  002532  A4D8               	btfss	status,2,c
  9964  002534  D009               	goto	l8161
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;terminal.c: 130: printf("\r\nE#11\r\n");
  9968  002536  0E21               	movlw	low STR_2
  9969  002538  0100               	movlb	0	; () banked
  9970  00253A  6F9A               	movwf	printf@f& (0+255),b
  9971  00253C  0E08               	movlw	high STR_2
  9972  00253E  0100               	movlb	0	; () banked
  9973  002540  6F9B               	movwf	(printf@f+1)& (0+255),b
  9974  002542  ECD3  F013         	call	_printf	;wreg free
  9975                           
  9976                           ;terminal.c: 131: }
  9977  002546  0012               	return	
  9978  002548                     l8161:
  9979                           
  9980                           ;terminal.c: 132: else if (Index < 0xF){
  9981  002548  0100               	movlb	0	; () banked
  9982  00254A  51AE               	movf	(TranslateMessage@Index+1)& (0+255),w,b
  9983  00254C  E10E               	bnz	l8165
  9984  00254E  0E0F               	movlw	15
  9985  002550  0100               	movlb	0	; () banked
  9986  002552  5DAD               	subwf	TranslateMessage@Index& (0+255),w,b
  9987  002554  B0D8               	btfsc	status,0,c
  9988  002556  D009               	goto	l8165
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;terminal.c: 133: printf("\r\nE#12\r\n");
  9992  002558  0E2A               	movlw	low STR_3
  9993  00255A  0100               	movlb	0	; () banked
  9994  00255C  6F9A               	movwf	printf@f& (0+255),b
  9995  00255E  0E08               	movlw	high STR_3
  9996  002560  0100               	movlb	0	; () banked
  9997  002562  6F9B               	movwf	(printf@f+1)& (0+255),b
  9998  002564  ECD3  F013         	call	_printf	;wreg free
  9999                           
 10000                           ;terminal.c: 134: }
 10001  002568  0012               	return	
 10002  00256A                     l8165:
 10003                           
 10004                           ;terminal.c: 135: else if (Index > 82){
 10005  00256A  0100               	movlb	0	; () banked
 10006  00256C  51AE               	movf	(TranslateMessage@Index+1)& (0+255),w,b
 10007  00256E  E105               	bnz	u7940
 10008  002570  0E53               	movlw	83
 10009  002572  0100               	movlb	0	; () banked
 10010  002574  5DAD               	subwf	TranslateMessage@Index& (0+255),w,b
 10011  002576  A0D8               	btfss	status,0,c
 10012  002578  D009               	goto	l8169
 10013  00257A                     u7940:
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;terminal.c: 136: printf("\r\nE#13\r\n");
 10017  00257A  0E33               	movlw	low STR_4
 10018  00257C  0100               	movlb	0	; () banked
 10019  00257E  6F9A               	movwf	printf@f& (0+255),b
 10020  002580  0E08               	movlw	high STR_4
 10021  002582  0100               	movlb	0	; () banked
 10022  002584  6F9B               	movwf	(printf@f+1)& (0+255),b
 10023  002586  ECD3  F013         	call	_printf	;wreg free
 10024                           
 10025                           ;terminal.c: 137: }
 10026  00258A  0012               	return	
 10027  00258C                     l8169:
 10028                           
 10029                           ;terminal.c: 138: else if (Value > 0xFFFE){
 10030  00258C  0100               	movlb	0	; () banked
 10031  00258E  29AB               	incf	TranslateMessage@Value& (0+255),w,b
 10032  002590  E10D               	bnz	l8173
 10033  002592  0100               	movlb	0	; () banked
 10034  002594  29AC               	incf	(TranslateMessage@Value+1)& (0+255),w,b
 10035  002596  A4D8               	btfss	status,2,c
 10036  002598  D009               	goto	l8173
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;terminal.c: 139: printf("\r\nE#14\r\n");
 10040  00259A  0E3C               	movlw	low STR_5
 10041  00259C  0100               	movlb	0	; () banked
 10042  00259E  6F9A               	movwf	printf@f& (0+255),b
 10043  0025A0  0E08               	movlw	high STR_5
 10044  0025A2  0100               	movlb	0	; () banked
 10045  0025A4  6F9B               	movwf	(printf@f+1)& (0+255),b
 10046  0025A6  ECD3  F013         	call	_printf	;wreg free
 10047                           
 10048                           ;terminal.c: 140: }
 10049  0025AA  0012               	return	
 10050  0025AC                     l8173:
 10051                           
 10052                           ;terminal.c: 141: else{
 10053                           ;terminal.c: 142: SETxAPIxVALxNoxRET(Index, Value);
 10054  0025AC  C0AB  F091         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 10055  0025B0  C0AC  F092         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 10056  0025B4  0100               	movlb	0	; () banked
 10057  0025B6  51AD               	movf	TranslateMessage@Index& (0+255),w,b
 10058  0025B8  EC63  F01D         	call	_SETxAPIxVALxNoxRET
 10059                           
 10060                           ;terminal.c: 143: }
 10061                           ;terminal.c: 144: }
 10062  0025BC  0012               	return	
 10063  0025BE                     l8175:
 10064                           
 10065                           ;terminal.c: 146: else if (Data[0] == 'g'){
 10066  0025BE  0E67               	movlw	103
 10067  0025C0  0100               	movlb	0	; () banked
 10068  0025C2  1985               	xorwf	_Data& (0+255),w,b
 10069  0025C4  A4D8               	btfss	status,2,c
 10070  0025C6  0012               	return	
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;terminal.c: 148: pData = &Data[2];
 10074  0025C8  0E87               	movlw	low (_Data+2)
 10075  0025CA  0100               	movlb	0	; () banked
 10076  0025CC  6F76               	movwf	_pData& (0+255),b
 10077  0025CE  0E00               	movlw	high (_Data+2)
 10078  0025D0  0100               	movlb	0	; () banked
 10079  0025D2  6F77               	movwf	(_pData+1)& (0+255),b
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;terminal.c: 149: Index = (unsigned int)atoi (pData);
 10083  0025D4  C076  F095         	movff	_pData,atoi@s
 10084  0025D8  C077  F096         	movff	_pData+1,atoi@s+1
 10085  0025DC  EC02  F01A         	call	_atoi	;wreg free
 10086  0025E0  C095  F0AD         	movff	?_atoi,TranslateMessage@Index
 10087  0025E4  C096  F0AE         	movff	?_atoi+1,TranslateMessage@Index+1
 10088                           
 10089                           ;terminal.c: 151: if (Index < 0xF){
 10090  0025E8  0100               	movlb	0	; () banked
 10091  0025EA  51AE               	movf	(TranslateMessage@Index+1)& (0+255),w,b
 10092  0025EC  E10E               	bnz	l8185
 10093  0025EE  0E0F               	movlw	15
 10094  0025F0  0100               	movlb	0	; () banked
 10095  0025F2  5DAD               	subwf	TranslateMessage@Index& (0+255),w,b
 10096  0025F4  B0D8               	btfsc	status,0,c
 10097  0025F6  D009               	goto	l8185
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;terminal.c: 152: printf("\r\nE#12\r\n");
 10101  0025F8  0E2A               	movlw	low STR_3
 10102  0025FA  0100               	movlb	0	; () banked
 10103  0025FC  6F9A               	movwf	printf@f& (0+255),b
 10104  0025FE  0E08               	movlw	high STR_3
 10105  002600  0100               	movlb	0	; () banked
 10106  002602  6F9B               	movwf	(printf@f+1)& (0+255),b
 10107  002604  ECD3  F013         	call	_printf	;wreg free
 10108                           
 10109                           ;terminal.c: 153: }
 10110  002608  0012               	return	
 10111  00260A                     l8185:
 10112                           
 10113                           ;terminal.c: 154: else if (Index > 82){
 10114  00260A  0100               	movlb	0	; () banked
 10115  00260C  51AE               	movf	(TranslateMessage@Index+1)& (0+255),w,b
 10116  00260E  E105               	bnz	u7980
 10117  002610  0E53               	movlw	83
 10118  002612  0100               	movlb	0	; () banked
 10119  002614  5DAD               	subwf	TranslateMessage@Index& (0+255),w,b
 10120  002616  A0D8               	btfss	status,0,c
 10121  002618  D009               	goto	l8189
 10122  00261A                     u7980:
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;terminal.c: 155: printf("\r\nE#13\r\n");
 10126  00261A  0E33               	movlw	low STR_4
 10127  00261C  0100               	movlb	0	; () banked
 10128  00261E  6F9A               	movwf	printf@f& (0+255),b
 10129  002620  0E08               	movlw	high STR_4
 10130  002622  0100               	movlb	0	; () banked
 10131  002624  6F9B               	movwf	(printf@f+1)& (0+255),b
 10132  002626  ECD3  F013         	call	_printf	;wreg free
 10133                           
 10134                           ;terminal.c: 156: }
 10135  00262A  0012               	return	
 10136  00262C                     l8189:
 10137                           
 10138                           ;terminal.c: 157: else{
 10139                           ;terminal.c: 158: Value = GETxAPIxVAL(Index);
 10140  00262C  0100               	movlb	0	; () banked
 10141  00262E  51AD               	movf	TranslateMessage@Index& (0+255),w,b
 10142  002630  EC20  F01E         	call	_GETxAPIxVAL
 10143  002634  C08F  F0AB         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10144  002638  C090  F0AC         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10145                           
 10146                           ;terminal.c: 159: SENDxMESSAGE(Index, Value);
 10147  00263C  C0AB  F0A8         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10148  002640  C0AC  F0A9         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10149  002644  0100               	movlb	0	; () banked
 10150  002646  51AD               	movf	TranslateMessage@Index& (0+255),w,b
 10151  002648  ECFB  F01D         	call	_SENDxMESSAGE
 10152  00264C  0012               	return	
 10153  00264E                     __end_of_TranslateMessage:
 10154                           	opt stack 0
 10155                           tblptru	equ	0xFF8
 10156                           tblptrh	equ	0xFF7
 10157                           tblptrl	equ	0xFF6
 10158                           tablat	equ	0xFF5
 10159                           intcon	equ	0xFF2
 10160                           postinc0	equ	0xFEE
 10161                           wreg	equ	0xFE8
 10162                           postdec1	equ	0xFE5
 10163                           fsr1l	equ	0xFE1
 10164                           indf2	equ	0xFDF
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169 ;; *************** function _atoi *****************
 10170 ;; Defined at:
 10171 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\atoi.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 10174 ;;		 -> NULL(0), Data(10), 
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;  a               2   11[BANK0 ] int 
 10177 ;;  sign            1   10[BANK0 ] unsigned char 
 10178 ;; Return value:  Size  Location     Type
 10179 ;;                  2    6[BANK0 ] int 
 10180 ;; Registers used:
 10181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10182 ;; Tracked objects:
 10183 ;;		On entry : 0/0
 10184 ;;		On exit  : 0/0
 10185 ;;		Unchanged: 0/0
 10186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10187 ;;      Params:         0       2       0       0       0       0       0       0       0
 10188 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10189 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10190 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10191 ;;Total ram usage:        7 bytes
 10192 ;; Hardware stack levels used:    1
 10193 ;; Hardware stack levels required when called:    4
 10194 ;; This function calls:
 10195 ;;		___wmul
 10196 ;;		_isdigit
 10197 ;; This function is called by:
 10198 ;;		_TranslateMessage
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           	psect	text20
 10203  003404                     __ptext20:
 10204                           	opt stack 0
 10205  003404                     _atoi:
 10206                           	opt stack 24
 10207                           
 10208                           ;incstack = 0
 10209  003404  D003               	goto	l7517
 10210  003406                     l7515:
 10211  003406  0100               	movlb	0	; () banked
 10212  003408  4B95               	infsnz	atoi@s& (0+255),f,b
 10213  00340A  2B96               	incf	(atoi@s+1)& (0+255),f,b
 10214  00340C                     l7517:
 10215  00340C  C095  FFD9         	movff	atoi@s,fsr2l
 10216  003410  C096  FFDA         	movff	atoi@s+1,fsr2h
 10217  003414  0E20               	movlw	32
 10218  003416  18DE               	xorwf	postinc2,w,c
 10219  003418  B4D8               	btfsc	status,2,c
 10220  00341A  D7F5               	goto	l7515
 10221  00341C  C095  FFD9         	movff	atoi@s,fsr2l
 10222  003420  C096  FFDA         	movff	atoi@s+1,fsr2h
 10223  003424  0E09               	movlw	9
 10224  003426  18DE               	xorwf	postinc2,w,c
 10225  003428  B4D8               	btfsc	status,2,c
 10226  00342A  D7ED               	goto	l7515
 10227  00342C  0E00               	movlw	0
 10228  00342E  0100               	movlb	0	; () banked
 10229  003430  6F9B               	movwf	(atoi@a+1)& (0+255),b
 10230  003432  0E00               	movlw	0
 10231  003434  6F9A               	movwf	atoi@a& (0+255),b
 10232  003436  0E00               	movlw	0
 10233  003438  0100               	movlb	0	; () banked
 10234  00343A  6F99               	movwf	atoi@sign& (0+255),b
 10235                           
 10236                           ; BSR set to: 0
 10237  00343C  C095  FFD9         	movff	atoi@s,fsr2l
 10238  003440  C096  FFDA         	movff	atoi@s+1,fsr2h
 10239  003444  0E2D               	movlw	45
 10240  003446  18DE               	xorwf	postinc2,w,c
 10241  003448  A4D8               	btfss	status,2,c
 10242  00344A  D003               	goto	l7527
 10243                           
 10244                           ; BSR set to: 0
 10245  00344C  0100               	movlb	0	; () banked
 10246  00344E  2B99               	incf	atoi@sign& (0+255),f,b
 10247  003450  D02E               	goto	l7533
 10248  003452                     l7527:
 10249                           
 10250                           ; BSR set to: 0
 10251  003452  C095  FFD9         	movff	atoi@s,fsr2l
 10252  003456  C096  FFDA         	movff	atoi@s+1,fsr2h
 10253  00345A  0E2B               	movlw	43
 10254  00345C  18DE               	xorwf	postinc2,w,c
 10255  00345E  A4D8               	btfss	status,2,c
 10256  003460  D029               	goto	l7535
 10257  003462  D025               	goto	l7533
 10258  003464                     l7531:
 10259  003464  C09A  F08F         	movff	atoi@a,___wmul@multiplier
 10260  003468  C09B  F090         	movff	atoi@a+1,___wmul@multiplier+1
 10261  00346C  0E00               	movlw	0
 10262  00346E  0100               	movlb	0	; () banked
 10263  003470  6F92               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10264  003472  0E0A               	movlw	10
 10265  003474  6F91               	movwf	___wmul@multiplicand& (0+255),b
 10266  003476  EC85  F01D         	call	___wmul	;wreg free
 10267  00347A  C095  FFD9         	movff	atoi@s,fsr2l
 10268  00347E  C096  FFDA         	movff	atoi@s+1,fsr2h
 10269  003482  50DF               	movf	indf2,w,c
 10270  003484  0100               	movlb	0	; () banked
 10271  003486  6F97               	movwf	??_atoi& (0+255),b
 10272  003488  6B98               	clrf	(??_atoi+1)& (0+255),b
 10273  00348A  0100               	movlb	0	; () banked
 10274  00348C  518F               	movf	?___wmul& (0+255),w,b
 10275  00348E  0100               	movlb	0	; () banked
 10276  003490  2797               	addwf	??_atoi& (0+255),f,b
 10277  003492  0100               	movlb	0	; () banked
 10278  003494  5190               	movf	(?___wmul+1)& (0+255),w,b
 10279  003496  0100               	movlb	0	; () banked
 10280  003498  2398               	addwfc	(??_atoi+1)& (0+255),f,b
 10281  00349A  0ED0               	movlw	208
 10282  00349C  0100               	movlb	0	; () banked
 10283  00349E  2597               	addwf	??_atoi& (0+255),w,b
 10284  0034A0  0100               	movlb	0	; () banked
 10285  0034A2  6F9A               	movwf	atoi@a& (0+255),b
 10286  0034A4  0EFF               	movlw	255
 10287  0034A6  0100               	movlb	0	; () banked
 10288  0034A8  2198               	addwfc	(??_atoi+1)& (0+255),w,b
 10289  0034AA  0100               	movlb	0	; () banked
 10290  0034AC  6F9B               	movwf	(atoi@a+1)& (0+255),b
 10291  0034AE                     l7533:
 10292                           
 10293                           ; BSR set to: 0
 10294  0034AE  0100               	movlb	0	; () banked
 10295  0034B0  4B95               	infsnz	atoi@s& (0+255),f,b
 10296  0034B2  2B96               	incf	(atoi@s+1)& (0+255),f,b
 10297  0034B4                     l7535:
 10298                           
 10299                           ; BSR set to: 0
 10300  0034B4  C095  FFD9         	movff	atoi@s,fsr2l
 10301  0034B8  C096  FFDA         	movff	atoi@s+1,fsr2h
 10302  0034BC  50DF               	movf	indf2,w,c
 10303  0034BE  ECE7  F01D         	call	_isdigit
 10304  0034C2  B0D8               	btfsc	status,0,c
 10305  0034C4  D7CF               	goto	l7531
 10306  0034C6  0100               	movlb	0	; () banked
 10307  0034C8  5199               	movf	atoi@sign& (0+255),w,b
 10308  0034CA  0100               	movlb	0	; () banked
 10309  0034CC  B4D8               	btfsc	status,2,c
 10310  0034CE  D00E               	goto	l1366
 10311                           
 10312                           ; BSR set to: 0
 10313  0034D0  C09A  F097         	movff	atoi@a,??_atoi
 10314  0034D4  C09B  F098         	movff	atoi@a+1,??_atoi+1
 10315  0034D8  0100               	movlb	0	; () banked
 10316  0034DA  1F97               	comf	??_atoi& (0+255),f,b
 10317  0034DC  1F98               	comf	(??_atoi+1)& (0+255),f,b
 10318  0034DE  4B97               	infsnz	??_atoi& (0+255),f,b
 10319  0034E0  2B98               	incf	(??_atoi+1)& (0+255),f,b
 10320  0034E2  C097  F095         	movff	??_atoi,?_atoi
 10321  0034E6  C098  F096         	movff	??_atoi+1,?_atoi+1
 10322  0034EA  0012               	return	
 10323  0034EC                     l1366:
 10324                           
 10325                           ; BSR set to: 0
 10326  0034EC  C09A  F095         	movff	atoi@a,?_atoi
 10327  0034F0  C09B  F096         	movff	atoi@a+1,?_atoi+1
 10328                           
 10329                           ; BSR set to: 0
 10330  0034F4  0012               	return		;funcret
 10331  0034F6                     __end_of_atoi:
 10332                           	opt stack 0
 10333                           tblptru	equ	0xFF8
 10334                           tblptrh	equ	0xFF7
 10335                           tblptrl	equ	0xFF6
 10336                           tablat	equ	0xFF5
 10337                           intcon	equ	0xFF2
 10338                           postinc0	equ	0xFEE
 10339                           wreg	equ	0xFE8
 10340                           postdec1	equ	0xFE5
 10341                           fsr1l	equ	0xFE1
 10342                           indf2	equ	0xFDF
 10343                           postinc2	equ	0xFDE
 10344                           fsr2h	equ	0xFDA
 10345                           fsr2l	equ	0xFD9
 10346                           status	equ	0xFD8
 10347                           
 10348 ;; *************** function _isdigit *****************
 10349 ;; Defined at:
 10350 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;  c               1    wreg     unsigned char 
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  c               1    1[BANK0 ] unsigned char 
 10355 ;; Return value:  Size  Location     Type
 10356 ;;		None               void
 10357 ;; Registers used:
 10358 ;;		wreg, status,2, status,0
 10359 ;; Tracked objects:
 10360 ;;		On entry : 0/0
 10361 ;;		On exit  : 0/0
 10362 ;;		Unchanged: 0/0
 10363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10364 ;;      Params:         0       0       0       0       0       0       0       0       0
 10365 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10366 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10367 ;;      Totals:         1       2       0       0       0       0       0       0       0
 10368 ;;Total ram usage:        3 bytes
 10369 ;; Hardware stack levels used:    1
 10370 ;; Hardware stack levels required when called:    3
 10371 ;; This function calls:
 10372 ;;		Nothing
 10373 ;; This function is called by:
 10374 ;;		_atoi
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text21
 10379  003BCE                     __ptext21:
 10380                           	opt stack 0
 10381  003BCE                     _isdigit:
 10382                           	opt stack 24
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;incstack = 0
 10386                           ;isdigit@c stored from wreg
 10387  003BCE  0100               	movlb	0	; () banked
 10388  003BD0  6F90               	movwf	isdigit@c& (0+255),b
 10389  003BD2  0E00               	movlw	0
 10390  003BD4  0100               	movlb	0	; () banked
 10391  003BD6  6F8F               	movwf	_isdigit$1868& (0+255),b
 10392                           
 10393                           ; BSR set to: 0
 10394  003BD8  0E3A               	movlw	58
 10395  003BDA  0100               	movlb	0	; () banked
 10396  003BDC  6190               	cpfslt	isdigit@c& (0+255),b
 10397  003BDE  D007               	goto	l6997
 10398                           
 10399                           ; BSR set to: 0
 10400  003BE0  0E2F               	movlw	47
 10401  003BE2  0100               	movlb	0	; () banked
 10402  003BE4  6590               	cpfsgt	isdigit@c& (0+255),b
 10403  003BE6  D003               	goto	l6997
 10404                           
 10405                           ; BSR set to: 0
 10406  003BE8  0E01               	movlw	1
 10407  003BEA  0100               	movlb	0	; () banked
 10408  003BEC  6F8F               	movwf	_isdigit$1868& (0+255),b
 10409  003BEE                     l6997:
 10410                           
 10411                           ; BSR set to: 0
 10412  003BEE  C08F  F020         	movff	_isdigit$1868,??_isdigit
 10413  003BF2  3020               	rrcf	??_isdigit,w,c
 10414  003BF4  0012               	return	
 10415  003BF6                     __end_of_isdigit:
 10416                           	opt stack 0
 10417                           tblptru	equ	0xFF8
 10418                           tblptrh	equ	0xFF7
 10419                           tblptrl	equ	0xFF6
 10420                           tablat	equ	0xFF5
 10421                           intcon	equ	0xFF2
 10422                           postinc0	equ	0xFEE
 10423                           wreg	equ	0xFE8
 10424                           postdec1	equ	0xFE5
 10425                           fsr1l	equ	0xFE1
 10426                           indf2	equ	0xFDF
 10427                           postinc2	equ	0xFDE
 10428                           fsr2h	equ	0xFDA
 10429                           fsr2l	equ	0xFD9
 10430                           status	equ	0xFD8
 10431                           
 10432 ;; *************** function ___wmul *****************
 10433 ;; Defined at:
 10434 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10437 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  product         2    4[BANK0 ] unsigned int 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  2    0[BANK0 ] unsigned int 
 10442 ;; Registers used:
 10443 ;;		wreg, status,2, status,0, prodl, prodh
 10444 ;; Tracked objects:
 10445 ;;		On entry : 0/0
 10446 ;;		On exit  : 0/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10449 ;;      Params:         0       4       0       0       0       0       0       0       0
 10450 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10451 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10452 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10453 ;;Total ram usage:        6 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    3
 10456 ;; This function calls:
 10457 ;;		Nothing
 10458 ;; This function is called by:
 10459 ;;		_atoi
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           	psect	text22
 10464  003B0A                     __ptext22:
 10465                           	opt stack 0
 10466  003B0A                     ___wmul:
 10467                           	opt stack 24
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;incstack = 0
 10471  003B0A  0100               	movlb	0	; () banked
 10472  003B0C  518F               	movf	___wmul@multiplier& (0+255),w,b
 10473  003B0E  0100               	movlb	0	; () banked
 10474  003B10  0391               	mulwf	___wmul@multiplicand& (0+255),b
 10475  003B12  CFF3 F093          	movff	prodl,___wmul@product
 10476  003B16  CFF4 F094          	movff	prodh,___wmul@product+1
 10477  003B1A  0100               	movlb	0	; () banked
 10478  003B1C  518F               	movf	___wmul@multiplier& (0+255),w,b
 10479  003B1E  0100               	movlb	0	; () banked
 10480  003B20  0392               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10481  003B22  50F3               	movf	prodl,w,c
 10482  003B24  0100               	movlb	0	; () banked
 10483  003B26  2794               	addwf	(___wmul@product+1)& (0+255),f,b
 10484  003B28  0100               	movlb	0	; () banked
 10485  003B2A  5190               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10486  003B2C  0100               	movlb	0	; () banked
 10487  003B2E  0391               	mulwf	___wmul@multiplicand& (0+255),b
 10488  003B30  50F3               	movf	prodl,w,c
 10489  003B32  0100               	movlb	0	; () banked
 10490  003B34  2794               	addwf	(___wmul@product+1)& (0+255),f,b
 10491                           
 10492                           ; BSR set to: 0
 10493  003B36  C093  F08F         	movff	___wmul@product,?___wmul
 10494  003B3A  C094  F090         	movff	___wmul@product+1,?___wmul+1
 10495  003B3E  0012               	return	
 10496  003B40                     __end_of___wmul:
 10497                           	opt stack 0
 10498                           tblptru	equ	0xFF8
 10499                           tblptrh	equ	0xFF7
 10500                           tblptrl	equ	0xFF6
 10501                           tablat	equ	0xFF5
 10502                           prodh	equ	0xFF4
 10503                           prodl	equ	0xFF3
 10504                           intcon	equ	0xFF2
 10505                           postinc0	equ	0xFEE
 10506                           wreg	equ	0xFE8
 10507                           postdec1	equ	0xFE5
 10508                           fsr1l	equ	0xFE1
 10509                           indf2	equ	0xFDF
 10510                           postinc2	equ	0xFDE
 10511                           fsr2h	equ	0xFDA
 10512                           fsr2l	equ	0xFD9
 10513                           status	equ	0xFD8
 10514                           
 10515 ;; *************** function _SETxAPIxVALxNoxRET *****************
 10516 ;; Defined at:
 10517 ;;		line 203 in file "../api.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;  index           1    wreg     unsigned char 
 10520 ;;  value           2    2[BANK0 ] unsigned int 
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  index           1    6[BANK0 ] unsigned char 
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  1    wreg      void 
 10525 ;; Registers used:
 10526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10532 ;;      Params:         0       2       0       0       0       0       0       0       0
 10533 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10534 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10535 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10536 ;;Total ram usage:        5 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    3
 10539 ;; This function calls:
 10540 ;;		Nothing
 10541 ;; This function is called by:
 10542 ;;		_Update_StateMchn
 10543 ;;		_TranslateMessage
 10544 ;; This function uses a non-reentrant model
 10545 ;;
 10546                           
 10547                           	psect	text23
 10548  003AC6                     __ptext23:
 10549                           	opt stack 0
 10550  003AC6                     _SETxAPIxVALxNoxRET:
 10551                           	opt stack 26
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;incstack = 0
 10555                           ;SETxAPIxVALxNoxRET@index stored from wreg
 10556  003AC6  0100               	movlb	0	; () banked
 10557  003AC8  6F95               	movwf	SETxAPIxVALxNoxRET@index& (0+255),b
 10558                           
 10559                           ;api.c: 204: if(API[index] != value){
 10560  003ACA  0100               	movlb	0	; () banked
 10561  003ACC  5195               	movf	SETxAPIxVALxNoxRET@index& (0+255),w,b
 10562  003ACE  0D02               	mullw	2
 10563  003AD0  0E00               	movlw	low _API
 10564  003AD2  24F3               	addwf	prodl,w,c
 10565  003AD4  6ED9               	movwf	fsr2l,c
 10566  003AD6  0E01               	movlw	high _API
 10567  003AD8  20F4               	addwfc	prodh,w,c
 10568  003ADA  6EDA               	movwf	fsr2h,c
 10569  003ADC  0100               	movlb	0	; () banked
 10570  003ADE  5191               	movf	SETxAPIxVALxNoxRET@value& (0+255),w,b
 10571  003AE0  18DE               	xorwf	postinc2,w,c
 10572  003AE2  E105               	bnz	u6340
 10573  003AE4  0100               	movlb	0	; () banked
 10574  003AE6  5192               	movf	(SETxAPIxVALxNoxRET@value+1)& (0+255),w,b
 10575  003AE8  18DE               	xorwf	postinc2,w,c
 10576  003AEA  B4D8               	btfsc	status,2,c
 10577  003AEC  0012               	return	
 10578  003AEE                     u6340:
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;api.c: 205: API[index] = value;
 10582  003AEE  0100               	movlb	0	; () banked
 10583  003AF0  5195               	movf	SETxAPIxVALxNoxRET@index& (0+255),w,b
 10584  003AF2  0D02               	mullw	2
 10585  003AF4  0E00               	movlw	low _API
 10586  003AF6  24F3               	addwf	prodl,w,c
 10587  003AF8  6ED9               	movwf	fsr2l,c
 10588  003AFA  0E01               	movlw	high _API
 10589  003AFC  20F4               	addwfc	prodh,w,c
 10590  003AFE  6EDA               	movwf	fsr2h,c
 10591  003B00  C091  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 10592  003B04  C092  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 10593  003B08  0012               	return	
 10594  003B0A                     __end_of_SETxAPIxVALxNoxRET:
 10595                           	opt stack 0
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           postinc0	equ	0xFEE
 10604                           wreg	equ	0xFE8
 10605                           postdec1	equ	0xFE5
 10606                           fsr1l	equ	0xFE1
 10607                           indf2	equ	0xFDF
 10608                           postinc2	equ	0xFDE
 10609                           postdec2	equ	0xFDD
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function _GETxAPIxVAL *****************
 10615 ;; Defined at:
 10616 ;;		line 209 in file "../api.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  index           1    wreg     unsigned char 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  index           1   31[COMRAM] unsigned char 
 10621 ;; Return value:  Size  Location     Type
 10622 ;;                  2    0[BANK0 ] unsigned int 
 10623 ;; Registers used:
 10624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10625 ;; Tracked objects:
 10626 ;;		On entry : 0/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10630 ;;      Params:         0       2       0       0       0       0       0       0       0
 10631 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10632 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10633 ;;      Totals:         1       2       0       0       0       0       0       0       0
 10634 ;;Total ram usage:        3 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; Hardware stack levels required when called:    3
 10637 ;; This function calls:
 10638 ;;		Nothing
 10639 ;; This function is called by:
 10640 ;;		_Update_StateMchn
 10641 ;;		_Train_Path
 10642 ;;		_TranslateMessage
 10643 ;;		_Eeprom_Store
 10644 ;;		_Debounce_Inputs
 10645 ;;		_Junction
 10646 ;;		_Train_Move_Left_Start
 10647 ;;		_Right_Mountain_From_The_Right
 10648 ;;		_Left_Mountain_From_The_Right
 10649 ;;		_Train_Move_Left_Brake
 10650 ;;		_Train_Move_Right_Start
 10651 ;;		_Left_Mountain_From_The_Left
 10652 ;;		_Right_Mountain_From_The_Left
 10653 ;;		_Train_Move_Right_Brake
 10654 ;;		_INCRxAPIxVAL
 10655 ;;		_DECRxAPIxVAL
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           	psect	text24
 10660  003C40                     __ptext24:
 10661                           	opt stack 0
 10662  003C40                     _GETxAPIxVAL:
 10663                           	opt stack 24
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;incstack = 0
 10667                           ;GETxAPIxVAL@index stored from wreg
 10668  003C40  6E20               	movwf	GETxAPIxVAL@index,c
 10669                           
 10670                           ;api.c: 210: return API[index];
 10671  003C42  5020               	movf	GETxAPIxVAL@index,w,c
 10672  003C44  0D02               	mullw	2
 10673  003C46  0E00               	movlw	low _API
 10674  003C48  24F3               	addwf	prodl,w,c
 10675  003C4A  6ED9               	movwf	fsr2l,c
 10676  003C4C  0E01               	movlw	high _API
 10677  003C4E  20F4               	addwfc	prodh,w,c
 10678  003C50  6EDA               	movwf	fsr2h,c
 10679  003C52  CFDE F08F          	movff	postinc2,?_GETxAPIxVAL
 10680  003C56  CFDD F090          	movff	postdec2,?_GETxAPIxVAL+1
 10681  003C5A  0012               	return	
 10682  003C5C                     __end_of_GETxAPIxVAL:
 10683                           	opt stack 0
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           postinc0	equ	0xFEE
 10692                           wreg	equ	0xFE8
 10693                           postdec1	equ	0xFE5
 10694                           fsr1l	equ	0xFE1
 10695                           indf2	equ	0xFDF
 10696                           postinc2	equ	0xFDE
 10697                           postdec2	equ	0xFDD
 10698                           fsr2h	equ	0xFDA
 10699                           fsr2l	equ	0xFD9
 10700                           status	equ	0xFD8
 10701                           
 10702 ;; *************** function _GETxAPIxRW *****************
 10703 ;; Defined at:
 10704 ;;		line 192 in file "../api.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  index           1    wreg     unsigned char 
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;  index           1   31[COMRAM] unsigned char 
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  2    0[BANK0 ] unsigned int 
 10711 ;; Registers used:
 10712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10718 ;;      Params:         0       2       0       0       0       0       0       0       0
 10719 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10720 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10721 ;;      Totals:         1       2       0       0       0       0       0       0       0
 10722 ;;Total ram usage:        3 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    3
 10725 ;; This function calls:
 10726 ;;		Nothing
 10727 ;; This function is called by:
 10728 ;;		_TranslateMessage
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text25
 10733  003C5C                     __ptext25:
 10734                           	opt stack 0
 10735  003C5C                     _GETxAPIxRW:
 10736                           	opt stack 25
 10737                           
 10738                           ;incstack = 0
 10739                           ;GETxAPIxRW@index stored from wreg
 10740  003C5C  6E20               	movwf	GETxAPIxRW@index,c
 10741                           
 10742                           ;api.c: 193: return API_RW[index];
 10743  003C5E  5020               	movf	GETxAPIxRW@index,w,c
 10744  003C60  0D02               	mullw	2
 10745  003C62  0E00               	movlw	low _API_RW
 10746  003C64  24F3               	addwf	prodl,w,c
 10747  003C66  6ED9               	movwf	fsr2l,c
 10748  003C68  0E02               	movlw	high _API_RW
 10749  003C6A  20F4               	addwfc	prodh,w,c
 10750  003C6C  6EDA               	movwf	fsr2h,c
 10751  003C6E  CFDE F08F          	movff	postinc2,?_GETxAPIxRW
 10752  003C72  CFDD F090          	movff	postdec2,?_GETxAPIxRW+1
 10753  003C76  0012               	return	
 10754  003C78                     __end_of_GETxAPIxRW:
 10755                           	opt stack 0
 10756                           tblptru	equ	0xFF8
 10757                           tblptrh	equ	0xFF7
 10758                           tblptrl	equ	0xFF6
 10759                           tablat	equ	0xFF5
 10760                           prodh	equ	0xFF4
 10761                           prodl	equ	0xFF3
 10762                           intcon	equ	0xFF2
 10763                           postinc0	equ	0xFEE
 10764                           wreg	equ	0xFE8
 10765                           postdec1	equ	0xFE5
 10766                           fsr1l	equ	0xFE1
 10767                           indf2	equ	0xFDF
 10768                           postinc2	equ	0xFDE
 10769                           postdec2	equ	0xFDD
 10770                           fsr2h	equ	0xFDA
 10771                           fsr2l	equ	0xFD9
 10772                           status	equ	0xFD8
 10773                           
 10774 ;; *************** function _EUSART1_Read *****************
 10775 ;; Defined at:
 10776 ;;		line 142 in file "../eusart1.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;		None
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  readValue       1   31[COMRAM] unsigned char 
 10781 ;; Return value:  Size  Location     Type
 10782 ;;                  1    wreg      unsigned char 
 10783 ;; Registers used:
 10784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10785 ;; Tracked objects:
 10786 ;;		On entry : 0/0
 10787 ;;		On exit  : 0/0
 10788 ;;		Unchanged: 0/0
 10789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10790 ;;      Params:         0       0       0       0       0       0       0       0       0
 10791 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10792 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10793 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10794 ;;Total ram usage:        1 bytes
 10795 ;; Hardware stack levels used:    1
 10796 ;; Hardware stack levels required when called:    3
 10797 ;; This function calls:
 10798 ;;		Nothing
 10799 ;; This function is called by:
 10800 ;;		_READxRECEIVEDxMESSAGE
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           	psect	text26
 10805  003B40                     __ptext26:
 10806                           	opt stack 0
 10807  003B40                     _EUSART1_Read:
 10808                           	opt stack 26
 10809                           
 10810                           ;eusart1.c: 143: uint8_t readValue = 0;
 10811                           
 10812                           ;incstack = 0
 10813  003B40  0E00               	movlw	0
 10814  003B42  6E20               	movwf	EUSART1_Read@readValue,c
 10815  003B44                     l5687:
 10816  003B44  503A               	movf	_eusart1RxCount,w,c	;volatile
 10817  003B46  B4D8               	btfsc	status,2,c
 10818  003B48  D7FD               	goto	l5687
 10819                           
 10820                           ;eusart1.c: 146: }
 10821                           ;eusart1.c: 148: PIE1bits.RC1IE = 0;
 10822  003B4A  9A9D               	bcf	3997,5,c	;volatile
 10823                           
 10824                           ;eusart1.c: 150: readValue = eusart1RxBuffer[eusart1RxTail++];
 10825  003B4C  503C               	movf	_eusart1RxTail,w,c
 10826  003B4E  0D01               	mullw	1
 10827  003B50  0E00               	movlw	low _eusart1RxBuffer
 10828  003B52  24F3               	addwf	prodl,w,c
 10829  003B54  6ED9               	movwf	fsr2l,c
 10830  003B56  0E03               	movlw	high _eusart1RxBuffer
 10831  003B58  20F4               	addwfc	prodh,w,c
 10832  003B5A  6EDA               	movwf	fsr2h,c
 10833  003B5C  50DF               	movf	indf2,w,c
 10834  003B5E  6E20               	movwf	EUSART1_Read@readValue,c
 10835  003B60  2A3C               	incf	_eusart1RxTail,f,c
 10836                           
 10837                           ;eusart1.c: 151: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 10838  003B62  0E7D               	movlw	125
 10839  003B64  643C               	cpfsgt	_eusart1RxTail,c
 10840  003B66  D002               	goto	l5697
 10841                           
 10842                           ;eusart1.c: 152: eusart1RxTail = 0;
 10843  003B68  0E00               	movlw	0
 10844  003B6A  6E3C               	movwf	_eusart1RxTail,c
 10845  003B6C                     l5697:
 10846                           
 10847                           ;eusart1.c: 153: }
 10848                           ;eusart1.c: 154: eusart1RxCount--;
 10849  003B6C  063A               	decf	_eusart1RxCount,f,c	;volatile
 10850                           
 10851                           ;eusart1.c: 155: PIE1bits.RC1IE = 1;
 10852  003B6E  8A9D               	bsf	3997,5,c	;volatile
 10853                           
 10854                           ;eusart1.c: 157: return readValue;
 10855  003B70  5020               	movf	EUSART1_Read@readValue,w,c
 10856  003B72  0012               	return	
 10857  003B74                     __end_of_EUSART1_Read:
 10858                           	opt stack 0
 10859                           tblptru	equ	0xFF8
 10860                           tblptrh	equ	0xFF7
 10861                           tblptrl	equ	0xFF6
 10862                           tablat	equ	0xFF5
 10863                           prodh	equ	0xFF4
 10864                           prodl	equ	0xFF3
 10865                           intcon	equ	0xFF2
 10866                           postinc0	equ	0xFEE
 10867                           wreg	equ	0xFE8
 10868                           postdec1	equ	0xFE5
 10869                           fsr1l	equ	0xFE1
 10870                           indf2	equ	0xFDF
 10871                           postinc2	equ	0xFDE
 10872                           postdec2	equ	0xFDD
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _Init_Timers *****************
 10878 ;; Defined at:
 10879 ;;		line 181 in file "../Main.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;		None
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;		None
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  1    wreg      void 
 10886 ;; Registers used:
 10887 ;;		wreg, status,2
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10893 ;;      Params:         0       0       0       0       0       0       0       0       0
 10894 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10896 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10897 ;;Total ram usage:        0 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:    3
 10900 ;; This function calls:
 10901 ;;		Nothing
 10902 ;; This function is called by:
 10903 ;;		_main
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           	psect	text27
 10908  003C78                     __ptext27:
 10909                           	opt stack 0
 10910  003C78                     _Init_Timers:
 10911                           	opt stack 27
 10912                           
 10913                           ;Main.c: 183: RCONbits.IPEN = 1;
 10914                           
 10915                           ;incstack = 0
 10916  003C78  8ED0               	bsf	4048,7,c	;volatile
 10917                           
 10918                           ;Main.c: 184: INTCON = 0xA0;
 10919  003C7A  0EA0               	movlw	160
 10920  003C7C  6EF2               	movwf	intcon,c	;volatile
 10921                           
 10922                           ;Main.c: 185: INTCON2 = 0x84;
 10923  003C7E  0E84               	movlw	132
 10924  003C80  6EF1               	movwf	intcon2,c	;volatile
 10925                           
 10926                           ;Main.c: 186: TMR0H = 0x0;
 10927  003C82  0E00               	movlw	0
 10928  003C84  6ED7               	movwf	4055,c	;volatile
 10929                           
 10930                           ;Main.c: 187: TMR0L = 0x0;
 10931  003C86  0E00               	movlw	0
 10932  003C88  6ED6               	movwf	4054,c	;volatile
 10933                           
 10934                           ;Main.c: 188: T0CON = 0xC3;
 10935  003C8A  0EC3               	movlw	195
 10936  003C8C  6ED5               	movwf	4053,c	;volatile
 10937  003C8E  0012               	return		;funcret
 10938  003C90                     __end_of_Init_Timers:
 10939                           	opt stack 0
 10940                           tblptru	equ	0xFF8
 10941                           tblptrh	equ	0xFF7
 10942                           tblptrl	equ	0xFF6
 10943                           tablat	equ	0xFF5
 10944                           prodh	equ	0xFF4
 10945                           prodl	equ	0xFF3
 10946                           intcon	equ	0xFF2
 10947                           intcon2	equ	0xFF1
 10948                           postinc0	equ	0xFEE
 10949                           wreg	equ	0xFE8
 10950                           postdec1	equ	0xFE5
 10951                           fsr1l	equ	0xFE1
 10952                           indf2	equ	0xFDF
 10953                           postinc2	equ	0xFDE
 10954                           postdec2	equ	0xFDD
 10955                           fsr2h	equ	0xFDA
 10956                           fsr2l	equ	0xFD9
 10957                           status	equ	0xFD8
 10958                           
 10959 ;; *************** function _Init_Pwm *****************
 10960 ;; Defined at:
 10961 ;;		line 194 in file "../Main.c"
 10962 ;; Parameters:    Size  Location     Type
 10963 ;;		None
 10964 ;; Auto vars:     Size  Location     Type
 10965 ;;		None
 10966 ;; Return value:  Size  Location     Type
 10967 ;;                  1    wreg      void 
 10968 ;; Registers used:
 10969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10970 ;; Tracked objects:
 10971 ;;		On entry : 0/0
 10972 ;;		On exit  : 0/0
 10973 ;;		Unchanged: 0/0
 10974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10975 ;;      Params:         0       0       0       0       0       0       0       0       0
 10976 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10977 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10978 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10979 ;;Total ram usage:        0 bytes
 10980 ;; Hardware stack levels used:    1
 10981 ;; Hardware stack levels required when called:    7
 10982 ;; This function calls:
 10983 ;;		_SETxAPIxVAL
 10984 ;; This function is called by:
 10985 ;;		_main
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           	psect	text28
 10990  003C1C                     __ptext28:
 10991                           	opt stack 0
 10992  003C1C                     _Init_Pwm:
 10993                           	opt stack 23
 10994                           
 10995                           ;Main.c: 197: SETxAPIxVAL(69, 1);
 10996                           
 10997                           ;incstack = 0
 10998  003C1C  0E00               	movlw	0
 10999  003C1E  0100               	movlb	0	; () banked
 11000  003C20  6FAC               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 11001  003C22  0E01               	movlw	1
 11002  003C24  6FAB               	movwf	SETxAPIxVAL@value& (0+255),b
 11003  003C26  0E45               	movlw	69
 11004  003C28  ECF1  F01C         	call	_SETxAPIxVAL
 11005                           
 11006                           ;Main.c: 198: PR2=0xFF;
 11007  003C2C  68CB               	setf	4043,c	;volatile
 11008                           
 11009                           ;Main.c: 199: CCPR1L = 0x7F;
 11010  003C2E  0E7F               	movlw	127
 11011  003C30  6EBE               	movwf	4030,c	;volatile
 11012                           
 11013                           ;Main.c: 200: CCP1CON = 0x0F;
 11014  003C32  0E0F               	movlw	15
 11015  003C34  6EBD               	movwf	4029,c	;volatile
 11016                           
 11017                           ;Main.c: 201: T2CON = 0x04;
 11018  003C36  0E04               	movlw	4
 11019  003C38  6ECA               	movwf	4042,c	;volatile
 11020                           
 11021                           ;Main.c: 202: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11022  003C3A  9494               	bcf	3988,2,c	;volatile
 11023  003C3C  9094               	bcf	3988,0,c	;volatile
 11024  003C3E  0012               	return		;funcret
 11025  003C40                     __end_of_Init_Pwm:
 11026                           	opt stack 0
 11027                           tblptru	equ	0xFF8
 11028                           tblptrh	equ	0xFF7
 11029                           tblptrl	equ	0xFF6
 11030                           tablat	equ	0xFF5
 11031                           prodh	equ	0xFF4
 11032                           prodl	equ	0xFF3
 11033                           intcon	equ	0xFF2
 11034                           intcon2	equ	0xFF1
 11035                           postinc0	equ	0xFEE
 11036                           wreg	equ	0xFE8
 11037                           postdec1	equ	0xFE5
 11038                           fsr1l	equ	0xFE1
 11039                           indf2	equ	0xFDF
 11040                           postinc2	equ	0xFDE
 11041                           postdec2	equ	0xFDD
 11042                           fsr2h	equ	0xFDA
 11043                           fsr2l	equ	0xFD9
 11044                           status	equ	0xFD8
 11045                           
 11046 ;; *************** function _SETxAPIxVAL *****************
 11047 ;; Defined at:
 11048 ;;		line 196 in file "../api.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;  index           1    wreg     unsigned char 
 11051 ;;  value           2   28[BANK0 ] unsigned int 
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  index           1   32[BANK0 ] unsigned char 
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  1    wreg      void 
 11056 ;; Registers used:
 11057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11063 ;;      Params:         0       2       0       0       0       0       0       0       0
 11064 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11065 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11066 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11067 ;;Total ram usage:        5 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    6
 11070 ;; This function calls:
 11071 ;;		_SENDxMESSAGE
 11072 ;; This function is called by:
 11073 ;;		_Init_Pwm
 11074 ;;		_Update_StateMchn
 11075 ;;		_Train_Path
 11076 ;;		_Debounce_Inputs
 11077 ;;		_Junction
 11078 ;;		_Train_Move_Left_Start
 11079 ;;		_Train_Move_Left_Brake
 11080 ;;		_Train_Move_Right_Start
 11081 ;;		_Train_Move_Right_Brake
 11082 ;;		_SETxPWM
 11083 ;;		_INCRxAPIxVAL
 11084 ;;		_DECRxAPIxVAL
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text29
 11089  0039E2                     __ptext29:
 11090                           	opt stack 0
 11091  0039E2                     _SETxAPIxVAL:
 11092                           	opt stack 20
 11093                           
 11094                           ;incstack = 0
 11095                           ;SETxAPIxVAL@index stored from wreg
 11096  0039E2  0100               	movlb	0	; () banked
 11097  0039E4  6FAF               	movwf	SETxAPIxVAL@index& (0+255),b
 11098                           
 11099                           ;api.c: 197: if(API[index] != value){
 11100  0039E6  0100               	movlb	0	; () banked
 11101  0039E8  51AF               	movf	SETxAPIxVAL@index& (0+255),w,b
 11102  0039EA  0D02               	mullw	2
 11103  0039EC  0E00               	movlw	low _API
 11104  0039EE  24F3               	addwf	prodl,w,c
 11105  0039F0  6ED9               	movwf	fsr2l,c
 11106  0039F2  0E01               	movlw	high _API
 11107  0039F4  20F4               	addwfc	prodh,w,c
 11108  0039F6  6EDA               	movwf	fsr2h,c
 11109  0039F8  0100               	movlb	0	; () banked
 11110  0039FA  51AB               	movf	SETxAPIxVAL@value& (0+255),w,b
 11111  0039FC  18DE               	xorwf	postinc2,w,c
 11112  0039FE  E105               	bnz	u6260
 11113  003A00  0100               	movlb	0	; () banked
 11114  003A02  51AC               	movf	(SETxAPIxVAL@value+1)& (0+255),w,b
 11115  003A04  18DE               	xorwf	postinc2,w,c
 11116  003A06  B4D8               	btfsc	status,2,c
 11117  003A08  0012               	return	
 11118  003A0A                     u6260:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;api.c: 198: API[index] = value;
 11122  003A0A  0100               	movlb	0	; () banked
 11123  003A0C  51AF               	movf	SETxAPIxVAL@index& (0+255),w,b
 11124  003A0E  0D02               	mullw	2
 11125  003A10  0E00               	movlw	low _API
 11126  003A12  24F3               	addwf	prodl,w,c
 11127  003A14  6ED9               	movwf	fsr2l,c
 11128  003A16  0E01               	movlw	high _API
 11129  003A18  20F4               	addwfc	prodh,w,c
 11130  003A1A  6EDA               	movwf	fsr2h,c
 11131  003A1C  C0AB  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11132  003A20  C0AC  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;api.c: 199: SENDxMESSAGE(index, value);
 11136  003A24  C0AB  F0A8         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11137  003A28  C0AC  F0A9         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11138  003A2C  0100               	movlb	0	; () banked
 11139  003A2E  51AF               	movf	SETxAPIxVAL@index& (0+255),w,b
 11140  003A30  ECFB  F01D         	call	_SENDxMESSAGE
 11141  003A34  0012               	return	
 11142  003A36                     __end_of_SETxAPIxVAL:
 11143                           	opt stack 0
 11144                           tblptru	equ	0xFF8
 11145                           tblptrh	equ	0xFF7
 11146                           tblptrl	equ	0xFF6
 11147                           tablat	equ	0xFF5
 11148                           prodh	equ	0xFF4
 11149                           prodl	equ	0xFF3
 11150                           intcon	equ	0xFF2
 11151                           intcon2	equ	0xFF1
 11152                           postinc0	equ	0xFEE
 11153                           wreg	equ	0xFE8
 11154                           postdec1	equ	0xFE5
 11155                           fsr1l	equ	0xFE1
 11156                           indf2	equ	0xFDF
 11157                           postinc2	equ	0xFDE
 11158                           postdec2	equ	0xFDD
 11159                           fsr2h	equ	0xFDA
 11160                           fsr2l	equ	0xFD9
 11161                           status	equ	0xFD8
 11162                           
 11163 ;; *************** function _SENDxMESSAGE *****************
 11164 ;; Defined at:
 11165 ;;		line 178 in file "../terminal.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;  index           1    wreg     unsigned char 
 11168 ;;  value           2   25[BANK0 ] unsigned int 
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;  index           1   27[BANK0 ] unsigned char 
 11171 ;; Return value:  Size  Location     Type
 11172 ;;                  1    wreg      void 
 11173 ;; Registers used:
 11174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11180 ;;      Params:         0       2       0       0       0       0       0       0       0
 11181 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11182 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11183 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11184 ;;Total ram usage:        3 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    5
 11187 ;; This function calls:
 11188 ;;		_printf
 11189 ;; This function is called by:
 11190 ;;		_TranslateMessage
 11191 ;;		_SETxAPIxVAL
 11192 ;;		_INCRxAPIxVAL
 11193 ;;		_DECRxAPIxVAL
 11194 ;; This function uses a non-reentrant model
 11195 ;;
 11196                           
 11197                           	psect	text30
 11198  003BF6                     __ptext30:
 11199                           	opt stack 0
 11200  003BF6                     _SENDxMESSAGE:
 11201                           	opt stack 20
 11202                           
 11203                           ;incstack = 0
 11204                           ;SENDxMESSAGE@index stored from wreg
 11205  003BF6  0100               	movlb	0	; () banked
 11206  003BF8  6FAA               	movwf	SENDxMESSAGE@index& (0+255),b
 11207                           
 11208                           ;terminal.c: 184: printf("\r\nM#%d %d\r\n", index, value);
 11209  003BFA  0E0C               	movlw	low STR_8
 11210  003BFC  0100               	movlb	0	; () banked
 11211  003BFE  6F9A               	movwf	printf@f& (0+255),b
 11212  003C00  0E08               	movlw	high STR_8
 11213  003C02  0100               	movlb	0	; () banked
 11214  003C04  6F9B               	movwf	(printf@f+1)& (0+255),b
 11215  003C06  C0AA  F09C         	movff	SENDxMESSAGE@index,?_printf+2
 11216  003C0A  0100               	movlb	0	; () banked
 11217  003C0C  6B9D               	clrf	(?_printf+3)& (0+255),b
 11218  003C0E  C0A8  F09E         	movff	SENDxMESSAGE@value,?_printf+4
 11219  003C12  C0A9  F09F         	movff	SENDxMESSAGE@value+1,?_printf+5
 11220  003C16  ECD3  F013         	call	_printf	;wreg free
 11221  003C1A  0012               	return		;funcret
 11222  003C1C                     __end_of_SENDxMESSAGE:
 11223                           	opt stack 0
 11224                           tblptru	equ	0xFF8
 11225                           tblptrh	equ	0xFF7
 11226                           tblptrl	equ	0xFF6
 11227                           tablat	equ	0xFF5
 11228                           prodh	equ	0xFF4
 11229                           prodl	equ	0xFF3
 11230                           intcon	equ	0xFF2
 11231                           intcon2	equ	0xFF1
 11232                           postinc0	equ	0xFEE
 11233                           wreg	equ	0xFE8
 11234                           postdec1	equ	0xFE5
 11235                           fsr1l	equ	0xFE1
 11236                           indf2	equ	0xFDF
 11237                           postinc2	equ	0xFDE
 11238                           postdec2	equ	0xFDD
 11239                           fsr2h	equ	0xFDA
 11240                           fsr2l	equ	0xFD9
 11241                           status	equ	0xFD8
 11242                           
 11243 ;; *************** function _printf *****************
 11244 ;; Defined at:
 11245 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;  f               2   11[BANK0 ] PTR const unsigned char 
 11248 ;;		 -> STR_8(12), STR_7(9), STR_6(9), STR_5(9), 
 11249 ;;		 -> STR_4(9), STR_3(9), STR_2(9), STR_1(9), 
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;  tmpval          4    0        struct .
 11252 ;;  cp              3    0        PTR const unsigned char 
 11253 ;;  val             2   22[BANK0 ] unsigned int 
 11254 ;;  ap              2   18[BANK0 ] PTR void [1]
 11255 ;;		 -> ?_printf(2), 
 11256 ;;  len             2    0        unsigned int 
 11257 ;;  c               1   24[BANK0 ] char 
 11258 ;;  prec            1   21[BANK0 ] char 
 11259 ;;  flag            1   20[BANK0 ] unsigned char 
 11260 ;; Return value:  Size  Location     Type
 11261 ;;                  2   11[BANK0 ] int 
 11262 ;; Registers used:
 11263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11264 ;; Tracked objects:
 11265 ;;		On entry : 0/0
 11266 ;;		On exit  : 0/0
 11267 ;;		Unchanged: 0/0
 11268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11269 ;;      Params:         0       6       0       0       0       0       0       0       0
 11270 ;;      Locals:         0       7       0       0       0       0       0       0       0
 11271 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11272 ;;      Totals:         0      14       0       0       0       0       0       0       0
 11273 ;;Total ram usage:       14 bytes
 11274 ;; Hardware stack levels used:    1
 11275 ;; Hardware stack levels required when called:    4
 11276 ;; This function calls:
 11277 ;;		___lwdiv
 11278 ;;		___lwmod
 11279 ;;		_putch
 11280 ;; This function is called by:
 11281 ;;		_READxRECEIVEDxMESSAGE
 11282 ;;		_TranslateMessage
 11283 ;;		_SENDxMESSAGE
 11284 ;; This function uses a non-reentrant model
 11285 ;;
 11286                           
 11287                           	psect	text31
 11288  0027A6                     __ptext31:
 11289                           	opt stack 0
 11290  0027A6                     _printf:
 11291                           	opt stack 20
 11292                           
 11293                           ;doprnt.c: 466: va_list ap;
 11294                           ;doprnt.c: 499: signed char c;
 11295                           ;doprnt.c: 506: signed char prec;
 11296                           ;doprnt.c: 508: unsigned char flag;
 11297                           ;doprnt.c: 523: union {
 11298                           ;doprnt.c: 524: unsigned long vd;
 11299                           ;doprnt.c: 525: double integ;
 11300                           ;doprnt.c: 526: } tmpval;
 11301                           ;doprnt.c: 528: unsigned int val;
 11302                           ;doprnt.c: 529: unsigned len;
 11303                           ;doprnt.c: 530: const char * cp;
 11304                           ;doprnt.c: 533: *ap = __va_start();
 11305                           
 11306                           ;incstack = 0
 11307  0027A6  0E9C               	movlw	low (?_printf+2)
 11308  0027A8  0100               	movlb	0	; () banked
 11309  0027AA  6FA1               	movwf	printf@ap& (0+255),b
 11310  0027AC  0E00               	movlw	high (?_printf+2)
 11311  0027AE  0100               	movlb	0	; () banked
 11312  0027B0  6FA2               	movwf	(printf@ap+1)& (0+255),b
 11313                           
 11314                           ;doprnt.c: 536: while(c = *f++) {
 11315  0027B2  D094               	goto	l6953
 11316  0027B4                     l6907:
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;doprnt.c: 538: if(c != '%')
 11320  0027B4  0E25               	movlw	37
 11321  0027B6  0100               	movlb	0	; () banked
 11322  0027B8  19A7               	xorwf	printf@c& (0+255),w,b
 11323  0027BA  B4D8               	btfsc	status,2,c
 11324  0027BC  D005               	goto	l6911
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;doprnt.c: 540: {
 11328                           ;doprnt.c: 541: (putch(c) );
 11329  0027BE  0100               	movlb	0	; () banked
 11330  0027C0  51A7               	movf	printf@c& (0+255),w,b
 11331  0027C2  EC48  F01E         	call	_putch
 11332                           
 11333                           ;doprnt.c: 542: continue;
 11334  0027C6  D08A               	goto	l6953
 11335  0027C8                     l6911:
 11336                           
 11337                           ;doprnt.c: 543: }
 11338                           ;doprnt.c: 548: flag = 0;
 11339  0027C8  0E00               	movlw	0
 11340  0027CA  0100               	movlb	0	; () banked
 11341  0027CC  6FA3               	movwf	printf@flag& (0+255),b
 11342                           
 11343                           ; BSR set to: 0
 11344                           
 11345                           ; BSR set to: 0
 11346                           
 11347                           ; BSR set to: 0
 11348                           ;doprnt.c: 822: }
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;doprnt.c: 813: continue;
 11352                           
 11353                           ;doprnt.c: 802: default:
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;doprnt.c: 698: case 'i':
 11357                           ;doprnt.c: 699: break;
 11358                           
 11359                           ; BSR set to: 0
 11360                           
 11361                           ;doprnt.c: 697: case 'd':
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;doprnt.c: 638: goto alldone;
 11365                           
 11366                           ;doprnt.c: 637: case 0:
 11367                           
 11368                           ;doprnt.c: 635: switch(c = *f++) {
 11369  0027CE  C09A  FFF6         	movff	printf@f,tblptrl
 11370  0027D2  C09B  FFF7         	movff	printf@f+1,tblptrh
 11371  0027D6  0100               	movlb	0	; () banked
 11372  0027D8  4B9A               	infsnz	printf@f& (0+255),f,b
 11373  0027DA  2B9B               	incf	(printf@f+1)& (0+255),f,b
 11374  0027DC                     	if	0	;tblptru may be non-zero
 11375  0027DC                     	endif
 11376  0027DC                     	if	0	;tblptru may be non-zero
 11377  0027DC                     	endif
 11378  0027DC  0008               	tblrd		*
 11379  0027DE  CFF5 F0A7          	movff	tablat,printf@c
 11380  0027E2  0100               	movlb	0	; () banked
 11381  0027E4  51A7               	movf	printf@c& (0+255),w,b
 11382                           
 11383                           ; Switch size 1, requested type "space"
 11384                           ; Number of cases is 3, Range of values is 0 to 105
 11385                           ; switch strategies available:
 11386                           ; Name         Instructions Cycles
 11387                           ; simple_byte           10     6 (average)
 11388                           ;	Chosen strategy is simple_byte
 11389  0027E6  0A00               	xorlw	0	; case 0
 11390  0027E8  B4D8               	btfsc	status,2,c
 11391  0027EA  0012               	return	
 11392  0027EC  0A64               	xorlw	100	; case 100
 11393  0027EE  B4D8               	btfsc	status,2,c
 11394  0027F0  D003               	goto	l6917
 11395  0027F2  0A0D               	xorlw	13	; case 105
 11396  0027F4  A4D8               	btfss	status,2,c
 11397  0027F6  D072               	goto	l6953
 11398  0027F8                     l6917:
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;doprnt.c: 1253: {
 11402                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11403  0027F8  C0A1  FFD9         	movff	printf@ap,fsr2l
 11404  0027FC  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 11405  002800  CFDE F0A5          	movff	postinc2,printf@val
 11406  002804  CFDD F0A6          	movff	postdec2,printf@val+1
 11407                           
 11408                           ; BSR set to: 0
 11409  002808  0E02               	movlw	2
 11410  00280A  0100               	movlb	0	; () banked
 11411  00280C  27A1               	addwf	printf@ap& (0+255),f,b
 11412  00280E  0E00               	movlw	0
 11413  002810  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 11414                           
 11415                           ; BSR set to: 0
 11416                           ;doprnt.c: 1261: if((int)val < 0) {
 11417  002812  0100               	movlb	0	; () banked
 11418  002814  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 11419  002816  D008               	goto	l6927
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;doprnt.c: 1262: flag |= 0x03;
 11423  002818  0E03               	movlw	3
 11424  00281A  0100               	movlb	0	; () banked
 11425  00281C  13A3               	iorwf	printf@flag& (0+255),f,b
 11426                           
 11427                           ; BSR set to: 0
 11428                           ;doprnt.c: 1263: val = -val;
 11429  00281E  0100               	movlb	0	; () banked
 11430  002820  6DA5               	negf	printf@val& (0+255),b
 11431  002822  1FA6               	comf	(printf@val+1)& (0+255),f,b
 11432  002824  B0D8               	btfsc	status,0,c
 11433  002826  2BA6               	incf	(printf@val+1)& (0+255),f,b
 11434  002828                     l6927:
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;doprnt.c: 1264: }
 11438                           ;doprnt.c: 1266: }
 11439                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11440  002828  0E01               	movlw	1
 11441  00282A  0100               	movlb	0	; () banked
 11442  00282C  6FA7               	movwf	printf@c& (0+255),b
 11443  00282E                     l6929:
 11444                           
 11445                           ; BSR set to: 0
 11446  00282E  0E05               	movlw	5
 11447  002830  0100               	movlb	0	; () banked
 11448  002832  19A7               	xorwf	printf@c& (0+255),w,b
 11449  002834  B4D8               	btfsc	status,2,c
 11450  002836  D016               	goto	l6941
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;doprnt.c: 1306: if(val < dpowers[c])
 11454                           
 11455                           ; BSR set to: 0
 11456                           
 11457                           ; BSR set to: 0
 11458  002838  0100               	movlb	0	; () banked
 11459  00283A  51A7               	movf	printf@c& (0+255),w,b
 11460  00283C  0D02               	mullw	2
 11461  00283E  0E01               	movlw	low _dpowers
 11462  002840  24F3               	addwf	prodl,w,c
 11463  002842  6EF6               	movwf	tblptrl,c
 11464  002844  0E08               	movlw	high _dpowers
 11465  002846  20F4               	addwfc	prodh,w,c
 11466  002848  6EF7               	movwf	tblptrh,c
 11467  00284A                     	if	0	;There are less than 3 active tblptr bytes
 11468  00284A                     	endif
 11469  00284A  0009               	tblrd		*+
 11470  00284C  50F5               	movf	tablat,w,c
 11471  00284E  0100               	movlb	0	; () banked
 11472  002850  5DA5               	subwf	printf@val& (0+255),w,b
 11473  002852  0009               	tblrd		*+
 11474  002854  50F5               	movf	tablat,w,c
 11475  002856  0100               	movlb	0	; () banked
 11476  002858  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 11477  00285A  A0D8               	btfss	status,0,c
 11478  00285C  D003               	goto	l6941
 11479                           
 11480                           ; BSR set to: 0
 11481                           
 11482                           ; BSR set to: 0
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;doprnt.c: 1307: break;
 11486  00285E  0100               	movlb	0	; () banked
 11487  002860  2BA7               	incf	printf@c& (0+255),f,b
 11488  002862  D7E5               	goto	l6929
 11489  002864                     l6941:
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;doprnt.c: 1422: {
 11493                           ;doprnt.c: 1438: if(flag & 0x03)
 11494  002864  C0A3  F0A0         	movff	printf@flag,??_printf
 11495  002868  0E03               	movlw	3
 11496  00286A  0100               	movlb	0	; () banked
 11497  00286C  17A0               	andwf	??_printf& (0+255),f,b
 11498  00286E  B4D8               	btfsc	status,2,c
 11499  002870  D003               	goto	l6945
 11500                           
 11501                           ; BSR set to: 0
 11502                           ;doprnt.c: 1439: (putch('-') );
 11503  002872  0E2D               	movlw	45
 11504  002874  EC48  F01E         	call	_putch
 11505  002878                     l6945:
 11506                           
 11507                           ;doprnt.c: 1469: }
 11508                           ;doprnt.c: 1472: prec = c;
 11509  002878  C0A7  F0A4         	movff	printf@c,printf@prec
 11510                           
 11511                           ;doprnt.c: 1474: while(prec--) {
 11512  00287C  D029               	goto	l6951
 11513  00287E                     l6947:
 11514                           
 11515                           ;doprnt.c: 1478: {
 11516                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11517  00287E  0100               	movlb	0	; () banked
 11518  002880  51A4               	movf	printf@prec& (0+255),w,b
 11519  002882  0D02               	mullw	2
 11520  002884  0E01               	movlw	low _dpowers
 11521  002886  24F3               	addwf	prodl,w,c
 11522  002888  6EF6               	movwf	tblptrl,c
 11523  00288A  0E08               	movlw	high _dpowers
 11524  00288C  20F4               	addwfc	prodh,w,c
 11525  00288E  6EF7               	movwf	tblptrh,c
 11526  002890                     	if	0	;There are less than 3 active tblptr bytes
 11527  002890                     	endif
 11528  002890  0009               	tblrd		*+
 11529  002892  CFF5 F091          	movff	tablat,___lwdiv@divisor
 11530  002896  000A               	tblrd		*-
 11531  002898  CFF5 F092          	movff	tablat,___lwdiv@divisor+1
 11532  00289C  C0A5  F08F         	movff	printf@val,___lwdiv@dividend
 11533  0028A0  C0A6  F090         	movff	printf@val+1,___lwdiv@dividend+1
 11534  0028A4  EC18  F01C         	call	___lwdiv	;wreg free
 11535  0028A8  C08F  F096         	movff	?___lwdiv,___lwmod@dividend
 11536  0028AC  C090  F097         	movff	?___lwdiv+1,___lwmod@dividend+1
 11537  0028B0  0E00               	movlw	0
 11538  0028B2  0100               	movlb	0	; () banked
 11539  0028B4  6F99               	movwf	(___lwmod@divisor+1)& (0+255),b
 11540  0028B6  0E0A               	movlw	10
 11541  0028B8  6F98               	movwf	___lwmod@divisor& (0+255),b
 11542  0028BA  ECC3  F01C         	call	___lwmod	;wreg free
 11543  0028BE  0100               	movlb	0	; () banked
 11544  0028C0  5196               	movf	?___lwmod& (0+255),w,b
 11545  0028C2  0F30               	addlw	48
 11546  0028C4  0100               	movlb	0	; () banked
 11547  0028C6  6FA7               	movwf	printf@c& (0+255),b
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;doprnt.c: 1523: }
 11551                           ;doprnt.c: 1524: (putch(c) );
 11552  0028C8  0100               	movlb	0	; () banked
 11553  0028CA  51A7               	movf	printf@c& (0+255),w,b
 11554  0028CC  EC48  F01E         	call	_putch
 11555  0028D0                     l6951:
 11556  0028D0  0100               	movlb	0	; () banked
 11557  0028D2  07A4               	decf	printf@prec& (0+255),f,b
 11558  0028D4  0100               	movlb	0	; () banked
 11559  0028D6  29A4               	incf	printf@prec& (0+255),w,b
 11560  0028D8  A4D8               	btfss	status,2,c
 11561  0028DA  D7D1               	goto	l6947
 11562  0028DC                     l6953:
 11563  0028DC  C09A  FFF6         	movff	printf@f,tblptrl
 11564  0028E0  C09B  FFF7         	movff	printf@f+1,tblptrh
 11565  0028E4  0100               	movlb	0	; () banked
 11566  0028E6  4B9A               	infsnz	printf@f& (0+255),f,b
 11567  0028E8  2B9B               	incf	(printf@f+1)& (0+255),f,b
 11568  0028EA                     	if	0	;tblptru may be non-zero
 11569  0028EA                     	endif
 11570  0028EA                     	if	0	;tblptru may be non-zero
 11571  0028EA                     	endif
 11572  0028EA  0008               	tblrd		*
 11573  0028EC  CFF5 F0A7          	movff	tablat,printf@c
 11574  0028F0  0100               	movlb	0	; () banked
 11575  0028F2  51A7               	movf	printf@c& (0+255),w,b
 11576  0028F4  B4D8               	btfsc	status,2,c
 11577  0028F6  0012               	return	
 11578  0028F8  D75D               	goto	l6907
 11579  0028FA                     __end_of_printf:
 11580                           	opt stack 0
 11581                           tblptru	equ	0xFF8
 11582                           tblptrh	equ	0xFF7
 11583                           tblptrl	equ	0xFF6
 11584                           tablat	equ	0xFF5
 11585                           prodh	equ	0xFF4
 11586                           prodl	equ	0xFF3
 11587                           intcon	equ	0xFF2
 11588                           intcon2	equ	0xFF1
 11589                           postinc0	equ	0xFEE
 11590                           wreg	equ	0xFE8
 11591                           postdec1	equ	0xFE5
 11592                           fsr1l	equ	0xFE1
 11593                           indf2	equ	0xFDF
 11594                           postinc2	equ	0xFDE
 11595                           postdec2	equ	0xFDD
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function _putch *****************
 11601 ;; Defined at:
 11602 ;;		line 177 in file "../eusart1.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;  data            1    wreg     unsigned char 
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  data            1   31[COMRAM] unsigned char 
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      void 
 11609 ;; Registers used:
 11610 ;;		wreg
 11611 ;; Tracked objects:
 11612 ;;		On entry : 0/0
 11613 ;;		On exit  : 0/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11616 ;;      Params:         0       0       0       0       0       0       0       0       0
 11617 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11618 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11619 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11620 ;;Total ram usage:        1 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:    3
 11623 ;; This function calls:
 11624 ;;		Nothing
 11625 ;; This function is called by:
 11626 ;;		_printf
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text32
 11631  003C90                     __ptext32:
 11632                           	opt stack 0
 11633  003C90                     _putch:
 11634                           	opt stack 20
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;incstack = 0
 11638                           ;putch@data stored from wreg
 11639  003C90  6E20               	movwf	putch@data,c
 11640  003C92                     l516:
 11641  003C92  A89E               	btfss	3998,4,c	;volatile
 11642  003C94  D7FE               	goto	l516
 11643                           
 11644                           ;eusart1.c: 180: TXREG1 = data;
 11645  003C96  C020  FFAD         	movff	putch@data,4013	;volatile
 11646  003C9A  0012               	return		;funcret
 11647  003C9C                     __end_of_putch:
 11648                           	opt stack 0
 11649                           tblptru	equ	0xFF8
 11650                           tblptrh	equ	0xFF7
 11651                           tblptrl	equ	0xFF6
 11652                           tablat	equ	0xFF5
 11653                           prodh	equ	0xFF4
 11654                           prodl	equ	0xFF3
 11655                           intcon	equ	0xFF2
 11656                           intcon2	equ	0xFF1
 11657                           postinc0	equ	0xFEE
 11658                           wreg	equ	0xFE8
 11659                           postdec1	equ	0xFE5
 11660                           fsr1l	equ	0xFE1
 11661                           indf2	equ	0xFDF
 11662                           postinc2	equ	0xFDE
 11663                           postdec2	equ	0xFDD
 11664                           fsr2h	equ	0xFDA
 11665                           fsr2l	equ	0xFD9
 11666                           status	equ	0xFD8
 11667                           
 11668 ;; *************** function ___lwmod *****************
 11669 ;; Defined at:
 11670 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;  dividend        2    7[BANK0 ] unsigned int 
 11673 ;;  divisor         2    9[BANK0 ] unsigned int 
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;  counter         1   31[COMRAM] unsigned char 
 11676 ;; Return value:  Size  Location     Type
 11677 ;;                  2    7[BANK0 ] unsigned int 
 11678 ;; Registers used:
 11679 ;;		wreg, status,2, status,0
 11680 ;; Tracked objects:
 11681 ;;		On entry : 0/0
 11682 ;;		On exit  : 0/0
 11683 ;;		Unchanged: 0/0
 11684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11685 ;;      Params:         0       4       0       0       0       0       0       0       0
 11686 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11687 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11688 ;;      Totals:         1       4       0       0       0       0       0       0       0
 11689 ;;Total ram usage:        5 bytes
 11690 ;; Hardware stack levels used:    1
 11691 ;; Hardware stack levels required when called:    3
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		_printf
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           	psect	text33
 11700  003986                     __ptext33:
 11701                           	opt stack 0
 11702  003986                     ___lwmod:
 11703                           	opt stack 20
 11704                           
 11705                           ;incstack = 0
 11706  003986  0100               	movlb	0	; () banked
 11707  003988  5198               	movf	___lwmod@divisor& (0+255),w,b
 11708  00398A  0100               	movlb	0	; () banked
 11709  00398C  1199               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 11710  00398E  B4D8               	btfsc	status,2,c
 11711  003990  D023               	goto	l1626
 11712                           
 11713                           ; BSR set to: 0
 11714  003992  0E01               	movlw	1
 11715  003994  6E20               	movwf	___lwmod@counter,c
 11716  003996  D005               	goto	l6895
 11717  003998                     l6893:
 11718                           
 11719                           ; BSR set to: 0
 11720  003998  0100               	movlb	0	; () banked
 11721  00399A  90D8               	bcf	status,0,c
 11722  00399C  3798               	rlcf	___lwmod@divisor& (0+255),f,b
 11723  00399E  3799               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 11724  0039A0  2A20               	incf	___lwmod@counter,f,c
 11725  0039A2                     l6895:
 11726                           
 11727                           ; BSR set to: 0
 11728  0039A2  0100               	movlb	0	; () banked
 11729  0039A4  AF99               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 11730  0039A6  D7F8               	goto	l6893
 11731  0039A8                     l6897:
 11732                           
 11733                           ; BSR set to: 0
 11734  0039A8  0100               	movlb	0	; () banked
 11735  0039AA  5198               	movf	___lwmod@divisor& (0+255),w,b
 11736  0039AC  0100               	movlb	0	; () banked
 11737  0039AE  5D96               	subwf	___lwmod@dividend& (0+255),w,b
 11738  0039B0  0100               	movlb	0	; () banked
 11739  0039B2  5199               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11740  0039B4  0100               	movlb	0	; () banked
 11741  0039B6  5997               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 11742  0039B8  A0D8               	btfss	status,0,c
 11743  0039BA  D008               	goto	l6901
 11744                           
 11745                           ; BSR set to: 0
 11746  0039BC  0100               	movlb	0	; () banked
 11747  0039BE  5198               	movf	___lwmod@divisor& (0+255),w,b
 11748  0039C0  0100               	movlb	0	; () banked
 11749  0039C2  5F96               	subwf	___lwmod@dividend& (0+255),f,b
 11750  0039C4  0100               	movlb	0	; () banked
 11751  0039C6  5199               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11752  0039C8  0100               	movlb	0	; () banked
 11753  0039CA  5B97               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 11754  0039CC                     l6901:
 11755                           
 11756                           ; BSR set to: 0
 11757  0039CC  0100               	movlb	0	; () banked
 11758  0039CE  90D8               	bcf	status,0,c
 11759  0039D0  3399               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 11760  0039D2  3398               	rrcf	___lwmod@divisor& (0+255),f,b
 11761                           
 11762                           ; BSR set to: 0
 11763  0039D4  2E20               	decfsz	___lwmod@counter,f,c
 11764  0039D6  D7E8               	goto	l6897
 11765  0039D8                     l1626:
 11766                           
 11767                           ; BSR set to: 0
 11768  0039D8  C096  F096         	movff	___lwmod@dividend,?___lwmod
 11769  0039DC  C097  F097         	movff	___lwmod@dividend+1,?___lwmod+1
 11770                           
 11771                           ; BSR set to: 0
 11772  0039E0  0012               	return		;funcret
 11773  0039E2                     __end_of___lwmod:
 11774                           	opt stack 0
 11775                           tblptru	equ	0xFF8
 11776                           tblptrh	equ	0xFF7
 11777                           tblptrl	equ	0xFF6
 11778                           tablat	equ	0xFF5
 11779                           prodh	equ	0xFF4
 11780                           prodl	equ	0xFF3
 11781                           intcon	equ	0xFF2
 11782                           intcon2	equ	0xFF1
 11783                           postinc0	equ	0xFEE
 11784                           wreg	equ	0xFE8
 11785                           postdec1	equ	0xFE5
 11786                           fsr1l	equ	0xFE1
 11787                           indf2	equ	0xFDF
 11788                           postinc2	equ	0xFDE
 11789                           postdec2	equ	0xFDD
 11790                           fsr2h	equ	0xFDA
 11791                           fsr2l	equ	0xFD9
 11792                           status	equ	0xFD8
 11793                           
 11794 ;; *************** function ___lwdiv *****************
 11795 ;; Defined at:
 11796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;  dividend        2    0[BANK0 ] unsigned int 
 11799 ;;  divisor         2    2[BANK0 ] unsigned int 
 11800 ;; Auto vars:     Size  Location     Type
 11801 ;;  quotient        2    5[BANK0 ] unsigned int 
 11802 ;;  counter         1    4[BANK0 ] unsigned char 
 11803 ;; Return value:  Size  Location     Type
 11804 ;;                  2    0[BANK0 ] unsigned int 
 11805 ;; Registers used:
 11806 ;;		wreg, status,2, status,0
 11807 ;; Tracked objects:
 11808 ;;		On entry : 0/0
 11809 ;;		On exit  : 0/0
 11810 ;;		Unchanged: 0/0
 11811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11812 ;;      Params:         0       4       0       0       0       0       0       0       0
 11813 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11814 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11815 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11816 ;;Total ram usage:        7 bytes
 11817 ;; Hardware stack levels used:    1
 11818 ;; Hardware stack levels required when called:    3
 11819 ;; This function calls:
 11820 ;;		Nothing
 11821 ;; This function is called by:
 11822 ;;		_printf
 11823 ;; This function uses a non-reentrant model
 11824 ;;
 11825                           
 11826                           	psect	text34
 11827  003830                     __ptext34:
 11828                           	opt stack 0
 11829  003830                     ___lwdiv:
 11830                           	opt stack 20
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;incstack = 0
 11834  003830  0E00               	movlw	0
 11835  003832  0100               	movlb	0	; () banked
 11836  003834  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11837  003836  0E00               	movlw	0
 11838  003838  6F94               	movwf	___lwdiv@quotient& (0+255),b
 11839                           
 11840                           ; BSR set to: 0
 11841  00383A  0100               	movlb	0	; () banked
 11842  00383C  5191               	movf	___lwdiv@divisor& (0+255),w,b
 11843  00383E  0100               	movlb	0	; () banked
 11844  003840  1192               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11845  003842  B4D8               	btfsc	status,2,c
 11846  003844  D02C               	goto	l1616
 11847                           
 11848                           ; BSR set to: 0
 11849  003846  0E01               	movlw	1
 11850  003848  0100               	movlb	0	; () banked
 11851  00384A  6F93               	movwf	___lwdiv@counter& (0+255),b
 11852  00384C  D006               	goto	l6875
 11853  00384E                     l6873:
 11854                           
 11855                           ; BSR set to: 0
 11856  00384E  0100               	movlb	0	; () banked
 11857  003850  90D8               	bcf	status,0,c
 11858  003852  3791               	rlcf	___lwdiv@divisor& (0+255),f,b
 11859  003854  3792               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11860  003856  0100               	movlb	0	; () banked
 11861  003858  2B93               	incf	___lwdiv@counter& (0+255),f,b
 11862  00385A                     l6875:
 11863                           
 11864                           ; BSR set to: 0
 11865  00385A  0100               	movlb	0	; () banked
 11866  00385C  AF92               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11867  00385E  D7F7               	goto	l6873
 11868  003860                     l6877:
 11869                           
 11870                           ; BSR set to: 0
 11871  003860  0100               	movlb	0	; () banked
 11872  003862  90D8               	bcf	status,0,c
 11873  003864  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
 11874  003866  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11875                           
 11876                           ; BSR set to: 0
 11877  003868  0100               	movlb	0	; () banked
 11878  00386A  5191               	movf	___lwdiv@divisor& (0+255),w,b
 11879  00386C  0100               	movlb	0	; () banked
 11880  00386E  5D8F               	subwf	___lwdiv@dividend& (0+255),w,b
 11881  003870  0100               	movlb	0	; () banked
 11882  003872  5192               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11883  003874  0100               	movlb	0	; () banked
 11884  003876  5990               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11885  003878  A0D8               	btfss	status,0,c
 11886  00387A  D00A               	goto	l6885
 11887                           
 11888                           ; BSR set to: 0
 11889  00387C  0100               	movlb	0	; () banked
 11890  00387E  5191               	movf	___lwdiv@divisor& (0+255),w,b
 11891  003880  0100               	movlb	0	; () banked
 11892  003882  5F8F               	subwf	___lwdiv@dividend& (0+255),f,b
 11893  003884  0100               	movlb	0	; () banked
 11894  003886  5192               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11895  003888  0100               	movlb	0	; () banked
 11896  00388A  5B90               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11897                           
 11898                           ; BSR set to: 0
 11899  00388C  0100               	movlb	0	; () banked
 11900  00388E  8194               	bsf	___lwdiv@quotient& (0+255),0,b
 11901  003890                     l6885:
 11902                           
 11903                           ; BSR set to: 0
 11904  003890  0100               	movlb	0	; () banked
 11905  003892  90D8               	bcf	status,0,c
 11906  003894  3392               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11907  003896  3391               	rrcf	___lwdiv@divisor& (0+255),f,b
 11908                           
 11909                           ; BSR set to: 0
 11910  003898  0100               	movlb	0	; () banked
 11911  00389A  2F93               	decfsz	___lwdiv@counter& (0+255),f,b
 11912  00389C  D7E1               	goto	l6877
 11913  00389E                     l1616:
 11914                           
 11915                           ; BSR set to: 0
 11916  00389E  C094  F08F         	movff	___lwdiv@quotient,?___lwdiv
 11917  0038A2  C095  F090         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11918                           
 11919                           ; BSR set to: 0
 11920  0038A6  0012               	return		;funcret
 11921  0038A8                     __end_of___lwdiv:
 11922                           	opt stack 0
 11923                           tblptru	equ	0xFF8
 11924                           tblptrh	equ	0xFF7
 11925                           tblptrl	equ	0xFF6
 11926                           tablat	equ	0xFF5
 11927                           prodh	equ	0xFF4
 11928                           prodl	equ	0xFF3
 11929                           intcon	equ	0xFF2
 11930                           intcon2	equ	0xFF1
 11931                           postinc0	equ	0xFEE
 11932                           wreg	equ	0xFE8
 11933                           postdec1	equ	0xFE5
 11934                           fsr1l	equ	0xFE1
 11935                           indf2	equ	0xFDF
 11936                           postinc2	equ	0xFDE
 11937                           postdec2	equ	0xFDD
 11938                           fsr2h	equ	0xFDA
 11939                           fsr2l	equ	0xFD9
 11940                           status	equ	0xFD8
 11941                           
 11942 ;; *************** function _EUSART1_Initialize *****************
 11943 ;; Defined at:
 11944 ;;		line 77 in file "../eusart1.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;		None
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;  baud_rate       2    0[BANK0 ] unsigned int 
 11949 ;; Return value:  Size  Location     Type
 11950 ;;                  1    wreg      void 
 11951 ;; Registers used:
 11952 ;;		wreg, status,2
 11953 ;; Tracked objects:
 11954 ;;		On entry : 0/0
 11955 ;;		On exit  : 0/0
 11956 ;;		Unchanged: 0/0
 11957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11958 ;;      Params:         0       0       0       0       0       0       0       0       0
 11959 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11960 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11961 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11962 ;;Total ram usage:        2 bytes
 11963 ;; Hardware stack levels used:    1
 11964 ;; Hardware stack levels required when called:    3
 11965 ;; This function calls:
 11966 ;;		Nothing
 11967 ;; This function is called by:
 11968 ;;		_main
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text35
 11973  003A36                     __ptext35:
 11974                           	opt stack 0
 11975  003A36                     _EUSART1_Initialize:
 11976                           	opt stack 27
 11977                           
 11978                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;incstack = 0
 11982  003A36  9A9D               	bcf	3997,5,c	;volatile
 11983                           
 11984                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 11985  003A38  989D               	bcf	3997,4,c	;volatile
 11986                           
 11987                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 11988  003A3A  86B8               	bsf	4024,3,c	;volatile
 11989                           
 11990                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 11991  003A3C  8EAB               	bsf	4011,7,c	;volatile
 11992                           
 11993                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 11994  003A3E  9CAB               	bcf	4011,6,c	;volatile
 11995                           
 11996                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 11997  003A40  88AB               	bsf	4011,4,c	;volatile
 11998                           
 11999                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 12000  003A42  96AB               	bcf	4011,3,c	;volatile
 12001                           
 12002                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 12003  003A44  9CAC               	bcf	4012,6,c	;volatile
 12004                           
 12005                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 12006  003A46  8AAC               	bsf	4012,5,c	;volatile
 12007                           
 12008                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 12009  003A48  98AC               	bcf	4012,4,c	;volatile
 12010                           
 12011                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 12012  003A4A  96AC               	bcf	4012,3,c	;volatile
 12013                           
 12014                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 12015  003A4C  84AC               	bsf	4012,2,c	;volatile
 12016                           
 12017                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 12018  003A4E  82AC               	bsf	4012,1,c	;volatile
 12019                           
 12020                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 12021  003A50  90AC               	bcf	4012,0,c	;volatile
 12022                           
 12023                           ;eusart1.c: 99: unsigned int baud_rate;
 12024                           ;eusart1.c: 101: baud_rate = 417;
 12025  003A52  0E01               	movlw	1
 12026  003A54  0100               	movlb	0	; () banked
 12027  003A56  6F90               	movwf	(EUSART1_Initialize@baud_rate+1)& (0+255),b
 12028  003A58  0EA1               	movlw	161
 12029  003A5A  6F8F               	movwf	EUSART1_Initialize@baud_rate& (0+255),b
 12030                           
 12031                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 12032  003A5C  0100               	movlb	0	; () banked
 12033  003A5E  5190               	movf	(EUSART1_Initialize@baud_rate+1)& (0+255),w,b
 12034  003A60  6EB0               	movwf	4016,c	;volatile
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;eusart1.c: 104: SPBRG = baud_rate;
 12038  003A62  C08F  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12039                           
 12040                           ;eusart1.c: 108: eusart1TxHead = 0;
 12041  003A66  0E00               	movlw	0
 12042  003A68  6E3E               	movwf	_eusart1TxHead,c
 12043                           
 12044                           ;eusart1.c: 109: eusart1TxTail = 0;
 12045  003A6A  0E00               	movlw	0
 12046  003A6C  6E3F               	movwf	_eusart1TxTail,c
 12047                           
 12048                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12049  003A6E  0E7E               	movlw	126
 12050  003A70  6E3D               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12051                           
 12052                           ;eusart1.c: 112: eusart1RxHead = 0;
 12053  003A72  0E00               	movlw	0
 12054  003A74  6E3B               	movwf	_eusart1RxHead,c
 12055                           
 12056                           ;eusart1.c: 113: eusart1RxTail = 0;
 12057  003A76  0E00               	movlw	0
 12058  003A78  6E3C               	movwf	_eusart1RxTail,c
 12059                           
 12060                           ;eusart1.c: 114: eusart1RxCount = 0;
 12061  003A7A  0E00               	movlw	0
 12062  003A7C  6E3A               	movwf	_eusart1RxCount,c	;volatile
 12063                           
 12064                           ; BSR set to: 0
 12065                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 12066  003A7E  8A9D               	bsf	3997,5,c	;volatile
 12067                           
 12068                           ; BSR set to: 0
 12069  003A80  0012               	return		;funcret
 12070  003A82                     __end_of_EUSART1_Initialize:
 12071                           	opt stack 0
 12072                           tblptru	equ	0xFF8
 12073                           tblptrh	equ	0xFF7
 12074                           tblptrl	equ	0xFF6
 12075                           tablat	equ	0xFF5
 12076                           prodh	equ	0xFF4
 12077                           prodl	equ	0xFF3
 12078                           intcon	equ	0xFF2
 12079                           intcon2	equ	0xFF1
 12080                           postinc0	equ	0xFEE
 12081                           wreg	equ	0xFE8
 12082                           postdec1	equ	0xFE5
 12083                           fsr1l	equ	0xFE1
 12084                           indf2	equ	0xFDF
 12085                           postinc2	equ	0xFDE
 12086                           postdec2	equ	0xFDD
 12087                           fsr2h	equ	0xFDA
 12088                           fsr2l	equ	0xFD9
 12089                           status	equ	0xFD8
 12090                           
 12091 ;; *************** function _APIxInitialize *****************
 12092 ;; Defined at:
 12093 ;;		line 32 in file "../api.c"
 12094 ;; Parameters:    Size  Location     Type
 12095 ;;		None
 12096 ;; Auto vars:     Size  Location     Type
 12097 ;;  i               2    0[BANK0 ] unsigned int 
 12098 ;; Return value:  Size  Location     Type
 12099 ;;                  1    wreg      void 
 12100 ;; Registers used:
 12101 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12102 ;; Tracked objects:
 12103 ;;		On entry : 0/0
 12104 ;;		On exit  : 0/0
 12105 ;;		Unchanged: 0/0
 12106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12107 ;;      Params:         0       0       0       0       0       0       0       0       0
 12108 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12109 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12110 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12111 ;;Total ram usage:        2 bytes
 12112 ;; Hardware stack levels used:    1
 12113 ;; Hardware stack levels required when called:    3
 12114 ;; This function calls:
 12115 ;;		Nothing
 12116 ;; This function is called by:
 12117 ;;		_main
 12118 ;; This function uses a non-reentrant model
 12119 ;;
 12120                           
 12121                           	psect	text36
 12122  001BAA                     __ptext36:
 12123                           	opt stack 0
 12124  001BAA                     _APIxInitialize:
 12125                           	opt stack 27
 12126                           
 12127                           ;api.c: 34: unsigned int i;
 12128                           ;api.c: 35: for(i = 0; i < (82 + 1); i++ )
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;incstack = 0
 12132  001BAA  0E00               	movlw	0
 12133  001BAC  0100               	movlb	0	; () banked
 12134  001BAE  6F90               	movwf	(APIxInitialize@i+1)& (0+255),b
 12135  001BB0  0E00               	movlw	0
 12136  001BB2  6F8F               	movwf	APIxInitialize@i& (0+255),b
 12137  001BB4                     l8195:
 12138                           
 12139                           ; BSR set to: 0
 12140  001BB4  0100               	movlb	0	; () banked
 12141  001BB6  5190               	movf	(APIxInitialize@i+1)& (0+255),w,b
 12142  001BB8  E127               	bnz	l8205
 12143  001BBA  0E53               	movlw	83
 12144  001BBC  0100               	movlb	0	; () banked
 12145  001BBE  5D8F               	subwf	APIxInitialize@i& (0+255),w,b
 12146  001BC0  B0D8               	btfsc	status,0,c
 12147  001BC2  D022               	goto	l8205
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;api.c: 36: {
 12151                           ;api.c: 37: API_RW[i] = 0;
 12152                           
 12153                           ; BSR set to: 0
 12154                           
 12155                           ; BSR set to: 0
 12156  001BC4  90D8               	bcf	status,0,c
 12157  001BC6  0100               	movlb	0	; () banked
 12158  001BC8  358F               	rlcf	APIxInitialize@i& (0+255),w,b
 12159  001BCA  6ED9               	movwf	fsr2l,c
 12160  001BCC  0100               	movlb	0	; () banked
 12161  001BCE  3590               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 12162  001BD0  6EDA               	movwf	fsr2h,c
 12163  001BD2  0E00               	movlw	low _API_RW
 12164  001BD4  26D9               	addwf	fsr2l,f,c
 12165  001BD6  0E02               	movlw	high _API_RW
 12166  001BD8  22DA               	addwfc	fsr2h,f,c
 12167  001BDA  0E00               	movlw	0
 12168  001BDC  6EDE               	movwf	postinc2,c
 12169  001BDE  0E00               	movlw	0
 12170  001BE0  6EDD               	movwf	postdec2,c
 12171                           
 12172                           ;api.c: 38: API[i] = 0;
 12173  001BE2  90D8               	bcf	status,0,c
 12174  001BE4  0100               	movlb	0	; () banked
 12175  001BE6  358F               	rlcf	APIxInitialize@i& (0+255),w,b
 12176  001BE8  6ED9               	movwf	fsr2l,c
 12177  001BEA  0100               	movlb	0	; () banked
 12178  001BEC  3590               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 12179  001BEE  6EDA               	movwf	fsr2h,c
 12180  001BF0  0E00               	movlw	low _API
 12181  001BF2  26D9               	addwf	fsr2l,f,c
 12182  001BF4  0E01               	movlw	high _API
 12183  001BF6  22DA               	addwfc	fsr2h,f,c
 12184  001BF8  0E00               	movlw	0
 12185  001BFA  6EDE               	movwf	postinc2,c
 12186  001BFC  0E00               	movlw	0
 12187  001BFE  6EDD               	movwf	postdec2,c
 12188                           
 12189                           ; BSR set to: 0
 12190  001C00  0100               	movlb	0	; () banked
 12191  001C02  4B8F               	infsnz	APIxInitialize@i& (0+255),f,b
 12192  001C04  2B90               	incf	(APIxInitialize@i+1)& (0+255),f,b
 12193  001C06  D7D6               	goto	l8195
 12194  001C08                     l8205:
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;api.c: 39: }
 12198                           ;api.c: 42: API_RW[16] = 0;
 12199  001C08  0E00               	movlw	0
 12200  001C0A  0102               	movlb	2	; () banked
 12201  001C0C  6F21               	movwf	(_API_RW+33)& (0+255),b
 12202  001C0E  0E00               	movlw	0
 12203  001C10  6F20               	movwf	(_API_RW+32)& (0+255),b
 12204                           
 12205                           ;api.c: 43: API_RW[18] = 1;
 12206  001C12  0E00               	movlw	0
 12207  001C14  0102               	movlb	2	; () banked
 12208  001C16  6F25               	movwf	(_API_RW+37)& (0+255),b
 12209  001C18  0E01               	movlw	1
 12210  001C1A  6F24               	movwf	(_API_RW+36)& (0+255),b
 12211                           
 12212                           ;api.c: 44: API_RW[19] = 1;
 12213  001C1C  0E00               	movlw	0
 12214  001C1E  0102               	movlb	2	; () banked
 12215  001C20  6F27               	movwf	(_API_RW+39)& (0+255),b
 12216  001C22  0E01               	movlw	1
 12217  001C24  6F26               	movwf	(_API_RW+38)& (0+255),b
 12218                           
 12219                           ;api.c: 45: API_RW[20] = 1;
 12220  001C26  0E00               	movlw	0
 12221  001C28  0102               	movlb	2	; () banked
 12222  001C2A  6F29               	movwf	(_API_RW+41)& (0+255),b
 12223  001C2C  0E01               	movlw	1
 12224  001C2E  6F28               	movwf	(_API_RW+40)& (0+255),b
 12225                           
 12226                           ;api.c: 46: API_RW[21] = 1;
 12227  001C30  0E00               	movlw	0
 12228  001C32  0102               	movlb	2	; () banked
 12229  001C34  6F2B               	movwf	(_API_RW+43)& (0+255),b
 12230  001C36  0E01               	movlw	1
 12231  001C38  6F2A               	movwf	(_API_RW+42)& (0+255),b
 12232                           
 12233                           ;api.c: 47: API_RW[22] = 1;
 12234  001C3A  0E00               	movlw	0
 12235  001C3C  0102               	movlb	2	; () banked
 12236  001C3E  6F2D               	movwf	(_API_RW+45)& (0+255),b
 12237  001C40  0E01               	movlw	1
 12238  001C42  6F2C               	movwf	(_API_RW+44)& (0+255),b
 12239                           
 12240                           ;api.c: 48: API_RW[23] = 1;
 12241  001C44  0E00               	movlw	0
 12242  001C46  0102               	movlb	2	; () banked
 12243  001C48  6F2F               	movwf	(_API_RW+47)& (0+255),b
 12244  001C4A  0E01               	movlw	1
 12245  001C4C  6F2E               	movwf	(_API_RW+46)& (0+255),b
 12246                           
 12247                           ;api.c: 49: API_RW[24] = 1;
 12248  001C4E  0E00               	movlw	0
 12249  001C50  0102               	movlb	2	; () banked
 12250  001C52  6F31               	movwf	(_API_RW+49)& (0+255),b
 12251  001C54  0E01               	movlw	1
 12252  001C56  6F30               	movwf	(_API_RW+48)& (0+255),b
 12253                           
 12254                           ;api.c: 50: API_RW[25] = 1;
 12255  001C58  0E00               	movlw	0
 12256  001C5A  0102               	movlb	2	; () banked
 12257  001C5C  6F33               	movwf	(_API_RW+51)& (0+255),b
 12258  001C5E  0E01               	movlw	1
 12259  001C60  6F32               	movwf	(_API_RW+50)& (0+255),b
 12260                           
 12261                           ;api.c: 51: API_RW[26] = 1;
 12262  001C62  0E00               	movlw	0
 12263  001C64  0102               	movlb	2	; () banked
 12264  001C66  6F35               	movwf	(_API_RW+53)& (0+255),b
 12265  001C68  0E01               	movlw	1
 12266  001C6A  6F34               	movwf	(_API_RW+52)& (0+255),b
 12267                           
 12268                           ;api.c: 52: API_RW[27] = 1;
 12269  001C6C  0E00               	movlw	0
 12270  001C6E  0102               	movlb	2	; () banked
 12271  001C70  6F37               	movwf	(_API_RW+55)& (0+255),b
 12272  001C72  0E01               	movlw	1
 12273  001C74  6F36               	movwf	(_API_RW+54)& (0+255),b
 12274                           
 12275                           ;api.c: 53: API_RW[28] = 0;
 12276  001C76  0E00               	movlw	0
 12277  001C78  0102               	movlb	2	; () banked
 12278  001C7A  6F39               	movwf	(_API_RW+57)& (0+255),b
 12279  001C7C  0E00               	movlw	0
 12280  001C7E  6F38               	movwf	(_API_RW+56)& (0+255),b
 12281                           
 12282                           ;api.c: 54: API_RW[29] = 0;
 12283  001C80  0E00               	movlw	0
 12284  001C82  0102               	movlb	2	; () banked
 12285  001C84  6F3B               	movwf	(_API_RW+59)& (0+255),b
 12286  001C86  0E00               	movlw	0
 12287  001C88  6F3A               	movwf	(_API_RW+58)& (0+255),b
 12288                           
 12289                           ;api.c: 55: API_RW[30] = 0;
 12290  001C8A  0E00               	movlw	0
 12291  001C8C  0102               	movlb	2	; () banked
 12292  001C8E  6F3D               	movwf	(_API_RW+61)& (0+255),b
 12293  001C90  0E00               	movlw	0
 12294  001C92  6F3C               	movwf	(_API_RW+60)& (0+255),b
 12295                           
 12296                           ;api.c: 56: API_RW[31] = 0;
 12297  001C94  0E00               	movlw	0
 12298  001C96  0102               	movlb	2	; () banked
 12299  001C98  6F3F               	movwf	(_API_RW+63)& (0+255),b
 12300  001C9A  0E00               	movlw	0
 12301  001C9C  6F3E               	movwf	(_API_RW+62)& (0+255),b
 12302                           
 12303                           ;api.c: 57: API_RW[32] = 0;
 12304  001C9E  0E00               	movlw	0
 12305  001CA0  0102               	movlb	2	; () banked
 12306  001CA2  6F41               	movwf	(_API_RW+65)& (0+255),b
 12307  001CA4  0E00               	movlw	0
 12308  001CA6  6F40               	movwf	(_API_RW+64)& (0+255),b
 12309                           
 12310                           ;api.c: 58: API_RW[33] = 0;
 12311  001CA8  0E00               	movlw	0
 12312  001CAA  0102               	movlb	2	; () banked
 12313  001CAC  6F43               	movwf	(_API_RW+67)& (0+255),b
 12314  001CAE  0E00               	movlw	0
 12315  001CB0  6F42               	movwf	(_API_RW+66)& (0+255),b
 12316                           
 12317                           ;api.c: 59: API_RW[34] = 0;
 12318  001CB2  0E00               	movlw	0
 12319  001CB4  0102               	movlb	2	; () banked
 12320  001CB6  6F45               	movwf	(_API_RW+69)& (0+255),b
 12321  001CB8  0E00               	movlw	0
 12322  001CBA  6F44               	movwf	(_API_RW+68)& (0+255),b
 12323                           
 12324                           ;api.c: 60: API_RW[35] = 0;
 12325  001CBC  0E00               	movlw	0
 12326  001CBE  0102               	movlb	2	; () banked
 12327  001CC0  6F47               	movwf	(_API_RW+71)& (0+255),b
 12328  001CC2  0E00               	movlw	0
 12329  001CC4  6F46               	movwf	(_API_RW+70)& (0+255),b
 12330                           
 12331                           ;api.c: 61: API_RW[36] = 0;
 12332  001CC6  0E00               	movlw	0
 12333  001CC8  0102               	movlb	2	; () banked
 12334  001CCA  6F49               	movwf	(_API_RW+73)& (0+255),b
 12335  001CCC  0E00               	movlw	0
 12336  001CCE  6F48               	movwf	(_API_RW+72)& (0+255),b
 12337                           
 12338                           ;api.c: 62: API_RW[37] = 0;
 12339  001CD0  0E00               	movlw	0
 12340  001CD2  0102               	movlb	2	; () banked
 12341  001CD4  6F4B               	movwf	(_API_RW+75)& (0+255),b
 12342  001CD6  0E00               	movlw	0
 12343  001CD8  6F4A               	movwf	(_API_RW+74)& (0+255),b
 12344                           
 12345                           ;api.c: 63: API_RW[38] = 0;
 12346  001CDA  0E00               	movlw	0
 12347  001CDC  0102               	movlb	2	; () banked
 12348  001CDE  6F4D               	movwf	(_API_RW+77)& (0+255),b
 12349  001CE0  0E00               	movlw	0
 12350  001CE2  6F4C               	movwf	(_API_RW+76)& (0+255),b
 12351                           
 12352                           ;api.c: 64: API_RW[39] = 1;
 12353  001CE4  0E00               	movlw	0
 12354  001CE6  0102               	movlb	2	; () banked
 12355  001CE8  6F4F               	movwf	(_API_RW+79)& (0+255),b
 12356  001CEA  0E01               	movlw	1
 12357  001CEC  6F4E               	movwf	(_API_RW+78)& (0+255),b
 12358                           
 12359                           ;api.c: 65: API_RW[40] = 1;
 12360  001CEE  0E00               	movlw	0
 12361  001CF0  0102               	movlb	2	; () banked
 12362  001CF2  6F51               	movwf	(_API_RW+81)& (0+255),b
 12363  001CF4  0E01               	movlw	1
 12364  001CF6  6F50               	movwf	(_API_RW+80)& (0+255),b
 12365                           
 12366                           ;api.c: 66: API_RW[41] = 0;
 12367  001CF8  0E00               	movlw	0
 12368  001CFA  0102               	movlb	2	; () banked
 12369  001CFC  6F53               	movwf	(_API_RW+83)& (0+255),b
 12370  001CFE  0E00               	movlw	0
 12371  001D00  6F52               	movwf	(_API_RW+82)& (0+255),b
 12372                           
 12373                           ;api.c: 67: API_RW[42] = 0;
 12374  001D02  0E00               	movlw	0
 12375  001D04  0102               	movlb	2	; () banked
 12376  001D06  6F55               	movwf	(_API_RW+85)& (0+255),b
 12377  001D08  0E00               	movlw	0
 12378  001D0A  6F54               	movwf	(_API_RW+84)& (0+255),b
 12379                           
 12380                           ;api.c: 68: API_RW[43] = 0;
 12381  001D0C  0E00               	movlw	0
 12382  001D0E  0102               	movlb	2	; () banked
 12383  001D10  6F57               	movwf	(_API_RW+87)& (0+255),b
 12384  001D12  0E00               	movlw	0
 12385  001D14  6F56               	movwf	(_API_RW+86)& (0+255),b
 12386                           
 12387                           ;api.c: 69: API_RW[44] = 0;
 12388  001D16  0E00               	movlw	0
 12389  001D18  0102               	movlb	2	; () banked
 12390  001D1A  6F59               	movwf	(_API_RW+89)& (0+255),b
 12391  001D1C  0E00               	movlw	0
 12392  001D1E  6F58               	movwf	(_API_RW+88)& (0+255),b
 12393                           
 12394                           ;api.c: 70: API_RW[45] = 1;
 12395  001D20  0E00               	movlw	0
 12396  001D22  0102               	movlb	2	; () banked
 12397  001D24  6F5B               	movwf	(_API_RW+91)& (0+255),b
 12398  001D26  0E01               	movlw	1
 12399  001D28  6F5A               	movwf	(_API_RW+90)& (0+255),b
 12400                           
 12401                           ;api.c: 71: API_RW[46] = 1;
 12402  001D2A  0E00               	movlw	0
 12403  001D2C  0102               	movlb	2	; () banked
 12404  001D2E  6F5D               	movwf	(_API_RW+93)& (0+255),b
 12405  001D30  0E01               	movlw	1
 12406  001D32  6F5C               	movwf	(_API_RW+92)& (0+255),b
 12407                           
 12408                           ;api.c: 72: API_RW[47] = 1;
 12409  001D34  0E00               	movlw	0
 12410  001D36  0102               	movlb	2	; () banked
 12411  001D38  6F5F               	movwf	(_API_RW+95)& (0+255),b
 12412  001D3A  0E01               	movlw	1
 12413  001D3C  6F5E               	movwf	(_API_RW+94)& (0+255),b
 12414                           
 12415                           ;api.c: 73: API_RW[48] = 1;
 12416  001D3E  0E00               	movlw	0
 12417  001D40  0102               	movlb	2	; () banked
 12418  001D42  6F61               	movwf	(_API_RW+97)& (0+255),b
 12419  001D44  0E01               	movlw	1
 12420  001D46  6F60               	movwf	(_API_RW+96)& (0+255),b
 12421                           
 12422                           ;api.c: 74: API_RW[49] = 1;
 12423  001D48  0E00               	movlw	0
 12424  001D4A  0102               	movlb	2	; () banked
 12425  001D4C  6F63               	movwf	(_API_RW+99)& (0+255),b
 12426  001D4E  0E01               	movlw	1
 12427  001D50  6F62               	movwf	(_API_RW+98)& (0+255),b
 12428                           
 12429                           ;api.c: 75: API_RW[50] = 1;
 12430  001D52  0E00               	movlw	0
 12431  001D54  0102               	movlb	2	; () banked
 12432  001D56  6F65               	movwf	(_API_RW+101)& (0+255),b
 12433  001D58  0E01               	movlw	1
 12434  001D5A  6F64               	movwf	(_API_RW+100)& (0+255),b
 12435                           
 12436                           ;api.c: 76: API_RW[51] = 1;
 12437  001D5C  0E00               	movlw	0
 12438  001D5E  0102               	movlb	2	; () banked
 12439  001D60  6F67               	movwf	(_API_RW+103)& (0+255),b
 12440  001D62  0E01               	movlw	1
 12441  001D64  6F66               	movwf	(_API_RW+102)& (0+255),b
 12442                           
 12443                           ;api.c: 77: API_RW[52] = 1;
 12444  001D66  0E00               	movlw	0
 12445  001D68  0102               	movlb	2	; () banked
 12446  001D6A  6F69               	movwf	(_API_RW+105)& (0+255),b
 12447  001D6C  0E01               	movlw	1
 12448  001D6E  6F68               	movwf	(_API_RW+104)& (0+255),b
 12449                           
 12450                           ;api.c: 78: API_RW[53] = 1;
 12451  001D70  0E00               	movlw	0
 12452  001D72  0102               	movlb	2	; () banked
 12453  001D74  6F6B               	movwf	(_API_RW+107)& (0+255),b
 12454  001D76  0E01               	movlw	1
 12455  001D78  6F6A               	movwf	(_API_RW+106)& (0+255),b
 12456                           
 12457                           ;api.c: 79: API_RW[54] = 1;
 12458  001D7A  0E00               	movlw	0
 12459  001D7C  0102               	movlb	2	; () banked
 12460  001D7E  6F6D               	movwf	(_API_RW+109)& (0+255),b
 12461  001D80  0E01               	movlw	1
 12462  001D82  6F6C               	movwf	(_API_RW+108)& (0+255),b
 12463                           
 12464                           ;api.c: 80: API_RW[55] = 1;
 12465  001D84  0E00               	movlw	0
 12466  001D86  0102               	movlb	2	; () banked
 12467  001D88  6F6F               	movwf	(_API_RW+111)& (0+255),b
 12468  001D8A  0E01               	movlw	1
 12469  001D8C  6F6E               	movwf	(_API_RW+110)& (0+255),b
 12470                           
 12471                           ;api.c: 81: API_RW[56] = 1;
 12472  001D8E  0E00               	movlw	0
 12473  001D90  0102               	movlb	2	; () banked
 12474  001D92  6F71               	movwf	(_API_RW+113)& (0+255),b
 12475  001D94  0E01               	movlw	1
 12476  001D96  6F70               	movwf	(_API_RW+112)& (0+255),b
 12477                           
 12478                           ;api.c: 82: API_RW[57] = 1;
 12479  001D98  0E00               	movlw	0
 12480  001D9A  0102               	movlb	2	; () banked
 12481  001D9C  6F73               	movwf	(_API_RW+115)& (0+255),b
 12482  001D9E  0E01               	movlw	1
 12483  001DA0  6F72               	movwf	(_API_RW+114)& (0+255),b
 12484                           
 12485                           ;api.c: 83: API_RW[58] = 1;
 12486  001DA2  0E00               	movlw	0
 12487  001DA4  0102               	movlb	2	; () banked
 12488  001DA6  6F75               	movwf	(_API_RW+117)& (0+255),b
 12489  001DA8  0E01               	movlw	1
 12490  001DAA  6F74               	movwf	(_API_RW+116)& (0+255),b
 12491                           
 12492                           ;api.c: 84: API_RW[59] = 1;
 12493  001DAC  0E00               	movlw	0
 12494  001DAE  0102               	movlb	2	; () banked
 12495  001DB0  6F77               	movwf	(_API_RW+119)& (0+255),b
 12496  001DB2  0E01               	movlw	1
 12497  001DB4  6F76               	movwf	(_API_RW+118)& (0+255),b
 12498                           
 12499                           ;api.c: 85: API_RW[60] = 1;
 12500  001DB6  0E00               	movlw	0
 12501  001DB8  0102               	movlb	2	; () banked
 12502  001DBA  6F79               	movwf	(_API_RW+121)& (0+255),b
 12503  001DBC  0E01               	movlw	1
 12504  001DBE  6F78               	movwf	(_API_RW+120)& (0+255),b
 12505                           
 12506                           ;api.c: 86: API_RW[61] = 0;
 12507  001DC0  0E00               	movlw	0
 12508  001DC2  0102               	movlb	2	; () banked
 12509  001DC4  6F7B               	movwf	(_API_RW+123)& (0+255),b
 12510  001DC6  0E00               	movlw	0
 12511  001DC8  6F7A               	movwf	(_API_RW+122)& (0+255),b
 12512                           
 12513                           ;api.c: 87: API_RW[62] = 0;
 12514  001DCA  0E00               	movlw	0
 12515  001DCC  0102               	movlb	2	; () banked
 12516  001DCE  6F7D               	movwf	(_API_RW+125)& (0+255),b
 12517  001DD0  0E00               	movlw	0
 12518  001DD2  6F7C               	movwf	(_API_RW+124)& (0+255),b
 12519                           
 12520                           ;api.c: 88: API_RW[63] = 0;
 12521  001DD4  0E00               	movlw	0
 12522  001DD6  0102               	movlb	2	; () banked
 12523  001DD8  6F7F               	movwf	(_API_RW+127)& (0+255),b
 12524  001DDA  0E00               	movlw	0
 12525  001DDC  6F7E               	movwf	(_API_RW+126)& (0+255),b
 12526                           
 12527                           ;api.c: 89: API_RW[64] = 0;
 12528  001DDE  0E00               	movlw	0
 12529  001DE0  0102               	movlb	2	; () banked
 12530  001DE2  6F81               	movwf	(_API_RW+129)& (0+255),b
 12531  001DE4  0E00               	movlw	0
 12532  001DE6  6F80               	movwf	(_API_RW+128)& (0+255),b
 12533                           
 12534                           ;api.c: 90: API_RW[65] = 0;
 12535  001DE8  0E00               	movlw	0
 12536  001DEA  0102               	movlb	2	; () banked
 12537  001DEC  6F83               	movwf	(_API_RW+131)& (0+255),b
 12538  001DEE  0E00               	movlw	0
 12539  001DF0  6F82               	movwf	(_API_RW+130)& (0+255),b
 12540                           
 12541                           ;api.c: 91: API_RW[66] = 0;
 12542  001DF2  0E00               	movlw	0
 12543  001DF4  0102               	movlb	2	; () banked
 12544  001DF6  6F85               	movwf	(_API_RW+133)& (0+255),b
 12545  001DF8  0E00               	movlw	0
 12546  001DFA  6F84               	movwf	(_API_RW+132)& (0+255),b
 12547                           
 12548                           ;api.c: 92: API_RW[67] = 0;
 12549  001DFC  0E00               	movlw	0
 12550  001DFE  0102               	movlb	2	; () banked
 12551  001E00  6F87               	movwf	(_API_RW+135)& (0+255),b
 12552  001E02  0E00               	movlw	0
 12553  001E04  6F86               	movwf	(_API_RW+134)& (0+255),b
 12554                           
 12555                           ;api.c: 93: API_RW[68] = 0;
 12556  001E06  0E00               	movlw	0
 12557  001E08  0102               	movlb	2	; () banked
 12558  001E0A  6F89               	movwf	(_API_RW+137)& (0+255),b
 12559  001E0C  0E00               	movlw	0
 12560  001E0E  6F88               	movwf	(_API_RW+136)& (0+255),b
 12561                           
 12562                           ;api.c: 94: API_RW[69] = 0;
 12563  001E10  0E00               	movlw	0
 12564  001E12  0102               	movlb	2	; () banked
 12565  001E14  6F8B               	movwf	(_API_RW+139)& (0+255),b
 12566  001E16  0E00               	movlw	0
 12567  001E18  6F8A               	movwf	(_API_RW+138)& (0+255),b
 12568                           
 12569                           ;api.c: 95: API_RW[70] = 1;
 12570  001E1A  0E00               	movlw	0
 12571  001E1C  0102               	movlb	2	; () banked
 12572  001E1E  6F8D               	movwf	(_API_RW+141)& (0+255),b
 12573  001E20  0E01               	movlw	1
 12574  001E22  6F8C               	movwf	(_API_RW+140)& (0+255),b
 12575                           
 12576                           ;api.c: 96: API_RW[71] = 1;
 12577  001E24  0E00               	movlw	0
 12578  001E26  0102               	movlb	2	; () banked
 12579  001E28  6F8F               	movwf	(_API_RW+143)& (0+255),b
 12580  001E2A  0E01               	movlw	1
 12581  001E2C  6F8E               	movwf	(_API_RW+142)& (0+255),b
 12582                           
 12583                           ;api.c: 97: API_RW[72] = 1;
 12584  001E2E  0E00               	movlw	0
 12585  001E30  0102               	movlb	2	; () banked
 12586  001E32  6F91               	movwf	(_API_RW+145)& (0+255),b
 12587  001E34  0E01               	movlw	1
 12588  001E36  6F90               	movwf	(_API_RW+144)& (0+255),b
 12589                           
 12590                           ;api.c: 98: API_RW[73] = 1;
 12591  001E38  0E00               	movlw	0
 12592  001E3A  0102               	movlb	2	; () banked
 12593  001E3C  6F93               	movwf	(_API_RW+147)& (0+255),b
 12594  001E3E  0E01               	movlw	1
 12595  001E40  6F92               	movwf	(_API_RW+146)& (0+255),b
 12596                           
 12597                           ;api.c: 99: API_RW[74] = 1;
 12598  001E42  0E00               	movlw	0
 12599  001E44  0102               	movlb	2	; () banked
 12600  001E46  6F95               	movwf	(_API_RW+149)& (0+255),b
 12601  001E48  0E01               	movlw	1
 12602  001E4A  6F94               	movwf	(_API_RW+148)& (0+255),b
 12603                           
 12604                           ;api.c: 100: API_RW[75] = 1;
 12605  001E4C  0E00               	movlw	0
 12606  001E4E  0102               	movlb	2	; () banked
 12607  001E50  6F97               	movwf	(_API_RW+151)& (0+255),b
 12608  001E52  0E01               	movlw	1
 12609  001E54  6F96               	movwf	(_API_RW+150)& (0+255),b
 12610                           
 12611                           ;api.c: 101: API_RW[76] = 1;
 12612  001E56  0E00               	movlw	0
 12613  001E58  0102               	movlb	2	; () banked
 12614  001E5A  6F99               	movwf	(_API_RW+153)& (0+255),b
 12615  001E5C  0E01               	movlw	1
 12616  001E5E  6F98               	movwf	(_API_RW+152)& (0+255),b
 12617                           
 12618                           ;api.c: 102: API_RW[77] = 1;
 12619  001E60  0E00               	movlw	0
 12620  001E62  0102               	movlb	2	; () banked
 12621  001E64  6F9B               	movwf	(_API_RW+155)& (0+255),b
 12622  001E66  0E01               	movlw	1
 12623  001E68  6F9A               	movwf	(_API_RW+154)& (0+255),b
 12624                           
 12625                           ;api.c: 103: API_RW[78] = 1;
 12626  001E6A  0E00               	movlw	0
 12627  001E6C  0102               	movlb	2	; () banked
 12628  001E6E  6F9D               	movwf	(_API_RW+157)& (0+255),b
 12629  001E70  0E01               	movlw	1
 12630  001E72  6F9C               	movwf	(_API_RW+156)& (0+255),b
 12631                           
 12632                           ;api.c: 104: API_RW[79] = 1;
 12633  001E74  0E00               	movlw	0
 12634  001E76  0102               	movlb	2	; () banked
 12635  001E78  6F9F               	movwf	(_API_RW+159)& (0+255),b
 12636  001E7A  0E01               	movlw	1
 12637  001E7C  6F9E               	movwf	(_API_RW+158)& (0+255),b
 12638                           
 12639                           ;api.c: 105: API_RW[80] = 0;
 12640  001E7E  0E00               	movlw	0
 12641  001E80  0102               	movlb	2	; () banked
 12642  001E82  6FA1               	movwf	(_API_RW+161)& (0+255),b
 12643  001E84  0E00               	movlw	0
 12644  001E86  6FA0               	movwf	(_API_RW+160)& (0+255),b
 12645                           
 12646                           ;api.c: 106: API_RW[81] = 1;
 12647  001E88  0E00               	movlw	0
 12648  001E8A  0102               	movlb	2	; () banked
 12649  001E8C  6FA3               	movwf	(_API_RW+163)& (0+255),b
 12650  001E8E  0E01               	movlw	1
 12651  001E90  6FA2               	movwf	(_API_RW+162)& (0+255),b
 12652                           
 12653                           ;api.c: 110: API[16] = 82;
 12654  001E92  0E00               	movlw	0
 12655  001E94  0101               	movlb	1	; () banked
 12656  001E96  6F21               	movwf	(_API+33)& (0+255),b
 12657  001E98  0E52               	movlw	82
 12658  001E9A  6F20               	movwf	(_API+32)& (0+255),b
 12659                           
 12660                           ;api.c: 111: API[18] = 10000;
 12661  001E9C  0E27               	movlw	39
 12662  001E9E  0101               	movlb	1	; () banked
 12663  001EA0  6F25               	movwf	(_API+37)& (0+255),b
 12664  001EA2  0E10               	movlw	16
 12665  001EA4  6F24               	movwf	(_API+36)& (0+255),b
 12666                           
 12667                           ;api.c: 112: API[19] = 800;
 12668  001EA6  0E03               	movlw	3
 12669  001EA8  0101               	movlb	1	; () banked
 12670  001EAA  6F27               	movwf	(_API+39)& (0+255),b
 12671  001EAC  0E20               	movlw	32
 12672  001EAE  6F26               	movwf	(_API+38)& (0+255),b
 12673                           
 12674                           ;api.c: 113: API[20] = 5000;
 12675  001EB0  0E13               	movlw	19
 12676  001EB2  0101               	movlb	1	; () banked
 12677  001EB4  6F29               	movwf	(_API+41)& (0+255),b
 12678  001EB6  0E88               	movlw	136
 12679  001EB8  6F28               	movwf	(_API+40)& (0+255),b
 12680                           
 12681                           ;api.c: 114: API[21] = 20;
 12682  001EBA  0E00               	movlw	0
 12683  001EBC  0101               	movlb	1	; () banked
 12684  001EBE  6F2B               	movwf	(_API+43)& (0+255),b
 12685  001EC0  0E14               	movlw	20
 12686  001EC2  6F2A               	movwf	(_API+42)& (0+255),b
 12687                           
 12688                           ;api.c: 115: API[22] = 20;
 12689  001EC4  0E00               	movlw	0
 12690  001EC6  0101               	movlb	1	; () banked
 12691  001EC8  6F2D               	movwf	(_API+45)& (0+255),b
 12692  001ECA  0E14               	movlw	20
 12693  001ECC  6F2C               	movwf	(_API+44)& (0+255),b
 12694                           
 12695                           ;api.c: 116: API[23] = 107;
 12696  001ECE  0E00               	movlw	0
 12697  001ED0  0101               	movlb	1	; () banked
 12698  001ED2  6F2F               	movwf	(_API+47)& (0+255),b
 12699  001ED4  0E6B               	movlw	107
 12700  001ED6  6F2E               	movwf	(_API+46)& (0+255),b
 12701                           
 12702                           ;api.c: 117: API[24] = 107;
 12703  001ED8  0E00               	movlw	0
 12704  001EDA  0101               	movlb	1	; () banked
 12705  001EDC  6F31               	movwf	(_API+49)& (0+255),b
 12706  001EDE  0E6B               	movlw	107
 12707  001EE0  6F30               	movwf	(_API+48)& (0+255),b
 12708                           
 12709                           ;api.c: 118: API[25] = 80;
 12710  001EE2  0E00               	movlw	0
 12711  001EE4  0101               	movlb	1	; () banked
 12712  001EE6  6F33               	movwf	(_API+51)& (0+255),b
 12713  001EE8  0E50               	movlw	80
 12714  001EEA  6F32               	movwf	(_API+50)& (0+255),b
 12715                           
 12716                           ;api.c: 119: API[26] = 45;
 12717  001EEC  0E00               	movlw	0
 12718  001EEE  0101               	movlb	1	; () banked
 12719  001EF0  6F35               	movwf	(_API+53)& (0+255),b
 12720  001EF2  0E2D               	movlw	45
 12721  001EF4  6F34               	movwf	(_API+52)& (0+255),b
 12722                           
 12723                           ;api.c: 120: API[27] = 20;
 12724  001EF6  0E00               	movlw	0
 12725  001EF8  0101               	movlb	1	; () banked
 12726  001EFA  6F37               	movwf	(_API+55)& (0+255),b
 12727  001EFC  0E14               	movlw	20
 12728  001EFE  6F36               	movwf	(_API+54)& (0+255),b
 12729                           
 12730                           ;api.c: 121: API[28] = 0;
 12731  001F00  0E00               	movlw	0
 12732  001F02  0101               	movlb	1	; () banked
 12733  001F04  6F39               	movwf	(_API+57)& (0+255),b
 12734  001F06  0E00               	movlw	0
 12735  001F08  6F38               	movwf	(_API+56)& (0+255),b
 12736                           
 12737                           ;api.c: 122: API[29] = 0;
 12738  001F0A  0E00               	movlw	0
 12739  001F0C  0101               	movlb	1	; () banked
 12740  001F0E  6F3B               	movwf	(_API+59)& (0+255),b
 12741  001F10  0E00               	movlw	0
 12742  001F12  6F3A               	movwf	(_API+58)& (0+255),b
 12743                           
 12744                           ;api.c: 123: API[30] = 0;
 12745  001F14  0E00               	movlw	0
 12746  001F16  0101               	movlb	1	; () banked
 12747  001F18  6F3D               	movwf	(_API+61)& (0+255),b
 12748  001F1A  0E00               	movlw	0
 12749  001F1C  6F3C               	movwf	(_API+60)& (0+255),b
 12750                           
 12751                           ;api.c: 124: API[31] = 0;
 12752  001F1E  0E00               	movlw	0
 12753  001F20  0101               	movlb	1	; () banked
 12754  001F22  6F3F               	movwf	(_API+63)& (0+255),b
 12755  001F24  0E00               	movlw	0
 12756  001F26  6F3E               	movwf	(_API+62)& (0+255),b
 12757                           
 12758                           ;api.c: 125: API[32] = 0;
 12759  001F28  0E00               	movlw	0
 12760  001F2A  0101               	movlb	1	; () banked
 12761  001F2C  6F41               	movwf	(_API+65)& (0+255),b
 12762  001F2E  0E00               	movlw	0
 12763  001F30  6F40               	movwf	(_API+64)& (0+255),b
 12764                           
 12765                           ;api.c: 126: API[33] = 0;
 12766  001F32  0E00               	movlw	0
 12767  001F34  0101               	movlb	1	; () banked
 12768  001F36  6F43               	movwf	(_API+67)& (0+255),b
 12769  001F38  0E00               	movlw	0
 12770  001F3A  6F42               	movwf	(_API+66)& (0+255),b
 12771                           
 12772                           ;api.c: 127: API[34] = 0;
 12773  001F3C  0E00               	movlw	0
 12774  001F3E  0101               	movlb	1	; () banked
 12775  001F40  6F45               	movwf	(_API+69)& (0+255),b
 12776  001F42  0E00               	movlw	0
 12777  001F44  6F44               	movwf	(_API+68)& (0+255),b
 12778                           
 12779                           ;api.c: 128: API[35] = 0;
 12780  001F46  0E00               	movlw	0
 12781  001F48  0101               	movlb	1	; () banked
 12782  001F4A  6F47               	movwf	(_API+71)& (0+255),b
 12783  001F4C  0E00               	movlw	0
 12784  001F4E  6F46               	movwf	(_API+70)& (0+255),b
 12785                           
 12786                           ;api.c: 129: API[36] = 0;
 12787  001F50  0E00               	movlw	0
 12788  001F52  0101               	movlb	1	; () banked
 12789  001F54  6F49               	movwf	(_API+73)& (0+255),b
 12790  001F56  0E00               	movlw	0
 12791  001F58  6F48               	movwf	(_API+72)& (0+255),b
 12792                           
 12793                           ;api.c: 130: API[37] = 0;
 12794  001F5A  0E00               	movlw	0
 12795  001F5C  0101               	movlb	1	; () banked
 12796  001F5E  6F4B               	movwf	(_API+75)& (0+255),b
 12797  001F60  0E00               	movlw	0
 12798  001F62  6F4A               	movwf	(_API+74)& (0+255),b
 12799                           
 12800                           ;api.c: 131: API[38] = 0;
 12801  001F64  0E00               	movlw	0
 12802  001F66  0101               	movlb	1	; () banked
 12803  001F68  6F4D               	movwf	(_API+77)& (0+255),b
 12804  001F6A  0E00               	movlw	0
 12805  001F6C  6F4C               	movwf	(_API+76)& (0+255),b
 12806                           
 12807                           ;api.c: 132: API[39] = 0;
 12808  001F6E  0E00               	movlw	0
 12809  001F70  0101               	movlb	1	; () banked
 12810  001F72  6F4F               	movwf	(_API+79)& (0+255),b
 12811  001F74  0E00               	movlw	0
 12812  001F76  6F4E               	movwf	(_API+78)& (0+255),b
 12813                           
 12814                           ;api.c: 133: API[40] = 0;
 12815  001F78  0E00               	movlw	0
 12816  001F7A  0101               	movlb	1	; () banked
 12817  001F7C  6F51               	movwf	(_API+81)& (0+255),b
 12818  001F7E  0E00               	movlw	0
 12819  001F80  6F50               	movwf	(_API+80)& (0+255),b
 12820                           
 12821                           ;api.c: 134: API[41] = 0;
 12822  001F82  0E00               	movlw	0
 12823  001F84  0101               	movlb	1	; () banked
 12824  001F86  6F53               	movwf	(_API+83)& (0+255),b
 12825  001F88  0E00               	movlw	0
 12826  001F8A  6F52               	movwf	(_API+82)& (0+255),b
 12827                           
 12828                           ;api.c: 135: API[42] = 0;
 12829  001F8C  0E00               	movlw	0
 12830  001F8E  0101               	movlb	1	; () banked
 12831  001F90  6F55               	movwf	(_API+85)& (0+255),b
 12832  001F92  0E00               	movlw	0
 12833  001F94  6F54               	movwf	(_API+84)& (0+255),b
 12834                           
 12835                           ;api.c: 136: API[43] = 0;
 12836  001F96  0E00               	movlw	0
 12837  001F98  0101               	movlb	1	; () banked
 12838  001F9A  6F57               	movwf	(_API+87)& (0+255),b
 12839  001F9C  0E00               	movlw	0
 12840  001F9E  6F56               	movwf	(_API+86)& (0+255),b
 12841                           
 12842                           ;api.c: 137: API[44] = 0;
 12843  001FA0  0E00               	movlw	0
 12844  001FA2  0101               	movlb	1	; () banked
 12845  001FA4  6F59               	movwf	(_API+89)& (0+255),b
 12846  001FA6  0E00               	movlw	0
 12847  001FA8  6F58               	movwf	(_API+88)& (0+255),b
 12848                           
 12849                           ;api.c: 138: API[45] = 0;
 12850  001FAA  0E00               	movlw	0
 12851  001FAC  0101               	movlb	1	; () banked
 12852  001FAE  6F5B               	movwf	(_API+91)& (0+255),b
 12853  001FB0  0E00               	movlw	0
 12854  001FB2  6F5A               	movwf	(_API+90)& (0+255),b
 12855                           
 12856                           ;api.c: 139: API[46] = 80;
 12857  001FB4  0E00               	movlw	0
 12858  001FB6  0101               	movlb	1	; () banked
 12859  001FB8  6F5D               	movwf	(_API+93)& (0+255),b
 12860  001FBA  0E50               	movlw	80
 12861  001FBC  6F5C               	movwf	(_API+92)& (0+255),b
 12862                           
 12863                           ;api.c: 140: API[47] = 120;
 12864  001FBE  0E00               	movlw	0
 12865  001FC0  0101               	movlb	1	; () banked
 12866  001FC2  6F5F               	movwf	(_API+95)& (0+255),b
 12867  001FC4  0E78               	movlw	120
 12868  001FC6  6F5E               	movwf	(_API+94)& (0+255),b
 12869                           
 12870                           ;api.c: 141: API[48] = 0;
 12871  001FC8  0E00               	movlw	0
 12872  001FCA  0101               	movlb	1	; () banked
 12873  001FCC  6F61               	movwf	(_API+97)& (0+255),b
 12874  001FCE  0E00               	movlw	0
 12875  001FD0  6F60               	movwf	(_API+96)& (0+255),b
 12876                           
 12877                           ;api.c: 142: API[49] = 80;
 12878  001FD2  0E00               	movlw	0
 12879  001FD4  0101               	movlb	1	; () banked
 12880  001FD6  6F63               	movwf	(_API+99)& (0+255),b
 12881  001FD8  0E50               	movlw	80
 12882  001FDA  6F62               	movwf	(_API+98)& (0+255),b
 12883                           
 12884                           ;api.c: 143: API[50] = 0;
 12885  001FDC  0E00               	movlw	0
 12886  001FDE  0101               	movlb	1	; () banked
 12887  001FE0  6F65               	movwf	(_API+101)& (0+255),b
 12888  001FE2  0E00               	movlw	0
 12889  001FE4  6F64               	movwf	(_API+100)& (0+255),b
 12890                           
 12891                           ;api.c: 144: API[51] = 0;
 12892  001FE6  0E00               	movlw	0
 12893  001FE8  0101               	movlb	1	; () banked
 12894  001FEA  6F67               	movwf	(_API+103)& (0+255),b
 12895  001FEC  0E00               	movlw	0
 12896  001FEE  6F66               	movwf	(_API+102)& (0+255),b
 12897                           
 12898                           ;api.c: 145: API[52] = 120;
 12899  001FF0  0E00               	movlw	0
 12900  001FF2  0101               	movlb	1	; () banked
 12901  001FF4  6F69               	movwf	(_API+105)& (0+255),b
 12902  001FF6  0E78               	movlw	120
 12903  001FF8  6F68               	movwf	(_API+104)& (0+255),b
 12904                           
 12905                           ;api.c: 146: API[53] = 100;
 12906  001FFA  0E00               	movlw	0
 12907  001FFC  0101               	movlb	1	; () banked
 12908  001FFE  6F6B               	movwf	(_API+107)& (0+255),b
 12909  002000  0E64               	movlw	100
 12910  002002  6F6A               	movwf	(_API+106)& (0+255),b
 12911                           
 12912                           ;api.c: 147: API[54] = 100;
 12913  002004  0E00               	movlw	0
 12914  002006  0101               	movlb	1	; () banked
 12915  002008  6F6D               	movwf	(_API+109)& (0+255),b
 12916  00200A  0E64               	movlw	100
 12917  00200C  6F6C               	movwf	(_API+108)& (0+255),b
 12918                           
 12919                           ;api.c: 148: API[55] = 100;
 12920  00200E  0E00               	movlw	0
 12921  002010  0101               	movlb	1	; () banked
 12922  002012  6F6F               	movwf	(_API+111)& (0+255),b
 12923  002014  0E64               	movlw	100
 12924  002016  6F6E               	movwf	(_API+110)& (0+255),b
 12925                           
 12926                           ;api.c: 149: API[56] = 100;
 12927  002018  0E00               	movlw	0
 12928  00201A  0101               	movlb	1	; () banked
 12929  00201C  6F71               	movwf	(_API+113)& (0+255),b
 12930  00201E  0E64               	movlw	100
 12931  002020  6F70               	movwf	(_API+112)& (0+255),b
 12932                           
 12933                           ;api.c: 150: API[57] = 100;
 12934  002022  0E00               	movlw	0
 12935  002024  0101               	movlb	1	; () banked
 12936  002026  6F73               	movwf	(_API+115)& (0+255),b
 12937  002028  0E64               	movlw	100
 12938  00202A  6F72               	movwf	(_API+114)& (0+255),b
 12939                           
 12940                           ;api.c: 151: API[58] = 100;
 12941  00202C  0E00               	movlw	0
 12942  00202E  0101               	movlb	1	; () banked
 12943  002030  6F75               	movwf	(_API+117)& (0+255),b
 12944  002032  0E64               	movlw	100
 12945  002034  6F74               	movwf	(_API+116)& (0+255),b
 12946                           
 12947                           ;api.c: 152: API[59] = 100;
 12948  002036  0E00               	movlw	0
 12949  002038  0101               	movlb	1	; () banked
 12950  00203A  6F77               	movwf	(_API+119)& (0+255),b
 12951  00203C  0E64               	movlw	100
 12952  00203E  6F76               	movwf	(_API+118)& (0+255),b
 12953                           
 12954                           ;api.c: 153: API[60] = 100;
 12955  002040  0E00               	movlw	0
 12956  002042  0101               	movlb	1	; () banked
 12957  002044  6F79               	movwf	(_API+121)& (0+255),b
 12958  002046  0E64               	movlw	100
 12959  002048  6F78               	movwf	(_API+120)& (0+255),b
 12960                           
 12961                           ;api.c: 154: API[61] = 0;
 12962  00204A  0E00               	movlw	0
 12963  00204C  0101               	movlb	1	; () banked
 12964  00204E  6F7B               	movwf	(_API+123)& (0+255),b
 12965  002050  0E00               	movlw	0
 12966  002052  6F7A               	movwf	(_API+122)& (0+255),b
 12967                           
 12968                           ;api.c: 155: API[62] = 0;
 12969  002054  0E00               	movlw	0
 12970  002056  0101               	movlb	1	; () banked
 12971  002058  6F7D               	movwf	(_API+125)& (0+255),b
 12972  00205A  0E00               	movlw	0
 12973  00205C  6F7C               	movwf	(_API+124)& (0+255),b
 12974                           
 12975                           ;api.c: 156: API[63] = 1;
 12976  00205E  0E00               	movlw	0
 12977  002060  0101               	movlb	1	; () banked
 12978  002062  6F7F               	movwf	(_API+127)& (0+255),b
 12979  002064  0E01               	movlw	1
 12980  002066  6F7E               	movwf	(_API+126)& (0+255),b
 12981                           
 12982                           ;api.c: 157: API[64] = 0;
 12983  002068  0E00               	movlw	0
 12984  00206A  0101               	movlb	1	; () banked
 12985  00206C  6F81               	movwf	(_API+129)& (0+255),b
 12986  00206E  0E00               	movlw	0
 12987  002070  6F80               	movwf	(_API+128)& (0+255),b
 12988                           
 12989                           ;api.c: 158: API[65] = 0;
 12990  002072  0E00               	movlw	0
 12991  002074  0101               	movlb	1	; () banked
 12992  002076  6F83               	movwf	(_API+131)& (0+255),b
 12993  002078  0E00               	movlw	0
 12994  00207A  6F82               	movwf	(_API+130)& (0+255),b
 12995                           
 12996                           ;api.c: 159: API[66] = 0;
 12997  00207C  0E00               	movlw	0
 12998  00207E  0101               	movlb	1	; () banked
 12999  002080  6F85               	movwf	(_API+133)& (0+255),b
 13000  002082  0E00               	movlw	0
 13001  002084  6F84               	movwf	(_API+132)& (0+255),b
 13002                           
 13003                           ;api.c: 160: API[67] = 0;
 13004  002086  0E00               	movlw	0
 13005  002088  0101               	movlb	1	; () banked
 13006  00208A  6F87               	movwf	(_API+135)& (0+255),b
 13007  00208C  0E00               	movlw	0
 13008  00208E  6F86               	movwf	(_API+134)& (0+255),b
 13009                           
 13010                           ;api.c: 161: API[68] = 511;
 13011  002090  0E01               	movlw	1
 13012  002092  0101               	movlb	1	; () banked
 13013  002094  6F89               	movwf	(_API+137)& (0+255),b
 13014  002096  6988               	setf	(_API+136)& (0+255),b
 13015                           
 13016                           ;api.c: 162: API[69] = 1;
 13017  002098  0E00               	movlw	0
 13018  00209A  0101               	movlb	1	; () banked
 13019  00209C  6F8B               	movwf	(_API+139)& (0+255),b
 13020  00209E  0E01               	movlw	1
 13021  0020A0  6F8A               	movwf	(_API+138)& (0+255),b
 13022                           
 13023                           ;api.c: 163: API[70] = 0;
 13024  0020A2  0E00               	movlw	0
 13025  0020A4  0101               	movlb	1	; () banked
 13026  0020A6  6F8D               	movwf	(_API+141)& (0+255),b
 13027  0020A8  0E00               	movlw	0
 13028  0020AA  6F8C               	movwf	(_API+140)& (0+255),b
 13029                           
 13030                           ;api.c: 164: API[71] = 0;
 13031  0020AC  0E00               	movlw	0
 13032  0020AE  0101               	movlb	1	; () banked
 13033  0020B0  6F8F               	movwf	(_API+143)& (0+255),b
 13034  0020B2  0E00               	movlw	0
 13035  0020B4  6F8E               	movwf	(_API+142)& (0+255),b
 13036                           
 13037                           ;api.c: 165: API[72] = 0;
 13038  0020B6  0E00               	movlw	0
 13039  0020B8  0101               	movlb	1	; () banked
 13040  0020BA  6F91               	movwf	(_API+145)& (0+255),b
 13041  0020BC  0E00               	movlw	0
 13042  0020BE  6F90               	movwf	(_API+144)& (0+255),b
 13043                           
 13044                           ;api.c: 166: API[73] = 0;
 13045  0020C0  0E00               	movlw	0
 13046  0020C2  0101               	movlb	1	; () banked
 13047  0020C4  6F93               	movwf	(_API+147)& (0+255),b
 13048  0020C6  0E00               	movlw	0
 13049  0020C8  6F92               	movwf	(_API+146)& (0+255),b
 13050                           
 13051                           ;api.c: 167: API[74] = 0;
 13052  0020CA  0E00               	movlw	0
 13053  0020CC  0101               	movlb	1	; () banked
 13054  0020CE  6F95               	movwf	(_API+149)& (0+255),b
 13055  0020D0  0E00               	movlw	0
 13056  0020D2  6F94               	movwf	(_API+148)& (0+255),b
 13057                           
 13058                           ;api.c: 168: API[75] = 0;
 13059  0020D4  0E00               	movlw	0
 13060  0020D6  0101               	movlb	1	; () banked
 13061  0020D8  6F97               	movwf	(_API+151)& (0+255),b
 13062  0020DA  0E00               	movlw	0
 13063  0020DC  6F96               	movwf	(_API+150)& (0+255),b
 13064                           
 13065                           ;api.c: 169: API[76] = 0;
 13066  0020DE  0E00               	movlw	0
 13067  0020E0  0101               	movlb	1	; () banked
 13068  0020E2  6F99               	movwf	(_API+153)& (0+255),b
 13069  0020E4  0E00               	movlw	0
 13070  0020E6  6F98               	movwf	(_API+152)& (0+255),b
 13071                           
 13072                           ;api.c: 170: API[77] = 0;
 13073  0020E8  0E00               	movlw	0
 13074  0020EA  0101               	movlb	1	; () banked
 13075  0020EC  6F9B               	movwf	(_API+155)& (0+255),b
 13076  0020EE  0E00               	movlw	0
 13077  0020F0  6F9A               	movwf	(_API+154)& (0+255),b
 13078                           
 13079                           ;api.c: 171: API[78] = 0;
 13080  0020F2  0E00               	movlw	0
 13081  0020F4  0101               	movlb	1	; () banked
 13082  0020F6  6F9D               	movwf	(_API+157)& (0+255),b
 13083  0020F8  0E00               	movlw	0
 13084  0020FA  6F9C               	movwf	(_API+156)& (0+255),b
 13085                           
 13086                           ;api.c: 172: API[79] = 511;
 13087  0020FC  0E01               	movlw	1
 13088  0020FE  0101               	movlb	1	; () banked
 13089  002100  6F9F               	movwf	(_API+159)& (0+255),b
 13090  002102  699E               	setf	(_API+158)& (0+255),b
 13091                           
 13092                           ;api.c: 173: API[80] = 0;
 13093  002104  0E00               	movlw	0
 13094  002106  0101               	movlb	1	; () banked
 13095  002108  6FA1               	movwf	(_API+161)& (0+255),b
 13096  00210A  0E00               	movlw	0
 13097  00210C  6FA0               	movwf	(_API+160)& (0+255),b
 13098                           
 13099                           ;api.c: 174: API[81] = 0;
 13100  00210E  0E00               	movlw	0
 13101  002110  0101               	movlb	1	; () banked
 13102  002112  6FA3               	movwf	(_API+163)& (0+255),b
 13103  002114  0E00               	movlw	0
 13104  002116  6FA2               	movwf	(_API+162)& (0+255),b
 13105                           
 13106                           ; BSR set to: 1
 13107  002118  0012               	return		;funcret
 13108  00211A                     __end_of_APIxInitialize:
 13109                           	opt stack 0
 13110                           tblptru	equ	0xFF8
 13111                           tblptrh	equ	0xFF7
 13112                           tblptrl	equ	0xFF6
 13113                           tablat	equ	0xFF5
 13114                           prodh	equ	0xFF4
 13115                           prodl	equ	0xFF3
 13116                           intcon	equ	0xFF2
 13117                           intcon2	equ	0xFF1
 13118                           postinc0	equ	0xFEE
 13119                           wreg	equ	0xFE8
 13120                           postdec1	equ	0xFE5
 13121                           fsr1l	equ	0xFE1
 13122                           indf2	equ	0xFDF
 13123                           postinc2	equ	0xFDE
 13124                           postdec2	equ	0xFDD
 13125                           fsr2h	equ	0xFDA
 13126                           fsr2l	equ	0xFD9
 13127                           status	equ	0xFD8
 13128                           
 13129 ;; *************** function _tc_low *****************
 13130 ;; Defined at:
 13131 ;;		line 146 in file "../Main.c"
 13132 ;; Parameters:    Size  Location     Type
 13133 ;;		None
 13134 ;; Auto vars:     Size  Location     Type
 13135 ;;		None
 13136 ;; Return value:  Size  Location     Type
 13137 ;;                  1    wreg      void 
 13138 ;; Registers used:
 13139 ;;		None
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/0
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13145 ;;      Params:         0       0       0       0       0       0       0       0       0
 13146 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13147 ;;      Temps:         17       0       0       0       0       0       0       0       0
 13148 ;;      Totals:        17       0       0       0       0       0       0       0       0
 13149 ;;Total ram usage:       17 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; Hardware stack levels required when called:    2
 13152 ;; This function calls:
 13153 ;;		Nothing
 13154 ;; This function is called by:
 13155 ;;		Interrupt level 1
 13156 ;; This function uses a non-reentrant model
 13157 ;;
 13158                           
 13159                           	psect	intcodelo
 13160  000018                     __pintcodelo:
 13161                           	opt stack 0
 13162  000018                     _tc_low:
 13163                           	opt stack 20
 13164                           
 13165                           ; BSR set to: 1
 13166                           ;incstack = 0
 13167  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13168  00001A  CFD8 F00F          	movff	status,??_tc_low
 13169  00001E  CFE8 F010          	movff	wreg,??_tc_low+1
 13170  000022  CFE0 F011          	movff	bsr,??_tc_low+2
 13171  000026  CFFA F012          	movff	pclath,??_tc_low+3
 13172  00002A  CFFB F013          	movff	pclatu,??_tc_low+4
 13173  00002E  CFE9 F014          	movff	fsr0l,??_tc_low+5
 13174  000032  CFEA F015          	movff	fsr0h,??_tc_low+6
 13175  000036  CFE1 F016          	movff	fsr1l,??_tc_low+7
 13176  00003A  CFE2 F017          	movff	fsr1h,??_tc_low+8
 13177  00003E  CFD9 F018          	movff	fsr2l,??_tc_low+9
 13178  000042  CFDA F019          	movff	fsr2h,??_tc_low+10
 13179  000046  CFF3 F01A          	movff	prodl,??_tc_low+11
 13180  00004A  CFF4 F01B          	movff	prodh,??_tc_low+12
 13181  00004E  CFF6 F01C          	movff	tblptrl,??_tc_low+13
 13182  000052  CFF7 F01D          	movff	tblptrh,??_tc_low+14
 13183  000056  CFF8 F01E          	movff	tblptru,??_tc_low+15
 13184  00005A  CFF5 F01F          	movff	tablat,??_tc_low+16
 13185  00005E  C01F  FFF5         	movff	??_tc_low+16,tablat
 13186  000062  C01E  FFF8         	movff	??_tc_low+15,tblptru
 13187  000066  C01D  FFF7         	movff	??_tc_low+14,tblptrh
 13188  00006A  C01C  FFF6         	movff	??_tc_low+13,tblptrl
 13189  00006E  C01B  FFF4         	movff	??_tc_low+12,prodh
 13190  000072  C01A  FFF3         	movff	??_tc_low+11,prodl
 13191  000076  C019  FFDA         	movff	??_tc_low+10,fsr2h
 13192  00007A  C018  FFD9         	movff	??_tc_low+9,fsr2l
 13193  00007E  C017  FFE2         	movff	??_tc_low+8,fsr1h
 13194  000082  C016  FFE1         	movff	??_tc_low+7,fsr1l
 13195  000086  C015  FFEA         	movff	??_tc_low+6,fsr0h
 13196  00008A  C014  FFE9         	movff	??_tc_low+5,fsr0l
 13197  00008E  C013  FFFB         	movff	??_tc_low+4,pclatu
 13198  000092  C012  FFFA         	movff	??_tc_low+3,pclath
 13199  000096  C011  FFE0         	movff	??_tc_low+2,bsr
 13200  00009A  C010  FFE8         	movff	??_tc_low+1,wreg
 13201  00009E  C00F  FFD8         	movff	??_tc_low,status
 13202  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13203  0000A4  0010               	retfie	
 13204  0000A6                     __end_of_tc_low:
 13205                           	opt stack 0
 13206                           pclatu	equ	0xFFB
 13207                           pclath	equ	0xFFA
 13208                           tblptru	equ	0xFF8
 13209                           tblptrh	equ	0xFF7
 13210                           tblptrl	equ	0xFF6
 13211                           tablat	equ	0xFF5
 13212                           prodh	equ	0xFF4
 13213                           prodl	equ	0xFF3
 13214                           intcon	equ	0xFF2
 13215                           intcon2	equ	0xFF1
 13216                           postinc0	equ	0xFEE
 13217                           fsr0h	equ	0xFEA
 13218                           fsr0l	equ	0xFE9
 13219                           wreg	equ	0xFE8
 13220                           postdec1	equ	0xFE5
 13221                           fsr1h	equ	0xFE2
 13222                           fsr1l	equ	0xFE1
 13223                           bsr	equ	0xFE0
 13224                           indf2	equ	0xFDF
 13225                           postinc2	equ	0xFDE
 13226                           postdec2	equ	0xFDD
 13227                           fsr2h	equ	0xFDA
 13228                           fsr2l	equ	0xFD9
 13229                           status	equ	0xFD8
 13230                           
 13231 ;; *************** function _tc_high *****************
 13232 ;; Defined at:
 13233 ;;		line 150 in file "../Main.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;		None
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;		None
 13238 ;; Return value:  Size  Location     Type
 13239 ;;                  1    wreg      void 
 13240 ;; Registers used:
 13241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13247 ;;      Params:         0       0       0       0       0       0       0       0       0
 13248 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13249 ;;      Temps:         14       0       0       0       0       0       0       0       0
 13250 ;;      Totals:        14       0       0       0       0       0       0       0       0
 13251 ;;Total ram usage:       14 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; Hardware stack levels required when called:    1
 13254 ;; This function calls:
 13255 ;;		_EUSART1_Receive_ISR
 13256 ;;		_EUSART1_Transmit_ISR
 13257 ;; This function is called by:
 13258 ;;		Interrupt level 2
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           	psect	intcode
 13263  000008                     __pintcode:
 13264                           	opt stack 0
 13265  000008                     _tc_high:
 13266                           	opt stack 20
 13267                           
 13268                           ;incstack = 0
 13269  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13270  00000A  CFFA F001          	movff	pclath,??_tc_high
 13271  00000E  CFFB F002          	movff	pclatu,??_tc_high+1
 13272  000012  EDE4  F01A         	call	int_func,f	;refresh shadow registers
 13273                           pclatu	equ	0xFFB
 13274                           pclath	equ	0xFFA
 13275                           tblptru	equ	0xFF8
 13276                           tblptrh	equ	0xFF7
 13277                           tblptrl	equ	0xFF6
 13278                           tablat	equ	0xFF5
 13279                           prodh	equ	0xFF4
 13280                           prodl	equ	0xFF3
 13281                           intcon	equ	0xFF2
 13282                           intcon2	equ	0xFF1
 13283                           postinc0	equ	0xFEE
 13284                           fsr0h	equ	0xFEA
 13285                           fsr0l	equ	0xFE9
 13286                           wreg	equ	0xFE8
 13287                           postdec1	equ	0xFE5
 13288                           fsr1h	equ	0xFE2
 13289                           fsr1l	equ	0xFE1
 13290                           bsr	equ	0xFE0
 13291                           indf2	equ	0xFDF
 13292                           postinc2	equ	0xFDE
 13293                           postdec2	equ	0xFDD
 13294                           fsr2h	equ	0xFDA
 13295                           fsr2l	equ	0xFD9
 13296                           status	equ	0xFD8
 13297                           
 13298                           	psect	intcode_body
 13299  0035C8                     __pintcode_body:
 13300                           	opt stack 20
 13301  0035C8                     int_func:
 13302                           	opt stack 20
 13303  0035C8  0006               	pop		; remove dummy address from shadow register refresh
 13304  0035CA  CFE9 F003          	movff	fsr0l,??_tc_high+2
 13305  0035CE  CFEA F004          	movff	fsr0h,??_tc_high+3
 13306  0035D2  CFE1 F005          	movff	fsr1l,??_tc_high+4
 13307  0035D6  CFE2 F006          	movff	fsr1h,??_tc_high+5
 13308  0035DA  CFD9 F007          	movff	fsr2l,??_tc_high+6
 13309  0035DE  CFDA F008          	movff	fsr2h,??_tc_high+7
 13310  0035E2  CFF3 F009          	movff	prodl,??_tc_high+8
 13311  0035E6  CFF4 F00A          	movff	prodh,??_tc_high+9
 13312  0035EA  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 13313  0035EE  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 13314  0035F2  CFF8 F00D          	movff	tblptru,??_tc_high+12
 13315  0035F6  CFF5 F00E          	movff	tablat,??_tc_high+13
 13316                           
 13317                           ;Main.c: 152: if (INTCONbits.TMR0IF)
 13318  0035FA  A4F2               	btfss	intcon,2,c	;volatile
 13319  0035FC  D01F               	goto	i2l6517
 13320                           
 13321                           ;Main.c: 153: {
 13322                           ;Main.c: 154: if(Led1_Counter <= 100)
 13323  0035FE  0100               	movlb	0	; () banked
 13324  003600  516F               	movf	(_Led1_Counter+1)& (0+255),w,b
 13325  003602  E107               	bnz	i2l92
 13326  003604  0E65               	movlw	101
 13327  003606  0100               	movlb	0	; () banked
 13328  003608  5D6E               	subwf	_Led1_Counter& (0+255),w,b
 13329  00360A  B0D8               	btfsc	status,0,c
 13330  00360C  D002               	goto	i2l92
 13331                           
 13332                           ; BSR set to: 0
 13333                           ;Main.c: 155: {
 13334                           ;Main.c: 156: PORTAbits.RA4 = 1;
 13335  00360E  8880               	bsf	3968,4,c	;volatile
 13336                           
 13337                           ;Main.c: 157: }
 13338  003610  D001               	goto	i2l6507
 13339  003612                     i2l92:
 13340                           
 13341                           ; BSR set to: 0
 13342                           ;Main.c: 158: else
 13343                           ;Main.c: 159: {
 13344                           ;Main.c: 160: PORTAbits.RA4 = 0;
 13345  003612  9880               	bcf	3968,4,c	;volatile
 13346  003614                     i2l6507:
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;Main.c: 161: }
 13350                           ;Main.c: 162: if(Led1_Counter >= 700)
 13351  003614  0EBC               	movlw	188
 13352  003616  0100               	movlb	0	; () banked
 13353  003618  5D6E               	subwf	_Led1_Counter& (0+255),w,b
 13354  00361A  0E02               	movlw	2
 13355  00361C  0100               	movlb	0	; () banked
 13356  00361E  596F               	subwfb	(_Led1_Counter+1)& (0+255),w,b
 13357  003620  A0D8               	btfss	status,0,c
 13358  003622  D005               	goto	i2l6511
 13359                           
 13360                           ; BSR set to: 0
 13361                           ;Main.c: 163: {
 13362                           ;Main.c: 164: Led1_Counter = 0;
 13363  003624  0E00               	movlw	0
 13364  003626  0100               	movlb	0	; () banked
 13365  003628  6F6F               	movwf	(_Led1_Counter+1)& (0+255),b
 13366  00362A  0E00               	movlw	0
 13367  00362C  6F6E               	movwf	_Led1_Counter& (0+255),b
 13368  00362E                     i2l6511:
 13369                           
 13370                           ; BSR set to: 0
 13371                           ;Main.c: 165: }
 13372                           ;Main.c: 166: Led1_Counter++;
 13373  00362E  0100               	movlb	0	; () banked
 13374  003630  4B6E               	infsnz	_Led1_Counter& (0+255),f,b
 13375  003632  2B6F               	incf	(_Led1_Counter+1)& (0+255),f,b
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;Main.c: 167: Update_State_Machine = 1;
 13379  003634  0E01               	movlw	1
 13380  003636  0100               	movlb	0	; () banked
 13381  003638  6F84               	movwf	_Update_State_Machine& (0+255),b
 13382                           
 13383                           ; BSR set to: 0
 13384                           ;Main.c: 168: INTCONbits.TMR0IF = 0;
 13385  00363A  94F2               	bcf	intcon,2,c	;volatile
 13386  00363C                     i2l6517:
 13387                           
 13388                           ;Main.c: 169: }
 13389                           ;Main.c: 171: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 13390  00363C  BA9D               	btfsc	3997,5,c	;volatile
 13391  00363E  AA9E               	btfss	3998,5,c	;volatile
 13392  003640  D002               	goto	i2l6523
 13393                           
 13394                           ;Main.c: 172: EUSART1_Receive_ISR();
 13395  003642  ECD1  F01D         	call	_EUSART1_Receive_ISR	;wreg free
 13396  003646                     i2l6523:
 13397                           
 13398                           ;Main.c: 173: }
 13399                           ;Main.c: 174: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 13400  003646  B89D               	btfsc	3997,4,c	;volatile
 13401  003648  A89E               	btfss	3998,4,c	;volatile
 13402  00364A  D002               	goto	i2l97
 13403                           
 13404                           ;Main.c: 175: EUSART1_Transmit_ISR();
 13405  00364C  ECBA  F01D         	call	_EUSART1_Transmit_ISR	;wreg free
 13406  003650                     i2l97:
 13407  003650  C00E  FFF5         	movff	??_tc_high+13,tablat
 13408  003654  C00D  FFF8         	movff	??_tc_high+12,tblptru
 13409  003658  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 13410  00365C  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 13411  003660  C00A  FFF4         	movff	??_tc_high+9,prodh
 13412  003664  C009  FFF3         	movff	??_tc_high+8,prodl
 13413  003668  C008  FFDA         	movff	??_tc_high+7,fsr2h
 13414  00366C  C007  FFD9         	movff	??_tc_high+6,fsr2l
 13415  003670  C006  FFE2         	movff	??_tc_high+5,fsr1h
 13416  003674  C005  FFE1         	movff	??_tc_high+4,fsr1l
 13417  003678  C004  FFEA         	movff	??_tc_high+3,fsr0h
 13418  00367C  C003  FFE9         	movff	??_tc_high+2,fsr0l
 13419  003680  C002  FFFB         	movff	??_tc_high+1,pclatu
 13420  003684  C001  FFFA         	movff	??_tc_high,pclath
 13421  003688  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13422  00368A  0011               	retfie		f
 13423  00368C                     __end_of_tc_high:
 13424                           	opt stack 0
 13425                           pclatu	equ	0xFFB
 13426                           pclath	equ	0xFFA
 13427                           tblptru	equ	0xFF8
 13428                           tblptrh	equ	0xFF7
 13429                           tblptrl	equ	0xFF6
 13430                           tablat	equ	0xFF5
 13431                           prodh	equ	0xFF4
 13432                           prodl	equ	0xFF3
 13433                           intcon	equ	0xFF2
 13434                           intcon2	equ	0xFF1
 13435                           postinc0	equ	0xFEE
 13436                           fsr0h	equ	0xFEA
 13437                           fsr0l	equ	0xFE9
 13438                           wreg	equ	0xFE8
 13439                           postdec1	equ	0xFE5
 13440                           fsr1h	equ	0xFE2
 13441                           fsr1l	equ	0xFE1
 13442                           bsr	equ	0xFE0
 13443                           indf2	equ	0xFDF
 13444                           postinc2	equ	0xFDE
 13445                           postdec2	equ	0xFDD
 13446                           fsr2h	equ	0xFDA
 13447                           fsr2l	equ	0xFD9
 13448                           status	equ	0xFD8
 13449                           
 13450 ;; *************** function _EUSART1_Transmit_ISR *****************
 13451 ;; Defined at:
 13452 ;;		line 183 in file "../eusart1.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;		None
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;		None
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      void 
 13459 ;; Registers used:
 13460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13466 ;;      Params:         0       0       0       0       0       0       0       0       0
 13467 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13468 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13469 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13470 ;;Total ram usage:        0 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; This function calls:
 13473 ;;		Nothing
 13474 ;; This function is called by:
 13475 ;;		_tc_high
 13476 ;; This function uses a non-reentrant model
 13477 ;;
 13478                           
 13479                           	psect	text39
 13480  003B74                     __ptext39:
 13481                           	opt stack 0
 13482  003B74                     _EUSART1_Transmit_ISR:
 13483                           	opt stack 20
 13484                           
 13485                           ;eusart1.c: 186: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 13486                           
 13487                           ;incstack = 0
 13488  003B74  0E7E               	movlw	126
 13489  003B76  603D               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 13490  003B78  D012               	goto	i2l522
 13491                           
 13492                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 13493  003B7A  503F               	movf	_eusart1TxTail,w,c
 13494  003B7C  0D01               	mullw	1
 13495  003B7E  0E7E               	movlw	low _eusart1TxBuffer
 13496  003B80  24F3               	addwf	prodl,w,c
 13497  003B82  6ED9               	movwf	fsr2l,c
 13498  003B84  0E03               	movlw	high _eusart1TxBuffer
 13499  003B86  20F4               	addwfc	prodh,w,c
 13500  003B88  6EDA               	movwf	fsr2h,c
 13501  003B8A  50DF               	movf	indf2,w,c
 13502  003B8C  6EAD               	movwf	4013,c	;volatile
 13503  003B8E  2A3F               	incf	_eusart1TxTail,f,c
 13504                           
 13505                           ;eusart1.c: 188: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 13506  003B90  0E7D               	movlw	125
 13507  003B92  643F               	cpfsgt	_eusart1TxTail,c
 13508  003B94  D002               	goto	i2l6421
 13509                           
 13510                           ;eusart1.c: 189: eusart1TxTail = 0;
 13511  003B96  0E00               	movlw	0
 13512  003B98  6E3F               	movwf	_eusart1TxTail,c
 13513  003B9A                     i2l6421:
 13514                           
 13515                           ;eusart1.c: 190: }
 13516                           ;eusart1.c: 191: eusart1TxBufferRemaining++;
 13517  003B9A  2A3D               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 13518                           
 13519                           ;eusart1.c: 192: } else {
 13520  003B9C  0012               	return	
 13521  003B9E                     i2l522:
 13522                           
 13523                           ;eusart1.c: 193: PIE1bits.TX1IE = 0;
 13524  003B9E  989D               	bcf	3997,4,c	;volatile
 13525  003BA0  0012               	return	
 13526  003BA2                     __end_of_EUSART1_Transmit_ISR:
 13527                           	opt stack 0
 13528                           pclatu	equ	0xFFB
 13529                           pclath	equ	0xFFA
 13530                           tblptru	equ	0xFF8
 13531                           tblptrh	equ	0xFF7
 13532                           tblptrl	equ	0xFF6
 13533                           tablat	equ	0xFF5
 13534                           prodh	equ	0xFF4
 13535                           prodl	equ	0xFF3
 13536                           intcon	equ	0xFF2
 13537                           intcon2	equ	0xFF1
 13538                           postinc0	equ	0xFEE
 13539                           fsr0h	equ	0xFEA
 13540                           fsr0l	equ	0xFE9
 13541                           wreg	equ	0xFE8
 13542                           postdec1	equ	0xFE5
 13543                           fsr1h	equ	0xFE2
 13544                           fsr1l	equ	0xFE1
 13545                           bsr	equ	0xFE0
 13546                           indf2	equ	0xFDF
 13547                           postinc2	equ	0xFDE
 13548                           postdec2	equ	0xFDD
 13549                           fsr2h	equ	0xFDA
 13550                           fsr2l	equ	0xFD9
 13551                           status	equ	0xFD8
 13552                           
 13553 ;; *************** function _EUSART1_Receive_ISR *****************
 13554 ;; Defined at:
 13555 ;;		line 197 in file "../eusart1.c"
 13556 ;; Parameters:    Size  Location     Type
 13557 ;;		None
 13558 ;; Auto vars:     Size  Location     Type
 13559 ;;		None
 13560 ;; Return value:  Size  Location     Type
 13561 ;;                  1    wreg      void 
 13562 ;; Registers used:
 13563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13564 ;; Tracked objects:
 13565 ;;		On entry : 0/0
 13566 ;;		On exit  : 0/0
 13567 ;;		Unchanged: 0/0
 13568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13569 ;;      Params:         0       0       0       0       0       0       0       0       0
 13570 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13571 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13572 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13573 ;;Total ram usage:        0 bytes
 13574 ;; Hardware stack levels used:    1
 13575 ;; This function calls:
 13576 ;;		Nothing
 13577 ;; This function is called by:
 13578 ;;		_tc_high
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           	psect	text40
 13583  003BA2                     __ptext40:
 13584                           	opt stack 0
 13585  003BA2                     _EUSART1_Receive_ISR:
 13586                           	opt stack 20
 13587                           
 13588                           ;eusart1.c: 198: if (1 == RCSTA1bits.OERR) {
 13589                           
 13590                           ;incstack = 0
 13591  003BA2  A2AB               	btfss	4011,1,c	;volatile
 13592  003BA4  D002               	goto	i2l6401
 13593                           
 13594                           ;eusart1.c: 201: RCSTA1bits.CREN = 0;
 13595  003BA6  98AB               	bcf	4011,4,c	;volatile
 13596                           
 13597                           ;eusart1.c: 202: RCSTA1bits.CREN = 1;
 13598  003BA8  88AB               	bsf	4011,4,c	;volatile
 13599  003BAA                     i2l6401:
 13600                           
 13601                           ;eusart1.c: 203: }
 13602                           ;eusart1.c: 206: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 13603  003BAA  503B               	movf	_eusart1RxHead,w,c
 13604  003BAC  0D01               	mullw	1
 13605  003BAE  0E00               	movlw	low _eusart1RxBuffer
 13606  003BB0  24F3               	addwf	prodl,w,c
 13607  003BB2  6ED9               	movwf	fsr2l,c
 13608  003BB4  0E03               	movlw	high _eusart1RxBuffer
 13609  003BB6  20F4               	addwfc	prodh,w,c
 13610  003BB8  6EDA               	movwf	fsr2h,c
 13611  003BBA  CFAE FFDF          	movff	4014,indf2	;volatile
 13612  003BBE  2A3B               	incf	_eusart1RxHead,f,c
 13613                           
 13614                           ;eusart1.c: 207: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 13615  003BC0  0E7D               	movlw	125
 13616  003BC2  643B               	cpfsgt	_eusart1RxHead,c
 13617  003BC4  D002               	goto	i2l6409
 13618                           
 13619                           ;eusart1.c: 208: eusart1RxHead = 0;
 13620  003BC6  0E00               	movlw	0
 13621  003BC8  6E3B               	movwf	_eusart1RxHead,c
 13622  003BCA                     i2l6409:
 13623                           
 13624                           ;eusart1.c: 209: }
 13625                           ;eusart1.c: 210: eusart1RxCount++;
 13626  003BCA  2A3A               	incf	_eusart1RxCount,f,c	;volatile
 13627  003BCC  0012               	return		;funcret
 13628  003BCE                     __end_of_EUSART1_Receive_ISR:
 13629                           	opt stack 0
 13630                           pclatu	equ	0xFFB
 13631                           pclath	equ	0xFFA
 13632                           tblptru	equ	0xFF8
 13633                           tblptrh	equ	0xFF7
 13634                           tblptrl	equ	0xFF6
 13635                           tablat	equ	0xFF5
 13636                           prodh	equ	0xFF4
 13637                           prodl	equ	0xFF3
 13638                           intcon	equ	0xFF2
 13639                           intcon2	equ	0xFF1
 13640                           postinc0	equ	0xFEE
 13641                           fsr0h	equ	0xFEA
 13642                           fsr0l	equ	0xFE9
 13643                           wreg	equ	0xFE8
 13644                           postdec1	equ	0xFE5
 13645                           fsr1h	equ	0xFE2
 13646                           fsr1l	equ	0xFE1
 13647                           bsr	equ	0xFE0
 13648                           indf2	equ	0xFDF
 13649                           postinc2	equ	0xFDE
 13650                           postdec2	equ	0xFDD
 13651                           fsr2h	equ	0xFDA
 13652                           fsr2l	equ	0xFD9
 13653                           status	equ	0xFD8
 13654                           pclatu	equ	0xFFB
 13655                           pclath	equ	0xFFA
 13656                           tblptru	equ	0xFF8
 13657                           tblptrh	equ	0xFF7
 13658                           tblptrl	equ	0xFF6
 13659                           tablat	equ	0xFF5
 13660                           prodh	equ	0xFF4
 13661                           prodl	equ	0xFF3
 13662                           intcon	equ	0xFF2
 13663                           intcon2	equ	0xFF1
 13664                           postinc0	equ	0xFEE
 13665                           fsr0h	equ	0xFEA
 13666                           fsr0l	equ	0xFE9
 13667                           wreg	equ	0xFE8
 13668                           postdec1	equ	0xFE5
 13669                           fsr1h	equ	0xFE2
 13670                           fsr1l	equ	0xFE1
 13671                           bsr	equ	0xFE0
 13672                           indf2	equ	0xFDF
 13673                           postinc2	equ	0xFDE
 13674                           postdec2	equ	0xFDD
 13675                           fsr2h	equ	0xFDA
 13676                           fsr2l	equ	0xFD9
 13677                           status	equ	0xFD8
 13678                           
 13679                           	psect	rparam
 13680  0000                     pclatu	equ	0xFFB
 13681                           pclath	equ	0xFFA
 13682                           tblptru	equ	0xFF8
 13683                           tblptrh	equ	0xFF7
 13684                           tblptrl	equ	0xFF6
 13685                           tablat	equ	0xFF5
 13686                           prodh	equ	0xFF4
 13687                           prodl	equ	0xFF3
 13688                           intcon	equ	0xFF2
 13689                           intcon2	equ	0xFF1
 13690                           postinc0	equ	0xFEE
 13691                           fsr0h	equ	0xFEA
 13692                           fsr0l	equ	0xFE9
 13693                           wreg	equ	0xFE8
 13694                           postdec1	equ	0xFE5
 13695                           fsr1h	equ	0xFE2
 13696                           fsr1l	equ	0xFE1
 13697                           bsr	equ	0xFE0
 13698                           indf2	equ	0xFDF
 13699                           postinc2	equ	0xFDE
 13700                           postdec2	equ	0xFDD
 13701                           fsr2h	equ	0xFDA
 13702                           fsr2l	equ	0xFD9
 13703                           status	equ	0xFD8
 13704                           
 13705                           	psect	temp
 13706  000040                     btemp:
 13707                           	opt stack 0
 13708  000040                     	ds	1
 13709  0000                     int$flags	set	btemp
 13710                           pclatu	equ	0xFFB
 13711                           pclath	equ	0xFFA
 13712                           tblptru	equ	0xFF8
 13713                           tblptrh	equ	0xFF7
 13714                           tblptrl	equ	0xFF6
 13715                           tablat	equ	0xFF5
 13716                           prodh	equ	0xFF4
 13717                           prodl	equ	0xFF3
 13718                           intcon	equ	0xFF2
 13719                           intcon2	equ	0xFF1
 13720                           postinc0	equ	0xFEE
 13721                           fsr0h	equ	0xFEA
 13722                           fsr0l	equ	0xFE9
 13723                           wreg	equ	0xFE8
 13724                           postdec1	equ	0xFE5
 13725                           fsr1h	equ	0xFE2
 13726                           fsr1l	equ	0xFE1
 13727                           bsr	equ	0xFE0
 13728                           indf2	equ	0xFDF
 13729                           postinc2	equ	0xFDE
 13730                           postdec2	equ	0xFDD
 13731                           fsr2h	equ	0xFDA
 13732                           fsr2l	equ	0xFD9
 13733                           status	equ	0xFD8


Data Sizes:
    Strings     57
    Constant    11
    Data        11
    BSS         658
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160     45     103
    BANK1           256      0     164
    BANK2           256      0     164
    BANK3           256      0     252
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_8(CODE[12]), STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_GETxAPIxVAL
    _Update_StateMchn->_Green_Led
    _Update_StateMchn->_Red_Led
    _Train_Path->_GETxAPIxVAL
    _Train_Move_Right_Start->_GETxAPIxVAL
    _Train_Move_Right_Brake->_GETxAPIxVAL
    _Train_Move_Left_Start->_GETxAPIxVAL
    _Train_Move_Left_Brake->_GETxAPIxVAL
    _Right_Mountain_From_The_Right->_GETxAPIxVAL
    _Right_Mountain_From_The_Left->_GETxAPIxVAL
    _Left_Mountain_From_The_Right->_GETxAPIxVAL
    _Left_Mountain_From_The_Left->_GETxAPIxVAL
    _SETxPWM->_GETxAPIxVAL
    _Junction->_GETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_GETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_EUSART1_Read
    _TranslateMessage->_GETxAPIxRW
    _TranslateMessage->_GETxAPIxVAL
    _atoi->_isdigit
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _printf->___lwmod
    _printf->_putch

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Update_StateMchn
    _Update_StateMchn->_Train_Path
    _Train_Path->_Left_Mountain_From_The_Left
    _Train_Path->_Left_Mountain_From_The_Right
    _Train_Path->_Right_Mountain_From_The_Left
    _Train_Path->_Right_Mountain_From_The_Right
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_SENDxMESSAGE
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _SENDxMESSAGE->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  185888
                     _APIxInitialize
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     2     2      0  169107
                                             43 BANK0      2     2      0
                    _Debounce_Inputs
                       _Eeprom_Store
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  142194
                                             41 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               0     0      0   19550
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               0     0      0   19550
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                0     0      0   19550
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                0     0      0   19550
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   11244
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   11244
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   11244
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   11244
                                             40 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   11120
                                             33 BANK0      7     4      3
                        _GETxAPIxVAL (ARG)
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1    9447
                                             33 BANK0      2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Store                                         0     0      0      31
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0    8606
                                             33 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     176
                                              2 BANK0      6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0    8187
                                             32 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0    6172
                                             28 BANK0      4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1050
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   5     3      2     355
                                              2 BANK0      5     3      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (4) _GETxAPIxVAL                                          3     1      2      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           3     1      2      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0    8399
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          5     3      2    8399
                                             28 BANK0      5     3      2
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         3     1      2    2361
                                             25 BANK0      3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (7) _printf                                              23    17      6    1991
                                             11 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     386
                                             31 COMRAM     1     1      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _tc_low                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_high                                            14    14      0       0
                                              0 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _Eeprom_Store
       _GETxAPIxVAL
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _SETxAPIxVAL
         _SENDxMESSAGE
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _SENDxMESSAGE
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      FC      11       98.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      A4       9       64.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A4       7       64.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      67       5       64.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2EA      20        0.0%
DATA                 0      0     2EA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Nov 22 22:52:42 2017

                  _eusart1TxBufferRemaining 003D                                          bsr 000FE0  
                       ___wmul@multiplicand 0091                                 __CFG_BORV$3 000000  
                               ?_GETxAPIxRW 008F                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l320 130A  
                                       l340 13FC                                         l166 086A  
                                       l351 214E                                         l516 3C92  
                                       l740 37E4                                         l670 356A  
                                       l735 37B4                                         l751 3734  
                                       l664 3518                                         l744 3810  
                                       l760 3790                                         l673 3598  
                                       l737 37B8                                         l753 3738  
                                       l667 3546                                         l676 35BC  
                                       l756 3764                                         _API 0100  
                              __CFG_CPB$OFF 000000                                _Stop_Program 007D  
                                       _PR2 000FCB                                __CFG_CPD$OFF 000000  
                              __CFG_BOR$OFF 000000                                         prod 000FF3  
                                       wreg 000FE8                      ?_READxRECEIVEDxMESSAGE 0001  
          Train_Move_Right_Start@Return_Val 00C4                                ?_GETxAPIxVAL 008F  
                           APIxInitialize@i 008F                                __CFG_LVP$OFF 000000  
       __end_of_Left_Mountain_From_The_Left 32D4                 _Left_Mountain_From_The_Left 31A2  
                              __CFG_WDT$OFF 000000       __end_of_Right_Mountain_From_The_Right 306E  
    __size_of_Right_Mountain_From_The_Right 0134               _Right_Mountain_From_The_Right 2F3A  
                                      l1366 34EC                                        l1616 389E  
                                      l1626 39D8                                        l5411 3794  
                                      l7011 2BBA                                        l7003 2B8E  
                                      l5405 3780                                        l7013 2BCC  
                                      l7005 2B96                                        l7101 2DE0  
                                      l7031 2C48                                        l7015 2BDE  
                                      l7007 2BA8                                        l7023 2C02  
                                      l7103 2DFC                                        l7025 2C12  
                                      l7113 2E22                                        l7201 2B24  
                                      l8001 235E                                        l5363 37BC  
                                      l7035 2C5C                                        l7027 2C1A  
                                      l7019 2BF0                                        l7043 2CAA  
                                      l8011 239C                                        l8003 2370  
                                      l5373 37E8                                        l7045 2CC0  
                                      l7221 28FC                                        l7133 2E9E  
                                      l7117 2E2C                                        l7109 2E04  
                                      l7205 2B52                                        l7213 2B66  
                                      l8013 23A0                                        l8005 2374  
                                      l7311 3274                                        l7135 2EA4  
                                      l7119 2E34                                        l7207 2B58  
                                      l7215 2B82                                        l7055 2CC8  
                                      l8031 23F0                                        l8015 23B2  
                                      l8007 2386                                        l8023 23CC  
                                      l5369 37D4                                        l5385 3814  
                                      l7321 32B0                                        l7305 323E  
                                      l7401 2F64                                        l7241 2994  
                                      l7129 2E72                                        l7161 2F34  
                                      l7209 2B5E                                        l7065 2CF4  
                                      l8025 23EA                                        l8017 23B6  
                                      l8009 238A                                        l5379 3800  
                                      l5395 3754                                        l7315 3284  
                                      l7323 32B6                                        l7403 2F76  
                                      l7235 2960                                        l7155 2F10  
                                      l7139 2EA8                                        l7091 2DA8  
                                      l7083 2D6A                                        l7075 2D32  
                                      l7059 2CE6                                        l8043 23FC  
                                      l8051 2410                                        l8205 1C08  
                                      l5389 373C                                        l7501 33E0  
                                      l7341 3098                                        l7237 2968  
                                      l7229 2932                                        l7149 2EE4  
                                      l7173 2A76                                        l7085 2D72  
                                      l8061 243E                                        l8053 242E  
                                      l8037 23F6                                        l8301 0AEE  
                                      l5399 3768                                        l7319 32A4  
                                      l7327 32BE                                        l7503 33E6  
                                      l7343 30AA                                        l7335 3074  
                                      l7431 300E                                        l7407 2F7E  
                                      l7263 2A1A                                        l7255 29E0  
                                      l7247 29A8                                        l7159 2F18  
                                      l7183 2AAC                                        l7167 2A46  
                                      l7079 2D5E                                        l8303 0AF2  
                                      l8161 2548                                        l7329 32CE  
                                      l7281 31CC                                        l7441 304A  
                                      l7425 2FD8                                        l7193 2AEC  
                                      l7097 2DD2                                        l8081 2466  
                                      l8073 2456                                        l8065 2446  
                                      l8057 2436                                        l8401 0DA4  
                                      l8313 0B26                                        l8233 0872  
                                      l7531 3464                                        l7515 3406  
                                      l7611 160E                                        l7283 31DE  
                                      l7275 31A8                                        l7507 33EE  
                                      l7371 3140                                        l7347 30B2  
                                      l7435 301E                                        l7443 3050  
                                      l7259 2A0E                                        l7267 2A22  
                                      l7187 2AD8                                        l7179 2AA4  
                                      l8091 24D2                                        l8411 0DDE  
                                      l8403 0DAC                                        l8331 0BA8  
                                      l8251 0920                                        l6901 39CC  
                                      l7533 34AE                                        l7517 340C  
                                      l8173 25AC                                        l8165 256A  
                                      l7605 15E4                                        l7509 33FE  
                                      l7461 32FC                                        l7381 317E  
                                      l7365 310A                                        l7269 2A3E  
                                      l8085 2476                                        l8077 245E  
                                      l8069 244E                                        l8501 0F92  
                                      l8421 0E28                                        l8413 0DE2  
                                      l8309 0B16                                        l8261 0990  
                                      l8245 08E6                                        l6911 27C8  
                                      l5687 3B44                                        l7535 34B4  
                                      l7527 3452                                        l8175 25BE  
                                      l7711 187A                                        l7631 167A  
                                      l7551 14CA                                        l7287 31E6  
                                      l7463 330E                                        l7455 32DA  
                                      l7375 3150                                        l7383 3184  
                                      l7439 303E                                        l7447 3058  
                                      l8511 0FC0                                        l8431 0E50  
                                      l8407 0DC6                                        l8343 0BF0  
                                      l8327 0B98                                        l8239 08AC  
                                      l5697 3B6C                                        l8185 260A  
                                      l8169 258C                                        l7705 183C  
                                      l7625 1650                                        l7617 1618  
                                      l7609 15F6                                        l7449 3068  
                                      l8089 247E                                        l8521 0FFC  
                                      l8433 0E54                                        l8425 0E36  
                                      l8417 0E06                                        l8361 0C5C  
                                      l8337 0BCC                                        l8273 0A34  
                                      l8265 09C6                                        l8257 095A  
                                      l8195 1BB4                                        l6907 27B4  
                                      l7811 1AD2                                        l7731 18FA  
                                      l7651 16FA                                        l7619 162A  
                                      l7571 1536                                        l7491 33A2  
                                      l7467 3316                                        l7379 3172  
                                      l7387 318C                                        l7395 2F40  
                                      l8603 11DA                                        l8523 1000  
                                      l8451 0EBC                                        l8435 0E58  
                                      l8443 0E74                                        l8371 0CA4  
                                      l8355 0C38                                        l8291 0AA8  
                                      l6941 2864                                        l6917 27F8  
                                      l8189 262C                                        l7805 1AA8  
                                      l7725 18BC                                        l7717 18A0  
                                      l7709 184E                                        l7645 16BC  
                                      l7637 16A0                                        l7629 1662  
                                      l7565 150C                                        l7557 14D4  
                                      l7485 336E                                        l7389 319C  
                                      l7901 21A6                                        l8613 11F8  
                                      l8525 100A                                        l8533 101C  
                                      l8517 0FCE                                        l8541 1058  
                                      l8453 0EC0                                        l8437 0E66  
                                      l8429 0E4C                                        l8445 0EA2  
                                      l8373 0CA8                                        l8349 0C14  
                                      l8285 0A84                                        l8269 0A24  
                                      l6951 28D0                                        l6927 2828  
                                      l7831 1B3E                                        l7751 197A  
                                      l7719 18B2                                        l7671 177A  
                                      l7639 16B2                                        l7591 15A2  
                                      l7559 14E6                                        l7495 33B2  
                                      l8623 1216                                        l8551 10C0  
                                      l8543 1086                                        l8535 104A  
                                      l8527 100E                                        l8455 0EC4  
                                      l8463 0EE0                                        l8367 0C80  
                                      l8279 0A60                                        l6873 384E  
                                      l6945 2878                                        l6929 282E  
                                      l6953 28DC                                        l7825 1B14  
                                      l7817 1AF8                                        l7809 1ABA  
                                      l7745 193C                                        l7737 1920  
                                      l7729 18CE                                        l7665 173C  
                                      l7657 1720                                        l7649 16CE  
                                      l7585 1578                                        l7577 1540  
                                      l7569 151E                                        l7921 2210  
                                      l7913 21DC                                        l7905 21C0  
                                      l8721 1398                                        l8633 1234  
                                      l8561 10EA                                        l8545 108A  
                                      l8473 0F38                                        l8457 0ED2  
                                      l8449 0EB8                                        l8465 0F0E  
                                      l8377 0CB2                                        l8297 0ACC  
                                      l6875 385A                                        l6947 287E  
                                      l8811 2718                                        l8803 26FA  
                                      l7819 1B0A                                        l7771 19FA  
                                      l7739 1932                                        l7691 17FA  
                                      l7659 1732                                        l7579 1552  
                                      l7499 33D4                                        l8731 13EE  
                                      l8723 13B4                                        l8643 1252  
                                      l8555 10CE                                        l8491 0F80  
                                      l8475 0F3C                                        l6885 3890  
                                      l6877 3860                                        l6893 3998  
                                      l7845 1B80                                        l7837 1B64  
                                      l7829 1B26                                        l7765 19BC  
                                      l7757 19A0                                        l7749 194E  
                                      l7685 17BC                                        l7677 17A0  
                                      l7669 174E                                        l7597 15AC  
                                      l7589 158A                                        l7941 224E  
                                      l7933 2222                                        l7925 2216  
                                      l7909 21CE                                        l8709 137A  
                                      l8653 1270                                        l8565 10EE  
                                      l8557 10E2                                        l8573 1106  
                                      l8549 10AE                                        l8477 0F40  
                                      l8485 0F52                                        l8397 0D74  
                                      l8581 1142                                        l6895 39A2  
                                      l8823 276C                                        l8807 2706  
                                      l8815 273A                                        l8831 278C  
                                      l7839 1B76                                        l7791 1A66  
                                      l7759 19B2                                        l7679 17B2  
                                      l7599 15BE                                        l6975 36E8  
                                      l7919 21F2                                        l8727 13D8  
                                      l8671 12E6                                        l8583 1190  
                                      l8575 1134                                        l8567 10F8  
                                      l8559 10E6                                        l8495 0F84  
                                      l8479 0F44                                        l6897 39A8  
                                      l7849 1B92                                        l7785 1A3C  
                                      l7777 1A20                                        l7769 19CE  
                                      l7697 1820                                        l7689 17CE  
                                      l7961 22B8                                        l7953 228C  
                                      l7929 221C                                        l7881 213C  
                                      l8593 11BC                                        l8665 128E  
                                      l8737 1404                                        l7779 1A32  
                                      l7699 1832                                        l7939 2230  
                                      l8675 12FC                                        l8667 12C2  
                                      l8739 141C                                        l8915 3916  
                                      l6997 3BEE                                        l8829 2774  
                                      l7797 1A8C                                        l7789 1A4E  
                                      l7981 230E                                        l7957 22A2  
                                      l7949 2276                                        l7893 2172  
                                      l7885 2156                                        l8685 132E  
                                      l8589 11AC                                        l8909 3904  
                                      l8791 26D6                                        l7799 1A9E  
                                      l7895 2184                                        l8679 1312  
                                      l8793 26DA                                        l8785 26C0  
                                      l8777 265E                                        l7889 2164  
                                      l8689 133E                                        l7899 2188  
                                      l8699 135C                                        l8799 26F2  
                                      STR_1 0818                                        STR_2 0821  
                                      STR_3 082A                                        STR_4 0833  
                                      STR_5 083C                                        STR_6 082A  
                                      STR_7 0833                                        STR_8 080C  
            Right_Mountain_From_The_Left@rc 00B7                                        u7010 166A  
                                      u7200 18D6                                        u7120 17D6  
                                      u7040 16D6                                        u7016 166C  
                                      u7210 18D8                                        u7130 17D8  
                                      u7050 16D8                                        u6260 3A0A  
                                      u6340 3AEE                                        u7320 1A56  
                                      u7240 1956                                        u7160 1856  
                                      u7080 1756                                        u8120 09F0  
                                      u7410 1B9A                                        u7250 1958  
                                      u7170 1858                                        u7090 1758  
                                      u7350 1AC2                                        u7326 1A58  
                                      u7416 1B9C                                        u7280 19D6  
                                      u7290 19D8                                        u8410 0D9E  
                                      i2l92 3612                                        u7380 1B2E  
                                      u7356 1AC4                                        u6920 1526  
                                      i2l97 3650                                        u7386 1B30  
                                      u6950 1592                                        u6926 1528  
                                      u7940 257A                                        u6980 15FE  
                                      u6956 1594                                        u6895 3A8C  
                                      u6986 1600                                        u7980 261A  
                              __CFG_WDTPS$1 000000                                        _TXIF 007CF4  
                                      _Data 0085                                __CFG_PWRT$ON 000000  
                    __end_of_APIxInitialize 211A              __size_of_Train_Move_Left_Brake 014A  
             __end_of_Train_Move_Left_Brake 2A44                                        _pLen 0078  
                                      _atoi 3404                                        _main 38A8  
                             ?_EUSART1_Read 0001              __size_of_Train_Move_Left_Start 0138  
                           __end_of_SETxPWM 3730                                        fsr0h 000FEA  
                                      fsr1h 000FE2                                        fsr0l 000FE9  
                                      fsr2h 000FDA                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                                      btemp 0040               __end_of_Train_Move_Left_Start 2F3A  
                                      pclat 000FFA                                        prodh 000FF4  
                                      prodl 000FF3                                        start 00A6  
                           __end_of_DataLen 080C                               __CFG_IESO$OFF 000000  
               EUSART1_Initialize@baud_rate 008F                          Green_Led@Operation 0020  
                             __CFG_MCLRE$ON 000000                                ___param_bank 000010  
                             ??_Init_Timers 0020                             __end_of_Red_Led 37B0  
                             __CFG_PLLDIV$5 000000                              __CFG_CCP2MX$ON 000000  
                                     ?_atoi 0095                                       ?_main 0001  
                                     _EEADR 000FA9                                       _CMCON 000FB4  
                          Red_Led@Operation 0020                                       _T0CON 000FD5  
                __end_of_SETxAPIxVALxNoxRET 3B0A                                       _T2CON 000FCA  
                           __end_of___lwdiv 38A8                                SETxPWM@speed 00B0  
                           __end_of___lwmod 39E2                                       i2l522 3B9E  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 3B74  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                                     _pData 0076                              __CFG_EBTRB$OFF 000000  
                           __end_of_dpowers 080B                             __end_of_isdigit 3BF6  
                           __end_of_tc_high 368C                                       atoi@a 009A  
                                     atoi@s 0095                                       _putch 3C90  
                                     tablat 000FF5                             ?_APIxInitialize 0001  
                            ??_EUSART1_Read 0020                                       status 000FD8  
 Train_Move_Left_Brake@Train_Move_Wait_Time 0062                   __size_of_TranslateMessage 0176  
                       __size_of_GETxAPIxRW 001C                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 35C8                             __initialization 391C  
                              __end_of_atoi 34F6                  __end_of_EUSART1_Initialize 3A82  
                              __end_of_main 391C                            __end_of_Init_Pwm 3C40  
                                    ??_atoi 0097                                      ??_main 0021  
                       __end_of_Init_Timers 3C90                               __activetblptr 000002  
                          __end_of_Junction 2CC6                                _Led1_Counter 006E  
                         _Green_Led_Counter 0021                       ?_EUSART1_Transmit_ISR 0001  
                         ?_Update_StateMchn 0001                          ??_Update_StateMchn 00BA  
                                    _ADCON1 000FC1                                      _EEDATA 000FA8  
                                    _CCPR1L 000FBE                                   ??_SETxPWM 00B3  
                                    _EECON2 000FA7                                      ?_putch 0001  
                                    _API_RW 0200                          __size_of_Green_Led 0080  
                                    i2l6401 3BAA                                      i2l6421 3B9A  
                                    i2l6511 362E                                      _INTCON 000FF2  
                                    i2l6409 3BCA                                      i2l6523 3646  
                                    i2l6507 3614                                      i2l6517 363C  
                   ?_Train_Move_Right_Brake 0001                                      _RCREG1 000FAE  
                                    _SPBRGH 000FB0                          __size_of_SetDCPWM1 0044  
                   ?_Train_Move_Right_Start 0001                                      _TXREG1 000FAD  
            ?_Right_Mountain_From_The_Right 0001                                   ??_Red_Led 0020  
                            __CFG_XINST$OFF 000000             Train_Move_Left_Brake@Return_Val 00C1  
                                    ___wmul 3B0A                              __CFG_STVREN$ON 000000  
                                 ??___lwdiv 0020                                   ??___lwmod 0020  
                                    clear_0 3922                                      clear_1 392E  
                                    clear_2 393A                                      clear_3 3946  
                                    clear_4 3952                                      _tc_low 0018  
                                    _printf 27A6                              _Switch_Moutain 0080  
                                _Train_Path 211A     Right_Mountain_From_The_Right@Return_Val 00C0  
    Left_Mountain_From_The_Right@Return_Val 00BE                              _Switch_Program 0081  
                                 ??_isdigit 0020                                   ??_tc_high 0001  
                 _Activate_Controls_Counter 006A                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 00AB  
                 _Button_Contact_Counter_LB 0025                   _Button_Contact_Counter_LF 0026  
                 _Button_Contact_Counter_RB 0028                   _Button_Contact_Counter_RF 0029  
            __end_of_Train_Move_Right_Brake 2B88                             _eusart1RxBuffer 0300  
                      __size_of_GETxAPIxVAL 001C                             _eusart1TxBuffer 037E  
            __end_of_Train_Move_Right_Start 2E02                        _Train_Move_Pwm_Count 0072  
                                __accesstop 0060                     __end_of__initialization 3978  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                             _Received_Data 007B                              __pcstackCOMRAM 0001  
                              __pidataBANK0 3C9C                                 _Init_Timers 3C78  
                             __end_of_putch 3C9C                           __end_of_Green_Led 3830  
                              ??_GETxAPIxRW 0020                     ??_READxRECEIVEDxMESSAGE 00AF  
                      __end_of_EUSART1_Read 3B74                           __end_of_SetDCPWM1 3AC6  
                           _Red_Led_Counter 0023                      ??_EUSART1_Transmit_ISR 0001  
Train_Move_Right_Start@Train_Move_Wait_Time 0068                    __size_of_Debounce_Inputs 0770  
               __end_of_EUSART1_Receive_ISR 3BCE            Train_Move_Right_Brake@Return_Val 00C3  
                             ?_SENDxMESSAGE 00A8                                     ??_putch 0020  
                             _eusart1RxHead 003B                               _eusart1TxHead 003E  
                     __size_of_Eeprom_Store 00D2                 Junction@Junction_Left_Right 00B1  
                             _eusart1RxTail 003C                                  __pbssBANK0 0060  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                                __pbssBANK3 0300                               _eusart1TxTail 003F  
                                 ?_Init_Pwm 0001                            _TranslateMessage 24D8  
                        __end_of_GETxAPIxRW 3C78                            GETxAPIxVAL@index 0020  
                          SETxAPIxVAL@index 00AF                                   ?_Junction 00B0  
                          SETxAPIxVAL@value 00AB        __size_of_Left_Mountain_From_The_Left 0132  
                                   ?___wmul 008F                                     _CCP1CON 000FBD  
                                   ?_tc_low 0001                                     ?_printf 009A  
                               ?_Train_Path 00B8                                _Eeprom_Store 34F6  
                                   _INTCON2 000FF1   Train_Move_Left_Start@Train_Move_Wait_Time 0064  
                            ??_SENDxMESSAGE 0021                            ??_APIxInitialize 0020  
                                   _SETxPWM 368C                            SETxPWM@direction 00B2  
                                   _DataLen 080B                          _SETxAPIxVALxNoxRET 3AC6  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 0021  
                                   _Red_Led 3730                       _Train_Move_Left_Brake 28FA  
                                ??_Junction 0021                                     __Hparam 0000  
                       ?_SETxAPIxVALxNoxRET 0091                       _Train_Move_Left_Start 2E02  
                                   __Lparam 0000                        _Message_To_Translate 007A  
                           __size_of___wmul 0036                                     ___lwdiv 3830  
                                   ___lwmod 3986                                __psmallconst 0800  
                                   __pcinit 391C                                     __ramtop 0800  
                           __size_of_tc_low 008E                                     __ptext0 38A8  
                                   __ptext1 0846                                     __ptext2 211A  
                                   __ptext3 2CC6                                     __ptext4 2A44  
                                   __ptext5 2E02                                     __ptext6 28FA  
                                   __ptext7 2F3A                                     __ptext8 306E  
                                   __ptext9 32D4                        Train_Path@Return_Val 00C5  
                           __size_of_printf 0154                                     _dpowers 0801  
                                   _isdigit 3BCE                                     _tc_high 0008  
                      ??_SETxAPIxVALxNoxRET 0093                          _EUSART1_Initialize 3A36  
                 _Train_Move_Pwm_Fast_Count 0074                              __pintcode_body 35C8  
                      end_of_initialization 3978                             _Switch_Junction 007F  
                         ??_Debounce_Inputs 00B0                         ?_EUSART1_Initialize 0001  
                      __size_of_SETxAPIxVAL 0054                               __Lmediumconst 0000  
                                   int_func 35C8                            SETxPWM@pwm_speed 00B5  
                 __size_of_Update_StateMchn 0BF4                         __size_of_Train_Path 03BE  
                                 _RCSTAbits 000FAB                                     printf@c 00A7  
                                   printf@f 009A                                     postdec1 000FE5  
                                   postdec2 000FDD                                     postinc0 000FEE  
                                   postinc2 000FDE                       __size_of_EUSART1_Read 0034  
            Left_Mountain_From_The_Right@rc 00B7                        ??_EUSART1_Initialize 0020  
                                 _PORTAbits 000F80                                   _PORTBbits 000F81  
                                 _PORTCbits 000F82                                   _PORTDbits 000F83  
                                 _PORTEbits 000F84                                   _TRISAbits 000F92  
                                 _TRISBbits 000F93                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                                   _TRISEbits 000F96  
              Junction@Junction_Switch_Time 0060                      ?_Train_Move_Left_Brake 0001  
                              _EUSART1_Read 3B40                                   _TXSTAbits 000FAC  
                    ?_Train_Move_Left_Start 0001                                 _Switch_Main 00C6  
                               _Switch_Init 007E                        __end_of_SENDxMESSAGE 3C1C  
                              ?_Init_Timers 0001                          Junction@Return_Val 00BC  
                            __end_of___wmul 3B40                                 _BAUDCONbits 000FB8  
                      _Update_State_Machine 0084                              __end_of_tc_low 00A6  
                  __end_of_TranslateMessage 264E                 _Button_Contact_Counter_Stop 002B  
                            __end_of_printf 28FA              __size_of_READxRECEIVEDxMESSAGE 0158  
                                 _Green_Led 37B0               __end_of_READxRECEIVEDxMESSAGE 27A6  
                       start_initialization 391C                               ??_GETxAPIxVAL 0020  
                                 _SetDCPWM1 3A82                             SetDCPWM1@DCycle 0095  
                    _Mountain_Delay_Counter 0070                ?_Left_Mountain_From_The_Left 0001  
                         __size_of_Init_Pwm 0024                           __size_of_Junction 013E  
                                  ??___wmul 0020                                 __pdataBANK0 00BC  
                          __CFG_LPT1OSC$OFF 000000                                    ??_tc_low 000F  
                                  ??_printf 00A0                              _eusart1RxCount 003A  
                              ??_Train_Path 0021                                  ?_Green_Led 0001  
                               __pbssCOMRAM 0021               __size_of_EUSART1_Transmit_ISR 002E  
                             __pcstackBANK0 008F                                  ?_SetDCPWM1 0091  
Train_Move_Right_Brake@Train_Move_Wait_Time 0066                                _isdigit$1868 008F  
                                  ?_SETxPWM 00B0                __size_of_EUSART1_Receive_ISR 002C  
                       __end_of_GETxAPIxVAL 3C5C               ??_Left_Mountain_From_The_Left 0021  
                                  ?_Red_Led 0001                            _Update_StateMchn 0846  
                          ___lwdiv@dividend 008F      Right_Mountain_From_The_Left@Return_Val 00BF  
     Left_Mountain_From_The_Left@Return_Val 00BD                          __end_of_Train_Path 24D8  
                                 __pintcode 0008                                    ?___lwdiv 008F  
      __end_of_Left_Mountain_From_The_Right 3404       __size_of_Left_Mountain_From_The_Right 0130  
              _Left_Mountain_From_The_Right 32D4                                    ?___lwmod 0096  
                               __pintcodelo 0018                             GETxAPIxRW@index 0020  
                           _Debounce_Inputs 143A                                 __smallconst 0800  
                  ??_Train_Move_Right_Brake 0021                                    ?_isdigit 0001  
                                  ?_tc_high 0001             Right_Mountain_From_The_Right@rc 00B7  
                  ??_Train_Move_Right_Start 0021                       TranslateMessage@Index 00AD  
                     Junction@Straight_Bend 00B0                       TranslateMessage@Value 00AB  
              _Button_Contact_Counter_Start 002A                    _Reed_Contact_LMD_Counter 002E  
                          ___lwdiv@quotient 0094                              __size_of_putch 000C  
                            ___wmul@product 0093                       __size_of_SENDxMESSAGE 0026  
      __end_of_Right_Mountain_From_The_Left 31A2       __size_of_Right_Mountain_From_The_Left 0134  
              _Right_Mountain_From_The_Left 306E                                    _PIE1bits 000F9D  
                            _Adjust_Counter 006C               Left_Mountain_From_The_Left@rc 00B7  
                                  _PIR1bits 000F9E                                    _PIR2bits 000FA1  
                                  _RCONbits 000FD0                              Train_Path@From 00B9  
                      __size_of_Init_Timers 0018               ?_Left_Mountain_From_The_Right 0001  
                         ___wmul@multiplier 008F                           SENDxMESSAGE@index 00AA  
                         SENDxMESSAGE@value 00A8                                 ??_Green_Led 0020  
                                printf@flag 00A3                                  printf@prec 00A4  
               __size_of_SETxAPIxVALxNoxRET 0044                                 ??_SetDCPWM1 0093  
                               _GETxAPIxVAL 3C40                               ??_SETxAPIxVAL 00AD  
                              _SENDxMESSAGE 3BF6                                   copy_data0 396C  
                   ??_Train_Move_Left_Brake 0021                    _Reed_Contact_LMU_Counter 002F  
                          __size_of_SETxPWM 00A4                     ??_Train_Move_Left_Start 0021  
                        SetDCPWM1@dutycycle 0091                                    _Init_Pwm 3C1C  
                     EUSART1_Read@readValue 0020                                  _EECON1bits 000FA6  
                   __size_of_APIxInitialize 0570                                    __Hrparam 0000  
                                  _Junction 2B88                            __size_of_Red_Led 0080  
             ?_Right_Mountain_From_The_Left 0001                                    __Lrparam 0000  
                                  _TrSwitch 0039                                    _RxSwitch 007C  
                  _Reed_Contact_RMD_Counter 0032                     __end_of_Debounce_Inputs 1BAA  
               __size_of_EUSART1_Initialize 004C                            __size_of___lwdiv 0078  
                          __size_of___lwmod 005C                           _Switch_Train_Path 0083  
                         _Switch_Train_Move 0082                            _Switch_Adjust_LB 0035  
                          _Switch_Adjust_LF 0036                            _Switch_Adjust_RB 0037  
                          _Switch_Adjust_RF 0038                           ?_TranslateMessage 0001  
           __size_of_Train_Move_Right_Brake 0144                            __size_of_isdigit 0028  
                          __size_of_tc_high 3684                          ??_TranslateMessage 0021  
                           ___lwdiv@divisor 0091             __size_of_Train_Move_Right_Start 013C  
                           ___lwdiv@counter 0093                                    __ptext10 31A2  
                                  __ptext11 368C                                    __ptext20 3404  
                                  __ptext12 2B88                                    __ptext21 3BCE  
                                  __ptext13 3730                                    __ptext30 3BF6  
                                  __ptext22 3B0A                                    __ptext14 37B0  
                                  __ptext31 27A6                                    __ptext23 3AC6  
                                  __ptext15 34F6                                    __ptext40 3BA2  
                                  __ptext32 3C90                                    __ptext24 3C40  
                                  __ptext16 143A                                    __ptext33 3986  
                                  __ptext25 3C5C                                    __ptext17 3A82  
                                  __ptext34 3830                                    __ptext26 3B40  
                                  __ptext18 264E                                    __ptext35 3A36  
                                  __ptext27 3C78                                    __ptext19 24D8  
                                  __ptext36 1BAA                                    __ptext28 3C1C  
                                  __ptext29 39E2                                    __ptext39 3B74  
                             __size_of_atoi 00F2                               __size_of_main 0074  
                       __end_of_SETxAPIxVAL 3A36                     _Reed_Contact_LB_Counter 002C  
                                  int$flags 0040                     _Reed_Contact_LF_Counter 002D  
                                  atoi@sign 0099                    _Reed_Contact_RMU_Counter 0033  
                                 printf@val 00A5                         _EUSART1_Receive_ISR 3BA2  
                                _GETxAPIxRW 3C5C                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0020                               ?_Eeprom_Store 0001  
                  __end_of_Update_StateMchn 143A                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0021              ??_Left_Mountain_From_The_Right 0021  
                     _READxRECEIVEDxMESSAGE 264E                                    isdigit@c 0090  
                   _Reed_Contact_RB_Counter 0030                                    intlevel1 0000  
                                  intlevel2 0000                        ?_EUSART1_Receive_ISR 0001  
                          ___lwmod@dividend 0096                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 0031                      _Train_Move_Right_Brake 2A44  
              __end_of_EUSART1_Transmit_ISR 3BA2                      _Train_Move_Right_Start 2CC6  
           Train_Move_Left_Start@Return_Val 00C2                                Train_Path@To 00B8  
                                  printf@ap 00A1                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0034              ??_Right_Mountain_From_The_Left 0021  
                            ??_Eeprom_Store 0021                             ___lwmod@divisor 0098  
                           ___lwmod@counter 0020                     SETxAPIxVALxNoxRET@index 0095  
                               _SETxAPIxVAL 39E2                     SETxAPIxVALxNoxRET@value 0091  
                        __CFG_FOSC$HSPLL_HS 000000                       ??_EUSART1_Receive_ISR 0001  
                            _APIxInitialize 1BAA               _Button_Contact_Counter_Middle 0027  
