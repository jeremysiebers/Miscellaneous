

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Nov 27 20:39:40 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.44
    71                           ; Generated 14/09/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4550 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  0042EA                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for Right_Mountain_From_The_Left@Return_Val
   110  0042EA  01                 	db	1
   111                           
   112                           ;initializer for Left_Mountain_From_The_Left@Return_Val
   113  0042EB  01                 	db	1
   114                           
   115                           ;initializer for Left_Mountain_From_The_Right@Return_Val
   116  0042EC  01                 	db	1
   117                           
   118                           ;initializer for Right_Mountain_From_The_Right@Return_Val
   119  0042ED  01                 	db	1
   120                           
   121                           ;initializer for Junction@Return_Val
   122  0042EE  01                 	db	1
   123                           
   124                           	psect	idataBANK0
   125  0042E4                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for Train_Move_Right_Brake@Return_Val
   129  0042E4  01                 	db	1
   130                           
   131                           ;initializer for Train_Move_Right_Start@Return_Val
   132  0042E5  01                 	db	1
   133                           
   134                           ;initializer for Train_Move_Left_Brake@Return_Val
   135  0042E6  01                 	db	1
   136                           
   137                           ;initializer for Train_Move_Left_Start@Return_Val
   138  0042E7  01                 	db	1
   139                           
   140                           ;initializer for Train_Path@Return_Val
   141  0042E8  01                 	db	1
   142                           
   143                           ;initializer for _Switch_Main
   144  0042E9  01                 	db	1
   145                           
   146                           	psect	smallconst
   147  000800                     __psmallconst:
   148                           	opt stack 0
   149  000800  00                 	db	0
   150  000801                     _ApiList:
   151                           	opt stack 0
   152  000801  0012               	dw	18
   153  000803  0013               	dw	19
   154  000805  0014               	dw	20
   155  000807  0015               	dw	21
   156  000809  0016               	dw	22
   157  00080B  0017               	dw	23
   158  00080D  0018               	dw	24
   159  00080F  0019               	dw	25
   160  000811  001A               	dw	26
   161  000813  001B               	dw	27
   162  000815  0027               	dw	39
   163  000817  0028               	dw	40
   164  000819  002D               	dw	45
   165  00081B  002E               	dw	46
   166  00081D  002F               	dw	47
   167  00081F  0030               	dw	48
   168  000821  0031               	dw	49
   169  000823  0032               	dw	50
   170  000825  0033               	dw	51
   171  000827  0034               	dw	52
   172  000829  0035               	dw	53
   173  00082B  0036               	dw	54
   174  00082D  0037               	dw	55
   175  00082F  0038               	dw	56
   176  000831  0039               	dw	57
   177  000833  003A               	dw	58
   178  000835  003B               	dw	59
   179  000837  003C               	dw	60
   180  000839                     __end_of_ApiList:
   181                           	opt stack 0
   182  000839                     _dpowers:
   183                           	opt stack 0
   184  000839  0001               	dw	1
   185  00083B  000A               	dw	10
   186  00083D  0064               	dw	100
   187  00083F  03E8               	dw	1000
   188  000841  2710               	dw	10000
   189  000843                     __end_of_dpowers:
   190                           	opt stack 0
   191  000843                     _DataLen:
   192                           	opt stack 0
   193  000843  0A                 	db	10
   194  000844                     __end_of_DataLen:
   195                           	opt stack 0
   196  0000                     _PORTEbits	set	3972
   197  0000                     _PORTBbits	set	3969
   198  0000                     _PORTCbits	set	3970
   199  0000                     _PIR2bits	set	4001
   200  0000                     _EECON2	set	4007
   201  0000                     _EEDATA	set	4008
   202  0000                     _EEADR	set	4009
   203  0000                     _EECON1bits	set	4006
   204  0000                     _RCREG1	set	4014
   205  0000                     _RCSTA1bits	set	4011
   206  0000                     _TXREG1	set	4013
   207  0000                     _SPBRG	set	4015
   208  0000                     _SPBRGH	set	4016
   209  0000                     _TXSTAbits	set	4012
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _BAUDCONbits	set	4024
   212  0000                     _T2CON	set	4042
   213  0000                     _CCP1CON	set	4029
   214  0000                     _CCPR1L	set	4030
   215  0000                     _PR2	set	4043
   216  0000                     _T0CON	set	4053
   217  0000                     _TMR0L	set	4054
   218  0000                     _TMR0H	set	4055
   219  0000                     _INTCON2	set	4081
   220  0000                     _INTCON	set	4082
   221  0000                     _RCONbits	set	4048
   222  0000                     _PIR1bits	set	3998
   223  0000                     _PIE1bits	set	3997
   224  0000                     _INTCONbits	set	4082
   225  0000                     _TRISBbits	set	3987
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISCbits	set	3988
   228  0000                     _PORTDbits	set	3971
   229  0000                     _PORTAbits	set	3968
   230  0000                     _TRISDbits	set	3989
   231  0000                     _TRISAbits	set	3986
   232  0000                     _CMCON	set	4020
   233  0000                     _ADCON1	set	4033
   234  0000                     _TRISE	set	3990
   235  0000                     _TRISD	set	3989
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISB	set	3987
   238  0000                     _TRISA	set	3986
   239  0000                     _TXIF	set	31988
   240  000844                     STR_8:
   241  000844  4D                 	db	77	;'M'
   242  000845  23                 	db	35
   243  000846  25                 	db	37
   244  000847  64                 	db	100	;'d'
   245  000848  20                 	db	32
   246  000849  25                 	db	37
   247  00084A  64                 	db	100	;'d'
   248  00084B  0D                 	db	13
   249  00084C  0A                 	db	10
   250  00084D  00                 	db	0
   251  00084E                     STR_1:
   252  00084E  45                 	db	69	;'E'
   253  00084F  23                 	db	35
   254  000850  31                 	db	49	;'1'
   255  000851  30                 	db	48	;'0'
   256  000852  0D                 	db	13
   257  000853  0A                 	db	10
   258  000854  00                 	db	0
   259  000855                     STR_2:
   260  000855  45                 	db	69	;'E'
   261  000856  23                 	db	35
   262  000857  31                 	db	49	;'1'
   263  000858  31                 	db	49	;'1'
   264  000859  0D                 	db	13
   265  00085A  0A                 	db	10
   266  00085B  00                 	db	0
   267  00085C                     STR_3:
   268  00085C  45                 	db	69	;'E'
   269  00085D  23                 	db	35
   270  00085E  31                 	db	49	;'1'
   271  00085F  32                 	db	50	;'2'
   272  000860  0D                 	db	13
   273  000861  0A                 	db	10
   274  000862  00                 	db	0
   275  000863                     STR_4:
   276  000863  45                 	db	69	;'E'
   277  000864  23                 	db	35
   278  000865  31                 	db	49	;'1'
   279  000866  33                 	db	51	;'3'
   280  000867  0D                 	db	13
   281  000868  0A                 	db	10
   282  000869  00                 	db	0
   283  00086A                     STR_5:
   284  00086A  45                 	db	69	;'E'
   285  00086B  23                 	db	35
   286  00086C  31                 	db	49	;'1'
   287  00086D  34                 	db	52	;'4'
   288  00086E  0D                 	db	13
   289  00086F  0A                 	db	10
   290  000870  00                 	db	0
   291  0000                     
   292                           ; #config settings
   293  000871  00                 	db	0	; dummy byte at the end
   294  0000                     
   295                           	psect	cinit
   296  003CD6                     __pcinit:
   297                           	opt stack 0
   298  003CD6                     start_initialization:
   299                           	opt stack 0
   300  003CD6                     __initialization:
   301                           	opt stack 0
   302                           
   303                           ; Initialize objects allocated to BANK0 (6 bytes)
   304                           ; load TBLPTR registers with __pidataBANK0
   305  003CD6  0EE4               	movlw	low __pidataBANK0
   306  003CD8  6EF6               	movwf	tblptrl,c
   307  003CDA  0E42               	movlw	high __pidataBANK0
   308  003CDC  6EF7               	movwf	tblptrh,c
   309  003CDE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   310  003CE0  6EF8               	movwf	tblptru,c
   311  003CE2  EE00  F0DC         	lfsr	0,__pdataBANK0
   312  003CE6  EE10 F006          	lfsr	1,6
   313  003CEA                     copy_data0:
   314  003CEA  0009               	tblrd		*+
   315  003CEC  CFF5 FFEE          	movff	tablat,postinc0
   316  003CF0  50E5               	movf	postdec1,w,c
   317  003CF2  50E1               	movf	fsr1l,w,c
   318  003CF4  E1FA               	bnz	copy_data0
   319                           
   320                           ; Initialize objects allocated to COMRAM (5 bytes)
   321                           ; load TBLPTR registers with __pidataCOMRAM
   322  003CF6  0EEA               	movlw	low __pidataCOMRAM
   323  003CF8  6EF6               	movwf	tblptrl,c
   324  003CFA  0E42               	movlw	high __pidataCOMRAM
   325  003CFC  6EF7               	movwf	tblptrh,c
   326  003CFE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   327  003D00  6EF8               	movwf	tblptru,c
   328  003D02  EE00  F048         	lfsr	0,__pdataCOMRAM
   329  003D06  EE10 F005          	lfsr	1,5
   330  003D0A                     copy_data1:
   331  003D0A  0009               	tblrd		*+
   332  003D0C  CFF5 FFEE          	movff	tablat,postinc0
   333  003D10  50E5               	movf	postdec1,w,c
   334  003D12  50E1               	movf	fsr1l,w,c
   335  003D14  E1FA               	bnz	copy_data1
   336                           
   337                           ; Clear objects allocated to BANK4 (252 bytes)
   338  003D16  EE04  F000         	lfsr	0,__pbssBANK4
   339  003D1A  0EFC               	movlw	252
   340  003D1C                     clear_0:
   341  003D1C  6AEE               	clrf	postinc0,c
   342  003D1E  06E8               	decf	wreg,f,c
   343  003D20  E1FD               	bnz	clear_0
   344                           
   345                           ; Clear objects allocated to BANK3 (178 bytes)
   346  003D22  EE03  F000         	lfsr	0,__pbssBANK3
   347  003D26  0EB2               	movlw	178
   348  003D28                     clear_1:
   349  003D28  6AEE               	clrf	postinc0,c
   350  003D2A  06E8               	decf	wreg,f,c
   351  003D2C  E1FD               	bnz	clear_1
   352                           
   353                           ; Clear objects allocated to BANK2 (178 bytes)
   354  003D2E  EE02  F000         	lfsr	0,__pbssBANK2
   355  003D32  0EB2               	movlw	178
   356  003D34                     clear_2:
   357  003D34  6AEE               	clrf	postinc0,c
   358  003D36  06E8               	decf	wreg,f,c
   359  003D38  E1FD               	bnz	clear_2
   360                           
   361                           ; Clear objects allocated to BANK1 (178 bytes)
   362  003D3A  EE01  F000         	lfsr	0,__pbssBANK1
   363  003D3E  0EB2               	movlw	178
   364  003D40                     clear_3:
   365  003D40  6AEE               	clrf	postinc0,c
   366  003D42  06E8               	decf	wreg,f,c
   367  003D44  E1FD               	bnz	clear_3
   368                           
   369                           ; Clear objects allocated to BANK0 (86 bytes)
   370  003D46  EE00  F060         	lfsr	0,__pbssBANK0
   371  003D4A  0E56               	movlw	86
   372  003D4C                     clear_4:
   373  003D4C  6AEE               	clrf	postinc0,c
   374  003D4E  06E8               	decf	wreg,f,c
   375  003D50  E1FD               	bnz	clear_4
   376                           
   377                           ; Clear objects allocated to COMRAM (34 bytes)
   378  003D52  EE00  F026         	lfsr	0,__pbssCOMRAM
   379  003D56  0E22               	movlw	34
   380  003D58                     clear_5:
   381  003D58  6AEE               	clrf	postinc0,c
   382  003D5A  06E8               	decf	wreg,f,c
   383  003D5C  E1FD               	bnz	clear_5
   384  003D5E                     end_of_initialization:
   385                           	opt stack 0
   386  003D5E                     __end_of__initialization:
   387                           	opt stack 0
   388  003D5E  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   389  003D60  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   390  003D62  0E00               	movlw	low (__Lmediumconst shr (0+16))
   391  003D64  6EF8               	movwf	tblptru,c
   392  003D66  0100               	movlb	0
   393  003D68  EF36  F01F         	goto	_main	;jump to C main() function
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           postdec1	equ	0xFE5
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	bssCOMRAM
   404  000026                     __pbssCOMRAM:
   405                           	opt stack 0
   406  000026                     _Mountain_Delay_Counter:
   407                           	opt stack 0
   408  000026                     	ds	2
   409  000028                     _Red_Led_Counter:
   410                           	opt stack 0
   411  000028                     	ds	2
   412  00002A                     _Green_Led_Counter:
   413                           	opt stack 0
   414  00002A                     	ds	2
   415  00002C                     _Switch_Moutain:
   416                           	opt stack 0
   417  00002C                     	ds	1
   418  00002D                     _Switch_Junction:
   419                           	opt stack 0
   420  00002D                     	ds	1
   421  00002E                     _Button_Contact_Counter_RF:
   422                           	opt stack 0
   423  00002E                     	ds	1
   424  00002F                     _Button_Contact_Counter_RB:
   425                           	opt stack 0
   426  00002F                     	ds	1
   427  000030                     _Button_Contact_Counter_LF:
   428                           	opt stack 0
   429  000030                     	ds	1
   430  000031                     _Button_Contact_Counter_LB:
   431                           	opt stack 0
   432  000031                     	ds	1
   433  000032                     _Button_Contact_Counter_Middle:
   434                           	opt stack 0
   435  000032                     	ds	1
   436  000033                     _Button_Contact_Counter_Stop:
   437                           	opt stack 0
   438  000033                     	ds	1
   439  000034                     _Button_Contact_Counter_Start:
   440                           	opt stack 0
   441  000034                     	ds	1
   442  000035                     _Reed_Contact_RMD_Counter:
   443                           	opt stack 0
   444  000035                     	ds	1
   445  000036                     _Reed_Contact_RMU_Counter:
   446                           	opt stack 0
   447  000036                     	ds	1
   448  000037                     _Reed_Contact_LMD_Counter:
   449                           	opt stack 0
   450  000037                     	ds	1
   451  000038                     _Reed_Contact_LMU_Counter:
   452                           	opt stack 0
   453  000038                     	ds	1
   454  000039                     _Reed_Contact_RB_Counter:
   455                           	opt stack 0
   456  000039                     	ds	1
   457  00003A                     _Reed_Contact_RF_Counter:
   458                           	opt stack 0
   459  00003A                     	ds	1
   460  00003B                     _Reed_Contact_LB_Counter:
   461                           	opt stack 0
   462  00003B                     	ds	1
   463  00003C                     _Reed_Contact_LF_Counter:
   464                           	opt stack 0
   465  00003C                     	ds	1
   466  00003D                     _eusart1RxCount:
   467                           	opt stack 0
   468  00003D                     	ds	1
   469  00003E                     _eusart1RxTail:
   470                           	opt stack 0
   471  00003E                     	ds	1
   472  00003F                     _eusart1RxHead:
   473                           	opt stack 0
   474  00003F                     	ds	1
   475  000040                     _eusart1TxBufferRemaining:
   476                           	opt stack 0
   477  000040                     	ds	1
   478  000041                     _eusart1TxTail:
   479                           	opt stack 0
   480  000041                     	ds	1
   481  000042                     _eusart1TxHead:
   482                           	opt stack 0
   483  000042                     	ds	1
   484  000043                     _Switch_Adjust_RF:
   485                           	opt stack 0
   486  000043                     	ds	1
   487  000044                     _Switch_Adjust_RB:
   488                           	opt stack 0
   489  000044                     	ds	1
   490  000045                     _Switch_Adjust_LF:
   491                           	opt stack 0
   492  000045                     	ds	1
   493  000046                     _Switch_Adjust_LB:
   494                           	opt stack 0
   495  000046                     	ds	1
   496  000047                     _Switch_Activate_Controls:
   497                           	opt stack 0
   498  000047                     	ds	1
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           postinc0	equ	0xFEE
   504                           wreg	equ	0xFE8
   505                           postdec1	equ	0xFE5
   506                           fsr1l	equ	0xFE1
   507                           
   508                           	psect	dataCOMRAM
   509  000048                     __pdataCOMRAM:
   510                           	opt stack 0
   511  000048                     Right_Mountain_From_The_Left@Return_Val:
   512                           	opt stack 0
   513  000048                     	ds	1
   514  000049                     Left_Mountain_From_The_Left@Return_Val:
   515                           	opt stack 0
   516  000049                     	ds	1
   517  00004A                     Left_Mountain_From_The_Right@Return_Val:
   518                           	opt stack 0
   519  00004A                     	ds	1
   520  00004B                     Right_Mountain_From_The_Right@Return_Val:
   521                           	opt stack 0
   522  00004B                     	ds	1
   523  00004C                     Junction@Return_Val:
   524                           	opt stack 0
   525  00004C                     	ds	1
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1l	equ	0xFE1
   534                           
   535                           	psect	bssBANK0
   536  000060                     __pbssBANK0:
   537                           	opt stack 0
   538  000060                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   539                           	opt stack 0
   540  000060                     	ds	2
   541  000062                     Train_Move_Right_Start@Train_Move_Wait_Time:
   542                           	opt stack 0
   543  000062                     	ds	2
   544  000064                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   545                           	opt stack 0
   546  000064                     	ds	2
   547  000066                     Train_Move_Left_Start@Train_Move_Wait_Time:
   548                           	opt stack 0
   549  000066                     	ds	2
   550  000068                     _Train_Move_Pwm_Fast_Count:
   551                           	opt stack 0
   552  000068                     	ds	2
   553  00006A                     Junction@Junction_Switch_Time:
   554                           	opt stack 0
   555  00006A                     	ds	2
   556  00006C                     _DelayCounter:
   557                           	opt stack 0
   558  00006C                     	ds	2
   559  00006E                     _Diag_Comm2:
   560                           	opt stack 0
   561  00006E                     	ds	2
   562  000070                     _Pcomm_List2:
   563                           	opt stack 0
   564  000070                     	ds	2
   565  000072                     _Pcomm_List:
   566                           	opt stack 0
   567  000072                     	ds	2
   568  000074                     _Diag_Comm:
   569                           	opt stack 0
   570  000074                     	ds	2
   571  000076                     _pLen:
   572                           	opt stack 0
   573  000076                     	ds	2
   574  000078                     _pData:
   575                           	opt stack 0
   576  000078                     	ds	2
   577  00007A                     _Activate_Controls_Counter:
   578                           	opt stack 0
   579  00007A                     	ds	2
   580  00007C                     _Adjust_Counter:
   581                           	opt stack 0
   582  00007C                     	ds	2
   583  00007E                     _Led1_Counter:
   584                           	opt stack 0
   585  00007E                     	ds	2
   586  000080                     _Train_Move_Pwm_Count:
   587                           	opt stack 0
   588  000080                     	ds	2
   589  000082                     _Switch_Train_Move:
   590                           	opt stack 0
   591  000082                     	ds	1
   592  000083                     _TrSwitch:
   593                           	opt stack 0
   594  000083                     	ds	1
   595  000084                     _Message_To_Translate:
   596                           	opt stack 0
   597  000084                     	ds	1
   598  000085                     _RxSwitch:
   599                           	opt stack 0
   600  000085                     	ds	1
   601  000086                     _Received_Data:
   602                           	opt stack 0
   603  000086                     	ds	1
   604  000087                     _Stop_Program:
   605                           	opt stack 0
   606  000087                     	ds	1
   607  000088                     _Switch_Train_Path:
   608                           	opt stack 0
   609  000088                     	ds	1
   610  000089                     _Switch_Program:
   611                           	opt stack 0
   612  000089                     	ds	1
   613  00008A                     _Switch_Init:
   614                           	opt stack 0
   615  00008A                     	ds	1
   616  00008B                     _Update_State_Machine:
   617                           	opt stack 0
   618  00008B                     	ds	1
   619  00008C                     _Comm_List:
   620                           	opt stack 0
   621  00008C                     	ds	32
   622  0000AC                     _Data:
   623                           	opt stack 0
   624  0000AC                     	ds	10
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	dataBANK0
   635  0000DC                     __pdataBANK0:
   636                           	opt stack 0
   637  0000DC                     Train_Move_Right_Brake@Return_Val:
   638                           	opt stack 0
   639  0000DC                     	ds	1
   640  0000DD                     Train_Move_Right_Start@Return_Val:
   641                           	opt stack 0
   642  0000DD                     	ds	1
   643  0000DE                     Train_Move_Left_Brake@Return_Val:
   644                           	opt stack 0
   645  0000DE                     	ds	1
   646  0000DF                     Train_Move_Left_Start@Return_Val:
   647                           	opt stack 0
   648  0000DF                     	ds	1
   649  0000E0                     Train_Path@Return_Val:
   650                           	opt stack 0
   651  0000E0                     	ds	1
   652  0000E1                     _Switch_Main:
   653                           	opt stack 0
   654  0000E1                     	ds	1
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           
   664                           	psect	bssBANK1
   665  000100                     __pbssBANK1:
   666                           	opt stack 0
   667  000100                     _API:
   668                           	opt stack 0
   669  000100                     	ds	178
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1l	equ	0xFE1
   678                           
   679                           	psect	bssBANK2
   680  000200                     __pbssBANK2:
   681                           	opt stack 0
   682  000200                     _API_RW:
   683                           	opt stack 0
   684  000200                     	ds	178
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           postdec1	equ	0xFE5
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssBANK3
   695  000300                     __pbssBANK3:
   696                           	opt stack 0
   697  000300                     _API_EEPROM:
   698                           	opt stack 0
   699  000300                     	ds	178
   700                           tblptru	equ	0xFF8
   701                           tblptrh	equ	0xFF7
   702                           tblptrl	equ	0xFF6
   703                           tablat	equ	0xFF5
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           postdec1	equ	0xFE5
   707                           fsr1l	equ	0xFE1
   708                           
   709                           	psect	bssBANK4
   710  000400                     __pbssBANK4:
   711                           	opt stack 0
   712  000400                     _eusart1RxBuffer:
   713                           	opt stack 0
   714  000400                     	ds	126
   715  00047E                     _eusart1TxBuffer:
   716                           	opt stack 0
   717  00047E                     	ds	126
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           tblptrl	equ	0xFF6
   721                           tablat	equ	0xFF5
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1l	equ	0xFE1
   726                           
   727                           	psect	cstackBANK0
   728  0000B6                     __pcstackBANK0:
   729                           	opt stack 0
   730  0000B6                     ??_tc_low:
   731                           
   732                           ; 1 bytes @ 0x0
   733  0000B6                     	ds	21
   734  0000CB                     ?_printf:
   735                           	opt stack 0
   736  0000CB                     Right_Mountain_From_The_Right@rc:
   737                           	opt stack 0
   738  0000CB                     Left_Mountain_From_The_Right@rc:
   739                           	opt stack 0
   740  0000CB                     Left_Mountain_From_The_Left@rc:
   741                           	opt stack 0
   742  0000CB                     Right_Mountain_From_The_Left@rc:
   743                           	opt stack 0
   744  0000CB                     printf@f:
   745                           	opt stack 0
   746  0000CB                     _Train_Move_Left_Start$2177:
   747                           	opt stack 0
   748  0000CB                     _Train_Move_Left_Brake$2178:
   749                           	opt stack 0
   750  0000CB                     _Train_Move_Right_Start$2179:
   751                           	opt stack 0
   752  0000CB                     _Train_Move_Right_Brake$2180:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x15
   756  0000CB                     	ds	2
   757  0000CD                     Train_Path@To:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x17
   761  0000CD                     	ds	1
   762  0000CE                     Train_Path@From:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x18
   766  0000CE                     	ds	1
   767  0000CF                     ??_Update_StateMchn:
   768                           
   769                           ; 1 bytes @ 0x19
   770  0000CF                     	ds	2
   771  0000D1                     printf@ap:
   772                           	opt stack 0
   773  0000D1                     _Update_StateMchn$2175:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x1B
   777  0000D1                     	ds	2
   778  0000D3                     printf@flag:
   779                           	opt stack 0
   780  0000D3                     _Update_StateMchn$2176:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x1D
   784  0000D3                     	ds	1
   785  0000D4                     printf@prec:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1E
   789  0000D4                     	ds	1
   790  0000D5                     printf@val:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x1F
   794  0000D5                     	ds	2
   795  0000D7                     printf@c:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x21
   799  0000D7                     	ds	1
   800  0000D8                     ??_READxRECEIVEDxMESSAGE:
   801  0000D8                     SendMessage@index:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x22
   805  0000D8                     	ds	2
   806  0000DA                     SendMessage@value:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x24
   810  0000DA                     	ds	2
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820                           	psect	cstackCOMRAM
   821  000001                     __pcstackCOMRAM:
   822                           	opt stack 0
   823  000001                     ??_tc_high:
   824  000001                     
   825                           ; 1 bytes @ 0x0
   826  000001                     	ds	18
   827  000013                     ??_isdigit:
   828  000013                     ?_GETxAPIxVAL:
   829                           	opt stack 0
   830  000013                     ?_GETxAPIxRW:
   831                           	opt stack 0
   832  000013                     ?_Eeprom_Read:
   833                           	opt stack 0
   834  000013                     ?___wmul:
   835                           	opt stack 0
   836  000013                     ?___lwdiv:
   837                           	opt stack 0
   838  000013                     EUSART1_Read@readValue:
   839                           	opt stack 0
   840  000013                     putch@data:
   841                           	opt stack 0
   842  000013                     Green_Led@Operation:
   843                           	opt stack 0
   844  000013                     Red_Led@Operation:
   845                           	opt stack 0
   846  000013                     EUSART1_Initialize@baud_rate:
   847                           	opt stack 0
   848  000013                     SENDxMESSAGE@index:
   849                           	opt stack 0
   850  000013                     APIxInitialize@i:
   851                           	opt stack 0
   852  000013                     GETxAPIxRW@index:
   853                           	opt stack 0
   854  000013                     GETxAPIxVAL@index:
   855                           	opt stack 0
   856  000013                     Eeprom_Read@Location:
   857                           	opt stack 0
   858  000013                     Eeprom_Store@Location:
   859                           	opt stack 0
   860  000013                     ___wmul@multiplier:
   861                           	opt stack 0
   862  000013                     ___lwdiv@dividend:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x12
   866  000013                     	ds	1
   867  000014                     _isdigit$1832:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x13
   871  000014                     	ds	1
   872  000015                     isdigit@c:
   873                           	opt stack 0
   874  000015                     SENDxMESSAGE@value:
   875                           	opt stack 0
   876  000015                     SETxAPIxVALxNoxRET@index:
   877                           	opt stack 0
   878  000015                     Eeprom_Read@Location_Low_Byte:
   879                           	opt stack 0
   880  000015                     Eeprom_Store@Value:
   881                           	opt stack 0
   882  000015                     SetDCPWM1@dutycycle:
   883                           	opt stack 0
   884  000015                     ___wmul@multiplicand:
   885                           	opt stack 0
   886  000015                     ___lwdiv@divisor:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x14
   890  000015                     	ds	2
   891  000017                     ??_SENDxMESSAGE:
   892  000017                     ??_SetDCPWM1:
   893  000017                     ___lwdiv@counter:
   894                           	opt stack 0
   895  000017                     SETxAPIxVALxNoxRET@value:
   896                           	opt stack 0
   897  000017                     Eeprom_Read@Location_High_Byte:
   898                           	opt stack 0
   899  000017                     Eeprom_Store@Location_Low_Byte:
   900                           	opt stack 0
   901  000017                     ___wmul@product:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x16
   905  000017                     	ds	1
   906  000018                     ___lwdiv@quotient:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x17
   910  000018                     	ds	1
   911  000019                     ?_atoi:
   912                           	opt stack 0
   913  000019                     SETxAPIxVAL@index:
   914                           	opt stack 0
   915  000019                     Eeprom_Read@Return_Data:
   916                           	opt stack 0
   917  000019                     Eeprom_Store@Location_High_Byte:
   918                           	opt stack 0
   919  000019                     SetDCPWM1@DCycle:
   920                           	opt stack 0
   921  000019                     atoi@s:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x18
   925  000019                     	ds	1
   926  00001A                     ?___lwmod:
   927                           	opt stack 0
   928  00001A                     ___lwmod@dividend:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x19
   932  00001A                     	ds	1
   933  00001B                     ??_EEPROMxSTORE:
   934  00001B                     ??_atoi:
   935  00001B                     SETxAPIxVAL@value:
   936                           	opt stack 0
   937  00001B                     EEPROMxREAD@Data:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x1A
   941  00001B                     	ds	1
   942  00001C                     ___lwmod@divisor:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x1B
   946  00001C                     	ds	1
   947  00001D                     atoi@sign:
   948                           	opt stack 0
   949  00001D                     EEPROMxREAD@i:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x1C
   953  00001D                     	ds	1
   954  00001E                     ___lwmod@counter:
   955                           	opt stack 0
   956  00001E                     atoi@a:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x1D
   960  00001E                     	ds	1
   961  00001F                     ??_Debounce_Inputs:
   962  00001F                     ??_printf:
   963  00001F                     Junction@Straight_Bend:
   964                           	opt stack 0
   965  00001F                     SETxPWM@speed:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x1E
   969  00001F                     	ds	1
   970  000020                     ??_DIAGNOSTICxTOxPC:
   971  000020                     Junction@Junction_Left_Right:
   972                           	opt stack 0
   973  000020                     TranslateMessage@Value:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x1F
   977  000020                     	ds	1
   978  000021                     SETxPWM@direction:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x20
   982  000021                     	ds	1
   983  000022                     ??_SETxPWM:
   984  000022                     TranslateMessage@Index:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x21
   988  000022                     	ds	1
   989  000023                     EEPROMxSTORE@i:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x22
   993  000023                     	ds	1
   994  000024                     SETxPWM@pwm_speed:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x23
   998  000024                     	ds	2
   999  000026                     tblptru	equ	0xFF8
  1000                           tblptrh	equ	0xFF7
  1001                           tblptrl	equ	0xFF6
  1002                           tablat	equ	0xFF5
  1003                           postinc0	equ	0xFEE
  1004                           wreg	equ	0xFE8
  1005                           postdec1	equ	0xFE5
  1006                           fsr1l	equ	0xFE1
  1007                           
  1008                           ; 1 bytes @ 0x25
  1009 ;;
  1010 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1011 ;;
  1012 ;; *************** function _main *****************
  1013 ;; Defined at:
  1014 ;;		line 106 in file "../Main.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  1    wreg      void 
  1021 ;; Registers used:
  1022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1028 ;;      Params:         0       0       0       0       0       0       0       0       0
  1029 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1031 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1032 ;;Total ram usage:        0 bytes
  1033 ;; Hardware stack levels required when called:    9
  1034 ;; This function calls:
  1035 ;;		_APIxInitialize
  1036 ;;		_DIAGNOSTICxTOxPC
  1037 ;;		_EEPROMxREAD
  1038 ;;		_EUSART1_Initialize
  1039 ;;		_Init_Pwm
  1040 ;;		_Init_Timers
  1041 ;;		_READxRECEIVEDxMESSAGE
  1042 ;;		_Update_StateMchn
  1043 ;; This function is called by:
  1044 ;;		Startup code after reset
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text0
  1049  003E6C                     __ptext0:
  1050                           	opt stack 0
  1051  003E6C                     _main:
  1052                           	opt stack 22
  1053                           
  1054                           ;Main.c: 108: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
  1055                           
  1056                           ;incstack = 0
  1057  003E6C  6892               	setf	3986,c	;volatile
  1058  003E6E  6893               	setf	3987,c	;volatile
  1059  003E70  6894               	setf	3988,c	;volatile
  1060  003E72  6895               	setf	3989,c	;volatile
  1061  003E74  6896               	setf	3990,c	;volatile
  1062                           
  1063                           ;Main.c: 109: ADCON1=0x0F;
  1064  003E76  0E0F               	movlw	15
  1065  003E78  6EC1               	movwf	4033,c	;volatile
  1066                           
  1067                           ;Main.c: 110: CMCON=0x07;
  1068  003E7A  0E07               	movlw	7
  1069  003E7C  6EB4               	movwf	4020,c	;volatile
  1070                           
  1071                           ;Main.c: 111: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
  1072  003E7E  9892               	bcf	3986,4,c	;volatile
  1073  003E80  9A95               	bcf	3989,5,c	;volatile
  1074  003E82  9C95               	bcf	3989,6,c	;volatile
  1075                           
  1076                           ;Main.c: 112: PORTAbits.RA4 = 0;
  1077  003E84  9880               	bcf	3968,4,c	;volatile
  1078                           
  1079                           ;Main.c: 113: PORTDbits.RD6 = 0;
  1080  003E86  9C83               	bcf	3971,6,c	;volatile
  1081                           
  1082                           ;Main.c: 114: PORTDbits.RD5 = 0;
  1083  003E88  9A83               	bcf	3971,5,c	;volatile
  1084                           
  1085                           ;Main.c: 116: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
  1086  003E8A  9092               	bcf	3986,0,c	;volatile
  1087  003E8C  9292               	bcf	3986,1,c	;volatile
  1088  003E8E  9492               	bcf	3986,2,c	;volatile
  1089  003E90  9692               	bcf	3986,3,c	;volatile
  1090                           
  1091                           ;Main.c: 117: PORTAbits.RA3 = 0;
  1092  003E92  9680               	bcf	3968,3,c	;volatile
  1093                           
  1094                           ;Main.c: 118: PORTAbits.RA2 = 0;
  1095  003E94  9480               	bcf	3968,2,c	;volatile
  1096                           
  1097                           ;Main.c: 119: PORTAbits.RA1 = 0;
  1098  003E96  9280               	bcf	3968,1,c	;volatile
  1099                           
  1100                           ;Main.c: 120: PORTAbits.RA0 = 0;
  1101  003E98  9080               	bcf	3968,0,c	;volatile
  1102                           
  1103                           ;Main.c: 122: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
  1104  003E9A  8495               	bsf	3989,2,c	;volatile
  1105  003E9C  8695               	bsf	3989,3,c	;volatile
  1106  003E9E  8095               	bsf	3989,0,c	;volatile
  1107  003EA0  8295               	bsf	3989,1,c	;volatile
  1108  003EA2  8294               	bsf	3988,1,c	;volatile
  1109  003EA4  8895               	bsf	3989,4,c	;volatile
  1110  003EA6  8096               	bsf	3990,0,c	;volatile
  1111  003EA8  8296               	bsf	3990,1,c	;volatile
  1112                           
  1113                           ;Main.c: 123: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
  1114  003EAA  8093               	bsf	3987,0,c	;volatile
  1115  003EAC  8293               	bsf	3987,1,c	;volatile
  1116  003EAE  8493               	bsf	3987,2,c	;volatile
  1117  003EB0  8693               	bsf	3987,3,c	;volatile
  1118  003EB2  8893               	bsf	3987,4,c	;volatile
  1119  003EB4  8A93               	bsf	3987,5,c	;volatile
  1120  003EB6  8E95               	bsf	3989,7,c	;volatile
  1121                           
  1122                           ;Main.c: 124: APIxInitialize();
  1123  003EB8  ECAA  F00E         	call	_APIxInitialize	;wreg free
  1124                           
  1125                           ;Main.c: 125: Init_Pwm();
  1126  003EBC  ECFE  F020         	call	_Init_Pwm	;wreg free
  1127                           
  1128                           ;Main.c: 126: Init_Timers();
  1129  003EC0  EC60  F021         	call	_Init_Timers	;wreg free
  1130                           
  1131                           ;Main.c: 127: EUSART1_Initialize();
  1132  003EC4  EC17  F020         	call	_EUSART1_Initialize	;wreg free
  1133                           
  1134                           ;Main.c: 128: EEPROMxREAD();
  1135  003EC8  EC5C  F020         	call	_EEPROMxREAD	;wreg free
  1136  003ECC                     
  1137                           ;Main.c: 131: {
  1138                           ;Main.c: 132: if (1 == Update_State_Machine)
  1139  003ECC  0100               	movlb	0	; () banked
  1140  003ECE  058B               	decf	_Update_State_Machine& (0+255),w,b
  1141  003ED0  A4D8               	btfss	status,2,c
  1142  003ED2  D004               	goto	l88
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;Main.c: 133: {
  1146                           ;Main.c: 134: Update_State_Machine = 0;
  1147  003ED4  0E00               	movlw	0
  1148  003ED6  6F8B               	movwf	_Update_State_Machine& (0+255),b
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;Main.c: 135: Update_StateMchn();
  1152  003ED8  EC39  F004         	call	_Update_StateMchn	;wreg free
  1153  003EDC                     l88:
  1154                           
  1155                           ;Main.c: 136: }
  1156                           ;Main.c: 138: READxRECEIVEDxMESSAGE();
  1157  003EDC  ECA3  F01B         	call	_READxRECEIVEDxMESSAGE	;wreg free
  1158                           
  1159                           ;Main.c: 139: DIAGNOSTICxTOxPC();
  1160  003EE0  EC0D  F013         	call	_DIAGNOSTICxTOxPC	;wreg free
  1161  003EE4  D7F3               	goto	l87
  1162  003EE6                     __end_of_main:
  1163                           	opt stack 0
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           postdec1	equ	0xFE5
  1171                           fsr1l	equ	0xFE1
  1172                           status	equ	0xFD8
  1173                           
  1174 ;; *************** function _Update_StateMchn *****************
  1175 ;; Defined at:
  1176 ;;		line 41 in file "../State_Mchn.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1190 ;;      Params:         0       0       0       0       0       0       0       0       0
  1191 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1192 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1193 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1194 ;;Total ram usage:        5 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; Hardware stack levels required when called:    8
  1197 ;; This function calls:
  1198 ;;		_Debounce_Inputs
  1199 ;;		_EEPROMxSTORE
  1200 ;;		_GETxAPIxVAL
  1201 ;;		_Green_Led
  1202 ;;		_Junction
  1203 ;;		_Red_Led
  1204 ;;		_SETxAPIxVAL
  1205 ;;		_SETxAPIxVALxNoxRET
  1206 ;;		_SETxPWM
  1207 ;;		_Train_Path
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text1
  1214  000872                     __ptext1:
  1215                           	opt stack 0
  1216  000872                     _Update_StateMchn:
  1217                           	opt stack 22
  1218                           
  1219                           ;State_Mchn.c: 43: if (GETxAPIxVAL(72)){
  1220                           
  1221                           ;incstack = 0
  1222  000872  0E00               	movlw	0
  1223  000874  6E14               	movwf	GETxAPIxVAL@index+1,c
  1224  000876  0E48               	movlw	72
  1225  000878  6E13               	movwf	GETxAPIxVAL@index,c
  1226  00087A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1227  00087E  5013               	movf	?_GETxAPIxVAL,w,c
  1228  000880  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1229  000882  B4D8               	btfsc	status,2,c
  1230  000884  D00B               	goto	l178
  1231                           
  1232                           ;State_Mchn.c: 44: SETxAPIxVAL(72, 0);
  1233  000886  0E00               	movlw	0
  1234  000888  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1235  00088A  0E48               	movlw	72
  1236  00088C  6E19               	movwf	SETxAPIxVAL@index,c
  1237  00088E  0E00               	movlw	0
  1238  000890  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1239  000892  0E00               	movlw	0
  1240  000894  6E1B               	movwf	SETxAPIxVAL@value,c
  1241  000896  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1242  00089A  00FF               	reset		;# 
  1243  00089C                     l178:
  1244                           
  1245                           ;State_Mchn.c: 46: }
  1246                           ;State_Mchn.c: 48: Debounce_Inputs();
  1247  00089C  ECE7  F00A         	call	_Debounce_Inputs	;wreg free
  1248                           
  1249                           ;State_Mchn.c: 50: switch (Switch_Main)
  1250  0008A0  EFC8  F00A         	goto	l179
  1251  0008A4                     
  1252                           ;State_Mchn.c: 53: if (GETxAPIxVAL(74)){
  1253  0008A4  0E00               	movlw	0
  1254  0008A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  1255  0008A8  0E4A               	movlw	74
  1256  0008AA  6E13               	movwf	GETxAPIxVAL@index,c
  1257  0008AC  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1258  0008B0  5013               	movf	?_GETxAPIxVAL,w,c
  1259  0008B2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1260  0008B4  B4D8               	btfsc	status,2,c
  1261  0008B6  D015               	goto	l181
  1262                           
  1263                           ;State_Mchn.c: 54: if(Junction(0, 1) == 0){
  1264  0008B8  0E01               	movlw	1
  1265  0008BA  6E1F               	movwf	Junction@Straight_Bend,c
  1266  0008BC  0E00               	movlw	0
  1267  0008BE  EC45  F015         	call	_Junction
  1268  0008C2  0900               	iorlw	0
  1269  0008C4  A4D8               	btfss	status,2,c
  1270  0008C6  EFD4  F00A         	goto	l304
  1271                           
  1272                           ;State_Mchn.c: 55: SETxAPIxVALxNoxRET(74, 0);
  1273  0008CA  0E00               	movlw	0
  1274  0008CC  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1275  0008CE  0E4A               	movlw	74
  1276  0008D0  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1277  0008D2  0E00               	movlw	0
  1278  0008D4  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1279  0008D6  0E00               	movlw	0
  1280  0008D8  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1281  0008DA  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1282                           
  1283                           ;State_Mchn.c: 56: }
  1284                           ;State_Mchn.c: 57: }
  1285  0008DE  EFD4  F00A         	goto	l304
  1286  0008E2                     l181:
  1287                           
  1288                           ;State_Mchn.c: 58: else if (GETxAPIxVAL(73)){
  1289  0008E2  0E00               	movlw	0
  1290  0008E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1291  0008E6  0E49               	movlw	73
  1292  0008E8  6E13               	movwf	GETxAPIxVAL@index,c
  1293  0008EA  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1294  0008EE  5013               	movf	?_GETxAPIxVAL,w,c
  1295  0008F0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1296  0008F2  B4D8               	btfsc	status,2,c
  1297  0008F4  D015               	goto	l184
  1298                           
  1299                           ;State_Mchn.c: 59: if(Junction(0, 0) == 0){
  1300  0008F6  0E00               	movlw	0
  1301  0008F8  6E1F               	movwf	Junction@Straight_Bend,c
  1302  0008FA  0E00               	movlw	0
  1303  0008FC  EC45  F015         	call	_Junction
  1304  000900  0900               	iorlw	0
  1305  000902  A4D8               	btfss	status,2,c
  1306  000904  EFD4  F00A         	goto	l304
  1307                           
  1308                           ;State_Mchn.c: 60: SETxAPIxVALxNoxRET(73, 0);
  1309  000908  0E00               	movlw	0
  1310  00090A  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1311  00090C  0E49               	movlw	73
  1312  00090E  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1313  000910  0E00               	movlw	0
  1314  000912  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1315  000914  0E00               	movlw	0
  1316  000916  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1317  000918  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1318                           
  1319                           ;State_Mchn.c: 61: }
  1320                           ;State_Mchn.c: 62: }
  1321  00091C  EFD4  F00A         	goto	l304
  1322  000920                     l184:
  1323                           
  1324                           ;State_Mchn.c: 63: else if (GETxAPIxVAL(76)){
  1325  000920  0E00               	movlw	0
  1326  000922  6E14               	movwf	GETxAPIxVAL@index+1,c
  1327  000924  0E4C               	movlw	76
  1328  000926  6E13               	movwf	GETxAPIxVAL@index,c
  1329  000928  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1330  00092C  5013               	movf	?_GETxAPIxVAL,w,c
  1331  00092E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1332  000930  B4D8               	btfsc	status,2,c
  1333  000932  D015               	goto	l187
  1334                           
  1335                           ;State_Mchn.c: 64: if(Junction(1, 1) == 0){
  1336  000934  0E01               	movlw	1
  1337  000936  6E1F               	movwf	Junction@Straight_Bend,c
  1338  000938  0E01               	movlw	1
  1339  00093A  EC45  F015         	call	_Junction
  1340  00093E  0900               	iorlw	0
  1341  000940  A4D8               	btfss	status,2,c
  1342  000942  EFD4  F00A         	goto	l304
  1343                           
  1344                           ;State_Mchn.c: 65: SETxAPIxVALxNoxRET(76, 0);
  1345  000946  0E00               	movlw	0
  1346  000948  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1347  00094A  0E4C               	movlw	76
  1348  00094C  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1349  00094E  0E00               	movlw	0
  1350  000950  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1351  000952  0E00               	movlw	0
  1352  000954  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1353  000956  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1354                           
  1355                           ;State_Mchn.c: 66: }
  1356                           ;State_Mchn.c: 67: }
  1357  00095A  EFD4  F00A         	goto	l304
  1358  00095E                     l187:
  1359                           
  1360                           ;State_Mchn.c: 68: else if (GETxAPIxVAL(75)){
  1361  00095E  0E00               	movlw	0
  1362  000960  6E14               	movwf	GETxAPIxVAL@index+1,c
  1363  000962  0E4B               	movlw	75
  1364  000964  6E13               	movwf	GETxAPIxVAL@index,c
  1365  000966  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1366  00096A  5013               	movf	?_GETxAPIxVAL,w,c
  1367  00096C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1368  00096E  B4D8               	btfsc	status,2,c
  1369  000970  D015               	goto	l190
  1370                           
  1371                           ;State_Mchn.c: 69: if(Junction(1, 0) == 0){
  1372  000972  0E00               	movlw	0
  1373  000974  6E1F               	movwf	Junction@Straight_Bend,c
  1374  000976  0E01               	movlw	1
  1375  000978  EC45  F015         	call	_Junction
  1376  00097C  0900               	iorlw	0
  1377  00097E  A4D8               	btfss	status,2,c
  1378  000980  EFD4  F00A         	goto	l304
  1379                           
  1380                           ;State_Mchn.c: 70: SETxAPIxVALxNoxRET(75, 0);
  1381  000984  0E00               	movlw	0
  1382  000986  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1383  000988  0E4B               	movlw	75
  1384  00098A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1385  00098C  0E00               	movlw	0
  1386  00098E  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1387  000990  0E00               	movlw	0
  1388  000992  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1389  000994  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1390                           
  1391                           ;State_Mchn.c: 71: }
  1392                           ;State_Mchn.c: 72: }
  1393  000998  EFD4  F00A         	goto	l304
  1394  00099C                     l190:
  1395                           
  1396                           ;State_Mchn.c: 73: else if (GETxAPIxVAL(77)){
  1397  00099C  0E00               	movlw	0
  1398  00099E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1399  0009A0  0E4D               	movlw	77
  1400  0009A2  6E13               	movwf	GETxAPIxVAL@index,c
  1401  0009A4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1402  0009A8  5013               	movf	?_GETxAPIxVAL,w,c
  1403  0009AA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1404  0009AC  B4D8               	btfsc	status,2,c
  1405  0009AE  D016               	goto	l193
  1406                           
  1407                           ;State_Mchn.c: 74: SETxAPIxVAL(69, 1);
  1408  0009B0  0E00               	movlw	0
  1409  0009B2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1410  0009B4  0E45               	movlw	69
  1411  0009B6  6E19               	movwf	SETxAPIxVAL@index,c
  1412  0009B8  0E00               	movlw	0
  1413  0009BA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1414  0009BC  0E01               	movlw	1
  1415  0009BE  6E1B               	movwf	SETxAPIxVAL@value,c
  1416  0009C0  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1417                           
  1418                           ;State_Mchn.c: 75: SETxAPIxVALxNoxRET(77, 0);
  1419  0009C4  0E00               	movlw	0
  1420  0009C6  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1421  0009C8  0E4D               	movlw	77
  1422  0009CA  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1423  0009CC  0E00               	movlw	0
  1424  0009CE  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1425  0009D0  0E00               	movlw	0
  1426  0009D2  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1427  0009D4  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1428                           
  1429                           ;State_Mchn.c: 76: }
  1430  0009D8  EFD4  F00A         	goto	l304
  1431  0009DC                     l193:
  1432                           
  1433                           ;State_Mchn.c: 77: else if (GETxAPIxVAL(78)){
  1434  0009DC  0E00               	movlw	0
  1435  0009DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1436  0009E0  0E4E               	movlw	78
  1437  0009E2  6E13               	movwf	GETxAPIxVAL@index,c
  1438  0009E4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1439  0009E8  5013               	movf	?_GETxAPIxVAL,w,c
  1440  0009EA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1441  0009EC  B4D8               	btfsc	status,2,c
  1442  0009EE  D016               	goto	l195
  1443                           
  1444                           ;State_Mchn.c: 78: SETxAPIxVAL(69, 0);
  1445  0009F0  0E00               	movlw	0
  1446  0009F2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1447  0009F4  0E45               	movlw	69
  1448  0009F6  6E19               	movwf	SETxAPIxVAL@index,c
  1449  0009F8  0E00               	movlw	0
  1450  0009FA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1451  0009FC  0E00               	movlw	0
  1452  0009FE  6E1B               	movwf	SETxAPIxVAL@value,c
  1453  000A00  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1454                           
  1455                           ;State_Mchn.c: 79: SETxAPIxVALxNoxRET(78, 0);
  1456  000A04  0E00               	movlw	0
  1457  000A06  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1458  000A08  0E4E               	movlw	78
  1459  000A0A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1460  000A0C  0E00               	movlw	0
  1461  000A0E  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1462  000A10  0E00               	movlw	0
  1463  000A12  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1464  000A14  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1465                           
  1466                           ;State_Mchn.c: 80: }
  1467  000A18  EFD4  F00A         	goto	l304
  1468  000A1C                     l195:
  1469                           
  1470                           ;State_Mchn.c: 81: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1471  000A1C  0E00               	movlw	0
  1472  000A1E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1473  000A20  0E44               	movlw	68
  1474  000A22  6E13               	movwf	GETxAPIxVAL@index,c
  1475  000A24  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1476  000A28  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1477  000A2C  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1478  000A30  0E00               	movlw	0
  1479  000A32  6E14               	movwf	GETxAPIxVAL@index+1,c
  1480  000A34  0E4F               	movlw	79
  1481  000A36  6E13               	movwf	GETxAPIxVAL@index,c
  1482  000A38  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1483  000A3C  5013               	movf	?_GETxAPIxVAL,w,c
  1484  000A3E  0100               	movlb	0	; () banked
  1485  000A40  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  1486  000A42  E104               	bnz	u8320
  1487  000A44  5014               	movf	?_GETxAPIxVAL+1,w,c
  1488  000A46  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1489  000A48  B4D8               	btfsc	status,2,c
  1490  000A4A  D02D               	goto	l197
  1491  000A4C                     u8320:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;State_Mchn.c: 82: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1495  000A4C  0E00               	movlw	0
  1496  000A4E  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1497  000A50  0E44               	movlw	68
  1498  000A52  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1499  000A54  0E00               	movlw	0
  1500  000A56  6E14               	movwf	GETxAPIxVAL@index+1,c
  1501  000A58  0E4F               	movlw	79
  1502  000A5A  6E13               	movwf	GETxAPIxVAL@index,c
  1503  000A5C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1504  000A60  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1505  000A64  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1506  000A68  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1507                           
  1508                           ;State_Mchn.c: 83: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1509  000A6C  0E00               	movlw	0
  1510  000A6E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1511  000A70  0E44               	movlw	68
  1512  000A72  6E13               	movwf	GETxAPIxVAL@index,c
  1513  000A74  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1514  000A78  C013  F0D1         	movff	?_GETxAPIxVAL,_Update_StateMchn$2175
  1515  000A7C  C014  F0D2         	movff	?_GETxAPIxVAL+1,_Update_StateMchn$2175+1
  1516                           
  1517                           ;State_Mchn.c: 83: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1518  000A80  0E00               	movlw	0
  1519  000A82  6E14               	movwf	GETxAPIxVAL@index+1,c
  1520  000A84  0E56               	movlw	86
  1521  000A86  6E13               	movwf	GETxAPIxVAL@index,c
  1522  000A88  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1523  000A8C  5013               	movf	?_GETxAPIxVAL,w,c
  1524  000A8E  0100               	movlb	0	; () banked
  1525  000A90  6FD3               	movwf	_Update_StateMchn$2176& (0+255),b
  1526                           
  1527                           ;State_Mchn.c: 83: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1528  000A92  C0D1  F01F         	movff	_Update_StateMchn$2175,SETxPWM@speed
  1529  000A96  C0D2  F020         	movff	_Update_StateMchn$2175+1,SETxPWM@speed+1
  1530  000A9A  C0D3  F021         	movff	_Update_StateMchn$2176,SETxPWM@direction
  1531  000A9E  EC15  F01E         	call	_SETxPWM	;wreg free
  1532                           
  1533                           ;State_Mchn.c: 84: }
  1534  000AA2  EFD4  F00A         	goto	l304
  1535  000AA6                     l197:
  1536                           
  1537                           ;State_Mchn.c: 85: else if (GETxAPIxVAL(86) != GETxAPIxVAL(81)){
  1538  000AA6  0E00               	movlw	0
  1539  000AA8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1540  000AAA  0E56               	movlw	86
  1541  000AAC  6E13               	movwf	GETxAPIxVAL@index,c
  1542  000AAE  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1543  000AB2  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1544  000AB6  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1545  000ABA  0E00               	movlw	0
  1546  000ABC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1547  000ABE  0E51               	movlw	81
  1548  000AC0  6E13               	movwf	GETxAPIxVAL@index,c
  1549  000AC2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1550  000AC6  5013               	movf	?_GETxAPIxVAL,w,c
  1551  000AC8  0100               	movlb	0	; () banked
  1552  000ACA  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  1553  000ACC  E104               	bnz	u8330
  1554  000ACE  5014               	movf	?_GETxAPIxVAL+1,w,c
  1555  000AD0  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1556  000AD2  B4D8               	btfsc	status,2,c
  1557  000AD4  D012               	goto	l199
  1558  000AD6                     u8330:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;State_Mchn.c: 86: SETxAPIxVALxNoxRET(86, GETxAPIxVAL(81));
  1562  000AD6  0E00               	movlw	0
  1563  000AD8  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1564  000ADA  0E56               	movlw	86
  1565  000ADC  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1566  000ADE  0E00               	movlw	0
  1567  000AE0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1568  000AE2  0E51               	movlw	81
  1569  000AE4  6E13               	movwf	GETxAPIxVAL@index,c
  1570  000AE6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1571  000AEA  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1572  000AEE  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1573  000AF2  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1574                           
  1575                           ;State_Mchn.c: 87: }
  1576  000AF6  EFD4  F00A         	goto	l304
  1577  000AFA                     l199:
  1578                           
  1579                           ;State_Mchn.c: 88: else if (GETxAPIxVAL(87)){
  1580  000AFA  0E00               	movlw	0
  1581  000AFC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1582  000AFE  0E57               	movlw	87
  1583  000B00  6E13               	movwf	GETxAPIxVAL@index,c
  1584  000B02  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1585  000B06  5013               	movf	?_GETxAPIxVAL,w,c
  1586  000B08  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1587  000B0A  B4D8               	btfsc	status,2,c
  1588  000B0C  D3E6               	goto	l203
  1589                           
  1590                           ;State_Mchn.c: 89: EEPROMxSTORE();
  1591  000B0E  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  1592                           
  1593                           ;State_Mchn.c: 90: SETxAPIxVALxNoxRET(87, 0);
  1594  000B12  0E00               	movlw	0
  1595  000B14  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1596  000B16  0E57               	movlw	87
  1597  000B18  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1598  000B1A  0E00               	movlw	0
  1599  000B1C  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1600  000B1E  0E00               	movlw	0
  1601  000B20  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1602  000B22  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1603                           
  1604                           ;State_Mchn.c: 91: }
  1605  000B26  EFD4  F00A         	goto	l304
  1606  000B2A  0E00               	movlw	0
  1607  000B2C  ECF6  F01E         	call	_Green_Led
  1608                           
  1609                           ;State_Mchn.c: 97: Red_Led(0);
  1610  000B30  0E00               	movlw	0
  1611  000B32  ECB6  F01E         	call	_Red_Led
  1612                           
  1613                           ;State_Mchn.c: 98: Switch_Init = 1;
  1614  000B36  0E01               	movlw	1
  1615  000B38  D015               	goto	L1
  1616  000B3A                     
  1617                           ; BSR set to: 0
  1618                           
  1619                           ; BSR set to: 0
  1620  000B3A  0E00               	movlw	0
  1621  000B3C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1622  000B3E  0E23               	movlw	35
  1623  000B40  6E13               	movwf	GETxAPIxVAL@index,c
  1624  000B42  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1625  000B46  5013               	movf	?_GETxAPIxVAL,w,c
  1626  000B48  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1627  000B4A  B4D8               	btfsc	status,2,c
  1628  000B4C  D00F               	goto	l207
  1629                           
  1630                           ;State_Mchn.c: 102: {
  1631                           ;State_Mchn.c: 103: SETxAPIxVAL(39, 1);
  1632  000B4E  0E00               	movlw	0
  1633  000B50  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1634  000B52  0E27               	movlw	39
  1635  000B54  6E19               	movwf	SETxAPIxVAL@index,c
  1636  000B56  0E00               	movlw	0
  1637  000B58  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1638  000B5A  0E01               	movlw	1
  1639  000B5C  6E1B               	movwf	SETxAPIxVAL@value,c
  1640  000B5E  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1641  000B62  D057               	goto	l8812
  1642  000B64                     L1:
  1643  000B64  0100               	movlb	0	; () banked
  1644  000B66                     L2:
  1645  000B66  6F8A               	movwf	_Switch_Init& (0+255),b
  1646                           
  1647                           ;State_Mchn.c: 105: break;
  1648  000B68  EFD4  F00A         	goto	l304
  1649  000B6C                     l207:
  1650                           
  1651                           ;State_Mchn.c: 106: }
  1652                           ;State_Mchn.c: 107: if(GETxAPIxVAL(36))
  1653                           
  1654                           ; BSR set to: 0
  1655  000B6C  0E00               	movlw	0
  1656  000B6E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1657  000B70  0E24               	movlw	36
  1658  000B72  6E13               	movwf	GETxAPIxVAL@index,c
  1659  000B74  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1660  000B78  5013               	movf	?_GETxAPIxVAL,w,c
  1661  000B7A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1662  000B7C  B4D8               	btfsc	status,2,c
  1663  000B7E  D00B               	goto	l208
  1664                           
  1665                           ;State_Mchn.c: 108: {
  1666                           ;State_Mchn.c: 109: SETxAPIxVAL(39, 2);
  1667  000B80  0E00               	movlw	0
  1668  000B82  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1669  000B84  0E27               	movlw	39
  1670  000B86  6E19               	movwf	SETxAPIxVAL@index,c
  1671  000B88  0E00               	movlw	0
  1672  000B8A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1673  000B8C  0E02               	movlw	2
  1674  000B8E  6E1B               	movwf	SETxAPIxVAL@value,c
  1675  000B90  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1676  000B94  D03E               	goto	l8812
  1677  000B96                     l208:
  1678                           
  1679                           ;State_Mchn.c: 112: }
  1680                           ;State_Mchn.c: 113: if(GETxAPIxVAL(37))
  1681                           
  1682                           ; BSR set to: 0
  1683  000B96  0E00               	movlw	0
  1684  000B98  6E14               	movwf	GETxAPIxVAL@index+1,c
  1685  000B9A  0E25               	movlw	37
  1686  000B9C  6E13               	movwf	GETxAPIxVAL@index,c
  1687  000B9E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1688  000BA2  5013               	movf	?_GETxAPIxVAL,w,c
  1689  000BA4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1690  000BA6  B4D8               	btfsc	status,2,c
  1691  000BA8  D00B               	goto	l209
  1692                           
  1693                           ;State_Mchn.c: 114: {
  1694                           ;State_Mchn.c: 115: SETxAPIxVAL(39, 3);
  1695  000BAA  0E00               	movlw	0
  1696  000BAC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1697  000BAE  0E27               	movlw	39
  1698  000BB0  6E19               	movwf	SETxAPIxVAL@index,c
  1699  000BB2  0E00               	movlw	0
  1700  000BB4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1701  000BB6  0E03               	movlw	3
  1702  000BB8  6E1B               	movwf	SETxAPIxVAL@value,c
  1703  000BBA  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1704  000BBE  D029               	goto	l8812
  1705  000BC0                     l209:
  1706                           
  1707                           ;State_Mchn.c: 118: }
  1708                           ;State_Mchn.c: 119: if(GETxAPIxVAL(38))
  1709                           
  1710                           ; BSR set to: 0
  1711  000BC0  0E00               	movlw	0
  1712  000BC2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1713  000BC4  0E26               	movlw	38
  1714  000BC6  6E13               	movwf	GETxAPIxVAL@index,c
  1715  000BC8  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1716  000BCC  5013               	movf	?_GETxAPIxVAL,w,c
  1717  000BCE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1718  000BD0  B4D8               	btfsc	status,2,c
  1719  000BD2  D00B               	goto	l210
  1720                           
  1721                           ;State_Mchn.c: 120: {
  1722                           ;State_Mchn.c: 121: SETxAPIxVAL(39, 4);
  1723  000BD4  0E00               	movlw	0
  1724  000BD6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1725  000BD8  0E27               	movlw	39
  1726  000BDA  6E19               	movwf	SETxAPIxVAL@index,c
  1727  000BDC  0E00               	movlw	0
  1728  000BDE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1729  000BE0  0E04               	movlw	4
  1730  000BE2  6E1B               	movwf	SETxAPIxVAL@value,c
  1731  000BE4  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1732  000BE8  D014               	goto	l8812
  1733  000BEA                     l210:
  1734                           
  1735                           ;State_Mchn.c: 124: }
  1736                           ;State_Mchn.c: 125: if(GETxAPIxVAL(34))
  1737                           
  1738                           ; BSR set to: 0
  1739  000BEA  0E00               	movlw	0
  1740  000BEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1741  000BEE  0E22               	movlw	34
  1742  000BF0  6E13               	movwf	GETxAPIxVAL@index,c
  1743  000BF2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1744  000BF6  5013               	movf	?_GETxAPIxVAL,w,c
  1745  000BF8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1746  000BFA  B4D8               	btfsc	status,2,c
  1747  000BFC  D00C               	goto	l211
  1748                           
  1749                           ;State_Mchn.c: 126: {
  1750                           ;State_Mchn.c: 127: SETxAPIxVAL(39, 5);
  1751  000BFE  0E00               	movlw	0
  1752  000C00  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1753  000C02  0E27               	movlw	39
  1754  000C04  6E19               	movwf	SETxAPIxVAL@index,c
  1755  000C06  0E00               	movlw	0
  1756  000C08  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1757  000C0A  0E05               	movlw	5
  1758  000C0C  6E1B               	movwf	SETxAPIxVAL@value,c
  1759  000C0E  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1760  000C12                     l8812:
  1761                           
  1762                           ;State_Mchn.c: 128: Switch_Init = 2;
  1763  000C12  0E02               	movlw	2
  1764  000C14  D7A7               	goto	L1
  1765  000C16                     l211:
  1766                           
  1767                           ;State_Mchn.c: 130: }
  1768                           ;State_Mchn.c: 131: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1769                           
  1770                           ; BSR set to: 0
  1771  000C16  0E00               	movlw	0
  1772  000C18  6E14               	movwf	GETxAPIxVAL@index+1,c
  1773  000C1A  0E27               	movlw	39
  1774  000C1C  6E13               	movwf	GETxAPIxVAL@index,c
  1775  000C1E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1776  000C22  5013               	movf	?_GETxAPIxVAL,w,c
  1777  000C24  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1778  000C26  B4D8               	btfsc	status,2,c
  1779  000C28  D00A               	goto	l212
  1780  000C2A  0E00               	movlw	0
  1781  000C2C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1782  000C2E  0E28               	movlw	40
  1783  000C30  6E13               	movwf	GETxAPIxVAL@index,c
  1784  000C32  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1785  000C36  5013               	movf	?_GETxAPIxVAL,w,c
  1786  000C38  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1787  000C3A  A4D8               	btfss	status,2,c
  1788  000C3C  D0E1               	goto	u8550
  1789  000C3E                     l212:
  1790                           
  1791                           ;State_Mchn.c: 134: }
  1792                           ;State_Mchn.c: 135: Switch_Init = 1;
  1793                           
  1794                           ; BSR set to: 0
  1795  000C3E  0E01               	movlw	1
  1796  000C40  0100               	movlb	0	; () banked
  1797  000C42  6F8A               	movwf	_Switch_Init& (0+255),b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;State_Mchn.c: 136: Green_Led(2);
  1801  000C44  0E02               	movlw	2
  1802  000C46  ECF6  F01E         	call	_Green_Led
  1803                           
  1804                           ;State_Mchn.c: 137: break;
  1805  000C4A  EFD4  F00A         	goto	l304
  1806  000C4E  0E00               	movlw	0
  1807  000C50  6E14               	movwf	GETxAPIxVAL@index+1,c
  1808  000C52  0E23               	movlw	35
  1809  000C54  6E13               	movwf	GETxAPIxVAL@index,c
  1810  000C56  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1811  000C5A  5013               	movf	?_GETxAPIxVAL,w,c
  1812  000C5C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1813  000C5E  A4D8               	btfss	status,2,c
  1814  000C60  D035               	goto	l214
  1815  000C62  0E00               	movlw	0
  1816  000C64  6E14               	movwf	GETxAPIxVAL@index+1,c
  1817  000C66  0E24               	movlw	36
  1818  000C68  6E13               	movwf	GETxAPIxVAL@index,c
  1819  000C6A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1820  000C6E  5013               	movf	?_GETxAPIxVAL,w,c
  1821  000C70  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1822  000C72  A4D8               	btfss	status,2,c
  1823  000C74  D02B               	goto	l214
  1824  000C76  0E00               	movlw	0
  1825  000C78  6E14               	movwf	GETxAPIxVAL@index+1,c
  1826  000C7A  0E25               	movlw	37
  1827  000C7C  6E13               	movwf	GETxAPIxVAL@index,c
  1828  000C7E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1829  000C82  5013               	movf	?_GETxAPIxVAL,w,c
  1830  000C84  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1831  000C86  A4D8               	btfss	status,2,c
  1832  000C88  D021               	goto	l214
  1833  000C8A  0E00               	movlw	0
  1834  000C8C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1835  000C8E  0E26               	movlw	38
  1836  000C90  6E13               	movwf	GETxAPIxVAL@index,c
  1837  000C92  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1838  000C96  5013               	movf	?_GETxAPIxVAL,w,c
  1839  000C98  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1840  000C9A  A4D8               	btfss	status,2,c
  1841  000C9C  D017               	goto	l214
  1842  000C9E  0E00               	movlw	0
  1843  000CA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1844  000CA2  0E22               	movlw	34
  1845  000CA4  6E13               	movwf	GETxAPIxVAL@index,c
  1846  000CA6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1847  000CAA  5013               	movf	?_GETxAPIxVAL,w,c
  1848  000CAC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1849  000CAE  A4D8               	btfss	status,2,c
  1850  000CB0  D00D               	goto	l214
  1851  000CB2  0E00               	movlw	0
  1852  000CB4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1853  000CB6  0E20               	movlw	32
  1854  000CB8  6E13               	movwf	GETxAPIxVAL@index,c
  1855  000CBA  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1856  000CBE  5013               	movf	?_GETxAPIxVAL,w,c
  1857  000CC0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1858  000CC2  A4D8               	btfss	status,2,c
  1859  000CC4  D003               	goto	l214
  1860                           
  1861                           ;State_Mchn.c: 140: {
  1862                           ;State_Mchn.c: 141: Switch_Init = 3;
  1863  000CC6  0E03               	movlw	3
  1864  000CC8  0100               	movlb	0	; () banked
  1865  000CCA  6F8A               	movwf	_Switch_Init& (0+255),b
  1866  000CCC                     l214:
  1867                           
  1868                           ;State_Mchn.c: 142: }
  1869                           ;State_Mchn.c: 143: Red_Led(0);
  1870                           
  1871                           ; BSR set to: 0
  1872  000CCC  0E00               	movlw	0
  1873  000CCE  ECB6  F01E         	call	_Red_Led
  1874                           
  1875                           ;State_Mchn.c: 144: Green_Led(2);
  1876  000CD2  0E02               	movlw	2
  1877  000CD4  ECF6  F01E         	call	_Green_Led
  1878                           
  1879                           ;State_Mchn.c: 145: break;
  1880  000CD8  EFD4  F00A         	goto	l304
  1881  000CDC  0E00               	movlw	0
  1882  000CDE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1883  000CE0  0E23               	movlw	35
  1884  000CE2  6E13               	movwf	GETxAPIxVAL@index,c
  1885  000CE4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1886  000CE8  5013               	movf	?_GETxAPIxVAL,w,c
  1887  000CEA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1888  000CEC  B4D8               	btfsc	status,2,c
  1889  000CEE  D00B               	goto	l216
  1890                           
  1891                           ;State_Mchn.c: 148: {
  1892                           ;State_Mchn.c: 149: SETxAPIxVAL(40, 1);
  1893  000CF0  0E00               	movlw	0
  1894  000CF2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1895  000CF4  0E28               	movlw	40
  1896  000CF6  6E19               	movwf	SETxAPIxVAL@index,c
  1897  000CF8  0E00               	movlw	0
  1898  000CFA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1899  000CFC  0E01               	movlw	1
  1900  000CFE  6E1B               	movwf	SETxAPIxVAL@value,c
  1901  000D00  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1902  000D04  D07D               	goto	u8550
  1903  000D06                     l216:
  1904                           
  1905                           ;State_Mchn.c: 152: }
  1906                           ;State_Mchn.c: 153: if(GETxAPIxVAL(36))
  1907                           
  1908                           ; BSR set to: 0
  1909  000D06  0E00               	movlw	0
  1910  000D08  6E14               	movwf	GETxAPIxVAL@index+1,c
  1911  000D0A  0E24               	movlw	36
  1912  000D0C  6E13               	movwf	GETxAPIxVAL@index,c
  1913  000D0E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1914  000D12  5013               	movf	?_GETxAPIxVAL,w,c
  1915  000D14  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1916  000D16  B4D8               	btfsc	status,2,c
  1917  000D18  D00B               	goto	l217
  1918                           
  1919                           ;State_Mchn.c: 154: {
  1920                           ;State_Mchn.c: 155: SETxAPIxVAL(40, 2);
  1921  000D1A  0E00               	movlw	0
  1922  000D1C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1923  000D1E  0E28               	movlw	40
  1924  000D20  6E19               	movwf	SETxAPIxVAL@index,c
  1925  000D22  0E00               	movlw	0
  1926  000D24  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1927  000D26  0E02               	movlw	2
  1928  000D28  6E1B               	movwf	SETxAPIxVAL@value,c
  1929  000D2A  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1930  000D2E  D068               	goto	u8550
  1931  000D30                     l217:
  1932                           
  1933                           ;State_Mchn.c: 158: }
  1934                           ;State_Mchn.c: 159: if(GETxAPIxVAL(37))
  1935                           
  1936                           ; BSR set to: 0
  1937  000D30  0E00               	movlw	0
  1938  000D32  6E14               	movwf	GETxAPIxVAL@index+1,c
  1939  000D34  0E25               	movlw	37
  1940  000D36  6E13               	movwf	GETxAPIxVAL@index,c
  1941  000D38  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1942  000D3C  5013               	movf	?_GETxAPIxVAL,w,c
  1943  000D3E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1944  000D40  B4D8               	btfsc	status,2,c
  1945  000D42  D00B               	goto	l218
  1946                           
  1947                           ;State_Mchn.c: 160: {
  1948                           ;State_Mchn.c: 161: SETxAPIxVAL(40, 3);
  1949  000D44  0E00               	movlw	0
  1950  000D46  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1951  000D48  0E28               	movlw	40
  1952  000D4A  6E19               	movwf	SETxAPIxVAL@index,c
  1953  000D4C  0E00               	movlw	0
  1954  000D4E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1955  000D50  0E03               	movlw	3
  1956  000D52  6E1B               	movwf	SETxAPIxVAL@value,c
  1957  000D54  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1958  000D58  D053               	goto	u8550
  1959  000D5A                     l218:
  1960                           
  1961                           ;State_Mchn.c: 164: }
  1962                           ;State_Mchn.c: 165: if(GETxAPIxVAL(38))
  1963                           
  1964                           ; BSR set to: 0
  1965  000D5A  0E00               	movlw	0
  1966  000D5C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1967  000D5E  0E26               	movlw	38
  1968  000D60  6E13               	movwf	GETxAPIxVAL@index,c
  1969  000D62  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1970  000D66  5013               	movf	?_GETxAPIxVAL,w,c
  1971  000D68  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1972  000D6A  B4D8               	btfsc	status,2,c
  1973  000D6C  D00B               	goto	l219
  1974                           
  1975                           ;State_Mchn.c: 166: {
  1976                           ;State_Mchn.c: 167: SETxAPIxVAL(40, 4);
  1977  000D6E  0E00               	movlw	0
  1978  000D70  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1979  000D72  0E28               	movlw	40
  1980  000D74  6E19               	movwf	SETxAPIxVAL@index,c
  1981  000D76  0E00               	movlw	0
  1982  000D78  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1983  000D7A  0E04               	movlw	4
  1984  000D7C  6E1B               	movwf	SETxAPIxVAL@value,c
  1985  000D7E  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  1986  000D82  D03E               	goto	u8550
  1987  000D84                     l219:
  1988                           
  1989                           ;State_Mchn.c: 170: }
  1990                           ;State_Mchn.c: 171: if(GETxAPIxVAL(34))
  1991                           
  1992                           ; BSR set to: 0
  1993  000D84  0E00               	movlw	0
  1994  000D86  6E14               	movwf	GETxAPIxVAL@index+1,c
  1995  000D88  0E22               	movlw	34
  1996  000D8A  6E13               	movwf	GETxAPIxVAL@index,c
  1997  000D8C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  1998  000D90  5013               	movf	?_GETxAPIxVAL,w,c
  1999  000D92  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2000  000D94  B4D8               	btfsc	status,2,c
  2001  000D96  D00B               	goto	l220
  2002                           
  2003                           ;State_Mchn.c: 172: {
  2004                           ;State_Mchn.c: 173: SETxAPIxVAL(40, 5);
  2005  000D98  0E00               	movlw	0
  2006  000D9A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2007  000D9C  0E28               	movlw	40
  2008  000D9E  6E19               	movwf	SETxAPIxVAL@index,c
  2009  000DA0  0E00               	movlw	0
  2010  000DA2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2011  000DA4  0E05               	movlw	5
  2012  000DA6  6E1B               	movwf	SETxAPIxVAL@value,c
  2013  000DA8  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  2014  000DAC  D029               	goto	u8550
  2015  000DAE                     l220:
  2016                           
  2017                           ;State_Mchn.c: 176: }
  2018                           ;State_Mchn.c: 177: if(GETxAPIxVAL(32))
  2019                           
  2020                           ; BSR set to: 0
  2021  000DAE  0E00               	movlw	0
  2022  000DB0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2023  000DB2  0E20               	movlw	32
  2024  000DB4  6E13               	movwf	GETxAPIxVAL@index,c
  2025  000DB6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2026  000DBA  5013               	movf	?_GETxAPIxVAL,w,c
  2027  000DBC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2028  000DBE  B4D8               	btfsc	status,2,c
  2029  000DC0  D00B               	goto	l221
  2030                           
  2031                           ;State_Mchn.c: 178: {
  2032                           ;State_Mchn.c: 179: SETxAPIxVAL(40, 9);
  2033  000DC2  0E00               	movlw	0
  2034  000DC4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2035  000DC6  0E28               	movlw	40
  2036  000DC8  6E19               	movwf	SETxAPIxVAL@index,c
  2037  000DCA  0E00               	movlw	0
  2038  000DCC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2039  000DCE  0E09               	movlw	9
  2040  000DD0  6E1B               	movwf	SETxAPIxVAL@value,c
  2041  000DD2  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  2042  000DD6  D014               	goto	u8550
  2043  000DD8                     l221:
  2044                           
  2045                           ;State_Mchn.c: 182: }
  2046                           ;State_Mchn.c: 183: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  2047                           
  2048                           ; BSR set to: 0
  2049  000DD8  0E00               	movlw	0
  2050  000DDA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2051  000DDC  0E27               	movlw	39
  2052  000DDE  6E13               	movwf	GETxAPIxVAL@index,c
  2053  000DE0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2054  000DE4  5013               	movf	?_GETxAPIxVAL,w,c
  2055  000DE6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2056  000DE8  B4D8               	btfsc	status,2,c
  2057  000DEA  D00C               	goto	l222
  2058  000DEC  0E00               	movlw	0
  2059  000DEE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2060  000DF0  0E28               	movlw	40
  2061  000DF2  6E13               	movwf	GETxAPIxVAL@index,c
  2062  000DF4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2063  000DF8  5013               	movf	?_GETxAPIxVAL,w,c
  2064  000DFA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2065  000DFC  B4D8               	btfsc	status,2,c
  2066  000DFE  D002               	goto	l222
  2067  000E00                     u8550:
  2068                           
  2069                           ;State_Mchn.c: 184: Switch_Init = 4;
  2070  000E00  0E04               	movlw	4
  2071  000E02  D6B0               	goto	L1
  2072  000E04                     l222:
  2073                           
  2074                           ;State_Mchn.c: 186: }
  2075                           ;State_Mchn.c: 187: Green_Led(2);
  2076                           
  2077                           ; BSR set to: 0
  2078  000E04  0E02               	movlw	2
  2079  000E06  ECF6  F01E         	call	_Green_Led
  2080                           
  2081                           ;State_Mchn.c: 188: Switch_Init = 3;
  2082  000E0A  0E03               	movlw	3
  2083  000E0C  D6AB               	goto	L1
  2084  000E0E                     
  2085                           ; BSR set to: 0
  2086                           
  2087                           ; BSR set to: 0
  2088  000E0E  0E00               	movlw	0
  2089  000E10  6E14               	movwf	GETxAPIxVAL@index+1,c
  2090  000E12  0E23               	movlw	35
  2091  000E14  6E13               	movwf	GETxAPIxVAL@index,c
  2092  000E16  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2093  000E1A  5013               	movf	?_GETxAPIxVAL,w,c
  2094  000E1C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2095  000E1E  A4D8               	btfss	status,2,c
  2096  000E20  D07E               	goto	l226
  2097  000E22  0E00               	movlw	0
  2098  000E24  6E14               	movwf	GETxAPIxVAL@index+1,c
  2099  000E26  0E24               	movlw	36
  2100  000E28  6E13               	movwf	GETxAPIxVAL@index,c
  2101  000E2A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2102  000E2E  5013               	movf	?_GETxAPIxVAL,w,c
  2103  000E30  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2104  000E32  A4D8               	btfss	status,2,c
  2105  000E34  D074               	goto	l226
  2106  000E36  0E00               	movlw	0
  2107  000E38  6E14               	movwf	GETxAPIxVAL@index+1,c
  2108  000E3A  0E25               	movlw	37
  2109  000E3C  6E13               	movwf	GETxAPIxVAL@index,c
  2110  000E3E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2111  000E42  5013               	movf	?_GETxAPIxVAL,w,c
  2112  000E44  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2113  000E46  A4D8               	btfss	status,2,c
  2114  000E48  D06A               	goto	l226
  2115  000E4A  0E00               	movlw	0
  2116  000E4C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2117  000E4E  0E26               	movlw	38
  2118  000E50  6E13               	movwf	GETxAPIxVAL@index,c
  2119  000E52  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2120  000E56  5013               	movf	?_GETxAPIxVAL,w,c
  2121  000E58  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2122  000E5A  A4D8               	btfss	status,2,c
  2123  000E5C  D060               	goto	l226
  2124  000E5E  0E00               	movlw	0
  2125  000E60  6E14               	movwf	GETxAPIxVAL@index+1,c
  2126  000E62  0E22               	movlw	34
  2127  000E64  6E13               	movwf	GETxAPIxVAL@index,c
  2128  000E66  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2129  000E6A  5013               	movf	?_GETxAPIxVAL,w,c
  2130  000E6C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2131  000E6E  A4D8               	btfss	status,2,c
  2132  000E70  D056               	goto	l226
  2133  000E72  0E00               	movlw	0
  2134  000E74  6E14               	movwf	GETxAPIxVAL@index+1,c
  2135  000E76  0E20               	movlw	32
  2136  000E78  6E13               	movwf	GETxAPIxVAL@index,c
  2137  000E7A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2138  000E7E  5013               	movf	?_GETxAPIxVAL,w,c
  2139  000E80  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2140  000E82  A4D8               	btfss	status,2,c
  2141  000E84  D04C               	goto	l226
  2142                           
  2143                           ;State_Mchn.c: 192: {
  2144                           ;State_Mchn.c: 193: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  2145  000E86  0E00               	movlw	0
  2146  000E88  6E14               	movwf	GETxAPIxVAL@index+1,c
  2147  000E8A  0E27               	movlw	39
  2148  000E8C  6E13               	movwf	GETxAPIxVAL@index,c
  2149  000E8E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2150  000E92  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2151  000E96  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2152  000E9A  0E00               	movlw	0
  2153  000E9C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2154  000E9E  0E28               	movlw	40
  2155  000EA0  6E13               	movwf	GETxAPIxVAL@index,c
  2156  000EA2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2157  000EA6  5013               	movf	?_GETxAPIxVAL,w,c
  2158  000EA8  0100               	movlb	0	; () banked
  2159  000EAA  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  2160  000EAC  E11E               	bnz	l8908
  2161  000EAE  5014               	movf	?_GETxAPIxVAL+1,w,c
  2162  000EB0  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2163  000EB2  A4D8               	btfss	status,2,c
  2164  000EB4  D01A               	goto	l225
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;State_Mchn.c: 194: {
  2168                           ;State_Mchn.c: 195: SETxAPIxVAL(40, 0);
  2169  000EB6  0E00               	movlw	0
  2170  000EB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2171  000EBA  0E28               	movlw	40
  2172  000EBC  6E19               	movwf	SETxAPIxVAL@index,c
  2173  000EBE  0E00               	movlw	0
  2174  000EC0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2175  000EC2  0E00               	movlw	0
  2176  000EC4  6E1B               	movwf	SETxAPIxVAL@value,c
  2177  000EC6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  2178                           
  2179                           ;State_Mchn.c: 196: SETxAPIxVAL(39, 0);
  2180  000ECA  0E00               	movlw	0
  2181  000ECC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2182  000ECE  0E27               	movlw	39
  2183  000ED0  6E19               	movwf	SETxAPIxVAL@index,c
  2184  000ED2  0E00               	movlw	0
  2185  000ED4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2186  000ED6  0E00               	movlw	0
  2187  000ED8  6E1B               	movwf	SETxAPIxVAL@value,c
  2188  000EDA  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  2189                           
  2190                           ;State_Mchn.c: 197: Red_Led(1);
  2191  000EDE  0E01               	movlw	1
  2192  000EE0  ECB6  F01E         	call	_Red_Led
  2193                           
  2194                           ;State_Mchn.c: 198: Switch_Init = 1;
  2195  000EE4  0E01               	movlw	1
  2196  000EE6  0100               	movlb	0	; () banked
  2197  000EE8  6F8A               	movwf	_Switch_Init& (0+255),b
  2198  000EEA                     l225:
  2199  000EEA                     l8908:
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;State_Mchn.c: 200: }
  2203                           ;State_Mchn.c: 201: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  2204  000EEA  0E00               	movlw	0
  2205  000EEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2206  000EEE  0E27               	movlw	39
  2207  000EF0  6E13               	movwf	GETxAPIxVAL@index,c
  2208  000EF2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2209  000EF6  C013  F0CF         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2210  000EFA  C014  F0D0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2211  000EFE  0E00               	movlw	0
  2212  000F00  6E14               	movwf	GETxAPIxVAL@index+1,c
  2213  000F02  0E28               	movlw	40
  2214  000F04  6E13               	movwf	GETxAPIxVAL@index,c
  2215  000F06  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2216  000F0A  5013               	movf	?_GETxAPIxVAL,w,c
  2217  000F0C  0100               	movlb	0	; () banked
  2218  000F0E  19CF               	xorwf	??_Update_StateMchn& (0+255),w,b
  2219  000F10  E104               	bnz	u8630
  2220  000F12  5014               	movf	?_GETxAPIxVAL+1,w,c
  2221  000F14  19D0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2222  000F16  B4D8               	btfsc	status,2,c
  2223  000F18  D002               	goto	l226
  2224  000F1A                     u8630:
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;State_Mchn.c: 202: {
  2228                           ;State_Mchn.c: 203: Switch_Init = 5;
  2229  000F1A  0E05               	movlw	5
  2230  000F1C  6F8A               	movwf	_Switch_Init& (0+255),b
  2231  000F1E                     l226:
  2232                           
  2233                           ;State_Mchn.c: 204: }
  2234                           ;State_Mchn.c: 205: }
  2235                           ;State_Mchn.c: 206: Green_Led(2);
  2236                           
  2237                           ; BSR set to: 0
  2238                           
  2239                           ; BSR set to: 0
  2240  000F1E  0E02               	movlw	2
  2241  000F20  ECF6  F01E         	call	_Green_Led
  2242                           
  2243                           ;State_Mchn.c: 207: break;
  2244  000F24  D341               	goto	l304
  2245  000F26  0E00               	movlw	0
  2246  000F28  6E14               	movwf	GETxAPIxVAL@index+1,c
  2247  000F2A  0E28               	movlw	40
  2248  000F2C  6E13               	movwf	GETxAPIxVAL@index,c
  2249  000F2E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2250  000F32  0E09               	movlw	9
  2251  000F34  1813               	xorwf	?_GETxAPIxVAL,w,c
  2252  000F36  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2253  000F38  B4D8               	btfsc	status,2,c
  2254  000F3A  D003               	goto	l228
  2255                           
  2256                           ;State_Mchn.c: 210: {
  2257                           ;State_Mchn.c: 211: Switch_Init = 6;
  2258  000F3C  0E06               	movlw	6
  2259  000F3E  0100               	movlb	0	; () banked
  2260  000F40  6F8A               	movwf	_Switch_Init& (0+255),b
  2261  000F42                     l228:
  2262                           
  2263                           ;State_Mchn.c: 212: }
  2264                           ;State_Mchn.c: 213: if(GETxAPIxVAL(40) == 9)
  2265                           
  2266                           ; BSR set to: 0
  2267  000F42  0E00               	movlw	0
  2268  000F44  6E14               	movwf	GETxAPIxVAL@index+1,c
  2269  000F46  0E28               	movlw	40
  2270  000F48  6E13               	movwf	GETxAPIxVAL@index,c
  2271  000F4A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2272  000F4E  0E09               	movlw	9
  2273  000F50  1813               	xorwf	?_GETxAPIxVAL,w,c
  2274  000F52  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2275  000F54  A4D8               	btfss	status,2,c
  2276  000F56  D328               	goto	l304
  2277                           
  2278                           ;State_Mchn.c: 214: {
  2279                           ;State_Mchn.c: 215: Switch_Init = 9;
  2280  000F58  0E09               	movlw	9
  2281  000F5A  D604               	goto	L1
  2282  000F5C                     
  2283                           ; BSR set to: 0
  2284                           
  2285                           ; BSR set to: 0
  2286  000F5C  0E08               	movlw	8
  2287  000F5E  D603               	goto	L2
  2288  000F60                     
  2289                           ; BSR set to: 0
  2290                           
  2291                           ; BSR set to: 0
  2292  000F60  0E00               	movlw	0
  2293  000F62  6E14               	movwf	GETxAPIxVAL@index+1,c
  2294  000F64  0E20               	movlw	32
  2295  000F66  6E13               	movwf	GETxAPIxVAL@index,c
  2296  000F68  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2297  000F6C  5013               	movf	?_GETxAPIxVAL,w,c
  2298  000F6E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2299  000F70  A4D8               	btfss	status,2,c
  2300  000F72  D00A               	goto	u8670
  2301  000F74  0E00               	movlw	0
  2302  000F76  6E14               	movwf	GETxAPIxVAL@index+1,c
  2303  000F78  0E46               	movlw	70
  2304  000F7A  6E13               	movwf	GETxAPIxVAL@index,c
  2305  000F7C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2306  000F80  5013               	movf	?_GETxAPIxVAL,w,c
  2307  000F82  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2308  000F84  B4D8               	btfsc	status,2,c
  2309  000F86  D011               	goto	l232
  2310  000F88                     u8670:
  2311                           
  2312                           ;State_Mchn.c: 223: {
  2313                           ;State_Mchn.c: 224: Switch_Main = 2;
  2314  000F88  0E02               	movlw	2
  2315  000F8A  0100               	movlb	0	; () banked
  2316  000F8C  6FE1               	movwf	_Switch_Main& (0+255),b
  2317                           
  2318                           ;State_Mchn.c: 225: Switch_Init = 0;
  2319  000F8E  0E00               	movlw	0
  2320  000F90  6F8A               	movwf	_Switch_Init& (0+255),b
  2321                           
  2322                           ;State_Mchn.c: 226: Stop_Program = 0;
  2323  000F92  0E00               	movlw	0
  2324  000F94  6F87               	movwf	_Stop_Program& (0+255),b
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;State_Mchn.c: 227: SETxAPIxVAL(70, 0);
  2328  000F96  0E00               	movlw	0
  2329  000F98  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2330  000F9A  0E46               	movlw	70
  2331  000F9C  6E19               	movwf	SETxAPIxVAL@index,c
  2332  000F9E  0E00               	movlw	0
  2333  000FA0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2334  000FA2  0E00               	movlw	0
  2335  000FA4  6E1B               	movwf	SETxAPIxVAL@value,c
  2336  000FA6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  2337  000FAA                     l232:
  2338                           
  2339                           ;State_Mchn.c: 228: }
  2340                           ;State_Mchn.c: 229: Green_Led(3);
  2341  000FAA  0E03               	movlw	3
  2342  000FAC  ECF6  F01E         	call	_Green_Led
  2343                           
  2344                           ;State_Mchn.c: 230: Red_Led(0);
  2345  000FB0  0E00               	movlw	0
  2346  000FB2  ECB6  F01E         	call	_Red_Led
  2347                           
  2348                           ;State_Mchn.c: 231: break;
  2349  000FB6  D2F8               	goto	l304
  2350  000FB8  0E00               	movlw	0
  2351  000FBA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2352  000FBC  0E27               	movlw	39
  2353  000FBE  6E13               	movwf	GETxAPIxVAL@index,c
  2354  000FC0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2355  000FC4  0E05               	movlw	5
  2356  000FC6  1813               	xorwf	?_GETxAPIxVAL,w,c
  2357  000FC8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2358  000FCA  B4D8               	btfsc	status,2,c
  2359  000FCC  D014               	goto	l237
  2360  000FCE  D02B               	goto	l239
  2361  000FD0  0E01               	movlw	1
  2362  000FD2  D005               	goto	L5
  2363  000FD4                     
  2364                           ; BSR set to: 0
  2365  000FD4  0E05               	movlw	5
  2366  000FD6  D003               	goto	L5
  2367  000FD8                     
  2368                           ; BSR set to: 0
  2369  000FD8  0E02               	movlw	2
  2370  000FDA  D001               	goto	L5
  2371  000FDC                     
  2372                           ; BSR set to: 0
  2373  000FDC  0E03               	movlw	3
  2374  000FDE                     L5:
  2375  000FDE  0100               	movlb	0	; () banked
  2376  000FE0  6F89               	movwf	_Switch_Program& (0+255),b
  2377                           
  2378                           ;State_Mchn.c: 247: Switch_Init = 7;
  2379  000FE2  0E07               	movlw	7
  2380  000FE4  6F8A               	movwf	_Switch_Init& (0+255),b
  2381                           
  2382                           ;State_Mchn.c: 248: break;
  2383  000FE6  D01F               	goto	l239
  2384  000FE8                     
  2385                           ; BSR set to: 0
  2386  000FE8  0E08               	movlw	8
  2387  000FEA  0100               	movlb	0	; () banked
  2388  000FEC  6F8A               	movwf	_Switch_Init& (0+255),b
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;State_Mchn.c: 250: Red_Led(1);
  2392  000FEE  0E01               	movlw	1
  2393  000FF0  ECB6  F01E         	call	_Red_Led
  2394                           
  2395                           ;State_Mchn.c: 252: }
  2396                           
  2397                           ;State_Mchn.c: 251: break;
  2398  000FF4  D018               	goto	l239
  2399  000FF6                     l237:
  2400  000FF6  0E00               	movlw	0
  2401  000FF8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2402  000FFA  0E28               	movlw	40
  2403  000FFC  6E13               	movwf	GETxAPIxVAL@index,c
  2404  000FFE  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2405                           
  2406                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2407                           ; Switch size 1, requested type "space"
  2408                           ; Number of cases is 1, Range of values is 0 to 0
  2409                           ; switch strategies available:
  2410                           ; Name         Instructions Cycles
  2411                           ; simple_byte            4     3 (average)
  2412                           ;	Chosen strategy is simple_byte
  2413  001002  5014               	movf	?_GETxAPIxVAL+1,w,c
  2414  001004  0A00               	xorlw	0	; case 0
  2415  001006  A4D8               	btfss	status,2,c
  2416  001008  D7EF               	goto	l243
  2417                           
  2418                           ; Switch size 1, requested type "space"
  2419                           ; Number of cases is 4, Range of values is 1 to 4
  2420                           ; switch strategies available:
  2421                           ; Name         Instructions Cycles
  2422                           ; simple_byte           13     7 (average)
  2423                           ;	Chosen strategy is simple_byte
  2424  00100A  5013               	movf	?_GETxAPIxVAL,w,c
  2425  00100C  0A01               	xorlw	1	; case 1
  2426  00100E  B4D8               	btfsc	status,2,c
  2427  001010  D7DF               	goto	l238
  2428  001012  0A03               	xorlw	3	; case 2
  2429  001014  B4D8               	btfsc	status,2,c
  2430  001016  D7DE               	goto	l240
  2431  001018  0A01               	xorlw	1	; case 3
  2432  00101A  B4D8               	btfsc	status,2,c
  2433  00101C  D7DD               	goto	l241
  2434  00101E  0A07               	xorlw	7	; case 4
  2435  001020  B4D8               	btfsc	status,2,c
  2436  001022  D7DC               	goto	l242
  2437  001024  D7E1               	goto	l243
  2438  001026                     l239:
  2439                           
  2440                           ;State_Mchn.c: 253: }
  2441                           ;State_Mchn.c: 254: if(GETxAPIxVAL(40) == 5)
  2442  001026  0E00               	movlw	0
  2443  001028  6E14               	movwf	GETxAPIxVAL@index+1,c
  2444  00102A  0E28               	movlw	40
  2445  00102C  6E13               	movwf	GETxAPIxVAL@index,c
  2446  00102E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2447  001032  0E05               	movlw	5
  2448  001034  1813               	xorwf	?_GETxAPIxVAL,w,c
  2449  001036  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2450  001038  B4D8               	btfsc	status,2,c
  2451  00103A  D014               	goto	l245
  2452  00103C  D02B               	goto	l247
  2453  00103E  0E01               	movlw	1
  2454  001040  D005               	goto	L8
  2455  001042                     
  2456                           ; BSR set to: 0
  2457  001042  0E05               	movlw	5
  2458  001044  D003               	goto	L8
  2459  001046                     
  2460                           ; BSR set to: 0
  2461  001046  0E02               	movlw	2
  2462  001048  D001               	goto	L8
  2463  00104A                     
  2464                           ; BSR set to: 0
  2465  00104A  0E03               	movlw	3
  2466  00104C                     L8:
  2467  00104C  0100               	movlb	0	; () banked
  2468  00104E  6F89               	movwf	_Switch_Program& (0+255),b
  2469                           
  2470                           ;State_Mchn.c: 268: Switch_Init = 7;
  2471  001050  0E07               	movlw	7
  2472  001052  6F8A               	movwf	_Switch_Init& (0+255),b
  2473                           
  2474                           ;State_Mchn.c: 269: break;
  2475  001054  D01F               	goto	l247
  2476  001056                     
  2477                           ; BSR set to: 0
  2478  001056  0E08               	movlw	8
  2479  001058  0100               	movlb	0	; () banked
  2480  00105A  6F8A               	movwf	_Switch_Init& (0+255),b
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;State_Mchn.c: 271: Red_Led(1);
  2484  00105C  0E01               	movlw	1
  2485  00105E  ECB6  F01E         	call	_Red_Led
  2486                           
  2487                           ;State_Mchn.c: 273: }
  2488                           
  2489                           ;State_Mchn.c: 272: break;
  2490  001062  D018               	goto	l247
  2491  001064                     l245:
  2492  001064  0E00               	movlw	0
  2493  001066  6E14               	movwf	GETxAPIxVAL@index+1,c
  2494  001068  0E27               	movlw	39
  2495  00106A  6E13               	movwf	GETxAPIxVAL@index,c
  2496  00106C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2497                           
  2498                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2499                           ; Switch size 1, requested type "space"
  2500                           ; Number of cases is 1, Range of values is 0 to 0
  2501                           ; switch strategies available:
  2502                           ; Name         Instructions Cycles
  2503                           ; simple_byte            4     3 (average)
  2504                           ;	Chosen strategy is simple_byte
  2505  001070  5014               	movf	?_GETxAPIxVAL+1,w,c
  2506  001072  0A00               	xorlw	0	; case 0
  2507  001074  A4D8               	btfss	status,2,c
  2508  001076  D7EF               	goto	l251
  2509                           
  2510                           ; Switch size 1, requested type "space"
  2511                           ; Number of cases is 4, Range of values is 1 to 4
  2512                           ; switch strategies available:
  2513                           ; Name         Instructions Cycles
  2514                           ; simple_byte           13     7 (average)
  2515                           ;	Chosen strategy is simple_byte
  2516  001078  5013               	movf	?_GETxAPIxVAL,w,c
  2517  00107A  0A01               	xorlw	1	; case 1
  2518  00107C  B4D8               	btfsc	status,2,c
  2519  00107E  D7DF               	goto	l246
  2520  001080  0A03               	xorlw	3	; case 2
  2521  001082  B4D8               	btfsc	status,2,c
  2522  001084  D7DE               	goto	l248
  2523  001086  0A01               	xorlw	1	; case 3
  2524  001088  B4D8               	btfsc	status,2,c
  2525  00108A  D7DD               	goto	l249
  2526  00108C  0A07               	xorlw	7	; case 4
  2527  00108E  B4D8               	btfsc	status,2,c
  2528  001090  D7DC               	goto	l250
  2529  001092  D7E1               	goto	l251
  2530  001094                     l247:
  2531                           
  2532                           ;State_Mchn.c: 274: }
  2533                           ;State_Mchn.c: 275: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2534  001094  0E00               	movlw	0
  2535  001096  6E14               	movwf	GETxAPIxVAL@index+1,c
  2536  001098  0E27               	movlw	39
  2537  00109A  6E13               	movwf	GETxAPIxVAL@index,c
  2538  00109C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2539  0010A0  0E05               	movlw	5
  2540  0010A2  1813               	xorwf	?_GETxAPIxVAL,w,c
  2541  0010A4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2542  0010A6  B4D8               	btfsc	status,2,c
  2543  0010A8  D27F               	goto	l304
  2544  0010AA  0E00               	movlw	0
  2545  0010AC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2546  0010AE  0E28               	movlw	40
  2547  0010B0  6E13               	movwf	GETxAPIxVAL@index,c
  2548  0010B2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2549  0010B6  0E05               	movlw	5
  2550  0010B8  1813               	xorwf	?_GETxAPIxVAL,w,c
  2551  0010BA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2552  0010BC  A4D8               	btfss	status,2,c
  2553  0010BE  D095               	goto	l253
  2554  0010C0  D273               	goto	l304
  2555  0010C2                     
  2556                           ; BSR set to: 0
  2557  0010C2  0E01               	movlw	1
  2558  0010C4  D066               	goto	L19
  2559  0010C6                     
  2560                           ; BSR set to: 0
  2561  0010C6  0E02               	movlw	2
  2562  0010C8  D064               	goto	L19
  2563  0010CA                     
  2564                           ; BSR set to: 0
  2565  0010CA  0E04               	movlw	4
  2566  0010CC  D062               	goto	L19
  2567  0010CE                     
  2568                           ; BSR set to: 0
  2569  0010CE  0E08               	movlw	8
  2570  0010D0  0100               	movlb	0	; () banked
  2571  0010D2  6F8A               	movwf	_Switch_Init& (0+255),b
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;State_Mchn.c: 293: Red_Led(1);
  2575  0010D4  0E01               	movlw	1
  2576  0010D6  ECB6  F01E         	call	_Red_Led
  2577                           
  2578                           ;State_Mchn.c: 295: }
  2579                           
  2580                           ;State_Mchn.c: 294: break;
  2581  0010DA  D266               	goto	l304
  2582  0010DC  0E00               	movlw	0
  2583  0010DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2584  0010E0  0E28               	movlw	40
  2585  0010E2  6E13               	movwf	GETxAPIxVAL@index,c
  2586  0010E4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2587                           
  2588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2589                           ; Switch size 1, requested type "space"
  2590                           ; Number of cases is 1, Range of values is 0 to 0
  2591                           ; switch strategies available:
  2592                           ; Name         Instructions Cycles
  2593                           ; simple_byte            4     3 (average)
  2594                           ;	Chosen strategy is simple_byte
  2595  0010E8  5014               	movf	?_GETxAPIxVAL+1,w,c
  2596  0010EA  0A00               	xorlw	0	; case 0
  2597  0010EC  A4D8               	btfss	status,2,c
  2598  0010EE  D7EF               	goto	l261
  2599                           
  2600                           ; Switch size 1, requested type "space"
  2601                           ; Number of cases is 4, Range of values is 1 to 4
  2602                           ; switch strategies available:
  2603                           ; Name         Instructions Cycles
  2604                           ; simple_byte           13     7 (average)
  2605                           ;	Chosen strategy is simple_byte
  2606  0010F0  5013               	movf	?_GETxAPIxVAL,w,c
  2607  0010F2  0A01               	xorlw	1	; case 1
  2608  0010F4  B4D8               	btfsc	status,2,c
  2609  0010F6  D051               	goto	l285
  2610  0010F8  0A03               	xorlw	3	; case 2
  2611  0010FA  B4D8               	btfsc	status,2,c
  2612  0010FC  D7E2               	goto	l258
  2613  0010FE  0A01               	xorlw	1	; case 3
  2614  001100  B4D8               	btfsc	status,2,c
  2615  001102  D7E1               	goto	l259
  2616  001104  0A07               	xorlw	7	; case 4
  2617  001106  B4D8               	btfsc	status,2,c
  2618  001108  D7E0               	goto	l260
  2619  00110A  D7E1               	goto	l261
  2620  00110C                     
  2621                           ; BSR set to: 0
  2622  00110C  0E00               	movlw	0
  2623  00110E  D041               	goto	L19
  2624  001110                     
  2625                           ; BSR set to: 0
  2626  001110  0E08               	movlw	8
  2627  001112  0100               	movlb	0	; () banked
  2628  001114  6F8A               	movwf	_Switch_Init& (0+255),b
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;State_Mchn.c: 311: Red_Led(1);
  2632  001116  0E01               	movlw	1
  2633  001118  ECB6  F01E         	call	_Red_Led
  2634                           
  2635                           ;State_Mchn.c: 313: }
  2636                           
  2637                           ;State_Mchn.c: 312: break;
  2638  00111C  D245               	goto	l304
  2639  00111E  0E00               	movlw	0
  2640  001120  6E14               	movwf	GETxAPIxVAL@index+1,c
  2641  001122  0E28               	movlw	40
  2642  001124  6E13               	movwf	GETxAPIxVAL@index,c
  2643  001126  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2644                           
  2645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2646                           ; Switch size 1, requested type "space"
  2647                           ; Number of cases is 1, Range of values is 0 to 0
  2648                           ; switch strategies available:
  2649                           ; Name         Instructions Cycles
  2650                           ; simple_byte            4     3 (average)
  2651                           ;	Chosen strategy is simple_byte
  2652  00112A  5014               	movf	?_GETxAPIxVAL+1,w,c
  2653  00112C  0A00               	xorlw	0	; case 0
  2654  00112E  A4D8               	btfss	status,2,c
  2655  001130  D7EF               	goto	l270
  2656                           
  2657                           ; Switch size 1, requested type "space"
  2658                           ; Number of cases is 4, Range of values is 1 to 4
  2659                           ; switch strategies available:
  2660                           ; Name         Instructions Cycles
  2661                           ; simple_byte           13     7 (average)
  2662                           ;	Chosen strategy is simple_byte
  2663  001132  5013               	movf	?_GETxAPIxVAL,w,c
  2664  001134  0A01               	xorlw	1	; case 1
  2665  001136  B4D8               	btfsc	status,2,c
  2666  001138  D7C4               	goto	l258
  2667  00113A  0A03               	xorlw	3	; case 2
  2668  00113C  B4D8               	btfsc	status,2,c
  2669  00113E  D02D               	goto	l285
  2670  001140  0A01               	xorlw	1	; case 3
  2671  001142  B4D8               	btfsc	status,2,c
  2672  001144  D7E3               	goto	l268
  2673  001146  0A07               	xorlw	7	; case 4
  2674  001148  B4D8               	btfsc	status,2,c
  2675  00114A  D020               	goto	l283
  2676  00114C  D7E1               	goto	l270
  2677  00114E                     
  2678                           ; BSR set to: 0
  2679  00114E  0E08               	movlw	8
  2680  001150  0100               	movlb	0	; () banked
  2681  001152  6F8A               	movwf	_Switch_Init& (0+255),b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;State_Mchn.c: 329: Red_Led(1);
  2685  001154  0E01               	movlw	1
  2686  001156  ECB6  F01E         	call	_Red_Led
  2687                           
  2688                           ;State_Mchn.c: 331: }
  2689                           
  2690                           ;State_Mchn.c: 330: break;
  2691  00115A  D226               	goto	l304
  2692  00115C  0E00               	movlw	0
  2693  00115E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2694  001160  0E28               	movlw	40
  2695  001162  6E13               	movwf	GETxAPIxVAL@index,c
  2696  001164  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2697                           
  2698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2699                           ; Switch size 1, requested type "space"
  2700                           ; Number of cases is 1, Range of values is 0 to 0
  2701                           ; switch strategies available:
  2702                           ; Name         Instructions Cycles
  2703                           ; simple_byte            4     3 (average)
  2704                           ;	Chosen strategy is simple_byte
  2705  001168  5014               	movf	?_GETxAPIxVAL+1,w,c
  2706  00116A  0A00               	xorlw	0	; case 0
  2707  00116C  A4D8               	btfss	status,2,c
  2708  00116E  D7EF               	goto	l278
  2709                           
  2710                           ; Switch size 1, requested type "space"
  2711                           ; Number of cases is 4, Range of values is 1 to 4
  2712                           ; switch strategies available:
  2713                           ; Name         Instructions Cycles
  2714                           ; simple_byte           13     7 (average)
  2715                           ;	Chosen strategy is simple_byte
  2716  001170  5013               	movf	?_GETxAPIxVAL,w,c
  2717  001172  0A01               	xorlw	1	; case 1
  2718  001174  B4D8               	btfsc	status,2,c
  2719  001176  D7A7               	goto	l259
  2720  001178  0A03               	xorlw	3	; case 2
  2721  00117A  B4D8               	btfsc	status,2,c
  2722  00117C  D7C7               	goto	l268
  2723  00117E  0A01               	xorlw	1	; case 3
  2724  001180  B4D8               	btfsc	status,2,c
  2725  001182  D00B               	goto	l285
  2726  001184  0A07               	xorlw	7	; case 4
  2727  001186  B4D8               	btfsc	status,2,c
  2728  001188  D003               	goto	l284
  2729  00118A  D7E1               	goto	l278
  2730  00118C                     l283:
  2731                           
  2732                           ; BSR set to: 0
  2733  00118C  0E06               	movlw	6
  2734  00118E  D001               	goto	L19
  2735  001190                     l284:
  2736                           
  2737                           ; BSR set to: 0
  2738  001190  0E03               	movlw	3
  2739  001192                     L19:
  2740  001192  0100               	movlb	0	; () banked
  2741  001194  6F89               	movwf	_Switch_Program& (0+255),b
  2742                           
  2743                           ;State_Mchn.c: 342: Switch_Init = 7;
  2744  001196  0E07               	movlw	7
  2745  001198  D4E6               	goto	L2
  2746  00119A                     l285:
  2747                           
  2748                           ; BSR set to: 0
  2749  00119A  0E00               	movlw	0
  2750  00119C  D4E3               	goto	L1
  2751  00119E                     
  2752                           ; BSR set to: 0
  2753  00119E  0E08               	movlw	8
  2754  0011A0  0100               	movlb	0	; () banked
  2755  0011A2  6F8A               	movwf	_Switch_Init& (0+255),b
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;State_Mchn.c: 347: Red_Led(1);
  2759  0011A4  0E01               	movlw	1
  2760  0011A6  ECB6  F01E         	call	_Red_Led
  2761                           
  2762                           ;State_Mchn.c: 349: }
  2763                           
  2764                           ;State_Mchn.c: 348: break;
  2765  0011AA  D1FE               	goto	l304
  2766  0011AC  0E00               	movlw	0
  2767  0011AE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2768  0011B0  0E28               	movlw	40
  2769  0011B2  6E13               	movwf	GETxAPIxVAL@index,c
  2770  0011B4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2771                           
  2772                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2773                           ; Switch size 1, requested type "space"
  2774                           ; Number of cases is 1, Range of values is 0 to 0
  2775                           ; switch strategies available:
  2776                           ; Name         Instructions Cycles
  2777                           ; simple_byte            4     3 (average)
  2778                           ;	Chosen strategy is simple_byte
  2779  0011B8  5014               	movf	?_GETxAPIxVAL+1,w,c
  2780  0011BA  0A00               	xorlw	0	; case 0
  2781  0011BC  A4D8               	btfss	status,2,c
  2782  0011BE  D7EF               	goto	l286
  2783                           
  2784                           ; Switch size 1, requested type "space"
  2785                           ; Number of cases is 4, Range of values is 1 to 4
  2786                           ; switch strategies available:
  2787                           ; Name         Instructions Cycles
  2788                           ; simple_byte           13     7 (average)
  2789                           ;	Chosen strategy is simple_byte
  2790  0011C0  5013               	movf	?_GETxAPIxVAL,w,c
  2791  0011C2  0A01               	xorlw	1	; case 1
  2792  0011C4  B4D8               	btfsc	status,2,c
  2793  0011C6  D781               	goto	l260
  2794  0011C8  0A03               	xorlw	3	; case 2
  2795  0011CA  B4D8               	btfsc	status,2,c
  2796  0011CC  D7DF               	goto	l283
  2797  0011CE  0A01               	xorlw	1	; case 3
  2798  0011D0  B4D8               	btfsc	status,2,c
  2799  0011D2  D7DE               	goto	l284
  2800  0011D4  0A07               	xorlw	7	; case 4
  2801  0011D6  B4D8               	btfsc	status,2,c
  2802  0011D8  D7E0               	goto	l285
  2803  0011DA  D7E1               	goto	l286
  2804  0011DC  0E08               	movlw	8
  2805  0011DE  0100               	movlb	0	; () banked
  2806  0011E0  6F8A               	movwf	_Switch_Init& (0+255),b
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;State_Mchn.c: 352: Red_Led(1);
  2810  0011E2  0E01               	movlw	1
  2811  0011E4  ECB6  F01E         	call	_Red_Led
  2812                           
  2813                           ;State_Mchn.c: 354: }
  2814                           
  2815                           ;State_Mchn.c: 353: break;
  2816  0011E8  D1DF               	goto	l304
  2817  0011EA                     l253:
  2818  0011EA  0E00               	movlw	0
  2819  0011EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2820  0011EE  0E27               	movlw	39
  2821  0011F0  6E13               	movwf	GETxAPIxVAL@index,c
  2822  0011F2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2823                           
  2824                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2825                           ; Switch size 1, requested type "space"
  2826                           ; Number of cases is 1, Range of values is 0 to 0
  2827                           ; switch strategies available:
  2828                           ; Name         Instructions Cycles
  2829                           ; simple_byte            4     3 (average)
  2830                           ;	Chosen strategy is simple_byte
  2831  0011F6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2832  0011F8  0A00               	xorlw	0	; case 0
  2833  0011FA  A4D8               	btfss	status,2,c
  2834  0011FC  D7EF               	goto	l287
  2835                           
  2836                           ; Switch size 1, requested type "space"
  2837                           ; Number of cases is 4, Range of values is 1 to 4
  2838                           ; switch strategies available:
  2839                           ; Name         Instructions Cycles
  2840                           ; simple_byte           13     7 (average)
  2841                           ;	Chosen strategy is simple_byte
  2842  0011FE  5013               	movf	?_GETxAPIxVAL,w,c
  2843  001200  0A01               	xorlw	1	; case 1
  2844  001202  B4D8               	btfsc	status,2,c
  2845  001204  D76B               	goto	l255
  2846  001206  0A03               	xorlw	3	; case 2
  2847  001208  B4D8               	btfsc	status,2,c
  2848  00120A  D789               	goto	l264
  2849  00120C  0A01               	xorlw	1	; case 3
  2850  00120E  B4D8               	btfsc	status,2,c
  2851  001210  D7A5               	goto	l272
  2852  001212  0A07               	xorlw	7	; case 4
  2853  001214  B4D8               	btfsc	status,2,c
  2854  001216  D7CA               	goto	l280
  2855  001218  D7E1               	goto	l287
  2856  00121A  0E0B               	movlw	11
  2857  00121C  D4A3               	goto	L1
  2858  00121E                     
  2859                           ; BSR set to: 0
  2860                           
  2861                           ; BSR set to: 0
  2862  00121E  0E00               	movlw	0
  2863  001220  6E14               	movwf	GETxAPIxVAL@index+1,c
  2864  001222  0E20               	movlw	32
  2865  001224  6E13               	movwf	GETxAPIxVAL@index,c
  2866  001226  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2867  00122A  5013               	movf	?_GETxAPIxVAL,w,c
  2868  00122C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2869  00122E  A4D8               	btfss	status,2,c
  2870  001230  D00A               	goto	u8730
  2871  001232  0E00               	movlw	0
  2872  001234  6E14               	movwf	GETxAPIxVAL@index+1,c
  2873  001236  0E46               	movlw	70
  2874  001238  6E13               	movwf	GETxAPIxVAL@index,c
  2875  00123A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2876  00123E  5013               	movf	?_GETxAPIxVAL,w,c
  2877  001240  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2878  001242  B4D8               	btfsc	status,2,c
  2879  001244  D007               	goto	l290
  2880  001246                     u8730:
  2881                           
  2882                           ;State_Mchn.c: 362: {
  2883                           ;State_Mchn.c: 363: Switch_Main = 3;
  2884  001246  0E03               	movlw	3
  2885  001248  0100               	movlb	0	; () banked
  2886  00124A  6FE1               	movwf	_Switch_Main& (0+255),b
  2887                           
  2888                           ;State_Mchn.c: 364: Switch_Init = 0;
  2889  00124C  0E00               	movlw	0
  2890  00124E  6F8A               	movwf	_Switch_Init& (0+255),b
  2891                           
  2892                           ;State_Mchn.c: 365: Stop_Program = 0;
  2893  001250  0E00               	movlw	0
  2894  001252  6F87               	movwf	_Stop_Program& (0+255),b
  2895  001254                     l290:
  2896                           
  2897                           ;State_Mchn.c: 366: }
  2898                           ;State_Mchn.c: 367: Green_Led(3);
  2899                           
  2900                           ; BSR set to: 0
  2901  001254  0E03               	movlw	3
  2902  001256  ECF6  F01E         	call	_Green_Led
  2903                           
  2904                           ;State_Mchn.c: 368: Red_Led(0);
  2905  00125A  0E00               	movlw	0
  2906  00125C  ECB6  F01E         	call	_Red_Led
  2907                           
  2908                           ;State_Mchn.c: 369: break;
  2909  001260  D1A3               	goto	l304
  2910  001262  0E00               	movlw	0
  2911  001264  6E14               	movwf	GETxAPIxVAL@index+1,c
  2912  001266  0E27               	movlw	39
  2913  001268  6E13               	movwf	GETxAPIxVAL@index,c
  2914  00126A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2915  00126E  0E05               	movlw	5
  2916  001270  1813               	xorwf	?_GETxAPIxVAL,w,c
  2917  001272  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2918  001274  A4D8               	btfss	status,2,c
  2919  001276  D012               	goto	l296
  2920  001278                     u8740:
  2921                           
  2922                           ;State_Mchn.c: 372: {
  2923                           ;State_Mchn.c: 373: Switch_Program = 0;
  2924  001278  0E00               	movlw	0
  2925  00127A  D005               	goto	L23
  2926  00127C                     
  2927                           ; BSR set to: 0
  2928  00127C  0E01               	movlw	1
  2929  00127E  D003               	goto	L23
  2930  001280                     
  2931                           ; BSR set to: 0
  2932  001280  0E03               	movlw	3
  2933  001282  D001               	goto	L23
  2934  001284                     
  2935                           ; BSR set to: 0
  2936  001284  0E02               	movlw	2
  2937  001286                     L23:
  2938  001286  0100               	movlb	0	; () banked
  2939  001288  6F89               	movwf	_Switch_Program& (0+255),b
  2940  00128A  0E0A               	movlw	10
  2941  00128C  D46C               	goto	L2
  2942  00128E                     
  2943                           ; BSR set to: 0
  2944  00128E  0E0B               	movlw	11
  2945  001290  0100               	movlb	0	; () banked
  2946  001292  6F8A               	movwf	_Switch_Init& (0+255),b
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;State_Mchn.c: 383: Red_Led(1);
  2950  001294  0E01               	movlw	1
  2951  001296  ECB6  F01E         	call	_Red_Led
  2952                           
  2953                           ;State_Mchn.c: 385: }
  2954                           
  2955                           ;State_Mchn.c: 384: break;
  2956  00129A  D186               	goto	l304
  2957  00129C                     l296:
  2958  00129C  0E00               	movlw	0
  2959  00129E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2960  0012A0  0E27               	movlw	39
  2961  0012A2  6E13               	movwf	GETxAPIxVAL@index,c
  2962  0012A4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  2963                           
  2964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2965                           ; Switch size 1, requested type "space"
  2966                           ; Number of cases is 1, Range of values is 0 to 0
  2967                           ; switch strategies available:
  2968                           ; Name         Instructions Cycles
  2969                           ; simple_byte            4     3 (average)
  2970                           ;	Chosen strategy is simple_byte
  2971  0012A8  5014               	movf	?_GETxAPIxVAL+1,w,c
  2972  0012AA  0A00               	xorlw	0	; case 0
  2973  0012AC  A4D8               	btfss	status,2,c
  2974  0012AE  D7EF               	goto	l302
  2975                           
  2976                           ; Switch size 1, requested type "space"
  2977                           ; Number of cases is 4, Range of values is 1 to 4
  2978                           ; switch strategies available:
  2979                           ; Name         Instructions Cycles
  2980                           ; simple_byte           13     7 (average)
  2981                           ;	Chosen strategy is simple_byte
  2982  0012B0  5013               	movf	?_GETxAPIxVAL,w,c
  2983  0012B2  0A01               	xorlw	1	; case 1
  2984  0012B4  B4D8               	btfsc	status,2,c
  2985  0012B6  D7E2               	goto	l297
  2986  0012B8  0A03               	xorlw	3	; case 2
  2987  0012BA  B4D8               	btfsc	status,2,c
  2988  0012BC  D7E1               	goto	l299
  2989  0012BE  0A01               	xorlw	1	; case 3
  2990  0012C0  B4D8               	btfsc	status,2,c
  2991  0012C2  D7DA               	goto	u8740
  2992  0012C4  0A07               	xorlw	7	; case 4
  2993  0012C6  B4D8               	btfsc	status,2,c
  2994  0012C8  D7DD               	goto	l301
  2995  0012CA  D7E1               	goto	l302
  2996  0012CC  0E00               	movlw	0
  2997  0012CE  0100               	movlb	0	; () banked
  2998  0012D0  6F8A               	movwf	_Switch_Init& (0+255),b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;State_Mchn.c: 389: Red_Led(1);
  3002  0012D2  0E01               	movlw	1
  3003  0012D4  ECB6  F01E         	call	_Red_Led
  3004                           
  3005                           ;State_Mchn.c: 391: }
  3006                           
  3007                           ;State_Mchn.c: 390: break;
  3008  0012D8  D167               	goto	l304
  3009  0012DA                     l203:
  3010  0012DA  0100               	movlb	0	; () banked
  3011  0012DC  518A               	movf	_Switch_Init& (0+255),w,b
  3012                           
  3013                           ; Switch size 1, requested type "space"
  3014                           ; Number of cases is 12, Range of values is 0 to 11
  3015                           ; switch strategies available:
  3016                           ; Name         Instructions Cycles
  3017                           ; simple_byte           37    19 (average)
  3018                           ;	Chosen strategy is simple_byte
  3019  0012DE  0A00               	xorlw	0	; case 0
  3020  0012E0  B4D8               	btfsc	status,2,c
  3021  0012E2  D423               	goto	l204
  3022  0012E4  0A01               	xorlw	1	; case 1
  3023  0012E6  B4D8               	btfsc	status,2,c
  3024  0012E8  D428               	goto	l206
  3025  0012EA  0A03               	xorlw	3	; case 2
  3026  0012EC  B4D8               	btfsc	status,2,c
  3027  0012EE  D4AF               	goto	l213
  3028  0012F0  0A01               	xorlw	1	; case 3
  3029  0012F2  B4D8               	btfsc	status,2,c
  3030  0012F4  D4F3               	goto	l215
  3031  0012F6  0A07               	xorlw	7	; case 4
  3032  0012F8  B4D8               	btfsc	status,2,c
  3033  0012FA  D589               	goto	l223
  3034  0012FC  0A01               	xorlw	1	; case 5
  3035  0012FE  B4D8               	btfsc	status,2,c
  3036  001300  D612               	goto	l227
  3037  001302  0A03               	xorlw	3	; case 6
  3038  001304  B4D8               	btfsc	status,2,c
  3039  001306  D62A               	goto	l230
  3040  001308  0A01               	xorlw	1	; case 7
  3041  00130A  B4D8               	btfsc	status,2,c
  3042  00130C  D629               	goto	l231
  3043  00130E  0A0F               	xorlw	15	; case 8
  3044  001310  B4D8               	btfsc	status,2,c
  3045  001312  D652               	goto	l235
  3046  001314  0A01               	xorlw	1	; case 9
  3047  001316  B4D8               	btfsc	status,2,c
  3048  001318  D780               	goto	l288
  3049  00131A  0A03               	xorlw	3	; case 10
  3050  00131C  B4D8               	btfsc	status,2,c
  3051  00131E  D77F               	goto	l289
  3052  001320  0A01               	xorlw	1	; case 11
  3053  001322  B4D8               	btfsc	status,2,c
  3054  001324  D79E               	goto	l293
  3055  001326  D7D2               	goto	l303
  3056  001328                     
  3057                           ; BSR set to: 0
  3058                           
  3059                           ; BSR set to: 0
  3060  001328  0E01               	movlw	1
  3061  00132A  6FCD               	movwf	Train_Path@To& (0+255),b
  3062  00132C  0E03               	movlw	3
  3063  00132E  EC20  F011         	call	_Train_Path
  3064  001332  0900               	iorlw	0
  3065  001334  A4D8               	btfss	status,2,c
  3066  001336  D087               	goto	l310
  3067                           
  3068                           ;State_Mchn.c: 398: {
  3069                           ;State_Mchn.c: 399: Switch_Program = 1;
  3070  001338  0E01               	movlw	1
  3071  00133A  0100               	movlb	0	; () banked
  3072  00133C  6F89               	movwf	_Switch_Program& (0+255),b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;State_Mchn.c: 400: EEPROMxSTORE();
  3076  00133E  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3077  001342                     l9100:
  3078                           
  3079                           ;State_Mchn.c: 401: if(Stop_Program == 1)
  3080  001342  0100               	movlb	0	; () banked
  3081  001344  0587               	decf	_Stop_Program& (0+255),w,b
  3082  001346  A4D8               	btfss	status,2,c
  3083  001348  D07E               	goto	l310
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;State_Mchn.c: 402: {
  3087                           ;State_Mchn.c: 403: Switch_Main = 1;
  3088  00134A  0E01               	movlw	1
  3089  00134C  6FE1               	movwf	_Switch_Main& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;State_Mchn.c: 405: }
  3093                           ;State_Mchn.c: 406: }
  3094                           ;State_Mchn.c: 407: break;
  3095                           
  3096                           ; BSR set to: 0
  3097  00134E  D07B               	goto	l310
  3098  001350                     
  3099                           ; BSR set to: 0
  3100                           
  3101                           ; BSR set to: 0
  3102  001350  0E03               	movlw	3
  3103  001352  6FCD               	movwf	Train_Path@To& (0+255),b
  3104  001354  0E02               	movlw	2
  3105  001356  EC20  F011         	call	_Train_Path
  3106  00135A  0900               	iorlw	0
  3107  00135C  A4D8               	btfss	status,2,c
  3108  00135E  D073               	goto	l310
  3109                           
  3110                           ;State_Mchn.c: 410: {
  3111                           ;State_Mchn.c: 411: Switch_Program = 2;
  3112  001360  0E02               	movlw	2
  3113  001362  0100               	movlb	0	; () banked
  3114  001364  6F89               	movwf	_Switch_Program& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;State_Mchn.c: 412: EEPROMxSTORE();
  3118  001366  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3119  00136A  D7EB               	goto	l9100
  3120  00136C                     
  3121                           ; BSR set to: 0
  3122                           
  3123                           ; BSR set to: 0
  3124  00136C  0E04               	movlw	4
  3125  00136E  6FCD               	movwf	Train_Path@To& (0+255),b
  3126  001370  0E01               	movlw	1
  3127  001372  EC20  F011         	call	_Train_Path
  3128  001376  0900               	iorlw	0
  3129  001378  A4D8               	btfss	status,2,c
  3130  00137A  D065               	goto	l310
  3131                           
  3132                           ;State_Mchn.c: 422: {
  3133                           ;State_Mchn.c: 423: Switch_Program = 3;
  3134  00137C  0E03               	movlw	3
  3135  00137E  0100               	movlb	0	; () banked
  3136  001380  6F89               	movwf	_Switch_Program& (0+255),b
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;State_Mchn.c: 424: EEPROMxSTORE();
  3140  001382  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3141  001386  D7DD               	goto	l9100
  3142  001388                     
  3143                           ; BSR set to: 0
  3144                           
  3145                           ; BSR set to: 0
  3146  001388  0E01               	movlw	1
  3147  00138A  6FCD               	movwf	Train_Path@To& (0+255),b
  3148  00138C  0E03               	movlw	3
  3149  00138E  EC20  F011         	call	_Train_Path
  3150  001392  0900               	iorlw	0
  3151  001394  A4D8               	btfss	status,2,c
  3152  001396  D057               	goto	l310
  3153                           
  3154                           ;State_Mchn.c: 434: {
  3155                           ;State_Mchn.c: 435: Switch_Program = 4;
  3156  001398  0E04               	movlw	4
  3157  00139A  0100               	movlb	0	; () banked
  3158  00139C  6F89               	movwf	_Switch_Program& (0+255),b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;State_Mchn.c: 436: EEPROMxSTORE();
  3162  00139E  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3163  0013A2  D7CF               	goto	l9100
  3164  0013A4                     
  3165                           ; BSR set to: 0
  3166                           
  3167                           ; BSR set to: 0
  3168  0013A4  0E02               	movlw	2
  3169  0013A6  6FCD               	movwf	Train_Path@To& (0+255),b
  3170  0013A8  0E04               	movlw	4
  3171  0013AA  EC20  F011         	call	_Train_Path
  3172  0013AE  0900               	iorlw	0
  3173  0013B0  A4D8               	btfss	status,2,c
  3174  0013B2  D049               	goto	l310
  3175                           
  3176                           ;State_Mchn.c: 446: {
  3177                           ;State_Mchn.c: 447: Switch_Program = 5;
  3178  0013B4  0E05               	movlw	5
  3179  0013B6  0100               	movlb	0	; () banked
  3180  0013B8  6F89               	movwf	_Switch_Program& (0+255),b
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;State_Mchn.c: 448: EEPROMxSTORE();
  3184  0013BA  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3185  0013BE  D7C1               	goto	l9100
  3186  0013C0                     
  3187                           ; BSR set to: 0
  3188                           
  3189                           ; BSR set to: 0
  3190  0013C0  0E04               	movlw	4
  3191  0013C2  6FCD               	movwf	Train_Path@To& (0+255),b
  3192  0013C4  0E01               	movlw	1
  3193  0013C6  EC20  F011         	call	_Train_Path
  3194  0013CA  0900               	iorlw	0
  3195  0013CC  A4D8               	btfss	status,2,c
  3196  0013CE  D03B               	goto	l310
  3197                           
  3198                           ;State_Mchn.c: 458: {
  3199                           ;State_Mchn.c: 459: Switch_Program = 6;
  3200  0013D0  0E06               	movlw	6
  3201  0013D2  0100               	movlb	0	; () banked
  3202  0013D4  6F89               	movwf	_Switch_Program& (0+255),b
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;State_Mchn.c: 460: EEPROMxSTORE();
  3206  0013D6  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3207  0013DA  D7B3               	goto	l9100
  3208  0013DC                     
  3209                           ; BSR set to: 0
  3210                           
  3211                           ; BSR set to: 0
  3212  0013DC  0E03               	movlw	3
  3213  0013DE  6FCD               	movwf	Train_Path@To& (0+255),b
  3214  0013E0  0E02               	movlw	2
  3215  0013E2  EC20  F011         	call	_Train_Path
  3216  0013E6  0900               	iorlw	0
  3217  0013E8  A4D8               	btfss	status,2,c
  3218  0013EA  D02D               	goto	l310
  3219                           
  3220                           ;State_Mchn.c: 470: {
  3221                           ;State_Mchn.c: 471: Switch_Program = 7;
  3222  0013EC  0E07               	movlw	7
  3223  0013EE  0100               	movlb	0	; () banked
  3224  0013F0  6F89               	movwf	_Switch_Program& (0+255),b
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;State_Mchn.c: 472: EEPROMxSTORE();
  3228  0013F2  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3229  0013F6  D7A5               	goto	l9100
  3230  0013F8                     
  3231                           ; BSR set to: 0
  3232                           
  3233                           ; BSR set to: 0
  3234  0013F8  0E02               	movlw	2
  3235  0013FA  6FCD               	movwf	Train_Path@To& (0+255),b
  3236  0013FC  0E04               	movlw	4
  3237  0013FE  EC20  F011         	call	_Train_Path
  3238  001402  0900               	iorlw	0
  3239  001404  A4D8               	btfss	status,2,c
  3240  001406  D01F               	goto	l310
  3241                           
  3242                           ;State_Mchn.c: 482: {
  3243                           ;State_Mchn.c: 483: Switch_Program = 0;
  3244  001408  0E00               	movlw	0
  3245  00140A  0100               	movlb	0	; () banked
  3246  00140C  6F89               	movwf	_Switch_Program& (0+255),b
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;State_Mchn.c: 484: EEPROMxSTORE();
  3250  00140E  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3251  001412  D797               	goto	l9100
  3252  001414                     
  3253                           ; BSR set to: 0
  3254                           
  3255                           ; BSR set to: 0
  3256  001414  5189               	movf	_Switch_Program& (0+255),w,b
  3257                           
  3258                           ; Switch size 1, requested type "space"
  3259                           ; Number of cases is 8, Range of values is 0 to 7
  3260                           ; switch strategies available:
  3261                           ; Name         Instructions Cycles
  3262                           ; simple_byte           25    13 (average)
  3263                           ;	Chosen strategy is simple_byte
  3264  001416  0A00               	xorlw	0	; case 0
  3265  001418  B4D8               	btfsc	status,2,c
  3266  00141A  D786               	goto	l307
  3267  00141C  0A01               	xorlw	1	; case 1
  3268  00141E  B4D8               	btfsc	status,2,c
  3269  001420  D797               	goto	l311
  3270  001422  0A03               	xorlw	3	; case 2
  3271  001424  B4D8               	btfsc	status,2,c
  3272  001426  D7A2               	goto	l314
  3273  001428  0A01               	xorlw	1	; case 3
  3274  00142A  B4D8               	btfsc	status,2,c
  3275  00142C  D7AD               	goto	l317
  3276  00142E  0A07               	xorlw	7	; case 4
  3277  001430  B4D8               	btfsc	status,2,c
  3278  001432  D7B8               	goto	l320
  3279  001434  0A01               	xorlw	1	; case 5
  3280  001436  B4D8               	btfsc	status,2,c
  3281  001438  D7C3               	goto	l323
  3282  00143A  0A03               	xorlw	3	; case 6
  3283  00143C  B4D8               	btfsc	status,2,c
  3284  00143E  D7CE               	goto	l326
  3285  001440  0A01               	xorlw	1	; case 7
  3286  001442  B4D8               	btfsc	status,2,c
  3287  001444  D7D9               	goto	l329
  3288  001446                     l310:
  3289                           
  3290                           ;State_Mchn.c: 680: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3291                           
  3292                           ; BSR set to: 0
  3293  001446  0E00               	movlw	0
  3294  001448  6E14               	movwf	GETxAPIxVAL@index+1,c
  3295  00144A  0E21               	movlw	33
  3296  00144C  6E13               	movwf	GETxAPIxVAL@index,c
  3297  00144E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3298  001452  5013               	movf	?_GETxAPIxVAL,w,c
  3299  001454  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3300  001456  A4D8               	btfss	status,2,c
  3301  001458  D00A               	goto	u8920
  3302  00145A  0E00               	movlw	0
  3303  00145C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3304  00145E  0E47               	movlw	71
  3305  001460  6E13               	movwf	GETxAPIxVAL@index,c
  3306  001462  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3307  001466  5013               	movf	?_GETxAPIxVAL,w,c
  3308  001468  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3309  00146A  B4D8               	btfsc	status,2,c
  3310  00146C  D00D               	goto	l333
  3311  00146E                     u8920:
  3312                           
  3313                           ;State_Mchn.c: 681: {
  3314                           ;State_Mchn.c: 682: Stop_Program = 1;
  3315  00146E  0E01               	movlw	1
  3316  001470  0100               	movlb	0	; () banked
  3317  001472  6F87               	movwf	_Stop_Program& (0+255),b
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;State_Mchn.c: 683: SETxAPIxVAL(71, 0);
  3321  001474  0E00               	movlw	0
  3322  001476  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3323  001478  0E47               	movlw	71
  3324  00147A  6E19               	movwf	SETxAPIxVAL@index,c
  3325  00147C  0E00               	movlw	0
  3326  00147E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3327  001480  0E00               	movlw	0
  3328  001482  6E1B               	movwf	SETxAPIxVAL@value,c
  3329  001484  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  3330  001488                     l333:
  3331                           
  3332                           ;State_Mchn.c: 684: }
  3333                           ;State_Mchn.c: 686: if(Stop_Program == 1)
  3334  001488  0100               	movlb	0	; () banked
  3335  00148A  0587               	decf	_Stop_Program& (0+255),w,b
  3336  00148C  A4D8               	btfss	status,2,c
  3337  00148E  D003               	goto	l336
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;State_Mchn.c: 687: {
  3341                           ;State_Mchn.c: 688: Red_Led(2);
  3342  001490  0E02               	movlw	2
  3343  001492  ECB6  F01E         	call	_Red_Led
  3344  001496                     l336:
  3345                           
  3346                           ;State_Mchn.c: 689: }
  3347                           ;State_Mchn.c: 691: Green_Led(1);
  3348  001496  0E01               	movlw	1
  3349  001498  ECF6  F01E         	call	_Green_Led
  3350                           
  3351                           ;State_Mchn.c: 693: break;
  3352  00149C  D085               	goto	l304
  3353  00149E  0E01               	movlw	1
  3354  0014A0  0100               	movlb	0	; () banked
  3355  0014A2  6FCD               	movwf	Train_Path@To& (0+255),b
  3356  0014A4  0E03               	movlw	3
  3357  0014A6  EC20  F011         	call	_Train_Path
  3358  0014AA  0900               	iorlw	0
  3359  0014AC  A4D8               	btfss	status,2,c
  3360  0014AE  D044               	goto	l342
  3361                           
  3362                           ;State_Mchn.c: 699: {
  3363                           ;State_Mchn.c: 700: Switch_Program = 1;
  3364  0014B0  0E01               	movlw	1
  3365  0014B2  0100               	movlb	0	; () banked
  3366  0014B4  6F89               	movwf	_Switch_Program& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;State_Mchn.c: 701: EEPROMxSTORE();
  3370  0014B6  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3371  0014BA                     l9196:
  3372                           
  3373                           ;State_Mchn.c: 702: if(Stop_Program == 1)
  3374  0014BA  0100               	movlb	0	; () banked
  3375  0014BC  0587               	decf	_Stop_Program& (0+255),w,b
  3376  0014BE  A4D8               	btfss	status,2,c
  3377  0014C0  D03B               	goto	l342
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;State_Mchn.c: 703: {
  3381                           ;State_Mchn.c: 704: Switch_Main = 1;
  3382  0014C2  0E01               	movlw	1
  3383  0014C4  6FE1               	movwf	_Switch_Main& (0+255),b
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;State_Mchn.c: 706: }
  3387                           ;State_Mchn.c: 707: }
  3388                           ;State_Mchn.c: 708: break;
  3389                           
  3390                           ; BSR set to: 0
  3391  0014C6  D038               	goto	l342
  3392  0014C8                     
  3393                           ; BSR set to: 0
  3394                           
  3395                           ; BSR set to: 0
  3396  0014C8  0E04               	movlw	4
  3397  0014CA  6FCD               	movwf	Train_Path@To& (0+255),b
  3398  0014CC  0E01               	movlw	1
  3399  0014CE  EC20  F011         	call	_Train_Path
  3400  0014D2  0900               	iorlw	0
  3401  0014D4  A4D8               	btfss	status,2,c
  3402  0014D6  D030               	goto	l342
  3403                           
  3404                           ;State_Mchn.c: 711: {
  3405                           ;State_Mchn.c: 712: Switch_Program = 2;
  3406  0014D8  0E02               	movlw	2
  3407  0014DA  0100               	movlb	0	; () banked
  3408  0014DC  6F89               	movwf	_Switch_Program& (0+255),b
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;State_Mchn.c: 713: EEPROMxSTORE();
  3412  0014DE  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3413  0014E2  D7EB               	goto	l9196
  3414  0014E4                     
  3415                           ; BSR set to: 0
  3416                           
  3417                           ; BSR set to: 0
  3418  0014E4  0E02               	movlw	2
  3419  0014E6  6FCD               	movwf	Train_Path@To& (0+255),b
  3420  0014E8  0E04               	movlw	4
  3421  0014EA  EC20  F011         	call	_Train_Path
  3422  0014EE  0900               	iorlw	0
  3423  0014F0  A4D8               	btfss	status,2,c
  3424  0014F2  D022               	goto	l342
  3425                           
  3426                           ;State_Mchn.c: 723: {
  3427                           ;State_Mchn.c: 724: Switch_Program = 3;
  3428  0014F4  0E03               	movlw	3
  3429  0014F6  0100               	movlb	0	; () banked
  3430  0014F8  6F89               	movwf	_Switch_Program& (0+255),b
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;State_Mchn.c: 725: EEPROMxSTORE();
  3434  0014FA  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3435  0014FE  D7DD               	goto	l9196
  3436  001500                     
  3437                           ; BSR set to: 0
  3438                           
  3439                           ; BSR set to: 0
  3440  001500  0E03               	movlw	3
  3441  001502  6FCD               	movwf	Train_Path@To& (0+255),b
  3442  001504  0E02               	movlw	2
  3443  001506  EC20  F011         	call	_Train_Path
  3444  00150A  0900               	iorlw	0
  3445  00150C  A4D8               	btfss	status,2,c
  3446  00150E  D014               	goto	l342
  3447                           
  3448                           ;State_Mchn.c: 735: {
  3449                           ;State_Mchn.c: 736: Switch_Program = 0;
  3450  001510  0E00               	movlw	0
  3451  001512  0100               	movlb	0	; () banked
  3452  001514  6F89               	movwf	_Switch_Program& (0+255),b
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;State_Mchn.c: 737: EEPROMxSTORE();
  3456  001516  EC24  F018         	call	_EEPROMxSTORE	;wreg free
  3457  00151A  D7CF               	goto	l9196
  3458  00151C                     
  3459                           ; BSR set to: 0
  3460  00151C  0100               	movlb	0	; () banked
  3461  00151E  5189               	movf	_Switch_Program& (0+255),w,b
  3462                           
  3463                           ; Switch size 1, requested type "space"
  3464                           ; Number of cases is 4, Range of values is 0 to 3
  3465                           ; switch strategies available:
  3466                           ; Name         Instructions Cycles
  3467                           ; simple_byte           13     7 (average)
  3468                           ;	Chosen strategy is simple_byte
  3469  001520  0A00               	xorlw	0	; case 0
  3470  001522  B4D8               	btfsc	status,2,c
  3471  001524  D7BC               	goto	l339
  3472  001526  0A01               	xorlw	1	; case 1
  3473  001528  B4D8               	btfsc	status,2,c
  3474  00152A  D7CE               	goto	l343
  3475  00152C  0A03               	xorlw	3	; case 2
  3476  00152E  B4D8               	btfsc	status,2,c
  3477  001530  D7D9               	goto	l346
  3478  001532  0A01               	xorlw	1	; case 3
  3479  001534  B4D8               	btfsc	status,2,c
  3480  001536  D7E4               	goto	l349
  3481  001538                     l342:
  3482                           
  3483                           ;State_Mchn.c: 931: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3484                           
  3485                           ; BSR set to: 0
  3486  001538  0E00               	movlw	0
  3487  00153A  6E14               	movwf	GETxAPIxVAL@index+1,c
  3488  00153C  0E21               	movlw	33
  3489  00153E  6E13               	movwf	GETxAPIxVAL@index,c
  3490  001540  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3491  001544  5013               	movf	?_GETxAPIxVAL,w,c
  3492  001546  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3493  001548  A4D8               	btfss	status,2,c
  3494  00154A  D00A               	goto	u9030
  3495  00154C  0E00               	movlw	0
  3496  00154E  6E14               	movwf	GETxAPIxVAL@index+1,c
  3497  001550  0E47               	movlw	71
  3498  001552  6E13               	movwf	GETxAPIxVAL@index,c
  3499  001554  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3500  001558  5013               	movf	?_GETxAPIxVAL,w,c
  3501  00155A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3502  00155C  B4D8               	btfsc	status,2,c
  3503  00155E  D00D               	goto	l353
  3504  001560                     u9030:
  3505                           
  3506                           ;State_Mchn.c: 932: {
  3507                           ;State_Mchn.c: 933: Stop_Program = 1;
  3508  001560  0E01               	movlw	1
  3509  001562  0100               	movlb	0	; () banked
  3510  001564  6F87               	movwf	_Stop_Program& (0+255),b
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;State_Mchn.c: 934: SETxAPIxVAL(71, 0);
  3514  001566  0E00               	movlw	0
  3515  001568  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3516  00156A  0E47               	movlw	71
  3517  00156C  6E19               	movwf	SETxAPIxVAL@index,c
  3518  00156E  0E00               	movlw	0
  3519  001570  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3520  001572  0E00               	movlw	0
  3521  001574  6E1B               	movwf	SETxAPIxVAL@value,c
  3522  001576  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  3523  00157A                     l353:
  3524                           
  3525                           ;State_Mchn.c: 935: }
  3526                           ;State_Mchn.c: 937: if(Stop_Program == 1)
  3527  00157A  0100               	movlb	0	; () banked
  3528  00157C  0587               	decf	_Stop_Program& (0+255),w,b
  3529  00157E  A4D8               	btfss	status,2,c
  3530  001580  D003               	goto	l356
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;State_Mchn.c: 938: {
  3534                           ;State_Mchn.c: 939: Red_Led(2);
  3535  001582  0E02               	movlw	2
  3536  001584  ECB6  F01E         	call	_Red_Led
  3537  001588                     l356:
  3538                           
  3539                           ;State_Mchn.c: 940: }
  3540                           ;State_Mchn.c: 942: Green_Led(1);
  3541  001588  0E01               	movlw	1
  3542  00158A  ECF6  F01E         	call	_Green_Led
  3543                           
  3544                           ;State_Mchn.c: 947: }
  3545                           
  3546                           ;State_Mchn.c: 946: default : break;
  3547                           
  3548                           ;State_Mchn.c: 944: break;
  3549  00158E  D00C               	goto	l304
  3550  001590                     l179:
  3551  001590  0100               	movlb	0	; () banked
  3552  001592  51E1               	movf	_Switch_Main& (0+255),w,b
  3553                           
  3554                           ; Switch size 1, requested type "space"
  3555                           ; Number of cases is 3, Range of values is 1 to 3
  3556                           ; switch strategies available:
  3557                           ; Name         Instructions Cycles
  3558                           ; simple_byte           10     6 (average)
  3559                           ;	Chosen strategy is simple_byte
  3560  001594  0A01               	xorlw	1	; case 1
  3561  001596  B4D8               	btfsc	status,2,c
  3562  001598  EF52  F004         	goto	l180
  3563  00159C  0A03               	xorlw	3	; case 2
  3564  00159E  B4D8               	btfsc	status,2,c
  3565  0015A0  D739               	goto	l306
  3566  0015A2  0A01               	xorlw	1	; case 3
  3567  0015A4  B4D8               	btfsc	status,2,c
  3568  0015A6  D7BA               	goto	l338
  3569  0015A8                     l304:
  3570                           
  3571                           ;State_Mchn.c: 948: SETxAPIxVAL(63, Switch_Main);
  3572                           
  3573                           ; BSR set to: 0
  3574  0015A8  0E00               	movlw	0
  3575  0015AA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3576  0015AC  0E3F               	movlw	63
  3577  0015AE  6E19               	movwf	SETxAPIxVAL@index,c
  3578  0015B0  C0E1  F01B         	movff	_Switch_Main,SETxAPIxVAL@value
  3579  0015B4  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3580  0015B6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  3581                           
  3582                           ;State_Mchn.c: 949: SETxAPIxVAL(80, Switch_Program);
  3583  0015BA  0E00               	movlw	0
  3584  0015BC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3585  0015BE  0E50               	movlw	80
  3586  0015C0  6E19               	movwf	SETxAPIxVAL@index,c
  3587  0015C2  C089  F01B         	movff	_Switch_Program,SETxAPIxVAL@value
  3588  0015C6  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3589  0015C8  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  3590  0015CC  0012               	return		;funcret
  3591  0015CE                     __end_of_Update_StateMchn:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           fsr1l	equ	0xFE1
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _Train_Path *****************
  3604 ;; Defined at:
  3605 ;;		line 967 in file "../State_Mchn.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  From            1    wreg     unsigned char 
  3608 ;;  To              1   23[BANK0 ] unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  From            1   24[BANK0 ] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3620 ;;      Params:         0       1       0       0       0       0       0       0       0
  3621 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3623 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        2 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    7
  3627 ;; This function calls:
  3628 ;;		_GETxAPIxVAL
  3629 ;;		_Junction
  3630 ;;		_Left_Mountain_From_The_Left
  3631 ;;		_Left_Mountain_From_The_Right
  3632 ;;		_Right_Mountain_From_The_Left
  3633 ;;		_Right_Mountain_From_The_Right
  3634 ;;		_SETxAPIxVAL
  3635 ;;		_Train_Move_Left_Brake
  3636 ;;		_Train_Move_Left_Start
  3637 ;;		_Train_Move_Right_Brake
  3638 ;;		_Train_Move_Right_Start
  3639 ;; This function is called by:
  3640 ;;		_Update_StateMchn
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text2
  3645  002240                     __ptext2:
  3646                           	opt stack 0
  3647  002240                     _Train_Path:
  3648                           	opt stack 22
  3649                           
  3650                           ;incstack = 0
  3651                           ;Train_Path@From stored from wreg
  3652  002240  0100               	movlb	0	; () banked
  3653  002242  6FCE               	movwf	Train_Path@From& (0+255),b
  3654                           
  3655                           ;State_Mchn.c: 969: static char Return_Val = 1;
  3656                           ;State_Mchn.c: 971: SETxAPIxVAL(61, From);
  3657  002244  0E00               	movlw	0
  3658  002246  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3659  002248  0E3D               	movlw	61
  3660  00224A  6E19               	movwf	SETxAPIxVAL@index,c
  3661  00224C  C0CE  F01B         	movff	Train_Path@From,SETxAPIxVAL@value
  3662  002250  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3663  002252  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  3664                           
  3665                           ;State_Mchn.c: 972: SETxAPIxVAL(62, To);
  3666  002256  0E00               	movlw	0
  3667  002258  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3668  00225A  0E3E               	movlw	62
  3669  00225C  6E19               	movwf	SETxAPIxVAL@index,c
  3670  00225E  C0CD  F01B         	movff	Train_Path@To,SETxAPIxVAL@value
  3671  002262  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3672  002264  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  3673                           
  3674                           ;State_Mchn.c: 974: switch(Switch_Train_Path)
  3675  002268  D1AC               	goto	l363
  3676  00226A  0E00               	movlw	0
  3677  00226C  6E1F               	movwf	Junction@Straight_Bend,c
  3678  00226E  0E01               	movlw	1
  3679  002270  EC45  F015         	call	_Junction
  3680  002274  0900               	iorlw	0
  3681  002276  B4D8               	btfsc	status,2,c
  3682  002278  D018               	goto	u7720
  3683  00227A                     l367:
  3684                           
  3685                           ;State_Mchn.c: 982: }
  3686                           ;State_Mchn.c: 983: Return_Val = 1;
  3687  00227A  0E01               	movlw	1
  3688  00227C  0100               	movlb	0	; () banked
  3689  00227E                     L40:
  3690  00227E  6FE0               	movwf	Train_Path@Return_Val& (0+255),b
  3691                           
  3692                           ;State_Mchn.c: 984: break;
  3693  002280  D1CA               	goto	l376
  3694  002282                     
  3695                           ; BSR set to: 0
  3696                           
  3697                           ; BSR set to: 0
  3698  002282  0E01               	movlw	1
  3699  002284  6E1F               	movwf	Junction@Straight_Bend,c
  3700  002286  0E01               	movlw	1
  3701  002288  EC45  F015         	call	_Junction
  3702  00228C  D7F3               	goto	L57
  3703  00228E                     
  3704                           ; BSR set to: 0
  3705                           
  3706                           ; BSR set to: 0
  3707  00228E  0E01               	movlw	1
  3708  002290  6E1F               	movwf	Junction@Straight_Bend,c
  3709  002292  0E00               	movlw	0
  3710  002294  EC45  F015         	call	_Junction
  3711  002298  D7ED               	goto	L57
  3712  00229A                     
  3713                           ; BSR set to: 0
  3714                           
  3715                           ; BSR set to: 0
  3716  00229A  0E00               	movlw	0
  3717  00229C  6E1F               	movwf	Junction@Straight_Bend,c
  3718  00229E  0E00               	movlw	0
  3719  0022A0  EC45  F015         	call	_Junction
  3720  0022A4  0900               	iorlw	0
  3721  0022A6  A4D8               	btfss	status,2,c
  3722  0022A8  D7E8               	goto	l367
  3723  0022AA                     u7720:
  3724                           
  3725                           ;State_Mchn.c: 1000: {
  3726                           ;State_Mchn.c: 1001: Switch_Train_Path = 1;
  3727  0022AA  0E01               	movlw	1
  3728  0022AC  D015               	goto	L41
  3729  0022AE                     
  3730                           ; BSR set to: 0
  3731  0022AE  0100               	movlb	0	; () banked
  3732  0022B0  51CE               	movf	Train_Path@From& (0+255),w,b
  3733                           
  3734                           ; Switch size 1, requested type "space"
  3735                           ; Number of cases is 4, Range of values is 1 to 4
  3736                           ; switch strategies available:
  3737                           ; Name         Instructions Cycles
  3738                           ; simple_byte           13     7 (average)
  3739                           ;	Chosen strategy is simple_byte
  3740  0022B2  0A01               	xorlw	1	; case 1
  3741  0022B4  B4D8               	btfsc	status,2,c
  3742  0022B6  D7EB               	goto	l371
  3743  0022B8  0A03               	xorlw	3	; case 2
  3744  0022BA  B4D8               	btfsc	status,2,c
  3745  0022BC  D7EE               	goto	l373
  3746  0022BE  0A01               	xorlw	1	; case 3
  3747  0022C0  B4D8               	btfsc	status,2,c
  3748  0022C2  D7D3               	goto	l366
  3749  0022C4  0A07               	xorlw	7	; case 4
  3750  0022C6  B4D8               	btfsc	status,2,c
  3751  0022C8  D7DC               	goto	l369
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;State_Mchn.c: 1008: break;
  3755  0022CA  D1A5               	goto	l376
  3756  0022CC                     
  3757                           ; BSR set to: 0
  3758                           
  3759                           ; BSR set to: 0
  3760  0022CC  0E00               	movlw	0
  3761  0022CE  6E1F               	movwf	Junction@Straight_Bend,c
  3762  0022D0  0E01               	movlw	1
  3763  0022D2  EC45  F015         	call	_Junction
  3764  0022D6  D016               	goto	L43
  3765  0022D8                     L41:
  3766  0022D8  0100               	movlb	0	; () banked
  3767  0022DA  6F88               	movwf	_Switch_Train_Path& (0+255),b
  3768                           
  3769                           ;State_Mchn.c: 1015: Return_Val = 1;
  3770  0022DC  0E01               	movlw	1
  3771  0022DE  6FE0               	movwf	Train_Path@Return_Val& (0+255),b
  3772  0022E0  D7CC               	goto	l367
  3773  0022E2                     
  3774                           ; BSR set to: 0
  3775                           
  3776                           ; BSR set to: 0
  3777  0022E2  0E01               	movlw	1
  3778  0022E4  6E1F               	movwf	Junction@Straight_Bend,c
  3779  0022E6  0E01               	movlw	1
  3780  0022E8  EC45  F015         	call	_Junction
  3781  0022EC  D00B               	goto	L43
  3782  0022EE                     
  3783                           ; BSR set to: 0
  3784                           
  3785                           ; BSR set to: 0
  3786  0022EE  0E01               	movlw	1
  3787  0022F0  6E1F               	movwf	Junction@Straight_Bend,c
  3788  0022F2  0E00               	movlw	0
  3789  0022F4  EC45  F015         	call	_Junction
  3790  0022F8  D005               	goto	L43
  3791  0022FA                     
  3792                           ; BSR set to: 0
  3793                           
  3794                           ; BSR set to: 0
  3795  0022FA  0E00               	movlw	0
  3796  0022FC  6E1F               	movwf	Junction@Straight_Bend,c
  3797  0022FE  0E00               	movlw	0
  3798  002300  EC45  F015         	call	_Junction
  3799  002304                     L43:
  3800  002304  0900               	iorlw	0
  3801  002306  A4D8               	btfss	status,2,c
  3802  002308  D7B8               	goto	l367
  3803                           
  3804                           ;State_Mchn.c: 1034: {
  3805                           ;State_Mchn.c: 1035: Switch_Train_Path = 2;
  3806  00230A  0E02               	movlw	2
  3807  00230C  D7E5               	goto	L41
  3808  00230E                     
  3809                           ; BSR set to: 0
  3810                           
  3811                           ; BSR set to: 0
  3812  00230E  51CD               	movf	Train_Path@To& (0+255),w,b
  3813                           
  3814                           ; Switch size 1, requested type "space"
  3815                           ; Number of cases is 4, Range of values is 1 to 4
  3816                           ; switch strategies available:
  3817                           ; Name         Instructions Cycles
  3818                           ; simple_byte           13     7 (average)
  3819                           ;	Chosen strategy is simple_byte
  3820  002310  0A01               	xorlw	1	; case 1
  3821  002312  B4D8               	btfsc	status,2,c
  3822  002314  D7EC               	goto	l384
  3823  002316  0A03               	xorlw	3	; case 2
  3824  002318  B4D8               	btfsc	status,2,c
  3825  00231A  D7EF               	goto	l386
  3826  00231C  0A01               	xorlw	1	; case 3
  3827  00231E  B4D8               	btfsc	status,2,c
  3828  002320  D7D5               	goto	l379
  3829  002322  0A07               	xorlw	7	; case 4
  3830  002324  B4D8               	btfsc	status,2,c
  3831  002326  D7DD               	goto	l382
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;State_Mchn.c: 1042: break;
  3835  002328  D176               	goto	l376
  3836  00232A                     
  3837                           ; BSR set to: 0
  3838                           
  3839                           ; BSR set to: 0
  3840  00232A  EC5F  F019         	call	_Train_Move_Right_Start	;wreg free
  3841  00232E  D008               	goto	L46
  3842  002330                     
  3843                           ; BSR set to: 0
  3844                           
  3845                           ; BSR set to: 0
  3846  002330  EC5F  F019         	call	_Train_Move_Right_Start	;wreg free
  3847  002334  D005               	goto	L46
  3848  002336                     
  3849                           ; BSR set to: 0
  3850                           
  3851                           ; BSR set to: 0
  3852  002336  ECC3  F018         	call	_Train_Move_Left_Start	;wreg free
  3853  00233A  D002               	goto	L46
  3854  00233C                     
  3855                           ; BSR set to: 0
  3856                           
  3857                           ; BSR set to: 0
  3858  00233C  ECC3  F018         	call	_Train_Move_Left_Start	;wreg free
  3859  002340                     L46:
  3860  002340  0900               	iorlw	0
  3861  002342  A4D8               	btfss	status,2,c
  3862  002344  D79A               	goto	l367
  3863                           
  3864                           ;State_Mchn.c: 1068: {
  3865                           ;State_Mchn.c: 1069: Switch_Train_Path = 3;
  3866  002346  0E03               	movlw	3
  3867  002348  D7C7               	goto	L41
  3868  00234A                     
  3869                           ; BSR set to: 0
  3870                           
  3871                           ; BSR set to: 0
  3872  00234A  51CD               	movf	Train_Path@To& (0+255),w,b
  3873                           
  3874                           ; Switch size 1, requested type "space"
  3875                           ; Number of cases is 4, Range of values is 1 to 4
  3876                           ; switch strategies available:
  3877                           ; Name         Instructions Cycles
  3878                           ; simple_byte           13     7 (average)
  3879                           ;	Chosen strategy is simple_byte
  3880  00234C  0A01               	xorlw	1	; case 1
  3881  00234E  B4D8               	btfsc	status,2,c
  3882  002350  D7F2               	goto	l396
  3883  002352  0A03               	xorlw	3	; case 2
  3884  002354  B4D8               	btfsc	status,2,c
  3885  002356  D7F2               	goto	l398
  3886  002358  0A01               	xorlw	1	; case 3
  3887  00235A  B4D8               	btfsc	status,2,c
  3888  00235C  D7E6               	goto	l391
  3889  00235E  0A07               	xorlw	7	; case 4
  3890  002360  B4D8               	btfsc	status,2,c
  3891  002362  D7E6               	goto	l394
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;State_Mchn.c: 1076: break;
  3895  002364  D158               	goto	l376
  3896  002366                     
  3897                           ; BSR set to: 0
  3898                           
  3899                           ; BSR set to: 0
  3900  002366  0E00               	movlw	0
  3901  002368  6E14               	movwf	GETxAPIxVAL@index+1,c
  3902  00236A  0E1C               	movlw	28
  3903  00236C  6E13               	movwf	GETxAPIxVAL@index,c
  3904  00236E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3905  002372  0413               	decf	?_GETxAPIxVAL,w,c
  3906  002374  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3907  002376  B4D8               	btfsc	status,2,c
  3908  002378  D09B               	goto	u7960
  3909                           
  3910                           ;State_Mchn.c: 1083: else if(GETxAPIxVAL(41) == 1){
  3911                           
  3912                           ; BSR set to: 0
  3913                           
  3914                           ;State_Mchn.c: 1082: }
  3915                           
  3916                           ;State_Mchn.c: 1081: Switch_Train_Path = 4;
  3917  00237A  0E00               	movlw	0
  3918  00237C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3919  00237E  0E29               	movlw	41
  3920  002380  6E13               	movwf	GETxAPIxVAL@index,c
  3921  002382  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3922  002386  0413               	decf	?_GETxAPIxVAL,w,c
  3923  002388  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3924  00238A  B4D8               	btfsc	status,2,c
  3925  00238C  D032               	goto	u7870
  3926                           
  3927                           ;State_Mchn.c: 1086: else if(GETxAPIxVAL(42) == 1){
  3928                           
  3929                           ; BSR set to: 0
  3930                           
  3931                           ;State_Mchn.c: 1085: }
  3932                           
  3933                           ;State_Mchn.c: 1084: Switch_Train_Path = 5;
  3934  00238E  0E00               	movlw	0
  3935  002390  6E14               	movwf	GETxAPIxVAL@index+1,c
  3936  002392  0E2A               	movlw	42
  3937  002394  6E13               	movwf	GETxAPIxVAL@index,c
  3938  002396  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3939  00239A  0413               	decf	?_GETxAPIxVAL,w,c
  3940  00239C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3941  00239E  B4D8               	btfsc	status,2,c
  3942  0023A0  D034               	goto	u7880
  3943                           
  3944                           ;State_Mchn.c: 1089: else if(GETxAPIxVAL(44) == 1){
  3945                           
  3946                           ; BSR set to: 0
  3947                           
  3948                           ;State_Mchn.c: 1088: }
  3949                           
  3950                           ;State_Mchn.c: 1087: Switch_Train_Path = 6;
  3951  0023A2  0E00               	movlw	0
  3952  0023A4  6E14               	movwf	GETxAPIxVAL@index+1,c
  3953  0023A6  0E2C               	movlw	44
  3954  0023A8  6E13               	movwf	GETxAPIxVAL@index,c
  3955  0023AA  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3956  0023AE  0413               	decf	?_GETxAPIxVAL,w,c
  3957  0023B0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3958  0023B2  B4D8               	btfsc	status,2,c
  3959  0023B4  D036               	goto	u7890
  3960                           
  3961                           ;State_Mchn.c: 1092: else if(GETxAPIxVAL(43) == 1){
  3962                           
  3963                           ; BSR set to: 0
  3964                           
  3965                           ;State_Mchn.c: 1091: }
  3966                           
  3967                           ;State_Mchn.c: 1090: Switch_Train_Path = 7;
  3968  0023B6  0E00               	movlw	0
  3969  0023B8  6E14               	movwf	GETxAPIxVAL@index+1,c
  3970  0023BA  0E2B               	movlw	43
  3971  0023BC  6E13               	movwf	GETxAPIxVAL@index,c
  3972  0023BE  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3973  0023C2  D037               	goto	L95
  3974  0023C4                     L27:
  3975  0023C4  0100               	movlb	0	; () banked
  3976  0023C6  6F88               	movwf	_Switch_Train_Path& (0+255),b
  3977                           
  3978                           ; BSR set to: 0
  3979                           
  3980                           ; BSR set to: 0
  3981                           
  3982                           ; BSR set to: 0
  3983                           
  3984                           ; BSR set to: 0
  3985  0023C8  D758               	goto	l367
  3986  0023CA                     
  3987                           ; BSR set to: 0
  3988                           
  3989                           ; BSR set to: 0
  3990  0023CA  0E00               	movlw	0
  3991  0023CC  6E14               	movwf	GETxAPIxVAL@index+1,c
  3992  0023CE  0E1D               	movlw	29
  3993  0023D0  6E13               	movwf	GETxAPIxVAL@index,c
  3994  0023D2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  3995  0023D6  0413               	decf	?_GETxAPIxVAL,w,c
  3996  0023D8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3997  0023DA  B4D8               	btfsc	status,2,c
  3998  0023DC  D069               	goto	u7960
  3999                           
  4000                           ;State_Mchn.c: 1100: else if(GETxAPIxVAL(41) == 1){
  4001                           
  4002                           ; BSR set to: 0
  4003                           
  4004                           ;State_Mchn.c: 1099: }
  4005                           
  4006                           ;State_Mchn.c: 1098: Switch_Train_Path = 4;
  4007  0023DE  0E00               	movlw	0
  4008  0023E0  6E14               	movwf	GETxAPIxVAL@index+1,c
  4009  0023E2  0E29               	movlw	41
  4010  0023E4  6E13               	movwf	GETxAPIxVAL@index,c
  4011  0023E6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4012  0023EA  0413               	decf	?_GETxAPIxVAL,w,c
  4013  0023EC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4014  0023EE  A4D8               	btfss	status,2,c
  4015  0023F0  D002               	goto	l417
  4016  0023F2                     u7870:
  4017                           
  4018                           ;State_Mchn.c: 1101: Switch_Train_Path = 5;
  4019  0023F2  0E05               	movlw	5
  4020  0023F4  D7E7               	goto	L27
  4021  0023F6                     l417:
  4022                           
  4023                           ;State_Mchn.c: 1103: else if(GETxAPIxVAL(42) == 1){
  4024                           
  4025                           ; BSR set to: 0
  4026  0023F6  0E00               	movlw	0
  4027  0023F8  6E14               	movwf	GETxAPIxVAL@index+1,c
  4028  0023FA  0E2A               	movlw	42
  4029  0023FC  6E13               	movwf	GETxAPIxVAL@index,c
  4030  0023FE  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4031  002402  0413               	decf	?_GETxAPIxVAL,w,c
  4032  002404  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4033  002406  A4D8               	btfss	status,2,c
  4034  002408  D002               	goto	l419
  4035  00240A                     u7880:
  4036                           
  4037                           ;State_Mchn.c: 1104: Switch_Train_Path = 6;
  4038  00240A  0E06               	movlw	6
  4039  00240C  D7DB               	goto	L27
  4040  00240E                     l419:
  4041                           
  4042                           ;State_Mchn.c: 1106: else if(GETxAPIxVAL(44) == 1){
  4043                           
  4044                           ; BSR set to: 0
  4045  00240E  0E00               	movlw	0
  4046  002410  6E14               	movwf	GETxAPIxVAL@index+1,c
  4047  002412  0E2C               	movlw	44
  4048  002414  6E13               	movwf	GETxAPIxVAL@index,c
  4049  002416  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4050  00241A  0413               	decf	?_GETxAPIxVAL,w,c
  4051  00241C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4052  00241E  A4D8               	btfss	status,2,c
  4053  002420  D002               	goto	l421
  4054  002422                     u7890:
  4055                           
  4056                           ;State_Mchn.c: 1107: Switch_Train_Path = 7;
  4057  002422  0E07               	movlw	7
  4058  002424  D7CF               	goto	L27
  4059  002426                     l421:
  4060                           
  4061                           ;State_Mchn.c: 1109: else if(GETxAPIxVAL(43) == 1){
  4062                           
  4063                           ; BSR set to: 0
  4064  002426  0E00               	movlw	0
  4065  002428  6E14               	movwf	GETxAPIxVAL@index+1,c
  4066  00242A  0E2B               	movlw	43
  4067  00242C  6E13               	movwf	GETxAPIxVAL@index,c
  4068  00242E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4069  002432                     L95:
  4070  002432  0413               	decf	?_GETxAPIxVAL,w,c
  4071  002434  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4072  002436  A4D8               	btfss	status,2,c
  4073  002438  D720               	goto	l367
  4074                           
  4075                           ;State_Mchn.c: 1110: Switch_Train_Path = 8;
  4076  00243A  0E08               	movlw	8
  4077  00243C  D7C3               	goto	L27
  4078  00243E                     
  4079                           ; BSR set to: 0
  4080                           
  4081                           ; BSR set to: 0
  4082  00243E  0E00               	movlw	0
  4083  002440  6E14               	movwf	GETxAPIxVAL@index+1,c
  4084  002442  0E1E               	movlw	30
  4085  002444  6E13               	movwf	GETxAPIxVAL@index,c
  4086  002446  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4087  00244A  0413               	decf	?_GETxAPIxVAL,w,c
  4088  00244C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4089  00244E  B4D8               	btfsc	status,2,c
  4090  002450  D02F               	goto	u7960
  4091                           
  4092                           ;State_Mchn.c: 1118: else if(GETxAPIxVAL(41) == 1){
  4093                           
  4094                           ; BSR set to: 0
  4095                           
  4096                           ;State_Mchn.c: 1117: }
  4097                           
  4098                           ;State_Mchn.c: 1115: {
  4099                           ;State_Mchn.c: 1116: Switch_Train_Path = 4;
  4100  002452  0E00               	movlw	0
  4101  002454  6E14               	movwf	GETxAPIxVAL@index+1,c
  4102  002456  0E29               	movlw	41
  4103  002458  6E13               	movwf	GETxAPIxVAL@index,c
  4104  00245A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4105  00245E  0413               	decf	?_GETxAPIxVAL,w,c
  4106  002460  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4107  002462  B4D8               	btfsc	status,2,c
  4108  002464  D031               	goto	u7970
  4109                           
  4110                           ;State_Mchn.c: 1121: else if(GETxAPIxVAL(42) == 1){
  4111                           
  4112                           ; BSR set to: 0
  4113                           
  4114                           ;State_Mchn.c: 1120: }
  4115                           
  4116                           ;State_Mchn.c: 1119: Switch_Train_Path = 12;
  4117  002466  0E00               	movlw	0
  4118  002468  6E14               	movwf	GETxAPIxVAL@index+1,c
  4119  00246A  0E2A               	movlw	42
  4120  00246C  6E13               	movwf	GETxAPIxVAL@index,c
  4121  00246E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4122  002472  0413               	decf	?_GETxAPIxVAL,w,c
  4123  002474  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4124  002476  B4D8               	btfsc	status,2,c
  4125  002478  D033               	goto	u7980
  4126                           
  4127                           ;State_Mchn.c: 1124: else if(GETxAPIxVAL(44) == 1){
  4128                           
  4129                           ; BSR set to: 0
  4130                           
  4131                           ;State_Mchn.c: 1123: }
  4132                           
  4133                           ;State_Mchn.c: 1122: Switch_Train_Path = 11;
  4134  00247A  0E00               	movlw	0
  4135  00247C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4136  00247E  0E2C               	movlw	44
  4137  002480  6E13               	movwf	GETxAPIxVAL@index,c
  4138  002482  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4139  002486  0413               	decf	?_GETxAPIxVAL,w,c
  4140  002488  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4141  00248A  B4D8               	btfsc	status,2,c
  4142  00248C  D035               	goto	u7990
  4143                           
  4144                           ;State_Mchn.c: 1127: else if(GETxAPIxVAL(43) == 1){
  4145                           
  4146                           ; BSR set to: 0
  4147                           
  4148                           ;State_Mchn.c: 1126: }
  4149                           
  4150                           ;State_Mchn.c: 1125: Switch_Train_Path = 10;
  4151  00248E  0E00               	movlw	0
  4152  002490  6E14               	movwf	GETxAPIxVAL@index+1,c
  4153  002492  0E2B               	movlw	43
  4154  002494  6E13               	movwf	GETxAPIxVAL@index,c
  4155  002496  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4156  00249A  D036               	goto	L96
  4157  00249C                     
  4158                           ; BSR set to: 0
  4159                           
  4160                           ; BSR set to: 0
  4161  00249C  0E00               	movlw	0
  4162  00249E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4163  0024A0  0E1F               	movlw	31
  4164  0024A2  6E13               	movwf	GETxAPIxVAL@index,c
  4165  0024A4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4166  0024A8  0413               	decf	?_GETxAPIxVAL,w,c
  4167  0024AA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4168  0024AC  A4D8               	btfss	status,2,c
  4169  0024AE  D002               	goto	l435
  4170  0024B0                     u7960:
  4171                           
  4172                           ;State_Mchn.c: 1133: {
  4173                           ;State_Mchn.c: 1134: Switch_Train_Path = 4;
  4174  0024B0  0E04               	movlw	4
  4175  0024B2  D788               	goto	L27
  4176  0024B4                     l435:
  4177                           
  4178                           ;State_Mchn.c: 1136: else if(GETxAPIxVAL(41) == 1){
  4179                           
  4180                           ; BSR set to: 0
  4181  0024B4  0E00               	movlw	0
  4182  0024B6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4183  0024B8  0E29               	movlw	41
  4184  0024BA  6E13               	movwf	GETxAPIxVAL@index,c
  4185  0024BC  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4186  0024C0  0413               	decf	?_GETxAPIxVAL,w,c
  4187  0024C2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4188  0024C4  A4D8               	btfss	status,2,c
  4189  0024C6  D002               	goto	l437
  4190  0024C8                     u7970:
  4191                           
  4192                           ;State_Mchn.c: 1137: Switch_Train_Path = 12;
  4193  0024C8  0E0C               	movlw	12
  4194  0024CA  D77C               	goto	L27
  4195  0024CC                     l437:
  4196                           
  4197                           ;State_Mchn.c: 1139: else if(GETxAPIxVAL(42) == 1){
  4198                           
  4199                           ; BSR set to: 0
  4200  0024CC  0E00               	movlw	0
  4201  0024CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4202  0024D0  0E2A               	movlw	42
  4203  0024D2  6E13               	movwf	GETxAPIxVAL@index,c
  4204  0024D4  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4205  0024D8  0413               	decf	?_GETxAPIxVAL,w,c
  4206  0024DA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4207  0024DC  A4D8               	btfss	status,2,c
  4208  0024DE  D002               	goto	l439
  4209  0024E0                     u7980:
  4210                           
  4211                           ;State_Mchn.c: 1140: Switch_Train_Path = 11;
  4212  0024E0  0E0B               	movlw	11
  4213  0024E2  D770               	goto	L27
  4214  0024E4                     l439:
  4215                           
  4216                           ;State_Mchn.c: 1142: else if(GETxAPIxVAL(44) == 1){
  4217                           
  4218                           ; BSR set to: 0
  4219  0024E4  0E00               	movlw	0
  4220  0024E6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4221  0024E8  0E2C               	movlw	44
  4222  0024EA  6E13               	movwf	GETxAPIxVAL@index,c
  4223  0024EC  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4224  0024F0  0413               	decf	?_GETxAPIxVAL,w,c
  4225  0024F2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4226  0024F4  A4D8               	btfss	status,2,c
  4227  0024F6  D002               	goto	l441
  4228  0024F8                     u7990:
  4229                           
  4230                           ;State_Mchn.c: 1143: Switch_Train_Path = 10;
  4231  0024F8  0E0A               	movlw	10
  4232  0024FA  D764               	goto	L27
  4233  0024FC                     l441:
  4234                           
  4235                           ;State_Mchn.c: 1145: else if(GETxAPIxVAL(43) == 1){
  4236                           
  4237                           ; BSR set to: 0
  4238  0024FC  0E00               	movlw	0
  4239  0024FE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4240  002500  0E2B               	movlw	43
  4241  002502  6E13               	movwf	GETxAPIxVAL@index,c
  4242  002504  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4243  002508                     L96:
  4244  002508  0413               	decf	?_GETxAPIxVAL,w,c
  4245  00250A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4246  00250C  A4D8               	btfss	status,2,c
  4247  00250E  D6B5               	goto	l367
  4248                           
  4249                           ;State_Mchn.c: 1146: Switch_Train_Path = 9;
  4250  002510  0E09               	movlw	9
  4251  002512  D758               	goto	L27
  4252  002514                     
  4253                           ; BSR set to: 0
  4254                           
  4255                           ; BSR set to: 0
  4256  002514  51CD               	movf	Train_Path@To& (0+255),w,b
  4257                           
  4258                           ; Switch size 1, requested type "space"
  4259                           ; Number of cases is 4, Range of values is 1 to 4
  4260                           ; switch strategies available:
  4261                           ; Name         Instructions Cycles
  4262                           ; simple_byte           13     7 (average)
  4263                           ;	Chosen strategy is simple_byte
  4264  002516  0A01               	xorlw	1	; case 1
  4265  002518  B4D8               	btfsc	status,2,c
  4266  00251A  D791               	goto	l424
  4267  00251C  0A03               	xorlw	3	; case 2
  4268  00251E  B4D8               	btfsc	status,2,c
  4269  002520  D7BD               	goto	l434
  4270  002522  0A01               	xorlw	1	; case 3
  4271  002524  B4D8               	btfsc	status,2,c
  4272  002526  D71F               	goto	l403
  4273  002528  0A07               	xorlw	7	; case 4
  4274  00252A  B4D8               	btfsc	status,2,c
  4275  00252C  D74E               	goto	l414
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;State_Mchn.c: 1152: break;
  4279  00252E  D073               	goto	l376
  4280  002530                     
  4281                           ; BSR set to: 0
  4282                           
  4283                           ; BSR set to: 0
  4284  002530  EC84  F017         	call	_Train_Move_Right_Brake	;wreg free
  4285  002534  D008               	goto	L97
  4286  002536                     
  4287                           ; BSR set to: 0
  4288                           
  4289                           ; BSR set to: 0
  4290  002536  EC84  F017         	call	_Train_Move_Right_Brake	;wreg free
  4291  00253A  D005               	goto	L97
  4292  00253C                     
  4293                           ; BSR set to: 0
  4294                           
  4295                           ; BSR set to: 0
  4296  00253C  ECE1  F016         	call	_Train_Move_Left_Brake	;wreg free
  4297  002540  D002               	goto	L97
  4298  002542                     
  4299                           ; BSR set to: 0
  4300                           
  4301                           ; BSR set to: 0
  4302  002542  ECE1  F016         	call	_Train_Move_Left_Brake	;wreg free
  4303  002546                     L97:
  4304  002546  0900               	iorlw	0
  4305  002548  A4D8               	btfss	status,2,c
  4306  00254A  D697               	goto	l367
  4307                           
  4308                           ;State_Mchn.c: 1181: {
  4309                           ;State_Mchn.c: 1182: Switch_Train_Path = 0;
  4310  00254C  0E00               	movlw	0
  4311  00254E  0100               	movlb	0	; () banked
  4312  002550  6F88               	movwf	_Switch_Train_Path& (0+255),b
  4313                           
  4314                           ;State_Mchn.c: 1183: Return_Val = 0;
  4315  002552  0E00               	movlw	0
  4316  002554  D694               	goto	L40
  4317  002556                     
  4318                           ; BSR set to: 0
  4319                           
  4320                           ; BSR set to: 0
  4321  002556  51CD               	movf	Train_Path@To& (0+255),w,b
  4322                           
  4323                           ; Switch size 1, requested type "space"
  4324                           ; Number of cases is 4, Range of values is 1 to 4
  4325                           ; switch strategies available:
  4326                           ; Name         Instructions Cycles
  4327                           ; simple_byte           13     7 (average)
  4328                           ;	Chosen strategy is simple_byte
  4329  002558  0A01               	xorlw	1	; case 1
  4330  00255A  B4D8               	btfsc	status,2,c
  4331  00255C  D7EF               	goto	l452
  4332  00255E  0A03               	xorlw	3	; case 2
  4333  002560  B4D8               	btfsc	status,2,c
  4334  002562  D7EF               	goto	l454
  4335  002564  0A01               	xorlw	1	; case 3
  4336  002566  B4D8               	btfsc	status,2,c
  4337  002568  D7E3               	goto	l447
  4338  00256A  0A07               	xorlw	7	; case 4
  4339  00256C  B4D8               	btfsc	status,2,c
  4340  00256E  D7E3               	goto	l450
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;State_Mchn.c: 1190: break;
  4344  002570  D052               	goto	l376
  4345  002572                     
  4346                           ; BSR set to: 0
  4347                           ;State_Mchn.c: 1193: if(Left_Mountain_From_The_Left(1) == 0){
  4348                           
  4349                           ; BSR set to: 0
  4350  002572  0E01               	movlw	1
  4351  002574  EC2D  F01C         	call	_Left_Mountain_From_The_Left
  4352  002578  D01B               	goto	L53
  4353  00257A                     
  4354                           ; BSR set to: 0
  4355                           ;State_Mchn.c: 1200: if(Left_Mountain_From_The_Left(2) == 0){
  4356                           
  4357                           ; BSR set to: 0
  4358  00257A  0E02               	movlw	2
  4359  00257C  EC2D  F01C         	call	_Left_Mountain_From_The_Left
  4360  002580  D017               	goto	L53
  4361  002582                     
  4362                           ; BSR set to: 0
  4363                           ;State_Mchn.c: 1207: if(Right_Mountain_From_The_Left(3) == 0){
  4364                           
  4365                           ; BSR set to: 0
  4366  002582  0E03               	movlw	3
  4367  002584  EC19  F01B         	call	_Right_Mountain_From_The_Left
  4368  002588  D013               	goto	L53
  4369  00258A                     
  4370                           ; BSR set to: 0
  4371                           ;State_Mchn.c: 1214: if(Right_Mountain_From_The_Left(4) == 0){
  4372                           
  4373                           ; BSR set to: 0
  4374  00258A  0E04               	movlw	4
  4375  00258C  EC19  F01B         	call	_Right_Mountain_From_The_Left
  4376  002590  D00F               	goto	L53
  4377  002592                     
  4378                           ; BSR set to: 0
  4379                           ;State_Mchn.c: 1221: if(Right_Mountain_From_The_Right(4) == 0){
  4380                           
  4381                           ; BSR set to: 0
  4382  002592  0E04               	movlw	4
  4383  002594  EC8F  F01A         	call	_Right_Mountain_From_The_Right
  4384  002598  D00B               	goto	L53
  4385  00259A                     
  4386                           ; BSR set to: 0
  4387                           ;State_Mchn.c: 1228: if(Right_Mountain_From_The_Right(3) == 0){
  4388                           
  4389                           ; BSR set to: 0
  4390  00259A  0E03               	movlw	3
  4391  00259C  EC8F  F01A         	call	_Right_Mountain_From_The_Right
  4392  0025A0  D007               	goto	L53
  4393  0025A2                     
  4394                           ; BSR set to: 0
  4395                           ;State_Mchn.c: 1235: if(Left_Mountain_From_The_Right(2) == 0){
  4396                           
  4397                           ; BSR set to: 0
  4398  0025A2  0E02               	movlw	2
  4399  0025A4  ECB6  F01C         	call	_Left_Mountain_From_The_Right
  4400  0025A8  D003               	goto	L53
  4401  0025AA                     
  4402                           ; BSR set to: 0
  4403                           ;State_Mchn.c: 1242: if(Left_Mountain_From_The_Right(1) == 0){
  4404                           
  4405                           ; BSR set to: 0
  4406  0025AA  0E01               	movlw	1
  4407  0025AC  ECB6  F01C         	call	_Left_Mountain_From_The_Right
  4408  0025B0                     L53:
  4409  0025B0  0900               	iorlw	0
  4410  0025B2  A4D8               	btfss	status,2,c
  4411  0025B4  D662               	goto	l367
  4412                           
  4413                           ;State_Mchn.c: 1243: Switch_Train_Path = 3;
  4414  0025B6  0E03               	movlw	3
  4415  0025B8  D705               	goto	L27
  4416  0025BA                     
  4417                           ; BSR set to: 0
  4418                           
  4419                           ; BSR set to: 0
  4420  0025BA  0E00               	movlw	0
  4421  0025BC  6F88               	movwf	_Switch_Train_Path& (0+255),b
  4422  0025BE  0E01               	movlw	1
  4423  0025C0  D65E               	goto	L40
  4424  0025C2                     l363:
  4425                           
  4426                           ; BSR set to: 0
  4427  0025C2  0100               	movlb	0	; () banked
  4428  0025C4  5188               	movf	_Switch_Train_Path& (0+255),w,b
  4429                           
  4430                           ; Switch size 1, requested type "space"
  4431                           ; Number of cases is 13, Range of values is 0 to 12
  4432                           ; switch strategies available:
  4433                           ; Name         Instructions Cycles
  4434                           ; simple_byte           40    21 (average)
  4435                           ;	Chosen strategy is simple_byte
  4436  0025C6  0A00               	xorlw	0	; case 0
  4437  0025C8  B4D8               	btfsc	status,2,c
  4438  0025CA  D671               	goto	l365
  4439  0025CC  0A01               	xorlw	1	; case 1
  4440  0025CE  B4D8               	btfsc	status,2,c
  4441  0025D0  D69E               	goto	l378
  4442  0025D2  0A03               	xorlw	3	; case 2
  4443  0025D4  B4D8               	btfsc	status,2,c
  4444  0025D6  D6B9               	goto	l390
  4445  0025D8  0A01               	xorlw	1	; case 3
  4446  0025DA  B4D8               	btfsc	status,2,c
  4447  0025DC  D79B               	goto	l402
  4448  0025DE  0A07               	xorlw	7	; case 4
  4449  0025E0  B4D8               	btfsc	status,2,c
  4450  0025E2  D7B9               	goto	l446
  4451  0025E4  0A01               	xorlw	1	; case 5
  4452  0025E6  B4D8               	btfsc	status,2,c
  4453  0025E8  D7C4               	goto	l457
  4454  0025EA  0A03               	xorlw	3	; case 6
  4455  0025EC  B4D8               	btfsc	status,2,c
  4456  0025EE  D7C5               	goto	l459
  4457  0025F0  0A01               	xorlw	1	; case 7
  4458  0025F2  B4D8               	btfsc	status,2,c
  4459  0025F4  D7C6               	goto	l461
  4460  0025F6  0A0F               	xorlw	15	; case 8
  4461  0025F8  B4D8               	btfsc	status,2,c
  4462  0025FA  D7C7               	goto	l463
  4463  0025FC  0A01               	xorlw	1	; case 9
  4464  0025FE  B4D8               	btfsc	status,2,c
  4465  002600  D7C8               	goto	l465
  4466  002602  0A03               	xorlw	3	; case 10
  4467  002604  B4D8               	btfsc	status,2,c
  4468  002606  D7C9               	goto	l467
  4469  002608  0A01               	xorlw	1	; case 11
  4470  00260A  B4D8               	btfsc	status,2,c
  4471  00260C  D7CA               	goto	l469
  4472  00260E  0A07               	xorlw	7	; case 12
  4473  002610  B4D8               	btfsc	status,2,c
  4474  002612  D7CB               	goto	l471
  4475  002614  D7D2               	goto	l473
  4476  002616                     l376:
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;State_Mchn.c: 1251: return(Return_Val);
  4480                           
  4481                           ; BSR set to: 0
  4482  002616  51E0               	movf	Train_Path@Return_Val& (0+255),w,b
  4483  002618  0012               	return	
  4484  00261A                     __end_of_Train_Path:
  4485                           	opt stack 0
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           postinc0	equ	0xFEE
  4491                           wreg	equ	0xFE8
  4492                           postdec1	equ	0xFE5
  4493                           fsr1l	equ	0xFE1
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _Train_Move_Right_Start *****************
  4497 ;; Defined at:
  4498 ;;		line 27 in file "../train_move_right.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;		None
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      unsigned char 
  4505 ;; Registers used:
  4506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4512 ;;      Params:         0       0       0       0       0       0       0       0       0
  4513 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4515 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4516 ;;Total ram usage:        2 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    6
  4519 ;; This function calls:
  4520 ;;		_GETxAPIxVAL
  4521 ;;		_SETxAPIxVAL
  4522 ;;		_SETxPWM
  4523 ;; This function is called by:
  4524 ;;		_Train_Path
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text3
  4529  0032BE                     __ptext3:
  4530                           	opt stack 0
  4531  0032BE                     _Train_Move_Right_Start:
  4532                           	opt stack 22
  4533                           
  4534                           ;train_move_right.c: 29: static char Return_Val = 1;
  4535                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4536                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;incstack = 0
  4540  0032BE  D08A               	goto	l1148
  4541  0032C0  0E00               	movlw	0
  4542  0032C2  6E14               	movwf	GETxAPIxVAL@index+1,c
  4543  0032C4  0E14               	movlw	20
  4544  0032C6  6E13               	movwf	GETxAPIxVAL@index,c
  4545  0032C8  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4546  0032CC  5013               	movf	?_GETxAPIxVAL,w,c
  4547  0032CE  0100               	movlb	0	; () banked
  4548  0032D0  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4549  0032D2  5014               	movf	?_GETxAPIxVAL+1,w,c
  4550  0032D4  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4551  0032D6  A0D8               	btfss	status,0,c
  4552  0032D8  D002               	goto	l1150
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;train_move_right.c: 37: {
  4556                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4557  0032DA  0E01               	movlw	1
  4558  0032DC  D03D               	goto	L61
  4559  0032DE                     l1150:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;train_move_right.c: 42: }
  4563                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4564                           
  4565                           ; BSR set to: 0
  4566  0032DE  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4567  0032E0  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4571  0032E2  0E00               	movlw	0
  4572  0032E4  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4573  0032E6  D073               	goto	L62
  4574  0032E8                     
  4575                           ; BSR set to: 0
  4576                           
  4577                           ; BSR set to: 0
  4578  0032E8  0E00               	movlw	0
  4579  0032EA  6E14               	movwf	GETxAPIxVAL@index+1,c
  4580  0032EC  0E16               	movlw	22
  4581  0032EE  6E13               	movwf	GETxAPIxVAL@index,c
  4582  0032F0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4583  0032F4  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Right_Start$2179
  4584  0032F8  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Start$2179+1
  4585  0032FC  C0CB  F01F         	movff	_Train_Move_Right_Start$2179,SETxPWM@speed
  4586  003300  C0CC  F020         	movff	_Train_Move_Right_Start$2179+1,SETxPWM@speed+1
  4587  003304  0E01               	movlw	1
  4588  003306  6E21               	movwf	SETxPWM@direction,c
  4589  003308  EC15  F01E         	call	_SETxPWM	;wreg free
  4590                           
  4591                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4592  00330C  0E00               	movlw	0
  4593  00330E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4594  003310  0E16               	movlw	22
  4595  003312  6E13               	movwf	GETxAPIxVAL@index,c
  4596  003314  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4597  003318  C013  F080         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4598  00331C  C014  F081         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4599                           
  4600                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4601  003320  0E00               	movlw	0
  4602  003322  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4603  003324  0E45               	movlw	69
  4604  003326  6E19               	movwf	SETxAPIxVAL@index,c
  4605  003328  0E00               	movlw	0
  4606  00332A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4607  00332C  0E00               	movlw	0
  4608  00332E  6E1B               	movwf	SETxAPIxVAL@value,c
  4609  003330  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  4610                           
  4611                           ;train_move_right.c: 51: Return_Val = 1;
  4612  003334  0E01               	movlw	1
  4613  003336  0100               	movlb	0	; () banked
  4614  003338  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4615  00333A  D018               	goto	l7602
  4616  00333C                     
  4617                           ; BSR set to: 0
  4618                           
  4619                           ; BSR set to: 0
  4620  00333C  0E00               	movlw	0
  4621  00333E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4622  003340  0E12               	movlw	18
  4623  003342  6E13               	movwf	GETxAPIxVAL@index,c
  4624  003344  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4625  003348  5013               	movf	?_GETxAPIxVAL,w,c
  4626  00334A  0100               	movlb	0	; () banked
  4627  00334C  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4628  00334E  5014               	movf	?_GETxAPIxVAL+1,w,c
  4629  003350  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4630  003352  A0D8               	btfss	status,0,c
  4631  003354  D007               	goto	l1154
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;train_move_right.c: 56: {
  4635                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4636  003356  0E03               	movlw	3
  4637  003358                     L61:
  4638  003358  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4639                           
  4640                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4641  00335A  0E00               	movlw	0
  4642  00335C  6F63               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4643  00335E  0E00               	movlw	0
  4644  003360  6F62               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4645  003362  D035               	goto	L62
  4646  003364                     l1154:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;train_move_right.c: 61: }
  4650                           ;train_move_right.c: 62: Return_Val = 1;
  4651                           
  4652                           ; BSR set to: 0
  4653  003364  0E01               	movlw	1
  4654  003366  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4658  003368  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4659  00336A  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4660  00336C                     l7602:
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4664  00336C  0E02               	movlw	2
  4665  00336E  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4666                           
  4667                           ;train_move_right.c: 65: break;
  4668  003370  D03F               	goto	l1151
  4669  003372                     
  4670                           ; BSR set to: 0
  4671                           
  4672                           ; BSR set to: 0
  4673  003372  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4674  003376  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4675  00337A  0E01               	movlw	1
  4676  00337C  6E21               	movwf	SETxPWM@direction,c
  4677  00337E  EC15  F01E         	call	_SETxPWM	;wreg free
  4678                           
  4679                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4680  003382  0E00               	movlw	0
  4681  003384  6E14               	movwf	GETxAPIxVAL@index+1,c
  4682  003386  0E17               	movlw	23
  4683  003388  6E13               	movwf	GETxAPIxVAL@index,c
  4684  00338A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4685  00338E  5013               	movf	?_GETxAPIxVAL,w,c
  4686  003390  0100               	movlb	0	; () banked
  4687  003392  5D80               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4688  003394  5014               	movf	?_GETxAPIxVAL+1,w,c
  4689  003396  5981               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4690  003398  A0D8               	btfss	status,0,c
  4691  00339A  D004               	goto	l1156
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;train_move_right.c: 69: {
  4695                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4696  00339C  0E00               	movlw	0
  4697  00339E  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4698                           
  4699                           ;train_move_right.c: 71: Return_Val = 0;
  4700  0033A0  0E00               	movlw	0
  4701  0033A2  D016               	goto	L60
  4702  0033A4                     l1156:
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;train_move_right.c: 73: }
  4706                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4707                           
  4708                           ; BSR set to: 0
  4709  0033A4  0E00               	movlw	0
  4710  0033A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4711  0033A8  0E1A               	movlw	26
  4712  0033AA  6E13               	movwf	GETxAPIxVAL@index,c
  4713  0033AC  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4714  0033B0  5013               	movf	?_GETxAPIxVAL,w,c
  4715  0033B2  0100               	movlb	0	; () banked
  4716  0033B4  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4717  0033B6  5014               	movf	?_GETxAPIxVAL+1,w,c
  4718  0033B8  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4719  0033BA  A0D8               	btfss	status,0,c
  4720  0033BC  D006               	goto	l1157
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;train_move_right.c: 75: {
  4724                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4725  0033BE  4B80               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  4726  0033C0  2B81               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4730  0033C2  0E00               	movlw	0
  4731  0033C4  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4732  0033C6  0E00               	movlw	0
  4733  0033C8  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4734  0033CA                     l1157:
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;train_move_right.c: 78: }
  4738                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4739                           
  4740                           ; BSR set to: 0
  4741  0033CA  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4742  0033CC  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4743  0033CE                     L62:
  4744                           
  4745                           ;train_move_right.c: 80: Return_Val = 1;
  4746  0033CE  0E01               	movlw	1
  4747  0033D0                     L60:
  4748  0033D0  6FDD               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;train_move_right.c: 84: }
  4752                           
  4753                           ; BSR set to: 0
  4754                           
  4755                           ;train_move_right.c: 83: default : break;
  4756                           
  4757                           ;train_move_right.c: 81: break;
  4758  0033D2  D00E               	goto	l1151
  4759  0033D4                     l1148:
  4760                           
  4761                           ; BSR set to: 0
  4762  0033D4  0100               	movlb	0	; () banked
  4763  0033D6  5182               	movf	_Switch_Train_Move& (0+255),w,b
  4764                           
  4765                           ; Switch size 1, requested type "space"
  4766                           ; Number of cases is 4, Range of values is 0 to 3
  4767                           ; switch strategies available:
  4768                           ; Name         Instructions Cycles
  4769                           ; simple_byte           13     7 (average)
  4770                           ;	Chosen strategy is simple_byte
  4771  0033D8  0A00               	xorlw	0	; case 0
  4772  0033DA  B4D8               	btfsc	status,2,c
  4773  0033DC  D771               	goto	l1149
  4774  0033DE  0A01               	xorlw	1	; case 1
  4775  0033E0  B4D8               	btfsc	status,2,c
  4776  0033E2  D782               	goto	l1152
  4777  0033E4  0A03               	xorlw	3	; case 2
  4778  0033E6  B4D8               	btfsc	status,2,c
  4779  0033E8  D7A9               	goto	l1153
  4780  0033EA  0A01               	xorlw	1	; case 3
  4781  0033EC  B4D8               	btfsc	status,2,c
  4782  0033EE  D7C1               	goto	l1155
  4783  0033F0                     l1151:
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;train_move_right.c: 86: return(Return_Val);
  4787                           
  4788                           ; BSR set to: 0
  4789  0033F0  51DD               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4790  0033F2  0012               	return	
  4791  0033F4                     __end_of_Train_Move_Right_Start:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           postinc0	equ	0xFEE
  4798                           wreg	equ	0xFE8
  4799                           postdec1	equ	0xFE5
  4800                           fsr1l	equ	0xFE1
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function _Train_Move_Right_Brake *****************
  4804 ;; Defined at:
  4805 ;;		line 254 in file "../train_move_right.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;		None
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      unsigned char 
  4812 ;; Registers used:
  4813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4819 ;;      Params:         0       0       0       0       0       0       0       0       0
  4820 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4822 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4823 ;;Total ram usage:        2 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    6
  4826 ;; This function calls:
  4827 ;;		_GETxAPIxVAL
  4828 ;;		_SETxAPIxVAL
  4829 ;;		_SETxPWM
  4830 ;; This function is called by:
  4831 ;;		_Train_Path
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text4
  4836  002F08                     __ptext4:
  4837                           	opt stack 0
  4838  002F08                     _Train_Move_Right_Brake:
  4839                           	opt stack 22
  4840                           
  4841                           ;train_move_right.c: 256: static char Return_Val = 1;
  4842                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4843                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;incstack = 0
  4847  002F08  D08F               	goto	l1216
  4848  002F0A  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4849  002F0E  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4850  002F12  0E01               	movlw	1
  4851  002F14  6E21               	movwf	SETxPWM@direction,c
  4852  002F16  EC15  F01E         	call	_SETxPWM	;wreg free
  4853                           
  4854                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  4855  002F1A  0E00               	movlw	0
  4856  002F1C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4857  002F1E  0E16               	movlw	22
  4858  002F20  6E13               	movwf	GETxAPIxVAL@index,c
  4859  002F22  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4860  002F26  0100               	movlb	0	; () banked
  4861  002F28  5180               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  4862  002F2A  5C13               	subwf	?_GETxAPIxVAL,w,c
  4863  002F2C  5181               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4864  002F2E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  4865  002F30  A0D8               	btfss	status,0,c
  4866  002F32  D002               	goto	l1218
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;train_move_right.c: 263: {
  4870                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  4871  002F34  0E01               	movlw	1
  4872  002F36  D074               	goto	L67
  4873  002F38                     l1218:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;train_move_right.c: 267: }
  4877                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4878                           
  4879                           ; BSR set to: 0
  4880  002F38  0E00               	movlw	0
  4881  002F3A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4882  002F3C  0E19               	movlw	25
  4883  002F3E  6E13               	movwf	GETxAPIxVAL@index,c
  4884  002F40  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4885  002F44  5013               	movf	?_GETxAPIxVAL,w,c
  4886  002F46  0100               	movlb	0	; () banked
  4887  002F48  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  4888  002F4A  5014               	movf	?_GETxAPIxVAL+1,w,c
  4889  002F4C  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  4890  002F4E  A0D8               	btfss	status,0,c
  4891  002F50  D008               	goto	l1220
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;train_move_right.c: 269: {
  4895                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  4896  002F52  0780               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  4897  002F54  A0D8               	btfss	status,0,c
  4898  002F56  0781               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  4902  002F58  0E00               	movlw	0
  4903  002F5A  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  4904  002F5C  0E00               	movlw	0
  4905  002F5E  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  4906                           
  4907                           ;train_move_right.c: 272: }
  4908  002F60  D060               	goto	l7718
  4909  002F62                     l1220:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  4913                           
  4914                           ; BSR set to: 0
  4915  002F62  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  4916  002F64  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  4917                           
  4918                           ; BSR set to: 0
  4919  002F66  D05D               	goto	l7718
  4920  002F68                     
  4921                           ; BSR set to: 0
  4922                           
  4923                           ; BSR set to: 0
  4924  002F68  0E00               	movlw	0
  4925  002F6A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4926  002F6C  0E12               	movlw	18
  4927  002F6E  6E13               	movwf	GETxAPIxVAL@index,c
  4928  002F70  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4929  002F74  5013               	movf	?_GETxAPIxVAL,w,c
  4930  002F76  0100               	movlb	0	; () banked
  4931  002F78  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4932  002F7A  5014               	movf	?_GETxAPIxVAL+1,w,c
  4933  002F7C  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4934  002F7E  A0D8               	btfss	status,0,c
  4935  002F80  D007               	goto	l1223
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;train_move_right.c: 278: {
  4939                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  4940  002F82  0E02               	movlw	2
  4941  002F84  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4942                           
  4943                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  4944  002F86  0E00               	movlw	0
  4945  002F88  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4946  002F8A  0E00               	movlw	0
  4947  002F8C  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4948  002F8E  D049               	goto	l7718
  4949  002F90                     l1223:
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;train_move_right.c: 283: }
  4953                           ;train_move_right.c: 284: Return_Val = 1;
  4954                           
  4955                           ; BSR set to: 0
  4956  002F90  0E01               	movlw	1
  4957  002F92  6FDC               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  4961  002F94  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4962  002F96  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  4966  002F98  0E01               	movlw	1
  4967  002F9A  6F82               	movwf	_Switch_Train_Move& (0+255),b
  4968                           
  4969                           ;train_move_right.c: 287: break;
  4970  002F9C  D053               	goto	l1219
  4971  002F9E                     
  4972                           ; BSR set to: 0
  4973                           
  4974                           ; BSR set to: 0
  4975  002F9E  0E00               	movlw	0
  4976  002FA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  4977  002FA2  0E16               	movlw	22
  4978  002FA4  6E13               	movwf	GETxAPIxVAL@index,c
  4979  002FA6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  4980  002FAA  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Right_Brake$2180
  4981  002FAE  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Brake$2180+1
  4982  002FB2  C0CB  F01F         	movff	_Train_Move_Right_Brake$2180,SETxPWM@speed
  4983  002FB6  C0CC  F020         	movff	_Train_Move_Right_Brake$2180+1,SETxPWM@speed+1
  4984  002FBA  0E01               	movlw	1
  4985  002FBC  6E21               	movwf	SETxPWM@direction,c
  4986  002FBE  EC15  F01E         	call	_SETxPWM	;wreg free
  4987                           
  4988                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  4989  002FC2  0E00               	movlw	0
  4990  002FC4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4991  002FC6  0E45               	movlw	69
  4992  002FC8  6E19               	movwf	SETxAPIxVAL@index,c
  4993  002FCA  0E00               	movlw	0
  4994  002FCC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4995  002FCE  0E01               	movlw	1
  4996  002FD0  6E1B               	movwf	SETxAPIxVAL@value,c
  4997  002FD2  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  4998                           
  4999                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  5000  002FD6  0E00               	movlw	0
  5001  002FD8  6E14               	movwf	GETxAPIxVAL@index+1,c
  5002  002FDA  0E16               	movlw	22
  5003  002FDC  6E13               	movwf	GETxAPIxVAL@index,c
  5004  002FDE  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5005  002FE2  C013  F080         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5006  002FE6  C014  F081         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5007                           
  5008                           ;train_move_right.c: 292: Switch_Train_Move = 3;
  5009  002FEA  0E03               	movlw	3
  5010  002FEC  0100               	movlb	0	; () banked
  5011  002FEE  D018               	goto	L67
  5012  002FF0                     
  5013                           ; BSR set to: 0
  5014                           
  5015                           ; BSR set to: 0
  5016  002FF0  0E00               	movlw	0
  5017  002FF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  5018  002FF4  0E14               	movlw	20
  5019  002FF6  6E13               	movwf	GETxAPIxVAL@index,c
  5020  002FF8  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5021  002FFC  5013               	movf	?_GETxAPIxVAL,w,c
  5022  002FFE  0100               	movlb	0	; () banked
  5023  003000  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5024  003002  5014               	movf	?_GETxAPIxVAL+1,w,c
  5025  003004  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5026  003006  A0D8               	btfss	status,0,c
  5027  003008  D008               	goto	l1226
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;train_move_right.c: 297: {
  5031                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5032  00300A  0E00               	movlw	0
  5033  00300C  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5034                           
  5035                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5036  00300E  0E00               	movlw	0
  5037  003010  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5038  003012  0E00               	movlw	0
  5039  003014  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5040                           
  5041                           ;train_move_right.c: 300: Return_Val = 0;
  5042  003016  0E00               	movlw	0
  5043  003018  D005               	goto	L65
  5044  00301A                     l1226:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;train_move_right.c: 302: }
  5048                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5049                           
  5050                           ; BSR set to: 0
  5051  00301A  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5052  00301C  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5056  00301E  0E03               	movlw	3
  5057  003020                     L67:
  5058  003020  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5059  003022                     l7718:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;train_move_right.c: 305: Return_Val = 1;
  5063  003022  0E01               	movlw	1
  5064  003024                     L65:
  5065  003024  6FDC               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;train_move_right.c: 309: }
  5069                           
  5070                           ; BSR set to: 0
  5071                           
  5072                           ;train_move_right.c: 308: default : break;
  5073                           
  5074                           ;train_move_right.c: 306: break;
  5075  003026  D00E               	goto	l1219
  5076  003028                     l1216:
  5077                           
  5078                           ; BSR set to: 0
  5079  003028  0100               	movlb	0	; () banked
  5080  00302A  5182               	movf	_Switch_Train_Move& (0+255),w,b
  5081                           
  5082                           ; Switch size 1, requested type "space"
  5083                           ; Number of cases is 4, Range of values is 0 to 3
  5084                           ; switch strategies available:
  5085                           ; Name         Instructions Cycles
  5086                           ; simple_byte           13     7 (average)
  5087                           ;	Chosen strategy is simple_byte
  5088  00302C  0A00               	xorlw	0	; case 0
  5089  00302E  B4D8               	btfsc	status,2,c
  5090  003030  D76C               	goto	l1217
  5091  003032  0A01               	xorlw	1	; case 1
  5092  003034  B4D8               	btfsc	status,2,c
  5093  003036  D798               	goto	l1222
  5094  003038  0A03               	xorlw	3	; case 2
  5095  00303A  B4D8               	btfsc	status,2,c
  5096  00303C  D7B0               	goto	l1224
  5097  00303E  0A01               	xorlw	1	; case 3
  5098  003040  B4D8               	btfsc	status,2,c
  5099  003042  D7D6               	goto	l1225
  5100  003044                     l1219:
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;train_move_right.c: 311: return(Return_Val);
  5104                           
  5105                           ; BSR set to: 0
  5106  003044  51DC               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5107  003046  0012               	return	
  5108  003048                     __end_of_Train_Move_Right_Brake:
  5109                           	opt stack 0
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           postinc0	equ	0xFEE
  5115                           wreg	equ	0xFE8
  5116                           postdec1	equ	0xFE5
  5117                           fsr1l	equ	0xFE1
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function _Train_Move_Left_Start *****************
  5121 ;; Defined at:
  5122 ;;		line 27 in file "../train_move_left.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;		None
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;		None
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      unsigned char 
  5129 ;; Registers used:
  5130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5136 ;;      Params:         0       0       0       0       0       0       0       0       0
  5137 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5139 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5140 ;;Total ram usage:        2 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    6
  5143 ;; This function calls:
  5144 ;;		_GETxAPIxVAL
  5145 ;;		_SETxAPIxVAL
  5146 ;;		_SETxPWM
  5147 ;; This function is called by:
  5148 ;;		_Train_Path
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           	psect	text5
  5153  003186                     __ptext5:
  5154                           	opt stack 0
  5155  003186                     _Train_Move_Left_Start:
  5156                           	opt stack 22
  5157                           
  5158                           ;train_move_left.c: 29: static char Return_Val = 1;
  5159                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5160                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;incstack = 0
  5164  003186  D08B               	goto	l1043
  5165  003188  0E00               	movlw	0
  5166  00318A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5167  00318C  0E14               	movlw	20
  5168  00318E  6E13               	movwf	GETxAPIxVAL@index,c
  5169  003190  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5170  003194  5013               	movf	?_GETxAPIxVAL,w,c
  5171  003196  0100               	movlb	0	; () banked
  5172  003198  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5173  00319A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5174  00319C  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5175  00319E  A0D8               	btfss	status,0,c
  5176  0031A0  D002               	goto	l1045
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;train_move_left.c: 37: {
  5180                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5181  0031A2  0E01               	movlw	1
  5182  0031A4  D03E               	goto	L70
  5183  0031A6                     l1045:
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;train_move_left.c: 42: }
  5187                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5188                           
  5189                           ; BSR set to: 0
  5190  0031A6  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5191  0031A8  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5195  0031AA  0E00               	movlw	0
  5196  0031AC  D043               	goto	L71
  5197  0031AE                     l7634:
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;train_move_left.c: 45: Return_Val = 1;
  5201  0031AE  0E01               	movlw	1
  5202  0031B0  6FDF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5203                           
  5204                           ;train_move_left.c: 46: break;
  5205  0031B2  D083               	goto	l1046
  5206  0031B4                     
  5207                           ; BSR set to: 0
  5208                           
  5209                           ; BSR set to: 0
  5210  0031B4  0E00               	movlw	0
  5211  0031B6  6E14               	movwf	GETxAPIxVAL@index+1,c
  5212  0031B8  0E15               	movlw	21
  5213  0031BA  6E13               	movwf	GETxAPIxVAL@index,c
  5214  0031BC  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5215  0031C0  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Left_Start$2177
  5216  0031C4  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Start$2177+1
  5217  0031C8  C0CB  F01F         	movff	_Train_Move_Left_Start$2177,SETxPWM@speed
  5218  0031CC  C0CC  F020         	movff	_Train_Move_Left_Start$2177+1,SETxPWM@speed+1
  5219  0031D0  0E00               	movlw	0
  5220  0031D2  6E21               	movwf	SETxPWM@direction,c
  5221  0031D4  EC15  F01E         	call	_SETxPWM	;wreg free
  5222                           
  5223                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5224  0031D8  0E00               	movlw	0
  5225  0031DA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5226  0031DC  0E15               	movlw	21
  5227  0031DE  6E13               	movwf	GETxAPIxVAL@index,c
  5228  0031E0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5229  0031E4  C013  F080         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5230  0031E8  C014  F081         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5231                           
  5232                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  5233  0031EC  0E00               	movlw	0
  5234  0031EE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5235  0031F0  0E45               	movlw	69
  5236  0031F2  6E19               	movwf	SETxAPIxVAL@index,c
  5237  0031F4  0E00               	movlw	0
  5238  0031F6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5239  0031F8  0E00               	movlw	0
  5240  0031FA  6E1B               	movwf	SETxAPIxVAL@value,c
  5241  0031FC  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  5242                           
  5243                           ;train_move_left.c: 51: Switch_Train_Move = 2;
  5244  003200  0E02               	movlw	2
  5245  003202  0100               	movlb	0	; () banked
  5246  003204  D017               	goto	L71
  5247  003206                     
  5248                           ; BSR set to: 0
  5249                           
  5250                           ; BSR set to: 0
  5251  003206  0E00               	movlw	0
  5252  003208  6E14               	movwf	GETxAPIxVAL@index+1,c
  5253  00320A  0E12               	movlw	18
  5254  00320C  6E13               	movwf	GETxAPIxVAL@index,c
  5255  00320E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5256  003212  5013               	movf	?_GETxAPIxVAL,w,c
  5257  003214  0100               	movlb	0	; () banked
  5258  003216  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5259  003218  5014               	movf	?_GETxAPIxVAL+1,w,c
  5260  00321A  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5261  00321C  A0D8               	btfss	status,0,c
  5262  00321E  D007               	goto	l1049
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;train_move_left.c: 56: {
  5266                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5267  003220  0E03               	movlw	3
  5268  003222                     L70:
  5269  003222  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5270                           
  5271                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5272  003224  0E00               	movlw	0
  5273  003226  6F67               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5274  003228  0E00               	movlw	0
  5275  00322A  6F66               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5276  00322C  D7C0               	goto	l7634
  5277  00322E                     l1049:
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;train_move_left.c: 61: }
  5281                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5282                           
  5283                           ; BSR set to: 0
  5284  00322E  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5285  003230  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5289  003232  0E02               	movlw	2
  5290  003234                     L71:
  5291  003234  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5292  003236  D7BB               	goto	l7634
  5293  003238                     
  5294                           ; BSR set to: 0
  5295                           
  5296                           ; BSR set to: 0
  5297  003238  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5298  00323C  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5299  003240  0E00               	movlw	0
  5300  003242  6E21               	movwf	SETxPWM@direction,c
  5301  003244  EC15  F01E         	call	_SETxPWM	;wreg free
  5302                           
  5303                           ;train_move_left.c: 68: Return_Val = 1;
  5304  003248  0E01               	movlw	1
  5305  00324A  0100               	movlb	0	; () banked
  5306  00324C  6FDF               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5310  00324E  0E00               	movlw	0
  5311  003250  6E14               	movwf	GETxAPIxVAL@index+1,c
  5312  003252  0E18               	movlw	24
  5313  003254  6E13               	movwf	GETxAPIxVAL@index,c
  5314  003256  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5315  00325A  5013               	movf	?_GETxAPIxVAL,w,c
  5316  00325C  0100               	movlb	0	; () banked
  5317  00325E  5D80               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5318  003260  5014               	movf	?_GETxAPIxVAL+1,w,c
  5319  003262  5981               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5320  003264  A0D8               	btfss	status,0,c
  5321  003266  D004               	goto	l1051
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;train_move_left.c: 70: {
  5325                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5326  003268  0E00               	movlw	0
  5327  00326A  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5328                           
  5329                           ;train_move_left.c: 72: Return_Val = 0;
  5330  00326C  0E00               	movlw	0
  5331  00326E  D7A0               	goto	L69
  5332  003270                     l1051:
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5336                           
  5337                           ; BSR set to: 0
  5338  003270  0E00               	movlw	0
  5339  003272  6E14               	movwf	GETxAPIxVAL@index+1,c
  5340  003274  0E1A               	movlw	26
  5341  003276  6E13               	movwf	GETxAPIxVAL@index,c
  5342  003278  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5343  00327C  5013               	movf	?_GETxAPIxVAL,w,c
  5344  00327E  0100               	movlb	0	; () banked
  5345  003280  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5346  003282  5014               	movf	?_GETxAPIxVAL+1,w,c
  5347  003284  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5348  003286  A0D8               	btfss	status,0,c
  5349  003288  D007               	goto	l1053
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;train_move_left.c: 76: {
  5353                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5354  00328A  4B80               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5355  00328C  2B81               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5359  00328E  0E00               	movlw	0
  5360  003290  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5361  003292  0E00               	movlw	0
  5362  003294  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5363                           
  5364                           ;train_move_left.c: 79: }
  5365  003296  D011               	goto	l1046
  5366  003298                     l1053:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5370                           
  5371                           ; BSR set to: 0
  5372  003298  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5373  00329A  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;train_move_left.c: 83: }
  5377                           
  5378                           ; BSR set to: 0
  5379                           
  5380                           ;train_move_left.c: 82: default : break;
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;train_move_left.c: 81: break;
  5384                           
  5385                           ; BSR set to: 0
  5386  00329C  D00E               	goto	l1046
  5387  00329E                     l1043:
  5388                           
  5389                           ; BSR set to: 0
  5390  00329E  0100               	movlb	0	; () banked
  5391  0032A0  5182               	movf	_Switch_Train_Move& (0+255),w,b
  5392                           
  5393                           ; Switch size 1, requested type "space"
  5394                           ; Number of cases is 4, Range of values is 0 to 3
  5395                           ; switch strategies available:
  5396                           ; Name         Instructions Cycles
  5397                           ; simple_byte           13     7 (average)
  5398                           ;	Chosen strategy is simple_byte
  5399  0032A2  0A00               	xorlw	0	; case 0
  5400  0032A4  B4D8               	btfsc	status,2,c
  5401  0032A6  D770               	goto	l1044
  5402  0032A8  0A01               	xorlw	1	; case 1
  5403  0032AA  B4D8               	btfsc	status,2,c
  5404  0032AC  D783               	goto	l1047
  5405  0032AE  0A03               	xorlw	3	; case 2
  5406  0032B0  B4D8               	btfsc	status,2,c
  5407  0032B2  D7A9               	goto	l1048
  5408  0032B4  0A01               	xorlw	1	; case 3
  5409  0032B6  B4D8               	btfsc	status,2,c
  5410  0032B8  D7BF               	goto	l1050
  5411  0032BA                     l1046:
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;train_move_left.c: 85: return(Return_Val);
  5415                           
  5416                           ; BSR set to: 0
  5417  0032BA  51DF               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5418  0032BC  0012               	return	
  5419  0032BE                     __end_of_Train_Move_Left_Start:
  5420                           	opt stack 0
  5421                           tblptru	equ	0xFF8
  5422                           tblptrh	equ	0xFF7
  5423                           tblptrl	equ	0xFF6
  5424                           tablat	equ	0xFF5
  5425                           postinc0	equ	0xFEE
  5426                           wreg	equ	0xFE8
  5427                           postdec1	equ	0xFE5
  5428                           fsr1l	equ	0xFE1
  5429                           status	equ	0xFD8
  5430                           
  5431 ;; *************** function _Train_Move_Left_Brake *****************
  5432 ;; Defined at:
  5433 ;;		line 254 in file "../train_move_left.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      unsigned char 
  5440 ;; Registers used:
  5441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5447 ;;      Params:         0       0       0       0       0       0       0       0       0
  5448 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5450 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5451 ;;Total ram usage:        2 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    6
  5454 ;; This function calls:
  5455 ;;		_GETxAPIxVAL
  5456 ;;		_SETxAPIxVAL
  5457 ;;		_SETxPWM
  5458 ;; This function is called by:
  5459 ;;		_Train_Path
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text6
  5464  002DC2                     __ptext6:
  5465                           	opt stack 0
  5466  002DC2                     _Train_Move_Left_Brake:
  5467                           	opt stack 22
  5468                           
  5469                           ;train_move_left.c: 256: static char Return_Val = 1;
  5470                           ;train_move_left.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5471                           ;train_move_left.c: 259: switch(Switch_Train_Move)
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;incstack = 0
  5475  002DC2  D092               	goto	l1113
  5476  002DC4  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5477  002DC8  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5478  002DCC  0E00               	movlw	0
  5479  002DCE  6E21               	movwf	SETxPWM@direction,c
  5480  002DD0  EC15  F01E         	call	_SETxPWM	;wreg free
  5481                           
  5482                           ;train_move_left.c: 262: Return_Val = 1;
  5483  002DD4  0E01               	movlw	1
  5484  002DD6  0100               	movlb	0	; () banked
  5485  002DD8  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;train_move_left.c: 263: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5489  002DDA  0E00               	movlw	0
  5490  002DDC  6E14               	movwf	GETxAPIxVAL@index+1,c
  5491  002DDE  0E15               	movlw	21
  5492  002DE0  6E13               	movwf	GETxAPIxVAL@index,c
  5493  002DE2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5494  002DE6  0100               	movlb	0	; () banked
  5495  002DE8  5180               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5496  002DEA  5C13               	subwf	?_GETxAPIxVAL,w,c
  5497  002DEC  5181               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5498  002DEE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5499  002DF0  A0D8               	btfss	status,0,c
  5500  002DF2  D002               	goto	l1115
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;train_move_left.c: 264: {
  5504                           ;train_move_left.c: 265: Switch_Train_Move = 1;
  5505  002DF4  0E01               	movlw	1
  5506  002DF6  D074               	goto	L98
  5507  002DF8                     l1115:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;train_move_left.c: 268: }
  5511                           ;train_move_left.c: 269: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5512                           
  5513                           ; BSR set to: 0
  5514  002DF8  0E00               	movlw	0
  5515  002DFA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5516  002DFC  0E19               	movlw	25
  5517  002DFE  6E13               	movwf	GETxAPIxVAL@index,c
  5518  002E00  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5519  002E04  5013               	movf	?_GETxAPIxVAL,w,c
  5520  002E06  0100               	movlb	0	; () banked
  5521  002E08  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5522  002E0A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5523  002E0C  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5524  002E0E  A0D8               	btfss	status,0,c
  5525  002E10  D008               	goto	l1117
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;train_move_left.c: 270: {
  5529                           ;train_move_left.c: 271: Train_Move_Pwm_Count--;
  5530  002E12  0780               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5531  002E14  A0D8               	btfss	status,0,c
  5532  002E16  0781               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;train_move_left.c: 272: Train_Move_Pwm_Fast_Count = 0;
  5536  002E18  0E00               	movlw	0
  5537  002E1A  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5538  002E1C  0E00               	movlw	0
  5539  002E1E  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5540                           
  5541                           ;train_move_left.c: 273: }
  5542  002E20  D071               	goto	l1116
  5543  002E22                     l1117:
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;train_move_left.c: 274: else{Train_Move_Pwm_Fast_Count++;}
  5547                           
  5548                           ; BSR set to: 0
  5549  002E22  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5550  002E24  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;train_move_left.c: 275: break;
  5554  002E26  D06E               	goto	l1116
  5555  002E28                     
  5556                           ; BSR set to: 0
  5557                           
  5558                           ; BSR set to: 0
  5559  002E28  0E00               	movlw	0
  5560  002E2A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5561  002E2C  0E12               	movlw	18
  5562  002E2E  6E13               	movwf	GETxAPIxVAL@index,c
  5563  002E30  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5564  002E34  5013               	movf	?_GETxAPIxVAL,w,c
  5565  002E36  0100               	movlb	0	; () banked
  5566  002E38  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5567  002E3A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5568  002E3C  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5569  002E3E  A0D8               	btfss	status,0,c
  5570  002E40  D007               	goto	l1120
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;train_move_left.c: 278: {
  5574                           ;train_move_left.c: 279: Switch_Train_Move = 2;
  5575  002E42  0E02               	movlw	2
  5576  002E44  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5577                           
  5578                           ;train_move_left.c: 280: Train_Move_Wait_Time = 0;
  5579  002E46  0E00               	movlw	0
  5580  002E48  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5581  002E4A  0E00               	movlw	0
  5582  002E4C  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5583  002E4E  D049               	goto	l7770
  5584  002E50                     l1120:
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;train_move_left.c: 283: }
  5588                           ;train_move_left.c: 284: Return_Val = 1;
  5589                           
  5590                           ; BSR set to: 0
  5591  002E50  0E01               	movlw	1
  5592  002E52  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;train_move_left.c: 285: Train_Move_Wait_Time++;
  5596  002E54  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5597  002E56  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;train_move_left.c: 286: Switch_Train_Move = 1;
  5601  002E58  0E01               	movlw	1
  5602  002E5A  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5603                           
  5604                           ;train_move_left.c: 287: break;
  5605  002E5C  D053               	goto	l1116
  5606  002E5E                     
  5607                           ; BSR set to: 0
  5608                           
  5609                           ; BSR set to: 0
  5610  002E5E  0E00               	movlw	0
  5611  002E60  6E14               	movwf	GETxAPIxVAL@index+1,c
  5612  002E62  0E15               	movlw	21
  5613  002E64  6E13               	movwf	GETxAPIxVAL@index,c
  5614  002E66  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5615  002E6A  C013  F0CB         	movff	?_GETxAPIxVAL,_Train_Move_Left_Brake$2178
  5616  002E6E  C014  F0CC         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Brake$2178+1
  5617  002E72  C0CB  F01F         	movff	_Train_Move_Left_Brake$2178,SETxPWM@speed
  5618  002E76  C0CC  F020         	movff	_Train_Move_Left_Brake$2178+1,SETxPWM@speed+1
  5619  002E7A  0E00               	movlw	0
  5620  002E7C  6E21               	movwf	SETxPWM@direction,c
  5621  002E7E  EC15  F01E         	call	_SETxPWM	;wreg free
  5622                           
  5623                           ;train_move_left.c: 290: SETxAPIxVAL(69, 1);;
  5624  002E82  0E00               	movlw	0
  5625  002E84  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5626  002E86  0E45               	movlw	69
  5627  002E88  6E19               	movwf	SETxAPIxVAL@index,c
  5628  002E8A  0E00               	movlw	0
  5629  002E8C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5630  002E8E  0E01               	movlw	1
  5631  002E90  6E1B               	movwf	SETxAPIxVAL@value,c
  5632  002E92  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  5633                           
  5634                           ;train_move_left.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5635  002E96  0E00               	movlw	0
  5636  002E98  6E14               	movwf	GETxAPIxVAL@index+1,c
  5637  002E9A  0E15               	movlw	21
  5638  002E9C  6E13               	movwf	GETxAPIxVAL@index,c
  5639  002E9E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5640  002EA2  C013  F080         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5641  002EA6  C014  F081         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5642                           
  5643                           ;train_move_left.c: 292: Switch_Train_Move = 3;
  5644  002EAA  0E03               	movlw	3
  5645  002EAC  0100               	movlb	0	; () banked
  5646  002EAE  D018               	goto	L98
  5647  002EB0                     
  5648                           ; BSR set to: 0
  5649                           
  5650                           ; BSR set to: 0
  5651  002EB0  0E00               	movlw	0
  5652  002EB2  6E14               	movwf	GETxAPIxVAL@index+1,c
  5653  002EB4  0E14               	movlw	20
  5654  002EB6  6E13               	movwf	GETxAPIxVAL@index,c
  5655  002EB8  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5656  002EBC  5013               	movf	?_GETxAPIxVAL,w,c
  5657  002EBE  0100               	movlb	0	; () banked
  5658  002EC0  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5659  002EC2  5014               	movf	?_GETxAPIxVAL+1,w,c
  5660  002EC4  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5661  002EC6  A0D8               	btfss	status,0,c
  5662  002EC8  D008               	goto	l1123
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;train_move_left.c: 297: {
  5666                           ;train_move_left.c: 298: Switch_Train_Move = 0;
  5667  002ECA  0E00               	movlw	0
  5668  002ECC  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5669                           
  5670                           ;train_move_left.c: 299: Train_Move_Wait_Time = 0;
  5671  002ECE  0E00               	movlw	0
  5672  002ED0  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5673  002ED2  0E00               	movlw	0
  5674  002ED4  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5675                           
  5676                           ;train_move_left.c: 300: Return_Val = 0;
  5677  002ED6  0E00               	movlw	0
  5678  002ED8  D005               	goto	L74
  5679  002EDA                     l1123:
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;train_move_left.c: 302: }
  5683                           ;train_move_left.c: 303: Train_Move_Wait_Time++;
  5684                           
  5685                           ; BSR set to: 0
  5686  002EDA  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5687  002EDC  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;train_move_left.c: 304: Switch_Train_Move = 3;
  5691  002EDE  0E03               	movlw	3
  5692  002EE0                     L98:
  5693  002EE0  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5694  002EE2                     l7770:
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;train_move_left.c: 305: Return_Val = 1;
  5698  002EE2  0E01               	movlw	1
  5699  002EE4                     L74:
  5700  002EE4  6FDE               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;train_move_left.c: 309: }
  5704                           
  5705                           ; BSR set to: 0
  5706                           
  5707                           ;train_move_left.c: 308: default : break;
  5708                           
  5709                           ;train_move_left.c: 306: break;
  5710  002EE6  D00E               	goto	l1116
  5711  002EE8                     l1113:
  5712                           
  5713                           ; BSR set to: 0
  5714  002EE8  0100               	movlb	0	; () banked
  5715  002EEA  5182               	movf	_Switch_Train_Move& (0+255),w,b
  5716                           
  5717                           ; Switch size 1, requested type "space"
  5718                           ; Number of cases is 4, Range of values is 0 to 3
  5719                           ; switch strategies available:
  5720                           ; Name         Instructions Cycles
  5721                           ; simple_byte           13     7 (average)
  5722                           ;	Chosen strategy is simple_byte
  5723  002EEC  0A00               	xorlw	0	; case 0
  5724  002EEE  B4D8               	btfsc	status,2,c
  5725  002EF0  D769               	goto	l1114
  5726  002EF2  0A01               	xorlw	1	; case 1
  5727  002EF4  B4D8               	btfsc	status,2,c
  5728  002EF6  D798               	goto	l1119
  5729  002EF8  0A03               	xorlw	3	; case 2
  5730  002EFA  B4D8               	btfsc	status,2,c
  5731  002EFC  D7B0               	goto	l1121
  5732  002EFE  0A01               	xorlw	1	; case 3
  5733  002F00  B4D8               	btfsc	status,2,c
  5734  002F02  D7D6               	goto	l1122
  5735  002F04                     l1116:
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;train_move_left.c: 311: return(Return_Val);
  5739                           
  5740                           ; BSR set to: 0
  5741  002F04  51DE               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5742  002F06  0012               	return	
  5743  002F08                     __end_of_Train_Move_Left_Brake:
  5744                           	opt stack 0
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           postinc0	equ	0xFEE
  5750                           wreg	equ	0xFE8
  5751                           postdec1	equ	0xFE5
  5752                           fsr1l	equ	0xFE1
  5753                           status	equ	0xFD8
  5754                           
  5755 ;; *************** function _Right_Mountain_From_The_Right *****************
  5756 ;; Defined at:
  5757 ;;		line 103 in file "../train_move_left.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  rc              1    wreg     unsigned char 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  rc              1   21[BANK0 ] unsigned char 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      unsigned char 
  5764 ;; Registers used:
  5765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5771 ;;      Params:         0       0       0       0       0       0       0       0       0
  5772 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5774 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5775 ;;Total ram usage:        1 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    6
  5778 ;; This function calls:
  5779 ;;		_GETxAPIxVAL
  5780 ;;		_SETxPWM
  5781 ;; This function is called by:
  5782 ;;		_Train_Path
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text7
  5787  00351E                     __ptext7:
  5788                           	opt stack 0
  5789  00351E                     _Right_Mountain_From_The_Right:
  5790                           	opt stack 22
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;incstack = 0
  5794                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5795  00351E  0100               	movlb	0	; () banked
  5796  003520  6FCB               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  5797                           
  5798                           ;train_move_left.c: 105: static char Return_Val = 1;
  5799                           ;train_move_left.c: 107: switch (Switch_Moutain){
  5800  003522  D07E               	goto	l1061
  5801  003524  0E03               	movlw	3
  5802  003526  0100               	movlb	0	; () banked
  5803  003528  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5804  00352A  B4D8               	btfsc	status,2,c
  5805  00352C  D00C               	goto	u6830
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  5809                           
  5810                           ; BSR set to: 0
  5811                           
  5812                           ;train_move_left.c: 111: }
  5813                           
  5814                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;train_move_left.c: 109: Switch_Moutain = 1;
  5818  00352E  0E00               	movlw	0
  5819  003530  6E14               	movwf	GETxAPIxVAL@index+1,c
  5820  003532  0E35               	movlw	53
  5821  003534  6E13               	movwf	GETxAPIxVAL@index,c
  5822  003536  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5823  00353A  5013               	movf	?_GETxAPIxVAL,w,c
  5824  00353C  5C26               	subwf	_Mountain_Delay_Counter,w,c
  5825  00353E  5014               	movf	?_GETxAPIxVAL+1,w,c
  5826  003540  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  5827  003542  A0D8               	btfss	status,0,c
  5828  003544  D007               	goto	l1065
  5829  003546                     u6830:
  5830                           
  5831                           ;train_move_left.c: 113: Switch_Moutain = 1;
  5832  003546  0E01               	movlw	1
  5833  003548  6E2C               	movwf	_Switch_Moutain,c
  5834                           
  5835                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  5836  00354A  0E00               	movlw	0
  5837  00354C  6E27               	movwf	_Mountain_Delay_Counter+1,c
  5838  00354E  0E00               	movlw	0
  5839  003550  6E26               	movwf	_Mountain_Delay_Counter,c
  5840                           
  5841                           ;train_move_left.c: 115: }
  5842  003552  D063               	goto	l1079
  5843  003554                     l1065:
  5844                           
  5845                           ;train_move_left.c: 116: else{
  5846                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  5847  003554  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  5848  003556  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  5849  003558  D060               	goto	l1079
  5850  00355A  0E04               	movlw	4
  5851  00355C  0100               	movlb	0	; () banked
  5852  00355E  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5853  003560  A4D8               	btfss	status,2,c
  5854  003562  D026               	goto	l1069
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;train_move_left.c: 123: SETxPWM(Train_Move_Pwm_Count, 0);
  5858  003564  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5859  003568  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5860  00356C  0E00               	movlw	0
  5861  00356E  6E21               	movwf	SETxPWM@direction,c
  5862  003570  EC15  F01E         	call	_SETxPWM	;wreg free
  5863                           
  5864                           ;train_move_left.c: 124: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  5865  003574  0E00               	movlw	0
  5866  003576  6E14               	movwf	GETxAPIxVAL@index+1,c
  5867  003578  0E2E               	movlw	46
  5868  00357A  6E13               	movwf	GETxAPIxVAL@index,c
  5869  00357C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5870  003580  0100               	movlb	0	; () banked
  5871  003582  5180               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5872  003584  5C13               	subwf	?_GETxAPIxVAL,w,c
  5873  003586  5181               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5874  003588  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5875  00358A  B0D8               	btfsc	status,0,c
  5876  00358C  D02A               	goto	u6880
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;train_move_left.c: 131: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5880                           
  5881                           ; BSR set to: 0
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;train_move_left.c: 130: }
  5885                           
  5886                           ;train_move_left.c: 129: break;
  5887                           
  5888                           ;train_move_left.c: 128: Return_Val = 0;
  5889                           
  5890                           ;train_move_left.c: 127: Switch_Moutain = 0;
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;train_move_left.c: 125: {
  5894                           ;train_move_left.c: 126: Switch_Train_Move = 0;
  5895  00358E  0E00               	movlw	0
  5896  003590  6E14               	movwf	GETxAPIxVAL@index+1,c
  5897  003592  0E1A               	movlw	26
  5898  003594  6E13               	movwf	GETxAPIxVAL@index,c
  5899  003596  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5900  00359A  5013               	movf	?_GETxAPIxVAL,w,c
  5901  00359C  0100               	movlb	0	; () banked
  5902  00359E  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5903  0035A0  5014               	movf	?_GETxAPIxVAL+1,w,c
  5904  0035A2  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5905  0035A4  A0D8               	btfss	status,0,c
  5906  0035A6  D037               	goto	l1078
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;train_move_left.c: 132: {
  5910                           ;train_move_left.c: 133: Train_Move_Pwm_Count--;
  5911  0035A8  0780               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5912  0035AA  A0D8               	btfss	status,0,c
  5913  0035AC  0781               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5914  0035AE  D02E               	goto	l7934
  5915  0035B0                     l1069:
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;train_move_left.c: 138: else if (rc == 3){
  5919                           
  5920                           ; BSR set to: 0
  5921  0035B0  0E03               	movlw	3
  5922  0035B2  19CB               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5923  0035B4  A4D8               	btfss	status,2,c
  5924  0035B6  D031               	goto	l1079
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;train_move_left.c: 139: SETxPWM(Train_Move_Pwm_Count, 0);
  5928  0035B8  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5929  0035BC  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5930  0035C0  0E00               	movlw	0
  5931  0035C2  6E21               	movwf	SETxPWM@direction,c
  5932  0035C4  EC15  F01E         	call	_SETxPWM	;wreg free
  5933                           
  5934                           ;train_move_left.c: 140: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5935  0035C8  0E00               	movlw	0
  5936  0035CA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5937  0035CC  0E18               	movlw	24
  5938  0035CE  6E13               	movwf	GETxAPIxVAL@index,c
  5939  0035D0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5940  0035D4  5013               	movf	?_GETxAPIxVAL,w,c
  5941  0035D6  0100               	movlb	0	; () banked
  5942  0035D8  5D80               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5943  0035DA  5014               	movf	?_GETxAPIxVAL+1,w,c
  5944  0035DC  5981               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5945  0035DE  A0D8               	btfss	status,0,c
  5946  0035E0  D006               	goto	l1076
  5947  0035E2                     u6880:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;train_move_left.c: 141: {
  5951                           ;train_move_left.c: 142: Switch_Train_Move = 0;
  5952  0035E2  0E00               	movlw	0
  5953  0035E4  6F82               	movwf	_Switch_Train_Move& (0+255),b
  5954                           
  5955                           ;train_move_left.c: 143: Switch_Moutain = 0;
  5956  0035E6  0E00               	movlw	0
  5957  0035E8  6E2C               	movwf	_Switch_Moutain,c
  5958                           
  5959                           ;train_move_left.c: 144: Return_Val = 0;
  5960  0035EA  0E00               	movlw	0
  5961  0035EC  D017               	goto	L78
  5962  0035EE                     l1076:
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;train_move_left.c: 147: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5966                           
  5967                           ; BSR set to: 0
  5968  0035EE  0E00               	movlw	0
  5969  0035F0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5970  0035F2  0E1A               	movlw	26
  5971  0035F4  6E13               	movwf	GETxAPIxVAL@index,c
  5972  0035F6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  5973  0035FA  5013               	movf	?_GETxAPIxVAL,w,c
  5974  0035FC  0100               	movlb	0	; () banked
  5975  0035FE  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5976  003600  5014               	movf	?_GETxAPIxVAL+1,w,c
  5977  003602  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5978  003604  A0D8               	btfss	status,0,c
  5979  003606  D007               	goto	l1078
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;train_move_left.c: 148: {
  5983                           ;train_move_left.c: 149: Train_Move_Pwm_Count++;
  5984  003608  4B80               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5985  00360A  2B81               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5986  00360C                     l7934:
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;train_move_left.c: 150: Train_Move_Pwm_Fast_Count = 0;
  5990  00360C  0E00               	movlw	0
  5991  00360E  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5992  003610  0E00               	movlw	0
  5993  003612  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5994                           
  5995                           ;train_move_left.c: 151: }
  5996  003614  D002               	goto	l1079
  5997  003616                     l1078:
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;train_move_left.c: 152: else{Train_Move_Pwm_Fast_Count++;}
  6001                           
  6002                           ; BSR set to: 0
  6003  003616  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6004  003618  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6005  00361A                     l1079:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;train_move_left.c: 153: }
  6009                           ;train_move_left.c: 154: Return_Val = 1;
  6010                           
  6011                           ; BSR set to: 0
  6012                           
  6013                           ; BSR set to: 0
  6014                           
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018  00361A  0E01               	movlw	1
  6019  00361C                     L78:
  6020  00361C  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;train_move_left.c: 159: }
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;train_move_left.c: 158: break;
  6027                           
  6028                           ;train_move_left.c: 157: default:
  6029                           
  6030                           ;train_move_left.c: 155: break;
  6031  00361E  D007               	goto	l1067
  6032  003620                     l1061:
  6033                           
  6034                           ; BSR set to: 0
  6035  003620  502C               	movf	_Switch_Moutain,w,c
  6036                           
  6037                           ; Switch size 1, requested type "space"
  6038                           ; Number of cases is 2, Range of values is 0 to 1
  6039                           ; switch strategies available:
  6040                           ; Name         Instructions Cycles
  6041                           ; simple_byte            7     4 (average)
  6042                           ;	Chosen strategy is simple_byte
  6043  003622  0A00               	xorlw	0	; case 0
  6044  003624  B4D8               	btfsc	status,2,c
  6045  003626  D77E               	goto	l1062
  6046  003628  0A01               	xorlw	1	; case 1
  6047  00362A  B4D8               	btfsc	status,2,c
  6048  00362C  D796               	goto	l1068
  6049  00362E                     l1067:
  6050                           
  6051                           ;train_move_left.c: 161: return(Return_Val);
  6052  00362E  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  6053  003630  0012               	return	
  6054  003632                     __end_of_Right_Mountain_From_The_Right:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           postinc0	equ	0xFEE
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1l	equ	0xFE1
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _Right_Mountain_From_The_Left *****************
  6067 ;; Defined at:
  6068 ;;		line 179 in file "../train_move_right.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  rc              1    wreg     unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  rc              1   21[BANK0 ] unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      unsigned char 
  6075 ;; Registers used:
  6076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0
  6083 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6085 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6086 ;;Total ram usage:        1 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    6
  6089 ;; This function calls:
  6090 ;;		_GETxAPIxVAL
  6091 ;;		_SETxPWM
  6092 ;; This function is called by:
  6093 ;;		_Train_Path
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text8
  6098  003632                     __ptext8:
  6099                           	opt stack 0
  6100  003632                     _Right_Mountain_From_The_Left:
  6101                           	opt stack 22
  6102                           
  6103                           ;incstack = 0
  6104                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6105  003632  0100               	movlb	0	; () banked
  6106  003634  6FCB               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6107                           
  6108                           ;train_move_right.c: 181: static char Return_Val = 1;
  6109                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6110  003636  D07E               	goto	l1189
  6111  003638  0E04               	movlw	4
  6112  00363A  0100               	movlb	0	; () banked
  6113  00363C  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6114  00363E  B4D8               	btfsc	status,2,c
  6115  003640  D00C               	goto	u6750
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  6119                           
  6120                           ; BSR set to: 0
  6121                           
  6122                           ;train_move_right.c: 187: }
  6123                           
  6124                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6128  003642  0E00               	movlw	0
  6129  003644  6E14               	movwf	GETxAPIxVAL@index+1,c
  6130  003646  0E38               	movlw	56
  6131  003648  6E13               	movwf	GETxAPIxVAL@index,c
  6132  00364A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6133  00364E  5013               	movf	?_GETxAPIxVAL,w,c
  6134  003650  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6135  003652  5014               	movf	?_GETxAPIxVAL+1,w,c
  6136  003654  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6137  003656  A0D8               	btfss	status,0,c
  6138  003658  D007               	goto	l1193
  6139  00365A                     u6750:
  6140                           
  6141                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6142  00365A  0E01               	movlw	1
  6143  00365C  6E2C               	movwf	_Switch_Moutain,c
  6144                           
  6145                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6146  00365E  0E00               	movlw	0
  6147  003660  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6148  003662  0E00               	movlw	0
  6149  003664  6E26               	movwf	_Mountain_Delay_Counter,c
  6150                           
  6151                           ;train_move_right.c: 191: }
  6152  003666  D063               	goto	l1207
  6153  003668                     l1193:
  6154                           
  6155                           ;train_move_right.c: 192: else{
  6156                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6157  003668  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6158  00366A  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6159  00366C  D060               	goto	l1207
  6160  00366E  0E03               	movlw	3
  6161  003670  0100               	movlb	0	; () banked
  6162  003672  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6163  003674  A4D8               	btfss	status,2,c
  6164  003676  D025               	goto	l1197
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6168  003678  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6169  00367C  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6170  003680  0E01               	movlw	1
  6171  003682  6E21               	movwf	SETxPWM@direction,c
  6172  003684  EC15  F01E         	call	_SETxPWM	;wreg free
  6173                           
  6174                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  6175  003688  0E00               	movlw	0
  6176  00368A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6177  00368C  0E2F               	movlw	47
  6178  00368E  6E13               	movwf	GETxAPIxVAL@index,c
  6179  003690  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6180  003694  5013               	movf	?_GETxAPIxVAL,w,c
  6181  003696  0100               	movlb	0	; () banked
  6182  003698  5D80               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6183  00369A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6184  00369C  5981               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6185  00369E  B0D8               	btfsc	status,0,c
  6186  0036A0  D029               	goto	u6800
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6190                           
  6191                           ; BSR set to: 0
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;train_move_right.c: 206: }
  6195                           
  6196                           ;train_move_right.c: 205: break;
  6197                           
  6198                           ;train_move_right.c: 204: Return_Val = 0;
  6199                           
  6200                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;train_move_right.c: 201: {
  6204                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6205  0036A2  0E00               	movlw	0
  6206  0036A4  6E14               	movwf	GETxAPIxVAL@index+1,c
  6207  0036A6  0E1A               	movlw	26
  6208  0036A8  6E13               	movwf	GETxAPIxVAL@index,c
  6209  0036AA  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6210  0036AE  5013               	movf	?_GETxAPIxVAL,w,c
  6211  0036B0  0100               	movlb	0	; () banked
  6212  0036B2  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6213  0036B4  5014               	movf	?_GETxAPIxVAL+1,w,c
  6214  0036B6  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6215  0036B8  A0D8               	btfss	status,0,c
  6216  0036BA  D037               	goto	l1206
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;train_move_right.c: 208: {
  6220                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6221  0036BC  4B80               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6222  0036BE  2B81               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6223  0036C0  D02F               	goto	l7878
  6224  0036C2                     l1197:
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;train_move_right.c: 214: else if (rc == 4){
  6228                           
  6229                           ; BSR set to: 0
  6230  0036C2  0E04               	movlw	4
  6231  0036C4  19CB               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6232  0036C6  A4D8               	btfss	status,2,c
  6233  0036C8  D032               	goto	l1207
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6237  0036CA  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6238  0036CE  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6239  0036D2  0E01               	movlw	1
  6240  0036D4  6E21               	movwf	SETxPWM@direction,c
  6241  0036D6  EC15  F01E         	call	_SETxPWM	;wreg free
  6242                           
  6243                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  6244  0036DA  0E00               	movlw	0
  6245  0036DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  6246  0036DE  0E17               	movlw	23
  6247  0036E0  6E13               	movwf	GETxAPIxVAL@index,c
  6248  0036E2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6249  0036E6  0100               	movlb	0	; () banked
  6250  0036E8  5180               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6251  0036EA  5C13               	subwf	?_GETxAPIxVAL,w,c
  6252  0036EC  5181               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6253  0036EE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6254  0036F0  A0D8               	btfss	status,0,c
  6255  0036F2  D006               	goto	l1204
  6256  0036F4                     u6800:
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;train_move_right.c: 217: {
  6260                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6261  0036F4  0E00               	movlw	0
  6262  0036F6  6F82               	movwf	_Switch_Train_Move& (0+255),b
  6263                           
  6264                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6265  0036F8  0E00               	movlw	0
  6266  0036FA  6E2C               	movwf	_Switch_Moutain,c
  6267                           
  6268                           ;train_move_right.c: 220: Return_Val = 0;
  6269  0036FC  0E00               	movlw	0
  6270  0036FE  D018               	goto	L81
  6271  003700                     l1204:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6275                           
  6276                           ; BSR set to: 0
  6277  003700  0E00               	movlw	0
  6278  003702  6E14               	movwf	GETxAPIxVAL@index+1,c
  6279  003704  0E1A               	movlw	26
  6280  003706  6E13               	movwf	GETxAPIxVAL@index,c
  6281  003708  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6282  00370C  5013               	movf	?_GETxAPIxVAL,w,c
  6283  00370E  0100               	movlb	0	; () banked
  6284  003710  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6285  003712  5014               	movf	?_GETxAPIxVAL+1,w,c
  6286  003714  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6287  003716  A0D8               	btfss	status,0,c
  6288  003718  D008               	goto	l1206
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;train_move_right.c: 224: {
  6292                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  6293  00371A  0780               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6294  00371C  A0D8               	btfss	status,0,c
  6295  00371E  0781               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6296  003720                     l7878:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  6300  003720  0E00               	movlw	0
  6301  003722  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6302  003724  0E00               	movlw	0
  6303  003726  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6304                           
  6305                           ;train_move_right.c: 227: }
  6306  003728  D002               	goto	l1207
  6307  00372A                     l1206:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  6311                           
  6312                           ; BSR set to: 0
  6313  00372A  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6314  00372C  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6315  00372E                     l1207:
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;train_move_right.c: 229: }
  6319                           ;train_move_right.c: 230: Return_Val = 1;
  6320                           
  6321                           ; BSR set to: 0
  6322                           
  6323                           ; BSR set to: 0
  6324                           
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328  00372E  0E01               	movlw	1
  6329  003730                     L81:
  6330  003730  6E48               	movwf	Right_Mountain_From_The_Left@Return_Val,c
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;train_move_right.c: 235: }
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;train_move_right.c: 234: break;
  6337                           
  6338                           ;train_move_right.c: 233: default:
  6339                           
  6340                           ;train_move_right.c: 231: break;
  6341  003732  D007               	goto	l1195
  6342  003734                     l1189:
  6343                           
  6344                           ; BSR set to: 0
  6345  003734  502C               	movf	_Switch_Moutain,w,c
  6346                           
  6347                           ; Switch size 1, requested type "space"
  6348                           ; Number of cases is 2, Range of values is 0 to 1
  6349                           ; switch strategies available:
  6350                           ; Name         Instructions Cycles
  6351                           ; simple_byte            7     4 (average)
  6352                           ;	Chosen strategy is simple_byte
  6353  003736  0A00               	xorlw	0	; case 0
  6354  003738  B4D8               	btfsc	status,2,c
  6355  00373A  D77E               	goto	l1190
  6356  00373C  0A01               	xorlw	1	; case 1
  6357  00373E  B4D8               	btfsc	status,2,c
  6358  003740  D796               	goto	l1196
  6359  003742                     l1195:
  6360                           
  6361                           ;train_move_right.c: 237: return(Return_Val);
  6362  003742  5048               	movf	Right_Mountain_From_The_Left@Return_Val,w,c
  6363  003744  0012               	return	
  6364  003746                     __end_of_Right_Mountain_From_The_Left:
  6365                           	opt stack 0
  6366                           tblptru	equ	0xFF8
  6367                           tblptrh	equ	0xFF7
  6368                           tblptrl	equ	0xFF6
  6369                           tablat	equ	0xFF5
  6370                           postinc0	equ	0xFEE
  6371                           wreg	equ	0xFE8
  6372                           postdec1	equ	0xFE5
  6373                           fsr1l	equ	0xFE1
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _Left_Mountain_From_The_Right *****************
  6377 ;; Defined at:
  6378 ;;		line 178 in file "../train_move_left.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  rc              1    wreg     unsigned char 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  rc              1   21[BANK0 ] unsigned char 
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      unsigned char 
  6385 ;; Registers used:
  6386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6392 ;;      Params:         0       0       0       0       0       0       0       0       0
  6393 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6395 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6396 ;;Total ram usage:        1 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    6
  6399 ;; This function calls:
  6400 ;;		_GETxAPIxVAL
  6401 ;;		_SETxPWM
  6402 ;; This function is called by:
  6403 ;;		_Train_Path
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text9
  6408  00396C                     __ptext9:
  6409                           	opt stack 0
  6410  00396C                     _Left_Mountain_From_The_Right:
  6411                           	opt stack 22
  6412                           
  6413                           ;incstack = 0
  6414                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6415  00396C  0100               	movlb	0	; () banked
  6416  00396E  6FCB               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6417                           
  6418                           ;train_move_left.c: 180: static char Return_Val = 1;
  6419                           ;train_move_left.c: 182: switch (Switch_Moutain){
  6420  003970  D07C               	goto	l1086
  6421  003972  0100               	movlb	0	; () banked
  6422  003974  05CB               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6423  003976  B4D8               	btfsc	status,2,c
  6424  003978  D00C               	goto	u6910
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;train_move_left.c: 187: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6428                           
  6429                           ; BSR set to: 0
  6430                           
  6431                           ;train_move_left.c: 186: }
  6432                           
  6433                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;train_move_left.c: 184: Switch_Moutain = 1;
  6437  00397A  0E00               	movlw	0
  6438  00397C  6E14               	movwf	GETxAPIxVAL@index+1,c
  6439  00397E  0E3A               	movlw	58
  6440  003980  6E13               	movwf	GETxAPIxVAL@index,c
  6441  003982  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6442  003986  5013               	movf	?_GETxAPIxVAL,w,c
  6443  003988  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6444  00398A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6445  00398C  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6446  00398E  A0D8               	btfss	status,0,c
  6447  003990  D007               	goto	l1090
  6448  003992                     u6910:
  6449                           
  6450                           ;train_move_left.c: 188: Switch_Moutain = 1;
  6451  003992  0E01               	movlw	1
  6452  003994  6E2C               	movwf	_Switch_Moutain,c
  6453                           
  6454                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  6455  003996  0E00               	movlw	0
  6456  003998  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6457  00399A  0E00               	movlw	0
  6458  00399C  6E26               	movwf	_Mountain_Delay_Counter,c
  6459                           
  6460                           ;train_move_left.c: 190: }
  6461  00399E  D062               	goto	l1104
  6462  0039A0                     l1090:
  6463                           
  6464                           ;train_move_left.c: 191: else{
  6465                           ;train_move_left.c: 192: Mountain_Delay_Counter++;
  6466  0039A0  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6467  0039A2  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6468  0039A4  D05F               	goto	l1104
  6469  0039A6  0E02               	movlw	2
  6470  0039A8  0100               	movlb	0	; () banked
  6471  0039AA  19CB               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6472  0039AC  A4D8               	btfss	status,2,c
  6473  0039AE  D025               	goto	l1094
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;train_move_left.c: 198: SETxPWM(Train_Move_Pwm_Count, 0);
  6477  0039B0  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6478  0039B4  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6479  0039B8  0E00               	movlw	0
  6480  0039BA  6E21               	movwf	SETxPWM@direction,c
  6481  0039BC  EC15  F01E         	call	_SETxPWM	;wreg free
  6482                           
  6483                           ;train_move_left.c: 199: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6484  0039C0  0E00               	movlw	0
  6485  0039C2  6E14               	movwf	GETxAPIxVAL@index+1,c
  6486  0039C4  0E34               	movlw	52
  6487  0039C6  6E13               	movwf	GETxAPIxVAL@index,c
  6488  0039C8  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6489  0039CC  5013               	movf	?_GETxAPIxVAL,w,c
  6490  0039CE  0100               	movlb	0	; () banked
  6491  0039D0  5D80               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6492  0039D2  5014               	movf	?_GETxAPIxVAL+1,w,c
  6493  0039D4  5981               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6494  0039D6  B0D8               	btfsc	status,0,c
  6495  0039D8  D028               	goto	u6960
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;train_move_left.c: 206: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6499                           
  6500                           ; BSR set to: 0
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;train_move_left.c: 205: }
  6504                           
  6505                           ;train_move_left.c: 204: break;
  6506                           
  6507                           ;train_move_left.c: 203: Return_Val = 0;
  6508                           
  6509                           ;train_move_left.c: 202: Switch_Moutain = 0;
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;train_move_left.c: 200: {
  6513                           ;train_move_left.c: 201: Switch_Train_Move = 0;
  6514  0039DA  0E00               	movlw	0
  6515  0039DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  6516  0039DE  0E1A               	movlw	26
  6517  0039E0  6E13               	movwf	GETxAPIxVAL@index,c
  6518  0039E2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6519  0039E6  5013               	movf	?_GETxAPIxVAL,w,c
  6520  0039E8  0100               	movlb	0	; () banked
  6521  0039EA  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6522  0039EC  5014               	movf	?_GETxAPIxVAL+1,w,c
  6523  0039EE  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6524  0039F0  A0D8               	btfss	status,0,c
  6525  0039F2  D036               	goto	l1103
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;train_move_left.c: 207: {
  6529                           ;train_move_left.c: 208: Train_Move_Pwm_Count++;
  6530  0039F4  4B80               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6531  0039F6  2B81               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6532  0039F8  D02E               	goto	l7990
  6533  0039FA                     l1094:
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;train_move_left.c: 213: else if (rc == 1){
  6537                           
  6538                           ; BSR set to: 0
  6539  0039FA  05CB               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6540  0039FC  A4D8               	btfss	status,2,c
  6541  0039FE  D032               	goto	l1104
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;train_move_left.c: 214: SETxPWM(Train_Move_Pwm_Count, 0);
  6545  003A00  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6546  003A04  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6547  003A08  0E00               	movlw	0
  6548  003A0A  6E21               	movwf	SETxPWM@direction,c
  6549  003A0C  EC15  F01E         	call	_SETxPWM	;wreg free
  6550                           
  6551                           ;train_move_left.c: 215: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6552  003A10  0E00               	movlw	0
  6553  003A12  6E14               	movwf	GETxAPIxVAL@index+1,c
  6554  003A14  0E18               	movlw	24
  6555  003A16  6E13               	movwf	GETxAPIxVAL@index,c
  6556  003A18  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6557  003A1C  0100               	movlb	0	; () banked
  6558  003A1E  5180               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6559  003A20  5C13               	subwf	?_GETxAPIxVAL,w,c
  6560  003A22  5181               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6561  003A24  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6562  003A26  A0D8               	btfss	status,0,c
  6563  003A28  D006               	goto	l1101
  6564  003A2A                     u6960:
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;train_move_left.c: 216: {
  6568                           ;train_move_left.c: 217: Switch_Train_Move = 0;
  6569  003A2A  0E00               	movlw	0
  6570  003A2C  6F82               	movwf	_Switch_Train_Move& (0+255),b
  6571                           
  6572                           ;train_move_left.c: 218: Switch_Moutain = 0;
  6573  003A2E  0E00               	movlw	0
  6574  003A30  6E2C               	movwf	_Switch_Moutain,c
  6575                           
  6576                           ;train_move_left.c: 219: Return_Val = 0;
  6577  003A32  0E00               	movlw	0
  6578  003A34  D018               	goto	L84
  6579  003A36                     l1101:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;train_move_left.c: 222: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6583                           
  6584                           ; BSR set to: 0
  6585  003A36  0E00               	movlw	0
  6586  003A38  6E14               	movwf	GETxAPIxVAL@index+1,c
  6587  003A3A  0E1A               	movlw	26
  6588  003A3C  6E13               	movwf	GETxAPIxVAL@index,c
  6589  003A3E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6590  003A42  5013               	movf	?_GETxAPIxVAL,w,c
  6591  003A44  0100               	movlb	0	; () banked
  6592  003A46  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6593  003A48  5014               	movf	?_GETxAPIxVAL+1,w,c
  6594  003A4A  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6595  003A4C  A0D8               	btfss	status,0,c
  6596  003A4E  D008               	goto	l1103
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;train_move_left.c: 223: {
  6600                           ;train_move_left.c: 224: Train_Move_Pwm_Count--;
  6601  003A50  0780               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6602  003A52  A0D8               	btfss	status,0,c
  6603  003A54  0781               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6604  003A56                     l7990:
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;train_move_left.c: 225: Train_Move_Pwm_Fast_Count = 0;
  6608  003A56  0E00               	movlw	0
  6609  003A58  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6610  003A5A  0E00               	movlw	0
  6611  003A5C  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6612                           
  6613                           ;train_move_left.c: 226: }
  6614  003A5E  D002               	goto	l1104
  6615  003A60                     l1103:
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;train_move_left.c: 227: else{Train_Move_Pwm_Fast_Count++;}
  6619                           
  6620                           ; BSR set to: 0
  6621  003A60  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6622  003A62  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6623  003A64                     l1104:
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;train_move_left.c: 228: }
  6627                           ;train_move_left.c: 229: Return_Val = 1;
  6628                           
  6629                           ; BSR set to: 0
  6630                           
  6631                           ; BSR set to: 0
  6632                           
  6633                           ; BSR set to: 0
  6634                           
  6635                           ; BSR set to: 0
  6636  003A64  0E01               	movlw	1
  6637  003A66                     L84:
  6638  003A66  6E4A               	movwf	Left_Mountain_From_The_Right@Return_Val,c
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;train_move_left.c: 234: }
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;train_move_left.c: 233: break;
  6645                           
  6646                           ;train_move_left.c: 232: default:
  6647                           
  6648                           ;train_move_left.c: 230: break;
  6649  003A68  D007               	goto	l1092
  6650  003A6A                     l1086:
  6651                           
  6652                           ; BSR set to: 0
  6653  003A6A  502C               	movf	_Switch_Moutain,w,c
  6654                           
  6655                           ; Switch size 1, requested type "space"
  6656                           ; Number of cases is 2, Range of values is 0 to 1
  6657                           ; switch strategies available:
  6658                           ; Name         Instructions Cycles
  6659                           ; simple_byte            7     4 (average)
  6660                           ;	Chosen strategy is simple_byte
  6661  003A6C  0A00               	xorlw	0	; case 0
  6662  003A6E  B4D8               	btfsc	status,2,c
  6663  003A70  D780               	goto	l1087
  6664  003A72  0A01               	xorlw	1	; case 1
  6665  003A74  B4D8               	btfsc	status,2,c
  6666  003A76  D797               	goto	l1093
  6667  003A78                     l1092:
  6668                           
  6669                           ;train_move_left.c: 236: return(Return_Val);
  6670  003A78  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  6671  003A7A  0012               	return	
  6672  003A7C                     __end_of_Left_Mountain_From_The_Right:
  6673                           	opt stack 0
  6674                           tblptru	equ	0xFF8
  6675                           tblptrh	equ	0xFF7
  6676                           tblptrl	equ	0xFF6
  6677                           tablat	equ	0xFF5
  6678                           postinc0	equ	0xFEE
  6679                           wreg	equ	0xFE8
  6680                           postdec1	equ	0xFE5
  6681                           fsr1l	equ	0xFE1
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _Left_Mountain_From_The_Left *****************
  6685 ;; Defined at:
  6686 ;;		line 104 in file "../train_move_right.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;  rc              1    wreg     unsigned char 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  rc              1   21[BANK0 ] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      unsigned char 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6700 ;;      Params:         0       0       0       0       0       0       0       0       0
  6701 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6703 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6704 ;;Total ram usage:        1 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    6
  6707 ;; This function calls:
  6708 ;;		_GETxAPIxVAL
  6709 ;;		_SETxPWM
  6710 ;; This function is called by:
  6711 ;;		_Train_Path
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           	psect	text10
  6716  00385A                     __ptext10:
  6717                           	opt stack 0
  6718  00385A                     _Left_Mountain_From_The_Left:
  6719                           	opt stack 22
  6720                           
  6721                           ;incstack = 0
  6722                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6723  00385A  0100               	movlb	0	; () banked
  6724  00385C  6FCB               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6725                           
  6726                           ;train_move_right.c: 106: static char Return_Val = 1;
  6727                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6728  00385E  D07D               	goto	l1164
  6729  003860  0E02               	movlw	2
  6730  003862  0100               	movlb	0	; () banked
  6731  003864  19CB               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6732  003866  B4D8               	btfsc	status,2,c
  6733  003868  D00C               	goto	u6670
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6737                           
  6738                           ; BSR set to: 0
  6739                           
  6740                           ;train_move_right.c: 112: }
  6741                           
  6742                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6746  00386A  0E00               	movlw	0
  6747  00386C  6E14               	movwf	GETxAPIxVAL@index+1,c
  6748  00386E  0E3B               	movlw	59
  6749  003870  6E13               	movwf	GETxAPIxVAL@index,c
  6750  003872  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6751  003876  5013               	movf	?_GETxAPIxVAL,w,c
  6752  003878  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6753  00387A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6754  00387C  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6755  00387E  A0D8               	btfss	status,0,c
  6756  003880  D007               	goto	l1168
  6757  003882                     u6670:
  6758                           
  6759                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6760  003882  0E01               	movlw	1
  6761  003884  6E2C               	movwf	_Switch_Moutain,c
  6762                           
  6763                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6764  003886  0E00               	movlw	0
  6765  003888  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6766  00388A  0E00               	movlw	0
  6767  00388C  6E26               	movwf	_Mountain_Delay_Counter,c
  6768                           
  6769                           ;train_move_right.c: 116: }
  6770  00388E  D062               	goto	l1182
  6771  003890                     l1168:
  6772                           
  6773                           ;train_move_right.c: 117: else{
  6774                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  6775  003890  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6776  003892  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6777  003894  D05F               	goto	l1182
  6778  003896  0100               	movlb	0	; () banked
  6779  003898  05CB               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6780  00389A  A4D8               	btfss	status,2,c
  6781  00389C  D026               	goto	l1172
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  6785  00389E  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6786  0038A2  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6787  0038A6  0E01               	movlw	1
  6788  0038A8  6E21               	movwf	SETxPWM@direction,c
  6789  0038AA  EC15  F01E         	call	_SETxPWM	;wreg free
  6790                           
  6791                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  6792  0038AE  0E00               	movlw	0
  6793  0038B0  6E14               	movwf	GETxAPIxVAL@index+1,c
  6794  0038B2  0E31               	movlw	49
  6795  0038B4  6E13               	movwf	GETxAPIxVAL@index,c
  6796  0038B6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6797  0038BA  0100               	movlb	0	; () banked
  6798  0038BC  5180               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6799  0038BE  5C13               	subwf	?_GETxAPIxVAL,w,c
  6800  0038C0  5181               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6801  0038C2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6802  0038C4  B0D8               	btfsc	status,0,c
  6803  0038C6  D02A               	goto	u6720
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6807                           
  6808                           ; BSR set to: 0
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;train_move_right.c: 131: }
  6812                           
  6813                           ;train_move_right.c: 130: break;
  6814                           
  6815                           ;train_move_right.c: 129: Return_Val = 0;
  6816                           
  6817                           ;train_move_right.c: 128: Switch_Moutain = 0;
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;train_move_right.c: 126: {
  6821                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  6822  0038C8  0E00               	movlw	0
  6823  0038CA  6E14               	movwf	GETxAPIxVAL@index+1,c
  6824  0038CC  0E1A               	movlw	26
  6825  0038CE  6E13               	movwf	GETxAPIxVAL@index,c
  6826  0038D0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6827  0038D4  5013               	movf	?_GETxAPIxVAL,w,c
  6828  0038D6  0100               	movlb	0	; () banked
  6829  0038D8  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6830  0038DA  5014               	movf	?_GETxAPIxVAL+1,w,c
  6831  0038DC  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6832  0038DE  A0D8               	btfss	status,0,c
  6833  0038E0  D037               	goto	l1181
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;train_move_right.c: 133: {
  6837                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  6838  0038E2  0780               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6839  0038E4  A0D8               	btfss	status,0,c
  6840  0038E6  0781               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6841  0038E8  D02E               	goto	l7822
  6842  0038EA                     l1172:
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;train_move_right.c: 139: else if (rc == 2){
  6846                           
  6847                           ; BSR set to: 0
  6848  0038EA  0E02               	movlw	2
  6849  0038EC  19CB               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6850  0038EE  A4D8               	btfss	status,2,c
  6851  0038F0  D031               	goto	l1182
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  6855  0038F2  C080  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6856  0038F6  C081  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6857  0038FA  0E01               	movlw	1
  6858  0038FC  6E21               	movwf	SETxPWM@direction,c
  6859  0038FE  EC15  F01E         	call	_SETxPWM	;wreg free
  6860                           
  6861                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  6862  003902  0E00               	movlw	0
  6863  003904  6E14               	movwf	GETxAPIxVAL@index+1,c
  6864  003906  0E17               	movlw	23
  6865  003908  6E13               	movwf	GETxAPIxVAL@index,c
  6866  00390A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6867  00390E  5013               	movf	?_GETxAPIxVAL,w,c
  6868  003910  0100               	movlb	0	; () banked
  6869  003912  5D80               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6870  003914  5014               	movf	?_GETxAPIxVAL+1,w,c
  6871  003916  5981               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6872  003918  A0D8               	btfss	status,0,c
  6873  00391A  D006               	goto	l1179
  6874  00391C                     u6720:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;train_move_right.c: 142: {
  6878                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  6879  00391C  0E00               	movlw	0
  6880  00391E  6F82               	movwf	_Switch_Train_Move& (0+255),b
  6881                           
  6882                           ;train_move_right.c: 144: Switch_Moutain = 0;
  6883  003920  0E00               	movlw	0
  6884  003922  6E2C               	movwf	_Switch_Moutain,c
  6885                           
  6886                           ;train_move_right.c: 145: Return_Val = 0;
  6887  003924  0E00               	movlw	0
  6888  003926  D017               	goto	L87
  6889  003928                     l1179:
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6893                           
  6894                           ; BSR set to: 0
  6895  003928  0E00               	movlw	0
  6896  00392A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6897  00392C  0E1A               	movlw	26
  6898  00392E  6E13               	movwf	GETxAPIxVAL@index,c
  6899  003930  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  6900  003934  5013               	movf	?_GETxAPIxVAL,w,c
  6901  003936  0100               	movlb	0	; () banked
  6902  003938  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6903  00393A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6904  00393C  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6905  00393E  A0D8               	btfss	status,0,c
  6906  003940  D007               	goto	l1181
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;train_move_right.c: 149: {
  6910                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  6911  003942  4B80               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6912  003944  2B81               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6913  003946                     l7822:
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  6917  003946  0E00               	movlw	0
  6918  003948  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6919  00394A  0E00               	movlw	0
  6920  00394C  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6921                           
  6922                           ;train_move_right.c: 152: }
  6923  00394E  D002               	goto	l1182
  6924  003950                     l1181:
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  6928                           
  6929                           ; BSR set to: 0
  6930  003950  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6931  003952  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6932  003954                     l1182:
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;train_move_right.c: 154: }
  6936                           ;train_move_right.c: 155: Return_Val = 1;
  6937                           
  6938                           ; BSR set to: 0
  6939                           
  6940                           ; BSR set to: 0
  6941                           
  6942                           ; BSR set to: 0
  6943                           
  6944                           ; BSR set to: 0
  6945  003954  0E01               	movlw	1
  6946  003956                     L87:
  6947  003956  6E49               	movwf	Left_Mountain_From_The_Left@Return_Val,c
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;train_move_right.c: 160: }
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;train_move_right.c: 159: break;
  6954                           
  6955                           ;train_move_right.c: 158: default:
  6956                           
  6957                           ;train_move_right.c: 156: break;
  6958  003958  D007               	goto	l1170
  6959  00395A                     l1164:
  6960                           
  6961                           ; BSR set to: 0
  6962  00395A  502C               	movf	_Switch_Moutain,w,c
  6963                           
  6964                           ; Switch size 1, requested type "space"
  6965                           ; Number of cases is 2, Range of values is 0 to 1
  6966                           ; switch strategies available:
  6967                           ; Name         Instructions Cycles
  6968                           ; simple_byte            7     4 (average)
  6969                           ;	Chosen strategy is simple_byte
  6970  00395C  0A00               	xorlw	0	; case 0
  6971  00395E  B4D8               	btfsc	status,2,c
  6972  003960  D77F               	goto	l1165
  6973  003962  0A01               	xorlw	1	; case 1
  6974  003964  B4D8               	btfsc	status,2,c
  6975  003966  D797               	goto	l1171
  6976  003968                     l1170:
  6977                           
  6978                           ;train_move_right.c: 162: return(Return_Val);
  6979  003968  5049               	movf	Left_Mountain_From_The_Left@Return_Val,w,c
  6980  00396A  0012               	return	
  6981  00396C                     __end_of_Left_Mountain_From_The_Left:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           postdec1	equ	0xFE5
  6990                           fsr1l	equ	0xFE1
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function _SETxPWM *****************
  6994 ;; Defined at:
  6995 ;;		line 20 in file "../set_pwm.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  speed           2   30[COMRAM] unsigned int 
  6998 ;;  direction       1   32[COMRAM] unsigned char 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  pwm_speed       2   35[COMRAM] unsigned int 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      void 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7010 ;;      Params:         3       0       0       0       0       0       0       0       0
  7011 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7012 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7013 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7014 ;;Total ram usage:        7 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    5
  7017 ;; This function calls:
  7018 ;;		_GETxAPIxVAL
  7019 ;;		_SETxAPIxVAL
  7020 ;; This function is called by:
  7021 ;;		_Update_StateMchn
  7022 ;;		_Train_Move_Left_Start
  7023 ;;		_Right_Mountain_From_The_Right
  7024 ;;		_Left_Mountain_From_The_Right
  7025 ;;		_Train_Move_Left_Brake
  7026 ;;		_Train_Move_Right_Start
  7027 ;;		_Left_Mountain_From_The_Left
  7028 ;;		_Right_Mountain_From_The_Left
  7029 ;;		_Train_Move_Right_Brake
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text11
  7034  003C2A                     __ptext11:
  7035                           	opt stack 0
  7036  003C2A                     _SETxPWM:
  7037                           	opt stack 22
  7038                           
  7039                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7040                           
  7041                           ;incstack = 0
  7042  003C2A  0E01               	movlw	1
  7043  003C2C  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7044  003C2E  6824               	setf	SETxPWM@pwm_speed,c
  7045                           
  7046                           ;set_pwm.c: 24: if (GETxAPIxVAL(86) != direction){
  7047  003C30  5021               	movf	SETxPWM@direction,w,c
  7048  003C32  6E22               	movwf	??_SETxPWM& (0+255),c
  7049  003C34  6A23               	clrf	(??_SETxPWM+1)& (0+255),c
  7050  003C36  0E00               	movlw	0
  7051  003C38  6E14               	movwf	GETxAPIxVAL@index+1,c
  7052  003C3A  0E56               	movlw	86
  7053  003C3C  6E13               	movwf	GETxAPIxVAL@index,c
  7054  003C3E  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  7055  003C42  5022               	movf	??_SETxPWM,w,c
  7056  003C44  1813               	xorwf	?_GETxAPIxVAL,w,c
  7057  003C46  E104               	bnz	u6360
  7058  003C48  5023               	movf	??_SETxPWM+1,w,c
  7059  003C4A  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  7060  003C4C  B4D8               	btfsc	status,2,c
  7061  003C4E  D009               	goto	l1237
  7062  003C50                     u6360:
  7063                           
  7064                           ;set_pwm.c: 25: SETxAPIxVAL(86, direction);
  7065  003C50  0E00               	movlw	0
  7066  003C52  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7067  003C54  0E56               	movlw	86
  7068  003C56  6E19               	movwf	SETxAPIxVAL@index,c
  7069  003C58  C021  F01B         	movff	SETxPWM@direction,SETxAPIxVAL@value
  7070  003C5C  6A1C               	clrf	SETxAPIxVAL@value+1,c
  7071  003C5E  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7072  003C62                     l1237:
  7073                           
  7074                           ;set_pwm.c: 26: }
  7075                           ;set_pwm.c: 28: if (direction == 0){
  7076  003C62  5021               	movf	SETxPWM@direction,w,c
  7077  003C64  A4D8               	btfss	status,2,c
  7078  003C66  D01C               	goto	l1238
  7079                           
  7080                           ;set_pwm.c: 29: pwm_speed = 511 - (speed * 2);
  7081  003C68  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7082  003C6C  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7083  003C70  90D8               	bcf	status,0,c
  7084  003C72  3622               	rlcf	??_SETxPWM,f,c
  7085  003C74  3623               	rlcf	??_SETxPWM+1,f,c
  7086  003C76  1E22               	comf	??_SETxPWM,f,c
  7087  003C78  1E23               	comf	??_SETxPWM+1,f,c
  7088  003C7A  4A22               	infsnz	??_SETxPWM,f,c
  7089  003C7C  2A23               	incf	??_SETxPWM+1,f,c
  7090  003C7E  0EFF               	movlw	255
  7091  003C80  2422               	addwf	??_SETxPWM,w,c
  7092  003C82  6E24               	movwf	SETxPWM@pwm_speed,c
  7093  003C84  0E01               	movlw	1
  7094  003C86  2023               	addwfc	??_SETxPWM+1,w,c
  7095  003C88  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7096                           
  7097                           ;set_pwm.c: 30: SETxAPIxVAL(88, pwm_speed);
  7098  003C8A  0E00               	movlw	0
  7099  003C8C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7100  003C8E  0E58               	movlw	88
  7101  003C90  6E19               	movwf	SETxAPIxVAL@index,c
  7102  003C92  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7103  003C96  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7104  003C9A  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7105                           
  7106                           ;set_pwm.c: 31: }
  7107  003C9E  0012               	return	
  7108  003CA0                     l1238:
  7109                           
  7110                           ;set_pwm.c: 32: else if (direction == 1){
  7111  003CA0  0421               	decf	SETxPWM@direction,w,c
  7112  003CA2  A4D8               	btfss	status,2,c
  7113  003CA4  0012               	return	
  7114                           
  7115                           ;set_pwm.c: 33: pwm_speed = 511 + (speed * 2);
  7116  003CA6  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7117  003CAA  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7118  003CAE  90D8               	bcf	status,0,c
  7119  003CB0  3622               	rlcf	??_SETxPWM,f,c
  7120  003CB2  3623               	rlcf	??_SETxPWM+1,f,c
  7121  003CB4  0EFF               	movlw	255
  7122  003CB6  2422               	addwf	??_SETxPWM,w,c
  7123  003CB8  6E24               	movwf	SETxPWM@pwm_speed,c
  7124  003CBA  0E01               	movlw	1
  7125  003CBC  2023               	addwfc	??_SETxPWM+1,w,c
  7126  003CBE  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7127                           
  7128                           ;set_pwm.c: 34: SETxAPIxVAL(88, pwm_speed);
  7129  003CC0  0E00               	movlw	0
  7130  003CC2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7131  003CC4  0E58               	movlw	88
  7132  003CC6  6E19               	movwf	SETxAPIxVAL@index,c
  7133  003CC8  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7134  003CCC  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7135  003CD0  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7136  003CD4  0012               	return	
  7137  003CD6                     __end_of_SETxPWM:
  7138                           	opt stack 0
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           postinc0	equ	0xFEE
  7144                           wreg	equ	0xFE8
  7145                           postdec1	equ	0xFE5
  7146                           fsr1l	equ	0xFE1
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function _Junction *****************
  7150 ;; Defined at:
  7151 ;;		line 26 in file "../junction.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  Junction_Lef    1    wreg     unsigned char 
  7154 ;;  Straight_Ben    1   30[COMRAM] unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  Junction_Lef    1   31[COMRAM] unsigned char 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  1    wreg      unsigned char 
  7159 ;; Registers used:
  7160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7166 ;;      Params:         1       0       0       0       0       0       0       0       0
  7167 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7169 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7170 ;;Total ram usage:        2 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    5
  7173 ;; This function calls:
  7174 ;;		_GETxAPIxVAL
  7175 ;;		_SETxAPIxVAL
  7176 ;; This function is called by:
  7177 ;;		_Update_StateMchn
  7178 ;;		_Train_Path
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text12
  7183  002A8A                     __ptext12:
  7184                           	opt stack 0
  7185  002A8A                     _Junction:
  7186                           	opt stack 23
  7187                           
  7188                           ;incstack = 0
  7189                           ;Junction@Junction_Left_Right stored from wreg
  7190  002A8A  6E20               	movwf	Junction@Junction_Left_Right,c
  7191                           
  7192                           ;junction.c: 28: static char Return_Val = 1;
  7193                           ;junction.c: 29: static unsigned int Junction_Switch_Time = 0;
  7194                           ;junction.c: 31: switch (Switch_Junction)
  7195  002A8C  D0E2               	goto	l998
  7196  002A8E  0E01               	movlw	1
  7197  002A90  6E4C               	movwf	Junction@Return_Val,c
  7198                           
  7199                           ;junction.c: 34: switch (Junction_Left_Right)
  7200  002A92  D08C               	goto	l1000
  7201  002A94  0E00               	movlw	0
  7202  002A96  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7203  002A98  0E40               	movlw	64
  7204  002A9A  6E19               	movwf	SETxAPIxVAL@index,c
  7205  002A9C  0E00               	movlw	0
  7206  002A9E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7207  002AA0  0E01               	movlw	1
  7208  002AA2  6E1B               	movwf	SETxAPIxVAL@value,c
  7209  002AA4  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7210                           
  7211                           ;junction.c: 39: SETxAPIxVAL(82, 1);
  7212  002AA8  0E00               	movlw	0
  7213  002AAA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7214  002AAC  0E52               	movlw	82
  7215  002AAE  6E19               	movwf	SETxAPIxVAL@index,c
  7216  002AB0  0E00               	movlw	0
  7217  002AB2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7218  002AB4  0E01               	movlw	1
  7219  002AB6  6E1B               	movwf	SETxAPIxVAL@value,c
  7220  002AB8  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7221                           
  7222                           ;junction.c: 40: SETxAPIxVAL(83, 0);
  7223  002ABC  0E00               	movlw	0
  7224  002ABE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7225  002AC0  0E53               	movlw	83
  7226  002AC2  6E19               	movwf	SETxAPIxVAL@index,c
  7227  002AC4  0E00               	movlw	0
  7228  002AC6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7229  002AC8  0E00               	movlw	0
  7230  002ACA  6E1B               	movwf	SETxAPIxVAL@value,c
  7231  002ACC  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7232                           
  7233                           ;junction.c: 41: break;
  7234  002AD0  D074               	goto	l1007
  7235  002AD2  0E00               	movlw	0
  7236  002AD4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7237  002AD6  0E41               	movlw	65
  7238  002AD8  6E19               	movwf	SETxAPIxVAL@index,c
  7239  002ADA  0E00               	movlw	0
  7240  002ADC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7241  002ADE  0E01               	movlw	1
  7242  002AE0  6E1B               	movwf	SETxAPIxVAL@value,c
  7243  002AE2  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7244                           
  7245                           ;junction.c: 43: SETxAPIxVAL(82, 0);
  7246  002AE6  0E00               	movlw	0
  7247  002AE8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7248  002AEA  0E52               	movlw	82
  7249  002AEC  6E19               	movwf	SETxAPIxVAL@index,c
  7250  002AEE  0E00               	movlw	0
  7251  002AF0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7252  002AF2  0E00               	movlw	0
  7253  002AF4  6E1B               	movwf	SETxAPIxVAL@value,c
  7254  002AF6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7255                           
  7256                           ;junction.c: 44: SETxAPIxVAL(83, 1);
  7257  002AFA  0E00               	movlw	0
  7258  002AFC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7259  002AFE  0E53               	movlw	83
  7260  002B00  6E19               	movwf	SETxAPIxVAL@index,c
  7261  002B02  0E00               	movlw	0
  7262  002B04  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7263  002B06  0E01               	movlw	1
  7264  002B08  6E1B               	movwf	SETxAPIxVAL@value,c
  7265  002B0A  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7266                           
  7267                           ;junction.c: 47: }
  7268                           
  7269                           ;junction.c: 46: default : break;
  7270                           
  7271                           ;junction.c: 45: break;
  7272  002B0E  D055               	goto	l1007
  7273  002B10  501F               	movf	Junction@Straight_Bend,w,c
  7274                           
  7275                           ; Switch size 1, requested type "space"
  7276                           ; Number of cases is 2, Range of values is 0 to 1
  7277                           ; switch strategies available:
  7278                           ; Name         Instructions Cycles
  7279                           ; simple_byte            7     4 (average)
  7280                           ;	Chosen strategy is simple_byte
  7281  002B12  0A00               	xorlw	0	; case 0
  7282  002B14  B4D8               	btfsc	status,2,c
  7283  002B16  D7BE               	goto	l1003
  7284  002B18  0A01               	xorlw	1	; case 1
  7285  002B1A  B4D8               	btfsc	status,2,c
  7286  002B1C  D7DA               	goto	l1005
  7287                           
  7288                           ;junction.c: 48: break;
  7289  002B1E  D04D               	goto	l1007
  7290  002B20  0E00               	movlw	0
  7291  002B22  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7292  002B24  0E42               	movlw	66
  7293  002B26  6E19               	movwf	SETxAPIxVAL@index,c
  7294  002B28  0E00               	movlw	0
  7295  002B2A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7296  002B2C  0E01               	movlw	1
  7297  002B2E  6E1B               	movwf	SETxAPIxVAL@value,c
  7298  002B30  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7299                           
  7300                           ;junction.c: 53: SETxAPIxVAL(84, 1);
  7301  002B34  0E00               	movlw	0
  7302  002B36  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7303  002B38  0E54               	movlw	84
  7304  002B3A  6E19               	movwf	SETxAPIxVAL@index,c
  7305  002B3C  0E00               	movlw	0
  7306  002B3E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7307  002B40  0E01               	movlw	1
  7308  002B42  6E1B               	movwf	SETxAPIxVAL@value,c
  7309  002B44  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7310                           
  7311                           ;junction.c: 54: SETxAPIxVAL(85, 0);
  7312  002B48  0E00               	movlw	0
  7313  002B4A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7314  002B4C  0E55               	movlw	85
  7315  002B4E  6E19               	movwf	SETxAPIxVAL@index,c
  7316  002B50  0E00               	movlw	0
  7317  002B52  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7318  002B54  0E00               	movlw	0
  7319  002B56  6E1B               	movwf	SETxAPIxVAL@value,c
  7320  002B58  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7321                           
  7322                           ;junction.c: 55: break;
  7323  002B5C  D02E               	goto	l1007
  7324  002B5E  0E00               	movlw	0
  7325  002B60  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7326  002B62  0E43               	movlw	67
  7327  002B64  6E19               	movwf	SETxAPIxVAL@index,c
  7328  002B66  0E00               	movlw	0
  7329  002B68  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7330  002B6A  0E01               	movlw	1
  7331  002B6C  6E1B               	movwf	SETxAPIxVAL@value,c
  7332  002B6E  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7333                           
  7334                           ;junction.c: 57: SETxAPIxVAL(84, 0);
  7335  002B72  0E00               	movlw	0
  7336  002B74  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7337  002B76  0E54               	movlw	84
  7338  002B78  6E19               	movwf	SETxAPIxVAL@index,c
  7339  002B7A  0E00               	movlw	0
  7340  002B7C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7341  002B7E  0E00               	movlw	0
  7342  002B80  6E1B               	movwf	SETxAPIxVAL@value,c
  7343  002B82  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7344                           
  7345                           ;junction.c: 58: SETxAPIxVAL(85, 1);
  7346  002B86  0E00               	movlw	0
  7347  002B88  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7348  002B8A  0E55               	movlw	85
  7349  002B8C  6E19               	movwf	SETxAPIxVAL@index,c
  7350  002B8E  0E00               	movlw	0
  7351  002B90  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7352  002B92  0E01               	movlw	1
  7353  002B94  6E1B               	movwf	SETxAPIxVAL@value,c
  7354  002B96  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7355                           
  7356                           ;junction.c: 61: }
  7357                           
  7358                           ;junction.c: 60: default : break;
  7359                           
  7360                           ;junction.c: 59: break;
  7361  002B9A  D00F               	goto	l1007
  7362  002B9C  501F               	movf	Junction@Straight_Bend,w,c
  7363                           
  7364                           ; Switch size 1, requested type "space"
  7365                           ; Number of cases is 2, Range of values is 0 to 1
  7366                           ; switch strategies available:
  7367                           ; Name         Instructions Cycles
  7368                           ; simple_byte            7     4 (average)
  7369                           ;	Chosen strategy is simple_byte
  7370  002B9E  0A00               	xorlw	0	; case 0
  7371  002BA0  B4D8               	btfsc	status,2,c
  7372  002BA2  D7BE               	goto	l1010
  7373  002BA4  0A01               	xorlw	1	; case 1
  7374  002BA6  B4D8               	btfsc	status,2,c
  7375  002BA8  D7DA               	goto	l1012
  7376                           
  7377                           ;junction.c: 65: }
  7378                           
  7379                           ;junction.c: 64: default : break;
  7380                           
  7381                           ;junction.c: 62: break;
  7382  002BAA  D007               	goto	l1007
  7383  002BAC                     l1000:
  7384  002BAC  5020               	movf	Junction@Junction_Left_Right,w,c
  7385                           
  7386                           ; Switch size 1, requested type "space"
  7387                           ; Number of cases is 2, Range of values is 0 to 1
  7388                           ; switch strategies available:
  7389                           ; Name         Instructions Cycles
  7390                           ; simple_byte            7     4 (average)
  7391                           ;	Chosen strategy is simple_byte
  7392  002BAE  0A00               	xorlw	0	; case 0
  7393  002BB0  B4D8               	btfsc	status,2,c
  7394  002BB2  D7AE               	goto	l1002
  7395  002BB4  0A01               	xorlw	1	; case 1
  7396  002BB6  B4D8               	btfsc	status,2,c
  7397  002BB8  D7F1               	goto	l1009
  7398  002BBA                     l1007:
  7399                           
  7400                           ;junction.c: 66: Switch_Junction = 1;
  7401  002BBA  0E01               	movlw	1
  7402  002BBC  6E2D               	movwf	_Switch_Junction,c
  7403                           
  7404                           ;junction.c: 67: break;
  7405  002BBE  D053               	goto	l1015
  7406  002BC0  0E00               	movlw	0
  7407  002BC2  6E14               	movwf	GETxAPIxVAL@index+1,c
  7408  002BC4  0E13               	movlw	19
  7409  002BC6  6E13               	movwf	GETxAPIxVAL@index,c
  7410  002BC8  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  7411  002BCC  5013               	movf	?_GETxAPIxVAL,w,c
  7412  002BCE  0100               	movlb	0	; () banked
  7413  002BD0  5D6A               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7414  002BD2  5014               	movf	?_GETxAPIxVAL+1,w,c
  7415  002BD4  596B               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7416  002BD6  A0D8               	btfss	status,0,c
  7417  002BD8  D008               	goto	l1017
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;junction.c: 70: {
  7421                           ;junction.c: 71: Switch_Junction = 2;
  7422  002BDA  0E02               	movlw	2
  7423  002BDC  6E2D               	movwf	_Switch_Junction,c
  7424                           
  7425                           ;junction.c: 72: Junction_Switch_Time = 0;
  7426  002BDE  0E00               	movlw	0
  7427  002BE0  6F6B               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7428  002BE2  0E00               	movlw	0
  7429  002BE4  6F6A               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7430                           
  7431                           ;junction.c: 73: Return_Val = 1;
  7432  002BE6  0E01               	movlw	1
  7433  002BE8  D032               	goto	L88
  7434  002BEA                     l1017:
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;junction.c: 75: }
  7438                           ;junction.c: 76: Return_Val = 1;
  7439                           
  7440                           ; BSR set to: 0
  7441  002BEA  0E01               	movlw	1
  7442  002BEC  6E4C               	movwf	Junction@Return_Val,c
  7443                           
  7444                           ;junction.c: 77: Switch_Junction = 1;
  7445  002BEE  0E01               	movlw	1
  7446  002BF0  6E2D               	movwf	_Switch_Junction,c
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;junction.c: 78: Junction_Switch_Time++;
  7450  002BF2  4B6A               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7451  002BF4  2B6B               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7452                           
  7453                           ;junction.c: 79: break;
  7454  002BF6  D037               	goto	l1015
  7455  002BF8                     
  7456                           ; BSR set to: 0
  7457  002BF8  0E00               	movlw	0
  7458  002BFA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7459  002BFC  0E40               	movlw	64
  7460  002BFE  6E19               	movwf	SETxAPIxVAL@index,c
  7461  002C00  0E00               	movlw	0
  7462  002C02  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7463  002C04  0E00               	movlw	0
  7464  002C06  6E1B               	movwf	SETxAPIxVAL@value,c
  7465  002C08  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7466                           
  7467                           ;junction.c: 82: SETxAPIxVAL(65, 0);
  7468  002C0C  0E00               	movlw	0
  7469  002C0E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7470  002C10  0E41               	movlw	65
  7471  002C12  6E19               	movwf	SETxAPIxVAL@index,c
  7472  002C14  0E00               	movlw	0
  7473  002C16  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7474  002C18  0E00               	movlw	0
  7475  002C1A  6E1B               	movwf	SETxAPIxVAL@value,c
  7476  002C1C  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7477                           
  7478                           ;junction.c: 83: SETxAPIxVAL(66,0);
  7479  002C20  0E00               	movlw	0
  7480  002C22  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7481  002C24  0E42               	movlw	66
  7482  002C26  6E19               	movwf	SETxAPIxVAL@index,c
  7483  002C28  0E00               	movlw	0
  7484  002C2A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7485  002C2C  0E00               	movlw	0
  7486  002C2E  6E1B               	movwf	SETxAPIxVAL@value,c
  7487  002C30  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7488                           
  7489                           ;junction.c: 84: SETxAPIxVAL(67,0);
  7490  002C34  0E00               	movlw	0
  7491  002C36  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7492  002C38  0E43               	movlw	67
  7493  002C3A  6E19               	movwf	SETxAPIxVAL@index,c
  7494  002C3C  0E00               	movlw	0
  7495  002C3E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7496  002C40  0E00               	movlw	0
  7497  002C42  6E1B               	movwf	SETxAPIxVAL@value,c
  7498  002C44  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  7499                           
  7500                           ;junction.c: 85: Switch_Junction = 0;
  7501  002C48  0E00               	movlw	0
  7502  002C4A  6E2D               	movwf	_Switch_Junction,c
  7503                           
  7504                           ;junction.c: 86: Return_Val = 0;
  7505  002C4C  0E00               	movlw	0
  7506  002C4E                     L88:
  7507  002C4E  6E4C               	movwf	Junction@Return_Val,c
  7508                           
  7509                           ;junction.c: 90: }
  7510                           
  7511                           ;junction.c: 89: default : break;
  7512                           
  7513                           ;junction.c: 87: break;
  7514  002C50  D00A               	goto	l1015
  7515  002C52                     l998:
  7516  002C52  502D               	movf	_Switch_Junction,w,c
  7517                           
  7518                           ; Switch size 1, requested type "space"
  7519                           ; Number of cases is 3, Range of values is 0 to 2
  7520                           ; switch strategies available:
  7521                           ; Name         Instructions Cycles
  7522                           ; simple_byte           10     6 (average)
  7523                           ;	Chosen strategy is simple_byte
  7524  002C54  0A00               	xorlw	0	; case 0
  7525  002C56  B4D8               	btfsc	status,2,c
  7526  002C58  D71A               	goto	l999
  7527  002C5A  0A01               	xorlw	1	; case 1
  7528  002C5C  B4D8               	btfsc	status,2,c
  7529  002C5E  D7B0               	goto	l1016
  7530  002C60  0A03               	xorlw	3	; case 2
  7531  002C62  B4D8               	btfsc	status,2,c
  7532  002C64  D7C9               	goto	l1018
  7533  002C66                     l1015:
  7534                           
  7535                           ;junction.c: 92: return (Return_Val);
  7536  002C66  504C               	movf	Junction@Return_Val,w,c
  7537  002C68  0012               	return	
  7538  002C6A                     __end_of_Junction:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           postinc0	equ	0xFEE
  7545                           wreg	equ	0xFE8
  7546                           postdec1	equ	0xFE5
  7547                           fsr1l	equ	0xFE1
  7548                           status	equ	0xFD8
  7549                           
  7550 ;; *************** function _Red_Led *****************
  7551 ;; Defined at:
  7552 ;;		line 97 in file "../io.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;  Operation       1    wreg     unsigned char 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  Operation       1   18[COMRAM] unsigned char 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7566 ;;      Params:         0       0       0       0       0       0       0       0       0
  7567 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7568 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7569 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7570 ;;Total ram usage:        1 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    3
  7573 ;; This function calls:
  7574 ;;		Nothing
  7575 ;; This function is called by:
  7576 ;;		_Update_StateMchn
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           	psect	text13
  7581  003D6C                     __ptext13:
  7582                           	opt stack 0
  7583  003D6C                     _Red_Led:
  7584                           	opt stack 26
  7585                           
  7586                           ;incstack = 0
  7587                           ;Red_Led@Operation stored from wreg
  7588  003D6C  6E13               	movwf	Red_Led@Operation,c
  7589                           
  7590                           ;io.c: 99: switch(Operation)
  7591  003D6E  D030               	goto	l832
  7592  003D70                     l833:
  7593  003D70  9A83               	bcf	3971,5,c	;volatile
  7594  003D72  0012               	return	
  7595  003D74                     l835:
  7596  003D74  8A83               	bsf	3971,5,c	;volatile
  7597  003D76  0012               	return	
  7598  003D78  4A28               	infsnz	_Red_Led_Counter,f,c
  7599  003D7A  2A29               	incf	_Red_Led_Counter+1,f,c
  7600                           
  7601                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7602  003D7C  0EB8               	movlw	184
  7603  003D7E  5C28               	subwf	_Red_Led_Counter,w,c
  7604  003D80  0E0B               	movlw	11
  7605  003D82  5829               	subwfb	_Red_Led_Counter+1,w,c
  7606  003D84  A0D8               	btfss	status,0,c
  7607  003D86  D004               	goto	l837
  7608                           
  7609                           ;io.c: 107: {
  7610                           ;io.c: 108: Red_Led_Counter = 0;
  7611  003D88  0E00               	movlw	0
  7612  003D8A  6E29               	movwf	_Red_Led_Counter+1,c
  7613  003D8C  0E00               	movlw	0
  7614  003D8E  6E28               	movwf	_Red_Led_Counter,c
  7615  003D90                     l837:
  7616                           
  7617                           ;io.c: 109: }
  7618                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7619  003D90  0EDC               	movlw	220
  7620  003D92  5C28               	subwf	_Red_Led_Counter,w,c
  7621  003D94  0E05               	movlw	5
  7622  003D96  5829               	subwfb	_Red_Led_Counter+1,w,c
  7623  003D98  A0D8               	btfss	status,0,c
  7624  003D9A  D002               	goto	l838
  7625                           
  7626                           ;io.c: 111: {
  7627                           ;io.c: 112: PORTDbits.RD5 = 1;
  7628  003D9C  8A83               	bsf	3971,5,c	;volatile
  7629                           
  7630                           ;io.c: 113: }
  7631  003D9E  0012               	return	
  7632  003DA0                     l838:
  7633                           
  7634                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7635  003DA0  9A83               	bcf	3971,5,c	;volatile
  7636                           
  7637                           ;io.c: 115: break;
  7638  003DA2  0012               	return	
  7639  003DA4  4A28               	infsnz	_Red_Led_Counter,f,c
  7640  003DA6  2A29               	incf	_Red_Led_Counter+1,f,c
  7641                           
  7642                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7643  003DA8  0EE8               	movlw	232
  7644  003DAA  5C28               	subwf	_Red_Led_Counter,w,c
  7645  003DAC  0E03               	movlw	3
  7646  003DAE  5829               	subwfb	_Red_Led_Counter+1,w,c
  7647  003DB0  A0D8               	btfss	status,0,c
  7648  003DB2  D004               	goto	l841
  7649                           
  7650                           ;io.c: 119: {
  7651                           ;io.c: 120: Red_Led_Counter = 0;
  7652  003DB4  0E00               	movlw	0
  7653  003DB6  6E29               	movwf	_Red_Led_Counter+1,c
  7654  003DB8  0E00               	movlw	0
  7655  003DBA  6E28               	movwf	_Red_Led_Counter,c
  7656  003DBC                     l841:
  7657                           
  7658                           ;io.c: 121: }
  7659                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7660  003DBC  0EF4               	movlw	244
  7661  003DBE  5C28               	subwf	_Red_Led_Counter,w,c
  7662  003DC0  0E01               	movlw	1
  7663  003DC2  5829               	subwfb	_Red_Led_Counter+1,w,c
  7664  003DC4  A0D8               	btfss	status,0,c
  7665  003DC6  D002               	goto	l842
  7666                           
  7667                           ;io.c: 123: {
  7668                           ;io.c: 124: PORTDbits.RD5 = 1;
  7669  003DC8  8A83               	bsf	3971,5,c	;volatile
  7670                           
  7671                           ;io.c: 125: }
  7672  003DCA  0012               	return	
  7673  003DCC                     l842:
  7674                           
  7675                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7676  003DCC  9A83               	bcf	3971,5,c	;volatile
  7677                           
  7678                           ;io.c: 130: }
  7679                           
  7680                           ;io.c: 129: default : break;
  7681                           
  7682                           ;io.c: 127: break;
  7683  003DCE  0012               	return	
  7684  003DD0                     l832:
  7685  003DD0  5013               	movf	Red_Led@Operation,w,c
  7686                           
  7687                           ; Switch size 1, requested type "space"
  7688                           ; Number of cases is 4, Range of values is 0 to 3
  7689                           ; switch strategies available:
  7690                           ; Name         Instructions Cycles
  7691                           ; simple_byte           13     7 (average)
  7692                           ;	Chosen strategy is simple_byte
  7693  003DD2  0A00               	xorlw	0	; case 0
  7694  003DD4  B4D8               	btfsc	status,2,c
  7695  003DD6  D7CC               	goto	l833
  7696  003DD8  0A01               	xorlw	1	; case 1
  7697  003DDA  B4D8               	btfsc	status,2,c
  7698  003DDC  D7CB               	goto	l835
  7699  003DDE  0A03               	xorlw	3	; case 2
  7700  003DE0  B4D8               	btfsc	status,2,c
  7701  003DE2  D7CA               	goto	l836
  7702  003DE4  0A01               	xorlw	1	; case 3
  7703  003DE6  A4D8               	btfss	status,2,c
  7704  003DE8  0012               	return	
  7705  003DEA  D7DC               	goto	l840
  7706  003DEC                     __end_of_Red_Led:
  7707                           	opt stack 0
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           postinc0	equ	0xFEE
  7713                           wreg	equ	0xFE8
  7714                           postdec1	equ	0xFE5
  7715                           fsr1l	equ	0xFE1
  7716                           status	equ	0xFD8
  7717                           
  7718 ;; *************** function _Green_Led *****************
  7719 ;; Defined at:
  7720 ;;		line 47 in file "../io.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  Operation       1    wreg     unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  Operation       1   18[COMRAM] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  1    wreg      void 
  7727 ;; Registers used:
  7728 ;;		wreg, status,2, status,0
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0
  7735 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7737 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7738 ;;Total ram usage:        1 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    3
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		_Update_StateMchn
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text14
  7749  003DEC                     __ptext14:
  7750                           	opt stack 0
  7751  003DEC                     _Green_Led:
  7752                           	opt stack 26
  7753                           
  7754                           ;incstack = 0
  7755                           ;Green_Led@Operation stored from wreg
  7756  003DEC  6E13               	movwf	Green_Led@Operation,c
  7757                           
  7758                           ;io.c: 49: switch(Operation)
  7759  003DEE  D030               	goto	l816
  7760  003DF0                     l817:
  7761  003DF0  9C83               	bcf	3971,6,c	;volatile
  7762  003DF2  0012               	return	
  7763  003DF4                     l819:
  7764  003DF4  8C83               	bsf	3971,6,c	;volatile
  7765  003DF6  0012               	return	
  7766  003DF8  4A2A               	infsnz	_Green_Led_Counter,f,c
  7767  003DFA  2A2B               	incf	_Green_Led_Counter+1,f,c
  7768                           
  7769                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7770  003DFC  0EB8               	movlw	184
  7771  003DFE  5C2A               	subwf	_Green_Led_Counter,w,c
  7772  003E00  0E0B               	movlw	11
  7773  003E02  582B               	subwfb	_Green_Led_Counter+1,w,c
  7774  003E04  A0D8               	btfss	status,0,c
  7775  003E06  D004               	goto	l821
  7776                           
  7777                           ;io.c: 57: {
  7778                           ;io.c: 58: Green_Led_Counter = 0;
  7779  003E08  0E00               	movlw	0
  7780  003E0A  6E2B               	movwf	_Green_Led_Counter+1,c
  7781  003E0C  0E00               	movlw	0
  7782  003E0E  6E2A               	movwf	_Green_Led_Counter,c
  7783  003E10                     l821:
  7784                           
  7785                           ;io.c: 59: }
  7786                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  7787  003E10  0EDC               	movlw	220
  7788  003E12  5C2A               	subwf	_Green_Led_Counter,w,c
  7789  003E14  0E05               	movlw	5
  7790  003E16  582B               	subwfb	_Green_Led_Counter+1,w,c
  7791  003E18  A0D8               	btfss	status,0,c
  7792  003E1A  D002               	goto	l822
  7793                           
  7794                           ;io.c: 61: {
  7795                           ;io.c: 62: PORTDbits.RD6 = 1;
  7796  003E1C  8C83               	bsf	3971,6,c	;volatile
  7797                           
  7798                           ;io.c: 63: }
  7799  003E1E  0012               	return	
  7800  003E20                     l822:
  7801                           
  7802                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  7803  003E20  9C83               	bcf	3971,6,c	;volatile
  7804                           
  7805                           ;io.c: 65: break;
  7806  003E22  0012               	return	
  7807  003E24  4A2A               	infsnz	_Green_Led_Counter,f,c
  7808  003E26  2A2B               	incf	_Green_Led_Counter+1,f,c
  7809                           
  7810                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  7811  003E28  0EE8               	movlw	232
  7812  003E2A  5C2A               	subwf	_Green_Led_Counter,w,c
  7813  003E2C  0E03               	movlw	3
  7814  003E2E  582B               	subwfb	_Green_Led_Counter+1,w,c
  7815  003E30  A0D8               	btfss	status,0,c
  7816  003E32  D004               	goto	l825
  7817                           
  7818                           ;io.c: 69: {
  7819                           ;io.c: 70: Green_Led_Counter = 0;
  7820  003E34  0E00               	movlw	0
  7821  003E36  6E2B               	movwf	_Green_Led_Counter+1,c
  7822  003E38  0E00               	movlw	0
  7823  003E3A  6E2A               	movwf	_Green_Led_Counter,c
  7824  003E3C                     l825:
  7825                           
  7826                           ;io.c: 71: }
  7827                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  7828  003E3C  0EF4               	movlw	244
  7829  003E3E  5C2A               	subwf	_Green_Led_Counter,w,c
  7830  003E40  0E01               	movlw	1
  7831  003E42  582B               	subwfb	_Green_Led_Counter+1,w,c
  7832  003E44  A0D8               	btfss	status,0,c
  7833  003E46  D002               	goto	l826
  7834                           
  7835                           ;io.c: 73: {
  7836                           ;io.c: 74: PORTDbits.RD6 = 1;
  7837  003E48  8C83               	bsf	3971,6,c	;volatile
  7838                           
  7839                           ;io.c: 75: }
  7840  003E4A  0012               	return	
  7841  003E4C                     l826:
  7842                           
  7843                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  7844  003E4C  9C83               	bcf	3971,6,c	;volatile
  7845                           
  7846                           ;io.c: 80: }
  7847                           
  7848                           ;io.c: 79: default : break;
  7849                           
  7850                           ;io.c: 77: break;
  7851  003E4E  0012               	return	
  7852  003E50                     l816:
  7853  003E50  5013               	movf	Green_Led@Operation,w,c
  7854                           
  7855                           ; Switch size 1, requested type "space"
  7856                           ; Number of cases is 4, Range of values is 0 to 3
  7857                           ; switch strategies available:
  7858                           ; Name         Instructions Cycles
  7859                           ; simple_byte           13     7 (average)
  7860                           ;	Chosen strategy is simple_byte
  7861  003E52  0A00               	xorlw	0	; case 0
  7862  003E54  B4D8               	btfsc	status,2,c
  7863  003E56  D7CC               	goto	l817
  7864  003E58  0A01               	xorlw	1	; case 1
  7865  003E5A  B4D8               	btfsc	status,2,c
  7866  003E5C  D7CB               	goto	l819
  7867  003E5E  0A03               	xorlw	3	; case 2
  7868  003E60  B4D8               	btfsc	status,2,c
  7869  003E62  D7CA               	goto	l820
  7870  003E64  0A01               	xorlw	1	; case 3
  7871  003E66  A4D8               	btfss	status,2,c
  7872  003E68  0012               	return	
  7873  003E6A  D7DC               	goto	l824
  7874  003E6C                     __end_of_Green_Led:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           postinc0	equ	0xFEE
  7881                           wreg	equ	0xFE8
  7882                           postdec1	equ	0xFE5
  7883                           fsr1l	equ	0xFE1
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function _EEPROMxSTORE *****************
  7887 ;; Defined at:
  7888 ;;		line 117 in file "../eeprom_settings.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;		None
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  i               2   34[COMRAM] unsigned int 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      void 
  7895 ;; Registers used:
  7896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0
  7903 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7904 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7905 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7906 ;;Total ram usage:       10 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    4
  7909 ;; This function calls:
  7910 ;;		_Eeprom_Store
  7911 ;; This function is called by:
  7912 ;;		_Update_StateMchn
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text15
  7917  003048                     __ptext15:
  7918                           	opt stack 0
  7919  003048                     _EEPROMxSTORE:
  7920                           	opt stack 25
  7921                           
  7922                           ;eeprom_settings.c: 119: unsigned int i;
  7923                           ;eeprom_settings.c: 121: for(i = 0; i < 28; i++ )
  7924                           
  7925                           ;incstack = 0
  7926  003048  0E00               	movlw	0
  7927  00304A  6E24               	movwf	EEPROMxSTORE@i+1,c
  7928  00304C  0E00               	movlw	0
  7929  00304E  6E23               	movwf	EEPROMxSTORE@i,c
  7930  003050  5024               	movf	EEPROMxSTORE@i+1,w,c
  7931  003052  E105               	bnz	u7660
  7932  003054  0E1C               	movlw	28
  7933  003056  5C23               	subwf	EEPROMxSTORE@i,w,c
  7934  003058  B0D8               	btfsc	status,0,c
  7935  00305A  0012               	return	
  7936  00305C  D001               	goto	l749
  7937  00305E                     u7660:
  7938  00305E  0012               	return	
  7939  003060                     l749:
  7940                           
  7941                           ;eeprom_settings.c: 122: {
  7942                           ;eeprom_settings.c: 123: if (API[ApiList[i]] != API_EEPROM[ApiList[i]])
  7943  003060  90D8               	bcf	status,0,c
  7944  003062  3423               	rlcf	EEPROMxSTORE@i,w,c
  7945  003064  6EF6               	movwf	tblptrl,c
  7946  003066  3424               	rlcf	EEPROMxSTORE@i+1,w,c
  7947  003068  6EF7               	movwf	tblptrh,c
  7948  00306A  0E01               	movlw	low _ApiList
  7949  00306C  26F6               	addwf	tblptrl,f,c
  7950  00306E  0E08               	movlw	high _ApiList
  7951  003070  22F7               	addwfc	tblptrh,f,c
  7952  003072                     	if	0	;There are less than 3 active tblptr bytes
  7953  003072                     	endif
  7954  003072  0009               	tblrd		*+
  7955  003074  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  7956  003078  0009               	tblrd		*+
  7957  00307A  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  7958  00307E  90D8               	bcf	status,0,c
  7959  003080  361B               	rlcf	??_EEPROMxSTORE,f,c
  7960  003082  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  7961  003084  0E00               	movlw	low _API_EEPROM
  7962  003086  241B               	addwf	??_EEPROMxSTORE,w,c
  7963  003088  6ED9               	movwf	fsr2l,c
  7964  00308A  0E03               	movlw	high _API_EEPROM
  7965  00308C  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  7966  00308E  6EDA               	movwf	fsr2h,c
  7967  003090  90D8               	bcf	status,0,c
  7968  003092  3423               	rlcf	EEPROMxSTORE@i,w,c
  7969  003094  6EF6               	movwf	tblptrl,c
  7970  003096  3424               	rlcf	EEPROMxSTORE@i+1,w,c
  7971  003098  6EF7               	movwf	tblptrh,c
  7972  00309A  0E01               	movlw	low _ApiList
  7973  00309C  26F6               	addwf	tblptrl,f,c
  7974  00309E  0E08               	movlw	high _ApiList
  7975  0030A0  22F7               	addwfc	tblptrh,f,c
  7976  0030A2                     	if	0	;There are less than 3 active tblptr bytes
  7977  0030A2                     	endif
  7978  0030A2  0009               	tblrd		*+
  7979  0030A4  CFF5 F01F          	movff	tablat,??_EEPROMxSTORE+4
  7980  0030A8  0009               	tblrd		*+
  7981  0030AA  CFF5 F020          	movff	tablat,??_EEPROMxSTORE+5
  7982  0030AE  90D8               	bcf	status,0,c
  7983  0030B0  361F               	rlcf	??_EEPROMxSTORE+4,f,c
  7984  0030B2  3620               	rlcf	??_EEPROMxSTORE+5,f,c
  7985  0030B4  0E00               	movlw	low _API
  7986  0030B6  241F               	addwf	??_EEPROMxSTORE+4,w,c
  7987  0030B8  6EE1               	movwf	fsr1l,c
  7988  0030BA  0E01               	movlw	high _API
  7989  0030BC  2020               	addwfc	??_EEPROMxSTORE+5,w,c
  7990  0030BE  6EE2               	movwf	fsr1h,c
  7991  0030C0  50DE               	movf	postinc2,w,c
  7992  0030C2  18E6               	xorwf	postinc1,w,c
  7993  0030C4  E104               	bnz	u7670
  7994  0030C6  50DE               	movf	postinc2,w,c
  7995  0030C8  18E6               	xorwf	postinc1,w,c
  7996  0030CA  B4D8               	btfsc	status,2,c
  7997  0030CC  D056               	goto	l751
  7998  0030CE                     u7670:
  7999                           
  8000                           ;eeprom_settings.c: 124: {
  8001                           ;eeprom_settings.c: 125: Eeprom_Store(i, API[ApiList[i]]);
  8002  0030CE  C023  F013         	movff	EEPROMxSTORE@i,Eeprom_Store@Location
  8003  0030D2  C024  F014         	movff	EEPROMxSTORE@i+1,Eeprom_Store@Location+1
  8004  0030D6  90D8               	bcf	status,0,c
  8005  0030D8  3423               	rlcf	EEPROMxSTORE@i,w,c
  8006  0030DA  6EF6               	movwf	tblptrl,c
  8007  0030DC  3424               	rlcf	EEPROMxSTORE@i+1,w,c
  8008  0030DE  6EF7               	movwf	tblptrh,c
  8009  0030E0  0E01               	movlw	low _ApiList
  8010  0030E2  26F6               	addwf	tblptrl,f,c
  8011  0030E4  0E08               	movlw	high _ApiList
  8012  0030E6  22F7               	addwfc	tblptrh,f,c
  8013  0030E8                     	if	0	;There are less than 3 active tblptr bytes
  8014  0030E8                     	endif
  8015  0030E8  0009               	tblrd		*+
  8016  0030EA  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  8017  0030EE  0009               	tblrd		*+
  8018  0030F0  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  8019  0030F4  90D8               	bcf	status,0,c
  8020  0030F6  361B               	rlcf	??_EEPROMxSTORE,f,c
  8021  0030F8  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  8022  0030FA  0E00               	movlw	low _API
  8023  0030FC  241B               	addwf	??_EEPROMxSTORE,w,c
  8024  0030FE  6ED9               	movwf	fsr2l,c
  8025  003100  0E01               	movlw	high _API
  8026  003102  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  8027  003104  6EDA               	movwf	fsr2h,c
  8028  003106  CFDE F015          	movff	postinc2,Eeprom_Store@Value
  8029  00310A  CFDD F016          	movff	postdec2,Eeprom_Store@Value+1
  8030  00310E  EC73  F01F         	call	_Eeprom_Store	;wreg free
  8031                           
  8032                           ;eeprom_settings.c: 126: API_EEPROM[ApiList[i]] = API[ApiList[i]];
  8033  003112  90D8               	bcf	status,0,c
  8034  003114  3423               	rlcf	EEPROMxSTORE@i,w,c
  8035  003116  6EF6               	movwf	tblptrl,c
  8036  003118  3424               	rlcf	EEPROMxSTORE@i+1,w,c
  8037  00311A  6EF7               	movwf	tblptrh,c
  8038  00311C  0E01               	movlw	low _ApiList
  8039  00311E  26F6               	addwf	tblptrl,f,c
  8040  003120  0E08               	movlw	high _ApiList
  8041  003122  22F7               	addwfc	tblptrh,f,c
  8042  003124                     	if	0	;There are less than 3 active tblptr bytes
  8043  003124                     	endif
  8044  003124  0009               	tblrd		*+
  8045  003126  CFF5 F01B          	movff	tablat,??_EEPROMxSTORE
  8046  00312A  0009               	tblrd		*+
  8047  00312C  CFF5 F01C          	movff	tablat,??_EEPROMxSTORE+1
  8048  003130  90D8               	bcf	status,0,c
  8049  003132  361B               	rlcf	??_EEPROMxSTORE,f,c
  8050  003134  361C               	rlcf	??_EEPROMxSTORE+1,f,c
  8051  003136  0E00               	movlw	low _API
  8052  003138  241B               	addwf	??_EEPROMxSTORE,w,c
  8053  00313A  6ED9               	movwf	fsr2l,c
  8054  00313C  0E01               	movlw	high _API
  8055  00313E  201C               	addwfc	??_EEPROMxSTORE+1,w,c
  8056  003140  6EDA               	movwf	fsr2h,c
  8057  003142  90D8               	bcf	status,0,c
  8058  003144  3423               	rlcf	EEPROMxSTORE@i,w,c
  8059  003146  6EF6               	movwf	tblptrl,c
  8060  003148  3424               	rlcf	EEPROMxSTORE@i+1,w,c
  8061  00314A  6EF7               	movwf	tblptrh,c
  8062  00314C  0E01               	movlw	low _ApiList
  8063  00314E  26F6               	addwf	tblptrl,f,c
  8064  003150  0E08               	movlw	high _ApiList
  8065  003152  22F7               	addwfc	tblptrh,f,c
  8066  003154                     	if	0	;There are less than 3 active tblptr bytes
  8067  003154                     	endif
  8068  003154  0009               	tblrd		*+
  8069  003156  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE+2
  8070  00315A  0009               	tblrd		*+
  8071  00315C  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+3
  8072  003160  90D8               	bcf	status,0,c
  8073  003162  361D               	rlcf	??_EEPROMxSTORE+2,f,c
  8074  003164  361E               	rlcf	??_EEPROMxSTORE+3,f,c
  8075  003166  0E00               	movlw	low _API_EEPROM
  8076  003168  241D               	addwf	??_EEPROMxSTORE+2,w,c
  8077  00316A  6EE1               	movwf	fsr1l,c
  8078  00316C  0E03               	movlw	high _API_EEPROM
  8079  00316E  201E               	addwfc	??_EEPROMxSTORE+3,w,c
  8080  003170  6EE2               	movwf	fsr1h,c
  8081  003172  CFDE FFE6          	movff	postinc2,postinc1
  8082  003176  CFDD FFE5          	movff	postdec2,postdec1
  8083  00317A                     l751:
  8084  00317A  4A23               	infsnz	EEPROMxSTORE@i,f,c
  8085  00317C  2A24               	incf	EEPROMxSTORE@i+1,f,c
  8086  00317E  5024               	movf	EEPROMxSTORE@i+1,w,c
  8087  003180  E101               	bnz	l752
  8088  003182  D768               	goto	L89
  8089  003184                     l752:
  8090  003184  0012               	return		;funcret
  8091  003186                     __end_of_EEPROMxSTORE:
  8092                           	opt stack 0
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           postinc0	equ	0xFEE
  8098                           wreg	equ	0xFE8
  8099                           postinc1	equ	0xFE6
  8100                           postdec1	equ	0xFE5
  8101                           fsr1h	equ	0xFE2
  8102                           fsr1l	equ	0xFE1
  8103                           postinc2	equ	0xFDE
  8104                           postdec2	equ	0xFDD
  8105                           fsr2h	equ	0xFDA
  8106                           fsr2l	equ	0xFD9
  8107                           status	equ	0xFD8
  8108                           
  8109 ;; *************** function _Eeprom_Store *****************
  8110 ;; Defined at:
  8111 ;;		line 145 in file "../eeprom_settings.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;  Location        2   18[COMRAM] unsigned int 
  8114 ;;  Value           2   20[COMRAM] unsigned int 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  Location_Hig    2   24[COMRAM] unsigned int 
  8117 ;;  Location_Low    2   22[COMRAM] unsigned int 
  8118 ;; Return value:  Size  Location     Type
  8119 ;;                  1    wreg      void 
  8120 ;; Registers used:
  8121 ;;		wreg, status,2, status,0
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8127 ;;      Params:         4       0       0       0       0       0       0       0       0
  8128 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8130 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8131 ;;Total ram usage:        8 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    3
  8134 ;; This function calls:
  8135 ;;		Nothing
  8136 ;; This function is called by:
  8137 ;;		_EEPROMxSTORE
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	text16
  8142  003EE6                     __ptext16:
  8143                           	opt stack 0
  8144  003EE6                     _Eeprom_Store:
  8145                           	opt stack 25
  8146                           
  8147                           ;eeprom_settings.c: 147: unsigned int Location_High_Byte = Location * 2;
  8148                           
  8149                           ;incstack = 0
  8150  003EE6  90D8               	bcf	status,0,c
  8151  003EE8  3413               	rlcf	Eeprom_Store@Location,w,c
  8152  003EEA  6E19               	movwf	Eeprom_Store@Location_High_Byte,c
  8153  003EEC  3414               	rlcf	Eeprom_Store@Location+1,w,c
  8154  003EEE  6E1A               	movwf	Eeprom_Store@Location_High_Byte+1,c
  8155                           
  8156                           ;eeprom_settings.c: 148: unsigned int Location_Low_Byte = Location_High_Byte + 1;
  8157  003EF0  0E01               	movlw	1
  8158  003EF2  2419               	addwf	Eeprom_Store@Location_High_Byte,w,c
  8159  003EF4  6E17               	movwf	Eeprom_Store@Location_Low_Byte,c
  8160  003EF6  0E00               	movlw	0
  8161  003EF8  201A               	addwfc	Eeprom_Store@Location_High_Byte+1,w,c
  8162  003EFA  6E18               	movwf	Eeprom_Store@Location_Low_Byte+1,c
  8163                           
  8164                           ;eeprom_settings.c: 150: INTCON = 0x00;
  8165  003EFC  0E00               	movlw	0
  8166  003EFE  6EF2               	movwf	intcon,c	;volatile
  8167                           
  8168                           ;eeprom_settings.c: 152: EECON1bits.EEPGD = 0;
  8169  003F00  9EA6               	bcf	4006,7,c	;volsfr
  8170                           
  8171                           ;eeprom_settings.c: 153: EECON1bits.WREN = 1;
  8172  003F02  84A6               	bsf	4006,2,c	;volsfr
  8173                           
  8174                           ;eeprom_settings.c: 154: EEADR = Location_Low_Byte;
  8175  003F04  C017  FFA9         	movff	Eeprom_Store@Location_Low_Byte,4009	;volatile
  8176                           
  8177                           ;eeprom_settings.c: 155: EEDATA = Value;
  8178  003F08  C015  FFA8         	movff	Eeprom_Store@Value,4008	;volatile
  8179                           
  8180                           ;eeprom_settings.c: 156: EECON2 = 0x55;
  8181  003F0C  0E55               	movlw	85
  8182  003F0E  6EA7               	movwf	4007,c	;volsfr
  8183                           
  8184                           ;eeprom_settings.c: 157: EECON2 = 0xaa;
  8185  003F10  0EAA               	movlw	170
  8186  003F12  6EA7               	movwf	4007,c	;volsfr
  8187                           
  8188                           ;eeprom_settings.c: 158: EECON1bits.WR = 1;
  8189  003F14  82A6               	bsf	4006,1,c	;volsfr
  8190  003F16  A8A1               	btfss	4001,4,c	;volatile
  8191  003F18  D7FE               	goto	l756
  8192                           
  8193                           ;eeprom_settings.c: 160: PIR2bits.EEIF = 0;
  8194  003F1A  98A1               	bcf	4001,4,c	;volatile
  8195                           
  8196                           ;eeprom_settings.c: 162: EECON1bits.EEPGD = 0;
  8197  003F1C  9EA6               	bcf	4006,7,c	;volsfr
  8198                           
  8199                           ;eeprom_settings.c: 163: EECON1bits.WREN = 1;
  8200  003F1E  84A6               	bsf	4006,2,c	;volsfr
  8201                           
  8202                           ;eeprom_settings.c: 164: EEADR = Location_High_Byte;
  8203  003F20  C019  FFA9         	movff	Eeprom_Store@Location_High_Byte,4009	;volatile
  8204                           
  8205                           ;eeprom_settings.c: 165: EEDATA = Value >> 8;
  8206  003F24  5016               	movf	Eeprom_Store@Value+1,w,c
  8207  003F26  6EA8               	movwf	4008,c	;volatile
  8208                           
  8209                           ;eeprom_settings.c: 166: EECON2 = 0x55;
  8210  003F28  0E55               	movlw	85
  8211  003F2A  6EA7               	movwf	4007,c	;volsfr
  8212                           
  8213                           ;eeprom_settings.c: 167: EECON2 = 0xaa;
  8214  003F2C  0EAA               	movlw	170
  8215  003F2E  6EA7               	movwf	4007,c	;volsfr
  8216                           
  8217                           ;eeprom_settings.c: 168: EECON1bits.WR = 1;
  8218  003F30  82A6               	bsf	4006,1,c	;volsfr
  8219  003F32  A8A1               	btfss	4001,4,c	;volatile
  8220  003F34  D7FE               	goto	l759
  8221                           
  8222                           ;eeprom_settings.c: 170: PIR2bits.EEIF = 0;
  8223  003F36  98A1               	bcf	4001,4,c	;volatile
  8224                           
  8225                           ;eeprom_settings.c: 172: INTCON = 0xA0;
  8226  003F38  0EA0               	movlw	160
  8227  003F3A  6EF2               	movwf	intcon,c	;volatile
  8228  003F3C  0012               	return		;funcret
  8229  003F3E                     __end_of_Eeprom_Store:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           intcon	equ	0xFF2
  8236                           postinc0	equ	0xFEE
  8237                           wreg	equ	0xFE8
  8238                           postinc1	equ	0xFE6
  8239                           postdec1	equ	0xFE5
  8240                           fsr1h	equ	0xFE2
  8241                           fsr1l	equ	0xFE1
  8242                           postinc2	equ	0xFDE
  8243                           postdec2	equ	0xFDD
  8244                           fsr2h	equ	0xFDA
  8245                           fsr2l	equ	0xFD9
  8246                           status	equ	0xFD8
  8247                           
  8248 ;; *************** function _Debounce_Inputs *****************
  8249 ;; Defined at:
  8250 ;;		line 148 in file "../io.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;		None
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;		None
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      void 
  8257 ;; Registers used:
  8258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8264 ;;      Params:         0       0       0       0       0       0       0       0       0
  8265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8266 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8267 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8268 ;;Total ram usage:        2 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    5
  8271 ;; This function calls:
  8272 ;;		_GETxAPIxVAL
  8273 ;;		_SETxAPIxVAL
  8274 ;;		_SetDCPWM1
  8275 ;; This function is called by:
  8276 ;;		_Update_StateMchn
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           	psect	text17
  8281  0015CE                     __ptext17:
  8282                           	opt stack 0
  8283  0015CE                     _Debounce_Inputs:
  8284                           	opt stack 24
  8285                           
  8286                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  8287                           
  8288                           ;incstack = 0
  8289  0015CE  0E00               	movlw	0
  8290  0015D0  6E14               	movwf	GETxAPIxVAL@index+1,c
  8291  0015D2  0E40               	movlw	64
  8292  0015D4  6E13               	movwf	GETxAPIxVAL@index,c
  8293  0015D6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8294  0015DA  4613               	rlncf	?_GETxAPIxVAL,f,c
  8295  0015DC  4613               	rlncf	?_GETxAPIxVAL,f,c
  8296  0015DE  4613               	rlncf	?_GETxAPIxVAL,f,c
  8297  0015E0  5080               	movf	3968,w,c	;volatile
  8298  0015E2  1813               	xorwf	?_GETxAPIxVAL,w,c
  8299  0015E4  0BF7               	andlw	-9
  8300  0015E6  1813               	xorwf	?_GETxAPIxVAL,w,c
  8301  0015E8  6E80               	movwf	3968,c	;volatile
  8302                           
  8303                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  8304  0015EA  0E00               	movlw	0
  8305  0015EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  8306  0015EE  0E41               	movlw	65
  8307  0015F0  6E13               	movwf	GETxAPIxVAL@index,c
  8308  0015F2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8309  0015F6  4613               	rlncf	?_GETxAPIxVAL,f,c
  8310  0015F8  4613               	rlncf	?_GETxAPIxVAL,f,c
  8311  0015FA  5080               	movf	3968,w,c	;volatile
  8312  0015FC  1813               	xorwf	?_GETxAPIxVAL,w,c
  8313  0015FE  0BFB               	andlw	-5
  8314  001600  1813               	xorwf	?_GETxAPIxVAL,w,c
  8315  001602  6E80               	movwf	3968,c	;volatile
  8316                           
  8317                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  8318  001604  0E00               	movlw	0
  8319  001606  6E14               	movwf	GETxAPIxVAL@index+1,c
  8320  001608  0E42               	movlw	66
  8321  00160A  6E13               	movwf	GETxAPIxVAL@index,c
  8322  00160C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8323  001610  4613               	rlncf	?_GETxAPIxVAL,f,c
  8324  001612  5080               	movf	3968,w,c	;volatile
  8325  001614  1813               	xorwf	?_GETxAPIxVAL,w,c
  8326  001616  0BFD               	andlw	-3
  8327  001618  1813               	xorwf	?_GETxAPIxVAL,w,c
  8328  00161A  6E80               	movwf	3968,c	;volatile
  8329                           
  8330                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  8331  00161C  0E00               	movlw	0
  8332  00161E  6E14               	movwf	GETxAPIxVAL@index+1,c
  8333  001620  0E43               	movlw	67
  8334  001622  6E13               	movwf	GETxAPIxVAL@index,c
  8335  001624  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8336  001628  5080               	movf	3968,w,c	;volatile
  8337  00162A  1813               	xorwf	?_GETxAPIxVAL,w,c
  8338  00162C  0BFE               	andlw	-2
  8339  00162E  1813               	xorwf	?_GETxAPIxVAL,w,c
  8340  001630  6E80               	movwf	3968,c	;volatile
  8341                           
  8342                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  8343  001632  0E00               	movlw	0
  8344  001634  6E14               	movwf	GETxAPIxVAL@index+1,c
  8345  001636  0E45               	movlw	69
  8346  001638  6E13               	movwf	GETxAPIxVAL@index,c
  8347  00163A  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8348  00163E  5082               	movf	3970,w,c	;volatile
  8349  001640  1813               	xorwf	?_GETxAPIxVAL,w,c
  8350  001642  0BFE               	andlw	-2
  8351  001644  1813               	xorwf	?_GETxAPIxVAL,w,c
  8352  001646  6E82               	movwf	3970,c	;volatile
  8353                           
  8354                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(88));
  8355  001648  0E00               	movlw	0
  8356  00164A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8357  00164C  0E58               	movlw	88
  8358  00164E  6E13               	movwf	GETxAPIxVAL@index,c
  8359  001650  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8360  001654  C013  F015         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8361  001658  C014  F016         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8362  00165C  EC9A  F020         	call	_SetDCPWM1	;wreg free
  8363                           
  8364                           ;io.c: 157: switch(PORTDbits.RD1)
  8365  001660  D02C               	goto	l848
  8366  001662  503C               	movf	_Reed_Contact_LF_Counter,w,c
  8367  001664  B4D8               	btfsc	status,2,c
  8368  001666  D002               	goto	l850
  8369                           
  8370                           ;io.c: 160: {
  8371                           ;io.c: 161: Reed_Contact_LF_Counter--;
  8372  001668  063C               	decf	_Reed_Contact_LF_Counter,f,c
  8373                           
  8374                           ;io.c: 163: }
  8375                           
  8376                           ;io.c: 162: break;
  8377  00166A  D05F               	goto	l857
  8378  00166C                     l850:
  8379                           
  8380                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  8381  00166C  0E00               	movlw	0
  8382  00166E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8383  001670  0E1F               	movlw	31
  8384  001672  6E19               	movwf	SETxAPIxVAL@index,c
  8385  001674  0E00               	movlw	0
  8386  001676  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8387  001678  0E00               	movlw	0
  8388  00167A  6E1B               	movwf	SETxAPIxVAL@value,c
  8389  00167C  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8390                           
  8391                           ;io.c: 165: break;
  8392  001680  D054               	goto	l857
  8393  001682  503C               	movf	_Reed_Contact_LF_Counter,w,c
  8394  001684  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8395  001686  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8396  001688  0E00               	movlw	0
  8397  00168A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8398  00168C  0E1B               	movlw	27
  8399  00168E  6E13               	movwf	GETxAPIxVAL@index,c
  8400  001690  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8401  001694  501F               	movf	??_Debounce_Inputs,w,c
  8402  001696  5C13               	subwf	?_GETxAPIxVAL,w,c
  8403  001698  5020               	movf	??_Debounce_Inputs+1,w,c
  8404  00169A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8405  00169C  A0D8               	btfss	status,0,c
  8406  00169E  D002               	goto	l854
  8407                           
  8408                           ;io.c: 168: {
  8409                           ;io.c: 169: Reed_Contact_LF_Counter++;
  8410  0016A0  2A3C               	incf	_Reed_Contact_LF_Counter,f,c
  8411                           
  8412                           ;io.c: 171: }
  8413                           
  8414                           ;io.c: 170: break;
  8415  0016A2  D043               	goto	l857
  8416  0016A4                     l854:
  8417                           
  8418                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  8419  0016A4  0E00               	movlw	0
  8420  0016A6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8421  0016A8  0E1F               	movlw	31
  8422  0016AA  6E19               	movwf	SETxAPIxVAL@index,c
  8423  0016AC  0E00               	movlw	0
  8424  0016AE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8425  0016B0  0E01               	movlw	1
  8426  0016B2  6E1B               	movwf	SETxAPIxVAL@value,c
  8427  0016B4  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8428                           
  8429                           ;io.c: 176: }
  8430                           
  8431                           ;io.c: 175: default : break;
  8432                           
  8433                           ;io.c: 173: break;
  8434  0016B8  D038               	goto	l857
  8435  0016BA                     l848:
  8436  0016BA  A283               	btfss	3971,1,c	;volatile
  8437  0016BC  D002               	goto	u7160
  8438  0016BE  0E01               	movlw	1
  8439  0016C0  D001               	goto	u7166
  8440  0016C2                     u7160:
  8441  0016C2  0E00               	movlw	0
  8442  0016C4                     u7166:
  8443                           
  8444                           ; Switch size 1, requested type "space"
  8445                           ; Number of cases is 2, Range of values is 0 to 1
  8446                           ; switch strategies available:
  8447                           ; Name         Instructions Cycles
  8448                           ; simple_byte            7     4 (average)
  8449                           ;	Chosen strategy is simple_byte
  8450  0016C4  0A00               	xorlw	0	; case 0
  8451  0016C6  B4D8               	btfsc	status,2,c
  8452  0016C8  D7DC               	goto	l853
  8453  0016CA  0A01               	xorlw	1	; case 1
  8454  0016CC  B4D8               	btfsc	status,2,c
  8455  0016CE  D7C9               	goto	l849
  8456                           
  8457                           ;io.c: 179: switch(PORTDbits.RD0)
  8458  0016D0  D02C               	goto	l857
  8459  0016D2  503B               	movf	_Reed_Contact_LB_Counter,w,c
  8460  0016D4  B4D8               	btfsc	status,2,c
  8461  0016D6  D002               	goto	l859
  8462                           
  8463                           ;io.c: 182: {
  8464                           ;io.c: 183: Reed_Contact_LB_Counter--;
  8465  0016D8  063B               	decf	_Reed_Contact_LB_Counter,f,c
  8466                           
  8467                           ;io.c: 185: }
  8468                           
  8469                           ;io.c: 184: break;
  8470  0016DA  D05F               	goto	l866
  8471  0016DC                     l859:
  8472                           
  8473                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  8474  0016DC  0E00               	movlw	0
  8475  0016DE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8476  0016E0  0E1E               	movlw	30
  8477  0016E2  6E19               	movwf	SETxAPIxVAL@index,c
  8478  0016E4  0E00               	movlw	0
  8479  0016E6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8480  0016E8  0E00               	movlw	0
  8481  0016EA  6E1B               	movwf	SETxAPIxVAL@value,c
  8482  0016EC  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8483                           
  8484                           ;io.c: 187: break;
  8485  0016F0  D054               	goto	l866
  8486  0016F2  503B               	movf	_Reed_Contact_LB_Counter,w,c
  8487  0016F4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8488  0016F6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8489  0016F8  0E00               	movlw	0
  8490  0016FA  6E14               	movwf	GETxAPIxVAL@index+1,c
  8491  0016FC  0E1B               	movlw	27
  8492  0016FE  6E13               	movwf	GETxAPIxVAL@index,c
  8493  001700  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8494  001704  501F               	movf	??_Debounce_Inputs,w,c
  8495  001706  5C13               	subwf	?_GETxAPIxVAL,w,c
  8496  001708  5020               	movf	??_Debounce_Inputs+1,w,c
  8497  00170A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8498  00170C  A0D8               	btfss	status,0,c
  8499  00170E  D002               	goto	l863
  8500                           
  8501                           ;io.c: 190: {
  8502                           ;io.c: 191: Reed_Contact_LB_Counter++;
  8503  001710  2A3B               	incf	_Reed_Contact_LB_Counter,f,c
  8504                           
  8505                           ;io.c: 193: }
  8506                           
  8507                           ;io.c: 192: break;
  8508  001712  D043               	goto	l866
  8509  001714                     l863:
  8510                           
  8511                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  8512  001714  0E00               	movlw	0
  8513  001716  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8514  001718  0E1E               	movlw	30
  8515  00171A  6E19               	movwf	SETxAPIxVAL@index,c
  8516  00171C  0E00               	movlw	0
  8517  00171E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8518  001720  0E01               	movlw	1
  8519  001722  6E1B               	movwf	SETxAPIxVAL@value,c
  8520  001724  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8521                           
  8522                           ;io.c: 198: }
  8523                           
  8524                           ;io.c: 197: default : break;
  8525                           
  8526                           ;io.c: 195: break;
  8527  001728  D038               	goto	l866
  8528  00172A                     l857:
  8529  00172A  A083               	btfss	3971,0,c	;volatile
  8530  00172C  D002               	goto	u7190
  8531  00172E  0E01               	movlw	1
  8532  001730  D001               	goto	u7196
  8533  001732                     u7190:
  8534  001732  0E00               	movlw	0
  8535  001734                     u7196:
  8536                           
  8537                           ; Switch size 1, requested type "space"
  8538                           ; Number of cases is 2, Range of values is 0 to 1
  8539                           ; switch strategies available:
  8540                           ; Name         Instructions Cycles
  8541                           ; simple_byte            7     4 (average)
  8542                           ;	Chosen strategy is simple_byte
  8543  001734  0A00               	xorlw	0	; case 0
  8544  001736  B4D8               	btfsc	status,2,c
  8545  001738  D7DC               	goto	l862
  8546  00173A  0A01               	xorlw	1	; case 1
  8547  00173C  B4D8               	btfsc	status,2,c
  8548  00173E  D7C9               	goto	l858
  8549                           
  8550                           ;io.c: 201: switch(PORTDbits.RD3)
  8551  001740  D02C               	goto	l866
  8552  001742  503A               	movf	_Reed_Contact_RF_Counter,w,c
  8553  001744  B4D8               	btfsc	status,2,c
  8554  001746  D002               	goto	l868
  8555                           
  8556                           ;io.c: 204: {
  8557                           ;io.c: 205: Reed_Contact_RF_Counter--;
  8558  001748  063A               	decf	_Reed_Contact_RF_Counter,f,c
  8559                           
  8560                           ;io.c: 207: }
  8561                           
  8562                           ;io.c: 206: break;
  8563  00174A  D05F               	goto	l875
  8564  00174C                     l868:
  8565                           
  8566                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  8567  00174C  0E00               	movlw	0
  8568  00174E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8569  001750  0E1D               	movlw	29
  8570  001752  6E19               	movwf	SETxAPIxVAL@index,c
  8571  001754  0E00               	movlw	0
  8572  001756  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8573  001758  0E00               	movlw	0
  8574  00175A  6E1B               	movwf	SETxAPIxVAL@value,c
  8575  00175C  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8576                           
  8577                           ;io.c: 209: break;
  8578  001760  D054               	goto	l875
  8579  001762  503A               	movf	_Reed_Contact_RF_Counter,w,c
  8580  001764  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8581  001766  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8582  001768  0E00               	movlw	0
  8583  00176A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8584  00176C  0E1B               	movlw	27
  8585  00176E  6E13               	movwf	GETxAPIxVAL@index,c
  8586  001770  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8587  001774  501F               	movf	??_Debounce_Inputs,w,c
  8588  001776  5C13               	subwf	?_GETxAPIxVAL,w,c
  8589  001778  5020               	movf	??_Debounce_Inputs+1,w,c
  8590  00177A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8591  00177C  A0D8               	btfss	status,0,c
  8592  00177E  D002               	goto	l872
  8593                           
  8594                           ;io.c: 212: {
  8595                           ;io.c: 213: Reed_Contact_RF_Counter++;
  8596  001780  2A3A               	incf	_Reed_Contact_RF_Counter,f,c
  8597                           
  8598                           ;io.c: 215: }
  8599                           
  8600                           ;io.c: 214: break;
  8601  001782  D043               	goto	l875
  8602  001784                     l872:
  8603                           
  8604                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  8605  001784  0E00               	movlw	0
  8606  001786  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8607  001788  0E1D               	movlw	29
  8608  00178A  6E19               	movwf	SETxAPIxVAL@index,c
  8609  00178C  0E00               	movlw	0
  8610  00178E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8611  001790  0E01               	movlw	1
  8612  001792  6E1B               	movwf	SETxAPIxVAL@value,c
  8613  001794  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8614                           
  8615                           ;io.c: 220: }
  8616                           
  8617                           ;io.c: 219: default : break;
  8618                           
  8619                           ;io.c: 217: break;
  8620  001798  D038               	goto	l875
  8621  00179A                     l866:
  8622  00179A  A683               	btfss	3971,3,c	;volatile
  8623  00179C  D002               	goto	u7220
  8624  00179E  0E01               	movlw	1
  8625  0017A0  D001               	goto	u7226
  8626  0017A2                     u7220:
  8627  0017A2  0E00               	movlw	0
  8628  0017A4                     u7226:
  8629                           
  8630                           ; Switch size 1, requested type "space"
  8631                           ; Number of cases is 2, Range of values is 0 to 1
  8632                           ; switch strategies available:
  8633                           ; Name         Instructions Cycles
  8634                           ; simple_byte            7     4 (average)
  8635                           ;	Chosen strategy is simple_byte
  8636  0017A4  0A00               	xorlw	0	; case 0
  8637  0017A6  B4D8               	btfsc	status,2,c
  8638  0017A8  D7DC               	goto	l871
  8639  0017AA  0A01               	xorlw	1	; case 1
  8640  0017AC  B4D8               	btfsc	status,2,c
  8641  0017AE  D7C9               	goto	l867
  8642                           
  8643                           ;io.c: 223: switch(PORTDbits.RD2)
  8644  0017B0  D02C               	goto	l875
  8645  0017B2  5039               	movf	_Reed_Contact_RB_Counter,w,c
  8646  0017B4  B4D8               	btfsc	status,2,c
  8647  0017B6  D002               	goto	l877
  8648                           
  8649                           ;io.c: 226: {
  8650                           ;io.c: 227: Reed_Contact_RB_Counter--;
  8651  0017B8  0639               	decf	_Reed_Contact_RB_Counter,f,c
  8652                           
  8653                           ;io.c: 229: }
  8654                           
  8655                           ;io.c: 228: break;
  8656  0017BA  D05F               	goto	l884
  8657  0017BC                     l877:
  8658                           
  8659                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  8660  0017BC  0E00               	movlw	0
  8661  0017BE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8662  0017C0  0E1C               	movlw	28
  8663  0017C2  6E19               	movwf	SETxAPIxVAL@index,c
  8664  0017C4  0E00               	movlw	0
  8665  0017C6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8666  0017C8  0E00               	movlw	0
  8667  0017CA  6E1B               	movwf	SETxAPIxVAL@value,c
  8668  0017CC  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8669                           
  8670                           ;io.c: 231: break;
  8671  0017D0  D054               	goto	l884
  8672  0017D2  5039               	movf	_Reed_Contact_RB_Counter,w,c
  8673  0017D4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8674  0017D6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8675  0017D8  0E00               	movlw	0
  8676  0017DA  6E14               	movwf	GETxAPIxVAL@index+1,c
  8677  0017DC  0E1B               	movlw	27
  8678  0017DE  6E13               	movwf	GETxAPIxVAL@index,c
  8679  0017E0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8680  0017E4  501F               	movf	??_Debounce_Inputs,w,c
  8681  0017E6  5C13               	subwf	?_GETxAPIxVAL,w,c
  8682  0017E8  5020               	movf	??_Debounce_Inputs+1,w,c
  8683  0017EA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8684  0017EC  A0D8               	btfss	status,0,c
  8685  0017EE  D002               	goto	l881
  8686                           
  8687                           ;io.c: 234: {
  8688                           ;io.c: 235: Reed_Contact_RB_Counter++;
  8689  0017F0  2A39               	incf	_Reed_Contact_RB_Counter,f,c
  8690                           
  8691                           ;io.c: 237: }
  8692                           
  8693                           ;io.c: 236: break;
  8694  0017F2  D043               	goto	l884
  8695  0017F4                     l881:
  8696                           
  8697                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  8698  0017F4  0E00               	movlw	0
  8699  0017F6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8700  0017F8  0E1C               	movlw	28
  8701  0017FA  6E19               	movwf	SETxAPIxVAL@index,c
  8702  0017FC  0E00               	movlw	0
  8703  0017FE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8704  001800  0E01               	movlw	1
  8705  001802  6E1B               	movwf	SETxAPIxVAL@value,c
  8706  001804  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8707                           
  8708                           ;io.c: 242: }
  8709                           
  8710                           ;io.c: 241: default : break;
  8711                           
  8712                           ;io.c: 239: break;
  8713  001808  D038               	goto	l884
  8714  00180A                     l875:
  8715  00180A  A483               	btfss	3971,2,c	;volatile
  8716  00180C  D002               	goto	u7250
  8717  00180E  0E01               	movlw	1
  8718  001810  D001               	goto	u7256
  8719  001812                     u7250:
  8720  001812  0E00               	movlw	0
  8721  001814                     u7256:
  8722                           
  8723                           ; Switch size 1, requested type "space"
  8724                           ; Number of cases is 2, Range of values is 0 to 1
  8725                           ; switch strategies available:
  8726                           ; Name         Instructions Cycles
  8727                           ; simple_byte            7     4 (average)
  8728                           ;	Chosen strategy is simple_byte
  8729  001814  0A00               	xorlw	0	; case 0
  8730  001816  B4D8               	btfsc	status,2,c
  8731  001818  D7DC               	goto	l880
  8732  00181A  0A01               	xorlw	1	; case 1
  8733  00181C  B4D8               	btfsc	status,2,c
  8734  00181E  D7C9               	goto	l876
  8735                           
  8736                           ;io.c: 245: switch(!PORTBbits.RB0)
  8737  001820  D02C               	goto	l884
  8738  001822  5034               	movf	_Button_Contact_Counter_Start,w,c
  8739  001824  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8740  001826  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8741  001828  0E00               	movlw	0
  8742  00182A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8743  00182C  0E1B               	movlw	27
  8744  00182E  6E13               	movwf	GETxAPIxVAL@index,c
  8745  001830  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8746  001834  501F               	movf	??_Debounce_Inputs,w,c
  8747  001836  5C13               	subwf	?_GETxAPIxVAL,w,c
  8748  001838  5020               	movf	??_Debounce_Inputs+1,w,c
  8749  00183A  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8750  00183C  A0D8               	btfss	status,0,c
  8751  00183E  D002               	goto	l886
  8752                           
  8753                           ;io.c: 248: {
  8754                           ;io.c: 249: Button_Contact_Counter_Start++;
  8755  001840  2A34               	incf	_Button_Contact_Counter_Start,f,c
  8756                           
  8757                           ;io.c: 251: }
  8758                           
  8759                           ;io.c: 250: break;
  8760  001842  D05A               	goto	l893
  8761  001844                     l886:
  8762                           
  8763                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  8764  001844  0E00               	movlw	0
  8765  001846  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8766  001848  0E20               	movlw	32
  8767  00184A  6E19               	movwf	SETxAPIxVAL@index,c
  8768  00184C  0E00               	movlw	0
  8769  00184E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8770  001850  0E01               	movlw	1
  8771  001852  6E1B               	movwf	SETxAPIxVAL@value,c
  8772  001854  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8773                           
  8774                           ;io.c: 253: break;
  8775  001858  D04F               	goto	l893
  8776  00185A  5034               	movf	_Button_Contact_Counter_Start,w,c
  8777  00185C  B4D8               	btfsc	status,2,c
  8778  00185E  D002               	goto	l890
  8779                           
  8780                           ;io.c: 256: {
  8781                           ;io.c: 257: Button_Contact_Counter_Start--;
  8782  001860  0634               	decf	_Button_Contact_Counter_Start,f,c
  8783                           
  8784                           ;io.c: 259: }
  8785                           
  8786                           ;io.c: 258: break;
  8787  001862  D04A               	goto	l893
  8788  001864                     l890:
  8789                           
  8790                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  8791  001864  0E00               	movlw	0
  8792  001866  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8793  001868  0E20               	movlw	32
  8794  00186A  6E19               	movwf	SETxAPIxVAL@index,c
  8795  00186C  0E00               	movlw	0
  8796  00186E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8797  001870  0E00               	movlw	0
  8798  001872  6E1B               	movwf	SETxAPIxVAL@value,c
  8799  001874  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8800                           
  8801                           ;io.c: 264: }
  8802                           
  8803                           ;io.c: 263: default : break;
  8804                           
  8805                           ;io.c: 261: break;
  8806  001878  D03F               	goto	l893
  8807  00187A                     l884:
  8808  00187A  B081               	btfsc	3969,0,c	;volatile
  8809  00187C  D002               	goto	u7280
  8810  00187E  0E01               	movlw	1
  8811  001880  D001               	goto	u7290
  8812  001882                     u7280:
  8813  001882  0E00               	movlw	0
  8814  001884                     u7290:
  8815  001884  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8816  001886  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8817                           
  8818                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8819                           ; Switch size 1, requested type "space"
  8820                           ; Number of cases is 1, Range of values is 0 to 0
  8821                           ; switch strategies available:
  8822                           ; Name         Instructions Cycles
  8823                           ; simple_byte            4     3 (average)
  8824                           ;	Chosen strategy is simple_byte
  8825  001888  5020               	movf	??_Debounce_Inputs+1,w,c
  8826  00188A  0A00               	xorlw	0	; case 0
  8827  00188C  A4D8               	btfss	status,2,c
  8828  00188E  D034               	goto	l893
  8829                           
  8830                           ; Switch size 1, requested type "space"
  8831                           ; Number of cases is 2, Range of values is 0 to 1
  8832                           ; switch strategies available:
  8833                           ; Name         Instructions Cycles
  8834                           ; simple_byte            7     4 (average)
  8835                           ;	Chosen strategy is simple_byte
  8836  001890  501F               	movf	??_Debounce_Inputs,w,c
  8837  001892  0A00               	xorlw	0	; case 0
  8838  001894  B4D8               	btfsc	status,2,c
  8839  001896  D7E1               	goto	l889
  8840  001898  0A01               	xorlw	1	; case 1
  8841  00189A  B4D8               	btfsc	status,2,c
  8842  00189C  D7C2               	goto	l885
  8843                           
  8844                           ;io.c: 267: switch(!PORTDbits.RD7)
  8845  00189E  D02C               	goto	l893
  8846  0018A0  5033               	movf	_Button_Contact_Counter_Stop,w,c
  8847  0018A2  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8848  0018A4  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8849  0018A6  0E00               	movlw	0
  8850  0018A8  6E14               	movwf	GETxAPIxVAL@index+1,c
  8851  0018AA  0E1B               	movlw	27
  8852  0018AC  6E13               	movwf	GETxAPIxVAL@index,c
  8853  0018AE  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8854  0018B2  501F               	movf	??_Debounce_Inputs,w,c
  8855  0018B4  5C13               	subwf	?_GETxAPIxVAL,w,c
  8856  0018B6  5020               	movf	??_Debounce_Inputs+1,w,c
  8857  0018B8  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8858  0018BA  A0D8               	btfss	status,0,c
  8859  0018BC  D002               	goto	l895
  8860                           
  8861                           ;io.c: 270: {
  8862                           ;io.c: 271: Button_Contact_Counter_Stop++;
  8863  0018BE  2A33               	incf	_Button_Contact_Counter_Stop,f,c
  8864                           
  8865                           ;io.c: 273: }
  8866                           
  8867                           ;io.c: 272: break;
  8868  0018C0  D05A               	goto	l902
  8869  0018C2                     l895:
  8870                           
  8871                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  8872  0018C2  0E00               	movlw	0
  8873  0018C4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8874  0018C6  0E21               	movlw	33
  8875  0018C8  6E19               	movwf	SETxAPIxVAL@index,c
  8876  0018CA  0E00               	movlw	0
  8877  0018CC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8878  0018CE  0E01               	movlw	1
  8879  0018D0  6E1B               	movwf	SETxAPIxVAL@value,c
  8880  0018D2  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8881                           
  8882                           ;io.c: 275: break;
  8883  0018D6  D04F               	goto	l902
  8884  0018D8  5033               	movf	_Button_Contact_Counter_Stop,w,c
  8885  0018DA  B4D8               	btfsc	status,2,c
  8886  0018DC  D002               	goto	l899
  8887                           
  8888                           ;io.c: 278: {
  8889                           ;io.c: 279: Button_Contact_Counter_Stop--;
  8890  0018DE  0633               	decf	_Button_Contact_Counter_Stop,f,c
  8891                           
  8892                           ;io.c: 281: }
  8893                           
  8894                           ;io.c: 280: break;
  8895  0018E0  D04A               	goto	l902
  8896  0018E2                     l899:
  8897                           
  8898                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  8899  0018E2  0E00               	movlw	0
  8900  0018E4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8901  0018E6  0E21               	movlw	33
  8902  0018E8  6E19               	movwf	SETxAPIxVAL@index,c
  8903  0018EA  0E00               	movlw	0
  8904  0018EC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8905  0018EE  0E00               	movlw	0
  8906  0018F0  6E1B               	movwf	SETxAPIxVAL@value,c
  8907  0018F2  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8908                           
  8909                           ;io.c: 286: }
  8910                           
  8911                           ;io.c: 285: default : break;
  8912                           
  8913                           ;io.c: 283: break;
  8914  0018F6  D03F               	goto	l902
  8915  0018F8                     l893:
  8916  0018F8  BE83               	btfsc	3971,7,c	;volatile
  8917  0018FA  D002               	goto	u7320
  8918  0018FC  0E01               	movlw	1
  8919  0018FE  D001               	goto	u7330
  8920  001900                     u7320:
  8921  001900  0E00               	movlw	0
  8922  001902                     u7330:
  8923  001902  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8924  001904  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8925                           
  8926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8927                           ; Switch size 1, requested type "space"
  8928                           ; Number of cases is 1, Range of values is 0 to 0
  8929                           ; switch strategies available:
  8930                           ; Name         Instructions Cycles
  8931                           ; simple_byte            4     3 (average)
  8932                           ;	Chosen strategy is simple_byte
  8933  001906  5020               	movf	??_Debounce_Inputs+1,w,c
  8934  001908  0A00               	xorlw	0	; case 0
  8935  00190A  A4D8               	btfss	status,2,c
  8936  00190C  D034               	goto	l902
  8937                           
  8938                           ; Switch size 1, requested type "space"
  8939                           ; Number of cases is 2, Range of values is 0 to 1
  8940                           ; switch strategies available:
  8941                           ; Name         Instructions Cycles
  8942                           ; simple_byte            7     4 (average)
  8943                           ;	Chosen strategy is simple_byte
  8944  00190E  501F               	movf	??_Debounce_Inputs,w,c
  8945  001910  0A00               	xorlw	0	; case 0
  8946  001912  B4D8               	btfsc	status,2,c
  8947  001914  D7E1               	goto	l898
  8948  001916  0A01               	xorlw	1	; case 1
  8949  001918  B4D8               	btfsc	status,2,c
  8950  00191A  D7C2               	goto	l894
  8951                           
  8952                           ;io.c: 289: switch(!PORTBbits.RB1)
  8953  00191C  D02C               	goto	l902
  8954  00191E  5032               	movf	_Button_Contact_Counter_Middle,w,c
  8955  001920  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8956  001922  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8957  001924  0E00               	movlw	0
  8958  001926  6E14               	movwf	GETxAPIxVAL@index+1,c
  8959  001928  0E1B               	movlw	27
  8960  00192A  6E13               	movwf	GETxAPIxVAL@index,c
  8961  00192C  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  8962  001930  501F               	movf	??_Debounce_Inputs,w,c
  8963  001932  5C13               	subwf	?_GETxAPIxVAL,w,c
  8964  001934  5020               	movf	??_Debounce_Inputs+1,w,c
  8965  001936  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8966  001938  A0D8               	btfss	status,0,c
  8967  00193A  D002               	goto	l904
  8968                           
  8969                           ;io.c: 292: {
  8970                           ;io.c: 293: Button_Contact_Counter_Middle++;
  8971  00193C  2A32               	incf	_Button_Contact_Counter_Middle,f,c
  8972                           
  8973                           ;io.c: 295: }
  8974                           
  8975                           ;io.c: 294: break;
  8976  00193E  D05A               	goto	l911
  8977  001940                     l904:
  8978                           
  8979                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  8980  001940  0E00               	movlw	0
  8981  001942  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8982  001944  0E22               	movlw	34
  8983  001946  6E19               	movwf	SETxAPIxVAL@index,c
  8984  001948  0E00               	movlw	0
  8985  00194A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8986  00194C  0E01               	movlw	1
  8987  00194E  6E1B               	movwf	SETxAPIxVAL@value,c
  8988  001950  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  8989                           
  8990                           ;io.c: 297: break;
  8991  001954  D04F               	goto	l911
  8992  001956  5032               	movf	_Button_Contact_Counter_Middle,w,c
  8993  001958  B4D8               	btfsc	status,2,c
  8994  00195A  D002               	goto	l908
  8995                           
  8996                           ;io.c: 300: {
  8997                           ;io.c: 301: Button_Contact_Counter_Middle--;
  8998  00195C  0632               	decf	_Button_Contact_Counter_Middle,f,c
  8999                           
  9000                           ;io.c: 303: }
  9001                           
  9002                           ;io.c: 302: break;
  9003  00195E  D04A               	goto	l911
  9004  001960                     l908:
  9005                           
  9006                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  9007  001960  0E00               	movlw	0
  9008  001962  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9009  001964  0E22               	movlw	34
  9010  001966  6E19               	movwf	SETxAPIxVAL@index,c
  9011  001968  0E00               	movlw	0
  9012  00196A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9013  00196C  0E00               	movlw	0
  9014  00196E  6E1B               	movwf	SETxAPIxVAL@value,c
  9015  001970  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9016                           
  9017                           ;io.c: 308: }
  9018                           
  9019                           ;io.c: 307: default : break;
  9020                           
  9021                           ;io.c: 305: break;
  9022  001974  D03F               	goto	l911
  9023  001976                     l902:
  9024  001976  B281               	btfsc	3969,1,c	;volatile
  9025  001978  D002               	goto	u7360
  9026  00197A  0E01               	movlw	1
  9027  00197C  D001               	goto	u7370
  9028  00197E                     u7360:
  9029  00197E  0E00               	movlw	0
  9030  001980                     u7370:
  9031  001980  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9032  001982  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9033                           
  9034                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9035                           ; Switch size 1, requested type "space"
  9036                           ; Number of cases is 1, Range of values is 0 to 0
  9037                           ; switch strategies available:
  9038                           ; Name         Instructions Cycles
  9039                           ; simple_byte            4     3 (average)
  9040                           ;	Chosen strategy is simple_byte
  9041  001984  5020               	movf	??_Debounce_Inputs+1,w,c
  9042  001986  0A00               	xorlw	0	; case 0
  9043  001988  A4D8               	btfss	status,2,c
  9044  00198A  D034               	goto	l911
  9045                           
  9046                           ; Switch size 1, requested type "space"
  9047                           ; Number of cases is 2, Range of values is 0 to 1
  9048                           ; switch strategies available:
  9049                           ; Name         Instructions Cycles
  9050                           ; simple_byte            7     4 (average)
  9051                           ;	Chosen strategy is simple_byte
  9052  00198C  501F               	movf	??_Debounce_Inputs,w,c
  9053  00198E  0A00               	xorlw	0	; case 0
  9054  001990  B4D8               	btfsc	status,2,c
  9055  001992  D7E1               	goto	l907
  9056  001994  0A01               	xorlw	1	; case 1
  9057  001996  B4D8               	btfsc	status,2,c
  9058  001998  D7C2               	goto	l903
  9059                           
  9060                           ;io.c: 311: switch(!PORTBbits.RB5)
  9061  00199A  D02C               	goto	l911
  9062  00199C  5031               	movf	_Button_Contact_Counter_LB,w,c
  9063  00199E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9064  0019A0  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9065  0019A2  0E00               	movlw	0
  9066  0019A4  6E14               	movwf	GETxAPIxVAL@index+1,c
  9067  0019A6  0E1B               	movlw	27
  9068  0019A8  6E13               	movwf	GETxAPIxVAL@index,c
  9069  0019AA  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9070  0019AE  501F               	movf	??_Debounce_Inputs,w,c
  9071  0019B0  5C13               	subwf	?_GETxAPIxVAL,w,c
  9072  0019B2  5020               	movf	??_Debounce_Inputs+1,w,c
  9073  0019B4  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9074  0019B6  A0D8               	btfss	status,0,c
  9075  0019B8  D002               	goto	l913
  9076                           
  9077                           ;io.c: 314: {
  9078                           ;io.c: 315: Button_Contact_Counter_LB++;
  9079  0019BA  2A31               	incf	_Button_Contact_Counter_LB,f,c
  9080                           
  9081                           ;io.c: 317: }
  9082                           
  9083                           ;io.c: 316: break;
  9084  0019BC  D05A               	goto	l920
  9085  0019BE                     l913:
  9086                           
  9087                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  9088  0019BE  0E00               	movlw	0
  9089  0019C0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9090  0019C2  0E23               	movlw	35
  9091  0019C4  6E19               	movwf	SETxAPIxVAL@index,c
  9092  0019C6  0E00               	movlw	0
  9093  0019C8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9094  0019CA  0E01               	movlw	1
  9095  0019CC  6E1B               	movwf	SETxAPIxVAL@value,c
  9096  0019CE  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9097                           
  9098                           ;io.c: 319: break;
  9099  0019D2  D04F               	goto	l920
  9100  0019D4  5031               	movf	_Button_Contact_Counter_LB,w,c
  9101  0019D6  B4D8               	btfsc	status,2,c
  9102  0019D8  D002               	goto	l917
  9103                           
  9104                           ;io.c: 322: {
  9105                           ;io.c: 323: Button_Contact_Counter_LB--;
  9106  0019DA  0631               	decf	_Button_Contact_Counter_LB,f,c
  9107                           
  9108                           ;io.c: 325: }
  9109                           
  9110                           ;io.c: 324: break;
  9111  0019DC  D04A               	goto	l920
  9112  0019DE                     l917:
  9113                           
  9114                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  9115  0019DE  0E00               	movlw	0
  9116  0019E0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9117  0019E2  0E23               	movlw	35
  9118  0019E4  6E19               	movwf	SETxAPIxVAL@index,c
  9119  0019E6  0E00               	movlw	0
  9120  0019E8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9121  0019EA  0E00               	movlw	0
  9122  0019EC  6E1B               	movwf	SETxAPIxVAL@value,c
  9123  0019EE  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9124                           
  9125                           ;io.c: 330: }
  9126                           
  9127                           ;io.c: 329: default : break;
  9128                           
  9129                           ;io.c: 327: break;
  9130  0019F2  D03F               	goto	l920
  9131  0019F4                     l911:
  9132  0019F4  BA81               	btfsc	3969,5,c	;volatile
  9133  0019F6  D002               	goto	u7400
  9134  0019F8  0E01               	movlw	1
  9135  0019FA  D001               	goto	u7410
  9136  0019FC                     u7400:
  9137  0019FC  0E00               	movlw	0
  9138  0019FE                     u7410:
  9139  0019FE  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9140  001A00  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9141                           
  9142                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9143                           ; Switch size 1, requested type "space"
  9144                           ; Number of cases is 1, Range of values is 0 to 0
  9145                           ; switch strategies available:
  9146                           ; Name         Instructions Cycles
  9147                           ; simple_byte            4     3 (average)
  9148                           ;	Chosen strategy is simple_byte
  9149  001A02  5020               	movf	??_Debounce_Inputs+1,w,c
  9150  001A04  0A00               	xorlw	0	; case 0
  9151  001A06  A4D8               	btfss	status,2,c
  9152  001A08  D034               	goto	l920
  9153                           
  9154                           ; Switch size 1, requested type "space"
  9155                           ; Number of cases is 2, Range of values is 0 to 1
  9156                           ; switch strategies available:
  9157                           ; Name         Instructions Cycles
  9158                           ; simple_byte            7     4 (average)
  9159                           ;	Chosen strategy is simple_byte
  9160  001A0A  501F               	movf	??_Debounce_Inputs,w,c
  9161  001A0C  0A00               	xorlw	0	; case 0
  9162  001A0E  B4D8               	btfsc	status,2,c
  9163  001A10  D7E1               	goto	l916
  9164  001A12  0A01               	xorlw	1	; case 1
  9165  001A14  B4D8               	btfsc	status,2,c
  9166  001A16  D7C2               	goto	l912
  9167                           
  9168                           ;io.c: 333: switch(!PORTBbits.RB4)
  9169  001A18  D02C               	goto	l920
  9170  001A1A  5030               	movf	_Button_Contact_Counter_LF,w,c
  9171  001A1C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9172  001A1E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9173  001A20  0E00               	movlw	0
  9174  001A22  6E14               	movwf	GETxAPIxVAL@index+1,c
  9175  001A24  0E1B               	movlw	27
  9176  001A26  6E13               	movwf	GETxAPIxVAL@index,c
  9177  001A28  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9178  001A2C  501F               	movf	??_Debounce_Inputs,w,c
  9179  001A2E  5C13               	subwf	?_GETxAPIxVAL,w,c
  9180  001A30  5020               	movf	??_Debounce_Inputs+1,w,c
  9181  001A32  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9182  001A34  A0D8               	btfss	status,0,c
  9183  001A36  D002               	goto	l922
  9184                           
  9185                           ;io.c: 336: {
  9186                           ;io.c: 337: Button_Contact_Counter_LF++;
  9187  001A38  2A30               	incf	_Button_Contact_Counter_LF,f,c
  9188                           
  9189                           ;io.c: 339: }
  9190                           
  9191                           ;io.c: 338: break;
  9192  001A3A  D05A               	goto	l929
  9193  001A3C                     l922:
  9194                           
  9195                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  9196  001A3C  0E00               	movlw	0
  9197  001A3E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9198  001A40  0E24               	movlw	36
  9199  001A42  6E19               	movwf	SETxAPIxVAL@index,c
  9200  001A44  0E00               	movlw	0
  9201  001A46  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9202  001A48  0E01               	movlw	1
  9203  001A4A  6E1B               	movwf	SETxAPIxVAL@value,c
  9204  001A4C  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9205                           
  9206                           ;io.c: 341: break;
  9207  001A50  D04F               	goto	l929
  9208  001A52  5030               	movf	_Button_Contact_Counter_LF,w,c
  9209  001A54  B4D8               	btfsc	status,2,c
  9210  001A56  D002               	goto	l926
  9211                           
  9212                           ;io.c: 344: {
  9213                           ;io.c: 345: Button_Contact_Counter_LF--;
  9214  001A58  0630               	decf	_Button_Contact_Counter_LF,f,c
  9215                           
  9216                           ;io.c: 347: }
  9217                           
  9218                           ;io.c: 346: break;
  9219  001A5A  D04A               	goto	l929
  9220  001A5C                     l926:
  9221                           
  9222                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  9223  001A5C  0E00               	movlw	0
  9224  001A5E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9225  001A60  0E24               	movlw	36
  9226  001A62  6E19               	movwf	SETxAPIxVAL@index,c
  9227  001A64  0E00               	movlw	0
  9228  001A66  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9229  001A68  0E00               	movlw	0
  9230  001A6A  6E1B               	movwf	SETxAPIxVAL@value,c
  9231  001A6C  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9232                           
  9233                           ;io.c: 352: }
  9234                           
  9235                           ;io.c: 351: default : break;
  9236                           
  9237                           ;io.c: 349: break;
  9238  001A70  D03F               	goto	l929
  9239  001A72                     l920:
  9240  001A72  B881               	btfsc	3969,4,c	;volatile
  9241  001A74  D002               	goto	u7440
  9242  001A76  0E01               	movlw	1
  9243  001A78  D001               	goto	u7450
  9244  001A7A                     u7440:
  9245  001A7A  0E00               	movlw	0
  9246  001A7C                     u7450:
  9247  001A7C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9248  001A7E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9249                           
  9250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9251                           ; Switch size 1, requested type "space"
  9252                           ; Number of cases is 1, Range of values is 0 to 0
  9253                           ; switch strategies available:
  9254                           ; Name         Instructions Cycles
  9255                           ; simple_byte            4     3 (average)
  9256                           ;	Chosen strategy is simple_byte
  9257  001A80  5020               	movf	??_Debounce_Inputs+1,w,c
  9258  001A82  0A00               	xorlw	0	; case 0
  9259  001A84  A4D8               	btfss	status,2,c
  9260  001A86  D034               	goto	l929
  9261                           
  9262                           ; Switch size 1, requested type "space"
  9263                           ; Number of cases is 2, Range of values is 0 to 1
  9264                           ; switch strategies available:
  9265                           ; Name         Instructions Cycles
  9266                           ; simple_byte            7     4 (average)
  9267                           ;	Chosen strategy is simple_byte
  9268  001A88  501F               	movf	??_Debounce_Inputs,w,c
  9269  001A8A  0A00               	xorlw	0	; case 0
  9270  001A8C  B4D8               	btfsc	status,2,c
  9271  001A8E  D7E1               	goto	l925
  9272  001A90  0A01               	xorlw	1	; case 1
  9273  001A92  B4D8               	btfsc	status,2,c
  9274  001A94  D7C2               	goto	l921
  9275                           
  9276                           ;io.c: 355: switch(!PORTBbits.RB3)
  9277  001A96  D02C               	goto	l929
  9278  001A98  502F               	movf	_Button_Contact_Counter_RB,w,c
  9279  001A9A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9280  001A9C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9281  001A9E  0E00               	movlw	0
  9282  001AA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  9283  001AA2  0E1B               	movlw	27
  9284  001AA4  6E13               	movwf	GETxAPIxVAL@index,c
  9285  001AA6  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9286  001AAA  501F               	movf	??_Debounce_Inputs,w,c
  9287  001AAC  5C13               	subwf	?_GETxAPIxVAL,w,c
  9288  001AAE  5020               	movf	??_Debounce_Inputs+1,w,c
  9289  001AB0  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9290  001AB2  A0D8               	btfss	status,0,c
  9291  001AB4  D002               	goto	l931
  9292                           
  9293                           ;io.c: 358: {
  9294                           ;io.c: 359: Button_Contact_Counter_RB++;
  9295  001AB6  2A2F               	incf	_Button_Contact_Counter_RB,f,c
  9296                           
  9297                           ;io.c: 361: }
  9298                           
  9299                           ;io.c: 360: break;
  9300  001AB8  D05A               	goto	l938
  9301  001ABA                     l931:
  9302                           
  9303                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  9304  001ABA  0E00               	movlw	0
  9305  001ABC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9306  001ABE  0E25               	movlw	37
  9307  001AC0  6E19               	movwf	SETxAPIxVAL@index,c
  9308  001AC2  0E00               	movlw	0
  9309  001AC4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9310  001AC6  0E01               	movlw	1
  9311  001AC8  6E1B               	movwf	SETxAPIxVAL@value,c
  9312  001ACA  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9313                           
  9314                           ;io.c: 363: break;
  9315  001ACE  D04F               	goto	l938
  9316  001AD0  502F               	movf	_Button_Contact_Counter_RB,w,c
  9317  001AD2  B4D8               	btfsc	status,2,c
  9318  001AD4  D002               	goto	l935
  9319                           
  9320                           ;io.c: 366: {
  9321                           ;io.c: 367: Button_Contact_Counter_RB--;
  9322  001AD6  062F               	decf	_Button_Contact_Counter_RB,f,c
  9323                           
  9324                           ;io.c: 369: }
  9325                           
  9326                           ;io.c: 368: break;
  9327  001AD8  D04A               	goto	l938
  9328  001ADA                     l935:
  9329                           
  9330                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  9331  001ADA  0E00               	movlw	0
  9332  001ADC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9333  001ADE  0E25               	movlw	37
  9334  001AE0  6E19               	movwf	SETxAPIxVAL@index,c
  9335  001AE2  0E00               	movlw	0
  9336  001AE4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9337  001AE6  0E00               	movlw	0
  9338  001AE8  6E1B               	movwf	SETxAPIxVAL@value,c
  9339  001AEA  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9340                           
  9341                           ;io.c: 374: }
  9342                           
  9343                           ;io.c: 373: default : break;
  9344                           
  9345                           ;io.c: 371: break;
  9346  001AEE  D03F               	goto	l938
  9347  001AF0                     l929:
  9348  001AF0  B681               	btfsc	3969,3,c	;volatile
  9349  001AF2  D002               	goto	u7480
  9350  001AF4  0E01               	movlw	1
  9351  001AF6  D001               	goto	u7490
  9352  001AF8                     u7480:
  9353  001AF8  0E00               	movlw	0
  9354  001AFA                     u7490:
  9355  001AFA  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9356  001AFC  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9357                           
  9358                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9359                           ; Switch size 1, requested type "space"
  9360                           ; Number of cases is 1, Range of values is 0 to 0
  9361                           ; switch strategies available:
  9362                           ; Name         Instructions Cycles
  9363                           ; simple_byte            4     3 (average)
  9364                           ;	Chosen strategy is simple_byte
  9365  001AFE  5020               	movf	??_Debounce_Inputs+1,w,c
  9366  001B00  0A00               	xorlw	0	; case 0
  9367  001B02  A4D8               	btfss	status,2,c
  9368  001B04  D034               	goto	l938
  9369                           
  9370                           ; Switch size 1, requested type "space"
  9371                           ; Number of cases is 2, Range of values is 0 to 1
  9372                           ; switch strategies available:
  9373                           ; Name         Instructions Cycles
  9374                           ; simple_byte            7     4 (average)
  9375                           ;	Chosen strategy is simple_byte
  9376  001B06  501F               	movf	??_Debounce_Inputs,w,c
  9377  001B08  0A00               	xorlw	0	; case 0
  9378  001B0A  B4D8               	btfsc	status,2,c
  9379  001B0C  D7E1               	goto	l934
  9380  001B0E  0A01               	xorlw	1	; case 1
  9381  001B10  B4D8               	btfsc	status,2,c
  9382  001B12  D7C2               	goto	l930
  9383                           
  9384                           ;io.c: 377: switch(!PORTBbits.RB2)
  9385  001B14  D02C               	goto	l938
  9386  001B16  502E               	movf	_Button_Contact_Counter_RF,w,c
  9387  001B18  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9388  001B1A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9389  001B1C  0E00               	movlw	0
  9390  001B1E  6E14               	movwf	GETxAPIxVAL@index+1,c
  9391  001B20  0E1B               	movlw	27
  9392  001B22  6E13               	movwf	GETxAPIxVAL@index,c
  9393  001B24  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9394  001B28  501F               	movf	??_Debounce_Inputs,w,c
  9395  001B2A  5C13               	subwf	?_GETxAPIxVAL,w,c
  9396  001B2C  5020               	movf	??_Debounce_Inputs+1,w,c
  9397  001B2E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9398  001B30  A0D8               	btfss	status,0,c
  9399  001B32  D002               	goto	l940
  9400                           
  9401                           ;io.c: 380: {
  9402                           ;io.c: 381: Button_Contact_Counter_RF++;
  9403  001B34  2A2E               	incf	_Button_Contact_Counter_RF,f,c
  9404                           
  9405                           ;io.c: 383: }
  9406                           
  9407                           ;io.c: 382: break;
  9408  001B36  D05A               	goto	l947
  9409  001B38                     l940:
  9410                           
  9411                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  9412  001B38  0E00               	movlw	0
  9413  001B3A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9414  001B3C  0E26               	movlw	38
  9415  001B3E  6E19               	movwf	SETxAPIxVAL@index,c
  9416  001B40  0E00               	movlw	0
  9417  001B42  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9418  001B44  0E01               	movlw	1
  9419  001B46  6E1B               	movwf	SETxAPIxVAL@value,c
  9420  001B48  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9421                           
  9422                           ;io.c: 385: break;
  9423  001B4C  D04F               	goto	l947
  9424  001B4E  502E               	movf	_Button_Contact_Counter_RF,w,c
  9425  001B50  B4D8               	btfsc	status,2,c
  9426  001B52  D002               	goto	l944
  9427                           
  9428                           ;io.c: 388: {
  9429                           ;io.c: 389: Button_Contact_Counter_RF--;
  9430  001B54  062E               	decf	_Button_Contact_Counter_RF,f,c
  9431                           
  9432                           ;io.c: 391: }
  9433                           
  9434                           ;io.c: 390: break;
  9435  001B56  D04A               	goto	l947
  9436  001B58                     l944:
  9437                           
  9438                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  9439  001B58  0E00               	movlw	0
  9440  001B5A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9441  001B5C  0E26               	movlw	38
  9442  001B5E  6E19               	movwf	SETxAPIxVAL@index,c
  9443  001B60  0E00               	movlw	0
  9444  001B62  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9445  001B64  0E00               	movlw	0
  9446  001B66  6E1B               	movwf	SETxAPIxVAL@value,c
  9447  001B68  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9448                           
  9449                           ;io.c: 396: }
  9450                           
  9451                           ;io.c: 395: default : break;
  9452                           
  9453                           ;io.c: 393: break;
  9454  001B6C  D03F               	goto	l947
  9455  001B6E                     l938:
  9456  001B6E  B481               	btfsc	3969,2,c	;volatile
  9457  001B70  D002               	goto	u7520
  9458  001B72  0E01               	movlw	1
  9459  001B74  D001               	goto	u7530
  9460  001B76                     u7520:
  9461  001B76  0E00               	movlw	0
  9462  001B78                     u7530:
  9463  001B78  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9464  001B7A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9465                           
  9466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9467                           ; Switch size 1, requested type "space"
  9468                           ; Number of cases is 1, Range of values is 0 to 0
  9469                           ; switch strategies available:
  9470                           ; Name         Instructions Cycles
  9471                           ; simple_byte            4     3 (average)
  9472                           ;	Chosen strategy is simple_byte
  9473  001B7C  5020               	movf	??_Debounce_Inputs+1,w,c
  9474  001B7E  0A00               	xorlw	0	; case 0
  9475  001B80  A4D8               	btfss	status,2,c
  9476  001B82  D034               	goto	l947
  9477                           
  9478                           ; Switch size 1, requested type "space"
  9479                           ; Number of cases is 2, Range of values is 0 to 1
  9480                           ; switch strategies available:
  9481                           ; Name         Instructions Cycles
  9482                           ; simple_byte            7     4 (average)
  9483                           ;	Chosen strategy is simple_byte
  9484  001B84  501F               	movf	??_Debounce_Inputs,w,c
  9485  001B86  0A00               	xorlw	0	; case 0
  9486  001B88  B4D8               	btfsc	status,2,c
  9487  001B8A  D7E1               	goto	l943
  9488  001B8C  0A01               	xorlw	1	; case 1
  9489  001B8E  B4D8               	btfsc	status,2,c
  9490  001B90  D7C2               	goto	l939
  9491                           
  9492                           ;io.c: 399: switch(PORTCbits.RC1)
  9493  001B92  D02C               	goto	l947
  9494  001B94  5038               	movf	_Reed_Contact_LMU_Counter,w,c
  9495  001B96  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9496  001B98  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9497  001B9A  0E00               	movlw	0
  9498  001B9C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9499  001B9E  0E1B               	movlw	27
  9500  001BA0  6E13               	movwf	GETxAPIxVAL@index,c
  9501  001BA2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9502  001BA6  501F               	movf	??_Debounce_Inputs,w,c
  9503  001BA8  5C13               	subwf	?_GETxAPIxVAL,w,c
  9504  001BAA  5020               	movf	??_Debounce_Inputs+1,w,c
  9505  001BAC  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9506  001BAE  A0D8               	btfss	status,0,c
  9507  001BB0  D002               	goto	l949
  9508                           
  9509                           ;io.c: 402: {
  9510                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  9511  001BB2  2A38               	incf	_Reed_Contact_LMU_Counter,f,c
  9512                           
  9513                           ;io.c: 405: }
  9514                           
  9515                           ;io.c: 404: break;
  9516  001BB4  D053               	goto	l956
  9517  001BB6                     l949:
  9518                           
  9519                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  9520  001BB6  0E00               	movlw	0
  9521  001BB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9522  001BBA  0E29               	movlw	41
  9523  001BBC  6E19               	movwf	SETxAPIxVAL@index,c
  9524  001BBE  0E00               	movlw	0
  9525  001BC0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9526  001BC2  0E01               	movlw	1
  9527  001BC4  6E1B               	movwf	SETxAPIxVAL@value,c
  9528  001BC6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9529                           
  9530                           ;io.c: 407: break;
  9531  001BCA  D048               	goto	l956
  9532  001BCC  5038               	movf	_Reed_Contact_LMU_Counter,w,c
  9533  001BCE  B4D8               	btfsc	status,2,c
  9534  001BD0  D002               	goto	l953
  9535                           
  9536                           ;io.c: 410: {
  9537                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  9538  001BD2  0638               	decf	_Reed_Contact_LMU_Counter,f,c
  9539                           
  9540                           ;io.c: 413: }
  9541                           
  9542                           ;io.c: 412: break;
  9543  001BD4  D043               	goto	l956
  9544  001BD6                     l953:
  9545                           
  9546                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  9547  001BD6  0E00               	movlw	0
  9548  001BD8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9549  001BDA  0E29               	movlw	41
  9550  001BDC  6E19               	movwf	SETxAPIxVAL@index,c
  9551  001BDE  0E00               	movlw	0
  9552  001BE0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9553  001BE2  0E00               	movlw	0
  9554  001BE4  6E1B               	movwf	SETxAPIxVAL@value,c
  9555  001BE6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9556                           
  9557                           ;io.c: 418: }
  9558                           
  9559                           ;io.c: 417: default : break;
  9560                           
  9561                           ;io.c: 415: break;
  9562  001BEA  D038               	goto	l956
  9563  001BEC                     l947:
  9564  001BEC  A282               	btfss	3970,1,c	;volatile
  9565  001BEE  D002               	goto	u7560
  9566  001BF0  0E01               	movlw	1
  9567  001BF2  D001               	goto	u7566
  9568  001BF4                     u7560:
  9569  001BF4  0E00               	movlw	0
  9570  001BF6                     u7566:
  9571                           
  9572                           ; Switch size 1, requested type "space"
  9573                           ; Number of cases is 2, Range of values is 0 to 1
  9574                           ; switch strategies available:
  9575                           ; Name         Instructions Cycles
  9576                           ; simple_byte            7     4 (average)
  9577                           ;	Chosen strategy is simple_byte
  9578  001BF6  0A00               	xorlw	0	; case 0
  9579  001BF8  B4D8               	btfsc	status,2,c
  9580  001BFA  D7CC               	goto	l948
  9581  001BFC  0A01               	xorlw	1	; case 1
  9582  001BFE  B4D8               	btfsc	status,2,c
  9583  001C00  D7E5               	goto	l952
  9584                           
  9585                           ;io.c: 421: switch(PORTDbits.RD4)
  9586  001C02  D02C               	goto	l956
  9587  001C04  5037               	movf	_Reed_Contact_LMD_Counter,w,c
  9588  001C06  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9589  001C08  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9590  001C0A  0E00               	movlw	0
  9591  001C0C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9592  001C0E  0E1B               	movlw	27
  9593  001C10  6E13               	movwf	GETxAPIxVAL@index,c
  9594  001C12  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9595  001C16  501F               	movf	??_Debounce_Inputs,w,c
  9596  001C18  5C13               	subwf	?_GETxAPIxVAL,w,c
  9597  001C1A  5020               	movf	??_Debounce_Inputs+1,w,c
  9598  001C1C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9599  001C1E  A0D8               	btfss	status,0,c
  9600  001C20  D002               	goto	l958
  9601                           
  9602                           ;io.c: 424: {
  9603                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  9604  001C22  2A37               	incf	_Reed_Contact_LMD_Counter,f,c
  9605                           
  9606                           ;io.c: 427: }
  9607                           
  9608                           ;io.c: 426: break;
  9609  001C24  D053               	goto	l965
  9610  001C26                     l958:
  9611                           
  9612                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  9613  001C26  0E00               	movlw	0
  9614  001C28  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9615  001C2A  0E2A               	movlw	42
  9616  001C2C  6E19               	movwf	SETxAPIxVAL@index,c
  9617  001C2E  0E00               	movlw	0
  9618  001C30  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9619  001C32  0E01               	movlw	1
  9620  001C34  6E1B               	movwf	SETxAPIxVAL@value,c
  9621  001C36  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9622                           
  9623                           ;io.c: 429: break;
  9624  001C3A  D048               	goto	l965
  9625  001C3C  5037               	movf	_Reed_Contact_LMD_Counter,w,c
  9626  001C3E  B4D8               	btfsc	status,2,c
  9627  001C40  D002               	goto	l962
  9628                           
  9629                           ;io.c: 432: {
  9630                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  9631  001C42  0637               	decf	_Reed_Contact_LMD_Counter,f,c
  9632                           
  9633                           ;io.c: 435: }
  9634                           
  9635                           ;io.c: 434: break;
  9636  001C44  D043               	goto	l965
  9637  001C46                     l962:
  9638                           
  9639                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9640  001C46  0E00               	movlw	0
  9641  001C48  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9642  001C4A  0E2A               	movlw	42
  9643  001C4C  6E19               	movwf	SETxAPIxVAL@index,c
  9644  001C4E  0E00               	movlw	0
  9645  001C50  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9646  001C52  0E00               	movlw	0
  9647  001C54  6E1B               	movwf	SETxAPIxVAL@value,c
  9648  001C56  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9649                           
  9650                           ;io.c: 440: }
  9651                           
  9652                           ;io.c: 439: default : break;
  9653                           
  9654                           ;io.c: 437: break;
  9655  001C5A  D038               	goto	l965
  9656  001C5C                     l956:
  9657  001C5C  A883               	btfss	3971,4,c	;volatile
  9658  001C5E  D002               	goto	u7590
  9659  001C60  0E01               	movlw	1
  9660  001C62  D001               	goto	u7596
  9661  001C64                     u7590:
  9662  001C64  0E00               	movlw	0
  9663  001C66                     u7596:
  9664                           
  9665                           ; Switch size 1, requested type "space"
  9666                           ; Number of cases is 2, Range of values is 0 to 1
  9667                           ; switch strategies available:
  9668                           ; Name         Instructions Cycles
  9669                           ; simple_byte            7     4 (average)
  9670                           ;	Chosen strategy is simple_byte
  9671  001C66  0A00               	xorlw	0	; case 0
  9672  001C68  B4D8               	btfsc	status,2,c
  9673  001C6A  D7CC               	goto	l957
  9674  001C6C  0A01               	xorlw	1	; case 1
  9675  001C6E  B4D8               	btfsc	status,2,c
  9676  001C70  D7E5               	goto	l961
  9677                           
  9678                           ;io.c: 443: switch(PORTEbits.RE1)
  9679  001C72  D02C               	goto	l965
  9680  001C74  5036               	movf	_Reed_Contact_RMU_Counter,w,c
  9681  001C76  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9682  001C78  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9683  001C7A  0E00               	movlw	0
  9684  001C7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9685  001C7E  0E1B               	movlw	27
  9686  001C80  6E13               	movwf	GETxAPIxVAL@index,c
  9687  001C82  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9688  001C86  501F               	movf	??_Debounce_Inputs,w,c
  9689  001C88  5C13               	subwf	?_GETxAPIxVAL,w,c
  9690  001C8A  5020               	movf	??_Debounce_Inputs+1,w,c
  9691  001C8C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9692  001C8E  A0D8               	btfss	status,0,c
  9693  001C90  D002               	goto	l967
  9694                           
  9695                           ;io.c: 446: {
  9696                           ;io.c: 447: Reed_Contact_RMU_Counter++;
  9697  001C92  2A36               	incf	_Reed_Contact_RMU_Counter,f,c
  9698                           
  9699                           ;io.c: 449: }
  9700                           
  9701                           ;io.c: 448: break;
  9702  001C94  D053               	goto	l974
  9703  001C96                     l967:
  9704                           
  9705                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
  9706  001C96  0E00               	movlw	0
  9707  001C98  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9708  001C9A  0E2B               	movlw	43
  9709  001C9C  6E19               	movwf	SETxAPIxVAL@index,c
  9710  001C9E  0E00               	movlw	0
  9711  001CA0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9712  001CA2  0E01               	movlw	1
  9713  001CA4  6E1B               	movwf	SETxAPIxVAL@value,c
  9714  001CA6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9715                           
  9716                           ;io.c: 451: break;
  9717  001CAA  D048               	goto	l974
  9718  001CAC  5036               	movf	_Reed_Contact_RMU_Counter,w,c
  9719  001CAE  B4D8               	btfsc	status,2,c
  9720  001CB0  D002               	goto	l971
  9721                           
  9722                           ;io.c: 454: {
  9723                           ;io.c: 455: Reed_Contact_RMU_Counter--;
  9724  001CB2  0636               	decf	_Reed_Contact_RMU_Counter,f,c
  9725                           
  9726                           ;io.c: 457: }
  9727                           
  9728                           ;io.c: 456: break;
  9729  001CB4  D043               	goto	l974
  9730  001CB6                     l971:
  9731                           
  9732                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
  9733  001CB6  0E00               	movlw	0
  9734  001CB8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9735  001CBA  0E2B               	movlw	43
  9736  001CBC  6E19               	movwf	SETxAPIxVAL@index,c
  9737  001CBE  0E00               	movlw	0
  9738  001CC0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9739  001CC2  0E00               	movlw	0
  9740  001CC4  6E1B               	movwf	SETxAPIxVAL@value,c
  9741  001CC6  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9742                           
  9743                           ;io.c: 462: }
  9744                           
  9745                           ;io.c: 461: default : break;
  9746                           
  9747                           ;io.c: 459: break;
  9748  001CCA  D038               	goto	l974
  9749  001CCC                     l965:
  9750  001CCC  A284               	btfss	3972,1,c	;volatile
  9751  001CCE  D002               	goto	u7620
  9752  001CD0  0E01               	movlw	1
  9753  001CD2  D001               	goto	u7626
  9754  001CD4                     u7620:
  9755  001CD4  0E00               	movlw	0
  9756  001CD6                     u7626:
  9757                           
  9758                           ; Switch size 1, requested type "space"
  9759                           ; Number of cases is 2, Range of values is 0 to 1
  9760                           ; switch strategies available:
  9761                           ; Name         Instructions Cycles
  9762                           ; simple_byte            7     4 (average)
  9763                           ;	Chosen strategy is simple_byte
  9764  001CD6  0A00               	xorlw	0	; case 0
  9765  001CD8  B4D8               	btfsc	status,2,c
  9766  001CDA  D7CC               	goto	l966
  9767  001CDC  0A01               	xorlw	1	; case 1
  9768  001CDE  B4D8               	btfsc	status,2,c
  9769  001CE0  D7E5               	goto	l970
  9770                           
  9771                           ;io.c: 465: switch(PORTEbits.RE0)
  9772  001CE2  D02C               	goto	l974
  9773  001CE4  5035               	movf	_Reed_Contact_RMD_Counter,w,c
  9774  001CE6  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9775  001CE8  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9776  001CEA  0E00               	movlw	0
  9777  001CEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  9778  001CEE  0E1B               	movlw	27
  9779  001CF0  6E13               	movwf	GETxAPIxVAL@index,c
  9780  001CF2  EC44  F021         	call	_GETxAPIxVAL	;wreg free
  9781  001CF6  501F               	movf	??_Debounce_Inputs,w,c
  9782  001CF8  5C13               	subwf	?_GETxAPIxVAL,w,c
  9783  001CFA  5020               	movf	??_Debounce_Inputs+1,w,c
  9784  001CFC  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9785  001CFE  A0D8               	btfss	status,0,c
  9786  001D00  D002               	goto	l976
  9787                           
  9788                           ;io.c: 468: {
  9789                           ;io.c: 469: Reed_Contact_RMD_Counter++;
  9790  001D02  2A35               	incf	_Reed_Contact_RMD_Counter,f,c
  9791                           
  9792                           ;io.c: 471: }
  9793                           
  9794                           ;io.c: 470: break;
  9795  001D04  0012               	return	
  9796  001D06                     l976:
  9797                           
  9798                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
  9799  001D06  0E00               	movlw	0
  9800  001D08  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9801  001D0A  0E2C               	movlw	44
  9802  001D0C  6E19               	movwf	SETxAPIxVAL@index,c
  9803  001D0E  0E00               	movlw	0
  9804  001D10  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9805  001D12  0E01               	movlw	1
  9806  001D14  6E1B               	movwf	SETxAPIxVAL@value,c
  9807  001D16  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9808                           
  9809                           ;io.c: 473: break;
  9810  001D1A  0012               	return	
  9811  001D1C  5035               	movf	_Reed_Contact_RMD_Counter,w,c
  9812  001D1E  B4D8               	btfsc	status,2,c
  9813  001D20  D002               	goto	l980
  9814                           
  9815                           ;io.c: 476: {
  9816                           ;io.c: 477: Reed_Contact_RMD_Counter--;
  9817  001D22  0635               	decf	_Reed_Contact_RMD_Counter,f,c
  9818                           
  9819                           ;io.c: 479: }
  9820                           
  9821                           ;io.c: 478: break;
  9822  001D24  0012               	return	
  9823  001D26                     l980:
  9824                           
  9825                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
  9826  001D26  0E00               	movlw	0
  9827  001D28  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9828  001D2A  0E2C               	movlw	44
  9829  001D2C  6E19               	movwf	SETxAPIxVAL@index,c
  9830  001D2E  0E00               	movlw	0
  9831  001D30  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9832  001D32  0E00               	movlw	0
  9833  001D34  6E1B               	movwf	SETxAPIxVAL@value,c
  9834  001D36  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
  9835                           
  9836                           ;io.c: 484: }
  9837                           
  9838                           ;io.c: 483: default : break;
  9839                           
  9840                           ;io.c: 481: break;
  9841  001D3A  0012               	return	
  9842  001D3C                     l974:
  9843  001D3C  A084               	btfss	3972,0,c	;volatile
  9844  001D3E  D002               	goto	u7650
  9845  001D40  0E01               	movlw	1
  9846  001D42  D001               	goto	u7656
  9847  001D44                     u7650:
  9848  001D44  0E00               	movlw	0
  9849  001D46                     u7656:
  9850                           
  9851                           ; Switch size 1, requested type "space"
  9852                           ; Number of cases is 2, Range of values is 0 to 1
  9853                           ; switch strategies available:
  9854                           ; Name         Instructions Cycles
  9855                           ; simple_byte            7     4 (average)
  9856                           ;	Chosen strategy is simple_byte
  9857  001D46  0A00               	xorlw	0	; case 0
  9858  001D48  B4D8               	btfsc	status,2,c
  9859  001D4A  D7CC               	goto	l975
  9860  001D4C  0A01               	xorlw	1	; case 1
  9861  001D4E  A4D8               	btfss	status,2,c
  9862  001D50  0012               	return	
  9863  001D52  D7E4               	goto	l979
  9864  001D54                     __end_of_Debounce_Inputs:
  9865                           	opt stack 0
  9866                           tblptru	equ	0xFF8
  9867                           tblptrh	equ	0xFF7
  9868                           tblptrl	equ	0xFF6
  9869                           tablat	equ	0xFF5
  9870                           intcon	equ	0xFF2
  9871                           postinc0	equ	0xFEE
  9872                           wreg	equ	0xFE8
  9873                           postinc1	equ	0xFE6
  9874                           postdec1	equ	0xFE5
  9875                           fsr1h	equ	0xFE2
  9876                           fsr1l	equ	0xFE1
  9877                           postinc2	equ	0xFDE
  9878                           postdec2	equ	0xFDD
  9879                           fsr2h	equ	0xFDA
  9880                           fsr2l	equ	0xFD9
  9881                           status	equ	0xFD8
  9882                           
  9883 ;; *************** function _SetDCPWM1 *****************
  9884 ;; Defined at:
  9885 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic18\plib\PWM\pw1setdc.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;  dutycycle       2   20[COMRAM] unsigned int 
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;  DCycle          2   24[COMRAM] struct PWMDC
  9890 ;; Return value:  Size  Location     Type
  9891 ;;                  1    wreg      void 
  9892 ;; Registers used:
  9893 ;;		wreg, status,2, status,0
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9899 ;;      Params:         2       0       0       0       0       0       0       0       0
  9900 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9901 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9902 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9903 ;;Total ram usage:        6 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    3
  9906 ;; This function calls:
  9907 ;;		Nothing
  9908 ;; This function is called by:
  9909 ;;		_Debounce_Inputs
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           	psect	text18
  9914  004134                     __ptext18:
  9915                           	opt stack 0
  9916  004134                     _SetDCPWM1:
  9917                           	opt stack 25
  9918                           
  9919                           ;incstack = 0
  9920  004134  C015  F017         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9921  004138  C016  F018         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9922  00413C  0E06               	movlw	6
  9923  00413E                     u3975:
  9924  00413E  90D8               	bcf	status,0,c
  9925  004140  3617               	rlcf	??_SetDCPWM1,f,c
  9926  004142  3618               	rlcf	??_SetDCPWM1+1,f,c
  9927  004144  2EE8               	decfsz	wreg,f,c
  9928  004146  D7FB               	goto	u3975
  9929  004148  C017  F019         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9930  00414C  C018  F01A         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  9931  004150  C01A  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  9932  004154  C019  F017         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  9933  004158  90D8               	bcf	status,0,c
  9934  00415A  3217               	rrcf	??_SetDCPWM1,f,c
  9935  00415C  90D8               	bcf	status,0,c
  9936  00415E  3217               	rrcf	??_SetDCPWM1,f,c
  9937  004160  0E30               	movlw	48
  9938  004162  1617               	andwf	??_SetDCPWM1,f,c
  9939  004164  50BD               	movf	4029,w,c	;volatile
  9940  004166  0BCF               	andlw	207
  9941  004168  1017               	iorwf	??_SetDCPWM1,w,c
  9942  00416A  6EBD               	movwf	4029,c	;volatile
  9943  00416C  0012               	return		;funcret
  9944  00416E                     __end_of_SetDCPWM1:
  9945                           	opt stack 0
  9946                           tblptru	equ	0xFF8
  9947                           tblptrh	equ	0xFF7
  9948                           tblptrl	equ	0xFF6
  9949                           tablat	equ	0xFF5
  9950                           intcon	equ	0xFF2
  9951                           postinc0	equ	0xFEE
  9952                           wreg	equ	0xFE8
  9953                           postinc1	equ	0xFE6
  9954                           postdec1	equ	0xFE5
  9955                           fsr1h	equ	0xFE2
  9956                           fsr1l	equ	0xFE1
  9957                           postinc2	equ	0xFDE
  9958                           postdec2	equ	0xFDD
  9959                           fsr2h	equ	0xFDA
  9960                           fsr2l	equ	0xFD9
  9961                           status	equ	0xFD8
  9962                           
  9963 ;; *************** function _READxRECEIVEDxMESSAGE *****************
  9964 ;; Defined at:
  9965 ;;		line 39 in file "../terminal.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      void 
  9972 ;; Registers used:
  9973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9981 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9982 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9983 ;;Total ram usage:        4 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    6
  9986 ;; This function calls:
  9987 ;;		_EUSART1_Read
  9988 ;;		_TranslateMessage
  9989 ;;		_printf
  9990 ;; This function is called by:
  9991 ;;		_main
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           	psect	text19
  9996  003746                     __ptext19:
  9997                           	opt stack 0
  9998  003746                     _READxRECEIVEDxMESSAGE:
  9999                           	opt stack 24
 10000                           
 10001                           ;terminal.c: 41: if ((eusart1RxCount) > 0){
 10002                           
 10003                           ;incstack = 0
 10004  003746  503D               	movf	_eusart1RxCount,w,c	;volatile
 10005  003748  B4D8               	btfsc	status,2,c
 10006  00374A  D07B               	goto	l604
 10007                           
 10008                           ;terminal.c: 44: Received_Data = EUSART1_Read();
 10009  00374C  ECB7  F020         	call	_EUSART1_Read	;wreg free
 10010  003750  0100               	movlb	0	; () banked
 10011  003752  6F86               	movwf	_Received_Data& (0+255),b
 10012                           
 10013                           ;terminal.c: 46: switch (RxSwitch){
 10014  003754  D06B               	goto	l598
 10015  003756                     
 10016                           ; BSR set to: 0
 10017                           ;terminal.c: 48: pData = &Data[0];
 10018                           
 10019                           ; BSR set to: 0
 10020  003756  0EAC               	movlw	low _Data
 10021  003758  6F78               	movwf	_pData& (0+255),b
 10022  00375A  0E00               	movlw	high _Data
 10023  00375C  6F79               	movwf	(_pData+1)& (0+255),b
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;terminal.c: 49: pLen = &Data[DataLen - 1];
 10027  00375E  0EFF               	movlw	255
 10028  003760  6FD8               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
 10029  003762  0EFF               	movlw	255
 10030  003764  6FD9               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
 10031  003766  0E43               	movlw	low _DataLen
 10032  003768  6EF6               	movwf	tblptrl,c
 10033  00376A                     	if	1	;There is more than 1 active tblptr byte
 10034  00376A  0E08               	movlw	high _DataLen
 10035  00376C  6EF7               	movwf	tblptrh,c
 10036  00376E                     	endif
 10037  00376E                     	if	0	;There are less than 3 active tblptr bytes
 10038  00376E                     	endif
 10039  00376E  0008               	tblrd		*
 10040  003770  50F5               	movf	tablat,w,c
 10041  003772  6FDA               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
 10042  003774  6BDB               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
 10043  003776  51D8               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
 10044  003778  27DA               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
 10045  00377A  51D9               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
 10046  00377C  23DB               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
 10047  00377E  0EAC               	movlw	low _Data
 10048  003780  25DA               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
 10049  003782  6F76               	movwf	_pLen& (0+255),b
 10050  003784  0E00               	movlw	high _Data
 10051  003786  21DB               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
 10052  003788  6F77               	movwf	(_pLen+1)& (0+255),b
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;terminal.c: 50: if (Received_Data == 's' || Received_Data == 'g'){
 10056  00378A  0E73               	movlw	115
 10057  00378C  1986               	xorwf	_Received_Data& (0+255),w,b
 10058  00378E  B4D8               	btfsc	status,2,c
 10059  003790  D004               	goto	u9070
 10060                           
 10061                           ; BSR set to: 0
 10062  003792  0E67               	movlw	103
 10063  003794  1986               	xorwf	_Received_Data& (0+255),w,b
 10064  003796  A4D8               	btfss	status,2,c
 10065  003798  D00A               	goto	l600
 10066  00379A                     u9070:
 10067                           
 10068                           ; BSR set to: 0
 10069                           ;terminal.c: 51: *pData = Received_Data;
 10070                           
 10071                           ; BSR set to: 0
 10072  00379A  C078  FFD9         	movff	_pData,fsr2l
 10073  00379E  C079  FFDA         	movff	_pData+1,fsr2h
 10074  0037A2  C086  FFDF         	movff	_Received_Data,indf2
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;terminal.c: 52: *pData++;
 10078  0037A6  4B78               	infsnz	_pData& (0+255),f,b
 10079  0037A8  2B79               	incf	(_pData+1)& (0+255),f,b
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;terminal.c: 53: RxSwitch = 1;
 10083  0037AA  0E01               	movlw	1
 10084  0037AC  D03D               	goto	L94
 10085  0037AE                     l600:
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;terminal.c: 55: else{
 10089                           ;terminal.c: 56: RxSwitch = 0;
 10090                           
 10091                           ; BSR set to: 0
 10092  0037AE  0E00               	movlw	0
 10093  0037B0  D03B               	goto	L94
 10094  0037B2                     
 10095                           ; BSR set to: 0
 10096                           ;terminal.c: 61: if (Received_Data == 'x'){
 10097                           
 10098                           ; BSR set to: 0
 10099  0037B2  0E78               	movlw	120
 10100  0037B4  1986               	xorwf	_Received_Data& (0+255),w,b
 10101  0037B6  A4D8               	btfss	status,2,c
 10102  0037B8  D7FA               	goto	l600
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;terminal.c: 62: *pData = Received_Data;
 10106  0037BA  C078  FFD9         	movff	_pData,fsr2l
 10107  0037BE  C079  FFDA         	movff	_pData+1,fsr2h
 10108  0037C2  C086  FFDF         	movff	_Received_Data,indf2
 10109  0037C6  D02D               	goto	l614
 10110  0037C8                     
 10111                           ; BSR set to: 0
 10112                           ;terminal.c: 72: if (Received_Data == 'G'){
 10113                           
 10114                           ; BSR set to: 0
 10115  0037C8  0E47               	movlw	71
 10116  0037CA  1986               	xorwf	_Received_Data& (0+255),w,b
 10117  0037CC  B4D8               	btfsc	status,2,c
 10118  0037CE  D009               	goto	l610
 10119  0037D0  D013               	goto	l609
 10120  0037D2                     
 10121                           ; BSR set to: 0
 10122                           ;terminal.c: 76: *pData = '\0';
 10123                           
 10124                           ; BSR set to: 0
 10125  0037D2  C078  FFD9         	movff	_pData,fsr2l
 10126  0037D6  C079  FFDA         	movff	_pData+1,fsr2h
 10127  0037DA  0E00               	movlw	0
 10128  0037DC  6EDF               	movwf	indf2,c
 10129                           
 10130                           ; BSR set to: 0
 10131                           ;terminal.c: 77: pData++;
 10132  0037DE  4B78               	infsnz	_pData& (0+255),f,b
 10133  0037E0  2B79               	incf	(_pData+1)& (0+255),f,b
 10134  0037E2                     l610:
 10135                           
 10136                           ; BSR set to: 0
 10137                           
 10138                           ; BSR set to: 0
 10139  0037E2  5176               	movf	_pLen& (0+255),w,b
 10140  0037E4  5D78               	subwf	_pData& (0+255),w,b
 10141  0037E6  5177               	movf	(_pLen+1)& (0+255),w,b
 10142  0037E8  5979               	subwfb	(_pData+1)& (0+255),w,b
 10143  0037EA  A0D8               	btfss	status,0,c
 10144  0037EC  D7F2               	goto	l611
 10145                           
 10146                           ; BSR set to: 0
 10147                           ;terminal.c: 78: }
 10148                           ;terminal.c: 80: RxSwitch = 3;
 10149                           
 10150                           ; BSR set to: 0
 10151  0037EE  0E03               	movlw	3
 10152  0037F0  6F85               	movwf	_RxSwitch& (0+255),b
 10153                           
 10154                           ;terminal.c: 81: Message_To_Translate = 1;
 10155  0037F2  0E01               	movlw	1
 10156  0037F4  6F84               	movwf	_Message_To_Translate& (0+255),b
 10157                           
 10158                           ;terminal.c: 82: }
 10159  0037F6  D025               	goto	l604
 10160  0037F8                     l609:
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;terminal.c: 83: else{
 10164                           ;terminal.c: 84: *pData = Received_Data;
 10165                           
 10166                           ; BSR set to: 0
 10167  0037F8  C078  FFD9         	movff	_pData,fsr2l
 10168  0037FC  C079  FFDA         	movff	_pData+1,fsr2h
 10169  003800  C086  FFDF         	movff	_Received_Data,indf2
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;terminal.c: 85: if (pData > pLen){
 10173  003804  5178               	movf	_pData& (0+255),w,b
 10174  003806  5D76               	subwf	_pLen& (0+255),w,b
 10175  003808  5179               	movf	(_pData+1)& (0+255),w,b
 10176  00380A  5977               	subwfb	(_pLen+1)& (0+255),w,b
 10177  00380C  B0D8               	btfsc	status,0,c
 10178  00380E  D009               	goto	l614
 10179                           
 10180                           ; BSR set to: 0
 10181                           ;terminal.c: 86: printf("E#10\r\n");
 10182  003810  0E4E               	movlw	low STR_1
 10183  003812  6FCB               	movwf	printf@f& (0+255),b
 10184  003814  0E08               	movlw	high STR_1
 10185  003816  6FCC               	movwf	(printf@f+1)& (0+255),b
 10186  003818  ECFA  F019         	call	_printf	;wreg free
 10187                           
 10188                           ;terminal.c: 87: RxSwitch = 0;
 10189  00381C  0E00               	movlw	0
 10190  00381E  0100               	movlb	0	; () banked
 10191  003820  D003               	goto	L94
 10192  003822                     l614:
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;terminal.c: 89: else{
 10196                           ;terminal.c: 90: pData++;
 10197                           
 10198                           ; BSR set to: 0
 10199  003822  4B78               	infsnz	_pData& (0+255),f,b
 10200  003824  2B79               	incf	(_pData+1)& (0+255),f,b
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;terminal.c: 91: RxSwitch = 2;
 10204  003826  0E02               	movlw	2
 10205  003828                     L94:
 10206  003828  6F85               	movwf	_RxSwitch& (0+255),b
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;terminal.c: 101: }
 10210                           
 10211                           ; BSR set to: 0
 10212                           ;terminal.c: 100: break;
 10213                           
 10214                           ;terminal.c: 99: default :
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;terminal.c: 97: break;
 10218                           
 10219                           ;terminal.c: 96: case 3 :
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;terminal.c: 92: }
 10223                           ;terminal.c: 93: }
 10224                           ;terminal.c: 94: break;
 10225                           
 10226                           ; BSR set to: 0
 10227  00382A  D00B               	goto	l604
 10228  00382C                     l598:
 10229                           
 10230                           ; BSR set to: 0
 10231                           
 10232                           ; BSR set to: 0
 10233  00382C  5185               	movf	_RxSwitch& (0+255),w,b
 10234                           
 10235                           ; Switch size 1, requested type "space"
 10236                           ; Number of cases is 4, Range of values is 0 to 3
 10237                           ; switch strategies available:
 10238                           ; Name         Instructions Cycles
 10239                           ; simple_byte           13     7 (average)
 10240                           ;	Chosen strategy is simple_byte
 10241  00382E  0A00               	xorlw	0	; case 0
 10242  003830  B4D8               	btfsc	status,2,c
 10243  003832  D791               	goto	l599
 10244  003834  0A01               	xorlw	1	; case 1
 10245  003836  B4D8               	btfsc	status,2,c
 10246  003838  D7BC               	goto	l605
 10247  00383A  0A03               	xorlw	3	; case 2
 10248  00383C  B4D8               	btfsc	status,2,c
 10249  00383E  D7C4               	goto	l608
 10250  003840  0A01               	xorlw	1	; case 3
 10251  003842                     l604:
 10252                           
 10253                           ;terminal.c: 102: }
 10254                           ;terminal.c: 104: if (Message_To_Translate == 1){
 10255                           
 10256                           ; BSR set to: 0
 10257                           
 10258                           ; BSR set to: 0
 10259  003842  0100               	movlb	0	; () banked
 10260  003844  0584               	decf	_Message_To_Translate& (0+255),w,b
 10261  003846  A4D8               	btfss	status,2,c
 10262  003848  0012               	return	
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;terminal.c: 105: TranslateMessage();
 10266  00384A  EC35  F016         	call	_TranslateMessage	;wreg free
 10267                           
 10268                           ;terminal.c: 106: Message_To_Translate = 0;
 10269  00384E  0E00               	movlw	0
 10270  003850  0100               	movlb	0	; () banked
 10271  003852  6F84               	movwf	_Message_To_Translate& (0+255),b
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;terminal.c: 107: RxSwitch = 0;
 10275  003854  0E00               	movlw	0
 10276  003856  6F85               	movwf	_RxSwitch& (0+255),b
 10277  003858  0012               	return	
 10278  00385A                     __end_of_READxRECEIVEDxMESSAGE:
 10279                           	opt stack 0
 10280                           tblptru	equ	0xFF8
 10281                           tblptrh	equ	0xFF7
 10282                           tblptrl	equ	0xFF6
 10283                           tablat	equ	0xFF5
 10284                           intcon	equ	0xFF2
 10285                           postinc0	equ	0xFEE
 10286                           wreg	equ	0xFE8
 10287                           postinc1	equ	0xFE6
 10288                           postdec1	equ	0xFE5
 10289                           fsr1h	equ	0xFE2
 10290                           fsr1l	equ	0xFE1
 10291                           indf2	equ	0xFDF
 10292                           postinc2	equ	0xFDE
 10293                           postdec2	equ	0xFDD
 10294                           fsr2h	equ	0xFDA
 10295                           fsr2l	equ	0xFD9
 10296                           status	equ	0xFD8
 10297                           
 10298 ;; *************** function _TranslateMessage *****************
 10299 ;; Defined at:
 10300 ;;		line 125 in file "../terminal.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;		None
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;  Index           2   33[COMRAM] unsigned int 
 10305 ;;  Value           2   31[COMRAM] unsigned int 
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  1    wreg      void 
 10308 ;; Registers used:
 10309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10315 ;;      Params:         0       0       0       0       0       0       0       0       0
 10316 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10317 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10318 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10319 ;;Total ram usage:        4 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:    5
 10322 ;; This function calls:
 10323 ;;		_GETxAPIxRW
 10324 ;;		_GETxAPIxVAL
 10325 ;;		_SENDxMESSAGE
 10326 ;;		_SETxAPIxVALxNoxRET
 10327 ;;		_atoi
 10328 ;;		_printf
 10329 ;; This function is called by:
 10330 ;;		_READxRECEIVEDxMESSAGE
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           	psect	text20
 10335  002C6A                     __ptext20:
 10336                           	opt stack 0
 10337  002C6A                     _TranslateMessage:
 10338                           	opt stack 24
 10339                           
 10340                           ;terminal.c: 127: unsigned int Value, Index;
 10341                           ;terminal.c: 129: if(Data[0] == 's'){
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;incstack = 0
 10345  002C6A  0E73               	movlw	115
 10346  002C6C  0100               	movlb	0	; () banked
 10347  002C6E  19AC               	xorwf	_Data& (0+255),w,b
 10348  002C70  A4D8               	btfss	status,2,c
 10349  002C72  D063               	goto	l622
 10350                           
 10351                           ; BSR set to: 0
 10352                           ;terminal.c: 131: pData = &Data[2];
 10353  002C74  0EAE               	movlw	low (_Data+2)
 10354  002C76  6F78               	movwf	_pData& (0+255),b
 10355  002C78  0E00               	movlw	high (_Data+2)
 10356  002C7A  6F79               	movwf	(_pData+1)& (0+255),b
 10357                           
 10358                           ; BSR set to: 0
 10359                           ;terminal.c: 132: Index = (unsigned int)atoi (pData);
 10360  002C7C  C078  F019         	movff	_pData,atoi@s
 10361  002C80  C079  F01A         	movff	_pData+1,atoi@s+1
 10362  002C84  ECAE  F01D         	call	_atoi	;wreg free
 10363  002C88  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10364  002C8C  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10365                           
 10366                           ;terminal.c: 133: pData = &Data[5];
 10367  002C90  0EB1               	movlw	low (_Data+5)
 10368  002C92  0100               	movlb	0	; () banked
 10369  002C94  6F78               	movwf	_pData& (0+255),b
 10370  002C96  0E00               	movlw	high (_Data+5)
 10371  002C98  6F79               	movwf	(_pData+1)& (0+255),b
 10372                           
 10373                           ;terminal.c: 134: Value = (unsigned int)atoi (pData);
 10374  002C9A  C078  F019         	movff	_pData,atoi@s
 10375  002C9E  C079  F01A         	movff	_pData+1,atoi@s+1
 10376  002CA2  ECAE  F01D         	call	_atoi	;wreg free
 10377  002CA6  C019  F020         	movff	?_atoi,TranslateMessage@Value
 10378  002CAA  C01A  F021         	movff	?_atoi+1,TranslateMessage@Value+1
 10379                           
 10380                           ;terminal.c: 136: if (GETxAPIxRW(Index) == 0){
 10381  002CAE  C022  F013         	movff	TranslateMessage@Index,GETxAPIxRW@index
 10382  002CB2  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxRW@index+1
 10383  002CB6  EC52  F021         	call	_GETxAPIxRW	;wreg free
 10384  002CBA  5013               	movf	?_GETxAPIxRW,w,c
 10385  002CBC  1014               	iorwf	?_GETxAPIxRW+1,w,c
 10386  002CBE  A4D8               	btfss	status,2,c
 10387  002CC0  D008               	goto	l623
 10388                           
 10389                           ;terminal.c: 137: printf("E#11\r\n");
 10390  002CC2  0E55               	movlw	low STR_2
 10391  002CC4  0100               	movlb	0	; () banked
 10392  002CC6  6FCB               	movwf	printf@f& (0+255),b
 10393  002CC8  0E08               	movlw	high STR_2
 10394  002CCA  6FCC               	movwf	(printf@f+1)& (0+255),b
 10395  002CCC  ECFA  F019         	call	_printf	;wreg free
 10396                           
 10397                           ;terminal.c: 138: }
 10398  002CD0  0012               	return	
 10399  002CD2                     l623:
 10400                           
 10401                           ;terminal.c: 139: else if (Index < 0xF){
 10402  002CD2  5023               	movf	TranslateMessage@Index+1,w,c
 10403  002CD4  E10C               	bnz	l8688
 10404  002CD6  0E0F               	movlw	15
 10405  002CD8  5C22               	subwf	TranslateMessage@Index,w,c
 10406  002CDA  B0D8               	btfsc	status,0,c
 10407  002CDC  D008               	goto	l625
 10408                           
 10409                           ;terminal.c: 140: printf("E#12\r\n");
 10410  002CDE  0E5C               	movlw	low STR_3
 10411  002CE0  0100               	movlb	0	; () banked
 10412  002CE2  6FCB               	movwf	printf@f& (0+255),b
 10413  002CE4  0E08               	movlw	high STR_3
 10414  002CE6  6FCC               	movwf	(printf@f+1)& (0+255),b
 10415  002CE8  ECFA  F019         	call	_printf	;wreg free
 10416                           
 10417                           ;terminal.c: 141: }
 10418  002CEC  0012               	return	
 10419  002CEE                     l625:
 10420  002CEE                     l8688:
 10421                           
 10422                           ;terminal.c: 142: else if (Index > 89){
 10423  002CEE  5023               	movf	TranslateMessage@Index+1,w,c
 10424  002CF0  E104               	bnz	u8160
 10425  002CF2  0E5A               	movlw	90
 10426  002CF4  5C22               	subwf	TranslateMessage@Index,w,c
 10427  002CF6  A0D8               	btfss	status,0,c
 10428  002CF8  D008               	goto	l627
 10429  002CFA                     u8160:
 10430                           
 10431                           ;terminal.c: 143: printf("E#13\r\n");
 10432  002CFA  0E63               	movlw	low STR_4
 10433  002CFC  0100               	movlb	0	; () banked
 10434  002CFE  6FCB               	movwf	printf@f& (0+255),b
 10435  002D00  0E08               	movlw	high STR_4
 10436  002D02  6FCC               	movwf	(printf@f+1)& (0+255),b
 10437  002D04  ECFA  F019         	call	_printf	;wreg free
 10438                           
 10439                           ;terminal.c: 144: }
 10440  002D08  0012               	return	
 10441  002D0A                     l627:
 10442                           
 10443                           ;terminal.c: 145: else if (Value > 0xFFFE){
 10444  002D0A  2820               	incf	TranslateMessage@Value,w,c
 10445  002D0C  E10B               	bnz	l8696
 10446  002D0E  2821               	incf	TranslateMessage@Value+1,w,c
 10447  002D10  A4D8               	btfss	status,2,c
 10448  002D12  D008               	goto	l629
 10449                           
 10450                           ;terminal.c: 146: printf("E#14\r\n");
 10451  002D14  0E6A               	movlw	low STR_5
 10452  002D16  0100               	movlb	0	; () banked
 10453  002D18  6FCB               	movwf	printf@f& (0+255),b
 10454  002D1A  0E08               	movlw	high STR_5
 10455  002D1C  6FCC               	movwf	(printf@f+1)& (0+255),b
 10456  002D1E  ECFA  F019         	call	_printf	;wreg free
 10457                           
 10458                           ;terminal.c: 147: }
 10459  002D22  0012               	return	
 10460  002D24                     l629:
 10461  002D24                     l8696:
 10462                           
 10463                           ;terminal.c: 148: else{
 10464                           ;terminal.c: 149: SETxAPIxVALxNoxRET(Index, Value);
 10465  002D24  C022  F015         	movff	TranslateMessage@Index,SETxAPIxVALxNoxRET@index
 10466  002D28  C023  F016         	movff	TranslateMessage@Index+1,SETxAPIxVALxNoxRET@index+1
 10467  002D2C  C020  F017         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 10468  002D30  C021  F018         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 10469  002D34  EC7C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
 10470                           
 10471                           ;terminal.c: 150: }
 10472                           ;terminal.c: 151: }
 10473  002D38  0012               	return	
 10474  002D3A                     l622:
 10475                           
 10476                           ;terminal.c: 153: else if (Data[0] == 'g'){
 10477  002D3A  0E67               	movlw	103
 10478  002D3C  0100               	movlb	0	; () banked
 10479  002D3E  19AC               	xorwf	_Data& (0+255),w,b
 10480  002D40  A4D8               	btfss	status,2,c
 10481  002D42  0012               	return	
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;terminal.c: 155: pData = &Data[2];
 10485  002D44  0EAE               	movlw	low (_Data+2)
 10486  002D46  6F78               	movwf	_pData& (0+255),b
 10487  002D48  0E00               	movlw	high (_Data+2)
 10488  002D4A  6F79               	movwf	(_pData+1)& (0+255),b
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;terminal.c: 156: Index = (unsigned int)atoi (pData);
 10492  002D4C  C078  F019         	movff	_pData,atoi@s
 10493  002D50  C079  F01A         	movff	_pData+1,atoi@s+1
 10494  002D54  ECAE  F01D         	call	_atoi	;wreg free
 10495  002D58  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10496  002D5C  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10497                           
 10498                           ;terminal.c: 158: if (Index < 0xF){
 10499  002D60  5023               	movf	TranslateMessage@Index+1,w,c
 10500  002D62  E10C               	bnz	l8708
 10501  002D64  0E0F               	movlw	15
 10502  002D66  5C22               	subwf	TranslateMessage@Index,w,c
 10503  002D68  B0D8               	btfsc	status,0,c
 10504  002D6A  D008               	goto	l633
 10505                           
 10506                           ;terminal.c: 159: printf("E#12\r\n");
 10507  002D6C  0E5C               	movlw	low STR_3
 10508  002D6E  0100               	movlb	0	; () banked
 10509  002D70  6FCB               	movwf	printf@f& (0+255),b
 10510  002D72  0E08               	movlw	high STR_3
 10511  002D74  6FCC               	movwf	(printf@f+1)& (0+255),b
 10512  002D76  ECFA  F019         	call	_printf	;wreg free
 10513                           
 10514                           ;terminal.c: 160: }
 10515  002D7A  0012               	return	
 10516  002D7C                     l633:
 10517  002D7C                     l8708:
 10518                           
 10519                           ;terminal.c: 161: else if (Index > 89){
 10520  002D7C  5023               	movf	TranslateMessage@Index+1,w,c
 10521  002D7E  E104               	bnz	u8200
 10522  002D80  0E5A               	movlw	90
 10523  002D82  5C22               	subwf	TranslateMessage@Index,w,c
 10524  002D84  A0D8               	btfss	status,0,c
 10525  002D86  D008               	goto	l635
 10526  002D88                     u8200:
 10527                           
 10528                           ;terminal.c: 162: printf("E#13\r\n");
 10529  002D88  0E63               	movlw	low STR_4
 10530  002D8A  0100               	movlb	0	; () banked
 10531  002D8C  6FCB               	movwf	printf@f& (0+255),b
 10532  002D8E  0E08               	movlw	high STR_4
 10533  002D90  6FCC               	movwf	(printf@f+1)& (0+255),b
 10534  002D92  ECFA  F019         	call	_printf	;wreg free
 10535                           
 10536                           ;terminal.c: 163: }
 10537  002D96  0012               	return	
 10538  002D98                     l635:
 10539                           
 10540                           ;terminal.c: 164: else{
 10541                           ;terminal.c: 165: Value = GETxAPIxVAL(Index);
 10542  002D98  C022  F013         	movff	TranslateMessage@Index,GETxAPIxVAL@index
 10543  002D9C  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxVAL@index+1
 10544  002DA0  EC44  F021         	call	_GETxAPIxVAL	;wreg free
 10545  002DA4  C013  F020         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10546  002DA8  C014  F021         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10547                           
 10548                           ;terminal.c: 166: SENDxMESSAGE(Index, Value);
 10549  002DAC  C022  F013         	movff	TranslateMessage@Index,SENDxMESSAGE@index
 10550  002DB0  C023  F014         	movff	TranslateMessage@Index+1,SENDxMESSAGE@index+1
 10551  002DB4  C020  F015         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10552  002DB8  C021  F016         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10553  002DBC  EC2A  F014         	call	_SENDxMESSAGE	;wreg free
 10554  002DC0  0012               	return	
 10555  002DC2                     __end_of_TranslateMessage:
 10556                           	opt stack 0
 10557                           tblptru	equ	0xFF8
 10558                           tblptrh	equ	0xFF7
 10559                           tblptrl	equ	0xFF6
 10560                           tablat	equ	0xFF5
 10561                           intcon	equ	0xFF2
 10562                           postinc0	equ	0xFEE
 10563                           wreg	equ	0xFE8
 10564                           postinc1	equ	0xFE6
 10565                           postdec1	equ	0xFE5
 10566                           fsr1h	equ	0xFE2
 10567                           fsr1l	equ	0xFE1
 10568                           indf2	equ	0xFDF
 10569                           postinc2	equ	0xFDE
 10570                           postdec2	equ	0xFDD
 10571                           fsr2h	equ	0xFDA
 10572                           fsr2l	equ	0xFD9
 10573                           status	equ	0xFD8
 10574                           
 10575 ;; *************** function _atoi *****************
 10576 ;; Defined at:
 10577 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atoi.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  s               2   24[COMRAM] PTR const unsigned char 
 10580 ;;		 -> NULL(0), Data(10), 
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;  a               2   29[COMRAM] int 
 10583 ;;  sign            1   28[COMRAM] unsigned char 
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  2   24[COMRAM] int 
 10586 ;; Registers used:
 10587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10593 ;;      Params:         2       0       0       0       0       0       0       0       0
 10594 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10595 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10596 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10597 ;;Total ram usage:        7 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    4
 10600 ;; This function calls:
 10601 ;;		___wmul
 10602 ;;		_isdigit
 10603 ;; This function is called by:
 10604 ;;		_TranslateMessage
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           	psect	text21
 10609  003B5C                     __ptext21:
 10610                           	opt stack 0
 10611  003B5C                     _atoi:
 10612                           	opt stack 24
 10613                           
 10614                           ;incstack = 0
 10615  003B5C  D002               	goto	l1442
 10616  003B5E  4A19               	infsnz	atoi@s,f,c
 10617  003B60  2A1A               	incf	atoi@s+1,f,c
 10618  003B62                     l1442:
 10619  003B62  C019  FFD9         	movff	atoi@s,fsr2l
 10620  003B66  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10621  003B6A  0E20               	movlw	32
 10622  003B6C  18DE               	xorwf	postinc2,w,c
 10623  003B6E  B4D8               	btfsc	status,2,c
 10624  003B70  D7F6               	goto	l1443
 10625  003B72  C019  FFD9         	movff	atoi@s,fsr2l
 10626  003B76  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10627  003B7A  0E09               	movlw	9
 10628  003B7C  18DE               	xorwf	postinc2,w,c
 10629  003B7E  B4D8               	btfsc	status,2,c
 10630  003B80  D7EE               	goto	l1443
 10631  003B82  0E00               	movlw	0
 10632  003B84  6E1F               	movwf	atoi@a+1,c
 10633  003B86  0E00               	movlw	0
 10634  003B88  6E1E               	movwf	atoi@a,c
 10635  003B8A  0E00               	movlw	0
 10636  003B8C  6E1D               	movwf	atoi@sign,c
 10637  003B8E  C019  FFD9         	movff	atoi@s,fsr2l
 10638  003B92  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10639  003B96  0E2D               	movlw	45
 10640  003B98  18DE               	xorwf	postinc2,w,c
 10641  003B9A  A4D8               	btfss	status,2,c
 10642  003B9C  D002               	goto	l1445
 10643  003B9E  2A1D               	incf	atoi@sign,f,c
 10644  003BA0  D024               	goto	l8074
 10645  003BA2                     l1445:
 10646  003BA2  C019  FFD9         	movff	atoi@s,fsr2l
 10647  003BA6  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10648  003BAA  0E2B               	movlw	43
 10649  003BAC  18DE               	xorwf	postinc2,w,c
 10650  003BAE  A4D8               	btfss	status,2,c
 10651  003BB0  D01E               	goto	l1448
 10652  003BB2  D01B               	goto	l8074
 10653  003BB4  C01E  F013         	movff	atoi@a,___wmul@multiplier
 10654  003BB8  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
 10655  003BBC  0E00               	movlw	0
 10656  003BBE  6E16               	movwf	___wmul@multiplicand+1,c
 10657  003BC0  0E0A               	movlw	10
 10658  003BC2  6E15               	movwf	___wmul@multiplicand,c
 10659  003BC4  EC12  F021         	call	___wmul	;wreg free
 10660  003BC8  C019  FFD9         	movff	atoi@s,fsr2l
 10661  003BCC  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10662  003BD0  50DF               	movf	indf2,w,c
 10663  003BD2  6E1B               	movwf	??_atoi& (0+255),c
 10664  003BD4  6A1C               	clrf	(??_atoi+1)& (0+255),c
 10665  003BD6  5013               	movf	?___wmul,w,c
 10666  003BD8  261B               	addwf	??_atoi,f,c
 10667  003BDA  5014               	movf	?___wmul+1,w,c
 10668  003BDC  221C               	addwfc	??_atoi+1,f,c
 10669  003BDE  0ED0               	movlw	208
 10670  003BE0  241B               	addwf	??_atoi,w,c
 10671  003BE2  6E1E               	movwf	atoi@a,c
 10672  003BE4  0EFF               	movlw	255
 10673  003BE6  201C               	addwfc	??_atoi+1,w,c
 10674  003BE8  6E1F               	movwf	atoi@a+1,c
 10675  003BEA                     l8074:
 10676  003BEA  4A19               	infsnz	atoi@s,f,c
 10677  003BEC  2A1A               	incf	atoi@s+1,f,c
 10678  003BEE                     l1448:
 10679  003BEE  C019  FFD9         	movff	atoi@s,fsr2l
 10680  003BF2  C01A  FFDA         	movff	atoi@s+1,fsr2h
 10681  003BF6  50DF               	movf	indf2,w,c
 10682  003BF8  EC35  F021         	call	_isdigit
 10683  003BFC  B0D8               	btfsc	status,0,c
 10684  003BFE  D7DA               	goto	l1449
 10685  003C00  501D               	movf	atoi@sign,w,c
 10686  003C02  B4D8               	btfsc	status,2,c
 10687  003C04  D00D               	goto	l1451
 10688  003C06  C01E  F01B         	movff	atoi@a,??_atoi
 10689  003C0A  C01F  F01C         	movff	atoi@a+1,??_atoi+1
 10690  003C0E  1E1B               	comf	??_atoi,f,c
 10691  003C10  1E1C               	comf	??_atoi+1,f,c
 10692  003C12  4A1B               	infsnz	??_atoi,f,c
 10693  003C14  2A1C               	incf	??_atoi+1,f,c
 10694  003C16  C01B  F019         	movff	??_atoi,?_atoi
 10695  003C1A  C01C  F01A         	movff	??_atoi+1,?_atoi+1
 10696  003C1E  0012               	return	
 10697  003C20                     l1451:
 10698  003C20  C01E  F019         	movff	atoi@a,?_atoi
 10699  003C24  C01F  F01A         	movff	atoi@a+1,?_atoi+1
 10700  003C28  0012               	return		;funcret
 10701  003C2A                     __end_of_atoi:
 10702                           	opt stack 0
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           intcon	equ	0xFF2
 10708                           postinc0	equ	0xFEE
 10709                           wreg	equ	0xFE8
 10710                           postinc1	equ	0xFE6
 10711                           postdec1	equ	0xFE5
 10712                           fsr1h	equ	0xFE2
 10713                           fsr1l	equ	0xFE1
 10714                           indf2	equ	0xFDF
 10715                           postinc2	equ	0xFDE
 10716                           postdec2	equ	0xFDD
 10717                           fsr2h	equ	0xFDA
 10718                           fsr2l	equ	0xFD9
 10719                           status	equ	0xFD8
 10720                           
 10721 ;; *************** function _isdigit *****************
 10722 ;; Defined at:
 10723 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;  c               1    wreg     unsigned char 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;  c               1   20[COMRAM] unsigned char 
 10728 ;; Return value:  Size  Location     Type
 10729 ;;		None               void
 10730 ;; Registers used:
 10731 ;;		wreg, status,2, status,0
 10732 ;; Tracked objects:
 10733 ;;		On entry : 0/0
 10734 ;;		On exit  : 0/0
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10737 ;;      Params:         0       0       0       0       0       0       0       0       0
 10738 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10739 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10740 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10741 ;;Total ram usage:        3 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:    3
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_atoi
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           	psect	text22
 10752  00426A                     __ptext22:
 10753                           	opt stack 0
 10754  00426A                     _isdigit:
 10755                           	opt stack 24
 10756                           
 10757                           ;incstack = 0
 10758                           ;isdigit@c stored from wreg
 10759  00426A  6E15               	movwf	isdigit@c,c
 10760  00426C  0E00               	movlw	0
 10761  00426E  6E14               	movwf	_isdigit$1832,c
 10762  004270  0E3A               	movlw	58
 10763  004272  6015               	cpfslt	isdigit@c,c
 10764  004274  D005               	goto	l1623
 10765  004276  0E2F               	movlw	47
 10766  004278  6415               	cpfsgt	isdigit@c,c
 10767  00427A  D002               	goto	l1623
 10768  00427C  0E01               	movlw	1
 10769  00427E  6E14               	movwf	_isdigit$1832,c
 10770  004280                     l1623:
 10771  004280  C014  F013         	movff	_isdigit$1832,??_isdigit
 10772  004284  3013               	rrcf	??_isdigit,w,c
 10773  004286  0012               	return	
 10774  004288                     __end_of_isdigit:
 10775                           	opt stack 0
 10776                           tblptru	equ	0xFF8
 10777                           tblptrh	equ	0xFF7
 10778                           tblptrl	equ	0xFF6
 10779                           tablat	equ	0xFF5
 10780                           intcon	equ	0xFF2
 10781                           postinc0	equ	0xFEE
 10782                           wreg	equ	0xFE8
 10783                           postinc1	equ	0xFE6
 10784                           postdec1	equ	0xFE5
 10785                           fsr1h	equ	0xFE2
 10786                           fsr1l	equ	0xFE1
 10787                           indf2	equ	0xFDF
 10788                           postinc2	equ	0xFDE
 10789                           postdec2	equ	0xFDD
 10790                           fsr2h	equ	0xFDA
 10791                           fsr2l	equ	0xFD9
 10792                           status	equ	0xFD8
 10793                           
 10794 ;; *************** function ___wmul *****************
 10795 ;; Defined at:
 10796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;  multiplier      2   18[COMRAM] unsigned int 
 10799 ;;  multiplicand    2   20[COMRAM] unsigned int 
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;  product         2   22[COMRAM] unsigned int 
 10802 ;; Return value:  Size  Location     Type
 10803 ;;                  2   18[COMRAM] unsigned int 
 10804 ;; Registers used:
 10805 ;;		wreg, status,2, status,0, prodl, prodh
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10811 ;;      Params:         4       0       0       0       0       0       0       0       0
 10812 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10813 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10814 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10815 ;;Total ram usage:        6 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; Hardware stack levels required when called:    3
 10818 ;; This function calls:
 10819 ;;		Nothing
 10820 ;; This function is called by:
 10821 ;;		_atoi
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825                           	psect	text23
 10826  004224                     __ptext23:
 10827                           	opt stack 0
 10828  004224                     ___wmul:
 10829                           	opt stack 24
 10830                           
 10831                           ;incstack = 0
 10832  004224  5013               	movf	___wmul@multiplier,w,c
 10833  004226  0215               	mulwf	___wmul@multiplicand,c
 10834  004228  CFF3 F017          	movff	prodl,___wmul@product
 10835  00422C  CFF4 F018          	movff	prodh,___wmul@product+1
 10836  004230  5013               	movf	___wmul@multiplier,w,c
 10837  004232  0216               	mulwf	___wmul@multiplicand+1,c
 10838  004234  50F3               	movf	prodl,w,c
 10839  004236  2618               	addwf	___wmul@product+1,f,c
 10840  004238  5014               	movf	___wmul@multiplier+1,w,c
 10841  00423A  0215               	mulwf	___wmul@multiplicand,c
 10842  00423C  50F3               	movf	prodl,w,c
 10843  00423E  2618               	addwf	___wmul@product+1,f,c
 10844  004240  C017  F013         	movff	___wmul@product,?___wmul
 10845  004244  C018  F014         	movff	___wmul@product+1,?___wmul+1
 10846  004248  0012               	return	
 10847  00424A                     __end_of___wmul:
 10848                           	opt stack 0
 10849                           tblptru	equ	0xFF8
 10850                           tblptrh	equ	0xFF7
 10851                           tblptrl	equ	0xFF6
 10852                           tablat	equ	0xFF5
 10853                           prodh	equ	0xFF4
 10854                           prodl	equ	0xFF3
 10855                           intcon	equ	0xFF2
 10856                           postinc0	equ	0xFEE
 10857                           wreg	equ	0xFE8
 10858                           postinc1	equ	0xFE6
 10859                           postdec1	equ	0xFE5
 10860                           fsr1h	equ	0xFE2
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           postdec2	equ	0xFDD
 10865                           fsr2h	equ	0xFDA
 10866                           fsr2l	equ	0xFD9
 10867                           status	equ	0xFD8
 10868                           
 10869 ;; *************** function _SETxAPIxVALxNoxRET *****************
 10870 ;; Defined at:
 10871 ;;		line 218 in file "../api.c"
 10872 ;; Parameters:    Size  Location     Type
 10873 ;;  index           2   20[COMRAM] unsigned int 
 10874 ;;  value           2   22[COMRAM] unsigned int 
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;		None
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      void 
 10879 ;; Registers used:
 10880 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10886 ;;      Params:         4       0       0       0       0       0       0       0       0
 10887 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10888 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10889 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10890 ;;Total ram usage:        6 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    3
 10893 ;; This function calls:
 10894 ;;		Nothing
 10895 ;; This function is called by:
 10896 ;;		_Update_StateMchn
 10897 ;;		_TranslateMessage
 10898 ;; This function uses a non-reentrant model
 10899 ;;
 10900                           
 10901                           	psect	text24
 10902  0040F8                     __ptext24:
 10903                           	opt stack 0
 10904  0040F8                     _SETxAPIxVALxNoxRET:
 10905                           	opt stack 26
 10906                           
 10907                           ;api.c: 219: if(API[index] != value){
 10908                           
 10909                           ;incstack = 0
 10910  0040F8  90D8               	bcf	status,0,c
 10911  0040FA  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 10912  0040FC  6ED9               	movwf	fsr2l,c
 10913  0040FE  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 10914  004100  6EDA               	movwf	fsr2h,c
 10915  004102  0E00               	movlw	low _API
 10916  004104  26D9               	addwf	fsr2l,f,c
 10917  004106  0E01               	movlw	high _API
 10918  004108  22DA               	addwfc	fsr2h,f,c
 10919  00410A  5017               	movf	SETxAPIxVALxNoxRET@value,w,c
 10920  00410C  18DE               	xorwf	postinc2,w,c
 10921  00410E  E104               	bnz	u6490
 10922  004110  5018               	movf	SETxAPIxVALxNoxRET@value+1,w,c
 10923  004112  18DE               	xorwf	postinc2,w,c
 10924  004114  B4D8               	btfsc	status,2,c
 10925  004116  0012               	return	
 10926  004118                     u6490:
 10927                           
 10928                           ;api.c: 220: API[index] = value;
 10929  004118  90D8               	bcf	status,0,c
 10930  00411A  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 10931  00411C  6ED9               	movwf	fsr2l,c
 10932  00411E  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 10933  004120  6EDA               	movwf	fsr2h,c
 10934  004122  0E00               	movlw	low _API
 10935  004124  26D9               	addwf	fsr2l,f,c
 10936  004126  0E01               	movlw	high _API
 10937  004128  22DA               	addwfc	fsr2h,f,c
 10938  00412A  C017  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 10939  00412E  C018  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 10940  004132  0012               	return	
 10941  004134                     __end_of_SETxAPIxVALxNoxRET:
 10942                           	opt stack 0
 10943                           tblptru	equ	0xFF8
 10944                           tblptrh	equ	0xFF7
 10945                           tblptrl	equ	0xFF6
 10946                           tablat	equ	0xFF5
 10947                           prodh	equ	0xFF4
 10948                           prodl	equ	0xFF3
 10949                           intcon	equ	0xFF2
 10950                           postinc0	equ	0xFEE
 10951                           wreg	equ	0xFE8
 10952                           postinc1	equ	0xFE6
 10953                           postdec1	equ	0xFE5
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _GETxAPIxVAL *****************
 10964 ;; Defined at:
 10965 ;;		line 224 in file "../api.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  index           2   18[COMRAM] unsigned int 
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  2   18[COMRAM] unsigned int 
 10972 ;; Registers used:
 10973 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10979 ;;      Params:         2       0       0       0       0       0       0       0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10982 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10983 ;;Total ram usage:        2 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    3
 10986 ;; This function calls:
 10987 ;;		Nothing
 10988 ;; This function is called by:
 10989 ;;		_Update_StateMchn
 10990 ;;		_Train_Path
 10991 ;;		_TranslateMessage
 10992 ;;		_Debounce_Inputs
 10993 ;;		_Junction
 10994 ;;		_Train_Move_Left_Start
 10995 ;;		_Right_Mountain_From_The_Right
 10996 ;;		_Left_Mountain_From_The_Right
 10997 ;;		_Train_Move_Left_Brake
 10998 ;;		_Train_Move_Right_Start
 10999 ;;		_Left_Mountain_From_The_Left
 11000 ;;		_Right_Mountain_From_The_Left
 11001 ;;		_Train_Move_Right_Brake
 11002 ;;		_SETxPWM
 11003 ;;		_INCRxAPIxVAL
 11004 ;;		_DECRxAPIxVAL
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text25
 11009  004288                     __ptext25:
 11010                           	opt stack 0
 11011  004288                     _GETxAPIxVAL:
 11012                           	opt stack 23
 11013                           
 11014                           ;api.c: 225: return API[index];
 11015                           
 11016                           ;incstack = 0
 11017  004288  90D8               	bcf	status,0,c
 11018  00428A  3413               	rlcf	GETxAPIxVAL@index,w,c
 11019  00428C  6ED9               	movwf	fsr2l,c
 11020  00428E  3414               	rlcf	GETxAPIxVAL@index+1,w,c
 11021  004290  6EDA               	movwf	fsr2h,c
 11022  004292  0E00               	movlw	low _API
 11023  004294  26D9               	addwf	fsr2l,f,c
 11024  004296  0E01               	movlw	high _API
 11025  004298  22DA               	addwfc	fsr2h,f,c
 11026  00429A  CFDE F013          	movff	postinc2,?_GETxAPIxVAL
 11027  00429E  CFDD F014          	movff	postdec2,?_GETxAPIxVAL+1
 11028  0042A2  0012               	return	
 11029  0042A4                     __end_of_GETxAPIxVAL:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           intcon	equ	0xFF2
 11038                           postinc0	equ	0xFEE
 11039                           wreg	equ	0xFE8
 11040                           postinc1	equ	0xFE6
 11041                           postdec1	equ	0xFE5
 11042                           fsr1h	equ	0xFE2
 11043                           fsr1l	equ	0xFE1
 11044                           indf2	equ	0xFDF
 11045                           postinc2	equ	0xFDE
 11046                           postdec2	equ	0xFDD
 11047                           fsr2h	equ	0xFDA
 11048                           fsr2l	equ	0xFD9
 11049                           status	equ	0xFD8
 11050                           
 11051 ;; *************** function _GETxAPIxRW *****************
 11052 ;; Defined at:
 11053 ;;		line 207 in file "../api.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;  index           2   18[COMRAM] unsigned int 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;		None
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  2   18[COMRAM] unsigned int 
 11060 ;; Registers used:
 11061 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11062 ;; Tracked objects:
 11063 ;;		On entry : 0/0
 11064 ;;		On exit  : 0/0
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11067 ;;      Params:         2       0       0       0       0       0       0       0       0
 11068 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11069 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11070 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11071 ;;Total ram usage:        2 bytes
 11072 ;; Hardware stack levels used:    1
 11073 ;; Hardware stack levels required when called:    3
 11074 ;; This function calls:
 11075 ;;		Nothing
 11076 ;; This function is called by:
 11077 ;;		_TranslateMessage
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           	psect	text26
 11082  0042A4                     __ptext26:
 11083                           	opt stack 0
 11084  0042A4                     _GETxAPIxRW:
 11085                           	opt stack 25
 11086                           
 11087                           ;api.c: 208: return API_RW[index];
 11088                           
 11089                           ;incstack = 0
 11090  0042A4  90D8               	bcf	status,0,c
 11091  0042A6  3413               	rlcf	GETxAPIxRW@index,w,c
 11092  0042A8  6ED9               	movwf	fsr2l,c
 11093  0042AA  3414               	rlcf	GETxAPIxRW@index+1,w,c
 11094  0042AC  6EDA               	movwf	fsr2h,c
 11095  0042AE  0E00               	movlw	low _API_RW
 11096  0042B0  26D9               	addwf	fsr2l,f,c
 11097  0042B2  0E02               	movlw	high _API_RW
 11098  0042B4  22DA               	addwfc	fsr2h,f,c
 11099  0042B6  CFDE F013          	movff	postinc2,?_GETxAPIxRW
 11100  0042BA  CFDD F014          	movff	postdec2,?_GETxAPIxRW+1
 11101  0042BE  0012               	return	
 11102  0042C0                     __end_of_GETxAPIxRW:
 11103                           	opt stack 0
 11104                           tblptru	equ	0xFF8
 11105                           tblptrh	equ	0xFF7
 11106                           tblptrl	equ	0xFF6
 11107                           tablat	equ	0xFF5
 11108                           prodh	equ	0xFF4
 11109                           prodl	equ	0xFF3
 11110                           intcon	equ	0xFF2
 11111                           postinc0	equ	0xFEE
 11112                           wreg	equ	0xFE8
 11113                           postinc1	equ	0xFE6
 11114                           postdec1	equ	0xFE5
 11115                           fsr1h	equ	0xFE2
 11116                           fsr1l	equ	0xFE1
 11117                           indf2	equ	0xFDF
 11118                           postinc2	equ	0xFDE
 11119                           postdec2	equ	0xFDD
 11120                           fsr2h	equ	0xFDA
 11121                           fsr2l	equ	0xFD9
 11122                           status	equ	0xFD8
 11123                           
 11124 ;; *************** function _EUSART1_Read *****************
 11125 ;; Defined at:
 11126 ;;		line 142 in file "../eusart1.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;		None
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;  readValue       1   18[COMRAM] unsigned char 
 11131 ;; Return value:  Size  Location     Type
 11132 ;;                  1    wreg      unsigned char 
 11133 ;; Registers used:
 11134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11140 ;;      Params:         0       0       0       0       0       0       0       0       0
 11141 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11143 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11144 ;;Total ram usage:        1 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    3
 11147 ;; This function calls:
 11148 ;;		Nothing
 11149 ;; This function is called by:
 11150 ;;		_READxRECEIVEDxMESSAGE
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text27
 11155  00416E                     __ptext27:
 11156                           	opt stack 0
 11157  00416E                     _EUSART1_Read:
 11158                           	opt stack 26
 11159                           
 11160                           ;eusart1.c: 143: uint8_t readValue = 0;
 11161                           
 11162                           ;incstack = 0
 11163  00416E  0E00               	movlw	0
 11164  004170  6E13               	movwf	EUSART1_Read@readValue,c
 11165  004172  503D               	movf	_eusart1RxCount,w,c	;volatile
 11166  004174  B4D8               	btfsc	status,2,c
 11167  004176  D7FD               	goto	l517
 11168                           
 11169                           ;eusart1.c: 146: }
 11170                           ;eusart1.c: 148: PIE1bits.RC1IE = 0;
 11171  004178  9A9D               	bcf	3997,5,c	;volatile
 11172                           
 11173                           ;eusart1.c: 150: readValue = eusart1RxBuffer[eusart1RxTail++];
 11174  00417A  503E               	movf	_eusart1RxTail,w,c
 11175  00417C  0D01               	mullw	1
 11176  00417E  0E00               	movlw	low _eusart1RxBuffer
 11177  004180  24F3               	addwf	prodl,w,c
 11178  004182  6ED9               	movwf	fsr2l,c
 11179  004184  0E04               	movlw	high _eusart1RxBuffer
 11180  004186  20F4               	addwfc	prodh,w,c
 11181  004188  6EDA               	movwf	fsr2h,c
 11182  00418A  50DF               	movf	indf2,w,c
 11183  00418C  6E13               	movwf	EUSART1_Read@readValue,c
 11184  00418E  2A3E               	incf	_eusart1RxTail,f,c
 11185                           
 11186                           ;eusart1.c: 151: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11187  004190  0E7D               	movlw	125
 11188  004192  643E               	cpfsgt	_eusart1RxTail,c
 11189  004194  D002               	goto	l519
 11190                           
 11191                           ;eusart1.c: 152: eusart1RxTail = 0;
 11192  004196  0E00               	movlw	0
 11193  004198  6E3E               	movwf	_eusart1RxTail,c
 11194  00419A                     l519:
 11195                           
 11196                           ;eusart1.c: 153: }
 11197                           ;eusart1.c: 154: eusart1RxCount--;
 11198  00419A  063D               	decf	_eusart1RxCount,f,c	;volatile
 11199                           
 11200                           ;eusart1.c: 155: PIE1bits.RC1IE = 1;
 11201  00419C  8A9D               	bsf	3997,5,c	;volatile
 11202                           
 11203                           ;eusart1.c: 157: return readValue;
 11204  00419E  5013               	movf	EUSART1_Read@readValue,w,c
 11205  0041A0  0012               	return	
 11206  0041A2                     __end_of_EUSART1_Read:
 11207                           	opt stack 0
 11208                           tblptru	equ	0xFF8
 11209                           tblptrh	equ	0xFF7
 11210                           tblptrl	equ	0xFF6
 11211                           tablat	equ	0xFF5
 11212                           prodh	equ	0xFF4
 11213                           prodl	equ	0xFF3
 11214                           intcon	equ	0xFF2
 11215                           postinc0	equ	0xFEE
 11216                           wreg	equ	0xFE8
 11217                           postinc1	equ	0xFE6
 11218                           postdec1	equ	0xFE5
 11219                           fsr1h	equ	0xFE2
 11220                           fsr1l	equ	0xFE1
 11221                           indf2	equ	0xFDF
 11222                           postinc2	equ	0xFDE
 11223                           postdec2	equ	0xFDD
 11224                           fsr2h	equ	0xFDA
 11225                           fsr2l	equ	0xFD9
 11226                           status	equ	0xFD8
 11227                           
 11228 ;; *************** function _Init_Timers *****************
 11229 ;; Defined at:
 11230 ;;		line 183 in file "../Main.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;		None
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;		None
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  1    wreg      void 
 11237 ;; Registers used:
 11238 ;;		wreg, status,2
 11239 ;; Tracked objects:
 11240 ;;		On entry : 0/0
 11241 ;;		On exit  : 0/0
 11242 ;;		Unchanged: 0/0
 11243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11244 ;;      Params:         0       0       0       0       0       0       0       0       0
 11245 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11247 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11248 ;;Total ram usage:        0 bytes
 11249 ;; Hardware stack levels used:    1
 11250 ;; Hardware stack levels required when called:    3
 11251 ;; This function calls:
 11252 ;;		Nothing
 11253 ;; This function is called by:
 11254 ;;		_main
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text28
 11259  0042C0                     __ptext28:
 11260                           	opt stack 0
 11261  0042C0                     _Init_Timers:
 11262                           	opt stack 27
 11263                           
 11264                           ;Main.c: 185: RCONbits.IPEN = 1;
 11265                           
 11266                           ;incstack = 0
 11267  0042C0  8ED0               	bsf	4048,7,c	;volatile
 11268                           
 11269                           ;Main.c: 186: INTCON = 0xA0;
 11270  0042C2  0EA0               	movlw	160
 11271  0042C4  6EF2               	movwf	intcon,c	;volatile
 11272                           
 11273                           ;Main.c: 187: INTCON2 = 0x84;
 11274  0042C6  0E84               	movlw	132
 11275  0042C8  6EF1               	movwf	intcon2,c	;volatile
 11276                           
 11277                           ;Main.c: 188: TMR0H = 0x0;
 11278  0042CA  0E00               	movlw	0
 11279  0042CC  6ED7               	movwf	4055,c	;volatile
 11280                           
 11281                           ;Main.c: 189: TMR0L = 0x0;
 11282  0042CE  0E00               	movlw	0
 11283  0042D0  6ED6               	movwf	4054,c	;volatile
 11284                           
 11285                           ;Main.c: 190: T0CON = 0xC3;
 11286  0042D2  0EC3               	movlw	195
 11287  0042D4  6ED5               	movwf	4053,c	;volatile
 11288  0042D6  0012               	return		;funcret
 11289  0042D8                     __end_of_Init_Timers:
 11290                           	opt stack 0
 11291                           tblptru	equ	0xFF8
 11292                           tblptrh	equ	0xFF7
 11293                           tblptrl	equ	0xFF6
 11294                           tablat	equ	0xFF5
 11295                           prodh	equ	0xFF4
 11296                           prodl	equ	0xFF3
 11297                           intcon	equ	0xFF2
 11298                           intcon2	equ	0xFF1
 11299                           postinc0	equ	0xFEE
 11300                           wreg	equ	0xFE8
 11301                           postinc1	equ	0xFE6
 11302                           postdec1	equ	0xFE5
 11303                           fsr1h	equ	0xFE2
 11304                           fsr1l	equ	0xFE1
 11305                           indf2	equ	0xFDF
 11306                           postinc2	equ	0xFDE
 11307                           postdec2	equ	0xFDD
 11308                           fsr2h	equ	0xFDA
 11309                           fsr2l	equ	0xFD9
 11310                           status	equ	0xFD8
 11311                           
 11312 ;; *************** function _Init_Pwm *****************
 11313 ;; Defined at:
 11314 ;;		line 196 in file "../Main.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;		None
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;		None
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      void 
 11321 ;; Registers used:
 11322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11328 ;;      Params:         0       0       0       0       0       0       0       0       0
 11329 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11330 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11331 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11332 ;;Total ram usage:        0 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    5
 11335 ;; This function calls:
 11336 ;;		_SETxAPIxVAL
 11337 ;; This function is called by:
 11338 ;;		_main
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           	psect	text29
 11343  0041FC                     __ptext29:
 11344                           	opt stack 0
 11345  0041FC                     _Init_Pwm:
 11346                           	opt stack 25
 11347                           
 11348                           ;Main.c: 199: SETxAPIxVAL(69, 1);
 11349                           
 11350                           ;incstack = 0
 11351  0041FC  0E00               	movlw	0
 11352  0041FE  6E1A               	movwf	SETxAPIxVAL@index+1,c
 11353  004200  0E45               	movlw	69
 11354  004202  6E19               	movwf	SETxAPIxVAL@index,c
 11355  004204  0E00               	movlw	0
 11356  004206  6E1C               	movwf	SETxAPIxVAL@value+1,c
 11357  004208  0E01               	movlw	1
 11358  00420A  6E1B               	movwf	SETxAPIxVAL@value,c
 11359  00420C  ECC8  F01F         	call	_SETxAPIxVAL	;wreg free
 11360                           
 11361                           ;Main.c: 200: PR2=0xFF;
 11362  004210  68CB               	setf	4043,c	;volatile
 11363                           
 11364                           ;Main.c: 201: CCPR1L = 0x7F;
 11365  004212  0E7F               	movlw	127
 11366  004214  6EBE               	movwf	4030,c	;volatile
 11367                           
 11368                           ;Main.c: 202: CCP1CON = 0x0F;
 11369  004216  0E0F               	movlw	15
 11370  004218  6EBD               	movwf	4029,c	;volatile
 11371                           
 11372                           ;Main.c: 203: T2CON = 0x04;
 11373  00421A  0E04               	movlw	4
 11374  00421C  6ECA               	movwf	4042,c	;volatile
 11375                           
 11376                           ;Main.c: 204: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11377  00421E  9494               	bcf	3988,2,c	;volatile
 11378  004220  9094               	bcf	3988,0,c	;volatile
 11379  004222  0012               	return		;funcret
 11380  004224                     __end_of_Init_Pwm:
 11381                           	opt stack 0
 11382                           tblptru	equ	0xFF8
 11383                           tblptrh	equ	0xFF7
 11384                           tblptrl	equ	0xFF6
 11385                           tablat	equ	0xFF5
 11386                           prodh	equ	0xFF4
 11387                           prodl	equ	0xFF3
 11388                           intcon	equ	0xFF2
 11389                           intcon2	equ	0xFF1
 11390                           postinc0	equ	0xFEE
 11391                           wreg	equ	0xFE8
 11392                           postinc1	equ	0xFE6
 11393                           postdec1	equ	0xFE5
 11394                           fsr1h	equ	0xFE2
 11395                           fsr1l	equ	0xFE1
 11396                           indf2	equ	0xFDF
 11397                           postinc2	equ	0xFDE
 11398                           postdec2	equ	0xFDD
 11399                           fsr2h	equ	0xFDA
 11400                           fsr2l	equ	0xFD9
 11401                           status	equ	0xFD8
 11402                           
 11403 ;; *************** function _SETxAPIxVAL *****************
 11404 ;; Defined at:
 11405 ;;		line 211 in file "../api.c"
 11406 ;; Parameters:    Size  Location     Type
 11407 ;;  index           2   24[COMRAM] unsigned int 
 11408 ;;  value           2   26[COMRAM] unsigned int 
 11409 ;; Auto vars:     Size  Location     Type
 11410 ;;		None
 11411 ;; Return value:  Size  Location     Type
 11412 ;;                  1    wreg      void 
 11413 ;; Registers used:
 11414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11415 ;; Tracked objects:
 11416 ;;		On entry : 0/0
 11417 ;;		On exit  : 0/0
 11418 ;;		Unchanged: 0/0
 11419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11420 ;;      Params:         4       0       0       0       0       0       0       0       0
 11421 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11422 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11423 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11424 ;;Total ram usage:        6 bytes
 11425 ;; Hardware stack levels used:    1
 11426 ;; Hardware stack levels required when called:    4
 11427 ;; This function calls:
 11428 ;;		_SENDxMESSAGE
 11429 ;; This function is called by:
 11430 ;;		_Init_Pwm
 11431 ;;		_Update_StateMchn
 11432 ;;		_Train_Path
 11433 ;;		_Debounce_Inputs
 11434 ;;		_Junction
 11435 ;;		_Train_Move_Left_Start
 11436 ;;		_Train_Move_Left_Brake
 11437 ;;		_Train_Move_Right_Start
 11438 ;;		_Train_Move_Right_Brake
 11439 ;;		_SETxPWM
 11440 ;;		_INCRxAPIxVAL
 11441 ;;		_DECRxAPIxVAL
 11442 ;; This function uses a non-reentrant model
 11443 ;;
 11444                           
 11445                           	psect	text30
 11446  003F90                     __ptext30:
 11447                           	opt stack 0
 11448  003F90                     _SETxAPIxVAL:
 11449                           	opt stack 22
 11450                           
 11451                           ;api.c: 212: if(API[index] != value){
 11452                           
 11453                           ;incstack = 0
 11454  003F90  90D8               	bcf	status,0,c
 11455  003F92  3419               	rlcf	SETxAPIxVAL@index,w,c
 11456  003F94  6ED9               	movwf	fsr2l,c
 11457  003F96  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11458  003F98  6EDA               	movwf	fsr2h,c
 11459  003F9A  0E00               	movlw	low _API
 11460  003F9C  26D9               	addwf	fsr2l,f,c
 11461  003F9E  0E01               	movlw	high _API
 11462  003FA0  22DA               	addwfc	fsr2h,f,c
 11463  003FA2  501B               	movf	SETxAPIxVAL@value,w,c
 11464  003FA4  18DE               	xorwf	postinc2,w,c
 11465  003FA6  E104               	bnz	u6350
 11466  003FA8  501C               	movf	SETxAPIxVAL@value+1,w,c
 11467  003FAA  18DE               	xorwf	postinc2,w,c
 11468  003FAC  B4D8               	btfsc	status,2,c
 11469  003FAE  0012               	return	
 11470  003FB0                     u6350:
 11471                           
 11472                           ;api.c: 213: API[index] = value;
 11473  003FB0  90D8               	bcf	status,0,c
 11474  003FB2  3419               	rlcf	SETxAPIxVAL@index,w,c
 11475  003FB4  6ED9               	movwf	fsr2l,c
 11476  003FB6  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11477  003FB8  6EDA               	movwf	fsr2h,c
 11478  003FBA  0E00               	movlw	low _API
 11479  003FBC  26D9               	addwf	fsr2l,f,c
 11480  003FBE  0E01               	movlw	high _API
 11481  003FC0  22DA               	addwfc	fsr2h,f,c
 11482  003FC2  C01B  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11483  003FC6  C01C  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11484                           
 11485                           ;api.c: 214: SENDxMESSAGE(index, value);
 11486  003FCA  C019  F013         	movff	SETxAPIxVAL@index,SENDxMESSAGE@index
 11487  003FCE  C01A  F014         	movff	SETxAPIxVAL@index+1,SENDxMESSAGE@index+1
 11488  003FD2  C01B  F015         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11489  003FD6  C01C  F016         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11490  003FDA  EC2A  F014         	call	_SENDxMESSAGE	;wreg free
 11491  003FDE  0012               	return	
 11492  003FE0                     __end_of_SETxAPIxVAL:
 11493                           	opt stack 0
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           intcon2	equ	0xFF1
 11502                           postinc0	equ	0xFEE
 11503                           wreg	equ	0xFE8
 11504                           postinc1	equ	0xFE6
 11505                           postdec1	equ	0xFE5
 11506                           fsr1h	equ	0xFE2
 11507                           fsr1l	equ	0xFE1
 11508                           indf2	equ	0xFDF
 11509                           postinc2	equ	0xFDE
 11510                           postdec2	equ	0xFDD
 11511                           fsr2h	equ	0xFDA
 11512                           fsr2l	equ	0xFD9
 11513                           status	equ	0xFD8
 11514                           
 11515 ;; *************** function _SENDxMESSAGE *****************
 11516 ;; Defined at:
 11517 ;;		line 280 in file "../terminal.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;  index           2   18[COMRAM] unsigned int 
 11520 ;;  value           2   20[COMRAM] unsigned int 
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;		None
 11523 ;; Return value:  Size  Location     Type
 11524 ;;                  1    wreg      void 
 11525 ;; Registers used:
 11526 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11527 ;; Tracked objects:
 11528 ;;		On entry : 0/0
 11529 ;;		On exit  : 0/0
 11530 ;;		Unchanged: 0/0
 11531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11532 ;;      Params:         4       0       0       0       0       0       0       0       0
 11533 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11534 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11535 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11536 ;;Total ram usage:        6 bytes
 11537 ;; Hardware stack levels used:    1
 11538 ;; Hardware stack levels required when called:    3
 11539 ;; This function calls:
 11540 ;;		Nothing
 11541 ;; This function is called by:
 11542 ;;		_TranslateMessage
 11543 ;;		_SETxAPIxVAL
 11544 ;;		_INCRxAPIxVAL
 11545 ;;		_DECRxAPIxVAL
 11546 ;; This function uses a non-reentrant model
 11547 ;;
 11548                           
 11549                           	psect	text31
 11550  002854                     __ptext31:
 11551                           	opt stack 0
 11552  002854                     _SENDxMESSAGE:
 11553                           	opt stack 22
 11554                           
 11555                           ;terminal.c: 282: switch (Diag_Comm)
 11556                           
 11557                           ;incstack = 0
 11558  002854  D0F8               	goto	l668
 11559  002856  0E8C               	movlw	low _Comm_List
 11560  002858  0100               	movlb	0	; () banked
 11561  00285A  6F72               	movwf	_Pcomm_List& (0+255),b
 11562  00285C  0E00               	movlw	high _Comm_List
 11563  00285E  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 11564                           
 11565                           ; BSR set to: 0
 11566                           ;terminal.c: 285: *Pcomm_List = index;
 11567  002860  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11568  002864  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11569  002868  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11570  00286C  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;terminal.c: 286: Pcomm_List++;
 11574  002870  0E02               	movlw	2
 11575  002872  2772               	addwf	_Pcomm_List& (0+255),f,b
 11576  002874  0E00               	movlw	0
 11577  002876  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11578                           
 11579                           ;terminal.c: 287: *Pcomm_List = value;
 11580  002878  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11581  00287C  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11582  002880  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11583  002884  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;terminal.c: 288: Pcomm_List++;
 11587  002888  0E02               	movlw	2
 11588  00288A  2772               	addwf	_Pcomm_List& (0+255),f,b
 11589  00288C  0E00               	movlw	0
 11590  00288E  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;terminal.c: 289: Diag_Comm = 1;
 11594  002890  0E00               	movlw	0
 11595  002892  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11596  002894  0E01               	movlw	1
 11597  002896  6F74               	movwf	_Diag_Comm& (0+255),b
 11598                           
 11599                           ;terminal.c: 290: break;
 11600  002898  0012               	return	
 11601  00289A                     
 11602                           ; BSR set to: 0
 11603  00289A  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11604  00289E  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11605  0028A2  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11606  0028A6  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11607                           
 11608                           ;terminal.c: 293: Pcomm_List++;
 11609  0028AA  0E02               	movlw	2
 11610  0028AC  0100               	movlb	0	; () banked
 11611  0028AE  2772               	addwf	_Pcomm_List& (0+255),f,b
 11612  0028B0  0E00               	movlw	0
 11613  0028B2  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;terminal.c: 294: *Pcomm_List = value;
 11617  0028B4  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11618  0028B8  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11619  0028BC  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11620  0028C0  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11621                           
 11622                           ;terminal.c: 295: Pcomm_List++;
 11623  0028C4  0E02               	movlw	2
 11624  0028C6  2772               	addwf	_Pcomm_List& (0+255),f,b
 11625  0028C8  0E00               	movlw	0
 11626  0028CA  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;terminal.c: 296: Diag_Comm = 2;
 11630  0028CC  0E00               	movlw	0
 11631  0028CE  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11632  0028D0  0E02               	movlw	2
 11633  0028D2  6F74               	movwf	_Diag_Comm& (0+255),b
 11634                           
 11635                           ;terminal.c: 297: break;
 11636  0028D4  0012               	return	
 11637  0028D6                     
 11638                           ; BSR set to: 0
 11639  0028D6  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11640  0028DA  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11641  0028DE  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11642  0028E2  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11643                           
 11644                           ;terminal.c: 300: Pcomm_List++;
 11645  0028E6  0E02               	movlw	2
 11646  0028E8  0100               	movlb	0	; () banked
 11647  0028EA  2772               	addwf	_Pcomm_List& (0+255),f,b
 11648  0028EC  0E00               	movlw	0
 11649  0028EE  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;terminal.c: 301: *Pcomm_List = value;
 11653  0028F0  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11654  0028F4  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11655  0028F8  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11656  0028FC  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11657                           
 11658                           ;terminal.c: 302: Pcomm_List++;
 11659  002900  0E02               	movlw	2
 11660  002902  2772               	addwf	_Pcomm_List& (0+255),f,b
 11661  002904  0E00               	movlw	0
 11662  002906  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;terminal.c: 303: Diag_Comm = 3;
 11666  002908  0E00               	movlw	0
 11667  00290A  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11668  00290C  0E03               	movlw	3
 11669  00290E  6F74               	movwf	_Diag_Comm& (0+255),b
 11670                           
 11671                           ;terminal.c: 304: break;
 11672  002910  0012               	return	
 11673  002912                     
 11674                           ; BSR set to: 0
 11675  002912  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11676  002916  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11677  00291A  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11678  00291E  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11679                           
 11680                           ;terminal.c: 307: Pcomm_List++;
 11681  002922  0E02               	movlw	2
 11682  002924  0100               	movlb	0	; () banked
 11683  002926  2772               	addwf	_Pcomm_List& (0+255),f,b
 11684  002928  0E00               	movlw	0
 11685  00292A  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;terminal.c: 308: *Pcomm_List = value;
 11689  00292C  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11690  002930  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11691  002934  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11692  002938  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11693                           
 11694                           ;terminal.c: 309: Pcomm_List++;
 11695  00293C  0E02               	movlw	2
 11696  00293E  2772               	addwf	_Pcomm_List& (0+255),f,b
 11697  002940  0E00               	movlw	0
 11698  002942  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;terminal.c: 310: Diag_Comm = 4;
 11702  002944  0E00               	movlw	0
 11703  002946  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11704  002948  0E04               	movlw	4
 11705  00294A  6F74               	movwf	_Diag_Comm& (0+255),b
 11706                           
 11707                           ;terminal.c: 311: break;
 11708  00294C  0012               	return	
 11709  00294E                     
 11710                           ; BSR set to: 0
 11711  00294E  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11712  002952  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11713  002956  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11714  00295A  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11715                           
 11716                           ;terminal.c: 314: Pcomm_List++;
 11717  00295E  0E02               	movlw	2
 11718  002960  0100               	movlb	0	; () banked
 11719  002962  2772               	addwf	_Pcomm_List& (0+255),f,b
 11720  002964  0E00               	movlw	0
 11721  002966  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;terminal.c: 315: *Pcomm_List = value;
 11725  002968  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11726  00296C  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11727  002970  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11728  002974  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11729                           
 11730                           ;terminal.c: 316: Pcomm_List++;
 11731  002978  0E02               	movlw	2
 11732  00297A  2772               	addwf	_Pcomm_List& (0+255),f,b
 11733  00297C  0E00               	movlw	0
 11734  00297E  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;terminal.c: 317: Diag_Comm = 5;
 11738  002980  0E00               	movlw	0
 11739  002982  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11740  002984  0E05               	movlw	5
 11741  002986  6F74               	movwf	_Diag_Comm& (0+255),b
 11742                           
 11743                           ;terminal.c: 318: break;
 11744  002988  0012               	return	
 11745  00298A                     
 11746                           ; BSR set to: 0
 11747  00298A  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11748  00298E  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11749  002992  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11750  002996  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11751                           
 11752                           ;terminal.c: 321: Pcomm_List++;
 11753  00299A  0E02               	movlw	2
 11754  00299C  0100               	movlb	0	; () banked
 11755  00299E  2772               	addwf	_Pcomm_List& (0+255),f,b
 11756  0029A0  0E00               	movlw	0
 11757  0029A2  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;terminal.c: 322: *Pcomm_List = value;
 11761  0029A4  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11762  0029A8  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11763  0029AC  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11764  0029B0  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11765                           
 11766                           ;terminal.c: 323: Pcomm_List++;
 11767  0029B4  0E02               	movlw	2
 11768  0029B6  2772               	addwf	_Pcomm_List& (0+255),f,b
 11769  0029B8  0E00               	movlw	0
 11770  0029BA  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;terminal.c: 324: Diag_Comm = 6;
 11774  0029BC  0E00               	movlw	0
 11775  0029BE  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11776  0029C0  0E06               	movlw	6
 11777  0029C2  6F74               	movwf	_Diag_Comm& (0+255),b
 11778                           
 11779                           ;terminal.c: 325: break;
 11780  0029C4  0012               	return	
 11781  0029C6                     
 11782                           ; BSR set to: 0
 11783  0029C6  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11784  0029CA  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11785  0029CE  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11786  0029D2  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11787                           
 11788                           ;terminal.c: 328: Pcomm_List++;
 11789  0029D6  0E02               	movlw	2
 11790  0029D8  0100               	movlb	0	; () banked
 11791  0029DA  2772               	addwf	_Pcomm_List& (0+255),f,b
 11792  0029DC  0E00               	movlw	0
 11793  0029DE  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;terminal.c: 329: *Pcomm_List = value;
 11797  0029E0  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11798  0029E4  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11799  0029E8  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11800  0029EC  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11801                           
 11802                           ;terminal.c: 330: Pcomm_List++;
 11803  0029F0  0E02               	movlw	2
 11804  0029F2  2772               	addwf	_Pcomm_List& (0+255),f,b
 11805  0029F4  0E00               	movlw	0
 11806  0029F6  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;terminal.c: 331: Diag_Comm = 7;
 11810  0029F8  0E00               	movlw	0
 11811  0029FA  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11812  0029FC  0E07               	movlw	7
 11813  0029FE  6F74               	movwf	_Diag_Comm& (0+255),b
 11814                           
 11815                           ;terminal.c: 332: break;
 11816  002A00  0012               	return	
 11817  002A02                     
 11818                           ; BSR set to: 0
 11819  002A02  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11820  002A06  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11821  002A0A  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 11822  002A0E  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 11823                           
 11824                           ;terminal.c: 335: Pcomm_List++;
 11825  002A12  0E02               	movlw	2
 11826  002A14  0100               	movlb	0	; () banked
 11827  002A16  2772               	addwf	_Pcomm_List& (0+255),f,b
 11828  002A18  0E00               	movlw	0
 11829  002A1A  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;terminal.c: 336: *Pcomm_List = value;
 11833  002A1C  C072  FFD9         	movff	_Pcomm_List,fsr2l
 11834  002A20  C073  FFDA         	movff	_Pcomm_List+1,fsr2h
 11835  002A24  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 11836  002A28  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 11837                           
 11838                           ;terminal.c: 337: Pcomm_List++;
 11839  002A2C  0E02               	movlw	2
 11840  002A2E  2772               	addwf	_Pcomm_List& (0+255),f,b
 11841  002A30  0E00               	movlw	0
 11842  002A32  2373               	addwfc	(_Pcomm_List+1)& (0+255),f,b
 11843                           
 11844                           ;terminal.c: 338: Pcomm_List = &Comm_List[0][0];
 11845  002A34  0E8C               	movlw	low _Comm_List
 11846  002A36  6F72               	movwf	_Pcomm_List& (0+255),b
 11847  002A38  0E00               	movlw	high _Comm_List
 11848  002A3A  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;terminal.c: 339: Diag_Comm = 0;
 11852  002A3C  0E00               	movlw	0
 11853  002A3E  6F75               	movwf	(_Diag_Comm+1)& (0+255),b
 11854  002A40  0E00               	movlw	0
 11855  002A42  6F74               	movwf	_Diag_Comm& (0+255),b
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;terminal.c: 344: }
 11859                           
 11860                           ; BSR set to: 0
 11861                           
 11862                           ;terminal.c: 343: default : break;
 11863                           
 11864                           ;terminal.c: 340: break;
 11865  002A44  0012               	return	
 11866  002A46                     l668:
 11867                           
 11868                           ; BSR set to: 0
 11869  002A46  C074  F017         	movff	_Diag_Comm,??_SENDxMESSAGE
 11870  002A4A  C075  F018         	movff	_Diag_Comm+1,??_SENDxMESSAGE+1
 11871                           
 11872                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11873                           ; Switch size 1, requested type "space"
 11874                           ; Number of cases is 1, Range of values is 0 to 0
 11875                           ; switch strategies available:
 11876                           ; Name         Instructions Cycles
 11877                           ; simple_byte            4     3 (average)
 11878                           ;	Chosen strategy is simple_byte
 11879  002A4E  5018               	movf	??_SENDxMESSAGE+1,w,c
 11880  002A50  0A00               	xorlw	0	; case 0
 11881  002A52  A4D8               	btfss	status,2,c
 11882  002A54  0012               	return	
 11883                           
 11884                           ; Switch size 1, requested type "space"
 11885                           ; Number of cases is 8, Range of values is 0 to 7
 11886                           ; switch strategies available:
 11887                           ; Name         Instructions Cycles
 11888                           ; simple_byte           25    13 (average)
 11889                           ;	Chosen strategy is simple_byte
 11890  002A56  5017               	movf	??_SENDxMESSAGE,w,c
 11891  002A58  0A00               	xorlw	0	; case 0
 11892  002A5A  B4D8               	btfsc	status,2,c
 11893  002A5C  D6FC               	goto	l669
 11894  002A5E  0A01               	xorlw	1	; case 1
 11895  002A60  B4D8               	btfsc	status,2,c
 11896  002A62  D71B               	goto	l671
 11897  002A64  0A03               	xorlw	3	; case 2
 11898  002A66  B4D8               	btfsc	status,2,c
 11899  002A68  D736               	goto	l672
 11900  002A6A  0A01               	xorlw	1	; case 3
 11901  002A6C  B4D8               	btfsc	status,2,c
 11902  002A6E  D751               	goto	l673
 11903  002A70  0A07               	xorlw	7	; case 4
 11904  002A72  B4D8               	btfsc	status,2,c
 11905  002A74  D76C               	goto	l674
 11906  002A76  0A01               	xorlw	1	; case 5
 11907  002A78  B4D8               	btfsc	status,2,c
 11908  002A7A  D787               	goto	l675
 11909  002A7C  0A03               	xorlw	3	; case 6
 11910  002A7E  B4D8               	btfsc	status,2,c
 11911  002A80  D7A2               	goto	l676
 11912  002A82  0A01               	xorlw	1	; case 7
 11913  002A84  A4D8               	btfss	status,2,c
 11914  002A86  0012               	return	
 11915  002A88  D7BC               	goto	l677
 11916  002A8A                     __end_of_SENDxMESSAGE:
 11917                           	opt stack 0
 11918                           tblptru	equ	0xFF8
 11919                           tblptrh	equ	0xFF7
 11920                           tblptrl	equ	0xFF6
 11921                           tablat	equ	0xFF5
 11922                           prodh	equ	0xFF4
 11923                           prodl	equ	0xFF3
 11924                           intcon	equ	0xFF2
 11925                           intcon2	equ	0xFF1
 11926                           postinc0	equ	0xFEE
 11927                           wreg	equ	0xFE8
 11928                           postinc1	equ	0xFE6
 11929                           postdec1	equ	0xFE5
 11930                           fsr1h	equ	0xFE2
 11931                           fsr1l	equ	0xFE1
 11932                           indf2	equ	0xFDF
 11933                           postinc2	equ	0xFDE
 11934                           postdec2	equ	0xFDD
 11935                           fsr2h	equ	0xFDA
 11936                           fsr2l	equ	0xFD9
 11937                           status	equ	0xFD8
 11938                           
 11939 ;; *************** function _EUSART1_Initialize *****************
 11940 ;; Defined at:
 11941 ;;		line 77 in file "../eusart1.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;		None
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;  baud_rate       2   18[COMRAM] unsigned int 
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11955 ;;      Params:         0       0       0       0       0       0       0       0       0
 11956 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11957 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11958 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11959 ;;Total ram usage:        2 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    3
 11962 ;; This function calls:
 11963 ;;		Nothing
 11964 ;; This function is called by:
 11965 ;;		_main
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           	psect	text32
 11970  00402E                     __ptext32:
 11971                           	opt stack 0
 11972  00402E                     _EUSART1_Initialize:
 11973                           	opt stack 27
 11974                           
 11975                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 11976                           
 11977                           ;incstack = 0
 11978  00402E  9A9D               	bcf	3997,5,c	;volatile
 11979                           
 11980                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 11981  004030  989D               	bcf	3997,4,c	;volatile
 11982                           
 11983                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 11984  004032  86B8               	bsf	4024,3,c	;volatile
 11985                           
 11986                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 11987  004034  8EAB               	bsf	4011,7,c	;volatile
 11988                           
 11989                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 11990  004036  9CAB               	bcf	4011,6,c	;volatile
 11991                           
 11992                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 11993  004038  88AB               	bsf	4011,4,c	;volatile
 11994                           
 11995                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 11996  00403A  96AB               	bcf	4011,3,c	;volatile
 11997                           
 11998                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 11999  00403C  9CAC               	bcf	4012,6,c	;volatile
 12000                           
 12001                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 12002  00403E  8AAC               	bsf	4012,5,c	;volatile
 12003                           
 12004                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 12005  004040  98AC               	bcf	4012,4,c	;volatile
 12006                           
 12007                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 12008  004042  96AC               	bcf	4012,3,c	;volatile
 12009                           
 12010                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 12011  004044  84AC               	bsf	4012,2,c	;volatile
 12012                           
 12013                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 12014  004046  82AC               	bsf	4012,1,c	;volatile
 12015                           
 12016                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 12017  004048  90AC               	bcf	4012,0,c	;volatile
 12018                           
 12019                           ;eusart1.c: 99: unsigned int baud_rate;
 12020                           ;eusart1.c: 101: baud_rate = 417;
 12021  00404A  0E01               	movlw	1
 12022  00404C  6E14               	movwf	EUSART1_Initialize@baud_rate+1,c
 12023  00404E  0EA1               	movlw	161
 12024  004050  6E13               	movwf	EUSART1_Initialize@baud_rate,c
 12025                           
 12026                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 12027  004052  5014               	movf	EUSART1_Initialize@baud_rate+1,w,c
 12028  004054  6EB0               	movwf	4016,c	;volatile
 12029                           
 12030                           ;eusart1.c: 104: SPBRG = baud_rate;
 12031  004056  C013  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12032                           
 12033                           ;eusart1.c: 108: eusart1TxHead = 0;
 12034  00405A  0E00               	movlw	0
 12035  00405C  6E42               	movwf	_eusart1TxHead,c
 12036                           
 12037                           ;eusart1.c: 109: eusart1TxTail = 0;
 12038  00405E  0E00               	movlw	0
 12039  004060  6E41               	movwf	_eusart1TxTail,c
 12040                           
 12041                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12042  004062  0E7E               	movlw	126
 12043  004064  6E40               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12044                           
 12045                           ;eusart1.c: 112: eusart1RxHead = 0;
 12046  004066  0E00               	movlw	0
 12047  004068  6E3F               	movwf	_eusart1RxHead,c
 12048                           
 12049                           ;eusart1.c: 113: eusart1RxTail = 0;
 12050  00406A  0E00               	movlw	0
 12051  00406C  6E3E               	movwf	_eusart1RxTail,c
 12052                           
 12053                           ;eusart1.c: 114: eusart1RxCount = 0;
 12054  00406E  0E00               	movlw	0
 12055  004070  6E3D               	movwf	_eusart1RxCount,c	;volatile
 12056                           
 12057                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 12058  004072  8A9D               	bsf	3997,5,c	;volatile
 12059  004074  0012               	return		;funcret
 12060  004076                     __end_of_EUSART1_Initialize:
 12061                           	opt stack 0
 12062                           tblptru	equ	0xFF8
 12063                           tblptrh	equ	0xFF7
 12064                           tblptrl	equ	0xFF6
 12065                           tablat	equ	0xFF5
 12066                           prodh	equ	0xFF4
 12067                           prodl	equ	0xFF3
 12068                           intcon	equ	0xFF2
 12069                           intcon2	equ	0xFF1
 12070                           postinc0	equ	0xFEE
 12071                           wreg	equ	0xFE8
 12072                           postinc1	equ	0xFE6
 12073                           postdec1	equ	0xFE5
 12074                           fsr1h	equ	0xFE2
 12075                           fsr1l	equ	0xFE1
 12076                           indf2	equ	0xFDF
 12077                           postinc2	equ	0xFDE
 12078                           postdec2	equ	0xFDD
 12079                           fsr2h	equ	0xFDA
 12080                           fsr2l	equ	0xFD9
 12081                           status	equ	0xFD8
 12082                           
 12083 ;; *************** function _EEPROMxREAD *****************
 12084 ;; Defined at:
 12085 ;;		line 55 in file "../eeprom_settings.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;		None
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  i               2   28[COMRAM] unsigned int 
 12090 ;;  Data            2   26[COMRAM] unsigned int 
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  1    wreg      void 
 12093 ;; Registers used:
 12094 ;;		wreg, status,2, status,0, cstack
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12100 ;;      Params:         0       0       0       0       0       0       0       0       0
 12101 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12102 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12103 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12104 ;;Total ram usage:        4 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    4
 12107 ;; This function calls:
 12108 ;;		_Eeprom_Read
 12109 ;; This function is called by:
 12110 ;;		_main
 12111 ;; This function uses a non-reentrant model
 12112 ;;
 12113                           
 12114                           	psect	text33
 12115  0040B8                     __ptext33:
 12116                           	opt stack 0
 12117  0040B8                     _EEPROMxREAD:
 12118                           	opt stack 26
 12119                           
 12120                           ;eeprom_settings.c: 57: unsigned int i = 0;
 12121                           
 12122                           ;incstack = 0
 12123  0040B8  0E00               	movlw	0
 12124  0040BA  6E1E               	movwf	EEPROMxREAD@i+1,c
 12125  0040BC  0E00               	movlw	0
 12126  0040BE  6E1D               	movwf	EEPROMxREAD@i,c
 12127                           
 12128                           ;eeprom_settings.c: 58: unsigned int Data = 0;
 12129  0040C0  0E00               	movlw	0
 12130  0040C2  6E1C               	movwf	EEPROMxREAD@Data+1,c
 12131  0040C4  0E00               	movlw	0
 12132  0040C6  6E1B               	movwf	EEPROMxREAD@Data,c
 12133                           
 12134                           ;eeprom_settings.c: 60: for(i = 0; i < 28; i++ )
 12135  0040C8  0E00               	movlw	0
 12136  0040CA  6E1E               	movwf	EEPROMxREAD@i+1,c
 12137  0040CC  0E00               	movlw	0
 12138  0040CE  6E1D               	movwf	EEPROMxREAD@i,c
 12139  0040D0                     l6138:
 12140  0040D0  501E               	movf	EEPROMxREAD@i+1,w,c
 12141  0040D2  E111               	bnz	l743
 12142  0040D4  0E1C               	movlw	28
 12143  0040D6  5C1D               	subwf	EEPROMxREAD@i,w,c
 12144  0040D8  B0D8               	btfsc	status,0,c
 12145  0040DA  0012               	return	
 12146                           
 12147                           ;eeprom_settings.c: 61: {
 12148                           ;eeprom_settings.c: 62: Data = Eeprom_Read(i);
 12149  0040DC  C01D  F013         	movff	EEPROMxREAD@i,Eeprom_Read@Location
 12150  0040E0  C01E  F014         	movff	EEPROMxREAD@i+1,Eeprom_Read@Location+1
 12151  0040E4  ECF0  F01F         	call	_Eeprom_Read	;wreg free
 12152  0040E8  C013  F01B         	movff	?_Eeprom_Read,EEPROMxREAD@Data
 12153  0040EC  C014  F01C         	movff	?_Eeprom_Read+1,EEPROMxREAD@Data+1
 12154  0040F0  4A1D               	infsnz	EEPROMxREAD@i,f,c
 12155  0040F2  2A1E               	incf	EEPROMxREAD@i+1,f,c
 12156  0040F4  D7ED               	goto	l6138
 12157  0040F6                     l743:
 12158  0040F6  0012               	return		;funcret
 12159  0040F8                     __end_of_EEPROMxREAD:
 12160                           	opt stack 0
 12161                           tblptru	equ	0xFF8
 12162                           tblptrh	equ	0xFF7
 12163                           tblptrl	equ	0xFF6
 12164                           tablat	equ	0xFF5
 12165                           prodh	equ	0xFF4
 12166                           prodl	equ	0xFF3
 12167                           intcon	equ	0xFF2
 12168                           intcon2	equ	0xFF1
 12169                           postinc0	equ	0xFEE
 12170                           wreg	equ	0xFE8
 12171                           postinc1	equ	0xFE6
 12172                           postdec1	equ	0xFE5
 12173                           fsr1h	equ	0xFE2
 12174                           fsr1l	equ	0xFE1
 12175                           indf2	equ	0xFDF
 12176                           postinc2	equ	0xFDE
 12177                           postdec2	equ	0xFDD
 12178                           fsr2h	equ	0xFDA
 12179                           fsr2l	equ	0xFD9
 12180                           status	equ	0xFD8
 12181                           
 12182 ;; *************** function _Eeprom_Read *****************
 12183 ;; Defined at:
 12184 ;;		line 83 in file "../eeprom_settings.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;  Location        2   18[COMRAM] unsigned int 
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;  Return_Data     2   24[COMRAM] unsigned int 
 12189 ;;  Location_Hig    2   22[COMRAM] unsigned int 
 12190 ;;  Location_Low    2   20[COMRAM] unsigned int 
 12191 ;; Return value:  Size  Location     Type
 12192 ;;                  2   18[COMRAM] unsigned int 
 12193 ;; Registers used:
 12194 ;;		wreg, status,2, status,0
 12195 ;; Tracked objects:
 12196 ;;		On entry : 0/0
 12197 ;;		On exit  : 0/0
 12198 ;;		Unchanged: 0/0
 12199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12200 ;;      Params:         2       0       0       0       0       0       0       0       0
 12201 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12202 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12203 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12204 ;;Total ram usage:        8 bytes
 12205 ;; Hardware stack levels used:    1
 12206 ;; Hardware stack levels required when called:    3
 12207 ;; This function calls:
 12208 ;;		Nothing
 12209 ;; This function is called by:
 12210 ;;		_EEPROMxREAD
 12211 ;; This function uses a non-reentrant model
 12212 ;;
 12213                           
 12214                           	psect	text34
 12215  003FE0                     __ptext34:
 12216                           	opt stack 0
 12217  003FE0                     _Eeprom_Read:
 12218                           	opt stack 26
 12219                           
 12220                           ;eeprom_settings.c: 85: unsigned int Location_High_Byte = Location * 2;
 12221                           
 12222                           ;incstack = 0
 12223  003FE0  90D8               	bcf	status,0,c
 12224  003FE2  3413               	rlcf	Eeprom_Read@Location,w,c
 12225  003FE4  6E17               	movwf	Eeprom_Read@Location_High_Byte,c
 12226  003FE6  3414               	rlcf	Eeprom_Read@Location+1,w,c
 12227  003FE8  6E18               	movwf	Eeprom_Read@Location_High_Byte+1,c
 12228                           
 12229                           ;eeprom_settings.c: 86: unsigned int Location_Low_Byte = Location_High_Byte + 1;
 12230  003FEA  0E01               	movlw	1
 12231  003FEC  2417               	addwf	Eeprom_Read@Location_High_Byte,w,c
 12232  003FEE  6E15               	movwf	Eeprom_Read@Location_Low_Byte,c
 12233  003FF0  0E00               	movlw	0
 12234  003FF2  2018               	addwfc	Eeprom_Read@Location_High_Byte+1,w,c
 12235  003FF4  6E16               	movwf	Eeprom_Read@Location_Low_Byte+1,c
 12236                           
 12237                           ;eeprom_settings.c: 87: unsigned int Return_Data = 0;
 12238  003FF6  0E00               	movlw	0
 12239  003FF8  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12240  003FFA  0E00               	movlw	0
 12241  003FFC  6E19               	movwf	Eeprom_Read@Return_Data,c
 12242                           
 12243                           ;eeprom_settings.c: 89: EECON1bits.EEPGD = 0;
 12244  003FFE  9EA6               	bcf	4006,7,c	;volsfr
 12245                           
 12246                           ;eeprom_settings.c: 90: EEADR = Location_High_Byte;
 12247  004000  C017  FFA9         	movff	Eeprom_Read@Location_High_Byte,4009	;volatile
 12248                           
 12249                           ;eeprom_settings.c: 91: EECON1bits.RD = 1;
 12250  004004  80A6               	bsf	4006,0,c	;volsfr
 12251                           
 12252                           ;eeprom_settings.c: 92: Return_Data = EEDATA;
 12253  004006  CFA8 F019          	movff	4008,Eeprom_Read@Return_Data	;volatile
 12254  00400A  6A1A               	clrf	Eeprom_Read@Return_Data+1,c
 12255                           
 12256                           ;eeprom_settings.c: 93: Return_Data = Return_Data << 8;
 12257  00400C  5019               	movf	Eeprom_Read@Return_Data,w,c
 12258  00400E  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12259  004010  6A19               	clrf	Eeprom_Read@Return_Data,c
 12260                           
 12261                           ;eeprom_settings.c: 95: EECON1bits.EEPGD = 0;
 12262  004012  9EA6               	bcf	4006,7,c	;volsfr
 12263                           
 12264                           ;eeprom_settings.c: 96: EEADR = Location_Low_Byte;
 12265  004014  C015  FFA9         	movff	Eeprom_Read@Location_Low_Byte,4009	;volatile
 12266                           
 12267                           ;eeprom_settings.c: 97: EECON1bits.RD = 1;
 12268  004018  80A6               	bsf	4006,0,c	;volsfr
 12269                           
 12270                           ;eeprom_settings.c: 98: Return_Data = Return_Data | EEDATA;
 12271  00401A  5019               	movf	Eeprom_Read@Return_Data,w,c
 12272  00401C  10A8               	iorwf	4008,w,c	;volatile
 12273  00401E  6E19               	movwf	Eeprom_Read@Return_Data,c
 12274  004020  501A               	movf	Eeprom_Read@Return_Data+1,w,c
 12275  004022  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12276                           
 12277                           ;eeprom_settings.c: 100: return (Return_Data);
 12278  004024  C019  F013         	movff	Eeprom_Read@Return_Data,?_Eeprom_Read
 12279  004028  C01A  F014         	movff	Eeprom_Read@Return_Data+1,?_Eeprom_Read+1
 12280  00402C  0012               	return	
 12281  00402E                     __end_of_Eeprom_Read:
 12282                           	opt stack 0
 12283                           tblptru	equ	0xFF8
 12284                           tblptrh	equ	0xFF7
 12285                           tblptrl	equ	0xFF6
 12286                           tablat	equ	0xFF5
 12287                           prodh	equ	0xFF4
 12288                           prodl	equ	0xFF3
 12289                           intcon	equ	0xFF2
 12290                           intcon2	equ	0xFF1
 12291                           postinc0	equ	0xFEE
 12292                           wreg	equ	0xFE8
 12293                           postinc1	equ	0xFE6
 12294                           postdec1	equ	0xFE5
 12295                           fsr1h	equ	0xFE2
 12296                           fsr1l	equ	0xFE1
 12297                           indf2	equ	0xFDF
 12298                           postinc2	equ	0xFDE
 12299                           postdec2	equ	0xFDD
 12300                           fsr2h	equ	0xFDA
 12301                           fsr2l	equ	0xFD9
 12302                           status	equ	0xFD8
 12303                           
 12304 ;; *************** function _DIAGNOSTICxTOxPC *****************
 12305 ;; Defined at:
 12306 ;;		line 194 in file "../terminal.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;		None
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;		None
 12311 ;; Return value:  Size  Location     Type
 12312 ;;                  1    wreg      void 
 12313 ;; Registers used:
 12314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12315 ;; Tracked objects:
 12316 ;;		On entry : 0/0
 12317 ;;		On exit  : 0/0
 12318 ;;		Unchanged: 0/0
 12319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12320 ;;      Params:         0       0       0       0       0       0       0       0       0
 12321 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12322 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12323 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12324 ;;Total ram usage:        2 bytes
 12325 ;; Hardware stack levels used:    1
 12326 ;; Hardware stack levels required when called:    6
 12327 ;; This function calls:
 12328 ;;		_SendMessage
 12329 ;; This function is called by:
 12330 ;;		_main
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           	psect	text35
 12335  00261A                     __ptext35:
 12336                           	opt stack 0
 12337  00261A                     _DIAGNOSTICxTOxPC:
 12338                           	opt stack 24
 12339                           
 12340                           ;terminal.c: 196: if (DelayCounter > 10000){
 12341                           
 12342                           ;incstack = 0
 12343  00261A  0E11               	movlw	17
 12344  00261C  0100               	movlb	0	; () banked
 12345  00261E  5D6C               	subwf	_DelayCounter& (0+255),w,b
 12346  002620  0E27               	movlw	39
 12347  002622  596D               	subwfb	(_DelayCounter+1)& (0+255),w,b
 12348  002624  A0D8               	btfss	status,0,c
 12349  002626  D113               	goto	l643
 12350                           
 12351                           ; BSR set to: 0
 12352                           ;terminal.c: 197: DelayCounter = 0;
 12353  002628  0E00               	movlw	0
 12354  00262A  6F6D               	movwf	(_DelayCounter+1)& (0+255),b
 12355  00262C  0E00               	movlw	0
 12356  00262E  6F6C               	movwf	_DelayCounter& (0+255),b
 12357                           
 12358                           ;terminal.c: 199: switch (Diag_Comm2)
 12359  002630  D0E9               	goto	l644
 12360  002632                     
 12361                           ; BSR set to: 0
 12362                           
 12363                           ; BSR set to: 0
 12364  002632  0E8C               	movlw	low _Comm_List
 12365  002634  6F72               	movwf	_Pcomm_List& (0+255),b
 12366  002636  0E00               	movlw	high _Comm_List
 12367  002638  6F73               	movwf	(_Pcomm_List+1)& (0+255),b
 12368                           
 12369                           ;terminal.c: 202: Pcomm_List2 = &Comm_List[0][0];
 12370  00263A  0E8C               	movlw	low _Comm_List
 12371  00263C  6F70               	movwf	_Pcomm_List2& (0+255),b
 12372  00263E  0E00               	movlw	high _Comm_List
 12373  002640  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12374                           
 12375                           ; BSR set to: 0
 12376                           ;terminal.c: 203: Diag_Comm2 = 1;
 12377  002642  0E00               	movlw	0
 12378  002644  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12379  002646  0E01               	movlw	1
 12380  002648  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12381                           
 12382                           ;terminal.c: 204: break;
 12383  00264A  0012               	return	
 12384  00264C                     
 12385                           ; BSR set to: 0
 12386                           
 12387                           ; BSR set to: 0
 12388  00264C  0E8C               	movlw	low _Comm_List
 12389  00264E  6F70               	movwf	_Pcomm_List2& (0+255),b
 12390  002650  0E00               	movlw	high _Comm_List
 12391  002652  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12392                           
 12393                           ;terminal.c: 207: if (Pcomm_List2 != Pcomm_List)
 12394  002654  5172               	movf	_Pcomm_List& (0+255),w,b
 12395  002656  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12396  002658  E104               	bnz	u9140
 12397  00265A  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12398  00265C  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12399  00265E  B4D8               	btfsc	status,2,c
 12400  002660  0012               	return	
 12401  002662                     u9140:
 12402                           
 12403                           ; BSR set to: 0
 12404                           ;terminal.c: 208: {
 12405                           ;terminal.c: 209: SendMessage(Comm_List[0][0], Comm_List[0][1]);
 12406  002662  C08C  F0D8         	movff	_Comm_List,SendMessage@index
 12407  002666  C08D  F0D9         	movff	_Comm_List+1,SendMessage@index+1
 12408  00266A  C08E  F0DA         	movff	_Comm_List+2,SendMessage@value
 12409  00266E  C08F  F0DB         	movff	_Comm_List+3,SendMessage@value+1
 12410  002672  EC25  F021         	call	_SendMessage	;wreg free
 12411                           
 12412                           ;terminal.c: 210: Pcomm_List2+=2;
 12413  002676  0E04               	movlw	4
 12414  002678  0100               	movlb	0	; () banked
 12415  00267A  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12416  00267C  0E00               	movlw	0
 12417  00267E  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12418                           
 12419                           ; BSR set to: 0
 12420                           ;terminal.c: 211: Diag_Comm2 = 2;
 12421  002680  0E00               	movlw	0
 12422  002682  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12423  002684  0E02               	movlw	2
 12424  002686  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12425                           
 12426                           ; BSR set to: 0
 12427                           ;terminal.c: 212: }
 12428                           ;terminal.c: 213: break;
 12429  002688  0012               	return	
 12430  00268A                     
 12431                           ; BSR set to: 0
 12432                           
 12433                           ; BSR set to: 0
 12434  00268A  5172               	movf	_Pcomm_List& (0+255),w,b
 12435  00268C  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12436  00268E  E104               	bnz	u9150
 12437  002690  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12438  002692  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12439  002694  B4D8               	btfsc	status,2,c
 12440  002696  0012               	return	
 12441  002698                     u9150:
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;terminal.c: 216: {
 12445                           ;terminal.c: 217: SendMessage(Comm_List[1][0], Comm_List[1][1]);
 12446  002698  C090  F0D8         	movff	_Comm_List+4,SendMessage@index
 12447  00269C  C091  F0D9         	movff	_Comm_List+5,SendMessage@index+1
 12448  0026A0  C092  F0DA         	movff	_Comm_List+6,SendMessage@value
 12449  0026A4  C093  F0DB         	movff	_Comm_List+7,SendMessage@value+1
 12450  0026A8  EC25  F021         	call	_SendMessage	;wreg free
 12451                           
 12452                           ;terminal.c: 218: Pcomm_List2+=2;
 12453  0026AC  0E04               	movlw	4
 12454  0026AE  0100               	movlb	0	; () banked
 12455  0026B0  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12456  0026B2  0E00               	movlw	0
 12457  0026B4  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;terminal.c: 219: Diag_Comm2 = 3;
 12461  0026B6  0E00               	movlw	0
 12462  0026B8  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12463  0026BA  0E03               	movlw	3
 12464  0026BC  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12465                           
 12466                           ; BSR set to: 0
 12467                           ;terminal.c: 220: }
 12468                           ;terminal.c: 221: break;
 12469  0026BE  0012               	return	
 12470  0026C0                     
 12471                           ; BSR set to: 0
 12472                           
 12473                           ; BSR set to: 0
 12474  0026C0  5172               	movf	_Pcomm_List& (0+255),w,b
 12475  0026C2  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12476  0026C4  E104               	bnz	u9160
 12477  0026C6  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12478  0026C8  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12479  0026CA  B4D8               	btfsc	status,2,c
 12480  0026CC  0012               	return	
 12481  0026CE                     u9160:
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;terminal.c: 224: {
 12485                           ;terminal.c: 225: SendMessage(Comm_List[2][0], Comm_List[2][1]);
 12486  0026CE  C094  F0D8         	movff	_Comm_List+8,SendMessage@index
 12487  0026D2  C095  F0D9         	movff	_Comm_List+9,SendMessage@index+1
 12488  0026D6  C096  F0DA         	movff	_Comm_List+10,SendMessage@value
 12489  0026DA  C097  F0DB         	movff	_Comm_List+11,SendMessage@value+1
 12490  0026DE  EC25  F021         	call	_SendMessage	;wreg free
 12491                           
 12492                           ;terminal.c: 226: Pcomm_List2+=2;
 12493  0026E2  0E04               	movlw	4
 12494  0026E4  0100               	movlb	0	; () banked
 12495  0026E6  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12496  0026E8  0E00               	movlw	0
 12497  0026EA  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;terminal.c: 227: Diag_Comm2 = 4;
 12501  0026EC  0E00               	movlw	0
 12502  0026EE  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12503  0026F0  0E04               	movlw	4
 12504  0026F2  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;terminal.c: 228: }
 12508                           ;terminal.c: 229: break;
 12509  0026F4  0012               	return	
 12510  0026F6                     
 12511                           ; BSR set to: 0
 12512                           
 12513                           ; BSR set to: 0
 12514  0026F6  5172               	movf	_Pcomm_List& (0+255),w,b
 12515  0026F8  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12516  0026FA  E104               	bnz	u9170
 12517  0026FC  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12518  0026FE  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12519  002700  B4D8               	btfsc	status,2,c
 12520  002702  0012               	return	
 12521  002704                     u9170:
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;terminal.c: 232: {
 12525                           ;terminal.c: 233: SendMessage(Comm_List[3][0], Comm_List[3][1]);
 12526  002704  C098  F0D8         	movff	_Comm_List+12,SendMessage@index
 12527  002708  C099  F0D9         	movff	_Comm_List+13,SendMessage@index+1
 12528  00270C  C09A  F0DA         	movff	_Comm_List+14,SendMessage@value
 12529  002710  C09B  F0DB         	movff	_Comm_List+15,SendMessage@value+1
 12530  002714  EC25  F021         	call	_SendMessage	;wreg free
 12531                           
 12532                           ;terminal.c: 234: Pcomm_List2+=2;
 12533  002718  0E04               	movlw	4
 12534  00271A  0100               	movlb	0	; () banked
 12535  00271C  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12536  00271E  0E00               	movlw	0
 12537  002720  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;terminal.c: 235: Diag_Comm2 = 5;
 12541  002722  0E00               	movlw	0
 12542  002724  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12543  002726  0E05               	movlw	5
 12544  002728  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;terminal.c: 236: }
 12548                           ;terminal.c: 237: break;
 12549  00272A  0012               	return	
 12550  00272C                     
 12551                           ; BSR set to: 0
 12552                           
 12553                           ; BSR set to: 0
 12554  00272C  5172               	movf	_Pcomm_List& (0+255),w,b
 12555  00272E  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12556  002730  E104               	bnz	u9180
 12557  002732  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12558  002734  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12559  002736  B4D8               	btfsc	status,2,c
 12560  002738  0012               	return	
 12561  00273A                     u9180:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;terminal.c: 240: {
 12565                           ;terminal.c: 241: SendMessage(Comm_List[4][0], Comm_List[4][1]);
 12566  00273A  C09C  F0D8         	movff	_Comm_List+16,SendMessage@index
 12567  00273E  C09D  F0D9         	movff	_Comm_List+17,SendMessage@index+1
 12568  002742  C09E  F0DA         	movff	_Comm_List+18,SendMessage@value
 12569  002746  C09F  F0DB         	movff	_Comm_List+19,SendMessage@value+1
 12570  00274A  EC25  F021         	call	_SendMessage	;wreg free
 12571                           
 12572                           ;terminal.c: 242: Pcomm_List2+=2;
 12573  00274E  0E04               	movlw	4
 12574  002750  0100               	movlb	0	; () banked
 12575  002752  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12576  002754  0E00               	movlw	0
 12577  002756  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;terminal.c: 243: Diag_Comm2 = 6;
 12581  002758  0E00               	movlw	0
 12582  00275A  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12583  00275C  0E06               	movlw	6
 12584  00275E  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;terminal.c: 244: }
 12588                           ;terminal.c: 245: break;
 12589  002760  0012               	return	
 12590  002762                     
 12591                           ; BSR set to: 0
 12592                           
 12593                           ; BSR set to: 0
 12594  002762  5172               	movf	_Pcomm_List& (0+255),w,b
 12595  002764  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12596  002766  E104               	bnz	u9190
 12597  002768  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12598  00276A  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12599  00276C  B4D8               	btfsc	status,2,c
 12600  00276E  0012               	return	
 12601  002770                     u9190:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;terminal.c: 248: {
 12605                           ;terminal.c: 249: SendMessage(Comm_List[5][0], Comm_List[5][1]);
 12606  002770  C0A0  F0D8         	movff	_Comm_List+20,SendMessage@index
 12607  002774  C0A1  F0D9         	movff	_Comm_List+21,SendMessage@index+1
 12608  002778  C0A2  F0DA         	movff	_Comm_List+22,SendMessage@value
 12609  00277C  C0A3  F0DB         	movff	_Comm_List+23,SendMessage@value+1
 12610  002780  EC25  F021         	call	_SendMessage	;wreg free
 12611                           
 12612                           ;terminal.c: 250: Pcomm_List2+=2;
 12613  002784  0E04               	movlw	4
 12614  002786  0100               	movlb	0	; () banked
 12615  002788  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12616  00278A  0E00               	movlw	0
 12617  00278C  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;terminal.c: 251: Diag_Comm2 = 7;
 12621  00278E  0E00               	movlw	0
 12622  002790  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12623  002792  0E07               	movlw	7
 12624  002794  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;terminal.c: 252: }
 12628                           ;terminal.c: 253: break;
 12629  002796  0012               	return	
 12630  002798                     
 12631                           ; BSR set to: 0
 12632                           
 12633                           ; BSR set to: 0
 12634  002798  5172               	movf	_Pcomm_List& (0+255),w,b
 12635  00279A  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12636  00279C  E104               	bnz	u9200
 12637  00279E  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12638  0027A0  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12639  0027A2  B4D8               	btfsc	status,2,c
 12640  0027A4  0012               	return	
 12641  0027A6                     u9200:
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;terminal.c: 256: {
 12645                           ;terminal.c: 257: SendMessage(Comm_List[6][0], Comm_List[6][1]);
 12646  0027A6  C0A4  F0D8         	movff	_Comm_List+24,SendMessage@index
 12647  0027AA  C0A5  F0D9         	movff	_Comm_List+25,SendMessage@index+1
 12648  0027AE  C0A6  F0DA         	movff	_Comm_List+26,SendMessage@value
 12649  0027B2  C0A7  F0DB         	movff	_Comm_List+27,SendMessage@value+1
 12650  0027B6  EC25  F021         	call	_SendMessage	;wreg free
 12651                           
 12652                           ;terminal.c: 258: Pcomm_List2+=2;
 12653  0027BA  0E04               	movlw	4
 12654  0027BC  0100               	movlb	0	; () banked
 12655  0027BE  2770               	addwf	_Pcomm_List2& (0+255),f,b
 12656  0027C0  0E00               	movlw	0
 12657  0027C2  2371               	addwfc	(_Pcomm_List2+1)& (0+255),f,b
 12658                           
 12659                           ; BSR set to: 0
 12660                           ;terminal.c: 259: Diag_Comm2 = 8;
 12661  0027C4  0E00               	movlw	0
 12662  0027C6  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12663  0027C8  0E08               	movlw	8
 12664  0027CA  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;terminal.c: 260: }
 12668                           ;terminal.c: 261: break;
 12669  0027CC  0012               	return	
 12670  0027CE                     
 12671                           ; BSR set to: 0
 12672                           
 12673                           ; BSR set to: 0
 12674  0027CE  5172               	movf	_Pcomm_List& (0+255),w,b
 12675  0027D0  1970               	xorwf	_Pcomm_List2& (0+255),w,b
 12676  0027D2  E104               	bnz	u9210
 12677  0027D4  5173               	movf	(_Pcomm_List+1)& (0+255),w,b
 12678  0027D6  1971               	xorwf	(_Pcomm_List2+1)& (0+255),w,b
 12679  0027D8  B4D8               	btfsc	status,2,c
 12680  0027DA  0012               	return	
 12681  0027DC                     u9210:
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;terminal.c: 265: {
 12685                           ;terminal.c: 266: SendMessage(Comm_List[7][0], Comm_List[7][1]);
 12686  0027DC  C0A8  F0D8         	movff	_Comm_List+28,SendMessage@index
 12687  0027E0  C0A9  F0D9         	movff	_Comm_List+29,SendMessage@index+1
 12688  0027E4  C0AA  F0DA         	movff	_Comm_List+30,SendMessage@value
 12689  0027E8  C0AB  F0DB         	movff	_Comm_List+31,SendMessage@value+1
 12690  0027EC  EC25  F021         	call	_SendMessage	;wreg free
 12691                           
 12692                           ;terminal.c: 267: Pcomm_List2 = &Comm_List[0][0];
 12693  0027F0  0E8C               	movlw	low _Comm_List
 12694  0027F2  0100               	movlb	0	; () banked
 12695  0027F4  6F70               	movwf	_Pcomm_List2& (0+255),b
 12696  0027F6  0E00               	movlw	high _Comm_List
 12697  0027F8  6F71               	movwf	(_Pcomm_List2+1)& (0+255),b
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;terminal.c: 268: Diag_Comm2 = 1;
 12701  0027FA  0E00               	movlw	0
 12702  0027FC  6F6F               	movwf	(_Diag_Comm2+1)& (0+255),b
 12703  0027FE  0E01               	movlw	1
 12704  002800  6F6E               	movwf	_Diag_Comm2& (0+255),b
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;terminal.c: 273: }
 12708                           
 12709                           ; BSR set to: 0
 12710                           
 12711                           ;terminal.c: 272: default : break;
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;terminal.c: 269: }
 12715                           ;terminal.c: 270: break;
 12716  002802  0012               	return	
 12717  002804                     l644:
 12718                           
 12719                           ; BSR set to: 0
 12720                           
 12721                           ; BSR set to: 0
 12722  002804  C06E  F020         	movff	_Diag_Comm2,??_DIAGNOSTICxTOxPC
 12723  002808  C06F  F021         	movff	_Diag_Comm2+1,??_DIAGNOSTICxTOxPC+1
 12724                           
 12725                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12726                           ; Switch size 1, requested type "space"
 12727                           ; Number of cases is 1, Range of values is 0 to 0
 12728                           ; switch strategies available:
 12729                           ; Name         Instructions Cycles
 12730                           ; simple_byte            4     3 (average)
 12731                           ;	Chosen strategy is simple_byte
 12732  00280C  5021               	movf	??_DIAGNOSTICxTOxPC+1,w,c
 12733  00280E  0A00               	xorlw	0	; case 0
 12734  002810  A4D8               	btfss	status,2,c
 12735  002812  0012               	return	
 12736                           
 12737                           ; BSR set to: 0
 12738                           ; Switch size 1, requested type "space"
 12739                           ; Number of cases is 9, Range of values is 0 to 8
 12740                           ; switch strategies available:
 12741                           ; Name         Instructions Cycles
 12742                           ; simple_byte           28    15 (average)
 12743                           ;	Chosen strategy is simple_byte
 12744  002814  5020               	movf	??_DIAGNOSTICxTOxPC,w,c
 12745  002816  0A00               	xorlw	0	; case 0
 12746  002818  B4D8               	btfsc	status,2,c
 12747  00281A  D70B               	goto	l645
 12748  00281C  0A01               	xorlw	1	; case 1
 12749  00281E  B4D8               	btfsc	status,2,c
 12750  002820  D715               	goto	l647
 12751  002822  0A03               	xorlw	3	; case 2
 12752  002824  B4D8               	btfsc	status,2,c
 12753  002826  D731               	goto	l649
 12754  002828  0A01               	xorlw	1	; case 3
 12755  00282A  B4D8               	btfsc	status,2,c
 12756  00282C  D749               	goto	l651
 12757  00282E  0A07               	xorlw	7	; case 4
 12758  002830  B4D8               	btfsc	status,2,c
 12759  002832  D761               	goto	l653
 12760  002834  0A01               	xorlw	1	; case 5
 12761  002836  B4D8               	btfsc	status,2,c
 12762  002838  D779               	goto	l655
 12763  00283A  0A03               	xorlw	3	; case 6
 12764  00283C  B4D8               	btfsc	status,2,c
 12765  00283E  D791               	goto	l657
 12766  002840  0A01               	xorlw	1	; case 7
 12767  002842  B4D8               	btfsc	status,2,c
 12768  002844  D7A9               	goto	l659
 12769  002846  0A0F               	xorlw	15	; case 8
 12770  002848  A4D8               	btfss	status,2,c
 12771                           
 12772                           ; BSR set to: 0
 12773                           ;terminal.c: 274: }
 12774  00284A  0012               	return	
 12775  00284C  D7C0               	goto	l661
 12776  00284E                     l643:
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;terminal.c: 275: else{
 12780                           ;terminal.c: 276: DelayCounter++;
 12781                           
 12782                           ; BSR set to: 0
 12783  00284E  4B6C               	infsnz	_DelayCounter& (0+255),f,b
 12784  002850  2B6D               	incf	(_DelayCounter+1)& (0+255),f,b
 12785  002852  0012               	return	
 12786  002854                     __end_of_DIAGNOSTICxTOxPC:
 12787                           	opt stack 0
 12788                           tblptru	equ	0xFF8
 12789                           tblptrh	equ	0xFF7
 12790                           tblptrl	equ	0xFF6
 12791                           tablat	equ	0xFF5
 12792                           prodh	equ	0xFF4
 12793                           prodl	equ	0xFF3
 12794                           intcon	equ	0xFF2
 12795                           intcon2	equ	0xFF1
 12796                           postinc0	equ	0xFEE
 12797                           wreg	equ	0xFE8
 12798                           postinc1	equ	0xFE6
 12799                           postdec1	equ	0xFE5
 12800                           fsr1h	equ	0xFE2
 12801                           fsr1l	equ	0xFE1
 12802                           indf2	equ	0xFDF
 12803                           postinc2	equ	0xFDE
 12804                           postdec2	equ	0xFDD
 12805                           fsr2h	equ	0xFDA
 12806                           fsr2l	equ	0xFD9
 12807                           status	equ	0xFD8
 12808                           
 12809 ;; *************** function _SendMessage *****************
 12810 ;; Defined at:
 12811 ;;		line 185 in file "../terminal.c"
 12812 ;; Parameters:    Size  Location     Type
 12813 ;;  index           2   34[BANK0 ] unsigned int 
 12814 ;;  value           2   36[BANK0 ] unsigned int 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;		None
 12817 ;; Return value:  Size  Location     Type
 12818 ;;                  1    wreg      void 
 12819 ;; Registers used:
 12820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12821 ;; Tracked objects:
 12822 ;;		On entry : 0/0
 12823 ;;		On exit  : 0/0
 12824 ;;		Unchanged: 0/0
 12825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12826 ;;      Params:         0       4       0       0       0       0       0       0       0
 12827 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12828 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12829 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12830 ;;Total ram usage:        4 bytes
 12831 ;; Hardware stack levels used:    1
 12832 ;; Hardware stack levels required when called:    5
 12833 ;; This function calls:
 12834 ;;		_printf
 12835 ;; This function is called by:
 12836 ;;		_DIAGNOSTICxTOxPC
 12837 ;; This function uses a non-reentrant model
 12838 ;;
 12839                           
 12840                           	psect	text36
 12841  00424A                     __ptext36:
 12842                           	opt stack 0
 12843  00424A                     _SendMessage:
 12844                           	opt stack 24
 12845                           
 12846                           ;terminal.c: 191: printf("M#%d %d\r\n", index, value);
 12847                           
 12848                           ; BSR set to: 0
 12849                           ;incstack = 0
 12850  00424A  0E44               	movlw	low STR_8
 12851  00424C  0100               	movlb	0	; () banked
 12852  00424E  6FCB               	movwf	printf@f& (0+255),b
 12853  004250  0E08               	movlw	high STR_8
 12854  004252  6FCC               	movwf	(printf@f+1)& (0+255),b
 12855  004254  C0D8  F0CD         	movff	SendMessage@index,?_printf+2
 12856  004258  C0D9  F0CE         	movff	SendMessage@index+1,?_printf+3
 12857  00425C  C0DA  F0CF         	movff	SendMessage@value,?_printf+4
 12858  004260  C0DB  F0D0         	movff	SendMessage@value+1,?_printf+5
 12859  004264  ECFA  F019         	call	_printf	;wreg free
 12860  004268  0012               	return		;funcret
 12861  00426A                     __end_of_SendMessage:
 12862                           	opt stack 0
 12863                           tblptru	equ	0xFF8
 12864                           tblptrh	equ	0xFF7
 12865                           tblptrl	equ	0xFF6
 12866                           tablat	equ	0xFF5
 12867                           prodh	equ	0xFF4
 12868                           prodl	equ	0xFF3
 12869                           intcon	equ	0xFF2
 12870                           intcon2	equ	0xFF1
 12871                           postinc0	equ	0xFEE
 12872                           wreg	equ	0xFE8
 12873                           postinc1	equ	0xFE6
 12874                           postdec1	equ	0xFE5
 12875                           fsr1h	equ	0xFE2
 12876                           fsr1l	equ	0xFE1
 12877                           indf2	equ	0xFDF
 12878                           postinc2	equ	0xFDE
 12879                           postdec2	equ	0xFDD
 12880                           fsr2h	equ	0xFDA
 12881                           fsr2l	equ	0xFD9
 12882                           status	equ	0xFD8
 12883                           
 12884 ;; *************** function _printf *****************
 12885 ;; Defined at:
 12886 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 12887 ;; Parameters:    Size  Location     Type
 12888 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 12889 ;;		 -> STR_8(10), STR_7(7), STR_6(7), STR_5(7), 
 12890 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;  tmpval          4    0        struct .
 12893 ;;  cp              3    0        PTR const unsigned char 
 12894 ;;  val             2   31[BANK0 ] unsigned int 
 12895 ;;  ap              2   27[BANK0 ] PTR void [1]
 12896 ;;		 -> ?_printf(2), 
 12897 ;;  len             2    0        unsigned int 
 12898 ;;  c               1   33[BANK0 ] char 
 12899 ;;  prec            1   30[BANK0 ] char 
 12900 ;;  flag            1   29[BANK0 ] unsigned char 
 12901 ;; Return value:  Size  Location     Type
 12902 ;;                  2   21[BANK0 ] int 
 12903 ;; Registers used:
 12904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12905 ;; Tracked objects:
 12906 ;;		On entry : 0/0
 12907 ;;		On exit  : 0/0
 12908 ;;		Unchanged: 0/0
 12909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12910 ;;      Params:         0       6       0       0       0       0       0       0       0
 12911 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12912 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12913 ;;      Totals:         1      13       0       0       0       0       0       0       0
 12914 ;;Total ram usage:       14 bytes
 12915 ;; Hardware stack levels used:    1
 12916 ;; Hardware stack levels required when called:    4
 12917 ;; This function calls:
 12918 ;;		___lwdiv
 12919 ;;		___lwmod
 12920 ;;		_putch
 12921 ;; This function is called by:
 12922 ;;		_READxRECEIVEDxMESSAGE
 12923 ;;		_TranslateMessage
 12924 ;;		_SendMessage
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           	psect	text37
 12929  0033F4                     __ptext37:
 12930                           	opt stack 0
 12931  0033F4                     _printf:
 12932                           	opt stack 25
 12933                           
 12934                           ;doprnt.c: 466: va_list ap;
 12935                           ;doprnt.c: 499: signed char c;
 12936                           ;doprnt.c: 506: signed char prec;
 12937                           ;doprnt.c: 508: unsigned char flag;
 12938                           ;doprnt.c: 523: union {
 12939                           ;doprnt.c: 524: unsigned long vd;
 12940                           ;doprnt.c: 525: double integ;
 12941                           ;doprnt.c: 526: } tmpval;
 12942                           ;doprnt.c: 528: unsigned int val;
 12943                           ;doprnt.c: 529: unsigned len;
 12944                           ;doprnt.c: 530: const char * cp;
 12945                           ;doprnt.c: 533: *ap = __va_start();
 12946                           
 12947                           ;incstack = 0
 12948  0033F4  0ECD               	movlw	low (?_printf+2)
 12949  0033F6  0100               	movlb	0	; () banked
 12950  0033F8  6FD1               	movwf	printf@ap& (0+255),b
 12951  0033FA  0E00               	movlw	high (?_printf+2)
 12952  0033FC  6FD2               	movwf	(printf@ap+1)& (0+255),b
 12953                           
 12954                           ;doprnt.c: 536: while(c = *f++) {
 12955  0033FE  D081               	goto	u7040
 12956  003400                     
 12957                           ; BSR set to: 0
 12958                           ;doprnt.c: 538: if(c != '%')
 12959                           
 12960                           ; BSR set to: 0
 12961  003400  0E25               	movlw	37
 12962  003402  19D7               	xorwf	printf@c& (0+255),w,b
 12963  003404  B4D8               	btfsc	status,2,c
 12964  003406  D004               	goto	l1254
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;doprnt.c: 540: {
 12968                           ;doprnt.c: 541: (putch(c) );
 12969  003408  51D7               	movf	printf@c& (0+255),w,b
 12970  00340A  EC6C  F021         	call	_putch
 12971                           
 12972                           ;doprnt.c: 542: continue;
 12973  00340E  D079               	goto	u7040
 12974  003410                     l1254:
 12975                           
 12976                           ;doprnt.c: 543: }
 12977                           ;doprnt.c: 548: flag = 0;
 12978  003410  0E00               	movlw	0
 12979  003412  0100               	movlb	0	; () banked
 12980  003414  6FD3               	movwf	printf@flag& (0+255),b
 12981                           
 12982                           ; BSR set to: 0
 12983                           
 12984                           ; BSR set to: 0
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;doprnt.c: 822: }
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;doprnt.c: 813: continue;
 12991                           
 12992                           ;doprnt.c: 802: default:
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;doprnt.c: 698: case 'i':
 12996                           ;doprnt.c: 699: break;
 12997                           
 12998                           ; BSR set to: 0
 12999                           
 13000                           ;doprnt.c: 697: case 'd':
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;doprnt.c: 638: goto alldone;
 13004                           
 13005                           ;doprnt.c: 637: case 0:
 13006                           
 13007                           ;doprnt.c: 635: switch(c = *f++) {
 13008  003416  C0CB  FFF6         	movff	printf@f,tblptrl
 13009  00341A  C0CC  FFF7         	movff	printf@f+1,tblptrh
 13010  00341E  4BCB               	infsnz	printf@f& (0+255),f,b
 13011  003420  2BCC               	incf	(printf@f+1)& (0+255),f,b
 13012  003422                     	if	0	;tblptru may be non-zero
 13013  003422                     	endif
 13014  003422                     	if	0	;tblptru may be non-zero
 13015  003422                     	endif
 13016  003422  0008               	tblrd		*
 13017  003424  CFF5 F0D7          	movff	tablat,printf@c
 13018  003428  51D7               	movf	printf@c& (0+255),w,b
 13019                           
 13020                           ; Switch size 1, requested type "space"
 13021                           ; Number of cases is 3, Range of values is 0 to 105
 13022                           ; switch strategies available:
 13023                           ; Name         Instructions Cycles
 13024                           ; simple_byte           10     6 (average)
 13025                           ;	Chosen strategy is simple_byte
 13026  00342A  0A00               	xorlw	0	; case 0
 13027  00342C  B4D8               	btfsc	status,2,c
 13028  00342E  0012               	return	
 13029  003430  0A64               	xorlw	100	; case 100
 13030  003432  B4D8               	btfsc	status,2,c
 13031  003434  D003               	goto	l1260
 13032  003436  0A0D               	xorlw	13	; case 105
 13033  003438  A4D8               	btfss	status,2,c
 13034  00343A  D063               	goto	u7040
 13035  00343C                     l1260:
 13036                           
 13037                           ; BSR set to: 0
 13038                           ;doprnt.c: 1253: {
 13039                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13040                           
 13041                           ; BSR set to: 0
 13042  00343C  C0D1  FFD9         	movff	printf@ap,fsr2l
 13043  003440  C0D2  FFDA         	movff	printf@ap+1,fsr2h
 13044  003444  CFDE F0D5          	movff	postinc2,printf@val
 13045  003448  CFDD F0D6          	movff	postdec2,printf@val+1
 13046                           
 13047                           ; BSR set to: 0
 13048  00344C  0E02               	movlw	2
 13049  00344E  27D1               	addwf	printf@ap& (0+255),f,b
 13050  003450  0E00               	movlw	0
 13051  003452  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;doprnt.c: 1261: if((int)val < 0) {
 13055  003454  AFD6               	btfss	(printf@val+1)& (0+255),7,b
 13056  003456  D006               	goto	l1262
 13057                           
 13058                           ; BSR set to: 0
 13059                           ;doprnt.c: 1262: flag |= 0x03;
 13060  003458  0E03               	movlw	3
 13061  00345A  13D3               	iorwf	printf@flag& (0+255),f,b
 13062                           
 13063                           ; BSR set to: 0
 13064                           ;doprnt.c: 1263: val = -val;
 13065  00345C  6DD5               	negf	printf@val& (0+255),b
 13066  00345E  1FD6               	comf	(printf@val+1)& (0+255),f,b
 13067  003460  B0D8               	btfsc	status,0,c
 13068  003462  2BD6               	incf	(printf@val+1)& (0+255),f,b
 13069  003464                     l1262:
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;doprnt.c: 1264: }
 13073                           ;doprnt.c: 1266: }
 13074                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13075                           
 13076                           ; BSR set to: 0
 13077  003464  0E01               	movlw	1
 13078  003466  6FD7               	movwf	printf@c& (0+255),b
 13079  003468                     l8028:
 13080                           
 13081                           ; BSR set to: 0
 13082  003468  0E05               	movlw	5
 13083  00346A  19D7               	xorwf	printf@c& (0+255),w,b
 13084  00346C  B4D8               	btfsc	status,2,c
 13085  00346E  D012               	goto	u7020
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;doprnt.c: 1306: if(val < dpowers[c])
 13089                           
 13090                           ; BSR set to: 0
 13091                           
 13092                           ; BSR set to: 0
 13093  003470  51D7               	movf	printf@c& (0+255),w,b
 13094  003472  0D02               	mullw	2
 13095  003474  0E39               	movlw	low _dpowers
 13096  003476  24F3               	addwf	prodl,w,c
 13097  003478  6EF6               	movwf	tblptrl,c
 13098  00347A  0E08               	movlw	high _dpowers
 13099  00347C  20F4               	addwfc	prodh,w,c
 13100  00347E  6EF7               	movwf	tblptrh,c
 13101  003480                     	if	0	;There are less than 3 active tblptr bytes
 13102  003480                     	endif
 13103  003480  0009               	tblrd		*+
 13104  003482  50F5               	movf	tablat,w,c
 13105  003484  5DD5               	subwf	printf@val& (0+255),w,b
 13106  003486  0009               	tblrd		*+
 13107  003488  50F5               	movf	tablat,w,c
 13108  00348A  59D6               	subwfb	(printf@val+1)& (0+255),w,b
 13109  00348C  A0D8               	btfss	status,0,c
 13110  00348E  D002               	goto	u7020
 13111                           
 13112                           ; BSR set to: 0
 13113                           
 13114                           ; BSR set to: 0
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;doprnt.c: 1307: break;
 13118  003490  2BD7               	incf	printf@c& (0+255),f,b
 13119  003492  D7EA               	goto	l8028
 13120  003494                     u7020:
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;doprnt.c: 1422: {
 13124                           ;doprnt.c: 1438: if(flag & 0x03)
 13125                           
 13126                           ; BSR set to: 0
 13127  003494  C0D3  F01F         	movff	printf@flag,??_printf
 13128  003498  0E03               	movlw	3
 13129  00349A  161F               	andwf	??_printf,f,c
 13130  00349C  B4D8               	btfsc	status,2,c
 13131  00349E  D003               	goto	l1266
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;doprnt.c: 1439: (putch('-') );
 13135  0034A0  0E2D               	movlw	45
 13136  0034A2  EC6C  F021         	call	_putch
 13137  0034A6                     l1266:
 13138                           
 13139                           ;doprnt.c: 1469: }
 13140                           ;doprnt.c: 1472: prec = c;
 13141  0034A6  C0D7  F0D4         	movff	printf@c,printf@prec
 13142                           
 13143                           ;doprnt.c: 1474: while(prec--) {
 13144  0034AA  D026               	goto	l1267
 13145  0034AC                     
 13146                           ;doprnt.c: 1478: {
 13147                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13148  0034AC  0100               	movlb	0	; () banked
 13149  0034AE  51D4               	movf	printf@prec& (0+255),w,b
 13150  0034B0  0D02               	mullw	2
 13151  0034B2  0E39               	movlw	low _dpowers
 13152  0034B4  24F3               	addwf	prodl,w,c
 13153  0034B6  6EF6               	movwf	tblptrl,c
 13154  0034B8  0E08               	movlw	high _dpowers
 13155  0034BA  20F4               	addwfc	prodh,w,c
 13156  0034BC  6EF7               	movwf	tblptrh,c
 13157  0034BE                     	if	0	;There are less than 3 active tblptr bytes
 13158  0034BE                     	endif
 13159  0034BE  0009               	tblrd		*+
 13160  0034C0  CFF5 F015          	movff	tablat,___lwdiv@divisor
 13161  0034C4  000A               	tblrd		*-
 13162  0034C6  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
 13163  0034CA  C0D5  F013         	movff	printf@val,___lwdiv@dividend
 13164  0034CE  C0D6  F014         	movff	printf@val+1,___lwdiv@dividend+1
 13165  0034D2  EC9F  F01F         	call	___lwdiv	;wreg free
 13166  0034D6  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
 13167  0034DA  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
 13168  0034DE  0E00               	movlw	0
 13169  0034E0  6E1D               	movwf	___lwmod@divisor+1,c
 13170  0034E2  0E0A               	movlw	10
 13171  0034E4  6E1C               	movwf	___lwmod@divisor,c
 13172  0034E6  EC3B  F020         	call	___lwmod	;wreg free
 13173  0034EA  501A               	movf	?___lwmod,w,c
 13174  0034EC  0F30               	addlw	48
 13175  0034EE  0100               	movlb	0	; () banked
 13176  0034F0  6FD7               	movwf	printf@c& (0+255),b
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;doprnt.c: 1523: }
 13180                           ;doprnt.c: 1524: (putch(c) );
 13181  0034F2  51D7               	movf	printf@c& (0+255),w,b
 13182  0034F4  EC6C  F021         	call	_putch
 13183  0034F8                     l1267:
 13184  0034F8  0100               	movlb	0	; () banked
 13185  0034FA  07D4               	decf	printf@prec& (0+255),f,b
 13186  0034FC  29D4               	incf	printf@prec& (0+255),w,b
 13187  0034FE  A4D8               	btfss	status,2,c
 13188  003500  D7D5               	goto	l1268
 13189  003502                     u7040:
 13190                           
 13191                           ; BSR set to: 0
 13192                           
 13193                           ; BSR set to: 0
 13194  003502  C0CB  FFF6         	movff	printf@f,tblptrl
 13195  003506  C0CC  FFF7         	movff	printf@f+1,tblptrh
 13196  00350A  0100               	movlb	0	; () banked
 13197  00350C  4BCB               	infsnz	printf@f& (0+255),f,b
 13198  00350E  2BCC               	incf	(printf@f+1)& (0+255),f,b
 13199  003510                     	if	0	;tblptru may be non-zero
 13200  003510                     	endif
 13201  003510                     	if	0	;tblptru may be non-zero
 13202  003510                     	endif
 13203  003510  0008               	tblrd		*
 13204  003512  CFF5 F0D7          	movff	tablat,printf@c
 13205  003516  51D7               	movf	printf@c& (0+255),w,b
 13206  003518  B4D8               	btfsc	status,2,c
 13207  00351A  0012               	return	
 13208  00351C  D771               	goto	l1253
 13209  00351E                     __end_of_printf:
 13210                           	opt stack 0
 13211                           tblptru	equ	0xFF8
 13212                           tblptrh	equ	0xFF7
 13213                           tblptrl	equ	0xFF6
 13214                           tablat	equ	0xFF5
 13215                           prodh	equ	0xFF4
 13216                           prodl	equ	0xFF3
 13217                           intcon	equ	0xFF2
 13218                           intcon2	equ	0xFF1
 13219                           postinc0	equ	0xFEE
 13220                           wreg	equ	0xFE8
 13221                           postinc1	equ	0xFE6
 13222                           postdec1	equ	0xFE5
 13223                           fsr1h	equ	0xFE2
 13224                           fsr1l	equ	0xFE1
 13225                           indf2	equ	0xFDF
 13226                           postinc2	equ	0xFDE
 13227                           postdec2	equ	0xFDD
 13228                           fsr2h	equ	0xFDA
 13229                           fsr2l	equ	0xFD9
 13230                           status	equ	0xFD8
 13231                           
 13232 ;; *************** function _putch *****************
 13233 ;; Defined at:
 13234 ;;		line 177 in file "../eusart1.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;  data            1    wreg     unsigned char 
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;  data            1   18[COMRAM] unsigned char 
 13239 ;; Return value:  Size  Location     Type
 13240 ;;                  1    wreg      void 
 13241 ;; Registers used:
 13242 ;;		wreg
 13243 ;; Tracked objects:
 13244 ;;		On entry : 0/0
 13245 ;;		On exit  : 0/0
 13246 ;;		Unchanged: 0/0
 13247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13248 ;;      Params:         0       0       0       0       0       0       0       0       0
 13249 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13250 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13251 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13252 ;;Total ram usage:        1 bytes
 13253 ;; Hardware stack levels used:    1
 13254 ;; Hardware stack levels required when called:    3
 13255 ;; This function calls:
 13256 ;;		Nothing
 13257 ;; This function is called by:
 13258 ;;		_printf
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           	psect	text38
 13263  0042D8                     __ptext38:
 13264                           	opt stack 0
 13265  0042D8                     _putch:
 13266                           	opt stack 25
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;incstack = 0
 13270                           ;putch@data stored from wreg
 13271  0042D8  6E13               	movwf	putch@data,c
 13272  0042DA                     
 13273                           ;eusart1.c: 179: continue;
 13274                           
 13275                           ;eusart1.c: 178: while(! TXIF)
 13276  0042DA  A89E               	btfss	3998,4,c	;volatile
 13277  0042DC  D7FE               	goto	l7464
 13278                           
 13279                           ;eusart1.c: 180: TXREG1 = data;
 13280  0042DE  C013  FFAD         	movff	putch@data,4013	;volatile
 13281  0042E2  0012               	return		;funcret
 13282  0042E4                     __end_of_putch:
 13283                           	opt stack 0
 13284                           tblptru	equ	0xFF8
 13285                           tblptrh	equ	0xFF7
 13286                           tblptrl	equ	0xFF6
 13287                           tablat	equ	0xFF5
 13288                           prodh	equ	0xFF4
 13289                           prodl	equ	0xFF3
 13290                           intcon	equ	0xFF2
 13291                           intcon2	equ	0xFF1
 13292                           postinc0	equ	0xFEE
 13293                           wreg	equ	0xFE8
 13294                           postinc1	equ	0xFE6
 13295                           postdec1	equ	0xFE5
 13296                           fsr1h	equ	0xFE2
 13297                           fsr1l	equ	0xFE1
 13298                           indf2	equ	0xFDF
 13299                           postinc2	equ	0xFDE
 13300                           postdec2	equ	0xFDD
 13301                           fsr2h	equ	0xFDA
 13302                           fsr2l	equ	0xFD9
 13303                           status	equ	0xFD8
 13304                           
 13305 ;; *************** function ___lwmod *****************
 13306 ;; Defined at:
 13307 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13308 ;; Parameters:    Size  Location     Type
 13309 ;;  dividend        2   25[COMRAM] unsigned int 
 13310 ;;  divisor         2   27[COMRAM] unsigned int 
 13311 ;; Auto vars:     Size  Location     Type
 13312 ;;  counter         1   29[COMRAM] unsigned char 
 13313 ;; Return value:  Size  Location     Type
 13314 ;;                  2   25[COMRAM] unsigned int 
 13315 ;; Registers used:
 13316 ;;		wreg, status,2, status,0
 13317 ;; Tracked objects:
 13318 ;;		On entry : 0/0
 13319 ;;		On exit  : 0/0
 13320 ;;		Unchanged: 0/0
 13321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13322 ;;      Params:         4       0       0       0       0       0       0       0       0
 13323 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13324 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13325 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13326 ;;Total ram usage:        5 bytes
 13327 ;; Hardware stack levels used:    1
 13328 ;; Hardware stack levels required when called:    3
 13329 ;; This function calls:
 13330 ;;		Nothing
 13331 ;; This function is called by:
 13332 ;;		_printf
 13333 ;; This function uses a non-reentrant model
 13334 ;;
 13335                           
 13336                           	psect	text39
 13337  004076                     __ptext39:
 13338                           	opt stack 0
 13339  004076                     ___lwmod:
 13340                           	opt stack 25
 13341                           
 13342                           ;incstack = 0
 13343  004076  501C               	movf	___lwmod@divisor,w,c
 13344  004078  101D               	iorwf	___lwmod@divisor+1,w,c
 13345  00407A  B4D8               	btfsc	status,2,c
 13346  00407C  D018               	goto	l1717
 13347  00407E  0E01               	movlw	1
 13348  004080  6E1E               	movwf	___lwmod@counter,c
 13349  004082  D004               	goto	l1712
 13350  004084  90D8               	bcf	status,0,c
 13351  004086  361C               	rlcf	___lwmod@divisor,f,c
 13352  004088  361D               	rlcf	___lwmod@divisor+1,f,c
 13353  00408A  2A1E               	incf	___lwmod@counter,f,c
 13354  00408C                     l1712:
 13355  00408C  AE1D               	btfss	___lwmod@divisor+1,7,c
 13356  00408E  D7FA               	goto	l1713
 13357  004090                     u6460:
 13358  004090  501C               	movf	___lwmod@divisor,w,c
 13359  004092  5C1A               	subwf	___lwmod@dividend,w,c
 13360  004094  501D               	movf	___lwmod@divisor+1,w,c
 13361  004096  581B               	subwfb	___lwmod@dividend+1,w,c
 13362  004098  A0D8               	btfss	status,0,c
 13363  00409A  D004               	goto	l1716
 13364  00409C  501C               	movf	___lwmod@divisor,w,c
 13365  00409E  5E1A               	subwf	___lwmod@dividend,f,c
 13366  0040A0  501D               	movf	___lwmod@divisor+1,w,c
 13367  0040A2  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13368  0040A4                     l1716:
 13369  0040A4  90D8               	bcf	status,0,c
 13370  0040A6  321D               	rrcf	___lwmod@divisor+1,f,c
 13371  0040A8  321C               	rrcf	___lwmod@divisor,f,c
 13372  0040AA  2E1E               	decfsz	___lwmod@counter,f,c
 13373  0040AC  D7F1               	goto	u6460
 13374  0040AE                     l1717:
 13375  0040AE  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13376  0040B2  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13377  0040B6  0012               	return		;funcret
 13378  0040B8                     __end_of___lwmod:
 13379                           	opt stack 0
 13380                           tblptru	equ	0xFF8
 13381                           tblptrh	equ	0xFF7
 13382                           tblptrl	equ	0xFF6
 13383                           tablat	equ	0xFF5
 13384                           prodh	equ	0xFF4
 13385                           prodl	equ	0xFF3
 13386                           intcon	equ	0xFF2
 13387                           intcon2	equ	0xFF1
 13388                           postinc0	equ	0xFEE
 13389                           wreg	equ	0xFE8
 13390                           postinc1	equ	0xFE6
 13391                           postdec1	equ	0xFE5
 13392                           fsr1h	equ	0xFE2
 13393                           fsr1l	equ	0xFE1
 13394                           indf2	equ	0xFDF
 13395                           postinc2	equ	0xFDE
 13396                           postdec2	equ	0xFDD
 13397                           fsr2h	equ	0xFDA
 13398                           fsr2l	equ	0xFD9
 13399                           status	equ	0xFD8
 13400                           
 13401 ;; *************** function ___lwdiv *****************
 13402 ;; Defined at:
 13403 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13404 ;; Parameters:    Size  Location     Type
 13405 ;;  dividend        2   18[COMRAM] unsigned int 
 13406 ;;  divisor         2   20[COMRAM] unsigned int 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;  quotient        2   23[COMRAM] unsigned int 
 13409 ;;  counter         1   22[COMRAM] unsigned char 
 13410 ;; Return value:  Size  Location     Type
 13411 ;;                  2   18[COMRAM] unsigned int 
 13412 ;; Registers used:
 13413 ;;		wreg, status,2, status,0
 13414 ;; Tracked objects:
 13415 ;;		On entry : 0/0
 13416 ;;		On exit  : 0/0
 13417 ;;		Unchanged: 0/0
 13418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13419 ;;      Params:         4       0       0       0       0       0       0       0       0
 13420 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13421 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13422 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13423 ;;Total ram usage:        7 bytes
 13424 ;; Hardware stack levels used:    1
 13425 ;; Hardware stack levels required when called:    3
 13426 ;; This function calls:
 13427 ;;		Nothing
 13428 ;; This function is called by:
 13429 ;;		_printf
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           	psect	text40
 13434  003F3E                     __ptext40:
 13435                           	opt stack 0
 13436  003F3E                     ___lwdiv:
 13437                           	opt stack 25
 13438                           
 13439                           ;incstack = 0
 13440  003F3E  0E00               	movlw	0
 13441  003F40  6E19               	movwf	___lwdiv@quotient+1,c
 13442  003F42  0E00               	movlw	0
 13443  003F44  6E18               	movwf	___lwdiv@quotient,c
 13444  003F46  5015               	movf	___lwdiv@divisor,w,c
 13445  003F48  1016               	iorwf	___lwdiv@divisor+1,w,c
 13446  003F4A  B4D8               	btfsc	status,2,c
 13447  003F4C  D01C               	goto	l1707
 13448  003F4E  0E01               	movlw	1
 13449  003F50  6E17               	movwf	___lwdiv@counter,c
 13450  003F52  D004               	goto	l1702
 13451  003F54  90D8               	bcf	status,0,c
 13452  003F56  3615               	rlcf	___lwdiv@divisor,f,c
 13453  003F58  3616               	rlcf	___lwdiv@divisor+1,f,c
 13454  003F5A  2A17               	incf	___lwdiv@counter,f,c
 13455  003F5C                     l1702:
 13456  003F5C  AE16               	btfss	___lwdiv@divisor+1,7,c
 13457  003F5E  D7FA               	goto	l1703
 13458  003F60                     u6430:
 13459  003F60  90D8               	bcf	status,0,c
 13460  003F62  3618               	rlcf	___lwdiv@quotient,f,c
 13461  003F64  3619               	rlcf	___lwdiv@quotient+1,f,c
 13462  003F66  5015               	movf	___lwdiv@divisor,w,c
 13463  003F68  5C13               	subwf	___lwdiv@dividend,w,c
 13464  003F6A  5016               	movf	___lwdiv@divisor+1,w,c
 13465  003F6C  5814               	subwfb	___lwdiv@dividend+1,w,c
 13466  003F6E  A0D8               	btfss	status,0,c
 13467  003F70  D005               	goto	l1706
 13468  003F72  5015               	movf	___lwdiv@divisor,w,c
 13469  003F74  5E13               	subwf	___lwdiv@dividend,f,c
 13470  003F76  5016               	movf	___lwdiv@divisor+1,w,c
 13471  003F78  5A14               	subwfb	___lwdiv@dividend+1,f,c
 13472  003F7A  8018               	bsf	___lwdiv@quotient,0,c
 13473  003F7C                     l1706:
 13474  003F7C  90D8               	bcf	status,0,c
 13475  003F7E  3216               	rrcf	___lwdiv@divisor+1,f,c
 13476  003F80  3215               	rrcf	___lwdiv@divisor,f,c
 13477  003F82  2E17               	decfsz	___lwdiv@counter,f,c
 13478  003F84  D7ED               	goto	u6430
 13479  003F86                     l1707:
 13480  003F86  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
 13481  003F8A  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13482  003F8E  0012               	return		;funcret
 13483  003F90                     __end_of___lwdiv:
 13484                           	opt stack 0
 13485                           tblptru	equ	0xFF8
 13486                           tblptrh	equ	0xFF7
 13487                           tblptrl	equ	0xFF6
 13488                           tablat	equ	0xFF5
 13489                           prodh	equ	0xFF4
 13490                           prodl	equ	0xFF3
 13491                           intcon	equ	0xFF2
 13492                           intcon2	equ	0xFF1
 13493                           postinc0	equ	0xFEE
 13494                           wreg	equ	0xFE8
 13495                           postinc1	equ	0xFE6
 13496                           postdec1	equ	0xFE5
 13497                           fsr1h	equ	0xFE2
 13498                           fsr1l	equ	0xFE1
 13499                           indf2	equ	0xFDF
 13500                           postinc2	equ	0xFDE
 13501                           postdec2	equ	0xFDD
 13502                           fsr2h	equ	0xFDA
 13503                           fsr2l	equ	0xFD9
 13504                           status	equ	0xFD8
 13505                           
 13506 ;; *************** function _APIxInitialize *****************
 13507 ;; Defined at:
 13508 ;;		line 33 in file "../api.c"
 13509 ;; Parameters:    Size  Location     Type
 13510 ;;		None
 13511 ;; Auto vars:     Size  Location     Type
 13512 ;;  i               2   18[COMRAM] unsigned int 
 13513 ;; Return value:  Size  Location     Type
 13514 ;;                  1    wreg      void 
 13515 ;; Registers used:
 13516 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13517 ;; Tracked objects:
 13518 ;;		On entry : 0/0
 13519 ;;		On exit  : 0/0
 13520 ;;		Unchanged: 0/0
 13521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13522 ;;      Params:         0       0       0       0       0       0       0       0       0
 13523 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13524 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13525 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13526 ;;Total ram usage:        2 bytes
 13527 ;; Hardware stack levels used:    1
 13528 ;; Hardware stack levels required when called:    3
 13529 ;; This function calls:
 13530 ;;		Nothing
 13531 ;; This function is called by:
 13532 ;;		_main
 13533 ;; This function uses a non-reentrant model
 13534 ;;
 13535                           
 13536                           	psect	text41
 13537  001D54                     __ptext41:
 13538                           	opt stack 0
 13539  001D54                     _APIxInitialize:
 13540                           	opt stack 27
 13541                           
 13542                           ;api.c: 35: unsigned int i;
 13543                           ;api.c: 36: for(i = 0; i < (89); i++ )
 13544                           
 13545                           ;incstack = 0
 13546  001D54  0E00               	movlw	0
 13547  001D56  6E14               	movwf	APIxInitialize@i+1,c
 13548  001D58  0E00               	movlw	0
 13549  001D5A  6E13               	movwf	APIxInitialize@i,c
 13550  001D5C                     l6098:
 13551  001D5C  5014               	movf	APIxInitialize@i+1,w,c
 13552  001D5E  E12E               	bnz	l6108
 13553  001D60  0E59               	movlw	89
 13554  001D62  5C13               	subwf	APIxInitialize@i,w,c
 13555  001D64  B0D8               	btfsc	status,0,c
 13556  001D66  D02A               	goto	u5160
 13557                           
 13558                           ;api.c: 37: {
 13559                           ;api.c: 38: API_RW[i] = 0;
 13560  001D68  90D8               	bcf	status,0,c
 13561  001D6A  3413               	rlcf	APIxInitialize@i,w,c
 13562  001D6C  6ED9               	movwf	fsr2l,c
 13563  001D6E  3414               	rlcf	APIxInitialize@i+1,w,c
 13564  001D70  6EDA               	movwf	fsr2h,c
 13565  001D72  0E00               	movlw	low _API_RW
 13566  001D74  26D9               	addwf	fsr2l,f,c
 13567  001D76  0E02               	movlw	high _API_RW
 13568  001D78  22DA               	addwfc	fsr2h,f,c
 13569  001D7A  0E00               	movlw	0
 13570  001D7C  6EDE               	movwf	postinc2,c
 13571  001D7E  0E00               	movlw	0
 13572  001D80  6EDD               	movwf	postdec2,c
 13573                           
 13574                           ;api.c: 39: API[i] = 0;
 13575  001D82  90D8               	bcf	status,0,c
 13576  001D84  3413               	rlcf	APIxInitialize@i,w,c
 13577  001D86  6ED9               	movwf	fsr2l,c
 13578  001D88  3414               	rlcf	APIxInitialize@i+1,w,c
 13579  001D8A  6EDA               	movwf	fsr2h,c
 13580  001D8C  0E00               	movlw	low _API
 13581  001D8E  26D9               	addwf	fsr2l,f,c
 13582  001D90  0E01               	movlw	high _API
 13583  001D92  22DA               	addwfc	fsr2h,f,c
 13584  001D94  0E00               	movlw	0
 13585  001D96  6EDE               	movwf	postinc2,c
 13586  001D98  0E00               	movlw	0
 13587  001D9A  6EDD               	movwf	postdec2,c
 13588                           
 13589                           ;api.c: 40: API_EEPROM[i] = 0;
 13590  001D9C  90D8               	bcf	status,0,c
 13591  001D9E  3413               	rlcf	APIxInitialize@i,w,c
 13592  001DA0  6ED9               	movwf	fsr2l,c
 13593  001DA2  3414               	rlcf	APIxInitialize@i+1,w,c
 13594  001DA4  6EDA               	movwf	fsr2h,c
 13595  001DA6  0E00               	movlw	low _API_EEPROM
 13596  001DA8  26D9               	addwf	fsr2l,f,c
 13597  001DAA  0E03               	movlw	high _API_EEPROM
 13598  001DAC  22DA               	addwfc	fsr2h,f,c
 13599  001DAE  0E00               	movlw	0
 13600  001DB0  6EDE               	movwf	postinc2,c
 13601  001DB2  0E00               	movlw	0
 13602  001DB4  6EDD               	movwf	postdec2,c
 13603  001DB6  4A13               	infsnz	APIxInitialize@i,f,c
 13604  001DB8  2A14               	incf	APIxInitialize@i+1,f,c
 13605  001DBA  D7D0               	goto	l6098
 13606  001DBC                     u5160:
 13607  001DBC                     l6108:
 13608                           
 13609                           ;api.c: 41: }
 13610                           ;api.c: 44: API_RW[16] = 0;
 13611  001DBC  0E00               	movlw	0
 13612  001DBE  0102               	movlb	2	; () banked
 13613  001DC0  6F21               	movwf	(_API_RW+33)& (0+255),b
 13614  001DC2  0E00               	movlw	0
 13615  001DC4  6F20               	movwf	(_API_RW+32)& (0+255),b
 13616                           
 13617                           ;api.c: 45: API_RW[18] = 1;
 13618  001DC6  0E00               	movlw	0
 13619  001DC8  6F25               	movwf	(_API_RW+37)& (0+255),b
 13620  001DCA  0E01               	movlw	1
 13621  001DCC  6F24               	movwf	(_API_RW+36)& (0+255),b
 13622                           
 13623                           ;api.c: 46: API_RW[19] = 1;
 13624  001DCE  0E00               	movlw	0
 13625  001DD0  6F27               	movwf	(_API_RW+39)& (0+255),b
 13626  001DD2  0E01               	movlw	1
 13627  001DD4  6F26               	movwf	(_API_RW+38)& (0+255),b
 13628                           
 13629                           ;api.c: 47: API_RW[20] = 1;
 13630  001DD6  0E00               	movlw	0
 13631  001DD8  6F29               	movwf	(_API_RW+41)& (0+255),b
 13632  001DDA  0E01               	movlw	1
 13633  001DDC  6F28               	movwf	(_API_RW+40)& (0+255),b
 13634                           
 13635                           ;api.c: 48: API_RW[21] = 1;
 13636  001DDE  0E00               	movlw	0
 13637  001DE0  6F2B               	movwf	(_API_RW+43)& (0+255),b
 13638  001DE2  0E01               	movlw	1
 13639  001DE4  6F2A               	movwf	(_API_RW+42)& (0+255),b
 13640                           
 13641                           ;api.c: 49: API_RW[22] = 1;
 13642  001DE6  0E00               	movlw	0
 13643  001DE8  6F2D               	movwf	(_API_RW+45)& (0+255),b
 13644  001DEA  0E01               	movlw	1
 13645  001DEC  6F2C               	movwf	(_API_RW+44)& (0+255),b
 13646                           
 13647                           ;api.c: 50: API_RW[23] = 1;
 13648  001DEE  0E00               	movlw	0
 13649  001DF0  6F2F               	movwf	(_API_RW+47)& (0+255),b
 13650  001DF2  0E01               	movlw	1
 13651  001DF4  6F2E               	movwf	(_API_RW+46)& (0+255),b
 13652                           
 13653                           ;api.c: 51: API_RW[24] = 1;
 13654  001DF6  0E00               	movlw	0
 13655  001DF8  6F31               	movwf	(_API_RW+49)& (0+255),b
 13656  001DFA  0E01               	movlw	1
 13657  001DFC  6F30               	movwf	(_API_RW+48)& (0+255),b
 13658                           
 13659                           ;api.c: 52: API_RW[25] = 1;
 13660  001DFE  0E00               	movlw	0
 13661  001E00  6F33               	movwf	(_API_RW+51)& (0+255),b
 13662  001E02  0E01               	movlw	1
 13663  001E04  6F32               	movwf	(_API_RW+50)& (0+255),b
 13664                           
 13665                           ;api.c: 53: API_RW[26] = 1;
 13666  001E06  0E00               	movlw	0
 13667  001E08  6F35               	movwf	(_API_RW+53)& (0+255),b
 13668  001E0A  0E01               	movlw	1
 13669  001E0C  6F34               	movwf	(_API_RW+52)& (0+255),b
 13670                           
 13671                           ;api.c: 54: API_RW[27] = 1;
 13672  001E0E  0E00               	movlw	0
 13673  001E10  6F37               	movwf	(_API_RW+55)& (0+255),b
 13674  001E12  0E01               	movlw	1
 13675  001E14  6F36               	movwf	(_API_RW+54)& (0+255),b
 13676                           
 13677                           ;api.c: 55: API_RW[28] = 0;
 13678  001E16  0E00               	movlw	0
 13679  001E18  6F39               	movwf	(_API_RW+57)& (0+255),b
 13680  001E1A  0E00               	movlw	0
 13681  001E1C  6F38               	movwf	(_API_RW+56)& (0+255),b
 13682                           
 13683                           ;api.c: 56: API_RW[29] = 0;
 13684  001E1E  0E00               	movlw	0
 13685  001E20  6F3B               	movwf	(_API_RW+59)& (0+255),b
 13686  001E22  0E00               	movlw	0
 13687  001E24  6F3A               	movwf	(_API_RW+58)& (0+255),b
 13688                           
 13689                           ;api.c: 57: API_RW[30] = 0;
 13690  001E26  0E00               	movlw	0
 13691  001E28  6F3D               	movwf	(_API_RW+61)& (0+255),b
 13692  001E2A  0E00               	movlw	0
 13693  001E2C  6F3C               	movwf	(_API_RW+60)& (0+255),b
 13694                           
 13695                           ;api.c: 58: API_RW[31] = 0;
 13696  001E2E  0E00               	movlw	0
 13697  001E30  6F3F               	movwf	(_API_RW+63)& (0+255),b
 13698  001E32  0E00               	movlw	0
 13699  001E34  6F3E               	movwf	(_API_RW+62)& (0+255),b
 13700                           
 13701                           ;api.c: 59: API_RW[32] = 0;
 13702  001E36  0E00               	movlw	0
 13703  001E38  6F41               	movwf	(_API_RW+65)& (0+255),b
 13704  001E3A  0E00               	movlw	0
 13705  001E3C  6F40               	movwf	(_API_RW+64)& (0+255),b
 13706                           
 13707                           ;api.c: 60: API_RW[33] = 0;
 13708  001E3E  0E00               	movlw	0
 13709  001E40  6F43               	movwf	(_API_RW+67)& (0+255),b
 13710  001E42  0E00               	movlw	0
 13711  001E44  6F42               	movwf	(_API_RW+66)& (0+255),b
 13712                           
 13713                           ;api.c: 61: API_RW[34] = 0;
 13714  001E46  0E00               	movlw	0
 13715  001E48  6F45               	movwf	(_API_RW+69)& (0+255),b
 13716  001E4A  0E00               	movlw	0
 13717  001E4C  6F44               	movwf	(_API_RW+68)& (0+255),b
 13718                           
 13719                           ;api.c: 62: API_RW[35] = 0;
 13720  001E4E  0E00               	movlw	0
 13721  001E50  6F47               	movwf	(_API_RW+71)& (0+255),b
 13722  001E52  0E00               	movlw	0
 13723  001E54  6F46               	movwf	(_API_RW+70)& (0+255),b
 13724                           
 13725                           ;api.c: 63: API_RW[36] = 0;
 13726  001E56  0E00               	movlw	0
 13727  001E58  6F49               	movwf	(_API_RW+73)& (0+255),b
 13728  001E5A  0E00               	movlw	0
 13729  001E5C  6F48               	movwf	(_API_RW+72)& (0+255),b
 13730                           
 13731                           ;api.c: 64: API_RW[37] = 0;
 13732  001E5E  0E00               	movlw	0
 13733  001E60  6F4B               	movwf	(_API_RW+75)& (0+255),b
 13734  001E62  0E00               	movlw	0
 13735  001E64  6F4A               	movwf	(_API_RW+74)& (0+255),b
 13736                           
 13737                           ;api.c: 65: API_RW[38] = 0;
 13738  001E66  0E00               	movlw	0
 13739  001E68  6F4D               	movwf	(_API_RW+77)& (0+255),b
 13740  001E6A  0E00               	movlw	0
 13741  001E6C  6F4C               	movwf	(_API_RW+76)& (0+255),b
 13742                           
 13743                           ;api.c: 66: API_RW[39] = 1;
 13744  001E6E  0E00               	movlw	0
 13745  001E70  6F4F               	movwf	(_API_RW+79)& (0+255),b
 13746  001E72  0E01               	movlw	1
 13747  001E74  6F4E               	movwf	(_API_RW+78)& (0+255),b
 13748                           
 13749                           ;api.c: 67: API_RW[40] = 1;
 13750  001E76  0E00               	movlw	0
 13751  001E78  6F51               	movwf	(_API_RW+81)& (0+255),b
 13752  001E7A  0E01               	movlw	1
 13753  001E7C  6F50               	movwf	(_API_RW+80)& (0+255),b
 13754                           
 13755                           ;api.c: 68: API_RW[41] = 0;
 13756  001E7E  0E00               	movlw	0
 13757  001E80  6F53               	movwf	(_API_RW+83)& (0+255),b
 13758  001E82  0E00               	movlw	0
 13759  001E84  6F52               	movwf	(_API_RW+82)& (0+255),b
 13760                           
 13761                           ;api.c: 69: API_RW[42] = 0;
 13762  001E86  0E00               	movlw	0
 13763  001E88  6F55               	movwf	(_API_RW+85)& (0+255),b
 13764  001E8A  0E00               	movlw	0
 13765  001E8C  6F54               	movwf	(_API_RW+84)& (0+255),b
 13766                           
 13767                           ;api.c: 70: API_RW[43] = 0;
 13768  001E8E  0E00               	movlw	0
 13769  001E90  6F57               	movwf	(_API_RW+87)& (0+255),b
 13770  001E92  0E00               	movlw	0
 13771  001E94  6F56               	movwf	(_API_RW+86)& (0+255),b
 13772                           
 13773                           ;api.c: 71: API_RW[44] = 0;
 13774  001E96  0E00               	movlw	0
 13775  001E98  6F59               	movwf	(_API_RW+89)& (0+255),b
 13776  001E9A  0E00               	movlw	0
 13777  001E9C  6F58               	movwf	(_API_RW+88)& (0+255),b
 13778                           
 13779                           ;api.c: 72: API_RW[45] = 1;
 13780  001E9E  0E00               	movlw	0
 13781  001EA0  6F5B               	movwf	(_API_RW+91)& (0+255),b
 13782  001EA2  0E01               	movlw	1
 13783  001EA4  6F5A               	movwf	(_API_RW+90)& (0+255),b
 13784                           
 13785                           ;api.c: 73: API_RW[46] = 1;
 13786  001EA6  0E00               	movlw	0
 13787  001EA8  6F5D               	movwf	(_API_RW+93)& (0+255),b
 13788  001EAA  0E01               	movlw	1
 13789  001EAC  6F5C               	movwf	(_API_RW+92)& (0+255),b
 13790                           
 13791                           ;api.c: 74: API_RW[47] = 1;
 13792  001EAE  0E00               	movlw	0
 13793  001EB0  6F5F               	movwf	(_API_RW+95)& (0+255),b
 13794  001EB2  0E01               	movlw	1
 13795  001EB4  6F5E               	movwf	(_API_RW+94)& (0+255),b
 13796                           
 13797                           ;api.c: 75: API_RW[48] = 1;
 13798  001EB6  0E00               	movlw	0
 13799  001EB8  6F61               	movwf	(_API_RW+97)& (0+255),b
 13800  001EBA  0E01               	movlw	1
 13801  001EBC  6F60               	movwf	(_API_RW+96)& (0+255),b
 13802                           
 13803                           ;api.c: 76: API_RW[49] = 1;
 13804  001EBE  0E00               	movlw	0
 13805  001EC0  6F63               	movwf	(_API_RW+99)& (0+255),b
 13806  001EC2  0E01               	movlw	1
 13807  001EC4  6F62               	movwf	(_API_RW+98)& (0+255),b
 13808                           
 13809                           ;api.c: 77: API_RW[50] = 1;
 13810  001EC6  0E00               	movlw	0
 13811  001EC8  6F65               	movwf	(_API_RW+101)& (0+255),b
 13812  001ECA  0E01               	movlw	1
 13813  001ECC  6F64               	movwf	(_API_RW+100)& (0+255),b
 13814                           
 13815                           ;api.c: 78: API_RW[51] = 1;
 13816  001ECE  0E00               	movlw	0
 13817  001ED0  6F67               	movwf	(_API_RW+103)& (0+255),b
 13818  001ED2  0E01               	movlw	1
 13819  001ED4  6F66               	movwf	(_API_RW+102)& (0+255),b
 13820                           
 13821                           ;api.c: 79: API_RW[52] = 1;
 13822  001ED6  0E00               	movlw	0
 13823  001ED8  6F69               	movwf	(_API_RW+105)& (0+255),b
 13824  001EDA  0E01               	movlw	1
 13825  001EDC  6F68               	movwf	(_API_RW+104)& (0+255),b
 13826                           
 13827                           ;api.c: 80: API_RW[53] = 1;
 13828  001EDE  0E00               	movlw	0
 13829  001EE0  6F6B               	movwf	(_API_RW+107)& (0+255),b
 13830  001EE2  0E01               	movlw	1
 13831  001EE4  6F6A               	movwf	(_API_RW+106)& (0+255),b
 13832                           
 13833                           ;api.c: 81: API_RW[54] = 1;
 13834  001EE6  0E00               	movlw	0
 13835  001EE8  6F6D               	movwf	(_API_RW+109)& (0+255),b
 13836  001EEA  0E01               	movlw	1
 13837  001EEC  6F6C               	movwf	(_API_RW+108)& (0+255),b
 13838                           
 13839                           ;api.c: 82: API_RW[55] = 1;
 13840  001EEE  0E00               	movlw	0
 13841  001EF0  6F6F               	movwf	(_API_RW+111)& (0+255),b
 13842  001EF2  0E01               	movlw	1
 13843  001EF4  6F6E               	movwf	(_API_RW+110)& (0+255),b
 13844                           
 13845                           ;api.c: 83: API_RW[56] = 1;
 13846  001EF6  0E00               	movlw	0
 13847  001EF8  6F71               	movwf	(_API_RW+113)& (0+255),b
 13848  001EFA  0E01               	movlw	1
 13849  001EFC  6F70               	movwf	(_API_RW+112)& (0+255),b
 13850                           
 13851                           ;api.c: 84: API_RW[57] = 1;
 13852  001EFE  0E00               	movlw	0
 13853  001F00  6F73               	movwf	(_API_RW+115)& (0+255),b
 13854  001F02  0E01               	movlw	1
 13855  001F04  6F72               	movwf	(_API_RW+114)& (0+255),b
 13856                           
 13857                           ;api.c: 85: API_RW[58] = 1;
 13858  001F06  0E00               	movlw	0
 13859  001F08  6F75               	movwf	(_API_RW+117)& (0+255),b
 13860  001F0A  0E01               	movlw	1
 13861  001F0C  6F74               	movwf	(_API_RW+116)& (0+255),b
 13862                           
 13863                           ;api.c: 86: API_RW[59] = 1;
 13864  001F0E  0E00               	movlw	0
 13865  001F10  6F77               	movwf	(_API_RW+119)& (0+255),b
 13866  001F12  0E01               	movlw	1
 13867  001F14  6F76               	movwf	(_API_RW+118)& (0+255),b
 13868                           
 13869                           ;api.c: 87: API_RW[60] = 1;
 13870  001F16  0E00               	movlw	0
 13871  001F18  6F79               	movwf	(_API_RW+121)& (0+255),b
 13872  001F1A  0E01               	movlw	1
 13873  001F1C  6F78               	movwf	(_API_RW+120)& (0+255),b
 13874                           
 13875                           ;api.c: 88: API_RW[61] = 0;
 13876  001F1E  0E00               	movlw	0
 13877  001F20  6F7B               	movwf	(_API_RW+123)& (0+255),b
 13878  001F22  0E00               	movlw	0
 13879  001F24  6F7A               	movwf	(_API_RW+122)& (0+255),b
 13880                           
 13881                           ;api.c: 89: API_RW[62] = 0;
 13882  001F26  0E00               	movlw	0
 13883  001F28  6F7D               	movwf	(_API_RW+125)& (0+255),b
 13884  001F2A  0E00               	movlw	0
 13885  001F2C  6F7C               	movwf	(_API_RW+124)& (0+255),b
 13886                           
 13887                           ;api.c: 90: API_RW[63] = 0;
 13888  001F2E  0E00               	movlw	0
 13889  001F30  6F7F               	movwf	(_API_RW+127)& (0+255),b
 13890  001F32  0E00               	movlw	0
 13891  001F34  6F7E               	movwf	(_API_RW+126)& (0+255),b
 13892                           
 13893                           ;api.c: 91: API_RW[64] = 0;
 13894  001F36  0E00               	movlw	0
 13895  001F38  6F81               	movwf	(_API_RW+129)& (0+255),b
 13896  001F3A  0E00               	movlw	0
 13897  001F3C  6F80               	movwf	(_API_RW+128)& (0+255),b
 13898                           
 13899                           ;api.c: 92: API_RW[65] = 0;
 13900  001F3E  0E00               	movlw	0
 13901  001F40  6F83               	movwf	(_API_RW+131)& (0+255),b
 13902  001F42  0E00               	movlw	0
 13903  001F44  6F82               	movwf	(_API_RW+130)& (0+255),b
 13904                           
 13905                           ;api.c: 93: API_RW[66] = 0;
 13906  001F46  0E00               	movlw	0
 13907  001F48  6F85               	movwf	(_API_RW+133)& (0+255),b
 13908  001F4A  0E00               	movlw	0
 13909  001F4C  6F84               	movwf	(_API_RW+132)& (0+255),b
 13910                           
 13911                           ;api.c: 94: API_RW[67] = 0;
 13912  001F4E  0E00               	movlw	0
 13913  001F50  6F87               	movwf	(_API_RW+135)& (0+255),b
 13914  001F52  0E00               	movlw	0
 13915  001F54  6F86               	movwf	(_API_RW+134)& (0+255),b
 13916                           
 13917                           ;api.c: 95: API_RW[68] = 0;
 13918  001F56  0E00               	movlw	0
 13919  001F58  6F89               	movwf	(_API_RW+137)& (0+255),b
 13920  001F5A  0E00               	movlw	0
 13921  001F5C  6F88               	movwf	(_API_RW+136)& (0+255),b
 13922                           
 13923                           ;api.c: 96: API_RW[69] = 0;
 13924  001F5E  0E00               	movlw	0
 13925  001F60  6F8B               	movwf	(_API_RW+139)& (0+255),b
 13926  001F62  0E00               	movlw	0
 13927  001F64  6F8A               	movwf	(_API_RW+138)& (0+255),b
 13928                           
 13929                           ;api.c: 97: API_RW[70] = 1;
 13930  001F66  0E00               	movlw	0
 13931  001F68  6F8D               	movwf	(_API_RW+141)& (0+255),b
 13932  001F6A  0E01               	movlw	1
 13933  001F6C  6F8C               	movwf	(_API_RW+140)& (0+255),b
 13934                           
 13935                           ;api.c: 98: API_RW[71] = 1;
 13936  001F6E  0E00               	movlw	0
 13937  001F70  6F8F               	movwf	(_API_RW+143)& (0+255),b
 13938  001F72  0E01               	movlw	1
 13939  001F74  6F8E               	movwf	(_API_RW+142)& (0+255),b
 13940                           
 13941                           ;api.c: 99: API_RW[72] = 1;
 13942  001F76  0E00               	movlw	0
 13943  001F78  6F91               	movwf	(_API_RW+145)& (0+255),b
 13944  001F7A  0E01               	movlw	1
 13945  001F7C  6F90               	movwf	(_API_RW+144)& (0+255),b
 13946                           
 13947                           ;api.c: 100: API_RW[73] = 1;
 13948  001F7E  0E00               	movlw	0
 13949  001F80  6F93               	movwf	(_API_RW+147)& (0+255),b
 13950  001F82  0E01               	movlw	1
 13951  001F84  6F92               	movwf	(_API_RW+146)& (0+255),b
 13952                           
 13953                           ;api.c: 101: API_RW[74] = 1;
 13954  001F86  0E00               	movlw	0
 13955  001F88  6F95               	movwf	(_API_RW+149)& (0+255),b
 13956  001F8A  0E01               	movlw	1
 13957  001F8C  6F94               	movwf	(_API_RW+148)& (0+255),b
 13958                           
 13959                           ;api.c: 102: API_RW[75] = 1;
 13960  001F8E  0E00               	movlw	0
 13961  001F90  6F97               	movwf	(_API_RW+151)& (0+255),b
 13962  001F92  0E01               	movlw	1
 13963  001F94  6F96               	movwf	(_API_RW+150)& (0+255),b
 13964                           
 13965                           ;api.c: 103: API_RW[76] = 1;
 13966  001F96  0E00               	movlw	0
 13967  001F98  6F99               	movwf	(_API_RW+153)& (0+255),b
 13968  001F9A  0E01               	movlw	1
 13969  001F9C  6F98               	movwf	(_API_RW+152)& (0+255),b
 13970                           
 13971                           ;api.c: 104: API_RW[77] = 1;
 13972  001F9E  0E00               	movlw	0
 13973  001FA0  6F9B               	movwf	(_API_RW+155)& (0+255),b
 13974  001FA2  0E01               	movlw	1
 13975  001FA4  6F9A               	movwf	(_API_RW+154)& (0+255),b
 13976                           
 13977                           ;api.c: 105: API_RW[78] = 1;
 13978  001FA6  0E00               	movlw	0
 13979  001FA8  6F9D               	movwf	(_API_RW+157)& (0+255),b
 13980  001FAA  0E01               	movlw	1
 13981  001FAC  6F9C               	movwf	(_API_RW+156)& (0+255),b
 13982                           
 13983                           ;api.c: 106: API_RW[79] = 1;
 13984  001FAE  0E00               	movlw	0
 13985  001FB0  6F9F               	movwf	(_API_RW+159)& (0+255),b
 13986  001FB2  0E01               	movlw	1
 13987  001FB4  6F9E               	movwf	(_API_RW+158)& (0+255),b
 13988                           
 13989                           ;api.c: 107: API_RW[80] = 0;
 13990  001FB6  0E00               	movlw	0
 13991  001FB8  6FA1               	movwf	(_API_RW+161)& (0+255),b
 13992  001FBA  0E00               	movlw	0
 13993  001FBC  6FA0               	movwf	(_API_RW+160)& (0+255),b
 13994                           
 13995                           ;api.c: 108: API_RW[81] = 1;
 13996  001FBE  0E00               	movlw	0
 13997  001FC0  6FA3               	movwf	(_API_RW+163)& (0+255),b
 13998  001FC2  0E01               	movlw	1
 13999  001FC4  6FA2               	movwf	(_API_RW+162)& (0+255),b
 14000                           
 14001                           ;api.c: 109: API_RW[82] = 0;
 14002  001FC6  0E00               	movlw	0
 14003  001FC8  6FA5               	movwf	(_API_RW+165)& (0+255),b
 14004  001FCA  0E00               	movlw	0
 14005  001FCC  6FA4               	movwf	(_API_RW+164)& (0+255),b
 14006                           
 14007                           ;api.c: 110: API_RW[83] = 0;
 14008  001FCE  0E00               	movlw	0
 14009  001FD0  6FA7               	movwf	(_API_RW+167)& (0+255),b
 14010  001FD2  0E00               	movlw	0
 14011  001FD4  6FA6               	movwf	(_API_RW+166)& (0+255),b
 14012                           
 14013                           ;api.c: 111: API_RW[84] = 0;
 14014  001FD6  0E00               	movlw	0
 14015  001FD8  6FA9               	movwf	(_API_RW+169)& (0+255),b
 14016  001FDA  0E00               	movlw	0
 14017  001FDC  6FA8               	movwf	(_API_RW+168)& (0+255),b
 14018                           
 14019                           ;api.c: 112: API_RW[85] = 0;
 14020  001FDE  0E00               	movlw	0
 14021  001FE0  6FAB               	movwf	(_API_RW+171)& (0+255),b
 14022  001FE2  0E00               	movlw	0
 14023  001FE4  6FAA               	movwf	(_API_RW+170)& (0+255),b
 14024                           
 14025                           ;api.c: 113: API_RW[86] = 0;
 14026  001FE6  0E00               	movlw	0
 14027  001FE8  6FAD               	movwf	(_API_RW+173)& (0+255),b
 14028  001FEA  0E00               	movlw	0
 14029  001FEC  6FAC               	movwf	(_API_RW+172)& (0+255),b
 14030                           
 14031                           ;api.c: 114: API_RW[87] = 1;
 14032  001FEE  0E00               	movlw	0
 14033  001FF0  6FAF               	movwf	(_API_RW+175)& (0+255),b
 14034  001FF2  0E01               	movlw	1
 14035  001FF4  6FAE               	movwf	(_API_RW+174)& (0+255),b
 14036                           
 14037                           ;api.c: 115: API_RW[88] = 0;
 14038  001FF6  0E00               	movlw	0
 14039  001FF8  6FB1               	movwf	(_API_RW+177)& (0+255),b
 14040  001FFA  0E00               	movlw	0
 14041  001FFC  6FB0               	movwf	(_API_RW+176)& (0+255),b
 14042                           
 14043                           ;api.c: 119: API[16] = 89;
 14044  001FFE  0E00               	movlw	0
 14045  002000  0101               	movlb	1	; () banked
 14046  002002  6F21               	movwf	(_API+33)& (0+255),b
 14047  002004  0E59               	movlw	89
 14048  002006  6F20               	movwf	(_API+32)& (0+255),b
 14049                           
 14050                           ;api.c: 120: API[18] = 10000;
 14051  002008  0E27               	movlw	39
 14052  00200A  6F25               	movwf	(_API+37)& (0+255),b
 14053  00200C  0E10               	movlw	16
 14054  00200E  6F24               	movwf	(_API+36)& (0+255),b
 14055                           
 14056                           ;api.c: 121: API[19] = 800;
 14057  002010  0E03               	movlw	3
 14058  002012  6F27               	movwf	(_API+39)& (0+255),b
 14059  002014  0E20               	movlw	32
 14060  002016  6F26               	movwf	(_API+38)& (0+255),b
 14061                           
 14062                           ;api.c: 122: API[20] = 5000;
 14063  002018  0E13               	movlw	19
 14064  00201A  6F29               	movwf	(_API+41)& (0+255),b
 14065  00201C  0E88               	movlw	136
 14066  00201E  6F28               	movwf	(_API+40)& (0+255),b
 14067                           
 14068                           ;api.c: 123: API[21] = 20;
 14069  002020  0E00               	movlw	0
 14070  002022  6F2B               	movwf	(_API+43)& (0+255),b
 14071  002024  0E14               	movlw	20
 14072  002026  6F2A               	movwf	(_API+42)& (0+255),b
 14073                           
 14074                           ;api.c: 124: API[22] = 20;
 14075  002028  0E00               	movlw	0
 14076  00202A  6F2D               	movwf	(_API+45)& (0+255),b
 14077  00202C  0E14               	movlw	20
 14078  00202E  6F2C               	movwf	(_API+44)& (0+255),b
 14079                           
 14080                           ;api.c: 125: API[23] = 107;
 14081  002030  0E00               	movlw	0
 14082  002032  6F2F               	movwf	(_API+47)& (0+255),b
 14083  002034  0E6B               	movlw	107
 14084  002036  6F2E               	movwf	(_API+46)& (0+255),b
 14085                           
 14086                           ;api.c: 126: API[24] = 107;
 14087  002038  0E00               	movlw	0
 14088  00203A  6F31               	movwf	(_API+49)& (0+255),b
 14089  00203C  0E6B               	movlw	107
 14090  00203E  6F30               	movwf	(_API+48)& (0+255),b
 14091                           
 14092                           ;api.c: 127: API[25] = 80;
 14093  002040  0E00               	movlw	0
 14094  002042  6F33               	movwf	(_API+51)& (0+255),b
 14095  002044  0E50               	movlw	80
 14096  002046  6F32               	movwf	(_API+50)& (0+255),b
 14097                           
 14098                           ;api.c: 128: API[26] = 45;
 14099  002048  0E00               	movlw	0
 14100  00204A  6F35               	movwf	(_API+53)& (0+255),b
 14101  00204C  0E2D               	movlw	45
 14102  00204E  6F34               	movwf	(_API+52)& (0+255),b
 14103                           
 14104                           ;api.c: 129: API[27] = 20;
 14105  002050  0E00               	movlw	0
 14106  002052  6F37               	movwf	(_API+55)& (0+255),b
 14107  002054  0E14               	movlw	20
 14108  002056  6F36               	movwf	(_API+54)& (0+255),b
 14109                           
 14110                           ;api.c: 130: API[28] = 0;
 14111  002058  0E00               	movlw	0
 14112  00205A  6F39               	movwf	(_API+57)& (0+255),b
 14113  00205C  0E00               	movlw	0
 14114  00205E  6F38               	movwf	(_API+56)& (0+255),b
 14115                           
 14116                           ;api.c: 131: API[29] = 0;
 14117  002060  0E00               	movlw	0
 14118  002062  6F3B               	movwf	(_API+59)& (0+255),b
 14119  002064  0E00               	movlw	0
 14120  002066  6F3A               	movwf	(_API+58)& (0+255),b
 14121                           
 14122                           ;api.c: 132: API[30] = 0;
 14123  002068  0E00               	movlw	0
 14124  00206A  6F3D               	movwf	(_API+61)& (0+255),b
 14125  00206C  0E00               	movlw	0
 14126  00206E  6F3C               	movwf	(_API+60)& (0+255),b
 14127                           
 14128                           ;api.c: 133: API[31] = 0;
 14129  002070  0E00               	movlw	0
 14130  002072  6F3F               	movwf	(_API+63)& (0+255),b
 14131  002074  0E00               	movlw	0
 14132  002076  6F3E               	movwf	(_API+62)& (0+255),b
 14133                           
 14134                           ;api.c: 134: API[32] = 0;
 14135  002078  0E00               	movlw	0
 14136  00207A  6F41               	movwf	(_API+65)& (0+255),b
 14137  00207C  0E00               	movlw	0
 14138  00207E  6F40               	movwf	(_API+64)& (0+255),b
 14139                           
 14140                           ;api.c: 135: API[33] = 0;
 14141  002080  0E00               	movlw	0
 14142  002082  6F43               	movwf	(_API+67)& (0+255),b
 14143  002084  0E00               	movlw	0
 14144  002086  6F42               	movwf	(_API+66)& (0+255),b
 14145                           
 14146                           ;api.c: 136: API[34] = 0;
 14147  002088  0E00               	movlw	0
 14148  00208A  6F45               	movwf	(_API+69)& (0+255),b
 14149  00208C  0E00               	movlw	0
 14150  00208E  6F44               	movwf	(_API+68)& (0+255),b
 14151                           
 14152                           ;api.c: 137: API[35] = 0;
 14153  002090  0E00               	movlw	0
 14154  002092  6F47               	movwf	(_API+71)& (0+255),b
 14155  002094  0E00               	movlw	0
 14156  002096  6F46               	movwf	(_API+70)& (0+255),b
 14157                           
 14158                           ;api.c: 138: API[36] = 0;
 14159  002098  0E00               	movlw	0
 14160  00209A  6F49               	movwf	(_API+73)& (0+255),b
 14161  00209C  0E00               	movlw	0
 14162  00209E  6F48               	movwf	(_API+72)& (0+255),b
 14163                           
 14164                           ;api.c: 139: API[37] = 0;
 14165  0020A0  0E00               	movlw	0
 14166  0020A2  6F4B               	movwf	(_API+75)& (0+255),b
 14167  0020A4  0E00               	movlw	0
 14168  0020A6  6F4A               	movwf	(_API+74)& (0+255),b
 14169                           
 14170                           ;api.c: 140: API[38] = 0;
 14171  0020A8  0E00               	movlw	0
 14172  0020AA  6F4D               	movwf	(_API+77)& (0+255),b
 14173  0020AC  0E00               	movlw	0
 14174  0020AE  6F4C               	movwf	(_API+76)& (0+255),b
 14175                           
 14176                           ;api.c: 141: API[39] = 0;
 14177  0020B0  0E00               	movlw	0
 14178  0020B2  6F4F               	movwf	(_API+79)& (0+255),b
 14179  0020B4  0E00               	movlw	0
 14180  0020B6  6F4E               	movwf	(_API+78)& (0+255),b
 14181                           
 14182                           ;api.c: 142: API[40] = 0;
 14183  0020B8  0E00               	movlw	0
 14184  0020BA  6F51               	movwf	(_API+81)& (0+255),b
 14185  0020BC  0E00               	movlw	0
 14186  0020BE  6F50               	movwf	(_API+80)& (0+255),b
 14187                           
 14188                           ;api.c: 143: API[41] = 0;
 14189  0020C0  0E00               	movlw	0
 14190  0020C2  6F53               	movwf	(_API+83)& (0+255),b
 14191  0020C4  0E00               	movlw	0
 14192  0020C6  6F52               	movwf	(_API+82)& (0+255),b
 14193                           
 14194                           ;api.c: 144: API[42] = 0;
 14195  0020C8  0E00               	movlw	0
 14196  0020CA  6F55               	movwf	(_API+85)& (0+255),b
 14197  0020CC  0E00               	movlw	0
 14198  0020CE  6F54               	movwf	(_API+84)& (0+255),b
 14199                           
 14200                           ;api.c: 145: API[43] = 0;
 14201  0020D0  0E00               	movlw	0
 14202  0020D2  6F57               	movwf	(_API+87)& (0+255),b
 14203  0020D4  0E00               	movlw	0
 14204  0020D6  6F56               	movwf	(_API+86)& (0+255),b
 14205                           
 14206                           ;api.c: 146: API[44] = 0;
 14207  0020D8  0E00               	movlw	0
 14208  0020DA  6F59               	movwf	(_API+89)& (0+255),b
 14209  0020DC  0E00               	movlw	0
 14210  0020DE  6F58               	movwf	(_API+88)& (0+255),b
 14211                           
 14212                           ;api.c: 147: API[45] = 0;
 14213  0020E0  0E00               	movlw	0
 14214  0020E2  6F5B               	movwf	(_API+91)& (0+255),b
 14215  0020E4  0E00               	movlw	0
 14216  0020E6  6F5A               	movwf	(_API+90)& (0+255),b
 14217                           
 14218                           ;api.c: 148: API[46] = 80;
 14219  0020E8  0E00               	movlw	0
 14220  0020EA  6F5D               	movwf	(_API+93)& (0+255),b
 14221  0020EC  0E50               	movlw	80
 14222  0020EE  6F5C               	movwf	(_API+92)& (0+255),b
 14223                           
 14224                           ;api.c: 149: API[47] = 120;
 14225  0020F0  0E00               	movlw	0
 14226  0020F2  6F5F               	movwf	(_API+95)& (0+255),b
 14227  0020F4  0E78               	movlw	120
 14228  0020F6  6F5E               	movwf	(_API+94)& (0+255),b
 14229                           
 14230                           ;api.c: 150: API[48] = 0;
 14231  0020F8  0E00               	movlw	0
 14232  0020FA  6F61               	movwf	(_API+97)& (0+255),b
 14233  0020FC  0E00               	movlw	0
 14234  0020FE  6F60               	movwf	(_API+96)& (0+255),b
 14235                           
 14236                           ;api.c: 151: API[49] = 80;
 14237  002100  0E00               	movlw	0
 14238  002102  6F63               	movwf	(_API+99)& (0+255),b
 14239  002104  0E50               	movlw	80
 14240  002106  6F62               	movwf	(_API+98)& (0+255),b
 14241                           
 14242                           ;api.c: 152: API[50] = 0;
 14243  002108  0E00               	movlw	0
 14244  00210A  6F65               	movwf	(_API+101)& (0+255),b
 14245  00210C  0E00               	movlw	0
 14246  00210E  6F64               	movwf	(_API+100)& (0+255),b
 14247                           
 14248                           ;api.c: 153: API[51] = 0;
 14249  002110  0E00               	movlw	0
 14250  002112  6F67               	movwf	(_API+103)& (0+255),b
 14251  002114  0E00               	movlw	0
 14252  002116  6F66               	movwf	(_API+102)& (0+255),b
 14253                           
 14254                           ;api.c: 154: API[52] = 120;
 14255  002118  0E00               	movlw	0
 14256  00211A  6F69               	movwf	(_API+105)& (0+255),b
 14257  00211C  0E78               	movlw	120
 14258  00211E  6F68               	movwf	(_API+104)& (0+255),b
 14259                           
 14260                           ;api.c: 155: API[53] = 100;
 14261  002120  0E00               	movlw	0
 14262  002122  6F6B               	movwf	(_API+107)& (0+255),b
 14263  002124  0E64               	movlw	100
 14264  002126  6F6A               	movwf	(_API+106)& (0+255),b
 14265                           
 14266                           ;api.c: 156: API[54] = 100;
 14267  002128  0E00               	movlw	0
 14268  00212A  6F6D               	movwf	(_API+109)& (0+255),b
 14269  00212C  0E64               	movlw	100
 14270  00212E  6F6C               	movwf	(_API+108)& (0+255),b
 14271                           
 14272                           ;api.c: 157: API[55] = 100;
 14273  002130  0E00               	movlw	0
 14274  002132  6F6F               	movwf	(_API+111)& (0+255),b
 14275  002134  0E64               	movlw	100
 14276  002136  6F6E               	movwf	(_API+110)& (0+255),b
 14277                           
 14278                           ;api.c: 158: API[56] = 100;
 14279  002138  0E00               	movlw	0
 14280  00213A  6F71               	movwf	(_API+113)& (0+255),b
 14281  00213C  0E64               	movlw	100
 14282  00213E  6F70               	movwf	(_API+112)& (0+255),b
 14283                           
 14284                           ;api.c: 159: API[57] = 100;
 14285  002140  0E00               	movlw	0
 14286  002142  6F73               	movwf	(_API+115)& (0+255),b
 14287  002144  0E64               	movlw	100
 14288  002146  6F72               	movwf	(_API+114)& (0+255),b
 14289                           
 14290                           ;api.c: 160: API[58] = 100;
 14291  002148  0E00               	movlw	0
 14292  00214A  6F75               	movwf	(_API+117)& (0+255),b
 14293  00214C  0E64               	movlw	100
 14294  00214E  6F74               	movwf	(_API+116)& (0+255),b
 14295                           
 14296                           ;api.c: 161: API[59] = 100;
 14297  002150  0E00               	movlw	0
 14298  002152  6F77               	movwf	(_API+119)& (0+255),b
 14299  002154  0E64               	movlw	100
 14300  002156  6F76               	movwf	(_API+118)& (0+255),b
 14301                           
 14302                           ;api.c: 162: API[60] = 100;
 14303  002158  0E00               	movlw	0
 14304  00215A  6F79               	movwf	(_API+121)& (0+255),b
 14305  00215C  0E64               	movlw	100
 14306  00215E  6F78               	movwf	(_API+120)& (0+255),b
 14307                           
 14308                           ;api.c: 163: API[61] = 0;
 14309  002160  0E00               	movlw	0
 14310  002162  6F7B               	movwf	(_API+123)& (0+255),b
 14311  002164  0E00               	movlw	0
 14312  002166  6F7A               	movwf	(_API+122)& (0+255),b
 14313                           
 14314                           ;api.c: 164: API[62] = 0;
 14315  002168  0E00               	movlw	0
 14316  00216A  6F7D               	movwf	(_API+125)& (0+255),b
 14317  00216C  0E00               	movlw	0
 14318  00216E  6F7C               	movwf	(_API+124)& (0+255),b
 14319                           
 14320                           ;api.c: 165: API[63] = 1;
 14321  002170  0E00               	movlw	0
 14322  002172  6F7F               	movwf	(_API+127)& (0+255),b
 14323  002174  0E01               	movlw	1
 14324  002176  6F7E               	movwf	(_API+126)& (0+255),b
 14325                           
 14326                           ;api.c: 166: API[64] = 0;
 14327  002178  0E00               	movlw	0
 14328  00217A  6F81               	movwf	(_API+129)& (0+255),b
 14329  00217C  0E00               	movlw	0
 14330  00217E  6F80               	movwf	(_API+128)& (0+255),b
 14331                           
 14332                           ;api.c: 167: API[65] = 0;
 14333  002180  0E00               	movlw	0
 14334  002182  6F83               	movwf	(_API+131)& (0+255),b
 14335  002184  0E00               	movlw	0
 14336  002186  6F82               	movwf	(_API+130)& (0+255),b
 14337                           
 14338                           ;api.c: 168: API[66] = 0;
 14339  002188  0E00               	movlw	0
 14340  00218A  6F85               	movwf	(_API+133)& (0+255),b
 14341  00218C  0E00               	movlw	0
 14342  00218E  6F84               	movwf	(_API+132)& (0+255),b
 14343                           
 14344                           ;api.c: 169: API[67] = 0;
 14345  002190  0E00               	movlw	0
 14346  002192  6F87               	movwf	(_API+135)& (0+255),b
 14347  002194  0E00               	movlw	0
 14348  002196  6F86               	movwf	(_API+134)& (0+255),b
 14349                           
 14350                           ;api.c: 170: API[68] = 0;
 14351  002198  0E00               	movlw	0
 14352  00219A  6F89               	movwf	(_API+137)& (0+255),b
 14353  00219C  0E00               	movlw	0
 14354  00219E  6F88               	movwf	(_API+136)& (0+255),b
 14355                           
 14356                           ;api.c: 171: API[69] = 1;
 14357  0021A0  0E00               	movlw	0
 14358  0021A2  6F8B               	movwf	(_API+139)& (0+255),b
 14359  0021A4  0E01               	movlw	1
 14360  0021A6  6F8A               	movwf	(_API+138)& (0+255),b
 14361                           
 14362                           ;api.c: 172: API[70] = 0;
 14363  0021A8  0E00               	movlw	0
 14364  0021AA  6F8D               	movwf	(_API+141)& (0+255),b
 14365  0021AC  0E00               	movlw	0
 14366  0021AE  6F8C               	movwf	(_API+140)& (0+255),b
 14367                           
 14368                           ;api.c: 173: API[71] = 0;
 14369  0021B0  0E00               	movlw	0
 14370  0021B2  6F8F               	movwf	(_API+143)& (0+255),b
 14371  0021B4  0E00               	movlw	0
 14372  0021B6  6F8E               	movwf	(_API+142)& (0+255),b
 14373                           
 14374                           ;api.c: 174: API[72] = 0;
 14375  0021B8  0E00               	movlw	0
 14376  0021BA  6F91               	movwf	(_API+145)& (0+255),b
 14377  0021BC  0E00               	movlw	0
 14378  0021BE  6F90               	movwf	(_API+144)& (0+255),b
 14379                           
 14380                           ;api.c: 175: API[73] = 0;
 14381  0021C0  0E00               	movlw	0
 14382  0021C2  6F93               	movwf	(_API+147)& (0+255),b
 14383  0021C4  0E00               	movlw	0
 14384  0021C6  6F92               	movwf	(_API+146)& (0+255),b
 14385                           
 14386                           ;api.c: 176: API[74] = 0;
 14387  0021C8  0E00               	movlw	0
 14388  0021CA  6F95               	movwf	(_API+149)& (0+255),b
 14389  0021CC  0E00               	movlw	0
 14390  0021CE  6F94               	movwf	(_API+148)& (0+255),b
 14391                           
 14392                           ;api.c: 177: API[75] = 0;
 14393  0021D0  0E00               	movlw	0
 14394  0021D2  6F97               	movwf	(_API+151)& (0+255),b
 14395  0021D4  0E00               	movlw	0
 14396  0021D6  6F96               	movwf	(_API+150)& (0+255),b
 14397                           
 14398                           ;api.c: 178: API[76] = 0;
 14399  0021D8  0E00               	movlw	0
 14400  0021DA  6F99               	movwf	(_API+153)& (0+255),b
 14401  0021DC  0E00               	movlw	0
 14402  0021DE  6F98               	movwf	(_API+152)& (0+255),b
 14403                           
 14404                           ;api.c: 179: API[77] = 0;
 14405  0021E0  0E00               	movlw	0
 14406  0021E2  6F9B               	movwf	(_API+155)& (0+255),b
 14407  0021E4  0E00               	movlw	0
 14408  0021E6  6F9A               	movwf	(_API+154)& (0+255),b
 14409                           
 14410                           ;api.c: 180: API[78] = 0;
 14411  0021E8  0E00               	movlw	0
 14412  0021EA  6F9D               	movwf	(_API+157)& (0+255),b
 14413  0021EC  0E00               	movlw	0
 14414  0021EE  6F9C               	movwf	(_API+156)& (0+255),b
 14415                           
 14416                           ;api.c: 181: API[79] = 0;
 14417  0021F0  0E00               	movlw	0
 14418  0021F2  6F9F               	movwf	(_API+159)& (0+255),b
 14419  0021F4  0E00               	movlw	0
 14420  0021F6  6F9E               	movwf	(_API+158)& (0+255),b
 14421                           
 14422                           ;api.c: 182: API[80] = 0;
 14423  0021F8  0E00               	movlw	0
 14424  0021FA  6FA1               	movwf	(_API+161)& (0+255),b
 14425  0021FC  0E00               	movlw	0
 14426  0021FE  6FA0               	movwf	(_API+160)& (0+255),b
 14427                           
 14428                           ;api.c: 183: API[81] = 0;
 14429  002200  0E00               	movlw	0
 14430  002202  6FA3               	movwf	(_API+163)& (0+255),b
 14431  002204  0E00               	movlw	0
 14432  002206  6FA2               	movwf	(_API+162)& (0+255),b
 14433                           
 14434                           ;api.c: 184: API[82] = 1;
 14435  002208  0E00               	movlw	0
 14436  00220A  6FA5               	movwf	(_API+165)& (0+255),b
 14437  00220C  0E01               	movlw	1
 14438  00220E  6FA4               	movwf	(_API+164)& (0+255),b
 14439                           
 14440                           ;api.c: 185: API[83] = 0;
 14441  002210  0E00               	movlw	0
 14442  002212  6FA7               	movwf	(_API+167)& (0+255),b
 14443  002214  0E00               	movlw	0
 14444  002216  6FA6               	movwf	(_API+166)& (0+255),b
 14445                           
 14446                           ;api.c: 186: API[84] = 1;
 14447  002218  0E00               	movlw	0
 14448  00221A  6FA9               	movwf	(_API+169)& (0+255),b
 14449  00221C  0E01               	movlw	1
 14450  00221E  6FA8               	movwf	(_API+168)& (0+255),b
 14451                           
 14452                           ;api.c: 187: API[85] = 0;
 14453  002220  0E00               	movlw	0
 14454  002222  6FAB               	movwf	(_API+171)& (0+255),b
 14455  002224  0E00               	movlw	0
 14456  002226  6FAA               	movwf	(_API+170)& (0+255),b
 14457                           
 14458                           ;api.c: 188: API[86] = 0;
 14459  002228  0E00               	movlw	0
 14460  00222A  6FAD               	movwf	(_API+173)& (0+255),b
 14461  00222C  0E00               	movlw	0
 14462  00222E  6FAC               	movwf	(_API+172)& (0+255),b
 14463                           
 14464                           ;api.c: 189: API[87] = 0;
 14465  002230  0E00               	movlw	0
 14466  002232  6FAF               	movwf	(_API+175)& (0+255),b
 14467  002234  0E00               	movlw	0
 14468  002236  6FAE               	movwf	(_API+174)& (0+255),b
 14469                           
 14470                           ;api.c: 190: API[88] = 511;
 14471  002238  0E01               	movlw	1
 14472  00223A  6FB1               	movwf	(_API+177)& (0+255),b
 14473  00223C  69B0               	setf	(_API+176)& (0+255),b
 14474                           
 14475                           ; BSR set to: 1
 14476  00223E  0012               	return		;funcret
 14477  002240                     __end_of_APIxInitialize:
 14478                           	opt stack 0
 14479                           tblptru	equ	0xFF8
 14480                           tblptrh	equ	0xFF7
 14481                           tblptrl	equ	0xFF6
 14482                           tablat	equ	0xFF5
 14483                           prodh	equ	0xFF4
 14484                           prodl	equ	0xFF3
 14485                           intcon	equ	0xFF2
 14486                           intcon2	equ	0xFF1
 14487                           postinc0	equ	0xFEE
 14488                           wreg	equ	0xFE8
 14489                           postinc1	equ	0xFE6
 14490                           postdec1	equ	0xFE5
 14491                           fsr1h	equ	0xFE2
 14492                           fsr1l	equ	0xFE1
 14493                           indf2	equ	0xFDF
 14494                           postinc2	equ	0xFDE
 14495                           postdec2	equ	0xFDD
 14496                           fsr2h	equ	0xFDA
 14497                           fsr2l	equ	0xFD9
 14498                           status	equ	0xFD8
 14499                           
 14500 ;; *************** function _tc_low *****************
 14501 ;; Defined at:
 14502 ;;		line 148 in file "../Main.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;		None
 14505 ;; Auto vars:     Size  Location     Type
 14506 ;;		None
 14507 ;; Return value:  Size  Location     Type
 14508 ;;                  1    wreg      void 
 14509 ;; Registers used:
 14510 ;;		None
 14511 ;; Tracked objects:
 14512 ;;		On entry : 0/0
 14513 ;;		On exit  : 0/0
 14514 ;;		Unchanged: 0/0
 14515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14516 ;;      Params:         0       0       0       0       0       0       0       0       0
 14517 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14518 ;;      Temps:          0      21       0       0       0       0       0       0       0
 14519 ;;      Totals:         0      21       0       0       0       0       0       0       0
 14520 ;;Total ram usage:       21 bytes
 14521 ;; Hardware stack levels used:    1
 14522 ;; Hardware stack levels required when called:    2
 14523 ;; This function calls:
 14524 ;;		Nothing
 14525 ;; This function is called by:
 14526 ;;		Interrupt level 1
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           	psect	intcodelo
 14531  000018                     __pintcodelo:
 14532                           	opt stack 0
 14533  000018                     _tc_low:
 14534                           	opt stack 22
 14535                           
 14536                           ; BSR set to: 1
 14537                           ;incstack = 0
 14538  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 14539  00001A  CFD8 F0B6          	movff	status,??_tc_low
 14540  00001E  CFE8 F0B7          	movff	wreg,??_tc_low+1
 14541  000022  CFE0 F0B8          	movff	bsr,??_tc_low+2
 14542  000026  CFFA F0B9          	movff	pclath,??_tc_low+3
 14543  00002A  CFFB F0BA          	movff	pclatu,??_tc_low+4
 14544  00002E  CFE9 F0BB          	movff	fsr0l,??_tc_low+5
 14545  000032  CFEA F0BC          	movff	fsr0h,??_tc_low+6
 14546  000036  CFE1 F0BD          	movff	fsr1l,??_tc_low+7
 14547  00003A  CFE2 F0BE          	movff	fsr1h,??_tc_low+8
 14548  00003E  CFD9 F0BF          	movff	fsr2l,??_tc_low+9
 14549  000042  CFDA F0C0          	movff	fsr2h,??_tc_low+10
 14550  000046  CFF3 F0C1          	movff	prodl,??_tc_low+11
 14551  00004A  CFF4 F0C2          	movff	prodh,??_tc_low+12
 14552  00004E  CFF6 F0C3          	movff	tblptrl,??_tc_low+13
 14553  000052  CFF7 F0C4          	movff	tblptrh,??_tc_low+14
 14554  000056  CFF8 F0C5          	movff	tblptru,??_tc_low+15
 14555  00005A  CFF5 F0C6          	movff	tablat,??_tc_low+16
 14556  00005E  C04D  F0C7         	movff	btemp,??_tc_low+17
 14557  000062  C04E  F0C8         	movff	btemp+1,??_tc_low+18
 14558  000066  C04F  F0C9         	movff	btemp+2,??_tc_low+19
 14559  00006A  C050  F0CA         	movff	btemp+3,??_tc_low+20
 14560  00006E  C0CA  F050         	movff	??_tc_low+20,btemp+3
 14561  000072  C0C9  F04F         	movff	??_tc_low+19,btemp+2
 14562  000076  C0C8  F04E         	movff	??_tc_low+18,btemp+1
 14563  00007A  C0C7  F04D         	movff	??_tc_low+17,btemp
 14564  00007E  C0C6  FFF5         	movff	??_tc_low+16,tablat
 14565  000082  C0C5  FFF8         	movff	??_tc_low+15,tblptru
 14566  000086  C0C4  FFF7         	movff	??_tc_low+14,tblptrh
 14567  00008A  C0C3  FFF6         	movff	??_tc_low+13,tblptrl
 14568  00008E  C0C2  FFF4         	movff	??_tc_low+12,prodh
 14569  000092  C0C1  FFF3         	movff	??_tc_low+11,prodl
 14570  000096  C0C0  FFDA         	movff	??_tc_low+10,fsr2h
 14571  00009A  C0BF  FFD9         	movff	??_tc_low+9,fsr2l
 14572  00009E  C0BE  FFE2         	movff	??_tc_low+8,fsr1h
 14573  0000A2  C0BD  FFE1         	movff	??_tc_low+7,fsr1l
 14574  0000A6  C0BC  FFEA         	movff	??_tc_low+6,fsr0h
 14575  0000AA  C0BB  FFE9         	movff	??_tc_low+5,fsr0l
 14576  0000AE  C0BA  FFFB         	movff	??_tc_low+4,pclatu
 14577  0000B2  C0B9  FFFA         	movff	??_tc_low+3,pclath
 14578  0000B6  C0B8  FFE0         	movff	??_tc_low+2,bsr
 14579  0000BA  C0B7  FFE8         	movff	??_tc_low+1,wreg
 14580  0000BE  C0B6  FFD8         	movff	??_tc_low,status
 14581  0000C2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 14582  0000C4  0010               	retfie	
 14583  0000C6                     __end_of_tc_low:
 14584                           	opt stack 0
 14585                           pclatu	equ	0xFFB
 14586                           pclath	equ	0xFFA
 14587                           tblptru	equ	0xFF8
 14588                           tblptrh	equ	0xFF7
 14589                           tblptrl	equ	0xFF6
 14590                           tablat	equ	0xFF5
 14591                           prodh	equ	0xFF4
 14592                           prodl	equ	0xFF3
 14593                           intcon	equ	0xFF2
 14594                           intcon2	equ	0xFF1
 14595                           postinc0	equ	0xFEE
 14596                           fsr0h	equ	0xFEA
 14597                           fsr0l	equ	0xFE9
 14598                           wreg	equ	0xFE8
 14599                           postinc1	equ	0xFE6
 14600                           postdec1	equ	0xFE5
 14601                           fsr1h	equ	0xFE2
 14602                           fsr1l	equ	0xFE1
 14603                           bsr	equ	0xFE0
 14604                           indf2	equ	0xFDF
 14605                           postinc2	equ	0xFDE
 14606                           postdec2	equ	0xFDD
 14607                           fsr2h	equ	0xFDA
 14608                           fsr2l	equ	0xFD9
 14609                           status	equ	0xFD8
 14610                           
 14611 ;; *************** function _tc_high *****************
 14612 ;; Defined at:
 14613 ;;		line 152 in file "../Main.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;		None
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;		None
 14618 ;; Return value:  Size  Location     Type
 14619 ;;                  1    wreg      void 
 14620 ;; Registers used:
 14621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14627 ;;      Params:         0       0       0       0       0       0       0       0       0
 14628 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14629 ;;      Temps:         18       0       0       0       0       0       0       0       0
 14630 ;;      Totals:        18       0       0       0       0       0       0       0       0
 14631 ;;Total ram usage:       18 bytes
 14632 ;; Hardware stack levels used:    1
 14633 ;; Hardware stack levels required when called:    1
 14634 ;; This function calls:
 14635 ;;		_EUSART1_Receive_ISR
 14636 ;;		_EUSART1_Transmit_ISR
 14637 ;; This function is called by:
 14638 ;;		Interrupt level 2
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           	psect	intcode
 14643  000008                     __pintcode:
 14644                           	opt stack 0
 14645  000008                     _tc_high:
 14646                           	opt stack 22
 14647                           
 14648                           ;incstack = 0
 14649  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14650  00000A  ED3E  F01D         	call	int_func,f	;refresh shadow registers
 14651                           pclatu	equ	0xFFB
 14652                           pclath	equ	0xFFA
 14653                           tblptru	equ	0xFF8
 14654                           tblptrh	equ	0xFF7
 14655                           tblptrl	equ	0xFF6
 14656                           tablat	equ	0xFF5
 14657                           prodh	equ	0xFF4
 14658                           prodl	equ	0xFF3
 14659                           intcon	equ	0xFF2
 14660                           intcon2	equ	0xFF1
 14661                           postinc0	equ	0xFEE
 14662                           fsr0h	equ	0xFEA
 14663                           fsr0l	equ	0xFE9
 14664                           wreg	equ	0xFE8
 14665                           postinc1	equ	0xFE6
 14666                           postdec1	equ	0xFE5
 14667                           fsr1h	equ	0xFE2
 14668                           fsr1l	equ	0xFE1
 14669                           bsr	equ	0xFE0
 14670                           indf2	equ	0xFDF
 14671                           postinc2	equ	0xFDE
 14672                           postdec2	equ	0xFDD
 14673                           fsr2h	equ	0xFDA
 14674                           fsr2l	equ	0xFD9
 14675                           status	equ	0xFD8
 14676                           
 14677                           	psect	intcode_body
 14678  003A7C                     __pintcode_body:
 14679                           	opt stack 22
 14680  003A7C                     int_func:
 14681                           	opt stack 22
 14682  003A7C  0006               	pop		; remove dummy address from shadow register refresh
 14683  003A7E  CFFA F001          	movff	pclath,??_tc_high
 14684  003A82  CFFB F002          	movff	pclatu,??_tc_high+1
 14685  003A86  CFE9 F003          	movff	fsr0l,??_tc_high+2
 14686  003A8A  CFEA F004          	movff	fsr0h,??_tc_high+3
 14687  003A8E  CFE1 F005          	movff	fsr1l,??_tc_high+4
 14688  003A92  CFE2 F006          	movff	fsr1h,??_tc_high+5
 14689  003A96  CFD9 F007          	movff	fsr2l,??_tc_high+6
 14690  003A9A  CFDA F008          	movff	fsr2h,??_tc_high+7
 14691  003A9E  CFF3 F009          	movff	prodl,??_tc_high+8
 14692  003AA2  CFF4 F00A          	movff	prodh,??_tc_high+9
 14693  003AA6  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 14694  003AAA  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 14695  003AAE  CFF8 F00D          	movff	tblptru,??_tc_high+12
 14696  003AB2  CFF5 F00E          	movff	tablat,??_tc_high+13
 14697  003AB6  C04D  F00F         	movff	btemp,??_tc_high+14
 14698  003ABA  C04E  F010         	movff	btemp+1,??_tc_high+15
 14699  003ABE  C04F  F011         	movff	btemp+2,??_tc_high+16
 14700  003AC2  C050  F012         	movff	btemp+3,??_tc_high+17
 14701                           
 14702                           ;Main.c: 154: if (INTCONbits.TMR0IF)
 14703  003AC6  A4F2               	btfss	intcon,2,c	;volatile
 14704  003AC8  D019               	goto	i2l101
 14705                           
 14706                           ;Main.c: 155: {
 14707                           ;Main.c: 156: if(Led1_Counter <= 100)
 14708  003ACA  0100               	movlb	0	; () banked
 14709  003ACC  517F               	movf	(_Led1_Counter+1)& (0+255),w,b
 14710  003ACE  E106               	bnz	i2l102
 14711  003AD0  0E65               	movlw	101
 14712  003AD2  5D7E               	subwf	_Led1_Counter& (0+255),w,b
 14713  003AD4  B0D8               	btfsc	status,0,c
 14714  003AD6  D002               	goto	i2l102
 14715                           
 14716                           ; BSR set to: 0
 14717                           ;Main.c: 157: {
 14718                           ;Main.c: 158: PORTAbits.RA4 = 1;
 14719  003AD8  8880               	bsf	3968,4,c	;volatile
 14720                           
 14721                           ;Main.c: 159: }
 14722  003ADA  D001               	goto	i2l103
 14723  003ADC                     i2l102:
 14724                           
 14725                           ; BSR set to: 0
 14726                           ;Main.c: 160: else
 14727                           ;Main.c: 161: {
 14728                           ;Main.c: 162: PORTAbits.RA4 = 0;
 14729  003ADC  9880               	bcf	3968,4,c	;volatile
 14730  003ADE                     i2l103:
 14731                           
 14732                           ; BSR set to: 0
 14733                           ;Main.c: 163: }
 14734                           ;Main.c: 164: if(Led1_Counter >= 700)
 14735                           
 14736                           ; BSR set to: 0
 14737  003ADE  0EBC               	movlw	188
 14738  003AE0  5D7E               	subwf	_Led1_Counter& (0+255),w,b
 14739  003AE2  0E02               	movlw	2
 14740  003AE4  597F               	subwfb	(_Led1_Counter+1)& (0+255),w,b
 14741  003AE6  A0D8               	btfss	status,0,c
 14742  003AE8  D004               	goto	i2l104
 14743                           
 14744                           ; BSR set to: 0
 14745                           ;Main.c: 165: {
 14746                           ;Main.c: 166: Led1_Counter = 0;
 14747  003AEA  0E00               	movlw	0
 14748  003AEC  6F7F               	movwf	(_Led1_Counter+1)& (0+255),b
 14749  003AEE  0E00               	movlw	0
 14750  003AF0  6F7E               	movwf	_Led1_Counter& (0+255),b
 14751  003AF2                     i2l104:
 14752                           
 14753                           ; BSR set to: 0
 14754                           ;Main.c: 167: }
 14755                           ;Main.c: 168: Led1_Counter++;
 14756                           
 14757                           ; BSR set to: 0
 14758  003AF2  4B7E               	infsnz	_Led1_Counter& (0+255),f,b
 14759  003AF4  2B7F               	incf	(_Led1_Counter+1)& (0+255),f,b
 14760                           
 14761                           ; BSR set to: 0
 14762                           ;Main.c: 169: Update_State_Machine = 1;
 14763  003AF6  0E01               	movlw	1
 14764  003AF8  6F8B               	movwf	_Update_State_Machine& (0+255),b
 14765                           
 14766                           ; BSR set to: 0
 14767                           ;Main.c: 170: INTCONbits.TMR0IF = 0;
 14768  003AFA  94F2               	bcf	intcon,2,c	;volatile
 14769  003AFC                     i2l101:
 14770                           
 14771                           ;Main.c: 171: }
 14772                           ;Main.c: 173: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 14773                           
 14774                           ; BSR set to: 0
 14775  003AFC  BA9D               	btfsc	3997,5,c	;volatile
 14776  003AFE  AA9E               	btfss	3998,5,c	;volatile
 14777  003B00  D002               	goto	i2l105
 14778                           
 14779                           ;Main.c: 174: EUSART1_Receive_ISR();
 14780  003B02  ECE8  F020         	call	_EUSART1_Receive_ISR	;wreg free
 14781  003B06                     i2l105:
 14782                           
 14783                           ;Main.c: 175: }
 14784                           ;Main.c: 176: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 14785  003B06  B89D               	btfsc	3997,4,c	;volatile
 14786  003B08  A89E               	btfss	3998,4,c	;volatile
 14787  003B0A  D002               	goto	i2l106
 14788                           
 14789                           ;Main.c: 177: EUSART1_Transmit_ISR();
 14790  003B0C  ECD1  F020         	call	_EUSART1_Transmit_ISR	;wreg free
 14791  003B10                     i2l106:
 14792  003B10  C012  F050         	movff	??_tc_high+17,btemp+3
 14793  003B14  C011  F04F         	movff	??_tc_high+16,btemp+2
 14794  003B18  C010  F04E         	movff	??_tc_high+15,btemp+1
 14795  003B1C  C00F  F04D         	movff	??_tc_high+14,btemp
 14796  003B20  C00E  FFF5         	movff	??_tc_high+13,tablat
 14797  003B24  C00D  FFF8         	movff	??_tc_high+12,tblptru
 14798  003B28  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 14799  003B2C  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 14800  003B30  C00A  FFF4         	movff	??_tc_high+9,prodh
 14801  003B34  C009  FFF3         	movff	??_tc_high+8,prodl
 14802  003B38  C008  FFDA         	movff	??_tc_high+7,fsr2h
 14803  003B3C  C007  FFD9         	movff	??_tc_high+6,fsr2l
 14804  003B40  C006  FFE2         	movff	??_tc_high+5,fsr1h
 14805  003B44  C005  FFE1         	movff	??_tc_high+4,fsr1l
 14806  003B48  C004  FFEA         	movff	??_tc_high+3,fsr0h
 14807  003B4C  C003  FFE9         	movff	??_tc_high+2,fsr0l
 14808  003B50  C002  FFFB         	movff	??_tc_high+1,pclatu
 14809  003B54  C001  FFFA         	movff	??_tc_high,pclath
 14810  003B58  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14811  003B5A  0011               	retfie		f
 14812  003B5C                     __end_of_tc_high:
 14813                           	opt stack 0
 14814                           pclatu	equ	0xFFB
 14815                           pclath	equ	0xFFA
 14816                           tblptru	equ	0xFF8
 14817                           tblptrh	equ	0xFF7
 14818                           tblptrl	equ	0xFF6
 14819                           tablat	equ	0xFF5
 14820                           prodh	equ	0xFF4
 14821                           prodl	equ	0xFF3
 14822                           intcon	equ	0xFF2
 14823                           intcon2	equ	0xFF1
 14824                           postinc0	equ	0xFEE
 14825                           fsr0h	equ	0xFEA
 14826                           fsr0l	equ	0xFE9
 14827                           wreg	equ	0xFE8
 14828                           postinc1	equ	0xFE6
 14829                           postdec1	equ	0xFE5
 14830                           fsr1h	equ	0xFE2
 14831                           fsr1l	equ	0xFE1
 14832                           bsr	equ	0xFE0
 14833                           indf2	equ	0xFDF
 14834                           postinc2	equ	0xFDE
 14835                           postdec2	equ	0xFDD
 14836                           fsr2h	equ	0xFDA
 14837                           fsr2l	equ	0xFD9
 14838                           status	equ	0xFD8
 14839                           
 14840 ;; *************** function _EUSART1_Transmit_ISR *****************
 14841 ;; Defined at:
 14842 ;;		line 183 in file "../eusart1.c"
 14843 ;; Parameters:    Size  Location     Type
 14844 ;;		None
 14845 ;; Auto vars:     Size  Location     Type
 14846 ;;		None
 14847 ;; Return value:  Size  Location     Type
 14848 ;;                  1    wreg      void 
 14849 ;; Registers used:
 14850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14851 ;; Tracked objects:
 14852 ;;		On entry : 0/0
 14853 ;;		On exit  : 0/0
 14854 ;;		Unchanged: 0/0
 14855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14856 ;;      Params:         0       0       0       0       0       0       0       0       0
 14857 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14858 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14859 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14860 ;;Total ram usage:        0 bytes
 14861 ;; Hardware stack levels used:    1
 14862 ;; This function calls:
 14863 ;;		Nothing
 14864 ;; This function is called by:
 14865 ;;		_tc_high
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           	psect	text44
 14870  0041A2                     __ptext44:
 14871                           	opt stack 0
 14872  0041A2                     _EUSART1_Transmit_ISR:
 14873                           	opt stack 22
 14874                           
 14875                           ;eusart1.c: 186: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 14876                           
 14877                           ;incstack = 0
 14878  0041A2  0E7E               	movlw	126
 14879  0041A4  6040               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 14880  0041A6  D012               	goto	i2l538
 14881                           
 14882                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 14883  0041A8  5041               	movf	_eusart1TxTail,w,c
 14884  0041AA  0D01               	mullw	1
 14885  0041AC  0E7E               	movlw	low _eusart1TxBuffer
 14886  0041AE  24F3               	addwf	prodl,w,c
 14887  0041B0  6ED9               	movwf	fsr2l,c
 14888  0041B2  0E04               	movlw	high _eusart1TxBuffer
 14889  0041B4  20F4               	addwfc	prodh,w,c
 14890  0041B6  6EDA               	movwf	fsr2h,c
 14891  0041B8  50DF               	movf	indf2,w,c
 14892  0041BA  6EAD               	movwf	4013,c	;volatile
 14893  0041BC  2A41               	incf	_eusart1TxTail,f,c
 14894                           
 14895                           ;eusart1.c: 188: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 14896  0041BE  0E7D               	movlw	125
 14897  0041C0  6441               	cpfsgt	_eusart1TxTail,c
 14898  0041C2  D002               	goto	i2l539
 14899                           
 14900                           ;eusart1.c: 189: eusart1TxTail = 0;
 14901  0041C4  0E00               	movlw	0
 14902  0041C6  6E41               	movwf	_eusart1TxTail,c
 14903  0041C8                     i2l539:
 14904                           
 14905                           ;eusart1.c: 190: }
 14906                           ;eusart1.c: 191: eusart1TxBufferRemaining++;
 14907  0041C8  2A40               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 14908                           
 14909                           ;eusart1.c: 192: } else {
 14910  0041CA  0012               	return	
 14911  0041CC                     i2l538:
 14912                           
 14913                           ;eusart1.c: 193: PIE1bits.TX1IE = 0;
 14914  0041CC  989D               	bcf	3997,4,c	;volatile
 14915  0041CE  0012               	return	
 14916  0041D0                     __end_of_EUSART1_Transmit_ISR:
 14917                           	opt stack 0
 14918                           pclatu	equ	0xFFB
 14919                           pclath	equ	0xFFA
 14920                           tblptru	equ	0xFF8
 14921                           tblptrh	equ	0xFF7
 14922                           tblptrl	equ	0xFF6
 14923                           tablat	equ	0xFF5
 14924                           prodh	equ	0xFF4
 14925                           prodl	equ	0xFF3
 14926                           intcon	equ	0xFF2
 14927                           intcon2	equ	0xFF1
 14928                           postinc0	equ	0xFEE
 14929                           fsr0h	equ	0xFEA
 14930                           fsr0l	equ	0xFE9
 14931                           wreg	equ	0xFE8
 14932                           postinc1	equ	0xFE6
 14933                           postdec1	equ	0xFE5
 14934                           fsr1h	equ	0xFE2
 14935                           fsr1l	equ	0xFE1
 14936                           bsr	equ	0xFE0
 14937                           indf2	equ	0xFDF
 14938                           postinc2	equ	0xFDE
 14939                           postdec2	equ	0xFDD
 14940                           fsr2h	equ	0xFDA
 14941                           fsr2l	equ	0xFD9
 14942                           status	equ	0xFD8
 14943                           
 14944 ;; *************** function _EUSART1_Receive_ISR *****************
 14945 ;; Defined at:
 14946 ;;		line 197 in file "../eusart1.c"
 14947 ;; Parameters:    Size  Location     Type
 14948 ;;		None
 14949 ;; Auto vars:     Size  Location     Type
 14950 ;;		None
 14951 ;; Return value:  Size  Location     Type
 14952 ;;                  1    wreg      void 
 14953 ;; Registers used:
 14954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14955 ;; Tracked objects:
 14956 ;;		On entry : 0/0
 14957 ;;		On exit  : 0/0
 14958 ;;		Unchanged: 0/0
 14959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14960 ;;      Params:         0       0       0       0       0       0       0       0       0
 14961 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14962 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14963 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14964 ;;Total ram usage:        0 bytes
 14965 ;; Hardware stack levels used:    1
 14966 ;; This function calls:
 14967 ;;		Nothing
 14968 ;; This function is called by:
 14969 ;;		_tc_high
 14970 ;; This function uses a non-reentrant model
 14971 ;;
 14972                           
 14973                           	psect	text45
 14974  0041D0                     __ptext45:
 14975                           	opt stack 0
 14976  0041D0                     _EUSART1_Receive_ISR:
 14977                           	opt stack 22
 14978                           
 14979                           ;eusart1.c: 198: if (1 == RCSTA1bits.OERR) {
 14980                           
 14981                           ;incstack = 0
 14982  0041D0  A2AB               	btfss	4011,1,c	;volatile
 14983  0041D2  D002               	goto	i2l544
 14984                           
 14985                           ;eusart1.c: 201: RCSTA1bits.CREN = 0;
 14986  0041D4  98AB               	bcf	4011,4,c	;volatile
 14987                           
 14988                           ;eusart1.c: 202: RCSTA1bits.CREN = 1;
 14989  0041D6  88AB               	bsf	4011,4,c	;volatile
 14990  0041D8                     i2l544:
 14991                           
 14992                           ;eusart1.c: 203: }
 14993                           ;eusart1.c: 206: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 14994  0041D8  503F               	movf	_eusart1RxHead,w,c
 14995  0041DA  0D01               	mullw	1
 14996  0041DC  0E00               	movlw	low _eusart1RxBuffer
 14997  0041DE  24F3               	addwf	prodl,w,c
 14998  0041E0  6ED9               	movwf	fsr2l,c
 14999  0041E2  0E04               	movlw	high _eusart1RxBuffer
 15000  0041E4  20F4               	addwfc	prodh,w,c
 15001  0041E6  6EDA               	movwf	fsr2h,c
 15002  0041E8  CFAE FFDF          	movff	4014,indf2	;volatile
 15003  0041EC  2A3F               	incf	_eusart1RxHead,f,c
 15004                           
 15005                           ;eusart1.c: 207: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 15006  0041EE  0E7D               	movlw	125
 15007  0041F0  643F               	cpfsgt	_eusart1RxHead,c
 15008  0041F2  D002               	goto	i2l545
 15009                           
 15010                           ;eusart1.c: 208: eusart1RxHead = 0;
 15011  0041F4  0E00               	movlw	0
 15012  0041F6  6E3F               	movwf	_eusart1RxHead,c
 15013  0041F8                     i2l545:
 15014                           
 15015                           ;eusart1.c: 209: }
 15016                           ;eusart1.c: 210: eusart1RxCount++;
 15017  0041F8  2A3D               	incf	_eusart1RxCount,f,c	;volatile
 15018  0041FA  0012               	return		;funcret
 15019  0041FC                     __end_of_EUSART1_Receive_ISR:
 15020                           	opt stack 0
 15021                           pclatu	equ	0xFFB
 15022                           pclath	equ	0xFFA
 15023                           tblptru	equ	0xFF8
 15024                           tblptrh	equ	0xFF7
 15025                           tblptrl	equ	0xFF6
 15026                           tablat	equ	0xFF5
 15027                           prodh	equ	0xFF4
 15028                           prodl	equ	0xFF3
 15029                           intcon	equ	0xFF2
 15030                           intcon2	equ	0xFF1
 15031                           postinc0	equ	0xFEE
 15032                           fsr0h	equ	0xFEA
 15033                           fsr0l	equ	0xFE9
 15034                           wreg	equ	0xFE8
 15035                           postinc1	equ	0xFE6
 15036                           postdec1	equ	0xFE5
 15037                           fsr1h	equ	0xFE2
 15038                           fsr1l	equ	0xFE1
 15039                           bsr	equ	0xFE0
 15040                           indf2	equ	0xFDF
 15041                           postinc2	equ	0xFDE
 15042                           postdec2	equ	0xFDD
 15043                           fsr2h	equ	0xFDA
 15044                           fsr2l	equ	0xFD9
 15045                           status	equ	0xFD8
 15046                           pclatu	equ	0xFFB
 15047                           pclath	equ	0xFFA
 15048                           tblptru	equ	0xFF8
 15049                           tblptrh	equ	0xFF7
 15050                           tblptrl	equ	0xFF6
 15051                           tablat	equ	0xFF5
 15052                           prodh	equ	0xFF4
 15053                           prodl	equ	0xFF3
 15054                           intcon	equ	0xFF2
 15055                           intcon2	equ	0xFF1
 15056                           postinc0	equ	0xFEE
 15057                           fsr0h	equ	0xFEA
 15058                           fsr0l	equ	0xFE9
 15059                           wreg	equ	0xFE8
 15060                           postinc1	equ	0xFE6
 15061                           postdec1	equ	0xFE5
 15062                           fsr1h	equ	0xFE2
 15063                           fsr1l	equ	0xFE1
 15064                           bsr	equ	0xFE0
 15065                           indf2	equ	0xFDF
 15066                           postinc2	equ	0xFDE
 15067                           postdec2	equ	0xFDD
 15068                           fsr2h	equ	0xFDA
 15069                           fsr2l	equ	0xFD9
 15070                           status	equ	0xFD8
 15071                           
 15072                           	psect	rparam
 15073  0000                     pclatu	equ	0xFFB
 15074                           pclath	equ	0xFFA
 15075                           tblptru	equ	0xFF8
 15076                           tblptrh	equ	0xFF7
 15077                           tblptrl	equ	0xFF6
 15078                           tablat	equ	0xFF5
 15079                           prodh	equ	0xFF4
 15080                           prodl	equ	0xFF3
 15081                           intcon	equ	0xFF2
 15082                           intcon2	equ	0xFF1
 15083                           postinc0	equ	0xFEE
 15084                           fsr0h	equ	0xFEA
 15085                           fsr0l	equ	0xFE9
 15086                           wreg	equ	0xFE8
 15087                           postinc1	equ	0xFE6
 15088                           postdec1	equ	0xFE5
 15089                           fsr1h	equ	0xFE2
 15090                           fsr1l	equ	0xFE1
 15091                           bsr	equ	0xFE0
 15092                           indf2	equ	0xFDF
 15093                           postinc2	equ	0xFDE
 15094                           postdec2	equ	0xFDD
 15095                           fsr2h	equ	0xFDA
 15096                           fsr2l	equ	0xFD9
 15097                           status	equ	0xFD8
 15098                           
 15099                           	psect	temp
 15100  00004D                     btemp:
 15101                           	opt stack 0
 15102  00004D                     	ds	1
 15103  0000                     int$flags	set	btemp
 15104  0000                     wtemp6	set	btemp+1
 15105                           pclatu	equ	0xFFB
 15106                           pclath	equ	0xFFA
 15107                           tblptru	equ	0xFF8
 15108                           tblptrh	equ	0xFF7
 15109                           tblptrl	equ	0xFF6
 15110                           tablat	equ	0xFF5
 15111                           prodh	equ	0xFF4
 15112                           prodl	equ	0xFF3
 15113                           intcon	equ	0xFF2
 15114                           intcon2	equ	0xFF1
 15115                           postinc0	equ	0xFEE
 15116                           fsr0h	equ	0xFEA
 15117                           fsr0l	equ	0xFE9
 15118                           wreg	equ	0xFE8
 15119                           postinc1	equ	0xFE6
 15120                           postdec1	equ	0xFE5
 15121                           fsr1h	equ	0xFE2
 15122                           fsr1l	equ	0xFE1
 15123                           bsr	equ	0xFE0
 15124                           indf2	equ	0xFDF
 15125                           postinc2	equ	0xFDE
 15126                           postdec2	equ	0xFDD
 15127                           fsr2h	equ	0xFDA
 15128                           fsr2l	equ	0xFD9
 15129                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    67
    Data        11
    BSS         906
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      76
    BANK0           160     38     130
    BANK1           256      0     178
    BANK2           256      0     178
    BANK3           256      0     178
    BANK4           256      0     252
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Pcomm_List2	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    Pcomm_List	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), Comm_List(BANK0[32]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_SETxPWM
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _EEPROMxSTORE->_Eeprom_Store
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_atoi
    _TranslateMessage->_printf
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _EEPROMxREAD->_Eeprom_Read
    _SendMessage->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_READxRECEIVEDxMESSAGE
    _Update_StateMchn->_Train_Path
    _Train_Path->_Train_Move_Left_Brake
    _Train_Path->_Train_Move_Left_Start
    _Train_Path->_Train_Move_Right_Brake
    _Train_Path->_Train_Move_Right_Start
    _READxRECEIVEDxMESSAGE->_printf
    _TranslateMessage->_printf
    _DIAGNOSTICxTOxPC->_SendMessage
    _SendMessage->_printf

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  678701
                     _APIxInitialize
                   _DIAGNOSTICxTOxPC
                        _EEPROMxREAD
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     5     5      0  635488
                                             25 BANK0      5     5      0
                    _Debounce_Inputs
                       _EEPROMxSTORE
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                            _SETxPWM
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  507980
                                             23 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               2     2      0   63457
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               2     2      0   63457
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                2     2      0   63457
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                2     2      0   63457
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   47894
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   47894
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   47894
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   47894
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   33370
                                             30 COMRAM     7     4      3
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1   31226
                                             30 COMRAM     2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMxSTORE                                        10    10      0     626
                                             26 COMRAM    10    10      0
                       _Eeprom_Store
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Store                                         8     4      4     372
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0   30197
                                             30 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     144
                                             20 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   23478
                                             34 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   21307
                                             31 COMRAM     4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   6     2      4    1924
                                             20 COMRAM     6     2      4
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (5) _GETxAPIxVAL                                          2     0      2   14431
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0   15622
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          6     2      4   15622
                                             24 COMRAM     6     2      4
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         6     2      4    1216
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROMxREAD                                          4     4      0     307
                                             26 COMRAM     4     4      0
                        _Eeprom_Read
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read                                          8     6      2     236
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _DIAGNOSTICxTOxPC                                     2     2      0    3649
                                             31 COMRAM     2     2      0
                        _SendMessage
 ---------------------------------------------------------------------------------
 (2) _SendMessage                                          4     0      4    3649
                                             34 BANK0      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2147
                                             30 COMRAM     1     1      0
                                             21 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     112
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _DIAGNOSTICxTOxPC
     _SendMessage
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _EEPROMxREAD
     _Eeprom_Read
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _EEPROMxSTORE
       _Eeprom_Store
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Red_Led
     _SETxAPIxVAL
       _SENDxMESSAGE
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _SETxPWM
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _SETxAPIxVAL
         _SENDxMESSAGE
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      FC      13       98.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      B2      11       69.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      B2       9       69.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B2       7       69.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      82       5       81.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3E0      20        0.0%
DATA                 0      0     3E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Nov 27 20:39:40 2017

                  _eusart1TxBufferRemaining 0040                           ?_DIAGNOSTICxTOxPC 0001  
                                        l87 3ECC                                          l88 3EDC  
                                        bsr 000FE0                         ___wmul@multiplicand 0015  
                               __CFG_BORV$3 000000                                 ?_GETxAPIxRW 0013  
                              __CFG_CP0$OFF 000000                          ??_DIAGNOSTICxTOxPC 0020  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l210 0BEA  
                                       l203 12DA                                         l211 0C16  
                                       l220 0DAE                                         l212 0C3E  
                                       l204 0B2A                                         l301 1284  
                                       l221 0DD8                                         l213 0C4E  
                                       l310 1446                                         l302 128E  
                                       l230 0F5C                                         l222 0E04  
                                       l214 0CCC                                         l206 0B3A  
                                       l311 1350                                         l303 12CC  
                                       l231 0F60                                         l223 0E0E  
                                       l215 0CDC                                         l207 0B6C  
                                       l304 15A8                                         l320 13A4  
                                       l240 0FD4                                         l232 0FAA  
                                       l216 0D06                                         l208 0B96  
                                       l241 0FD8                                         l225 0EEA  
                                       l217 0D30                                         l209 0BC0  
                                       l402 2514                                         l306 1414  
                                       l314 136C                                         l250 104A  
                                       l242 0FDC                                         l226 0F1E  
                                       l218 0D5A                                         l403 2366  
                                       l323 13C0                                         l307 1328  
                                       l251 1056                                         l243 0FE8  
                                       l235 0FB8                                         l227 0F26  
                                       l219 0D84                                         l260 10CA  
                                       l228 0F42                                         l180 08A4  
                                       l421 2426                                         l333 1488  
                                       l317 1388                                         l253 11EA  
                                       l261 10CE                                         l245 1064  
                                       l237 0FF6                                         l181 08E2  
                                       l414 23CA                                         l342 1538  
                                       l326 13DC                                         l270 1110  
                                       l246 103E                                         l238 0FD0  
                                       l190 099C                                         l343 14C8  
                                       l255 10DC                                         l247 1094  
                                       l239 1026                                         l600 37AE  
                                       l424 243E                                         l336 1496  
                                       l280 11AC                                         l272 115C  
                                       l264 111E                                         l248 1042  
                                       l184 0920                                         l441 24FC  
                                       l417 23F6                                         l353 157A  
                                       l329 13F8                                         l249 1046  
                                       l193 09DC                                         l610 37E2  
                                       l450 2536                                         l434 249C  
                                       l338 151C                                         l346 14E4  
                                       l290 1254                                         l258 10C2  
                                       l178 089C                                         l611 37D2  
                                       l363 25C2                                         l435 24B4  
                                       l419 240E                                         l371 228E  
                                       l179 1590                                         l339 149E  
                                       l283 118C                                         l259 10C6  
                                       l195 0A1C                                         l187 095E  
                                       l604 3842                                         l452 253C  
                                       l356 1588                                         l284 1190  
                                       l268 110C                                         l517 4172  
                                       l605 37B2                                         l461 2582  
                                       l437 24CC                                         l365 22AE  
                                       l373 229A                                         l349 1500  
                                       l293 1262                                         l285 119A  
                                       l197 0AA6                                         l622 2D3A  
                                       l614 3822                                         l446 2556  
                                       l454 2542                                         l390 234A  
                                       l382 22E2                                         l366 226A  
                                       l286 119E                                         l278 114E  
                                       l519 419A                                         l623 2CD2  
                                       l471 25AA                                         l463 258A  
                                       l447 2530                                         l439 24E4  
                                       l391 232A                                         l367 227A  
                                       l287 11DC                                         l199 0AFA  
                                       l608 37C8                                         l376 2616  
                                       l384 22EE                                         l296 129C  
                                       l288 121A                                         l633 2D7C  
                                       l625 2CEE                                         l609 37F8  
                                       l473 25BA                                         l465 2592  
                                       l457 2572                                         l369 2282  
                                       l297 127C                                         l289 121E  
                                       l394 2330                                         l378 230E  
                                       l386 22FA                                         l643 284E  
                                       l651 26C0                                         l635 2D98  
                                       l627 2D0A                                         l467 259A  
                                       l459 257A                                         l379 22CC  
                                       l299 1280                                         l644 2804  
                                       l820 3DF8                                         l396 2336  
                                       l661 27CE                                         l653 26F6  
                                       l645 2632                                         l629 2D24  
                                       l821 3E10                                         l469 25A2  
                                       l902 1976                                         l822 3E20  
                                       l398 233C                                         l655 272C  
                                       l647 264C                                         l743 40F6  
                                       l671 289A                                         l911 19F4  
                                       l903 191E                                         l751 317A  
                                       l672 28D6                                         l920 1A72  
                                       l912 199C                                         l904 1940  
                                       l752 3184                                         l816 3E50  
                                       l824 3E24                                         l832 3DD0  
                                       l840 3DA4                                         l657 2762  
                                       l649 268A                                         l673 2912  
                                       l921 1A1A                                         l913 19BE  
                                       l825 3E3C                                         l817 3DF0  
                                       l841 3DBC                                         l833 3D70  
                                       l674 294E                                         l930 1A98  
                                       l922 1A3C                                         l850 166C  
                                       l826 3E4C                                         l842 3DCC  
                                       l659 2798                                         l675 298A  
                                       l931 1ABA                                         l907 1956  
                                       l819 3DF4                                         l835 3D74  
                                       l668 2A46                                         l676 29C6  
                                       l940 1B38                                         l916 19D4  
                                       l908 1960                                         l756 3F16  
                                       l836 3D78                                         l677 2A02  
                                       l669 2856                                         l925 1A52  
                                       l917 19DE                                         l853 1682  
                                       l749 3060                                         l837 3D90  
                                       l598 382C                                         l934 1AD0  
                                       l926 1A5C                                         l862 16F2  
                                       l854 16A4                                         l838 3DA0  
                                       l599 3756                                         l943 1B4E  
                                       l935 1ADA                                         l871 1762  
                                       l863 1714                                         l759 3F32  
                                       l952 1BCC                                         l944 1B58  
                                       l880 17D2                                         l872 1784  
                                       l848 16BA                                         l961 1C3C  
                                       l953 1BD6                                         l929 1AF0  
                                       l881 17F4                                         l857 172A  
                                       l849 1662                                         l970 1CAC  
                                       l962 1C46                                         l938 1B6E  
                                       l890 1864                                         l866 179A  
                                       l858 16D2                                         l971 1CB6  
                                       l947 1BEC                                         l939 1B16  
                                       l875 180A                                         l867 1742  
                                       l859 16DC                                         l980 1D26  
                                       l956 1C5C                                         l948 1B94  
                                       l884 187A                                         l876 17B2  
                                       l868 174C                                         l965 1CCC  
                                       l957 1C04                                         l949 1BB6  
                                       l893 18F8                                         l885 1822  
                                       l877 17BC                                         _API 0100  
                                       l974 1D3C                                         l966 1C74  
                                       l958 1C26                                         l894 18A0  
                                       l886 1844                                         l975 1CE4  
                                       l967 1C96                                         l895 18C2  
                                       l976 1D06                                         l889 185A  
                                       l898 18D8                                         l979 1D1C  
                                       l899 18E2                                         l998 2C52  
                                       l999 2A8E                                __CFG_CPB$OFF 000000  
                              _Stop_Program 0087                                         _PR2 000FCB  
                              __CFG_CPD$OFF 000000                                __CFG_BOR$OFF 000000  
              Eeprom_Read@Location_Low_Byte 0015                                         prod 000FF3  
                                       wreg 000FE8                      ?_READxRECEIVEDxMESSAGE 0001  
          Train_Move_Right_Start@Return_Val 00DD                                ?_GETxAPIxVAL 0013  
                                _Diag_Comm2 006E                             APIxInitialize@i 0013  
                              __CFG_LVP$OFF 000000         __end_of_Left_Mountain_From_The_Left 396C  
               _Left_Mountain_From_The_Left 385A                                __CFG_WDT$OFF 000000  
                                      l1000 2BAC                                        l1010 2B20  
                                      l1002 2B10                                        l1003 2A94  
                                      l1012 2B5E       __end_of_Right_Mountain_From_The_Right 3632  
    __size_of_Right_Mountain_From_The_Right 0114               _Right_Mountain_From_The_Right 351E  
                                      l1005 2AD2                                        l1101 3A36  
                                      l1015 2C66                                        l1007 2BBA  
                                      l1103 3A60                                        l1016 2BC0  
                                      l1104 3A64                                        l1120 2E50  
                                      l1017 2BEA                                        l1009 2B9C  
                                      l1113 2EE8                                        l1121 2E5E  
                                      l1018 2BF8                                        l1122 2EB0  
                                      l1114 2DC4                                        l1050 3238  
                                      l1123 2EDA                                        l1115 2DF8  
                                      l1043 329E                                        l1051 3270  
                                      l1204 3700                                        l1116 2F04  
                                      l1044 3188                                        l1220 2F62  
                                      l1061 3620                                        l1117 2E22  
                                      l1053 3298                                        l1045 31A6  
                                      l1206 372A                                        l1062 3524  
                                      l1046 32BA                                        l1222 2F68  
                                      l1150 32DE                                        l1207 372E  
                                      l1119 2E28                                        l1047 31B4  
                                      l1223 2F90                                        l1151 33F0  
                                      l1048 3206                                        l1216 3028  
                                      l1224 2F9E                                        l1152 32E8  
                                      l1065 3554                                        l1049 322E  
                                      l1225 2FF0                                        l1217 2F0A  
                                      l1153 333C                                        l1170 3968  
                                      l1090 39A0                                        l1226 301A  
                                      l1218 2F38                                        l1154 3364  
                                      l1171 3896                                        l1067 362E  
                                      l1219 3044                                        l1155 3372  
                                      l1260 343C                                        l1164 395A  
                                      l1172 38EA                                        l1092 3A78  
                                      l1076 35EE                                        l1068 355A  
                                      l1148 33D4                                        l1156 33A4  
                                      l1253 3400                                        l1237 3C62  
                                      l1181 3950                                        l1165 3860  
                                      l1093 39A6                                        l1069 35B0  
                                      l1157 33CA                                        l1149 32C0  
                                      l1262 3464                                        l1254 3410  
                                      l1238 3CA0                                        l1182 3954  
                                      l1086 3A6A                                        l1094 39FA  
                                      l1190 3638                                        l1078 3616  
                                      l1087 3972                                        l1079 361A  
                                      l1168 3890                                        l1193 3668  
                                      l1266 34A6                                        l1442 3B62  
                                      l1267 34F8                                        l1451 3C20  
                                      l1443 3B5E                                        l1179 3928  
                                      l1195 3742                                        l1268 34AC  
                                      l1196 366E                                        l1445 3BA2  
                                      l1189 3734                                        l1197 36C2  
                                      l1702 3F5C                                        l1703 3F54  
                                      l1623 4280                                        l1712 408C  
                                      l1448 3BEE                                        l1713 4084  
                                      l1449 3BB4                                        l1706 3F7C  
                                      l1707 3F86                                        l1716 40A4  
                                      l1717 40AE                                        l6108 1DBC  
                                      l6138 40D0                                        l6098 1D5C  
                                      l8028 3468                                        l9100 1342  
                                      l8074 3BEA                                        l7602 336C  
                                      l7464 42DA                                        l7634 31AE  
                                      l7822 3946                                        l7718 3022  
                                      l7770 2EE2                                        l8708 2D7C  
                                      l9196 14BA                                        l8812 0C12  
                                      l7934 360C                                        l8908 0EEA  
                                      l7990 3A56                                        l7878 3720  
                                      l8696 2D24                                        l8688 2CEE  
                                      STR_1 084E                                        STR_2 0855  
                                      STR_3 085C                                        STR_4 0863  
                                      STR_5 086A                                        STR_6 085C  
                                      STR_7 0863                                        STR_8 0844  
            Right_Mountain_From_The_Left@rc 00CB                                        u5160 1DBC  
                                      u7020 3494                                        u7040 3502  
                                      u7220 17A2                                        u6430 3F60  
                                      u6350 3FB0                                        u8200 2D88  
                                      u7400 19FC                                        u7320 1900  
                                      u7160 16C2                                        u6360 3C50  
                                      u7410 19FE                                        u7330 1902  
                                      u7250 1812                                        u7226 17A4  
                                      u6460 4090                                        u7190 1732  
                                      u7166 16C4                                        u9030 1560  
                                      u3975 413E                                        u9200 27A6  
                                      u8160 2CFA                                        u7520 1B76  
                                      u7440 1A7A                                        u7360 197E  
                                      u7280 1882                                        u7256 1814  
                                      u6720 391C                                        u6800 36F4  
                                      u8320 0A4C                                        u9210 27DC  
                                      u6490 4118                                        u7530 1B78  
                                      u7450 1A7C                                        u7370 1980  
                                      u7290 1884                                        u8330 0AD6  
                                      u9140 2662                                        u7620 1CD4  
                                      u7196 1734                                        u9150 2698  
                                      u9070 379A                                        u6670 3882  
                                      u6910 3992                                        u6750 365A  
                                      u6830 3546                                        u9160 26CE  
                                      u7560 1BF4                                        u7480 1AF8  
                                      u7720 22AA                                        u9170 2704  
                                      u7650 1D44                                        u7626 1CD6  
                                      u7490 1AFA                                        u9180 273A  
                                      u7660 305E                                        u9190 2770  
                                      u7590 1C64                                        u7566 1BF6  
                                      u7670 30CE                                        u8630 0F1A  
                                      u8550 0E00                                        u7656 1D46  
                                      u6960 3A2A                                        u6880 35E2  
                                      u8730 1246                                        u7596 1C66  
                                      u8740 1278                                        u7870 23F2  
                                      u8670 0F88                                        u7960 24B0  
                                      u7880 240A                                        u8920 146E  
                                      u7970 24C8                                        u7890 2422  
                                      u7980 24E0                                        u7990 24F8  
                              __CFG_WDTPS$1 000000                                        _TXIF 007CF4  
                                      _Data 00AC                                __CFG_PWRT$ON 000000  
                    __end_of_APIxInitialize 2240              __size_of_Train_Move_Left_Brake 0146  
             __end_of_Train_Move_Left_Brake 2F08                                        _pLen 0076  
                                      _atoi 3B5C                                        _main 3E6C  
                             ?_EUSART1_Read 0001              __size_of_Train_Move_Left_Start 0138  
                     _Update_StateMchn$2175 00D1                       _Update_StateMchn$2176 00D3  
                           __end_of_SETxPWM 3CD6                                        fsr0h 000FEA  
                                      fsr1h 000FE2                                        fsr2h 000FDA  
                                      fsr0l 000FE9                                        indf2 000FDF  
                                      fsr1l 000FE1                                        fsr2l 000FD9  
                                      btemp 004D               __end_of_Train_Move_Left_Start 32BE  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 00C6                             __end_of_DataLen 0844  
                       __end_of_Eeprom_Read 402E                               __CFG_IESO$OFF 000000  
                           __end_of_ApiList 0839                 EUSART1_Initialize@baud_rate 0013  
                        Green_Led@Operation 0013                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000000                        Eeprom_Store@Location 0013  
                             ??_Init_Timers 0013                             __end_of_Red_Led 3DEC  
                             __CFG_PLLDIV$5 000000                             EEPROMxREAD@Data 001B  
                      __end_of_EEPROMxSTORE 3186                              __CFG_CCP2MX$ON 000000  
                                     ?_atoi 0019                                       ?_main 0001  
                                     _EEADR 000FA9                                       _CMCON 000FB4  
                          Red_Led@Operation 0013                                       _T0CON 000FD5  
                __end_of_SETxAPIxVALxNoxRET 4134                                       _T2CON 000FCA  
                           __end_of___lwdiv 3F90                                SETxPWM@speed 001F  
                                     i2l101 3AFC                                       i2l102 3ADC  
                                     i2l103 3ADE                                       i2l104 3AF2  
                                     i2l105 3B06                             __end_of___lwmod 40B8  
                                     i2l106 3B10                                       i2l544 41D8  
                                     i2l545 41F8                                       i2l538 41CC  
                                     i2l539 41C8                                       _TMR0H 000FD7  
                                     _TMR0L 000FD6                                       _SPBRG 000FAF  
                             __CFG_USBDIV$2 000000                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                             __CFG_WRT0$OFF 000000                               __CFG_WRT1$OFF 000000  
                             __CFG_WRT2$OFF 000000                               __CFG_WRT3$OFF 000000  
                      _EUSART1_Transmit_ISR 41A2                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                                       _pData 0078  
                            __CFG_EBTRB$OFF 000000                             __end_of_dpowers 0843  
                           __end_of_isdigit 4288                             __end_of_tc_high 3B5C  
                                     atoi@a 001E                                       atoi@s 0019  
                                     _putch 42D8                                       pclath 000FFA  
                                     tablat 000FF5                             ?_APIxInitialize 0001  
                            ??_EUSART1_Read 0013                                       status 000FD8  
                                     wtemp6 004E   Train_Move_Left_Brake@Train_Move_Wait_Time 0064  
                 __size_of_TranslateMessage 0158                         __size_of_GETxAPIxRW 001C  
                            __CFG_ICPRT$OFF 000000                        __end_of_Eeprom_Store 3F3E  
                      __size_of_EEPROMxREAD 0040                             __initialization 3CD6  
                              __end_of_atoi 3C2A                  __end_of_EUSART1_Initialize 4076  
                              __end_of_main 3EE6                               ??_SendMessage 0020  
                          __end_of_Init_Pwm 4224                                      ??_atoi 001B  
                                    ??_main 0026                         __end_of_Init_Timers 42D8  
                             __activetblptr 000002                      Eeprom_Read@Return_Data 0019  
                          __end_of_Junction 2C6A                                _Led1_Counter 007E  
                                _Pcomm_List 0072                           _Green_Led_Counter 002A  
                     ?_EUSART1_Transmit_ISR 0001                           ?_Update_StateMchn 0001  
                        ??_Update_StateMchn 00CF                                      _ADCON1 000FC1  
                                    _EEDATA 000FA8                                      _CCPR1L 000FBE  
                                 ??_SETxPWM 0022                                      _EECON2 000FA7  
                                    ?_putch 0001                                      _API_RW 0200  
                        __size_of_Green_Led 0080                                 _Eeprom_Read 3FE0  
                                    _INTCON 000FF2                     ?_Train_Move_Right_Brake 0001  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 003A                     ?_Train_Move_Right_Start 0001  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 0001  
                                 ??_Red_Led 0013                              __CFG_XINST$OFF 000000  
           Train_Move_Left_Brake@Return_Val 00DE                                      ___wmul 4224  
                            __CFG_STVREN$ON 000000                                   ??___lwdiv 0017  
                                 ??___lwmod 001E                                      clear_0 3D1C  
                                    clear_1 3D28                                      clear_2 3D34  
                              _DelayCounter 006C                                      clear_3 3D40  
                                    clear_4 3D4C                                      clear_5 3D58  
                                    _tc_low 0018                                      _printf 33F4  
                            _Switch_Moutain 002C                                  _Train_Path 2240  
   Right_Mountain_From_The_Right@Return_Val 004B      Left_Mountain_From_The_Right@Return_Val 004A  
                              __pdataCOMRAM 0048                              _Switch_Program 0089  
                                 ??_isdigit 0013                                   ??_tc_high 0001  
                       __end_of_SendMessage 426A                   _Activate_Controls_Counter 007A  
                              __mediumconst 0000                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                              ?_SETxAPIxVAL 0019                   _Button_Contact_Counter_LB 0031  
                 _Button_Contact_Counter_LF 0030                   _Button_Contact_Counter_RB 002F  
                 _Button_Contact_Counter_RF 002E              __end_of_Train_Move_Right_Brake 3048  
                           _eusart1RxBuffer 0400                        __size_of_GETxAPIxVAL 001C  
                           _eusart1TxBuffer 047E              __end_of_Train_Move_Right_Start 33F4  
                      _Train_Move_Pwm_Count 0080                                  __accesstop 0060  
                   __end_of__initialization 3D5E                             __CFG_PBADEN$OFF 000000  
                             ___rparam_used 000001                       __size_of_EEPROMxSTORE 013E  
                             _Received_Data 0086                              __pcstackCOMRAM 0001  
                              __pidataBANK0 42E4                                 _Init_Timers 42C0  
                             __end_of_putch 42E4                           __end_of_Green_Led 3E6C  
                              ??_GETxAPIxRW 0015                     ??_READxRECEIVEDxMESSAGE 00D8  
                      __end_of_EUSART1_Read 41A2                           __end_of_SetDCPWM1 416E  
                           _Red_Led_Counter 0028                      ??_EUSART1_Transmit_ISR 0001  
Train_Move_Right_Start@Train_Move_Wait_Time 0062                    __size_of_Debounce_Inputs 0786  
               __end_of_EUSART1_Receive_ISR 41FC            Train_Move_Right_Brake@Return_Val 00DC  
                             ?_SENDxMESSAGE 0013                   __size_of_DIAGNOSTICxTOxPC 023A  
                                   ??_putch 0013                               _eusart1RxHead 003F  
                             _eusart1TxHead 0042                       __size_of_Eeprom_Store 0058  
               Junction@Junction_Left_Right 0020                               _eusart1RxTail 003E  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                __pbssBANK2 0200                                  __pbssBANK3 0300  
                                __pbssBANK4 0400                               _eusart1TxTail 0041  
                              _EEPROMxSTORE 3048                                   ?_Init_Pwm 0001  
                          _TranslateMessage 2C6A                                 _Pcomm_List2 0070  
                        __end_of_GETxAPIxRW 42C0                            GETxAPIxVAL@index 0013  
                          SETxAPIxVAL@index 0019                                   ?_Junction 001F  
                          SETxAPIxVAL@value 001B        __size_of_Left_Mountain_From_The_Left 0112  
                                   ?___wmul 0013                            SendMessage@index 00D8  
                          SendMessage@value 00DA                                     _CCP1CON 000FBD  
                               _SendMessage 424A                                     ?_tc_low 0001  
                                   ?_printf 00CB                                 ?_Train_Path 00CD  
                              _Eeprom_Store 3EE6                                     _INTCON2 000FF1  
 Train_Move_Left_Start@Train_Move_Wait_Time 0066                              ??_SENDxMESSAGE 0017  
                          ??_APIxInitialize 0013                                     _SETxPWM 3C2A  
                          SETxPWM@direction 0021                                     _DataLen 0843  
                                   _ApiList 0801                          _SETxAPIxVALxNoxRET 40F8  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 001F  
                         Eeprom_Store@Value 0015                                     _Red_Led 3D6C  
                     _Train_Move_Left_Brake 2DC2                                  ??_Junction 0020  
                                   __Hparam 0000                         ?_SETxAPIxVALxNoxRET 0015  
                     _Train_Move_Left_Start 3186                                     __Lparam 0000  
                      _Message_To_Translate 0084                             __size_of___wmul 0026  
                                   ___lwdiv 3F3E                                     ___lwmod 4076  
                              __psmallconst 0800                                     __pcinit 3CD6  
                                   __ramtop 0800                             __size_of_tc_low 00AE  
                                   __ptext0 3E6C                                     __ptext1 0872  
                                   __ptext2 2240                                     __ptext3 32BE  
                                   __ptext4 2F08                                     __ptext5 3186  
                                   __ptext6 2DC2                                     __ptext7 351E  
                                   __ptext8 3632                                     __ptext9 396C  
                      Train_Path@Return_Val 00E0                             __size_of_printf 012A  
                                   _dpowers 0839                                     _isdigit 426A  
                                   _tc_high 0008                        ??_SETxAPIxVALxNoxRET 0019  
                        _EUSART1_Initialize 402E                   _Train_Move_Pwm_Fast_Count 0068  
                            __pintcode_body 3A7C                        end_of_initialization 3D5E  
                           _Switch_Junction 002D                                ?_Eeprom_Read 0013  
                         ??_Debounce_Inputs 001F                         ?_EUSART1_Initialize 0001  
                      __size_of_SETxAPIxVAL 0050                               __Lmediumconst 0000  
                                   int_func 3A7C                            SETxPWM@pwm_speed 0024  
                             ??_EEPROMxREAD 001B                   __size_of_Update_StateMchn 0D5C  
                       __size_of_Train_Path 03DA                                   _RCSTAbits 000FAB  
                                   printf@c 00D7                                     printf@f 00CB  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                       __size_of_EUSART1_Read 0034  
            Left_Mountain_From_The_Right@rc 00CB                        ??_EUSART1_Initialize 0013  
                                 _PORTAbits 000F80                                   _PORTBbits 000F81  
                                 _PORTCbits 000F82                                   _PORTDbits 000F83  
                                 _PORTEbits 000F84                                   _TRISAbits 000F92  
                                 _TRISBbits 000F93                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                                   _TRISEbits 000F96  
                       Eeprom_Read@Location 0013                            _DIAGNOSTICxTOxPC 261A  
              Junction@Junction_Switch_Time 006A                                   _Diag_Comm 0074  
                    ?_Train_Move_Left_Brake 0001                                _EUSART1_Read 416E  
                                 _TXSTAbits 000FAC                      ?_Train_Move_Left_Start 0001  
                               _Switch_Main 00E1                                 _Switch_Init 008A  
                             EEPROMxSTORE@i 0023                        __end_of_SENDxMESSAGE 2A8A  
                       __end_of_EEPROMxREAD 40F8                                ?_Init_Timers 0001  
                                 _Comm_List 008C                          Junction@Return_Val 004C  
                            __end_of___wmul 424A                                 _BAUDCONbits 000FB8  
                             __pidataCOMRAM 42EA                 _Train_Move_Right_Brake$2180 00CB  
                      _Update_State_Machine 008B                              __end_of_tc_low 00C6  
                  __end_of_TranslateMessage 2DC2                 _Button_Contact_Counter_Stop 0033  
                            __end_of_printf 351E              __size_of_READxRECEIVEDxMESSAGE 0114  
                                 _Green_Led 3DEC               __end_of_READxRECEIVEDxMESSAGE 385A  
                       start_initialization 3CD6                               ??_GETxAPIxVAL 0015  
                                 _SetDCPWM1 4134                             SetDCPWM1@DCycle 0019  
                    _Mountain_Delay_Counter 0026                ?_Left_Mountain_From_The_Left 0001  
             Eeprom_Store@Location_Low_Byte 0017                           __size_of_Init_Pwm 0028  
             Eeprom_Read@Location_High_Byte 0017                           __size_of_Junction 01E0  
                                  ??___wmul 0017                                 __pdataBANK0 00DC  
                          __CFG_LPT1OSC$OFF 000000                                ?_SendMessage 00D8  
                                  ??_tc_low 00B6                                    ??_printf 001F  
                            _eusart1RxCount 003D                                ??_Train_Path 0026  
                                ?_Green_Led 0001                                 __pbssCOMRAM 0026  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 00B6  
                                ?_SetDCPWM1 0015  Train_Move_Right_Brake@Train_Move_Wait_Time 0060  
                              _isdigit$1832 0014                                    ?_SETxPWM 001F  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 42A4  
             ??_Left_Mountain_From_The_Left 0026                        __size_of_Eeprom_Read 004E  
                               _EEPROMxREAD 40B8                                    ?_Red_Led 0001  
                          _Update_StateMchn 0872                            ___lwdiv@dividend 0013  
     Left_Mountain_From_The_Left@Return_Val 0049      Right_Mountain_From_The_Left@Return_Val 0048  
                        __end_of_Train_Path 261A                                   __pintcode 0008  
                                  ?___lwdiv 0013        __end_of_Left_Mountain_From_The_Right 3A7C  
     __size_of_Left_Mountain_From_The_Right 0110                _Left_Mountain_From_The_Right 396C  
                                  ?___lwmod 001A                                 __pintcodelo 0018  
                           GETxAPIxRW@index 0013                             _Debounce_Inputs 15CE  
                               __smallconst 0800                    ??_Train_Move_Right_Brake 0026  
                                  ?_isdigit 0001                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 00CB                    ??_Train_Move_Right_Start 0026  
                     TranslateMessage@Index 0022                       Junction@Straight_Bend 001F  
                     TranslateMessage@Value 0020                _Button_Contact_Counter_Start 0034  
                  _Reed_Contact_LMD_Counter 0037                            ___lwdiv@quotient 0018  
                _Train_Move_Left_Brake$2178 00CB                              __size_of_putch 000C  
               _Train_Move_Right_Start$2179 00CB                              ___wmul@product 0017  
                     __size_of_SENDxMESSAGE 0236        __end_of_Right_Mountain_From_The_Left 3746  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 3632  
                                  _PIE1bits 000F9D                              _Adjust_Counter 007C  
             Left_Mountain_From_The_Left@rc 00CB                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1              Eeprom_Store@Location_High_Byte 0019  
                                  _RCONbits 000FD0                              Train_Path@From 00CE  
                  __end_of_DIAGNOSTICxTOxPC 2854                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           ___wmul@multiplier 0013  
                         SENDxMESSAGE@index 0013                           SENDxMESSAGE@value 0015  
                               ??_Green_Led 0013                                  printf@flag 00D3  
                                printf@prec 00D4                                EEPROMxREAD@i 001D  
               __size_of_SETxAPIxVALxNoxRET 003C                                 ??_SetDCPWM1 0017  
                               _GETxAPIxVAL 4288                               ??_SETxAPIxVAL 001D  
                              _SENDxMESSAGE 2854                                   copy_data0 3CEA  
                                 copy_data1 3D0A                     ??_Train_Move_Left_Brake 0026  
                  _Reed_Contact_LMU_Counter 0038                            __size_of_SETxPWM 00AC  
                   ??_Train_Move_Left_Start 0026                          SetDCPWM1@dutycycle 0015  
                                  _Init_Pwm 41FC                       EUSART1_Read@readValue 0013  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 04EC  
                                  __Hrparam 0000                                    _Junction 2A8A  
                          __size_of_Red_Led 0080               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                                    _TrSwitch 0083  
                                  _RxSwitch 0085                    _Reed_Contact_RMD_Counter 0035  
                   __end_of_Debounce_Inputs 1D54                 __size_of_EUSART1_Initialize 0048  
                          __size_of___lwdiv 0052                            __size_of___lwmod 0042  
                         _Switch_Train_Path 0088                           _Switch_Train_Move 0082  
                          _Switch_Adjust_LB 0046                            _Switch_Adjust_LF 0045  
                          _Switch_Adjust_RB 0044                            _Switch_Adjust_RF 0043  
                      __size_of_SendMessage 0020                           ?_TranslateMessage 0001  
                                _API_EEPROM 0300             __size_of_Train_Move_Right_Brake 0140  
                          __size_of_isdigit 001E                            __size_of_tc_high 3B54  
                        ??_TranslateMessage 0020                             ___lwdiv@divisor 0015  
           __size_of_Train_Move_Right_Start 0136                             ___lwdiv@counter 0017  
                                  __ptext10 385A                                    __ptext11 3C2A  
                                  __ptext20 2C6A                                    __ptext12 2A8A  
                                  __ptext21 3B5C                                    __ptext13 3D6C  
                                  __ptext30 3F90                                    __ptext22 426A  
                                  __ptext14 3DEC                                    __ptext31 2854  
                                  __ptext23 4224                                    __ptext15 3048  
                                  __ptext40 3F3E                                    __ptext32 402E  
                                  __ptext24 40F8                                    __ptext16 3EE6  
                                  __ptext41 1D54                                    __ptext33 40B8  
                                  __ptext25 4288                                    __ptext17 15CE  
                                  __ptext34 3FE0                                    __ptext26 42A4  
                                  __ptext18 4134                                    __ptext35 261A  
                                  __ptext27 416E                                    __ptext19 3746  
                                  __ptext44 41A2                                    __ptext36 424A  
                                  __ptext28 42C0                                    __ptext45 41D0  
                                  __ptext37 33F4                                    __ptext29 41FC  
                                  __ptext38 42D8                                    __ptext39 4076  
                             ?_EEPROMxSTORE 0001                               __size_of_atoi 00CE  
                             __size_of_main 007A                         __end_of_SETxAPIxVAL 3FE0  
                   _Reed_Contact_LB_Counter 003B                                    int$flags 004D  
                   _Reed_Contact_LF_Counter 003C                                    atoi@sign 001D  
                _Train_Move_Left_Start$2177 00CB                    _Reed_Contact_RMU_Counter 0036  
                                 printf@val 00D5                         _EUSART1_Receive_ISR 41D0  
                                _GETxAPIxRW 42A4                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0013                               ?_Eeprom_Store 0013  
                  __end_of_Update_StateMchn 15CE                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0026              ??_Left_Mountain_From_The_Right 0026  
                     _READxRECEIVEDxMESSAGE 3746                                    isdigit@c 0015  
                   _Reed_Contact_RB_Counter 0039                              ??_EEPROMxSTORE 001B  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                            ___lwmod@dividend 001A  
                              ?_EEPROMxREAD 0001                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 003A                      _Train_Move_Right_Brake 2F08  
              __end_of_EUSART1_Transmit_ISR 41D0                      _Train_Move_Right_Start 32BE  
           Train_Move_Left_Start@Return_Val 00DF                                Train_Path@To 00CD  
                                  printf@ap 00D1                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0047              ??_Right_Mountain_From_The_Left 0026  
                            ??_Eeprom_Store 0017                             ___lwmod@divisor 001C  
                           ___lwmod@counter 001E                     SETxAPIxVALxNoxRET@index 0015  
                               _SETxAPIxVAL 3F90                     SETxAPIxVALxNoxRET@value 0017  
                             ??_Eeprom_Read 0015                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 0001                              _APIxInitialize 1D54  
             _Button_Contact_Counter_Middle 0032  
