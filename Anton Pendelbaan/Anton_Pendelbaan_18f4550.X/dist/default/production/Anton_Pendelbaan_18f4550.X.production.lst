

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Dec 07 20:55:01 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           ; Version 1.44
    73                           ; Generated 14/09/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F4550 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataCOMRAM
   108  00428E                     __pidataCOMRAM:
   109                           	opt stack 0
   110                           
   111                           ;initializer for Right_Mountain_From_The_Left@Return_Val
   112  00428E  01                 	db	1
   113                           
   114                           ;initializer for Left_Mountain_From_The_Left@Return_Val
   115  00428F  01                 	db	1
   116                           
   117                           ;initializer for Left_Mountain_From_The_Right@Return_Val
   118  004290  01                 	db	1
   119                           
   120                           ;initializer for Right_Mountain_From_The_Right@Return_Val
   121  004291  01                 	db	1
   122                           
   123                           ;initializer for Junction@Return_Val
   124  004292  01                 	db	1
   125                           
   126                           	psect	idataBANK0
   127  004288                     __pidataBANK0:
   128                           	opt stack 0
   129                           
   130                           ;initializer for Train_Move_Right_Brake@Return_Val
   131  004288  01                 	db	1
   132                           
   133                           ;initializer for Train_Move_Right_Start@Return_Val
   134  004289  01                 	db	1
   135                           
   136                           ;initializer for Train_Move_Left_Brake@Return_Val
   137  00428A  01                 	db	1
   138                           
   139                           ;initializer for Train_Move_Left_Start@Return_Val
   140  00428B  01                 	db	1
   141                           
   142                           ;initializer for Train_Path@Return_Val
   143  00428C  01                 	db	1
   144                           
   145                           ;initializer for _Switch_Main
   146  00428D  01                 	db	1
   147                           
   148                           	psect	smallconst
   149  000800                     __psmallconst:
   150                           	opt stack 0
   151  000800  00                 	db	0
   152  000801                     _ApiList:
   153                           	opt stack 0
   154  000801  0012               	dw	18
   155  000803  0013               	dw	19
   156  000805  0014               	dw	20
   157  000807  0015               	dw	21
   158  000809  0016               	dw	22
   159  00080B  0017               	dw	23
   160  00080D  0018               	dw	24
   161  00080F  0019               	dw	25
   162  000811  001A               	dw	26
   163  000813  001B               	dw	27
   164  000815  002E               	dw	46
   165  000817  002F               	dw	47
   166  000819  0031               	dw	49
   167  00081B  0034               	dw	52
   168  00081D  0035               	dw	53
   169  00081F  0038               	dw	56
   170  000821  003A               	dw	58
   171  000823  003B               	dw	59
   172  000825                     __end_of_ApiList:
   173                           	opt stack 0
   174  000825                     _dpowers:
   175                           	opt stack 0
   176  000825  0001               	dw	1
   177  000827  000A               	dw	10
   178  000829  0064               	dw	100
   179  00082B  03E8               	dw	1000
   180  00082D  2710               	dw	10000
   181  00082F                     __end_of_dpowers:
   182                           	opt stack 0
   183  00082F                     _DataLen:
   184                           	opt stack 0
   185  00082F  0A                 	db	10
   186  000830                     __end_of_DataLen:
   187                           	opt stack 0
   188  0000                     _PORTEbits	set	3972
   189  0000                     _PORTBbits	set	3969
   190  0000                     _PORTCbits	set	3970
   191  0000                     _PIR2bits	set	4001
   192  0000                     _EECON2	set	4007
   193  0000                     _EEDATA	set	4008
   194  0000                     _EEADR	set	4009
   195  0000                     _EECON1bits	set	4006
   196  0000                     _RCREG1	set	4014
   197  0000                     _RCSTA1bits	set	4011
   198  0000                     _TXREG1	set	4013
   199  0000                     _SPBRG	set	4015
   200  0000                     _SPBRGH	set	4016
   201  0000                     _TXSTAbits	set	4012
   202  0000                     _RCSTAbits	set	4011
   203  0000                     _BAUDCONbits	set	4024
   204  0000                     _T2CON	set	4042
   205  0000                     _CCP1CON	set	4029
   206  0000                     _CCPR1L	set	4030
   207  0000                     _PR2	set	4043
   208  0000                     _T0CON	set	4053
   209  0000                     _TMR0L	set	4054
   210  0000                     _TMR0H	set	4055
   211  0000                     _INTCON2	set	4081
   212  0000                     _INTCON	set	4082
   213  0000                     _RCONbits	set	4048
   214  0000                     _PIR1bits	set	3998
   215  0000                     _PIE1bits	set	3997
   216  0000                     _INTCONbits	set	4082
   217  0000                     _TRISBbits	set	3987
   218  0000                     _TRISEbits	set	3990
   219  0000                     _TRISCbits	set	3988
   220  0000                     _PORTDbits	set	3971
   221  0000                     _PORTAbits	set	3968
   222  0000                     _TRISDbits	set	3989
   223  0000                     _TRISAbits	set	3986
   224  0000                     _CMCON	set	4020
   225  0000                     _ADCON1	set	4033
   226  0000                     _TRISE	set	3990
   227  0000                     _TRISD	set	3989
   228  0000                     _TRISC	set	3988
   229  0000                     _TRISB	set	3987
   230  0000                     _TRISA	set	3986
   231  0000                     _TXIF	set	31988
   232  000830                     STR_8:
   233  000830  4D                 	db	77	;'M'
   234  000831  23                 	db	35
   235  000832  25                 	db	37
   236  000833  64                 	db	100	;'d'
   237  000834  20                 	db	32
   238  000835  25                 	db	37
   239  000836  64                 	db	100	;'d'
   240  000837  0D                 	db	13
   241  000838  0A                 	db	10
   242  000839  00                 	db	0
   243  00083A                     STR_1:
   244  00083A  45                 	db	69	;'E'
   245  00083B  23                 	db	35
   246  00083C  31                 	db	49	;'1'
   247  00083D  30                 	db	48	;'0'
   248  00083E  0D                 	db	13
   249  00083F  0A                 	db	10
   250  000840  00                 	db	0
   251  000841                     STR_2:
   252  000841  45                 	db	69	;'E'
   253  000842  23                 	db	35
   254  000843  31                 	db	49	;'1'
   255  000844  31                 	db	49	;'1'
   256  000845  0D                 	db	13
   257  000846  0A                 	db	10
   258  000847  00                 	db	0
   259  000848                     STR_3:
   260  000848  45                 	db	69	;'E'
   261  000849  23                 	db	35
   262  00084A  31                 	db	49	;'1'
   263  00084B  32                 	db	50	;'2'
   264  00084C  0D                 	db	13
   265  00084D  0A                 	db	10
   266  00084E  00                 	db	0
   267  00084F                     STR_4:
   268  00084F  45                 	db	69	;'E'
   269  000850  23                 	db	35
   270  000851  31                 	db	49	;'1'
   271  000852  33                 	db	51	;'3'
   272  000853  0D                 	db	13
   273  000854  0A                 	db	10
   274  000855  00                 	db	0
   275  000856                     STR_5:
   276  000856  45                 	db	69	;'E'
   277  000857  23                 	db	35
   278  000858  31                 	db	49	;'1'
   279  000859  34                 	db	52	;'4'
   280  00085A  0D                 	db	13
   281  00085B  0A                 	db	10
   282  00085C  00                 	db	0
   283  0000                     
   284                           ; #config settings
   285  00085D  00                 	db	0	; dummy byte at the end
   286  0000                     
   287                           	psect	cinit
   288  003AF8                     __pcinit:
   289                           	opt stack 0
   290  003AF8                     start_initialization:
   291                           	opt stack 0
   292  003AF8                     __initialization:
   293                           	opt stack 0
   294                           
   295                           ; Initialize objects allocated to BANK0 (6 bytes)
   296                           ; load TBLPTR registers with __pidataBANK0
   297  003AF8  0E88               	movlw	low __pidataBANK0
   298  003AFA  6EF6               	movwf	tblptrl,c
   299  003AFC  0E42               	movlw	high __pidataBANK0
   300  003AFE  6EF7               	movwf	tblptrh,c
   301  003B00  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   302  003B02  6EF8               	movwf	tblptru,c
   303  003B04  EE00  F0C2         	lfsr	0,__pdataBANK0
   304  003B08  EE10 F006          	lfsr	1,6
   305  003B0C                     copy_data0:
   306  003B0C  0009               	tblrd		*+
   307  003B0E  CFF5 FFEE          	movff	tablat,postinc0
   308  003B12  50E5               	movf	postdec1,w,c
   309  003B14  50E1               	movf	fsr1l,w,c
   310  003B16  E1FA               	bnz	copy_data0
   311                           
   312                           ; Initialize objects allocated to COMRAM (5 bytes)
   313                           ; load TBLPTR registers with __pidataCOMRAM
   314  003B18  0E8E               	movlw	low __pidataCOMRAM
   315  003B1A  6EF6               	movwf	tblptrl,c
   316  003B1C  0E42               	movlw	high __pidataCOMRAM
   317  003B1E  6EF7               	movwf	tblptrh,c
   318  003B20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   319  003B22  6EF8               	movwf	tblptru,c
   320  003B24  EE00  F048         	lfsr	0,__pdataCOMRAM
   321  003B28  EE10 F005          	lfsr	1,5
   322  003B2C                     copy_data1:
   323  003B2C  0009               	tblrd		*+
   324  003B2E  CFF5 FFEE          	movff	tablat,postinc0
   325  003B32  50E5               	movf	postdec1,w,c
   326  003B34  50E1               	movf	fsr1l,w,c
   327  003B36  E1FA               	bnz	copy_data1
   328                           
   329                           ; Clear objects allocated to BIGRAM (760 bytes)
   330  003B38  EE04  F0FC         	lfsr	0,__pbssBIGRAM
   331  003B3C  EE12 F0F8          	lfsr	1,760
   332  003B40                     clear_0:
   333  003B40  6AEE               	clrf	postinc0,c
   334  003B42  50E5               	movf	postdec1,w,c
   335  003B44  50E1               	movf	fsr1l,w,c
   336  003B46  E1FC               	bnz	clear_0
   337  003B48  50E2               	movf	fsr1h,w,c
   338  003B4A  E1FA               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK4 (252 bytes)
   341  003B4C  EE04  F000         	lfsr	0,__pbssBANK4
   342  003B50  0EFC               	movlw	252
   343  003B52                     clear_1:
   344  003B52  6AEE               	clrf	postinc0,c
   345  003B54  06E8               	decf	wreg,f,c
   346  003B56  E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to BANK3 (182 bytes)
   349  003B58  EE03  F000         	lfsr	0,__pbssBANK3
   350  003B5C  0EB6               	movlw	182
   351  003B5E                     clear_2:
   352  003B5E  6AEE               	clrf	postinc0,c
   353  003B60  06E8               	decf	wreg,f,c
   354  003B62  E1FD               	bnz	clear_2
   355                           
   356                           ; Clear objects allocated to BANK2 (182 bytes)
   357  003B64  EE02  F000         	lfsr	0,__pbssBANK2
   358  003B68  0EB6               	movlw	182
   359  003B6A                     clear_3:
   360  003B6A  6AEE               	clrf	postinc0,c
   361  003B6C  06E8               	decf	wreg,f,c
   362  003B6E  E1FD               	bnz	clear_3
   363                           
   364                           ; Clear objects allocated to BANK1 (182 bytes)
   365  003B70  EE01  F000         	lfsr	0,__pbssBANK1
   366  003B74  0EB6               	movlw	182
   367  003B76                     clear_4:
   368  003B76  6AEE               	clrf	postinc0,c
   369  003B78  06E8               	decf	wreg,f,c
   370  003B7A  E1FD               	bnz	clear_4
   371                           
   372                           ; Clear objects allocated to BANK0 (58 bytes)
   373  003B7C  EE00  F060         	lfsr	0,__pbssBANK0
   374  003B80  0E3A               	movlw	58
   375  003B82                     clear_5:
   376  003B82  6AEE               	clrf	postinc0,c
   377  003B84  06E8               	decf	wreg,f,c
   378  003B86  E1FD               	bnz	clear_5
   379                           
   380                           ; Clear objects allocated to COMRAM (34 bytes)
   381  003B88  EE00  F026         	lfsr	0,__pbssCOMRAM
   382  003B8C  0E22               	movlw	34
   383  003B8E                     clear_6:
   384  003B8E  6AEE               	clrf	postinc0,c
   385  003B90  06E8               	decf	wreg,f,c
   386  003B92  E1FD               	bnz	clear_6
   387  003B94                     end_of_initialization:
   388                           	opt stack 0
   389  003B94                     __end_of__initialization:
   390                           	opt stack 0
   391  003B94  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   392  003B96  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   393  003B98  0E00               	movlw	low (__Lmediumconst shr (0+16))
   394  003B9A  6EF8               	movwf	tblptru,c
   395  003B9C  0100               	movlb	0
   396  003B9E  EF22  F01E         	goto	_main	;jump to C main() function
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bssCOMRAM
   408  000026                     __pbssCOMRAM:
   409                           	opt stack 0
   410  000026                     _Mountain_Delay_Counter:
   411                           	opt stack 0
   412  000026                     	ds	2
   413  000028                     _Red_Led_Counter:
   414                           	opt stack 0
   415  000028                     	ds	2
   416  00002A                     _Green_Led_Counter:
   417                           	opt stack 0
   418  00002A                     	ds	2
   419  00002C                     _Led1_Counter:
   420                           	opt stack 0
   421  00002C                     	ds	2
   422  00002E                     _Switch_Moutain:
   423                           	opt stack 0
   424  00002E                     	ds	1
   425  00002F                     _Switch_Junction:
   426                           	opt stack 0
   427  00002F                     	ds	1
   428  000030                     _Button_Contact_Counter_RF:
   429                           	opt stack 0
   430  000030                     	ds	1
   431  000031                     _Button_Contact_Counter_RB:
   432                           	opt stack 0
   433  000031                     	ds	1
   434  000032                     _Button_Contact_Counter_LF:
   435                           	opt stack 0
   436  000032                     	ds	1
   437  000033                     _Button_Contact_Counter_LB:
   438                           	opt stack 0
   439  000033                     	ds	1
   440  000034                     _Button_Contact_Counter_Middle:
   441                           	opt stack 0
   442  000034                     	ds	1
   443  000035                     _Button_Contact_Counter_Stop:
   444                           	opt stack 0
   445  000035                     	ds	1
   446  000036                     _Button_Contact_Counter_Start:
   447                           	opt stack 0
   448  000036                     	ds	1
   449  000037                     _Reed_Contact_RMD_Counter:
   450                           	opt stack 0
   451  000037                     	ds	1
   452  000038                     _Reed_Contact_RMU_Counter:
   453                           	opt stack 0
   454  000038                     	ds	1
   455  000039                     _Reed_Contact_LMD_Counter:
   456                           	opt stack 0
   457  000039                     	ds	1
   458  00003A                     _Reed_Contact_LMU_Counter:
   459                           	opt stack 0
   460  00003A                     	ds	1
   461  00003B                     _Reed_Contact_RB_Counter:
   462                           	opt stack 0
   463  00003B                     	ds	1
   464  00003C                     _Reed_Contact_RF_Counter:
   465                           	opt stack 0
   466  00003C                     	ds	1
   467  00003D                     _Reed_Contact_LB_Counter:
   468                           	opt stack 0
   469  00003D                     	ds	1
   470  00003E                     _Reed_Contact_LF_Counter:
   471                           	opt stack 0
   472  00003E                     	ds	1
   473  00003F                     _eusart1RxCount:
   474                           	opt stack 0
   475  00003F                     	ds	1
   476  000040                     _eusart1RxTail:
   477                           	opt stack 0
   478  000040                     	ds	1
   479  000041                     _eusart1RxHead:
   480                           	opt stack 0
   481  000041                     	ds	1
   482  000042                     _eusart1TxBufferRemaining:
   483                           	opt stack 0
   484  000042                     	ds	1
   485  000043                     _eusart1TxTail:
   486                           	opt stack 0
   487  000043                     	ds	1
   488  000044                     _eusart1TxHead:
   489                           	opt stack 0
   490  000044                     	ds	1
   491  000045                     _Switch_Adjust_LF:
   492                           	opt stack 0
   493  000045                     	ds	1
   494  000046                     _Switch_Adjust_LB:
   495                           	opt stack 0
   496  000046                     	ds	1
   497  000047                     _Switch_Activate_Controls:
   498                           	opt stack 0
   499  000047                     	ds	1
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1h	equ	0xFE2
   508                           fsr1l	equ	0xFE1
   509                           
   510                           	psect	dataCOMRAM
   511  000048                     __pdataCOMRAM:
   512                           	opt stack 0
   513  000048                     Right_Mountain_From_The_Left@Return_Val:
   514                           	opt stack 0
   515  000048                     	ds	1
   516  000049                     Left_Mountain_From_The_Left@Return_Val:
   517                           	opt stack 0
   518  000049                     	ds	1
   519  00004A                     Left_Mountain_From_The_Right@Return_Val:
   520                           	opt stack 0
   521  00004A                     	ds	1
   522  00004B                     Right_Mountain_From_The_Right@Return_Val:
   523                           	opt stack 0
   524  00004B                     	ds	1
   525  00004C                     Junction@Return_Val:
   526                           	opt stack 0
   527  00004C                     	ds	1
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1h	equ	0xFE2
   536                           fsr1l	equ	0xFE1
   537                           
   538                           	psect	bssBANK0
   539  000060                     __pbssBANK0:
   540                           	opt stack 0
   541  000060                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   542                           	opt stack 0
   543  000060                     	ds	2
   544  000062                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   545                           	opt stack 0
   546  000062                     	ds	2
   547  000064                     _Train_Move_Wait_Time:
   548                           	opt stack 0
   549  000064                     	ds	2
   550  000066                     _Train_Move_Pwm_Fast_Count:
   551                           	opt stack 0
   552  000066                     	ds	2
   553  000068                     Junction@Junction_Switch_Time:
   554                           	opt stack 0
   555  000068                     	ds	2
   556  00006A                     _WriteActive:
   557                           	opt stack 0
   558  00006A                     	ds	2
   559  00006C                     _ReadActive:
   560                           	opt stack 0
   561  00006C                     	ds	2
   562  00006E                     _DelayCounter:
   563                           	opt stack 0
   564  00006E                     	ds	2
   565  000070                     _ReadPointer:
   566                           	opt stack 0
   567  000070                     	ds	2
   568  000072                     _WritePointer:
   569                           	opt stack 0
   570  000072                     	ds	2
   571  000074                     _pLen:
   572                           	opt stack 0
   573  000074                     	ds	2
   574  000076                     _pData:
   575                           	opt stack 0
   576  000076                     	ds	2
   577  000078                     _SW_RESET_PREV:
   578                           	opt stack 0
   579  000078                     	ds	2
   580  00007A                     _Train_Pos2_Temp:
   581                           	opt stack 0
   582  00007A                     	ds	2
   583  00007C                     _Train_Pos1_Temp:
   584                           	opt stack 0
   585  00007C                     	ds	2
   586  00007E                     _Activate_Controls_Counter:
   587                           	opt stack 0
   588  00007E                     	ds	2
   589  000080                     _Adjust_Counter:
   590                           	opt stack 0
   591  000080                     	ds	2
   592  000082                     _Train_Move_Pwm_Count:
   593                           	opt stack 0
   594  000082                     	ds	2
   595  000084                     _Switch_Train_Move:
   596                           	opt stack 0
   597  000084                     	ds	1
   598  000085                     _TrSwitch:
   599                           	opt stack 0
   600  000085                     	ds	1
   601  000086                     _Message_To_Translate:
   602                           	opt stack 0
   603  000086                     	ds	1
   604  000087                     _RxSwitch:
   605                           	opt stack 0
   606  000087                     	ds	1
   607  000088                     _Received_Data:
   608                           	opt stack 0
   609  000088                     	ds	1
   610  000089                     _Stop_Program:
   611                           	opt stack 0
   612  000089                     	ds	1
   613  00008A                     _Switch_Train_Path:
   614                           	opt stack 0
   615  00008A                     	ds	1
   616  00008B                     _Switch_Adjust_RF:
   617                           	opt stack 0
   618  00008B                     	ds	1
   619  00008C                     _Switch_Adjust_RB:
   620                           	opt stack 0
   621  00008C                     	ds	1
   622  00008D                     _Switch_Program:
   623                           	opt stack 0
   624  00008D                     	ds	1
   625  00008E                     _Switch_Init:
   626                           	opt stack 0
   627  00008E                     	ds	1
   628  00008F                     _Update_State_Machine:
   629                           	opt stack 0
   630  00008F                     	ds	1
   631  000090                     _Data:
   632                           	opt stack 0
   633  000090                     	ds	10
   634                           tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1h	equ	0xFE2
   642                           fsr1l	equ	0xFE1
   643                           
   644                           	psect	dataBANK0
   645  0000C2                     __pdataBANK0:
   646                           	opt stack 0
   647  0000C2                     Train_Move_Right_Brake@Return_Val:
   648                           	opt stack 0
   649  0000C2                     	ds	1
   650  0000C3                     Train_Move_Right_Start@Return_Val:
   651                           	opt stack 0
   652  0000C3                     	ds	1
   653  0000C4                     Train_Move_Left_Brake@Return_Val:
   654                           	opt stack 0
   655  0000C4                     	ds	1
   656  0000C5                     Train_Move_Left_Start@Return_Val:
   657                           	opt stack 0
   658  0000C5                     	ds	1
   659  0000C6                     Train_Path@Return_Val:
   660                           	opt stack 0
   661  0000C6                     	ds	1
   662  0000C7                     _Switch_Main:
   663                           	opt stack 0
   664  0000C7                     	ds	1
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           postinc0	equ	0xFEE
   670                           wreg	equ	0xFE8
   671                           postdec1	equ	0xFE5
   672                           fsr1h	equ	0xFE2
   673                           fsr1l	equ	0xFE1
   674                           
   675                           	psect	bssBANK1
   676  000100                     __pbssBANK1:
   677                           	opt stack 0
   678  000100                     _API:
   679                           	opt stack 0
   680  000100                     	ds	182
   681                           tblptru	equ	0xFF8
   682                           tblptrh	equ	0xFF7
   683                           tblptrl	equ	0xFF6
   684                           tablat	equ	0xFF5
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           postdec1	equ	0xFE5
   688                           fsr1h	equ	0xFE2
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	bssBANK2
   692  000200                     __pbssBANK2:
   693                           	opt stack 0
   694  000200                     _API_RW:
   695                           	opt stack 0
   696  000200                     	ds	182
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           postdec1	equ	0xFE5
   704                           fsr1h	equ	0xFE2
   705                           fsr1l	equ	0xFE1
   706                           
   707                           	psect	bssBANK3
   708  000300                     __pbssBANK3:
   709                           	opt stack 0
   710  000300                     _API_EEPROM:
   711                           	opt stack 0
   712  000300                     	ds	182
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           postinc0	equ	0xFEE
   718                           wreg	equ	0xFE8
   719                           postdec1	equ	0xFE5
   720                           fsr1h	equ	0xFE2
   721                           fsr1l	equ	0xFE1
   722                           
   723                           	psect	bssBANK4
   724  000400                     __pbssBANK4:
   725                           	opt stack 0
   726  000400                     _eusart1RxBuffer:
   727                           	opt stack 0
   728  000400                     	ds	126
   729  00047E                     _eusart1TxBuffer:
   730                           	opt stack 0
   731  00047E                     	ds	126
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           postdec1	equ	0xFE5
   739                           fsr1h	equ	0xFE2
   740                           fsr1l	equ	0xFE1
   741                           
   742                           	psect	bssBIGRAM
   743  0004FC                     __pbssBIGRAM:
   744                           	opt stack 0
   745  0004FC                     _Comm_List:
   746                           	opt stack 0
   747  0004FC                     	ds	760
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           postdec1	equ	0xFE5
   755                           fsr1h	equ	0xFE2
   756                           fsr1l	equ	0xFE1
   757                           
   758                           	psect	cstackBANK0
   759  00009A                     __pcstackBANK0:
   760                           	opt stack 0
   761  00009A                     ??_tc_low:
   762                           
   763                           ; 1 bytes @ 0x0
   764  00009A                     	ds	21
   765  0000AF                     ?_printf:
   766                           	opt stack 0
   767  0000AF                     EEPROMxSTORE@api_list:
   768                           	opt stack 0
   769  0000AF                     Right_Mountain_From_The_Right@rc:
   770                           	opt stack 0
   771  0000AF                     Left_Mountain_From_The_Right@rc:
   772                           	opt stack 0
   773  0000AF                     Left_Mountain_From_The_Left@rc:
   774                           	opt stack 0
   775  0000AF                     Right_Mountain_From_The_Left@rc:
   776                           	opt stack 0
   777  0000AF                     printf@f:
   778                           	opt stack 0
   779  0000AF                     _Train_Move_Left_Start$2192:
   780                           	opt stack 0
   781  0000AF                     _Train_Move_Left_Brake$2193:
   782                           	opt stack 0
   783  0000AF                     _Train_Move_Right_Start$2194:
   784                           	opt stack 0
   785  0000AF                     _Train_Move_Right_Brake$2195:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x15
   789  0000AF                     	ds	1
   790  0000B0                     EEPROMxSTORE@i:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x16
   794  0000B0                     	ds	1
   795  0000B1                     Train_Path@To:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x17
   799  0000B1                     	ds	1
   800  0000B2                     Train_Path@From:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x18
   804  0000B2                     	ds	1
   805  0000B3                     ??_Update_StateMchn:
   806                           
   807                           ; 1 bytes @ 0x19
   808  0000B3                     	ds	2
   809  0000B5                     printf@ap:
   810                           	opt stack 0
   811  0000B5                     _Update_StateMchn$2190:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x1B
   815  0000B5                     	ds	2
   816  0000B7                     printf@flag:
   817                           	opt stack 0
   818  0000B7                     _Update_StateMchn$2191:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x1D
   822  0000B7                     	ds	1
   823  0000B8                     printf@prec:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x1E
   827  0000B8                     	ds	1
   828  0000B9                     printf@val:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x1F
   832  0000B9                     	ds	2
   833  0000BB                     printf@c:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x21
   837  0000BB                     	ds	1
   838  0000BC                     SendMessage@index:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x22
   842  0000BC                     	ds	2
   843  0000BE                     SendMessage@value:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x24
   847  0000BE                     	ds	2
   848  0000C0                     ??_main:
   849                           
   850                           ; 1 bytes @ 0x26
   851  0000C0                     	ds	2
   852                           tblptru	equ	0xFF8
   853                           tblptrh	equ	0xFF7
   854                           tblptrl	equ	0xFF6
   855                           tablat	equ	0xFF5
   856                           postinc0	equ	0xFEE
   857                           wreg	equ	0xFE8
   858                           postdec1	equ	0xFE5
   859                           fsr1h	equ	0xFE2
   860                           fsr1l	equ	0xFE1
   861                           
   862                           	psect	cstackCOMRAM
   863  000001                     __pcstackCOMRAM:
   864                           	opt stack 0
   865  000001                     ??_tc_high:
   866  000001                     
   867                           ; 1 bytes @ 0x0
   868  000001                     	ds	18
   869  000013                     ??_isdigit:
   870  000013                     ?_GETxAPIxVAL:
   871                           	opt stack 0
   872  000013                     ?_GETxEMPTYxBUFFER:
   873                           	opt stack 0
   874  000013                     ?_GETxAPIxRW:
   875                           	opt stack 0
   876  000013                     ?_Eeprom_Read:
   877                           	opt stack 0
   878  000013                     ?___wmul:
   879                           	opt stack 0
   880  000013                     ?___lwdiv:
   881                           	opt stack 0
   882  000013                     EUSART1_Read@readValue:
   883                           	opt stack 0
   884  000013                     putch@data:
   885                           	opt stack 0
   886  000013                     EUSART1_Initialize@baud_rate:
   887                           	opt stack 0
   888  000013                     SENDxMESSAGE@index:
   889                           	opt stack 0
   890  000013                     APIxInitialize@i:
   891                           	opt stack 0
   892  000013                     GETxAPIxRW@index:
   893                           	opt stack 0
   894  000013                     GETxAPIxVAL@index:
   895                           	opt stack 0
   896  000013                     Eeprom_Read@Location:
   897                           	opt stack 0
   898  000013                     Eeprom_Store@Location:
   899                           	opt stack 0
   900  000013                     ___wmul@multiplier:
   901                           	opt stack 0
   902  000013                     ___lwdiv@dividend:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x12
   906  000013                     	ds	1
   907  000014                     _isdigit$1847:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x13
   911  000014                     	ds	1
   912  000015                     isdigit@c:
   913                           	opt stack 0
   914  000015                     SENDxMESSAGE@value:
   915                           	opt stack 0
   916  000015                     SETxAPIxVALxNoxRET@index:
   917                           	opt stack 0
   918  000015                     Eeprom_Read@Location_Low_Byte:
   919                           	opt stack 0
   920  000015                     Eeprom_Store@Value:
   921                           	opt stack 0
   922  000015                     SetDCPWM1@dutycycle:
   923                           	opt stack 0
   924  000015                     ___wmul@multiplicand:
   925                           	opt stack 0
   926  000015                     ___lwdiv@divisor:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x14
   930  000015                     	ds	2
   931  000017                     ??_SENDxMESSAGE:
   932  000017                     ??_SetDCPWM1:
   933  000017                     ___lwdiv@counter:
   934                           	opt stack 0
   935  000017                     SETxAPIxVALxNoxRET@value:
   936                           	opt stack 0
   937  000017                     Eeprom_Read@Location_High_Byte:
   938                           	opt stack 0
   939  000017                     Eeprom_Store@Location_Low_Byte:
   940                           	opt stack 0
   941  000017                     ___wmul@product:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x16
   945  000017                     	ds	1
   946  000018                     ___lwdiv@quotient:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x17
   950  000018                     	ds	1
   951  000019                     ?_atoi:
   952                           	opt stack 0
   953  000019                     SETxAPIxVAL@index:
   954                           	opt stack 0
   955  000019                     Eeprom_Read@Return_Data:
   956                           	opt stack 0
   957  000019                     Eeprom_Store@Location_High_Byte:
   958                           	opt stack 0
   959  000019                     SetDCPWM1@DCycle:
   960                           	opt stack 0
   961  000019                     atoi@s:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x18
   965  000019                     	ds	1
   966  00001A                     ?___lwmod:
   967                           	opt stack 0
   968  00001A                     ___lwmod@dividend:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x19
   972  00001A                     	ds	1
   973  00001B                     ??_atoi:
   974  00001B                     ?_EEPROMxREAD:
   975                           	opt stack 0
   976  00001B                     ?_EEPROMxSTORE:
   977                           	opt stack 0
   978  00001B                     SETxAPIxVAL@value:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x1A
   982  00001B                     	ds	1
   983  00001C                     ___lwmod@divisor:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x1B
   987  00001C                     	ds	1
   988  00001D                     ??_EEPROMxREAD:
   989  00001D                     ??_EEPROMxSTORE:
   990  00001D                     atoi@sign:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x1C
   994  00001D                     	ds	1
   995  00001E                     ___lwmod@counter:
   996                           	opt stack 0
   997  00001E                     atoi@a:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x1D
  1001  00001E                     	ds	1
  1002  00001F                     ??_Debounce_Inputs:
  1003  00001F                     ??_Red_Led:
  1004  00001F                     ??_Green_Led:
  1005  00001F                     ??_printf:
  1006  00001F                     Junction@Straight_Bend:
  1007                           	opt stack 0
  1008  00001F                     EEPROMxREAD@Data:
  1009                           	opt stack 0
  1010  00001F                     SETxPWM@speed:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x1E
  1014  00001F                     	ds	1
  1015  000020                     ??_DIAGNOSTICxTOxPC:
  1016  000020                     Green_Led@Operation:
  1017                           	opt stack 0
  1018  000020                     Red_Led@Operation:
  1019                           	opt stack 0
  1020  000020                     Junction@Junction_Left_Right:
  1021                           	opt stack 0
  1022  000020                     TranslateMessage@Value:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x1F
  1026  000020                     	ds	1
  1027  000021                     EEPROMxREAD@i:
  1028                           	opt stack 0
  1029  000021                     SETxPWM@direction:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x20
  1033  000021                     	ds	1
  1034  000022                     ??_SETxPWM:
  1035  000022                     TranslateMessage@Index:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x21
  1039  000022                     	ds	2
  1040  000024                     SETxPWM@pwm_speed:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x23
  1044  000024                     	ds	2
  1045  000026                     tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           postinc0	equ	0xFEE
  1050                           wreg	equ	0xFE8
  1051                           postdec1	equ	0xFE5
  1052                           fsr1h	equ	0xFE2
  1053                           fsr1l	equ	0xFE1
  1054                           
  1055                           ; 1 bytes @ 0x25
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 107 in file "../Main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1075 ;;      Params:         0       0       0       0       0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1077 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1078 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1079 ;;Total ram usage:        2 bytes
  1080 ;; Hardware stack levels required when called:    9
  1081 ;; This function calls:
  1082 ;;		_APIxInitialize
  1083 ;;		_DIAGNOSTICxTOxPC
  1084 ;;		_EEPROMxREAD
  1085 ;;		_EUSART1_Initialize
  1086 ;;		_Init_Pwm
  1087 ;;		_Init_Timers
  1088 ;;		_READxRECEIVEDxMESSAGE
  1089 ;;		_Update_StateMchn
  1090 ;; This function is called by:
  1091 ;;		Startup code after reset
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text0
  1096  003C44                     __ptext0:
  1097                           	opt stack 0
  1098  003C44                     _main:
  1099                           	opt stack 22
  1100                           
  1101                           ;Main.c: 109: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
  1102                           
  1103                           ;incstack = 0
  1104  003C44  6892               	setf	3986,c	;volatile
  1105  003C46  6893               	setf	3987,c	;volatile
  1106  003C48  6894               	setf	3988,c	;volatile
  1107  003C4A  6895               	setf	3989,c	;volatile
  1108  003C4C  6896               	setf	3990,c	;volatile
  1109                           
  1110                           ;Main.c: 110: ADCON1=0x0F;
  1111  003C4E  0E0F               	movlw	15
  1112  003C50  6EC1               	movwf	4033,c	;volatile
  1113                           
  1114                           ;Main.c: 111: CMCON=0x07;
  1115  003C52  0E07               	movlw	7
  1116  003C54  6EB4               	movwf	4020,c	;volatile
  1117                           
  1118                           ;Main.c: 112: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
  1119  003C56  9892               	bcf	3986,4,c	;volatile
  1120  003C58  9A95               	bcf	3989,5,c	;volatile
  1121  003C5A  9C95               	bcf	3989,6,c	;volatile
  1122                           
  1123                           ;Main.c: 113: PORTAbits.RA4 = 0;
  1124  003C5C  9880               	bcf	3968,4,c	;volatile
  1125                           
  1126                           ;Main.c: 114: PORTDbits.RD6 = 0;
  1127  003C5E  9C83               	bcf	3971,6,c	;volatile
  1128                           
  1129                           ;Main.c: 115: PORTDbits.RD5 = 0;
  1130  003C60  9A83               	bcf	3971,5,c	;volatile
  1131                           
  1132                           ;Main.c: 117: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
  1133  003C62  9092               	bcf	3986,0,c	;volatile
  1134  003C64  9292               	bcf	3986,1,c	;volatile
  1135  003C66  9492               	bcf	3986,2,c	;volatile
  1136  003C68  9692               	bcf	3986,3,c	;volatile
  1137                           
  1138                           ;Main.c: 118: PORTAbits.RA3 = 0;
  1139  003C6A  9680               	bcf	3968,3,c	;volatile
  1140                           
  1141                           ;Main.c: 119: PORTAbits.RA2 = 0;
  1142  003C6C  9480               	bcf	3968,2,c	;volatile
  1143                           
  1144                           ;Main.c: 120: PORTAbits.RA1 = 0;
  1145  003C6E  9280               	bcf	3968,1,c	;volatile
  1146                           
  1147                           ;Main.c: 121: PORTAbits.RA0 = 0;
  1148  003C70  9080               	bcf	3968,0,c	;volatile
  1149                           
  1150                           ;Main.c: 123: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
  1151  003C72  8495               	bsf	3989,2,c	;volatile
  1152  003C74  8695               	bsf	3989,3,c	;volatile
  1153  003C76  8095               	bsf	3989,0,c	;volatile
  1154  003C78  8295               	bsf	3989,1,c	;volatile
  1155  003C7A  8294               	bsf	3988,1,c	;volatile
  1156  003C7C  8895               	bsf	3989,4,c	;volatile
  1157  003C7E  8096               	bsf	3990,0,c	;volatile
  1158  003C80  8296               	bsf	3990,1,c	;volatile
  1159                           
  1160                           ;Main.c: 124: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
  1161  003C82  8093               	bsf	3987,0,c	;volatile
  1162  003C84  8293               	bsf	3987,1,c	;volatile
  1163  003C86  8493               	bsf	3987,2,c	;volatile
  1164  003C88  8693               	bsf	3987,3,c	;volatile
  1165  003C8A  8893               	bsf	3987,4,c	;volatile
  1166  003C8C  8A93               	bsf	3987,5,c	;volatile
  1167  003C8E  8E95               	bsf	3989,7,c	;volatile
  1168                           
  1169                           ;Main.c: 125: APIxInitialize();
  1170  003C90  EC64  F00F         	call	_APIxInitialize	;wreg free
  1171                           
  1172                           ;Main.c: 126: _delay((unsigned long)((1000)*(24000000/4000.0)));
  1173  003C94  0E1F               	movlw	31
  1174  003C96  0100               	movlb	0	; () banked
  1175  003C98  6FC1               	movwf	(??_main+1)& (0+255),b
  1176  003C9A  0E71               	movlw	113
  1177  003C9C  6FC0               	movwf	??_main& (0+255),b
  1178  003C9E  0E1E               	movlw	30
  1179  003CA0                     u9697:
  1180  003CA0  2EE8               	decfsz	wreg,f,c
  1181  003CA2  D7FE               	bra	u9697
  1182  003CA4  2FC0               	decfsz	??_main& (0+255),f,b
  1183  003CA6  D7FC               	bra	u9697
  1184  003CA8  2FC1               	decfsz	(??_main+1)& (0+255),f,b
  1185  003CAA  D7FA               	bra	u9697
  1186  003CAC  F000               	nop	
  1187  003CAE                     
  1188                           ;Main.c: 128: continue;
  1189  003CAE  EC56  F01C         	call	_EEPROMxREAD	;wreg free
  1190  003CB2  501B               	movf	?_EEPROMxREAD,w,c
  1191  003CB4  101C               	iorwf	?_EEPROMxREAD+1,w,c
  1192  003CB6  B4D8               	btfsc	status,2,c
  1193  003CB8  D7FA               	goto	l90
  1194                           
  1195                           ;Main.c: 129: };
  1196                           ;Main.c: 130: Init_Pwm();
  1197  003CBA  ECBE  F020         	call	_Init_Pwm	;wreg free
  1198                           
  1199                           ;Main.c: 131: Init_Timers();
  1200  003CBE  EC32  F021         	call	_Init_Timers	;wreg free
  1201                           
  1202                           ;Main.c: 132: EUSART1_Initialize();
  1203  003CC2  ECF7  F01F         	call	_EUSART1_Initialize	;wreg free
  1204  003CC6                     
  1205                           ;Main.c: 136: {
  1206                           ;Main.c: 137: if (1 == Update_State_Machine)
  1207  003CC6  0100               	movlb	0	; () banked
  1208  003CC8  058F               	decf	_Update_State_Machine& (0+255),w,b	;volatile
  1209  003CCA  A4D8               	btfss	status,2,c
  1210  003CCC  D004               	goto	l93
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;Main.c: 138: {
  1214                           ;Main.c: 139: Update_State_Machine = 0;
  1215  003CCE  0E00               	movlw	0
  1216  003CD0  6F8F               	movwf	_Update_State_Machine& (0+255),b	;volatile
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;Main.c: 140: Update_StateMchn();
  1220  003CD2  EC2F  F004         	call	_Update_StateMchn	;wreg free
  1221  003CD6                     l93:
  1222                           
  1223                           ;Main.c: 141: }
  1224                           ;Main.c: 142: READxRECEIVEDxMESSAGE();
  1225  003CD6  EC65  F01B         	call	_READxRECEIVEDxMESSAGE	;wreg free
  1226                           
  1227                           ;Main.c: 143: DIAGNOSTICxTOxPC();
  1228  003CDA  ECD1  F01D         	call	_DIAGNOSTICxTOxPC	;wreg free
  1229  003CDE  D7F3               	goto	l92
  1230  003CE0                     __end_of_main:
  1231                           	opt stack 0
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           postdec1	equ	0xFE5
  1239                           fsr1h	equ	0xFE2
  1240                           fsr1l	equ	0xFE1
  1241                           status	equ	0xFD8
  1242                           
  1243 ;; *************** function _Update_StateMchn *****************
  1244 ;; Defined at:
  1245 ;;		line 45 in file "../State_Mchn.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1259 ;;      Params:         0       0       0       0       0       0       0       0       0
  1260 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1261 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1262 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1263 ;;Total ram usage:        5 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    8
  1266 ;; This function calls:
  1267 ;;		_Debounce_Inputs
  1268 ;;		_EEPROMxSTORE
  1269 ;;		_GETxAPIxVAL
  1270 ;;		_GETxEMPTYxBUFFER
  1271 ;;		_Green_Led
  1272 ;;		_Junction
  1273 ;;		_Red_Led
  1274 ;;		_SETxAPIxVAL
  1275 ;;		_SETxAPIxVALxNoxRET
  1276 ;;		_SETxPWM
  1277 ;;		_Train_Path
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text1
  1284  00085E                     __ptext1:
  1285                           	opt stack 0
  1286  00085E                     _Update_StateMchn:
  1287                           	opt stack 22
  1288                           
  1289                           ;State_Mchn.c: 47: if (GETxAPIxVAL(72) || SW_RESET_PREV)
  1290                           
  1291                           ;incstack = 0
  1292  00085E  0E00               	movlw	0
  1293  000860  6E14               	movwf	GETxAPIxVAL@index+1,c
  1294  000862  0E48               	movlw	72
  1295  000864  6E13               	movwf	GETxAPIxVAL@index,c
  1296  000866  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1297  00086A  5013               	movf	?_GETxAPIxVAL,w,c
  1298  00086C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1299  00086E  A4D8               	btfss	status,2,c
  1300  000870  D005               	goto	u8640
  1301  000872  0100               	movlb	0	; () banked
  1302  000874  5178               	movf	_SW_RESET_PREV& (0+255),w,b
  1303  000876  1179               	iorwf	(_SW_RESET_PREV+1)& (0+255),w,b
  1304  000878  B4D8               	btfsc	status,2,c
  1305  00087A  D01B               	goto	l194
  1306  00087C                     u8640:
  1307                           
  1308                           ;State_Mchn.c: 48: {
  1309                           ;State_Mchn.c: 49: SETxAPIxVAL(72, 0);
  1310                           
  1311                           ; BSR set to: 0
  1312  00087C  0E00               	movlw	0
  1313  00087E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1314  000880  0E48               	movlw	72
  1315  000882  6E19               	movwf	SETxAPIxVAL@index,c
  1316  000884  0E00               	movlw	0
  1317  000886  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1318  000888  0E00               	movlw	0
  1319  00088A  6E1B               	movwf	SETxAPIxVAL@value,c
  1320  00088C  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1321                           
  1322                           ;State_Mchn.c: 50: SW_RESET_PREV = 1;
  1323  000890  0E00               	movlw	0
  1324  000892  0100               	movlb	0	; () banked
  1325  000894  6F79               	movwf	(_SW_RESET_PREV+1)& (0+255),b
  1326  000896  0E01               	movlw	1
  1327  000898  6F78               	movwf	_SW_RESET_PREV& (0+255),b
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;State_Mchn.c: 51: if (GETxEMPTYxBUFFER() == 1)
  1331  00089A  ECE5  F020         	call	_GETxEMPTYxBUFFER	;wreg free
  1332  00089E  0413               	decf	?_GETxEMPTYxBUFFER,w,c
  1333  0008A0  1014               	iorwf	?_GETxEMPTYxBUFFER+1,w,c
  1334  0008A2  A4D8               	btfss	status,2,c
  1335  0008A4  D006               	goto	l194
  1336                           
  1337                           ;State_Mchn.c: 52: {
  1338                           ;State_Mchn.c: 53: SW_RESET_PREV = 0;
  1339  0008A6  0E00               	movlw	0
  1340  0008A8  0100               	movlb	0	; () banked
  1341  0008AA  6F79               	movwf	(_SW_RESET_PREV+1)& (0+255),b
  1342  0008AC  0E00               	movlw	0
  1343  0008AE  6F78               	movwf	_SW_RESET_PREV& (0+255),b
  1344  0008B0  00FF               	reset		;# 
  1345  0008B2                     l194:
  1346                           
  1347                           ;State_Mchn.c: 55: }
  1348                           ;State_Mchn.c: 56: }
  1349                           ;State_Mchn.c: 58: if (GETxAPIxVAL(87)){
  1350  0008B2  0E00               	movlw	0
  1351  0008B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1352  0008B6  0E57               	movlw	87
  1353  0008B8  6E13               	movwf	GETxAPIxVAL@index,c
  1354  0008BA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1355  0008BE  5013               	movf	?_GETxAPIxVAL,w,c
  1356  0008C0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1357  0008C2  B4D8               	btfsc	status,2,c
  1358  0008C4  D010               	goto	l196
  1359                           
  1360                           ;State_Mchn.c: 59: if (EEPROMxSTORE() == 1){
  1361  0008C6  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  1362  0008CA  041B               	decf	?_EEPROMxSTORE,w,c
  1363  0008CC  101C               	iorwf	?_EEPROMxSTORE+1,w,c
  1364  0008CE  A4D8               	btfss	status,2,c
  1365  0008D0  D00A               	goto	l196
  1366                           
  1367                           ;State_Mchn.c: 60: SETxAPIxVAL(87, 0);
  1368  0008D2  0E00               	movlw	0
  1369  0008D4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1370  0008D6  0E57               	movlw	87
  1371  0008D8  6E19               	movwf	SETxAPIxVAL@index,c
  1372  0008DA  0E00               	movlw	0
  1373  0008DC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1374  0008DE  0E00               	movlw	0
  1375  0008E0  6E1B               	movwf	SETxAPIxVAL@value,c
  1376  0008E2  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1377  0008E6                     l196:
  1378                           
  1379                           ;State_Mchn.c: 61: }
  1380                           ;State_Mchn.c: 62: }
  1381                           ;State_Mchn.c: 64: Debounce_Inputs();
  1382  0008E6  ECA1  F00B         	call	_Debounce_Inputs	;wreg free
  1383                           
  1384                           ;State_Mchn.c: 66: switch (Switch_Main)
  1385  0008EA  EF82  F00B         	goto	l197
  1386  0008EE                     
  1387                           ;State_Mchn.c: 69: if (GETxAPIxVAL(74)){
  1388  0008EE  0E00               	movlw	0
  1389  0008F0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1390  0008F2  0E4A               	movlw	74
  1391  0008F4  6E13               	movwf	GETxAPIxVAL@index,c
  1392  0008F6  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1393  0008FA  5013               	movf	?_GETxAPIxVAL,w,c
  1394  0008FC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1395  0008FE  B4D8               	btfsc	status,2,c
  1396  000900  D015               	goto	l199
  1397                           
  1398                           ;State_Mchn.c: 70: if(Junction(0, 1) == 0){
  1399  000902  0E01               	movlw	1
  1400  000904  6E1F               	movwf	Junction@Straight_Bend,c
  1401  000906  0E00               	movlw	0
  1402  000908  ECDF  F013         	call	_Junction
  1403  00090C  0900               	iorlw	0
  1404  00090E  A4D8               	btfss	status,2,c
  1405  000910  EF8E  F00B         	goto	l337
  1406                           
  1407                           ;State_Mchn.c: 71: SETxAPIxVALxNoxRET(74, 0);
  1408  000914  0E00               	movlw	0
  1409  000916  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1410  000918  0E4A               	movlw	74
  1411  00091A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1412  00091C  0E00               	movlw	0
  1413  00091E  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1414  000920  0E00               	movlw	0
  1415  000922  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1416  000924  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1417                           
  1418                           ;State_Mchn.c: 72: }
  1419                           ;State_Mchn.c: 73: }
  1420  000928  EF8E  F00B         	goto	l337
  1421  00092C                     l199:
  1422                           
  1423                           ;State_Mchn.c: 74: else if (GETxAPIxVAL(73)){
  1424  00092C  0E00               	movlw	0
  1425  00092E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1426  000930  0E49               	movlw	73
  1427  000932  6E13               	movwf	GETxAPIxVAL@index,c
  1428  000934  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1429  000938  5013               	movf	?_GETxAPIxVAL,w,c
  1430  00093A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1431  00093C  B4D8               	btfsc	status,2,c
  1432  00093E  D015               	goto	l202
  1433                           
  1434                           ;State_Mchn.c: 75: if(Junction(0, 0) == 0){
  1435  000940  0E00               	movlw	0
  1436  000942  6E1F               	movwf	Junction@Straight_Bend,c
  1437  000944  0E00               	movlw	0
  1438  000946  ECDF  F013         	call	_Junction
  1439  00094A  0900               	iorlw	0
  1440  00094C  A4D8               	btfss	status,2,c
  1441  00094E  EF8E  F00B         	goto	l337
  1442                           
  1443                           ;State_Mchn.c: 76: SETxAPIxVALxNoxRET(73, 0);
  1444  000952  0E00               	movlw	0
  1445  000954  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1446  000956  0E49               	movlw	73
  1447  000958  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1448  00095A  0E00               	movlw	0
  1449  00095C  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1450  00095E  0E00               	movlw	0
  1451  000960  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1452  000962  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1453                           
  1454                           ;State_Mchn.c: 77: }
  1455                           ;State_Mchn.c: 78: }
  1456  000966  EF8E  F00B         	goto	l337
  1457  00096A                     l202:
  1458                           
  1459                           ;State_Mchn.c: 79: else if (GETxAPIxVAL(76)){
  1460  00096A  0E00               	movlw	0
  1461  00096C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1462  00096E  0E4C               	movlw	76
  1463  000970  6E13               	movwf	GETxAPIxVAL@index,c
  1464  000972  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1465  000976  5013               	movf	?_GETxAPIxVAL,w,c
  1466  000978  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1467  00097A  B4D8               	btfsc	status,2,c
  1468  00097C  D015               	goto	l205
  1469                           
  1470                           ;State_Mchn.c: 80: if(Junction(1, 1) == 0){
  1471  00097E  0E01               	movlw	1
  1472  000980  6E1F               	movwf	Junction@Straight_Bend,c
  1473  000982  0E01               	movlw	1
  1474  000984  ECDF  F013         	call	_Junction
  1475  000988  0900               	iorlw	0
  1476  00098A  A4D8               	btfss	status,2,c
  1477  00098C  EF8E  F00B         	goto	l337
  1478                           
  1479                           ;State_Mchn.c: 81: SETxAPIxVALxNoxRET(76, 0);
  1480  000990  0E00               	movlw	0
  1481  000992  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1482  000994  0E4C               	movlw	76
  1483  000996  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1484  000998  0E00               	movlw	0
  1485  00099A  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1486  00099C  0E00               	movlw	0
  1487  00099E  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1488  0009A0  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1489                           
  1490                           ;State_Mchn.c: 82: }
  1491                           ;State_Mchn.c: 83: }
  1492  0009A4  EF8E  F00B         	goto	l337
  1493  0009A8                     l205:
  1494                           
  1495                           ;State_Mchn.c: 84: else if (GETxAPIxVAL(75)){
  1496  0009A8  0E00               	movlw	0
  1497  0009AA  6E14               	movwf	GETxAPIxVAL@index+1,c
  1498  0009AC  0E4B               	movlw	75
  1499  0009AE  6E13               	movwf	GETxAPIxVAL@index,c
  1500  0009B0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1501  0009B4  5013               	movf	?_GETxAPIxVAL,w,c
  1502  0009B6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1503  0009B8  B4D8               	btfsc	status,2,c
  1504  0009BA  D015               	goto	l208
  1505                           
  1506                           ;State_Mchn.c: 85: if(Junction(1, 0) == 0){
  1507  0009BC  0E00               	movlw	0
  1508  0009BE  6E1F               	movwf	Junction@Straight_Bend,c
  1509  0009C0  0E01               	movlw	1
  1510  0009C2  ECDF  F013         	call	_Junction
  1511  0009C6  0900               	iorlw	0
  1512  0009C8  A4D8               	btfss	status,2,c
  1513  0009CA  EF8E  F00B         	goto	l337
  1514                           
  1515                           ;State_Mchn.c: 86: SETxAPIxVALxNoxRET(75, 0);
  1516  0009CE  0E00               	movlw	0
  1517  0009D0  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1518  0009D2  0E4B               	movlw	75
  1519  0009D4  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1520  0009D6  0E00               	movlw	0
  1521  0009D8  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1522  0009DA  0E00               	movlw	0
  1523  0009DC  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1524  0009DE  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1525                           
  1526                           ;State_Mchn.c: 87: }
  1527                           ;State_Mchn.c: 88: }
  1528  0009E2  EF8E  F00B         	goto	l337
  1529  0009E6                     l208:
  1530                           
  1531                           ;State_Mchn.c: 89: else if (GETxAPIxVAL(77)){
  1532  0009E6  0E00               	movlw	0
  1533  0009E8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1534  0009EA  0E4D               	movlw	77
  1535  0009EC  6E13               	movwf	GETxAPIxVAL@index,c
  1536  0009EE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1537  0009F2  5013               	movf	?_GETxAPIxVAL,w,c
  1538  0009F4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1539  0009F6  B4D8               	btfsc	status,2,c
  1540  0009F8  D016               	goto	l211
  1541                           
  1542                           ;State_Mchn.c: 90: SETxAPIxVAL(69, 1);
  1543  0009FA  0E00               	movlw	0
  1544  0009FC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1545  0009FE  0E45               	movlw	69
  1546  000A00  6E19               	movwf	SETxAPIxVAL@index,c
  1547  000A02  0E00               	movlw	0
  1548  000A04  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1549  000A06  0E01               	movlw	1
  1550  000A08  6E1B               	movwf	SETxAPIxVAL@value,c
  1551  000A0A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1552                           
  1553                           ;State_Mchn.c: 91: SETxAPIxVALxNoxRET(77, 0);
  1554  000A0E  0E00               	movlw	0
  1555  000A10  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1556  000A12  0E4D               	movlw	77
  1557  000A14  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1558  000A16  0E00               	movlw	0
  1559  000A18  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1560  000A1A  0E00               	movlw	0
  1561  000A1C  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1562  000A1E  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1563                           
  1564                           ;State_Mchn.c: 92: }
  1565  000A22  EF8E  F00B         	goto	l337
  1566  000A26                     l211:
  1567                           
  1568                           ;State_Mchn.c: 93: else if (GETxAPIxVAL(78)){
  1569  000A26  0E00               	movlw	0
  1570  000A28  6E14               	movwf	GETxAPIxVAL@index+1,c
  1571  000A2A  0E4E               	movlw	78
  1572  000A2C  6E13               	movwf	GETxAPIxVAL@index,c
  1573  000A2E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1574  000A32  5013               	movf	?_GETxAPIxVAL,w,c
  1575  000A34  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1576  000A36  B4D8               	btfsc	status,2,c
  1577  000A38  D016               	goto	l213
  1578                           
  1579                           ;State_Mchn.c: 94: SETxAPIxVAL(69, 0);
  1580  000A3A  0E00               	movlw	0
  1581  000A3C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1582  000A3E  0E45               	movlw	69
  1583  000A40  6E19               	movwf	SETxAPIxVAL@index,c
  1584  000A42  0E00               	movlw	0
  1585  000A44  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1586  000A46  0E00               	movlw	0
  1587  000A48  6E1B               	movwf	SETxAPIxVAL@value,c
  1588  000A4A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1589                           
  1590                           ;State_Mchn.c: 95: SETxAPIxVALxNoxRET(78, 0);
  1591  000A4E  0E00               	movlw	0
  1592  000A50  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1593  000A52  0E4E               	movlw	78
  1594  000A54  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1595  000A56  0E00               	movlw	0
  1596  000A58  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1597  000A5A  0E00               	movlw	0
  1598  000A5C  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1599  000A5E  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1600                           
  1601                           ;State_Mchn.c: 96: }
  1602  000A62  EF8E  F00B         	goto	l337
  1603  000A66                     l213:
  1604                           
  1605                           ;State_Mchn.c: 97: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1606  000A66  0E00               	movlw	0
  1607  000A68  6E14               	movwf	GETxAPIxVAL@index+1,c
  1608  000A6A  0E44               	movlw	68
  1609  000A6C  6E13               	movwf	GETxAPIxVAL@index,c
  1610  000A6E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1611  000A72  C013  F0B3         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1612  000A76  C014  F0B4         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1613  000A7A  0E00               	movlw	0
  1614  000A7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1615  000A7E  0E4F               	movlw	79
  1616  000A80  6E13               	movwf	GETxAPIxVAL@index,c
  1617  000A82  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1618  000A86  5013               	movf	?_GETxAPIxVAL,w,c
  1619  000A88  0100               	movlb	0	; () banked
  1620  000A8A  19B3               	xorwf	??_Update_StateMchn& (0+255),w,b
  1621  000A8C  E104               	bnz	u8780
  1622  000A8E  5014               	movf	?_GETxAPIxVAL+1,w,c
  1623  000A90  19B4               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1624  000A92  B4D8               	btfsc	status,2,c
  1625  000A94  D02D               	goto	l215
  1626  000A96                     u8780:
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;State_Mchn.c: 98: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1630  000A96  0E00               	movlw	0
  1631  000A98  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1632  000A9A  0E44               	movlw	68
  1633  000A9C  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1634  000A9E  0E00               	movlw	0
  1635  000AA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1636  000AA2  0E4F               	movlw	79
  1637  000AA4  6E13               	movwf	GETxAPIxVAL@index,c
  1638  000AA6  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1639  000AAA  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1640  000AAE  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1641  000AB2  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1642                           
  1643                           ;State_Mchn.c: 99: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1644  000AB6  0E00               	movlw	0
  1645  000AB8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1646  000ABA  0E44               	movlw	68
  1647  000ABC  6E13               	movwf	GETxAPIxVAL@index,c
  1648  000ABE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1649  000AC2  C013  F0B5         	movff	?_GETxAPIxVAL,_Update_StateMchn$2190
  1650  000AC6  C014  F0B6         	movff	?_GETxAPIxVAL+1,_Update_StateMchn$2190+1
  1651                           
  1652                           ;State_Mchn.c: 99: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1653  000ACA  0E00               	movlw	0
  1654  000ACC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1655  000ACE  0E56               	movlw	86
  1656  000AD0  6E13               	movwf	GETxAPIxVAL@index,c
  1657  000AD2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1658  000AD6  5013               	movf	?_GETxAPIxVAL,w,c
  1659  000AD8  0100               	movlb	0	; () banked
  1660  000ADA  6FB7               	movwf	_Update_StateMchn$2191& (0+255),b
  1661                           
  1662                           ;State_Mchn.c: 99: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1663  000ADC  C0B5  F01F         	movff	_Update_StateMchn$2190,SETxPWM@speed
  1664  000AE0  C0B6  F020         	movff	_Update_StateMchn$2190+1,SETxPWM@speed+1
  1665  000AE4  C0B7  F021         	movff	_Update_StateMchn$2191,SETxPWM@direction
  1666  000AE8  EC26  F01D         	call	_SETxPWM	;wreg free
  1667                           
  1668                           ;State_Mchn.c: 100: }
  1669  000AEC  EF8E  F00B         	goto	l337
  1670  000AF0                     l215:
  1671                           
  1672                           ;State_Mchn.c: 101: else if (GETxAPIxVAL(86) != GETxAPIxVAL(81)){
  1673  000AF0  0E00               	movlw	0
  1674  000AF2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1675  000AF4  0E56               	movlw	86
  1676  000AF6  6E13               	movwf	GETxAPIxVAL@index,c
  1677  000AF8  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1678  000AFC  C013  F0B3         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1679  000B00  C014  F0B4         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1680  000B04  0E00               	movlw	0
  1681  000B06  6E14               	movwf	GETxAPIxVAL@index+1,c
  1682  000B08  0E51               	movlw	81
  1683  000B0A  6E13               	movwf	GETxAPIxVAL@index,c
  1684  000B0C  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1685  000B10  5013               	movf	?_GETxAPIxVAL,w,c
  1686  000B12  0100               	movlb	0	; () banked
  1687  000B14  19B3               	xorwf	??_Update_StateMchn& (0+255),w,b
  1688  000B16  E104               	bnz	u8790
  1689  000B18  5014               	movf	?_GETxAPIxVAL+1,w,c
  1690  000B1A  19B4               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1691  000B1C  B4D8               	btfsc	status,2,c
  1692  000B1E  D012               	goto	l217
  1693  000B20                     u8790:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;State_Mchn.c: 102: SETxAPIxVALxNoxRET(86, GETxAPIxVAL(81));
  1697  000B20  0E00               	movlw	0
  1698  000B22  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1699  000B24  0E56               	movlw	86
  1700  000B26  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1701  000B28  0E00               	movlw	0
  1702  000B2A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1703  000B2C  0E51               	movlw	81
  1704  000B2E  6E13               	movwf	GETxAPIxVAL@index,c
  1705  000B30  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1706  000B34  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1707  000B38  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1708  000B3C  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1709                           
  1710                           ;State_Mchn.c: 103: }
  1711  000B40  EF8E  F00B         	goto	l337
  1712  000B44                     l217:
  1713                           
  1714                           ;State_Mchn.c: 104: else if (GETxAPIxVAL(70) && (GETxAPIxVAL(39) == 0 || GETxAPIxVAL(40)
      +                           == 0)){
  1715  000B44  0E00               	movlw	0
  1716  000B46  6E14               	movwf	GETxAPIxVAL@index+1,c
  1717  000B48  0E46               	movlw	70
  1718  000B4A  6E13               	movwf	GETxAPIxVAL@index,c
  1719  000B4C  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1720  000B50  5013               	movf	?_GETxAPIxVAL,w,c
  1721  000B52  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1722  000B54  B4D8               	btfsc	status,2,c
  1723  000B56  EF27  F00A         	goto	l223
  1724  000B5A  0E00               	movlw	0
  1725  000B5C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1726  000B5E  0E27               	movlw	39
  1727  000B60  6E13               	movwf	GETxAPIxVAL@index,c
  1728  000B62  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1729  000B66  5013               	movf	?_GETxAPIxVAL,w,c
  1730  000B68  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1731  000B6A  B4D8               	btfsc	status,2,c
  1732  000B6C  D00B               	goto	u8820
  1733  000B6E  0E00               	movlw	0
  1734  000B70  6E14               	movwf	GETxAPIxVAL@index+1,c
  1735  000B72  0E28               	movlw	40
  1736  000B74  6E13               	movwf	GETxAPIxVAL@index,c
  1737  000B76  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1738  000B7A  5013               	movf	?_GETxAPIxVAL,w,c
  1739  000B7C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1740  000B7E  A4D8               	btfss	status,2,c
  1741  000B80  EF27  F00A         	goto	l223
  1742  000B84                     u8820:
  1743                           
  1744                           ;State_Mchn.c: 105: SETxAPIxVALxNoxRET(70, 0);
  1745  000B84  0E00               	movlw	0
  1746  000B86  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1747  000B88  0E46               	movlw	70
  1748  000B8A  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1749  000B8C  0E00               	movlw	0
  1750  000B8E  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1751  000B90  0E00               	movlw	0
  1752  000B92  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1753  000B94  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1754                           
  1755                           ;State_Mchn.c: 106: }
  1756  000B98  EF8E  F00B         	goto	l337
  1757  000B9C  0E00               	movlw	0
  1758  000B9E  EC70  F01E         	call	_Red_Led
  1759                           
  1760                           ;State_Mchn.c: 112: SETxAPIxVAL(39, 0);
  1761  000BA2  0E00               	movlw	0
  1762  000BA4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1763  000BA6  0E27               	movlw	39
  1764  000BA8  6E19               	movwf	SETxAPIxVAL@index,c
  1765  000BAA  0E00               	movlw	0
  1766  000BAC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1767  000BAE  0E00               	movlw	0
  1768  000BB0  6E1B               	movwf	SETxAPIxVAL@value,c
  1769  000BB2  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1770                           
  1771                           ;State_Mchn.c: 113: Train_Pos1_Temp = 0;
  1772  000BB6  0E00               	movlw	0
  1773  000BB8  0100               	movlb	0	; () banked
  1774  000BBA  6F7D               	movwf	(_Train_Pos1_Temp+1)& (0+255),b
  1775  000BBC  0E00               	movlw	0
  1776  000BBE  6F7C               	movwf	_Train_Pos1_Temp& (0+255),b
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;State_Mchn.c: 114: SETxAPIxVAL(40, 0);
  1780  000BC0  0E00               	movlw	0
  1781  000BC2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1782  000BC4  0E28               	movlw	40
  1783  000BC6  6E19               	movwf	SETxAPIxVAL@index,c
  1784  000BC8  0E00               	movlw	0
  1785  000BCA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1786  000BCC  0E00               	movlw	0
  1787  000BCE  6E1B               	movwf	SETxAPIxVAL@value,c
  1788  000BD0  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1789                           
  1790                           ;State_Mchn.c: 115: Train_Pos2_Temp = 0;
  1791  000BD4  0E00               	movlw	0
  1792  000BD6  0100               	movlb	0	; () banked
  1793  000BD8  6F7B               	movwf	(_Train_Pos2_Temp+1)& (0+255),b
  1794  000BDA  0E00               	movlw	0
  1795  000BDC  6F7A               	movwf	_Train_Pos2_Temp& (0+255),b
  1796                           
  1797                           ;State_Mchn.c: 116: Switch_Init = 1;
  1798  000BDE  0E01               	movlw	1
  1799  000BE0  D015               	goto	L1
  1800  000BE2                     
  1801                           ; BSR set to: 0
  1802                           
  1803                           ; BSR set to: 0
  1804  000BE2  0E00               	movlw	0
  1805  000BE4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1806  000BE6  0E23               	movlw	35
  1807  000BE8  6E13               	movwf	GETxAPIxVAL@index,c
  1808  000BEA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1809  000BEE  5013               	movf	?_GETxAPIxVAL,w,c
  1810  000BF0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1811  000BF2  B4D8               	btfsc	status,2,c
  1812  000BF4  D00E               	goto	l227
  1813                           
  1814                           ;State_Mchn.c: 120: {
  1815                           ;State_Mchn.c: 121: SETxAPIxVAL(39, 1);
  1816  000BF6  0E00               	movlw	0
  1817  000BF8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1818  000BFA  0E27               	movlw	39
  1819  000BFC  6E19               	movwf	SETxAPIxVAL@index,c
  1820  000BFE  0E00               	movlw	0
  1821  000C00  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1822  000C02  0E01               	movlw	1
  1823  000C04  6E1B               	movwf	SETxAPIxVAL@value,c
  1824  000C06  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1825  000C0A  D056               	goto	l8748
  1826  000C0C                     L1:
  1827  000C0C  6F8E               	movwf	_Switch_Init& (0+255),b
  1828                           
  1829                           ;State_Mchn.c: 123: break;
  1830  000C0E  EF8E  F00B         	goto	l337
  1831  000C12                     l227:
  1832                           
  1833                           ;State_Mchn.c: 124: }
  1834                           ;State_Mchn.c: 125: if(GETxAPIxVAL(36))
  1835                           
  1836                           ; BSR set to: 0
  1837  000C12  0E00               	movlw	0
  1838  000C14  6E14               	movwf	GETxAPIxVAL@index+1,c
  1839  000C16  0E24               	movlw	36
  1840  000C18  6E13               	movwf	GETxAPIxVAL@index,c
  1841  000C1A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1842  000C1E  5013               	movf	?_GETxAPIxVAL,w,c
  1843  000C20  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1844  000C22  B4D8               	btfsc	status,2,c
  1845  000C24  D00B               	goto	l228
  1846                           
  1847                           ;State_Mchn.c: 126: {
  1848                           ;State_Mchn.c: 127: SETxAPIxVAL(39, 2);
  1849  000C26  0E00               	movlw	0
  1850  000C28  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1851  000C2A  0E27               	movlw	39
  1852  000C2C  6E19               	movwf	SETxAPIxVAL@index,c
  1853  000C2E  0E00               	movlw	0
  1854  000C30  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1855  000C32  0E02               	movlw	2
  1856  000C34  6E1B               	movwf	SETxAPIxVAL@value,c
  1857  000C36  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1858  000C3A  D03E               	goto	l8748
  1859  000C3C                     l228:
  1860                           
  1861                           ;State_Mchn.c: 130: }
  1862                           ;State_Mchn.c: 131: if(GETxAPIxVAL(37))
  1863                           
  1864                           ; BSR set to: 0
  1865  000C3C  0E00               	movlw	0
  1866  000C3E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1867  000C40  0E25               	movlw	37
  1868  000C42  6E13               	movwf	GETxAPIxVAL@index,c
  1869  000C44  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1870  000C48  5013               	movf	?_GETxAPIxVAL,w,c
  1871  000C4A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1872  000C4C  B4D8               	btfsc	status,2,c
  1873  000C4E  D00B               	goto	l229
  1874                           
  1875                           ;State_Mchn.c: 132: {
  1876                           ;State_Mchn.c: 133: SETxAPIxVAL(39, 3);
  1877  000C50  0E00               	movlw	0
  1878  000C52  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1879  000C54  0E27               	movlw	39
  1880  000C56  6E19               	movwf	SETxAPIxVAL@index,c
  1881  000C58  0E00               	movlw	0
  1882  000C5A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1883  000C5C  0E03               	movlw	3
  1884  000C5E  6E1B               	movwf	SETxAPIxVAL@value,c
  1885  000C60  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1886  000C64  D029               	goto	l8748
  1887  000C66                     l229:
  1888                           
  1889                           ;State_Mchn.c: 136: }
  1890                           ;State_Mchn.c: 137: if(GETxAPIxVAL(38))
  1891                           
  1892                           ; BSR set to: 0
  1893  000C66  0E00               	movlw	0
  1894  000C68  6E14               	movwf	GETxAPIxVAL@index+1,c
  1895  000C6A  0E26               	movlw	38
  1896  000C6C  6E13               	movwf	GETxAPIxVAL@index,c
  1897  000C6E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1898  000C72  5013               	movf	?_GETxAPIxVAL,w,c
  1899  000C74  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1900  000C76  B4D8               	btfsc	status,2,c
  1901  000C78  D00B               	goto	l230
  1902                           
  1903                           ;State_Mchn.c: 138: {
  1904                           ;State_Mchn.c: 139: SETxAPIxVAL(39, 4);
  1905  000C7A  0E00               	movlw	0
  1906  000C7C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1907  000C7E  0E27               	movlw	39
  1908  000C80  6E19               	movwf	SETxAPIxVAL@index,c
  1909  000C82  0E00               	movlw	0
  1910  000C84  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1911  000C86  0E04               	movlw	4
  1912  000C88  6E1B               	movwf	SETxAPIxVAL@value,c
  1913  000C8A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1914  000C8E  D014               	goto	l8748
  1915  000C90                     l230:
  1916                           
  1917                           ;State_Mchn.c: 142: }
  1918                           ;State_Mchn.c: 143: if(GETxAPIxVAL(34))
  1919                           
  1920                           ; BSR set to: 0
  1921  000C90  0E00               	movlw	0
  1922  000C92  6E14               	movwf	GETxAPIxVAL@index+1,c
  1923  000C94  0E22               	movlw	34
  1924  000C96  6E13               	movwf	GETxAPIxVAL@index,c
  1925  000C98  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1926  000C9C  5013               	movf	?_GETxAPIxVAL,w,c
  1927  000C9E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1928  000CA0  B4D8               	btfsc	status,2,c
  1929  000CA2  D00C               	goto	l231
  1930                           
  1931                           ;State_Mchn.c: 144: {
  1932                           ;State_Mchn.c: 145: SETxAPIxVAL(39, 5);
  1933  000CA4  0E00               	movlw	0
  1934  000CA6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1935  000CA8  0E27               	movlw	39
  1936  000CAA  6E19               	movwf	SETxAPIxVAL@index,c
  1937  000CAC  0E00               	movlw	0
  1938  000CAE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1939  000CB0  0E05               	movlw	5
  1940  000CB2  6E1B               	movwf	SETxAPIxVAL@value,c
  1941  000CB4  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  1942  000CB8                     l8748:
  1943                           
  1944                           ;State_Mchn.c: 146: Switch_Init = 2;
  1945  000CB8  0E02               	movlw	2
  1946  000CBA  D015               	goto	L19
  1947  000CBC                     l231:
  1948                           
  1949                           ;State_Mchn.c: 148: }
  1950                           ;State_Mchn.c: 149: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1951                           
  1952                           ; BSR set to: 0
  1953  000CBC  0E00               	movlw	0
  1954  000CBE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1955  000CC0  0E27               	movlw	39
  1956  000CC2  6E13               	movwf	GETxAPIxVAL@index,c
  1957  000CC4  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1958  000CC8  5013               	movf	?_GETxAPIxVAL,w,c
  1959  000CCA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1960  000CCC  B4D8               	btfsc	status,2,c
  1961  000CCE  D00D               	goto	l232
  1962  000CD0  0E00               	movlw	0
  1963  000CD2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1964  000CD4  0E28               	movlw	40
  1965  000CD6  6E13               	movwf	GETxAPIxVAL@index,c
  1966  000CD8  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1967  000CDC  5013               	movf	?_GETxAPIxVAL,w,c
  1968  000CDE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1969  000CE0  B4D8               	btfsc	status,2,c
  1970  000CE2  D003               	goto	l232
  1971  000CE4  D0E3               	goto	u9030
  1972  000CE6                     L19:
  1973  000CE6  0100               	movlb	0	; () banked
  1974  000CE8  D791               	goto	L1
  1975  000CEA                     l232:
  1976                           
  1977                           ;State_Mchn.c: 152: }
  1978                           ;State_Mchn.c: 153: Switch_Init = 1;
  1979                           
  1980                           ; BSR set to: 0
  1981  000CEA  0E01               	movlw	1
  1982  000CEC  0100               	movlb	0	; () banked
  1983  000CEE  6F8E               	movwf	_Switch_Init& (0+255),b
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;State_Mchn.c: 154: Green_Led(2);
  1987  000CF0  0E02               	movlw	2
  1988  000CF2  ECBD  F01E         	call	_Green_Led
  1989                           
  1990                           ;State_Mchn.c: 155: break;
  1991  000CF6  EF8E  F00B         	goto	l337
  1992  000CFA  0E00               	movlw	0
  1993  000CFC  6E14               	movwf	GETxAPIxVAL@index+1,c
  1994  000CFE  0E23               	movlw	35
  1995  000D00  6E13               	movwf	GETxAPIxVAL@index,c
  1996  000D02  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  1997  000D06  5013               	movf	?_GETxAPIxVAL,w,c
  1998  000D08  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1999  000D0A  A4D8               	btfss	status,2,c
  2000  000D0C  D035               	goto	l234
  2001  000D0E  0E00               	movlw	0
  2002  000D10  6E14               	movwf	GETxAPIxVAL@index+1,c
  2003  000D12  0E24               	movlw	36
  2004  000D14  6E13               	movwf	GETxAPIxVAL@index,c
  2005  000D16  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2006  000D1A  5013               	movf	?_GETxAPIxVAL,w,c
  2007  000D1C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2008  000D1E  A4D8               	btfss	status,2,c
  2009  000D20  D02B               	goto	l234
  2010  000D22  0E00               	movlw	0
  2011  000D24  6E14               	movwf	GETxAPIxVAL@index+1,c
  2012  000D26  0E25               	movlw	37
  2013  000D28  6E13               	movwf	GETxAPIxVAL@index,c
  2014  000D2A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2015  000D2E  5013               	movf	?_GETxAPIxVAL,w,c
  2016  000D30  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2017  000D32  A4D8               	btfss	status,2,c
  2018  000D34  D021               	goto	l234
  2019  000D36  0E00               	movlw	0
  2020  000D38  6E14               	movwf	GETxAPIxVAL@index+1,c
  2021  000D3A  0E26               	movlw	38
  2022  000D3C  6E13               	movwf	GETxAPIxVAL@index,c
  2023  000D3E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2024  000D42  5013               	movf	?_GETxAPIxVAL,w,c
  2025  000D44  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2026  000D46  A4D8               	btfss	status,2,c
  2027  000D48  D017               	goto	l234
  2028  000D4A  0E00               	movlw	0
  2029  000D4C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2030  000D4E  0E22               	movlw	34
  2031  000D50  6E13               	movwf	GETxAPIxVAL@index,c
  2032  000D52  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2033  000D56  5013               	movf	?_GETxAPIxVAL,w,c
  2034  000D58  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2035  000D5A  A4D8               	btfss	status,2,c
  2036  000D5C  D00D               	goto	l234
  2037  000D5E  0E00               	movlw	0
  2038  000D60  6E14               	movwf	GETxAPIxVAL@index+1,c
  2039  000D62  0E20               	movlw	32
  2040  000D64  6E13               	movwf	GETxAPIxVAL@index,c
  2041  000D66  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2042  000D6A  5013               	movf	?_GETxAPIxVAL,w,c
  2043  000D6C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2044  000D6E  A4D8               	btfss	status,2,c
  2045  000D70  D003               	goto	l234
  2046                           
  2047                           ;State_Mchn.c: 158: {
  2048                           ;State_Mchn.c: 159: Switch_Init = 3;
  2049  000D72  0E03               	movlw	3
  2050  000D74  0100               	movlb	0	; () banked
  2051  000D76  6F8E               	movwf	_Switch_Init& (0+255),b
  2052  000D78                     l234:
  2053                           
  2054                           ;State_Mchn.c: 160: }
  2055                           ;State_Mchn.c: 161: Red_Led(0);
  2056                           
  2057                           ; BSR set to: 0
  2058  000D78  0E00               	movlw	0
  2059  000D7A  EC70  F01E         	call	_Red_Led
  2060                           
  2061                           ;State_Mchn.c: 162: Green_Led(2);
  2062  000D7E  0E02               	movlw	2
  2063  000D80  ECBD  F01E         	call	_Green_Led
  2064                           
  2065                           ;State_Mchn.c: 163: break;
  2066  000D84  EF8E  F00B         	goto	l337
  2067  000D88  0E00               	movlw	0
  2068  000D8A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2069  000D8C  0E23               	movlw	35
  2070  000D8E  6E13               	movwf	GETxAPIxVAL@index,c
  2071  000D90  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2072  000D94  5013               	movf	?_GETxAPIxVAL,w,c
  2073  000D96  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2074  000D98  B4D8               	btfsc	status,2,c
  2075  000D9A  D00B               	goto	l236
  2076                           
  2077                           ;State_Mchn.c: 166: {
  2078                           ;State_Mchn.c: 167: SETxAPIxVAL(40, 1);
  2079  000D9C  0E00               	movlw	0
  2080  000D9E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2081  000DA0  0E28               	movlw	40
  2082  000DA2  6E19               	movwf	SETxAPIxVAL@index,c
  2083  000DA4  0E00               	movlw	0
  2084  000DA6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2085  000DA8  0E01               	movlw	1
  2086  000DAA  6E1B               	movwf	SETxAPIxVAL@value,c
  2087  000DAC  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2088  000DB0  D07D               	goto	u9030
  2089  000DB2                     l236:
  2090                           
  2091                           ;State_Mchn.c: 170: }
  2092                           ;State_Mchn.c: 171: if(GETxAPIxVAL(36))
  2093                           
  2094                           ; BSR set to: 0
  2095  000DB2  0E00               	movlw	0
  2096  000DB4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2097  000DB6  0E24               	movlw	36
  2098  000DB8  6E13               	movwf	GETxAPIxVAL@index,c
  2099  000DBA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2100  000DBE  5013               	movf	?_GETxAPIxVAL,w,c
  2101  000DC0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2102  000DC2  B4D8               	btfsc	status,2,c
  2103  000DC4  D00B               	goto	l237
  2104                           
  2105                           ;State_Mchn.c: 172: {
  2106                           ;State_Mchn.c: 173: SETxAPIxVAL(40, 2);
  2107  000DC6  0E00               	movlw	0
  2108  000DC8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2109  000DCA  0E28               	movlw	40
  2110  000DCC  6E19               	movwf	SETxAPIxVAL@index,c
  2111  000DCE  0E00               	movlw	0
  2112  000DD0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2113  000DD2  0E02               	movlw	2
  2114  000DD4  6E1B               	movwf	SETxAPIxVAL@value,c
  2115  000DD6  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2116  000DDA  D068               	goto	u9030
  2117  000DDC                     l237:
  2118                           
  2119                           ;State_Mchn.c: 176: }
  2120                           ;State_Mchn.c: 177: if(GETxAPIxVAL(37))
  2121                           
  2122                           ; BSR set to: 0
  2123  000DDC  0E00               	movlw	0
  2124  000DDE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2125  000DE0  0E25               	movlw	37
  2126  000DE2  6E13               	movwf	GETxAPIxVAL@index,c
  2127  000DE4  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2128  000DE8  5013               	movf	?_GETxAPIxVAL,w,c
  2129  000DEA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2130  000DEC  B4D8               	btfsc	status,2,c
  2131  000DEE  D00B               	goto	l238
  2132                           
  2133                           ;State_Mchn.c: 178: {
  2134                           ;State_Mchn.c: 179: SETxAPIxVAL(40, 3);
  2135  000DF0  0E00               	movlw	0
  2136  000DF2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2137  000DF4  0E28               	movlw	40
  2138  000DF6  6E19               	movwf	SETxAPIxVAL@index,c
  2139  000DF8  0E00               	movlw	0
  2140  000DFA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2141  000DFC  0E03               	movlw	3
  2142  000DFE  6E1B               	movwf	SETxAPIxVAL@value,c
  2143  000E00  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2144  000E04  D053               	goto	u9030
  2145  000E06                     l238:
  2146                           
  2147                           ;State_Mchn.c: 182: }
  2148                           ;State_Mchn.c: 183: if(GETxAPIxVAL(38))
  2149                           
  2150                           ; BSR set to: 0
  2151  000E06  0E00               	movlw	0
  2152  000E08  6E14               	movwf	GETxAPIxVAL@index+1,c
  2153  000E0A  0E26               	movlw	38
  2154  000E0C  6E13               	movwf	GETxAPIxVAL@index,c
  2155  000E0E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2156  000E12  5013               	movf	?_GETxAPIxVAL,w,c
  2157  000E14  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2158  000E16  B4D8               	btfsc	status,2,c
  2159  000E18  D00B               	goto	l239
  2160                           
  2161                           ;State_Mchn.c: 184: {
  2162                           ;State_Mchn.c: 185: SETxAPIxVAL(40, 4);
  2163  000E1A  0E00               	movlw	0
  2164  000E1C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2165  000E1E  0E28               	movlw	40
  2166  000E20  6E19               	movwf	SETxAPIxVAL@index,c
  2167  000E22  0E00               	movlw	0
  2168  000E24  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2169  000E26  0E04               	movlw	4
  2170  000E28  6E1B               	movwf	SETxAPIxVAL@value,c
  2171  000E2A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2172  000E2E  D03E               	goto	u9030
  2173  000E30                     l239:
  2174                           
  2175                           ;State_Mchn.c: 188: }
  2176                           ;State_Mchn.c: 189: if(GETxAPIxVAL(34))
  2177                           
  2178                           ; BSR set to: 0
  2179  000E30  0E00               	movlw	0
  2180  000E32  6E14               	movwf	GETxAPIxVAL@index+1,c
  2181  000E34  0E22               	movlw	34
  2182  000E36  6E13               	movwf	GETxAPIxVAL@index,c
  2183  000E38  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2184  000E3C  5013               	movf	?_GETxAPIxVAL,w,c
  2185  000E3E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2186  000E40  B4D8               	btfsc	status,2,c
  2187  000E42  D00B               	goto	l240
  2188                           
  2189                           ;State_Mchn.c: 190: {
  2190                           ;State_Mchn.c: 191: SETxAPIxVAL(40, 5);
  2191  000E44  0E00               	movlw	0
  2192  000E46  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2193  000E48  0E28               	movlw	40
  2194  000E4A  6E19               	movwf	SETxAPIxVAL@index,c
  2195  000E4C  0E00               	movlw	0
  2196  000E4E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2197  000E50  0E05               	movlw	5
  2198  000E52  6E1B               	movwf	SETxAPIxVAL@value,c
  2199  000E54  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2200  000E58  D029               	goto	u9030
  2201  000E5A                     l240:
  2202                           
  2203                           ;State_Mchn.c: 194: }
  2204                           ;State_Mchn.c: 195: if(GETxAPIxVAL(32))
  2205                           
  2206                           ; BSR set to: 0
  2207  000E5A  0E00               	movlw	0
  2208  000E5C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2209  000E5E  0E20               	movlw	32
  2210  000E60  6E13               	movwf	GETxAPIxVAL@index,c
  2211  000E62  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2212  000E66  5013               	movf	?_GETxAPIxVAL,w,c
  2213  000E68  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2214  000E6A  B4D8               	btfsc	status,2,c
  2215  000E6C  D00B               	goto	l241
  2216                           
  2217                           ;State_Mchn.c: 196: {
  2218                           ;State_Mchn.c: 197: SETxAPIxVAL(40, 9);
  2219  000E6E  0E00               	movlw	0
  2220  000E70  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2221  000E72  0E28               	movlw	40
  2222  000E74  6E19               	movwf	SETxAPIxVAL@index,c
  2223  000E76  0E00               	movlw	0
  2224  000E78  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2225  000E7A  0E09               	movlw	9
  2226  000E7C  6E1B               	movwf	SETxAPIxVAL@value,c
  2227  000E7E  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2228  000E82  D014               	goto	u9030
  2229  000E84                     l241:
  2230                           
  2231                           ;State_Mchn.c: 200: }
  2232                           ;State_Mchn.c: 201: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  2233                           
  2234                           ; BSR set to: 0
  2235  000E84  0E00               	movlw	0
  2236  000E86  6E14               	movwf	GETxAPIxVAL@index+1,c
  2237  000E88  0E27               	movlw	39
  2238  000E8A  6E13               	movwf	GETxAPIxVAL@index,c
  2239  000E8C  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2240  000E90  5013               	movf	?_GETxAPIxVAL,w,c
  2241  000E92  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2242  000E94  B4D8               	btfsc	status,2,c
  2243  000E96  D00C               	goto	l242
  2244  000E98  0E00               	movlw	0
  2245  000E9A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2246  000E9C  0E28               	movlw	40
  2247  000E9E  6E13               	movwf	GETxAPIxVAL@index,c
  2248  000EA0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2249  000EA4  5013               	movf	?_GETxAPIxVAL,w,c
  2250  000EA6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2251  000EA8  B4D8               	btfsc	status,2,c
  2252  000EAA  D002               	goto	l242
  2253  000EAC                     u9030:
  2254                           
  2255                           ;State_Mchn.c: 202: Switch_Init = 4;
  2256  000EAC  0E04               	movlw	4
  2257  000EAE  D71B               	goto	L19
  2258  000EB0                     l242:
  2259                           
  2260                           ;State_Mchn.c: 204: }
  2261                           ;State_Mchn.c: 205: Green_Led(2);
  2262                           
  2263                           ; BSR set to: 0
  2264  000EB0  0E02               	movlw	2
  2265  000EB2  ECBD  F01E         	call	_Green_Led
  2266                           
  2267                           ;State_Mchn.c: 206: Switch_Init = 3;
  2268  000EB6  0E03               	movlw	3
  2269  000EB8  D716               	goto	L19
  2270  000EBA                     
  2271                           ; BSR set to: 0
  2272                           
  2273                           ; BSR set to: 0
  2274  000EBA  0E00               	movlw	0
  2275  000EBC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2276  000EBE  0E23               	movlw	35
  2277  000EC0  6E13               	movwf	GETxAPIxVAL@index,c
  2278  000EC2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2279  000EC6  5013               	movf	?_GETxAPIxVAL,w,c
  2280  000EC8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2281  000ECA  A4D8               	btfss	status,2,c
  2282  000ECC  D073               	goto	l246
  2283  000ECE  0E00               	movlw	0
  2284  000ED0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2285  000ED2  0E24               	movlw	36
  2286  000ED4  6E13               	movwf	GETxAPIxVAL@index,c
  2287  000ED6  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2288  000EDA  5013               	movf	?_GETxAPIxVAL,w,c
  2289  000EDC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2290  000EDE  A4D8               	btfss	status,2,c
  2291  000EE0  D069               	goto	l246
  2292  000EE2  0E00               	movlw	0
  2293  000EE4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2294  000EE6  0E25               	movlw	37
  2295  000EE8  6E13               	movwf	GETxAPIxVAL@index,c
  2296  000EEA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2297  000EEE  5013               	movf	?_GETxAPIxVAL,w,c
  2298  000EF0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2299  000EF2  A4D8               	btfss	status,2,c
  2300  000EF4  D05F               	goto	l246
  2301  000EF6  0E00               	movlw	0
  2302  000EF8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2303  000EFA  0E26               	movlw	38
  2304  000EFC  6E13               	movwf	GETxAPIxVAL@index,c
  2305  000EFE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2306  000F02  5013               	movf	?_GETxAPIxVAL,w,c
  2307  000F04  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2308  000F06  A4D8               	btfss	status,2,c
  2309  000F08  D055               	goto	l246
  2310  000F0A  0E00               	movlw	0
  2311  000F0C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2312  000F0E  0E22               	movlw	34
  2313  000F10  6E13               	movwf	GETxAPIxVAL@index,c
  2314  000F12  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2315  000F16  5013               	movf	?_GETxAPIxVAL,w,c
  2316  000F18  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2317  000F1A  A4D8               	btfss	status,2,c
  2318  000F1C  D04B               	goto	l246
  2319  000F1E  0E00               	movlw	0
  2320  000F20  6E14               	movwf	GETxAPIxVAL@index+1,c
  2321  000F22  0E20               	movlw	32
  2322  000F24  6E13               	movwf	GETxAPIxVAL@index,c
  2323  000F26  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2324  000F2A  5013               	movf	?_GETxAPIxVAL,w,c
  2325  000F2C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2326  000F2E  A4D8               	btfss	status,2,c
  2327  000F30  D041               	goto	l246
  2328                           
  2329                           ;State_Mchn.c: 210: {
  2330                           ;State_Mchn.c: 211: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  2331  000F32  0E00               	movlw	0
  2332  000F34  6E14               	movwf	GETxAPIxVAL@index+1,c
  2333  000F36  0E27               	movlw	39
  2334  000F38  6E13               	movwf	GETxAPIxVAL@index,c
  2335  000F3A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2336  000F3E  C013  F0B3         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2337  000F42  C014  F0B4         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2338  000F46  0E00               	movlw	0
  2339  000F48  6E14               	movwf	GETxAPIxVAL@index+1,c
  2340  000F4A  0E28               	movlw	40
  2341  000F4C  6E13               	movwf	GETxAPIxVAL@index,c
  2342  000F4E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2343  000F52  5013               	movf	?_GETxAPIxVAL,w,c
  2344  000F54  0100               	movlb	0	; () banked
  2345  000F56  19B3               	xorwf	??_Update_StateMchn& (0+255),w,b
  2346  000F58  E127               	bnz	l8848
  2347  000F5A  5014               	movf	?_GETxAPIxVAL+1,w,c
  2348  000F5C  19B4               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2349  000F5E  A4D8               	btfss	status,2,c
  2350  000F60  D023               	goto	l245
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;State_Mchn.c: 212: {
  2354                           ;State_Mchn.c: 213: SETxAPIxVAL(40, 0);
  2355  000F62  0E00               	movlw	0
  2356  000F64  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2357  000F66  0E28               	movlw	40
  2358  000F68  6E19               	movwf	SETxAPIxVAL@index,c
  2359  000F6A  0E00               	movlw	0
  2360  000F6C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2361  000F6E  0E00               	movlw	0
  2362  000F70  6E1B               	movwf	SETxAPIxVAL@value,c
  2363  000F72  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2364                           
  2365                           ;State_Mchn.c: 214: Train_Pos1_Temp = 0;
  2366  000F76  0E00               	movlw	0
  2367  000F78  0100               	movlb	0	; () banked
  2368  000F7A  6F7D               	movwf	(_Train_Pos1_Temp+1)& (0+255),b
  2369  000F7C  0E00               	movlw	0
  2370  000F7E  6F7C               	movwf	_Train_Pos1_Temp& (0+255),b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;State_Mchn.c: 215: SETxAPIxVAL(39, 0);
  2374  000F80  0E00               	movlw	0
  2375  000F82  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2376  000F84  0E27               	movlw	39
  2377  000F86  6E19               	movwf	SETxAPIxVAL@index,c
  2378  000F88  0E00               	movlw	0
  2379  000F8A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2380  000F8C  0E00               	movlw	0
  2381  000F8E  6E1B               	movwf	SETxAPIxVAL@value,c
  2382  000F90  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  2383                           
  2384                           ;State_Mchn.c: 216: Train_Pos2_Temp = 0;
  2385  000F94  0E00               	movlw	0
  2386  000F96  0100               	movlb	0	; () banked
  2387  000F98  6F7B               	movwf	(_Train_Pos2_Temp+1)& (0+255),b
  2388  000F9A  0E00               	movlw	0
  2389  000F9C  6F7A               	movwf	_Train_Pos2_Temp& (0+255),b
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;State_Mchn.c: 217: Red_Led(1);
  2393  000F9E  0E01               	movlw	1
  2394  000FA0  EC70  F01E         	call	_Red_Led
  2395                           
  2396                           ;State_Mchn.c: 218: Switch_Init = 1;
  2397  000FA4  0E01               	movlw	1
  2398  000FA6  D004               	goto	L2
  2399  000FA8                     l245:
  2400  000FA8                     l8848:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;State_Mchn.c: 221: else
  2404                           ;State_Mchn.c: 222: {
  2405                           ;State_Mchn.c: 223: Red_Led(0);
  2406  000FA8  0E00               	movlw	0
  2407  000FAA  EC70  F01E         	call	_Red_Led
  2408                           
  2409                           ;State_Mchn.c: 224: Switch_Init = 5;
  2410  000FAE  0E05               	movlw	5
  2411  000FB0                     L2:
  2412  000FB0  0100               	movlb	0	; () banked
  2413  000FB2  6F8E               	movwf	_Switch_Init& (0+255),b
  2414  000FB4                     l246:
  2415                           
  2416                           ;State_Mchn.c: 225: }
  2417                           ;State_Mchn.c: 226: }
  2418                           ;State_Mchn.c: 227: Green_Led(2);
  2419                           
  2420                           ; BSR set to: 0
  2421                           
  2422                           ; BSR set to: 0
  2423  000FB4  0E02               	movlw	2
  2424  000FB6  ECBD  F01E         	call	_Green_Led
  2425                           
  2426                           ;State_Mchn.c: 228: break;
  2427  000FBA  D3B0               	goto	l337
  2428  000FBC  0E00               	movlw	0
  2429  000FBE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2430  000FC0  0E28               	movlw	40
  2431  000FC2  6E13               	movwf	GETxAPIxVAL@index,c
  2432  000FC4  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2433  000FC8  0E09               	movlw	9
  2434  000FCA  1813               	xorwf	?_GETxAPIxVAL,w,c
  2435  000FCC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2436  000FCE  B4D8               	btfsc	status,2,c
  2437  000FD0  D002               	goto	l248
  2438                           
  2439                           ;State_Mchn.c: 231: {
  2440                           ;State_Mchn.c: 232: Switch_Init = 6;
  2441  000FD2  0E06               	movlw	6
  2442  000FD4  D00C               	goto	L3
  2443  000FD6                     l248:
  2444                           
  2445                           ;State_Mchn.c: 234: else if(GETxAPIxVAL(40) == 9)
  2446                           
  2447                           ; BSR set to: 0
  2448  000FD6  0E00               	movlw	0
  2449  000FD8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2450  000FDA  0E28               	movlw	40
  2451  000FDC  6E13               	movwf	GETxAPIxVAL@index,c
  2452  000FDE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2453  000FE2  0E09               	movlw	9
  2454  000FE4  1813               	xorwf	?_GETxAPIxVAL,w,c
  2455  000FE6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2456  000FE8  A4D8               	btfss	status,2,c
  2457  000FEA  D003               	goto	l250
  2458                           
  2459                           ;State_Mchn.c: 235: {
  2460                           ;State_Mchn.c: 236: Switch_Init = 9;
  2461  000FEC  0E09               	movlw	9
  2462  000FEE                     L3:
  2463  000FEE  0100               	movlb	0	; () banked
  2464  000FF0  6F8E               	movwf	_Switch_Init& (0+255),b
  2465  000FF2                     l250:
  2466                           
  2467                           ;State_Mchn.c: 237: }
  2468                           ;State_Mchn.c: 238: Green_Led(2);
  2469                           
  2470                           ; BSR set to: 0
  2471                           
  2472                           ; BSR set to: 0
  2473  000FF2  0E02               	movlw	2
  2474  000FF4  ECBD  F01E         	call	_Green_Led
  2475                           
  2476                           ;State_Mchn.c: 239: break;
  2477  000FF8  D391               	goto	l337
  2478  000FFA  0E08               	movlw	8
  2479  000FFC  0100               	movlb	0	; () banked
  2480  000FFE  6F8E               	movwf	_Switch_Init& (0+255),b
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;State_Mchn.c: 242: Green_Led(2);
  2484  001000  0E02               	movlw	2
  2485  001002  ECBD  F01E         	call	_Green_Led
  2486                           
  2487                           ;State_Mchn.c: 243: break;
  2488  001006  D38A               	goto	l337
  2489  001008  0E00               	movlw	0
  2490  00100A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2491  00100C  0E20               	movlw	32
  2492  00100E  6E13               	movwf	GETxAPIxVAL@index,c
  2493  001010  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2494  001014  5013               	movf	?_GETxAPIxVAL,w,c
  2495  001016  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2496  001018  A4D8               	btfss	status,2,c
  2497  00101A  D00A               	goto	u9140
  2498  00101C  0E00               	movlw	0
  2499  00101E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2500  001020  0E46               	movlw	70
  2501  001022  6E13               	movwf	GETxAPIxVAL@index,c
  2502  001024  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2503  001028  5013               	movf	?_GETxAPIxVAL,w,c
  2504  00102A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2505  00102C  B4D8               	btfsc	status,2,c
  2506  00102E  D015               	goto	l253
  2507  001030                     u9140:
  2508                           
  2509                           ;State_Mchn.c: 246: {
  2510                           ;State_Mchn.c: 247: Switch_Main = 2;
  2511  001030  0E02               	movlw	2
  2512  001032  0100               	movlb	0	; () banked
  2513  001034  6FC7               	movwf	_Switch_Main& (0+255),b
  2514                           
  2515                           ;State_Mchn.c: 248: Switch_Init = 0;
  2516  001036  0E00               	movlw	0
  2517  001038  6F8E               	movwf	_Switch_Init& (0+255),b
  2518                           
  2519                           ;State_Mchn.c: 249: Stop_Program = 0;
  2520  00103A  0E00               	movlw	0
  2521  00103C  6F89               	movwf	_Stop_Program& (0+255),b
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;State_Mchn.c: 250: SETxAPIxVALxNoxRET(70, 0);
  2525  00103E  0E00               	movlw	0
  2526  001040  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  2527  001042  0E46               	movlw	70
  2528  001044  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  2529  001046  0E00               	movlw	0
  2530  001048  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  2531  00104A  0E00               	movlw	0
  2532  00104C  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  2533  00104E  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  2534                           
  2535                           ;State_Mchn.c: 251: Green_Led(1);
  2536  001052  0E01               	movlw	1
  2537  001054  ECBD  F01E         	call	_Green_Led
  2538                           
  2539                           ;State_Mchn.c: 252: }
  2540  001058  D361               	goto	l337
  2541  00105A                     l253:
  2542                           
  2543                           ;State_Mchn.c: 254: else if (Train_Pos1_Temp != GETxAPIxVAL(39) || Train_Pos2_Temp != GE
      +                          TxAPIxVAL(40)){
  2544  00105A  0E00               	movlw	0
  2545  00105C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2546  00105E  0E27               	movlw	39
  2547  001060  6E13               	movwf	GETxAPIxVAL@index,c
  2548  001062  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2549  001066  0100               	movlb	0	; () banked
  2550  001068  517C               	movf	_Train_Pos1_Temp& (0+255),w,b
  2551  00106A  1813               	xorwf	?_GETxAPIxVAL,w,c
  2552  00106C  E111               	bnz	l8882
  2553  00106E  517D               	movf	(_Train_Pos1_Temp+1)& (0+255),w,b
  2554  001070  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  2555  001072  A4D8               	btfss	status,2,c
  2556  001074  D18F               	goto	u9240
  2557                           
  2558                           ; BSR set to: 0
  2559  001076  0E00               	movlw	0
  2560  001078  6E14               	movwf	GETxAPIxVAL@index+1,c
  2561  00107A  0E28               	movlw	40
  2562  00107C  6E13               	movwf	GETxAPIxVAL@index,c
  2563  00107E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2564  001082  0100               	movlb	0	; () banked
  2565  001084  517A               	movf	_Train_Pos2_Temp& (0+255),w,b
  2566  001086  1813               	xorwf	?_GETxAPIxVAL,w,c
  2567  001088  E103               	bnz	l8882
  2568  00108A  517B               	movf	(_Train_Pos2_Temp+1)& (0+255),w,b
  2569  00108C  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  2570  00108E  A4D8               	btfss	status,2,c
  2571  001090                     l8882:
  2572  001090  D181               	goto	u9240
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;State_Mchn.c: 258: else{
  2576                           ;State_Mchn.c: 259: Green_Led(3);
  2577                           
  2578                           ; BSR set to: 0
  2579                           
  2580                           ;State_Mchn.c: 257: }
  2581                           
  2582                           ;State_Mchn.c: 256: Switch_Init = 0;
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;State_Mchn.c: 255: Switch_Main = 1;
  2586  001092  0E03               	movlw	3
  2587  001094  ECBD  F01E         	call	_Green_Led
  2588                           
  2589                           ;State_Mchn.c: 260: Red_Led(0);
  2590  001098  0E00               	movlw	0
  2591  00109A  EC70  F01E         	call	_Red_Led
  2592                           
  2593                           ;State_Mchn.c: 261: }
  2594                           ;State_Mchn.c: 262: break;
  2595  00109E  D33E               	goto	l337
  2596  0010A0  0E00               	movlw	0
  2597  0010A2  6E14               	movwf	GETxAPIxVAL@index+1,c
  2598  0010A4  0E27               	movlw	39
  2599  0010A6  6E13               	movwf	GETxAPIxVAL@index,c
  2600  0010A8  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2601  0010AC  0E05               	movlw	5
  2602  0010AE  1813               	xorwf	?_GETxAPIxVAL,w,c
  2603  0010B0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2604  0010B2  B4D8               	btfsc	status,2,c
  2605  0010B4  D010               	goto	l263
  2606  0010B6  D027               	goto	l262
  2607  0010B8  0E01               	movlw	1
  2608  0010BA  D069               	goto	L13
  2609  0010BC                     
  2610                           ; BSR set to: 0
  2611  0010BC  0E05               	movlw	5
  2612  0010BE  D067               	goto	L13
  2613  0010C0                     
  2614                           ; BSR set to: 0
  2615  0010C0  0E02               	movlw	2
  2616  0010C2  D065               	goto	L13
  2617  0010C4                     
  2618                           ; BSR set to: 0
  2619  0010C4  0E03               	movlw	3
  2620  0010C6  D063               	goto	L13
  2621  0010C8                     
  2622                           ; BSR set to: 0
  2623  0010C8  0E08               	movlw	8
  2624  0010CA  0100               	movlb	0	; () banked
  2625  0010CC  6F8E               	movwf	_Switch_Init& (0+255),b
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;State_Mchn.c: 281: Red_Led(1);
  2629  0010CE  0E01               	movlw	1
  2630  0010D0  EC70  F01E         	call	_Red_Led
  2631                           
  2632                           ;State_Mchn.c: 283: }
  2633                           
  2634                           ;State_Mchn.c: 282: break;
  2635  0010D4  D102               	goto	l290
  2636  0010D6                     l263:
  2637  0010D6  0E00               	movlw	0
  2638  0010D8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2639  0010DA  0E28               	movlw	40
  2640  0010DC  6E13               	movwf	GETxAPIxVAL@index,c
  2641  0010DE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2642                           
  2643                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2644                           ; Switch size 1, requested type "space"
  2645                           ; Number of cases is 1, Range of values is 0 to 0
  2646                           ; switch strategies available:
  2647                           ; Name         Instructions Cycles
  2648                           ; simple_byte            4     3 (average)
  2649                           ;	Chosen strategy is simple_byte
  2650  0010E2  5014               	movf	?_GETxAPIxVAL+1,w,c
  2651  0010E4  0A00               	xorlw	0	; case 0
  2652  0010E6  A4D8               	btfss	status,2,c
  2653  0010E8  D7EF               	goto	l269
  2654                           
  2655                           ; Switch size 1, requested type "space"
  2656                           ; Number of cases is 4, Range of values is 1 to 4
  2657                           ; switch strategies available:
  2658                           ; Name         Instructions Cycles
  2659                           ; simple_byte           13     7 (average)
  2660                           ;	Chosen strategy is simple_byte
  2661  0010EA  5013               	movf	?_GETxAPIxVAL,w,c
  2662  0010EC  0A01               	xorlw	1	; case 1
  2663  0010EE  B4D8               	btfsc	status,2,c
  2664  0010F0  D7E3               	goto	l264
  2665  0010F2  0A03               	xorlw	3	; case 2
  2666  0010F4  B4D8               	btfsc	status,2,c
  2667  0010F6  D7E2               	goto	l266
  2668  0010F8  0A01               	xorlw	1	; case 3
  2669  0010FA  B4D8               	btfsc	status,2,c
  2670  0010FC  D7E1               	goto	l267
  2671  0010FE  0A07               	xorlw	7	; case 4
  2672  001100  B4D8               	btfsc	status,2,c
  2673  001102  D7E0               	goto	l268
  2674  001104  D7E1               	goto	l269
  2675  001106                     l262:
  2676                           
  2677                           ;State_Mchn.c: 285: else if(GETxAPIxVAL(40) == 5)
  2678  001106  0E00               	movlw	0
  2679  001108  6E14               	movwf	GETxAPIxVAL@index+1,c
  2680  00110A  0E28               	movlw	40
  2681  00110C  6E13               	movwf	GETxAPIxVAL@index,c
  2682  00110E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2683  001112  0E05               	movlw	5
  2684  001114  1813               	xorwf	?_GETxAPIxVAL,w,c
  2685  001116  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2686  001118  B4D8               	btfsc	status,2,c
  2687  00111A  D008               	goto	l272
  2688  00111C  D01F               	goto	l271
  2689  00111E                     
  2690                           ; BSR set to: 0
  2691  00111E  0E08               	movlw	8
  2692  001120  0100               	movlb	0	; () banked
  2693  001122  6F8E               	movwf	_Switch_Init& (0+255),b
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;State_Mchn.c: 302: Red_Led(1);
  2697  001124  0E01               	movlw	1
  2698  001126  EC70  F01E         	call	_Red_Led
  2699                           
  2700                           ;State_Mchn.c: 304: }
  2701                           
  2702                           ;State_Mchn.c: 303: break;
  2703  00112A  D0D7               	goto	l290
  2704  00112C                     l272:
  2705  00112C  0E00               	movlw	0
  2706  00112E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2707  001130  0E27               	movlw	39
  2708  001132  6E13               	movwf	GETxAPIxVAL@index,c
  2709  001134  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2710                           
  2711                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2712                           ; Switch size 1, requested type "space"
  2713                           ; Number of cases is 1, Range of values is 0 to 0
  2714                           ; switch strategies available:
  2715                           ; Name         Instructions Cycles
  2716                           ; simple_byte            4     3 (average)
  2717                           ;	Chosen strategy is simple_byte
  2718  001138  5014               	movf	?_GETxAPIxVAL+1,w,c
  2719  00113A  0A00               	xorlw	0	; case 0
  2720  00113C  A4D8               	btfss	status,2,c
  2721  00113E  D7EF               	goto	l278
  2722                           
  2723                           ; Switch size 1, requested type "space"
  2724                           ; Number of cases is 4, Range of values is 1 to 4
  2725                           ; switch strategies available:
  2726                           ; Name         Instructions Cycles
  2727                           ; simple_byte           13     7 (average)
  2728                           ;	Chosen strategy is simple_byte
  2729  001140  5013               	movf	?_GETxAPIxVAL,w,c
  2730  001142  0A01               	xorlw	1	; case 1
  2731  001144  B4D8               	btfsc	status,2,c
  2732  001146  D7B8               	goto	l264
  2733  001148  0A03               	xorlw	3	; case 2
  2734  00114A  B4D8               	btfsc	status,2,c
  2735  00114C  D7B7               	goto	l266
  2736  00114E  0A01               	xorlw	1	; case 3
  2737  001150  B4D8               	btfsc	status,2,c
  2738  001152  D7B6               	goto	l267
  2739  001154  0A07               	xorlw	7	; case 4
  2740  001156  B4D8               	btfsc	status,2,c
  2741  001158  D7B5               	goto	l268
  2742  00115A  D7E1               	goto	l278
  2743  00115C                     l271:
  2744                           
  2745                           ;State_Mchn.c: 306: else if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2746  00115C  0E00               	movlw	0
  2747  00115E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2748  001160  0E27               	movlw	39
  2749  001162  6E13               	movwf	GETxAPIxVAL@index,c
  2750  001164  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2751  001168  0E05               	movlw	5
  2752  00116A  1813               	xorwf	?_GETxAPIxVAL,w,c
  2753  00116C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2754  00116E  B4D8               	btfsc	status,2,c
  2755  001170  D0B4               	goto	l290
  2756  001172  0E00               	movlw	0
  2757  001174  6E14               	movwf	GETxAPIxVAL@index+1,c
  2758  001176  0E28               	movlw	40
  2759  001178  6E13               	movwf	GETxAPIxVAL@index,c
  2760  00117A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2761  00117E  0E05               	movlw	5
  2762  001180  1813               	xorwf	?_GETxAPIxVAL,w,c
  2763  001182  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2764  001184  A4D8               	btfss	status,2,c
  2765  001186  D091               	goto	l281
  2766  001188  D0A8               	goto	l290
  2767  00118A                     L12:
  2768  00118A  6F8E               	movwf	_Switch_Init& (0+255),b
  2769                           
  2770                           ;State_Mchn.c: 316: break;
  2771  00118C  D0A6               	goto	l290
  2772  00118E                     L13:
  2773  00118E  0100               	movlb	0	; () banked
  2774  001190  6F8D               	movwf	_Switch_Program& (0+255),b
  2775                           
  2776                           ;State_Mchn.c: 318: Switch_Init = 7;
  2777  001192  0E07               	movlw	7
  2778  001194  D7FA               	goto	L12
  2779  001196                     
  2780                           ; BSR set to: 0
  2781  001196  0E08               	movlw	8
  2782  001198  0100               	movlb	0	; () banked
  2783  00119A  6F8E               	movwf	_Switch_Init& (0+255),b
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;State_Mchn.c: 324: Red_Led(1);
  2787  00119C  0E01               	movlw	1
  2788  00119E  EC70  F01E         	call	_Red_Led
  2789                           
  2790                           ;State_Mchn.c: 326: }
  2791                           
  2792                           ;State_Mchn.c: 325: break;
  2793  0011A2  D09B               	goto	l290
  2794  0011A4  0E00               	movlw	0
  2795  0011A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  2796  0011A8  0E28               	movlw	40
  2797  0011AA  6E13               	movwf	GETxAPIxVAL@index,c
  2798  0011AC  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2799                           
  2800                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2801                           ; Switch size 1, requested type "space"
  2802                           ; Number of cases is 1, Range of values is 0 to 0
  2803                           ; switch strategies available:
  2804                           ; Name         Instructions Cycles
  2805                           ; simple_byte            4     3 (average)
  2806                           ;	Chosen strategy is simple_byte
  2807  0011B0  5014               	movf	?_GETxAPIxVAL+1,w,c
  2808  0011B2  0A00               	xorlw	0	; case 0
  2809  0011B4  A4D8               	btfss	status,2,c
  2810  0011B6  D7EF               	goto	l289
  2811                           
  2812                           ; Switch size 1, requested type "space"
  2813                           ; Number of cases is 4, Range of values is 1 to 4
  2814                           ; switch strategies available:
  2815                           ; Name         Instructions Cycles
  2816                           ; simple_byte           13     7 (average)
  2817                           ;	Chosen strategy is simple_byte
  2818  0011B8  5013               	movf	?_GETxAPIxVAL,w,c
  2819  0011BA  0A01               	xorlw	1	; case 1
  2820  0011BC  B4D8               	btfsc	status,2,c
  2821  0011BE  D04C               	goto	l313
  2822  0011C0  0A03               	xorlw	3	; case 2
  2823  0011C2  B4D8               	btfsc	status,2,c
  2824  0011C4  D77D               	goto	l267
  2825  0011C6  0A01               	xorlw	1	; case 3
  2826  0011C8  B4D8               	btfsc	status,2,c
  2827  0011CA  D77C               	goto	l268
  2828  0011CC  0A07               	xorlw	7	; case 4
  2829  0011CE  B4D8               	btfsc	status,2,c
  2830  0011D0  D775               	goto	l266
  2831  0011D2  D7E1               	goto	l289
  2832  0011D4                     
  2833                           ; BSR set to: 0
  2834  0011D4  0E08               	movlw	8
  2835  0011D6  0100               	movlb	0	; () banked
  2836  0011D8  6F8E               	movwf	_Switch_Init& (0+255),b
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;State_Mchn.c: 342: Red_Led(1);
  2840  0011DA  0E01               	movlw	1
  2841  0011DC  EC70  F01E         	call	_Red_Led
  2842                           
  2843                           ;State_Mchn.c: 344: }
  2844                           
  2845                           ;State_Mchn.c: 343: break;
  2846  0011E0  D07C               	goto	l290
  2847  0011E2  0E00               	movlw	0
  2848  0011E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  2849  0011E6  0E28               	movlw	40
  2850  0011E8  6E13               	movwf	GETxAPIxVAL@index,c
  2851  0011EA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2852                           
  2853                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2854                           ; Switch size 1, requested type "space"
  2855                           ; Number of cases is 1, Range of values is 0 to 0
  2856                           ; switch strategies available:
  2857                           ; Name         Instructions Cycles
  2858                           ; simple_byte            4     3 (average)
  2859                           ;	Chosen strategy is simple_byte
  2860  0011EE  5014               	movf	?_GETxAPIxVAL+1,w,c
  2861  0011F0  0A00               	xorlw	0	; case 0
  2862  0011F2  A4D8               	btfss	status,2,c
  2863  0011F4  D7EF               	goto	l298
  2864                           
  2865                           ; Switch size 1, requested type "space"
  2866                           ; Number of cases is 4, Range of values is 1 to 4
  2867                           ; switch strategies available:
  2868                           ; Name         Instructions Cycles
  2869                           ; simple_byte           13     7 (average)
  2870                           ;	Chosen strategy is simple_byte
  2871  0011F6  5013               	movf	?_GETxAPIxVAL,w,c
  2872  0011F8  0A01               	xorlw	1	; case 1
  2873  0011FA  B4D8               	btfsc	status,2,c
  2874  0011FC  D761               	goto	l267
  2875  0011FE  0A03               	xorlw	3	; case 2
  2876  001200  B4D8               	btfsc	status,2,c
  2877  001202  D02A               	goto	l313
  2878  001204  0A01               	xorlw	1	; case 3
  2879  001206  B4D8               	btfsc	status,2,c
  2880  001208  D757               	goto	l264
  2881  00120A  0A07               	xorlw	7	; case 4
  2882  00120C  B4D8               	btfsc	status,2,c
  2883  00120E  D020               	goto	l311
  2884  001210  D7E1               	goto	l298
  2885  001212                     
  2886                           ; BSR set to: 0
  2887  001212  0E08               	movlw	8
  2888  001214  0100               	movlb	0	; () banked
  2889  001216  6F8E               	movwf	_Switch_Init& (0+255),b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;State_Mchn.c: 360: Red_Led(1);
  2893  001218  0E01               	movlw	1
  2894  00121A  EC70  F01E         	call	_Red_Led
  2895                           
  2896                           ;State_Mchn.c: 362: }
  2897                           
  2898                           ;State_Mchn.c: 361: break;
  2899  00121E  D05D               	goto	l290
  2900  001220  0E00               	movlw	0
  2901  001222  6E14               	movwf	GETxAPIxVAL@index+1,c
  2902  001224  0E28               	movlw	40
  2903  001226  6E13               	movwf	GETxAPIxVAL@index,c
  2904  001228  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2905                           
  2906                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2907                           ; Switch size 1, requested type "space"
  2908                           ; Number of cases is 1, Range of values is 0 to 0
  2909                           ; switch strategies available:
  2910                           ; Name         Instructions Cycles
  2911                           ; simple_byte            4     3 (average)
  2912                           ;	Chosen strategy is simple_byte
  2913  00122C  5014               	movf	?_GETxAPIxVAL+1,w,c
  2914  00122E  0A00               	xorlw	0	; case 0
  2915  001230  A4D8               	btfss	status,2,c
  2916  001232  D7EF               	goto	l306
  2917                           
  2918                           ; Switch size 1, requested type "space"
  2919                           ; Number of cases is 4, Range of values is 1 to 4
  2920                           ; switch strategies available:
  2921                           ; Name         Instructions Cycles
  2922                           ; simple_byte           13     7 (average)
  2923                           ;	Chosen strategy is simple_byte
  2924  001234  5013               	movf	?_GETxAPIxVAL,w,c
  2925  001236  0A01               	xorlw	1	; case 1
  2926  001238  B4D8               	btfsc	status,2,c
  2927  00123A  D744               	goto	l268
  2928  00123C  0A03               	xorlw	3	; case 2
  2929  00123E  B4D8               	btfsc	status,2,c
  2930  001240  D73B               	goto	l264
  2931  001242  0A01               	xorlw	1	; case 3
  2932  001244  B4D8               	btfsc	status,2,c
  2933  001246  D008               	goto	l313
  2934  001248  0A07               	xorlw	7	; case 4
  2935  00124A  B4D8               	btfsc	status,2,c
  2936  00124C  D003               	goto	l312
  2937  00124E  D7E1               	goto	l306
  2938  001250                     l311:
  2939                           
  2940                           ; BSR set to: 0
  2941  001250  0E07               	movlw	7
  2942  001252  D79D               	goto	L13
  2943  001254                     l312:
  2944                           
  2945                           ; BSR set to: 0
  2946  001254  0E04               	movlw	4
  2947  001256  D79B               	goto	L13
  2948  001258                     l313:
  2949                           
  2950                           ; BSR set to: 0
  2951  001258  0E00               	movlw	0
  2952  00125A  0100               	movlb	0	; () banked
  2953  00125C  D796               	goto	L12
  2954  00125E                     
  2955                           ; BSR set to: 0
  2956  00125E  0E08               	movlw	8
  2957  001260  0100               	movlb	0	; () banked
  2958  001262  6F8E               	movwf	_Switch_Init& (0+255),b
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;State_Mchn.c: 378: Red_Led(1);
  2962  001264  0E01               	movlw	1
  2963  001266  EC70  F01E         	call	_Red_Led
  2964                           
  2965                           ;State_Mchn.c: 380: }
  2966                           
  2967                           ;State_Mchn.c: 379: break;
  2968  00126A  D037               	goto	l290
  2969  00126C  0E00               	movlw	0
  2970  00126E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2971  001270  0E28               	movlw	40
  2972  001272  6E13               	movwf	GETxAPIxVAL@index,c
  2973  001274  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  2974                           
  2975                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2976                           ; Switch size 1, requested type "space"
  2977                           ; Number of cases is 1, Range of values is 0 to 0
  2978                           ; switch strategies available:
  2979                           ; Name         Instructions Cycles
  2980                           ; simple_byte            4     3 (average)
  2981                           ;	Chosen strategy is simple_byte
  2982  001278  5014               	movf	?_GETxAPIxVAL+1,w,c
  2983  00127A  0A00               	xorlw	0	; case 0
  2984  00127C  A4D8               	btfss	status,2,c
  2985  00127E  D7EF               	goto	l314
  2986                           
  2987                           ; Switch size 1, requested type "space"
  2988                           ; Number of cases is 4, Range of values is 1 to 4
  2989                           ; switch strategies available:
  2990                           ; Name         Instructions Cycles
  2991                           ; simple_byte           13     7 (average)
  2992                           ;	Chosen strategy is simple_byte
  2993  001280  5013               	movf	?_GETxAPIxVAL,w,c
  2994  001282  0A01               	xorlw	1	; case 1
  2995  001284  B4D8               	btfsc	status,2,c
  2996  001286  D71A               	goto	l266
  2997  001288  0A03               	xorlw	3	; case 2
  2998  00128A  B4D8               	btfsc	status,2,c
  2999  00128C  D7E1               	goto	l311
  3000  00128E  0A01               	xorlw	1	; case 3
  3001  001290  B4D8               	btfsc	status,2,c
  3002  001292  D7E0               	goto	l312
  3003  001294  0A07               	xorlw	7	; case 4
  3004  001296  B4D8               	btfsc	status,2,c
  3005  001298  D7DF               	goto	l313
  3006  00129A  D7E1               	goto	l314
  3007  00129C  0E08               	movlw	8
  3008  00129E  0100               	movlb	0	; () banked
  3009  0012A0  6F8E               	movwf	_Switch_Init& (0+255),b
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;State_Mchn.c: 383: Red_Led(1);
  3013  0012A2  0E01               	movlw	1
  3014  0012A4  EC70  F01E         	call	_Red_Led
  3015                           
  3016                           ;State_Mchn.c: 385: }
  3017                           
  3018                           ;State_Mchn.c: 384: break;
  3019  0012A8  D018               	goto	l290
  3020  0012AA                     l281:
  3021  0012AA  0E00               	movlw	0
  3022  0012AC  6E14               	movwf	GETxAPIxVAL@index+1,c
  3023  0012AE  0E27               	movlw	39
  3024  0012B0  6E13               	movwf	GETxAPIxVAL@index,c
  3025  0012B2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3026                           
  3027                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3028                           ; Switch size 1, requested type "space"
  3029                           ; Number of cases is 1, Range of values is 0 to 0
  3030                           ; switch strategies available:
  3031                           ; Name         Instructions Cycles
  3032                           ; simple_byte            4     3 (average)
  3033                           ;	Chosen strategy is simple_byte
  3034  0012B6  5014               	movf	?_GETxAPIxVAL+1,w,c
  3035  0012B8  0A00               	xorlw	0	; case 0
  3036  0012BA  A4D8               	btfss	status,2,c
  3037  0012BC  D7EF               	goto	l315
  3038                           
  3039                           ; Switch size 1, requested type "space"
  3040                           ; Number of cases is 4, Range of values is 1 to 4
  3041                           ; switch strategies available:
  3042                           ; Name         Instructions Cycles
  3043                           ; simple_byte           13     7 (average)
  3044                           ;	Chosen strategy is simple_byte
  3045  0012BE  5013               	movf	?_GETxAPIxVAL,w,c
  3046  0012C0  0A01               	xorlw	1	; case 1
  3047  0012C2  B4D8               	btfsc	status,2,c
  3048  0012C4  D76F               	goto	l283
  3049  0012C6  0A03               	xorlw	3	; case 2
  3050  0012C8  B4D8               	btfsc	status,2,c
  3051  0012CA  D78B               	goto	l292
  3052  0012CC  0A01               	xorlw	1	; case 3
  3053  0012CE  B4D8               	btfsc	status,2,c
  3054  0012D0  D7A7               	goto	l300
  3055  0012D2  0A07               	xorlw	7	; case 4
  3056  0012D4  B4D8               	btfsc	status,2,c
  3057  0012D6  D7CA               	goto	l308
  3058  0012D8  D7E1               	goto	l315
  3059  0012DA                     l290:
  3060                           
  3061                           ;State_Mchn.c: 386: }
  3062                           ;State_Mchn.c: 387: Train_Pos1_Temp = GETxAPIxVAL(39);
  3063  0012DA  0E00               	movlw	0
  3064  0012DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  3065  0012DE  0E27               	movlw	39
  3066  0012E0  6E13               	movwf	GETxAPIxVAL@index,c
  3067  0012E2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3068  0012E6  C013  F07C         	movff	?_GETxAPIxVAL,_Train_Pos1_Temp
  3069  0012EA  C014  F07D         	movff	?_GETxAPIxVAL+1,_Train_Pos1_Temp+1
  3070                           
  3071                           ;State_Mchn.c: 388: Train_Pos2_Temp = GETxAPIxVAL(40);
  3072  0012EE  0E00               	movlw	0
  3073  0012F0  6E14               	movwf	GETxAPIxVAL@index+1,c
  3074  0012F2  0E28               	movlw	40
  3075  0012F4  6E13               	movwf	GETxAPIxVAL@index,c
  3076  0012F6  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3077  0012FA  D09D               	goto	L14
  3078  0012FC  0E0B               	movlw	11
  3079  0012FE  0100               	movlb	0	; () banked
  3080  001300  6F8E               	movwf	_Switch_Init& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;State_Mchn.c: 392: Green_Led(2);
  3084  001302  0E02               	movlw	2
  3085  001304  ECBD  F01E         	call	_Green_Led
  3086                           
  3087                           ;State_Mchn.c: 393: break;
  3088  001308  D209               	goto	l337
  3089  00130A  0E00               	movlw	0
  3090  00130C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3091  00130E  0E20               	movlw	32
  3092  001310  6E13               	movwf	GETxAPIxVAL@index,c
  3093  001312  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3094  001316  5013               	movf	?_GETxAPIxVAL,w,c
  3095  001318  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3096  00131A  A4D8               	btfss	status,2,c
  3097  00131C  D00A               	goto	u9220
  3098  00131E  0E00               	movlw	0
  3099  001320  6E14               	movwf	GETxAPIxVAL@index+1,c
  3100  001322  0E46               	movlw	70
  3101  001324  6E13               	movwf	GETxAPIxVAL@index,c
  3102  001326  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3103  00132A  5013               	movf	?_GETxAPIxVAL,w,c
  3104  00132C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3105  00132E  B4D8               	btfsc	status,2,c
  3106  001330  D015               	goto	l318
  3107  001332                     u9220:
  3108                           
  3109                           ;State_Mchn.c: 396: {
  3110                           ;State_Mchn.c: 397: Switch_Main = 3;
  3111  001332  0E03               	movlw	3
  3112  001334  0100               	movlb	0	; () banked
  3113  001336  6FC7               	movwf	_Switch_Main& (0+255),b
  3114                           
  3115                           ;State_Mchn.c: 398: Switch_Init = 0;
  3116  001338  0E00               	movlw	0
  3117  00133A  6F8E               	movwf	_Switch_Init& (0+255),b
  3118                           
  3119                           ;State_Mchn.c: 399: Stop_Program = 0;
  3120  00133C  0E00               	movlw	0
  3121  00133E  6F89               	movwf	_Stop_Program& (0+255),b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;State_Mchn.c: 400: SETxAPIxVALxNoxRET(70, 0);
  3125  001340  0E00               	movlw	0
  3126  001342  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  3127  001344  0E46               	movlw	70
  3128  001346  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  3129  001348  0E00               	movlw	0
  3130  00134A  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  3131  00134C  0E00               	movlw	0
  3132  00134E  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  3133  001350  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  3134                           
  3135                           ;State_Mchn.c: 401: Green_Led(1);
  3136  001354  0E01               	movlw	1
  3137  001356  ECBD  F01E         	call	_Green_Led
  3138                           
  3139                           ;State_Mchn.c: 402: }
  3140  00135A  D1E0               	goto	l337
  3141  00135C                     l318:
  3142                           
  3143                           ;State_Mchn.c: 403: else if (Train_Pos1_Temp != GETxAPIxVAL(39) || Train_Pos2_Temp != GE
      +                          TxAPIxVAL(40)){
  3144  00135C  0E00               	movlw	0
  3145  00135E  6E14               	movwf	GETxAPIxVAL@index+1,c
  3146  001360  0E27               	movlw	39
  3147  001362  6E13               	movwf	GETxAPIxVAL@index,c
  3148  001364  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3149  001368  0100               	movlb	0	; () banked
  3150  00136A  517C               	movf	_Train_Pos1_Temp& (0+255),w,b
  3151  00136C  1813               	xorwf	?_GETxAPIxVAL,w,c
  3152  00136E  E112               	bnz	l9024
  3153  001370  517D               	movf	(_Train_Pos1_Temp+1)& (0+255),w,b
  3154  001372  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  3155  001374  A4D8               	btfss	status,2,c
  3156  001376  D00E               	goto	u9240
  3157                           
  3158                           ; BSR set to: 0
  3159  001378  0E00               	movlw	0
  3160  00137A  6E14               	movwf	GETxAPIxVAL@index+1,c
  3161  00137C  0E28               	movlw	40
  3162  00137E  6E13               	movwf	GETxAPIxVAL@index,c
  3163  001380  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3164  001384  0100               	movlb	0	; () banked
  3165  001386  517A               	movf	_Train_Pos2_Temp& (0+255),w,b
  3166  001388  1813               	xorwf	?_GETxAPIxVAL,w,c
  3167  00138A  E104               	bnz	l9024
  3168  00138C  517B               	movf	(_Train_Pos2_Temp+1)& (0+255),w,b
  3169  00138E  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  3170  001390  B4D8               	btfsc	status,2,c
  3171  001392  D004               	goto	l322
  3172  001394                     u9240:
  3173  001394                     l9024:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;State_Mchn.c: 404: Switch_Main = 1;
  3177  001394  0E01               	movlw	1
  3178  001396  6FC7               	movwf	_Switch_Main& (0+255),b
  3179                           
  3180                           ;State_Mchn.c: 405: Switch_Init = 0;
  3181  001398  0E00               	movlw	0
  3182  00139A  D438               	goto	L1
  3183  00139C                     l322:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;State_Mchn.c: 407: else{
  3187                           ;State_Mchn.c: 408: Green_Led(3);
  3188                           
  3189                           ; BSR set to: 0
  3190  00139C  0E03               	movlw	3
  3191  00139E  ECBD  F01E         	call	_Green_Led
  3192                           
  3193                           ;State_Mchn.c: 409: Red_Led(0);
  3194  0013A2  0E00               	movlw	0
  3195  0013A4  EC70  F01E         	call	_Red_Led
  3196                           
  3197                           ;State_Mchn.c: 410: }
  3198                           ;State_Mchn.c: 411: break;
  3199  0013A8  D1B9               	goto	l337
  3200  0013AA  0E00               	movlw	0
  3201  0013AC  6E14               	movwf	GETxAPIxVAL@index+1,c
  3202  0013AE  0E27               	movlw	39
  3203  0013B0  6E13               	movwf	GETxAPIxVAL@index,c
  3204  0013B2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3205  0013B6  0E05               	movlw	5
  3206  0013B8  1813               	xorwf	?_GETxAPIxVAL,w,c
  3207  0013BA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3208  0013BC  A4D8               	btfss	status,2,c
  3209  0013BE  D013               	goto	l329
  3210  0013C0                     u9250:
  3211                           
  3212                           ;State_Mchn.c: 414: {
  3213                           ;State_Mchn.c: 415: Switch_Program = 1;
  3214  0013C0  0E01               	movlw	1
  3215  0013C2  D005               	goto	L18
  3216  0013C4                     
  3217                           ; BSR set to: 0
  3218  0013C4  0E02               	movlw	2
  3219  0013C6  D003               	goto	L18
  3220  0013C8                     
  3221                           ; BSR set to: 0
  3222  0013C8  0E04               	movlw	4
  3223  0013CA  D001               	goto	L18
  3224  0013CC                     
  3225                           ; BSR set to: 0
  3226  0013CC  0E03               	movlw	3
  3227  0013CE                     L18:
  3228  0013CE  0100               	movlb	0	; () banked
  3229  0013D0  6F8D               	movwf	_Switch_Program& (0+255),b
  3230  0013D2  0E0A               	movlw	10
  3231  0013D4  6F8E               	movwf	_Switch_Init& (0+255),b
  3232  0013D6  D01F               	goto	l331
  3233  0013D8                     
  3234                           ; BSR set to: 0
  3235  0013D8  0E0B               	movlw	11
  3236  0013DA  0100               	movlb	0	; () banked
  3237  0013DC  6F8E               	movwf	_Switch_Init& (0+255),b
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;State_Mchn.c: 425: Red_Led(1);
  3241  0013DE  0E01               	movlw	1
  3242  0013E0  EC70  F01E         	call	_Red_Led
  3243                           
  3244                           ;State_Mchn.c: 427: }
  3245                           
  3246                           ;State_Mchn.c: 426: break;
  3247  0013E4  D018               	goto	l331
  3248  0013E6                     l329:
  3249  0013E6  0E00               	movlw	0
  3250  0013E8  6E14               	movwf	GETxAPIxVAL@index+1,c
  3251  0013EA  0E27               	movlw	39
  3252  0013EC  6E13               	movwf	GETxAPIxVAL@index,c
  3253  0013EE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3254                           
  3255                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3256                           ; Switch size 1, requested type "space"
  3257                           ; Number of cases is 1, Range of values is 0 to 0
  3258                           ; switch strategies available:
  3259                           ; Name         Instructions Cycles
  3260                           ; simple_byte            4     3 (average)
  3261                           ;	Chosen strategy is simple_byte
  3262  0013F2  5014               	movf	?_GETxAPIxVAL+1,w,c
  3263  0013F4  0A00               	xorlw	0	; case 0
  3264  0013F6  A4D8               	btfss	status,2,c
  3265  0013F8  D7EF               	goto	l335
  3266                           
  3267                           ; Switch size 1, requested type "space"
  3268                           ; Number of cases is 4, Range of values is 1 to 4
  3269                           ; switch strategies available:
  3270                           ; Name         Instructions Cycles
  3271                           ; simple_byte           13     7 (average)
  3272                           ;	Chosen strategy is simple_byte
  3273  0013FA  5013               	movf	?_GETxAPIxVAL,w,c
  3274  0013FC  0A01               	xorlw	1	; case 1
  3275  0013FE  B4D8               	btfsc	status,2,c
  3276  001400  D7E1               	goto	l330
  3277  001402  0A03               	xorlw	3	; case 2
  3278  001404  B4D8               	btfsc	status,2,c
  3279  001406  D7E0               	goto	l332
  3280  001408  0A01               	xorlw	1	; case 3
  3281  00140A  B4D8               	btfsc	status,2,c
  3282  00140C  D7D9               	goto	u9250
  3283  00140E  0A07               	xorlw	7	; case 4
  3284  001410  B4D8               	btfsc	status,2,c
  3285  001412  D7DC               	goto	l334
  3286  001414  D7E1               	goto	l335
  3287  001416                     l331:
  3288                           
  3289                           ;State_Mchn.c: 428: Train_Pos1_Temp = GETxAPIxVAL(39);
  3290  001416  0E00               	movlw	0
  3291  001418  6E14               	movwf	GETxAPIxVAL@index+1,c
  3292  00141A  0E27               	movlw	39
  3293  00141C  6E13               	movwf	GETxAPIxVAL@index,c
  3294  00141E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3295  001422  C013  F07C         	movff	?_GETxAPIxVAL,_Train_Pos1_Temp
  3296  001426  C014  F07D         	movff	?_GETxAPIxVAL+1,_Train_Pos1_Temp+1
  3297                           
  3298                           ;State_Mchn.c: 429: Train_Pos2_Temp = GETxAPIxVAL(40);
  3299  00142A  0E00               	movlw	0
  3300  00142C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3301  00142E  0E28               	movlw	40
  3302  001430  6E13               	movwf	GETxAPIxVAL@index,c
  3303  001432  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3304  001436                     L14:
  3305  001436  C013  F07A         	movff	?_GETxAPIxVAL,_Train_Pos2_Temp
  3306  00143A  C014  F07B         	movff	?_GETxAPIxVAL+1,_Train_Pos2_Temp+1
  3307                           
  3308                           ;State_Mchn.c: 430: break;
  3309  00143E  D16E               	goto	l337
  3310  001440  0E00               	movlw	0
  3311  001442  0100               	movlb	0	; () banked
  3312  001444  6F8E               	movwf	_Switch_Init& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;State_Mchn.c: 433: Red_Led(1);
  3316  001446  0E01               	movlw	1
  3317  001448  EC70  F01E         	call	_Red_Led
  3318                           
  3319                           ;State_Mchn.c: 435: }
  3320                           
  3321                           ;State_Mchn.c: 434: break;
  3322  00144C  D167               	goto	l337
  3323  00144E                     l223:
  3324  00144E  0100               	movlb	0	; () banked
  3325  001450  518E               	movf	_Switch_Init& (0+255),w,b
  3326                           
  3327                           ; Switch size 1, requested type "space"
  3328                           ; Number of cases is 12, Range of values is 0 to 11
  3329                           ; switch strategies available:
  3330                           ; Name         Instructions Cycles
  3331                           ; simple_byte           37    19 (average)
  3332                           ;	Chosen strategy is simple_byte
  3333  001452  0A00               	xorlw	0	; case 0
  3334  001454  B4D8               	btfsc	status,2,c
  3335  001456  EFCE  F005         	goto	l224
  3336  00145A  0A01               	xorlw	1	; case 1
  3337  00145C  B4D8               	btfsc	status,2,c
  3338  00145E  EFF1  F005         	goto	l226
  3339  001462  0A03               	xorlw	3	; case 2
  3340  001464  B4D8               	btfsc	status,2,c
  3341  001466  D449               	goto	l233
  3342  001468  0A01               	xorlw	1	; case 3
  3343  00146A  B4D8               	btfsc	status,2,c
  3344  00146C  D48D               	goto	l235
  3345  00146E  0A07               	xorlw	7	; case 4
  3346  001470  B4D8               	btfsc	status,2,c
  3347  001472  D523               	goto	l243
  3348  001474  0A01               	xorlw	1	; case 5
  3349  001476  B4D8               	btfsc	status,2,c
  3350  001478  D5A1               	goto	l247
  3351  00147A  0A03               	xorlw	3	; case 6
  3352  00147C  B4D8               	btfsc	status,2,c
  3353  00147E  D5BD               	goto	l251
  3354  001480  0A01               	xorlw	1	; case 7
  3355  001482  B4D8               	btfsc	status,2,c
  3356  001484  D5C1               	goto	l252
  3357  001486  0A0F               	xorlw	15	; case 8
  3358  001488  B4D8               	btfsc	status,2,c
  3359  00148A  D60A               	goto	l261
  3360  00148C  0A01               	xorlw	1	; case 9
  3361  00148E  B4D8               	btfsc	status,2,c
  3362  001490  D735               	goto	l316
  3363  001492  0A03               	xorlw	3	; case 10
  3364  001494  B4D8               	btfsc	status,2,c
  3365  001496  D739               	goto	l317
  3366  001498  0A01               	xorlw	1	; case 11
  3367  00149A  B4D8               	btfsc	status,2,c
  3368  00149C  D786               	goto	l326
  3369  00149E  D7D0               	goto	l336
  3370  0014A0                     
  3371                           ; BSR set to: 0
  3372                           
  3373                           ; BSR set to: 0
  3374  0014A0  0E01               	movlw	1
  3375  0014A2  6FB1               	movwf	Train_Path@To& (0+255),b
  3376  0014A4  0E03               	movlw	3
  3377  0014A6  ECF2  F011         	call	_Train_Path
  3378  0014AA  0900               	iorlw	0
  3379  0014AC  A4D8               	btfss	status,2,c
  3380  0014AE  D089               	goto	l343
  3381                           
  3382                           ;State_Mchn.c: 442: {
  3383                           ;State_Mchn.c: 443: Switch_Program = 2;
  3384  0014B0  0E02               	movlw	2
  3385  0014B2  0100               	movlb	0	; () banked
  3386  0014B4  6F8D               	movwf	_Switch_Program& (0+255),b
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;State_Mchn.c: 444: EEPROMxSTORE();
  3390  0014B6  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3391  0014BA                     l9064:
  3392                           
  3393                           ;State_Mchn.c: 445: if(Stop_Program == 1)
  3394  0014BA  0100               	movlb	0	; () banked
  3395  0014BC  0589               	decf	_Stop_Program& (0+255),w,b
  3396  0014BE  A4D8               	btfss	status,2,c
  3397  0014C0  D080               	goto	l343
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;State_Mchn.c: 446: {
  3401                           ;State_Mchn.c: 447: Switch_Main = 1;
  3402  0014C2  0E01               	movlw	1
  3403  0014C4  6FC7               	movwf	_Switch_Main& (0+255),b
  3404                           
  3405                           ;State_Mchn.c: 448: Switch_Program = 0;
  3406  0014C6  0E00               	movlw	0
  3407  0014C8  6F8D               	movwf	_Switch_Program& (0+255),b
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;State_Mchn.c: 449: }
  3411                           ;State_Mchn.c: 450: }
  3412                           ;State_Mchn.c: 451: break;
  3413                           
  3414                           ; BSR set to: 0
  3415  0014CA  D07B               	goto	l343
  3416  0014CC                     
  3417                           ; BSR set to: 0
  3418                           
  3419                           ; BSR set to: 0
  3420  0014CC  0E03               	movlw	3
  3421  0014CE  6FB1               	movwf	Train_Path@To& (0+255),b
  3422  0014D0  0E02               	movlw	2
  3423  0014D2  ECF2  F011         	call	_Train_Path
  3424  0014D6  0900               	iorlw	0
  3425  0014D8  A4D8               	btfss	status,2,c
  3426  0014DA  D073               	goto	l343
  3427                           
  3428                           ;State_Mchn.c: 454: {
  3429                           ;State_Mchn.c: 455: Switch_Program = 3;
  3430  0014DC  0E03               	movlw	3
  3431  0014DE  0100               	movlb	0	; () banked
  3432  0014E0  6F8D               	movwf	_Switch_Program& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;State_Mchn.c: 456: EEPROMxSTORE();
  3436  0014E2  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3437  0014E6  D7E9               	goto	l9064
  3438  0014E8                     
  3439                           ; BSR set to: 0
  3440                           
  3441                           ; BSR set to: 0
  3442  0014E8  0E04               	movlw	4
  3443  0014EA  6FB1               	movwf	Train_Path@To& (0+255),b
  3444  0014EC  0E01               	movlw	1
  3445  0014EE  ECF2  F011         	call	_Train_Path
  3446  0014F2  0900               	iorlw	0
  3447  0014F4  A4D8               	btfss	status,2,c
  3448  0014F6  D065               	goto	l343
  3449                           
  3450                           ;State_Mchn.c: 466: {
  3451                           ;State_Mchn.c: 467: Switch_Program = 4;
  3452  0014F8  0E04               	movlw	4
  3453  0014FA  0100               	movlb	0	; () banked
  3454  0014FC  6F8D               	movwf	_Switch_Program& (0+255),b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;State_Mchn.c: 468: EEPROMxSTORE();
  3458  0014FE  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3459  001502  D7DB               	goto	l9064
  3460  001504                     
  3461                           ; BSR set to: 0
  3462                           
  3463                           ; BSR set to: 0
  3464  001504  0E01               	movlw	1
  3465  001506  6FB1               	movwf	Train_Path@To& (0+255),b
  3466  001508  0E03               	movlw	3
  3467  00150A  ECF2  F011         	call	_Train_Path
  3468  00150E  0900               	iorlw	0
  3469  001510  A4D8               	btfss	status,2,c
  3470  001512  D057               	goto	l343
  3471                           
  3472                           ;State_Mchn.c: 478: {
  3473                           ;State_Mchn.c: 479: Switch_Program = 5;
  3474  001514  0E05               	movlw	5
  3475  001516  0100               	movlb	0	; () banked
  3476  001518  6F8D               	movwf	_Switch_Program& (0+255),b
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;State_Mchn.c: 480: EEPROMxSTORE();
  3480  00151A  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3481  00151E  D7CD               	goto	l9064
  3482  001520                     
  3483                           ; BSR set to: 0
  3484                           
  3485                           ; BSR set to: 0
  3486  001520  0E02               	movlw	2
  3487  001522  6FB1               	movwf	Train_Path@To& (0+255),b
  3488  001524  0E04               	movlw	4
  3489  001526  ECF2  F011         	call	_Train_Path
  3490  00152A  0900               	iorlw	0
  3491  00152C  A4D8               	btfss	status,2,c
  3492  00152E  D049               	goto	l343
  3493                           
  3494                           ;State_Mchn.c: 490: {
  3495                           ;State_Mchn.c: 491: Switch_Program = 6;
  3496  001530  0E06               	movlw	6
  3497  001532  0100               	movlb	0	; () banked
  3498  001534  6F8D               	movwf	_Switch_Program& (0+255),b
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;State_Mchn.c: 492: EEPROMxSTORE();
  3502  001536  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3503  00153A  D7BF               	goto	l9064
  3504  00153C                     
  3505                           ; BSR set to: 0
  3506                           
  3507                           ; BSR set to: 0
  3508  00153C  0E04               	movlw	4
  3509  00153E  6FB1               	movwf	Train_Path@To& (0+255),b
  3510  001540  0E01               	movlw	1
  3511  001542  ECF2  F011         	call	_Train_Path
  3512  001546  0900               	iorlw	0
  3513  001548  A4D8               	btfss	status,2,c
  3514  00154A  D03B               	goto	l343
  3515                           
  3516                           ;State_Mchn.c: 502: {
  3517                           ;State_Mchn.c: 503: Switch_Program = 7;
  3518  00154C  0E07               	movlw	7
  3519  00154E  0100               	movlb	0	; () banked
  3520  001550  6F8D               	movwf	_Switch_Program& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;State_Mchn.c: 504: EEPROMxSTORE();
  3524  001552  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3525  001556  D7B1               	goto	l9064
  3526  001558                     
  3527                           ; BSR set to: 0
  3528                           
  3529                           ; BSR set to: 0
  3530  001558  0E03               	movlw	3
  3531  00155A  6FB1               	movwf	Train_Path@To& (0+255),b
  3532  00155C  0E02               	movlw	2
  3533  00155E  ECF2  F011         	call	_Train_Path
  3534  001562  0900               	iorlw	0
  3535  001564  A4D8               	btfss	status,2,c
  3536  001566  D02D               	goto	l343
  3537                           
  3538                           ;State_Mchn.c: 514: {
  3539                           ;State_Mchn.c: 515: Switch_Program = 8;
  3540  001568  0E08               	movlw	8
  3541  00156A  0100               	movlb	0	; () banked
  3542  00156C  6F8D               	movwf	_Switch_Program& (0+255),b
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;State_Mchn.c: 516: EEPROMxSTORE();
  3546  00156E  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3547  001572  D7A3               	goto	l9064
  3548  001574                     
  3549                           ; BSR set to: 0
  3550                           
  3551                           ; BSR set to: 0
  3552  001574  0E02               	movlw	2
  3553  001576  6FB1               	movwf	Train_Path@To& (0+255),b
  3554  001578  0E04               	movlw	4
  3555  00157A  ECF2  F011         	call	_Train_Path
  3556  00157E  0900               	iorlw	0
  3557  001580  A4D8               	btfss	status,2,c
  3558  001582  D01F               	goto	l343
  3559                           
  3560                           ;State_Mchn.c: 526: {
  3561                           ;State_Mchn.c: 527: Switch_Program = 1;
  3562  001584  0E01               	movlw	1
  3563  001586  0100               	movlb	0	; () banked
  3564  001588  6F8D               	movwf	_Switch_Program& (0+255),b
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;State_Mchn.c: 528: EEPROMxSTORE();
  3568  00158A  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3569  00158E  D795               	goto	l9064
  3570  001590                     
  3571                           ; BSR set to: 0
  3572                           
  3573                           ; BSR set to: 0
  3574  001590  518D               	movf	_Switch_Program& (0+255),w,b
  3575                           
  3576                           ; Switch size 1, requested type "space"
  3577                           ; Number of cases is 8, Range of values is 1 to 8
  3578                           ; switch strategies available:
  3579                           ; Name         Instructions Cycles
  3580                           ; simple_byte           25    13 (average)
  3581                           ;	Chosen strategy is simple_byte
  3582  001592  0A01               	xorlw	1	; case 1
  3583  001594  B4D8               	btfsc	status,2,c
  3584  001596  D784               	goto	l340
  3585  001598  0A03               	xorlw	3	; case 2
  3586  00159A  B4D8               	btfsc	status,2,c
  3587  00159C  D797               	goto	l344
  3588  00159E  0A01               	xorlw	1	; case 3
  3589  0015A0  B4D8               	btfsc	status,2,c
  3590  0015A2  D7A2               	goto	l347
  3591  0015A4  0A07               	xorlw	7	; case 4
  3592  0015A6  B4D8               	btfsc	status,2,c
  3593  0015A8  D7AD               	goto	l350
  3594  0015AA  0A01               	xorlw	1	; case 5
  3595  0015AC  B4D8               	btfsc	status,2,c
  3596  0015AE  D7B8               	goto	l353
  3597  0015B0  0A03               	xorlw	3	; case 6
  3598  0015B2  B4D8               	btfsc	status,2,c
  3599  0015B4  D7C3               	goto	l356
  3600  0015B6  0A01               	xorlw	1	; case 7
  3601  0015B8  B4D8               	btfsc	status,2,c
  3602  0015BA  D7CE               	goto	l359
  3603  0015BC  0A0F               	xorlw	15	; case 8
  3604  0015BE  B4D8               	btfsc	status,2,c
  3605  0015C0  D7D9               	goto	l362
  3606  0015C2                     l343:
  3607                           
  3608                           ;State_Mchn.c: 724: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3609                           
  3610                           ; BSR set to: 0
  3611  0015C2  0E00               	movlw	0
  3612  0015C4  6E14               	movwf	GETxAPIxVAL@index+1,c
  3613  0015C6  0E21               	movlw	33
  3614  0015C8  6E13               	movwf	GETxAPIxVAL@index,c
  3615  0015CA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3616  0015CE  5013               	movf	?_GETxAPIxVAL,w,c
  3617  0015D0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3618  0015D2  A4D8               	btfss	status,2,c
  3619  0015D4  D00A               	goto	u9430
  3620  0015D6  0E00               	movlw	0
  3621  0015D8  6E14               	movwf	GETxAPIxVAL@index+1,c
  3622  0015DA  0E47               	movlw	71
  3623  0015DC  6E13               	movwf	GETxAPIxVAL@index,c
  3624  0015DE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3625  0015E2  5013               	movf	?_GETxAPIxVAL,w,c
  3626  0015E4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3627  0015E6  B4D8               	btfsc	status,2,c
  3628  0015E8  D00D               	goto	l366
  3629  0015EA                     u9430:
  3630                           
  3631                           ;State_Mchn.c: 725: {
  3632                           ;State_Mchn.c: 726: Stop_Program = 1;
  3633  0015EA  0E01               	movlw	1
  3634  0015EC  0100               	movlb	0	; () banked
  3635  0015EE  6F89               	movwf	_Stop_Program& (0+255),b
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;State_Mchn.c: 727: SETxAPIxVALxNoxRET(71, 0);
  3639  0015F0  0E00               	movlw	0
  3640  0015F2  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  3641  0015F4  0E47               	movlw	71
  3642  0015F6  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  3643  0015F8  0E00               	movlw	0
  3644  0015FA  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  3645  0015FC  0E00               	movlw	0
  3646  0015FE  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  3647  001600  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  3648  001604                     l366:
  3649                           
  3650                           ;State_Mchn.c: 728: }
  3651                           ;State_Mchn.c: 730: if(Stop_Program == 1)
  3652  001604  0100               	movlb	0	; () banked
  3653  001606  0589               	decf	_Stop_Program& (0+255),w,b
  3654  001608  A4D8               	btfss	status,2,c
  3655  00160A  D088               	goto	l337
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;State_Mchn.c: 731: {
  3659                           ;State_Mchn.c: 732: Red_Led(2);
  3660  00160C  0E02               	movlw	2
  3661  00160E  EC70  F01E         	call	_Red_Led
  3662                           
  3663                           ;State_Mchn.c: 733: }
  3664                           ;State_Mchn.c: 734: break;
  3665  001612  D084               	goto	l337
  3666  001614  0E01               	movlw	1
  3667  001616  0100               	movlb	0	; () banked
  3668  001618  6FB1               	movwf	Train_Path@To& (0+255),b
  3669  00161A  0E03               	movlw	3
  3670  00161C  ECF2  F011         	call	_Train_Path
  3671  001620  0900               	iorlw	0
  3672  001622  A4D8               	btfss	status,2,c
  3673  001624  D046               	goto	l375
  3674                           
  3675                           ;State_Mchn.c: 740: {
  3676                           ;State_Mchn.c: 741: Switch_Program = 2;
  3677  001626  0E02               	movlw	2
  3678  001628  0100               	movlb	0	; () banked
  3679  00162A  6F8D               	movwf	_Switch_Program& (0+255),b
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;State_Mchn.c: 742: EEPROMxSTORE();
  3683  00162C  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3684  001630                     l9160:
  3685                           
  3686                           ;State_Mchn.c: 743: if(Stop_Program == 1)
  3687  001630  0100               	movlb	0	; () banked
  3688  001632  0589               	decf	_Stop_Program& (0+255),w,b
  3689  001634  A4D8               	btfss	status,2,c
  3690  001636  D03D               	goto	l375
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;State_Mchn.c: 744: {
  3694                           ;State_Mchn.c: 745: Switch_Main = 1;
  3695  001638  0E01               	movlw	1
  3696  00163A  6FC7               	movwf	_Switch_Main& (0+255),b
  3697                           
  3698                           ;State_Mchn.c: 746: Switch_Program = 0;
  3699  00163C  0E00               	movlw	0
  3700  00163E  6F8D               	movwf	_Switch_Program& (0+255),b
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;State_Mchn.c: 747: }
  3704                           ;State_Mchn.c: 748: }
  3705                           ;State_Mchn.c: 749: break;
  3706                           
  3707                           ; BSR set to: 0
  3708  001640  D038               	goto	l375
  3709  001642                     
  3710                           ; BSR set to: 0
  3711                           
  3712                           ; BSR set to: 0
  3713  001642  0E04               	movlw	4
  3714  001644  6FB1               	movwf	Train_Path@To& (0+255),b
  3715  001646  0E01               	movlw	1
  3716  001648  ECF2  F011         	call	_Train_Path
  3717  00164C  0900               	iorlw	0
  3718  00164E  A4D8               	btfss	status,2,c
  3719  001650  D030               	goto	l375
  3720                           
  3721                           ;State_Mchn.c: 752: {
  3722                           ;State_Mchn.c: 753: Switch_Program = 3;
  3723  001652  0E03               	movlw	3
  3724  001654  0100               	movlb	0	; () banked
  3725  001656  6F8D               	movwf	_Switch_Program& (0+255),b
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;State_Mchn.c: 754: EEPROMxSTORE();
  3729  001658  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3730  00165C  D7E9               	goto	l9160
  3731  00165E                     
  3732                           ; BSR set to: 0
  3733                           
  3734                           ; BSR set to: 0
  3735  00165E  0E02               	movlw	2
  3736  001660  6FB1               	movwf	Train_Path@To& (0+255),b
  3737  001662  0E04               	movlw	4
  3738  001664  ECF2  F011         	call	_Train_Path
  3739  001668  0900               	iorlw	0
  3740  00166A  A4D8               	btfss	status,2,c
  3741  00166C  D022               	goto	l375
  3742                           
  3743                           ;State_Mchn.c: 764: {
  3744                           ;State_Mchn.c: 765: Switch_Program = 4;
  3745  00166E  0E04               	movlw	4
  3746  001670  0100               	movlb	0	; () banked
  3747  001672  6F8D               	movwf	_Switch_Program& (0+255),b
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;State_Mchn.c: 766: EEPROMxSTORE();
  3751  001674  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3752  001678  D7DB               	goto	l9160
  3753  00167A                     
  3754                           ; BSR set to: 0
  3755                           
  3756                           ; BSR set to: 0
  3757  00167A  0E03               	movlw	3
  3758  00167C  6FB1               	movwf	Train_Path@To& (0+255),b
  3759  00167E  0E02               	movlw	2
  3760  001680  ECF2  F011         	call	_Train_Path
  3761  001684  0900               	iorlw	0
  3762  001686  A4D8               	btfss	status,2,c
  3763  001688  D014               	goto	l375
  3764                           
  3765                           ;State_Mchn.c: 776: {
  3766                           ;State_Mchn.c: 777: Switch_Program = 1;
  3767  00168A  0E01               	movlw	1
  3768  00168C  0100               	movlb	0	; () banked
  3769  00168E  6F8D               	movwf	_Switch_Program& (0+255),b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;State_Mchn.c: 778: EEPROMxSTORE();
  3773  001690  ECCF  F014         	call	_EEPROMxSTORE	;wreg free
  3774  001694  D7CD               	goto	l9160
  3775  001696                     
  3776                           ; BSR set to: 0
  3777  001696  0100               	movlb	0	; () banked
  3778  001698  518D               	movf	_Switch_Program& (0+255),w,b
  3779                           
  3780                           ; Switch size 1, requested type "space"
  3781                           ; Number of cases is 4, Range of values is 1 to 4
  3782                           ; switch strategies available:
  3783                           ; Name         Instructions Cycles
  3784                           ; simple_byte           13     7 (average)
  3785                           ;	Chosen strategy is simple_byte
  3786  00169A  0A01               	xorlw	1	; case 1
  3787  00169C  B4D8               	btfsc	status,2,c
  3788  00169E  D7BA               	goto	l372
  3789  0016A0  0A03               	xorlw	3	; case 2
  3790  0016A2  B4D8               	btfsc	status,2,c
  3791  0016A4  D7CE               	goto	l376
  3792  0016A6  0A01               	xorlw	1	; case 3
  3793  0016A8  B4D8               	btfsc	status,2,c
  3794  0016AA  D7D9               	goto	l379
  3795  0016AC  0A07               	xorlw	7	; case 4
  3796  0016AE  B4D8               	btfsc	status,2,c
  3797  0016B0  D7E4               	goto	l382
  3798  0016B2                     l375:
  3799                           
  3800                           ;State_Mchn.c: 972: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3801                           
  3802                           ; BSR set to: 0
  3803  0016B2  0E00               	movlw	0
  3804  0016B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  3805  0016B6  0E21               	movlw	33
  3806  0016B8  6E13               	movwf	GETxAPIxVAL@index,c
  3807  0016BA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3808  0016BE  5013               	movf	?_GETxAPIxVAL,w,c
  3809  0016C0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3810  0016C2  A4D8               	btfss	status,2,c
  3811  0016C4  D00A               	goto	u9540
  3812  0016C6  0E00               	movlw	0
  3813  0016C8  6E14               	movwf	GETxAPIxVAL@index+1,c
  3814  0016CA  0E47               	movlw	71
  3815  0016CC  6E13               	movwf	GETxAPIxVAL@index,c
  3816  0016CE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  3817  0016D2  5013               	movf	?_GETxAPIxVAL,w,c
  3818  0016D4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3819  0016D6  B4D8               	btfsc	status,2,c
  3820  0016D8  D00D               	goto	l386
  3821  0016DA                     u9540:
  3822                           
  3823                           ;State_Mchn.c: 973: {
  3824                           ;State_Mchn.c: 974: Stop_Program = 1;
  3825  0016DA  0E01               	movlw	1
  3826  0016DC  0100               	movlb	0	; () banked
  3827  0016DE  6F89               	movwf	_Stop_Program& (0+255),b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;State_Mchn.c: 975: SETxAPIxVAL(71, 0);
  3831  0016E0  0E00               	movlw	0
  3832  0016E2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3833  0016E4  0E47               	movlw	71
  3834  0016E6  6E19               	movwf	SETxAPIxVAL@index,c
  3835  0016E8  0E00               	movlw	0
  3836  0016EA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3837  0016EC  0E00               	movlw	0
  3838  0016EE  6E1B               	movwf	SETxAPIxVAL@value,c
  3839  0016F0  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  3840  0016F4                     l386:
  3841                           
  3842                           ;State_Mchn.c: 976: }
  3843                           ;State_Mchn.c: 978: if(Stop_Program == 1)
  3844  0016F4  0100               	movlb	0	; () banked
  3845  0016F6  0589               	decf	_Stop_Program& (0+255),w,b
  3846  0016F8  A4D8               	btfss	status,2,c
  3847  0016FA  D010               	goto	l337
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;State_Mchn.c: 979: {
  3851                           ;State_Mchn.c: 980: Red_Led(2);
  3852  0016FC  0E02               	movlw	2
  3853  0016FE  EC70  F01E         	call	_Red_Led
  3854                           
  3855                           ;State_Mchn.c: 985: }
  3856                           
  3857                           ;State_Mchn.c: 984: default : break;
  3858                           
  3859                           ;State_Mchn.c: 981: }
  3860                           ;State_Mchn.c: 982: break;
  3861  001702  D00C               	goto	l337
  3862  001704                     l197:
  3863  001704  0100               	movlb	0	; () banked
  3864  001706  51C7               	movf	_Switch_Main& (0+255),w,b
  3865                           
  3866                           ; Switch size 1, requested type "space"
  3867                           ; Number of cases is 3, Range of values is 1 to 3
  3868                           ; switch strategies available:
  3869                           ; Name         Instructions Cycles
  3870                           ; simple_byte           10     6 (average)
  3871                           ;	Chosen strategy is simple_byte
  3872  001708  0A01               	xorlw	1	; case 1
  3873  00170A  B4D8               	btfsc	status,2,c
  3874  00170C  EF77  F004         	goto	l198
  3875  001710  0A03               	xorlw	3	; case 2
  3876  001712  B4D8               	btfsc	status,2,c
  3877  001714  D73D               	goto	l339
  3878  001716  0A01               	xorlw	1	; case 3
  3879  001718  B4D8               	btfsc	status,2,c
  3880  00171A  D7BD               	goto	l371
  3881  00171C                     l337:
  3882                           
  3883                           ;State_Mchn.c: 986: SETxAPIxVAL(63, Switch_Main);
  3884                           
  3885                           ; BSR set to: 0
  3886  00171C  0E00               	movlw	0
  3887  00171E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3888  001720  0E3F               	movlw	63
  3889  001722  6E19               	movwf	SETxAPIxVAL@index,c
  3890  001724  C0C7  F01B         	movff	_Switch_Main,SETxAPIxVAL@value
  3891  001728  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3892  00172A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  3893                           
  3894                           ;State_Mchn.c: 987: SETxAPIxVAL(80, Switch_Program);
  3895  00172E  0E00               	movlw	0
  3896  001730  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3897  001732  0E50               	movlw	80
  3898  001734  6E19               	movwf	SETxAPIxVAL@index,c
  3899  001736  C08D  F01B         	movff	_Switch_Program,SETxAPIxVAL@value
  3900  00173A  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3901  00173C  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  3902  001740  0012               	return		;funcret
  3903  001742                     __end_of_Update_StateMchn:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           postinc0	equ	0xFEE
  3910                           wreg	equ	0xFE8
  3911                           postdec1	equ	0xFE5
  3912                           fsr1h	equ	0xFE2
  3913                           fsr1l	equ	0xFE1
  3914                           status	equ	0xFD8
  3915                           
  3916 ;; *************** function _Train_Path *****************
  3917 ;; Defined at:
  3918 ;;		line 1005 in file "../State_Mchn.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  From            1    wreg     unsigned char 
  3921 ;;  To              1   23[BANK0 ] unsigned char 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  From            1   24[BANK0 ] unsigned char 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      unsigned char 
  3926 ;; Registers used:
  3927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3933 ;;      Params:         0       1       0       0       0       0       0       0       0
  3934 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3936 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3937 ;;Total ram usage:        2 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    7
  3940 ;; This function calls:
  3941 ;;		_GETxAPIxVAL
  3942 ;;		_Junction
  3943 ;;		_Left_Mountain_From_The_Left
  3944 ;;		_Left_Mountain_From_The_Right
  3945 ;;		_Right_Mountain_From_The_Left
  3946 ;;		_Right_Mountain_From_The_Right
  3947 ;;		_SETxAPIxVAL
  3948 ;;		_Train_Move_Left_Brake
  3949 ;;		_Train_Move_Left_Start
  3950 ;;		_Train_Move_Right_Brake
  3951 ;;		_Train_Move_Right_Start
  3952 ;; This function is called by:
  3953 ;;		_Update_StateMchn
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           	psect	text2
  3958  0023E4                     __ptext2:
  3959                           	opt stack 0
  3960  0023E4                     _Train_Path:
  3961                           	opt stack 22
  3962                           
  3963                           ;incstack = 0
  3964                           ;Train_Path@From stored from wreg
  3965  0023E4  0100               	movlb	0	; () banked
  3966  0023E6  6FB2               	movwf	Train_Path@From& (0+255),b
  3967                           
  3968                           ;State_Mchn.c: 1007: static char Return_Val = 1;
  3969                           ;State_Mchn.c: 1009: SETxAPIxVAL(61, From);
  3970  0023E8  0E00               	movlw	0
  3971  0023EA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3972  0023EC  0E3D               	movlw	61
  3973  0023EE  6E19               	movwf	SETxAPIxVAL@index,c
  3974  0023F0  C0B2  F01B         	movff	Train_Path@From,SETxAPIxVAL@value
  3975  0023F4  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3976  0023F6  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  3977                           
  3978                           ;State_Mchn.c: 1010: SETxAPIxVAL(62, To);
  3979  0023FA  0E00               	movlw	0
  3980  0023FC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3981  0023FE  0E3E               	movlw	62
  3982  002400  6E19               	movwf	SETxAPIxVAL@index,c
  3983  002402  C0B1  F01B         	movff	Train_Path@To,SETxAPIxVAL@value
  3984  002406  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3985  002408  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  3986                           
  3987                           ;State_Mchn.c: 1012: switch(Switch_Train_Path)
  3988  00240C  D1AC               	goto	l396
  3989  00240E  0E00               	movlw	0
  3990  002410  6E1F               	movwf	Junction@Straight_Bend,c
  3991  002412  0E01               	movlw	1
  3992  002414  ECDF  F013         	call	_Junction
  3993  002418  0900               	iorlw	0
  3994  00241A  B4D8               	btfsc	status,2,c
  3995  00241C  D018               	goto	u8140
  3996  00241E                     l400:
  3997                           
  3998                           ;State_Mchn.c: 1020: }
  3999                           ;State_Mchn.c: 1021: Return_Val = 1;
  4000  00241E  0E01               	movlw	1
  4001  002420  0100               	movlb	0	; () banked
  4002  002422                     L36:
  4003  002422  6FC6               	movwf	Train_Path@Return_Val& (0+255),b
  4004                           
  4005                           ;State_Mchn.c: 1022: break;
  4006  002424  D1CA               	goto	l409
  4007  002426                     
  4008                           ; BSR set to: 0
  4009                           
  4010                           ; BSR set to: 0
  4011  002426  0E01               	movlw	1
  4012  002428  6E1F               	movwf	Junction@Straight_Bend,c
  4013  00242A  0E01               	movlw	1
  4014  00242C  ECDF  F013         	call	_Junction
  4015  002430  D7F3               	goto	L53
  4016  002432                     
  4017                           ; BSR set to: 0
  4018                           
  4019                           ; BSR set to: 0
  4020  002432  0E01               	movlw	1
  4021  002434  6E1F               	movwf	Junction@Straight_Bend,c
  4022  002436  0E00               	movlw	0
  4023  002438  ECDF  F013         	call	_Junction
  4024  00243C  D7ED               	goto	L53
  4025  00243E                     
  4026                           ; BSR set to: 0
  4027                           
  4028                           ; BSR set to: 0
  4029  00243E  0E00               	movlw	0
  4030  002440  6E1F               	movwf	Junction@Straight_Bend,c
  4031  002442  0E00               	movlw	0
  4032  002444  ECDF  F013         	call	_Junction
  4033  002448  0900               	iorlw	0
  4034  00244A  A4D8               	btfss	status,2,c
  4035  00244C  D7E8               	goto	l400
  4036  00244E                     u8140:
  4037                           
  4038                           ;State_Mchn.c: 1038: {
  4039                           ;State_Mchn.c: 1039: Switch_Train_Path = 1;
  4040  00244E  0E01               	movlw	1
  4041  002450  D015               	goto	L37
  4042  002452                     
  4043                           ; BSR set to: 0
  4044  002452  0100               	movlb	0	; () banked
  4045  002454  51B2               	movf	Train_Path@From& (0+255),w,b
  4046                           
  4047                           ; Switch size 1, requested type "space"
  4048                           ; Number of cases is 4, Range of values is 1 to 4
  4049                           ; switch strategies available:
  4050                           ; Name         Instructions Cycles
  4051                           ; simple_byte           13     7 (average)
  4052                           ;	Chosen strategy is simple_byte
  4053  002456  0A01               	xorlw	1	; case 1
  4054  002458  B4D8               	btfsc	status,2,c
  4055  00245A  D7EB               	goto	l404
  4056  00245C  0A03               	xorlw	3	; case 2
  4057  00245E  B4D8               	btfsc	status,2,c
  4058  002460  D7EE               	goto	l406
  4059  002462  0A01               	xorlw	1	; case 3
  4060  002464  B4D8               	btfsc	status,2,c
  4061  002466  D7D3               	goto	l399
  4062  002468  0A07               	xorlw	7	; case 4
  4063  00246A  B4D8               	btfsc	status,2,c
  4064  00246C  D7DC               	goto	l402
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;State_Mchn.c: 1046: break;
  4068  00246E  D1A5               	goto	l409
  4069  002470                     
  4070                           ; BSR set to: 0
  4071                           
  4072                           ; BSR set to: 0
  4073  002470  0E00               	movlw	0
  4074  002472  6E1F               	movwf	Junction@Straight_Bend,c
  4075  002474  0E01               	movlw	1
  4076  002476  ECDF  F013         	call	_Junction
  4077  00247A  D016               	goto	L39
  4078  00247C                     L37:
  4079  00247C  0100               	movlb	0	; () banked
  4080  00247E  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  4081                           
  4082                           ;State_Mchn.c: 1053: Return_Val = 1;
  4083  002480  0E01               	movlw	1
  4084  002482  6FC6               	movwf	Train_Path@Return_Val& (0+255),b
  4085  002484  D7CC               	goto	l400
  4086  002486                     
  4087                           ; BSR set to: 0
  4088                           
  4089                           ; BSR set to: 0
  4090  002486  0E01               	movlw	1
  4091  002488  6E1F               	movwf	Junction@Straight_Bend,c
  4092  00248A  0E01               	movlw	1
  4093  00248C  ECDF  F013         	call	_Junction
  4094  002490  D00B               	goto	L39
  4095  002492                     
  4096                           ; BSR set to: 0
  4097                           
  4098                           ; BSR set to: 0
  4099  002492  0E01               	movlw	1
  4100  002494  6E1F               	movwf	Junction@Straight_Bend,c
  4101  002496  0E00               	movlw	0
  4102  002498  ECDF  F013         	call	_Junction
  4103  00249C  D005               	goto	L39
  4104  00249E                     
  4105                           ; BSR set to: 0
  4106                           
  4107                           ; BSR set to: 0
  4108  00249E  0E00               	movlw	0
  4109  0024A0  6E1F               	movwf	Junction@Straight_Bend,c
  4110  0024A2  0E00               	movlw	0
  4111  0024A4  ECDF  F013         	call	_Junction
  4112  0024A8                     L39:
  4113  0024A8  0900               	iorlw	0
  4114  0024AA  A4D8               	btfss	status,2,c
  4115  0024AC  D7B8               	goto	l400
  4116                           
  4117                           ;State_Mchn.c: 1072: {
  4118                           ;State_Mchn.c: 1073: Switch_Train_Path = 2;
  4119  0024AE  0E02               	movlw	2
  4120  0024B0  D7E5               	goto	L37
  4121  0024B2                     
  4122                           ; BSR set to: 0
  4123                           
  4124                           ; BSR set to: 0
  4125  0024B2  51B1               	movf	Train_Path@To& (0+255),w,b
  4126                           
  4127                           ; Switch size 1, requested type "space"
  4128                           ; Number of cases is 4, Range of values is 1 to 4
  4129                           ; switch strategies available:
  4130                           ; Name         Instructions Cycles
  4131                           ; simple_byte           13     7 (average)
  4132                           ;	Chosen strategy is simple_byte
  4133  0024B4  0A01               	xorlw	1	; case 1
  4134  0024B6  B4D8               	btfsc	status,2,c
  4135  0024B8  D7EC               	goto	l417
  4136  0024BA  0A03               	xorlw	3	; case 2
  4137  0024BC  B4D8               	btfsc	status,2,c
  4138  0024BE  D7EF               	goto	l419
  4139  0024C0  0A01               	xorlw	1	; case 3
  4140  0024C2  B4D8               	btfsc	status,2,c
  4141  0024C4  D7D5               	goto	l412
  4142  0024C6  0A07               	xorlw	7	; case 4
  4143  0024C8  B4D8               	btfsc	status,2,c
  4144  0024CA  D7DD               	goto	l415
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;State_Mchn.c: 1080: break;
  4148  0024CC  D176               	goto	l409
  4149  0024CE                     
  4150                           ; BSR set to: 0
  4151                           
  4152                           ; BSR set to: 0
  4153  0024CE  EC10  F018         	call	_Train_Move_Right_Start	;wreg free
  4154  0024D2  D008               	goto	L42
  4155  0024D4                     
  4156                           ; BSR set to: 0
  4157                           
  4158                           ; BSR set to: 0
  4159  0024D4  EC10  F018         	call	_Train_Move_Right_Start	;wreg free
  4160  0024D8  D005               	goto	L42
  4161  0024DA                     
  4162                           ; BSR set to: 0
  4163                           
  4164                           ; BSR set to: 0
  4165  0024DA  EC74  F017         	call	_Train_Move_Left_Start	;wreg free
  4166  0024DE  D002               	goto	L42
  4167  0024E0                     
  4168                           ; BSR set to: 0
  4169                           
  4170                           ; BSR set to: 0
  4171  0024E0  EC74  F017         	call	_Train_Move_Left_Start	;wreg free
  4172  0024E4                     L42:
  4173  0024E4  0900               	iorlw	0
  4174  0024E6  A4D8               	btfss	status,2,c
  4175  0024E8  D79A               	goto	l400
  4176                           
  4177                           ;State_Mchn.c: 1106: {
  4178                           ;State_Mchn.c: 1107: Switch_Train_Path = 3;
  4179  0024EA  0E03               	movlw	3
  4180  0024EC  D7C7               	goto	L37
  4181  0024EE                     
  4182                           ; BSR set to: 0
  4183                           
  4184                           ; BSR set to: 0
  4185  0024EE  51B1               	movf	Train_Path@To& (0+255),w,b
  4186                           
  4187                           ; Switch size 1, requested type "space"
  4188                           ; Number of cases is 4, Range of values is 1 to 4
  4189                           ; switch strategies available:
  4190                           ; Name         Instructions Cycles
  4191                           ; simple_byte           13     7 (average)
  4192                           ;	Chosen strategy is simple_byte
  4193  0024F0  0A01               	xorlw	1	; case 1
  4194  0024F2  B4D8               	btfsc	status,2,c
  4195  0024F4  D7F2               	goto	l429
  4196  0024F6  0A03               	xorlw	3	; case 2
  4197  0024F8  B4D8               	btfsc	status,2,c
  4198  0024FA  D7F2               	goto	l431
  4199  0024FC  0A01               	xorlw	1	; case 3
  4200  0024FE  B4D8               	btfsc	status,2,c
  4201  002500  D7E6               	goto	l424
  4202  002502  0A07               	xorlw	7	; case 4
  4203  002504  B4D8               	btfsc	status,2,c
  4204  002506  D7E6               	goto	l427
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;State_Mchn.c: 1114: break;
  4208  002508  D158               	goto	l409
  4209  00250A                     
  4210                           ; BSR set to: 0
  4211                           
  4212                           ; BSR set to: 0
  4213  00250A  0E00               	movlw	0
  4214  00250C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4215  00250E  0E1C               	movlw	28
  4216  002510  6E13               	movwf	GETxAPIxVAL@index,c
  4217  002512  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4218  002516  0413               	decf	?_GETxAPIxVAL,w,c
  4219  002518  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4220  00251A  B4D8               	btfsc	status,2,c
  4221  00251C  D09B               	goto	u8380
  4222                           
  4223                           ;State_Mchn.c: 1121: else if(GETxAPIxVAL(41) == 1){
  4224                           
  4225                           ; BSR set to: 0
  4226                           
  4227                           ;State_Mchn.c: 1120: }
  4228                           
  4229                           ;State_Mchn.c: 1119: Switch_Train_Path = 4;
  4230  00251E  0E00               	movlw	0
  4231  002520  6E14               	movwf	GETxAPIxVAL@index+1,c
  4232  002522  0E29               	movlw	41
  4233  002524  6E13               	movwf	GETxAPIxVAL@index,c
  4234  002526  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4235  00252A  0413               	decf	?_GETxAPIxVAL,w,c
  4236  00252C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4237  00252E  B4D8               	btfsc	status,2,c
  4238  002530  D032               	goto	u8290
  4239                           
  4240                           ;State_Mchn.c: 1124: else if(GETxAPIxVAL(42) == 1){
  4241                           
  4242                           ; BSR set to: 0
  4243                           
  4244                           ;State_Mchn.c: 1123: }
  4245                           
  4246                           ;State_Mchn.c: 1122: Switch_Train_Path = 5;
  4247  002532  0E00               	movlw	0
  4248  002534  6E14               	movwf	GETxAPIxVAL@index+1,c
  4249  002536  0E2A               	movlw	42
  4250  002538  6E13               	movwf	GETxAPIxVAL@index,c
  4251  00253A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4252  00253E  0413               	decf	?_GETxAPIxVAL,w,c
  4253  002540  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4254  002542  B4D8               	btfsc	status,2,c
  4255  002544  D034               	goto	u8300
  4256                           
  4257                           ;State_Mchn.c: 1127: else if(GETxAPIxVAL(44) == 1){
  4258                           
  4259                           ; BSR set to: 0
  4260                           
  4261                           ;State_Mchn.c: 1126: }
  4262                           
  4263                           ;State_Mchn.c: 1125: Switch_Train_Path = 6;
  4264  002546  0E00               	movlw	0
  4265  002548  6E14               	movwf	GETxAPIxVAL@index+1,c
  4266  00254A  0E2C               	movlw	44
  4267  00254C  6E13               	movwf	GETxAPIxVAL@index,c
  4268  00254E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4269  002552  0413               	decf	?_GETxAPIxVAL,w,c
  4270  002554  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4271  002556  B4D8               	btfsc	status,2,c
  4272  002558  D036               	goto	u8310
  4273                           
  4274                           ;State_Mchn.c: 1130: else if(GETxAPIxVAL(43) == 1){
  4275                           
  4276                           ; BSR set to: 0
  4277                           
  4278                           ;State_Mchn.c: 1129: }
  4279                           
  4280                           ;State_Mchn.c: 1128: Switch_Train_Path = 7;
  4281  00255A  0E00               	movlw	0
  4282  00255C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4283  00255E  0E2B               	movlw	43
  4284  002560  6E13               	movwf	GETxAPIxVAL@index,c
  4285  002562  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4286  002566  D037               	goto	L90
  4287  002568                     L23:
  4288  002568  0100               	movlb	0	; () banked
  4289  00256A  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  4290                           
  4291                           ; BSR set to: 0
  4292                           
  4293                           ; BSR set to: 0
  4294                           
  4295                           ; BSR set to: 0
  4296                           
  4297                           ; BSR set to: 0
  4298  00256C  D758               	goto	l400
  4299  00256E                     
  4300                           ; BSR set to: 0
  4301                           
  4302                           ; BSR set to: 0
  4303  00256E  0E00               	movlw	0
  4304  002570  6E14               	movwf	GETxAPIxVAL@index+1,c
  4305  002572  0E1D               	movlw	29
  4306  002574  6E13               	movwf	GETxAPIxVAL@index,c
  4307  002576  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4308  00257A  0413               	decf	?_GETxAPIxVAL,w,c
  4309  00257C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4310  00257E  B4D8               	btfsc	status,2,c
  4311  002580  D069               	goto	u8380
  4312                           
  4313                           ;State_Mchn.c: 1138: else if(GETxAPIxVAL(41) == 1){
  4314                           
  4315                           ; BSR set to: 0
  4316                           
  4317                           ;State_Mchn.c: 1137: }
  4318                           
  4319                           ;State_Mchn.c: 1136: Switch_Train_Path = 4;
  4320  002582  0E00               	movlw	0
  4321  002584  6E14               	movwf	GETxAPIxVAL@index+1,c
  4322  002586  0E29               	movlw	41
  4323  002588  6E13               	movwf	GETxAPIxVAL@index,c
  4324  00258A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4325  00258E  0413               	decf	?_GETxAPIxVAL,w,c
  4326  002590  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4327  002592  A4D8               	btfss	status,2,c
  4328  002594  D002               	goto	l450
  4329  002596                     u8290:
  4330                           
  4331                           ;State_Mchn.c: 1139: Switch_Train_Path = 5;
  4332  002596  0E05               	movlw	5
  4333  002598  D7E7               	goto	L23
  4334  00259A                     l450:
  4335                           
  4336                           ;State_Mchn.c: 1141: else if(GETxAPIxVAL(42) == 1){
  4337                           
  4338                           ; BSR set to: 0
  4339  00259A  0E00               	movlw	0
  4340  00259C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4341  00259E  0E2A               	movlw	42
  4342  0025A0  6E13               	movwf	GETxAPIxVAL@index,c
  4343  0025A2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4344  0025A6  0413               	decf	?_GETxAPIxVAL,w,c
  4345  0025A8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4346  0025AA  A4D8               	btfss	status,2,c
  4347  0025AC  D002               	goto	l452
  4348  0025AE                     u8300:
  4349                           
  4350                           ;State_Mchn.c: 1142: Switch_Train_Path = 6;
  4351  0025AE  0E06               	movlw	6
  4352  0025B0  D7DB               	goto	L23
  4353  0025B2                     l452:
  4354                           
  4355                           ;State_Mchn.c: 1144: else if(GETxAPIxVAL(44) == 1){
  4356                           
  4357                           ; BSR set to: 0
  4358  0025B2  0E00               	movlw	0
  4359  0025B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  4360  0025B6  0E2C               	movlw	44
  4361  0025B8  6E13               	movwf	GETxAPIxVAL@index,c
  4362  0025BA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4363  0025BE  0413               	decf	?_GETxAPIxVAL,w,c
  4364  0025C0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4365  0025C2  A4D8               	btfss	status,2,c
  4366  0025C4  D002               	goto	l454
  4367  0025C6                     u8310:
  4368                           
  4369                           ;State_Mchn.c: 1145: Switch_Train_Path = 7;
  4370  0025C6  0E07               	movlw	7
  4371  0025C8  D7CF               	goto	L23
  4372  0025CA                     l454:
  4373                           
  4374                           ;State_Mchn.c: 1147: else if(GETxAPIxVAL(43) == 1){
  4375                           
  4376                           ; BSR set to: 0
  4377  0025CA  0E00               	movlw	0
  4378  0025CC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4379  0025CE  0E2B               	movlw	43
  4380  0025D0  6E13               	movwf	GETxAPIxVAL@index,c
  4381  0025D2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4382  0025D6                     L90:
  4383  0025D6  0413               	decf	?_GETxAPIxVAL,w,c
  4384  0025D8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4385  0025DA  A4D8               	btfss	status,2,c
  4386  0025DC  D720               	goto	l400
  4387                           
  4388                           ;State_Mchn.c: 1148: Switch_Train_Path = 8;
  4389  0025DE  0E08               	movlw	8
  4390  0025E0  D7C3               	goto	L23
  4391  0025E2                     
  4392                           ; BSR set to: 0
  4393                           
  4394                           ; BSR set to: 0
  4395  0025E2  0E00               	movlw	0
  4396  0025E4  6E14               	movwf	GETxAPIxVAL@index+1,c
  4397  0025E6  0E1E               	movlw	30
  4398  0025E8  6E13               	movwf	GETxAPIxVAL@index,c
  4399  0025EA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4400  0025EE  0413               	decf	?_GETxAPIxVAL,w,c
  4401  0025F0  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4402  0025F2  B4D8               	btfsc	status,2,c
  4403  0025F4  D02F               	goto	u8380
  4404                           
  4405                           ;State_Mchn.c: 1156: else if(GETxAPIxVAL(41) == 1){
  4406                           
  4407                           ; BSR set to: 0
  4408                           
  4409                           ;State_Mchn.c: 1155: }
  4410                           
  4411                           ;State_Mchn.c: 1153: {
  4412                           ;State_Mchn.c: 1154: Switch_Train_Path = 4;
  4413  0025F6  0E00               	movlw	0
  4414  0025F8  6E14               	movwf	GETxAPIxVAL@index+1,c
  4415  0025FA  0E29               	movlw	41
  4416  0025FC  6E13               	movwf	GETxAPIxVAL@index,c
  4417  0025FE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4418  002602  0413               	decf	?_GETxAPIxVAL,w,c
  4419  002604  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4420  002606  B4D8               	btfsc	status,2,c
  4421  002608  D031               	goto	u8390
  4422                           
  4423                           ;State_Mchn.c: 1159: else if(GETxAPIxVAL(42) == 1){
  4424                           
  4425                           ; BSR set to: 0
  4426                           
  4427                           ;State_Mchn.c: 1158: }
  4428                           
  4429                           ;State_Mchn.c: 1157: Switch_Train_Path = 12;
  4430  00260A  0E00               	movlw	0
  4431  00260C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4432  00260E  0E2A               	movlw	42
  4433  002610  6E13               	movwf	GETxAPIxVAL@index,c
  4434  002612  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4435  002616  0413               	decf	?_GETxAPIxVAL,w,c
  4436  002618  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4437  00261A  B4D8               	btfsc	status,2,c
  4438  00261C  D033               	goto	u8400
  4439                           
  4440                           ;State_Mchn.c: 1162: else if(GETxAPIxVAL(44) == 1){
  4441                           
  4442                           ; BSR set to: 0
  4443                           
  4444                           ;State_Mchn.c: 1161: }
  4445                           
  4446                           ;State_Mchn.c: 1160: Switch_Train_Path = 11;
  4447  00261E  0E00               	movlw	0
  4448  002620  6E14               	movwf	GETxAPIxVAL@index+1,c
  4449  002622  0E2C               	movlw	44
  4450  002624  6E13               	movwf	GETxAPIxVAL@index,c
  4451  002626  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4452  00262A  0413               	decf	?_GETxAPIxVAL,w,c
  4453  00262C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4454  00262E  B4D8               	btfsc	status,2,c
  4455  002630  D035               	goto	u8410
  4456                           
  4457                           ;State_Mchn.c: 1165: else if(GETxAPIxVAL(43) == 1){
  4458                           
  4459                           ; BSR set to: 0
  4460                           
  4461                           ;State_Mchn.c: 1164: }
  4462                           
  4463                           ;State_Mchn.c: 1163: Switch_Train_Path = 10;
  4464  002632  0E00               	movlw	0
  4465  002634  6E14               	movwf	GETxAPIxVAL@index+1,c
  4466  002636  0E2B               	movlw	43
  4467  002638  6E13               	movwf	GETxAPIxVAL@index,c
  4468  00263A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4469  00263E  D036               	goto	L91
  4470  002640                     
  4471                           ; BSR set to: 0
  4472                           
  4473                           ; BSR set to: 0
  4474  002640  0E00               	movlw	0
  4475  002642  6E14               	movwf	GETxAPIxVAL@index+1,c
  4476  002644  0E1F               	movlw	31
  4477  002646  6E13               	movwf	GETxAPIxVAL@index,c
  4478  002648  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4479  00264C  0413               	decf	?_GETxAPIxVAL,w,c
  4480  00264E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4481  002650  A4D8               	btfss	status,2,c
  4482  002652  D002               	goto	l468
  4483  002654                     u8380:
  4484                           
  4485                           ;State_Mchn.c: 1171: {
  4486                           ;State_Mchn.c: 1172: Switch_Train_Path = 4;
  4487  002654  0E04               	movlw	4
  4488  002656  D788               	goto	L23
  4489  002658                     l468:
  4490                           
  4491                           ;State_Mchn.c: 1174: else if(GETxAPIxVAL(41) == 1){
  4492                           
  4493                           ; BSR set to: 0
  4494  002658  0E00               	movlw	0
  4495  00265A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4496  00265C  0E29               	movlw	41
  4497  00265E  6E13               	movwf	GETxAPIxVAL@index,c
  4498  002660  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4499  002664  0413               	decf	?_GETxAPIxVAL,w,c
  4500  002666  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4501  002668  A4D8               	btfss	status,2,c
  4502  00266A  D002               	goto	l470
  4503  00266C                     u8390:
  4504                           
  4505                           ;State_Mchn.c: 1175: Switch_Train_Path = 12;
  4506  00266C  0E0C               	movlw	12
  4507  00266E  D77C               	goto	L23
  4508  002670                     l470:
  4509                           
  4510                           ;State_Mchn.c: 1177: else if(GETxAPIxVAL(42) == 1){
  4511                           
  4512                           ; BSR set to: 0
  4513  002670  0E00               	movlw	0
  4514  002672  6E14               	movwf	GETxAPIxVAL@index+1,c
  4515  002674  0E2A               	movlw	42
  4516  002676  6E13               	movwf	GETxAPIxVAL@index,c
  4517  002678  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4518  00267C  0413               	decf	?_GETxAPIxVAL,w,c
  4519  00267E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4520  002680  A4D8               	btfss	status,2,c
  4521  002682  D002               	goto	l472
  4522  002684                     u8400:
  4523                           
  4524                           ;State_Mchn.c: 1178: Switch_Train_Path = 11;
  4525  002684  0E0B               	movlw	11
  4526  002686  D770               	goto	L23
  4527  002688                     l472:
  4528                           
  4529                           ;State_Mchn.c: 1180: else if(GETxAPIxVAL(44) == 1){
  4530                           
  4531                           ; BSR set to: 0
  4532  002688  0E00               	movlw	0
  4533  00268A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4534  00268C  0E2C               	movlw	44
  4535  00268E  6E13               	movwf	GETxAPIxVAL@index,c
  4536  002690  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4537  002694  0413               	decf	?_GETxAPIxVAL,w,c
  4538  002696  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4539  002698  A4D8               	btfss	status,2,c
  4540  00269A  D002               	goto	l474
  4541  00269C                     u8410:
  4542                           
  4543                           ;State_Mchn.c: 1181: Switch_Train_Path = 10;
  4544  00269C  0E0A               	movlw	10
  4545  00269E  D764               	goto	L23
  4546  0026A0                     l474:
  4547                           
  4548                           ;State_Mchn.c: 1183: else if(GETxAPIxVAL(43) == 1){
  4549                           
  4550                           ; BSR set to: 0
  4551  0026A0  0E00               	movlw	0
  4552  0026A2  6E14               	movwf	GETxAPIxVAL@index+1,c
  4553  0026A4  0E2B               	movlw	43
  4554  0026A6  6E13               	movwf	GETxAPIxVAL@index,c
  4555  0026A8  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4556  0026AC                     L91:
  4557  0026AC  0413               	decf	?_GETxAPIxVAL,w,c
  4558  0026AE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4559  0026B0  A4D8               	btfss	status,2,c
  4560  0026B2  D6B5               	goto	l400
  4561                           
  4562                           ;State_Mchn.c: 1184: Switch_Train_Path = 9;
  4563  0026B4  0E09               	movlw	9
  4564  0026B6  D758               	goto	L23
  4565  0026B8                     
  4566                           ; BSR set to: 0
  4567                           
  4568                           ; BSR set to: 0
  4569  0026B8  51B1               	movf	Train_Path@To& (0+255),w,b
  4570                           
  4571                           ; Switch size 1, requested type "space"
  4572                           ; Number of cases is 4, Range of values is 1 to 4
  4573                           ; switch strategies available:
  4574                           ; Name         Instructions Cycles
  4575                           ; simple_byte           13     7 (average)
  4576                           ;	Chosen strategy is simple_byte
  4577  0026BA  0A01               	xorlw	1	; case 1
  4578  0026BC  B4D8               	btfsc	status,2,c
  4579  0026BE  D791               	goto	l457
  4580  0026C0  0A03               	xorlw	3	; case 2
  4581  0026C2  B4D8               	btfsc	status,2,c
  4582  0026C4  D7BD               	goto	l467
  4583  0026C6  0A01               	xorlw	1	; case 3
  4584  0026C8  B4D8               	btfsc	status,2,c
  4585  0026CA  D71F               	goto	l436
  4586  0026CC  0A07               	xorlw	7	; case 4
  4587  0026CE  B4D8               	btfsc	status,2,c
  4588  0026D0  D74E               	goto	l447
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;State_Mchn.c: 1190: break;
  4592  0026D2  D073               	goto	l409
  4593  0026D4                     
  4594                           ; BSR set to: 0
  4595                           
  4596                           ; BSR set to: 0
  4597  0026D4  ECD4  F016         	call	_Train_Move_Right_Brake	;wreg free
  4598  0026D8  D008               	goto	L92
  4599  0026DA                     
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603  0026DA  ECD4  F016         	call	_Train_Move_Right_Brake	;wreg free
  4604  0026DE  D005               	goto	L92
  4605  0026E0                     
  4606                           ; BSR set to: 0
  4607                           
  4608                           ; BSR set to: 0
  4609  0026E0  EC31  F016         	call	_Train_Move_Left_Brake	;wreg free
  4610  0026E4  D002               	goto	L92
  4611  0026E6                     
  4612                           ; BSR set to: 0
  4613                           
  4614                           ; BSR set to: 0
  4615  0026E6  EC31  F016         	call	_Train_Move_Left_Brake	;wreg free
  4616  0026EA                     L92:
  4617  0026EA  0900               	iorlw	0
  4618  0026EC  A4D8               	btfss	status,2,c
  4619  0026EE  D697               	goto	l400
  4620                           
  4621                           ;State_Mchn.c: 1219: {
  4622                           ;State_Mchn.c: 1220: Switch_Train_Path = 0;
  4623  0026F0  0E00               	movlw	0
  4624  0026F2  0100               	movlb	0	; () banked
  4625  0026F4  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  4626                           
  4627                           ;State_Mchn.c: 1221: Return_Val = 0;
  4628  0026F6  0E00               	movlw	0
  4629  0026F8  D694               	goto	L36
  4630  0026FA                     
  4631                           ; BSR set to: 0
  4632                           
  4633                           ; BSR set to: 0
  4634  0026FA  51B1               	movf	Train_Path@To& (0+255),w,b
  4635                           
  4636                           ; Switch size 1, requested type "space"
  4637                           ; Number of cases is 4, Range of values is 1 to 4
  4638                           ; switch strategies available:
  4639                           ; Name         Instructions Cycles
  4640                           ; simple_byte           13     7 (average)
  4641                           ;	Chosen strategy is simple_byte
  4642  0026FC  0A01               	xorlw	1	; case 1
  4643  0026FE  B4D8               	btfsc	status,2,c
  4644  002700  D7EF               	goto	l485
  4645  002702  0A03               	xorlw	3	; case 2
  4646  002704  B4D8               	btfsc	status,2,c
  4647  002706  D7EF               	goto	l487
  4648  002708  0A01               	xorlw	1	; case 3
  4649  00270A  B4D8               	btfsc	status,2,c
  4650  00270C  D7E3               	goto	l480
  4651  00270E  0A07               	xorlw	7	; case 4
  4652  002710  B4D8               	btfsc	status,2,c
  4653  002712  D7E3               	goto	l483
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;State_Mchn.c: 1228: break;
  4657  002714  D052               	goto	l409
  4658  002716                     
  4659                           ; BSR set to: 0
  4660                           ;State_Mchn.c: 1231: if(Left_Mountain_From_The_Left(1) == 0){
  4661                           
  4662                           ; BSR set to: 0
  4663  002716  0E01               	movlw	1
  4664  002718  EC54  F01A         	call	_Left_Mountain_From_The_Left
  4665  00271C  D01B               	goto	L49
  4666  00271E                     
  4667                           ; BSR set to: 0
  4668                           ;State_Mchn.c: 1238: if(Left_Mountain_From_The_Left(2) == 0){
  4669                           
  4670                           ; BSR set to: 0
  4671  00271E  0E02               	movlw	2
  4672  002720  EC54  F01A         	call	_Left_Mountain_From_The_Left
  4673  002724  D017               	goto	L49
  4674  002726                     
  4675                           ; BSR set to: 0
  4676                           ;State_Mchn.c: 1245: if(Right_Mountain_From_The_Left(3) == 0){
  4677                           
  4678                           ; BSR set to: 0
  4679  002726  0E03               	movlw	3
  4680  002728  ECCA  F019         	call	_Right_Mountain_From_The_Left
  4681  00272C  D013               	goto	L49
  4682  00272E                     
  4683                           ; BSR set to: 0
  4684                           ;State_Mchn.c: 1252: if(Right_Mountain_From_The_Left(4) == 0){
  4685                           
  4686                           ; BSR set to: 0
  4687  00272E  0E04               	movlw	4
  4688  002730  ECCA  F019         	call	_Right_Mountain_From_The_Left
  4689  002734  D00F               	goto	L49
  4690  002736                     
  4691                           ; BSR set to: 0
  4692                           ;State_Mchn.c: 1259: if(Right_Mountain_From_The_Right(4) == 0){
  4693                           
  4694                           ; BSR set to: 0
  4695  002736  0E04               	movlw	4
  4696  002738  EC40  F019         	call	_Right_Mountain_From_The_Right
  4697  00273C  D00B               	goto	L49
  4698  00273E                     
  4699                           ; BSR set to: 0
  4700                           ;State_Mchn.c: 1266: if(Right_Mountain_From_The_Right(3) == 0){
  4701                           
  4702                           ; BSR set to: 0
  4703  00273E  0E03               	movlw	3
  4704  002740  EC40  F019         	call	_Right_Mountain_From_The_Right
  4705  002744  D007               	goto	L49
  4706  002746                     
  4707                           ; BSR set to: 0
  4708                           ;State_Mchn.c: 1273: if(Left_Mountain_From_The_Right(2) == 0){
  4709                           
  4710                           ; BSR set to: 0
  4711  002746  0E02               	movlw	2
  4712  002748  ECDD  F01A         	call	_Left_Mountain_From_The_Right
  4713  00274C  D003               	goto	L49
  4714  00274E                     
  4715                           ; BSR set to: 0
  4716                           ;State_Mchn.c: 1280: if(Left_Mountain_From_The_Right(1) == 0){
  4717                           
  4718                           ; BSR set to: 0
  4719  00274E  0E01               	movlw	1
  4720  002750  ECDD  F01A         	call	_Left_Mountain_From_The_Right
  4721  002754                     L49:
  4722  002754  0900               	iorlw	0
  4723  002756  A4D8               	btfss	status,2,c
  4724  002758  D662               	goto	l400
  4725                           
  4726                           ;State_Mchn.c: 1281: Switch_Train_Path = 3;
  4727  00275A  0E03               	movlw	3
  4728  00275C  D705               	goto	L23
  4729  00275E                     
  4730                           ; BSR set to: 0
  4731                           
  4732                           ; BSR set to: 0
  4733  00275E  0E00               	movlw	0
  4734  002760  6F8A               	movwf	_Switch_Train_Path& (0+255),b
  4735  002762  0E01               	movlw	1
  4736  002764  D65E               	goto	L36
  4737  002766                     l396:
  4738                           
  4739                           ; BSR set to: 0
  4740  002766  0100               	movlb	0	; () banked
  4741  002768  518A               	movf	_Switch_Train_Path& (0+255),w,b
  4742                           
  4743                           ; Switch size 1, requested type "space"
  4744                           ; Number of cases is 13, Range of values is 0 to 12
  4745                           ; switch strategies available:
  4746                           ; Name         Instructions Cycles
  4747                           ; simple_byte           40    21 (average)
  4748                           ;	Chosen strategy is simple_byte
  4749  00276A  0A00               	xorlw	0	; case 0
  4750  00276C  B4D8               	btfsc	status,2,c
  4751  00276E  D671               	goto	l398
  4752  002770  0A01               	xorlw	1	; case 1
  4753  002772  B4D8               	btfsc	status,2,c
  4754  002774  D69E               	goto	l411
  4755  002776  0A03               	xorlw	3	; case 2
  4756  002778  B4D8               	btfsc	status,2,c
  4757  00277A  D6B9               	goto	l423
  4758  00277C  0A01               	xorlw	1	; case 3
  4759  00277E  B4D8               	btfsc	status,2,c
  4760  002780  D79B               	goto	l435
  4761  002782  0A07               	xorlw	7	; case 4
  4762  002784  B4D8               	btfsc	status,2,c
  4763  002786  D7B9               	goto	l479
  4764  002788  0A01               	xorlw	1	; case 5
  4765  00278A  B4D8               	btfsc	status,2,c
  4766  00278C  D7C4               	goto	l490
  4767  00278E  0A03               	xorlw	3	; case 6
  4768  002790  B4D8               	btfsc	status,2,c
  4769  002792  D7C5               	goto	l492
  4770  002794  0A01               	xorlw	1	; case 7
  4771  002796  B4D8               	btfsc	status,2,c
  4772  002798  D7C6               	goto	l494
  4773  00279A  0A0F               	xorlw	15	; case 8
  4774  00279C  B4D8               	btfsc	status,2,c
  4775  00279E  D7C7               	goto	l496
  4776  0027A0  0A01               	xorlw	1	; case 9
  4777  0027A2  B4D8               	btfsc	status,2,c
  4778  0027A4  D7C8               	goto	l498
  4779  0027A6  0A03               	xorlw	3	; case 10
  4780  0027A8  B4D8               	btfsc	status,2,c
  4781  0027AA  D7C9               	goto	l500
  4782  0027AC  0A01               	xorlw	1	; case 11
  4783  0027AE  B4D8               	btfsc	status,2,c
  4784  0027B0  D7CA               	goto	l502
  4785  0027B2  0A07               	xorlw	7	; case 12
  4786  0027B4  B4D8               	btfsc	status,2,c
  4787  0027B6  D7CB               	goto	l504
  4788  0027B8  D7D2               	goto	l506
  4789  0027BA                     l409:
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;State_Mchn.c: 1289: return(Return_Val);
  4793                           
  4794                           ; BSR set to: 0
  4795  0027BA  51C6               	movf	Train_Path@Return_Val& (0+255),w,b
  4796  0027BC  0012               	return	
  4797  0027BE                     __end_of_Train_Path:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1h	equ	0xFE2
  4807                           fsr1l	equ	0xFE1
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _Train_Move_Right_Start *****************
  4811 ;; Defined at:
  4812 ;;		line 28 in file "../train_move_right.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      unsigned char 
  4819 ;; Registers used:
  4820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0
  4827 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4829 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4830 ;;Total ram usage:        2 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    6
  4833 ;; This function calls:
  4834 ;;		_GETxAPIxVAL
  4835 ;;		_SETxAPIxVAL
  4836 ;;		_SETxPWM
  4837 ;; This function is called by:
  4838 ;;		_Train_Path
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text3
  4843  003020                     __ptext3:
  4844                           	opt stack 0
  4845  003020                     _Train_Move_Right_Start:
  4846                           	opt stack 22
  4847                           
  4848                           ;train_move_right.c: 30: static char Return_Val = 1;
  4849                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;incstack = 0
  4853  003020  D08A               	goto	l1172
  4854  003022  0E00               	movlw	0
  4855  003024  6E14               	movwf	GETxAPIxVAL@index+1,c
  4856  003026  0E14               	movlw	20
  4857  003028  6E13               	movwf	GETxAPIxVAL@index,c
  4858  00302A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4859  00302E  5013               	movf	?_GETxAPIxVAL,w,c
  4860  003030  0100               	movlb	0	; () banked
  4861  003032  5D64               	subwf	_Train_Move_Wait_Time& (0+255),w,b
  4862  003034  5014               	movf	?_GETxAPIxVAL+1,w,c
  4863  003036  5965               	subwfb	(_Train_Move_Wait_Time+1)& (0+255),w,b
  4864  003038  A0D8               	btfss	status,0,c
  4865  00303A  D002               	goto	l1174
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;train_move_right.c: 37: {
  4869                           ;train_move_right.c: 39: Switch_Train_Move = 1;
  4870  00303C  0E01               	movlw	1
  4871  00303E  D03D               	goto	L57
  4872  003040                     l1174:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;train_move_right.c: 43: }
  4876                           ;train_move_right.c: 45: Train_Move_Wait_Time++;
  4877                           
  4878                           ; BSR set to: 0
  4879  003040  4B64               	infsnz	_Train_Move_Wait_Time& (0+255),f,b
  4880  003042  2B65               	incf	(_Train_Move_Wait_Time+1)& (0+255),f,b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;train_move_right.c: 46: Switch_Train_Move = 0;
  4884  003044  0E00               	movlw	0
  4885  003046  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4886  003048  D073               	goto	L58
  4887  00304A                     
  4888                           ; BSR set to: 0
  4889                           
  4890                           ; BSR set to: 0
  4891  00304A  0E00               	movlw	0
  4892  00304C  6E14               	movwf	GETxAPIxVAL@index+1,c
  4893  00304E  0E16               	movlw	22
  4894  003050  6E13               	movwf	GETxAPIxVAL@index,c
  4895  003052  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4896  003056  C013  F0AF         	movff	?_GETxAPIxVAL,_Train_Move_Right_Start$2194
  4897  00305A  C014  F0B0         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Start$2194+1
  4898  00305E  C0AF  F01F         	movff	_Train_Move_Right_Start$2194,SETxPWM@speed
  4899  003062  C0B0  F020         	movff	_Train_Move_Right_Start$2194+1,SETxPWM@speed+1
  4900  003066  0E01               	movlw	1
  4901  003068  6E21               	movwf	SETxPWM@direction,c
  4902  00306A  EC26  F01D         	call	_SETxPWM	;wreg free
  4903                           
  4904                           ;train_move_right.c: 51: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4905  00306E  0E00               	movlw	0
  4906  003070  6E14               	movwf	GETxAPIxVAL@index+1,c
  4907  003072  0E16               	movlw	22
  4908  003074  6E13               	movwf	GETxAPIxVAL@index,c
  4909  003076  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4910  00307A  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4911  00307E  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4912                           
  4913                           ;train_move_right.c: 52: SETxAPIxVAL(69, 0);;
  4914  003082  0E00               	movlw	0
  4915  003084  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4916  003086  0E45               	movlw	69
  4917  003088  6E19               	movwf	SETxAPIxVAL@index,c
  4918  00308A  0E00               	movlw	0
  4919  00308C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4920  00308E  0E00               	movlw	0
  4921  003090  6E1B               	movwf	SETxAPIxVAL@value,c
  4922  003092  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  4923                           
  4924                           ;train_move_right.c: 53: Return_Val = 1;
  4925  003096  0E01               	movlw	1
  4926  003098  0100               	movlb	0	; () banked
  4927  00309A  6FC3               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4928  00309C  D018               	goto	l7438
  4929  00309E                     
  4930                           ; BSR set to: 0
  4931                           
  4932                           ; BSR set to: 0
  4933  00309E  0E00               	movlw	0
  4934  0030A0  6E14               	movwf	GETxAPIxVAL@index+1,c
  4935  0030A2  0E12               	movlw	18
  4936  0030A4  6E13               	movwf	GETxAPIxVAL@index,c
  4937  0030A6  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4938  0030AA  5013               	movf	?_GETxAPIxVAL,w,c
  4939  0030AC  0100               	movlb	0	; () banked
  4940  0030AE  5D64               	subwf	_Train_Move_Wait_Time& (0+255),w,b
  4941  0030B0  5014               	movf	?_GETxAPIxVAL+1,w,c
  4942  0030B2  5965               	subwfb	(_Train_Move_Wait_Time+1)& (0+255),w,b
  4943  0030B4  A0D8               	btfss	status,0,c
  4944  0030B6  D007               	goto	l1178
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;train_move_right.c: 58: {
  4948                           ;train_move_right.c: 59: Switch_Train_Move = 3;
  4949  0030B8  0E03               	movlw	3
  4950  0030BA                     L57:
  4951  0030BA  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4952                           
  4953                           ;train_move_right.c: 60: Train_Move_Wait_Time = 0;
  4954  0030BC  0E00               	movlw	0
  4955  0030BE  6F65               	movwf	(_Train_Move_Wait_Time+1)& (0+255),b
  4956  0030C0  0E00               	movlw	0
  4957  0030C2  6F64               	movwf	_Train_Move_Wait_Time& (0+255),b
  4958  0030C4  D035               	goto	L58
  4959  0030C6                     l1178:
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;train_move_right.c: 63: }
  4963                           ;train_move_right.c: 64: Return_Val = 1;
  4964                           
  4965                           ; BSR set to: 0
  4966  0030C6  0E01               	movlw	1
  4967  0030C8  6FC3               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;train_move_right.c: 65: Train_Move_Wait_Time++;
  4971  0030CA  4B64               	infsnz	_Train_Move_Wait_Time& (0+255),f,b
  4972  0030CC  2B65               	incf	(_Train_Move_Wait_Time+1)& (0+255),f,b
  4973  0030CE                     l7438:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;train_move_right.c: 66: Switch_Train_Move = 2;
  4977  0030CE  0E02               	movlw	2
  4978  0030D0  6F84               	movwf	_Switch_Train_Move& (0+255),b
  4979                           
  4980                           ;train_move_right.c: 67: break;
  4981  0030D2  D03F               	goto	l1175
  4982  0030D4                     
  4983                           ; BSR set to: 0
  4984                           
  4985                           ; BSR set to: 0
  4986  0030D4  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4987  0030D8  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4988  0030DC  0E01               	movlw	1
  4989  0030DE  6E21               	movwf	SETxPWM@direction,c
  4990  0030E0  EC26  F01D         	call	_SETxPWM	;wreg free
  4991                           
  4992                           ;train_move_right.c: 70: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4993  0030E4  0E00               	movlw	0
  4994  0030E6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4995  0030E8  0E17               	movlw	23
  4996  0030EA  6E13               	movwf	GETxAPIxVAL@index,c
  4997  0030EC  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  4998  0030F0  5013               	movf	?_GETxAPIxVAL,w,c
  4999  0030F2  0100               	movlb	0	; () banked
  5000  0030F4  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5001  0030F6  5014               	movf	?_GETxAPIxVAL+1,w,c
  5002  0030F8  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5003  0030FA  A0D8               	btfss	status,0,c
  5004  0030FC  D004               	goto	l1180
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;train_move_right.c: 71: {
  5008                           ;train_move_right.c: 72: Switch_Train_Move = 0;
  5009  0030FE  0E00               	movlw	0
  5010  003100  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5011                           
  5012                           ;train_move_right.c: 73: Return_Val = 0;
  5013  003102  0E00               	movlw	0
  5014  003104  D016               	goto	L56
  5015  003106                     l1180:
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;train_move_right.c: 75: }
  5019                           ;train_move_right.c: 76: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5020                           
  5021                           ; BSR set to: 0
  5022  003106  0E00               	movlw	0
  5023  003108  6E14               	movwf	GETxAPIxVAL@index+1,c
  5024  00310A  0E1A               	movlw	26
  5025  00310C  6E13               	movwf	GETxAPIxVAL@index,c
  5026  00310E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5027  003112  5013               	movf	?_GETxAPIxVAL,w,c
  5028  003114  0100               	movlb	0	; () banked
  5029  003116  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5030  003118  5014               	movf	?_GETxAPIxVAL+1,w,c
  5031  00311A  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5032  00311C  A0D8               	btfss	status,0,c
  5033  00311E  D006               	goto	l1181
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;train_move_right.c: 77: {
  5037                           ;train_move_right.c: 78: Train_Move_Pwm_Count++;
  5038  003120  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5039  003122  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count = 0;
  5043  003124  0E00               	movlw	0
  5044  003126  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5045  003128  0E00               	movlw	0
  5046  00312A  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5047  00312C                     l1181:
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;train_move_right.c: 80: }
  5051                           ;train_move_right.c: 81: Train_Move_Pwm_Fast_Count++;
  5052                           
  5053                           ; BSR set to: 0
  5054  00312C  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5055  00312E  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5056  003130                     L58:
  5057                           
  5058                           ;train_move_right.c: 82: Return_Val = 1;
  5059  003130  0E01               	movlw	1
  5060  003132                     L56:
  5061  003132  6FC3               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;train_move_right.c: 86: }
  5065                           
  5066                           ; BSR set to: 0
  5067                           
  5068                           ;train_move_right.c: 85: default : break;
  5069                           
  5070                           ;train_move_right.c: 83: break;
  5071  003134  D00E               	goto	l1175
  5072  003136                     l1172:
  5073                           
  5074                           ; BSR set to: 0
  5075  003136  0100               	movlb	0	; () banked
  5076  003138  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5077                           
  5078                           ; Switch size 1, requested type "space"
  5079                           ; Number of cases is 4, Range of values is 0 to 3
  5080                           ; switch strategies available:
  5081                           ; Name         Instructions Cycles
  5082                           ; simple_byte           13     7 (average)
  5083                           ;	Chosen strategy is simple_byte
  5084  00313A  0A00               	xorlw	0	; case 0
  5085  00313C  B4D8               	btfsc	status,2,c
  5086  00313E  D771               	goto	l1173
  5087  003140  0A01               	xorlw	1	; case 1
  5088  003142  B4D8               	btfsc	status,2,c
  5089  003144  D782               	goto	l1176
  5090  003146  0A03               	xorlw	3	; case 2
  5091  003148  B4D8               	btfsc	status,2,c
  5092  00314A  D7A9               	goto	l1177
  5093  00314C  0A01               	xorlw	1	; case 3
  5094  00314E  B4D8               	btfsc	status,2,c
  5095  003150  D7C1               	goto	l1179
  5096  003152                     l1175:
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;train_move_right.c: 88: return(Return_Val);
  5100                           
  5101                           ; BSR set to: 0
  5102  003152  51C3               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  5103  003154  0012               	return	
  5104  003156                     __end_of_Train_Move_Right_Start:
  5105                           	opt stack 0
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           fsr1h	equ	0xFE2
  5114                           fsr1l	equ	0xFE1
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _Train_Move_Right_Brake *****************
  5118 ;; Defined at:
  5119 ;;		line 256 in file "../train_move_right.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;		None
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;		None
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      unsigned char 
  5126 ;; Registers used:
  5127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0
  5134 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5136 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5137 ;;Total ram usage:        2 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    6
  5140 ;; This function calls:
  5141 ;;		_GETxAPIxVAL
  5142 ;;		_SETxAPIxVAL
  5143 ;;		_SETxPWM
  5144 ;; This function is called by:
  5145 ;;		_Train_Path
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           	psect	text4
  5150  002DA8                     __ptext4:
  5151                           	opt stack 0
  5152  002DA8                     _Train_Move_Right_Brake:
  5153                           	opt stack 22
  5154                           
  5155                           ;train_move_right.c: 258: static char Return_Val = 1;
  5156                           ;train_move_right.c: 259: static unsigned int Train_Move_Wait_Time = 0;
  5157                           ;train_move_right.c: 261: switch(Switch_Train_Move)
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;incstack = 0
  5161  002DA8  D08F               	goto	l1240
  5162  002DAA  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5163  002DAE  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5164  002DB2  0E01               	movlw	1
  5165  002DB4  6E21               	movwf	SETxPWM@direction,c
  5166  002DB6  EC26  F01D         	call	_SETxPWM	;wreg free
  5167                           
  5168                           ;train_move_right.c: 264: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  5169  002DBA  0E00               	movlw	0
  5170  002DBC  6E14               	movwf	GETxAPIxVAL@index+1,c
  5171  002DBE  0E16               	movlw	22
  5172  002DC0  6E13               	movwf	GETxAPIxVAL@index,c
  5173  002DC2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5174  002DC6  0100               	movlb	0	; () banked
  5175  002DC8  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5176  002DCA  5C13               	subwf	?_GETxAPIxVAL,w,c
  5177  002DCC  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5178  002DCE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5179  002DD0  A0D8               	btfss	status,0,c
  5180  002DD2  D002               	goto	l1242
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;train_move_right.c: 265: {
  5184                           ;train_move_right.c: 266: Switch_Train_Move = 1;
  5185  002DD4  0E01               	movlw	1
  5186  002DD6  D074               	goto	L63
  5187  002DD8                     l1242:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;train_move_right.c: 269: }
  5191                           ;train_move_right.c: 270: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5192                           
  5193                           ; BSR set to: 0
  5194  002DD8  0E00               	movlw	0
  5195  002DDA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5196  002DDC  0E19               	movlw	25
  5197  002DDE  6E13               	movwf	GETxAPIxVAL@index,c
  5198  002DE0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5199  002DE4  5013               	movf	?_GETxAPIxVAL,w,c
  5200  002DE6  0100               	movlb	0	; () banked
  5201  002DE8  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5202  002DEA  5014               	movf	?_GETxAPIxVAL+1,w,c
  5203  002DEC  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5204  002DEE  A0D8               	btfss	status,0,c
  5205  002DF0  D008               	goto	l1244
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;train_move_right.c: 271: {
  5209                           ;train_move_right.c: 272: Train_Move_Pwm_Count--;
  5210  002DF2  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5211  002DF4  A0D8               	btfss	status,0,c
  5212  002DF6  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;train_move_right.c: 273: Train_Move_Pwm_Fast_Count = 0;
  5216  002DF8  0E00               	movlw	0
  5217  002DFA  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5218  002DFC  0E00               	movlw	0
  5219  002DFE  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5220                           
  5221                           ;train_move_right.c: 274: }
  5222  002E00  D060               	goto	l7554
  5223  002E02                     l1244:
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;train_move_right.c: 275: else{Train_Move_Pwm_Fast_Count++;}
  5227                           
  5228                           ; BSR set to: 0
  5229  002E02  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5230  002E04  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5231                           
  5232                           ; BSR set to: 0
  5233  002E06  D05D               	goto	l7554
  5234  002E08                     
  5235                           ; BSR set to: 0
  5236                           
  5237                           ; BSR set to: 0
  5238  002E08  0E00               	movlw	0
  5239  002E0A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5240  002E0C  0E12               	movlw	18
  5241  002E0E  6E13               	movwf	GETxAPIxVAL@index,c
  5242  002E10  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5243  002E14  5013               	movf	?_GETxAPIxVAL,w,c
  5244  002E16  0100               	movlb	0	; () banked
  5245  002E18  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5246  002E1A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5247  002E1C  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5248  002E1E  A0D8               	btfss	status,0,c
  5249  002E20  D007               	goto	l1247
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;train_move_right.c: 280: {
  5253                           ;train_move_right.c: 281: Switch_Train_Move = 2;
  5254  002E22  0E02               	movlw	2
  5255  002E24  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5256                           
  5257                           ;train_move_right.c: 282: Train_Move_Wait_Time = 0;
  5258  002E26  0E00               	movlw	0
  5259  002E28  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5260  002E2A  0E00               	movlw	0
  5261  002E2C  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5262  002E2E  D049               	goto	l7554
  5263  002E30                     l1247:
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;train_move_right.c: 285: }
  5267                           ;train_move_right.c: 286: Return_Val = 1;
  5268                           
  5269                           ; BSR set to: 0
  5270  002E30  0E01               	movlw	1
  5271  002E32  6FC2               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;train_move_right.c: 287: Train_Move_Wait_Time++;
  5275  002E34  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5276  002E36  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;train_move_right.c: 288: Switch_Train_Move = 1;
  5280  002E38  0E01               	movlw	1
  5281  002E3A  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5282                           
  5283                           ;train_move_right.c: 289: break;
  5284  002E3C  D053               	goto	l1243
  5285  002E3E                     
  5286                           ; BSR set to: 0
  5287                           
  5288                           ; BSR set to: 0
  5289  002E3E  0E00               	movlw	0
  5290  002E40  6E14               	movwf	GETxAPIxVAL@index+1,c
  5291  002E42  0E16               	movlw	22
  5292  002E44  6E13               	movwf	GETxAPIxVAL@index,c
  5293  002E46  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5294  002E4A  C013  F0AF         	movff	?_GETxAPIxVAL,_Train_Move_Right_Brake$2195
  5295  002E4E  C014  F0B0         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Brake$2195+1
  5296  002E52  C0AF  F01F         	movff	_Train_Move_Right_Brake$2195,SETxPWM@speed
  5297  002E56  C0B0  F020         	movff	_Train_Move_Right_Brake$2195+1,SETxPWM@speed+1
  5298  002E5A  0E01               	movlw	1
  5299  002E5C  6E21               	movwf	SETxPWM@direction,c
  5300  002E5E  EC26  F01D         	call	_SETxPWM	;wreg free
  5301                           
  5302                           ;train_move_right.c: 292: SETxAPIxVAL(69, 1);;
  5303  002E62  0E00               	movlw	0
  5304  002E64  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5305  002E66  0E45               	movlw	69
  5306  002E68  6E19               	movwf	SETxAPIxVAL@index,c
  5307  002E6A  0E00               	movlw	0
  5308  002E6C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5309  002E6E  0E01               	movlw	1
  5310  002E70  6E1B               	movwf	SETxAPIxVAL@value,c
  5311  002E72  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  5312                           
  5313                           ;train_move_right.c: 293: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  5314  002E76  0E00               	movlw	0
  5315  002E78  6E14               	movwf	GETxAPIxVAL@index+1,c
  5316  002E7A  0E16               	movlw	22
  5317  002E7C  6E13               	movwf	GETxAPIxVAL@index,c
  5318  002E7E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5319  002E82  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5320  002E86  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5321                           
  5322                           ;train_move_right.c: 294: Switch_Train_Move = 3;
  5323  002E8A  0E03               	movlw	3
  5324  002E8C  0100               	movlb	0	; () banked
  5325  002E8E  D018               	goto	L63
  5326  002E90                     
  5327                           ; BSR set to: 0
  5328                           
  5329                           ; BSR set to: 0
  5330  002E90  0E00               	movlw	0
  5331  002E92  6E14               	movwf	GETxAPIxVAL@index+1,c
  5332  002E94  0E14               	movlw	20
  5333  002E96  6E13               	movwf	GETxAPIxVAL@index,c
  5334  002E98  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5335  002E9C  5013               	movf	?_GETxAPIxVAL,w,c
  5336  002E9E  0100               	movlb	0	; () banked
  5337  002EA0  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5338  002EA2  5014               	movf	?_GETxAPIxVAL+1,w,c
  5339  002EA4  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5340  002EA6  A0D8               	btfss	status,0,c
  5341  002EA8  D008               	goto	l1250
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;train_move_right.c: 299: {
  5345                           ;train_move_right.c: 300: Switch_Train_Move = 0;
  5346  002EAA  0E00               	movlw	0
  5347  002EAC  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5348                           
  5349                           ;train_move_right.c: 301: Train_Move_Wait_Time = 0;
  5350  002EAE  0E00               	movlw	0
  5351  002EB0  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5352  002EB2  0E00               	movlw	0
  5353  002EB4  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5354                           
  5355                           ;train_move_right.c: 302: Return_Val = 0;
  5356  002EB6  0E00               	movlw	0
  5357  002EB8  D005               	goto	L61
  5358  002EBA                     l1250:
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;train_move_right.c: 304: }
  5362                           ;train_move_right.c: 305: Train_Move_Wait_Time++;
  5363                           
  5364                           ; BSR set to: 0
  5365  002EBA  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5366  002EBC  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;train_move_right.c: 306: Switch_Train_Move = 3;
  5370  002EBE  0E03               	movlw	3
  5371  002EC0                     L63:
  5372  002EC0  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5373  002EC2                     l7554:
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;train_move_right.c: 307: Return_Val = 1;
  5377  002EC2  0E01               	movlw	1
  5378  002EC4                     L61:
  5379  002EC4  6FC2               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;train_move_right.c: 311: }
  5383                           
  5384                           ; BSR set to: 0
  5385                           
  5386                           ;train_move_right.c: 310: default : break;
  5387                           
  5388                           ;train_move_right.c: 308: break;
  5389  002EC6  D00E               	goto	l1243
  5390  002EC8                     l1240:
  5391                           
  5392                           ; BSR set to: 0
  5393  002EC8  0100               	movlb	0	; () banked
  5394  002ECA  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5395                           
  5396                           ; Switch size 1, requested type "space"
  5397                           ; Number of cases is 4, Range of values is 0 to 3
  5398                           ; switch strategies available:
  5399                           ; Name         Instructions Cycles
  5400                           ; simple_byte           13     7 (average)
  5401                           ;	Chosen strategy is simple_byte
  5402  002ECC  0A00               	xorlw	0	; case 0
  5403  002ECE  B4D8               	btfsc	status,2,c
  5404  002ED0  D76C               	goto	l1241
  5405  002ED2  0A01               	xorlw	1	; case 1
  5406  002ED4  B4D8               	btfsc	status,2,c
  5407  002ED6  D798               	goto	l1246
  5408  002ED8  0A03               	xorlw	3	; case 2
  5409  002EDA  B4D8               	btfsc	status,2,c
  5410  002EDC  D7B0               	goto	l1248
  5411  002EDE  0A01               	xorlw	1	; case 3
  5412  002EE0  B4D8               	btfsc	status,2,c
  5413  002EE2  D7D6               	goto	l1249
  5414  002EE4                     l1243:
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;train_move_right.c: 313: return(Return_Val);
  5418                           
  5419                           ; BSR set to: 0
  5420  002EE4  51C2               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5421  002EE6  0012               	return	
  5422  002EE8                     __end_of_Train_Move_Right_Brake:
  5423                           	opt stack 0
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           postinc0	equ	0xFEE
  5429                           wreg	equ	0xFE8
  5430                           postdec1	equ	0xFE5
  5431                           fsr1h	equ	0xFE2
  5432                           fsr1l	equ	0xFE1
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function _Train_Move_Left_Start *****************
  5436 ;; Defined at:
  5437 ;;		line 28 in file "../train_move_left.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;		None
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      unsigned char 
  5444 ;; Registers used:
  5445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5451 ;;      Params:         0       0       0       0       0       0       0       0       0
  5452 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5454 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5455 ;;Total ram usage:        2 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    6
  5458 ;; This function calls:
  5459 ;;		_GETxAPIxVAL
  5460 ;;		_SETxAPIxVAL
  5461 ;;		_SETxPWM
  5462 ;; This function is called by:
  5463 ;;		_Train_Path
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           	psect	text5
  5468  002EE8                     __ptext5:
  5469                           	opt stack 0
  5470  002EE8                     _Train_Move_Left_Start:
  5471                           	opt stack 22
  5472                           
  5473                           ;train_move_left.c: 30: static char Return_Val = 1;
  5474                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;incstack = 0
  5478  002EE8  D08B               	goto	l1067
  5479  002EEA  0E00               	movlw	0
  5480  002EEC  6E14               	movwf	GETxAPIxVAL@index+1,c
  5481  002EEE  0E14               	movlw	20
  5482  002EF0  6E13               	movwf	GETxAPIxVAL@index,c
  5483  002EF2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5484  002EF6  5013               	movf	?_GETxAPIxVAL,w,c
  5485  002EF8  0100               	movlb	0	; () banked
  5486  002EFA  5D64               	subwf	_Train_Move_Wait_Time& (0+255),w,b
  5487  002EFC  5014               	movf	?_GETxAPIxVAL+1,w,c
  5488  002EFE  5965               	subwfb	(_Train_Move_Wait_Time+1)& (0+255),w,b
  5489  002F00  A0D8               	btfss	status,0,c
  5490  002F02  D002               	goto	l1069
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;train_move_left.c: 37: {
  5494                           ;train_move_left.c: 39: Switch_Train_Move = 1;
  5495  002F04  0E01               	movlw	1
  5496  002F06  D03E               	goto	L66
  5497  002F08                     l1069:
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;train_move_left.c: 43: }
  5501                           ;train_move_left.c: 45: Train_Move_Wait_Time++;
  5502                           
  5503                           ; BSR set to: 0
  5504  002F08  4B64               	infsnz	_Train_Move_Wait_Time& (0+255),f,b
  5505  002F0A  2B65               	incf	(_Train_Move_Wait_Time+1)& (0+255),f,b
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;train_move_left.c: 46: Switch_Train_Move = 0;
  5509  002F0C  0E00               	movlw	0
  5510  002F0E  D043               	goto	L67
  5511  002F10                     l7470:
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;train_move_left.c: 47: Return_Val = 1;
  5515  002F10  0E01               	movlw	1
  5516  002F12  6FC5               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5517                           
  5518                           ;train_move_left.c: 48: break;
  5519  002F14  D083               	goto	l1070
  5520  002F16                     
  5521                           ; BSR set to: 0
  5522                           
  5523                           ; BSR set to: 0
  5524  002F16  0E00               	movlw	0
  5525  002F18  6E14               	movwf	GETxAPIxVAL@index+1,c
  5526  002F1A  0E15               	movlw	21
  5527  002F1C  6E13               	movwf	GETxAPIxVAL@index,c
  5528  002F1E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5529  002F22  C013  F0AF         	movff	?_GETxAPIxVAL,_Train_Move_Left_Start$2192
  5530  002F26  C014  F0B0         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Start$2192+1
  5531  002F2A  C0AF  F01F         	movff	_Train_Move_Left_Start$2192,SETxPWM@speed
  5532  002F2E  C0B0  F020         	movff	_Train_Move_Left_Start$2192+1,SETxPWM@speed+1
  5533  002F32  0E00               	movlw	0
  5534  002F34  6E21               	movwf	SETxPWM@direction,c
  5535  002F36  EC26  F01D         	call	_SETxPWM	;wreg free
  5536                           
  5537                           ;train_move_left.c: 51: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5538  002F3A  0E00               	movlw	0
  5539  002F3C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5540  002F3E  0E15               	movlw	21
  5541  002F40  6E13               	movwf	GETxAPIxVAL@index,c
  5542  002F42  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5543  002F46  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5544  002F4A  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5545                           
  5546                           ;train_move_left.c: 52: SETxAPIxVAL(69, 0);
  5547  002F4E  0E00               	movlw	0
  5548  002F50  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5549  002F52  0E45               	movlw	69
  5550  002F54  6E19               	movwf	SETxAPIxVAL@index,c
  5551  002F56  0E00               	movlw	0
  5552  002F58  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5553  002F5A  0E00               	movlw	0
  5554  002F5C  6E1B               	movwf	SETxAPIxVAL@value,c
  5555  002F5E  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  5556                           
  5557                           ;train_move_left.c: 53: Switch_Train_Move = 2;
  5558  002F62  0E02               	movlw	2
  5559  002F64  0100               	movlb	0	; () banked
  5560  002F66  D017               	goto	L67
  5561  002F68                     
  5562                           ; BSR set to: 0
  5563                           
  5564                           ; BSR set to: 0
  5565  002F68  0E00               	movlw	0
  5566  002F6A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5567  002F6C  0E12               	movlw	18
  5568  002F6E  6E13               	movwf	GETxAPIxVAL@index,c
  5569  002F70  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5570  002F74  5013               	movf	?_GETxAPIxVAL,w,c
  5571  002F76  0100               	movlb	0	; () banked
  5572  002F78  5D64               	subwf	_Train_Move_Wait_Time& (0+255),w,b
  5573  002F7A  5014               	movf	?_GETxAPIxVAL+1,w,c
  5574  002F7C  5965               	subwfb	(_Train_Move_Wait_Time+1)& (0+255),w,b
  5575  002F7E  A0D8               	btfss	status,0,c
  5576  002F80  D007               	goto	l1073
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;train_move_left.c: 58: {
  5580                           ;train_move_left.c: 59: Switch_Train_Move = 3;
  5581  002F82  0E03               	movlw	3
  5582  002F84                     L66:
  5583  002F84  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5584                           
  5585                           ;train_move_left.c: 60: Train_Move_Wait_Time = 0;
  5586  002F86  0E00               	movlw	0
  5587  002F88  6F65               	movwf	(_Train_Move_Wait_Time+1)& (0+255),b
  5588  002F8A  0E00               	movlw	0
  5589  002F8C  6F64               	movwf	_Train_Move_Wait_Time& (0+255),b
  5590  002F8E  D7C0               	goto	l7470
  5591  002F90                     l1073:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;train_move_left.c: 63: }
  5595                           ;train_move_left.c: 64: Train_Move_Wait_Time++;
  5596                           
  5597                           ; BSR set to: 0
  5598  002F90  4B64               	infsnz	_Train_Move_Wait_Time& (0+255),f,b
  5599  002F92  2B65               	incf	(_Train_Move_Wait_Time+1)& (0+255),f,b
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;train_move_left.c: 65: Switch_Train_Move = 2;
  5603  002F94  0E02               	movlw	2
  5604  002F96                     L67:
  5605  002F96  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5606  002F98  D7BB               	goto	l7470
  5607  002F9A                     
  5608                           ; BSR set to: 0
  5609                           
  5610                           ; BSR set to: 0
  5611  002F9A  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5612  002F9E  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5613  002FA2  0E00               	movlw	0
  5614  002FA4  6E21               	movwf	SETxPWM@direction,c
  5615  002FA6  EC26  F01D         	call	_SETxPWM	;wreg free
  5616                           
  5617                           ;train_move_left.c: 70: Return_Val = 1;
  5618  002FAA  0E01               	movlw	1
  5619  002FAC  0100               	movlb	0	; () banked
  5620  002FAE  6FC5               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;train_move_left.c: 71: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5624  002FB0  0E00               	movlw	0
  5625  002FB2  6E14               	movwf	GETxAPIxVAL@index+1,c
  5626  002FB4  0E18               	movlw	24
  5627  002FB6  6E13               	movwf	GETxAPIxVAL@index,c
  5628  002FB8  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5629  002FBC  5013               	movf	?_GETxAPIxVAL,w,c
  5630  002FBE  0100               	movlb	0	; () banked
  5631  002FC0  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5632  002FC2  5014               	movf	?_GETxAPIxVAL+1,w,c
  5633  002FC4  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5634  002FC6  A0D8               	btfss	status,0,c
  5635  002FC8  D004               	goto	l1075
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;train_move_left.c: 72: {
  5639                           ;train_move_left.c: 73: Switch_Train_Move = 0;
  5640  002FCA  0E00               	movlw	0
  5641  002FCC  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5642                           
  5643                           ;train_move_left.c: 74: Return_Val = 0;
  5644  002FCE  0E00               	movlw	0
  5645  002FD0  D7A0               	goto	L65
  5646  002FD2                     l1075:
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;train_move_left.c: 77: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5650                           
  5651                           ; BSR set to: 0
  5652  002FD2  0E00               	movlw	0
  5653  002FD4  6E14               	movwf	GETxAPIxVAL@index+1,c
  5654  002FD6  0E1A               	movlw	26
  5655  002FD8  6E13               	movwf	GETxAPIxVAL@index,c
  5656  002FDA  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5657  002FDE  5013               	movf	?_GETxAPIxVAL,w,c
  5658  002FE0  0100               	movlb	0	; () banked
  5659  002FE2  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5660  002FE4  5014               	movf	?_GETxAPIxVAL+1,w,c
  5661  002FE6  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5662  002FE8  A0D8               	btfss	status,0,c
  5663  002FEA  D007               	goto	l1077
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;train_move_left.c: 78: {
  5667                           ;train_move_left.c: 79: Train_Move_Pwm_Count++;
  5668  002FEC  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5669  002FEE  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;train_move_left.c: 80: Train_Move_Pwm_Fast_Count = 0;
  5673  002FF0  0E00               	movlw	0
  5674  002FF2  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5675  002FF4  0E00               	movlw	0
  5676  002FF6  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5677                           
  5678                           ;train_move_left.c: 81: }
  5679  002FF8  D011               	goto	l1070
  5680  002FFA                     l1077:
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;train_move_left.c: 82: else{Train_Move_Pwm_Fast_Count++;}
  5684                           
  5685                           ; BSR set to: 0
  5686  002FFA  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5687  002FFC  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;train_move_left.c: 85: }
  5691                           
  5692                           ; BSR set to: 0
  5693                           
  5694                           ;train_move_left.c: 84: default : break;
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;train_move_left.c: 83: break;
  5698                           
  5699                           ; BSR set to: 0
  5700  002FFE  D00E               	goto	l1070
  5701  003000                     l1067:
  5702                           
  5703                           ; BSR set to: 0
  5704  003000  0100               	movlb	0	; () banked
  5705  003002  5184               	movf	_Switch_Train_Move& (0+255),w,b
  5706                           
  5707                           ; Switch size 1, requested type "space"
  5708                           ; Number of cases is 4, Range of values is 0 to 3
  5709                           ; switch strategies available:
  5710                           ; Name         Instructions Cycles
  5711                           ; simple_byte           13     7 (average)
  5712                           ;	Chosen strategy is simple_byte
  5713  003004  0A00               	xorlw	0	; case 0
  5714  003006  B4D8               	btfsc	status,2,c
  5715  003008  D770               	goto	l1068
  5716  00300A  0A01               	xorlw	1	; case 1
  5717  00300C  B4D8               	btfsc	status,2,c
  5718  00300E  D783               	goto	l1071
  5719  003010  0A03               	xorlw	3	; case 2
  5720  003012  B4D8               	btfsc	status,2,c
  5721  003014  D7A9               	goto	l1072
  5722  003016  0A01               	xorlw	1	; case 3
  5723  003018  B4D8               	btfsc	status,2,c
  5724  00301A  D7BF               	goto	l1074
  5725  00301C                     l1070:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;train_move_left.c: 87: return(Return_Val);
  5729                           
  5730                           ; BSR set to: 0
  5731  00301C  51C5               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5732  00301E  0012               	return	
  5733  003020                     __end_of_Train_Move_Left_Start:
  5734                           	opt stack 0
  5735                           tblptru	equ	0xFF8
  5736                           tblptrh	equ	0xFF7
  5737                           tblptrl	equ	0xFF6
  5738                           tablat	equ	0xFF5
  5739                           postinc0	equ	0xFEE
  5740                           wreg	equ	0xFE8
  5741                           postdec1	equ	0xFE5
  5742                           fsr1h	equ	0xFE2
  5743                           fsr1l	equ	0xFE1
  5744                           status	equ	0xFD8
  5745                           
  5746 ;; *************** function _Train_Move_Left_Brake *****************
  5747 ;; Defined at:
  5748 ;;		line 258 in file "../train_move_left.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;		None
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;		None
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      unsigned char 
  5755 ;; Registers used:
  5756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5762 ;;      Params:         0       0       0       0       0       0       0       0       0
  5763 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5765 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5766 ;;Total ram usage:        2 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    6
  5769 ;; This function calls:
  5770 ;;		_GETxAPIxVAL
  5771 ;;		_SETxAPIxVAL
  5772 ;;		_SETxPWM
  5773 ;; This function is called by:
  5774 ;;		_Train_Path
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text6
  5779  002C62                     __ptext6:
  5780                           	opt stack 0
  5781  002C62                     _Train_Move_Left_Brake:
  5782                           	opt stack 22
  5783                           
  5784                           ;train_move_left.c: 260: static char Return_Val = 1;
  5785                           ;train_move_left.c: 261: static unsigned int Train_Move_Wait_Time = 0;
  5786                           ;train_move_left.c: 263: switch(Switch_Train_Move)
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;incstack = 0
  5790  002C62  D092               	goto	l1137
  5791  002C64  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5792  002C68  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5793  002C6C  0E00               	movlw	0
  5794  002C6E  6E21               	movwf	SETxPWM@direction,c
  5795  002C70  EC26  F01D         	call	_SETxPWM	;wreg free
  5796                           
  5797                           ;train_move_left.c: 266: Return_Val = 1;
  5798  002C74  0E01               	movlw	1
  5799  002C76  0100               	movlb	0	; () banked
  5800  002C78  6FC4               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;train_move_left.c: 267: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5804  002C7A  0E00               	movlw	0
  5805  002C7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  5806  002C7E  0E15               	movlw	21
  5807  002C80  6E13               	movwf	GETxAPIxVAL@index,c
  5808  002C82  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5809  002C86  0100               	movlb	0	; () banked
  5810  002C88  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5811  002C8A  5C13               	subwf	?_GETxAPIxVAL,w,c
  5812  002C8C  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5813  002C8E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5814  002C90  A0D8               	btfss	status,0,c
  5815  002C92  D002               	goto	l1139
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;train_move_left.c: 268: {
  5819                           ;train_move_left.c: 269: Switch_Train_Move = 1;
  5820  002C94  0E01               	movlw	1
  5821  002C96  D074               	goto	L93
  5822  002C98                     l1139:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;train_move_left.c: 272: }
  5826                           ;train_move_left.c: 273: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5827                           
  5828                           ; BSR set to: 0
  5829  002C98  0E00               	movlw	0
  5830  002C9A  6E14               	movwf	GETxAPIxVAL@index+1,c
  5831  002C9C  0E19               	movlw	25
  5832  002C9E  6E13               	movwf	GETxAPIxVAL@index,c
  5833  002CA0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5834  002CA4  5013               	movf	?_GETxAPIxVAL,w,c
  5835  002CA6  0100               	movlb	0	; () banked
  5836  002CA8  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5837  002CAA  5014               	movf	?_GETxAPIxVAL+1,w,c
  5838  002CAC  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5839  002CAE  A0D8               	btfss	status,0,c
  5840  002CB0  D008               	goto	l1141
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;train_move_left.c: 274: {
  5844                           ;train_move_left.c: 275: Train_Move_Pwm_Count--;
  5845  002CB2  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5846  002CB4  A0D8               	btfss	status,0,c
  5847  002CB6  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;train_move_left.c: 276: Train_Move_Pwm_Fast_Count = 0;
  5851  002CB8  0E00               	movlw	0
  5852  002CBA  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5853  002CBC  0E00               	movlw	0
  5854  002CBE  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5855                           
  5856                           ;train_move_left.c: 277: }
  5857  002CC0  D071               	goto	l1140
  5858  002CC2                     l1141:
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;train_move_left.c: 278: else{Train_Move_Pwm_Fast_Count++;}
  5862                           
  5863                           ; BSR set to: 0
  5864  002CC2  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5865  002CC4  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;train_move_left.c: 279: break;
  5869  002CC6  D06E               	goto	l1140
  5870  002CC8                     
  5871                           ; BSR set to: 0
  5872                           
  5873                           ; BSR set to: 0
  5874  002CC8  0E00               	movlw	0
  5875  002CCA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5876  002CCC  0E12               	movlw	18
  5877  002CCE  6E13               	movwf	GETxAPIxVAL@index,c
  5878  002CD0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5879  002CD4  5013               	movf	?_GETxAPIxVAL,w,c
  5880  002CD6  0100               	movlb	0	; () banked
  5881  002CD8  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5882  002CDA  5014               	movf	?_GETxAPIxVAL+1,w,c
  5883  002CDC  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5884  002CDE  A0D8               	btfss	status,0,c
  5885  002CE0  D007               	goto	l1144
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;train_move_left.c: 282: {
  5889                           ;train_move_left.c: 283: Switch_Train_Move = 2;
  5890  002CE2  0E02               	movlw	2
  5891  002CE4  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5892                           
  5893                           ;train_move_left.c: 284: Train_Move_Wait_Time = 0;
  5894  002CE6  0E00               	movlw	0
  5895  002CE8  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5896  002CEA  0E00               	movlw	0
  5897  002CEC  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5898  002CEE  D049               	goto	l7606
  5899  002CF0                     l1144:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;train_move_left.c: 287: }
  5903                           ;train_move_left.c: 288: Return_Val = 1;
  5904                           
  5905                           ; BSR set to: 0
  5906  002CF0  0E01               	movlw	1
  5907  002CF2  6FC4               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;train_move_left.c: 289: Train_Move_Wait_Time++;
  5911  002CF4  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5912  002CF6  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;train_move_left.c: 290: Switch_Train_Move = 1;
  5916  002CF8  0E01               	movlw	1
  5917  002CFA  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5918                           
  5919                           ;train_move_left.c: 291: break;
  5920  002CFC  D053               	goto	l1140
  5921  002CFE                     
  5922                           ; BSR set to: 0
  5923                           
  5924                           ; BSR set to: 0
  5925  002CFE  0E00               	movlw	0
  5926  002D00  6E14               	movwf	GETxAPIxVAL@index+1,c
  5927  002D02  0E15               	movlw	21
  5928  002D04  6E13               	movwf	GETxAPIxVAL@index,c
  5929  002D06  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5930  002D0A  C013  F0AF         	movff	?_GETxAPIxVAL,_Train_Move_Left_Brake$2193
  5931  002D0E  C014  F0B0         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Brake$2193+1
  5932  002D12  C0AF  F01F         	movff	_Train_Move_Left_Brake$2193,SETxPWM@speed
  5933  002D16  C0B0  F020         	movff	_Train_Move_Left_Brake$2193+1,SETxPWM@speed+1
  5934  002D1A  0E00               	movlw	0
  5935  002D1C  6E21               	movwf	SETxPWM@direction,c
  5936  002D1E  EC26  F01D         	call	_SETxPWM	;wreg free
  5937                           
  5938                           ;train_move_left.c: 294: SETxAPIxVAL(69, 1);;
  5939  002D22  0E00               	movlw	0
  5940  002D24  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5941  002D26  0E45               	movlw	69
  5942  002D28  6E19               	movwf	SETxAPIxVAL@index,c
  5943  002D2A  0E00               	movlw	0
  5944  002D2C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5945  002D2E  0E01               	movlw	1
  5946  002D30  6E1B               	movwf	SETxAPIxVAL@value,c
  5947  002D32  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  5948                           
  5949                           ;train_move_left.c: 295: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5950  002D36  0E00               	movlw	0
  5951  002D38  6E14               	movwf	GETxAPIxVAL@index+1,c
  5952  002D3A  0E15               	movlw	21
  5953  002D3C  6E13               	movwf	GETxAPIxVAL@index,c
  5954  002D3E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5955  002D42  C013  F082         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5956  002D46  C014  F083         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5957                           
  5958                           ;train_move_left.c: 296: Switch_Train_Move = 3;
  5959  002D4A  0E03               	movlw	3
  5960  002D4C  0100               	movlb	0	; () banked
  5961  002D4E  D018               	goto	L93
  5962  002D50                     
  5963                           ; BSR set to: 0
  5964                           
  5965                           ; BSR set to: 0
  5966  002D50  0E00               	movlw	0
  5967  002D52  6E14               	movwf	GETxAPIxVAL@index+1,c
  5968  002D54  0E14               	movlw	20
  5969  002D56  6E13               	movwf	GETxAPIxVAL@index,c
  5970  002D58  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  5971  002D5C  5013               	movf	?_GETxAPIxVAL,w,c
  5972  002D5E  0100               	movlb	0	; () banked
  5973  002D60  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5974  002D62  5014               	movf	?_GETxAPIxVAL+1,w,c
  5975  002D64  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5976  002D66  A0D8               	btfss	status,0,c
  5977  002D68  D008               	goto	l1147
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;train_move_left.c: 301: {
  5981                           ;train_move_left.c: 302: Switch_Train_Move = 0;
  5982  002D6A  0E00               	movlw	0
  5983  002D6C  6F84               	movwf	_Switch_Train_Move& (0+255),b
  5984                           
  5985                           ;train_move_left.c: 303: Train_Move_Wait_Time = 0;
  5986  002D6E  0E00               	movlw	0
  5987  002D70  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5988  002D72  0E00               	movlw	0
  5989  002D74  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5990                           
  5991                           ;train_move_left.c: 304: Return_Val = 0;
  5992  002D76  0E00               	movlw	0
  5993  002D78  D005               	goto	L70
  5994  002D7A                     l1147:
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;train_move_left.c: 306: }
  5998                           ;train_move_left.c: 307: Train_Move_Wait_Time++;
  5999                           
  6000                           ; BSR set to: 0
  6001  002D7A  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  6002  002D7C  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;train_move_left.c: 308: Switch_Train_Move = 3;
  6006  002D7E  0E03               	movlw	3
  6007  002D80                     L93:
  6008  002D80  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6009  002D82                     l7606:
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;train_move_left.c: 309: Return_Val = 1;
  6013  002D82  0E01               	movlw	1
  6014  002D84                     L70:
  6015  002D84  6FC4               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;train_move_left.c: 313: }
  6019                           
  6020                           ; BSR set to: 0
  6021                           
  6022                           ;train_move_left.c: 312: default : break;
  6023                           
  6024                           ;train_move_left.c: 310: break;
  6025  002D86  D00E               	goto	l1140
  6026  002D88                     l1137:
  6027                           
  6028                           ; BSR set to: 0
  6029  002D88  0100               	movlb	0	; () banked
  6030  002D8A  5184               	movf	_Switch_Train_Move& (0+255),w,b
  6031                           
  6032                           ; Switch size 1, requested type "space"
  6033                           ; Number of cases is 4, Range of values is 0 to 3
  6034                           ; switch strategies available:
  6035                           ; Name         Instructions Cycles
  6036                           ; simple_byte           13     7 (average)
  6037                           ;	Chosen strategy is simple_byte
  6038  002D8C  0A00               	xorlw	0	; case 0
  6039  002D8E  B4D8               	btfsc	status,2,c
  6040  002D90  D769               	goto	l1138
  6041  002D92  0A01               	xorlw	1	; case 1
  6042  002D94  B4D8               	btfsc	status,2,c
  6043  002D96  D798               	goto	l1143
  6044  002D98  0A03               	xorlw	3	; case 2
  6045  002D9A  B4D8               	btfsc	status,2,c
  6046  002D9C  D7B0               	goto	l1145
  6047  002D9E  0A01               	xorlw	1	; case 3
  6048  002DA0  B4D8               	btfsc	status,2,c
  6049  002DA2  D7D6               	goto	l1146
  6050  002DA4                     l1140:
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;train_move_left.c: 315: return(Return_Val);
  6054                           
  6055                           ; BSR set to: 0
  6056  002DA4  51C4               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  6057  002DA6  0012               	return	
  6058  002DA8                     __end_of_Train_Move_Left_Brake:
  6059                           	opt stack 0
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           postdec1	equ	0xFE5
  6067                           fsr1h	equ	0xFE2
  6068                           fsr1l	equ	0xFE1
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _Right_Mountain_From_The_Right *****************
  6072 ;; Defined at:
  6073 ;;		line 105 in file "../train_move_left.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  rc              1    wreg     unsigned char 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;  rc              1   21[BANK0 ] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      unsigned char 
  6080 ;; Registers used:
  6081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6087 ;;      Params:         0       0       0       0       0       0       0       0       0
  6088 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6090 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6091 ;;Total ram usage:        1 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    6
  6094 ;; This function calls:
  6095 ;;		_GETxAPIxVAL
  6096 ;;		_SETxPWM
  6097 ;; This function is called by:
  6098 ;;		_Train_Path
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           	psect	text7
  6103  003280                     __ptext7:
  6104                           	opt stack 0
  6105  003280                     _Right_Mountain_From_The_Right:
  6106                           	opt stack 22
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;incstack = 0
  6110                           ;Right_Mountain_From_The_Right@rc stored from wreg
  6111  003280  0100               	movlb	0	; () banked
  6112  003282  6FAF               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  6113                           
  6114                           ;train_move_left.c: 107: static char Return_Val = 1;
  6115                           ;train_move_left.c: 109: switch (Switch_Moutain){
  6116  003284  D07E               	goto	l1085
  6117  003286  0E03               	movlw	3
  6118  003288  0100               	movlb	0	; () banked
  6119  00328A  19AF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6120  00328C  B4D8               	btfsc	status,2,c
  6121  00328E  D00C               	goto	u7120
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;train_move_left.c: 114: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  6125                           
  6126                           ; BSR set to: 0
  6127                           
  6128                           ;train_move_left.c: 113: }
  6129                           
  6130                           ;train_move_left.c: 112: Mountain_Delay_Counter = 0;
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;train_move_left.c: 111: Switch_Moutain = 1;
  6134  003290  0E00               	movlw	0
  6135  003292  6E14               	movwf	GETxAPIxVAL@index+1,c
  6136  003294  0E35               	movlw	53
  6137  003296  6E13               	movwf	GETxAPIxVAL@index,c
  6138  003298  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6139  00329C  5013               	movf	?_GETxAPIxVAL,w,c
  6140  00329E  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6141  0032A0  5014               	movf	?_GETxAPIxVAL+1,w,c
  6142  0032A2  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6143  0032A4  A0D8               	btfss	status,0,c
  6144  0032A6  D007               	goto	l1089
  6145  0032A8                     u7120:
  6146                           
  6147                           ;train_move_left.c: 116: Switch_Moutain = 1;
  6148  0032A8  0E01               	movlw	1
  6149  0032AA  6E2E               	movwf	_Switch_Moutain,c
  6150                           
  6151                           ;train_move_left.c: 117: Mountain_Delay_Counter = 0;
  6152  0032AC  0E00               	movlw	0
  6153  0032AE  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6154  0032B0  0E00               	movlw	0
  6155  0032B2  6E26               	movwf	_Mountain_Delay_Counter,c
  6156                           
  6157                           ;train_move_left.c: 118: }
  6158  0032B4  D063               	goto	l1103
  6159  0032B6                     l1089:
  6160                           
  6161                           ;train_move_left.c: 119: else{
  6162                           ;train_move_left.c: 120: Mountain_Delay_Counter++;
  6163  0032B6  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6164  0032B8  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6165  0032BA  D060               	goto	l1103
  6166  0032BC  0E04               	movlw	4
  6167  0032BE  0100               	movlb	0	; () banked
  6168  0032C0  19AF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6169  0032C2  A4D8               	btfss	status,2,c
  6170  0032C4  D026               	goto	l1093
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;train_move_left.c: 127: SETxPWM(Train_Move_Pwm_Count, 0);
  6174  0032C6  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6175  0032CA  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6176  0032CE  0E00               	movlw	0
  6177  0032D0  6E21               	movwf	SETxPWM@direction,c
  6178  0032D2  EC26  F01D         	call	_SETxPWM	;wreg free
  6179                           
  6180                           ;train_move_left.c: 128: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  6181  0032D6  0E00               	movlw	0
  6182  0032D8  6E14               	movwf	GETxAPIxVAL@index+1,c
  6183  0032DA  0E2E               	movlw	46
  6184  0032DC  6E13               	movwf	GETxAPIxVAL@index,c
  6185  0032DE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6186  0032E2  0100               	movlb	0	; () banked
  6187  0032E4  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6188  0032E6  5C13               	subwf	?_GETxAPIxVAL,w,c
  6189  0032E8  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6190  0032EA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6191  0032EC  B0D8               	btfsc	status,0,c
  6192  0032EE  D02A               	goto	u7170
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;train_move_left.c: 135: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6196                           
  6197                           ; BSR set to: 0
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;train_move_left.c: 134: }
  6201                           
  6202                           ;train_move_left.c: 133: break;
  6203                           
  6204                           ;train_move_left.c: 132: Return_Val = 0;
  6205                           
  6206                           ;train_move_left.c: 131: Switch_Moutain = 0;
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;train_move_left.c: 129: {
  6210                           ;train_move_left.c: 130: Switch_Train_Move = 0;
  6211  0032F0  0E00               	movlw	0
  6212  0032F2  6E14               	movwf	GETxAPIxVAL@index+1,c
  6213  0032F4  0E1A               	movlw	26
  6214  0032F6  6E13               	movwf	GETxAPIxVAL@index,c
  6215  0032F8  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6216  0032FC  5013               	movf	?_GETxAPIxVAL,w,c
  6217  0032FE  0100               	movlb	0	; () banked
  6218  003300  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6219  003302  5014               	movf	?_GETxAPIxVAL+1,w,c
  6220  003304  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6221  003306  A0D8               	btfss	status,0,c
  6222  003308  D037               	goto	l1102
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;train_move_left.c: 136: {
  6226                           ;train_move_left.c: 137: Train_Move_Pwm_Count--;
  6227  00330A  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6228  00330C  A0D8               	btfss	status,0,c
  6229  00330E  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6230  003310  D02E               	goto	l7770
  6231  003312                     l1093:
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;train_move_left.c: 142: else if (rc == 3){
  6235                           
  6236                           ; BSR set to: 0
  6237  003312  0E03               	movlw	3
  6238  003314  19AF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6239  003316  A4D8               	btfss	status,2,c
  6240  003318  D031               	goto	l1103
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;train_move_left.c: 143: SETxPWM(Train_Move_Pwm_Count, 0);
  6244  00331A  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6245  00331E  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6246  003322  0E00               	movlw	0
  6247  003324  6E21               	movwf	SETxPWM@direction,c
  6248  003326  EC26  F01D         	call	_SETxPWM	;wreg free
  6249                           
  6250                           ;train_move_left.c: 144: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  6251  00332A  0E00               	movlw	0
  6252  00332C  6E14               	movwf	GETxAPIxVAL@index+1,c
  6253  00332E  0E18               	movlw	24
  6254  003330  6E13               	movwf	GETxAPIxVAL@index,c
  6255  003332  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6256  003336  5013               	movf	?_GETxAPIxVAL,w,c
  6257  003338  0100               	movlb	0	; () banked
  6258  00333A  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6259  00333C  5014               	movf	?_GETxAPIxVAL+1,w,c
  6260  00333E  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6261  003340  A0D8               	btfss	status,0,c
  6262  003342  D006               	goto	l1100
  6263  003344                     u7170:
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;train_move_left.c: 145: {
  6267                           ;train_move_left.c: 146: Switch_Train_Move = 0;
  6268  003344  0E00               	movlw	0
  6269  003346  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6270                           
  6271                           ;train_move_left.c: 147: Switch_Moutain = 0;
  6272  003348  0E00               	movlw	0
  6273  00334A  6E2E               	movwf	_Switch_Moutain,c
  6274                           
  6275                           ;train_move_left.c: 148: Return_Val = 0;
  6276  00334C  0E00               	movlw	0
  6277  00334E  D017               	goto	L74
  6278  003350                     l1100:
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;train_move_left.c: 151: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6282                           
  6283                           ; BSR set to: 0
  6284  003350  0E00               	movlw	0
  6285  003352  6E14               	movwf	GETxAPIxVAL@index+1,c
  6286  003354  0E1A               	movlw	26
  6287  003356  6E13               	movwf	GETxAPIxVAL@index,c
  6288  003358  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6289  00335C  5013               	movf	?_GETxAPIxVAL,w,c
  6290  00335E  0100               	movlb	0	; () banked
  6291  003360  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6292  003362  5014               	movf	?_GETxAPIxVAL+1,w,c
  6293  003364  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6294  003366  A0D8               	btfss	status,0,c
  6295  003368  D007               	goto	l1102
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;train_move_left.c: 152: {
  6299                           ;train_move_left.c: 153: Train_Move_Pwm_Count++;
  6300  00336A  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6301  00336C  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6302  00336E                     l7770:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;train_move_left.c: 154: Train_Move_Pwm_Fast_Count = 0;
  6306  00336E  0E00               	movlw	0
  6307  003370  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6308  003372  0E00               	movlw	0
  6309  003374  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6310                           
  6311                           ;train_move_left.c: 155: }
  6312  003376  D002               	goto	l1103
  6313  003378                     l1102:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;train_move_left.c: 156: else{Train_Move_Pwm_Fast_Count++;}
  6317                           
  6318                           ; BSR set to: 0
  6319  003378  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6320  00337A  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6321  00337C                     l1103:
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;train_move_left.c: 157: }
  6325                           ;train_move_left.c: 158: Return_Val = 1;
  6326                           
  6327                           ; BSR set to: 0
  6328                           
  6329                           ; BSR set to: 0
  6330                           
  6331                           ; BSR set to: 0
  6332                           
  6333                           ; BSR set to: 0
  6334  00337C  0E01               	movlw	1
  6335  00337E                     L74:
  6336  00337E  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;train_move_left.c: 163: }
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;train_move_left.c: 162: break;
  6343                           
  6344                           ;train_move_left.c: 161: default:
  6345                           
  6346                           ;train_move_left.c: 159: break;
  6347  003380  D007               	goto	l1091
  6348  003382                     l1085:
  6349                           
  6350                           ; BSR set to: 0
  6351  003382  502E               	movf	_Switch_Moutain,w,c
  6352                           
  6353                           ; Switch size 1, requested type "space"
  6354                           ; Number of cases is 2, Range of values is 0 to 1
  6355                           ; switch strategies available:
  6356                           ; Name         Instructions Cycles
  6357                           ; simple_byte            7     4 (average)
  6358                           ;	Chosen strategy is simple_byte
  6359  003384  0A00               	xorlw	0	; case 0
  6360  003386  B4D8               	btfsc	status,2,c
  6361  003388  D77E               	goto	l1086
  6362  00338A  0A01               	xorlw	1	; case 1
  6363  00338C  B4D8               	btfsc	status,2,c
  6364  00338E  D796               	goto	l1092
  6365  003390                     l1091:
  6366                           
  6367                           ;train_move_left.c: 165: return(Return_Val);
  6368  003390  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  6369  003392  0012               	return	
  6370  003394                     __end_of_Right_Mountain_From_The_Right:
  6371                           	opt stack 0
  6372                           tblptru	equ	0xFF8
  6373                           tblptrh	equ	0xFF7
  6374                           tblptrl	equ	0xFF6
  6375                           tablat	equ	0xFF5
  6376                           postinc0	equ	0xFEE
  6377                           wreg	equ	0xFE8
  6378                           postdec1	equ	0xFE5
  6379                           fsr1h	equ	0xFE2
  6380                           fsr1l	equ	0xFE1
  6381                           status	equ	0xFD8
  6382                           
  6383 ;; *************** function _Right_Mountain_From_The_Left *****************
  6384 ;; Defined at:
  6385 ;;		line 181 in file "../train_move_right.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;  rc              1    wreg     unsigned char 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;  rc              1   21[BANK0 ] unsigned char 
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      unsigned char 
  6392 ;; Registers used:
  6393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6399 ;;      Params:         0       0       0       0       0       0       0       0       0
  6400 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6402 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    6
  6406 ;; This function calls:
  6407 ;;		_GETxAPIxVAL
  6408 ;;		_SETxPWM
  6409 ;; This function is called by:
  6410 ;;		_Train_Path
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text8
  6415  003394                     __ptext8:
  6416                           	opt stack 0
  6417  003394                     _Right_Mountain_From_The_Left:
  6418                           	opt stack 22
  6419                           
  6420                           ;incstack = 0
  6421                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6422  003394  0100               	movlb	0	; () banked
  6423  003396  6FAF               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6424                           
  6425                           ;train_move_right.c: 183: static char Return_Val = 1;
  6426                           ;train_move_right.c: 185: switch (Switch_Moutain){
  6427  003398  D07E               	goto	l1213
  6428  00339A  0E04               	movlw	4
  6429  00339C  0100               	movlb	0	; () banked
  6430  00339E  19AF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6431  0033A0  B4D8               	btfsc	status,2,c
  6432  0033A2  D00C               	goto	u7040
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;train_move_right.c: 190: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  6436                           
  6437                           ; BSR set to: 0
  6438                           
  6439                           ;train_move_right.c: 189: }
  6440                           
  6441                           ;train_move_right.c: 188: Mountain_Delay_Counter = 0;
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;train_move_right.c: 187: Switch_Moutain = 1;
  6445  0033A4  0E00               	movlw	0
  6446  0033A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  6447  0033A8  0E38               	movlw	56
  6448  0033AA  6E13               	movwf	GETxAPIxVAL@index,c
  6449  0033AC  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6450  0033B0  5013               	movf	?_GETxAPIxVAL,w,c
  6451  0033B2  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6452  0033B4  5014               	movf	?_GETxAPIxVAL+1,w,c
  6453  0033B6  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6454  0033B8  A0D8               	btfss	status,0,c
  6455  0033BA  D007               	goto	l1217
  6456  0033BC                     u7040:
  6457                           
  6458                           ;train_move_right.c: 191: Switch_Moutain = 1;
  6459  0033BC  0E01               	movlw	1
  6460  0033BE  6E2E               	movwf	_Switch_Moutain,c
  6461                           
  6462                           ;train_move_right.c: 192: Mountain_Delay_Counter = 0;
  6463  0033C0  0E00               	movlw	0
  6464  0033C2  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6465  0033C4  0E00               	movlw	0
  6466  0033C6  6E26               	movwf	_Mountain_Delay_Counter,c
  6467                           
  6468                           ;train_move_right.c: 193: }
  6469  0033C8  D063               	goto	l1231
  6470  0033CA                     l1217:
  6471                           
  6472                           ;train_move_right.c: 194: else{
  6473                           ;train_move_right.c: 195: Mountain_Delay_Counter++;
  6474  0033CA  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6475  0033CC  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6476  0033CE  D060               	goto	l1231
  6477  0033D0  0E03               	movlw	3
  6478  0033D2  0100               	movlb	0	; () banked
  6479  0033D4  19AF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6480  0033D6  A4D8               	btfss	status,2,c
  6481  0033D8  D025               	goto	l1221
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;train_move_right.c: 201: SETxPWM(Train_Move_Pwm_Count, 1);
  6485  0033DA  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6486  0033DE  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6487  0033E2  0E01               	movlw	1
  6488  0033E4  6E21               	movwf	SETxPWM@direction,c
  6489  0033E6  EC26  F01D         	call	_SETxPWM	;wreg free
  6490                           
  6491                           ;train_move_right.c: 202: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  6492  0033EA  0E00               	movlw	0
  6493  0033EC  6E14               	movwf	GETxAPIxVAL@index+1,c
  6494  0033EE  0E2F               	movlw	47
  6495  0033F0  6E13               	movwf	GETxAPIxVAL@index,c
  6496  0033F2  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6497  0033F6  5013               	movf	?_GETxAPIxVAL,w,c
  6498  0033F8  0100               	movlb	0	; () banked
  6499  0033FA  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6500  0033FC  5014               	movf	?_GETxAPIxVAL+1,w,c
  6501  0033FE  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6502  003400  B0D8               	btfsc	status,0,c
  6503  003402  D029               	goto	u7090
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;train_move_right.c: 209: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6507                           
  6508                           ; BSR set to: 0
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;train_move_right.c: 208: }
  6512                           
  6513                           ;train_move_right.c: 207: break;
  6514                           
  6515                           ;train_move_right.c: 206: Return_Val = 0;
  6516                           
  6517                           ;train_move_right.c: 205: Switch_Moutain = 0;
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;train_move_right.c: 203: {
  6521                           ;train_move_right.c: 204: Switch_Train_Move = 0;
  6522  003404  0E00               	movlw	0
  6523  003406  6E14               	movwf	GETxAPIxVAL@index+1,c
  6524  003408  0E1A               	movlw	26
  6525  00340A  6E13               	movwf	GETxAPIxVAL@index,c
  6526  00340C  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6527  003410  5013               	movf	?_GETxAPIxVAL,w,c
  6528  003412  0100               	movlb	0	; () banked
  6529  003414  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6530  003416  5014               	movf	?_GETxAPIxVAL+1,w,c
  6531  003418  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6532  00341A  A0D8               	btfss	status,0,c
  6533  00341C  D037               	goto	l1230
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;train_move_right.c: 210: {
  6537                           ;train_move_right.c: 211: Train_Move_Pwm_Count++;
  6538  00341E  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6539  003420  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6540  003422  D02F               	goto	l7714
  6541  003424                     l1221:
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;train_move_right.c: 216: else if (rc == 4){
  6545                           
  6546                           ; BSR set to: 0
  6547  003424  0E04               	movlw	4
  6548  003426  19AF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6549  003428  A4D8               	btfss	status,2,c
  6550  00342A  D032               	goto	l1231
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;train_move_right.c: 217: SETxPWM(Train_Move_Pwm_Count, 1);
  6554  00342C  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6555  003430  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6556  003434  0E01               	movlw	1
  6557  003436  6E21               	movwf	SETxPWM@direction,c
  6558  003438  EC26  F01D         	call	_SETxPWM	;wreg free
  6559                           
  6560                           ;train_move_right.c: 218: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  6561  00343C  0E00               	movlw	0
  6562  00343E  6E14               	movwf	GETxAPIxVAL@index+1,c
  6563  003440  0E17               	movlw	23
  6564  003442  6E13               	movwf	GETxAPIxVAL@index,c
  6565  003444  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6566  003448  0100               	movlb	0	; () banked
  6567  00344A  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6568  00344C  5C13               	subwf	?_GETxAPIxVAL,w,c
  6569  00344E  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6570  003450  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6571  003452  A0D8               	btfss	status,0,c
  6572  003454  D006               	goto	l1228
  6573  003456                     u7090:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;train_move_right.c: 219: {
  6577                           ;train_move_right.c: 220: Switch_Train_Move = 0;
  6578  003456  0E00               	movlw	0
  6579  003458  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6580                           
  6581                           ;train_move_right.c: 221: Switch_Moutain = 0;
  6582  00345A  0E00               	movlw	0
  6583  00345C  6E2E               	movwf	_Switch_Moutain,c
  6584                           
  6585                           ;train_move_right.c: 222: Return_Val = 0;
  6586  00345E  0E00               	movlw	0
  6587  003460  D018               	goto	L77
  6588  003462                     l1228:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;train_move_right.c: 225: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6592                           
  6593                           ; BSR set to: 0
  6594  003462  0E00               	movlw	0
  6595  003464  6E14               	movwf	GETxAPIxVAL@index+1,c
  6596  003466  0E1A               	movlw	26
  6597  003468  6E13               	movwf	GETxAPIxVAL@index,c
  6598  00346A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6599  00346E  5013               	movf	?_GETxAPIxVAL,w,c
  6600  003470  0100               	movlb	0	; () banked
  6601  003472  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6602  003474  5014               	movf	?_GETxAPIxVAL+1,w,c
  6603  003476  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6604  003478  A0D8               	btfss	status,0,c
  6605  00347A  D008               	goto	l1230
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;train_move_right.c: 226: {
  6609                           ;train_move_right.c: 227: Train_Move_Pwm_Count--;
  6610  00347C  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6611  00347E  A0D8               	btfss	status,0,c
  6612  003480  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6613  003482                     l7714:
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;train_move_right.c: 228: Train_Move_Pwm_Fast_Count = 0;
  6617  003482  0E00               	movlw	0
  6618  003484  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6619  003486  0E00               	movlw	0
  6620  003488  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6621                           
  6622                           ;train_move_right.c: 229: }
  6623  00348A  D002               	goto	l1231
  6624  00348C                     l1230:
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;train_move_right.c: 230: else{Train_Move_Pwm_Fast_Count++;}
  6628                           
  6629                           ; BSR set to: 0
  6630  00348C  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6631  00348E  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6632  003490                     l1231:
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;train_move_right.c: 231: }
  6636                           ;train_move_right.c: 232: Return_Val = 1;
  6637                           
  6638                           ; BSR set to: 0
  6639                           
  6640                           ; BSR set to: 0
  6641                           
  6642                           ; BSR set to: 0
  6643                           
  6644                           ; BSR set to: 0
  6645  003490  0E01               	movlw	1
  6646  003492                     L77:
  6647  003492  6E48               	movwf	Right_Mountain_From_The_Left@Return_Val,c
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;train_move_right.c: 237: }
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;train_move_right.c: 236: break;
  6654                           
  6655                           ;train_move_right.c: 235: default:
  6656                           
  6657                           ;train_move_right.c: 233: break;
  6658  003494  D007               	goto	l1219
  6659  003496                     l1213:
  6660                           
  6661                           ; BSR set to: 0
  6662  003496  502E               	movf	_Switch_Moutain,w,c
  6663                           
  6664                           ; Switch size 1, requested type "space"
  6665                           ; Number of cases is 2, Range of values is 0 to 1
  6666                           ; switch strategies available:
  6667                           ; Name         Instructions Cycles
  6668                           ; simple_byte            7     4 (average)
  6669                           ;	Chosen strategy is simple_byte
  6670  003498  0A00               	xorlw	0	; case 0
  6671  00349A  B4D8               	btfsc	status,2,c
  6672  00349C  D77E               	goto	l1214
  6673  00349E  0A01               	xorlw	1	; case 1
  6674  0034A0  B4D8               	btfsc	status,2,c
  6675  0034A2  D796               	goto	l1220
  6676  0034A4                     l1219:
  6677                           
  6678                           ;train_move_right.c: 239: return(Return_Val);
  6679  0034A4  5048               	movf	Right_Mountain_From_The_Left@Return_Val,w,c
  6680  0034A6  0012               	return	
  6681  0034A8                     __end_of_Right_Mountain_From_The_Left:
  6682                           	opt stack 0
  6683                           tblptru	equ	0xFF8
  6684                           tblptrh	equ	0xFF7
  6685                           tblptrl	equ	0xFF6
  6686                           tablat	equ	0xFF5
  6687                           postinc0	equ	0xFEE
  6688                           wreg	equ	0xFE8
  6689                           postdec1	equ	0xFE5
  6690                           fsr1h	equ	0xFE2
  6691                           fsr1l	equ	0xFE1
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _Left_Mountain_From_The_Right *****************
  6695 ;; Defined at:
  6696 ;;		line 182 in file "../train_move_left.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  rc              1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  rc              1   21[BANK0 ] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      unsigned char 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0
  6711 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6713 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6714 ;;Total ram usage:        1 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    6
  6717 ;; This function calls:
  6718 ;;		_GETxAPIxVAL
  6719 ;;		_SETxPWM
  6720 ;; This function is called by:
  6721 ;;		_Train_Path
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text9
  6726  0035BA                     __ptext9:
  6727                           	opt stack 0
  6728  0035BA                     _Left_Mountain_From_The_Right:
  6729                           	opt stack 22
  6730                           
  6731                           ;incstack = 0
  6732                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6733  0035BA  0100               	movlb	0	; () banked
  6734  0035BC  6FAF               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6735                           
  6736                           ;train_move_left.c: 184: static char Return_Val = 1;
  6737                           ;train_move_left.c: 186: switch (Switch_Moutain){
  6738  0035BE  D07C               	goto	l1110
  6739  0035C0  0100               	movlb	0	; () banked
  6740  0035C2  05AF               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6741  0035C4  B4D8               	btfsc	status,2,c
  6742  0035C6  D00C               	goto	u7200
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;train_move_left.c: 191: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6746                           
  6747                           ; BSR set to: 0
  6748                           
  6749                           ;train_move_left.c: 190: }
  6750                           
  6751                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;train_move_left.c: 188: Switch_Moutain = 1;
  6755  0035C8  0E00               	movlw	0
  6756  0035CA  6E14               	movwf	GETxAPIxVAL@index+1,c
  6757  0035CC  0E3A               	movlw	58
  6758  0035CE  6E13               	movwf	GETxAPIxVAL@index,c
  6759  0035D0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6760  0035D4  5013               	movf	?_GETxAPIxVAL,w,c
  6761  0035D6  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6762  0035D8  5014               	movf	?_GETxAPIxVAL+1,w,c
  6763  0035DA  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6764  0035DC  A0D8               	btfss	status,0,c
  6765  0035DE  D007               	goto	l1114
  6766  0035E0                     u7200:
  6767                           
  6768                           ;train_move_left.c: 192: Switch_Moutain = 1;
  6769  0035E0  0E01               	movlw	1
  6770  0035E2  6E2E               	movwf	_Switch_Moutain,c
  6771                           
  6772                           ;train_move_left.c: 193: Mountain_Delay_Counter = 0;
  6773  0035E4  0E00               	movlw	0
  6774  0035E6  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6775  0035E8  0E00               	movlw	0
  6776  0035EA  6E26               	movwf	_Mountain_Delay_Counter,c
  6777                           
  6778                           ;train_move_left.c: 194: }
  6779  0035EC  D062               	goto	l1128
  6780  0035EE                     l1114:
  6781                           
  6782                           ;train_move_left.c: 195: else{
  6783                           ;train_move_left.c: 196: Mountain_Delay_Counter++;
  6784  0035EE  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6785  0035F0  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6786  0035F2  D05F               	goto	l1128
  6787  0035F4  0E02               	movlw	2
  6788  0035F6  0100               	movlb	0	; () banked
  6789  0035F8  19AF               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6790  0035FA  A4D8               	btfss	status,2,c
  6791  0035FC  D025               	goto	l1118
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;train_move_left.c: 202: SETxPWM(Train_Move_Pwm_Count, 0);
  6795  0035FE  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6796  003602  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6797  003606  0E00               	movlw	0
  6798  003608  6E21               	movwf	SETxPWM@direction,c
  6799  00360A  EC26  F01D         	call	_SETxPWM	;wreg free
  6800                           
  6801                           ;train_move_left.c: 203: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6802  00360E  0E00               	movlw	0
  6803  003610  6E14               	movwf	GETxAPIxVAL@index+1,c
  6804  003612  0E34               	movlw	52
  6805  003614  6E13               	movwf	GETxAPIxVAL@index,c
  6806  003616  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6807  00361A  5013               	movf	?_GETxAPIxVAL,w,c
  6808  00361C  0100               	movlb	0	; () banked
  6809  00361E  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6810  003620  5014               	movf	?_GETxAPIxVAL+1,w,c
  6811  003622  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6812  003624  B0D8               	btfsc	status,0,c
  6813  003626  D028               	goto	u7250
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;train_move_left.c: 210: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6817                           
  6818                           ; BSR set to: 0
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;train_move_left.c: 209: }
  6822                           
  6823                           ;train_move_left.c: 208: break;
  6824                           
  6825                           ;train_move_left.c: 207: Return_Val = 0;
  6826                           
  6827                           ;train_move_left.c: 206: Switch_Moutain = 0;
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;train_move_left.c: 204: {
  6831                           ;train_move_left.c: 205: Switch_Train_Move = 0;
  6832  003628  0E00               	movlw	0
  6833  00362A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6834  00362C  0E1A               	movlw	26
  6835  00362E  6E13               	movwf	GETxAPIxVAL@index,c
  6836  003630  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6837  003634  5013               	movf	?_GETxAPIxVAL,w,c
  6838  003636  0100               	movlb	0	; () banked
  6839  003638  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6840  00363A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6841  00363C  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6842  00363E  A0D8               	btfss	status,0,c
  6843  003640  D036               	goto	l1127
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;train_move_left.c: 211: {
  6847                           ;train_move_left.c: 212: Train_Move_Pwm_Count++;
  6848  003642  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6849  003644  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6850  003646  D02E               	goto	l7826
  6851  003648                     l1118:
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;train_move_left.c: 217: else if (rc == 1){
  6855                           
  6856                           ; BSR set to: 0
  6857  003648  05AF               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6858  00364A  A4D8               	btfss	status,2,c
  6859  00364C  D032               	goto	l1128
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;train_move_left.c: 218: SETxPWM(Train_Move_Pwm_Count, 0);
  6863  00364E  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6864  003652  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6865  003656  0E00               	movlw	0
  6866  003658  6E21               	movwf	SETxPWM@direction,c
  6867  00365A  EC26  F01D         	call	_SETxPWM	;wreg free
  6868                           
  6869                           ;train_move_left.c: 219: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6870  00365E  0E00               	movlw	0
  6871  003660  6E14               	movwf	GETxAPIxVAL@index+1,c
  6872  003662  0E18               	movlw	24
  6873  003664  6E13               	movwf	GETxAPIxVAL@index,c
  6874  003666  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6875  00366A  0100               	movlb	0	; () banked
  6876  00366C  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6877  00366E  5C13               	subwf	?_GETxAPIxVAL,w,c
  6878  003670  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6879  003672  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6880  003674  A0D8               	btfss	status,0,c
  6881  003676  D006               	goto	l1125
  6882  003678                     u7250:
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;train_move_left.c: 220: {
  6886                           ;train_move_left.c: 221: Switch_Train_Move = 0;
  6887  003678  0E00               	movlw	0
  6888  00367A  6F84               	movwf	_Switch_Train_Move& (0+255),b
  6889                           
  6890                           ;train_move_left.c: 222: Switch_Moutain = 0;
  6891  00367C  0E00               	movlw	0
  6892  00367E  6E2E               	movwf	_Switch_Moutain,c
  6893                           
  6894                           ;train_move_left.c: 223: Return_Val = 0;
  6895  003680  0E00               	movlw	0
  6896  003682  D018               	goto	L80
  6897  003684                     l1125:
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;train_move_left.c: 226: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6901                           
  6902                           ; BSR set to: 0
  6903  003684  0E00               	movlw	0
  6904  003686  6E14               	movwf	GETxAPIxVAL@index+1,c
  6905  003688  0E1A               	movlw	26
  6906  00368A  6E13               	movwf	GETxAPIxVAL@index,c
  6907  00368C  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  6908  003690  5013               	movf	?_GETxAPIxVAL,w,c
  6909  003692  0100               	movlb	0	; () banked
  6910  003694  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6911  003696  5014               	movf	?_GETxAPIxVAL+1,w,c
  6912  003698  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6913  00369A  A0D8               	btfss	status,0,c
  6914  00369C  D008               	goto	l1127
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;train_move_left.c: 227: {
  6918                           ;train_move_left.c: 228: Train_Move_Pwm_Count--;
  6919  00369E  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6920  0036A0  A0D8               	btfss	status,0,c
  6921  0036A2  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6922  0036A4                     l7826:
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;train_move_left.c: 229: Train_Move_Pwm_Fast_Count = 0;
  6926  0036A4  0E00               	movlw	0
  6927  0036A6  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6928  0036A8  0E00               	movlw	0
  6929  0036AA  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6930                           
  6931                           ;train_move_left.c: 230: }
  6932  0036AC  D002               	goto	l1128
  6933  0036AE                     l1127:
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;train_move_left.c: 231: else{Train_Move_Pwm_Fast_Count++;}
  6937                           
  6938                           ; BSR set to: 0
  6939  0036AE  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6940  0036B0  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6941  0036B2                     l1128:
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;train_move_left.c: 232: }
  6945                           ;train_move_left.c: 233: Return_Val = 1;
  6946                           
  6947                           ; BSR set to: 0
  6948                           
  6949                           ; BSR set to: 0
  6950                           
  6951                           ; BSR set to: 0
  6952                           
  6953                           ; BSR set to: 0
  6954  0036B2  0E01               	movlw	1
  6955  0036B4                     L80:
  6956  0036B4  6E4A               	movwf	Left_Mountain_From_The_Right@Return_Val,c
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;train_move_left.c: 238: }
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;train_move_left.c: 237: break;
  6963                           
  6964                           ;train_move_left.c: 236: default:
  6965                           
  6966                           ;train_move_left.c: 234: break;
  6967  0036B6  D007               	goto	l1116
  6968  0036B8                     l1110:
  6969                           
  6970                           ; BSR set to: 0
  6971  0036B8  502E               	movf	_Switch_Moutain,w,c
  6972                           
  6973                           ; Switch size 1, requested type "space"
  6974                           ; Number of cases is 2, Range of values is 0 to 1
  6975                           ; switch strategies available:
  6976                           ; Name         Instructions Cycles
  6977                           ; simple_byte            7     4 (average)
  6978                           ;	Chosen strategy is simple_byte
  6979  0036BA  0A00               	xorlw	0	; case 0
  6980  0036BC  B4D8               	btfsc	status,2,c
  6981  0036BE  D780               	goto	l1111
  6982  0036C0  0A01               	xorlw	1	; case 1
  6983  0036C2  B4D8               	btfsc	status,2,c
  6984  0036C4  D797               	goto	l1117
  6985  0036C6                     l1116:
  6986                           
  6987                           ;train_move_left.c: 240: return(Return_Val);
  6988  0036C6  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  6989  0036C8  0012               	return	
  6990  0036CA                     __end_of_Left_Mountain_From_The_Right:
  6991                           	opt stack 0
  6992                           tblptru	equ	0xFF8
  6993                           tblptrh	equ	0xFF7
  6994                           tblptrl	equ	0xFF6
  6995                           tablat	equ	0xFF5
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           postdec1	equ	0xFE5
  6999                           fsr1h	equ	0xFE2
  7000                           fsr1l	equ	0xFE1
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function _Left_Mountain_From_The_Left *****************
  7004 ;; Defined at:
  7005 ;;		line 106 in file "../train_move_right.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  rc              1    wreg     unsigned char 
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  rc              1   21[BANK0 ] unsigned char 
  7010 ;; Return value:  Size  Location     Type
  7011 ;;                  1    wreg      unsigned char 
  7012 ;; Registers used:
  7013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7019 ;;      Params:         0       0       0       0       0       0       0       0       0
  7020 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7021 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7022 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7023 ;;Total ram usage:        1 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; Hardware stack levels required when called:    6
  7026 ;; This function calls:
  7027 ;;		_GETxAPIxVAL
  7028 ;;		_SETxPWM
  7029 ;; This function is called by:
  7030 ;;		_Train_Path
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text10
  7035  0034A8                     __ptext10:
  7036                           	opt stack 0
  7037  0034A8                     _Left_Mountain_From_The_Left:
  7038                           	opt stack 22
  7039                           
  7040                           ;incstack = 0
  7041                           ;Left_Mountain_From_The_Left@rc stored from wreg
  7042  0034A8  0100               	movlb	0	; () banked
  7043  0034AA  6FAF               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  7044                           
  7045                           ;train_move_right.c: 108: static char Return_Val = 1;
  7046                           ;train_move_right.c: 110: switch (Switch_Moutain){
  7047  0034AC  D07D               	goto	l1188
  7048  0034AE  0E02               	movlw	2
  7049  0034B0  0100               	movlb	0	; () banked
  7050  0034B2  19AF               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7051  0034B4  B4D8               	btfsc	status,2,c
  7052  0034B6  D00C               	goto	u6960
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;train_move_right.c: 115: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  7056                           
  7057                           ; BSR set to: 0
  7058                           
  7059                           ;train_move_right.c: 114: }
  7060                           
  7061                           ;train_move_right.c: 113: Mountain_Delay_Counter = 0;
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;train_move_right.c: 112: Switch_Moutain = 1;
  7065  0034B8  0E00               	movlw	0
  7066  0034BA  6E14               	movwf	GETxAPIxVAL@index+1,c
  7067  0034BC  0E3B               	movlw	59
  7068  0034BE  6E13               	movwf	GETxAPIxVAL@index,c
  7069  0034C0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  7070  0034C4  5013               	movf	?_GETxAPIxVAL,w,c
  7071  0034C6  5C26               	subwf	_Mountain_Delay_Counter,w,c
  7072  0034C8  5014               	movf	?_GETxAPIxVAL+1,w,c
  7073  0034CA  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  7074  0034CC  A0D8               	btfss	status,0,c
  7075  0034CE  D007               	goto	l1192
  7076  0034D0                     u6960:
  7077                           
  7078                           ;train_move_right.c: 116: Switch_Moutain = 1;
  7079  0034D0  0E01               	movlw	1
  7080  0034D2  6E2E               	movwf	_Switch_Moutain,c
  7081                           
  7082                           ;train_move_right.c: 117: Mountain_Delay_Counter = 0;
  7083  0034D4  0E00               	movlw	0
  7084  0034D6  6E27               	movwf	_Mountain_Delay_Counter+1,c
  7085  0034D8  0E00               	movlw	0
  7086  0034DA  6E26               	movwf	_Mountain_Delay_Counter,c
  7087                           
  7088                           ;train_move_right.c: 118: }
  7089  0034DC  D062               	goto	l1206
  7090  0034DE                     l1192:
  7091                           
  7092                           ;train_move_right.c: 119: else{
  7093                           ;train_move_right.c: 120: Mountain_Delay_Counter++;
  7094  0034DE  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  7095  0034E0  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  7096  0034E2  D05F               	goto	l1206
  7097  0034E4  0100               	movlb	0	; () banked
  7098  0034E6  05AF               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7099  0034E8  A4D8               	btfss	status,2,c
  7100  0034EA  D026               	goto	l1196
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;train_move_right.c: 126: SETxPWM(Train_Move_Pwm_Count, 1);
  7104  0034EC  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7105  0034F0  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7106  0034F4  0E01               	movlw	1
  7107  0034F6  6E21               	movwf	SETxPWM@direction,c
  7108  0034F8  EC26  F01D         	call	_SETxPWM	;wreg free
  7109                           
  7110                           ;train_move_right.c: 127: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  7111  0034FC  0E00               	movlw	0
  7112  0034FE  6E14               	movwf	GETxAPIxVAL@index+1,c
  7113  003500  0E31               	movlw	49
  7114  003502  6E13               	movwf	GETxAPIxVAL@index,c
  7115  003504  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  7116  003508  0100               	movlb	0	; () banked
  7117  00350A  5182               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  7118  00350C  5C13               	subwf	?_GETxAPIxVAL,w,c
  7119  00350E  5183               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7120  003510  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  7121  003512  B0D8               	btfsc	status,0,c
  7122  003514  D02A               	goto	u7010
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;train_move_right.c: 134: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  7126                           
  7127                           ; BSR set to: 0
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;train_move_right.c: 133: }
  7131                           
  7132                           ;train_move_right.c: 132: break;
  7133                           
  7134                           ;train_move_right.c: 131: Return_Val = 0;
  7135                           
  7136                           ;train_move_right.c: 130: Switch_Moutain = 0;
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;train_move_right.c: 128: {
  7140                           ;train_move_right.c: 129: Switch_Train_Move = 0;
  7141  003516  0E00               	movlw	0
  7142  003518  6E14               	movwf	GETxAPIxVAL@index+1,c
  7143  00351A  0E1A               	movlw	26
  7144  00351C  6E13               	movwf	GETxAPIxVAL@index,c
  7145  00351E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  7146  003522  5013               	movf	?_GETxAPIxVAL,w,c
  7147  003524  0100               	movlb	0	; () banked
  7148  003526  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7149  003528  5014               	movf	?_GETxAPIxVAL+1,w,c
  7150  00352A  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7151  00352C  A0D8               	btfss	status,0,c
  7152  00352E  D037               	goto	l1205
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;train_move_right.c: 135: {
  7156                           ;train_move_right.c: 136: Train_Move_Pwm_Count--;
  7157  003530  0782               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  7158  003532  A0D8               	btfss	status,0,c
  7159  003534  0783               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7160  003536  D02E               	goto	l7658
  7161  003538                     l1196:
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;train_move_right.c: 141: else if (rc == 2){
  7165                           
  7166                           ; BSR set to: 0
  7167  003538  0E02               	movlw	2
  7168  00353A  19AF               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7169  00353C  A4D8               	btfss	status,2,c
  7170  00353E  D031               	goto	l1206
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;train_move_right.c: 142: SETxPWM(Train_Move_Pwm_Count, 1);
  7174  003540  C082  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7175  003544  C083  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7176  003548  0E01               	movlw	1
  7177  00354A  6E21               	movwf	SETxPWM@direction,c
  7178  00354C  EC26  F01D         	call	_SETxPWM	;wreg free
  7179                           
  7180                           ;train_move_right.c: 143: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  7181  003550  0E00               	movlw	0
  7182  003552  6E14               	movwf	GETxAPIxVAL@index+1,c
  7183  003554  0E17               	movlw	23
  7184  003556  6E13               	movwf	GETxAPIxVAL@index,c
  7185  003558  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  7186  00355C  5013               	movf	?_GETxAPIxVAL,w,c
  7187  00355E  0100               	movlb	0	; () banked
  7188  003560  5D82               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  7189  003562  5014               	movf	?_GETxAPIxVAL+1,w,c
  7190  003564  5983               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7191  003566  A0D8               	btfss	status,0,c
  7192  003568  D006               	goto	l1203
  7193  00356A                     u7010:
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;train_move_right.c: 144: {
  7197                           ;train_move_right.c: 145: Switch_Train_Move = 0;
  7198  00356A  0E00               	movlw	0
  7199  00356C  6F84               	movwf	_Switch_Train_Move& (0+255),b
  7200                           
  7201                           ;train_move_right.c: 146: Switch_Moutain = 0;
  7202  00356E  0E00               	movlw	0
  7203  003570  6E2E               	movwf	_Switch_Moutain,c
  7204                           
  7205                           ;train_move_right.c: 147: Return_Val = 0;
  7206  003572  0E00               	movlw	0
  7207  003574  D017               	goto	L83
  7208  003576                     l1203:
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;train_move_right.c: 150: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  7212                           
  7213                           ; BSR set to: 0
  7214  003576  0E00               	movlw	0
  7215  003578  6E14               	movwf	GETxAPIxVAL@index+1,c
  7216  00357A  0E1A               	movlw	26
  7217  00357C  6E13               	movwf	GETxAPIxVAL@index,c
  7218  00357E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  7219  003582  5013               	movf	?_GETxAPIxVAL,w,c
  7220  003584  0100               	movlb	0	; () banked
  7221  003586  5D66               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7222  003588  5014               	movf	?_GETxAPIxVAL+1,w,c
  7223  00358A  5967               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7224  00358C  A0D8               	btfss	status,0,c
  7225  00358E  D007               	goto	l1205
  7226                           
  7227                           ; BSR set to: 0
  7228                           ;train_move_right.c: 151: {
  7229                           ;train_move_right.c: 152: Train_Move_Pwm_Count++;
  7230  003590  4B82               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  7231  003592  2B83               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7232  003594                     l7658:
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;train_move_right.c: 153: Train_Move_Pwm_Fast_Count = 0;
  7236  003594  0E00               	movlw	0
  7237  003596  6F67               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  7238  003598  0E00               	movlw	0
  7239  00359A  6F66               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  7240                           
  7241                           ;train_move_right.c: 154: }
  7242  00359C  D002               	goto	l1206
  7243  00359E                     l1205:
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;train_move_right.c: 155: else {Train_Move_Pwm_Fast_Count++;}
  7247                           
  7248                           ; BSR set to: 0
  7249  00359E  4B66               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  7250  0035A0  2B67               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  7251  0035A2                     l1206:
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;train_move_right.c: 156: }
  7255                           ;train_move_right.c: 157: Return_Val = 1;
  7256                           
  7257                           ; BSR set to: 0
  7258                           
  7259                           ; BSR set to: 0
  7260                           
  7261                           ; BSR set to: 0
  7262                           
  7263                           ; BSR set to: 0
  7264  0035A2  0E01               	movlw	1
  7265  0035A4                     L83:
  7266  0035A4  6E49               	movwf	Left_Mountain_From_The_Left@Return_Val,c
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;train_move_right.c: 162: }
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;train_move_right.c: 161: break;
  7273                           
  7274                           ;train_move_right.c: 160: default:
  7275                           
  7276                           ;train_move_right.c: 158: break;
  7277  0035A6  D007               	goto	l1194
  7278  0035A8                     l1188:
  7279                           
  7280                           ; BSR set to: 0
  7281  0035A8  502E               	movf	_Switch_Moutain,w,c
  7282                           
  7283                           ; Switch size 1, requested type "space"
  7284                           ; Number of cases is 2, Range of values is 0 to 1
  7285                           ; switch strategies available:
  7286                           ; Name         Instructions Cycles
  7287                           ; simple_byte            7     4 (average)
  7288                           ;	Chosen strategy is simple_byte
  7289  0035AA  0A00               	xorlw	0	; case 0
  7290  0035AC  B4D8               	btfsc	status,2,c
  7291  0035AE  D77F               	goto	l1189
  7292  0035B0  0A01               	xorlw	1	; case 1
  7293  0035B2  B4D8               	btfsc	status,2,c
  7294  0035B4  D797               	goto	l1195
  7295  0035B6                     l1194:
  7296                           
  7297                           ;train_move_right.c: 164: return(Return_Val);
  7298  0035B6  5049               	movf	Left_Mountain_From_The_Left@Return_Val,w,c
  7299  0035B8  0012               	return	
  7300  0035BA                     __end_of_Left_Mountain_From_The_Left:
  7301                           	opt stack 0
  7302                           tblptru	equ	0xFF8
  7303                           tblptrh	equ	0xFF7
  7304                           tblptrl	equ	0xFF6
  7305                           tablat	equ	0xFF5
  7306                           postinc0	equ	0xFEE
  7307                           wreg	equ	0xFE8
  7308                           postdec1	equ	0xFE5
  7309                           fsr1h	equ	0xFE2
  7310                           fsr1l	equ	0xFE1
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function _SETxPWM *****************
  7314 ;; Defined at:
  7315 ;;		line 20 in file "../set_pwm.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  speed           2   30[COMRAM] unsigned int 
  7318 ;;  direction       1   32[COMRAM] unsigned char 
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;  pwm_speed       2   35[COMRAM] unsigned int 
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7330 ;;      Params:         3       0       0       0       0       0       0       0       0
  7331 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7332 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7333 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7334 ;;Total ram usage:        7 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    5
  7337 ;; This function calls:
  7338 ;;		_GETxAPIxVAL
  7339 ;;		_SETxAPIxVAL
  7340 ;; This function is called by:
  7341 ;;		_Update_StateMchn
  7342 ;;		_Train_Move_Left_Start
  7343 ;;		_Right_Mountain_From_The_Right
  7344 ;;		_Left_Mountain_From_The_Right
  7345 ;;		_Train_Move_Left_Brake
  7346 ;;		_Train_Move_Right_Start
  7347 ;;		_Left_Mountain_From_The_Left
  7348 ;;		_Right_Mountain_From_The_Left
  7349 ;;		_Train_Move_Right_Brake
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text11
  7354  003A4C                     __ptext11:
  7355                           	opt stack 0
  7356  003A4C                     _SETxPWM:
  7357                           	opt stack 22
  7358                           
  7359                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7360                           
  7361                           ;incstack = 0
  7362  003A4C  0E01               	movlw	1
  7363  003A4E  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7364  003A50  6824               	setf	SETxPWM@pwm_speed,c
  7365                           
  7366                           ;set_pwm.c: 24: if (GETxAPIxVAL(86) != direction){
  7367  003A52  5021               	movf	SETxPWM@direction,w,c
  7368  003A54  6E22               	movwf	??_SETxPWM& (0+255),c
  7369  003A56  6A23               	clrf	(??_SETxPWM+1)& (0+255),c
  7370  003A58  0E00               	movlw	0
  7371  003A5A  6E14               	movwf	GETxAPIxVAL@index+1,c
  7372  003A5C  0E56               	movlw	86
  7373  003A5E  6E13               	movwf	GETxAPIxVAL@index,c
  7374  003A60  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  7375  003A64  5022               	movf	??_SETxPWM,w,c
  7376  003A66  1813               	xorwf	?_GETxAPIxVAL,w,c
  7377  003A68  E104               	bnz	u6650
  7378  003A6A  5023               	movf	??_SETxPWM+1,w,c
  7379  003A6C  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  7380  003A6E  B4D8               	btfsc	status,2,c
  7381  003A70  D009               	goto	l1261
  7382  003A72                     u6650:
  7383                           
  7384                           ;set_pwm.c: 25: SETxAPIxVAL(86, direction);
  7385  003A72  0E00               	movlw	0
  7386  003A74  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7387  003A76  0E56               	movlw	86
  7388  003A78  6E19               	movwf	SETxAPIxVAL@index,c
  7389  003A7A  C021  F01B         	movff	SETxPWM@direction,SETxAPIxVAL@value
  7390  003A7E  6A1C               	clrf	SETxAPIxVAL@value+1,c
  7391  003A80  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7392  003A84                     l1261:
  7393                           
  7394                           ;set_pwm.c: 26: }
  7395                           ;set_pwm.c: 28: if (direction == 0){
  7396  003A84  5021               	movf	SETxPWM@direction,w,c
  7397  003A86  A4D8               	btfss	status,2,c
  7398  003A88  D01C               	goto	l1262
  7399                           
  7400                           ;set_pwm.c: 29: pwm_speed = 511 - (speed * 2);
  7401  003A8A  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7402  003A8E  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7403  003A92  90D8               	bcf	status,0,c
  7404  003A94  3622               	rlcf	??_SETxPWM,f,c
  7405  003A96  3623               	rlcf	??_SETxPWM+1,f,c
  7406  003A98  1E22               	comf	??_SETxPWM,f,c
  7407  003A9A  1E23               	comf	??_SETxPWM+1,f,c
  7408  003A9C  4A22               	infsnz	??_SETxPWM,f,c
  7409  003A9E  2A23               	incf	??_SETxPWM+1,f,c
  7410  003AA0  0EFF               	movlw	255
  7411  003AA2  2422               	addwf	??_SETxPWM,w,c
  7412  003AA4  6E24               	movwf	SETxPWM@pwm_speed,c
  7413  003AA6  0E01               	movlw	1
  7414  003AA8  2023               	addwfc	??_SETxPWM+1,w,c
  7415  003AAA  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7416                           
  7417                           ;set_pwm.c: 30: SETxAPIxVAL(88, pwm_speed);
  7418  003AAC  0E00               	movlw	0
  7419  003AAE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7420  003AB0  0E58               	movlw	88
  7421  003AB2  6E19               	movwf	SETxAPIxVAL@index,c
  7422  003AB4  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7423  003AB8  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7424  003ABC  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7425                           
  7426                           ;set_pwm.c: 31: }
  7427  003AC0  0012               	return	
  7428  003AC2                     l1262:
  7429                           
  7430                           ;set_pwm.c: 32: else if (direction == 1){
  7431  003AC2  0421               	decf	SETxPWM@direction,w,c
  7432  003AC4  A4D8               	btfss	status,2,c
  7433  003AC6  0012               	return	
  7434                           
  7435                           ;set_pwm.c: 33: pwm_speed = 511 + (speed * 2);
  7436  003AC8  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7437  003ACC  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7438  003AD0  90D8               	bcf	status,0,c
  7439  003AD2  3622               	rlcf	??_SETxPWM,f,c
  7440  003AD4  3623               	rlcf	??_SETxPWM+1,f,c
  7441  003AD6  0EFF               	movlw	255
  7442  003AD8  2422               	addwf	??_SETxPWM,w,c
  7443  003ADA  6E24               	movwf	SETxPWM@pwm_speed,c
  7444  003ADC  0E01               	movlw	1
  7445  003ADE  2023               	addwfc	??_SETxPWM+1,w,c
  7446  003AE0  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7447                           
  7448                           ;set_pwm.c: 34: SETxAPIxVAL(88, pwm_speed);
  7449  003AE2  0E00               	movlw	0
  7450  003AE4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7451  003AE6  0E58               	movlw	88
  7452  003AE8  6E19               	movwf	SETxAPIxVAL@index,c
  7453  003AEA  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7454  003AEE  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7455  003AF2  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7456  003AF6  0012               	return	
  7457  003AF8                     __end_of_SETxPWM:
  7458                           	opt stack 0
  7459                           tblptru	equ	0xFF8
  7460                           tblptrh	equ	0xFF7
  7461                           tblptrl	equ	0xFF6
  7462                           tablat	equ	0xFF5
  7463                           postinc0	equ	0xFEE
  7464                           wreg	equ	0xFE8
  7465                           postdec1	equ	0xFE5
  7466                           fsr1h	equ	0xFE2
  7467                           fsr1l	equ	0xFE1
  7468                           status	equ	0xFD8
  7469                           
  7470 ;; *************** function _Junction *****************
  7471 ;; Defined at:
  7472 ;;		line 26 in file "../junction.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  Junction_Lef    1    wreg     unsigned char 
  7475 ;;  Straight_Ben    1   30[COMRAM] unsigned char 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  Junction_Lef    1   31[COMRAM] unsigned char 
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      unsigned char 
  7480 ;; Registers used:
  7481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7487 ;;      Params:         1       0       0       0       0       0       0       0       0
  7488 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7489 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7490 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7491 ;;Total ram usage:        2 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    5
  7494 ;; This function calls:
  7495 ;;		_GETxAPIxVAL
  7496 ;;		_SETxAPIxVAL
  7497 ;; This function is called by:
  7498 ;;		_Update_StateMchn
  7499 ;;		_Train_Path
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text12
  7504  0027BE                     __ptext12:
  7505                           	opt stack 0
  7506  0027BE                     _Junction:
  7507                           	opt stack 23
  7508                           
  7509                           ;incstack = 0
  7510                           ;Junction@Junction_Left_Right stored from wreg
  7511  0027BE  6E20               	movwf	Junction@Junction_Left_Right,c
  7512                           
  7513                           ;junction.c: 28: static char Return_Val = 1;
  7514                           ;junction.c: 29: static unsigned int Junction_Switch_Time = 0;
  7515                           ;junction.c: 31: switch (Switch_Junction)
  7516  0027C0  D0E2               	goto	l1022
  7517  0027C2  0E01               	movlw	1
  7518  0027C4  6E4C               	movwf	Junction@Return_Val,c
  7519                           
  7520                           ;junction.c: 34: switch (Junction_Left_Right)
  7521  0027C6  D08C               	goto	l1024
  7522  0027C8  0E00               	movlw	0
  7523  0027CA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7524  0027CC  0E40               	movlw	64
  7525  0027CE  6E19               	movwf	SETxAPIxVAL@index,c
  7526  0027D0  0E00               	movlw	0
  7527  0027D2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7528  0027D4  0E01               	movlw	1
  7529  0027D6  6E1B               	movwf	SETxAPIxVAL@value,c
  7530  0027D8  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7531                           
  7532                           ;junction.c: 39: SETxAPIxVAL(82, 1);
  7533  0027DC  0E00               	movlw	0
  7534  0027DE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7535  0027E0  0E52               	movlw	82
  7536  0027E2  6E19               	movwf	SETxAPIxVAL@index,c
  7537  0027E4  0E00               	movlw	0
  7538  0027E6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7539  0027E8  0E01               	movlw	1
  7540  0027EA  6E1B               	movwf	SETxAPIxVAL@value,c
  7541  0027EC  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7542                           
  7543                           ;junction.c: 40: SETxAPIxVAL(83, 0);
  7544  0027F0  0E00               	movlw	0
  7545  0027F2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7546  0027F4  0E53               	movlw	83
  7547  0027F6  6E19               	movwf	SETxAPIxVAL@index,c
  7548  0027F8  0E00               	movlw	0
  7549  0027FA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7550  0027FC  0E00               	movlw	0
  7551  0027FE  6E1B               	movwf	SETxAPIxVAL@value,c
  7552  002800  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7553                           
  7554                           ;junction.c: 41: break;
  7555  002804  D074               	goto	l1031
  7556  002806  0E00               	movlw	0
  7557  002808  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7558  00280A  0E41               	movlw	65
  7559  00280C  6E19               	movwf	SETxAPIxVAL@index,c
  7560  00280E  0E00               	movlw	0
  7561  002810  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7562  002812  0E01               	movlw	1
  7563  002814  6E1B               	movwf	SETxAPIxVAL@value,c
  7564  002816  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7565                           
  7566                           ;junction.c: 43: SETxAPIxVAL(82, 0);
  7567  00281A  0E00               	movlw	0
  7568  00281C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7569  00281E  0E52               	movlw	82
  7570  002820  6E19               	movwf	SETxAPIxVAL@index,c
  7571  002822  0E00               	movlw	0
  7572  002824  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7573  002826  0E00               	movlw	0
  7574  002828  6E1B               	movwf	SETxAPIxVAL@value,c
  7575  00282A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7576                           
  7577                           ;junction.c: 44: SETxAPIxVAL(83, 1);
  7578  00282E  0E00               	movlw	0
  7579  002830  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7580  002832  0E53               	movlw	83
  7581  002834  6E19               	movwf	SETxAPIxVAL@index,c
  7582  002836  0E00               	movlw	0
  7583  002838  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7584  00283A  0E01               	movlw	1
  7585  00283C  6E1B               	movwf	SETxAPIxVAL@value,c
  7586  00283E  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7587                           
  7588                           ;junction.c: 47: }
  7589                           
  7590                           ;junction.c: 46: default : break;
  7591                           
  7592                           ;junction.c: 45: break;
  7593  002842  D055               	goto	l1031
  7594  002844  501F               	movf	Junction@Straight_Bend,w,c
  7595                           
  7596                           ; Switch size 1, requested type "space"
  7597                           ; Number of cases is 2, Range of values is 0 to 1
  7598                           ; switch strategies available:
  7599                           ; Name         Instructions Cycles
  7600                           ; simple_byte            7     4 (average)
  7601                           ;	Chosen strategy is simple_byte
  7602  002846  0A00               	xorlw	0	; case 0
  7603  002848  B4D8               	btfsc	status,2,c
  7604  00284A  D7BE               	goto	l1027
  7605  00284C  0A01               	xorlw	1	; case 1
  7606  00284E  B4D8               	btfsc	status,2,c
  7607  002850  D7DA               	goto	l1029
  7608                           
  7609                           ;junction.c: 48: break;
  7610  002852  D04D               	goto	l1031
  7611  002854  0E00               	movlw	0
  7612  002856  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7613  002858  0E42               	movlw	66
  7614  00285A  6E19               	movwf	SETxAPIxVAL@index,c
  7615  00285C  0E00               	movlw	0
  7616  00285E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7617  002860  0E01               	movlw	1
  7618  002862  6E1B               	movwf	SETxAPIxVAL@value,c
  7619  002864  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7620                           
  7621                           ;junction.c: 53: SETxAPIxVAL(84, 1);
  7622  002868  0E00               	movlw	0
  7623  00286A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7624  00286C  0E54               	movlw	84
  7625  00286E  6E19               	movwf	SETxAPIxVAL@index,c
  7626  002870  0E00               	movlw	0
  7627  002872  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7628  002874  0E01               	movlw	1
  7629  002876  6E1B               	movwf	SETxAPIxVAL@value,c
  7630  002878  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7631                           
  7632                           ;junction.c: 54: SETxAPIxVAL(85, 0);
  7633  00287C  0E00               	movlw	0
  7634  00287E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7635  002880  0E55               	movlw	85
  7636  002882  6E19               	movwf	SETxAPIxVAL@index,c
  7637  002884  0E00               	movlw	0
  7638  002886  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7639  002888  0E00               	movlw	0
  7640  00288A  6E1B               	movwf	SETxAPIxVAL@value,c
  7641  00288C  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7642                           
  7643                           ;junction.c: 55: break;
  7644  002890  D02E               	goto	l1031
  7645  002892  0E00               	movlw	0
  7646  002894  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7647  002896  0E43               	movlw	67
  7648  002898  6E19               	movwf	SETxAPIxVAL@index,c
  7649  00289A  0E00               	movlw	0
  7650  00289C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7651  00289E  0E01               	movlw	1
  7652  0028A0  6E1B               	movwf	SETxAPIxVAL@value,c
  7653  0028A2  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7654                           
  7655                           ;junction.c: 57: SETxAPIxVAL(84, 0);
  7656  0028A6  0E00               	movlw	0
  7657  0028A8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7658  0028AA  0E54               	movlw	84
  7659  0028AC  6E19               	movwf	SETxAPIxVAL@index,c
  7660  0028AE  0E00               	movlw	0
  7661  0028B0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7662  0028B2  0E00               	movlw	0
  7663  0028B4  6E1B               	movwf	SETxAPIxVAL@value,c
  7664  0028B6  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7665                           
  7666                           ;junction.c: 58: SETxAPIxVAL(85, 1);
  7667  0028BA  0E00               	movlw	0
  7668  0028BC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7669  0028BE  0E55               	movlw	85
  7670  0028C0  6E19               	movwf	SETxAPIxVAL@index,c
  7671  0028C2  0E00               	movlw	0
  7672  0028C4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7673  0028C6  0E01               	movlw	1
  7674  0028C8  6E1B               	movwf	SETxAPIxVAL@value,c
  7675  0028CA  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7676                           
  7677                           ;junction.c: 61: }
  7678                           
  7679                           ;junction.c: 60: default : break;
  7680                           
  7681                           ;junction.c: 59: break;
  7682  0028CE  D00F               	goto	l1031
  7683  0028D0  501F               	movf	Junction@Straight_Bend,w,c
  7684                           
  7685                           ; Switch size 1, requested type "space"
  7686                           ; Number of cases is 2, Range of values is 0 to 1
  7687                           ; switch strategies available:
  7688                           ; Name         Instructions Cycles
  7689                           ; simple_byte            7     4 (average)
  7690                           ;	Chosen strategy is simple_byte
  7691  0028D2  0A00               	xorlw	0	; case 0
  7692  0028D4  B4D8               	btfsc	status,2,c
  7693  0028D6  D7BE               	goto	l1034
  7694  0028D8  0A01               	xorlw	1	; case 1
  7695  0028DA  B4D8               	btfsc	status,2,c
  7696  0028DC  D7DA               	goto	l1036
  7697                           
  7698                           ;junction.c: 65: }
  7699                           
  7700                           ;junction.c: 64: default : break;
  7701                           
  7702                           ;junction.c: 62: break;
  7703  0028DE  D007               	goto	l1031
  7704  0028E0                     l1024:
  7705  0028E0  5020               	movf	Junction@Junction_Left_Right,w,c
  7706                           
  7707                           ; Switch size 1, requested type "space"
  7708                           ; Number of cases is 2, Range of values is 0 to 1
  7709                           ; switch strategies available:
  7710                           ; Name         Instructions Cycles
  7711                           ; simple_byte            7     4 (average)
  7712                           ;	Chosen strategy is simple_byte
  7713  0028E2  0A00               	xorlw	0	; case 0
  7714  0028E4  B4D8               	btfsc	status,2,c
  7715  0028E6  D7AE               	goto	l1026
  7716  0028E8  0A01               	xorlw	1	; case 1
  7717  0028EA  B4D8               	btfsc	status,2,c
  7718  0028EC  D7F1               	goto	l1033
  7719  0028EE                     l1031:
  7720                           
  7721                           ;junction.c: 66: Switch_Junction = 1;
  7722  0028EE  0E01               	movlw	1
  7723  0028F0  6E2F               	movwf	_Switch_Junction,c
  7724                           
  7725                           ;junction.c: 67: break;
  7726  0028F2  D053               	goto	l1039
  7727  0028F4  0E00               	movlw	0
  7728  0028F6  6E14               	movwf	GETxAPIxVAL@index+1,c
  7729  0028F8  0E13               	movlw	19
  7730  0028FA  6E13               	movwf	GETxAPIxVAL@index,c
  7731  0028FC  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  7732  002900  5013               	movf	?_GETxAPIxVAL,w,c
  7733  002902  0100               	movlb	0	; () banked
  7734  002904  5D68               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7735  002906  5014               	movf	?_GETxAPIxVAL+1,w,c
  7736  002908  5969               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7737  00290A  A0D8               	btfss	status,0,c
  7738  00290C  D008               	goto	l1041
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;junction.c: 70: {
  7742                           ;junction.c: 71: Switch_Junction = 2;
  7743  00290E  0E02               	movlw	2
  7744  002910  6E2F               	movwf	_Switch_Junction,c
  7745                           
  7746                           ;junction.c: 72: Junction_Switch_Time = 0;
  7747  002912  0E00               	movlw	0
  7748  002914  6F69               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7749  002916  0E00               	movlw	0
  7750  002918  6F68               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7751                           
  7752                           ;junction.c: 73: Return_Val = 1;
  7753  00291A  0E01               	movlw	1
  7754  00291C  D032               	goto	L84
  7755  00291E                     l1041:
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;junction.c: 75: }
  7759                           ;junction.c: 76: Return_Val = 1;
  7760                           
  7761                           ; BSR set to: 0
  7762  00291E  0E01               	movlw	1
  7763  002920  6E4C               	movwf	Junction@Return_Val,c
  7764                           
  7765                           ;junction.c: 77: Switch_Junction = 1;
  7766  002922  0E01               	movlw	1
  7767  002924  6E2F               	movwf	_Switch_Junction,c
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;junction.c: 78: Junction_Switch_Time++;
  7771  002926  4B68               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7772  002928  2B69               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7773                           
  7774                           ;junction.c: 79: break;
  7775  00292A  D037               	goto	l1039
  7776  00292C                     
  7777                           ; BSR set to: 0
  7778  00292C  0E00               	movlw	0
  7779  00292E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7780  002930  0E40               	movlw	64
  7781  002932  6E19               	movwf	SETxAPIxVAL@index,c
  7782  002934  0E00               	movlw	0
  7783  002936  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7784  002938  0E00               	movlw	0
  7785  00293A  6E1B               	movwf	SETxAPIxVAL@value,c
  7786  00293C  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7787                           
  7788                           ;junction.c: 82: SETxAPIxVAL(65, 0);
  7789  002940  0E00               	movlw	0
  7790  002942  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7791  002944  0E41               	movlw	65
  7792  002946  6E19               	movwf	SETxAPIxVAL@index,c
  7793  002948  0E00               	movlw	0
  7794  00294A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7795  00294C  0E00               	movlw	0
  7796  00294E  6E1B               	movwf	SETxAPIxVAL@value,c
  7797  002950  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7798                           
  7799                           ;junction.c: 83: SETxAPIxVAL(66,0);
  7800  002954  0E00               	movlw	0
  7801  002956  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7802  002958  0E42               	movlw	66
  7803  00295A  6E19               	movwf	SETxAPIxVAL@index,c
  7804  00295C  0E00               	movlw	0
  7805  00295E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7806  002960  0E00               	movlw	0
  7807  002962  6E1B               	movwf	SETxAPIxVAL@value,c
  7808  002964  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7809                           
  7810                           ;junction.c: 84: SETxAPIxVAL(67,0);
  7811  002968  0E00               	movlw	0
  7812  00296A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7813  00296C  0E43               	movlw	67
  7814  00296E  6E19               	movwf	SETxAPIxVAL@index,c
  7815  002970  0E00               	movlw	0
  7816  002972  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7817  002974  0E00               	movlw	0
  7818  002976  6E1B               	movwf	SETxAPIxVAL@value,c
  7819  002978  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  7820                           
  7821                           ;junction.c: 85: Switch_Junction = 0;
  7822  00297C  0E00               	movlw	0
  7823  00297E  6E2F               	movwf	_Switch_Junction,c
  7824                           
  7825                           ;junction.c: 86: Return_Val = 0;
  7826  002980  0E00               	movlw	0
  7827  002982                     L84:
  7828  002982  6E4C               	movwf	Junction@Return_Val,c
  7829                           
  7830                           ;junction.c: 90: }
  7831                           
  7832                           ;junction.c: 89: default : break;
  7833                           
  7834                           ;junction.c: 87: break;
  7835  002984  D00A               	goto	l1039
  7836  002986                     l1022:
  7837  002986  502F               	movf	_Switch_Junction,w,c
  7838                           
  7839                           ; Switch size 1, requested type "space"
  7840                           ; Number of cases is 3, Range of values is 0 to 2
  7841                           ; switch strategies available:
  7842                           ; Name         Instructions Cycles
  7843                           ; simple_byte           10     6 (average)
  7844                           ;	Chosen strategy is simple_byte
  7845  002988  0A00               	xorlw	0	; case 0
  7846  00298A  B4D8               	btfsc	status,2,c
  7847  00298C  D71A               	goto	l1023
  7848  00298E  0A01               	xorlw	1	; case 1
  7849  002990  B4D8               	btfsc	status,2,c
  7850  002992  D7B0               	goto	l1040
  7851  002994  0A03               	xorlw	3	; case 2
  7852  002996  B4D8               	btfsc	status,2,c
  7853  002998  D7C9               	goto	l1042
  7854  00299A                     l1039:
  7855                           
  7856                           ;junction.c: 92: return (Return_Val);
  7857  00299A  504C               	movf	Junction@Return_Val,w,c
  7858  00299C  0012               	return	
  7859  00299E                     __end_of_Junction:
  7860                           	opt stack 0
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           postinc0	equ	0xFEE
  7866                           wreg	equ	0xFE8
  7867                           postdec1	equ	0xFE5
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           status	equ	0xFD8
  7871                           
  7872 ;; *************** function _Red_Led *****************
  7873 ;; Defined at:
  7874 ;;		line 102 in file "../io.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;  Operation       1    wreg     unsigned char 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  Operation       1   31[COMRAM] unsigned char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      void 
  7881 ;; Registers used:
  7882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7888 ;;      Params:         0       0       0       0       0       0       0       0       0
  7889 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7890 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7891 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7892 ;;Total ram usage:        2 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    5
  7895 ;; This function calls:
  7896 ;;		_SETxAPIxVAL
  7897 ;; This function is called by:
  7898 ;;		_Update_StateMchn
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text13
  7903  003CE0                     __ptext13:
  7904                           	opt stack 0
  7905  003CE0                     _Red_Led:
  7906                           	opt stack 24
  7907                           
  7908                           ;incstack = 0
  7909                           ;Red_Led@Operation stored from wreg
  7910  003CE0  6E20               	movwf	Red_Led@Operation,c
  7911                           
  7912                           ;io.c: 104: switch(Operation)
  7913  003CE2  D02E               	goto	l856
  7914  003CE4                     l857:
  7915  003CE4  9A83               	bcf	3971,5,c	;volatile
  7916  003CE6  D001               	goto	l8314
  7917  003CE8                     l859:
  7918  003CE8  8A83               	bsf	3971,5,c	;volatile
  7919  003CEA                     l8314:
  7920                           
  7921                           ;io.c: 111: Red_Led_Counter = 0;
  7922  003CEA  0E00               	movlw	0
  7923  003CEC  6E29               	movwf	_Red_Led_Counter+1,c
  7924  003CEE  0E00               	movlw	0
  7925  003CF0  6E28               	movwf	_Red_Led_Counter,c
  7926                           
  7927                           ;io.c: 112: break;
  7928  003CF2  D033               	goto	l858
  7929  003CF4  4A28               	infsnz	_Red_Led_Counter,f,c
  7930  003CF6  2A29               	incf	_Red_Led_Counter+1,f,c
  7931                           
  7932                           ;io.c: 115: if(Red_Led_Counter >= 3000)
  7933  003CF8  0EB8               	movlw	184
  7934  003CFA  5C28               	subwf	_Red_Led_Counter,w,c
  7935  003CFC  0E0B               	movlw	11
  7936  003CFE  5829               	subwfb	_Red_Led_Counter+1,w,c
  7937  003D00  A0D8               	btfss	status,0,c
  7938  003D02  D004               	goto	l861
  7939                           
  7940                           ;io.c: 116: {
  7941                           ;io.c: 117: Red_Led_Counter = 0;
  7942  003D04  0E00               	movlw	0
  7943  003D06  6E29               	movwf	_Red_Led_Counter+1,c
  7944  003D08  0E00               	movlw	0
  7945  003D0A  6E28               	movwf	_Red_Led_Counter,c
  7946  003D0C                     l861:
  7947                           
  7948                           ;io.c: 118: }
  7949                           ;io.c: 119: if(Red_Led_Counter >= 3000/2)
  7950  003D0C  0EDC               	movlw	220
  7951  003D0E  5C28               	subwf	_Red_Led_Counter,w,c
  7952  003D10  0E05               	movlw	5
  7953  003D12  D00F               	goto	L94
  7954  003D14  4A28               	infsnz	_Red_Led_Counter,f,c
  7955  003D16  2A29               	incf	_Red_Led_Counter+1,f,c
  7956                           
  7957                           ;io.c: 127: if(Red_Led_Counter >= 1500)
  7958  003D18  0EDC               	movlw	220
  7959  003D1A  5C28               	subwf	_Red_Led_Counter,w,c
  7960  003D1C  0E05               	movlw	5
  7961  003D1E  5829               	subwfb	_Red_Led_Counter+1,w,c
  7962  003D20  A0D8               	btfss	status,0,c
  7963  003D22  D004               	goto	l865
  7964                           
  7965                           ;io.c: 128: {
  7966                           ;io.c: 129: Red_Led_Counter = 0;
  7967  003D24  0E00               	movlw	0
  7968  003D26  6E29               	movwf	_Red_Led_Counter+1,c
  7969  003D28  0E00               	movlw	0
  7970  003D2A  6E28               	movwf	_Red_Led_Counter,c
  7971  003D2C                     l865:
  7972                           
  7973                           ;io.c: 130: }
  7974                           ;io.c: 131: if(Red_Led_Counter >= 1500/2)
  7975  003D2C  0EEE               	movlw	238
  7976  003D2E  5C28               	subwf	_Red_Led_Counter,w,c
  7977  003D30  0E02               	movlw	2
  7978  003D32                     L94:
  7979  003D32  5829               	subwfb	_Red_Led_Counter+1,w,c
  7980  003D34  A0D8               	btfss	status,0,c
  7981  003D36  D002               	goto	l866
  7982                           
  7983                           ;io.c: 132: {
  7984                           ;io.c: 133: PORTDbits.RD5 = 1;
  7985  003D38  8A83               	bsf	3971,5,c	;volatile
  7986                           
  7987                           ;io.c: 134: }
  7988  003D3A  D00F               	goto	l858
  7989  003D3C                     l866:
  7990                           
  7991                           ;io.c: 135: else {PORTDbits.RD5 = 0;}
  7992  003D3C  9A83               	bcf	3971,5,c	;volatile
  7993                           
  7994                           ;io.c: 139: }
  7995                           
  7996                           ;io.c: 138: default : break;
  7997                           
  7998                           ;io.c: 136: break;
  7999  003D3E  D00D               	goto	l858
  8000  003D40                     l856:
  8001  003D40  5020               	movf	Red_Led@Operation,w,c
  8002                           
  8003                           ; Switch size 1, requested type "space"
  8004                           ; Number of cases is 4, Range of values is 0 to 3
  8005                           ; switch strategies available:
  8006                           ; Name         Instructions Cycles
  8007                           ; simple_byte           13     7 (average)
  8008                           ;	Chosen strategy is simple_byte
  8009  003D42  0A00               	xorlw	0	; case 0
  8010  003D44  B4D8               	btfsc	status,2,c
  8011  003D46  D7CE               	goto	l857
  8012  003D48  0A01               	xorlw	1	; case 1
  8013  003D4A  B4D8               	btfsc	status,2,c
  8014  003D4C  D7CD               	goto	l859
  8015  003D4E  0A03               	xorlw	3	; case 2
  8016  003D50  B4D8               	btfsc	status,2,c
  8017  003D52  D7D0               	goto	l860
  8018  003D54  0A01               	xorlw	1	; case 3
  8019  003D56  B4D8               	btfsc	status,2,c
  8020  003D58  D7DD               	goto	l864
  8021  003D5A                     l858:
  8022                           
  8023                           ;io.c: 140: SETxAPIxVAL(90, PORTDbits.RD5);
  8024  003D5A  0E00               	movlw	0
  8025  003D5C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8026  003D5E  0E5A               	movlw	90
  8027  003D60  6E19               	movwf	SETxAPIxVAL@index,c
  8028  003D62  AA83               	btfss	3971,5,c	;volatile
  8029  003D64  D003               	goto	u8050
  8030  003D66  6A1F               	clrf	??_Red_Led& (0+255),c
  8031  003D68  2A1F               	incf	??_Red_Led& (0+255),f,c
  8032  003D6A  D001               	goto	u8058
  8033  003D6C                     u8050:
  8034  003D6C  6A1F               	clrf	??_Red_Led& (0+255),c
  8035  003D6E                     u8058:
  8036  003D6E  501F               	movf	??_Red_Led,w,c
  8037  003D70  6E1B               	movwf	SETxAPIxVAL@value,c
  8038  003D72  6A1C               	clrf	SETxAPIxVAL@value+1,c
  8039  003D74  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  8040  003D78  0012               	return		;funcret
  8041  003D7A                     __end_of_Red_Led:
  8042                           	opt stack 0
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           postinc0	equ	0xFEE
  8048                           wreg	equ	0xFE8
  8049                           postdec1	equ	0xFE5
  8050                           fsr1h	equ	0xFE2
  8051                           fsr1l	equ	0xFE1
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _Green_Led *****************
  8055 ;; Defined at:
  8056 ;;		line 47 in file "../io.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  Operation       1    wreg     unsigned char 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  Operation       1   31[COMRAM] unsigned char 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      void 
  8063 ;; Registers used:
  8064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0
  8071 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8072 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8073 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8074 ;;Total ram usage:        2 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    5
  8077 ;; This function calls:
  8078 ;;		_SETxAPIxVAL
  8079 ;; This function is called by:
  8080 ;;		_Update_StateMchn
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           	psect	text14
  8085  003D7A                     __ptext14:
  8086                           	opt stack 0
  8087  003D7A                     _Green_Led:
  8088                           	opt stack 24
  8089                           
  8090                           ;incstack = 0
  8091                           ;Green_Led@Operation stored from wreg
  8092  003D7A  6E20               	movwf	Green_Led@Operation,c
  8093                           
  8094                           ;io.c: 49: switch(Operation)
  8095  003D7C  D02E               	goto	l840
  8096  003D7E                     l841:
  8097  003D7E  9C83               	bcf	3971,6,c	;volatile
  8098  003D80  D001               	goto	l8346
  8099  003D82                     l843:
  8100  003D82  8C83               	bsf	3971,6,c	;volatile
  8101  003D84                     l8346:
  8102                           
  8103                           ;io.c: 56: Green_Led_Counter = 0;
  8104  003D84  0E00               	movlw	0
  8105  003D86  6E2B               	movwf	_Green_Led_Counter+1,c
  8106  003D88  0E00               	movlw	0
  8107  003D8A  6E2A               	movwf	_Green_Led_Counter,c
  8108                           
  8109                           ;io.c: 57: break;
  8110  003D8C  D033               	goto	l842
  8111  003D8E  4A2A               	infsnz	_Green_Led_Counter,f,c
  8112  003D90  2A2B               	incf	_Green_Led_Counter+1,f,c
  8113                           
  8114                           ;io.c: 60: if(Green_Led_Counter > 3000)
  8115  003D92  0EB9               	movlw	185
  8116  003D94  5C2A               	subwf	_Green_Led_Counter,w,c
  8117  003D96  0E0B               	movlw	11
  8118  003D98  582B               	subwfb	_Green_Led_Counter+1,w,c
  8119  003D9A  A0D8               	btfss	status,0,c
  8120  003D9C  D004               	goto	l845
  8121                           
  8122                           ;io.c: 61: {
  8123                           ;io.c: 62: Green_Led_Counter = 0;
  8124  003D9E  0E00               	movlw	0
  8125  003DA0  6E2B               	movwf	_Green_Led_Counter+1,c
  8126  003DA2  0E00               	movlw	0
  8127  003DA4  6E2A               	movwf	_Green_Led_Counter,c
  8128  003DA6                     l845:
  8129                           
  8130                           ;io.c: 63: }
  8131                           ;io.c: 64: if(Green_Led_Counter > 3000/2)
  8132  003DA6  0EDD               	movlw	221
  8133  003DA8  5C2A               	subwf	_Green_Led_Counter,w,c
  8134  003DAA  0E05               	movlw	5
  8135  003DAC  D00F               	goto	L95
  8136  003DAE  4A2A               	infsnz	_Green_Led_Counter,f,c
  8137  003DB0  2A2B               	incf	_Green_Led_Counter+1,f,c
  8138                           
  8139                           ;io.c: 72: if(Green_Led_Counter > 1500)
  8140  003DB2  0EDD               	movlw	221
  8141  003DB4  5C2A               	subwf	_Green_Led_Counter,w,c
  8142  003DB6  0E05               	movlw	5
  8143  003DB8  582B               	subwfb	_Green_Led_Counter+1,w,c
  8144  003DBA  A0D8               	btfss	status,0,c
  8145  003DBC  D004               	goto	l849
  8146                           
  8147                           ;io.c: 73: {
  8148                           ;io.c: 74: Green_Led_Counter = 0;
  8149  003DBE  0E00               	movlw	0
  8150  003DC0  6E2B               	movwf	_Green_Led_Counter+1,c
  8151  003DC2  0E00               	movlw	0
  8152  003DC4  6E2A               	movwf	_Green_Led_Counter,c
  8153  003DC6                     l849:
  8154                           
  8155                           ;io.c: 75: }
  8156                           ;io.c: 76: if(Green_Led_Counter > 1500/2)
  8157  003DC6  0EEF               	movlw	239
  8158  003DC8  5C2A               	subwf	_Green_Led_Counter,w,c
  8159  003DCA  0E02               	movlw	2
  8160  003DCC                     L95:
  8161  003DCC  582B               	subwfb	_Green_Led_Counter+1,w,c
  8162  003DCE  A0D8               	btfss	status,0,c
  8163  003DD0  D002               	goto	l850
  8164                           
  8165                           ;io.c: 77: {
  8166                           ;io.c: 78: PORTDbits.RD6 = 1;
  8167  003DD2  8C83               	bsf	3971,6,c	;volatile
  8168                           
  8169                           ;io.c: 79: }
  8170  003DD4  D00F               	goto	l842
  8171  003DD6                     l850:
  8172                           
  8173                           ;io.c: 80: else {PORTDbits.RD6 = 0;}
  8174  003DD6  9C83               	bcf	3971,6,c	;volatile
  8175                           
  8176                           ;io.c: 84: }
  8177                           
  8178                           ;io.c: 83: default : break;
  8179                           
  8180                           ;io.c: 81: break;
  8181  003DD8  D00D               	goto	l842
  8182  003DDA                     l840:
  8183  003DDA  5020               	movf	Green_Led@Operation,w,c
  8184                           
  8185                           ; Switch size 1, requested type "space"
  8186                           ; Number of cases is 4, Range of values is 0 to 3
  8187                           ; switch strategies available:
  8188                           ; Name         Instructions Cycles
  8189                           ; simple_byte           13     7 (average)
  8190                           ;	Chosen strategy is simple_byte
  8191  003DDC  0A00               	xorlw	0	; case 0
  8192  003DDE  B4D8               	btfsc	status,2,c
  8193  003DE0  D7CE               	goto	l841
  8194  003DE2  0A01               	xorlw	1	; case 1
  8195  003DE4  B4D8               	btfsc	status,2,c
  8196  003DE6  D7CD               	goto	l843
  8197  003DE8  0A03               	xorlw	3	; case 2
  8198  003DEA  B4D8               	btfsc	status,2,c
  8199  003DEC  D7D0               	goto	l844
  8200  003DEE  0A01               	xorlw	1	; case 3
  8201  003DF0  B4D8               	btfsc	status,2,c
  8202  003DF2  D7DD               	goto	l848
  8203  003DF4                     l842:
  8204                           
  8205                           ;io.c: 85: SETxAPIxVAL(89, PORTDbits.RD6);
  8206  003DF4  0E00               	movlw	0
  8207  003DF6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8208  003DF8  0E59               	movlw	89
  8209  003DFA  6E19               	movwf	SETxAPIxVAL@index,c
  8210  003DFC  AC83               	btfss	3971,6,c	;volatile
  8211  003DFE  D003               	goto	u8100
  8212  003E00  6A1F               	clrf	??_Green_Led& (0+255),c
  8213  003E02  2A1F               	incf	??_Green_Led& (0+255),f,c
  8214  003E04  D001               	goto	u8108
  8215  003E06                     u8100:
  8216  003E06  6A1F               	clrf	??_Green_Led& (0+255),c
  8217  003E08                     u8108:
  8218  003E08  501F               	movf	??_Green_Led,w,c
  8219  003E0A  6E1B               	movwf	SETxAPIxVAL@value,c
  8220  003E0C  6A1C               	clrf	SETxAPIxVAL@value+1,c
  8221  003E0E  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  8222  003E12  0012               	return		;funcret
  8223  003E14                     __end_of_Green_Led:
  8224                           	opt stack 0
  8225                           tblptru	equ	0xFF8
  8226                           tblptrh	equ	0xFF7
  8227                           tblptrl	equ	0xFF6
  8228                           tablat	equ	0xFF5
  8229                           postinc0	equ	0xFEE
  8230                           wreg	equ	0xFE8
  8231                           postdec1	equ	0xFE5
  8232                           fsr1h	equ	0xFE2
  8233                           fsr1l	equ	0xFE1
  8234                           status	equ	0xFD8
  8235                           
  8236 ;; *************** function _GETxEMPTYxBUFFER *****************
  8237 ;; Defined at:
  8238 ;;		line 271 in file "../terminal.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;		None
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;		None
  8243 ;; Return value:  Size  Location     Type
  8244 ;;                  2   18[COMRAM] unsigned int 
  8245 ;; Registers used:
  8246 ;;		wreg, status,2, status,0
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8252 ;;      Params:         2       0       0       0       0       0       0       0       0
  8253 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8254 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8255 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8256 ;;Total ram usage:        2 bytes
  8257 ;; Hardware stack levels used:    1
  8258 ;; Hardware stack levels required when called:    3
  8259 ;; This function calls:
  8260 ;;		Nothing
  8261 ;; This function is called by:
  8262 ;;		_Update_StateMchn
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           	psect	text15
  8267  0041CA                     __ptext15:
  8268                           	opt stack 0
  8269  0041CA                     _GETxEMPTYxBUFFER:
  8270                           	opt stack 26
  8271                           
  8272                           ;terminal.c: 273: if (ReadPointer == WritePointer){
  8273                           
  8274                           ;incstack = 0
  8275  0041CA  0100               	movlb	0	; () banked
  8276  0041CC  5172               	movf	_WritePointer& (0+255),w,b
  8277  0041CE  1970               	xorwf	_ReadPointer& (0+255),w,b
  8278  0041D0  E109               	bnz	l5302
  8279  0041D2  5173               	movf	(_WritePointer+1)& (0+255),w,b
  8280  0041D4  1971               	xorwf	(_ReadPointer+1)& (0+255),w,b
  8281  0041D6  A4D8               	btfss	status,2,c
  8282  0041D8  D005               	goto	l683
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;terminal.c: 274: return (1);
  8286  0041DA  0E00               	movlw	0
  8287  0041DC  6E14               	movwf	?_GETxEMPTYxBUFFER+1,c
  8288  0041DE  0E01               	movlw	1
  8289  0041E0  6E13               	movwf	?_GETxEMPTYxBUFFER,c
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;terminal.c: 275: }
  8293                           
  8294                           ; BSR set to: 0
  8295  0041E2  0012               	return	
  8296  0041E4                     l683:
  8297  0041E4                     l5302:
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;terminal.c: 276: else{
  8301                           ;terminal.c: 277: return (0);
  8302  0041E4  0E00               	movlw	0
  8303  0041E6  6E14               	movwf	?_GETxEMPTYxBUFFER+1,c
  8304  0041E8  0E00               	movlw	0
  8305  0041EA  6E13               	movwf	?_GETxEMPTYxBUFFER,c
  8306                           
  8307                           ; BSR set to: 0
  8308  0041EC  0012               	return	
  8309  0041EE                     __end_of_GETxEMPTYxBUFFER:
  8310                           	opt stack 0
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           postinc0	equ	0xFEE
  8316                           wreg	equ	0xFE8
  8317                           postdec1	equ	0xFE5
  8318                           fsr1h	equ	0xFE2
  8319                           fsr1l	equ	0xFE1
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _EEPROMxSTORE *****************
  8323 ;; Defined at:
  8324 ;;		line 157 in file "../eeprom_settings.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;  i               1   22[BANK0 ] unsigned char 
  8329 ;;  api_list        1   21[BANK0 ] unsigned char 
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  2   26[COMRAM] unsigned int 
  8332 ;; Registers used:
  8333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8339 ;;      Params:         2       0       0       0       0       0       0       0       0
  8340 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8341 ;;      Temps:          8       0       0       0       0       0       0       0       0
  8342 ;;      Totals:        10       2       0       0       0       0       0       0       0
  8343 ;;Total ram usage:       12 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    4
  8346 ;; This function calls:
  8347 ;;		_Eeprom_Store
  8348 ;; This function is called by:
  8349 ;;		_Update_StateMchn
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text16
  8354  00299E                     __ptext16:
  8355                           	opt stack 0
  8356  00299E                     _EEPROMxSTORE:
  8357                           	opt stack 25
  8358                           
  8359                           ;eeprom_settings.c: 159: unsigned char i, api_list;
  8360                           ;eeprom_settings.c: 161: if (!ReadActive){
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;incstack = 0
  8364  00299E  0100               	movlb	0	; () banked
  8365  0029A0  516C               	movf	_ReadActive& (0+255),w,b
  8366  0029A2  116D               	iorwf	(_ReadActive+1)& (0+255),w,b
  8367  0029A4  A4D8               	btfss	status,2,c
  8368  0029A6  D0AC               	goto	l767
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;eeprom_settings.c: 162: WriteActive = 1;
  8372  0029A8  0E00               	movlw	0
  8373  0029AA  6F6B               	movwf	(_WriteActive+1)& (0+255),b
  8374  0029AC  0E01               	movlw	1
  8375  0029AE  6F6A               	movwf	_WriteActive& (0+255),b
  8376                           
  8377                           ;eeprom_settings.c: 163: INTCON = 0x00;
  8378  0029B0  0E00               	movlw	0
  8379  0029B2  6EF2               	movwf	intcon,c	;volatile
  8380                           
  8381                           ;eeprom_settings.c: 165: for(i = 0; i < 18; i++ )
  8382  0029B4  0E00               	movlw	0
  8383  0029B6  6FB0               	movwf	EEPROMxSTORE@i& (0+255),b
  8384  0029B8                     l7954:
  8385                           
  8386                           ; BSR set to: 0
  8387  0029B8  0E11               	movlw	17
  8388  0029BA  65B0               	cpfsgt	EEPROMxSTORE@i& (0+255),b
  8389  0029BC  D001               	goto	l768
  8390  0029BE  D095               	goto	u7480
  8391  0029C0                     l768:
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;eeprom_settings.c: 166: {
  8395                           ;eeprom_settings.c: 167: api_list = ApiList[i];
  8396                           
  8397                           ; BSR set to: 0
  8398  0029C0  51B0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8399  0029C2  0D02               	mullw	2
  8400  0029C4  0E01               	movlw	low _ApiList
  8401  0029C6  24F3               	addwf	prodl,w,c
  8402  0029C8  6EF6               	movwf	tblptrl,c
  8403  0029CA  0E08               	movlw	high _ApiList
  8404  0029CC  20F4               	addwfc	prodh,w,c
  8405  0029CE  6EF7               	movwf	tblptrh,c
  8406  0029D0                     	if	0	;There are less than 3 active tblptr bytes
  8407  0029D0                     	endif
  8408  0029D0  0008               	tblrd		*
  8409  0029D2  CFF5 F0AF          	movff	tablat,EEPROMxSTORE@api_list
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;eeprom_settings.c: 173: if (API[ApiList[i]] != API_EEPROM[ApiList[i]])
  8413  0029D6  51B0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8414  0029D8  0D02               	mullw	2
  8415  0029DA  0E01               	movlw	low _ApiList
  8416  0029DC  24F3               	addwf	prodl,w,c
  8417  0029DE  6EF6               	movwf	tblptrl,c
  8418  0029E0  0E08               	movlw	high _ApiList
  8419  0029E2  20F4               	addwfc	prodh,w,c
  8420  0029E4  6EF7               	movwf	tblptrh,c
  8421  0029E6                     	if	0	;There are less than 3 active tblptr bytes
  8422  0029E6                     	endif
  8423  0029E6  0009               	tblrd		*+
  8424  0029E8  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8425  0029EC  0009               	tblrd		*+
  8426  0029EE  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8427  0029F2  90D8               	bcf	status,0,c
  8428  0029F4  361D               	rlcf	??_EEPROMxSTORE,f,c
  8429  0029F6  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8430  0029F8  0E00               	movlw	low _API_EEPROM
  8431  0029FA  241D               	addwf	??_EEPROMxSTORE,w,c
  8432  0029FC  6ED9               	movwf	fsr2l,c
  8433  0029FE  0E03               	movlw	high _API_EEPROM
  8434  002A00  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8435  002A02  6EDA               	movwf	fsr2h,c
  8436  002A04  51B0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8437  002A06  0D02               	mullw	2
  8438  002A08  0E01               	movlw	low _ApiList
  8439  002A0A  24F3               	addwf	prodl,w,c
  8440  002A0C  6EF6               	movwf	tblptrl,c
  8441  002A0E  0E08               	movlw	high _ApiList
  8442  002A10  20F4               	addwfc	prodh,w,c
  8443  002A12  6EF7               	movwf	tblptrh,c
  8444  002A14                     	if	0	;There are less than 3 active tblptr bytes
  8445  002A14                     	endif
  8446  002A14  0009               	tblrd		*+
  8447  002A16  CFF5 F021          	movff	tablat,??_EEPROMxSTORE+4
  8448  002A1A  0009               	tblrd		*+
  8449  002A1C  CFF5 F022          	movff	tablat,??_EEPROMxSTORE+5
  8450  002A20  90D8               	bcf	status,0,c
  8451  002A22  3621               	rlcf	??_EEPROMxSTORE+4,f,c
  8452  002A24  3622               	rlcf	??_EEPROMxSTORE+5,f,c
  8453  002A26  0E00               	movlw	low _API
  8454  002A28  2421               	addwf	??_EEPROMxSTORE+4,w,c
  8455  002A2A  6EE1               	movwf	fsr1l,c
  8456  002A2C  0E01               	movlw	high _API
  8457  002A2E  2022               	addwfc	??_EEPROMxSTORE+5,w,c
  8458  002A30  6EE2               	movwf	fsr1h,c
  8459  002A32  50DE               	movf	postinc2,w,c
  8460  002A34  18E6               	xorwf	postinc1,w,c
  8461  002A36  E104               	bnz	u7470
  8462  002A38  50DE               	movf	postinc2,w,c
  8463  002A3A  18E6               	xorwf	postinc1,w,c
  8464  002A3C  B4D8               	btfsc	status,2,c
  8465  002A3E  D053               	goto	l770
  8466  002A40                     u7470:
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;eeprom_settings.c: 174: {
  8470                           ;eeprom_settings.c: 179: Eeprom_Store(i, API[ApiList[i]]);
  8471  002A40  C0B0  F013         	movff	EEPROMxSTORE@i,Eeprom_Store@Location
  8472  002A44  6A14               	clrf	Eeprom_Store@Location+1,c
  8473  002A46  51B0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8474  002A48  0D02               	mullw	2
  8475  002A4A  0E01               	movlw	low _ApiList
  8476  002A4C  24F3               	addwf	prodl,w,c
  8477  002A4E  6EF6               	movwf	tblptrl,c
  8478  002A50  0E08               	movlw	high _ApiList
  8479  002A52  20F4               	addwfc	prodh,w,c
  8480  002A54  6EF7               	movwf	tblptrh,c
  8481  002A56                     	if	0	;There are less than 3 active tblptr bytes
  8482  002A56                     	endif
  8483  002A56  0009               	tblrd		*+
  8484  002A58  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8485  002A5C  0009               	tblrd		*+
  8486  002A5E  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8487  002A62  90D8               	bcf	status,0,c
  8488  002A64  361D               	rlcf	??_EEPROMxSTORE,f,c
  8489  002A66  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8490  002A68  0E00               	movlw	low _API
  8491  002A6A  241D               	addwf	??_EEPROMxSTORE,w,c
  8492  002A6C  6ED9               	movwf	fsr2l,c
  8493  002A6E  0E01               	movlw	high _API
  8494  002A70  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8495  002A72  6EDA               	movwf	fsr2h,c
  8496  002A74  CFDE F015          	movff	postinc2,Eeprom_Store@Value
  8497  002A78  CFDD F016          	movff	postdec2,Eeprom_Store@Value+1
  8498  002A7C  EC44  F01F         	call	_Eeprom_Store	;wreg free
  8499                           
  8500                           ;eeprom_settings.c: 180: API_EEPROM[ApiList[i]] = API[ApiList[i]];
  8501  002A80  0100               	movlb	0	; () banked
  8502  002A82  51B0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8503  002A84  0D02               	mullw	2
  8504  002A86  0E01               	movlw	low _ApiList
  8505  002A88  24F3               	addwf	prodl,w,c
  8506  002A8A  6EF6               	movwf	tblptrl,c
  8507  002A8C  0E08               	movlw	high _ApiList
  8508  002A8E  20F4               	addwfc	prodh,w,c
  8509  002A90  6EF7               	movwf	tblptrh,c
  8510  002A92                     	if	0	;There are less than 3 active tblptr bytes
  8511  002A92                     	endif
  8512  002A92  0009               	tblrd		*+
  8513  002A94  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8514  002A98  0009               	tblrd		*+
  8515  002A9A  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8516  002A9E  90D8               	bcf	status,0,c
  8517  002AA0  361D               	rlcf	??_EEPROMxSTORE,f,c
  8518  002AA2  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8519  002AA4  0E00               	movlw	low _API
  8520  002AA6  241D               	addwf	??_EEPROMxSTORE,w,c
  8521  002AA8  6ED9               	movwf	fsr2l,c
  8522  002AAA  0E01               	movlw	high _API
  8523  002AAC  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8524  002AAE  6EDA               	movwf	fsr2h,c
  8525  002AB0  51B0               	movf	EEPROMxSTORE@i& (0+255),w,b
  8526  002AB2  0D02               	mullw	2
  8527  002AB4  0E01               	movlw	low _ApiList
  8528  002AB6  24F3               	addwf	prodl,w,c
  8529  002AB8  6EF6               	movwf	tblptrl,c
  8530  002ABA  0E08               	movlw	high _ApiList
  8531  002ABC  20F4               	addwfc	prodh,w,c
  8532  002ABE  6EF7               	movwf	tblptrh,c
  8533  002AC0                     	if	0	;There are less than 3 active tblptr bytes
  8534  002AC0                     	endif
  8535  002AC0  0009               	tblrd		*+
  8536  002AC2  CFF5 F01F          	movff	tablat,??_EEPROMxSTORE+2
  8537  002AC6  0009               	tblrd		*+
  8538  002AC8  CFF5 F020          	movff	tablat,??_EEPROMxSTORE+3
  8539  002ACC  90D8               	bcf	status,0,c
  8540  002ACE  361F               	rlcf	??_EEPROMxSTORE+2,f,c
  8541  002AD0  3620               	rlcf	??_EEPROMxSTORE+3,f,c
  8542  002AD2  0E00               	movlw	low _API_EEPROM
  8543  002AD4  241F               	addwf	??_EEPROMxSTORE+2,w,c
  8544  002AD6  6EE1               	movwf	fsr1l,c
  8545  002AD8  0E03               	movlw	high _API_EEPROM
  8546  002ADA  2020               	addwfc	??_EEPROMxSTORE+3,w,c
  8547  002ADC  6EE2               	movwf	fsr1h,c
  8548  002ADE  CFDE FFE6          	movff	postinc2,postinc1
  8549  002AE2  CFDD FFE5          	movff	postdec2,postdec1
  8550  002AE6                     l770:
  8551                           
  8552                           ; BSR set to: 0
  8553                           
  8554                           ; BSR set to: 0
  8555  002AE6  2BB0               	incf	EEPROMxSTORE@i& (0+255),f,b
  8556  002AE8  D767               	goto	l7954
  8557  002AEA                     u7480:
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;eeprom_settings.c: 181: }
  8561                           ;eeprom_settings.c: 182: }
  8562                           ;eeprom_settings.c: 184: INTCON = 0xA0;
  8563                           
  8564                           ; BSR set to: 0
  8565  002AEA  0EA0               	movlw	160
  8566  002AEC  6EF2               	movwf	intcon,c	;volatile
  8567                           
  8568                           ;eeprom_settings.c: 185: WriteActive = 0;
  8569  002AEE  0E00               	movlw	0
  8570  002AF0  6F6B               	movwf	(_WriteActive+1)& (0+255),b
  8571  002AF2  0E00               	movlw	0
  8572  002AF4  6F6A               	movwf	_WriteActive& (0+255),b
  8573                           
  8574                           ;eeprom_settings.c: 186: return (1);
  8575  002AF6  0E00               	movlw	0
  8576  002AF8  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8577  002AFA  0E01               	movlw	1
  8578  002AFC  6E1B               	movwf	?_EEPROMxSTORE,c
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;eeprom_settings.c: 187: }
  8582                           
  8583                           ; BSR set to: 0
  8584  002AFE  0012               	return	
  8585  002B00                     l767:
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;eeprom_settings.c: 188: else{
  8589                           ;eeprom_settings.c: 189: return (0);
  8590                           
  8591                           ; BSR set to: 0
  8592  002B00  0E00               	movlw	0
  8593  002B02  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8594  002B04  0E00               	movlw	0
  8595  002B06  6E1B               	movwf	?_EEPROMxSTORE,c
  8596                           
  8597                           ; BSR set to: 0
  8598  002B08  0012               	return	
  8599  002B0A                     __end_of_EEPROMxSTORE:
  8600                           	opt stack 0
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           postinc0	equ	0xFEE
  8609                           wreg	equ	0xFE8
  8610                           postinc1	equ	0xFE6
  8611                           postdec1	equ	0xFE5
  8612                           fsr1h	equ	0xFE2
  8613                           fsr1l	equ	0xFE1
  8614                           postinc2	equ	0xFDE
  8615                           postdec2	equ	0xFDD
  8616                           fsr2h	equ	0xFDA
  8617                           fsr2l	equ	0xFD9
  8618                           status	equ	0xFD8
  8619                           
  8620 ;; *************** function _Eeprom_Store *****************
  8621 ;; Defined at:
  8622 ;;		line 207 in file "../eeprom_settings.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;  Location        2   18[COMRAM] unsigned int 
  8625 ;;  Value           2   20[COMRAM] unsigned int 
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;  Location_Hig    2   24[COMRAM] unsigned int 
  8628 ;;  Location_Low    2   22[COMRAM] unsigned int 
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      void 
  8631 ;; Registers used:
  8632 ;;		wreg, status,2, status,0
  8633 ;; Tracked objects:
  8634 ;;		On entry : 0/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8638 ;;      Params:         4       0       0       0       0       0       0       0       0
  8639 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8641 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8642 ;;Total ram usage:        8 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; Hardware stack levels required when called:    3
  8645 ;; This function calls:
  8646 ;;		Nothing
  8647 ;; This function is called by:
  8648 ;;		_EEPROMxSTORE
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           	psect	text17
  8653  003E88                     __ptext17:
  8654                           	opt stack 0
  8655  003E88                     _Eeprom_Store:
  8656                           	opt stack 25
  8657                           
  8658                           ;eeprom_settings.c: 209: unsigned int Location_High_Byte = Location * 2;
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;incstack = 0
  8662  003E88  90D8               	bcf	status,0,c
  8663  003E8A  3413               	rlcf	Eeprom_Store@Location,w,c
  8664  003E8C  6E19               	movwf	Eeprom_Store@Location_High_Byte,c
  8665  003E8E  3414               	rlcf	Eeprom_Store@Location+1,w,c
  8666  003E90  6E1A               	movwf	Eeprom_Store@Location_High_Byte+1,c
  8667                           
  8668                           ;eeprom_settings.c: 210: unsigned int Location_Low_Byte = Location_High_Byte + 1;
  8669  003E92  0E01               	movlw	1
  8670  003E94  2419               	addwf	Eeprom_Store@Location_High_Byte,w,c
  8671  003E96  6E17               	movwf	Eeprom_Store@Location_Low_Byte,c
  8672  003E98  0E00               	movlw	0
  8673  003E9A  201A               	addwfc	Eeprom_Store@Location_High_Byte+1,w,c
  8674  003E9C  6E18               	movwf	Eeprom_Store@Location_Low_Byte+1,c
  8675                           
  8676                           ;eeprom_settings.c: 214: EECON1bits.WRERR = 0;
  8677  003E9E  96A6               	bcf	4006,3,c	;volsfr
  8678                           
  8679                           ;eeprom_settings.c: 215: EEADR = (unsigned char)Location_High_Byte;
  8680  003EA0  C019  FFA9         	movff	Eeprom_Store@Location_High_Byte,4009	;volatile
  8681                           
  8682                           ;eeprom_settings.c: 216: EEDATA = (unsigned char)(Value >> 8);
  8683  003EA4  5016               	movf	Eeprom_Store@Value+1,w,c
  8684  003EA6  6EA8               	movwf	4008,c	;volatile
  8685                           
  8686                           ;eeprom_settings.c: 217: EECON1bits.EEPGD = 0;
  8687  003EA8  9EA6               	bcf	4006,7,c	;volsfr
  8688                           
  8689                           ;eeprom_settings.c: 218: EECON1bits.CFGS = 0;
  8690  003EAA  9CA6               	bcf	4006,6,c	;volsfr
  8691                           
  8692                           ;eeprom_settings.c: 219: EECON1bits.WREN = 1;
  8693  003EAC  84A6               	bsf	4006,2,c	;volsfr
  8694                           
  8695                           ;eeprom_settings.c: 220: EECON2 = 0x55;
  8696  003EAE  0E55               	movlw	85
  8697  003EB0  6EA7               	movwf	4007,c	;volsfr
  8698                           
  8699                           ;eeprom_settings.c: 221: EECON2 = 0xAA;
  8700  003EB2  0EAA               	movlw	170
  8701  003EB4  6EA7               	movwf	4007,c	;volsfr
  8702                           
  8703                           ;eeprom_settings.c: 222: EECON1bits.WR = 1;
  8704  003EB6  82A6               	bsf	4006,1,c	;volsfr
  8705  003EB8                     
  8706                           ;eeprom_settings.c: 224: continue;
  8707  003EB8  A2A6               	btfss	4006,1,c	;volsfr
  8708  003EBA  D002               	goto	u7420
  8709  003EBC  A8A1               	btfss	4001,4,c	;volatile
  8710  003EBE  D7FC               	goto	l776
  8711  003EC0                     u7420:
  8712                           
  8713                           ;eeprom_settings.c: 225: }
  8714                           ;eeprom_settings.c: 226: PIR2bits.EEIF = 0;
  8715  003EC0  98A1               	bcf	4001,4,c	;volatile
  8716                           
  8717                           ;eeprom_settings.c: 236: EECON1bits.WRERR = 0;
  8718  003EC2  96A6               	bcf	4006,3,c	;volsfr
  8719                           
  8720                           ;eeprom_settings.c: 237: EEADR = (unsigned char)Location_Low_Byte;
  8721  003EC4  C017  FFA9         	movff	Eeprom_Store@Location_Low_Byte,4009	;volatile
  8722                           
  8723                           ;eeprom_settings.c: 238: EEDATA = (unsigned char)Value;
  8724  003EC8  C015  FFA8         	movff	Eeprom_Store@Value,4008	;volatile
  8725                           
  8726                           ;eeprom_settings.c: 239: EECON1bits.EEPGD = 0;
  8727  003ECC  9EA6               	bcf	4006,7,c	;volsfr
  8728                           
  8729                           ;eeprom_settings.c: 240: EECON1bits.CFGS = 0;
  8730  003ECE  9CA6               	bcf	4006,6,c	;volsfr
  8731                           
  8732                           ;eeprom_settings.c: 241: EECON1bits.WREN = 1;
  8733  003ED0  84A6               	bsf	4006,2,c	;volsfr
  8734                           
  8735                           ;eeprom_settings.c: 242: INTCON = 0x00;
  8736  003ED2  0E00               	movlw	0
  8737  003ED4  6EF2               	movwf	intcon,c	;volatile
  8738                           
  8739                           ;eeprom_settings.c: 243: EECON2 = 0x55;
  8740  003ED6  0E55               	movlw	85
  8741  003ED8  6EA7               	movwf	4007,c	;volsfr
  8742                           
  8743                           ;eeprom_settings.c: 244: EECON2 = 0xAA;
  8744  003EDA  0EAA               	movlw	170
  8745  003EDC  6EA7               	movwf	4007,c	;volsfr
  8746                           
  8747                           ;eeprom_settings.c: 245: EECON1bits.WR = 1;
  8748  003EDE  82A6               	bsf	4006,1,c	;volsfr
  8749  003EE0                     
  8750                           ;eeprom_settings.c: 247: continue;
  8751  003EE0  A2A6               	btfss	4006,1,c	;volsfr
  8752  003EE2  D002               	goto	u7440
  8753  003EE4  A8A1               	btfss	4001,4,c	;volatile
  8754  003EE6  D7FC               	goto	l781
  8755  003EE8                     u7440:
  8756                           
  8757                           ;eeprom_settings.c: 248: }
  8758                           ;eeprom_settings.c: 249: PIR2bits.EEIF = 0;
  8759  003EE8  98A1               	bcf	4001,4,c	;volatile
  8760                           
  8761                           ;eeprom_settings.c: 259: EECON1bits.WREN = 0;
  8762  003EEA  94A6               	bcf	4006,2,c	;volsfr
  8763                           
  8764                           ;eeprom_settings.c: 261: EEADR = 0xFF;
  8765  003EEC  68A9               	setf	4009,c	;volatile
  8766  003EEE  0012               	return		;funcret
  8767  003EF0                     __end_of_Eeprom_Store:
  8768                           	opt stack 0
  8769                           tblptru	equ	0xFF8
  8770                           tblptrh	equ	0xFF7
  8771                           tblptrl	equ	0xFF6
  8772                           tablat	equ	0xFF5
  8773                           prodh	equ	0xFF4
  8774                           prodl	equ	0xFF3
  8775                           intcon	equ	0xFF2
  8776                           postinc0	equ	0xFEE
  8777                           wreg	equ	0xFE8
  8778                           postinc1	equ	0xFE6
  8779                           postdec1	equ	0xFE5
  8780                           fsr1h	equ	0xFE2
  8781                           fsr1l	equ	0xFE1
  8782                           postinc2	equ	0xFDE
  8783                           postdec2	equ	0xFDD
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function _Debounce_Inputs *****************
  8789 ;; Defined at:
  8790 ;;		line 158 in file "../io.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;		None
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;		None
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      void 
  8797 ;; Registers used:
  8798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8804 ;;      Params:         0       0       0       0       0       0       0       0       0
  8805 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8806 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8807 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8808 ;;Total ram usage:        2 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    5
  8811 ;; This function calls:
  8812 ;;		_GETxAPIxVAL
  8813 ;;		_SETxAPIxVAL
  8814 ;;		_SetDCPWM1
  8815 ;; This function is called by:
  8816 ;;		_Update_StateMchn
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           	psect	text18
  8821  001742                     __ptext18:
  8822                           	opt stack 0
  8823  001742                     _Debounce_Inputs:
  8824                           	opt stack 24
  8825                           
  8826                           ;io.c: 160: PORTAbits.RA3 = GETxAPIxVAL(64);
  8827                           
  8828                           ;incstack = 0
  8829  001742  0E00               	movlw	0
  8830  001744  6E14               	movwf	GETxAPIxVAL@index+1,c
  8831  001746  0E40               	movlw	64
  8832  001748  6E13               	movwf	GETxAPIxVAL@index,c
  8833  00174A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  8834  00174E  4613               	rlncf	?_GETxAPIxVAL,f,c
  8835  001750  4613               	rlncf	?_GETxAPIxVAL,f,c
  8836  001752  4613               	rlncf	?_GETxAPIxVAL,f,c
  8837  001754  5080               	movf	3968,w,c	;volatile
  8838  001756  1813               	xorwf	?_GETxAPIxVAL,w,c
  8839  001758  0BF7               	andlw	-9
  8840  00175A  1813               	xorwf	?_GETxAPIxVAL,w,c
  8841  00175C  6E80               	movwf	3968,c	;volatile
  8842                           
  8843                           ;io.c: 161: PORTAbits.RA2 = GETxAPIxVAL(65);
  8844  00175E  0E00               	movlw	0
  8845  001760  6E14               	movwf	GETxAPIxVAL@index+1,c
  8846  001762  0E41               	movlw	65
  8847  001764  6E13               	movwf	GETxAPIxVAL@index,c
  8848  001766  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  8849  00176A  4613               	rlncf	?_GETxAPIxVAL,f,c
  8850  00176C  4613               	rlncf	?_GETxAPIxVAL,f,c
  8851  00176E  5080               	movf	3968,w,c	;volatile
  8852  001770  1813               	xorwf	?_GETxAPIxVAL,w,c
  8853  001772  0BFB               	andlw	-5
  8854  001774  1813               	xorwf	?_GETxAPIxVAL,w,c
  8855  001776  6E80               	movwf	3968,c	;volatile
  8856                           
  8857                           ;io.c: 162: PORTAbits.RA1 = GETxAPIxVAL(66);
  8858  001778  0E00               	movlw	0
  8859  00177A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8860  00177C  0E42               	movlw	66
  8861  00177E  6E13               	movwf	GETxAPIxVAL@index,c
  8862  001780  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  8863  001784  4613               	rlncf	?_GETxAPIxVAL,f,c
  8864  001786  5080               	movf	3968,w,c	;volatile
  8865  001788  1813               	xorwf	?_GETxAPIxVAL,w,c
  8866  00178A  0BFD               	andlw	-3
  8867  00178C  1813               	xorwf	?_GETxAPIxVAL,w,c
  8868  00178E  6E80               	movwf	3968,c	;volatile
  8869                           
  8870                           ;io.c: 163: PORTAbits.RA0 = GETxAPIxVAL(67);
  8871  001790  0E00               	movlw	0
  8872  001792  6E14               	movwf	GETxAPIxVAL@index+1,c
  8873  001794  0E43               	movlw	67
  8874  001796  6E13               	movwf	GETxAPIxVAL@index,c
  8875  001798  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  8876  00179C  5080               	movf	3968,w,c	;volatile
  8877  00179E  1813               	xorwf	?_GETxAPIxVAL,w,c
  8878  0017A0  0BFE               	andlw	-2
  8879  0017A2  1813               	xorwf	?_GETxAPIxVAL,w,c
  8880  0017A4  6E80               	movwf	3968,c	;volatile
  8881                           
  8882                           ;io.c: 164: PORTCbits.RC0 = GETxAPIxVAL(69);
  8883  0017A6  0E00               	movlw	0
  8884  0017A8  6E14               	movwf	GETxAPIxVAL@index+1,c
  8885  0017AA  0E45               	movlw	69
  8886  0017AC  6E13               	movwf	GETxAPIxVAL@index,c
  8887  0017AE  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  8888  0017B2  5082               	movf	3970,w,c	;volatile
  8889  0017B4  1813               	xorwf	?_GETxAPIxVAL,w,c
  8890  0017B6  0BFE               	andlw	-2
  8891  0017B8  1813               	xorwf	?_GETxAPIxVAL,w,c
  8892  0017BA  6E82               	movwf	3970,c	;volatile
  8893                           
  8894                           ;io.c: 165: SetDCPWM1(GETxAPIxVAL(88));
  8895  0017BC  0E00               	movlw	0
  8896  0017BE  6E14               	movwf	GETxAPIxVAL@index+1,c
  8897  0017C0  0E58               	movlw	88
  8898  0017C2  6E13               	movwf	GETxAPIxVAL@index,c
  8899  0017C4  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  8900  0017C8  C013  F015         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8901  0017CC  C014  F016         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8902  0017D0  EC5A  F020         	call	_SetDCPWM1	;wreg free
  8903                           
  8904                           ;io.c: 167: switch(PORTDbits.RD1)
  8905  0017D4  D02C               	goto	l872
  8906  0017D6  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8907  0017D8  B4D8               	btfsc	status,2,c
  8908  0017DA  D002               	goto	l874
  8909                           
  8910                           ;io.c: 170: {
  8911                           ;io.c: 171: Reed_Contact_LF_Counter--;
  8912  0017DC  063E               	decf	_Reed_Contact_LF_Counter,f,c
  8913                           
  8914                           ;io.c: 173: }
  8915                           
  8916                           ;io.c: 172: break;
  8917  0017DE  D05F               	goto	l881
  8918  0017E0                     l874:
  8919                           
  8920                           ;io.c: 174: else {SETxAPIxVAL(31, 0);}
  8921  0017E0  0E00               	movlw	0
  8922  0017E2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8923  0017E4  0E1F               	movlw	31
  8924  0017E6  6E19               	movwf	SETxAPIxVAL@index,c
  8925  0017E8  0E00               	movlw	0
  8926  0017EA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8927  0017EC  0E00               	movlw	0
  8928  0017EE  6E1B               	movwf	SETxAPIxVAL@value,c
  8929  0017F0  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  8930                           
  8931                           ;io.c: 175: break;
  8932  0017F4  D054               	goto	l881
  8933  0017F6  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8934  0017F8  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8935  0017FA  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8936  0017FC  0E00               	movlw	0
  8937  0017FE  6E14               	movwf	GETxAPIxVAL@index+1,c
  8938  001800  0E1B               	movlw	27
  8939  001802  6E13               	movwf	GETxAPIxVAL@index,c
  8940  001804  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  8941  001808  501F               	movf	??_Debounce_Inputs,w,c
  8942  00180A  5C13               	subwf	?_GETxAPIxVAL,w,c
  8943  00180C  5020               	movf	??_Debounce_Inputs+1,w,c
  8944  00180E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8945  001810  A0D8               	btfss	status,0,c
  8946  001812  D002               	goto	l878
  8947                           
  8948                           ;io.c: 178: {
  8949                           ;io.c: 179: Reed_Contact_LF_Counter++;
  8950  001814  2A3E               	incf	_Reed_Contact_LF_Counter,f,c
  8951                           
  8952                           ;io.c: 181: }
  8953                           
  8954                           ;io.c: 180: break;
  8955  001816  D043               	goto	l881
  8956  001818                     l878:
  8957                           
  8958                           ;io.c: 182: else {SETxAPIxVAL(31, 1);}
  8959  001818  0E00               	movlw	0
  8960  00181A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8961  00181C  0E1F               	movlw	31
  8962  00181E  6E19               	movwf	SETxAPIxVAL@index,c
  8963  001820  0E00               	movlw	0
  8964  001822  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8965  001824  0E01               	movlw	1
  8966  001826  6E1B               	movwf	SETxAPIxVAL@value,c
  8967  001828  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  8968                           
  8969                           ;io.c: 186: }
  8970                           
  8971                           ;io.c: 185: default : break;
  8972                           
  8973                           ;io.c: 183: break;
  8974  00182C  D038               	goto	l881
  8975  00182E                     l872:
  8976  00182E  A283               	btfss	3971,1,c	;volatile
  8977  001830  D002               	goto	u7510
  8978  001832  0E01               	movlw	1
  8979  001834  D001               	goto	u7516
  8980  001836                     u7510:
  8981  001836  0E00               	movlw	0
  8982  001838                     u7516:
  8983                           
  8984                           ; Switch size 1, requested type "space"
  8985                           ; Number of cases is 2, Range of values is 0 to 1
  8986                           ; switch strategies available:
  8987                           ; Name         Instructions Cycles
  8988                           ; simple_byte            7     4 (average)
  8989                           ;	Chosen strategy is simple_byte
  8990  001838  0A00               	xorlw	0	; case 0
  8991  00183A  B4D8               	btfsc	status,2,c
  8992  00183C  D7DC               	goto	l877
  8993  00183E  0A01               	xorlw	1	; case 1
  8994  001840  B4D8               	btfsc	status,2,c
  8995  001842  D7C9               	goto	l873
  8996                           
  8997                           ;io.c: 189: switch(PORTDbits.RD0)
  8998  001844  D02C               	goto	l881
  8999  001846  503D               	movf	_Reed_Contact_LB_Counter,w,c
  9000  001848  B4D8               	btfsc	status,2,c
  9001  00184A  D002               	goto	l883
  9002                           
  9003                           ;io.c: 192: {
  9004                           ;io.c: 193: Reed_Contact_LB_Counter--;
  9005  00184C  063D               	decf	_Reed_Contact_LB_Counter,f,c
  9006                           
  9007                           ;io.c: 195: }
  9008                           
  9009                           ;io.c: 194: break;
  9010  00184E  D05F               	goto	l890
  9011  001850                     l883:
  9012                           
  9013                           ;io.c: 196: else {SETxAPIxVAL(30, 0);}
  9014  001850  0E00               	movlw	0
  9015  001852  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9016  001854  0E1E               	movlw	30
  9017  001856  6E19               	movwf	SETxAPIxVAL@index,c
  9018  001858  0E00               	movlw	0
  9019  00185A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9020  00185C  0E00               	movlw	0
  9021  00185E  6E1B               	movwf	SETxAPIxVAL@value,c
  9022  001860  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9023                           
  9024                           ;io.c: 197: break;
  9025  001864  D054               	goto	l890
  9026  001866  503D               	movf	_Reed_Contact_LB_Counter,w,c
  9027  001868  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9028  00186A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9029  00186C  0E00               	movlw	0
  9030  00186E  6E14               	movwf	GETxAPIxVAL@index+1,c
  9031  001870  0E1B               	movlw	27
  9032  001872  6E13               	movwf	GETxAPIxVAL@index,c
  9033  001874  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9034  001878  501F               	movf	??_Debounce_Inputs,w,c
  9035  00187A  5C13               	subwf	?_GETxAPIxVAL,w,c
  9036  00187C  5020               	movf	??_Debounce_Inputs+1,w,c
  9037  00187E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9038  001880  A0D8               	btfss	status,0,c
  9039  001882  D002               	goto	l887
  9040                           
  9041                           ;io.c: 200: {
  9042                           ;io.c: 201: Reed_Contact_LB_Counter++;
  9043  001884  2A3D               	incf	_Reed_Contact_LB_Counter,f,c
  9044                           
  9045                           ;io.c: 203: }
  9046                           
  9047                           ;io.c: 202: break;
  9048  001886  D043               	goto	l890
  9049  001888                     l887:
  9050                           
  9051                           ;io.c: 204: else {SETxAPIxVAL(30, 1);}
  9052  001888  0E00               	movlw	0
  9053  00188A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9054  00188C  0E1E               	movlw	30
  9055  00188E  6E19               	movwf	SETxAPIxVAL@index,c
  9056  001890  0E00               	movlw	0
  9057  001892  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9058  001894  0E01               	movlw	1
  9059  001896  6E1B               	movwf	SETxAPIxVAL@value,c
  9060  001898  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9061                           
  9062                           ;io.c: 208: }
  9063                           
  9064                           ;io.c: 207: default : break;
  9065                           
  9066                           ;io.c: 205: break;
  9067  00189C  D038               	goto	l890
  9068  00189E                     l881:
  9069  00189E  A083               	btfss	3971,0,c	;volatile
  9070  0018A0  D002               	goto	u7540
  9071  0018A2  0E01               	movlw	1
  9072  0018A4  D001               	goto	u7546
  9073  0018A6                     u7540:
  9074  0018A6  0E00               	movlw	0
  9075  0018A8                     u7546:
  9076                           
  9077                           ; Switch size 1, requested type "space"
  9078                           ; Number of cases is 2, Range of values is 0 to 1
  9079                           ; switch strategies available:
  9080                           ; Name         Instructions Cycles
  9081                           ; simple_byte            7     4 (average)
  9082                           ;	Chosen strategy is simple_byte
  9083  0018A8  0A00               	xorlw	0	; case 0
  9084  0018AA  B4D8               	btfsc	status,2,c
  9085  0018AC  D7DC               	goto	l886
  9086  0018AE  0A01               	xorlw	1	; case 1
  9087  0018B0  B4D8               	btfsc	status,2,c
  9088  0018B2  D7C9               	goto	l882
  9089                           
  9090                           ;io.c: 211: switch(PORTDbits.RD3)
  9091  0018B4  D02C               	goto	l890
  9092  0018B6  503C               	movf	_Reed_Contact_RF_Counter,w,c
  9093  0018B8  B4D8               	btfsc	status,2,c
  9094  0018BA  D002               	goto	l892
  9095                           
  9096                           ;io.c: 214: {
  9097                           ;io.c: 215: Reed_Contact_RF_Counter--;
  9098  0018BC  063C               	decf	_Reed_Contact_RF_Counter,f,c
  9099                           
  9100                           ;io.c: 217: }
  9101                           
  9102                           ;io.c: 216: break;
  9103  0018BE  D05F               	goto	l899
  9104  0018C0                     l892:
  9105                           
  9106                           ;io.c: 218: else {SETxAPIxVAL(29, 0);}
  9107  0018C0  0E00               	movlw	0
  9108  0018C2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9109  0018C4  0E1D               	movlw	29
  9110  0018C6  6E19               	movwf	SETxAPIxVAL@index,c
  9111  0018C8  0E00               	movlw	0
  9112  0018CA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9113  0018CC  0E00               	movlw	0
  9114  0018CE  6E1B               	movwf	SETxAPIxVAL@value,c
  9115  0018D0  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9116                           
  9117                           ;io.c: 219: break;
  9118  0018D4  D054               	goto	l899
  9119  0018D6  503C               	movf	_Reed_Contact_RF_Counter,w,c
  9120  0018D8  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9121  0018DA  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9122  0018DC  0E00               	movlw	0
  9123  0018DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  9124  0018E0  0E1B               	movlw	27
  9125  0018E2  6E13               	movwf	GETxAPIxVAL@index,c
  9126  0018E4  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9127  0018E8  501F               	movf	??_Debounce_Inputs,w,c
  9128  0018EA  5C13               	subwf	?_GETxAPIxVAL,w,c
  9129  0018EC  5020               	movf	??_Debounce_Inputs+1,w,c
  9130  0018EE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9131  0018F0  A0D8               	btfss	status,0,c
  9132  0018F2  D002               	goto	l896
  9133                           
  9134                           ;io.c: 222: {
  9135                           ;io.c: 223: Reed_Contact_RF_Counter++;
  9136  0018F4  2A3C               	incf	_Reed_Contact_RF_Counter,f,c
  9137                           
  9138                           ;io.c: 225: }
  9139                           
  9140                           ;io.c: 224: break;
  9141  0018F6  D043               	goto	l899
  9142  0018F8                     l896:
  9143                           
  9144                           ;io.c: 226: else {SETxAPIxVAL(29, 1);}
  9145  0018F8  0E00               	movlw	0
  9146  0018FA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9147  0018FC  0E1D               	movlw	29
  9148  0018FE  6E19               	movwf	SETxAPIxVAL@index,c
  9149  001900  0E00               	movlw	0
  9150  001902  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9151  001904  0E01               	movlw	1
  9152  001906  6E1B               	movwf	SETxAPIxVAL@value,c
  9153  001908  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9154                           
  9155                           ;io.c: 230: }
  9156                           
  9157                           ;io.c: 229: default : break;
  9158                           
  9159                           ;io.c: 227: break;
  9160  00190C  D038               	goto	l899
  9161  00190E                     l890:
  9162  00190E  A683               	btfss	3971,3,c	;volatile
  9163  001910  D002               	goto	u7570
  9164  001912  0E01               	movlw	1
  9165  001914  D001               	goto	u7576
  9166  001916                     u7570:
  9167  001916  0E00               	movlw	0
  9168  001918                     u7576:
  9169                           
  9170                           ; Switch size 1, requested type "space"
  9171                           ; Number of cases is 2, Range of values is 0 to 1
  9172                           ; switch strategies available:
  9173                           ; Name         Instructions Cycles
  9174                           ; simple_byte            7     4 (average)
  9175                           ;	Chosen strategy is simple_byte
  9176  001918  0A00               	xorlw	0	; case 0
  9177  00191A  B4D8               	btfsc	status,2,c
  9178  00191C  D7DC               	goto	l895
  9179  00191E  0A01               	xorlw	1	; case 1
  9180  001920  B4D8               	btfsc	status,2,c
  9181  001922  D7C9               	goto	l891
  9182                           
  9183                           ;io.c: 233: switch(PORTDbits.RD2)
  9184  001924  D02C               	goto	l899
  9185  001926  503B               	movf	_Reed_Contact_RB_Counter,w,c
  9186  001928  B4D8               	btfsc	status,2,c
  9187  00192A  D002               	goto	l901
  9188                           
  9189                           ;io.c: 236: {
  9190                           ;io.c: 237: Reed_Contact_RB_Counter--;
  9191  00192C  063B               	decf	_Reed_Contact_RB_Counter,f,c
  9192                           
  9193                           ;io.c: 239: }
  9194                           
  9195                           ;io.c: 238: break;
  9196  00192E  D05F               	goto	l908
  9197  001930                     l901:
  9198                           
  9199                           ;io.c: 240: else {SETxAPIxVAL(28, 0);}
  9200  001930  0E00               	movlw	0
  9201  001932  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9202  001934  0E1C               	movlw	28
  9203  001936  6E19               	movwf	SETxAPIxVAL@index,c
  9204  001938  0E00               	movlw	0
  9205  00193A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9206  00193C  0E00               	movlw	0
  9207  00193E  6E1B               	movwf	SETxAPIxVAL@value,c
  9208  001940  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9209                           
  9210                           ;io.c: 241: break;
  9211  001944  D054               	goto	l908
  9212  001946  503B               	movf	_Reed_Contact_RB_Counter,w,c
  9213  001948  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9214  00194A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9215  00194C  0E00               	movlw	0
  9216  00194E  6E14               	movwf	GETxAPIxVAL@index+1,c
  9217  001950  0E1B               	movlw	27
  9218  001952  6E13               	movwf	GETxAPIxVAL@index,c
  9219  001954  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9220  001958  501F               	movf	??_Debounce_Inputs,w,c
  9221  00195A  5C13               	subwf	?_GETxAPIxVAL,w,c
  9222  00195C  5020               	movf	??_Debounce_Inputs+1,w,c
  9223  00195E  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9224  001960  A0D8               	btfss	status,0,c
  9225  001962  D002               	goto	l905
  9226                           
  9227                           ;io.c: 244: {
  9228                           ;io.c: 245: Reed_Contact_RB_Counter++;
  9229  001964  2A3B               	incf	_Reed_Contact_RB_Counter,f,c
  9230                           
  9231                           ;io.c: 247: }
  9232                           
  9233                           ;io.c: 246: break;
  9234  001966  D043               	goto	l908
  9235  001968                     l905:
  9236                           
  9237                           ;io.c: 248: else {SETxAPIxVAL(28, 1);}
  9238  001968  0E00               	movlw	0
  9239  00196A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9240  00196C  0E1C               	movlw	28
  9241  00196E  6E19               	movwf	SETxAPIxVAL@index,c
  9242  001970  0E00               	movlw	0
  9243  001972  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9244  001974  0E01               	movlw	1
  9245  001976  6E1B               	movwf	SETxAPIxVAL@value,c
  9246  001978  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9247                           
  9248                           ;io.c: 252: }
  9249                           
  9250                           ;io.c: 251: default : break;
  9251                           
  9252                           ;io.c: 249: break;
  9253  00197C  D038               	goto	l908
  9254  00197E                     l899:
  9255  00197E  A483               	btfss	3971,2,c	;volatile
  9256  001980  D002               	goto	u7600
  9257  001982  0E01               	movlw	1
  9258  001984  D001               	goto	u7606
  9259  001986                     u7600:
  9260  001986  0E00               	movlw	0
  9261  001988                     u7606:
  9262                           
  9263                           ; Switch size 1, requested type "space"
  9264                           ; Number of cases is 2, Range of values is 0 to 1
  9265                           ; switch strategies available:
  9266                           ; Name         Instructions Cycles
  9267                           ; simple_byte            7     4 (average)
  9268                           ;	Chosen strategy is simple_byte
  9269  001988  0A00               	xorlw	0	; case 0
  9270  00198A  B4D8               	btfsc	status,2,c
  9271  00198C  D7DC               	goto	l904
  9272  00198E  0A01               	xorlw	1	; case 1
  9273  001990  B4D8               	btfsc	status,2,c
  9274  001992  D7C9               	goto	l900
  9275                           
  9276                           ;io.c: 255: switch(!PORTBbits.RB0)
  9277  001994  D02C               	goto	l908
  9278  001996  5036               	movf	_Button_Contact_Counter_Start,w,c
  9279  001998  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9280  00199A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9281  00199C  0E00               	movlw	0
  9282  00199E  6E14               	movwf	GETxAPIxVAL@index+1,c
  9283  0019A0  0E1B               	movlw	27
  9284  0019A2  6E13               	movwf	GETxAPIxVAL@index,c
  9285  0019A4  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9286  0019A8  501F               	movf	??_Debounce_Inputs,w,c
  9287  0019AA  5C13               	subwf	?_GETxAPIxVAL,w,c
  9288  0019AC  5020               	movf	??_Debounce_Inputs+1,w,c
  9289  0019AE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9290  0019B0  A0D8               	btfss	status,0,c
  9291  0019B2  D002               	goto	l910
  9292                           
  9293                           ;io.c: 258: {
  9294                           ;io.c: 259: Button_Contact_Counter_Start++;
  9295  0019B4  2A36               	incf	_Button_Contact_Counter_Start,f,c
  9296                           
  9297                           ;io.c: 261: }
  9298                           
  9299                           ;io.c: 260: break;
  9300  0019B6  D05A               	goto	l917
  9301  0019B8                     l910:
  9302                           
  9303                           ;io.c: 262: else {SETxAPIxVAL(32, 1); }
  9304  0019B8  0E00               	movlw	0
  9305  0019BA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9306  0019BC  0E20               	movlw	32
  9307  0019BE  6E19               	movwf	SETxAPIxVAL@index,c
  9308  0019C0  0E00               	movlw	0
  9309  0019C2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9310  0019C4  0E01               	movlw	1
  9311  0019C6  6E1B               	movwf	SETxAPIxVAL@value,c
  9312  0019C8  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9313                           
  9314                           ;io.c: 263: break;
  9315  0019CC  D04F               	goto	l917
  9316  0019CE  5036               	movf	_Button_Contact_Counter_Start,w,c
  9317  0019D0  B4D8               	btfsc	status,2,c
  9318  0019D2  D002               	goto	l914
  9319                           
  9320                           ;io.c: 266: {
  9321                           ;io.c: 267: Button_Contact_Counter_Start--;
  9322  0019D4  0636               	decf	_Button_Contact_Counter_Start,f,c
  9323                           
  9324                           ;io.c: 269: }
  9325                           
  9326                           ;io.c: 268: break;
  9327  0019D6  D04A               	goto	l917
  9328  0019D8                     l914:
  9329                           
  9330                           ;io.c: 270: else {SETxAPIxVAL(32, 0);}
  9331  0019D8  0E00               	movlw	0
  9332  0019DA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9333  0019DC  0E20               	movlw	32
  9334  0019DE  6E19               	movwf	SETxAPIxVAL@index,c
  9335  0019E0  0E00               	movlw	0
  9336  0019E2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9337  0019E4  0E00               	movlw	0
  9338  0019E6  6E1B               	movwf	SETxAPIxVAL@value,c
  9339  0019E8  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9340                           
  9341                           ;io.c: 274: }
  9342                           
  9343                           ;io.c: 273: default : break;
  9344                           
  9345                           ;io.c: 271: break;
  9346  0019EC  D03F               	goto	l917
  9347  0019EE                     l908:
  9348  0019EE  B081               	btfsc	3969,0,c	;volatile
  9349  0019F0  D002               	goto	u7630
  9350  0019F2  0E01               	movlw	1
  9351  0019F4  D001               	goto	u7640
  9352  0019F6                     u7630:
  9353  0019F6  0E00               	movlw	0
  9354  0019F8                     u7640:
  9355  0019F8  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9356  0019FA  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9357                           
  9358                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9359                           ; Switch size 1, requested type "space"
  9360                           ; Number of cases is 1, Range of values is 0 to 0
  9361                           ; switch strategies available:
  9362                           ; Name         Instructions Cycles
  9363                           ; simple_byte            4     3 (average)
  9364                           ;	Chosen strategy is simple_byte
  9365  0019FC  5020               	movf	??_Debounce_Inputs+1,w,c
  9366  0019FE  0A00               	xorlw	0	; case 0
  9367  001A00  A4D8               	btfss	status,2,c
  9368  001A02  D034               	goto	l917
  9369                           
  9370                           ; Switch size 1, requested type "space"
  9371                           ; Number of cases is 2, Range of values is 0 to 1
  9372                           ; switch strategies available:
  9373                           ; Name         Instructions Cycles
  9374                           ; simple_byte            7     4 (average)
  9375                           ;	Chosen strategy is simple_byte
  9376  001A04  501F               	movf	??_Debounce_Inputs,w,c
  9377  001A06  0A00               	xorlw	0	; case 0
  9378  001A08  B4D8               	btfsc	status,2,c
  9379  001A0A  D7E1               	goto	l913
  9380  001A0C  0A01               	xorlw	1	; case 1
  9381  001A0E  B4D8               	btfsc	status,2,c
  9382  001A10  D7C2               	goto	l909
  9383                           
  9384                           ;io.c: 277: switch(!PORTDbits.RD7)
  9385  001A12  D02C               	goto	l917
  9386  001A14  5035               	movf	_Button_Contact_Counter_Stop,w,c
  9387  001A16  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9388  001A18  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9389  001A1A  0E00               	movlw	0
  9390  001A1C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9391  001A1E  0E1B               	movlw	27
  9392  001A20  6E13               	movwf	GETxAPIxVAL@index,c
  9393  001A22  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9394  001A26  501F               	movf	??_Debounce_Inputs,w,c
  9395  001A28  5C13               	subwf	?_GETxAPIxVAL,w,c
  9396  001A2A  5020               	movf	??_Debounce_Inputs+1,w,c
  9397  001A2C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9398  001A2E  A0D8               	btfss	status,0,c
  9399  001A30  D002               	goto	l919
  9400                           
  9401                           ;io.c: 280: {
  9402                           ;io.c: 281: Button_Contact_Counter_Stop++;
  9403  001A32  2A35               	incf	_Button_Contact_Counter_Stop,f,c
  9404                           
  9405                           ;io.c: 283: }
  9406                           
  9407                           ;io.c: 282: break;
  9408  001A34  D05A               	goto	l926
  9409  001A36                     l919:
  9410                           
  9411                           ;io.c: 284: else {SETxAPIxVAL(33, 1); }
  9412  001A36  0E00               	movlw	0
  9413  001A38  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9414  001A3A  0E21               	movlw	33
  9415  001A3C  6E19               	movwf	SETxAPIxVAL@index,c
  9416  001A3E  0E00               	movlw	0
  9417  001A40  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9418  001A42  0E01               	movlw	1
  9419  001A44  6E1B               	movwf	SETxAPIxVAL@value,c
  9420  001A46  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9421                           
  9422                           ;io.c: 285: break;
  9423  001A4A  D04F               	goto	l926
  9424  001A4C  5035               	movf	_Button_Contact_Counter_Stop,w,c
  9425  001A4E  B4D8               	btfsc	status,2,c
  9426  001A50  D002               	goto	l923
  9427                           
  9428                           ;io.c: 288: {
  9429                           ;io.c: 289: Button_Contact_Counter_Stop--;
  9430  001A52  0635               	decf	_Button_Contact_Counter_Stop,f,c
  9431                           
  9432                           ;io.c: 291: }
  9433                           
  9434                           ;io.c: 290: break;
  9435  001A54  D04A               	goto	l926
  9436  001A56                     l923:
  9437                           
  9438                           ;io.c: 292: else {SETxAPIxVAL(33, 0);}
  9439  001A56  0E00               	movlw	0
  9440  001A58  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9441  001A5A  0E21               	movlw	33
  9442  001A5C  6E19               	movwf	SETxAPIxVAL@index,c
  9443  001A5E  0E00               	movlw	0
  9444  001A60  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9445  001A62  0E00               	movlw	0
  9446  001A64  6E1B               	movwf	SETxAPIxVAL@value,c
  9447  001A66  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9448                           
  9449                           ;io.c: 296: }
  9450                           
  9451                           ;io.c: 295: default : break;
  9452                           
  9453                           ;io.c: 293: break;
  9454  001A6A  D03F               	goto	l926
  9455  001A6C                     l917:
  9456  001A6C  BE83               	btfsc	3971,7,c	;volatile
  9457  001A6E  D002               	goto	u7670
  9458  001A70  0E01               	movlw	1
  9459  001A72  D001               	goto	u7680
  9460  001A74                     u7670:
  9461  001A74  0E00               	movlw	0
  9462  001A76                     u7680:
  9463  001A76  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9464  001A78  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9465                           
  9466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9467                           ; Switch size 1, requested type "space"
  9468                           ; Number of cases is 1, Range of values is 0 to 0
  9469                           ; switch strategies available:
  9470                           ; Name         Instructions Cycles
  9471                           ; simple_byte            4     3 (average)
  9472                           ;	Chosen strategy is simple_byte
  9473  001A7A  5020               	movf	??_Debounce_Inputs+1,w,c
  9474  001A7C  0A00               	xorlw	0	; case 0
  9475  001A7E  A4D8               	btfss	status,2,c
  9476  001A80  D034               	goto	l926
  9477                           
  9478                           ; Switch size 1, requested type "space"
  9479                           ; Number of cases is 2, Range of values is 0 to 1
  9480                           ; switch strategies available:
  9481                           ; Name         Instructions Cycles
  9482                           ; simple_byte            7     4 (average)
  9483                           ;	Chosen strategy is simple_byte
  9484  001A82  501F               	movf	??_Debounce_Inputs,w,c
  9485  001A84  0A00               	xorlw	0	; case 0
  9486  001A86  B4D8               	btfsc	status,2,c
  9487  001A88  D7E1               	goto	l922
  9488  001A8A  0A01               	xorlw	1	; case 1
  9489  001A8C  B4D8               	btfsc	status,2,c
  9490  001A8E  D7C2               	goto	l918
  9491                           
  9492                           ;io.c: 299: switch(!PORTBbits.RB1)
  9493  001A90  D02C               	goto	l926
  9494  001A92  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9495  001A94  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9496  001A96  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9497  001A98  0E00               	movlw	0
  9498  001A9A  6E14               	movwf	GETxAPIxVAL@index+1,c
  9499  001A9C  0E1B               	movlw	27
  9500  001A9E  6E13               	movwf	GETxAPIxVAL@index,c
  9501  001AA0  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9502  001AA4  501F               	movf	??_Debounce_Inputs,w,c
  9503  001AA6  5C13               	subwf	?_GETxAPIxVAL,w,c
  9504  001AA8  5020               	movf	??_Debounce_Inputs+1,w,c
  9505  001AAA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9506  001AAC  A0D8               	btfss	status,0,c
  9507  001AAE  D002               	goto	l928
  9508                           
  9509                           ;io.c: 302: {
  9510                           ;io.c: 303: Button_Contact_Counter_Middle++;
  9511  001AB0  2A34               	incf	_Button_Contact_Counter_Middle,f,c
  9512                           
  9513                           ;io.c: 305: }
  9514                           
  9515                           ;io.c: 304: break;
  9516  001AB2  D05A               	goto	l935
  9517  001AB4                     l928:
  9518                           
  9519                           ;io.c: 306: else {SETxAPIxVAL(34, 1); }
  9520  001AB4  0E00               	movlw	0
  9521  001AB6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9522  001AB8  0E22               	movlw	34
  9523  001ABA  6E19               	movwf	SETxAPIxVAL@index,c
  9524  001ABC  0E00               	movlw	0
  9525  001ABE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9526  001AC0  0E01               	movlw	1
  9527  001AC2  6E1B               	movwf	SETxAPIxVAL@value,c
  9528  001AC4  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9529                           
  9530                           ;io.c: 307: break;
  9531  001AC8  D04F               	goto	l935
  9532  001ACA  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9533  001ACC  B4D8               	btfsc	status,2,c
  9534  001ACE  D002               	goto	l932
  9535                           
  9536                           ;io.c: 310: {
  9537                           ;io.c: 311: Button_Contact_Counter_Middle--;
  9538  001AD0  0634               	decf	_Button_Contact_Counter_Middle,f,c
  9539                           
  9540                           ;io.c: 313: }
  9541                           
  9542                           ;io.c: 312: break;
  9543  001AD2  D04A               	goto	l935
  9544  001AD4                     l932:
  9545                           
  9546                           ;io.c: 314: else {SETxAPIxVAL(34, 0);}
  9547  001AD4  0E00               	movlw	0
  9548  001AD6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9549  001AD8  0E22               	movlw	34
  9550  001ADA  6E19               	movwf	SETxAPIxVAL@index,c
  9551  001ADC  0E00               	movlw	0
  9552  001ADE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9553  001AE0  0E00               	movlw	0
  9554  001AE2  6E1B               	movwf	SETxAPIxVAL@value,c
  9555  001AE4  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9556                           
  9557                           ;io.c: 318: }
  9558                           
  9559                           ;io.c: 317: default : break;
  9560                           
  9561                           ;io.c: 315: break;
  9562  001AE8  D03F               	goto	l935
  9563  001AEA                     l926:
  9564  001AEA  B281               	btfsc	3969,1,c	;volatile
  9565  001AEC  D002               	goto	u7710
  9566  001AEE  0E01               	movlw	1
  9567  001AF0  D001               	goto	u7720
  9568  001AF2                     u7710:
  9569  001AF2  0E00               	movlw	0
  9570  001AF4                     u7720:
  9571  001AF4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9572  001AF6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9573                           
  9574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9575                           ; Switch size 1, requested type "space"
  9576                           ; Number of cases is 1, Range of values is 0 to 0
  9577                           ; switch strategies available:
  9578                           ; Name         Instructions Cycles
  9579                           ; simple_byte            4     3 (average)
  9580                           ;	Chosen strategy is simple_byte
  9581  001AF8  5020               	movf	??_Debounce_Inputs+1,w,c
  9582  001AFA  0A00               	xorlw	0	; case 0
  9583  001AFC  A4D8               	btfss	status,2,c
  9584  001AFE  D034               	goto	l935
  9585                           
  9586                           ; Switch size 1, requested type "space"
  9587                           ; Number of cases is 2, Range of values is 0 to 1
  9588                           ; switch strategies available:
  9589                           ; Name         Instructions Cycles
  9590                           ; simple_byte            7     4 (average)
  9591                           ;	Chosen strategy is simple_byte
  9592  001B00  501F               	movf	??_Debounce_Inputs,w,c
  9593  001B02  0A00               	xorlw	0	; case 0
  9594  001B04  B4D8               	btfsc	status,2,c
  9595  001B06  D7E1               	goto	l931
  9596  001B08  0A01               	xorlw	1	; case 1
  9597  001B0A  B4D8               	btfsc	status,2,c
  9598  001B0C  D7C2               	goto	l927
  9599                           
  9600                           ;io.c: 321: switch(!PORTBbits.RB5)
  9601  001B0E  D02C               	goto	l935
  9602  001B10  5033               	movf	_Button_Contact_Counter_LB,w,c
  9603  001B12  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9604  001B14  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9605  001B16  0E00               	movlw	0
  9606  001B18  6E14               	movwf	GETxAPIxVAL@index+1,c
  9607  001B1A  0E1B               	movlw	27
  9608  001B1C  6E13               	movwf	GETxAPIxVAL@index,c
  9609  001B1E  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9610  001B22  501F               	movf	??_Debounce_Inputs,w,c
  9611  001B24  5C13               	subwf	?_GETxAPIxVAL,w,c
  9612  001B26  5020               	movf	??_Debounce_Inputs+1,w,c
  9613  001B28  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9614  001B2A  A0D8               	btfss	status,0,c
  9615  001B2C  D002               	goto	l937
  9616                           
  9617                           ;io.c: 324: {
  9618                           ;io.c: 325: Button_Contact_Counter_LB++;
  9619  001B2E  2A33               	incf	_Button_Contact_Counter_LB,f,c
  9620                           
  9621                           ;io.c: 327: }
  9622                           
  9623                           ;io.c: 326: break;
  9624  001B30  D05A               	goto	l944
  9625  001B32                     l937:
  9626                           
  9627                           ;io.c: 328: else {SETxAPIxVAL(35, 1); }
  9628  001B32  0E00               	movlw	0
  9629  001B34  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9630  001B36  0E23               	movlw	35
  9631  001B38  6E19               	movwf	SETxAPIxVAL@index,c
  9632  001B3A  0E00               	movlw	0
  9633  001B3C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9634  001B3E  0E01               	movlw	1
  9635  001B40  6E1B               	movwf	SETxAPIxVAL@value,c
  9636  001B42  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9637                           
  9638                           ;io.c: 329: break;
  9639  001B46  D04F               	goto	l944
  9640  001B48  5033               	movf	_Button_Contact_Counter_LB,w,c
  9641  001B4A  B4D8               	btfsc	status,2,c
  9642  001B4C  D002               	goto	l941
  9643                           
  9644                           ;io.c: 332: {
  9645                           ;io.c: 333: Button_Contact_Counter_LB--;
  9646  001B4E  0633               	decf	_Button_Contact_Counter_LB,f,c
  9647                           
  9648                           ;io.c: 335: }
  9649                           
  9650                           ;io.c: 334: break;
  9651  001B50  D04A               	goto	l944
  9652  001B52                     l941:
  9653                           
  9654                           ;io.c: 336: else {SETxAPIxVAL(35, 0);}
  9655  001B52  0E00               	movlw	0
  9656  001B54  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9657  001B56  0E23               	movlw	35
  9658  001B58  6E19               	movwf	SETxAPIxVAL@index,c
  9659  001B5A  0E00               	movlw	0
  9660  001B5C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9661  001B5E  0E00               	movlw	0
  9662  001B60  6E1B               	movwf	SETxAPIxVAL@value,c
  9663  001B62  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9664                           
  9665                           ;io.c: 340: }
  9666                           
  9667                           ;io.c: 339: default : break;
  9668                           
  9669                           ;io.c: 337: break;
  9670  001B66  D03F               	goto	l944
  9671  001B68                     l935:
  9672  001B68  BA81               	btfsc	3969,5,c	;volatile
  9673  001B6A  D002               	goto	u7750
  9674  001B6C  0E01               	movlw	1
  9675  001B6E  D001               	goto	u7760
  9676  001B70                     u7750:
  9677  001B70  0E00               	movlw	0
  9678  001B72                     u7760:
  9679  001B72  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9680  001B74  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9681                           
  9682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9683                           ; Switch size 1, requested type "space"
  9684                           ; Number of cases is 1, Range of values is 0 to 0
  9685                           ; switch strategies available:
  9686                           ; Name         Instructions Cycles
  9687                           ; simple_byte            4     3 (average)
  9688                           ;	Chosen strategy is simple_byte
  9689  001B76  5020               	movf	??_Debounce_Inputs+1,w,c
  9690  001B78  0A00               	xorlw	0	; case 0
  9691  001B7A  A4D8               	btfss	status,2,c
  9692  001B7C  D034               	goto	l944
  9693                           
  9694                           ; Switch size 1, requested type "space"
  9695                           ; Number of cases is 2, Range of values is 0 to 1
  9696                           ; switch strategies available:
  9697                           ; Name         Instructions Cycles
  9698                           ; simple_byte            7     4 (average)
  9699                           ;	Chosen strategy is simple_byte
  9700  001B7E  501F               	movf	??_Debounce_Inputs,w,c
  9701  001B80  0A00               	xorlw	0	; case 0
  9702  001B82  B4D8               	btfsc	status,2,c
  9703  001B84  D7E1               	goto	l940
  9704  001B86  0A01               	xorlw	1	; case 1
  9705  001B88  B4D8               	btfsc	status,2,c
  9706  001B8A  D7C2               	goto	l936
  9707                           
  9708                           ;io.c: 343: switch(!PORTBbits.RB4)
  9709  001B8C  D02C               	goto	l944
  9710  001B8E  5032               	movf	_Button_Contact_Counter_LF,w,c
  9711  001B90  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9712  001B92  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9713  001B94  0E00               	movlw	0
  9714  001B96  6E14               	movwf	GETxAPIxVAL@index+1,c
  9715  001B98  0E1B               	movlw	27
  9716  001B9A  6E13               	movwf	GETxAPIxVAL@index,c
  9717  001B9C  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9718  001BA0  501F               	movf	??_Debounce_Inputs,w,c
  9719  001BA2  5C13               	subwf	?_GETxAPIxVAL,w,c
  9720  001BA4  5020               	movf	??_Debounce_Inputs+1,w,c
  9721  001BA6  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9722  001BA8  A0D8               	btfss	status,0,c
  9723  001BAA  D002               	goto	l946
  9724                           
  9725                           ;io.c: 346: {
  9726                           ;io.c: 347: Button_Contact_Counter_LF++;
  9727  001BAC  2A32               	incf	_Button_Contact_Counter_LF,f,c
  9728                           
  9729                           ;io.c: 349: }
  9730                           
  9731                           ;io.c: 348: break;
  9732  001BAE  D05A               	goto	l953
  9733  001BB0                     l946:
  9734                           
  9735                           ;io.c: 350: else {SETxAPIxVAL(36, 1); }
  9736  001BB0  0E00               	movlw	0
  9737  001BB2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9738  001BB4  0E24               	movlw	36
  9739  001BB6  6E19               	movwf	SETxAPIxVAL@index,c
  9740  001BB8  0E00               	movlw	0
  9741  001BBA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9742  001BBC  0E01               	movlw	1
  9743  001BBE  6E1B               	movwf	SETxAPIxVAL@value,c
  9744  001BC0  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9745                           
  9746                           ;io.c: 351: break;
  9747  001BC4  D04F               	goto	l953
  9748  001BC6  5032               	movf	_Button_Contact_Counter_LF,w,c
  9749  001BC8  B4D8               	btfsc	status,2,c
  9750  001BCA  D002               	goto	l950
  9751                           
  9752                           ;io.c: 354: {
  9753                           ;io.c: 355: Button_Contact_Counter_LF--;
  9754  001BCC  0632               	decf	_Button_Contact_Counter_LF,f,c
  9755                           
  9756                           ;io.c: 357: }
  9757                           
  9758                           ;io.c: 356: break;
  9759  001BCE  D04A               	goto	l953
  9760  001BD0                     l950:
  9761                           
  9762                           ;io.c: 358: else {SETxAPIxVAL(36, 0);}
  9763  001BD0  0E00               	movlw	0
  9764  001BD2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9765  001BD4  0E24               	movlw	36
  9766  001BD6  6E19               	movwf	SETxAPIxVAL@index,c
  9767  001BD8  0E00               	movlw	0
  9768  001BDA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9769  001BDC  0E00               	movlw	0
  9770  001BDE  6E1B               	movwf	SETxAPIxVAL@value,c
  9771  001BE0  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9772                           
  9773                           ;io.c: 362: }
  9774                           
  9775                           ;io.c: 361: default : break;
  9776                           
  9777                           ;io.c: 359: break;
  9778  001BE4  D03F               	goto	l953
  9779  001BE6                     l944:
  9780  001BE6  B881               	btfsc	3969,4,c	;volatile
  9781  001BE8  D002               	goto	u7790
  9782  001BEA  0E01               	movlw	1
  9783  001BEC  D001               	goto	u7800
  9784  001BEE                     u7790:
  9785  001BEE  0E00               	movlw	0
  9786  001BF0                     u7800:
  9787  001BF0  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9788  001BF2  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9789                           
  9790                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9791                           ; Switch size 1, requested type "space"
  9792                           ; Number of cases is 1, Range of values is 0 to 0
  9793                           ; switch strategies available:
  9794                           ; Name         Instructions Cycles
  9795                           ; simple_byte            4     3 (average)
  9796                           ;	Chosen strategy is simple_byte
  9797  001BF4  5020               	movf	??_Debounce_Inputs+1,w,c
  9798  001BF6  0A00               	xorlw	0	; case 0
  9799  001BF8  A4D8               	btfss	status,2,c
  9800  001BFA  D034               	goto	l953
  9801                           
  9802                           ; Switch size 1, requested type "space"
  9803                           ; Number of cases is 2, Range of values is 0 to 1
  9804                           ; switch strategies available:
  9805                           ; Name         Instructions Cycles
  9806                           ; simple_byte            7     4 (average)
  9807                           ;	Chosen strategy is simple_byte
  9808  001BFC  501F               	movf	??_Debounce_Inputs,w,c
  9809  001BFE  0A00               	xorlw	0	; case 0
  9810  001C00  B4D8               	btfsc	status,2,c
  9811  001C02  D7E1               	goto	l949
  9812  001C04  0A01               	xorlw	1	; case 1
  9813  001C06  B4D8               	btfsc	status,2,c
  9814  001C08  D7C2               	goto	l945
  9815                           
  9816                           ;io.c: 365: switch(!PORTBbits.RB3)
  9817  001C0A  D02C               	goto	l953
  9818  001C0C  5031               	movf	_Button_Contact_Counter_RB,w,c
  9819  001C0E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9820  001C10  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9821  001C12  0E00               	movlw	0
  9822  001C14  6E14               	movwf	GETxAPIxVAL@index+1,c
  9823  001C16  0E1B               	movlw	27
  9824  001C18  6E13               	movwf	GETxAPIxVAL@index,c
  9825  001C1A  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9826  001C1E  501F               	movf	??_Debounce_Inputs,w,c
  9827  001C20  5C13               	subwf	?_GETxAPIxVAL,w,c
  9828  001C22  5020               	movf	??_Debounce_Inputs+1,w,c
  9829  001C24  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9830  001C26  A0D8               	btfss	status,0,c
  9831  001C28  D002               	goto	l955
  9832                           
  9833                           ;io.c: 368: {
  9834                           ;io.c: 369: Button_Contact_Counter_RB++;
  9835  001C2A  2A31               	incf	_Button_Contact_Counter_RB,f,c
  9836                           
  9837                           ;io.c: 371: }
  9838                           
  9839                           ;io.c: 370: break;
  9840  001C2C  D05A               	goto	l962
  9841  001C2E                     l955:
  9842                           
  9843                           ;io.c: 372: else {SETxAPIxVAL(37, 1); }
  9844  001C2E  0E00               	movlw	0
  9845  001C30  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9846  001C32  0E25               	movlw	37
  9847  001C34  6E19               	movwf	SETxAPIxVAL@index,c
  9848  001C36  0E00               	movlw	0
  9849  001C38  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9850  001C3A  0E01               	movlw	1
  9851  001C3C  6E1B               	movwf	SETxAPIxVAL@value,c
  9852  001C3E  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9853                           
  9854                           ;io.c: 373: break;
  9855  001C42  D04F               	goto	l962
  9856  001C44  5031               	movf	_Button_Contact_Counter_RB,w,c
  9857  001C46  B4D8               	btfsc	status,2,c
  9858  001C48  D002               	goto	l959
  9859                           
  9860                           ;io.c: 376: {
  9861                           ;io.c: 377: Button_Contact_Counter_RB--;
  9862  001C4A  0631               	decf	_Button_Contact_Counter_RB,f,c
  9863                           
  9864                           ;io.c: 379: }
  9865                           
  9866                           ;io.c: 378: break;
  9867  001C4C  D04A               	goto	l962
  9868  001C4E                     l959:
  9869                           
  9870                           ;io.c: 380: else {SETxAPIxVAL(37, 0);}
  9871  001C4E  0E00               	movlw	0
  9872  001C50  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9873  001C52  0E25               	movlw	37
  9874  001C54  6E19               	movwf	SETxAPIxVAL@index,c
  9875  001C56  0E00               	movlw	0
  9876  001C58  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9877  001C5A  0E00               	movlw	0
  9878  001C5C  6E1B               	movwf	SETxAPIxVAL@value,c
  9879  001C5E  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9880                           
  9881                           ;io.c: 384: }
  9882                           
  9883                           ;io.c: 383: default : break;
  9884                           
  9885                           ;io.c: 381: break;
  9886  001C62  D03F               	goto	l962
  9887  001C64                     l953:
  9888  001C64  B681               	btfsc	3969,3,c	;volatile
  9889  001C66  D002               	goto	u7830
  9890  001C68  0E01               	movlw	1
  9891  001C6A  D001               	goto	u7840
  9892  001C6C                     u7830:
  9893  001C6C  0E00               	movlw	0
  9894  001C6E                     u7840:
  9895  001C6E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9896  001C70  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9897                           
  9898                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9899                           ; Switch size 1, requested type "space"
  9900                           ; Number of cases is 1, Range of values is 0 to 0
  9901                           ; switch strategies available:
  9902                           ; Name         Instructions Cycles
  9903                           ; simple_byte            4     3 (average)
  9904                           ;	Chosen strategy is simple_byte
  9905  001C72  5020               	movf	??_Debounce_Inputs+1,w,c
  9906  001C74  0A00               	xorlw	0	; case 0
  9907  001C76  A4D8               	btfss	status,2,c
  9908  001C78  D034               	goto	l962
  9909                           
  9910                           ; Switch size 1, requested type "space"
  9911                           ; Number of cases is 2, Range of values is 0 to 1
  9912                           ; switch strategies available:
  9913                           ; Name         Instructions Cycles
  9914                           ; simple_byte            7     4 (average)
  9915                           ;	Chosen strategy is simple_byte
  9916  001C7A  501F               	movf	??_Debounce_Inputs,w,c
  9917  001C7C  0A00               	xorlw	0	; case 0
  9918  001C7E  B4D8               	btfsc	status,2,c
  9919  001C80  D7E1               	goto	l958
  9920  001C82  0A01               	xorlw	1	; case 1
  9921  001C84  B4D8               	btfsc	status,2,c
  9922  001C86  D7C2               	goto	l954
  9923                           
  9924                           ;io.c: 387: switch(!PORTBbits.RB2)
  9925  001C88  D02C               	goto	l962
  9926  001C8A  5030               	movf	_Button_Contact_Counter_RF,w,c
  9927  001C8C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9928  001C8E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9929  001C90  0E00               	movlw	0
  9930  001C92  6E14               	movwf	GETxAPIxVAL@index+1,c
  9931  001C94  0E1B               	movlw	27
  9932  001C96  6E13               	movwf	GETxAPIxVAL@index,c
  9933  001C98  EC16  F021         	call	_GETxAPIxVAL	;wreg free
  9934  001C9C  501F               	movf	??_Debounce_Inputs,w,c
  9935  001C9E  5C13               	subwf	?_GETxAPIxVAL,w,c
  9936  001CA0  5020               	movf	??_Debounce_Inputs+1,w,c
  9937  001CA2  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9938  001CA4  A0D8               	btfss	status,0,c
  9939  001CA6  D002               	goto	l964
  9940                           
  9941                           ;io.c: 390: {
  9942                           ;io.c: 391: Button_Contact_Counter_RF++;
  9943  001CA8  2A30               	incf	_Button_Contact_Counter_RF,f,c
  9944                           
  9945                           ;io.c: 393: }
  9946                           
  9947                           ;io.c: 392: break;
  9948  001CAA  D05A               	goto	l971
  9949  001CAC                     l964:
  9950                           
  9951                           ;io.c: 394: else {SETxAPIxVAL(38, 1); }
  9952  001CAC  0E00               	movlw	0
  9953  001CAE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9954  001CB0  0E26               	movlw	38
  9955  001CB2  6E19               	movwf	SETxAPIxVAL@index,c
  9956  001CB4  0E00               	movlw	0
  9957  001CB6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9958  001CB8  0E01               	movlw	1
  9959  001CBA  6E1B               	movwf	SETxAPIxVAL@value,c
  9960  001CBC  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9961                           
  9962                           ;io.c: 395: break;
  9963  001CC0  D04F               	goto	l971
  9964  001CC2  5030               	movf	_Button_Contact_Counter_RF,w,c
  9965  001CC4  B4D8               	btfsc	status,2,c
  9966  001CC6  D002               	goto	l968
  9967                           
  9968                           ;io.c: 398: {
  9969                           ;io.c: 399: Button_Contact_Counter_RF--;
  9970  001CC8  0630               	decf	_Button_Contact_Counter_RF,f,c
  9971                           
  9972                           ;io.c: 401: }
  9973                           
  9974                           ;io.c: 400: break;
  9975  001CCA  D04A               	goto	l971
  9976  001CCC                     l968:
  9977                           
  9978                           ;io.c: 402: else {SETxAPIxVAL(38, 0);}
  9979  001CCC  0E00               	movlw	0
  9980  001CCE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9981  001CD0  0E26               	movlw	38
  9982  001CD2  6E19               	movwf	SETxAPIxVAL@index,c
  9983  001CD4  0E00               	movlw	0
  9984  001CD6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9985  001CD8  0E00               	movlw	0
  9986  001CDA  6E1B               	movwf	SETxAPIxVAL@value,c
  9987  001CDC  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
  9988                           
  9989                           ;io.c: 406: }
  9990                           
  9991                           ;io.c: 405: default : break;
  9992                           
  9993                           ;io.c: 403: break;
  9994  001CE0  D03F               	goto	l971
  9995  001CE2                     l962:
  9996  001CE2  B481               	btfsc	3969,2,c	;volatile
  9997  001CE4  D002               	goto	u7870
  9998  001CE6  0E01               	movlw	1
  9999  001CE8  D001               	goto	u7880
 10000  001CEA                     u7870:
 10001  001CEA  0E00               	movlw	0
 10002  001CEC                     u7880:
 10003  001CEC  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10004  001CEE  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10005                           
 10006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10007                           ; Switch size 1, requested type "space"
 10008                           ; Number of cases is 1, Range of values is 0 to 0
 10009                           ; switch strategies available:
 10010                           ; Name         Instructions Cycles
 10011                           ; simple_byte            4     3 (average)
 10012                           ;	Chosen strategy is simple_byte
 10013  001CF0  5020               	movf	??_Debounce_Inputs+1,w,c
 10014  001CF2  0A00               	xorlw	0	; case 0
 10015  001CF4  A4D8               	btfss	status,2,c
 10016  001CF6  D034               	goto	l971
 10017                           
 10018                           ; Switch size 1, requested type "space"
 10019                           ; Number of cases is 2, Range of values is 0 to 1
 10020                           ; switch strategies available:
 10021                           ; Name         Instructions Cycles
 10022                           ; simple_byte            7     4 (average)
 10023                           ;	Chosen strategy is simple_byte
 10024  001CF8  501F               	movf	??_Debounce_Inputs,w,c
 10025  001CFA  0A00               	xorlw	0	; case 0
 10026  001CFC  B4D8               	btfsc	status,2,c
 10027  001CFE  D7E1               	goto	l967
 10028  001D00  0A01               	xorlw	1	; case 1
 10029  001D02  B4D8               	btfsc	status,2,c
 10030  001D04  D7C2               	goto	l963
 10031                           
 10032                           ;io.c: 409: switch(PORTCbits.RC1)
 10033  001D06  D02C               	goto	l971
 10034  001D08  503A               	movf	_Reed_Contact_LMU_Counter,w,c
 10035  001D0A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10036  001D0C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10037  001D0E  0E00               	movlw	0
 10038  001D10  6E14               	movwf	GETxAPIxVAL@index+1,c
 10039  001D12  0E1B               	movlw	27
 10040  001D14  6E13               	movwf	GETxAPIxVAL@index,c
 10041  001D16  EC16  F021         	call	_GETxAPIxVAL	;wreg free
 10042  001D1A  501F               	movf	??_Debounce_Inputs,w,c
 10043  001D1C  5C13               	subwf	?_GETxAPIxVAL,w,c
 10044  001D1E  5020               	movf	??_Debounce_Inputs+1,w,c
 10045  001D20  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10046  001D22  A0D8               	btfss	status,0,c
 10047  001D24  D002               	goto	l973
 10048                           
 10049                           ;io.c: 412: {
 10050                           ;io.c: 413: Reed_Contact_LMU_Counter++;
 10051  001D26  2A3A               	incf	_Reed_Contact_LMU_Counter,f,c
 10052                           
 10053                           ;io.c: 415: }
 10054                           
 10055                           ;io.c: 414: break;
 10056  001D28  D053               	goto	l980
 10057  001D2A                     l973:
 10058                           
 10059                           ;io.c: 416: else {SETxAPIxVAL(41, 1); }
 10060  001D2A  0E00               	movlw	0
 10061  001D2C  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10062  001D2E  0E29               	movlw	41
 10063  001D30  6E19               	movwf	SETxAPIxVAL@index,c
 10064  001D32  0E00               	movlw	0
 10065  001D34  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10066  001D36  0E01               	movlw	1
 10067  001D38  6E1B               	movwf	SETxAPIxVAL@value,c
 10068  001D3A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10069                           
 10070                           ;io.c: 417: break;
 10071  001D3E  D048               	goto	l980
 10072  001D40  503A               	movf	_Reed_Contact_LMU_Counter,w,c
 10073  001D42  B4D8               	btfsc	status,2,c
 10074  001D44  D002               	goto	l977
 10075                           
 10076                           ;io.c: 420: {
 10077                           ;io.c: 421: Reed_Contact_LMU_Counter--;
 10078  001D46  063A               	decf	_Reed_Contact_LMU_Counter,f,c
 10079                           
 10080                           ;io.c: 423: }
 10081                           
 10082                           ;io.c: 422: break;
 10083  001D48  D043               	goto	l980
 10084  001D4A                     l977:
 10085                           
 10086                           ;io.c: 424: else {SETxAPIxVAL(41, 0);}
 10087  001D4A  0E00               	movlw	0
 10088  001D4C  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10089  001D4E  0E29               	movlw	41
 10090  001D50  6E19               	movwf	SETxAPIxVAL@index,c
 10091  001D52  0E00               	movlw	0
 10092  001D54  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10093  001D56  0E00               	movlw	0
 10094  001D58  6E1B               	movwf	SETxAPIxVAL@value,c
 10095  001D5A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10096                           
 10097                           ;io.c: 428: }
 10098                           
 10099                           ;io.c: 427: default : break;
 10100                           
 10101                           ;io.c: 425: break;
 10102  001D5E  D038               	goto	l980
 10103  001D60                     l971:
 10104  001D60  A282               	btfss	3970,1,c	;volatile
 10105  001D62  D002               	goto	u7910
 10106  001D64  0E01               	movlw	1
 10107  001D66  D001               	goto	u7916
 10108  001D68                     u7910:
 10109  001D68  0E00               	movlw	0
 10110  001D6A                     u7916:
 10111                           
 10112                           ; Switch size 1, requested type "space"
 10113                           ; Number of cases is 2, Range of values is 0 to 1
 10114                           ; switch strategies available:
 10115                           ; Name         Instructions Cycles
 10116                           ; simple_byte            7     4 (average)
 10117                           ;	Chosen strategy is simple_byte
 10118  001D6A  0A00               	xorlw	0	; case 0
 10119  001D6C  B4D8               	btfsc	status,2,c
 10120  001D6E  D7CC               	goto	l972
 10121  001D70  0A01               	xorlw	1	; case 1
 10122  001D72  B4D8               	btfsc	status,2,c
 10123  001D74  D7E5               	goto	l976
 10124                           
 10125                           ;io.c: 431: switch(PORTDbits.RD4)
 10126  001D76  D02C               	goto	l980
 10127  001D78  5039               	movf	_Reed_Contact_LMD_Counter,w,c
 10128  001D7A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10129  001D7C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10130  001D7E  0E00               	movlw	0
 10131  001D80  6E14               	movwf	GETxAPIxVAL@index+1,c
 10132  001D82  0E1B               	movlw	27
 10133  001D84  6E13               	movwf	GETxAPIxVAL@index,c
 10134  001D86  EC16  F021         	call	_GETxAPIxVAL	;wreg free
 10135  001D8A  501F               	movf	??_Debounce_Inputs,w,c
 10136  001D8C  5C13               	subwf	?_GETxAPIxVAL,w,c
 10137  001D8E  5020               	movf	??_Debounce_Inputs+1,w,c
 10138  001D90  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10139  001D92  A0D8               	btfss	status,0,c
 10140  001D94  D002               	goto	l982
 10141                           
 10142                           ;io.c: 434: {
 10143                           ;io.c: 435: Reed_Contact_LMD_Counter++;
 10144  001D96  2A39               	incf	_Reed_Contact_LMD_Counter,f,c
 10145                           
 10146                           ;io.c: 437: }
 10147                           
 10148                           ;io.c: 436: break;
 10149  001D98  D053               	goto	l989
 10150  001D9A                     l982:
 10151                           
 10152                           ;io.c: 438: else {SETxAPIxVAL(42, 1); }
 10153  001D9A  0E00               	movlw	0
 10154  001D9C  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10155  001D9E  0E2A               	movlw	42
 10156  001DA0  6E19               	movwf	SETxAPIxVAL@index,c
 10157  001DA2  0E00               	movlw	0
 10158  001DA4  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10159  001DA6  0E01               	movlw	1
 10160  001DA8  6E1B               	movwf	SETxAPIxVAL@value,c
 10161  001DAA  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10162                           
 10163                           ;io.c: 439: break;
 10164  001DAE  D048               	goto	l989
 10165  001DB0  5039               	movf	_Reed_Contact_LMD_Counter,w,c
 10166  001DB2  B4D8               	btfsc	status,2,c
 10167  001DB4  D002               	goto	l986
 10168                           
 10169                           ;io.c: 442: {
 10170                           ;io.c: 443: Reed_Contact_LMD_Counter--;
 10171  001DB6  0639               	decf	_Reed_Contact_LMD_Counter,f,c
 10172                           
 10173                           ;io.c: 445: }
 10174                           
 10175                           ;io.c: 444: break;
 10176  001DB8  D043               	goto	l989
 10177  001DBA                     l986:
 10178                           
 10179                           ;io.c: 446: else {SETxAPIxVAL(42, 0);}
 10180  001DBA  0E00               	movlw	0
 10181  001DBC  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10182  001DBE  0E2A               	movlw	42
 10183  001DC0  6E19               	movwf	SETxAPIxVAL@index,c
 10184  001DC2  0E00               	movlw	0
 10185  001DC4  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10186  001DC6  0E00               	movlw	0
 10187  001DC8  6E1B               	movwf	SETxAPIxVAL@value,c
 10188  001DCA  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10189                           
 10190                           ;io.c: 450: }
 10191                           
 10192                           ;io.c: 449: default : break;
 10193                           
 10194                           ;io.c: 447: break;
 10195  001DCE  D038               	goto	l989
 10196  001DD0                     l980:
 10197  001DD0  A883               	btfss	3971,4,c	;volatile
 10198  001DD2  D002               	goto	u7940
 10199  001DD4  0E01               	movlw	1
 10200  001DD6  D001               	goto	u7946
 10201  001DD8                     u7940:
 10202  001DD8  0E00               	movlw	0
 10203  001DDA                     u7946:
 10204                           
 10205                           ; Switch size 1, requested type "space"
 10206                           ; Number of cases is 2, Range of values is 0 to 1
 10207                           ; switch strategies available:
 10208                           ; Name         Instructions Cycles
 10209                           ; simple_byte            7     4 (average)
 10210                           ;	Chosen strategy is simple_byte
 10211  001DDA  0A00               	xorlw	0	; case 0
 10212  001DDC  B4D8               	btfsc	status,2,c
 10213  001DDE  D7CC               	goto	l981
 10214  001DE0  0A01               	xorlw	1	; case 1
 10215  001DE2  B4D8               	btfsc	status,2,c
 10216  001DE4  D7E5               	goto	l985
 10217                           
 10218                           ;io.c: 453: switch(PORTEbits.RE1)
 10219  001DE6  D02C               	goto	l989
 10220  001DE8  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10221  001DEA  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10222  001DEC  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10223  001DEE  0E00               	movlw	0
 10224  001DF0  6E14               	movwf	GETxAPIxVAL@index+1,c
 10225  001DF2  0E1B               	movlw	27
 10226  001DF4  6E13               	movwf	GETxAPIxVAL@index,c
 10227  001DF6  EC16  F021         	call	_GETxAPIxVAL	;wreg free
 10228  001DFA  501F               	movf	??_Debounce_Inputs,w,c
 10229  001DFC  5C13               	subwf	?_GETxAPIxVAL,w,c
 10230  001DFE  5020               	movf	??_Debounce_Inputs+1,w,c
 10231  001E00  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10232  001E02  A0D8               	btfss	status,0,c
 10233  001E04  D002               	goto	l991
 10234                           
 10235                           ;io.c: 456: {
 10236                           ;io.c: 457: Reed_Contact_RMU_Counter++;
 10237  001E06  2A38               	incf	_Reed_Contact_RMU_Counter,f,c
 10238                           
 10239                           ;io.c: 459: }
 10240                           
 10241                           ;io.c: 458: break;
 10242  001E08  D053               	goto	l998
 10243  001E0A                     l991:
 10244                           
 10245                           ;io.c: 460: else {SETxAPIxVAL(43, 1); }
 10246  001E0A  0E00               	movlw	0
 10247  001E0C  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10248  001E0E  0E2B               	movlw	43
 10249  001E10  6E19               	movwf	SETxAPIxVAL@index,c
 10250  001E12  0E00               	movlw	0
 10251  001E14  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10252  001E16  0E01               	movlw	1
 10253  001E18  6E1B               	movwf	SETxAPIxVAL@value,c
 10254  001E1A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10255                           
 10256                           ;io.c: 461: break;
 10257  001E1E  D048               	goto	l998
 10258  001E20  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10259  001E22  B4D8               	btfsc	status,2,c
 10260  001E24  D002               	goto	l995
 10261                           
 10262                           ;io.c: 464: {
 10263                           ;io.c: 465: Reed_Contact_RMU_Counter--;
 10264  001E26  0638               	decf	_Reed_Contact_RMU_Counter,f,c
 10265                           
 10266                           ;io.c: 467: }
 10267                           
 10268                           ;io.c: 466: break;
 10269  001E28  D043               	goto	l998
 10270  001E2A                     l995:
 10271                           
 10272                           ;io.c: 468: else {SETxAPIxVAL(43, 0);}
 10273  001E2A  0E00               	movlw	0
 10274  001E2C  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10275  001E2E  0E2B               	movlw	43
 10276  001E30  6E19               	movwf	SETxAPIxVAL@index,c
 10277  001E32  0E00               	movlw	0
 10278  001E34  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10279  001E36  0E00               	movlw	0
 10280  001E38  6E1B               	movwf	SETxAPIxVAL@value,c
 10281  001E3A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10282                           
 10283                           ;io.c: 472: }
 10284                           
 10285                           ;io.c: 471: default : break;
 10286                           
 10287                           ;io.c: 469: break;
 10288  001E3E  D038               	goto	l998
 10289  001E40                     l989:
 10290  001E40  A284               	btfss	3972,1,c	;volatile
 10291  001E42  D002               	goto	u7970
 10292  001E44  0E01               	movlw	1
 10293  001E46  D001               	goto	u7976
 10294  001E48                     u7970:
 10295  001E48  0E00               	movlw	0
 10296  001E4A                     u7976:
 10297                           
 10298                           ; Switch size 1, requested type "space"
 10299                           ; Number of cases is 2, Range of values is 0 to 1
 10300                           ; switch strategies available:
 10301                           ; Name         Instructions Cycles
 10302                           ; simple_byte            7     4 (average)
 10303                           ;	Chosen strategy is simple_byte
 10304  001E4A  0A00               	xorlw	0	; case 0
 10305  001E4C  B4D8               	btfsc	status,2,c
 10306  001E4E  D7CC               	goto	l990
 10307  001E50  0A01               	xorlw	1	; case 1
 10308  001E52  B4D8               	btfsc	status,2,c
 10309  001E54  D7E5               	goto	l994
 10310                           
 10311                           ;io.c: 475: switch(PORTEbits.RE0)
 10312  001E56  D02C               	goto	l998
 10313  001E58  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10314  001E5A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10315  001E5C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10316  001E5E  0E00               	movlw	0
 10317  001E60  6E14               	movwf	GETxAPIxVAL@index+1,c
 10318  001E62  0E1B               	movlw	27
 10319  001E64  6E13               	movwf	GETxAPIxVAL@index,c
 10320  001E66  EC16  F021         	call	_GETxAPIxVAL	;wreg free
 10321  001E6A  501F               	movf	??_Debounce_Inputs,w,c
 10322  001E6C  5C13               	subwf	?_GETxAPIxVAL,w,c
 10323  001E6E  5020               	movf	??_Debounce_Inputs+1,w,c
 10324  001E70  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10325  001E72  A0D8               	btfss	status,0,c
 10326  001E74  D002               	goto	l1000
 10327                           
 10328                           ;io.c: 478: {
 10329                           ;io.c: 479: Reed_Contact_RMD_Counter++;
 10330  001E76  2A37               	incf	_Reed_Contact_RMD_Counter,f,c
 10331                           
 10332                           ;io.c: 481: }
 10333                           
 10334                           ;io.c: 480: break;
 10335  001E78  0012               	return	
 10336  001E7A                     l1000:
 10337                           
 10338                           ;io.c: 482: else {SETxAPIxVAL(44, 1); }
 10339  001E7A  0E00               	movlw	0
 10340  001E7C  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10341  001E7E  0E2C               	movlw	44
 10342  001E80  6E19               	movwf	SETxAPIxVAL@index,c
 10343  001E82  0E00               	movlw	0
 10344  001E84  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10345  001E86  0E01               	movlw	1
 10346  001E88  6E1B               	movwf	SETxAPIxVAL@value,c
 10347  001E8A  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10348                           
 10349                           ;io.c: 483: break;
 10350  001E8E  0012               	return	
 10351  001E90  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10352  001E92  B4D8               	btfsc	status,2,c
 10353  001E94  D002               	goto	l1004
 10354                           
 10355                           ;io.c: 486: {
 10356                           ;io.c: 487: Reed_Contact_RMD_Counter--;
 10357  001E96  0637               	decf	_Reed_Contact_RMD_Counter,f,c
 10358                           
 10359                           ;io.c: 489: }
 10360                           
 10361                           ;io.c: 488: break;
 10362  001E98  0012               	return	
 10363  001E9A                     l1004:
 10364                           
 10365                           ;io.c: 490: else {SETxAPIxVAL(44, 0);}
 10366  001E9A  0E00               	movlw	0
 10367  001E9C  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10368  001E9E  0E2C               	movlw	44
 10369  001EA0  6E19               	movwf	SETxAPIxVAL@index,c
 10370  001EA2  0E00               	movlw	0
 10371  001EA4  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10372  001EA6  0E00               	movlw	0
 10373  001EA8  6E1B               	movwf	SETxAPIxVAL@value,c
 10374  001EAA  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 10375                           
 10376                           ;io.c: 494: }
 10377                           
 10378                           ;io.c: 493: default : break;
 10379                           
 10380                           ;io.c: 491: break;
 10381  001EAE  0012               	return	
 10382  001EB0                     l998:
 10383  001EB0  A084               	btfss	3972,0,c	;volatile
 10384  001EB2  D002               	goto	u8000
 10385  001EB4  0E01               	movlw	1
 10386  001EB6  D001               	goto	u8006
 10387  001EB8                     u8000:
 10388  001EB8  0E00               	movlw	0
 10389  001EBA                     u8006:
 10390                           
 10391                           ; Switch size 1, requested type "space"
 10392                           ; Number of cases is 2, Range of values is 0 to 1
 10393                           ; switch strategies available:
 10394                           ; Name         Instructions Cycles
 10395                           ; simple_byte            7     4 (average)
 10396                           ;	Chosen strategy is simple_byte
 10397  001EBA  0A00               	xorlw	0	; case 0
 10398  001EBC  B4D8               	btfsc	status,2,c
 10399  001EBE  D7CC               	goto	l999
 10400  001EC0  0A01               	xorlw	1	; case 1
 10401  001EC2  A4D8               	btfss	status,2,c
 10402  001EC4  0012               	return	
 10403  001EC6  D7E4               	goto	l1003
 10404  001EC8                     __end_of_Debounce_Inputs:
 10405                           	opt stack 0
 10406                           tblptru	equ	0xFF8
 10407                           tblptrh	equ	0xFF7
 10408                           tblptrl	equ	0xFF6
 10409                           tablat	equ	0xFF5
 10410                           prodh	equ	0xFF4
 10411                           prodl	equ	0xFF3
 10412                           intcon	equ	0xFF2
 10413                           postinc0	equ	0xFEE
 10414                           wreg	equ	0xFE8
 10415                           postinc1	equ	0xFE6
 10416                           postdec1	equ	0xFE5
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           postinc2	equ	0xFDE
 10420                           postdec2	equ	0xFDD
 10421                           fsr2h	equ	0xFDA
 10422                           fsr2l	equ	0xFD9
 10423                           status	equ	0xFD8
 10424                           
 10425 ;; *************** function _SetDCPWM1 *****************
 10426 ;; Defined at:
 10427 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic18\plib\PWM\pw1setdc.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;  dutycycle       2   20[COMRAM] unsigned int 
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;  DCycle          2   24[COMRAM] struct PWMDC
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  1    wreg      void 
 10434 ;; Registers used:
 10435 ;;		wreg, status,2, status,0
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10441 ;;      Params:         2       0       0       0       0       0       0       0       0
 10442 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10443 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10444 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10445 ;;Total ram usage:        6 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:    3
 10448 ;; This function calls:
 10449 ;;		Nothing
 10450 ;; This function is called by:
 10451 ;;		_Debounce_Inputs
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           	psect	text19
 10456  0040B4                     __ptext19:
 10457                           	opt stack 0
 10458  0040B4                     _SetDCPWM1:
 10459                           	opt stack 25
 10460                           
 10461                           ;incstack = 0
 10462  0040B4  C015  F017         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
 10463  0040B8  C016  F018         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
 10464  0040BC  0E06               	movlw	6
 10465  0040BE                     u4145:
 10466  0040BE  90D8               	bcf	status,0,c
 10467  0040C0  3617               	rlcf	??_SetDCPWM1,f,c
 10468  0040C2  3618               	rlcf	??_SetDCPWM1+1,f,c
 10469  0040C4  2EE8               	decfsz	wreg,f,c
 10470  0040C6  D7FB               	goto	u4145
 10471  0040C8  C017  F019         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
 10472  0040CC  C018  F01A         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
 10473  0040D0  C01A  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
 10474  0040D4  C019  F017         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
 10475  0040D8  90D8               	bcf	status,0,c
 10476  0040DA  3217               	rrcf	??_SetDCPWM1,f,c
 10477  0040DC  90D8               	bcf	status,0,c
 10478  0040DE  3217               	rrcf	??_SetDCPWM1,f,c
 10479  0040E0  0E30               	movlw	48
 10480  0040E2  1617               	andwf	??_SetDCPWM1,f,c
 10481  0040E4  50BD               	movf	4029,w,c	;volatile
 10482  0040E6  0BCF               	andlw	207
 10483  0040E8  1017               	iorwf	??_SetDCPWM1,w,c
 10484  0040EA  6EBD               	movwf	4029,c	;volatile
 10485  0040EC  0012               	return		;funcret
 10486  0040EE                     __end_of_SetDCPWM1:
 10487                           	opt stack 0
 10488                           tblptru	equ	0xFF8
 10489                           tblptrh	equ	0xFF7
 10490                           tblptrl	equ	0xFF6
 10491                           tablat	equ	0xFF5
 10492                           prodh	equ	0xFF4
 10493                           prodl	equ	0xFF3
 10494                           intcon	equ	0xFF2
 10495                           postinc0	equ	0xFEE
 10496                           wreg	equ	0xFE8
 10497                           postinc1	equ	0xFE6
 10498                           postdec1	equ	0xFE5
 10499                           fsr1h	equ	0xFE2
 10500                           fsr1l	equ	0xFE1
 10501                           postinc2	equ	0xFDE
 10502                           postdec2	equ	0xFDD
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507 ;; *************** function _READxRECEIVEDxMESSAGE *****************
 10508 ;; Defined at:
 10509 ;;		line 37 in file "../terminal.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;		None
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;		None
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      void 
 10516 ;; Registers used:
 10517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10523 ;;      Params:         0       0       0       0       0       0       0       0       0
 10524 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10525 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10526 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10527 ;;Total ram usage:        0 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    6
 10530 ;; This function calls:
 10531 ;;		_EUSART1_Read
 10532 ;;		_TranslateMessage
 10533 ;;		_printf
 10534 ;; This function is called by:
 10535 ;;		_main
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           	psect	text20
 10540  0036CA                     __ptext20:
 10541                           	opt stack 0
 10542  0036CA                     _READxRECEIVEDxMESSAGE:
 10543                           	opt stack 24
 10544                           
 10545                           ;terminal.c: 39: if ((eusart1RxCount) > 0){
 10546                           
 10547                           ;incstack = 0
 10548  0036CA  503F               	movf	_eusart1RxCount,w,c	;volatile
 10549  0036CC  B4D8               	btfsc	status,2,c
 10550  0036CE  D072               	goto	l633
 10551                           
 10552                           ;terminal.c: 42: Received_Data = EUSART1_Read();
 10553  0036D0  EC77  F020         	call	_EUSART1_Read	;wreg free
 10554  0036D4  0100               	movlb	0	; () banked
 10555  0036D6  6F88               	movwf	_Received_Data& (0+255),b
 10556                           
 10557                           ;terminal.c: 44: switch (RxSwitch){
 10558  0036D8  D062               	goto	l627
 10559  0036DA                     
 10560                           ; BSR set to: 0
 10561                           ;terminal.c: 46: pData = &Data[0];
 10562                           
 10563                           ; BSR set to: 0
 10564  0036DA  0E90               	movlw	low _Data
 10565  0036DC  6F76               	movwf	_pData& (0+255),b
 10566  0036DE  0E00               	movlw	high _Data
 10567  0036E0  6F77               	movwf	(_pData+1)& (0+255),b
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;terminal.c: 47: pLen = &Data[DataLen];
 10571  0036E2  0E2F               	movlw	low _DataLen
 10572  0036E4  6EF6               	movwf	tblptrl,c
 10573  0036E6                     	if	1	;There is more than 1 active tblptr byte
 10574  0036E6  0E08               	movlw	high _DataLen
 10575  0036E8  6EF7               	movwf	tblptrh,c
 10576  0036EA                     	endif
 10577  0036EA                     	if	0	;There are less than 3 active tblptr bytes
 10578  0036EA                     	endif
 10579  0036EA  0008               	tblrd		*
 10580  0036EC  50F5               	movf	tablat,w,c
 10581  0036EE  0D01               	mullw	1
 10582  0036F0  0E90               	movlw	low _Data
 10583  0036F2  24F3               	addwf	prodl,w,c
 10584  0036F4  6F74               	movwf	_pLen& (0+255),b
 10585  0036F6  0E00               	movlw	high _Data
 10586  0036F8  20F4               	addwfc	prodh,w,c
 10587  0036FA  6F75               	movwf	(_pLen+1)& (0+255),b
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;terminal.c: 48: if (Received_Data == 's' || Received_Data == 'g'){
 10591  0036FC  0E73               	movlw	115
 10592  0036FE  1988               	xorwf	_Received_Data& (0+255),w,b
 10593  003700  B4D8               	btfsc	status,2,c
 10594  003702  D004               	goto	u9580
 10595                           
 10596                           ; BSR set to: 0
 10597  003704  0E67               	movlw	103
 10598  003706  1988               	xorwf	_Received_Data& (0+255),w,b
 10599  003708  A4D8               	btfss	status,2,c
 10600  00370A  D00A               	goto	l629
 10601  00370C                     u9580:
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;terminal.c: 49: *pData = Received_Data;
 10605                           
 10606                           ; BSR set to: 0
 10607  00370C  C076  FFD9         	movff	_pData,fsr2l
 10608  003710  C077  FFDA         	movff	_pData+1,fsr2h
 10609  003714  C088  FFDF         	movff	_Received_Data,indf2
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;terminal.c: 50: *pData++;
 10613  003718  4B76               	infsnz	_pData& (0+255),f,b
 10614  00371A  2B77               	incf	(_pData+1)& (0+255),f,b
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;terminal.c: 51: RxSwitch = 1;
 10618  00371C  0E01               	movlw	1
 10619  00371E  D03D               	goto	L89
 10620  003720                     l629:
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;terminal.c: 53: else{
 10624                           ;terminal.c: 54: RxSwitch = 0;
 10625                           
 10626                           ; BSR set to: 0
 10627  003720  0E00               	movlw	0
 10628  003722  D03B               	goto	L89
 10629  003724                     
 10630                           ; BSR set to: 0
 10631                           ;terminal.c: 59: if (Received_Data == 'x'){
 10632                           
 10633                           ; BSR set to: 0
 10634  003724  0E78               	movlw	120
 10635  003726  1988               	xorwf	_Received_Data& (0+255),w,b
 10636  003728  A4D8               	btfss	status,2,c
 10637  00372A  D7FA               	goto	l629
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;terminal.c: 60: *pData = Received_Data;
 10641  00372C  C076  FFD9         	movff	_pData,fsr2l
 10642  003730  C077  FFDA         	movff	_pData+1,fsr2h
 10643  003734  C088  FFDF         	movff	_Received_Data,indf2
 10644  003738  D02D               	goto	l643
 10645  00373A                     
 10646                           ; BSR set to: 0
 10647                           ;terminal.c: 70: if (Received_Data == 'G'){
 10648                           
 10649                           ; BSR set to: 0
 10650  00373A  0E47               	movlw	71
 10651  00373C  1988               	xorwf	_Received_Data& (0+255),w,b
 10652  00373E  B4D8               	btfsc	status,2,c
 10653  003740  D009               	goto	l639
 10654  003742  D013               	goto	l638
 10655  003744                     
 10656                           ; BSR set to: 0
 10657                           ;terminal.c: 74: *pData = '\0';
 10658                           
 10659                           ; BSR set to: 0
 10660  003744  C076  FFD9         	movff	_pData,fsr2l
 10661  003748  C077  FFDA         	movff	_pData+1,fsr2h
 10662  00374C  0E00               	movlw	0
 10663  00374E  6EDF               	movwf	indf2,c
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;terminal.c: 75: pData++;
 10667  003750  4B76               	infsnz	_pData& (0+255),f,b
 10668  003752  2B77               	incf	(_pData+1)& (0+255),f,b
 10669  003754                     l639:
 10670                           
 10671                           ; BSR set to: 0
 10672                           
 10673                           ; BSR set to: 0
 10674  003754  5174               	movf	_pLen& (0+255),w,b
 10675  003756  5D76               	subwf	_pData& (0+255),w,b
 10676  003758  5175               	movf	(_pLen+1)& (0+255),w,b
 10677  00375A  5977               	subwfb	(_pData+1)& (0+255),w,b
 10678  00375C  A0D8               	btfss	status,0,c
 10679  00375E  D7F2               	goto	l640
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;terminal.c: 76: }
 10683                           ;terminal.c: 78: RxSwitch = 3;
 10684                           
 10685                           ; BSR set to: 0
 10686  003760  0E03               	movlw	3
 10687  003762  6F87               	movwf	_RxSwitch& (0+255),b
 10688                           
 10689                           ;terminal.c: 79: Message_To_Translate = 1;
 10690  003764  0E01               	movlw	1
 10691  003766  6F86               	movwf	_Message_To_Translate& (0+255),b
 10692                           
 10693                           ;terminal.c: 80: }
 10694  003768  D025               	goto	l633
 10695  00376A                     l638:
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;terminal.c: 81: else{
 10699                           ;terminal.c: 82: *pData = Received_Data;
 10700                           
 10701                           ; BSR set to: 0
 10702  00376A  C076  FFD9         	movff	_pData,fsr2l
 10703  00376E  C077  FFDA         	movff	_pData+1,fsr2h
 10704  003772  C088  FFDF         	movff	_Received_Data,indf2
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;terminal.c: 83: if (pData > pLen){
 10708  003776  5176               	movf	_pData& (0+255),w,b
 10709  003778  5D74               	subwf	_pLen& (0+255),w,b
 10710  00377A  5177               	movf	(_pData+1)& (0+255),w,b
 10711  00377C  5975               	subwfb	(_pLen+1)& (0+255),w,b
 10712  00377E  B0D8               	btfsc	status,0,c
 10713  003780  D009               	goto	l643
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;terminal.c: 84: printf("E#10\r\n");
 10717  003782  0E3A               	movlw	low STR_1
 10718  003784  6FAF               	movwf	printf@f& (0+255),b
 10719  003786  0E08               	movlw	high STR_1
 10720  003788  6FB0               	movwf	(printf@f+1)& (0+255),b
 10721  00378A  ECAB  F018         	call	_printf	;wreg free
 10722                           
 10723                           ;terminal.c: 85: RxSwitch = 0;
 10724  00378E  0E00               	movlw	0
 10725  003790  0100               	movlb	0	; () banked
 10726  003792  D003               	goto	L89
 10727  003794                     l643:
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;terminal.c: 87: else{
 10731                           ;terminal.c: 88: pData++;
 10732                           
 10733                           ; BSR set to: 0
 10734  003794  4B76               	infsnz	_pData& (0+255),f,b
 10735  003796  2B77               	incf	(_pData+1)& (0+255),f,b
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;terminal.c: 89: RxSwitch = 2;
 10739  003798  0E02               	movlw	2
 10740  00379A                     L89:
 10741  00379A  6F87               	movwf	_RxSwitch& (0+255),b
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;terminal.c: 99: }
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;terminal.c: 98: break;
 10748                           
 10749                           ;terminal.c: 97: default :
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;terminal.c: 95: break;
 10753                           
 10754                           ;terminal.c: 94: case 3 :
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;terminal.c: 90: }
 10758                           ;terminal.c: 91: }
 10759                           ;terminal.c: 92: break;
 10760                           
 10761                           ; BSR set to: 0
 10762  00379C  D00B               	goto	l633
 10763  00379E                     l627:
 10764                           
 10765                           ; BSR set to: 0
 10766                           
 10767                           ; BSR set to: 0
 10768  00379E  5187               	movf	_RxSwitch& (0+255),w,b
 10769                           
 10770                           ; Switch size 1, requested type "space"
 10771                           ; Number of cases is 4, Range of values is 0 to 3
 10772                           ; switch strategies available:
 10773                           ; Name         Instructions Cycles
 10774                           ; simple_byte           13     7 (average)
 10775                           ;	Chosen strategy is simple_byte
 10776  0037A0  0A00               	xorlw	0	; case 0
 10777  0037A2  B4D8               	btfsc	status,2,c
 10778  0037A4  D79A               	goto	l628
 10779  0037A6  0A01               	xorlw	1	; case 1
 10780  0037A8  B4D8               	btfsc	status,2,c
 10781  0037AA  D7BC               	goto	l634
 10782  0037AC  0A03               	xorlw	3	; case 2
 10783  0037AE  B4D8               	btfsc	status,2,c
 10784  0037B0  D7C4               	goto	l637
 10785  0037B2  0A01               	xorlw	1	; case 3
 10786  0037B4                     l633:
 10787                           
 10788                           ;terminal.c: 100: }
 10789                           ;terminal.c: 102: if (Message_To_Translate == 1){
 10790                           
 10791                           ; BSR set to: 0
 10792                           
 10793                           ; BSR set to: 0
 10794  0037B4  0100               	movlb	0	; () banked
 10795  0037B6  0586               	decf	_Message_To_Translate& (0+255),w,b
 10796  0037B8  A4D8               	btfss	status,2,c
 10797  0037BA  0012               	return	
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;terminal.c: 103: TranslateMessage();
 10801  0037BC  EC85  F015         	call	_TranslateMessage	;wreg free
 10802                           
 10803                           ;terminal.c: 104: Message_To_Translate = 0;
 10804  0037C0  0E00               	movlw	0
 10805  0037C2  0100               	movlb	0	; () banked
 10806  0037C4  6F86               	movwf	_Message_To_Translate& (0+255),b
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;terminal.c: 105: RxSwitch = 0;
 10810  0037C6  0E00               	movlw	0
 10811  0037C8  6F87               	movwf	_RxSwitch& (0+255),b
 10812  0037CA  0012               	return	
 10813  0037CC                     __end_of_READxRECEIVEDxMESSAGE:
 10814                           	opt stack 0
 10815                           tblptru	equ	0xFF8
 10816                           tblptrh	equ	0xFF7
 10817                           tblptrl	equ	0xFF6
 10818                           tablat	equ	0xFF5
 10819                           prodh	equ	0xFF4
 10820                           prodl	equ	0xFF3
 10821                           intcon	equ	0xFF2
 10822                           postinc0	equ	0xFEE
 10823                           wreg	equ	0xFE8
 10824                           postinc1	equ	0xFE6
 10825                           postdec1	equ	0xFE5
 10826                           fsr1h	equ	0xFE2
 10827                           fsr1l	equ	0xFE1
 10828                           indf2	equ	0xFDF
 10829                           postinc2	equ	0xFDE
 10830                           postdec2	equ	0xFDD
 10831                           fsr2h	equ	0xFDA
 10832                           fsr2l	equ	0xFD9
 10833                           status	equ	0xFD8
 10834                           
 10835 ;; *************** function _TranslateMessage *****************
 10836 ;; Defined at:
 10837 ;;		line 123 in file "../terminal.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;		None
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;  Index           2   33[COMRAM] unsigned int 
 10842 ;;  Value           2   31[COMRAM] unsigned int 
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  1    wreg      void 
 10845 ;; Registers used:
 10846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0
 10853 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10854 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10855 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10856 ;;Total ram usage:        4 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    5
 10859 ;; This function calls:
 10860 ;;		_GETxAPIxRW
 10861 ;;		_GETxAPIxVAL
 10862 ;;		_SENDxMESSAGE
 10863 ;;		_SETxAPIxVALxNoxRET
 10864 ;;		_atoi
 10865 ;;		_printf
 10866 ;; This function is called by:
 10867 ;;		_READxRECEIVEDxMESSAGE
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           	psect	text21
 10872  002B0A                     __ptext21:
 10873                           	opt stack 0
 10874  002B0A                     _TranslateMessage:
 10875                           	opt stack 24
 10876                           
 10877                           ;terminal.c: 125: unsigned int Value, Index;
 10878                           ;terminal.c: 127: if(Data[0] == 's'){
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;incstack = 0
 10882  002B0A  0E73               	movlw	115
 10883  002B0C  0100               	movlb	0	; () banked
 10884  002B0E  1990               	xorwf	_Data& (0+255),w,b
 10885  002B10  A4D8               	btfss	status,2,c
 10886  002B12  D063               	goto	l651
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;terminal.c: 129: pData = &Data[2];
 10890  002B14  0E92               	movlw	low (_Data+2)
 10891  002B16  6F76               	movwf	_pData& (0+255),b
 10892  002B18  0E00               	movlw	high (_Data+2)
 10893  002B1A  6F77               	movwf	(_pData+1)& (0+255),b
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;terminal.c: 130: Index = (unsigned int)atoi (pData);
 10897  002B1C  C076  F019         	movff	_pData,atoi@s
 10898  002B20  C077  F01A         	movff	_pData+1,atoi@s+1
 10899  002B24  ECBF  F01C         	call	_atoi	;wreg free
 10900  002B28  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10901  002B2C  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10902                           
 10903                           ;terminal.c: 131: pData = &Data[5];
 10904  002B30  0E95               	movlw	low (_Data+5)
 10905  002B32  0100               	movlb	0	; () banked
 10906  002B34  6F76               	movwf	_pData& (0+255),b
 10907  002B36  0E00               	movlw	high (_Data+5)
 10908  002B38  6F77               	movwf	(_pData+1)& (0+255),b
 10909                           
 10910                           ;terminal.c: 132: Value = (unsigned int)atoi (pData);
 10911  002B3A  C076  F019         	movff	_pData,atoi@s
 10912  002B3E  C077  F01A         	movff	_pData+1,atoi@s+1
 10913  002B42  ECBF  F01C         	call	_atoi	;wreg free
 10914  002B46  C019  F020         	movff	?_atoi,TranslateMessage@Value
 10915  002B4A  C01A  F021         	movff	?_atoi+1,TranslateMessage@Value+1
 10916                           
 10917                           ;terminal.c: 134: if (GETxAPIxRW(Index) == 0){
 10918  002B4E  C022  F013         	movff	TranslateMessage@Index,GETxAPIxRW@index
 10919  002B52  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxRW@index+1
 10920  002B56  EC24  F021         	call	_GETxAPIxRW	;wreg free
 10921  002B5A  5013               	movf	?_GETxAPIxRW,w,c
 10922  002B5C  1014               	iorwf	?_GETxAPIxRW+1,w,c
 10923  002B5E  A4D8               	btfss	status,2,c
 10924  002B60  D008               	goto	l652
 10925                           
 10926                           ;terminal.c: 135: printf("E#11\r\n");
 10927  002B62  0E41               	movlw	low STR_2
 10928  002B64  0100               	movlb	0	; () banked
 10929  002B66  6FAF               	movwf	printf@f& (0+255),b
 10930  002B68  0E08               	movlw	high STR_2
 10931  002B6A  6FB0               	movwf	(printf@f+1)& (0+255),b
 10932  002B6C  ECAB  F018         	call	_printf	;wreg free
 10933                           
 10934                           ;terminal.c: 136: }
 10935  002B70  0012               	return	
 10936  002B72                     l652:
 10937                           
 10938                           ;terminal.c: 137: else if (Index < 0xF){
 10939  002B72  5023               	movf	TranslateMessage@Index+1,w,c
 10940  002B74  E10C               	bnz	l8606
 10941  002B76  0E0F               	movlw	15
 10942  002B78  5C22               	subwf	TranslateMessage@Index,w,c
 10943  002B7A  B0D8               	btfsc	status,0,c
 10944  002B7C  D008               	goto	l654
 10945                           
 10946                           ;terminal.c: 138: printf("E#12\r\n");
 10947  002B7E  0E48               	movlw	low STR_3
 10948  002B80  0100               	movlb	0	; () banked
 10949  002B82  6FAF               	movwf	printf@f& (0+255),b
 10950  002B84  0E08               	movlw	high STR_3
 10951  002B86  6FB0               	movwf	(printf@f+1)& (0+255),b
 10952  002B88  ECAB  F018         	call	_printf	;wreg free
 10953                           
 10954                           ;terminal.c: 139: }
 10955  002B8C  0012               	return	
 10956  002B8E                     l654:
 10957  002B8E                     l8606:
 10958                           
 10959                           ;terminal.c: 140: else if (Index > 91){
 10960  002B8E  5023               	movf	TranslateMessage@Index+1,w,c
 10961  002B90  E104               	bnz	u8580
 10962  002B92  0E5C               	movlw	92
 10963  002B94  5C22               	subwf	TranslateMessage@Index,w,c
 10964  002B96  A0D8               	btfss	status,0,c
 10965  002B98  D008               	goto	l656
 10966  002B9A                     u8580:
 10967                           
 10968                           ;terminal.c: 141: printf("E#13\r\n");
 10969  002B9A  0E4F               	movlw	low STR_4
 10970  002B9C  0100               	movlb	0	; () banked
 10971  002B9E  6FAF               	movwf	printf@f& (0+255),b
 10972  002BA0  0E08               	movlw	high STR_4
 10973  002BA2  6FB0               	movwf	(printf@f+1)& (0+255),b
 10974  002BA4  ECAB  F018         	call	_printf	;wreg free
 10975                           
 10976                           ;terminal.c: 142: }
 10977  002BA8  0012               	return	
 10978  002BAA                     l656:
 10979                           
 10980                           ;terminal.c: 143: else if (Value > 0xFFFE){
 10981  002BAA  2820               	incf	TranslateMessage@Value,w,c
 10982  002BAC  E10B               	bnz	l8614
 10983  002BAE  2821               	incf	TranslateMessage@Value+1,w,c
 10984  002BB0  A4D8               	btfss	status,2,c
 10985  002BB2  D008               	goto	l658
 10986                           
 10987                           ;terminal.c: 144: printf("E#14\r\n");
 10988  002BB4  0E56               	movlw	low STR_5
 10989  002BB6  0100               	movlb	0	; () banked
 10990  002BB8  6FAF               	movwf	printf@f& (0+255),b
 10991  002BBA  0E08               	movlw	high STR_5
 10992  002BBC  6FB0               	movwf	(printf@f+1)& (0+255),b
 10993  002BBE  ECAB  F018         	call	_printf	;wreg free
 10994                           
 10995                           ;terminal.c: 145: }
 10996  002BC2  0012               	return	
 10997  002BC4                     l658:
 10998  002BC4                     l8614:
 10999                           
 11000                           ;terminal.c: 146: else{
 11001                           ;terminal.c: 147: SETxAPIxVALxNoxRET(Index, Value);
 11002  002BC4  C022  F015         	movff	TranslateMessage@Index,SETxAPIxVALxNoxRET@index
 11003  002BC8  C023  F016         	movff	TranslateMessage@Index+1,SETxAPIxVALxNoxRET@index+1
 11004  002BCC  C020  F017         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 11005  002BD0  C021  F018         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 11006  002BD4  EC3C  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
 11007                           
 11008                           ;terminal.c: 148: }
 11009                           ;terminal.c: 149: }
 11010  002BD8  0012               	return	
 11011  002BDA                     l651:
 11012                           
 11013                           ;terminal.c: 151: else if (Data[0] == 'g'){
 11014  002BDA  0E67               	movlw	103
 11015  002BDC  0100               	movlb	0	; () banked
 11016  002BDE  1990               	xorwf	_Data& (0+255),w,b
 11017  002BE0  A4D8               	btfss	status,2,c
 11018  002BE2  0012               	return	
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;terminal.c: 153: pData = &Data[2];
 11022  002BE4  0E92               	movlw	low (_Data+2)
 11023  002BE6  6F76               	movwf	_pData& (0+255),b
 11024  002BE8  0E00               	movlw	high (_Data+2)
 11025  002BEA  6F77               	movwf	(_pData+1)& (0+255),b
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;terminal.c: 154: Index = (unsigned int)atoi (pData);
 11029  002BEC  C076  F019         	movff	_pData,atoi@s
 11030  002BF0  C077  F01A         	movff	_pData+1,atoi@s+1
 11031  002BF4  ECBF  F01C         	call	_atoi	;wreg free
 11032  002BF8  C019  F022         	movff	?_atoi,TranslateMessage@Index
 11033  002BFC  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 11034                           
 11035                           ;terminal.c: 156: if (Index < 0xF){
 11036  002C00  5023               	movf	TranslateMessage@Index+1,w,c
 11037  002C02  E10C               	bnz	l8626
 11038  002C04  0E0F               	movlw	15
 11039  002C06  5C22               	subwf	TranslateMessage@Index,w,c
 11040  002C08  B0D8               	btfsc	status,0,c
 11041  002C0A  D008               	goto	l662
 11042                           
 11043                           ;terminal.c: 157: printf("E#12\r\n");
 11044  002C0C  0E48               	movlw	low STR_3
 11045  002C0E  0100               	movlb	0	; () banked
 11046  002C10  6FAF               	movwf	printf@f& (0+255),b
 11047  002C12  0E08               	movlw	high STR_3
 11048  002C14  6FB0               	movwf	(printf@f+1)& (0+255),b
 11049  002C16  ECAB  F018         	call	_printf	;wreg free
 11050                           
 11051                           ;terminal.c: 158: }
 11052  002C1A  0012               	return	
 11053  002C1C                     l662:
 11054  002C1C                     l8626:
 11055                           
 11056                           ;terminal.c: 159: else if (Index > 91){
 11057  002C1C  5023               	movf	TranslateMessage@Index+1,w,c
 11058  002C1E  E104               	bnz	u8620
 11059  002C20  0E5C               	movlw	92
 11060  002C22  5C22               	subwf	TranslateMessage@Index,w,c
 11061  002C24  A0D8               	btfss	status,0,c
 11062  002C26  D008               	goto	l664
 11063  002C28                     u8620:
 11064                           
 11065                           ;terminal.c: 160: printf("E#13\r\n");
 11066  002C28  0E4F               	movlw	low STR_4
 11067  002C2A  0100               	movlb	0	; () banked
 11068  002C2C  6FAF               	movwf	printf@f& (0+255),b
 11069  002C2E  0E08               	movlw	high STR_4
 11070  002C30  6FB0               	movwf	(printf@f+1)& (0+255),b
 11071  002C32  ECAB  F018         	call	_printf	;wreg free
 11072                           
 11073                           ;terminal.c: 161: }
 11074  002C36  0012               	return	
 11075  002C38                     l664:
 11076                           
 11077                           ;terminal.c: 162: else{
 11078                           ;terminal.c: 163: Value = GETxAPIxVAL(Index);
 11079  002C38  C022  F013         	movff	TranslateMessage@Index,GETxAPIxVAL@index
 11080  002C3C  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxVAL@index+1
 11081  002C40  EC16  F021         	call	_GETxAPIxVAL	;wreg free
 11082  002C44  C013  F020         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 11083  002C48  C014  F021         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 11084                           
 11085                           ;terminal.c: 164: SENDxMESSAGE(Index, Value);
 11086  002C4C  C022  F013         	movff	TranslateMessage@Index,SENDxMESSAGE@index
 11087  002C50  C023  F014         	movff	TranslateMessage@Index+1,SENDxMESSAGE@index+1
 11088  002C54  C020  F015         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 11089  002C58  C021  F016         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 11090  002C5C  EC0A  F01F         	call	_SENDxMESSAGE	;wreg free
 11091  002C60  0012               	return	
 11092  002C62                     __end_of_TranslateMessage:
 11093                           	opt stack 0
 11094                           tblptru	equ	0xFF8
 11095                           tblptrh	equ	0xFF7
 11096                           tblptrl	equ	0xFF6
 11097                           tablat	equ	0xFF5
 11098                           prodh	equ	0xFF4
 11099                           prodl	equ	0xFF3
 11100                           intcon	equ	0xFF2
 11101                           postinc0	equ	0xFEE
 11102                           wreg	equ	0xFE8
 11103                           postinc1	equ	0xFE6
 11104                           postdec1	equ	0xFE5
 11105                           fsr1h	equ	0xFE2
 11106                           fsr1l	equ	0xFE1
 11107                           indf2	equ	0xFDF
 11108                           postinc2	equ	0xFDE
 11109                           postdec2	equ	0xFDD
 11110                           fsr2h	equ	0xFDA
 11111                           fsr2l	equ	0xFD9
 11112                           status	equ	0xFD8
 11113                           
 11114 ;; *************** function _atoi *****************
 11115 ;; Defined at:
 11116 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atoi.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;  s               2   24[COMRAM] PTR const unsigned char 
 11119 ;;		 -> NULL(0), Data(10), 
 11120 ;; Auto vars:     Size  Location     Type
 11121 ;;  a               2   29[COMRAM] int 
 11122 ;;  sign            1   28[COMRAM] unsigned char 
 11123 ;; Return value:  Size  Location     Type
 11124 ;;                  2   24[COMRAM] int 
 11125 ;; Registers used:
 11126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11127 ;; Tracked objects:
 11128 ;;		On entry : 0/0
 11129 ;;		On exit  : 0/0
 11130 ;;		Unchanged: 0/0
 11131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11132 ;;      Params:         2       0       0       0       0       0       0       0       0
 11133 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11134 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11135 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11136 ;;Total ram usage:        7 bytes
 11137 ;; Hardware stack levels used:    1
 11138 ;; Hardware stack levels required when called:    4
 11139 ;; This function calls:
 11140 ;;		___wmul
 11141 ;;		_isdigit
 11142 ;; This function is called by:
 11143 ;;		_TranslateMessage
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text22
 11148  00397E                     __ptext22:
 11149                           	opt stack 0
 11150  00397E                     _atoi:
 11151                           	opt stack 24
 11152                           
 11153                           ;incstack = 0
 11154  00397E  D002               	goto	l1466
 11155  003980  4A19               	infsnz	atoi@s,f,c
 11156  003982  2A1A               	incf	atoi@s+1,f,c
 11157  003984                     l1466:
 11158  003984  C019  FFD9         	movff	atoi@s,fsr2l
 11159  003988  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11160  00398C  0E20               	movlw	32
 11161  00398E  18DE               	xorwf	postinc2,w,c
 11162  003990  B4D8               	btfsc	status,2,c
 11163  003992  D7F6               	goto	l1467
 11164  003994  C019  FFD9         	movff	atoi@s,fsr2l
 11165  003998  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11166  00399C  0E09               	movlw	9
 11167  00399E  18DE               	xorwf	postinc2,w,c
 11168  0039A0  B4D8               	btfsc	status,2,c
 11169  0039A2  D7EE               	goto	l1467
 11170  0039A4  0E00               	movlw	0
 11171  0039A6  6E1F               	movwf	atoi@a+1,c
 11172  0039A8  0E00               	movlw	0
 11173  0039AA  6E1E               	movwf	atoi@a,c
 11174  0039AC  0E00               	movlw	0
 11175  0039AE  6E1D               	movwf	atoi@sign,c
 11176  0039B0  C019  FFD9         	movff	atoi@s,fsr2l
 11177  0039B4  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11178  0039B8  0E2D               	movlw	45
 11179  0039BA  18DE               	xorwf	postinc2,w,c
 11180  0039BC  A4D8               	btfss	status,2,c
 11181  0039BE  D002               	goto	l1469
 11182  0039C0  2A1D               	incf	atoi@sign,f,c
 11183  0039C2  D024               	goto	l7910
 11184  0039C4                     l1469:
 11185  0039C4  C019  FFD9         	movff	atoi@s,fsr2l
 11186  0039C8  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11187  0039CC  0E2B               	movlw	43
 11188  0039CE  18DE               	xorwf	postinc2,w,c
 11189  0039D0  A4D8               	btfss	status,2,c
 11190  0039D2  D01E               	goto	l1472
 11191  0039D4  D01B               	goto	l7910
 11192  0039D6  C01E  F013         	movff	atoi@a,___wmul@multiplier
 11193  0039DA  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
 11194  0039DE  0E00               	movlw	0
 11195  0039E0  6E16               	movwf	___wmul@multiplicand+1,c
 11196  0039E2  0E0A               	movlw	10
 11197  0039E4  6E15               	movwf	___wmul@multiplicand,c
 11198  0039E6  ECD2  F020         	call	___wmul	;wreg free
 11199  0039EA  C019  FFD9         	movff	atoi@s,fsr2l
 11200  0039EE  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11201  0039F2  50DF               	movf	indf2,w,c
 11202  0039F4  6E1B               	movwf	??_atoi& (0+255),c
 11203  0039F6  6A1C               	clrf	(??_atoi+1)& (0+255),c
 11204  0039F8  5013               	movf	?___wmul,w,c
 11205  0039FA  261B               	addwf	??_atoi,f,c
 11206  0039FC  5014               	movf	?___wmul+1,w,c
 11207  0039FE  221C               	addwfc	??_atoi+1,f,c
 11208  003A00  0ED0               	movlw	208
 11209  003A02  241B               	addwf	??_atoi,w,c
 11210  003A04  6E1E               	movwf	atoi@a,c
 11211  003A06  0EFF               	movlw	255
 11212  003A08  201C               	addwfc	??_atoi+1,w,c
 11213  003A0A  6E1F               	movwf	atoi@a+1,c
 11214  003A0C                     l7910:
 11215  003A0C  4A19               	infsnz	atoi@s,f,c
 11216  003A0E  2A1A               	incf	atoi@s+1,f,c
 11217  003A10                     l1472:
 11218  003A10  C019  FFD9         	movff	atoi@s,fsr2l
 11219  003A14  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11220  003A18  50DF               	movf	indf2,w,c
 11221  003A1A  EC07  F021         	call	_isdigit
 11222  003A1E  B0D8               	btfsc	status,0,c
 11223  003A20  D7DA               	goto	l1473
 11224  003A22  501D               	movf	atoi@sign,w,c
 11225  003A24  B4D8               	btfsc	status,2,c
 11226  003A26  D00D               	goto	l1475
 11227  003A28  C01E  F01B         	movff	atoi@a,??_atoi
 11228  003A2C  C01F  F01C         	movff	atoi@a+1,??_atoi+1
 11229  003A30  1E1B               	comf	??_atoi,f,c
 11230  003A32  1E1C               	comf	??_atoi+1,f,c
 11231  003A34  4A1B               	infsnz	??_atoi,f,c
 11232  003A36  2A1C               	incf	??_atoi+1,f,c
 11233  003A38  C01B  F019         	movff	??_atoi,?_atoi
 11234  003A3C  C01C  F01A         	movff	??_atoi+1,?_atoi+1
 11235  003A40  0012               	return	
 11236  003A42                     l1475:
 11237  003A42  C01E  F019         	movff	atoi@a,?_atoi
 11238  003A46  C01F  F01A         	movff	atoi@a+1,?_atoi+1
 11239  003A4A  0012               	return		;funcret
 11240  003A4C                     __end_of_atoi:
 11241                           	opt stack 0
 11242                           tblptru	equ	0xFF8
 11243                           tblptrh	equ	0xFF7
 11244                           tblptrl	equ	0xFF6
 11245                           tablat	equ	0xFF5
 11246                           prodh	equ	0xFF4
 11247                           prodl	equ	0xFF3
 11248                           intcon	equ	0xFF2
 11249                           postinc0	equ	0xFEE
 11250                           wreg	equ	0xFE8
 11251                           postinc1	equ	0xFE6
 11252                           postdec1	equ	0xFE5
 11253                           fsr1h	equ	0xFE2
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           fsr2h	equ	0xFDA
 11259                           fsr2l	equ	0xFD9
 11260                           status	equ	0xFD8
 11261                           
 11262 ;; *************** function _isdigit *****************
 11263 ;; Defined at:
 11264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;  c               1    wreg     unsigned char 
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;  c               1   20[COMRAM] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;		None               void
 11271 ;; Registers used:
 11272 ;;		wreg, status,2, status,0
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11278 ;;      Params:         0       0       0       0       0       0       0       0       0
 11279 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11280 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11281 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11282 ;;Total ram usage:        3 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    3
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_atoi
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           	psect	text23
 11293  00420E                     __ptext23:
 11294                           	opt stack 0
 11295  00420E                     _isdigit:
 11296                           	opt stack 24
 11297                           
 11298                           ;incstack = 0
 11299                           ;isdigit@c stored from wreg
 11300  00420E  6E15               	movwf	isdigit@c,c
 11301  004210  0E00               	movlw	0
 11302  004212  6E14               	movwf	_isdigit$1847,c
 11303  004214  0E3A               	movlw	58
 11304  004216  6015               	cpfslt	isdigit@c,c
 11305  004218  D005               	goto	l1647
 11306  00421A  0E2F               	movlw	47
 11307  00421C  6415               	cpfsgt	isdigit@c,c
 11308  00421E  D002               	goto	l1647
 11309  004220  0E01               	movlw	1
 11310  004222  6E14               	movwf	_isdigit$1847,c
 11311  004224                     l1647:
 11312  004224  C014  F013         	movff	_isdigit$1847,??_isdigit
 11313  004228  3013               	rrcf	??_isdigit,w,c
 11314  00422A  0012               	return	
 11315  00422C                     __end_of_isdigit:
 11316                           	opt stack 0
 11317                           tblptru	equ	0xFF8
 11318                           tblptrh	equ	0xFF7
 11319                           tblptrl	equ	0xFF6
 11320                           tablat	equ	0xFF5
 11321                           prodh	equ	0xFF4
 11322                           prodl	equ	0xFF3
 11323                           intcon	equ	0xFF2
 11324                           postinc0	equ	0xFEE
 11325                           wreg	equ	0xFE8
 11326                           postinc1	equ	0xFE6
 11327                           postdec1	equ	0xFE5
 11328                           fsr1h	equ	0xFE2
 11329                           fsr1l	equ	0xFE1
 11330                           indf2	equ	0xFDF
 11331                           postinc2	equ	0xFDE
 11332                           postdec2	equ	0xFDD
 11333                           fsr2h	equ	0xFDA
 11334                           fsr2l	equ	0xFD9
 11335                           status	equ	0xFD8
 11336                           
 11337 ;; *************** function ___wmul *****************
 11338 ;; Defined at:
 11339 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 11340 ;; Parameters:    Size  Location     Type
 11341 ;;  multiplier      2   18[COMRAM] unsigned int 
 11342 ;;  multiplicand    2   20[COMRAM] unsigned int 
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;  product         2   22[COMRAM] unsigned int 
 11345 ;; Return value:  Size  Location     Type
 11346 ;;                  2   18[COMRAM] unsigned int 
 11347 ;; Registers used:
 11348 ;;		wreg, status,2, status,0, prodl, prodh
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11354 ;;      Params:         4       0       0       0       0       0       0       0       0
 11355 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11357 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11358 ;;Total ram usage:        6 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    3
 11361 ;; This function calls:
 11362 ;;		Nothing
 11363 ;; This function is called by:
 11364 ;;		_atoi
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           	psect	text24
 11369  0041A4                     __ptext24:
 11370                           	opt stack 0
 11371  0041A4                     ___wmul:
 11372                           	opt stack 24
 11373                           
 11374                           ;incstack = 0
 11375  0041A4  5013               	movf	___wmul@multiplier,w,c
 11376  0041A6  0215               	mulwf	___wmul@multiplicand,c
 11377  0041A8  CFF3 F017          	movff	prodl,___wmul@product
 11378  0041AC  CFF4 F018          	movff	prodh,___wmul@product+1
 11379  0041B0  5013               	movf	___wmul@multiplier,w,c
 11380  0041B2  0216               	mulwf	___wmul@multiplicand+1,c
 11381  0041B4  50F3               	movf	prodl,w,c
 11382  0041B6  2618               	addwf	___wmul@product+1,f,c
 11383  0041B8  5014               	movf	___wmul@multiplier+1,w,c
 11384  0041BA  0215               	mulwf	___wmul@multiplicand,c
 11385  0041BC  50F3               	movf	prodl,w,c
 11386  0041BE  2618               	addwf	___wmul@product+1,f,c
 11387  0041C0  C017  F013         	movff	___wmul@product,?___wmul
 11388  0041C4  C018  F014         	movff	___wmul@product+1,?___wmul+1
 11389  0041C8  0012               	return	
 11390  0041CA                     __end_of___wmul:
 11391                           	opt stack 0
 11392                           tblptru	equ	0xFF8
 11393                           tblptrh	equ	0xFF7
 11394                           tblptrl	equ	0xFF6
 11395                           tablat	equ	0xFF5
 11396                           prodh	equ	0xFF4
 11397                           prodl	equ	0xFF3
 11398                           intcon	equ	0xFF2
 11399                           postinc0	equ	0xFEE
 11400                           wreg	equ	0xFE8
 11401                           postinc1	equ	0xFE6
 11402                           postdec1	equ	0xFE5
 11403                           fsr1h	equ	0xFE2
 11404                           fsr1l	equ	0xFE1
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           
 11412 ;; *************** function _SETxAPIxVALxNoxRET *****************
 11413 ;; Defined at:
 11414 ;;		line 223 in file "../api.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;  index           2   20[COMRAM] unsigned int 
 11417 ;;  value           2   22[COMRAM] unsigned int 
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;		None
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  1    wreg      void 
 11422 ;; Registers used:
 11423 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11429 ;;      Params:         4       0       0       0       0       0       0       0       0
 11430 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11431 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11432 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11433 ;;Total ram usage:        6 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    3
 11436 ;; This function calls:
 11437 ;;		Nothing
 11438 ;; This function is called by:
 11439 ;;		_Update_StateMchn
 11440 ;;		_TranslateMessage
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           	psect	text25
 11445  004078                     __ptext25:
 11446                           	opt stack 0
 11447  004078                     _SETxAPIxVALxNoxRET:
 11448                           	opt stack 26
 11449                           
 11450                           ;api.c: 224: if(API[index] != value){
 11451                           
 11452                           ;incstack = 0
 11453  004078  90D8               	bcf	status,0,c
 11454  00407A  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11455  00407C  6ED9               	movwf	fsr2l,c
 11456  00407E  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11457  004080  6EDA               	movwf	fsr2h,c
 11458  004082  0E00               	movlw	low _API
 11459  004084  26D9               	addwf	fsr2l,f,c
 11460  004086  0E01               	movlw	high _API
 11461  004088  22DA               	addwfc	fsr2h,f,c
 11462  00408A  5017               	movf	SETxAPIxVALxNoxRET@value,w,c
 11463  00408C  18DE               	xorwf	postinc2,w,c
 11464  00408E  E104               	bnz	u6780
 11465  004090  5018               	movf	SETxAPIxVALxNoxRET@value+1,w,c
 11466  004092  18DE               	xorwf	postinc2,w,c
 11467  004094  B4D8               	btfsc	status,2,c
 11468  004096  0012               	return	
 11469  004098                     u6780:
 11470                           
 11471                           ;api.c: 225: API[index] = value;
 11472  004098  90D8               	bcf	status,0,c
 11473  00409A  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11474  00409C  6ED9               	movwf	fsr2l,c
 11475  00409E  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11476  0040A0  6EDA               	movwf	fsr2h,c
 11477  0040A2  0E00               	movlw	low _API
 11478  0040A4  26D9               	addwf	fsr2l,f,c
 11479  0040A6  0E01               	movlw	high _API
 11480  0040A8  22DA               	addwfc	fsr2h,f,c
 11481  0040AA  C017  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 11482  0040AE  C018  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 11483  0040B2  0012               	return	
 11484  0040B4                     __end_of_SETxAPIxVALxNoxRET:
 11485                           	opt stack 0
 11486                           tblptru	equ	0xFF8
 11487                           tblptrh	equ	0xFF7
 11488                           tblptrl	equ	0xFF6
 11489                           tablat	equ	0xFF5
 11490                           prodh	equ	0xFF4
 11491                           prodl	equ	0xFF3
 11492                           intcon	equ	0xFF2
 11493                           postinc0	equ	0xFEE
 11494                           wreg	equ	0xFE8
 11495                           postinc1	equ	0xFE6
 11496                           postdec1	equ	0xFE5
 11497                           fsr1h	equ	0xFE2
 11498                           fsr1l	equ	0xFE1
 11499                           indf2	equ	0xFDF
 11500                           postinc2	equ	0xFDE
 11501                           postdec2	equ	0xFDD
 11502                           fsr2h	equ	0xFDA
 11503                           fsr2l	equ	0xFD9
 11504                           status	equ	0xFD8
 11505                           
 11506 ;; *************** function _GETxAPIxVAL *****************
 11507 ;; Defined at:
 11508 ;;		line 229 in file "../api.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;  index           2   18[COMRAM] unsigned int 
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;		None
 11513 ;; Return value:  Size  Location     Type
 11514 ;;                  2   18[COMRAM] unsigned int 
 11515 ;; Registers used:
 11516 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11522 ;;      Params:         2       0       0       0       0       0       0       0       0
 11523 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11524 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11525 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11526 ;;Total ram usage:        2 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; Hardware stack levels required when called:    3
 11529 ;; This function calls:
 11530 ;;		Nothing
 11531 ;; This function is called by:
 11532 ;;		_Update_StateMchn
 11533 ;;		_Train_Path
 11534 ;;		_TranslateMessage
 11535 ;;		_Debounce_Inputs
 11536 ;;		_Junction
 11537 ;;		_Train_Move_Left_Start
 11538 ;;		_Right_Mountain_From_The_Right
 11539 ;;		_Left_Mountain_From_The_Right
 11540 ;;		_Train_Move_Left_Brake
 11541 ;;		_Train_Move_Right_Start
 11542 ;;		_Left_Mountain_From_The_Left
 11543 ;;		_Right_Mountain_From_The_Left
 11544 ;;		_Train_Move_Right_Brake
 11545 ;;		_SETxPWM
 11546 ;;		_INCRxAPIxVAL
 11547 ;;		_DECRxAPIxVAL
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           	psect	text26
 11552  00422C                     __ptext26:
 11553                           	opt stack 0
 11554  00422C                     _GETxAPIxVAL:
 11555                           	opt stack 23
 11556                           
 11557                           ;api.c: 230: return API[index];
 11558                           
 11559                           ;incstack = 0
 11560  00422C  90D8               	bcf	status,0,c
 11561  00422E  3413               	rlcf	GETxAPIxVAL@index,w,c
 11562  004230  6ED9               	movwf	fsr2l,c
 11563  004232  3414               	rlcf	GETxAPIxVAL@index+1,w,c
 11564  004234  6EDA               	movwf	fsr2h,c
 11565  004236  0E00               	movlw	low _API
 11566  004238  26D9               	addwf	fsr2l,f,c
 11567  00423A  0E01               	movlw	high _API
 11568  00423C  22DA               	addwfc	fsr2h,f,c
 11569  00423E  CFDE F013          	movff	postinc2,?_GETxAPIxVAL
 11570  004242  CFDD F014          	movff	postdec2,?_GETxAPIxVAL+1
 11571  004246  0012               	return	
 11572  004248                     __end_of_GETxAPIxVAL:
 11573                           	opt stack 0
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           postinc0	equ	0xFEE
 11582                           wreg	equ	0xFE8
 11583                           postinc1	equ	0xFE6
 11584                           postdec1	equ	0xFE5
 11585                           fsr1h	equ	0xFE2
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           fsr2h	equ	0xFDA
 11591                           fsr2l	equ	0xFD9
 11592                           status	equ	0xFD8
 11593                           
 11594 ;; *************** function _GETxAPIxRW *****************
 11595 ;; Defined at:
 11596 ;;		line 212 in file "../api.c"
 11597 ;; Parameters:    Size  Location     Type
 11598 ;;  index           2   18[COMRAM] unsigned int 
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;		None
 11601 ;; Return value:  Size  Location     Type
 11602 ;;                  2   18[COMRAM] unsigned int 
 11603 ;; Registers used:
 11604 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11605 ;; Tracked objects:
 11606 ;;		On entry : 0/0
 11607 ;;		On exit  : 0/0
 11608 ;;		Unchanged: 0/0
 11609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11610 ;;      Params:         2       0       0       0       0       0       0       0       0
 11611 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11612 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11613 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11614 ;;Total ram usage:        2 bytes
 11615 ;; Hardware stack levels used:    1
 11616 ;; Hardware stack levels required when called:    3
 11617 ;; This function calls:
 11618 ;;		Nothing
 11619 ;; This function is called by:
 11620 ;;		_TranslateMessage
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           	psect	text27
 11625  004248                     __ptext27:
 11626                           	opt stack 0
 11627  004248                     _GETxAPIxRW:
 11628                           	opt stack 25
 11629                           
 11630                           ;api.c: 213: return API_RW[index];
 11631                           
 11632                           ;incstack = 0
 11633  004248  90D8               	bcf	status,0,c
 11634  00424A  3413               	rlcf	GETxAPIxRW@index,w,c
 11635  00424C  6ED9               	movwf	fsr2l,c
 11636  00424E  3414               	rlcf	GETxAPIxRW@index+1,w,c
 11637  004250  6EDA               	movwf	fsr2h,c
 11638  004252  0E00               	movlw	low _API_RW
 11639  004254  26D9               	addwf	fsr2l,f,c
 11640  004256  0E02               	movlw	high _API_RW
 11641  004258  22DA               	addwfc	fsr2h,f,c
 11642  00425A  CFDE F013          	movff	postinc2,?_GETxAPIxRW
 11643  00425E  CFDD F014          	movff	postdec2,?_GETxAPIxRW+1
 11644  004262  0012               	return	
 11645  004264                     __end_of_GETxAPIxRW:
 11646                           	opt stack 0
 11647                           tblptru	equ	0xFF8
 11648                           tblptrh	equ	0xFF7
 11649                           tblptrl	equ	0xFF6
 11650                           tablat	equ	0xFF5
 11651                           prodh	equ	0xFF4
 11652                           prodl	equ	0xFF3
 11653                           intcon	equ	0xFF2
 11654                           postinc0	equ	0xFEE
 11655                           wreg	equ	0xFE8
 11656                           postinc1	equ	0xFE6
 11657                           postdec1	equ	0xFE5
 11658                           fsr1h	equ	0xFE2
 11659                           fsr1l	equ	0xFE1
 11660                           indf2	equ	0xFDF
 11661                           postinc2	equ	0xFDE
 11662                           postdec2	equ	0xFDD
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           
 11667 ;; *************** function _EUSART1_Read *****************
 11668 ;; Defined at:
 11669 ;;		line 143 in file "../eusart1.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;		None
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;  readValue       1   18[COMRAM] unsigned char 
 11674 ;; Return value:  Size  Location     Type
 11675 ;;                  1    wreg      unsigned char 
 11676 ;; Registers used:
 11677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11683 ;;      Params:         0       0       0       0       0       0       0       0       0
 11684 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11685 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11686 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11687 ;;Total ram usage:        1 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; Hardware stack levels required when called:    3
 11690 ;; This function calls:
 11691 ;;		Nothing
 11692 ;; This function is called by:
 11693 ;;		_READxRECEIVEDxMESSAGE
 11694 ;; This function uses a non-reentrant model
 11695 ;;
 11696                           
 11697                           	psect	text28
 11698  0040EE                     __ptext28:
 11699                           	opt stack 0
 11700  0040EE                     _EUSART1_Read:
 11701                           	opt stack 26
 11702                           
 11703                           ;eusart1.c: 144: uint8_t readValue = 0;
 11704                           
 11705                           ;incstack = 0
 11706  0040EE  0E00               	movlw	0
 11707  0040F0  6E13               	movwf	EUSART1_Read@readValue,c
 11708  0040F2  503F               	movf	_eusart1RxCount,w,c	;volatile
 11709  0040F4  B4D8               	btfsc	status,2,c
 11710  0040F6  D7FD               	goto	l550
 11711                           
 11712                           ;eusart1.c: 147: }
 11713                           ;eusart1.c: 149: PIE1bits.RC1IE = 0;
 11714  0040F8  9A9D               	bcf	3997,5,c	;volatile
 11715                           
 11716                           ;eusart1.c: 151: readValue = eusart1RxBuffer[eusart1RxTail++];
 11717  0040FA  5040               	movf	_eusart1RxTail,w,c
 11718  0040FC  0D01               	mullw	1
 11719  0040FE  0E00               	movlw	low _eusart1RxBuffer
 11720  004100  24F3               	addwf	prodl,w,c
 11721  004102  6ED9               	movwf	fsr2l,c
 11722  004104  0E04               	movlw	high _eusart1RxBuffer
 11723  004106  20F4               	addwfc	prodh,w,c
 11724  004108  6EDA               	movwf	fsr2h,c
 11725  00410A  50DF               	movf	indf2,w,c
 11726  00410C  6E13               	movwf	EUSART1_Read@readValue,c
 11727  00410E  2A40               	incf	_eusart1RxTail,f,c
 11728                           
 11729                           ;eusart1.c: 152: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11730  004110  0E7D               	movlw	125
 11731  004112  6440               	cpfsgt	_eusart1RxTail,c
 11732  004114  D002               	goto	l552
 11733                           
 11734                           ;eusart1.c: 153: eusart1RxTail = 0;
 11735  004116  0E00               	movlw	0
 11736  004118  6E40               	movwf	_eusart1RxTail,c
 11737  00411A                     l552:
 11738                           
 11739                           ;eusart1.c: 154: }
 11740                           ;eusart1.c: 155: eusart1RxCount--;
 11741  00411A  063F               	decf	_eusart1RxCount,f,c	;volatile
 11742                           
 11743                           ;eusart1.c: 156: PIE1bits.RC1IE = 1;
 11744  00411C  8A9D               	bsf	3997,5,c	;volatile
 11745                           
 11746                           ;eusart1.c: 158: return readValue;
 11747  00411E  5013               	movf	EUSART1_Read@readValue,w,c
 11748  004120  0012               	return	
 11749  004122                     __end_of_EUSART1_Read:
 11750                           	opt stack 0
 11751                           tblptru	equ	0xFF8
 11752                           tblptrh	equ	0xFF7
 11753                           tblptrl	equ	0xFF6
 11754                           tablat	equ	0xFF5
 11755                           prodh	equ	0xFF4
 11756                           prodl	equ	0xFF3
 11757                           intcon	equ	0xFF2
 11758                           postinc0	equ	0xFEE
 11759                           wreg	equ	0xFE8
 11760                           postinc1	equ	0xFE6
 11761                           postdec1	equ	0xFE5
 11762                           fsr1h	equ	0xFE2
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _Init_Timers *****************
 11772 ;; Defined at:
 11773 ;;		line 187 in file "../Main.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      void 
 11780 ;; Registers used:
 11781 ;;		wreg, status,2
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    3
 11794 ;; This function calls:
 11795 ;;		Nothing
 11796 ;; This function is called by:
 11797 ;;		_main
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           	psect	text29
 11802  004264                     __ptext29:
 11803                           	opt stack 0
 11804  004264                     _Init_Timers:
 11805                           	opt stack 27
 11806                           
 11807                           ;Main.c: 189: RCONbits.IPEN = 1;
 11808                           
 11809                           ;incstack = 0
 11810  004264  8ED0               	bsf	4048,7,c	;volatile
 11811                           
 11812                           ;Main.c: 190: INTCON = 0xA0;
 11813  004266  0EA0               	movlw	160
 11814  004268  6EF2               	movwf	intcon,c	;volatile
 11815                           
 11816                           ;Main.c: 191: INTCON2 = 0x84;
 11817  00426A  0E84               	movlw	132
 11818  00426C  6EF1               	movwf	intcon2,c	;volatile
 11819                           
 11820                           ;Main.c: 192: TMR0H = 0x0;
 11821  00426E  0E00               	movlw	0
 11822  004270  6ED7               	movwf	4055,c	;volatile
 11823                           
 11824                           ;Main.c: 193: TMR0L = 0x0;
 11825  004272  0E00               	movlw	0
 11826  004274  6ED6               	movwf	4054,c	;volatile
 11827                           
 11828                           ;Main.c: 194: T0CON = 0xC3;
 11829  004276  0EC3               	movlw	195
 11830  004278  6ED5               	movwf	4053,c	;volatile
 11831  00427A  0012               	return		;funcret
 11832  00427C                     __end_of_Init_Timers:
 11833                           	opt stack 0
 11834                           tblptru	equ	0xFF8
 11835                           tblptrh	equ	0xFF7
 11836                           tblptrl	equ	0xFF6
 11837                           tablat	equ	0xFF5
 11838                           prodh	equ	0xFF4
 11839                           prodl	equ	0xFF3
 11840                           intcon	equ	0xFF2
 11841                           intcon2	equ	0xFF1
 11842                           postinc0	equ	0xFEE
 11843                           wreg	equ	0xFE8
 11844                           postinc1	equ	0xFE6
 11845                           postdec1	equ	0xFE5
 11846                           fsr1h	equ	0xFE2
 11847                           fsr1l	equ	0xFE1
 11848                           indf2	equ	0xFDF
 11849                           postinc2	equ	0xFDE
 11850                           postdec2	equ	0xFDD
 11851                           fsr2h	equ	0xFDA
 11852                           fsr2l	equ	0xFD9
 11853                           status	equ	0xFD8
 11854                           
 11855 ;; *************** function _Init_Pwm *****************
 11856 ;; Defined at:
 11857 ;;		line 200 in file "../Main.c"
 11858 ;; Parameters:    Size  Location     Type
 11859 ;;		None
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;		None
 11862 ;; Return value:  Size  Location     Type
 11863 ;;                  1    wreg      void 
 11864 ;; Registers used:
 11865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11871 ;;      Params:         0       0       0       0       0       0       0       0       0
 11872 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11873 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11874 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11875 ;;Total ram usage:        0 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    5
 11878 ;; This function calls:
 11879 ;;		_SETxAPIxVAL
 11880 ;; This function is called by:
 11881 ;;		_main
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           	psect	text30
 11886  00417C                     __ptext30:
 11887                           	opt stack 0
 11888  00417C                     _Init_Pwm:
 11889                           	opt stack 25
 11890                           
 11891                           ;Main.c: 203: SETxAPIxVAL(69, 1);
 11892                           
 11893                           ;incstack = 0
 11894  00417C  0E00               	movlw	0
 11895  00417E  6E1A               	movwf	SETxAPIxVAL@index+1,c
 11896  004180  0E45               	movlw	69
 11897  004182  6E19               	movwf	SETxAPIxVAL@index,c
 11898  004184  0E00               	movlw	0
 11899  004186  6E1C               	movwf	SETxAPIxVAL@value+1,c
 11900  004188  0E01               	movlw	1
 11901  00418A  6E1B               	movwf	SETxAPIxVAL@value,c
 11902  00418C  ECCF  F01F         	call	_SETxAPIxVAL	;wreg free
 11903                           
 11904                           ;Main.c: 204: PR2=0xFF;
 11905  004190  68CB               	setf	4043,c	;volatile
 11906                           
 11907                           ;Main.c: 205: CCPR1L = 0x7F;
 11908  004192  0E7F               	movlw	127
 11909  004194  6EBE               	movwf	4030,c	;volatile
 11910                           
 11911                           ;Main.c: 206: CCP1CON = 0x0F;
 11912  004196  0E0F               	movlw	15
 11913  004198  6EBD               	movwf	4029,c	;volatile
 11914                           
 11915                           ;Main.c: 207: T2CON = 0x04;
 11916  00419A  0E04               	movlw	4
 11917  00419C  6ECA               	movwf	4042,c	;volatile
 11918                           
 11919                           ;Main.c: 208: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11920  00419E  9494               	bcf	3988,2,c	;volatile
 11921  0041A0  9094               	bcf	3988,0,c	;volatile
 11922  0041A2  0012               	return		;funcret
 11923  0041A4                     __end_of_Init_Pwm:
 11924                           	opt stack 0
 11925                           tblptru	equ	0xFF8
 11926                           tblptrh	equ	0xFF7
 11927                           tblptrl	equ	0xFF6
 11928                           tablat	equ	0xFF5
 11929                           prodh	equ	0xFF4
 11930                           prodl	equ	0xFF3
 11931                           intcon	equ	0xFF2
 11932                           intcon2	equ	0xFF1
 11933                           postinc0	equ	0xFEE
 11934                           wreg	equ	0xFE8
 11935                           postinc1	equ	0xFE6
 11936                           postdec1	equ	0xFE5
 11937                           fsr1h	equ	0xFE2
 11938                           fsr1l	equ	0xFE1
 11939                           indf2	equ	0xFDF
 11940                           postinc2	equ	0xFDE
 11941                           postdec2	equ	0xFDD
 11942                           fsr2h	equ	0xFDA
 11943                           fsr2l	equ	0xFD9
 11944                           status	equ	0xFD8
 11945                           
 11946 ;; *************** function _SETxAPIxVAL *****************
 11947 ;; Defined at:
 11948 ;;		line 216 in file "../api.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;  index           2   24[COMRAM] unsigned int 
 11951 ;;  value           2   26[COMRAM] unsigned int 
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;		None
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  1    wreg      void 
 11956 ;; Registers used:
 11957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 0/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11963 ;;      Params:         4       0       0       0       0       0       0       0       0
 11964 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11965 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11966 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11967 ;;Total ram usage:        6 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; Hardware stack levels required when called:    4
 11970 ;; This function calls:
 11971 ;;		_SENDxMESSAGE
 11972 ;; This function is called by:
 11973 ;;		_Init_Pwm
 11974 ;;		_Update_StateMchn
 11975 ;;		_Train_Path
 11976 ;;		_Green_Led
 11977 ;;		_Red_Led
 11978 ;;		_Debounce_Inputs
 11979 ;;		_Junction
 11980 ;;		_Train_Move_Left_Start
 11981 ;;		_Train_Move_Left_Brake
 11982 ;;		_Train_Move_Right_Start
 11983 ;;		_Train_Move_Right_Brake
 11984 ;;		_SETxPWM
 11985 ;;		_INCRxAPIxVAL
 11986 ;;		_DECRxAPIxVAL
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           	psect	text31
 11991  003F9E                     __ptext31:
 11992                           	opt stack 0
 11993  003F9E                     _SETxAPIxVAL:
 11994                           	opt stack 22
 11995                           
 11996                           ;api.c: 217: if(API[index] != value){
 11997                           
 11998                           ;incstack = 0
 11999  003F9E  90D8               	bcf	status,0,c
 12000  003FA0  3419               	rlcf	SETxAPIxVAL@index,w,c
 12001  003FA2  6ED9               	movwf	fsr2l,c
 12002  003FA4  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 12003  003FA6  6EDA               	movwf	fsr2h,c
 12004  003FA8  0E00               	movlw	low _API
 12005  003FAA  26D9               	addwf	fsr2l,f,c
 12006  003FAC  0E01               	movlw	high _API
 12007  003FAE  22DA               	addwfc	fsr2h,f,c
 12008  003FB0  501B               	movf	SETxAPIxVAL@value,w,c
 12009  003FB2  18DE               	xorwf	postinc2,w,c
 12010  003FB4  E104               	bnz	u6640
 12011  003FB6  501C               	movf	SETxAPIxVAL@value+1,w,c
 12012  003FB8  18DE               	xorwf	postinc2,w,c
 12013  003FBA  B4D8               	btfsc	status,2,c
 12014  003FBC  0012               	return	
 12015  003FBE                     u6640:
 12016                           
 12017                           ;api.c: 218: API[index] = value;
 12018  003FBE  90D8               	bcf	status,0,c
 12019  003FC0  3419               	rlcf	SETxAPIxVAL@index,w,c
 12020  003FC2  6ED9               	movwf	fsr2l,c
 12021  003FC4  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 12022  003FC6  6EDA               	movwf	fsr2h,c
 12023  003FC8  0E00               	movlw	low _API
 12024  003FCA  26D9               	addwf	fsr2l,f,c
 12025  003FCC  0E01               	movlw	high _API
 12026  003FCE  22DA               	addwfc	fsr2h,f,c
 12027  003FD0  C01B  FFDE         	movff	SETxAPIxVAL@value,postinc2
 12028  003FD4  C01C  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 12029                           
 12030                           ;api.c: 219: SENDxMESSAGE(index, value);
 12031  003FD8  C019  F013         	movff	SETxAPIxVAL@index,SENDxMESSAGE@index
 12032  003FDC  C01A  F014         	movff	SETxAPIxVAL@index+1,SENDxMESSAGE@index+1
 12033  003FE0  C01B  F015         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 12034  003FE4  C01C  F016         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 12035  003FE8  EC0A  F01F         	call	_SENDxMESSAGE	;wreg free
 12036  003FEC  0012               	return	
 12037  003FEE                     __end_of_SETxAPIxVAL:
 12038                           	opt stack 0
 12039                           tblptru	equ	0xFF8
 12040                           tblptrh	equ	0xFF7
 12041                           tblptrl	equ	0xFF6
 12042                           tablat	equ	0xFF5
 12043                           prodh	equ	0xFF4
 12044                           prodl	equ	0xFF3
 12045                           intcon	equ	0xFF2
 12046                           intcon2	equ	0xFF1
 12047                           postinc0	equ	0xFEE
 12048                           wreg	equ	0xFE8
 12049                           postinc1	equ	0xFE6
 12050                           postdec1	equ	0xFE5
 12051                           fsr1h	equ	0xFE2
 12052                           fsr1l	equ	0xFE1
 12053                           indf2	equ	0xFDF
 12054                           postinc2	equ	0xFDE
 12055                           postdec2	equ	0xFDD
 12056                           fsr2h	equ	0xFDA
 12057                           fsr2l	equ	0xFD9
 12058                           status	equ	0xFD8
 12059                           
 12060 ;; *************** function _SENDxMESSAGE *****************
 12061 ;; Defined at:
 12062 ;;		line 247 in file "../terminal.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;  index           2   18[COMRAM] unsigned int 
 12065 ;;  value           2   20[COMRAM] unsigned int 
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;		None
 12068 ;; Return value:  Size  Location     Type
 12069 ;;                  1    wreg      void 
 12070 ;; Registers used:
 12071 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12077 ;;      Params:         4       0       0       0       0       0       0       0       0
 12078 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12079 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12080 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12081 ;;Total ram usage:        6 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:    3
 12084 ;; This function calls:
 12085 ;;		Nothing
 12086 ;; This function is called by:
 12087 ;;		_TranslateMessage
 12088 ;;		_SETxAPIxVAL
 12089 ;;		_INCRxAPIxVAL
 12090 ;;		_DECRxAPIxVAL
 12091 ;; This function uses a non-reentrant model
 12092 ;;
 12093                           
 12094                           	psect	text32
 12095  003E14                     __ptext32:
 12096                           	opt stack 0
 12097  003E14                     _SENDxMESSAGE:
 12098                           	opt stack 22
 12099                           
 12100                           ;terminal.c: 249: Comm_List[WritePointer][0] = index;
 12101                           
 12102                           ;incstack = 0
 12103  003E14  0EFC               	movlw	low _Comm_List
 12104  003E16  6E17               	movwf	??_SENDxMESSAGE& (0+255),c
 12105  003E18  0E04               	movlw	high _Comm_List
 12106  003E1A  6E18               	movwf	(??_SENDxMESSAGE+1)& (0+255),c
 12107  003E1C  90D8               	bcf	status,0,c
 12108  003E1E  0100               	movlb	0	; () banked
 12109  003E20  3572               	rlcf	_WritePointer& (0+255),w,b
 12110  003E22  6ED9               	movwf	fsr2l,c
 12111  003E24  3573               	rlcf	(_WritePointer+1)& (0+255),w,b
 12112  003E26  6EDA               	movwf	fsr2h,c
 12113  003E28  90D8               	bcf	status,0,c
 12114  003E2A  36D9               	rlcf	fsr2l,f,c
 12115  003E2C  36DA               	rlcf	fsr2h,f,c
 12116  003E2E  5017               	movf	??_SENDxMESSAGE,w,c
 12117  003E30  26D9               	addwf	fsr2l,f,c
 12118  003E32  5018               	movf	??_SENDxMESSAGE+1,w,c
 12119  003E34  22DA               	addwfc	fsr2h,f,c
 12120  003E36  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 12121  003E3A  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 12122                           
 12123                           ;terminal.c: 250: Comm_List[WritePointer][1] = value;
 12124  003E3E  C072  F017         	movff	_WritePointer,??_SENDxMESSAGE
 12125  003E42  C073  F018         	movff	_WritePointer+1,??_SENDxMESSAGE+1
 12126  003E46  90D8               	bcf	status,0,c
 12127  003E48  3617               	rlcf	??_SENDxMESSAGE,f,c
 12128  003E4A  3618               	rlcf	??_SENDxMESSAGE+1,f,c
 12129  003E4C  90D8               	bcf	status,0,c
 12130  003E4E  3617               	rlcf	??_SENDxMESSAGE,f,c
 12131  003E50  3618               	rlcf	??_SENDxMESSAGE+1,f,c
 12132  003E52  0E02               	movlw	2
 12133  003E54  2617               	addwf	??_SENDxMESSAGE,f,c
 12134  003E56  0E00               	movlw	0
 12135  003E58  2218               	addwfc	??_SENDxMESSAGE+1,f,c
 12136  003E5A  0EFC               	movlw	low _Comm_List
 12137  003E5C  2417               	addwf	??_SENDxMESSAGE,w,c
 12138  003E5E  6ED9               	movwf	fsr2l,c
 12139  003E60  0E04               	movlw	high _Comm_List
 12140  003E62  2018               	addwfc	??_SENDxMESSAGE+1,w,c
 12141  003E64  6EDA               	movwf	fsr2h,c
 12142  003E66  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 12143  003E6A  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;terminal.c: 252: WritePointer++;
 12147  003E6E  4B72               	infsnz	_WritePointer& (0+255),f,b
 12148  003E70  2B73               	incf	(_WritePointer+1)& (0+255),f,b
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;terminal.c: 253: if (WritePointer > 189){
 12152  003E72  5173               	movf	(_WritePointer+1)& (0+255),w,b
 12153  003E74  E104               	bnz	u6630
 12154  003E76  0EBE               	movlw	190
 12155  003E78  5D72               	subwf	_WritePointer& (0+255),w,b
 12156  003E7A  A0D8               	btfss	status,0,c
 12157  003E7C  0012               	return	
 12158  003E7E                     u6630:
 12159                           
 12160                           ; BSR set to: 0
 12161                           ;terminal.c: 254: WritePointer = 0;
 12162  003E7E  0E00               	movlw	0
 12163  003E80  6F73               	movwf	(_WritePointer+1)& (0+255),b
 12164  003E82  0E00               	movlw	0
 12165  003E84  6F72               	movwf	_WritePointer& (0+255),b
 12166  003E86  0012               	return	
 12167  003E88                     __end_of_SENDxMESSAGE:
 12168                           	opt stack 0
 12169                           tblptru	equ	0xFF8
 12170                           tblptrh	equ	0xFF7
 12171                           tblptrl	equ	0xFF6
 12172                           tablat	equ	0xFF5
 12173                           prodh	equ	0xFF4
 12174                           prodl	equ	0xFF3
 12175                           intcon	equ	0xFF2
 12176                           intcon2	equ	0xFF1
 12177                           postinc0	equ	0xFEE
 12178                           wreg	equ	0xFE8
 12179                           postinc1	equ	0xFE6
 12180                           postdec1	equ	0xFE5
 12181                           fsr1h	equ	0xFE2
 12182                           fsr1l	equ	0xFE1
 12183                           indf2	equ	0xFDF
 12184                           postinc2	equ	0xFDE
 12185                           postdec2	equ	0xFDD
 12186                           fsr2h	equ	0xFDA
 12187                           fsr2l	equ	0xFD9
 12188                           status	equ	0xFD8
 12189                           
 12190 ;; *************** function _EUSART1_Initialize *****************
 12191 ;; Defined at:
 12192 ;;		line 78 in file "../eusart1.c"
 12193 ;; Parameters:    Size  Location     Type
 12194 ;;		None
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;  baud_rate       2   18[COMRAM] unsigned int 
 12197 ;; Return value:  Size  Location     Type
 12198 ;;                  1    wreg      void 
 12199 ;; Registers used:
 12200 ;;		wreg, status,2
 12201 ;; Tracked objects:
 12202 ;;		On entry : 0/0
 12203 ;;		On exit  : 0/0
 12204 ;;		Unchanged: 0/0
 12205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12206 ;;      Params:         0       0       0       0       0       0       0       0       0
 12207 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12208 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12209 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12210 ;;Total ram usage:        2 bytes
 12211 ;; Hardware stack levels used:    1
 12212 ;; Hardware stack levels required when called:    3
 12213 ;; This function calls:
 12214 ;;		Nothing
 12215 ;; This function is called by:
 12216 ;;		_main
 12217 ;; This function uses a non-reentrant model
 12218 ;;
 12219                           
 12220                           	psect	text33
 12221  003FEE                     __ptext33:
 12222                           	opt stack 0
 12223  003FEE                     _EUSART1_Initialize:
 12224                           	opt stack 27
 12225                           
 12226                           ;eusart1.c: 80: PIE1bits.RC1IE = 0;
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;incstack = 0
 12230  003FEE  9A9D               	bcf	3997,5,c	;volatile
 12231                           
 12232                           ;eusart1.c: 81: PIE1bits.TX1IE = 0;
 12233  003FF0  989D               	bcf	3997,4,c	;volatile
 12234                           
 12235                           ;eusart1.c: 85: BAUDCONbits.BRG16 = 1;
 12236  003FF2  86B8               	bsf	4024,3,c	;volatile
 12237                           
 12238                           ;eusart1.c: 87: RCSTAbits.SPEN = 1;
 12239  003FF4  8EAB               	bsf	4011,7,c	;volatile
 12240                           
 12241                           ;eusart1.c: 88: RCSTAbits.RX9 = 0;
 12242  003FF6  9CAB               	bcf	4011,6,c	;volatile
 12243                           
 12244                           ;eusart1.c: 89: RCSTAbits.CREN = 1;
 12245  003FF8  88AB               	bsf	4011,4,c	;volatile
 12246                           
 12247                           ;eusart1.c: 90: RCSTAbits.ADDEN = 0;
 12248  003FFA  96AB               	bcf	4011,3,c	;volatile
 12249                           
 12250                           ;eusart1.c: 92: TXSTAbits.TX9 = 0;
 12251  003FFC  9CAC               	bcf	4012,6,c	;volatile
 12252                           
 12253                           ;eusart1.c: 93: TXSTAbits.TXEN = 1;
 12254  003FFE  8AAC               	bsf	4012,5,c	;volatile
 12255                           
 12256                           ;eusart1.c: 94: TXSTAbits.SYNC = 0;
 12257  004000  98AC               	bcf	4012,4,c	;volatile
 12258                           
 12259                           ;eusart1.c: 95: TXSTAbits.SENDB = 0;
 12260  004002  96AC               	bcf	4012,3,c	;volatile
 12261                           
 12262                           ;eusart1.c: 96: TXSTAbits.BRGH = 1;
 12263  004004  84AC               	bsf	4012,2,c	;volatile
 12264                           
 12265                           ;eusart1.c: 97: TXSTAbits.TRMT = 1;
 12266  004006  82AC               	bsf	4012,1,c	;volatile
 12267                           
 12268                           ;eusart1.c: 98: TXSTAbits.TX9D = 0;
 12269  004008  90AC               	bcf	4012,0,c	;volatile
 12270                           
 12271                           ;eusart1.c: 100: unsigned int baud_rate;
 12272                           ;eusart1.c: 102: baud_rate = 417;
 12273  00400A  0E01               	movlw	1
 12274  00400C  6E14               	movwf	EUSART1_Initialize@baud_rate+1,c
 12275  00400E  0EA1               	movlw	161
 12276  004010  6E13               	movwf	EUSART1_Initialize@baud_rate,c
 12277                           
 12278                           ;eusart1.c: 104: SPBRGH = baud_rate >> 8;
 12279  004012  5014               	movf	EUSART1_Initialize@baud_rate+1,w,c
 12280  004014  6EB0               	movwf	4016,c	;volatile
 12281                           
 12282                           ;eusart1.c: 105: SPBRG = baud_rate;
 12283  004016  C013  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12284                           
 12285                           ;eusart1.c: 109: eusart1TxHead = 0;
 12286  00401A  0E00               	movlw	0
 12287  00401C  6E44               	movwf	_eusart1TxHead,c
 12288                           
 12289                           ;eusart1.c: 110: eusart1TxTail = 0;
 12290  00401E  0E00               	movlw	0
 12291  004020  6E43               	movwf	_eusart1TxTail,c
 12292                           
 12293                           ;eusart1.c: 111: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12294  004022  0E7E               	movlw	126
 12295  004024  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12296                           
 12297                           ;eusart1.c: 113: eusart1RxHead = 0;
 12298  004026  0E00               	movlw	0
 12299  004028  6E41               	movwf	_eusart1RxHead,c
 12300                           
 12301                           ;eusart1.c: 114: eusart1RxTail = 0;
 12302  00402A  0E00               	movlw	0
 12303  00402C  6E40               	movwf	_eusart1RxTail,c
 12304                           
 12305                           ;eusart1.c: 115: eusart1RxCount = 0;
 12306  00402E  0E00               	movlw	0
 12307  004030  6E3F               	movwf	_eusart1RxCount,c	;volatile
 12308                           
 12309                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
 12310  004032  8A9D               	bsf	3997,5,c	;volatile
 12311  004034  0012               	return		;funcret
 12312  004036                     __end_of_EUSART1_Initialize:
 12313                           	opt stack 0
 12314                           tblptru	equ	0xFF8
 12315                           tblptrh	equ	0xFF7
 12316                           tblptrl	equ	0xFF6
 12317                           tablat	equ	0xFF5
 12318                           prodh	equ	0xFF4
 12319                           prodl	equ	0xFF3
 12320                           intcon	equ	0xFF2
 12321                           intcon2	equ	0xFF1
 12322                           postinc0	equ	0xFEE
 12323                           wreg	equ	0xFE8
 12324                           postinc1	equ	0xFE6
 12325                           postdec1	equ	0xFE5
 12326                           fsr1h	equ	0xFE2
 12327                           fsr1l	equ	0xFE1
 12328                           indf2	equ	0xFDF
 12329                           postinc2	equ	0xFDE
 12330                           postdec2	equ	0xFDD
 12331                           fsr2h	equ	0xFDA
 12332                           fsr2l	equ	0xFD9
 12333                           status	equ	0xFD8
 12334                           
 12335 ;; *************** function _EEPROMxREAD *****************
 12336 ;; Defined at:
 12337 ;;		line 60 in file "../eeprom_settings.c"
 12338 ;; Parameters:    Size  Location     Type
 12339 ;;		None
 12340 ;; Auto vars:     Size  Location     Type
 12341 ;;  Data            2   30[COMRAM] unsigned int 
 12342 ;;  i               1   32[COMRAM] unsigned char 
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  2   26[COMRAM] unsigned int 
 12345 ;; Registers used:
 12346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : 0/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12352 ;;      Params:         2       0       0       0       0       0       0       0       0
 12353 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12354 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12355 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12356 ;;Total ram usage:        7 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:    4
 12359 ;; This function calls:
 12360 ;;		_Eeprom_Read
 12361 ;; This function is called by:
 12362 ;;		_main
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           	psect	text34
 12367  0038AC                     __ptext34:
 12368                           	opt stack 0
 12369  0038AC                     _EEPROMxREAD:
 12370                           	opt stack 26
 12371                           
 12372                           ;eeprom_settings.c: 62: unsigned char i = 0;
 12373                           
 12374                           ;incstack = 0
 12375  0038AC  0E00               	movlw	0
 12376  0038AE  6E21               	movwf	EEPROMxREAD@i,c
 12377                           
 12378                           ;eeprom_settings.c: 63: unsigned int Data = 0;
 12379  0038B0  0E00               	movlw	0
 12380  0038B2  6E20               	movwf	EEPROMxREAD@Data+1,c
 12381  0038B4  0E00               	movlw	0
 12382  0038B6  6E1F               	movwf	EEPROMxREAD@Data,c
 12383                           
 12384                           ;eeprom_settings.c: 68: if (!WriteActive){
 12385  0038B8  0100               	movlb	0	; () banked
 12386  0038BA  516A               	movf	_WriteActive& (0+255),w,b
 12387  0038BC  116B               	iorwf	(_WriteActive+1)& (0+255),w,b
 12388  0038BE  A4D8               	btfss	status,2,c
 12389  0038C0  D059               	goto	l751
 12390                           
 12391                           ; BSR set to: 0
 12392                           ;eeprom_settings.c: 69: ReadActive = 1;
 12393  0038C2  0E00               	movlw	0
 12394  0038C4  6F6D               	movwf	(_ReadActive+1)& (0+255),b
 12395  0038C6  0E01               	movlw	1
 12396  0038C8  6F6C               	movwf	_ReadActive& (0+255),b
 12397                           
 12398                           ;eeprom_settings.c: 70: INTCON = 0x00;
 12399  0038CA  0E00               	movlw	0
 12400  0038CC  6EF2               	movwf	intcon,c	;volatile
 12401                           
 12402                           ;eeprom_settings.c: 72: for(i = 0; i < 18; i++ )
 12403  0038CE  0E00               	movlw	0
 12404  0038D0  6E21               	movwf	EEPROMxREAD@i,c
 12405  0038D2                     l6060:
 12406                           
 12407                           ; BSR set to: 0
 12408  0038D2  0E11               	movlw	17
 12409  0038D4  6421               	cpfsgt	EEPROMxREAD@i,c
 12410  0038D6  D001               	goto	l752
 12411  0038D8  D041               	goto	u5420
 12412  0038DA                     l752:
 12413                           
 12414                           ;eeprom_settings.c: 73: {
 12415                           ;eeprom_settings.c: 74: Data = Eeprom_Read(i);
 12416                           
 12417                           ; BSR set to: 0
 12418  0038DA  C021  F013         	movff	EEPROMxREAD@i,Eeprom_Read@Location
 12419  0038DE  6A14               	clrf	Eeprom_Read@Location+1,c
 12420  0038E0  EC78  F01F         	call	_Eeprom_Read	;wreg free
 12421  0038E4  C013  F01F         	movff	?_Eeprom_Read,EEPROMxREAD@Data
 12422  0038E8  C014  F020         	movff	?_Eeprom_Read+1,EEPROMxREAD@Data+1
 12423                           
 12424                           ;eeprom_settings.c: 78: API[ApiList[i]] = Data;
 12425  0038EC  5021               	movf	EEPROMxREAD@i,w,c
 12426  0038EE  0D02               	mullw	2
 12427  0038F0  0E01               	movlw	low _ApiList
 12428  0038F2  24F3               	addwf	prodl,w,c
 12429  0038F4  6EF6               	movwf	tblptrl,c
 12430  0038F6  0E08               	movlw	high _ApiList
 12431  0038F8  20F4               	addwfc	prodh,w,c
 12432  0038FA  6EF7               	movwf	tblptrh,c
 12433  0038FC                     	if	0	;There are less than 3 active tblptr bytes
 12434  0038FC                     	endif
 12435  0038FC  0009               	tblrd		*+
 12436  0038FE  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12437  003902  0009               	tblrd		*+
 12438  003904  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12439  003908  90D8               	bcf	status,0,c
 12440  00390A  361D               	rlcf	??_EEPROMxREAD,f,c
 12441  00390C  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12442  00390E  0E00               	movlw	low _API
 12443  003910  241D               	addwf	??_EEPROMxREAD,w,c
 12444  003912  6ED9               	movwf	fsr2l,c
 12445  003914  0E01               	movlw	high _API
 12446  003916  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12447  003918  6EDA               	movwf	fsr2h,c
 12448  00391A  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12449  00391E  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12450                           
 12451                           ;eeprom_settings.c: 79: API_EEPROM[ApiList[i]] = Data;
 12452  003922  5021               	movf	EEPROMxREAD@i,w,c
 12453  003924  0D02               	mullw	2
 12454  003926  0E01               	movlw	low _ApiList
 12455  003928  24F3               	addwf	prodl,w,c
 12456  00392A  6EF6               	movwf	tblptrl,c
 12457  00392C  0E08               	movlw	high _ApiList
 12458  00392E  20F4               	addwfc	prodh,w,c
 12459  003930  6EF7               	movwf	tblptrh,c
 12460  003932                     	if	0	;There are less than 3 active tblptr bytes
 12461  003932                     	endif
 12462  003932  0009               	tblrd		*+
 12463  003934  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12464  003938  0009               	tblrd		*+
 12465  00393A  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12466  00393E  90D8               	bcf	status,0,c
 12467  003940  361D               	rlcf	??_EEPROMxREAD,f,c
 12468  003942  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12469  003944  0E00               	movlw	low _API_EEPROM
 12470  003946  241D               	addwf	??_EEPROMxREAD,w,c
 12471  003948  6ED9               	movwf	fsr2l,c
 12472  00394A  0E03               	movlw	high _API_EEPROM
 12473  00394C  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12474  00394E  6EDA               	movwf	fsr2h,c
 12475  003950  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12476  003954  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12477  003958  2A21               	incf	EEPROMxREAD@i,f,c
 12478  00395A  D7BB               	goto	l6060
 12479  00395C                     u5420:
 12480                           
 12481                           ;eeprom_settings.c: 81: }
 12482                           ;eeprom_settings.c: 83: INTCON = 0xA0;
 12483  00395C  0EA0               	movlw	160
 12484  00395E  6EF2               	movwf	intcon,c	;volatile
 12485                           
 12486                           ;eeprom_settings.c: 84: ReadActive = 0;
 12487  003960  0E00               	movlw	0
 12488  003962  0100               	movlb	0	; () banked
 12489  003964  6F6D               	movwf	(_ReadActive+1)& (0+255),b
 12490  003966  0E00               	movlw	0
 12491  003968  6F6C               	movwf	_ReadActive& (0+255),b
 12492                           
 12493                           ;eeprom_settings.c: 85: return (1);
 12494  00396A  0E00               	movlw	0
 12495  00396C  6E1C               	movwf	?_EEPROMxREAD+1,c
 12496  00396E  0E01               	movlw	1
 12497  003970  6E1B               	movwf	?_EEPROMxREAD,c
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;eeprom_settings.c: 86: }
 12501                           
 12502                           ; BSR set to: 0
 12503  003972  0012               	return	
 12504  003974                     l751:
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;eeprom_settings.c: 87: else{
 12508                           ;eeprom_settings.c: 88: return (0);
 12509                           
 12510                           ; BSR set to: 0
 12511  003974  0E00               	movlw	0
 12512  003976  6E1C               	movwf	?_EEPROMxREAD+1,c
 12513  003978  0E00               	movlw	0
 12514  00397A  6E1B               	movwf	?_EEPROMxREAD,c
 12515                           
 12516                           ; BSR set to: 0
 12517  00397C  0012               	return	
 12518  00397E                     __end_of_EEPROMxREAD:
 12519                           	opt stack 0
 12520                           tblptru	equ	0xFF8
 12521                           tblptrh	equ	0xFF7
 12522                           tblptrl	equ	0xFF6
 12523                           tablat	equ	0xFF5
 12524                           prodh	equ	0xFF4
 12525                           prodl	equ	0xFF3
 12526                           intcon	equ	0xFF2
 12527                           intcon2	equ	0xFF1
 12528                           postinc0	equ	0xFEE
 12529                           wreg	equ	0xFE8
 12530                           postinc1	equ	0xFE6
 12531                           postdec1	equ	0xFE5
 12532                           fsr1h	equ	0xFE2
 12533                           fsr1l	equ	0xFE1
 12534                           indf2	equ	0xFDF
 12535                           postinc2	equ	0xFDE
 12536                           postdec2	equ	0xFDD
 12537                           fsr2h	equ	0xFDA
 12538                           fsr2l	equ	0xFD9
 12539                           status	equ	0xFD8
 12540                           
 12541 ;; *************** function _Eeprom_Read *****************
 12542 ;; Defined at:
 12543 ;;		line 107 in file "../eeprom_settings.c"
 12544 ;; Parameters:    Size  Location     Type
 12545 ;;  Location        2   18[COMRAM] unsigned int 
 12546 ;; Auto vars:     Size  Location     Type
 12547 ;;  Return_Data     2   24[COMRAM] unsigned int 
 12548 ;;  Location_Hig    2   22[COMRAM] unsigned int 
 12549 ;;  Location_Low    2   20[COMRAM] unsigned int 
 12550 ;; Return value:  Size  Location     Type
 12551 ;;                  2   18[COMRAM] unsigned int 
 12552 ;; Registers used:
 12553 ;;		wreg, status,2, status,0
 12554 ;; Tracked objects:
 12555 ;;		On entry : 0/0
 12556 ;;		On exit  : 0/0
 12557 ;;		Unchanged: 0/0
 12558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12559 ;;      Params:         2       0       0       0       0       0       0       0       0
 12560 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12561 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12562 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12563 ;;Total ram usage:        8 bytes
 12564 ;; Hardware stack levels used:    1
 12565 ;; Hardware stack levels required when called:    3
 12566 ;; This function calls:
 12567 ;;		Nothing
 12568 ;; This function is called by:
 12569 ;;		_EEPROMxREAD
 12570 ;; This function uses a non-reentrant model
 12571 ;;
 12572                           
 12573                           	psect	text35
 12574  003EF0                     __ptext35:
 12575                           	opt stack 0
 12576  003EF0                     _Eeprom_Read:
 12577                           	opt stack 26
 12578                           
 12579                           ;eeprom_settings.c: 109: unsigned int Location_High_Byte = Location * 2;
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;incstack = 0
 12583  003EF0  90D8               	bcf	status,0,c
 12584  003EF2  3413               	rlcf	Eeprom_Read@Location,w,c
 12585  003EF4  6E17               	movwf	Eeprom_Read@Location_High_Byte,c
 12586  003EF6  3414               	rlcf	Eeprom_Read@Location+1,w,c
 12587  003EF8  6E18               	movwf	Eeprom_Read@Location_High_Byte+1,c
 12588                           
 12589                           ;eeprom_settings.c: 110: unsigned int Location_Low_Byte = Location_High_Byte + 1;
 12590  003EFA  0E01               	movlw	1
 12591  003EFC  2417               	addwf	Eeprom_Read@Location_High_Byte,w,c
 12592  003EFE  6E15               	movwf	Eeprom_Read@Location_Low_Byte,c
 12593  003F00  0E00               	movlw	0
 12594  003F02  2018               	addwfc	Eeprom_Read@Location_High_Byte+1,w,c
 12595  003F04  6E16               	movwf	Eeprom_Read@Location_Low_Byte+1,c
 12596                           
 12597                           ;eeprom_settings.c: 111: unsigned int Return_Data = 0;
 12598  003F06  0E00               	movlw	0
 12599  003F08  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12600  003F0A  0E00               	movlw	0
 12601  003F0C  6E19               	movwf	Eeprom_Read@Return_Data,c
 12602                           
 12603                           ;eeprom_settings.c: 115: EECON1bits.EEPGD = 0;
 12604  003F0E  9EA6               	bcf	4006,7,c	;volsfr
 12605                           
 12606                           ;eeprom_settings.c: 116: EECON1bits.CFGS = 0;
 12607  003F10  9CA6               	bcf	4006,6,c	;volsfr
 12608                           
 12609                           ;eeprom_settings.c: 117: EEADR = Location_High_Byte;
 12610  003F12  C017  FFA9         	movff	Eeprom_Read@Location_High_Byte,4009	;volatile
 12611                           
 12612                           ;eeprom_settings.c: 118: EECON1bits.RD = 1;
 12613  003F16  80A6               	bsf	4006,0,c	;volsfr
 12614  003F18  B0A6               	btfsc	4006,0,c	;volsfr
 12615  003F1A  D7FE               	goto	l759
 12616                           
 12617                           ;eeprom_settings.c: 120: Return_Data = EEDATA;
 12618  003F1C  CFA8 F019          	movff	4008,Eeprom_Read@Return_Data	;volatile
 12619  003F20  6A1A               	clrf	Eeprom_Read@Return_Data+1,c
 12620                           
 12621                           ;eeprom_settings.c: 121: Return_Data = Return_Data << 8;
 12622  003F22  5019               	movf	Eeprom_Read@Return_Data,w,c
 12623  003F24  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12624  003F26  6A19               	clrf	Eeprom_Read@Return_Data,c
 12625                           
 12626                           ;eeprom_settings.c: 126: EECON1bits.EEPGD = 0;
 12627  003F28  9EA6               	bcf	4006,7,c	;volsfr
 12628                           
 12629                           ;eeprom_settings.c: 127: EECON1bits.CFGS = 0;
 12630  003F2A  9CA6               	bcf	4006,6,c	;volsfr
 12631                           
 12632                           ;eeprom_settings.c: 128: EEADR = Location_Low_Byte;
 12633  003F2C  C015  FFA9         	movff	Eeprom_Read@Location_Low_Byte,4009	;volatile
 12634                           
 12635                           ;eeprom_settings.c: 129: EECON1bits.RD = 1;
 12636  003F30  80A6               	bsf	4006,0,c	;volsfr
 12637  003F32  B0A6               	btfsc	4006,0,c	;volsfr
 12638  003F34  D7FE               	goto	l762
 12639                           
 12640                           ;eeprom_settings.c: 131: Return_Data = Return_Data | EEDATA;
 12641  003F36  5019               	movf	Eeprom_Read@Return_Data,w,c
 12642  003F38  10A8               	iorwf	4008,w,c	;volatile
 12643  003F3A  6E19               	movwf	Eeprom_Read@Return_Data,c
 12644  003F3C  501A               	movf	Eeprom_Read@Return_Data+1,w,c
 12645  003F3E  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12646                           
 12647                           ;eeprom_settings.c: 136: EEADR = 0xFF;
 12648  003F40  68A9               	setf	4009,c	;volatile
 12649                           
 12650                           ;eeprom_settings.c: 140: return (Return_Data);
 12651  003F42  C019  F013         	movff	Eeprom_Read@Return_Data,?_Eeprom_Read
 12652  003F46  C01A  F014         	movff	Eeprom_Read@Return_Data+1,?_Eeprom_Read+1
 12653  003F4A  0012               	return	
 12654  003F4C                     __end_of_Eeprom_Read:
 12655                           	opt stack 0
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           intcon2	equ	0xFF1
 12664                           postinc0	equ	0xFEE
 12665                           wreg	equ	0xFE8
 12666                           postinc1	equ	0xFE6
 12667                           postdec1	equ	0xFE5
 12668                           fsr1h	equ	0xFE2
 12669                           fsr1l	equ	0xFE1
 12670                           indf2	equ	0xFDF
 12671                           postinc2	equ	0xFDE
 12672                           postdec2	equ	0xFDD
 12673                           fsr2h	equ	0xFDA
 12674                           fsr2l	equ	0xFD9
 12675                           status	equ	0xFD8
 12676                           
 12677 ;; *************** function _DIAGNOSTICxTOxPC *****************
 12678 ;; Defined at:
 12679 ;;		line 213 in file "../terminal.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;		None
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;		None
 12684 ;; Return value:  Size  Location     Type
 12685 ;;                  1    wreg      void 
 12686 ;; Registers used:
 12687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12693 ;;      Params:         0       0       0       0       0       0       0       0       0
 12694 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12695 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12696 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12697 ;;Total ram usage:        4 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; Hardware stack levels required when called:    6
 12700 ;; This function calls:
 12701 ;;		_SendMessage
 12702 ;; This function is called by:
 12703 ;;		_main
 12704 ;; This function uses a non-reentrant model
 12705 ;;
 12706                           
 12707                           	psect	text36
 12708  003BA2                     __ptext36:
 12709                           	opt stack 0
 12710  003BA2                     _DIAGNOSTICxTOxPC:
 12711                           	opt stack 24
 12712                           
 12713                           ;terminal.c: 215: if (DelayCounter > 5000){
 12714                           
 12715                           ;incstack = 0
 12716  003BA2  0E89               	movlw	137
 12717  003BA4  0100               	movlb	0	; () banked
 12718  003BA6  5D6E               	subwf	_DelayCounter& (0+255),w,b
 12719  003BA8  0E13               	movlw	19
 12720  003BAA  596F               	subwfb	(_DelayCounter+1)& (0+255),w,b
 12721  003BAC  A0D8               	btfss	status,0,c
 12722  003BAE  D047               	goto	l672
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;terminal.c: 216: DelayCounter = 1;
 12726  003BB0  0E00               	movlw	0
 12727  003BB2  6F6F               	movwf	(_DelayCounter+1)& (0+255),b
 12728  003BB4  0E01               	movlw	1
 12729  003BB6  6F6E               	movwf	_DelayCounter& (0+255),b
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;terminal.c: 218: if (WritePointer != ReadPointer){
 12733  003BB8  5170               	movf	_ReadPointer& (0+255),w,b
 12734  003BBA  1972               	xorwf	_WritePointer& (0+255),w,b
 12735  003BBC  E104               	bnz	u9650
 12736  003BBE  5171               	movf	(_ReadPointer+1)& (0+255),w,b
 12737  003BC0  1973               	xorwf	(_WritePointer+1)& (0+255),w,b
 12738  003BC2  B4D8               	btfsc	status,2,c
 12739  003BC4  0012               	return	
 12740  003BC6                     u9650:
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;terminal.c: 220: SendMessage(Comm_List[ReadPointer][0], Comm_List[ReadPointer][1]);
 12744  003BC6  0EFC               	movlw	low _Comm_List
 12745  003BC8  6E20               	movwf	??_DIAGNOSTICxTOxPC& (0+255),c
 12746  003BCA  0E04               	movlw	high _Comm_List
 12747  003BCC  6E21               	movwf	(??_DIAGNOSTICxTOxPC+1)& (0+255),c
 12748  003BCE  90D8               	bcf	status,0,c
 12749  003BD0  3570               	rlcf	_ReadPointer& (0+255),w,b
 12750  003BD2  6ED9               	movwf	fsr2l,c
 12751  003BD4  3571               	rlcf	(_ReadPointer+1)& (0+255),w,b
 12752  003BD6  6EDA               	movwf	fsr2h,c
 12753  003BD8  90D8               	bcf	status,0,c
 12754  003BDA  36D9               	rlcf	fsr2l,f,c
 12755  003BDC  36DA               	rlcf	fsr2h,f,c
 12756  003BDE  5020               	movf	??_DIAGNOSTICxTOxPC,w,c
 12757  003BE0  26D9               	addwf	fsr2l,f,c
 12758  003BE2  5021               	movf	??_DIAGNOSTICxTOxPC+1,w,c
 12759  003BE4  22DA               	addwfc	fsr2h,f,c
 12760  003BE6  CFDE F0BC          	movff	postinc2,SendMessage@index
 12761  003BEA  CFDD F0BD          	movff	postdec2,SendMessage@index+1
 12762  003BEE  C070  F022         	movff	_ReadPointer,??_DIAGNOSTICxTOxPC+2
 12763  003BF2  C071  F023         	movff	_ReadPointer+1,??_DIAGNOSTICxTOxPC+3
 12764  003BF6  90D8               	bcf	status,0,c
 12765  003BF8  3622               	rlcf	??_DIAGNOSTICxTOxPC+2,f,c
 12766  003BFA  3623               	rlcf	??_DIAGNOSTICxTOxPC+3,f,c
 12767  003BFC  90D8               	bcf	status,0,c
 12768  003BFE  3622               	rlcf	??_DIAGNOSTICxTOxPC+2,f,c
 12769  003C00  3623               	rlcf	??_DIAGNOSTICxTOxPC+3,f,c
 12770  003C02  0E02               	movlw	2
 12771  003C04  2622               	addwf	??_DIAGNOSTICxTOxPC+2,f,c
 12772  003C06  0E00               	movlw	0
 12773  003C08  2223               	addwfc	??_DIAGNOSTICxTOxPC+3,f,c
 12774  003C0A  0EFC               	movlw	low _Comm_List
 12775  003C0C  2422               	addwf	??_DIAGNOSTICxTOxPC+2,w,c
 12776  003C0E  6ED9               	movwf	fsr2l,c
 12777  003C10  0E04               	movlw	high _Comm_List
 12778  003C12  2023               	addwfc	??_DIAGNOSTICxTOxPC+3,w,c
 12779  003C14  6EDA               	movwf	fsr2h,c
 12780  003C16  CFDE F0BE          	movff	postinc2,SendMessage@value
 12781  003C1A  CFDD F0BF          	movff	postdec2,SendMessage@value+1
 12782  003C1E  ECF7  F020         	call	_SendMessage	;wreg free
 12783                           
 12784                           ;terminal.c: 221: ReadPointer++;
 12785  003C22  0100               	movlb	0	; () banked
 12786  003C24  4B70               	infsnz	_ReadPointer& (0+255),f,b
 12787  003C26  2B71               	incf	(_ReadPointer+1)& (0+255),f,b
 12788                           
 12789                           ; BSR set to: 0
 12790                           ;terminal.c: 223: if (ReadPointer > 189){
 12791  003C28  5171               	movf	(_ReadPointer+1)& (0+255),w,b
 12792  003C2A  E104               	bnz	u9660
 12793  003C2C  0EBE               	movlw	190
 12794  003C2E  5D70               	subwf	_ReadPointer& (0+255),w,b
 12795  003C30  A0D8               	btfss	status,0,c
 12796  003C32  0012               	return	
 12797  003C34                     u9660:
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;terminal.c: 224: ReadPointer = 0;
 12801  003C34  0E00               	movlw	0
 12802  003C36  6F71               	movwf	(_ReadPointer+1)& (0+255),b
 12803  003C38  0E00               	movlw	0
 12804  003C3A  6F70               	movwf	_ReadPointer& (0+255),b
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;terminal.c: 225: }
 12808                           ;terminal.c: 226: }
 12809                           ;terminal.c: 227: }
 12810                           
 12811                           ; BSR set to: 0
 12812  003C3C  0012               	return	
 12813  003C3E                     l672:
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;terminal.c: 228: else{
 12817                           ;terminal.c: 229: DelayCounter++;
 12818                           
 12819                           ; BSR set to: 0
 12820  003C3E  4B6E               	infsnz	_DelayCounter& (0+255),f,b
 12821  003C40  2B6F               	incf	(_DelayCounter+1)& (0+255),f,b
 12822  003C42  0012               	return	
 12823  003C44                     __end_of_DIAGNOSTICxTOxPC:
 12824                           	opt stack 0
 12825                           tblptru	equ	0xFF8
 12826                           tblptrh	equ	0xFF7
 12827                           tblptrl	equ	0xFF6
 12828                           tablat	equ	0xFF5
 12829                           prodh	equ	0xFF4
 12830                           prodl	equ	0xFF3
 12831                           intcon	equ	0xFF2
 12832                           intcon2	equ	0xFF1
 12833                           postinc0	equ	0xFEE
 12834                           wreg	equ	0xFE8
 12835                           postinc1	equ	0xFE6
 12836                           postdec1	equ	0xFE5
 12837                           fsr1h	equ	0xFE2
 12838                           fsr1l	equ	0xFE1
 12839                           indf2	equ	0xFDF
 12840                           postinc2	equ	0xFDE
 12841                           postdec2	equ	0xFDD
 12842                           fsr2h	equ	0xFDA
 12843                           fsr2l	equ	0xFD9
 12844                           status	equ	0xFD8
 12845                           
 12846 ;; *************** function _SendMessage *****************
 12847 ;; Defined at:
 12848 ;;		line 191 in file "../terminal.c"
 12849 ;; Parameters:    Size  Location     Type
 12850 ;;  index           2   34[BANK0 ] unsigned int 
 12851 ;;  value           2   36[BANK0 ] unsigned int 
 12852 ;; Auto vars:     Size  Location     Type
 12853 ;;		None
 12854 ;; Return value:  Size  Location     Type
 12855 ;;                  1    wreg      void 
 12856 ;; Registers used:
 12857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12858 ;; Tracked objects:
 12859 ;;		On entry : 0/0
 12860 ;;		On exit  : 0/0
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12863 ;;      Params:         0       4       0       0       0       0       0       0       0
 12864 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12865 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12866 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12867 ;;Total ram usage:        4 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; Hardware stack levels required when called:    5
 12870 ;; This function calls:
 12871 ;;		_printf
 12872 ;; This function is called by:
 12873 ;;		_DIAGNOSTICxTOxPC
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           	psect	text37
 12878  0041EE                     __ptext37:
 12879                           	opt stack 0
 12880  0041EE                     _SendMessage:
 12881                           	opt stack 24
 12882                           
 12883                           ;terminal.c: 197: printf("M#%d %d\r\n", index, value);
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;incstack = 0
 12887  0041EE  0E30               	movlw	low STR_8
 12888  0041F0  0100               	movlb	0	; () banked
 12889  0041F2  6FAF               	movwf	printf@f& (0+255),b
 12890  0041F4  0E08               	movlw	high STR_8
 12891  0041F6  6FB0               	movwf	(printf@f+1)& (0+255),b
 12892  0041F8  C0BC  F0B1         	movff	SendMessage@index,?_printf+2
 12893  0041FC  C0BD  F0B2         	movff	SendMessage@index+1,?_printf+3
 12894  004200  C0BE  F0B3         	movff	SendMessage@value,?_printf+4
 12895  004204  C0BF  F0B4         	movff	SendMessage@value+1,?_printf+5
 12896  004208  ECAB  F018         	call	_printf	;wreg free
 12897  00420C  0012               	return		;funcret
 12898  00420E                     __end_of_SendMessage:
 12899                           	opt stack 0
 12900                           tblptru	equ	0xFF8
 12901                           tblptrh	equ	0xFF7
 12902                           tblptrl	equ	0xFF6
 12903                           tablat	equ	0xFF5
 12904                           prodh	equ	0xFF4
 12905                           prodl	equ	0xFF3
 12906                           intcon	equ	0xFF2
 12907                           intcon2	equ	0xFF1
 12908                           postinc0	equ	0xFEE
 12909                           wreg	equ	0xFE8
 12910                           postinc1	equ	0xFE6
 12911                           postdec1	equ	0xFE5
 12912                           fsr1h	equ	0xFE2
 12913                           fsr1l	equ	0xFE1
 12914                           indf2	equ	0xFDF
 12915                           postinc2	equ	0xFDE
 12916                           postdec2	equ	0xFDD
 12917                           fsr2h	equ	0xFDA
 12918                           fsr2l	equ	0xFD9
 12919                           status	equ	0xFD8
 12920                           
 12921 ;; *************** function _printf *****************
 12922 ;; Defined at:
 12923 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 12924 ;; Parameters:    Size  Location     Type
 12925 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 12926 ;;		 -> STR_8(10), STR_7(7), STR_6(7), STR_5(7), 
 12927 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;  tmpval          4    0        struct .
 12930 ;;  cp              3    0        PTR const unsigned char 
 12931 ;;  val             2   31[BANK0 ] unsigned int 
 12932 ;;  ap              2   27[BANK0 ] PTR void [1]
 12933 ;;		 -> ?_printf(2), 
 12934 ;;  len             2    0        unsigned int 
 12935 ;;  c               1   33[BANK0 ] char 
 12936 ;;  prec            1   30[BANK0 ] char 
 12937 ;;  flag            1   29[BANK0 ] unsigned char 
 12938 ;; Return value:  Size  Location     Type
 12939 ;;                  2   21[BANK0 ] int 
 12940 ;; Registers used:
 12941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12942 ;; Tracked objects:
 12943 ;;		On entry : 0/0
 12944 ;;		On exit  : 0/0
 12945 ;;		Unchanged: 0/0
 12946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12947 ;;      Params:         0       6       0       0       0       0       0       0       0
 12948 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12949 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12950 ;;      Totals:         1      13       0       0       0       0       0       0       0
 12951 ;;Total ram usage:       14 bytes
 12952 ;; Hardware stack levels used:    1
 12953 ;; Hardware stack levels required when called:    4
 12954 ;; This function calls:
 12955 ;;		___lwdiv
 12956 ;;		___lwmod
 12957 ;;		_putch
 12958 ;; This function is called by:
 12959 ;;		_READxRECEIVEDxMESSAGE
 12960 ;;		_TranslateMessage
 12961 ;;		_SendMessage
 12962 ;; This function uses a non-reentrant model
 12963 ;;
 12964                           
 12965                           	psect	text38
 12966  003156                     __ptext38:
 12967                           	opt stack 0
 12968  003156                     _printf:
 12969                           	opt stack 25
 12970                           
 12971                           ;doprnt.c: 466: va_list ap;
 12972                           ;doprnt.c: 499: signed char c;
 12973                           ;doprnt.c: 506: signed char prec;
 12974                           ;doprnt.c: 508: unsigned char flag;
 12975                           ;doprnt.c: 523: union {
 12976                           ;doprnt.c: 524: unsigned long vd;
 12977                           ;doprnt.c: 525: double integ;
 12978                           ;doprnt.c: 526: } tmpval;
 12979                           ;doprnt.c: 528: unsigned int val;
 12980                           ;doprnt.c: 529: unsigned len;
 12981                           ;doprnt.c: 530: const char * cp;
 12982                           ;doprnt.c: 533: *ap = __va_start();
 12983                           
 12984                           ;incstack = 0
 12985  003156  0EB1               	movlw	low (?_printf+2)
 12986  003158  0100               	movlb	0	; () banked
 12987  00315A  6FB5               	movwf	printf@ap& (0+255),b
 12988  00315C  0E00               	movlw	high (?_printf+2)
 12989  00315E  6FB6               	movwf	(printf@ap+1)& (0+255),b
 12990                           
 12991                           ;doprnt.c: 536: while(c = *f++) {
 12992  003160  D081               	goto	u7330
 12993  003162                     
 12994                           ; BSR set to: 0
 12995                           ;doprnt.c: 538: if(c != '%')
 12996                           
 12997                           ; BSR set to: 0
 12998  003162  0E25               	movlw	37
 12999  003164  19BB               	xorwf	printf@c& (0+255),w,b
 13000  003166  B4D8               	btfsc	status,2,c
 13001  003168  D004               	goto	l1278
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;doprnt.c: 540: {
 13005                           ;doprnt.c: 541: (putch(c) );
 13006  00316A  51BB               	movf	printf@c& (0+255),w,b
 13007  00316C  EC3E  F021         	call	_putch
 13008                           
 13009                           ;doprnt.c: 542: continue;
 13010  003170  D079               	goto	u7330
 13011  003172                     l1278:
 13012                           
 13013                           ;doprnt.c: 543: }
 13014                           ;doprnt.c: 548: flag = 0;
 13015  003172  0E00               	movlw	0
 13016  003174  0100               	movlb	0	; () banked
 13017  003176  6FB7               	movwf	printf@flag& (0+255),b
 13018                           
 13019                           ; BSR set to: 0
 13020                           
 13021                           ; BSR set to: 0
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;doprnt.c: 822: }
 13025                           
 13026                           ; BSR set to: 0
 13027                           ;doprnt.c: 813: continue;
 13028                           
 13029                           ;doprnt.c: 802: default:
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;doprnt.c: 698: case 'i':
 13033                           ;doprnt.c: 699: break;
 13034                           
 13035                           ; BSR set to: 0
 13036                           
 13037                           ;doprnt.c: 697: case 'd':
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;doprnt.c: 638: goto alldone;
 13041                           
 13042                           ;doprnt.c: 637: case 0:
 13043                           
 13044                           ;doprnt.c: 635: switch(c = *f++) {
 13045  003178  C0AF  FFF6         	movff	printf@f,tblptrl
 13046  00317C  C0B0  FFF7         	movff	printf@f+1,tblptrh
 13047  003180  4BAF               	infsnz	printf@f& (0+255),f,b
 13048  003182  2BB0               	incf	(printf@f+1)& (0+255),f,b
 13049  003184                     	if	0	;tblptru may be non-zero
 13050  003184                     	endif
 13051  003184                     	if	0	;tblptru may be non-zero
 13052  003184                     	endif
 13053  003184  0008               	tblrd		*
 13054  003186  CFF5 F0BB          	movff	tablat,printf@c
 13055  00318A  51BB               	movf	printf@c& (0+255),w,b
 13056                           
 13057                           ; Switch size 1, requested type "space"
 13058                           ; Number of cases is 3, Range of values is 0 to 105
 13059                           ; switch strategies available:
 13060                           ; Name         Instructions Cycles
 13061                           ; simple_byte           10     6 (average)
 13062                           ;	Chosen strategy is simple_byte
 13063  00318C  0A00               	xorlw	0	; case 0
 13064  00318E  B4D8               	btfsc	status,2,c
 13065  003190  0012               	return	
 13066  003192  0A64               	xorlw	100	; case 100
 13067  003194  B4D8               	btfsc	status,2,c
 13068  003196  D003               	goto	l1284
 13069  003198  0A0D               	xorlw	13	; case 105
 13070  00319A  A4D8               	btfss	status,2,c
 13071  00319C  D063               	goto	u7330
 13072  00319E                     l1284:
 13073                           
 13074                           ; BSR set to: 0
 13075                           ;doprnt.c: 1253: {
 13076                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13077                           
 13078                           ; BSR set to: 0
 13079  00319E  C0B5  FFD9         	movff	printf@ap,fsr2l
 13080  0031A2  C0B6  FFDA         	movff	printf@ap+1,fsr2h
 13081  0031A6  CFDE F0B9          	movff	postinc2,printf@val
 13082  0031AA  CFDD F0BA          	movff	postdec2,printf@val+1
 13083                           
 13084                           ; BSR set to: 0
 13085  0031AE  0E02               	movlw	2
 13086  0031B0  27B5               	addwf	printf@ap& (0+255),f,b
 13087  0031B2  0E00               	movlw	0
 13088  0031B4  23B6               	addwfc	(printf@ap+1)& (0+255),f,b
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;doprnt.c: 1261: if((int)val < 0) {
 13092  0031B6  AFBA               	btfss	(printf@val+1)& (0+255),7,b
 13093  0031B8  D006               	goto	l1286
 13094                           
 13095                           ; BSR set to: 0
 13096                           ;doprnt.c: 1262: flag |= 0x03;
 13097  0031BA  0E03               	movlw	3
 13098  0031BC  13B7               	iorwf	printf@flag& (0+255),f,b
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;doprnt.c: 1263: val = -val;
 13102  0031BE  6DB9               	negf	printf@val& (0+255),b
 13103  0031C0  1FBA               	comf	(printf@val+1)& (0+255),f,b
 13104  0031C2  B0D8               	btfsc	status,0,c
 13105  0031C4  2BBA               	incf	(printf@val+1)& (0+255),f,b
 13106  0031C6                     l1286:
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;doprnt.c: 1264: }
 13110                           ;doprnt.c: 1266: }
 13111                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13112                           
 13113                           ; BSR set to: 0
 13114  0031C6  0E01               	movlw	1
 13115  0031C8  6FBB               	movwf	printf@c& (0+255),b
 13116  0031CA                     l7864:
 13117                           
 13118                           ; BSR set to: 0
 13119  0031CA  0E05               	movlw	5
 13120  0031CC  19BB               	xorwf	printf@c& (0+255),w,b
 13121  0031CE  B4D8               	btfsc	status,2,c
 13122  0031D0  D012               	goto	u7310
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;doprnt.c: 1306: if(val < dpowers[c])
 13126                           
 13127                           ; BSR set to: 0
 13128                           
 13129                           ; BSR set to: 0
 13130  0031D2  51BB               	movf	printf@c& (0+255),w,b
 13131  0031D4  0D02               	mullw	2
 13132  0031D6  0E25               	movlw	low _dpowers
 13133  0031D8  24F3               	addwf	prodl,w,c
 13134  0031DA  6EF6               	movwf	tblptrl,c
 13135  0031DC  0E08               	movlw	high _dpowers
 13136  0031DE  20F4               	addwfc	prodh,w,c
 13137  0031E0  6EF7               	movwf	tblptrh,c
 13138  0031E2                     	if	0	;There are less than 3 active tblptr bytes
 13139  0031E2                     	endif
 13140  0031E2  0009               	tblrd		*+
 13141  0031E4  50F5               	movf	tablat,w,c
 13142  0031E6  5DB9               	subwf	printf@val& (0+255),w,b
 13143  0031E8  0009               	tblrd		*+
 13144  0031EA  50F5               	movf	tablat,w,c
 13145  0031EC  59BA               	subwfb	(printf@val+1)& (0+255),w,b
 13146  0031EE  A0D8               	btfss	status,0,c
 13147  0031F0  D002               	goto	u7310
 13148                           
 13149                           ; BSR set to: 0
 13150                           
 13151                           ; BSR set to: 0
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;doprnt.c: 1307: break;
 13155  0031F2  2BBB               	incf	printf@c& (0+255),f,b
 13156  0031F4  D7EA               	goto	l7864
 13157  0031F6                     u7310:
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;doprnt.c: 1422: {
 13161                           ;doprnt.c: 1438: if(flag & 0x03)
 13162                           
 13163                           ; BSR set to: 0
 13164  0031F6  C0B7  F01F         	movff	printf@flag,??_printf
 13165  0031FA  0E03               	movlw	3
 13166  0031FC  161F               	andwf	??_printf,f,c
 13167  0031FE  B4D8               	btfsc	status,2,c
 13168  003200  D003               	goto	l1290
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;doprnt.c: 1439: (putch('-') );
 13172  003202  0E2D               	movlw	45
 13173  003204  EC3E  F021         	call	_putch
 13174  003208                     l1290:
 13175                           
 13176                           ;doprnt.c: 1469: }
 13177                           ;doprnt.c: 1472: prec = c;
 13178  003208  C0BB  F0B8         	movff	printf@c,printf@prec
 13179                           
 13180                           ;doprnt.c: 1474: while(prec--) {
 13181  00320C  D026               	goto	l1291
 13182  00320E                     
 13183                           ;doprnt.c: 1478: {
 13184                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13185  00320E  0100               	movlb	0	; () banked
 13186  003210  51B8               	movf	printf@prec& (0+255),w,b
 13187  003212  0D02               	mullw	2
 13188  003214  0E25               	movlw	low _dpowers
 13189  003216  24F3               	addwf	prodl,w,c
 13190  003218  6EF6               	movwf	tblptrl,c
 13191  00321A  0E08               	movlw	high _dpowers
 13192  00321C  20F4               	addwfc	prodh,w,c
 13193  00321E  6EF7               	movwf	tblptrh,c
 13194  003220                     	if	0	;There are less than 3 active tblptr bytes
 13195  003220                     	endif
 13196  003220  0009               	tblrd		*+
 13197  003222  CFF5 F015          	movff	tablat,___lwdiv@divisor
 13198  003226  000A               	tblrd		*-
 13199  003228  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
 13200  00322C  C0B9  F013         	movff	printf@val,___lwdiv@dividend
 13201  003230  C0BA  F014         	movff	printf@val+1,___lwdiv@dividend+1
 13202  003234  ECA6  F01F         	call	___lwdiv	;wreg free
 13203  003238  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
 13204  00323C  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
 13205  003240  0E00               	movlw	0
 13206  003242  6E1D               	movwf	___lwmod@divisor+1,c
 13207  003244  0E0A               	movlw	10
 13208  003246  6E1C               	movwf	___lwmod@divisor,c
 13209  003248  EC1B  F020         	call	___lwmod	;wreg free
 13210  00324C  501A               	movf	?___lwmod,w,c
 13211  00324E  0F30               	addlw	48
 13212  003250  0100               	movlb	0	; () banked
 13213  003252  6FBB               	movwf	printf@c& (0+255),b
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;doprnt.c: 1523: }
 13217                           ;doprnt.c: 1524: (putch(c) );
 13218  003254  51BB               	movf	printf@c& (0+255),w,b
 13219  003256  EC3E  F021         	call	_putch
 13220  00325A                     l1291:
 13221  00325A  0100               	movlb	0	; () banked
 13222  00325C  07B8               	decf	printf@prec& (0+255),f,b
 13223  00325E  29B8               	incf	printf@prec& (0+255),w,b
 13224  003260  A4D8               	btfss	status,2,c
 13225  003262  D7D5               	goto	l1292
 13226  003264                     u7330:
 13227                           
 13228                           ; BSR set to: 0
 13229                           
 13230                           ; BSR set to: 0
 13231  003264  C0AF  FFF6         	movff	printf@f,tblptrl
 13232  003268  C0B0  FFF7         	movff	printf@f+1,tblptrh
 13233  00326C  0100               	movlb	0	; () banked
 13234  00326E  4BAF               	infsnz	printf@f& (0+255),f,b
 13235  003270  2BB0               	incf	(printf@f+1)& (0+255),f,b
 13236  003272                     	if	0	;tblptru may be non-zero
 13237  003272                     	endif
 13238  003272                     	if	0	;tblptru may be non-zero
 13239  003272                     	endif
 13240  003272  0008               	tblrd		*
 13241  003274  CFF5 F0BB          	movff	tablat,printf@c
 13242  003278  51BB               	movf	printf@c& (0+255),w,b
 13243  00327A  B4D8               	btfsc	status,2,c
 13244  00327C  0012               	return	
 13245  00327E  D771               	goto	l1277
 13246  003280                     __end_of_printf:
 13247                           	opt stack 0
 13248                           tblptru	equ	0xFF8
 13249                           tblptrh	equ	0xFF7
 13250                           tblptrl	equ	0xFF6
 13251                           tablat	equ	0xFF5
 13252                           prodh	equ	0xFF4
 13253                           prodl	equ	0xFF3
 13254                           intcon	equ	0xFF2
 13255                           intcon2	equ	0xFF1
 13256                           postinc0	equ	0xFEE
 13257                           wreg	equ	0xFE8
 13258                           postinc1	equ	0xFE6
 13259                           postdec1	equ	0xFE5
 13260                           fsr1h	equ	0xFE2
 13261                           fsr1l	equ	0xFE1
 13262                           indf2	equ	0xFDF
 13263                           postinc2	equ	0xFDE
 13264                           postdec2	equ	0xFDD
 13265                           fsr2h	equ	0xFDA
 13266                           fsr2l	equ	0xFD9
 13267                           status	equ	0xFD8
 13268                           
 13269 ;; *************** function _putch *****************
 13270 ;; Defined at:
 13271 ;;		line 178 in file "../eusart1.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;  data            1    wreg     unsigned char 
 13274 ;; Auto vars:     Size  Location     Type
 13275 ;;  data            1   18[COMRAM] unsigned char 
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  1    wreg      void 
 13278 ;; Registers used:
 13279 ;;		wreg
 13280 ;; Tracked objects:
 13281 ;;		On entry : 0/0
 13282 ;;		On exit  : 0/0
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13285 ;;      Params:         0       0       0       0       0       0       0       0       0
 13286 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13287 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13288 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13289 ;;Total ram usage:        1 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    3
 13292 ;; This function calls:
 13293 ;;		Nothing
 13294 ;; This function is called by:
 13295 ;;		_printf
 13296 ;; This function uses a non-reentrant model
 13297 ;;
 13298                           
 13299                           	psect	text39
 13300  00427C                     __ptext39:
 13301                           	opt stack 0
 13302  00427C                     _putch:
 13303                           	opt stack 25
 13304                           
 13305                           ; BSR set to: 0
 13306                           ;incstack = 0
 13307                           ;putch@data stored from wreg
 13308  00427C  6E13               	movwf	putch@data,c
 13309  00427E                     
 13310                           ;eusart1.c: 180: continue;
 13311                           
 13312                           ;eusart1.c: 179: while(! TXIF)
 13313  00427E  A89E               	btfss	3998,4,c	;volatile
 13314  004280  D7FE               	goto	l7300
 13315                           
 13316                           ;eusart1.c: 181: TXREG1 = data;
 13317  004282  C013  FFAD         	movff	putch@data,4013	;volatile
 13318  004286  0012               	return		;funcret
 13319  004288                     __end_of_putch:
 13320                           	opt stack 0
 13321                           tblptru	equ	0xFF8
 13322                           tblptrh	equ	0xFF7
 13323                           tblptrl	equ	0xFF6
 13324                           tablat	equ	0xFF5
 13325                           prodh	equ	0xFF4
 13326                           prodl	equ	0xFF3
 13327                           intcon	equ	0xFF2
 13328                           intcon2	equ	0xFF1
 13329                           postinc0	equ	0xFEE
 13330                           wreg	equ	0xFE8
 13331                           postinc1	equ	0xFE6
 13332                           postdec1	equ	0xFE5
 13333                           fsr1h	equ	0xFE2
 13334                           fsr1l	equ	0xFE1
 13335                           indf2	equ	0xFDF
 13336                           postinc2	equ	0xFDE
 13337                           postdec2	equ	0xFDD
 13338                           fsr2h	equ	0xFDA
 13339                           fsr2l	equ	0xFD9
 13340                           status	equ	0xFD8
 13341                           
 13342 ;; *************** function ___lwmod *****************
 13343 ;; Defined at:
 13344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13345 ;; Parameters:    Size  Location     Type
 13346 ;;  dividend        2   25[COMRAM] unsigned int 
 13347 ;;  divisor         2   27[COMRAM] unsigned int 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  counter         1   29[COMRAM] unsigned char 
 13350 ;; Return value:  Size  Location     Type
 13351 ;;                  2   25[COMRAM] unsigned int 
 13352 ;; Registers used:
 13353 ;;		wreg, status,2, status,0
 13354 ;; Tracked objects:
 13355 ;;		On entry : 0/0
 13356 ;;		On exit  : 0/0
 13357 ;;		Unchanged: 0/0
 13358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13359 ;;      Params:         4       0       0       0       0       0       0       0       0
 13360 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13361 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13362 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13363 ;;Total ram usage:        5 bytes
 13364 ;; Hardware stack levels used:    1
 13365 ;; Hardware stack levels required when called:    3
 13366 ;; This function calls:
 13367 ;;		Nothing
 13368 ;; This function is called by:
 13369 ;;		_printf
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           	psect	text40
 13374  004036                     __ptext40:
 13375                           	opt stack 0
 13376  004036                     ___lwmod:
 13377                           	opt stack 25
 13378                           
 13379                           ;incstack = 0
 13380  004036  501C               	movf	___lwmod@divisor,w,c
 13381  004038  101D               	iorwf	___lwmod@divisor+1,w,c
 13382  00403A  B4D8               	btfsc	status,2,c
 13383  00403C  D018               	goto	l1741
 13384  00403E  0E01               	movlw	1
 13385  004040  6E1E               	movwf	___lwmod@counter,c
 13386  004042  D004               	goto	l1736
 13387  004044  90D8               	bcf	status,0,c
 13388  004046  361C               	rlcf	___lwmod@divisor,f,c
 13389  004048  361D               	rlcf	___lwmod@divisor+1,f,c
 13390  00404A  2A1E               	incf	___lwmod@counter,f,c
 13391  00404C                     l1736:
 13392  00404C  AE1D               	btfss	___lwmod@divisor+1,7,c
 13393  00404E  D7FA               	goto	l1737
 13394  004050                     u6750:
 13395  004050  501C               	movf	___lwmod@divisor,w,c
 13396  004052  5C1A               	subwf	___lwmod@dividend,w,c
 13397  004054  501D               	movf	___lwmod@divisor+1,w,c
 13398  004056  581B               	subwfb	___lwmod@dividend+1,w,c
 13399  004058  A0D8               	btfss	status,0,c
 13400  00405A  D004               	goto	l1740
 13401  00405C  501C               	movf	___lwmod@divisor,w,c
 13402  00405E  5E1A               	subwf	___lwmod@dividend,f,c
 13403  004060  501D               	movf	___lwmod@divisor+1,w,c
 13404  004062  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13405  004064                     l1740:
 13406  004064  90D8               	bcf	status,0,c
 13407  004066  321D               	rrcf	___lwmod@divisor+1,f,c
 13408  004068  321C               	rrcf	___lwmod@divisor,f,c
 13409  00406A  2E1E               	decfsz	___lwmod@counter,f,c
 13410  00406C  D7F1               	goto	u6750
 13411  00406E                     l1741:
 13412  00406E  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13413  004072  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13414  004076  0012               	return		;funcret
 13415  004078                     __end_of___lwmod:
 13416                           	opt stack 0
 13417                           tblptru	equ	0xFF8
 13418                           tblptrh	equ	0xFF7
 13419                           tblptrl	equ	0xFF6
 13420                           tablat	equ	0xFF5
 13421                           prodh	equ	0xFF4
 13422                           prodl	equ	0xFF3
 13423                           intcon	equ	0xFF2
 13424                           intcon2	equ	0xFF1
 13425                           postinc0	equ	0xFEE
 13426                           wreg	equ	0xFE8
 13427                           postinc1	equ	0xFE6
 13428                           postdec1	equ	0xFE5
 13429                           fsr1h	equ	0xFE2
 13430                           fsr1l	equ	0xFE1
 13431                           indf2	equ	0xFDF
 13432                           postinc2	equ	0xFDE
 13433                           postdec2	equ	0xFDD
 13434                           fsr2h	equ	0xFDA
 13435                           fsr2l	equ	0xFD9
 13436                           status	equ	0xFD8
 13437                           
 13438 ;; *************** function ___lwdiv *****************
 13439 ;; Defined at:
 13440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13441 ;; Parameters:    Size  Location     Type
 13442 ;;  dividend        2   18[COMRAM] unsigned int 
 13443 ;;  divisor         2   20[COMRAM] unsigned int 
 13444 ;; Auto vars:     Size  Location     Type
 13445 ;;  quotient        2   23[COMRAM] unsigned int 
 13446 ;;  counter         1   22[COMRAM] unsigned char 
 13447 ;; Return value:  Size  Location     Type
 13448 ;;                  2   18[COMRAM] unsigned int 
 13449 ;; Registers used:
 13450 ;;		wreg, status,2, status,0
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13456 ;;      Params:         4       0       0       0       0       0       0       0       0
 13457 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13458 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13459 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13460 ;;Total ram usage:        7 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; Hardware stack levels required when called:    3
 13463 ;; This function calls:
 13464 ;;		Nothing
 13465 ;; This function is called by:
 13466 ;;		_printf
 13467 ;; This function uses a non-reentrant model
 13468 ;;
 13469                           
 13470                           	psect	text41
 13471  003F4C                     __ptext41:
 13472                           	opt stack 0
 13473  003F4C                     ___lwdiv:
 13474                           	opt stack 25
 13475                           
 13476                           ;incstack = 0
 13477  003F4C  0E00               	movlw	0
 13478  003F4E  6E19               	movwf	___lwdiv@quotient+1,c
 13479  003F50  0E00               	movlw	0
 13480  003F52  6E18               	movwf	___lwdiv@quotient,c
 13481  003F54  5015               	movf	___lwdiv@divisor,w,c
 13482  003F56  1016               	iorwf	___lwdiv@divisor+1,w,c
 13483  003F58  B4D8               	btfsc	status,2,c
 13484  003F5A  D01C               	goto	l1731
 13485  003F5C  0E01               	movlw	1
 13486  003F5E  6E17               	movwf	___lwdiv@counter,c
 13487  003F60  D004               	goto	l1726
 13488  003F62  90D8               	bcf	status,0,c
 13489  003F64  3615               	rlcf	___lwdiv@divisor,f,c
 13490  003F66  3616               	rlcf	___lwdiv@divisor+1,f,c
 13491  003F68  2A17               	incf	___lwdiv@counter,f,c
 13492  003F6A                     l1726:
 13493  003F6A  AE16               	btfss	___lwdiv@divisor+1,7,c
 13494  003F6C  D7FA               	goto	l1727
 13495  003F6E                     u6720:
 13496  003F6E  90D8               	bcf	status,0,c
 13497  003F70  3618               	rlcf	___lwdiv@quotient,f,c
 13498  003F72  3619               	rlcf	___lwdiv@quotient+1,f,c
 13499  003F74  5015               	movf	___lwdiv@divisor,w,c
 13500  003F76  5C13               	subwf	___lwdiv@dividend,w,c
 13501  003F78  5016               	movf	___lwdiv@divisor+1,w,c
 13502  003F7A  5814               	subwfb	___lwdiv@dividend+1,w,c
 13503  003F7C  A0D8               	btfss	status,0,c
 13504  003F7E  D005               	goto	l1730
 13505  003F80  5015               	movf	___lwdiv@divisor,w,c
 13506  003F82  5E13               	subwf	___lwdiv@dividend,f,c
 13507  003F84  5016               	movf	___lwdiv@divisor+1,w,c
 13508  003F86  5A14               	subwfb	___lwdiv@dividend+1,f,c
 13509  003F88  8018               	bsf	___lwdiv@quotient,0,c
 13510  003F8A                     l1730:
 13511  003F8A  90D8               	bcf	status,0,c
 13512  003F8C  3216               	rrcf	___lwdiv@divisor+1,f,c
 13513  003F8E  3215               	rrcf	___lwdiv@divisor,f,c
 13514  003F90  2E17               	decfsz	___lwdiv@counter,f,c
 13515  003F92  D7ED               	goto	u6720
 13516  003F94                     l1731:
 13517  003F94  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
 13518  003F98  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13519  003F9C  0012               	return		;funcret
 13520  003F9E                     __end_of___lwdiv:
 13521                           	opt stack 0
 13522                           tblptru	equ	0xFF8
 13523                           tblptrh	equ	0xFF7
 13524                           tblptrl	equ	0xFF6
 13525                           tablat	equ	0xFF5
 13526                           prodh	equ	0xFF4
 13527                           prodl	equ	0xFF3
 13528                           intcon	equ	0xFF2
 13529                           intcon2	equ	0xFF1
 13530                           postinc0	equ	0xFEE
 13531                           wreg	equ	0xFE8
 13532                           postinc1	equ	0xFE6
 13533                           postdec1	equ	0xFE5
 13534                           fsr1h	equ	0xFE2
 13535                           fsr1l	equ	0xFE1
 13536                           indf2	equ	0xFDF
 13537                           postinc2	equ	0xFDE
 13538                           postdec2	equ	0xFDD
 13539                           fsr2h	equ	0xFDA
 13540                           fsr2l	equ	0xFD9
 13541                           status	equ	0xFD8
 13542                           
 13543 ;; *************** function _APIxInitialize *****************
 13544 ;; Defined at:
 13545 ;;		line 33 in file "../api.c"
 13546 ;; Parameters:    Size  Location     Type
 13547 ;;		None
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;  i               2   18[COMRAM] unsigned int 
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  1    wreg      void 
 13552 ;; Registers used:
 13553 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13559 ;;      Params:         0       0       0       0       0       0       0       0       0
 13560 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13561 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13562 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13563 ;;Total ram usage:        2 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    3
 13566 ;; This function calls:
 13567 ;;		Nothing
 13568 ;; This function is called by:
 13569 ;;		_main
 13570 ;; This function uses a non-reentrant model
 13571 ;;
 13572                           
 13573                           	psect	text42
 13574  001EC8                     __ptext42:
 13575                           	opt stack 0
 13576  001EC8                     _APIxInitialize:
 13577                           	opt stack 27
 13578                           
 13579                           ;api.c: 35: unsigned int i;
 13580                           ;api.c: 36: for(i = 0; i < (91); i++ )
 13581                           
 13582                           ;incstack = 0
 13583  001EC8  0E00               	movlw	0
 13584  001ECA  6E14               	movwf	APIxInitialize@i+1,c
 13585  001ECC  0E00               	movlw	0
 13586  001ECE  6E13               	movwf	APIxInitialize@i,c
 13587  001ED0                     l6042:
 13588  001ED0  5014               	movf	APIxInitialize@i+1,w,c
 13589  001ED2  E12E               	bnz	l6052
 13590  001ED4  0E5B               	movlw	91
 13591  001ED6  5C13               	subwf	APIxInitialize@i,w,c
 13592  001ED8  B0D8               	btfsc	status,0,c
 13593  001EDA  D02A               	goto	u5390
 13594                           
 13595                           ;api.c: 37: {
 13596                           ;api.c: 38: API_RW[i] = 0;
 13597  001EDC  90D8               	bcf	status,0,c
 13598  001EDE  3413               	rlcf	APIxInitialize@i,w,c
 13599  001EE0  6ED9               	movwf	fsr2l,c
 13600  001EE2  3414               	rlcf	APIxInitialize@i+1,w,c
 13601  001EE4  6EDA               	movwf	fsr2h,c
 13602  001EE6  0E00               	movlw	low _API_RW
 13603  001EE8  26D9               	addwf	fsr2l,f,c
 13604  001EEA  0E02               	movlw	high _API_RW
 13605  001EEC  22DA               	addwfc	fsr2h,f,c
 13606  001EEE  0E00               	movlw	0
 13607  001EF0  6EDE               	movwf	postinc2,c
 13608  001EF2  0E00               	movlw	0
 13609  001EF4  6EDD               	movwf	postdec2,c
 13610                           
 13611                           ;api.c: 39: API[i] = 0;
 13612  001EF6  90D8               	bcf	status,0,c
 13613  001EF8  3413               	rlcf	APIxInitialize@i,w,c
 13614  001EFA  6ED9               	movwf	fsr2l,c
 13615  001EFC  3414               	rlcf	APIxInitialize@i+1,w,c
 13616  001EFE  6EDA               	movwf	fsr2h,c
 13617  001F00  0E00               	movlw	low _API
 13618  001F02  26D9               	addwf	fsr2l,f,c
 13619  001F04  0E01               	movlw	high _API
 13620  001F06  22DA               	addwfc	fsr2h,f,c
 13621  001F08  0E00               	movlw	0
 13622  001F0A  6EDE               	movwf	postinc2,c
 13623  001F0C  0E00               	movlw	0
 13624  001F0E  6EDD               	movwf	postdec2,c
 13625                           
 13626                           ;api.c: 40: API_EEPROM[i] = 0xFFFF;
 13627  001F10  90D8               	bcf	status,0,c
 13628  001F12  3413               	rlcf	APIxInitialize@i,w,c
 13629  001F14  6ED9               	movwf	fsr2l,c
 13630  001F16  3414               	rlcf	APIxInitialize@i+1,w,c
 13631  001F18  6EDA               	movwf	fsr2h,c
 13632  001F1A  0E00               	movlw	low _API_EEPROM
 13633  001F1C  26D9               	addwf	fsr2l,f,c
 13634  001F1E  0E03               	movlw	high _API_EEPROM
 13635  001F20  22DA               	addwfc	fsr2h,f,c
 13636  001F22  0EFF               	movlw	255
 13637  001F24  6EDE               	movwf	postinc2,c
 13638  001F26  0EFF               	movlw	255
 13639  001F28  6EDD               	movwf	postdec2,c
 13640  001F2A  4A13               	infsnz	APIxInitialize@i,f,c
 13641  001F2C  2A14               	incf	APIxInitialize@i+1,f,c
 13642  001F2E  D7D0               	goto	l6042
 13643  001F30                     u5390:
 13644  001F30                     l6052:
 13645                           
 13646                           ;api.c: 41: }
 13647                           ;api.c: 44: API_RW[16] = 0;
 13648  001F30  0E00               	movlw	0
 13649  001F32  0102               	movlb	2	; () banked
 13650  001F34  6F21               	movwf	(_API_RW+33)& (0+255),b
 13651  001F36  0E00               	movlw	0
 13652  001F38  6F20               	movwf	(_API_RW+32)& (0+255),b
 13653                           
 13654                           ;api.c: 45: API_RW[17] = 0;
 13655  001F3A  0E00               	movlw	0
 13656  001F3C  6F23               	movwf	(_API_RW+35)& (0+255),b
 13657  001F3E  0E00               	movlw	0
 13658  001F40  6F22               	movwf	(_API_RW+34)& (0+255),b
 13659                           
 13660                           ;api.c: 46: API_RW[18] = 1;
 13661  001F42  0E00               	movlw	0
 13662  001F44  6F25               	movwf	(_API_RW+37)& (0+255),b
 13663  001F46  0E01               	movlw	1
 13664  001F48  6F24               	movwf	(_API_RW+36)& (0+255),b
 13665                           
 13666                           ;api.c: 47: API_RW[19] = 1;
 13667  001F4A  0E00               	movlw	0
 13668  001F4C  6F27               	movwf	(_API_RW+39)& (0+255),b
 13669  001F4E  0E01               	movlw	1
 13670  001F50  6F26               	movwf	(_API_RW+38)& (0+255),b
 13671                           
 13672                           ;api.c: 48: API_RW[20] = 1;
 13673  001F52  0E00               	movlw	0
 13674  001F54  6F29               	movwf	(_API_RW+41)& (0+255),b
 13675  001F56  0E01               	movlw	1
 13676  001F58  6F28               	movwf	(_API_RW+40)& (0+255),b
 13677                           
 13678                           ;api.c: 49: API_RW[21] = 1;
 13679  001F5A  0E00               	movlw	0
 13680  001F5C  6F2B               	movwf	(_API_RW+43)& (0+255),b
 13681  001F5E  0E01               	movlw	1
 13682  001F60  6F2A               	movwf	(_API_RW+42)& (0+255),b
 13683                           
 13684                           ;api.c: 50: API_RW[22] = 1;
 13685  001F62  0E00               	movlw	0
 13686  001F64  6F2D               	movwf	(_API_RW+45)& (0+255),b
 13687  001F66  0E01               	movlw	1
 13688  001F68  6F2C               	movwf	(_API_RW+44)& (0+255),b
 13689                           
 13690                           ;api.c: 51: API_RW[23] = 1;
 13691  001F6A  0E00               	movlw	0
 13692  001F6C  6F2F               	movwf	(_API_RW+47)& (0+255),b
 13693  001F6E  0E01               	movlw	1
 13694  001F70  6F2E               	movwf	(_API_RW+46)& (0+255),b
 13695                           
 13696                           ;api.c: 52: API_RW[24] = 1;
 13697  001F72  0E00               	movlw	0
 13698  001F74  6F31               	movwf	(_API_RW+49)& (0+255),b
 13699  001F76  0E01               	movlw	1
 13700  001F78  6F30               	movwf	(_API_RW+48)& (0+255),b
 13701                           
 13702                           ;api.c: 53: API_RW[25] = 1;
 13703  001F7A  0E00               	movlw	0
 13704  001F7C  6F33               	movwf	(_API_RW+51)& (0+255),b
 13705  001F7E  0E01               	movlw	1
 13706  001F80  6F32               	movwf	(_API_RW+50)& (0+255),b
 13707                           
 13708                           ;api.c: 54: API_RW[26] = 1;
 13709  001F82  0E00               	movlw	0
 13710  001F84  6F35               	movwf	(_API_RW+53)& (0+255),b
 13711  001F86  0E01               	movlw	1
 13712  001F88  6F34               	movwf	(_API_RW+52)& (0+255),b
 13713                           
 13714                           ;api.c: 55: API_RW[27] = 1;
 13715  001F8A  0E00               	movlw	0
 13716  001F8C  6F37               	movwf	(_API_RW+55)& (0+255),b
 13717  001F8E  0E01               	movlw	1
 13718  001F90  6F36               	movwf	(_API_RW+54)& (0+255),b
 13719                           
 13720                           ;api.c: 56: API_RW[28] = 0;
 13721  001F92  0E00               	movlw	0
 13722  001F94  6F39               	movwf	(_API_RW+57)& (0+255),b
 13723  001F96  0E00               	movlw	0
 13724  001F98  6F38               	movwf	(_API_RW+56)& (0+255),b
 13725                           
 13726                           ;api.c: 57: API_RW[29] = 0;
 13727  001F9A  0E00               	movlw	0
 13728  001F9C  6F3B               	movwf	(_API_RW+59)& (0+255),b
 13729  001F9E  0E00               	movlw	0
 13730  001FA0  6F3A               	movwf	(_API_RW+58)& (0+255),b
 13731                           
 13732                           ;api.c: 58: API_RW[30] = 0;
 13733  001FA2  0E00               	movlw	0
 13734  001FA4  6F3D               	movwf	(_API_RW+61)& (0+255),b
 13735  001FA6  0E00               	movlw	0
 13736  001FA8  6F3C               	movwf	(_API_RW+60)& (0+255),b
 13737                           
 13738                           ;api.c: 59: API_RW[31] = 0;
 13739  001FAA  0E00               	movlw	0
 13740  001FAC  6F3F               	movwf	(_API_RW+63)& (0+255),b
 13741  001FAE  0E00               	movlw	0
 13742  001FB0  6F3E               	movwf	(_API_RW+62)& (0+255),b
 13743                           
 13744                           ;api.c: 60: API_RW[32] = 0;
 13745  001FB2  0E00               	movlw	0
 13746  001FB4  6F41               	movwf	(_API_RW+65)& (0+255),b
 13747  001FB6  0E00               	movlw	0
 13748  001FB8  6F40               	movwf	(_API_RW+64)& (0+255),b
 13749                           
 13750                           ;api.c: 61: API_RW[33] = 0;
 13751  001FBA  0E00               	movlw	0
 13752  001FBC  6F43               	movwf	(_API_RW+67)& (0+255),b
 13753  001FBE  0E00               	movlw	0
 13754  001FC0  6F42               	movwf	(_API_RW+66)& (0+255),b
 13755                           
 13756                           ;api.c: 62: API_RW[34] = 0;
 13757  001FC2  0E00               	movlw	0
 13758  001FC4  6F45               	movwf	(_API_RW+69)& (0+255),b
 13759  001FC6  0E00               	movlw	0
 13760  001FC8  6F44               	movwf	(_API_RW+68)& (0+255),b
 13761                           
 13762                           ;api.c: 63: API_RW[35] = 0;
 13763  001FCA  0E00               	movlw	0
 13764  001FCC  6F47               	movwf	(_API_RW+71)& (0+255),b
 13765  001FCE  0E00               	movlw	0
 13766  001FD0  6F46               	movwf	(_API_RW+70)& (0+255),b
 13767                           
 13768                           ;api.c: 64: API_RW[36] = 0;
 13769  001FD2  0E00               	movlw	0
 13770  001FD4  6F49               	movwf	(_API_RW+73)& (0+255),b
 13771  001FD6  0E00               	movlw	0
 13772  001FD8  6F48               	movwf	(_API_RW+72)& (0+255),b
 13773                           
 13774                           ;api.c: 65: API_RW[37] = 0;
 13775  001FDA  0E00               	movlw	0
 13776  001FDC  6F4B               	movwf	(_API_RW+75)& (0+255),b
 13777  001FDE  0E00               	movlw	0
 13778  001FE0  6F4A               	movwf	(_API_RW+74)& (0+255),b
 13779                           
 13780                           ;api.c: 66: API_RW[38] = 0;
 13781  001FE2  0E00               	movlw	0
 13782  001FE4  6F4D               	movwf	(_API_RW+77)& (0+255),b
 13783  001FE6  0E00               	movlw	0
 13784  001FE8  6F4C               	movwf	(_API_RW+76)& (0+255),b
 13785                           
 13786                           ;api.c: 67: API_RW[39] = 1;
 13787  001FEA  0E00               	movlw	0
 13788  001FEC  6F4F               	movwf	(_API_RW+79)& (0+255),b
 13789  001FEE  0E01               	movlw	1
 13790  001FF0  6F4E               	movwf	(_API_RW+78)& (0+255),b
 13791                           
 13792                           ;api.c: 68: API_RW[40] = 1;
 13793  001FF2  0E00               	movlw	0
 13794  001FF4  6F51               	movwf	(_API_RW+81)& (0+255),b
 13795  001FF6  0E01               	movlw	1
 13796  001FF8  6F50               	movwf	(_API_RW+80)& (0+255),b
 13797                           
 13798                           ;api.c: 69: API_RW[41] = 0;
 13799  001FFA  0E00               	movlw	0
 13800  001FFC  6F53               	movwf	(_API_RW+83)& (0+255),b
 13801  001FFE  0E00               	movlw	0
 13802  002000  6F52               	movwf	(_API_RW+82)& (0+255),b
 13803                           
 13804                           ;api.c: 70: API_RW[42] = 0;
 13805  002002  0E00               	movlw	0
 13806  002004  6F55               	movwf	(_API_RW+85)& (0+255),b
 13807  002006  0E00               	movlw	0
 13808  002008  6F54               	movwf	(_API_RW+84)& (0+255),b
 13809                           
 13810                           ;api.c: 71: API_RW[43] = 0;
 13811  00200A  0E00               	movlw	0
 13812  00200C  6F57               	movwf	(_API_RW+87)& (0+255),b
 13813  00200E  0E00               	movlw	0
 13814  002010  6F56               	movwf	(_API_RW+86)& (0+255),b
 13815                           
 13816                           ;api.c: 72: API_RW[44] = 0;
 13817  002012  0E00               	movlw	0
 13818  002014  6F59               	movwf	(_API_RW+89)& (0+255),b
 13819  002016  0E00               	movlw	0
 13820  002018  6F58               	movwf	(_API_RW+88)& (0+255),b
 13821                           
 13822                           ;api.c: 73: API_RW[45] = 1;
 13823  00201A  0E00               	movlw	0
 13824  00201C  6F5B               	movwf	(_API_RW+91)& (0+255),b
 13825  00201E  0E01               	movlw	1
 13826  002020  6F5A               	movwf	(_API_RW+90)& (0+255),b
 13827                           
 13828                           ;api.c: 74: API_RW[46] = 1;
 13829  002022  0E00               	movlw	0
 13830  002024  6F5D               	movwf	(_API_RW+93)& (0+255),b
 13831  002026  0E01               	movlw	1
 13832  002028  6F5C               	movwf	(_API_RW+92)& (0+255),b
 13833                           
 13834                           ;api.c: 75: API_RW[47] = 1;
 13835  00202A  0E00               	movlw	0
 13836  00202C  6F5F               	movwf	(_API_RW+95)& (0+255),b
 13837  00202E  0E01               	movlw	1
 13838  002030  6F5E               	movwf	(_API_RW+94)& (0+255),b
 13839                           
 13840                           ;api.c: 76: API_RW[48] = 1;
 13841  002032  0E00               	movlw	0
 13842  002034  6F61               	movwf	(_API_RW+97)& (0+255),b
 13843  002036  0E01               	movlw	1
 13844  002038  6F60               	movwf	(_API_RW+96)& (0+255),b
 13845                           
 13846                           ;api.c: 77: API_RW[49] = 1;
 13847  00203A  0E00               	movlw	0
 13848  00203C  6F63               	movwf	(_API_RW+99)& (0+255),b
 13849  00203E  0E01               	movlw	1
 13850  002040  6F62               	movwf	(_API_RW+98)& (0+255),b
 13851                           
 13852                           ;api.c: 78: API_RW[50] = 1;
 13853  002042  0E00               	movlw	0
 13854  002044  6F65               	movwf	(_API_RW+101)& (0+255),b
 13855  002046  0E01               	movlw	1
 13856  002048  6F64               	movwf	(_API_RW+100)& (0+255),b
 13857                           
 13858                           ;api.c: 79: API_RW[51] = 1;
 13859  00204A  0E00               	movlw	0
 13860  00204C  6F67               	movwf	(_API_RW+103)& (0+255),b
 13861  00204E  0E01               	movlw	1
 13862  002050  6F66               	movwf	(_API_RW+102)& (0+255),b
 13863                           
 13864                           ;api.c: 80: API_RW[52] = 1;
 13865  002052  0E00               	movlw	0
 13866  002054  6F69               	movwf	(_API_RW+105)& (0+255),b
 13867  002056  0E01               	movlw	1
 13868  002058  6F68               	movwf	(_API_RW+104)& (0+255),b
 13869                           
 13870                           ;api.c: 81: API_RW[53] = 1;
 13871  00205A  0E00               	movlw	0
 13872  00205C  6F6B               	movwf	(_API_RW+107)& (0+255),b
 13873  00205E  0E01               	movlw	1
 13874  002060  6F6A               	movwf	(_API_RW+106)& (0+255),b
 13875                           
 13876                           ;api.c: 82: API_RW[54] = 1;
 13877  002062  0E00               	movlw	0
 13878  002064  6F6D               	movwf	(_API_RW+109)& (0+255),b
 13879  002066  0E01               	movlw	1
 13880  002068  6F6C               	movwf	(_API_RW+108)& (0+255),b
 13881                           
 13882                           ;api.c: 83: API_RW[55] = 1;
 13883  00206A  0E00               	movlw	0
 13884  00206C  6F6F               	movwf	(_API_RW+111)& (0+255),b
 13885  00206E  0E01               	movlw	1
 13886  002070  6F6E               	movwf	(_API_RW+110)& (0+255),b
 13887                           
 13888                           ;api.c: 84: API_RW[56] = 1;
 13889  002072  0E00               	movlw	0
 13890  002074  6F71               	movwf	(_API_RW+113)& (0+255),b
 13891  002076  0E01               	movlw	1
 13892  002078  6F70               	movwf	(_API_RW+112)& (0+255),b
 13893                           
 13894                           ;api.c: 85: API_RW[57] = 1;
 13895  00207A  0E00               	movlw	0
 13896  00207C  6F73               	movwf	(_API_RW+115)& (0+255),b
 13897  00207E  0E01               	movlw	1
 13898  002080  6F72               	movwf	(_API_RW+114)& (0+255),b
 13899                           
 13900                           ;api.c: 86: API_RW[58] = 1;
 13901  002082  0E00               	movlw	0
 13902  002084  6F75               	movwf	(_API_RW+117)& (0+255),b
 13903  002086  0E01               	movlw	1
 13904  002088  6F74               	movwf	(_API_RW+116)& (0+255),b
 13905                           
 13906                           ;api.c: 87: API_RW[59] = 1;
 13907  00208A  0E00               	movlw	0
 13908  00208C  6F77               	movwf	(_API_RW+119)& (0+255),b
 13909  00208E  0E01               	movlw	1
 13910  002090  6F76               	movwf	(_API_RW+118)& (0+255),b
 13911                           
 13912                           ;api.c: 88: API_RW[60] = 1;
 13913  002092  0E00               	movlw	0
 13914  002094  6F79               	movwf	(_API_RW+121)& (0+255),b
 13915  002096  0E01               	movlw	1
 13916  002098  6F78               	movwf	(_API_RW+120)& (0+255),b
 13917                           
 13918                           ;api.c: 89: API_RW[61] = 0;
 13919  00209A  0E00               	movlw	0
 13920  00209C  6F7B               	movwf	(_API_RW+123)& (0+255),b
 13921  00209E  0E00               	movlw	0
 13922  0020A0  6F7A               	movwf	(_API_RW+122)& (0+255),b
 13923                           
 13924                           ;api.c: 90: API_RW[62] = 0;
 13925  0020A2  0E00               	movlw	0
 13926  0020A4  6F7D               	movwf	(_API_RW+125)& (0+255),b
 13927  0020A6  0E00               	movlw	0
 13928  0020A8  6F7C               	movwf	(_API_RW+124)& (0+255),b
 13929                           
 13930                           ;api.c: 91: API_RW[63] = 0;
 13931  0020AA  0E00               	movlw	0
 13932  0020AC  6F7F               	movwf	(_API_RW+127)& (0+255),b
 13933  0020AE  0E00               	movlw	0
 13934  0020B0  6F7E               	movwf	(_API_RW+126)& (0+255),b
 13935                           
 13936                           ;api.c: 92: API_RW[64] = 0;
 13937  0020B2  0E00               	movlw	0
 13938  0020B4  6F81               	movwf	(_API_RW+129)& (0+255),b
 13939  0020B6  0E00               	movlw	0
 13940  0020B8  6F80               	movwf	(_API_RW+128)& (0+255),b
 13941                           
 13942                           ;api.c: 93: API_RW[65] = 0;
 13943  0020BA  0E00               	movlw	0
 13944  0020BC  6F83               	movwf	(_API_RW+131)& (0+255),b
 13945  0020BE  0E00               	movlw	0
 13946  0020C0  6F82               	movwf	(_API_RW+130)& (0+255),b
 13947                           
 13948                           ;api.c: 94: API_RW[66] = 0;
 13949  0020C2  0E00               	movlw	0
 13950  0020C4  6F85               	movwf	(_API_RW+133)& (0+255),b
 13951  0020C6  0E00               	movlw	0
 13952  0020C8  6F84               	movwf	(_API_RW+132)& (0+255),b
 13953                           
 13954                           ;api.c: 95: API_RW[67] = 0;
 13955  0020CA  0E00               	movlw	0
 13956  0020CC  6F87               	movwf	(_API_RW+135)& (0+255),b
 13957  0020CE  0E00               	movlw	0
 13958  0020D0  6F86               	movwf	(_API_RW+134)& (0+255),b
 13959                           
 13960                           ;api.c: 96: API_RW[68] = 0;
 13961  0020D2  0E00               	movlw	0
 13962  0020D4  6F89               	movwf	(_API_RW+137)& (0+255),b
 13963  0020D6  0E00               	movlw	0
 13964  0020D8  6F88               	movwf	(_API_RW+136)& (0+255),b
 13965                           
 13966                           ;api.c: 97: API_RW[69] = 0;
 13967  0020DA  0E00               	movlw	0
 13968  0020DC  6F8B               	movwf	(_API_RW+139)& (0+255),b
 13969  0020DE  0E00               	movlw	0
 13970  0020E0  6F8A               	movwf	(_API_RW+138)& (0+255),b
 13971                           
 13972                           ;api.c: 98: API_RW[70] = 1;
 13973  0020E2  0E00               	movlw	0
 13974  0020E4  6F8D               	movwf	(_API_RW+141)& (0+255),b
 13975  0020E6  0E01               	movlw	1
 13976  0020E8  6F8C               	movwf	(_API_RW+140)& (0+255),b
 13977                           
 13978                           ;api.c: 99: API_RW[71] = 1;
 13979  0020EA  0E00               	movlw	0
 13980  0020EC  6F8F               	movwf	(_API_RW+143)& (0+255),b
 13981  0020EE  0E01               	movlw	1
 13982  0020F0  6F8E               	movwf	(_API_RW+142)& (0+255),b
 13983                           
 13984                           ;api.c: 100: API_RW[72] = 1;
 13985  0020F2  0E00               	movlw	0
 13986  0020F4  6F91               	movwf	(_API_RW+145)& (0+255),b
 13987  0020F6  0E01               	movlw	1
 13988  0020F8  6F90               	movwf	(_API_RW+144)& (0+255),b
 13989                           
 13990                           ;api.c: 101: API_RW[73] = 1;
 13991  0020FA  0E00               	movlw	0
 13992  0020FC  6F93               	movwf	(_API_RW+147)& (0+255),b
 13993  0020FE  0E01               	movlw	1
 13994  002100  6F92               	movwf	(_API_RW+146)& (0+255),b
 13995                           
 13996                           ;api.c: 102: API_RW[74] = 1;
 13997  002102  0E00               	movlw	0
 13998  002104  6F95               	movwf	(_API_RW+149)& (0+255),b
 13999  002106  0E01               	movlw	1
 14000  002108  6F94               	movwf	(_API_RW+148)& (0+255),b
 14001                           
 14002                           ;api.c: 103: API_RW[75] = 1;
 14003  00210A  0E00               	movlw	0
 14004  00210C  6F97               	movwf	(_API_RW+151)& (0+255),b
 14005  00210E  0E01               	movlw	1
 14006  002110  6F96               	movwf	(_API_RW+150)& (0+255),b
 14007                           
 14008                           ;api.c: 104: API_RW[76] = 1;
 14009  002112  0E00               	movlw	0
 14010  002114  6F99               	movwf	(_API_RW+153)& (0+255),b
 14011  002116  0E01               	movlw	1
 14012  002118  6F98               	movwf	(_API_RW+152)& (0+255),b
 14013                           
 14014                           ;api.c: 105: API_RW[77] = 1;
 14015  00211A  0E00               	movlw	0
 14016  00211C  6F9B               	movwf	(_API_RW+155)& (0+255),b
 14017  00211E  0E01               	movlw	1
 14018  002120  6F9A               	movwf	(_API_RW+154)& (0+255),b
 14019                           
 14020                           ;api.c: 106: API_RW[78] = 1;
 14021  002122  0E00               	movlw	0
 14022  002124  6F9D               	movwf	(_API_RW+157)& (0+255),b
 14023  002126  0E01               	movlw	1
 14024  002128  6F9C               	movwf	(_API_RW+156)& (0+255),b
 14025                           
 14026                           ;api.c: 107: API_RW[79] = 1;
 14027  00212A  0E00               	movlw	0
 14028  00212C  6F9F               	movwf	(_API_RW+159)& (0+255),b
 14029  00212E  0E01               	movlw	1
 14030  002130  6F9E               	movwf	(_API_RW+158)& (0+255),b
 14031                           
 14032                           ;api.c: 108: API_RW[80] = 0;
 14033  002132  0E00               	movlw	0
 14034  002134  6FA1               	movwf	(_API_RW+161)& (0+255),b
 14035  002136  0E00               	movlw	0
 14036  002138  6FA0               	movwf	(_API_RW+160)& (0+255),b
 14037                           
 14038                           ;api.c: 109: API_RW[81] = 1;
 14039  00213A  0E00               	movlw	0
 14040  00213C  6FA3               	movwf	(_API_RW+163)& (0+255),b
 14041  00213E  0E01               	movlw	1
 14042  002140  6FA2               	movwf	(_API_RW+162)& (0+255),b
 14043                           
 14044                           ;api.c: 110: API_RW[82] = 0;
 14045  002142  0E00               	movlw	0
 14046  002144  6FA5               	movwf	(_API_RW+165)& (0+255),b
 14047  002146  0E00               	movlw	0
 14048  002148  6FA4               	movwf	(_API_RW+164)& (0+255),b
 14049                           
 14050                           ;api.c: 111: API_RW[83] = 0;
 14051  00214A  0E00               	movlw	0
 14052  00214C  6FA7               	movwf	(_API_RW+167)& (0+255),b
 14053  00214E  0E00               	movlw	0
 14054  002150  6FA6               	movwf	(_API_RW+166)& (0+255),b
 14055                           
 14056                           ;api.c: 112: API_RW[84] = 0;
 14057  002152  0E00               	movlw	0
 14058  002154  6FA9               	movwf	(_API_RW+169)& (0+255),b
 14059  002156  0E00               	movlw	0
 14060  002158  6FA8               	movwf	(_API_RW+168)& (0+255),b
 14061                           
 14062                           ;api.c: 113: API_RW[85] = 0;
 14063  00215A  0E00               	movlw	0
 14064  00215C  6FAB               	movwf	(_API_RW+171)& (0+255),b
 14065  00215E  0E00               	movlw	0
 14066  002160  6FAA               	movwf	(_API_RW+170)& (0+255),b
 14067                           
 14068                           ;api.c: 114: API_RW[86] = 0;
 14069  002162  0E00               	movlw	0
 14070  002164  6FAD               	movwf	(_API_RW+173)& (0+255),b
 14071  002166  0E00               	movlw	0
 14072  002168  6FAC               	movwf	(_API_RW+172)& (0+255),b
 14073                           
 14074                           ;api.c: 115: API_RW[87] = 1;
 14075  00216A  0E00               	movlw	0
 14076  00216C  6FAF               	movwf	(_API_RW+175)& (0+255),b
 14077  00216E  0E01               	movlw	1
 14078  002170  6FAE               	movwf	(_API_RW+174)& (0+255),b
 14079                           
 14080                           ;api.c: 116: API_RW[88] = 0;
 14081  002172  0E00               	movlw	0
 14082  002174  6FB1               	movwf	(_API_RW+177)& (0+255),b
 14083  002176  0E00               	movlw	0
 14084  002178  6FB0               	movwf	(_API_RW+176)& (0+255),b
 14085                           
 14086                           ;api.c: 117: API_RW[89] = 0;
 14087  00217A  0E00               	movlw	0
 14088  00217C  6FB3               	movwf	(_API_RW+179)& (0+255),b
 14089  00217E  0E00               	movlw	0
 14090  002180  6FB2               	movwf	(_API_RW+178)& (0+255),b
 14091                           
 14092                           ;api.c: 118: API_RW[90] = 0;
 14093  002182  0E00               	movlw	0
 14094  002184  6FB5               	movwf	(_API_RW+181)& (0+255),b
 14095  002186  0E00               	movlw	0
 14096  002188  6FB4               	movwf	(_API_RW+180)& (0+255),b
 14097                           
 14098                           ;api.c: 121: API[16] = 91;
 14099  00218A  0E00               	movlw	0
 14100  00218C  0101               	movlb	1	; () banked
 14101  00218E  6F21               	movwf	(_API+33)& (0+255),b
 14102  002190  0E5B               	movlw	91
 14103  002192  6F20               	movwf	(_API+32)& (0+255),b
 14104                           
 14105                           ;api.c: 122: API[17] = 0;
 14106  002194  0E00               	movlw	0
 14107  002196  6F23               	movwf	(_API+35)& (0+255),b
 14108  002198  0E00               	movlw	0
 14109  00219A  6F22               	movwf	(_API+34)& (0+255),b
 14110                           
 14111                           ;api.c: 123: API[18] = 18587;
 14112  00219C  0E48               	movlw	72
 14113  00219E  6F25               	movwf	(_API+37)& (0+255),b
 14114  0021A0  0E9B               	movlw	155
 14115  0021A2  6F24               	movwf	(_API+36)& (0+255),b
 14116                           
 14117                           ;api.c: 124: API[19] = 800;
 14118  0021A4  0E03               	movlw	3
 14119  0021A6  6F27               	movwf	(_API+39)& (0+255),b
 14120  0021A8  0E20               	movlw	32
 14121  0021AA  6F26               	movwf	(_API+38)& (0+255),b
 14122                           
 14123                           ;api.c: 125: API[20] = 9294;
 14124  0021AC  0E24               	movlw	36
 14125  0021AE  6F29               	movwf	(_API+41)& (0+255),b
 14126  0021B0  0E4E               	movlw	78
 14127  0021B2  6F28               	movwf	(_API+40)& (0+255),b
 14128                           
 14129                           ;api.c: 126: API[21] = 20;
 14130  0021B4  0E00               	movlw	0
 14131  0021B6  6F2B               	movwf	(_API+43)& (0+255),b
 14132  0021B8  0E14               	movlw	20
 14133  0021BA  6F2A               	movwf	(_API+42)& (0+255),b
 14134                           
 14135                           ;api.c: 127: API[22] = 20;
 14136  0021BC  0E00               	movlw	0
 14137  0021BE  6F2D               	movwf	(_API+45)& (0+255),b
 14138  0021C0  0E14               	movlw	20
 14139  0021C2  6F2C               	movwf	(_API+44)& (0+255),b
 14140                           
 14141                           ;api.c: 128: API[23] = 200;
 14142  0021C4  0E00               	movlw	0
 14143  0021C6  6F2F               	movwf	(_API+47)& (0+255),b
 14144  0021C8  0EC8               	movlw	200
 14145  0021CA  6F2E               	movwf	(_API+46)& (0+255),b
 14146                           
 14147                           ;api.c: 129: API[24] = 200;
 14148  0021CC  0E00               	movlw	0
 14149  0021CE  6F31               	movwf	(_API+49)& (0+255),b
 14150  0021D0  0EC8               	movlw	200
 14151  0021D2  6F30               	movwf	(_API+48)& (0+255),b
 14152                           
 14153                           ;api.c: 130: API[25] = 80;
 14154  0021D4  0E00               	movlw	0
 14155  0021D6  6F33               	movwf	(_API+51)& (0+255),b
 14156  0021D8  0E50               	movlw	80
 14157  0021DA  6F32               	movwf	(_API+50)& (0+255),b
 14158                           
 14159                           ;api.c: 131: API[26] = 45;
 14160  0021DC  0E00               	movlw	0
 14161  0021DE  6F35               	movwf	(_API+53)& (0+255),b
 14162  0021E0  0E2D               	movlw	45
 14163  0021E2  6F34               	movwf	(_API+52)& (0+255),b
 14164                           
 14165                           ;api.c: 132: API[27] = 20;
 14166  0021E4  0E00               	movlw	0
 14167  0021E6  6F37               	movwf	(_API+55)& (0+255),b
 14168  0021E8  0E14               	movlw	20
 14169  0021EA  6F36               	movwf	(_API+54)& (0+255),b
 14170                           
 14171                           ;api.c: 133: API[28] = 0;
 14172  0021EC  0E00               	movlw	0
 14173  0021EE  6F39               	movwf	(_API+57)& (0+255),b
 14174  0021F0  0E00               	movlw	0
 14175  0021F2  6F38               	movwf	(_API+56)& (0+255),b
 14176                           
 14177                           ;api.c: 134: API[29] = 0;
 14178  0021F4  0E00               	movlw	0
 14179  0021F6  6F3B               	movwf	(_API+59)& (0+255),b
 14180  0021F8  0E00               	movlw	0
 14181  0021FA  6F3A               	movwf	(_API+58)& (0+255),b
 14182                           
 14183                           ;api.c: 135: API[30] = 0;
 14184  0021FC  0E00               	movlw	0
 14185  0021FE  6F3D               	movwf	(_API+61)& (0+255),b
 14186  002200  0E00               	movlw	0
 14187  002202  6F3C               	movwf	(_API+60)& (0+255),b
 14188                           
 14189                           ;api.c: 136: API[31] = 0;
 14190  002204  0E00               	movlw	0
 14191  002206  6F3F               	movwf	(_API+63)& (0+255),b
 14192  002208  0E00               	movlw	0
 14193  00220A  6F3E               	movwf	(_API+62)& (0+255),b
 14194                           
 14195                           ;api.c: 137: API[32] = 0;
 14196  00220C  0E00               	movlw	0
 14197  00220E  6F41               	movwf	(_API+65)& (0+255),b
 14198  002210  0E00               	movlw	0
 14199  002212  6F40               	movwf	(_API+64)& (0+255),b
 14200                           
 14201                           ;api.c: 138: API[33] = 0;
 14202  002214  0E00               	movlw	0
 14203  002216  6F43               	movwf	(_API+67)& (0+255),b
 14204  002218  0E00               	movlw	0
 14205  00221A  6F42               	movwf	(_API+66)& (0+255),b
 14206                           
 14207                           ;api.c: 139: API[34] = 0;
 14208  00221C  0E00               	movlw	0
 14209  00221E  6F45               	movwf	(_API+69)& (0+255),b
 14210  002220  0E00               	movlw	0
 14211  002222  6F44               	movwf	(_API+68)& (0+255),b
 14212                           
 14213                           ;api.c: 140: API[35] = 0;
 14214  002224  0E00               	movlw	0
 14215  002226  6F47               	movwf	(_API+71)& (0+255),b
 14216  002228  0E00               	movlw	0
 14217  00222A  6F46               	movwf	(_API+70)& (0+255),b
 14218                           
 14219                           ;api.c: 141: API[36] = 0;
 14220  00222C  0E00               	movlw	0
 14221  00222E  6F49               	movwf	(_API+73)& (0+255),b
 14222  002230  0E00               	movlw	0
 14223  002232  6F48               	movwf	(_API+72)& (0+255),b
 14224                           
 14225                           ;api.c: 142: API[37] = 0;
 14226  002234  0E00               	movlw	0
 14227  002236  6F4B               	movwf	(_API+75)& (0+255),b
 14228  002238  0E00               	movlw	0
 14229  00223A  6F4A               	movwf	(_API+74)& (0+255),b
 14230                           
 14231                           ;api.c: 143: API[38] = 0;
 14232  00223C  0E00               	movlw	0
 14233  00223E  6F4D               	movwf	(_API+77)& (0+255),b
 14234  002240  0E00               	movlw	0
 14235  002242  6F4C               	movwf	(_API+76)& (0+255),b
 14236                           
 14237                           ;api.c: 144: API[39] = 0;
 14238  002244  0E00               	movlw	0
 14239  002246  6F4F               	movwf	(_API+79)& (0+255),b
 14240  002248  0E00               	movlw	0
 14241  00224A  6F4E               	movwf	(_API+78)& (0+255),b
 14242                           
 14243                           ;api.c: 145: API[40] = 0;
 14244  00224C  0E00               	movlw	0
 14245  00224E  6F51               	movwf	(_API+81)& (0+255),b
 14246  002250  0E00               	movlw	0
 14247  002252  6F50               	movwf	(_API+80)& (0+255),b
 14248                           
 14249                           ;api.c: 146: API[41] = 0;
 14250  002254  0E00               	movlw	0
 14251  002256  6F53               	movwf	(_API+83)& (0+255),b
 14252  002258  0E00               	movlw	0
 14253  00225A  6F52               	movwf	(_API+82)& (0+255),b
 14254                           
 14255                           ;api.c: 147: API[42] = 0;
 14256  00225C  0E00               	movlw	0
 14257  00225E  6F55               	movwf	(_API+85)& (0+255),b
 14258  002260  0E00               	movlw	0
 14259  002262  6F54               	movwf	(_API+84)& (0+255),b
 14260                           
 14261                           ;api.c: 148: API[43] = 0;
 14262  002264  0E00               	movlw	0
 14263  002266  6F57               	movwf	(_API+87)& (0+255),b
 14264  002268  0E00               	movlw	0
 14265  00226A  6F56               	movwf	(_API+86)& (0+255),b
 14266                           
 14267                           ;api.c: 149: API[44] = 0;
 14268  00226C  0E00               	movlw	0
 14269  00226E  6F59               	movwf	(_API+89)& (0+255),b
 14270  002270  0E00               	movlw	0
 14271  002272  6F58               	movwf	(_API+88)& (0+255),b
 14272                           
 14273                           ;api.c: 150: API[45] = 0;
 14274  002274  0E00               	movlw	0
 14275  002276  6F5B               	movwf	(_API+91)& (0+255),b
 14276  002278  0E00               	movlw	0
 14277  00227A  6F5A               	movwf	(_API+90)& (0+255),b
 14278                           
 14279                           ;api.c: 151: API[46] = 150;
 14280  00227C  0E00               	movlw	0
 14281  00227E  6F5D               	movwf	(_API+93)& (0+255),b
 14282  002280  0E96               	movlw	150
 14283  002282  6F5C               	movwf	(_API+92)& (0+255),b
 14284                           
 14285                           ;api.c: 152: API[47] = 250;
 14286  002284  0E00               	movlw	0
 14287  002286  6F5F               	movwf	(_API+95)& (0+255),b
 14288  002288  0EFA               	movlw	250
 14289  00228A  6F5E               	movwf	(_API+94)& (0+255),b
 14290                           
 14291                           ;api.c: 153: API[48] = 0;
 14292  00228C  0E00               	movlw	0
 14293  00228E  6F61               	movwf	(_API+97)& (0+255),b
 14294  002290  0E00               	movlw	0
 14295  002292  6F60               	movwf	(_API+96)& (0+255),b
 14296                           
 14297                           ;api.c: 154: API[49] = 150;
 14298  002294  0E00               	movlw	0
 14299  002296  6F63               	movwf	(_API+99)& (0+255),b
 14300  002298  0E96               	movlw	150
 14301  00229A  6F62               	movwf	(_API+98)& (0+255),b
 14302                           
 14303                           ;api.c: 155: API[50] = 0;
 14304  00229C  0E00               	movlw	0
 14305  00229E  6F65               	movwf	(_API+101)& (0+255),b
 14306  0022A0  0E00               	movlw	0
 14307  0022A2  6F64               	movwf	(_API+100)& (0+255),b
 14308                           
 14309                           ;api.c: 156: API[51] = 0;
 14310  0022A4  0E00               	movlw	0
 14311  0022A6  6F67               	movwf	(_API+103)& (0+255),b
 14312  0022A8  0E00               	movlw	0
 14313  0022AA  6F66               	movwf	(_API+102)& (0+255),b
 14314                           
 14315                           ;api.c: 157: API[52] = 250;
 14316  0022AC  0E00               	movlw	0
 14317  0022AE  6F69               	movwf	(_API+105)& (0+255),b
 14318  0022B0  0EFA               	movlw	250
 14319  0022B2  6F68               	movwf	(_API+104)& (0+255),b
 14320                           
 14321                           ;api.c: 158: API[53] = 1859;
 14322  0022B4  0E07               	movlw	7
 14323  0022B6  6F6B               	movwf	(_API+107)& (0+255),b
 14324  0022B8  0E43               	movlw	67
 14325  0022BA  6F6A               	movwf	(_API+106)& (0+255),b
 14326                           
 14327                           ;api.c: 159: API[54] = 0;
 14328  0022BC  0E00               	movlw	0
 14329  0022BE  6F6D               	movwf	(_API+109)& (0+255),b
 14330  0022C0  0E00               	movlw	0
 14331  0022C2  6F6C               	movwf	(_API+108)& (0+255),b
 14332                           
 14333                           ;api.c: 160: API[55] = 0;
 14334  0022C4  0E00               	movlw	0
 14335  0022C6  6F6F               	movwf	(_API+111)& (0+255),b
 14336  0022C8  0E00               	movlw	0
 14337  0022CA  6F6E               	movwf	(_API+110)& (0+255),b
 14338                           
 14339                           ;api.c: 161: API[56] = 1859;
 14340  0022CC  0E07               	movlw	7
 14341  0022CE  6F71               	movwf	(_API+113)& (0+255),b
 14342  0022D0  0E43               	movlw	67
 14343  0022D2  6F70               	movwf	(_API+112)& (0+255),b
 14344                           
 14345                           ;api.c: 162: API[57] = 0;
 14346  0022D4  0E00               	movlw	0
 14347  0022D6  6F73               	movwf	(_API+115)& (0+255),b
 14348  0022D8  0E00               	movlw	0
 14349  0022DA  6F72               	movwf	(_API+114)& (0+255),b
 14350                           
 14351                           ;api.c: 163: API[58] = 1859;
 14352  0022DC  0E07               	movlw	7
 14353  0022DE  6F75               	movwf	(_API+117)& (0+255),b
 14354  0022E0  0E43               	movlw	67
 14355  0022E2  6F74               	movwf	(_API+116)& (0+255),b
 14356                           
 14357                           ;api.c: 164: API[59] = 1859;
 14358  0022E4  0E07               	movlw	7
 14359  0022E6  6F77               	movwf	(_API+119)& (0+255),b
 14360  0022E8  0E43               	movlw	67
 14361  0022EA  6F76               	movwf	(_API+118)& (0+255),b
 14362                           
 14363                           ;api.c: 165: API[60] = 0;
 14364  0022EC  0E00               	movlw	0
 14365  0022EE  6F79               	movwf	(_API+121)& (0+255),b
 14366  0022F0  0E00               	movlw	0
 14367  0022F2  6F78               	movwf	(_API+120)& (0+255),b
 14368                           
 14369                           ;api.c: 166: API[61] = 0;
 14370  0022F4  0E00               	movlw	0
 14371  0022F6  6F7B               	movwf	(_API+123)& (0+255),b
 14372  0022F8  0E00               	movlw	0
 14373  0022FA  6F7A               	movwf	(_API+122)& (0+255),b
 14374                           
 14375                           ;api.c: 167: API[62] = 0;
 14376  0022FC  0E00               	movlw	0
 14377  0022FE  6F7D               	movwf	(_API+125)& (0+255),b
 14378  002300  0E00               	movlw	0
 14379  002302  6F7C               	movwf	(_API+124)& (0+255),b
 14380                           
 14381                           ;api.c: 168: API[63] = 1;
 14382  002304  0E00               	movlw	0
 14383  002306  6F7F               	movwf	(_API+127)& (0+255),b
 14384  002308  0E01               	movlw	1
 14385  00230A  6F7E               	movwf	(_API+126)& (0+255),b
 14386                           
 14387                           ;api.c: 169: API[64] = 0;
 14388  00230C  0E00               	movlw	0
 14389  00230E  6F81               	movwf	(_API+129)& (0+255),b
 14390  002310  0E00               	movlw	0
 14391  002312  6F80               	movwf	(_API+128)& (0+255),b
 14392                           
 14393                           ;api.c: 170: API[65] = 0;
 14394  002314  0E00               	movlw	0
 14395  002316  6F83               	movwf	(_API+131)& (0+255),b
 14396  002318  0E00               	movlw	0
 14397  00231A  6F82               	movwf	(_API+130)& (0+255),b
 14398                           
 14399                           ;api.c: 171: API[66] = 0;
 14400  00231C  0E00               	movlw	0
 14401  00231E  6F85               	movwf	(_API+133)& (0+255),b
 14402  002320  0E00               	movlw	0
 14403  002322  6F84               	movwf	(_API+132)& (0+255),b
 14404                           
 14405                           ;api.c: 172: API[67] = 0;
 14406  002324  0E00               	movlw	0
 14407  002326  6F87               	movwf	(_API+135)& (0+255),b
 14408  002328  0E00               	movlw	0
 14409  00232A  6F86               	movwf	(_API+134)& (0+255),b
 14410                           
 14411                           ;api.c: 173: API[68] = 0;
 14412  00232C  0E00               	movlw	0
 14413  00232E  6F89               	movwf	(_API+137)& (0+255),b
 14414  002330  0E00               	movlw	0
 14415  002332  6F88               	movwf	(_API+136)& (0+255),b
 14416                           
 14417                           ;api.c: 174: API[69] = 1;
 14418  002334  0E00               	movlw	0
 14419  002336  6F8B               	movwf	(_API+139)& (0+255),b
 14420  002338  0E01               	movlw	1
 14421  00233A  6F8A               	movwf	(_API+138)& (0+255),b
 14422                           
 14423                           ;api.c: 175: API[70] = 0;
 14424  00233C  0E00               	movlw	0
 14425  00233E  6F8D               	movwf	(_API+141)& (0+255),b
 14426  002340  0E00               	movlw	0
 14427  002342  6F8C               	movwf	(_API+140)& (0+255),b
 14428                           
 14429                           ;api.c: 176: API[71] = 0;
 14430  002344  0E00               	movlw	0
 14431  002346  6F8F               	movwf	(_API+143)& (0+255),b
 14432  002348  0E00               	movlw	0
 14433  00234A  6F8E               	movwf	(_API+142)& (0+255),b
 14434                           
 14435                           ;api.c: 177: API[72] = 0;
 14436  00234C  0E00               	movlw	0
 14437  00234E  6F91               	movwf	(_API+145)& (0+255),b
 14438  002350  0E00               	movlw	0
 14439  002352  6F90               	movwf	(_API+144)& (0+255),b
 14440                           
 14441                           ;api.c: 178: API[73] = 0;
 14442  002354  0E00               	movlw	0
 14443  002356  6F93               	movwf	(_API+147)& (0+255),b
 14444  002358  0E00               	movlw	0
 14445  00235A  6F92               	movwf	(_API+146)& (0+255),b
 14446                           
 14447                           ;api.c: 179: API[74] = 0;
 14448  00235C  0E00               	movlw	0
 14449  00235E  6F95               	movwf	(_API+149)& (0+255),b
 14450  002360  0E00               	movlw	0
 14451  002362  6F94               	movwf	(_API+148)& (0+255),b
 14452                           
 14453                           ;api.c: 180: API[75] = 0;
 14454  002364  0E00               	movlw	0
 14455  002366  6F97               	movwf	(_API+151)& (0+255),b
 14456  002368  0E00               	movlw	0
 14457  00236A  6F96               	movwf	(_API+150)& (0+255),b
 14458                           
 14459                           ;api.c: 181: API[76] = 0;
 14460  00236C  0E00               	movlw	0
 14461  00236E  6F99               	movwf	(_API+153)& (0+255),b
 14462  002370  0E00               	movlw	0
 14463  002372  6F98               	movwf	(_API+152)& (0+255),b
 14464                           
 14465                           ;api.c: 182: API[77] = 0;
 14466  002374  0E00               	movlw	0
 14467  002376  6F9B               	movwf	(_API+155)& (0+255),b
 14468  002378  0E00               	movlw	0
 14469  00237A  6F9A               	movwf	(_API+154)& (0+255),b
 14470                           
 14471                           ;api.c: 183: API[78] = 0;
 14472  00237C  0E00               	movlw	0
 14473  00237E  6F9D               	movwf	(_API+157)& (0+255),b
 14474  002380  0E00               	movlw	0
 14475  002382  6F9C               	movwf	(_API+156)& (0+255),b
 14476                           
 14477                           ;api.c: 184: API[79] = 0;
 14478  002384  0E00               	movlw	0
 14479  002386  6F9F               	movwf	(_API+159)& (0+255),b
 14480  002388  0E00               	movlw	0
 14481  00238A  6F9E               	movwf	(_API+158)& (0+255),b
 14482                           
 14483                           ;api.c: 185: API[80] = 0;
 14484  00238C  0E00               	movlw	0
 14485  00238E  6FA1               	movwf	(_API+161)& (0+255),b
 14486  002390  0E00               	movlw	0
 14487  002392  6FA0               	movwf	(_API+160)& (0+255),b
 14488                           
 14489                           ;api.c: 186: API[81] = 0;
 14490  002394  0E00               	movlw	0
 14491  002396  6FA3               	movwf	(_API+163)& (0+255),b
 14492  002398  0E00               	movlw	0
 14493  00239A  6FA2               	movwf	(_API+162)& (0+255),b
 14494                           
 14495                           ;api.c: 187: API[82] = 1;
 14496  00239C  0E00               	movlw	0
 14497  00239E  6FA5               	movwf	(_API+165)& (0+255),b
 14498  0023A0  0E01               	movlw	1
 14499  0023A2  6FA4               	movwf	(_API+164)& (0+255),b
 14500                           
 14501                           ;api.c: 188: API[83] = 0;
 14502  0023A4  0E00               	movlw	0
 14503  0023A6  6FA7               	movwf	(_API+167)& (0+255),b
 14504  0023A8  0E00               	movlw	0
 14505  0023AA  6FA6               	movwf	(_API+166)& (0+255),b
 14506                           
 14507                           ;api.c: 189: API[84] = 1;
 14508  0023AC  0E00               	movlw	0
 14509  0023AE  6FA9               	movwf	(_API+169)& (0+255),b
 14510  0023B0  0E01               	movlw	1
 14511  0023B2  6FA8               	movwf	(_API+168)& (0+255),b
 14512                           
 14513                           ;api.c: 190: API[85] = 0;
 14514  0023B4  0E00               	movlw	0
 14515  0023B6  6FAB               	movwf	(_API+171)& (0+255),b
 14516  0023B8  0E00               	movlw	0
 14517  0023BA  6FAA               	movwf	(_API+170)& (0+255),b
 14518                           
 14519                           ;api.c: 191: API[86] = 0;
 14520  0023BC  0E00               	movlw	0
 14521  0023BE  6FAD               	movwf	(_API+173)& (0+255),b
 14522  0023C0  0E00               	movlw	0
 14523  0023C2  6FAC               	movwf	(_API+172)& (0+255),b
 14524                           
 14525                           ;api.c: 192: API[87] = 0;
 14526  0023C4  0E00               	movlw	0
 14527  0023C6  6FAF               	movwf	(_API+175)& (0+255),b
 14528  0023C8  0E00               	movlw	0
 14529  0023CA  6FAE               	movwf	(_API+174)& (0+255),b
 14530                           
 14531                           ;api.c: 193: API[88] = 511;
 14532  0023CC  0E01               	movlw	1
 14533  0023CE  6FB1               	movwf	(_API+177)& (0+255),b
 14534  0023D0  69B0               	setf	(_API+176)& (0+255),b
 14535                           
 14536                           ;api.c: 194: API[89] = 0;
 14537  0023D2  0E00               	movlw	0
 14538  0023D4  6FB3               	movwf	(_API+179)& (0+255),b
 14539  0023D6  0E00               	movlw	0
 14540  0023D8  6FB2               	movwf	(_API+178)& (0+255),b
 14541                           
 14542                           ;api.c: 195: API[90] = 0;
 14543  0023DA  0E00               	movlw	0
 14544  0023DC  6FB5               	movwf	(_API+181)& (0+255),b
 14545  0023DE  0E00               	movlw	0
 14546  0023E0  6FB4               	movwf	(_API+180)& (0+255),b
 14547                           
 14548                           ; BSR set to: 1
 14549  0023E2  0012               	return		;funcret
 14550  0023E4                     __end_of_APIxInitialize:
 14551                           	opt stack 0
 14552                           tblptru	equ	0xFF8
 14553                           tblptrh	equ	0xFF7
 14554                           tblptrl	equ	0xFF6
 14555                           tablat	equ	0xFF5
 14556                           prodh	equ	0xFF4
 14557                           prodl	equ	0xFF3
 14558                           intcon	equ	0xFF2
 14559                           intcon2	equ	0xFF1
 14560                           postinc0	equ	0xFEE
 14561                           wreg	equ	0xFE8
 14562                           postinc1	equ	0xFE6
 14563                           postdec1	equ	0xFE5
 14564                           fsr1h	equ	0xFE2
 14565                           fsr1l	equ	0xFE1
 14566                           indf2	equ	0xFDF
 14567                           postinc2	equ	0xFDE
 14568                           postdec2	equ	0xFDD
 14569                           fsr2h	equ	0xFDA
 14570                           fsr2l	equ	0xFD9
 14571                           status	equ	0xFD8
 14572                           
 14573 ;; *************** function _tc_low *****************
 14574 ;; Defined at:
 14575 ;;		line 152 in file "../Main.c"
 14576 ;; Parameters:    Size  Location     Type
 14577 ;;		None
 14578 ;; Auto vars:     Size  Location     Type
 14579 ;;		None
 14580 ;; Return value:  Size  Location     Type
 14581 ;;                  1    wreg      void 
 14582 ;; Registers used:
 14583 ;;		None
 14584 ;; Tracked objects:
 14585 ;;		On entry : 0/0
 14586 ;;		On exit  : 0/0
 14587 ;;		Unchanged: 0/0
 14588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14589 ;;      Params:         0       0       0       0       0       0       0       0       0
 14590 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14591 ;;      Temps:          0      21       0       0       0       0       0       0       0
 14592 ;;      Totals:         0      21       0       0       0       0       0       0       0
 14593 ;;Total ram usage:       21 bytes
 14594 ;; Hardware stack levels used:    1
 14595 ;; Hardware stack levels required when called:    2
 14596 ;; This function calls:
 14597 ;;		Nothing
 14598 ;; This function is called by:
 14599 ;;		Interrupt level 1
 14600 ;; This function uses a non-reentrant model
 14601 ;;
 14602                           
 14603                           	psect	intcodelo
 14604  000018                     __pintcodelo:
 14605                           	opt stack 0
 14606  000018                     _tc_low:
 14607                           	opt stack 22
 14608                           
 14609                           ; BSR set to: 1
 14610                           ;incstack = 0
 14611  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 14612  00001A  CFD8 F09A          	movff	status,??_tc_low
 14613  00001E  CFE8 F09B          	movff	wreg,??_tc_low+1
 14614  000022  CFE0 F09C          	movff	bsr,??_tc_low+2
 14615  000026  CFFA F09D          	movff	pclath,??_tc_low+3
 14616  00002A  CFFB F09E          	movff	pclatu,??_tc_low+4
 14617  00002E  CFE9 F09F          	movff	fsr0l,??_tc_low+5
 14618  000032  CFEA F0A0          	movff	fsr0h,??_tc_low+6
 14619  000036  CFE1 F0A1          	movff	fsr1l,??_tc_low+7
 14620  00003A  CFE2 F0A2          	movff	fsr1h,??_tc_low+8
 14621  00003E  CFD9 F0A3          	movff	fsr2l,??_tc_low+9
 14622  000042  CFDA F0A4          	movff	fsr2h,??_tc_low+10
 14623  000046  CFF3 F0A5          	movff	prodl,??_tc_low+11
 14624  00004A  CFF4 F0A6          	movff	prodh,??_tc_low+12
 14625  00004E  CFF6 F0A7          	movff	tblptrl,??_tc_low+13
 14626  000052  CFF7 F0A8          	movff	tblptrh,??_tc_low+14
 14627  000056  CFF8 F0A9          	movff	tblptru,??_tc_low+15
 14628  00005A  CFF5 F0AA          	movff	tablat,??_tc_low+16
 14629  00005E  C04D  F0AB         	movff	btemp,??_tc_low+17
 14630  000062  C04E  F0AC         	movff	btemp+1,??_tc_low+18
 14631  000066  C04F  F0AD         	movff	btemp+2,??_tc_low+19
 14632  00006A  C050  F0AE         	movff	btemp+3,??_tc_low+20
 14633  00006E  C0AE  F050         	movff	??_tc_low+20,btemp+3
 14634  000072  C0AD  F04F         	movff	??_tc_low+19,btemp+2
 14635  000076  C0AC  F04E         	movff	??_tc_low+18,btemp+1
 14636  00007A  C0AB  F04D         	movff	??_tc_low+17,btemp
 14637  00007E  C0AA  FFF5         	movff	??_tc_low+16,tablat
 14638  000082  C0A9  FFF8         	movff	??_tc_low+15,tblptru
 14639  000086  C0A8  FFF7         	movff	??_tc_low+14,tblptrh
 14640  00008A  C0A7  FFF6         	movff	??_tc_low+13,tblptrl
 14641  00008E  C0A6  FFF4         	movff	??_tc_low+12,prodh
 14642  000092  C0A5  FFF3         	movff	??_tc_low+11,prodl
 14643  000096  C0A4  FFDA         	movff	??_tc_low+10,fsr2h
 14644  00009A  C0A3  FFD9         	movff	??_tc_low+9,fsr2l
 14645  00009E  C0A2  FFE2         	movff	??_tc_low+8,fsr1h
 14646  0000A2  C0A1  FFE1         	movff	??_tc_low+7,fsr1l
 14647  0000A6  C0A0  FFEA         	movff	??_tc_low+6,fsr0h
 14648  0000AA  C09F  FFE9         	movff	??_tc_low+5,fsr0l
 14649  0000AE  C09E  FFFB         	movff	??_tc_low+4,pclatu
 14650  0000B2  C09D  FFFA         	movff	??_tc_low+3,pclath
 14651  0000B6  C09C  FFE0         	movff	??_tc_low+2,bsr
 14652  0000BA  C09B  FFE8         	movff	??_tc_low+1,wreg
 14653  0000BE  C09A  FFD8         	movff	??_tc_low,status
 14654  0000C2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 14655  0000C4  0010               	retfie	
 14656  0000C6                     __end_of_tc_low:
 14657                           	opt stack 0
 14658                           pclatu	equ	0xFFB
 14659                           pclath	equ	0xFFA
 14660                           tblptru	equ	0xFF8
 14661                           tblptrh	equ	0xFF7
 14662                           tblptrl	equ	0xFF6
 14663                           tablat	equ	0xFF5
 14664                           prodh	equ	0xFF4
 14665                           prodl	equ	0xFF3
 14666                           intcon	equ	0xFF2
 14667                           intcon2	equ	0xFF1
 14668                           postinc0	equ	0xFEE
 14669                           fsr0h	equ	0xFEA
 14670                           fsr0l	equ	0xFE9
 14671                           wreg	equ	0xFE8
 14672                           postinc1	equ	0xFE6
 14673                           postdec1	equ	0xFE5
 14674                           fsr1h	equ	0xFE2
 14675                           fsr1l	equ	0xFE1
 14676                           bsr	equ	0xFE0
 14677                           indf2	equ	0xFDF
 14678                           postinc2	equ	0xFDE
 14679                           postdec2	equ	0xFDD
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684 ;; *************** function _tc_high *****************
 14685 ;; Defined at:
 14686 ;;		line 156 in file "../Main.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;		None
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;		None
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14700 ;;      Params:         0       0       0       0       0       0       0       0       0
 14701 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14702 ;;      Temps:         18       0       0       0       0       0       0       0       0
 14703 ;;      Totals:        18       0       0       0       0       0       0       0       0
 14704 ;;Total ram usage:       18 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; Hardware stack levels required when called:    1
 14707 ;; This function calls:
 14708 ;;		_EUSART1_Receive_ISR
 14709 ;;		_EUSART1_Transmit_ISR
 14710 ;; This function is called by:
 14711 ;;		Interrupt level 2
 14712 ;; This function uses a non-reentrant model
 14713 ;;
 14714                           
 14715                           	psect	intcode
 14716  000008                     __pintcode:
 14717                           	opt stack 0
 14718  000008                     _tc_high:
 14719                           	opt stack 22
 14720                           
 14721                           ;incstack = 0
 14722  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14723  00000A  EDE6  F01B         	call	int_func,f	;refresh shadow registers
 14724                           pclatu	equ	0xFFB
 14725                           pclath	equ	0xFFA
 14726                           tblptru	equ	0xFF8
 14727                           tblptrh	equ	0xFF7
 14728                           tblptrl	equ	0xFF6
 14729                           tablat	equ	0xFF5
 14730                           prodh	equ	0xFF4
 14731                           prodl	equ	0xFF3
 14732                           intcon	equ	0xFF2
 14733                           intcon2	equ	0xFF1
 14734                           postinc0	equ	0xFEE
 14735                           fsr0h	equ	0xFEA
 14736                           fsr0l	equ	0xFE9
 14737                           wreg	equ	0xFE8
 14738                           postinc1	equ	0xFE6
 14739                           postdec1	equ	0xFE5
 14740                           fsr1h	equ	0xFE2
 14741                           fsr1l	equ	0xFE1
 14742                           bsr	equ	0xFE0
 14743                           indf2	equ	0xFDF
 14744                           postinc2	equ	0xFDE
 14745                           postdec2	equ	0xFDD
 14746                           fsr2h	equ	0xFDA
 14747                           fsr2l	equ	0xFD9
 14748                           status	equ	0xFD8
 14749                           
 14750                           	psect	intcode_body
 14751  0037CC                     __pintcode_body:
 14752                           	opt stack 22
 14753  0037CC                     int_func:
 14754                           	opt stack 22
 14755  0037CC  0006               	pop		; remove dummy address from shadow register refresh
 14756  0037CE  CFFA F001          	movff	pclath,??_tc_high
 14757  0037D2  CFFB F002          	movff	pclatu,??_tc_high+1
 14758  0037D6  CFE9 F003          	movff	fsr0l,??_tc_high+2
 14759  0037DA  CFEA F004          	movff	fsr0h,??_tc_high+3
 14760  0037DE  CFE1 F005          	movff	fsr1l,??_tc_high+4
 14761  0037E2  CFE2 F006          	movff	fsr1h,??_tc_high+5
 14762  0037E6  CFD9 F007          	movff	fsr2l,??_tc_high+6
 14763  0037EA  CFDA F008          	movff	fsr2h,??_tc_high+7
 14764  0037EE  CFF3 F009          	movff	prodl,??_tc_high+8
 14765  0037F2  CFF4 F00A          	movff	prodh,??_tc_high+9
 14766  0037F6  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 14767  0037FA  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 14768  0037FE  CFF8 F00D          	movff	tblptru,??_tc_high+12
 14769  003802  CFF5 F00E          	movff	tablat,??_tc_high+13
 14770  003806  C04D  F00F         	movff	btemp,??_tc_high+14
 14771  00380A  C04E  F010         	movff	btemp+1,??_tc_high+15
 14772  00380E  C04F  F011         	movff	btemp+2,??_tc_high+16
 14773  003812  C050  F012         	movff	btemp+3,??_tc_high+17
 14774                           
 14775                           ;Main.c: 158: if (INTCONbits.TMR0IF)
 14776  003816  A4F2               	btfss	intcon,2,c	;volatile
 14777  003818  D019               	goto	i2l106
 14778                           
 14779                           ;Main.c: 159: {
 14780                           ;Main.c: 160: if(Led1_Counter <= 100)
 14781  00381A  502D               	movf	_Led1_Counter+1,w,c	;volatile
 14782  00381C  E106               	bnz	i2l107
 14783  00381E  0E65               	movlw	101
 14784  003820  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14785  003822  B0D8               	btfsc	status,0,c
 14786  003824  D002               	goto	i2l107
 14787                           
 14788                           ;Main.c: 161: {
 14789                           ;Main.c: 162: PORTAbits.RA4 = 1;
 14790  003826  8880               	bsf	3968,4,c	;volatile
 14791                           
 14792                           ;Main.c: 163: }
 14793  003828  D001               	goto	i2l108
 14794  00382A                     i2l107:
 14795                           
 14796                           ;Main.c: 164: else
 14797                           ;Main.c: 165: {
 14798                           ;Main.c: 166: PORTAbits.RA4 = 0;
 14799  00382A  9880               	bcf	3968,4,c	;volatile
 14800  00382C                     i2l108:
 14801                           
 14802                           ;Main.c: 167: }
 14803                           ;Main.c: 168: if(Led1_Counter >= 700)
 14804  00382C  0EBC               	movlw	188
 14805  00382E  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14806  003830  0E02               	movlw	2
 14807  003832  582D               	subwfb	_Led1_Counter+1,w,c	;volatile
 14808  003834  A0D8               	btfss	status,0,c
 14809  003836  D004               	goto	i2l109
 14810                           
 14811                           ;Main.c: 169: {
 14812                           ;Main.c: 170: Led1_Counter = 0;
 14813  003838  0E00               	movlw	0
 14814  00383A  6E2D               	movwf	_Led1_Counter+1,c	;volatile
 14815  00383C  0E00               	movlw	0
 14816  00383E  6E2C               	movwf	_Led1_Counter,c	;volatile
 14817  003840                     i2l109:
 14818                           
 14819                           ;Main.c: 171: }
 14820                           ;Main.c: 172: Led1_Counter++;
 14821  003840  4A2C               	infsnz	_Led1_Counter,f,c	;volatile
 14822  003842  2A2D               	incf	_Led1_Counter+1,f,c	;volatile
 14823                           
 14824                           ;Main.c: 173: Update_State_Machine = 1;
 14825  003844  0E01               	movlw	1
 14826  003846  0100               	movlb	0	; () banked
 14827  003848  6F8F               	movwf	_Update_State_Machine& (0+255),b	;volatile
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;Main.c: 174: INTCONbits.TMR0IF = 0;
 14831  00384A  94F2               	bcf	intcon,2,c	;volatile
 14832  00384C                     i2l106:
 14833                           
 14834                           ;Main.c: 175: }
 14835                           ;Main.c: 177: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 14836                           
 14837                           ; BSR set to: 0
 14838  00384C  BA9D               	btfsc	3997,5,c	;volatile
 14839  00384E  AA9E               	btfss	3998,5,c	;volatile
 14840  003850  D002               	goto	i2l110
 14841                           
 14842                           ;Main.c: 178: EUSART1_Receive_ISR();
 14843  003852  ECA8  F020         	call	_EUSART1_Receive_ISR	;wreg free
 14844  003856                     i2l110:
 14845                           
 14846                           ;Main.c: 179: }
 14847                           ;Main.c: 180: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 14848  003856  B89D               	btfsc	3997,4,c	;volatile
 14849  003858  A89E               	btfss	3998,4,c	;volatile
 14850  00385A  D002               	goto	i2l111
 14851                           
 14852                           ;Main.c: 181: EUSART1_Transmit_ISR();
 14853  00385C  EC91  F020         	call	_EUSART1_Transmit_ISR	;wreg free
 14854  003860                     i2l111:
 14855  003860  C012  F050         	movff	??_tc_high+17,btemp+3
 14856  003864  C011  F04F         	movff	??_tc_high+16,btemp+2
 14857  003868  C010  F04E         	movff	??_tc_high+15,btemp+1
 14858  00386C  C00F  F04D         	movff	??_tc_high+14,btemp
 14859  003870  C00E  FFF5         	movff	??_tc_high+13,tablat
 14860  003874  C00D  FFF8         	movff	??_tc_high+12,tblptru
 14861  003878  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 14862  00387C  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 14863  003880  C00A  FFF4         	movff	??_tc_high+9,prodh
 14864  003884  C009  FFF3         	movff	??_tc_high+8,prodl
 14865  003888  C008  FFDA         	movff	??_tc_high+7,fsr2h
 14866  00388C  C007  FFD9         	movff	??_tc_high+6,fsr2l
 14867  003890  C006  FFE2         	movff	??_tc_high+5,fsr1h
 14868  003894  C005  FFE1         	movff	??_tc_high+4,fsr1l
 14869  003898  C004  FFEA         	movff	??_tc_high+3,fsr0h
 14870  00389C  C003  FFE9         	movff	??_tc_high+2,fsr0l
 14871  0038A0  C002  FFFB         	movff	??_tc_high+1,pclatu
 14872  0038A4  C001  FFFA         	movff	??_tc_high,pclath
 14873  0038A8  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14874  0038AA  0011               	retfie		f
 14875  0038AC                     __end_of_tc_high:
 14876                           	opt stack 0
 14877                           pclatu	equ	0xFFB
 14878                           pclath	equ	0xFFA
 14879                           tblptru	equ	0xFF8
 14880                           tblptrh	equ	0xFF7
 14881                           tblptrl	equ	0xFF6
 14882                           tablat	equ	0xFF5
 14883                           prodh	equ	0xFF4
 14884                           prodl	equ	0xFF3
 14885                           intcon	equ	0xFF2
 14886                           intcon2	equ	0xFF1
 14887                           postinc0	equ	0xFEE
 14888                           fsr0h	equ	0xFEA
 14889                           fsr0l	equ	0xFE9
 14890                           wreg	equ	0xFE8
 14891                           postinc1	equ	0xFE6
 14892                           postdec1	equ	0xFE5
 14893                           fsr1h	equ	0xFE2
 14894                           fsr1l	equ	0xFE1
 14895                           bsr	equ	0xFE0
 14896                           indf2	equ	0xFDF
 14897                           postinc2	equ	0xFDE
 14898                           postdec2	equ	0xFDD
 14899                           fsr2h	equ	0xFDA
 14900                           fsr2l	equ	0xFD9
 14901                           status	equ	0xFD8
 14902                           
 14903 ;; *************** function _EUSART1_Transmit_ISR *****************
 14904 ;; Defined at:
 14905 ;;		line 184 in file "../eusart1.c"
 14906 ;; Parameters:    Size  Location     Type
 14907 ;;		None
 14908 ;; Auto vars:     Size  Location     Type
 14909 ;;		None
 14910 ;; Return value:  Size  Location     Type
 14911 ;;                  1    wreg      void 
 14912 ;; Registers used:
 14913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14914 ;; Tracked objects:
 14915 ;;		On entry : 0/0
 14916 ;;		On exit  : 0/0
 14917 ;;		Unchanged: 0/0
 14918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14919 ;;      Params:         0       0       0       0       0       0       0       0       0
 14920 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14921 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14922 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14923 ;;Total ram usage:        0 bytes
 14924 ;; Hardware stack levels used:    1
 14925 ;; This function calls:
 14926 ;;		Nothing
 14927 ;; This function is called by:
 14928 ;;		_tc_high
 14929 ;; This function uses a non-reentrant model
 14930 ;;
 14931                           
 14932                           	psect	text45
 14933  004122                     __ptext45:
 14934                           	opt stack 0
 14935  004122                     _EUSART1_Transmit_ISR:
 14936                           	opt stack 22
 14937                           
 14938                           ;eusart1.c: 187: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 14939                           
 14940                           ;incstack = 0
 14941  004122  0E7E               	movlw	126
 14942  004124  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 14943  004126  D012               	goto	i2l571
 14944                           
 14945                           ;eusart1.c: 188: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 14946  004128  5043               	movf	_eusart1TxTail,w,c
 14947  00412A  0D01               	mullw	1
 14948  00412C  0E7E               	movlw	low _eusart1TxBuffer
 14949  00412E  24F3               	addwf	prodl,w,c
 14950  004130  6ED9               	movwf	fsr2l,c
 14951  004132  0E04               	movlw	high _eusart1TxBuffer
 14952  004134  20F4               	addwfc	prodh,w,c
 14953  004136  6EDA               	movwf	fsr2h,c
 14954  004138  50DF               	movf	indf2,w,c
 14955  00413A  6EAD               	movwf	4013,c	;volatile
 14956  00413C  2A43               	incf	_eusart1TxTail,f,c
 14957                           
 14958                           ;eusart1.c: 189: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 14959  00413E  0E7D               	movlw	125
 14960  004140  6443               	cpfsgt	_eusart1TxTail,c
 14961  004142  D002               	goto	i2l572
 14962                           
 14963                           ;eusart1.c: 190: eusart1TxTail = 0;
 14964  004144  0E00               	movlw	0
 14965  004146  6E43               	movwf	_eusart1TxTail,c
 14966  004148                     i2l572:
 14967                           
 14968                           ;eusart1.c: 191: }
 14969                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 14970  004148  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 14971                           
 14972                           ;eusart1.c: 193: } else {
 14973  00414A  0012               	return	
 14974  00414C                     i2l571:
 14975                           
 14976                           ;eusart1.c: 194: PIE1bits.TX1IE = 0;
 14977  00414C  989D               	bcf	3997,4,c	;volatile
 14978  00414E  0012               	return	
 14979  004150                     __end_of_EUSART1_Transmit_ISR:
 14980                           	opt stack 0
 14981                           pclatu	equ	0xFFB
 14982                           pclath	equ	0xFFA
 14983                           tblptru	equ	0xFF8
 14984                           tblptrh	equ	0xFF7
 14985                           tblptrl	equ	0xFF6
 14986                           tablat	equ	0xFF5
 14987                           prodh	equ	0xFF4
 14988                           prodl	equ	0xFF3
 14989                           intcon	equ	0xFF2
 14990                           intcon2	equ	0xFF1
 14991                           postinc0	equ	0xFEE
 14992                           fsr0h	equ	0xFEA
 14993                           fsr0l	equ	0xFE9
 14994                           wreg	equ	0xFE8
 14995                           postinc1	equ	0xFE6
 14996                           postdec1	equ	0xFE5
 14997                           fsr1h	equ	0xFE2
 14998                           fsr1l	equ	0xFE1
 14999                           bsr	equ	0xFE0
 15000                           indf2	equ	0xFDF
 15001                           postinc2	equ	0xFDE
 15002                           postdec2	equ	0xFDD
 15003                           fsr2h	equ	0xFDA
 15004                           fsr2l	equ	0xFD9
 15005                           status	equ	0xFD8
 15006                           
 15007 ;; *************** function _EUSART1_Receive_ISR *****************
 15008 ;; Defined at:
 15009 ;;		line 198 in file "../eusart1.c"
 15010 ;; Parameters:    Size  Location     Type
 15011 ;;		None
 15012 ;; Auto vars:     Size  Location     Type
 15013 ;;		None
 15014 ;; Return value:  Size  Location     Type
 15015 ;;                  1    wreg      void 
 15016 ;; Registers used:
 15017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15018 ;; Tracked objects:
 15019 ;;		On entry : 0/0
 15020 ;;		On exit  : 0/0
 15021 ;;		Unchanged: 0/0
 15022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15023 ;;      Params:         0       0       0       0       0       0       0       0       0
 15024 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15025 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15026 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15027 ;;Total ram usage:        0 bytes
 15028 ;; Hardware stack levels used:    1
 15029 ;; This function calls:
 15030 ;;		Nothing
 15031 ;; This function is called by:
 15032 ;;		_tc_high
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           	psect	text46
 15037  004150                     __ptext46:
 15038                           	opt stack 0
 15039  004150                     _EUSART1_Receive_ISR:
 15040                           	opt stack 22
 15041                           
 15042                           ;eusart1.c: 199: if (1 == RCSTA1bits.OERR) {
 15043                           
 15044                           ;incstack = 0
 15045  004150  A2AB               	btfss	4011,1,c	;volatile
 15046  004152  D002               	goto	i2l577
 15047                           
 15048                           ;eusart1.c: 202: RCSTA1bits.CREN = 0;
 15049  004154  98AB               	bcf	4011,4,c	;volatile
 15050                           
 15051                           ;eusart1.c: 203: RCSTA1bits.CREN = 1;
 15052  004156  88AB               	bsf	4011,4,c	;volatile
 15053  004158                     i2l577:
 15054                           
 15055                           ;eusart1.c: 204: }
 15056                           ;eusart1.c: 207: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15057  004158  5041               	movf	_eusart1RxHead,w,c
 15058  00415A  0D01               	mullw	1
 15059  00415C  0E00               	movlw	low _eusart1RxBuffer
 15060  00415E  24F3               	addwf	prodl,w,c
 15061  004160  6ED9               	movwf	fsr2l,c
 15062  004162  0E04               	movlw	high _eusart1RxBuffer
 15063  004164  20F4               	addwfc	prodh,w,c
 15064  004166  6EDA               	movwf	fsr2h,c
 15065  004168  CFAE FFDF          	movff	4014,indf2	;volatile
 15066  00416C  2A41               	incf	_eusart1RxHead,f,c
 15067                           
 15068                           ;eusart1.c: 208: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 15069  00416E  0E7D               	movlw	125
 15070  004170  6441               	cpfsgt	_eusart1RxHead,c
 15071  004172  D002               	goto	i2l578
 15072                           
 15073                           ;eusart1.c: 209: eusart1RxHead = 0;
 15074  004174  0E00               	movlw	0
 15075  004176  6E41               	movwf	_eusart1RxHead,c
 15076  004178                     i2l578:
 15077                           
 15078                           ;eusart1.c: 210: }
 15079                           ;eusart1.c: 211: eusart1RxCount++;
 15080  004178  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 15081  00417A  0012               	return		;funcret
 15082  00417C                     __end_of_EUSART1_Receive_ISR:
 15083                           	opt stack 0
 15084                           pclatu	equ	0xFFB
 15085                           pclath	equ	0xFFA
 15086                           tblptru	equ	0xFF8
 15087                           tblptrh	equ	0xFF7
 15088                           tblptrl	equ	0xFF6
 15089                           tablat	equ	0xFF5
 15090                           prodh	equ	0xFF4
 15091                           prodl	equ	0xFF3
 15092                           intcon	equ	0xFF2
 15093                           intcon2	equ	0xFF1
 15094                           postinc0	equ	0xFEE
 15095                           fsr0h	equ	0xFEA
 15096                           fsr0l	equ	0xFE9
 15097                           wreg	equ	0xFE8
 15098                           postinc1	equ	0xFE6
 15099                           postdec1	equ	0xFE5
 15100                           fsr1h	equ	0xFE2
 15101                           fsr1l	equ	0xFE1
 15102                           bsr	equ	0xFE0
 15103                           indf2	equ	0xFDF
 15104                           postinc2	equ	0xFDE
 15105                           postdec2	equ	0xFDD
 15106                           fsr2h	equ	0xFDA
 15107                           fsr2l	equ	0xFD9
 15108                           status	equ	0xFD8
 15109                           pclatu	equ	0xFFB
 15110                           pclath	equ	0xFFA
 15111                           tblptru	equ	0xFF8
 15112                           tblptrh	equ	0xFF7
 15113                           tblptrl	equ	0xFF6
 15114                           tablat	equ	0xFF5
 15115                           prodh	equ	0xFF4
 15116                           prodl	equ	0xFF3
 15117                           intcon	equ	0xFF2
 15118                           intcon2	equ	0xFF1
 15119                           postinc0	equ	0xFEE
 15120                           fsr0h	equ	0xFEA
 15121                           fsr0l	equ	0xFE9
 15122                           wreg	equ	0xFE8
 15123                           postinc1	equ	0xFE6
 15124                           postdec1	equ	0xFE5
 15125                           fsr1h	equ	0xFE2
 15126                           fsr1l	equ	0xFE1
 15127                           bsr	equ	0xFE0
 15128                           indf2	equ	0xFDF
 15129                           postinc2	equ	0xFDE
 15130                           postdec2	equ	0xFDD
 15131                           fsr2h	equ	0xFDA
 15132                           fsr2l	equ	0xFD9
 15133                           status	equ	0xFD8
 15134                           
 15135                           	psect	rparam
 15136  0000                     pclatu	equ	0xFFB
 15137                           pclath	equ	0xFFA
 15138                           tblptru	equ	0xFF8
 15139                           tblptrh	equ	0xFF7
 15140                           tblptrl	equ	0xFF6
 15141                           tablat	equ	0xFF5
 15142                           prodh	equ	0xFF4
 15143                           prodl	equ	0xFF3
 15144                           intcon	equ	0xFF2
 15145                           intcon2	equ	0xFF1
 15146                           postinc0	equ	0xFEE
 15147                           fsr0h	equ	0xFEA
 15148                           fsr0l	equ	0xFE9
 15149                           wreg	equ	0xFE8
 15150                           postinc1	equ	0xFE6
 15151                           postdec1	equ	0xFE5
 15152                           fsr1h	equ	0xFE2
 15153                           fsr1l	equ	0xFE1
 15154                           bsr	equ	0xFE0
 15155                           indf2	equ	0xFDF
 15156                           postinc2	equ	0xFDE
 15157                           postdec2	equ	0xFDD
 15158                           fsr2h	equ	0xFDA
 15159                           fsr2l	equ	0xFD9
 15160                           status	equ	0xFD8
 15161                           
 15162                           	psect	temp
 15163  00004D                     btemp:
 15164                           	opt stack 0
 15165  00004D                     	ds	1
 15166  0000                     int$flags	set	btemp
 15167  0000                     wtemp6	set	btemp+1
 15168                           pclatu	equ	0xFFB
 15169                           pclath	equ	0xFFA
 15170                           tblptru	equ	0xFF8
 15171                           tblptrh	equ	0xFF7
 15172                           tblptrl	equ	0xFF6
 15173                           tablat	equ	0xFF5
 15174                           prodh	equ	0xFF4
 15175                           prodl	equ	0xFF3
 15176                           intcon	equ	0xFF2
 15177                           intcon2	equ	0xFF1
 15178                           postinc0	equ	0xFEE
 15179                           fsr0h	equ	0xFEA
 15180                           fsr0l	equ	0xFE9
 15181                           wreg	equ	0xFE8
 15182                           postinc1	equ	0xFE6
 15183                           postdec1	equ	0xFE5
 15184                           fsr1h	equ	0xFE2
 15185                           fsr1l	equ	0xFE1
 15186                           bsr	equ	0xFE0
 15187                           indf2	equ	0xFDF
 15188                           postinc2	equ	0xFDE
 15189                           postdec2	equ	0xFDD
 15190                           fsr2h	equ	0xFDA
 15191                           fsr2l	equ	0xFD9
 15192                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    47
    Data        11
    BSS         1650
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      76
    BANK0           160     40     104
    BANK1           256      0     182
    BANK2           256      0     182
    BANK3           256      0     182
    BANK4           256      0     252
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_SETxPWM
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _Red_Led->_SETxAPIxVAL
    _Green_Led->_SETxAPIxVAL
    _EEPROMxSTORE->_Eeprom_Store
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_atoi
    _TranslateMessage->_printf
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _EEPROMxREAD->_Eeprom_Read
    _SendMessage->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _Update_StateMchn->_Train_Path
    _Train_Path->_Train_Move_Left_Brake
    _Train_Path->_Train_Move_Left_Start
    _Train_Path->_Train_Move_Right_Brake
    _Train_Path->_Train_Move_Right_Start
    _READxRECEIVEDxMESSAGE->_printf
    _TranslateMessage->_printf
    _DIAGNOSTICxTOxPC->_SendMessage
    _SendMessage->_printf

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  730327
                                             38 BANK0      2     2      0
                     _APIxInitialize
                   _DIAGNOSTICxTOxPC
                        _EEPROMxREAD
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     5     5      0  687264
                                             25 BANK0      5     5      0
                    _Debounce_Inputs
                       _EEPROMxSTORE
                        _GETxAPIxVAL
                   _GETxEMPTYxBUFFER
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                            _SETxPWM
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  524044
                                             23 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               2     2      0   65289
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               2     2      0   65289
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                2     2      0   65289
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                2     2      0   65289
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   34286
                                             30 COMRAM     7     4      3
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1   32142
                                             30 COMRAM     2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              2     2      0   15759
                                             30 COMRAM     2     2      0
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            2     2      0   15759
                                             30 COMRAM     2     2      0
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _GETxEMPTYxBUFFER                                     2     0      2       0
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EEPROMxSTORE                                        12    10      2     660
                                             26 COMRAM    10     8      2
                                             21 BANK0      2     2      0
                       _Eeprom_Store
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Store                                         8     4      4     372
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0   31113
                                             30 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     144
                                             20 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                0     0      0   24394
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   22223
                                             31 COMRAM     4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   6     2      4    2464
                                             20 COMRAM     6     2      4
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (5) _GETxAPIxVAL                                          2     0      2   15241
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0   15728
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          6     2      4   15728
                                             24 COMRAM     6     2      4
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         6     2      4     782
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROMxREAD                                          7     5      2     395
                                             26 COMRAM     7     5      2
                        _Eeprom_Read
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read                                          8     6      2     236
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _DIAGNOSTICxTOxPC                                     4     4      0    2389
                                             31 COMRAM     4     4      0
                        _SendMessage
 ---------------------------------------------------------------------------------
 (2) _SendMessage                                          4     0      4    2389
                                             34 BANK0      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2147
                                             30 COMRAM     1     1      0
                                             21 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     112
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _DIAGNOSTICxTOxPC
     _SendMessage
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _EEPROMxREAD
     _Eeprom_Read
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _EEPROMxSTORE
       _Eeprom_Store
     _GETxAPIxVAL
     _GETxEMPTYxBUFFER
     _Green_Led
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Red_Led
       _SETxAPIxVAL
         _SENDxMESSAGE
     _SETxAPIxVAL
       _SENDxMESSAGE
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _SETxPWM
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _SETxAPIxVAL
         _SENDxMESSAGE
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     2F8      21       37.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      FC      13       98.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      B6      11       71.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      B6       9       71.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      68       5       65.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3D2      20        0.0%
DATA                 0      0     6CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Dec 07 20:55:01 2017

                  _eusart1TxBufferRemaining 0042                           ?_DIAGNOSTICxTOxPC 0001  
                                        l90 3CAE                                          l92 3CC6  
                                        l93 3CD6                                 __CFG_BOR$ON 000000  
                                        bsr 000FE0                         ___wmul@multiplicand 0015  
                               __CFG_BORV$1 000000                                 ?_GETxAPIxRW 0013  
                              __CFG_CP0$OFF 000000                          ??_DIAGNOSTICxTOxPC 0020  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l202 096A  
                                       l211 0A26                                         l300 1220  
                                       l213 0A66                                         l205 09A8  
                                       l230 0C90                                         l223 144E  
                                       l311 1250                                         l231 0CBC  
                                       l215 0AF0                                         l400 241E  
                                       l312 1254                                         l240 0E5A  
                                       l232 0CEA                                         l224 0B9C  
                                       l208 09E6                                         l313 1258  
                                       l241 0E84                                         l233 0CFA  
                                       l217 0B44                                         l402 2426  
                                       l330 13C4                                         l322 139C  
                                       l314 125E                                         l306 1212  
                                       l250 0FF2                                         l242 0EB0  
                                       l234 0D78                                         l226 0BE2  
                                       l411 24B2                                         l331 1416  
                                       l315 129C                                         l251 0FFA  
                                       l243 0EBA                                         l235 0D88  
                                       l227 0C12                                         l500 273E  
                                       l412 2470                                         l404 2432  
                                       l340 14A0                                         l332 13C8  
                                       l316 12FC                                         l308 126C  
                                       l252 1008                                         l236 0DB2  
                                       l228 0C3C                                         l317 130A  
                                       l261 10A0                                         l253 105A  
                                       l245 0FA8                                         l237 0DDC  
                                       l229 0C66                                         l502 2746  
                                       l406 243E                                         l350 1504  
                                       l334 13CC                                         l326 13AA  
                                       l318 135C                                         l262 1106  
                                       l246 0FB4                                         l238 0E06  
                                       l423 24EE                                         l431 24E0  
                                       l415 2486                                         l343 15C2  
                                       l335 13D8                                         l271 115C  
                                       l263 10D6                                         l247 0FBC  
                                       l239 0E30                                         l504 274E  
                                       l424 24CE                                         l344 14CC  
                                       l336 1440                                         l272 112C  
                                       l264 10B8                                         l248 0FD6  
                                       l409 27BA                                         l417 2492  
                                       l337 171C                                         l353 1520  
                                       l329 13E6                                         l281 12AA  
                                       l506 275E                                         l450 259A  
                                       l362 1574                                         l290 12DA  
                                       l266 10BC                                         l194 08B2  
                                       l435 26B8                                         l427 24D4  
                                       l419 249E                                         l371 1696  
                                       l339 1590                                         l347 14E8  
                                       l283 11A4                                         l267 10C0  
                                       l452 25B2                                         l436 250A  
                                       l372 1614                                         l356 153C  
                                       l292 11E2                                         l268 10C4  
                                       l196 08E6                                         l429 24DA  
                                       l197 1704                                         l269 10C8  
                                       l550 40F2                                         l470 2670  
                                       l454 25CA                                         l382 167A  
                                       l366 1604                                         l278 111E  
                                       l198 08EE                                         l447 256E  
                                       l375 16B2                                         l359 1558  
                                       l199 092C                                         l552 411A  
                                       l640 3744                                         l480 26D4  
                                       l472 2688                                         l376 1642  
                                       l633 37B4                                         l457 25E2  
                                       l289 1196                                         l634 3724  
                                       l490 2716                                         l474 26A0  
                                       l386 16F4                                         l298 11D4  
                                       l651 2BDA                                         l627 379E  
                                       l643 3794                                         l483 26DA  
                                       l467 2640                                         l379 165E  
                                       l652 2B72                                         l628 36DA  
                                       l900 1926                                         l396 2766  
                                       l492 271E                                         l468 2658  
                                       l637 373A                                         l629 3720  
                                       l901 1930                                         l485 26E0  
                                       l662 2C1C                                         l654 2B8E  
                                       l638 376A                                         l910 19B8  
                                       l494 2726                                         l398 2452  
                                       l751 3974                                         l639 3754  
                                       l479 26FA                                         l487 26E6  
                                       l399 240E                                         l672 3C3E  
                                       l752 38DA                                         l664 2C38  
                                       l656 2BAA                                         l904 1946  
                                       l840 3DDA                                         l496 272E  
                                       l913 19CE                                         l905 1968  
                                       l841 3D7E                                         l762 3F32  
                                       l658 2BC4                                         l922 1A4C  
                                       l914 19D8                                         l770 2AE6  
                                       l842 3DF4                                         l850 3DD6  
                                       l498 2736                                         l931 1ACA  
                                       l923 1A56                                         l683 41E4  
                                       l843 3D82                                         l940 1B48  
                                       l932 1AD4                                         l908 19EE  
                                       l844 3D8E                                         l860 3CF4  
                                       l941 1B52                                         l917 1A6C  
                                       l909 1996                                         l781 3EE0  
                                       l845 3DA6                                         l861 3D0C  
                                       l950 1BD0                                         l926 1AEA  
                                       l918 1A14                                         l759 3F18  
                                       l935 1B68                                         l927 1A92  
                                       l919 1A36                                         l767 2B00  
                                       l944 1BE6                                         l936 1B10  
                                       l928 1AB4                                         l872 182E  
                                       l776 3EB8                                         l768 29C0  
                                       l848 3DAE                                         l856 3D40  
                                       l864 3D14                                         l953 1C64  
                                       l945 1B8E                                         l937 1B32  
                                       l881 189E                                         l873 17D6  
                                       l849 3DC6                                         l865 3D2C  
                                       l857 3CE4                                         l962 1CE2  
                                       l954 1C0C                                         l946 1BB0  
                                       l890 190E                                         l882 1846  
                                       l874 17E0                                         l858 3D5A  
                                       l866 3D3C                                         l971 1D60  
                                       l963 1C8A                                         l955 1C2E  
                                       l891 18B6                                         l883 1850  
                                       l859 3CE8                                         l980 1DD0  
                                       l972 1D08                                         l964 1CAC  
                                       l892 18C0                                         l981 1D78  
                                       l973 1D2A                                         l949 1BC6  
                                       l877 17F6                                         _API 0100  
                                       l990 1DE8                                         l982 1D9A  
                                       l958 1C44                                         l886 1866  
                                       l878 1818                                         l991 1E0A  
                                       l967 1CC2                                         l959 1C4E  
                                       l895 18D6                                         l887 1888  
                                       l976 1D40                                         l968 1CCC  
                                       l896 18F8                                         l985 1DB0  
                                       l977 1D4A                                         l994 1E20  
                                       l986 1DBA                                         l995 1E2A  
                                       l899 197E                                         l989 1E40  
                                       l998 1EB0                                         l999 1E58  
                              __CFG_CPB$OFF 000000                                _Stop_Program 0089  
                                       _PR2 000FCB                                __CFG_CPD$OFF 000000  
              Eeprom_Read@Location_Low_Byte 0015                                         prod 000FF3  
                                       wreg 000FE8                      ?_READxRECEIVEDxMESSAGE 0001  
          Train_Move_Right_Start@Return_Val 00C3                                ?_GETxAPIxVAL 0013  
                           APIxInitialize@i 0013                                __CFG_LVP$OFF 000000  
       __end_of_Left_Mountain_From_The_Left 35BA                 _Left_Mountain_From_The_Left 34A8  
                              __CFG_WDT$OFF 000000                                        l1000 1E7A  
                                      l1003 1E90                                        l1004 1E9A  
                                      l1100 3350       __end_of_Right_Mountain_From_The_Right 3394  
    __size_of_Right_Mountain_From_The_Right 0114               _Right_Mountain_From_The_Right 3280  
                                      l1022 2986                                        l1110 36B8  
                                      l1102 3378                                        l1031 28EE  
                                      l1023 27C2                                        l1111 35C0  
                                      l1103 337C                                        l1040 28F4  
                                      l1024 28E0                                        l1041 291E  
                                      l1033 28D0                                        l1042 292C  
                                      l1034 2854                                        l1026 2844  
                                      l1114 35EE                                        l1027 27C8  
                                      l1203 3576                                        l1036 2892  
                                      l1116 36C6                                        l1220 33D0  
                                      l1140 2DA4                                        l1029 2806  
                                      l1205 359E                                        l1125 3684  
                                      l1117 35F4                                        l1213 3496  
                                      l1221 3424                                        l1141 2CC2  
                                      l1206 35A2                                        l1118 3648  
                                      l1230 348C                                        l1214 339A  
                                      l1070 301C                                        l1039 299A  
                                      l1127 36AE                                        l1231 3490  
                                      l1143 2CC8                                        l1071 2F16  
                                      l1128 36B2                                        l1144 2CF0  
                                      l1072 2F68                                        l1240 2EC8  
                                      l1217 33CA                                        l1137 2D88  
                                      l1145 2CFE                                        l1073 2F90  
                                      l1241 2DAA                                        l1146 2D50  
                                      l1138 2C64                                        l1074 2F9A  
                                      l1250 2EBA                                        l1242 2DD8  
                                      l1219 34A4                                        l1091 3390  
                                      l1147 2D7A                                        l1139 2C98  
                                      l1067 3000                                        l1075 2FD2  
                                      l1243 2EE4                                        l1228 3462  
                                      l1092 32BC                                        l1068 2EEA  
                                      l1244 2E02                                        l1172 3136  
                                      l1180 3106                                        l1261 3A84  
                                      l1085 3382                                        l1093 3312  
                                      l1077 2FFA                                        l1069 2F08  
                                      l1181 312C                                        l1173 3022  
                                      l1262 3AC2                                        l1086 3286  
                                      l1246 2E08                                        l1174 3040  
                                      l1247 2E30                                        l1175 3152  
                                      l1192 34DE                                        l1248 2E3E  
                                      l1176 304A                                        l1089 32B6  
                                      l1249 2E90                                        l1177 309E  
                                      l1290 3208                                        l1194 35B6  
                                      l1178 30C6                                        l1291 325A  
                                      l1195 34E4                                        l1179 30D4  
                                      l1292 320E                                        l1284 319E  
                                      l1188 35A8                                        l1196 3538  
                                      l1277 3162                                        l1189 34AE  
                                      l1286 31C6                                        l1278 3172  
                                      l1472 3A10                                        l1473 39D6  
                                      l1730 3F8A                                        l1466 3984  
                                      l1731 3F94                                        l1475 3A42  
                                      l1467 3980                                        l1740 4064  
                                      l1741 406E                                        l1469 39C4  
                                      l1726 3F6A                                        l1727 3F62  
                                      l1647 4224                                        l1736 404C  
                                      l1737 4044                                        l5302 41E4  
                                      l6042 1ED0                                        l6052 1F30  
                                      l6060 38D2                                        l7300 427E  
                                      l9024 1394                                        l8314 3CEA  
                                      l7606 2D82                                        l7470 2F10  
                                      l7438 30CE                                        l9160 1630  
                                      l9064 14BA                                        l8346 3D84  
                                      l7714 3482                                        l7554 2EC2  
                                      l7910 3A0C                                        l8614 2BC4  
                                      l8606 2B8E                                        l8626 2C1C  
                                      l7658 3594                                        l7826 36A4  
                                      l7770 336E                                        l7864 31CA  
                                      l7954 29B8                                        l8748 0CB8  
                                      l8848 0FA8                                        l8882 1090  
                                      STR_1 083A                                        STR_2 0841  
                                      STR_3 0848                                        STR_4 084F  
                                      STR_5 0856                                        STR_6 0848  
                                      STR_7 084F                                        STR_8 0830  
            Right_Mountain_From_The_Left@rc 00AF                                        u4145 40BE  
                                      u7010 356A                                        u5420 395C  
                                      u8000 1EB8                                        u7200 35E0  
                                      u7040 33BC                                        u7120 32A8  
                                      u8100 3E06                                        u5390 1F30  
                                      u7310 31F6                                        u8006 1EBA  
                                      u7330 3264                                        u8050 3D6C  
                                      u7250 3678                                        u7090 3456  
                                      u7170 3344                                        u7420 3EC0  
                                      u8108 3E08                                        u8300 25AE  
                                      u8140 244E                                        u6630 3E7E  
                                      u7510 1836                                        u8310 25C6  
                                      u9030 0EAC                                        u6720 3F6E  
                                      u6640 3FBE                                        u7600 1986  
                                      u7440 3EE8                                        u8400 2684  
                                      u8058 3D6E                                        u6650 3A72  
                                      u8410 269C                                        u7540 18A6  
                                      u7516 1838                                        u9220 1332  
                                      u9140 1030                                        u6750 4050  
                                      u7710 1AF2                                        u7630 19F6  
                                      u7606 1988                                        u7470 2A40  
                                      u7800 1BF0                                        u7720 1AF4  
                                      u7640 19F8                                        u7480 2AEA  
                                      u9240 1394                                        u7570 1916  
                                      u7546 18A8                                        u8290 2596  
                                      u9250 13C0                                        u6780 4098  
                                      u8620 2C28                                        u8380 2654  
                                      u7910 1D68                                        u7830 1C6C  
                                      u7750 1B70                                        u7670 1A74  
                                      u8390 266C                                        u9430 15EA  
                                      u7840 1C6E                                        u7760 1B72  
                                      u7680 1A76                                        u7576 1918  
                                      u6960 34D0                                        u8640 087C  
                                      u8580 2B9A                                        u7940 1DD8  
                                      u7916 1D6A                                        u9540 16DA  
                                      u8820 0B84                                        u7870 1CEA  
                                      u7790 1BEE                                        u7880 1CEC  
                                      u9650 3BC6                                        u7970 1E48  
                                      u7946 1DDA                                        u9660 3C34  
                                      u9580 370C                                        u8780 0A96  
                                      u8790 0B20                                        u7976 1E4A  
                                      u9697 3CA0                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                        _Data 0090  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 23E4  
            __size_of_Train_Move_Left_Brake 0146               __end_of_Train_Move_Left_Brake 2DA8  
                                      _pLen 0074                                        _atoi 397E  
                                      _main 3C44                               ?_EUSART1_Read 0001  
            __size_of_Train_Move_Left_Start 0138                       _Update_StateMchn$2190 00B5  
                     _Update_StateMchn$2191 00B7                             __end_of_SETxPWM 3AF8  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        fsr0l 000FE9  
                                      indf2 000FDF                                        fsr1l 000FE1  
                                      fsr2l 000FD9                                        btemp 004D  
             __end_of_Train_Move_Left_Start 3020                                        prodh 000FF4  
                                      prodl 000FF3                                        start 00C6  
                           __end_of_DataLen 0830                         __end_of_Eeprom_Read 3F4C  
                             __CFG_IESO$OFF 000000                             __end_of_ApiList 0825  
               EUSART1_Initialize@baud_rate 0013                          Green_Led@Operation 0020  
                             __CFG_MCLRE$ON 000000                                ___param_bank 000000  
                      Eeprom_Store@Location 0013                               ??_Init_Timers 0013  
                           __end_of_Red_Led 3D7A                               __CFG_PLLDIV$5 000000  
                           EEPROMxREAD@Data 001F                        __end_of_EEPROMxSTORE 2B0A  
                            __CFG_CCP2MX$ON 000000                                       ?_atoi 0019  
                                     ?_main 0001                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 0020  
                                     _T0CON 000FD5                  __end_of_SETxAPIxVALxNoxRET 40B4  
                                     _T2CON 000FCA                             __end_of___lwdiv 3F9E  
                              SETxPWM@speed 001F                                       i2l110 3856  
                                     i2l111 3860                             __end_of___lwmod 4078  
                                     i2l106 384C                                       i2l107 382A  
                                     i2l108 382C                                       i2l109 3840  
                                     i2l571 414C                                       i2l572 4148  
                                     i2l577 4158                                       i2l578 4178  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 4122  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                                _WritePointer 0072  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                                       _pData 0076  
                            __CFG_EBTRB$OFF 000000                             __end_of_dpowers 082F  
                           __end_of_isdigit 422C                             __end_of_tc_high 38AC  
                                     atoi@a 001E                                       atoi@s 0019  
                                     _putch 427C                                       pclath 000FFA  
                                     tablat 000FF5                             ?_APIxInitialize 0001  
                            ??_EUSART1_Read 0013                                       status 000FD8  
                                     wtemp6 004E   Train_Move_Left_Brake@Train_Move_Wait_Time 0062  
                 __size_of_TranslateMessage 0158                         __size_of_GETxAPIxRW 001C  
                            __CFG_ICPRT$OFF 000000                        __end_of_Eeprom_Store 3EF0  
                                _ReadActive 006C                        __size_of_EEPROMxREAD 00D2  
                           __initialization 3AF8                           ?_GETxEMPTYxBUFFER 0013  
                              __end_of_atoi 3A4C                  __end_of_EUSART1_Initialize 4036  
                              __end_of_main 3CE0                          ??_GETxEMPTYxBUFFER 0015  
                             ??_SendMessage 0020                            __end_of_Init_Pwm 41A4  
                                    ??_atoi 001B                                      ??_main 00C0  
                       __end_of_Init_Timers 427C                               __activetblptr 000002  
                    Eeprom_Read@Return_Data 0019                            __end_of_Junction 299E  
                              _Led1_Counter 002C                           _Green_Led_Counter 002A  
                     ?_EUSART1_Transmit_ISR 0001                           ?_Update_StateMchn 0001  
                        ??_Update_StateMchn 00B3                                      _ADCON1 000FC1  
                                    _EEDATA 000FA8                                      _CCPR1L 000FBE  
                                 ??_SETxPWM 0022                                      _EECON2 000FA7  
                                    ?_putch 0001                                      _API_RW 0200  
                        __size_of_Green_Led 009A                                 _Eeprom_Read 3EF0  
                                    _INTCON 000FF2                     ?_Train_Move_Right_Brake 0001  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 003A                     ?_Train_Move_Right_Start 0001  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 0001  
                                 ??_Red_Led 001F                              __CFG_XINST$OFF 000000  
           Train_Move_Left_Brake@Return_Val 00C4                                      ___wmul 41A4  
                            __CFG_STVREN$ON 000000                             _Train_Pos1_Temp 007C  
                           _Train_Pos2_Temp 007A                                   ??___lwdiv 0017  
                                 ??___lwmod 001E                                      clear_0 3B40  
                                    clear_1 3B52                                      clear_2 3B5E  
                              _DelayCounter 006E                                      clear_3 3B6A  
                                    clear_4 3B76                                      clear_5 3B82  
                                    clear_6 3B8E                                      _tc_low 0018  
                                    _printf 3156                              _Switch_Moutain 002E  
                                _Train_Path 23E4     Right_Mountain_From_The_Right@Return_Val 004B  
    Left_Mountain_From_The_Right@Return_Val 004A                                __pdataCOMRAM 0048  
                            _Switch_Program 008D                                   ??_isdigit 0013  
                                 ??_tc_high 0001                         __end_of_SendMessage 420E  
                 _Activate_Controls_Counter 007E                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 0019  
                      _Train_Move_Wait_Time 0064                   _Button_Contact_Counter_LB 0033  
                 _Button_Contact_Counter_LF 0032                   _Button_Contact_Counter_RB 0031  
                 _Button_Contact_Counter_RF 0030              __end_of_Train_Move_Right_Brake 2EE8  
                           _eusart1RxBuffer 0400                        __size_of_GETxAPIxVAL 001C  
                           _eusart1TxBuffer 047E              __end_of_Train_Move_Right_Start 3156  
                      _Train_Move_Pwm_Count 0082                                  __accesstop 0060  
                   __end_of__initialization 3B94                             __CFG_PBADEN$OFF 000000  
                             ___rparam_used 000001                       __size_of_EEPROMxSTORE 016C  
                             _Received_Data 0088                              __pcstackCOMRAM 0001  
                              __pidataBANK0 4288                                 _Init_Timers 4264  
                             __end_of_putch 4288                           __end_of_Green_Led 3E14  
                               _ReadPointer 0070                                ??_GETxAPIxRW 0015  
                   ??_READxRECEIVEDxMESSAGE 0024                        __end_of_EUSART1_Read 4122  
                         __end_of_SetDCPWM1 40EE                             _Red_Led_Counter 0028  
                    ??_EUSART1_Transmit_ISR 0001                    __size_of_Debounce_Inputs 0786  
               __end_of_EUSART1_Receive_ISR 417C            Train_Move_Right_Brake@Return_Val 00C2  
                             ?_SENDxMESSAGE 0013                   __size_of_DIAGNOSTICxTOxPC 00A2  
                                   ??_putch 0013                               _eusart1RxHead 0041  
                             _eusart1TxHead 0044                       __size_of_Eeprom_Store 0068  
               Junction@Junction_Left_Right 0020                               _eusart1RxTail 0040  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                __pbssBANK2 0200                                  __pbssBANK3 0300  
                                __pbssBANK4 0400                               _eusart1TxTail 0043  
                              _EEPROMxSTORE 299E                                   ?_Init_Pwm 0001  
                          _TranslateMessage 2B0A                          __end_of_GETxAPIxRW 4264  
                          GETxAPIxVAL@index 0013                            SETxAPIxVAL@index 0019  
                                 ?_Junction 001F                            SETxAPIxVAL@value 001B  
      __size_of_Left_Mountain_From_The_Left 0112                                     ?___wmul 0013  
                          SendMessage@index 00BC                            SendMessage@value 00BE  
                                   _CCP1CON 000FBD                                 _SendMessage 41EE  
                                   ?_tc_low 0001                                     ?_printf 00AF  
                               ?_Train_Path 00B1                                _Eeprom_Store 3E88  
                                   _INTCON2 000FF1                               _SW_RESET_PREV 0078  
                            ??_SENDxMESSAGE 0017                            ??_APIxInitialize 0013  
                                   _SETxPWM 3A4C                            SETxPWM@direction 0021  
                                   _DataLen 082F                                     _ApiList 0801  
                        _SETxAPIxVALxNoxRET 4078                             __CFG_VREGEN$OFF 000000  
                                ??_Init_Pwm 001F                           Eeprom_Store@Value 0015  
                                   _Red_Led 3CE0                       _Train_Move_Left_Brake 2C62  
                                ??_Junction 0020                                     __Hparam 0000  
                       ?_SETxAPIxVALxNoxRET 0015                       _Train_Move_Left_Start 2EE8  
                                   __Lparam 0000                        _Message_To_Translate 0086  
                           __size_of___wmul 0026                                     ___lwdiv 3F4C  
                                   ___lwmod 4036                                __psmallconst 0800  
                                   __pcinit 3AF8                                     __ramtop 0800  
                           __size_of_tc_low 00AE                                     __ptext0 3C44  
                                   __ptext1 085E                                     __ptext2 23E4  
                                   __ptext3 3020                                     __ptext4 2DA8  
                                   __ptext5 2EE8                                     __ptext6 2C62  
                                   __ptext7 3280                                     __ptext8 3394  
                                   __ptext9 35BA                        Train_Path@Return_Val 00C6  
                           __size_of_printf 012A                                     _dpowers 0825  
                                   _isdigit 420E                                     _tc_high 0008  
                      ??_SETxAPIxVALxNoxRET 0019                          _EUSART1_Initialize 3FEE  
                 __size_of_GETxEMPTYxBUFFER 0024                   _Train_Move_Pwm_Fast_Count 0066  
                            __pintcode_body 37CC                        end_of_initialization 3B94  
                           _Switch_Junction 002F                                ?_Eeprom_Read 0013  
                         ??_Debounce_Inputs 001F                         ?_EUSART1_Initialize 0001  
                      __size_of_SETxAPIxVAL 0050                               __Lmediumconst 0000  
                                   int_func 37CC                            SETxPWM@pwm_speed 0024  
                             ??_EEPROMxREAD 001D                   __size_of_Update_StateMchn 0EE4  
                       __size_of_Train_Path 03DA                                   _RCSTAbits 000FAB  
                                   printf@c 00BB                                     printf@f 00AF  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                       __size_of_EUSART1_Read 0034  
                      EEPROMxSTORE@api_list 00AF              Left_Mountain_From_The_Right@rc 00AF  
                      ??_EUSART1_Initialize 0013                                   _PORTAbits 000F80  
                                 _PORTBbits 000F81                                   _PORTCbits 000F82  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                                 _TRISEbits 000F96                         Eeprom_Read@Location 0013  
                          _DIAGNOSTICxTOxPC 3BA2                Junction@Junction_Switch_Time 0068  
                    ?_Train_Move_Left_Brake 0001                                _EUSART1_Read 40EE  
                                 _TXSTAbits 000FAC                      ?_Train_Move_Left_Start 0001  
                               _Switch_Main 00C7                                 _Switch_Init 008E  
                             EEPROMxSTORE@i 00B0                        __end_of_SENDxMESSAGE 3E88  
                       __end_of_EEPROMxREAD 397E                                ?_Init_Timers 0001  
                               _WriteActive 006A                                   _Comm_List 04FC  
                        Junction@Return_Val 004C                              __end_of___wmul 41CA  
                               _BAUDCONbits 000FB8                               __pidataCOMRAM 428E  
               _Train_Move_Right_Brake$2195 00AF                        _Update_State_Machine 008F  
                            __end_of_tc_low 00C6                    __end_of_TranslateMessage 2C62  
               _Button_Contact_Counter_Stop 0035                              __end_of_printf 3280  
            __size_of_READxRECEIVEDxMESSAGE 0102                                   _Green_Led 3D7A  
             __end_of_READxRECEIVEDxMESSAGE 37CC                         start_initialization 3AF8  
                             ??_GETxAPIxVAL 0015                                   _SetDCPWM1 40B4  
                           SetDCPWM1@DCycle 0019                      _Mountain_Delay_Counter 0026  
              ?_Left_Mountain_From_The_Left 0001               Eeprom_Store@Location_Low_Byte 0017  
                         __size_of_Init_Pwm 0028               Eeprom_Read@Location_High_Byte 0017  
                         __size_of_Junction 01E0                                    ??___wmul 0017  
                               __pdataBANK0 00C2                            __CFG_LPT1OSC$OFF 000000  
                              ?_SendMessage 00BC                                    ??_tc_low 009A  
                                  ??_printf 001F                              _eusart1RxCount 003F  
                              ??_Train_Path 0026                                  ?_Green_Led 0001  
                               __pbssBIGRAM 04FC                                 __pbssCOMRAM 0026  
             __size_of_EUSART1_Transmit_ISR 002E                            _GETxEMPTYxBUFFER 41CA  
                             __pcstackBANK0 009A                                  ?_SetDCPWM1 0015  
Train_Move_Right_Brake@Train_Move_Wait_Time 0060                                _isdigit$1847 0014  
                                  ?_SETxPWM 001F                __size_of_EUSART1_Receive_ISR 002C  
                       __end_of_GETxAPIxVAL 4248               ??_Left_Mountain_From_The_Left 0026  
                      __size_of_Eeprom_Read 005C                                 _EEPROMxREAD 38AC  
                                  ?_Red_Led 0001                            _Update_StateMchn 085E  
                          ___lwdiv@dividend 0013       Left_Mountain_From_The_Left@Return_Val 0049  
    Right_Mountain_From_The_Left@Return_Val 0048                          __end_of_Train_Path 27BE  
                                 __pintcode 0008                                    ?___lwdiv 0013  
      __end_of_Left_Mountain_From_The_Right 36CA       __size_of_Left_Mountain_From_The_Right 0110  
              _Left_Mountain_From_The_Right 35BA                                    ?___lwmod 001A  
                               __pintcodelo 0018                             GETxAPIxRW@index 0013  
                           _Debounce_Inputs 1742                                 __smallconst 0800  
                  ??_Train_Move_Right_Brake 0026                                    ?_isdigit 0001  
                                  ?_tc_high 0001             Right_Mountain_From_The_Right@rc 00AF  
                  ??_Train_Move_Right_Start 0026                       TranslateMessage@Index 0022  
                     Junction@Straight_Bend 001F                       TranslateMessage@Value 0020  
              _Button_Contact_Counter_Start 0036                    _Reed_Contact_LMD_Counter 0039  
                          ___lwdiv@quotient 0018                  _Train_Move_Left_Brake$2193 00AF  
                            __size_of_putch 000C                 _Train_Move_Right_Start$2194 00AF  
                            ___wmul@product 0017                       __size_of_SENDxMESSAGE 0074  
      __end_of_Right_Mountain_From_The_Left 34A8       __size_of_Right_Mountain_From_The_Left 0114  
              _Right_Mountain_From_The_Left 3394                                    _PIE1bits 000F9D  
                            _Adjust_Counter 0080               Left_Mountain_From_The_Left@rc 00AF  
                                  _PIR1bits 000F9E                                    _PIR2bits 000FA1  
            Eeprom_Store@Location_High_Byte 0019                                    _RCONbits 000FD0  
                            Train_Path@From 00B2                    __end_of_DIAGNOSTICxTOxPC 3C44  
                      __size_of_Init_Timers 0018               ?_Left_Mountain_From_The_Right 0001  
                         ___wmul@multiplier 0013                           SENDxMESSAGE@index 0013  
                         SENDxMESSAGE@value 0015                                 ??_Green_Led 001F  
                                printf@flag 00B7                                  printf@prec 00B8  
                              EEPROMxREAD@i 0021                 __size_of_SETxAPIxVALxNoxRET 003C  
                               ??_SetDCPWM1 0017                                 _GETxAPIxVAL 422C  
                             ??_SETxAPIxVAL 001D                                _SENDxMESSAGE 3E14  
                                 copy_data0 3B0C                                   copy_data1 3B2C  
                   ??_Train_Move_Left_Brake 0026                    _Reed_Contact_LMU_Counter 003A  
                          __size_of_SETxPWM 00AC                     ??_Train_Move_Left_Start 0026  
                        SetDCPWM1@dutycycle 0015                                    _Init_Pwm 417C  
                     EUSART1_Read@readValue 0013                                  _EECON1bits 000FA6  
                   __size_of_APIxInitialize 051C                                    __Hrparam 0000  
                                  _Junction 27BE                            __size_of_Red_Led 009A  
             ?_Right_Mountain_From_The_Left 0001                                    __Lrparam 0000  
                                  _TrSwitch 0085                                    _RxSwitch 0087  
                  _Reed_Contact_RMD_Counter 0037                     __end_of_Debounce_Inputs 1EC8  
               __size_of_EUSART1_Initialize 0048                            __size_of___lwdiv 0052  
                          __size_of___lwmod 0042                           _Switch_Train_Path 008A  
                         _Switch_Train_Move 0084                            _Switch_Adjust_LB 0046  
                          _Switch_Adjust_LF 0045                            _Switch_Adjust_RB 008C  
                          _Switch_Adjust_RF 008B                        __size_of_SendMessage 0020  
                         ?_TranslateMessage 0001                                  _API_EEPROM 0300  
           __size_of_Train_Move_Right_Brake 0140                            __size_of_isdigit 001E  
                          __size_of_tc_high 38A4                          ??_TranslateMessage 0020  
                           ___lwdiv@divisor 0015             __size_of_Train_Move_Right_Start 0136  
                           ___lwdiv@counter 0017                                    __ptext10 34A8  
                                  __ptext11 3A4C                                    __ptext20 36CA  
                                  __ptext12 27BE                                    __ptext21 2B0A  
                                  __ptext13 3CE0                                    __ptext30 417C  
                                  __ptext22 397E                                    __ptext14 3D7A  
                                  __ptext31 3F9E                                    __ptext23 420E  
                                  __ptext15 41CA                                    __ptext40 4036  
                                  __ptext32 3E14                                    __ptext24 41A4  
                                  __ptext16 299E                                    __ptext41 3F4C  
                                  __ptext33 3FEE                                    __ptext25 4078  
                                  __ptext17 3E88                                    __ptext42 1EC8  
                                  __ptext34 38AC                                    __ptext26 422C  
                                  __ptext18 1742                                    __ptext35 3EF0  
                                  __ptext27 4248                                    __ptext19 40B4  
                                  __ptext36 3BA2                                    __ptext28 40EE  
                                  __ptext45 4122                                    __ptext37 41EE  
                                  __ptext29 4264                                    __ptext46 4150  
                                  __ptext38 3156                                    __ptext39 427C  
                             ?_EEPROMxSTORE 001B                               __size_of_atoi 00CE  
                             __size_of_main 009C                         __end_of_SETxAPIxVAL 3FEE  
                   _Reed_Contact_LB_Counter 003D                    __end_of_GETxEMPTYxBUFFER 41EE  
                                  int$flags 004D                     _Reed_Contact_LF_Counter 003E  
                                  atoi@sign 001D                  _Train_Move_Left_Start$2192 00AF  
                  _Reed_Contact_RMU_Counter 0038                                   printf@val 00B9  
                       _EUSART1_Receive_ISR 4150                                  _GETxAPIxRW 4248  
                     __CFG_CPUDIV$OSC2_PLL3 000000                                   putch@data 0013  
                             ?_Eeprom_Store 0013                    __end_of_Update_StateMchn 1742  
                                _INTCONbits 000FF2             ??_Right_Mountain_From_The_Right 0026  
            ??_Left_Mountain_From_The_Right 0026                       _READxRECEIVEDxMESSAGE 36CA  
                                  isdigit@c 0015                     _Reed_Contact_RB_Counter 003B  
                            ??_EEPROMxSTORE 001D                                    intlevel1 0000  
                                  intlevel2 0000                        ?_EUSART1_Receive_ISR 0001  
                          ___lwmod@dividend 001A                                ?_EEPROMxREAD 001B  
                                _RCSTA1bits 000FAB                     _Reed_Contact_RF_Counter 003C  
                    _Train_Move_Right_Brake 2DA8                __end_of_EUSART1_Transmit_ISR 4150  
                    _Train_Move_Right_Start 3020             Train_Move_Left_Start@Return_Val 00C5  
                              Train_Path@To 00B1                                    printf@ap 00B5  
                          ?_Debounce_Inputs 0001                    _Switch_Activate_Controls 0047  
            ??_Right_Mountain_From_The_Left 0026                              ??_Eeprom_Store 0017  
                           ___lwmod@divisor 001C                             ___lwmod@counter 001E  
                   SETxAPIxVALxNoxRET@index 0015                                 _SETxAPIxVAL 3F9E  
                   SETxAPIxVALxNoxRET@value 0017                               ??_Eeprom_Read 0015  
                        __CFG_FOSC$HSPLL_HS 000000                       ??_EUSART1_Receive_ISR 0001  
                            _APIxInitialize 1EC8               _Button_Contact_Counter_Middle 0034  
