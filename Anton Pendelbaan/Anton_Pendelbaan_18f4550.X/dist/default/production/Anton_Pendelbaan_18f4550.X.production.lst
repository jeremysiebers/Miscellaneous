

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Oct 11 21:50:57 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	idataCOMRAM
    57  002DD6                     __pidataCOMRAM:
    58                           	opt stack 0
    59                           
    60                           ;initializer for Train_Path@Return_Val
    61  002DD6  01                 	db	1
    62                           
    63                           	psect	idataBANK0
    64  002DC4                     __pidataBANK0:
    65                           	opt stack 0
    66                           
    67                           ;initializer for Junction@Return_Val
    68  002DC4  01                 	db	1
    69                           
    70                           ;initializer for Left_Mountain_From_The_Left@Return_Val
    71  002DC5  01                 	db	1
    72                           
    73                           ;initializer for Left_Mountain_From_The_Right@Return_Val
    74  002DC6  01                 	db	1
    75                           
    76                           ;initializer for Right_Mountain_From_The_Left@Return_Val
    77  002DC7  01                 	db	1
    78                           
    79                           ;initializer for Right_Mountain_From_The_Right@Return_Val
    80  002DC8  01                 	db	1
    81                           
    82                           ;initializer for Train_Move_Left_Brake@Return_Val
    83  002DC9  01                 	db	1
    84                           
    85                           ;initializer for Train_Move_Left_Start@Return_Val
    86  002DCA  01                 	db	1
    87                           
    88                           ;initializer for Train_Move_Right_Brake@Return_Val
    89  002DCB  01                 	db	1
    90                           
    91                           ;initializer for Train_Move_Right_Start@Return_Val
    92  002DCC  01                 	db	1
    93  0000                     _ADCON1	set	4033
    94  0000                     _BAUDCONbits	set	4024
    95  0000                     _CCP1CON	set	4029
    96  0000                     _CCPR1L	set	4030
    97  0000                     _CMCON	set	4020
    98  0000                     _EEADR	set	4009
    99  0000                     _EECON1bits	set	4006
   100  0000                     _EECON2	set	4007
   101  0000                     _EEDATA	set	4008
   102  0000                     _INTCON	set	4082
   103  0000                     _INTCON2	set	4081
   104  0000                     _INTCONbits	set	4082
   105  0000                     _PIE1bits	set	3997
   106  0000                     _PIR1bits	set	3998
   107  0000                     _PIR2bits	set	4001
   108  0000                     _PORTAbits	set	3968
   109  0000                     _PORTBbits	set	3969
   110  0000                     _PORTCbits	set	3970
   111  0000                     _PORTDbits	set	3971
   112  0000                     _PORTEbits	set	3972
   113  0000                     _PR2	set	4043
   114  0000                     _RCONbits	set	4048
   115  0000                     _RCREG1	set	4014
   116  0000                     _RCSTA1bits	set	4011
   117  0000                     _RCSTAbits	set	4011
   118  0000                     _SPBRG	set	4015
   119  0000                     _SPBRGH	set	4016
   120  0000                     _T0CON	set	4053
   121  0000                     _T2CON	set	4042
   122  0000                     _TMR0H	set	4055
   123  0000                     _TMR0L	set	4054
   124  0000                     _TRISA	set	3986
   125  0000                     _TRISAbits	set	3986
   126  0000                     _TRISB	set	3987
   127  0000                     _TRISBbits	set	3987
   128  0000                     _TRISC	set	3988
   129  0000                     _TRISCbits	set	3988
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISDbits	set	3989
   132  0000                     _TRISE	set	3990
   133  0000                     _TRISEbits	set	3990
   134  0000                     _TXREG1	set	4013
   135  0000                     _TXSTAbits	set	4012
   136                           
   137                           ; #config settings
   138  0000                     
   139                           	psect	cinit
   140  002AA0                     __pcinit:
   141                           	opt stack 0
   142  002AA0                     start_initialization:
   143                           	opt stack 0
   144  002AA0                     __initialization:
   145                           	opt stack 0
   146                           
   147                           ; Clear objects allocated to BANK2 (126 bytes)
   148  002AA0  EE02  F000         	lfsr	0,__pbssBANK2
   149  002AA4  0E7E               	movlw	126
   150  002AA6                     clear_0:
   151  002AA6  6AEE               	clrf	postinc0,c
   152  002AA8  06E8               	decf	wreg,f,c
   153  002AAA  E1FD               	bnz	clear_0
   154                           
   155                           ; Clear objects allocated to BANK1 (252 bytes)
   156  002AAC  EE01  F000         	lfsr	0,__pbssBANK1
   157  002AB0  0EFC               	movlw	252
   158  002AB2                     clear_1:
   159  002AB2  6AEE               	clrf	postinc0,c
   160  002AB4  06E8               	decf	wreg,f,c
   161  002AB6  E1FD               	bnz	clear_1
   162                           
   163                           ; Clear objects allocated to BANK0 (144 bytes)
   164  002AB8  EE00  F060         	lfsr	0,__pbssBANK0
   165  002ABC  0E90               	movlw	144
   166  002ABE                     clear_2:
   167  002ABE  6AEE               	clrf	postinc0,c
   168  002AC0  06E8               	decf	wreg,f,c
   169  002AC2  E1FD               	bnz	clear_2
   170                           
   171                           ; Clear objects allocated to COMRAM (43 bytes)
   172  002AC4  EE00  F001         	lfsr	0,__pbssCOMRAM
   173  002AC8  0E2B               	movlw	43
   174  002ACA                     clear_3:
   175  002ACA  6AEE               	clrf	postinc0,c
   176  002ACC  06E8               	decf	wreg,f,c
   177  002ACE  E1FD               	bnz	clear_3
   178                           
   179                           ; Initialize objects allocated to BANK0 (9 bytes)
   180                           ; load TBLPTR registers with __pidataBANK0
   181  002AD0  0EC4               	movlw	low __pidataBANK0
   182  002AD2  6EF6               	movwf	tblptrl,c
   183  002AD4  0E2D               	movlw	high __pidataBANK0
   184  002AD6  6EF7               	movwf	tblptrh,c
   185  002AD8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   186  002ADA  6EF8               	movwf	tblptru,c
   187  002ADC  EE00  F0F0         	lfsr	0,__pdataBANK0
   188  002AE0  EE10 F009          	lfsr	1,9
   189  002AE4                     copy_data0:
   190  002AE4  0009               	tblrd		*+
   191  002AE6  CFF5 FFEE          	movff	tablat,postinc0
   192  002AEA  50E5               	movf	postdec1,w,c
   193  002AEC  50E1               	movf	fsr1l,w,c
   194  002AEE  E1FA               	bnz	copy_data0
   195                           
   196                           ; Initialize objects allocated to COMRAM (1 bytes)
   197                           ; load TBLPTR registers with __pidataCOMRAM
   198  002AF0  0ED6               	movlw	low __pidataCOMRAM
   199  002AF2  6EF6               	movwf	tblptrl,c
   200  002AF4  0E2D               	movlw	high __pidataCOMRAM
   201  002AF6  6EF7               	movwf	tblptrh,c
   202  002AF8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   203  002AFA  6EF8               	movwf	tblptru,c
   204  002AFC  0009               	tblrd		*+	;fetch initializer
   205  002AFE  CFF5 F04C          	movff	tablat,__pdataCOMRAM
   206  002B02                     end_of_initialization:
   207                           	opt stack 0
   208  002B02                     __end_of__initialization:
   209                           	opt stack 0
   210  002B02  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   211  002B04  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   212  002B06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   213  002B08  6EF8               	movwf	tblptru,c
   214  002B0A  0100               	movlb	0
   215  002B0C  EF88  F015         	goto	_main	;jump to C main() function
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           postdec1	equ	0xFE5
   223                           fsr1l	equ	0xFE1
   224                           
   225                           	psect	bssCOMRAM
   226  000001                     __pbssCOMRAM:
   227                           	opt stack 0
   228  000001                     _Adjust_Counter:
   229                           	opt stack 0
   230  000001                     	ds	2
   231  000003                     _Green_Led_Counter:
   232                           	opt stack 0
   233  000003                     	ds	2
   234  000005                     _Mountain_Delay_Counter:
   235                           	opt stack 0
   236  000005                     	ds	2
   237  000007                     _Red_Led_Counter:
   238                           	opt stack 0
   239  000007                     	ds	2
   240  000009                     _Train_Move_Pwm_Count:
   241                           	opt stack 0
   242  000009                     	ds	2
   243  00000B                     _Train_Move_Pwm_Fast_Count:
   244                           	opt stack 0
   245  00000B                     	ds	2
   246  00000D                     _Button_Contact_Counter_LB:
   247                           	opt stack 0
   248  00000D                     	ds	1
   249  00000E                     _Button_Contact_Counter_Middle:
   250                           	opt stack 0
   251  00000E                     	ds	1
   252  00000F                     _Button_Contact_Counter_Start:
   253                           	opt stack 0
   254  00000F                     	ds	1
   255  000010                     _Button_Contact_Counter_Stop:
   256                           	opt stack 0
   257  000010                     	ds	1
   258  000011                     _Reed_Contact_LB_Counter:
   259                           	opt stack 0
   260  000011                     	ds	1
   261  000012                     _Reed_Contact_LF_Counter:
   262                           	opt stack 0
   263  000012                     	ds	1
   264  000013                     _Reed_Contact_LMD_Counter:
   265                           	opt stack 0
   266  000013                     	ds	1
   267  000014                     _Reed_Contact_LMU_Counter:
   268                           	opt stack 0
   269  000014                     	ds	1
   270  000015                     _Reed_Contact_RB_Counter:
   271                           	opt stack 0
   272  000015                     	ds	1
   273  000016                     _Reed_Contact_RF_Counter:
   274                           	opt stack 0
   275  000016                     	ds	1
   276  000017                     _Reed_Contact_RMD_Counter:
   277                           	opt stack 0
   278  000017                     	ds	1
   279  000018                     _Reed_Contact_RMU_Counter:
   280                           	opt stack 0
   281  000018                     	ds	1
   282  000019                     _Stop_Program:
   283                           	opt stack 0
   284  000019                     	ds	1
   285  00001A                     _Switch_Activate_Controls:
   286                           	opt stack 0
   287  00001A                     	ds	1
   288  00001B                     _Switch_Adjust_LB:
   289                           	opt stack 0
   290  00001B                     	ds	1
   291  00001C                     _Switch_Adjust_LF:
   292                           	opt stack 0
   293  00001C                     	ds	1
   294  00001D                     _Switch_Adjust_RB:
   295                           	opt stack 0
   296  00001D                     	ds	1
   297  00001E                     _Switch_Adjust_RF:
   298                           	opt stack 0
   299  00001E                     	ds	1
   300  00001F                     _Switch_Init:
   301                           	opt stack 0
   302  00001F                     	ds	1
   303  000020                     _Switch_Main:
   304                           	opt stack 0
   305  000020                     	ds	1
   306  000021                     _Switch_Moutain:
   307                           	opt stack 0
   308  000021                     	ds	1
   309  000022                     _Switch_Program:
   310                           	opt stack 0
   311  000022                     	ds	1
   312  000023                     _Switch_Train_Move:
   313                           	opt stack 0
   314  000023                     	ds	1
   315  000024                     _Switch_Train_Path:
   316                           	opt stack 0
   317  000024                     	ds	1
   318  000025                     _Update_State_Machine:
   319                           	opt stack 0
   320  000025                     	ds	1
   321  000026                     _eusart1RxCount:
   322                           	opt stack 0
   323  000026                     	ds	1
   324  000027                     _eusart1RxHead:
   325                           	opt stack 0
   326  000027                     	ds	1
   327  000028                     _eusart1RxTail:
   328                           	opt stack 0
   329  000028                     	ds	1
   330  000029                     _eusart1TxBufferRemaining:
   331                           	opt stack 0
   332  000029                     	ds	1
   333  00002A                     _eusart1TxHead:
   334                           	opt stack 0
   335  00002A                     	ds	1
   336  00002B                     _eusart1TxTail:
   337                           	opt stack 0
   338  00002B                     	ds	1
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           postdec1	equ	0xFE5
   346                           fsr1l	equ	0xFE1
   347                           
   348                           	psect	dataCOMRAM
   349  00004C                     __pdataCOMRAM:
   350                           	opt stack 0
   351  00004C                     Train_Path@Return_Val:
   352                           	opt stack 0
   353  00004C                     	ds	1
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           postdec1	equ	0xFE5
   361                           fsr1l	equ	0xFE1
   362                           
   363                           	psect	bssBANK0
   364  000060                     __pbssBANK0:
   365                           	opt stack 0
   366  000060                     _API:
   367                           	opt stack 0
   368  000060                     	ds	126
   369  0000DE                     Junction@Junction_Switch_Time:
   370                           	opt stack 0
   371  0000DE                     	ds	2
   372  0000E0                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   373                           	opt stack 0
   374  0000E0                     	ds	2
   375  0000E2                     Train_Move_Left_Start@Train_Move_Wait_Time:
   376                           	opt stack 0
   377  0000E2                     	ds	2
   378  0000E4                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   379                           	opt stack 0
   380  0000E4                     	ds	2
   381  0000E6                     Train_Move_Right_Start@Train_Move_Wait_Time:
   382                           	opt stack 0
   383  0000E6                     	ds	2
   384  0000E8                     _Activate_Controls_Counter:
   385                           	opt stack 0
   386  0000E8                     	ds	2
   387  0000EA                     _Led1_Counter:
   388                           	opt stack 0
   389  0000EA                     	ds	2
   390  0000EC                     _Button_Contact_Counter_LF:
   391                           	opt stack 0
   392  0000EC                     	ds	1
   393  0000ED                     _Button_Contact_Counter_RB:
   394                           	opt stack 0
   395  0000ED                     	ds	1
   396  0000EE                     _Button_Contact_Counter_RF:
   397                           	opt stack 0
   398  0000EE                     	ds	1
   399  0000EF                     _Switch_Junction:
   400                           	opt stack 0
   401  0000EF                     	ds	1
   402                           tblptru	equ	0xFF8
   403                           tblptrh	equ	0xFF7
   404                           tblptrl	equ	0xFF6
   405                           tablat	equ	0xFF5
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           postdec1	equ	0xFE5
   409                           fsr1l	equ	0xFE1
   410                           
   411                           	psect	dataBANK0
   412  0000F0                     __pdataBANK0:
   413                           	opt stack 0
   414  0000F0                     Junction@Return_Val:
   415                           	opt stack 0
   416  0000F0                     	ds	1
   417  0000F1                     Left_Mountain_From_The_Left@Return_Val:
   418                           	opt stack 0
   419  0000F1                     	ds	1
   420  0000F2                     Left_Mountain_From_The_Right@Return_Val:
   421                           	opt stack 0
   422  0000F2                     	ds	1
   423  0000F3                     Right_Mountain_From_The_Left@Return_Val:
   424                           	opt stack 0
   425  0000F3                     	ds	1
   426  0000F4                     Right_Mountain_From_The_Right@Return_Val:
   427                           	opt stack 0
   428  0000F4                     	ds	1
   429  0000F5                     Train_Move_Left_Brake@Return_Val:
   430                           	opt stack 0
   431  0000F5                     	ds	1
   432  0000F6                     Train_Move_Left_Start@Return_Val:
   433                           	opt stack 0
   434  0000F6                     	ds	1
   435  0000F7                     Train_Move_Right_Brake@Return_Val:
   436                           	opt stack 0
   437  0000F7                     	ds	1
   438  0000F8                     Train_Move_Right_Start@Return_Val:
   439                           	opt stack 0
   440  0000F8                     	ds	1
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	bssBANK1
   451  000100                     __pbssBANK1:
   452                           	opt stack 0
   453  000100                     _API_RW:
   454                           	opt stack 0
   455  000100                     	ds	126
   456  00017E                     _eusart1TxBuffer:
   457                           	opt stack 0
   458  00017E                     	ds	126
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	bssBANK2
   469  000200                     __pbssBANK2:
   470                           	opt stack 0
   471  000200                     _eusart1RxBuffer:
   472                           	opt stack 0
   473  000200                     	ds	126
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           postdec1	equ	0xFE5
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	cstackBANK2
   484  00027E                     __pcstackBANK2:
   485                           	opt stack 0
   486  00027E                     ??_SETxPWM:
   487                           
   488                           ; 1 bytes @ 0x0
   489  00027E                     	ds	2
   490  000280                     SETxPWM@pwm_speed:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x2
   494  000280                     	ds	2
   495  000282                     Train_Path@From:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x4
   499  000282                     	ds	1
   500  000283                     ??_Update_StateMchn:
   501                           
   502                           ; 1 bytes @ 0x5
   503  000283                     	ds	2
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           postdec1	equ	0xFE5
   511                           fsr1l	equ	0xFE1
   512                           
   513                           	psect	cstackBANK1
   514  0001FC                     __pcstackBANK1:
   515                           	opt stack 0
   516  0001FC                     INCRxAPIxVAL@value:
   517                           	opt stack 0
   518  0001FC                     DECRxAPIxVAL@value:
   519                           	opt stack 0
   520  0001FC                     SETxPWM@speed:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x0
   524  0001FC                     	ds	2
   525  0001FE                     INCRxAPIxVAL@index:
   526                           	opt stack 0
   527  0001FE                     DECRxAPIxVAL@index:
   528                           	opt stack 0
   529  0001FE                     SETxPWM@direction:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x2
   533  0001FE                     	ds	1
   534  0001FF                     Train_Path@To:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x3
   538  0001FF                     	ds	1
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	cstackBANK0
   549  0000F9                     __pcstackBANK0:
   550                           	opt stack 0
   551  0000F9                     ?_GETxAPIxVAL:
   552                           	opt stack 0
   553  0000F9                     Green_Led@Operation:
   554                           	opt stack 0
   555  0000F9                     Red_Led@Operation:
   556                           	opt stack 0
   557  0000F9                     EUSART1_Initialize@baud_rate:
   558                           	opt stack 0
   559  0000F9                     INIT_TERMINAL@i:
   560                           	opt stack 0
   561  0000F9                     APIxInitialize@i:
   562                           	opt stack 0
   563  0000F9                     SETxAPIxVAL@value:
   564                           	opt stack 0
   565  0000F9                     SetDCPWM1@dutycycle:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x0
   569  0000F9                     	ds	2
   570  0000FB                     ??_SetDCPWM1:
   571  0000FB                     GETxAPIxVAL@index:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x2
   575  0000FB                     	ds	1
   576  0000FC                     Junction@Straight_Bend:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x3
   580  0000FC                     	ds	1
   581  0000FD                     SETxAPIxVAL@index:
   582                           	opt stack 0
   583  0000FD                     Junction@Junction_Left_Right:
   584                           	opt stack 0
   585  0000FD                     SetDCPWM1@DCycle:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x4
   589  0000FD                     	ds	1
   590  0000FE                     ??_Debounce_Inputs:
   591  0000FE                     
   592                           ; 1 bytes @ 0x5
   593  0000FE                     	ds	1
   594  0000FF                     Right_Mountain_From_The_Right@rc:
   595                           	opt stack 0
   596  0000FF                     Left_Mountain_From_The_Right@rc:
   597                           	opt stack 0
   598  0000FF                     Left_Mountain_From_The_Left@rc:
   599                           	opt stack 0
   600  0000FF                     Right_Mountain_From_The_Left@rc:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x6
   604  0000FF                     	ds	1
   605  000100                     tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           postdec1	equ	0xFE5
   612                           fsr1l	equ	0xFE1
   613                           
   614                           ; 1 bytes @ 0x7
   615                           
   616                           	psect	cstackCOMRAM
   617  00002C                     __pcstackCOMRAM:
   618                           	opt stack 0
   619  00002C                     EUSART1_Write@txData:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x0
   623  00002C                     	ds	1
   624  00002D                     ??_tc_high:
   625                           
   626                           ; 1 bytes @ 0x1
   627  00002D                     	ds	14
   628  00003B                     ??_tc_low:
   629                           
   630                           ; 1 bytes @ 0xF
   631  00003B                     	ds	17
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           postdec1	equ	0xFE5
   639                           fsr1l	equ	0xFE1
   640                           
   641 ;;
   642 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   643 ;;
   644 ;; *************** function _main *****************
   645 ;; Defined at:
   646 ;;		line 105 in file "../Main.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;		None
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   660 ;;      Params:         0       0       0       0       0       0       0       0       0
   661 ;;      Locals:         0       0       0       0       0       0       0       0       0
   662 ;;      Temps:          0       0       0       0       0       0       0       0       0
   663 ;;      Totals:         0       0       0       0       0       0       0       0       0
   664 ;;Total ram usage:        0 bytes
   665 ;; Hardware stack levels required when called:    9
   666 ;; This function calls:
   667 ;;		_APIxInitialize
   668 ;;		_EUSART1_Initialize
   669 ;;		_INIT_TERMINAL
   670 ;;		_Init_Pwm
   671 ;;		_Init_Timers
   672 ;;		_Update_StateMchn
   673 ;; This function is called by:
   674 ;;		Startup code after reset
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           	psect	text0
   679  002B10                     __ptext0:
   680                           	opt stack 0
   681  002B10                     _main:
   682                           	opt stack 22
   683                           
   684                           ;Main.c: 107: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
   685                           
   686                           ;incstack = 0
   687  002B10  6892               	setf	3986,c	;volatile
   688  002B12  6893               	setf	3987,c	;volatile
   689  002B14  6894               	setf	3988,c	;volatile
   690  002B16  6895               	setf	3989,c	;volatile
   691  002B18  6896               	setf	3990,c	;volatile
   692                           
   693                           ;Main.c: 108: ADCON1=0x0F;
   694  002B1A  0E0F               	movlw	15
   695  002B1C  6EC1               	movwf	4033,c	;volatile
   696                           
   697                           ;Main.c: 109: CMCON=0x07;
   698  002B1E  0E07               	movlw	7
   699  002B20  6EB4               	movwf	4020,c	;volatile
   700                           
   701                           ;Main.c: 110: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
   702  002B22  9892               	bcf	3986,4,c	;volatile
   703  002B24  9A95               	bcf	3989,5,c	;volatile
   704  002B26  9C95               	bcf	3989,6,c	;volatile
   705                           
   706                           ;Main.c: 111: PORTAbits.RA4 = 0;
   707  002B28  9880               	bcf	3968,4,c	;volatile
   708                           
   709                           ;Main.c: 112: PORTDbits.RD6 = 0;
   710  002B2A  9C83               	bcf	3971,6,c	;volatile
   711                           
   712                           ;Main.c: 113: PORTDbits.RD5 = 0;
   713  002B2C  9A83               	bcf	3971,5,c	;volatile
   714                           
   715                           ;Main.c: 115: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
   716  002B2E  9092               	bcf	3986,0,c	;volatile
   717  002B30  9292               	bcf	3986,1,c	;volatile
   718  002B32  9492               	bcf	3986,2,c	;volatile
   719  002B34  9692               	bcf	3986,3,c	;volatile
   720                           
   721                           ;Main.c: 116: PORTAbits.RA3 = 0;
   722  002B36  9680               	bcf	3968,3,c	;volatile
   723                           
   724                           ;Main.c: 117: PORTAbits.RA2 = 0;
   725  002B38  9480               	bcf	3968,2,c	;volatile
   726                           
   727                           ;Main.c: 118: PORTAbits.RA1 = 0;
   728  002B3A  9280               	bcf	3968,1,c	;volatile
   729                           
   730                           ;Main.c: 119: PORTAbits.RA0 = 0;
   731  002B3C  9080               	bcf	3968,0,c	;volatile
   732                           
   733                           ;Main.c: 121: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
   734  002B3E  8495               	bsf	3989,2,c	;volatile
   735  002B40  8695               	bsf	3989,3,c	;volatile
   736  002B42  8095               	bsf	3989,0,c	;volatile
   737  002B44  8295               	bsf	3989,1,c	;volatile
   738  002B46  8294               	bsf	3988,1,c	;volatile
   739  002B48  8895               	bsf	3989,4,c	;volatile
   740  002B4A  8096               	bsf	3990,0,c	;volatile
   741  002B4C  8296               	bsf	3990,1,c	;volatile
   742                           
   743                           ;Main.c: 122: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
   744  002B4E  8093               	bsf	3987,0,c	;volatile
   745  002B50  8293               	bsf	3987,1,c	;volatile
   746  002B52  8493               	bsf	3987,2,c	;volatile
   747  002B54  8693               	bsf	3987,3,c	;volatile
   748  002B56  8893               	bsf	3987,4,c	;volatile
   749  002B58  8A93               	bsf	3987,5,c	;volatile
   750  002B5A  8E95               	bsf	3989,7,c	;volatile
   751                           
   752                           ;Main.c: 123: APIxInitialize();
   753  002B5C  EC5D  F00D         	call	_APIxInitialize	;wreg free
   754                           
   755                           ;Main.c: 124: Init_Pwm();
   756  002B60  ECD7  F016         	call	_Init_Pwm	;wreg free
   757                           
   758                           ;Main.c: 125: Init_Timers();
   759  002B64  ECCB  F016         	call	_Init_Timers	;wreg free
   760                           
   761                           ;Main.c: 126: EUSART1_Initialize();
   762  002B68  ECC0  F015         	call	_EUSART1_Initialize	;wreg free
   763                           
   764                           ;Main.c: 127: INIT_TERMINAL();
   765  002B6C  EC47  F016         	call	_INIT_TERMINAL	;wreg free
   766  002B70                     l8928:
   767                           
   768                           ;Main.c: 130: {
   769                           ;Main.c: 131: if (1 == Update_State_Machine)
   770  002B70  0425               	decf	_Update_State_Machine,w,c
   771  002B72  A4D8               	btfss	status,2,c
   772  002B74  D7FD               	goto	l8928
   773                           
   774                           ;Main.c: 132: {
   775                           ;Main.c: 133: Update_State_Machine = 0;
   776  002B76  0E00               	movlw	0
   777  002B78  6E25               	movwf	_Update_State_Machine,c
   778                           
   779                           ;Main.c: 134: Update_StateMchn();
   780  002B7A  EC55  F000         	call	_Update_StateMchn	;wreg free
   781  002B7E  D7F8               	goto	l8928
   782  002B80                     __end_of_main:
   783                           	opt stack 0
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1l	equ	0xFE1
   792                           status	equ	0xFD8
   793                           
   794 ;; *************** function _Update_StateMchn *****************
   795 ;; Defined at:
   796 ;;		line 63 in file "../State_Mchn.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;		None
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   810 ;;      Params:         0       0       0       0       0       0       0       0       0
   811 ;;      Locals:         0       0       0       0       0       0       0       0       0
   812 ;;      Temps:          0       0       0       2       0       0       0       0       0
   813 ;;      Totals:         0       0       0       2       0       0       0       0       0
   814 ;;Total ram usage:        2 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    8
   817 ;; This function calls:
   818 ;;		_DECRxAPIxVAL
   819 ;;		_Debounce_Inputs
   820 ;;		_Eeprom_Store
   821 ;;		_GETxAPIxVAL
   822 ;;		_Green_Led
   823 ;;		_INCRxAPIxVAL
   824 ;;		_Red_Led
   825 ;;		_SETxAPIxVAL
   826 ;;		_Train_Path
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text1
   833  0000AA                     __ptext1:
   834                           	opt stack 0
   835  0000AA                     _Update_StateMchn:
   836                           	opt stack 22
   837                           
   838                           ;State_Mchn.c: 65: Debounce_Inputs();
   839                           
   840                           ;incstack = 0
   841  0000AA  EC47  F008         	call	_Debounce_Inputs	;wreg free
   842                           
   843                           ;State_Mchn.c: 67: switch (Switch_Main)
   844  0000AE  EF3A  F008         	goto	l8758
   845  0000B2                     l8002:
   846  0000B2  0E00               	movlw	0
   847  0000B4  EC0E  F015         	call	_Green_Led
   848                           
   849                           ;State_Mchn.c: 72: Red_Led(0);
   850  0000B8  0E00               	movlw	0
   851  0000BA  ECCC  F014         	call	_Red_Led
   852                           
   853                           ;State_Mchn.c: 73: Switch_Init = 1;
   854  0000BE  0E01               	movlw	1
   855  0000C0  6E1F               	movwf	_Switch_Init,c
   856                           
   857                           ;State_Mchn.c: 74: break;
   858  0000C2  0012               	return	
   859  0000C4                     l8006:
   860  0000C4  0E13               	movlw	19
   861  0000C6  ECBB  F016         	call	_GETxAPIxVAL
   862  0000CA  0100               	movlb	0	; () banked
   863  0000CC  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
   864  0000CE  0100               	movlb	0	; () banked
   865  0000D0  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   866  0000D2  B4D8               	btfsc	status,2,c
   867  0000D4  D00B               	goto	l8012
   868                           
   869                           ; BSR set to: 0
   870                           ;State_Mchn.c: 77: {
   871                           ;State_Mchn.c: 78: SETxAPIxVAL(23, 0);
   872  0000D6  0E00               	movlw	0
   873  0000D8  0100               	movlb	0	; () banked
   874  0000DA  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   875  0000DC  0E00               	movlw	0
   876  0000DE  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
   877  0000E0  0E17               	movlw	23
   878  0000E2  EC08  F016         	call	_SETxAPIxVAL
   879                           
   880                           ;State_Mchn.c: 79: Switch_Init = 2;
   881  0000E6  0E02               	movlw	2
   882  0000E8  6E1F               	movwf	_Switch_Init,c
   883                           
   884                           ;State_Mchn.c: 80: break;
   885  0000EA  0012               	return	
   886  0000EC                     l8012:
   887                           
   888                           ;State_Mchn.c: 81: }
   889                           ;State_Mchn.c: 82: if(GETxAPIxVAL(20))
   890  0000EC  0E14               	movlw	20
   891  0000EE  ECBB  F016         	call	_GETxAPIxVAL
   892  0000F2  0100               	movlb	0	; () banked
   893  0000F4  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
   894  0000F6  0100               	movlb	0	; () banked
   895  0000F8  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   896  0000FA  B4D8               	btfsc	status,2,c
   897  0000FC  D00B               	goto	l8018
   898                           
   899                           ; BSR set to: 0
   900                           ;State_Mchn.c: 83: {
   901                           ;State_Mchn.c: 84: SETxAPIxVAL(23, 1);
   902  0000FE  0E00               	movlw	0
   903  000100  0100               	movlb	0	; () banked
   904  000102  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   905  000104  0E01               	movlw	1
   906  000106  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
   907  000108  0E17               	movlw	23
   908  00010A  EC08  F016         	call	_SETxAPIxVAL
   909                           
   910                           ;State_Mchn.c: 85: Switch_Init = 2;
   911  00010E  0E02               	movlw	2
   912  000110  6E1F               	movwf	_Switch_Init,c
   913                           
   914                           ;State_Mchn.c: 86: break;
   915  000112  0012               	return	
   916  000114                     l8018:
   917                           
   918                           ;State_Mchn.c: 87: }
   919                           ;State_Mchn.c: 88: if(GETxAPIxVAL(21))
   920  000114  0E15               	movlw	21
   921  000116  ECBB  F016         	call	_GETxAPIxVAL
   922  00011A  0100               	movlb	0	; () banked
   923  00011C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
   924  00011E  0100               	movlb	0	; () banked
   925  000120  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   926  000122  B4D8               	btfsc	status,2,c
   927  000124  D00B               	goto	l8024
   928                           
   929                           ; BSR set to: 0
   930                           ;State_Mchn.c: 89: {
   931                           ;State_Mchn.c: 90: SETxAPIxVAL(23, 2);
   932  000126  0E00               	movlw	0
   933  000128  0100               	movlb	0	; () banked
   934  00012A  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   935  00012C  0E02               	movlw	2
   936  00012E  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
   937  000130  0E17               	movlw	23
   938  000132  EC08  F016         	call	_SETxAPIxVAL
   939                           
   940                           ;State_Mchn.c: 91: Switch_Init = 2;
   941  000136  0E02               	movlw	2
   942  000138  6E1F               	movwf	_Switch_Init,c
   943                           
   944                           ;State_Mchn.c: 92: break;
   945  00013A  0012               	return	
   946  00013C                     l8024:
   947                           
   948                           ;State_Mchn.c: 93: }
   949                           ;State_Mchn.c: 94: if(GETxAPIxVAL(22))
   950  00013C  0E16               	movlw	22
   951  00013E  ECBB  F016         	call	_GETxAPIxVAL
   952  000142  0100               	movlb	0	; () banked
   953  000144  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
   954  000146  0100               	movlb	0	; () banked
   955  000148  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   956  00014A  B4D8               	btfsc	status,2,c
   957  00014C  D00B               	goto	l8030
   958                           
   959                           ; BSR set to: 0
   960                           ;State_Mchn.c: 95: {
   961                           ;State_Mchn.c: 96: SETxAPIxVAL(23, 3);
   962  00014E  0E00               	movlw	0
   963  000150  0100               	movlb	0	; () banked
   964  000152  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   965  000154  0E03               	movlw	3
   966  000156  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
   967  000158  0E17               	movlw	23
   968  00015A  EC08  F016         	call	_SETxAPIxVAL
   969                           
   970                           ;State_Mchn.c: 97: Switch_Init = 2;
   971  00015E  0E02               	movlw	2
   972  000160  6E1F               	movwf	_Switch_Init,c
   973                           
   974                           ;State_Mchn.c: 98: break;
   975  000162  0012               	return	
   976  000164                     l8030:
   977                           
   978                           ;State_Mchn.c: 99: }
   979                           ;State_Mchn.c: 100: if(GETxAPIxVAL(18))
   980  000164  0E12               	movlw	18
   981  000166  ECBB  F016         	call	_GETxAPIxVAL
   982  00016A  0100               	movlb	0	; () banked
   983  00016C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
   984  00016E  0100               	movlb	0	; () banked
   985  000170  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
   986  000172  B4D8               	btfsc	status,2,c
   987  000174  D00B               	goto	l8036
   988                           
   989                           ; BSR set to: 0
   990                           ;State_Mchn.c: 101: {
   991                           ;State_Mchn.c: 102: SETxAPIxVAL(23, 4);
   992  000176  0E00               	movlw	0
   993  000178  0100               	movlb	0	; () banked
   994  00017A  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
   995  00017C  0E04               	movlw	4
   996  00017E  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
   997  000180  0E17               	movlw	23
   998  000182  EC08  F016         	call	_SETxAPIxVAL
   999                           
  1000                           ;State_Mchn.c: 103: Switch_Init = 2;
  1001  000186  0E02               	movlw	2
  1002  000188  6E1F               	movwf	_Switch_Init,c
  1003                           
  1004                           ;State_Mchn.c: 104: break;
  1005  00018A  0012               	return	
  1006  00018C                     l8036:
  1007                           
  1008                           ;State_Mchn.c: 105: }
  1009                           ;State_Mchn.c: 106: Switch_Init = 1;
  1010  00018C  0E01               	movlw	1
  1011  00018E  6E1F               	movwf	_Switch_Init,c
  1012                           
  1013                           ;State_Mchn.c: 107: Green_Led(2);
  1014  000190  0E02               	movlw	2
  1015  000192  EC0E  F015         	call	_Green_Led
  1016                           
  1017                           ;State_Mchn.c: 108: break;
  1018  000196  0012               	return	
  1019  000198                     l8040:
  1020  000198  0E13               	movlw	19
  1021  00019A  ECBB  F016         	call	_GETxAPIxVAL
  1022  00019E  0100               	movlb	0	; () banked
  1023  0001A0  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1024  0001A2  0100               	movlb	0	; () banked
  1025  0001A4  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1026  0001A6  A4D8               	btfss	status,2,c
  1027  0001A8  D02F               	goto	l8054
  1028                           
  1029                           ; BSR set to: 0
  1030  0001AA  0E14               	movlw	20
  1031  0001AC  ECBB  F016         	call	_GETxAPIxVAL
  1032  0001B0  0100               	movlb	0	; () banked
  1033  0001B2  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1034  0001B4  0100               	movlb	0	; () banked
  1035  0001B6  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1036  0001B8  A4D8               	btfss	status,2,c
  1037  0001BA  D026               	goto	l8054
  1038                           
  1039                           ; BSR set to: 0
  1040  0001BC  0E15               	movlw	21
  1041  0001BE  ECBB  F016         	call	_GETxAPIxVAL
  1042  0001C2  0100               	movlb	0	; () banked
  1043  0001C4  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1044  0001C6  0100               	movlb	0	; () banked
  1045  0001C8  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1046  0001CA  A4D8               	btfss	status,2,c
  1047  0001CC  D01D               	goto	l8054
  1048                           
  1049                           ; BSR set to: 0
  1050  0001CE  0E16               	movlw	22
  1051  0001D0  ECBB  F016         	call	_GETxAPIxVAL
  1052  0001D4  0100               	movlb	0	; () banked
  1053  0001D6  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1054  0001D8  0100               	movlb	0	; () banked
  1055  0001DA  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1056  0001DC  A4D8               	btfss	status,2,c
  1057  0001DE  D014               	goto	l8054
  1058                           
  1059                           ; BSR set to: 0
  1060  0001E0  0E12               	movlw	18
  1061  0001E2  ECBB  F016         	call	_GETxAPIxVAL
  1062  0001E6  0100               	movlb	0	; () banked
  1063  0001E8  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1064  0001EA  0100               	movlb	0	; () banked
  1065  0001EC  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1066  0001EE  A4D8               	btfss	status,2,c
  1067  0001F0  D00B               	goto	l8054
  1068                           
  1069                           ; BSR set to: 0
  1070  0001F2  0E10               	movlw	16
  1071  0001F4  ECBB  F016         	call	_GETxAPIxVAL
  1072  0001F8  0100               	movlb	0	; () banked
  1073  0001FA  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1074  0001FC  0100               	movlb	0	; () banked
  1075  0001FE  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1076  000200  A4D8               	btfss	status,2,c
  1077  000202  D002               	goto	l8054
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;State_Mchn.c: 111: {
  1081                           ;State_Mchn.c: 112: Switch_Init = 3;
  1082  000204  0E03               	movlw	3
  1083  000206  6E1F               	movwf	_Switch_Init,c
  1084  000208                     l8054:
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;State_Mchn.c: 113: }
  1088                           ;State_Mchn.c: 114: Red_Led(0);
  1089  000208  0E00               	movlw	0
  1090  00020A  ECCC  F014         	call	_Red_Led
  1091                           
  1092                           ;State_Mchn.c: 115: Green_Led(2);
  1093  00020E  0E02               	movlw	2
  1094  000210  EC0E  F015         	call	_Green_Led
  1095                           
  1096                           ;State_Mchn.c: 116: break;
  1097  000214  0012               	return	
  1098  000216                     l8058:
  1099  000216  0E13               	movlw	19
  1100  000218  ECBB  F016         	call	_GETxAPIxVAL
  1101  00021C  0100               	movlb	0	; () banked
  1102  00021E  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1103  000220  0100               	movlb	0	; () banked
  1104  000222  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1105  000224  B4D8               	btfsc	status,2,c
  1106  000226  D00B               	goto	l8064
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;State_Mchn.c: 119: {
  1110                           ;State_Mchn.c: 120: SETxAPIxVAL(24, 0);
  1111  000228  0E00               	movlw	0
  1112  00022A  0100               	movlb	0	; () banked
  1113  00022C  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1114  00022E  0E00               	movlw	0
  1115  000230  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  1116  000232  0E18               	movlw	24
  1117  000234  EC08  F016         	call	_SETxAPIxVAL
  1118                           
  1119                           ;State_Mchn.c: 121: Switch_Init = 4;
  1120  000238  0E04               	movlw	4
  1121  00023A  6E1F               	movwf	_Switch_Init,c
  1122                           
  1123                           ;State_Mchn.c: 122: break;
  1124  00023C  0012               	return	
  1125  00023E                     l8064:
  1126                           
  1127                           ;State_Mchn.c: 123: }
  1128                           ;State_Mchn.c: 124: if(GETxAPIxVAL(20))
  1129  00023E  0E14               	movlw	20
  1130  000240  ECBB  F016         	call	_GETxAPIxVAL
  1131  000244  0100               	movlb	0	; () banked
  1132  000246  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1133  000248  0100               	movlb	0	; () banked
  1134  00024A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1135  00024C  B4D8               	btfsc	status,2,c
  1136  00024E  D00B               	goto	l8070
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;State_Mchn.c: 125: {
  1140                           ;State_Mchn.c: 126: SETxAPIxVAL(24, 1);
  1141  000250  0E00               	movlw	0
  1142  000252  0100               	movlb	0	; () banked
  1143  000254  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1144  000256  0E01               	movlw	1
  1145  000258  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  1146  00025A  0E18               	movlw	24
  1147  00025C  EC08  F016         	call	_SETxAPIxVAL
  1148                           
  1149                           ;State_Mchn.c: 127: Switch_Init = 4;
  1150  000260  0E04               	movlw	4
  1151  000262  6E1F               	movwf	_Switch_Init,c
  1152                           
  1153                           ;State_Mchn.c: 128: break;
  1154  000264  0012               	return	
  1155  000266                     l8070:
  1156                           
  1157                           ;State_Mchn.c: 129: }
  1158                           ;State_Mchn.c: 130: if(GETxAPIxVAL(21))
  1159  000266  0E15               	movlw	21
  1160  000268  ECBB  F016         	call	_GETxAPIxVAL
  1161  00026C  0100               	movlb	0	; () banked
  1162  00026E  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1163  000270  0100               	movlb	0	; () banked
  1164  000272  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1165  000274  B4D8               	btfsc	status,2,c
  1166  000276  D00B               	goto	l8076
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;State_Mchn.c: 131: {
  1170                           ;State_Mchn.c: 132: SETxAPIxVAL(24, 2);
  1171  000278  0E00               	movlw	0
  1172  00027A  0100               	movlb	0	; () banked
  1173  00027C  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1174  00027E  0E02               	movlw	2
  1175  000280  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  1176  000282  0E18               	movlw	24
  1177  000284  EC08  F016         	call	_SETxAPIxVAL
  1178                           
  1179                           ;State_Mchn.c: 133: Switch_Init = 4;
  1180  000288  0E04               	movlw	4
  1181  00028A  6E1F               	movwf	_Switch_Init,c
  1182                           
  1183                           ;State_Mchn.c: 134: break;
  1184  00028C  0012               	return	
  1185  00028E                     l8076:
  1186                           
  1187                           ;State_Mchn.c: 135: }
  1188                           ;State_Mchn.c: 136: if(GETxAPIxVAL(22))
  1189  00028E  0E16               	movlw	22
  1190  000290  ECBB  F016         	call	_GETxAPIxVAL
  1191  000294  0100               	movlb	0	; () banked
  1192  000296  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1193  000298  0100               	movlb	0	; () banked
  1194  00029A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1195  00029C  B4D8               	btfsc	status,2,c
  1196  00029E  D00B               	goto	l8082
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;State_Mchn.c: 137: {
  1200                           ;State_Mchn.c: 138: SETxAPIxVAL(24, 3);
  1201  0002A0  0E00               	movlw	0
  1202  0002A2  0100               	movlb	0	; () banked
  1203  0002A4  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1204  0002A6  0E03               	movlw	3
  1205  0002A8  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  1206  0002AA  0E18               	movlw	24
  1207  0002AC  EC08  F016         	call	_SETxAPIxVAL
  1208                           
  1209                           ;State_Mchn.c: 139: Switch_Init = 4;
  1210  0002B0  0E04               	movlw	4
  1211  0002B2  6E1F               	movwf	_Switch_Init,c
  1212                           
  1213                           ;State_Mchn.c: 140: break;
  1214  0002B4  0012               	return	
  1215  0002B6                     l8082:
  1216                           
  1217                           ;State_Mchn.c: 141: }
  1218                           ;State_Mchn.c: 142: if(GETxAPIxVAL(18))
  1219  0002B6  0E12               	movlw	18
  1220  0002B8  ECBB  F016         	call	_GETxAPIxVAL
  1221  0002BC  0100               	movlb	0	; () banked
  1222  0002BE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1223  0002C0  0100               	movlb	0	; () banked
  1224  0002C2  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1225  0002C4  B4D8               	btfsc	status,2,c
  1226  0002C6  D00B               	goto	l8088
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;State_Mchn.c: 143: {
  1230                           ;State_Mchn.c: 144: SETxAPIxVAL(24, 4);
  1231  0002C8  0E00               	movlw	0
  1232  0002CA  0100               	movlb	0	; () banked
  1233  0002CC  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1234  0002CE  0E04               	movlw	4
  1235  0002D0  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  1236  0002D2  0E18               	movlw	24
  1237  0002D4  EC08  F016         	call	_SETxAPIxVAL
  1238                           
  1239                           ;State_Mchn.c: 145: Switch_Init = 4;
  1240  0002D8  0E04               	movlw	4
  1241  0002DA  6E1F               	movwf	_Switch_Init,c
  1242                           
  1243                           ;State_Mchn.c: 146: break;
  1244  0002DC  0012               	return	
  1245  0002DE                     l8088:
  1246                           
  1247                           ;State_Mchn.c: 147: }
  1248                           ;State_Mchn.c: 148: if(GETxAPIxVAL(16))
  1249  0002DE  0E10               	movlw	16
  1250  0002E0  ECBB  F016         	call	_GETxAPIxVAL
  1251  0002E4  0100               	movlb	0	; () banked
  1252  0002E6  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1253  0002E8  0100               	movlb	0	; () banked
  1254  0002EA  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1255  0002EC  B4D8               	btfsc	status,2,c
  1256  0002EE  D00B               	goto	l8094
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;State_Mchn.c: 149: {
  1260                           ;State_Mchn.c: 150: SETxAPIxVAL(24, 9);
  1261  0002F0  0E00               	movlw	0
  1262  0002F2  0100               	movlb	0	; () banked
  1263  0002F4  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1264  0002F6  0E09               	movlw	9
  1265  0002F8  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  1266  0002FA  0E18               	movlw	24
  1267  0002FC  EC08  F016         	call	_SETxAPIxVAL
  1268                           
  1269                           ;State_Mchn.c: 151: Switch_Init = 4;
  1270  000300  0E04               	movlw	4
  1271  000302  6E1F               	movwf	_Switch_Init,c
  1272                           
  1273                           ;State_Mchn.c: 152: break;
  1274  000304  0012               	return	
  1275  000306                     l8094:
  1276                           
  1277                           ;State_Mchn.c: 153: }
  1278                           ;State_Mchn.c: 154: Green_Led(2);
  1279  000306  0E02               	movlw	2
  1280  000308  EC0E  F015         	call	_Green_Led
  1281                           
  1282                           ;State_Mchn.c: 155: Switch_Init = 3;
  1283  00030C  0E03               	movlw	3
  1284  00030E  6E1F               	movwf	_Switch_Init,c
  1285                           
  1286                           ;State_Mchn.c: 156: break;
  1287  000310  0012               	return	
  1288  000312                     l8098:
  1289  000312  0E13               	movlw	19
  1290  000314  ECBB  F016         	call	_GETxAPIxVAL
  1291  000318  0100               	movlb	0	; () banked
  1292  00031A  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1293  00031C  0100               	movlb	0	; () banked
  1294  00031E  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1295  000320  A4D8               	btfss	status,2,c
  1296  000322  D05E               	goto	l8120
  1297                           
  1298                           ; BSR set to: 0
  1299  000324  0E14               	movlw	20
  1300  000326  ECBB  F016         	call	_GETxAPIxVAL
  1301  00032A  0100               	movlb	0	; () banked
  1302  00032C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1303  00032E  0100               	movlb	0	; () banked
  1304  000330  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1305  000332  A4D8               	btfss	status,2,c
  1306  000334  D055               	goto	l8120
  1307                           
  1308                           ; BSR set to: 0
  1309  000336  0E15               	movlw	21
  1310  000338  ECBB  F016         	call	_GETxAPIxVAL
  1311  00033C  0100               	movlb	0	; () banked
  1312  00033E  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1313  000340  0100               	movlb	0	; () banked
  1314  000342  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1315  000344  A4D8               	btfss	status,2,c
  1316  000346  D04C               	goto	l8120
  1317                           
  1318                           ; BSR set to: 0
  1319  000348  0E16               	movlw	22
  1320  00034A  ECBB  F016         	call	_GETxAPIxVAL
  1321  00034E  0100               	movlb	0	; () banked
  1322  000350  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1323  000352  0100               	movlb	0	; () banked
  1324  000354  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1325  000356  A4D8               	btfss	status,2,c
  1326  000358  D043               	goto	l8120
  1327                           
  1328                           ; BSR set to: 0
  1329  00035A  0E12               	movlw	18
  1330  00035C  ECBB  F016         	call	_GETxAPIxVAL
  1331  000360  0100               	movlb	0	; () banked
  1332  000362  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1333  000364  0100               	movlb	0	; () banked
  1334  000366  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1335  000368  A4D8               	btfss	status,2,c
  1336  00036A  D03A               	goto	l8120
  1337                           
  1338                           ; BSR set to: 0
  1339  00036C  0E10               	movlw	16
  1340  00036E  ECBB  F016         	call	_GETxAPIxVAL
  1341  000372  0100               	movlb	0	; () banked
  1342  000374  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1343  000376  0100               	movlb	0	; () banked
  1344  000378  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1345  00037A  A4D8               	btfss	status,2,c
  1346  00037C  D031               	goto	l8120
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;State_Mchn.c: 159: {
  1350                           ;State_Mchn.c: 160: if(GETxAPIxVAL(23) == GETxAPIxVAL(24))
  1351  00037E  0E17               	movlw	23
  1352  000380  ECBB  F016         	call	_GETxAPIxVAL
  1353  000384  C0F9  F283         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1354  000388  C0FA  F284         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1355  00038C  0E18               	movlw	24
  1356  00038E  ECBB  F016         	call	_GETxAPIxVAL
  1357  000392  0100               	movlb	0	; () banked
  1358  000394  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1359  000396  0102               	movlb	2	; () banked
  1360  000398  1983               	xorwf	??_Update_StateMchn& (0+255),w,b
  1361  00039A  E10B               	bnz	l8116
  1362  00039C  0100               	movlb	0	; () banked
  1363  00039E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1364  0003A0  0102               	movlb	2	; () banked
  1365  0003A2  1984               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1366  0003A4  A4D8               	btfss	status,2,c
  1367  0003A6  D005               	goto	l8116
  1368                           
  1369                           ; BSR set to: 2
  1370                           ;State_Mchn.c: 161: {
  1371                           ;State_Mchn.c: 162: Red_Led(1);
  1372  0003A8  0E01               	movlw	1
  1373  0003AA  ECCC  F014         	call	_Red_Led
  1374                           
  1375                           ;State_Mchn.c: 163: Switch_Init = 1;
  1376  0003AE  0E01               	movlw	1
  1377  0003B0  6E1F               	movwf	_Switch_Init,c
  1378  0003B2                     l8116:
  1379                           
  1380                           ;State_Mchn.c: 164: }
  1381                           ;State_Mchn.c: 165: if(GETxAPIxVAL(23) != GETxAPIxVAL(24))
  1382  0003B2  0E17               	movlw	23
  1383  0003B4  ECBB  F016         	call	_GETxAPIxVAL
  1384  0003B8  C0F9  F283         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1385  0003BC  C0FA  F284         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1386  0003C0  0E18               	movlw	24
  1387  0003C2  ECBB  F016         	call	_GETxAPIxVAL
  1388  0003C6  0100               	movlb	0	; () banked
  1389  0003C8  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1390  0003CA  0102               	movlb	2	; () banked
  1391  0003CC  1983               	xorwf	??_Update_StateMchn& (0+255),w,b
  1392  0003CE  E106               	bnz	u7060
  1393  0003D0  0100               	movlb	0	; () banked
  1394  0003D2  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1395  0003D4  0102               	movlb	2	; () banked
  1396  0003D6  1984               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1397  0003D8  B4D8               	btfsc	status,2,c
  1398  0003DA  D002               	goto	l8120
  1399  0003DC                     u7060:
  1400                           
  1401                           ; BSR set to: 2
  1402                           ;State_Mchn.c: 166: {
  1403                           ;State_Mchn.c: 167: Switch_Init = 5;
  1404  0003DC  0E05               	movlw	5
  1405  0003DE  6E1F               	movwf	_Switch_Init,c
  1406  0003E0                     l8120:
  1407                           
  1408                           ;State_Mchn.c: 168: }
  1409                           ;State_Mchn.c: 169: }
  1410                           ;State_Mchn.c: 170: Green_Led(2);
  1411  0003E0  0E02               	movlw	2
  1412  0003E2  EC0E  F015         	call	_Green_Led
  1413                           
  1414                           ;State_Mchn.c: 171: break;
  1415  0003E6  0012               	return	
  1416  0003E8                     l8122:
  1417  0003E8  0E18               	movlw	24
  1418  0003EA  ECBB  F016         	call	_GETxAPIxVAL
  1419  0003EE  0E09               	movlw	9
  1420  0003F0  0100               	movlb	0	; () banked
  1421  0003F2  19F9               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1422  0003F4  0100               	movlb	0	; () banked
  1423  0003F6  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1424  0003F8  B4D8               	btfsc	status,2,c
  1425  0003FA  D002               	goto	l8126
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;State_Mchn.c: 174: {
  1429                           ;State_Mchn.c: 175: Switch_Init = 6;
  1430  0003FC  0E06               	movlw	6
  1431  0003FE  6E1F               	movwf	_Switch_Init,c
  1432  000400                     l8126:
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;State_Mchn.c: 176: }
  1436                           ;State_Mchn.c: 177: if(GETxAPIxVAL(24) == 9)
  1437  000400  0E18               	movlw	24
  1438  000402  ECBB  F016         	call	_GETxAPIxVAL
  1439  000406  0E09               	movlw	9
  1440  000408  0100               	movlb	0	; () banked
  1441  00040A  19F9               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1442  00040C  0100               	movlb	0	; () banked
  1443  00040E  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1444  000410  A4D8               	btfss	status,2,c
  1445  000412  0012               	return	
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;State_Mchn.c: 178: {
  1449                           ;State_Mchn.c: 179: Switch_Init = 9;
  1450  000414  0E09               	movlw	9
  1451  000416  6E1F               	movwf	_Switch_Init,c
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;State_Mchn.c: 180: }
  1455                           ;State_Mchn.c: 181: break;
  1456  000418  0012               	return	
  1457  00041A                     l8130:
  1458  00041A  0E08               	movlw	8
  1459  00041C  6E1F               	movwf	_Switch_Init,c
  1460                           
  1461                           ;State_Mchn.c: 184: break;
  1462  00041E  0012               	return	
  1463  000420                     l8132:
  1464  000420  0E10               	movlw	16
  1465  000422  ECBB  F016         	call	_GETxAPIxVAL
  1466  000426  0100               	movlb	0	; () banked
  1467  000428  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1468  00042A  0100               	movlb	0	; () banked
  1469  00042C  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1470  00042E  B4D8               	btfsc	status,2,c
  1471  000430  D006               	goto	l8136
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;State_Mchn.c: 187: {
  1475                           ;State_Mchn.c: 188: Switch_Main = 1;
  1476  000432  0E01               	movlw	1
  1477  000434  6E20               	movwf	_Switch_Main,c
  1478                           
  1479                           ;State_Mchn.c: 189: Switch_Init = 0;
  1480  000436  0E00               	movlw	0
  1481  000438  6E1F               	movwf	_Switch_Init,c
  1482                           
  1483                           ;State_Mchn.c: 190: Stop_Program = 0;
  1484  00043A  0E00               	movlw	0
  1485  00043C  6E19               	movwf	_Stop_Program,c
  1486  00043E                     l8136:
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;State_Mchn.c: 191: }
  1490                           ;State_Mchn.c: 192: Green_Led(3);
  1491  00043E  0E03               	movlw	3
  1492  000440  EC0E  F015         	call	_Green_Led
  1493                           
  1494                           ;State_Mchn.c: 193: Red_Led(0);
  1495  000444  0E00               	movlw	0
  1496  000446  ECCC  F014         	call	_Red_Led
  1497                           
  1498                           ;State_Mchn.c: 194: break;
  1499  00044A  0012               	return	
  1500  00044C                     l8140:
  1501  00044C  0E17               	movlw	23
  1502  00044E  ECBB  F016         	call	_GETxAPIxVAL
  1503  000452  0E04               	movlw	4
  1504  000454  0100               	movlb	0	; () banked
  1505  000456  19F9               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1506  000458  0100               	movlb	0	; () banked
  1507  00045A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1508  00045C  B4D8               	btfsc	status,2,c
  1509  00045E  D012               	goto	l8158
  1510  000460  D028               	goto	l8160
  1511  000462                     l8144:
  1512                           
  1513                           ; BSR set to: 0
  1514  000462  0E01               	movlw	1
  1515  000464  D005               	goto	L3
  1516  000466                     l8146:
  1517                           
  1518                           ; BSR set to: 0
  1519  000466  0E05               	movlw	5
  1520  000468  D003               	goto	L3
  1521  00046A                     l8148:
  1522                           
  1523                           ; BSR set to: 0
  1524  00046A  0E02               	movlw	2
  1525  00046C  D001               	goto	L3
  1526  00046E                     l8150:
  1527                           
  1528                           ; BSR set to: 0
  1529  00046E  0E03               	movlw	3
  1530  000470                     L3:
  1531  000470  6E22               	movwf	_Switch_Program,c
  1532                           
  1533                           ;State_Mchn.c: 210: Switch_Init = 7;
  1534  000472  0E07               	movlw	7
  1535  000474  6E1F               	movwf	_Switch_Init,c
  1536                           
  1537                           ;State_Mchn.c: 211: break;
  1538  000476  D01D               	goto	l8160
  1539  000478                     l8152:
  1540                           
  1541                           ; BSR set to: 0
  1542  000478  0E08               	movlw	8
  1543  00047A  6E1F               	movwf	_Switch_Init,c
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;State_Mchn.c: 213: Red_Led(1);
  1547  00047C  0E01               	movlw	1
  1548  00047E  ECCC  F014         	call	_Red_Led
  1549                           
  1550                           ;State_Mchn.c: 215: }
  1551                           
  1552                           ;State_Mchn.c: 214: break;
  1553  000482  D017               	goto	l8160
  1554  000484                     l8158:
  1555  000484  0E18               	movlw	24
  1556  000486  ECBB  F016         	call	_GETxAPIxVAL
  1557                           
  1558                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1559                           ; Switch size 1, requested type "space"
  1560                           ; Number of cases is 1, Range of values is 0 to 0
  1561                           ; switch strategies available:
  1562                           ; Name         Instructions Cycles
  1563                           ; simple_byte            4     3 (average)
  1564                           ;	Chosen strategy is simple_byte
  1565  00048A  0100               	movlb	0	; () banked
  1566  00048C  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1567  00048E  0A00               	xorlw	0	; case 0
  1568  000490  A4D8               	btfss	status,2,c
  1569  000492  D7F2               	goto	l8152
  1570                           
  1571                           ; BSR set to: 0
  1572                           ; Switch size 1, requested type "space"
  1573                           ; Number of cases is 4, Range of values is 0 to 3
  1574                           ; switch strategies available:
  1575                           ; Name         Instructions Cycles
  1576                           ; simple_byte           13     7 (average)
  1577                           ;	Chosen strategy is simple_byte
  1578  000494  0100               	movlb	0	; () banked
  1579  000496  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1580  000498  0A00               	xorlw	0	; case 0
  1581  00049A  B4D8               	btfsc	status,2,c
  1582  00049C  D7E2               	goto	l8144
  1583  00049E  0A01               	xorlw	1	; case 1
  1584  0004A0  B4D8               	btfsc	status,2,c
  1585  0004A2  D7E1               	goto	l8146
  1586  0004A4  0A03               	xorlw	3	; case 2
  1587  0004A6  B4D8               	btfsc	status,2,c
  1588  0004A8  D7E0               	goto	l8148
  1589  0004AA  0A01               	xorlw	1	; case 3
  1590  0004AC  B4D8               	btfsc	status,2,c
  1591  0004AE  D7DF               	goto	l8150
  1592  0004B0  D7E3               	goto	l8152
  1593  0004B2                     l8160:
  1594                           
  1595                           ;State_Mchn.c: 216: }
  1596                           ;State_Mchn.c: 217: if(GETxAPIxVAL(24) == 4)
  1597  0004B2  0E18               	movlw	24
  1598  0004B4  ECBB  F016         	call	_GETxAPIxVAL
  1599  0004B8  0E04               	movlw	4
  1600  0004BA  0100               	movlb	0	; () banked
  1601  0004BC  19F9               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1602  0004BE  0100               	movlb	0	; () banked
  1603  0004C0  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1604  0004C2  B4D8               	btfsc	status,2,c
  1605  0004C4  D012               	goto	l8178
  1606  0004C6  D028               	goto	l8180
  1607  0004C8                     l8164:
  1608                           
  1609                           ; BSR set to: 0
  1610  0004C8  0E01               	movlw	1
  1611  0004CA  D005               	goto	L6
  1612  0004CC                     l8166:
  1613                           
  1614                           ; BSR set to: 0
  1615  0004CC  0E05               	movlw	5
  1616  0004CE  D003               	goto	L6
  1617  0004D0                     l8168:
  1618                           
  1619                           ; BSR set to: 0
  1620  0004D0  0E02               	movlw	2
  1621  0004D2  D001               	goto	L6
  1622  0004D4                     l8170:
  1623                           
  1624                           ; BSR set to: 0
  1625  0004D4  0E03               	movlw	3
  1626  0004D6                     L6:
  1627  0004D6  6E22               	movwf	_Switch_Program,c
  1628                           
  1629                           ;State_Mchn.c: 231: Switch_Init = 7;
  1630  0004D8  0E07               	movlw	7
  1631  0004DA  6E1F               	movwf	_Switch_Init,c
  1632                           
  1633                           ;State_Mchn.c: 232: break;
  1634  0004DC  D01D               	goto	l8180
  1635  0004DE                     l8172:
  1636                           
  1637                           ; BSR set to: 0
  1638  0004DE  0E08               	movlw	8
  1639  0004E0  6E1F               	movwf	_Switch_Init,c
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;State_Mchn.c: 234: Red_Led(1);
  1643  0004E2  0E01               	movlw	1
  1644  0004E4  ECCC  F014         	call	_Red_Led
  1645                           
  1646                           ;State_Mchn.c: 236: }
  1647                           
  1648                           ;State_Mchn.c: 235: break;
  1649  0004E8  D017               	goto	l8180
  1650  0004EA                     l8178:
  1651  0004EA  0E17               	movlw	23
  1652  0004EC  ECBB  F016         	call	_GETxAPIxVAL
  1653                           
  1654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1655                           ; Switch size 1, requested type "space"
  1656                           ; Number of cases is 1, Range of values is 0 to 0
  1657                           ; switch strategies available:
  1658                           ; Name         Instructions Cycles
  1659                           ; simple_byte            4     3 (average)
  1660                           ;	Chosen strategy is simple_byte
  1661  0004F0  0100               	movlb	0	; () banked
  1662  0004F2  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1663  0004F4  0A00               	xorlw	0	; case 0
  1664  0004F6  A4D8               	btfss	status,2,c
  1665  0004F8  D7F2               	goto	l8172
  1666                           
  1667                           ; BSR set to: 0
  1668                           ; Switch size 1, requested type "space"
  1669                           ; Number of cases is 4, Range of values is 0 to 3
  1670                           ; switch strategies available:
  1671                           ; Name         Instructions Cycles
  1672                           ; simple_byte           13     7 (average)
  1673                           ;	Chosen strategy is simple_byte
  1674  0004FA  0100               	movlb	0	; () banked
  1675  0004FC  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1676  0004FE  0A00               	xorlw	0	; case 0
  1677  000500  B4D8               	btfsc	status,2,c
  1678  000502  D7E2               	goto	l8164
  1679  000504  0A01               	xorlw	1	; case 1
  1680  000506  B4D8               	btfsc	status,2,c
  1681  000508  D7E1               	goto	l8166
  1682  00050A  0A03               	xorlw	3	; case 2
  1683  00050C  B4D8               	btfsc	status,2,c
  1684  00050E  D7E0               	goto	l8168
  1685  000510  0A01               	xorlw	1	; case 3
  1686  000512  B4D8               	btfsc	status,2,c
  1687  000514  D7DF               	goto	l8170
  1688  000516  D7E3               	goto	l8172
  1689  000518                     l8180:
  1690                           
  1691                           ;State_Mchn.c: 237: }
  1692                           ;State_Mchn.c: 238: if((GETxAPIxVAL(23) != 4) && (GETxAPIxVAL(24) != 4))
  1693  000518  0E17               	movlw	23
  1694  00051A  ECBB  F016         	call	_GETxAPIxVAL
  1695  00051E  0E04               	movlw	4
  1696  000520  0100               	movlb	0	; () banked
  1697  000522  19F9               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1698  000524  0100               	movlb	0	; () banked
  1699  000526  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1700  000528  B4D8               	btfsc	status,2,c
  1701  00052A  0012               	return	
  1702                           
  1703                           ; BSR set to: 0
  1704  00052C  0E18               	movlw	24
  1705  00052E  ECBB  F016         	call	_GETxAPIxVAL
  1706  000532  0E04               	movlw	4
  1707  000534  0100               	movlb	0	; () banked
  1708  000536  19F9               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1709  000538  0100               	movlb	0	; () banked
  1710  00053A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1711  00053C  B4D8               	btfsc	status,2,c
  1712  00053E  0012               	return	
  1713  000540  D0C2               	goto	l8256
  1714  000542                     l8186:
  1715                           
  1716                           ; BSR set to: 0
  1717  000542  0E00               	movlw	0
  1718  000544  6E1F               	movwf	_Switch_Init,c
  1719                           
  1720                           ;State_Mchn.c: 245: break;
  1721  000546  0012               	return	
  1722  000548                     l8188:
  1723                           
  1724                           ; BSR set to: 0
  1725  000548  0E01               	movlw	1
  1726  00054A  6E22               	movwf	_Switch_Program,c
  1727                           
  1728                           ;State_Mchn.c: 247: Switch_Init = 7;
  1729  00054C  0E07               	movlw	7
  1730  00054E  6E1F               	movwf	_Switch_Init,c
  1731                           
  1732                           ;State_Mchn.c: 248: break;
  1733  000550  0012               	return	
  1734  000552                     l8190:
  1735                           
  1736                           ; BSR set to: 0
  1737  000552  0E02               	movlw	2
  1738  000554  6E22               	movwf	_Switch_Program,c
  1739                           
  1740                           ;State_Mchn.c: 250: Switch_Init = 7;
  1741  000556  0E07               	movlw	7
  1742  000558  6E1F               	movwf	_Switch_Init,c
  1743                           
  1744                           ;State_Mchn.c: 251: break;
  1745  00055A  0012               	return	
  1746  00055C                     l8192:
  1747                           
  1748                           ; BSR set to: 0
  1749  00055C  0E04               	movlw	4
  1750  00055E  6E22               	movwf	_Switch_Program,c
  1751                           
  1752                           ;State_Mchn.c: 253: Switch_Init = 7;
  1753  000560  0E07               	movlw	7
  1754  000562  6E1F               	movwf	_Switch_Init,c
  1755                           
  1756                           ;State_Mchn.c: 254: break;
  1757  000564  0012               	return	
  1758  000566                     l8194:
  1759                           
  1760                           ; BSR set to: 0
  1761  000566  0E08               	movlw	8
  1762  000568  6E1F               	movwf	_Switch_Init,c
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;State_Mchn.c: 256: Red_Led(1);
  1766  00056A  0E01               	movlw	1
  1767  00056C  ECCC  F014         	call	_Red_Led
  1768                           
  1769                           ;State_Mchn.c: 258: }
  1770                           
  1771                           ;State_Mchn.c: 257: break;
  1772  000570  0012               	return	
  1773  000572                     l8200:
  1774  000572  0E18               	movlw	24
  1775  000574  ECBB  F016         	call	_GETxAPIxVAL
  1776                           
  1777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1778                           ; Switch size 1, requested type "space"
  1779                           ; Number of cases is 1, Range of values is 0 to 0
  1780                           ; switch strategies available:
  1781                           ; Name         Instructions Cycles
  1782                           ; simple_byte            4     3 (average)
  1783                           ;	Chosen strategy is simple_byte
  1784  000578  0100               	movlb	0	; () banked
  1785  00057A  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1786  00057C  0A00               	xorlw	0	; case 0
  1787  00057E  A4D8               	btfss	status,2,c
  1788  000580  D7F2               	goto	l8194
  1789                           
  1790                           ; BSR set to: 0
  1791                           ; Switch size 1, requested type "space"
  1792                           ; Number of cases is 4, Range of values is 0 to 3
  1793                           ; switch strategies available:
  1794                           ; Name         Instructions Cycles
  1795                           ; simple_byte           13     7 (average)
  1796                           ;	Chosen strategy is simple_byte
  1797  000582  0100               	movlb	0	; () banked
  1798  000584  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1799  000586  0A00               	xorlw	0	; case 0
  1800  000588  B4D8               	btfsc	status,2,c
  1801  00058A  D7DB               	goto	l8186
  1802  00058C  0A01               	xorlw	1	; case 1
  1803  00058E  B4D8               	btfsc	status,2,c
  1804  000590  D7DB               	goto	l8188
  1805  000592  0A03               	xorlw	3	; case 2
  1806  000594  B4D8               	btfsc	status,2,c
  1807  000596  D7DD               	goto	l8190
  1808  000598  0A01               	xorlw	1	; case 3
  1809  00059A  B4D8               	btfsc	status,2,c
  1810  00059C  D7DF               	goto	l8192
  1811  00059E  D7E3               	goto	l8194
  1812  0005A0                     l8202:
  1813                           
  1814                           ; BSR set to: 0
  1815  0005A0  0E01               	movlw	1
  1816  0005A2  6E22               	movwf	_Switch_Program,c
  1817                           
  1818                           ;State_Mchn.c: 263: Switch_Init = 7;
  1819  0005A4  0E07               	movlw	7
  1820  0005A6  6E1F               	movwf	_Switch_Init,c
  1821                           
  1822                           ;State_Mchn.c: 264: break;
  1823  0005A8  0012               	return	
  1824  0005AA                     l8204:
  1825                           
  1826                           ; BSR set to: 0
  1827  0005AA  0E00               	movlw	0
  1828  0005AC  6E1F               	movwf	_Switch_Init,c
  1829                           
  1830                           ;State_Mchn.c: 266: break;
  1831  0005AE  0012               	return	
  1832  0005B0                     l8206:
  1833                           
  1834                           ; BSR set to: 0
  1835  0005B0  0E00               	movlw	0
  1836  0005B2  6E22               	movwf	_Switch_Program,c
  1837                           
  1838                           ;State_Mchn.c: 268: Switch_Init = 7;
  1839  0005B4  0E07               	movlw	7
  1840  0005B6  6E1F               	movwf	_Switch_Init,c
  1841                           
  1842                           ;State_Mchn.c: 269: break;
  1843  0005B8  0012               	return	
  1844  0005BA                     l8208:
  1845                           
  1846                           ; BSR set to: 0
  1847  0005BA  0E06               	movlw	6
  1848  0005BC  6E22               	movwf	_Switch_Program,c
  1849                           
  1850                           ;State_Mchn.c: 271: Switch_Init = 7;
  1851  0005BE  0E07               	movlw	7
  1852  0005C0  6E1F               	movwf	_Switch_Init,c
  1853                           
  1854                           ;State_Mchn.c: 272: break;
  1855  0005C2  0012               	return	
  1856  0005C4                     l8210:
  1857                           
  1858                           ; BSR set to: 0
  1859  0005C4  0E08               	movlw	8
  1860  0005C6  6E1F               	movwf	_Switch_Init,c
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;State_Mchn.c: 274: Red_Led(1);
  1864  0005C8  0E01               	movlw	1
  1865  0005CA  ECCC  F014         	call	_Red_Led
  1866                           
  1867                           ;State_Mchn.c: 276: }
  1868                           
  1869                           ;State_Mchn.c: 275: break;
  1870  0005CE  0012               	return	
  1871  0005D0                     l8216:
  1872  0005D0  0E18               	movlw	24
  1873  0005D2  ECBB  F016         	call	_GETxAPIxVAL
  1874                           
  1875                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1876                           ; Switch size 1, requested type "space"
  1877                           ; Number of cases is 1, Range of values is 0 to 0
  1878                           ; switch strategies available:
  1879                           ; Name         Instructions Cycles
  1880                           ; simple_byte            4     3 (average)
  1881                           ;	Chosen strategy is simple_byte
  1882  0005D6  0100               	movlb	0	; () banked
  1883  0005D8  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1884  0005DA  0A00               	xorlw	0	; case 0
  1885  0005DC  A4D8               	btfss	status,2,c
  1886  0005DE  D7F2               	goto	l8210
  1887                           
  1888                           ; BSR set to: 0
  1889                           ; Switch size 1, requested type "space"
  1890                           ; Number of cases is 4, Range of values is 0 to 3
  1891                           ; switch strategies available:
  1892                           ; Name         Instructions Cycles
  1893                           ; simple_byte           13     7 (average)
  1894                           ;	Chosen strategy is simple_byte
  1895  0005E0  0100               	movlb	0	; () banked
  1896  0005E2  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1897  0005E4  0A00               	xorlw	0	; case 0
  1898  0005E6  B4D8               	btfsc	status,2,c
  1899  0005E8  D7DB               	goto	l8202
  1900  0005EA  0A01               	xorlw	1	; case 1
  1901  0005EC  B4D8               	btfsc	status,2,c
  1902  0005EE  D7DD               	goto	l8204
  1903  0005F0  0A03               	xorlw	3	; case 2
  1904  0005F2  B4D8               	btfsc	status,2,c
  1905  0005F4  D7DD               	goto	l8206
  1906  0005F6  0A01               	xorlw	1	; case 3
  1907  0005F8  B4D8               	btfsc	status,2,c
  1908  0005FA  D7DF               	goto	l8208
  1909  0005FC  D7E3               	goto	l8210
  1910  0005FE                     l8218:
  1911                           
  1912                           ; BSR set to: 0
  1913  0005FE  0E02               	movlw	2
  1914  000600  6E22               	movwf	_Switch_Program,c
  1915                           
  1916                           ;State_Mchn.c: 281: Switch_Init = 7;
  1917  000602  0E07               	movlw	7
  1918  000604  6E1F               	movwf	_Switch_Init,c
  1919                           
  1920                           ;State_Mchn.c: 282: break;
  1921  000606  0012               	return	
  1922  000608                     l8220:
  1923                           
  1924                           ; BSR set to: 0
  1925  000608  0E00               	movlw	0
  1926  00060A  6E22               	movwf	_Switch_Program,c
  1927                           
  1928                           ;State_Mchn.c: 284: Switch_Init = 7;
  1929  00060C  0E07               	movlw	7
  1930  00060E  6E1F               	movwf	_Switch_Init,c
  1931                           
  1932                           ;State_Mchn.c: 285: break;
  1933  000610  0012               	return	
  1934  000612                     l8222:
  1935                           
  1936                           ; BSR set to: 0
  1937  000612  0E00               	movlw	0
  1938  000614  6E1F               	movwf	_Switch_Init,c
  1939                           
  1940                           ;State_Mchn.c: 287: break;
  1941  000616  0012               	return	
  1942  000618                     l8224:
  1943                           
  1944                           ; BSR set to: 0
  1945  000618  0E03               	movlw	3
  1946  00061A  6E22               	movwf	_Switch_Program,c
  1947                           
  1948                           ;State_Mchn.c: 289: Switch_Init = 7;
  1949  00061C  0E07               	movlw	7
  1950  00061E  6E1F               	movwf	_Switch_Init,c
  1951                           
  1952                           ;State_Mchn.c: 290: break;
  1953  000620  0012               	return	
  1954  000622                     l8226:
  1955                           
  1956                           ; BSR set to: 0
  1957  000622  0E08               	movlw	8
  1958  000624  6E1F               	movwf	_Switch_Init,c
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;State_Mchn.c: 292: Red_Led(1);
  1962  000626  0E01               	movlw	1
  1963  000628  ECCC  F014         	call	_Red_Led
  1964                           
  1965                           ;State_Mchn.c: 294: }
  1966                           
  1967                           ;State_Mchn.c: 293: break;
  1968  00062C  0012               	return	
  1969  00062E                     l8232:
  1970  00062E  0E18               	movlw	24
  1971  000630  ECBB  F016         	call	_GETxAPIxVAL
  1972                           
  1973                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1974                           ; Switch size 1, requested type "space"
  1975                           ; Number of cases is 1, Range of values is 0 to 0
  1976                           ; switch strategies available:
  1977                           ; Name         Instructions Cycles
  1978                           ; simple_byte            4     3 (average)
  1979                           ;	Chosen strategy is simple_byte
  1980  000634  0100               	movlb	0	; () banked
  1981  000636  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1982  000638  0A00               	xorlw	0	; case 0
  1983  00063A  A4D8               	btfss	status,2,c
  1984  00063C  D7F2               	goto	l8226
  1985                           
  1986                           ; BSR set to: 0
  1987                           ; Switch size 1, requested type "space"
  1988                           ; Number of cases is 4, Range of values is 0 to 3
  1989                           ; switch strategies available:
  1990                           ; Name         Instructions Cycles
  1991                           ; simple_byte           13     7 (average)
  1992                           ;	Chosen strategy is simple_byte
  1993  00063E  0100               	movlb	0	; () banked
  1994  000640  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  1995  000642  0A00               	xorlw	0	; case 0
  1996  000644  B4D8               	btfsc	status,2,c
  1997  000646  D7DB               	goto	l8218
  1998  000648  0A01               	xorlw	1	; case 1
  1999  00064A  B4D8               	btfsc	status,2,c
  2000  00064C  D7DD               	goto	l8220
  2001  00064E  0A03               	xorlw	3	; case 2
  2002  000650  B4D8               	btfsc	status,2,c
  2003  000652  D7DF               	goto	l8222
  2004  000654  0A01               	xorlw	1	; case 3
  2005  000656  B4D8               	btfsc	status,2,c
  2006  000658  D7DF               	goto	l8224
  2007  00065A  D7E3               	goto	l8226
  2008  00065C                     l8234:
  2009                           
  2010                           ; BSR set to: 0
  2011  00065C  0E04               	movlw	4
  2012  00065E  6E22               	movwf	_Switch_Program,c
  2013                           
  2014                           ;State_Mchn.c: 299: Switch_Init = 7;
  2015  000660  0E07               	movlw	7
  2016  000662  6E1F               	movwf	_Switch_Init,c
  2017                           
  2018                           ;State_Mchn.c: 300: break;
  2019  000664  0012               	return	
  2020  000666                     l8236:
  2021                           
  2022                           ; BSR set to: 0
  2023  000666  0E06               	movlw	6
  2024  000668  6E22               	movwf	_Switch_Program,c
  2025                           
  2026                           ;State_Mchn.c: 302: Switch_Init = 7;
  2027  00066A  0E07               	movlw	7
  2028  00066C  6E1F               	movwf	_Switch_Init,c
  2029                           
  2030                           ;State_Mchn.c: 303: break;
  2031  00066E  0012               	return	
  2032  000670                     l8238:
  2033                           
  2034                           ; BSR set to: 0
  2035  000670  0E03               	movlw	3
  2036  000672  6E22               	movwf	_Switch_Program,c
  2037                           
  2038                           ;State_Mchn.c: 305: Switch_Init = 7;
  2039  000674  0E07               	movlw	7
  2040  000676  6E1F               	movwf	_Switch_Init,c
  2041                           
  2042                           ;State_Mchn.c: 306: break;
  2043  000678  0012               	return	
  2044  00067A                     l8240:
  2045                           
  2046                           ; BSR set to: 0
  2047  00067A  0E00               	movlw	0
  2048  00067C  6E1F               	movwf	_Switch_Init,c
  2049                           
  2050                           ;State_Mchn.c: 308: break;
  2051  00067E  0012               	return	
  2052  000680                     l8242:
  2053                           
  2054                           ; BSR set to: 0
  2055  000680  0E08               	movlw	8
  2056  000682  6E1F               	movwf	_Switch_Init,c
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;State_Mchn.c: 310: Red_Led(1);
  2060  000684  0E01               	movlw	1
  2061  000686  ECCC  F014         	call	_Red_Led
  2062                           
  2063                           ;State_Mchn.c: 312: }
  2064                           
  2065                           ;State_Mchn.c: 311: break;
  2066  00068A  0012               	return	
  2067  00068C                     l8248:
  2068  00068C  0E18               	movlw	24
  2069  00068E  ECBB  F016         	call	_GETxAPIxVAL
  2070                           
  2071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2072                           ; Switch size 1, requested type "space"
  2073                           ; Number of cases is 1, Range of values is 0 to 0
  2074                           ; switch strategies available:
  2075                           ; Name         Instructions Cycles
  2076                           ; simple_byte            4     3 (average)
  2077                           ;	Chosen strategy is simple_byte
  2078  000692  0100               	movlb	0	; () banked
  2079  000694  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2080  000696  0A00               	xorlw	0	; case 0
  2081  000698  A4D8               	btfss	status,2,c
  2082  00069A  D7F2               	goto	l8242
  2083                           
  2084                           ; BSR set to: 0
  2085                           ; Switch size 1, requested type "space"
  2086                           ; Number of cases is 4, Range of values is 0 to 3
  2087                           ; switch strategies available:
  2088                           ; Name         Instructions Cycles
  2089                           ; simple_byte           13     7 (average)
  2090                           ;	Chosen strategy is simple_byte
  2091  00069C  0100               	movlb	0	; () banked
  2092  00069E  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2093  0006A0  0A00               	xorlw	0	; case 0
  2094  0006A2  B4D8               	btfsc	status,2,c
  2095  0006A4  D7DB               	goto	l8234
  2096  0006A6  0A01               	xorlw	1	; case 1
  2097  0006A8  B4D8               	btfsc	status,2,c
  2098  0006AA  D7DD               	goto	l8236
  2099  0006AC  0A03               	xorlw	3	; case 2
  2100  0006AE  B4D8               	btfsc	status,2,c
  2101  0006B0  D7DF               	goto	l8238
  2102  0006B2  0A01               	xorlw	1	; case 3
  2103  0006B4  B4D8               	btfsc	status,2,c
  2104  0006B6  D7E1               	goto	l8240
  2105  0006B8  D7E3               	goto	l8242
  2106  0006BA                     l8250:
  2107                           
  2108                           ; BSR set to: 0
  2109  0006BA  0E08               	movlw	8
  2110  0006BC  6E1F               	movwf	_Switch_Init,c
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;State_Mchn.c: 315: Red_Led(1);
  2114  0006BE  0E01               	movlw	1
  2115  0006C0  ECCC  F014         	call	_Red_Led
  2116                           
  2117                           ;State_Mchn.c: 317: }
  2118                           
  2119                           ;State_Mchn.c: 316: break;
  2120  0006C4  0012               	return	
  2121  0006C6                     l8256:
  2122  0006C6  0E17               	movlw	23
  2123  0006C8  ECBB  F016         	call	_GETxAPIxVAL
  2124                           
  2125                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2126                           ; Switch size 1, requested type "space"
  2127                           ; Number of cases is 1, Range of values is 0 to 0
  2128                           ; switch strategies available:
  2129                           ; Name         Instructions Cycles
  2130                           ; simple_byte            4     3 (average)
  2131                           ;	Chosen strategy is simple_byte
  2132  0006CC  0100               	movlb	0	; () banked
  2133  0006CE  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2134  0006D0  0A00               	xorlw	0	; case 0
  2135  0006D2  A4D8               	btfss	status,2,c
  2136  0006D4  D7F2               	goto	l8250
  2137                           
  2138                           ; BSR set to: 0
  2139                           ; Switch size 1, requested type "space"
  2140                           ; Number of cases is 4, Range of values is 0 to 3
  2141                           ; switch strategies available:
  2142                           ; Name         Instructions Cycles
  2143                           ; simple_byte           13     7 (average)
  2144                           ;	Chosen strategy is simple_byte
  2145  0006D6  0100               	movlb	0	; () banked
  2146  0006D8  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2147  0006DA  0A00               	xorlw	0	; case 0
  2148  0006DC  B4D8               	btfsc	status,2,c
  2149  0006DE  D749               	goto	l8200
  2150  0006E0  0A01               	xorlw	1	; case 1
  2151  0006E2  B4D8               	btfsc	status,2,c
  2152  0006E4  D775               	goto	l8216
  2153  0006E6  0A03               	xorlw	3	; case 2
  2154  0006E8  B4D8               	btfsc	status,2,c
  2155  0006EA  D7A1               	goto	l8232
  2156  0006EC  0A01               	xorlw	1	; case 3
  2157  0006EE  B4D8               	btfsc	status,2,c
  2158  0006F0  D7CD               	goto	l8248
  2159  0006F2  D7E3               	goto	l8250
  2160  0006F4                     l8258:
  2161  0006F4  0E0B               	movlw	11
  2162  0006F6  6E1F               	movwf	_Switch_Init,c
  2163                           
  2164                           ;State_Mchn.c: 322: break;
  2165  0006F8  0012               	return	
  2166  0006FA                     l8260:
  2167  0006FA  0E10               	movlw	16
  2168  0006FC  ECBB  F016         	call	_GETxAPIxVAL
  2169  000700  0100               	movlb	0	; () banked
  2170  000702  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2171  000704  0100               	movlb	0	; () banked
  2172  000706  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2173  000708  B4D8               	btfsc	status,2,c
  2174  00070A  D006               	goto	l8264
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;State_Mchn.c: 325: {
  2178                           ;State_Mchn.c: 326: Switch_Main = 2;
  2179  00070C  0E02               	movlw	2
  2180  00070E  6E20               	movwf	_Switch_Main,c
  2181                           
  2182                           ;State_Mchn.c: 327: Switch_Init = 0;
  2183  000710  0E00               	movlw	0
  2184  000712  6E1F               	movwf	_Switch_Init,c
  2185                           
  2186                           ;State_Mchn.c: 328: Stop_Program = 0;
  2187  000714  0E00               	movlw	0
  2188  000716  6E19               	movwf	_Stop_Program,c
  2189  000718                     l8264:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;State_Mchn.c: 329: }
  2193                           ;State_Mchn.c: 330: Green_Led(3);
  2194  000718  0E03               	movlw	3
  2195  00071A  EC0E  F015         	call	_Green_Led
  2196                           
  2197                           ;State_Mchn.c: 331: Red_Led(0);
  2198  00071E  0E00               	movlw	0
  2199  000720  ECCC  F014         	call	_Red_Led
  2200                           
  2201                           ;State_Mchn.c: 332: break;
  2202  000724  0012               	return	
  2203  000726                     l8268:
  2204  000726  0E17               	movlw	23
  2205  000728  ECBB  F016         	call	_GETxAPIxVAL
  2206  00072C  0E04               	movlw	4
  2207  00072E  0100               	movlb	0	; () banked
  2208  000730  19F9               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2209  000732  0100               	movlb	0	; () banked
  2210  000734  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2211  000736  A4D8               	btfss	status,2,c
  2212  000738  D01F               	goto	l8286
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;State_Mchn.c: 335: {
  2216                           ;State_Mchn.c: 336: Switch_Program = 0;
  2217  00073A  0E00               	movlw	0
  2218  00073C  6E22               	movwf	_Switch_Program,c
  2219                           
  2220                           ;State_Mchn.c: 337: Switch_Init = 10;
  2221  00073E  0E0A               	movlw	10
  2222  000740  6E1F               	movwf	_Switch_Init,c
  2223                           
  2224                           ;State_Mchn.c: 338: }
  2225  000742  0012               	return	
  2226  000744                     l8272:
  2227                           
  2228                           ; BSR set to: 0
  2229  000744  0E01               	movlw	1
  2230  000746  6E22               	movwf	_Switch_Program,c
  2231  000748  0E0A               	movlw	10
  2232  00074A  6E1F               	movwf	_Switch_Init,c
  2233  00074C  0012               	return	
  2234  00074E                     l8274:
  2235                           
  2236                           ; BSR set to: 0
  2237  00074E  0E03               	movlw	3
  2238  000750  6E22               	movwf	_Switch_Program,c
  2239  000752  0E0A               	movlw	10
  2240  000754  6E1F               	movwf	_Switch_Init,c
  2241  000756  0012               	return	
  2242  000758                     l8276:
  2243                           
  2244                           ; BSR set to: 0
  2245  000758  0E00               	movlw	0
  2246  00075A  6E22               	movwf	_Switch_Program,c
  2247  00075C  0E0A               	movlw	10
  2248  00075E  6E1F               	movwf	_Switch_Init,c
  2249  000760  0012               	return	
  2250  000762                     l8278:
  2251                           
  2252                           ; BSR set to: 0
  2253  000762  0E02               	movlw	2
  2254  000764  6E22               	movwf	_Switch_Program,c
  2255  000766  0E0A               	movlw	10
  2256  000768  6E1F               	movwf	_Switch_Init,c
  2257  00076A  0012               	return	
  2258  00076C                     l8280:
  2259                           
  2260                           ; BSR set to: 0
  2261  00076C  0E0B               	movlw	11
  2262  00076E  6E1F               	movwf	_Switch_Init,c
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;State_Mchn.c: 346: Red_Led(1);
  2266  000770  0E01               	movlw	1
  2267  000772  ECCC  F014         	call	_Red_Led
  2268                           
  2269                           ;State_Mchn.c: 348: }
  2270                           
  2271                           ;State_Mchn.c: 347: break;
  2272  000776  0012               	return	
  2273  000778                     l8286:
  2274  000778  0E17               	movlw	23
  2275  00077A  ECBB  F016         	call	_GETxAPIxVAL
  2276                           
  2277                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2278                           ; Switch size 1, requested type "space"
  2279                           ; Number of cases is 1, Range of values is 0 to 0
  2280                           ; switch strategies available:
  2281                           ; Name         Instructions Cycles
  2282                           ; simple_byte            4     3 (average)
  2283                           ;	Chosen strategy is simple_byte
  2284  00077E  0100               	movlb	0	; () banked
  2285  000780  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2286  000782  0A00               	xorlw	0	; case 0
  2287  000784  A4D8               	btfss	status,2,c
  2288  000786  D7F2               	goto	l8280
  2289                           
  2290                           ; BSR set to: 0
  2291                           ; Switch size 1, requested type "space"
  2292                           ; Number of cases is 4, Range of values is 0 to 3
  2293                           ; switch strategies available:
  2294                           ; Name         Instructions Cycles
  2295                           ; simple_byte           13     7 (average)
  2296                           ;	Chosen strategy is simple_byte
  2297  000788  0100               	movlb	0	; () banked
  2298  00078A  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2299  00078C  0A00               	xorlw	0	; case 0
  2300  00078E  B4D8               	btfsc	status,2,c
  2301  000790  D7D9               	goto	l8272
  2302  000792  0A01               	xorlw	1	; case 1
  2303  000794  B4D8               	btfsc	status,2,c
  2304  000796  D7DB               	goto	l8274
  2305  000798  0A03               	xorlw	3	; case 2
  2306  00079A  B4D8               	btfsc	status,2,c
  2307  00079C  D7DD               	goto	l8276
  2308  00079E  0A01               	xorlw	1	; case 3
  2309  0007A0  B4D8               	btfsc	status,2,c
  2310  0007A2  D7DF               	goto	l8278
  2311  0007A4  D7E3               	goto	l8280
  2312  0007A6                     l8288:
  2313  0007A6  0E00               	movlw	0
  2314  0007A8  6E1F               	movwf	_Switch_Init,c
  2315                           
  2316                           ;State_Mchn.c: 352: Red_Led(1);
  2317  0007AA  0E01               	movlw	1
  2318  0007AC  ECCC  F014         	call	_Red_Led
  2319                           
  2320                           ;State_Mchn.c: 354: }
  2321                           
  2322                           ;State_Mchn.c: 353: break;
  2323  0007B0  0012               	return	
  2324  0007B2                     l8294:
  2325  0007B2  501F               	movf	_Switch_Init,w,c
  2326                           
  2327                           ; Switch size 1, requested type "space"
  2328                           ; Number of cases is 12, Range of values is 0 to 11
  2329                           ; switch strategies available:
  2330                           ; Name         Instructions Cycles
  2331                           ; simple_byte           37    19 (average)
  2332                           ;	Chosen strategy is simple_byte
  2333  0007B4  0A00               	xorlw	0	; case 0
  2334  0007B6  B4D8               	btfsc	status,2,c
  2335  0007B8  D47C               	goto	l8002
  2336  0007BA  0A01               	xorlw	1	; case 1
  2337  0007BC  B4D8               	btfsc	status,2,c
  2338  0007BE  D482               	goto	l8006
  2339  0007C0  0A03               	xorlw	3	; case 2
  2340  0007C2  B4D8               	btfsc	status,2,c
  2341  0007C4  D4E9               	goto	l8040
  2342  0007C6  0A01               	xorlw	1	; case 3
  2343  0007C8  B4D8               	btfsc	status,2,c
  2344  0007CA  D525               	goto	l8058
  2345  0007CC  0A07               	xorlw	7	; case 4
  2346  0007CE  B4D8               	btfsc	status,2,c
  2347  0007D0  D5A0               	goto	l8098
  2348  0007D2  0A01               	xorlw	1	; case 5
  2349  0007D4  B4D8               	btfsc	status,2,c
  2350  0007D6  D608               	goto	l8122
  2351  0007D8  0A03               	xorlw	3	; case 6
  2352  0007DA  B4D8               	btfsc	status,2,c
  2353  0007DC  D61E               	goto	l8130
  2354  0007DE  0A01               	xorlw	1	; case 7
  2355  0007E0  B4D8               	btfsc	status,2,c
  2356  0007E2  D61E               	goto	l8132
  2357  0007E4  0A0F               	xorlw	15	; case 8
  2358  0007E6  B4D8               	btfsc	status,2,c
  2359  0007E8  D631               	goto	l8140
  2360  0007EA  0A01               	xorlw	1	; case 9
  2361  0007EC  B4D8               	btfsc	status,2,c
  2362  0007EE  D782               	goto	l8258
  2363  0007F0  0A03               	xorlw	3	; case 10
  2364  0007F2  B4D8               	btfsc	status,2,c
  2365  0007F4  D782               	goto	l8260
  2366  0007F6  0A01               	xorlw	1	; case 11
  2367  0007F8  B4D8               	btfsc	status,2,c
  2368  0007FA  D795               	goto	l8268
  2369  0007FC  D7D4               	goto	l8288
  2370  0007FE                     l8296:
  2371  0007FE  0E00               	movlw	0
  2372  000800  0101               	movlb	1	; () banked
  2373  000802  6FFF               	movwf	Train_Path@To& (0+255),b
  2374  000804  0E02               	movlw	2
  2375  000806  EC94  F00B         	call	_Train_Path
  2376  00080A  0900               	iorlw	0
  2377  00080C  A4D8               	btfss	status,2,c
  2378  00080E  D221               	goto	l8540
  2379                           
  2380                           ;State_Mchn.c: 360: {
  2381                           ;State_Mchn.c: 361: Switch_Program = 1;
  2382  000810  0E01               	movlw	1
  2383  000812  6E22               	movwf	_Switch_Program,c
  2384                           
  2385                           ;State_Mchn.c: 362: Eeprom_Store();
  2386  000814  EC55  F013         	call	_Eeprom_Store	;wreg free
  2387  000818                     l8302:
  2388                           
  2389                           ;State_Mchn.c: 363: if(Stop_Program == 1)
  2390  000818  0419               	decf	_Stop_Program,w,c
  2391  00081A  A4D8               	btfss	status,2,c
  2392  00081C  D21A               	goto	l8540
  2393                           
  2394                           ;State_Mchn.c: 364: {
  2395                           ;State_Mchn.c: 365: Switch_Main = 0;
  2396  00081E  0E00               	movlw	0
  2397  000820  6E20               	movwf	_Switch_Main,c
  2398                           
  2399                           ;State_Mchn.c: 367: }
  2400                           ;State_Mchn.c: 368: }
  2401                           ;State_Mchn.c: 369: break;
  2402  000822  D217               	goto	l8540
  2403  000824                     l8306:
  2404  000824  0E02               	movlw	2
  2405  000826  0101               	movlb	1	; () banked
  2406  000828  6FFF               	movwf	Train_Path@To& (0+255),b
  2407  00082A  0E01               	movlw	1
  2408  00082C  EC94  F00B         	call	_Train_Path
  2409  000830  0900               	iorlw	0
  2410  000832  A4D8               	btfss	status,2,c
  2411  000834  D20E               	goto	l8540
  2412                           
  2413                           ;State_Mchn.c: 372: {
  2414                           ;State_Mchn.c: 373: Switch_Program = 2;
  2415  000836  0E02               	movlw	2
  2416  000838  6E22               	movwf	_Switch_Program,c
  2417                           
  2418                           ;State_Mchn.c: 374: Eeprom_Store();
  2419  00083A  EC55  F013         	call	_Eeprom_Store	;wreg free
  2420  00083E  D7EC               	goto	l8302
  2421  000840                     l8316:
  2422  000840  0E03               	movlw	3
  2423  000842  0101               	movlb	1	; () banked
  2424  000844  6FFF               	movwf	Train_Path@To& (0+255),b
  2425  000846  0E00               	movlw	0
  2426  000848  EC94  F00B         	call	_Train_Path
  2427  00084C  0900               	iorlw	0
  2428  00084E  A4D8               	btfss	status,2,c
  2429  000850  D200               	goto	l8540
  2430                           
  2431                           ;State_Mchn.c: 384: {
  2432                           ;State_Mchn.c: 385: Switch_Program = 3;
  2433  000852  0E03               	movlw	3
  2434  000854  6E22               	movwf	_Switch_Program,c
  2435                           
  2436                           ;State_Mchn.c: 386: Eeprom_Store();
  2437  000856  EC55  F013         	call	_Eeprom_Store	;wreg free
  2438  00085A  D7DE               	goto	l8302
  2439  00085C                     l8326:
  2440  00085C  0E00               	movlw	0
  2441  00085E  0101               	movlb	1	; () banked
  2442  000860  6FFF               	movwf	Train_Path@To& (0+255),b
  2443  000862  0E02               	movlw	2
  2444  000864  EC94  F00B         	call	_Train_Path
  2445  000868  0900               	iorlw	0
  2446  00086A  A4D8               	btfss	status,2,c
  2447  00086C  D1F2               	goto	l8540
  2448                           
  2449                           ;State_Mchn.c: 396: {
  2450                           ;State_Mchn.c: 397: Switch_Program = 4;
  2451  00086E  0E04               	movlw	4
  2452  000870  6E22               	movwf	_Switch_Program,c
  2453                           
  2454                           ;State_Mchn.c: 398: Eeprom_Store();
  2455  000872  EC55  F013         	call	_Eeprom_Store	;wreg free
  2456  000876  D7D0               	goto	l8302
  2457  000878                     l8336:
  2458  000878  0E01               	movlw	1
  2459  00087A  0101               	movlb	1	; () banked
  2460  00087C  6FFF               	movwf	Train_Path@To& (0+255),b
  2461  00087E  0E03               	movlw	3
  2462  000880  EC94  F00B         	call	_Train_Path
  2463  000884  0900               	iorlw	0
  2464  000886  A4D8               	btfss	status,2,c
  2465  000888  D1E4               	goto	l8540
  2466                           
  2467                           ;State_Mchn.c: 408: {
  2468                           ;State_Mchn.c: 409: Switch_Program = 5;
  2469  00088A  0E05               	movlw	5
  2470  00088C  6E22               	movwf	_Switch_Program,c
  2471                           
  2472                           ;State_Mchn.c: 410: Eeprom_Store();
  2473  00088E  EC55  F013         	call	_Eeprom_Store	;wreg free
  2474  000892  D7C2               	goto	l8302
  2475  000894                     l8346:
  2476  000894  0E03               	movlw	3
  2477  000896  0101               	movlb	1	; () banked
  2478  000898  6FFF               	movwf	Train_Path@To& (0+255),b
  2479  00089A  0E00               	movlw	0
  2480  00089C  EC94  F00B         	call	_Train_Path
  2481  0008A0  0900               	iorlw	0
  2482  0008A2  A4D8               	btfss	status,2,c
  2483  0008A4  D1D6               	goto	l8540
  2484                           
  2485                           ;State_Mchn.c: 420: {
  2486                           ;State_Mchn.c: 421: Switch_Program = 6;
  2487  0008A6  0E06               	movlw	6
  2488  0008A8  6E22               	movwf	_Switch_Program,c
  2489                           
  2490                           ;State_Mchn.c: 422: Eeprom_Store();
  2491  0008AA  EC55  F013         	call	_Eeprom_Store	;wreg free
  2492  0008AE  D7B4               	goto	l8302
  2493  0008B0                     l8356:
  2494  0008B0  0E02               	movlw	2
  2495  0008B2  0101               	movlb	1	; () banked
  2496  0008B4  6FFF               	movwf	Train_Path@To& (0+255),b
  2497  0008B6  0E01               	movlw	1
  2498  0008B8  EC94  F00B         	call	_Train_Path
  2499  0008BC  0900               	iorlw	0
  2500  0008BE  A4D8               	btfss	status,2,c
  2501  0008C0  D1C8               	goto	l8540
  2502                           
  2503                           ;State_Mchn.c: 432: {
  2504                           ;State_Mchn.c: 433: Switch_Program = 7;
  2505  0008C2  0E07               	movlw	7
  2506  0008C4  6E22               	movwf	_Switch_Program,c
  2507                           
  2508                           ;State_Mchn.c: 434: Eeprom_Store();
  2509  0008C6  EC55  F013         	call	_Eeprom_Store	;wreg free
  2510  0008CA  D7A6               	goto	l8302
  2511  0008CC                     l8366:
  2512  0008CC  0E01               	movlw	1
  2513  0008CE  0101               	movlb	1	; () banked
  2514  0008D0  6FFF               	movwf	Train_Path@To& (0+255),b
  2515  0008D2  0E03               	movlw	3
  2516  0008D4  EC94  F00B         	call	_Train_Path
  2517  0008D8  0900               	iorlw	0
  2518  0008DA  A4D8               	btfss	status,2,c
  2519  0008DC  D1BA               	goto	l8540
  2520                           
  2521                           ;State_Mchn.c: 444: {
  2522                           ;State_Mchn.c: 445: Switch_Program = 0;
  2523  0008DE  0E00               	movlw	0
  2524  0008E0  6E22               	movwf	_Switch_Program,c
  2525                           
  2526                           ;State_Mchn.c: 446: Eeprom_Store();
  2527  0008E2  EC55  F013         	call	_Eeprom_Store	;wreg free
  2528  0008E6  D798               	goto	l8302
  2529  0008E8                     l8378:
  2530  0008E8  5022               	movf	_Switch_Program,w,c
  2531                           
  2532                           ; Switch size 1, requested type "space"
  2533                           ; Number of cases is 8, Range of values is 0 to 7
  2534                           ; switch strategies available:
  2535                           ; Name         Instructions Cycles
  2536                           ; simple_byte           25    13 (average)
  2537                           ;	Chosen strategy is simple_byte
  2538  0008EA  0A00               	xorlw	0	; case 0
  2539  0008EC  B4D8               	btfsc	status,2,c
  2540  0008EE  D787               	goto	l8296
  2541  0008F0  0A01               	xorlw	1	; case 1
  2542  0008F2  B4D8               	btfsc	status,2,c
  2543  0008F4  D797               	goto	l8306
  2544  0008F6  0A03               	xorlw	3	; case 2
  2545  0008F8  B4D8               	btfsc	status,2,c
  2546  0008FA  D7A2               	goto	l8316
  2547  0008FC  0A01               	xorlw	1	; case 3
  2548  0008FE  B4D8               	btfsc	status,2,c
  2549  000900  D7AD               	goto	l8326
  2550  000902  0A07               	xorlw	7	; case 4
  2551  000904  B4D8               	btfsc	status,2,c
  2552  000906  D7B8               	goto	l8336
  2553  000908  0A01               	xorlw	1	; case 5
  2554  00090A  B4D8               	btfsc	status,2,c
  2555  00090C  D7C3               	goto	l8346
  2556  00090E  0A03               	xorlw	3	; case 6
  2557  000910  B4D8               	btfsc	status,2,c
  2558  000912  D7CE               	goto	l8356
  2559  000914  0A01               	xorlw	1	; case 7
  2560  000916  B4D8               	btfsc	status,2,c
  2561  000918  D7D9               	goto	l8366
  2562                           
  2563                           ;State_Mchn.c: 460: switch(Switch_Activate_Controls)
  2564  00091A  D19B               	goto	l8540
  2565  00091C                     l8380:
  2566  00091C  0E14               	movlw	20
  2567  00091E  ECBB  F016         	call	_GETxAPIxVAL
  2568  000922  0100               	movlb	0	; () banked
  2569  000924  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2570  000926  0100               	movlb	0	; () banked
  2571  000928  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2572  00092A  B4D8               	btfsc	status,2,c
  2573  00092C  D00F               	goto	l8388
  2574                           
  2575                           ; BSR set to: 0
  2576  00092E  0E16               	movlw	22
  2577  000930  ECBB  F016         	call	_GETxAPIxVAL
  2578  000934  0100               	movlb	0	; () banked
  2579  000936  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2580  000938  0100               	movlb	0	; () banked
  2581  00093A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2582  00093C  B4D8               	btfsc	status,2,c
  2583  00093E  D006               	goto	l8388
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;State_Mchn.c: 463: {
  2587                           ;State_Mchn.c: 464: Switch_Activate_Controls = 1;
  2588  000940  0E01               	movlw	1
  2589  000942  6E1A               	movwf	_Switch_Activate_Controls,c
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;State_Mchn.c: 465: Red_Led(3);
  2593  000944  0E03               	movlw	3
  2594  000946  ECCC  F014         	call	_Red_Led
  2595                           
  2596                           ;State_Mchn.c: 466: }
  2597  00094A  D18E               	goto	l8542
  2598  00094C                     l8388:
  2599                           
  2600                           ;State_Mchn.c: 467: else
  2601                           ;State_Mchn.c: 468: {
  2602                           ;State_Mchn.c: 469: Switch_Activate_Controls = 0;
  2603  00094C  0E00               	movlw	0
  2604  00094E  6E1A               	movwf	_Switch_Activate_Controls,c
  2605                           
  2606                           ;State_Mchn.c: 470: Red_Led(0);
  2607  000950  0E00               	movlw	0
  2608  000952  ECCC  F014         	call	_Red_Led
  2609                           
  2610                           ;State_Mchn.c: 471: }
  2611                           ;State_Mchn.c: 472: break;
  2612  000956  D188               	goto	l8542
  2613  000958                     l8392:
  2614  000958  0E14               	movlw	20
  2615  00095A  ECBB  F016         	call	_GETxAPIxVAL
  2616  00095E  0100               	movlb	0	; () banked
  2617  000960  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2618  000962  0100               	movlb	0	; () banked
  2619  000964  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2620  000966  A4D8               	btfss	status,2,c
  2621  000968  D00F               	goto	l8400
  2622                           
  2623                           ; BSR set to: 0
  2624  00096A  0E16               	movlw	22
  2625  00096C  ECBB  F016         	call	_GETxAPIxVAL
  2626  000970  0100               	movlb	0	; () banked
  2627  000972  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2628  000974  0100               	movlb	0	; () banked
  2629  000976  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2630  000978  A4D8               	btfss	status,2,c
  2631  00097A  D006               	goto	l8400
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;State_Mchn.c: 475: {
  2635                           ;State_Mchn.c: 476: Switch_Activate_Controls = 2;
  2636  00097C  0E02               	movlw	2
  2637  00097E  6E1A               	movwf	_Switch_Activate_Controls,c
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;State_Mchn.c: 477: Red_Led(3);
  2641  000980  0E03               	movlw	3
  2642  000982  ECCC  F014         	call	_Red_Led
  2643                           
  2644                           ;State_Mchn.c: 478: }
  2645  000986  D005               	goto	l8404
  2646  000988                     l8400:
  2647                           
  2648                           ;State_Mchn.c: 479: else
  2649                           ;State_Mchn.c: 480: {
  2650                           ;State_Mchn.c: 481: Switch_Activate_Controls = 1;
  2651  000988  0E01               	movlw	1
  2652  00098A  6E1A               	movwf	_Switch_Activate_Controls,c
  2653                           
  2654                           ;State_Mchn.c: 482: Red_Led(3);
  2655  00098C  0E03               	movlw	3
  2656  00098E  ECCC  F014         	call	_Red_Led
  2657  000992                     l8404:
  2658                           
  2659                           ;State_Mchn.c: 483: }
  2660                           ;State_Mchn.c: 484: Activate_Controls_Counter = 10000;
  2661  000992  0E27               	movlw	39
  2662  000994  0100               	movlb	0	; () banked
  2663  000996  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2664  000998  0E10               	movlw	16
  2665  00099A  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  2666                           
  2667                           ;State_Mchn.c: 485: break;
  2668  00099C  D165               	goto	l8542
  2669  00099E                     l8406:
  2670  00099E  0E14               	movlw	20
  2671  0009A0  ECBB  F016         	call	_GETxAPIxVAL
  2672  0009A4  0100               	movlb	0	; () banked
  2673  0009A6  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2674  0009A8  0100               	movlb	0	; () banked
  2675  0009AA  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2676  0009AC  A4D8               	btfss	status,2,c
  2677  0009AE  D020               	goto	l8416
  2678                           
  2679                           ; BSR set to: 0
  2680  0009B0  0E16               	movlw	22
  2681  0009B2  ECBB  F016         	call	_GETxAPIxVAL
  2682  0009B6  0100               	movlb	0	; () banked
  2683  0009B8  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2684  0009BA  0100               	movlb	0	; () banked
  2685  0009BC  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2686  0009BE  A4D8               	btfss	status,2,c
  2687  0009C0  D017               	goto	l8416
  2688                           
  2689                           ; BSR set to: 0
  2690  0009C2  0E15               	movlw	21
  2691  0009C4  ECBB  F016         	call	_GETxAPIxVAL
  2692  0009C8  0100               	movlb	0	; () banked
  2693  0009CA  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2694  0009CC  0100               	movlb	0	; () banked
  2695  0009CE  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2696  0009D0  A4D8               	btfss	status,2,c
  2697  0009D2  D00E               	goto	l8416
  2698                           
  2699                           ; BSR set to: 0
  2700  0009D4  0E13               	movlw	19
  2701  0009D6  ECBB  F016         	call	_GETxAPIxVAL
  2702  0009DA  0100               	movlb	0	; () banked
  2703  0009DC  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2704  0009DE  0100               	movlb	0	; () banked
  2705  0009E0  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2706  0009E2  A4D8               	btfss	status,2,c
  2707  0009E4  D005               	goto	l8416
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;State_Mchn.c: 488: {
  2711                           ;State_Mchn.c: 489: Activate_Controls_Counter--;
  2712  0009E6  0100               	movlb	0	; () banked
  2713  0009E8  07E8               	decf	_Activate_Controls_Counter& (0+255),f,b
  2714  0009EA  A0D8               	btfss	status,0,c
  2715  0009EC  07E9               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  2716                           
  2717                           ;State_Mchn.c: 490: }
  2718  0009EE  D005               	goto	l8418
  2719  0009F0                     l8416:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;State_Mchn.c: 491: else
  2723                           ;State_Mchn.c: 492: {
  2724                           ;State_Mchn.c: 493: Activate_Controls_Counter = 10000;
  2725  0009F0  0E27               	movlw	39
  2726  0009F2  0100               	movlb	0	; () banked
  2727  0009F4  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2728  0009F6  0E10               	movlw	16
  2729  0009F8  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  2730  0009FA                     l8418:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;State_Mchn.c: 494: }
  2734                           ;State_Mchn.c: 496: Red_Led(3);
  2735  0009FA  0E03               	movlw	3
  2736  0009FC  ECCC  F014         	call	_Red_Led
  2737                           
  2738                           ;State_Mchn.c: 498: switch(GETxAPIxVAL(19))
  2739  000A00  D04A               	goto	l8446
  2740  000A02                     l8420:
  2741  000A02  0E00               	movlw	0
  2742  000A04  D03B               	goto	L8
  2743  000A06                     l8422:
  2744  000A06  0E07               	movlw	7
  2745  000A08  ECBB  F016         	call	_GETxAPIxVAL
  2746  000A0C  C0F9  F283         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2747  000A10  C0FA  F284         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2748  000A14  0E06               	movlw	6
  2749  000A16  ECBB  F016         	call	_GETxAPIxVAL
  2750  000A1A  0100               	movlb	0	; () banked
  2751  000A1C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2752  000A1E  0102               	movlb	2	; () banked
  2753  000A20  5D83               	subwf	??_Update_StateMchn& (0+255),w,b
  2754  000A22  0100               	movlb	0	; () banked
  2755  000A24  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2756  000A26  0102               	movlb	2	; () banked
  2757  000A28  5984               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  2758  000A2A  A0D8               	btfss	status,0,c
  2759  000A2C  D003               	goto	l313
  2760                           
  2761                           ; BSR set to: 2
  2762                           ;State_Mchn.c: 506: {
  2763                           ;State_Mchn.c: 507: DECRxAPIxVAL(7);
  2764  000A2E  0E07               	movlw	7
  2765  000A30  EC61  F016         	call	_DECRxAPIxVAL
  2766  000A34                     l313:
  2767                           
  2768                           ;State_Mchn.c: 508: }
  2769                           ;State_Mchn.c: 509: if(GETxAPIxVAL(8) <= GETxAPIxVAL(5))
  2770  000A34  0E05               	movlw	5
  2771  000A36  ECBB  F016         	call	_GETxAPIxVAL
  2772  000A3A  C0F9  F283         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2773  000A3E  C0FA  F284         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2774  000A42  0E08               	movlw	8
  2775  000A44  ECBB  F016         	call	_GETxAPIxVAL
  2776  000A48  0100               	movlb	0	; () banked
  2777  000A4A  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2778  000A4C  0102               	movlb	2	; () banked
  2779  000A4E  5D83               	subwf	??_Update_StateMchn& (0+255),w,b
  2780  000A50  0100               	movlb	0	; () banked
  2781  000A52  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2782  000A54  0102               	movlb	2	; () banked
  2783  000A56  5984               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  2784  000A58  A0D8               	btfss	status,0,c
  2785  000A5A  D003               	goto	l8428
  2786                           
  2787                           ; BSR set to: 2
  2788                           ;State_Mchn.c: 510: {
  2789                           ;State_Mchn.c: 511: INCRxAPIxVAL(8);
  2790  000A5C  0E08               	movlw	8
  2791  000A5E  EC8F  F016         	call	_INCRxAPIxVAL
  2792  000A62                     l8428:
  2793                           
  2794                           ;State_Mchn.c: 512: }
  2795                           ;State_Mchn.c: 513: Switch_Adjust_LB = 1;
  2796  000A62  0E01               	movlw	1
  2797  000A64  D00B               	goto	L8
  2798  000A66                     l8430:
  2799  000A66  5002               	movf	_Adjust_Counter+1,w,c
  2800  000A68  E104               	bnz	u7420
  2801  000A6A  0E14               	movlw	20
  2802  000A6C  5C01               	subwf	_Adjust_Counter,w,c
  2803  000A6E  A0D8               	btfss	status,0,c
  2804  000A70  D007               	goto	l8436
  2805  000A72                     u7420:
  2806                           
  2807                           ;State_Mchn.c: 517: {
  2808                           ;State_Mchn.c: 518: Adjust_Counter = 0;
  2809  000A72  0E00               	movlw	0
  2810  000A74  6E02               	movwf	_Adjust_Counter+1,c
  2811  000A76  0E00               	movlw	0
  2812  000A78  6E01               	movwf	_Adjust_Counter,c
  2813  000A7A  D7C3               	goto	l8420
  2814  000A7C                     L8:
  2815  000A7C  6E1B               	movwf	_Switch_Adjust_LB,c
  2816                           
  2817                           ;State_Mchn.c: 521: }
  2818                           
  2819                           ;State_Mchn.c: 520: break;
  2820  000A7E  D051               	goto	l8474
  2821  000A80                     l8436:
  2822                           
  2823                           ;State_Mchn.c: 522: else {Adjust_Counter++;}
  2824  000A80  4A01               	infsnz	_Adjust_Counter,f,c
  2825  000A82  2A02               	incf	_Adjust_Counter+1,f,c
  2826                           
  2827                           ;State_Mchn.c: 523: break;
  2828  000A84  D04E               	goto	l8474
  2829  000A86                     l8442:
  2830  000A86  501B               	movf	_Switch_Adjust_LB,w,c
  2831                           
  2832                           ; Switch size 1, requested type "space"
  2833                           ; Number of cases is 2, Range of values is 0 to 1
  2834                           ; switch strategies available:
  2835                           ; Name         Instructions Cycles
  2836                           ; simple_byte            7     4 (average)
  2837                           ;	Chosen strategy is simple_byte
  2838  000A88  0A00               	xorlw	0	; case 0
  2839  000A8A  B4D8               	btfsc	status,2,c
  2840  000A8C  D7BC               	goto	l8422
  2841  000A8E  0A01               	xorlw	1	; case 1
  2842  000A90  B4D8               	btfsc	status,2,c
  2843  000A92  D7E9               	goto	l8430
  2844  000A94  D7B6               	goto	l8420
  2845  000A96                     l8446:
  2846  000A96  0E13               	movlw	19
  2847  000A98  ECBB  F016         	call	_GETxAPIxVAL
  2848                           
  2849                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2850                           ; Switch size 1, requested type "space"
  2851                           ; Number of cases is 1, Range of values is 0 to 0
  2852                           ; switch strategies available:
  2853                           ; Name         Instructions Cycles
  2854                           ; simple_byte            4     3 (average)
  2855                           ;	Chosen strategy is simple_byte
  2856  000A9C  0100               	movlb	0	; () banked
  2857  000A9E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2858  000AA0  0A00               	xorlw	0	; case 0
  2859  000AA2  A4D8               	btfss	status,2,c
  2860  000AA4  D03E               	goto	l8474
  2861                           
  2862                           ; BSR set to: 0
  2863                           ; Switch size 1, requested type "space"
  2864                           ; Number of cases is 2, Range of values is 0 to 1
  2865                           ; switch strategies available:
  2866                           ; Name         Instructions Cycles
  2867                           ; simple_byte            7     4 (average)
  2868                           ;	Chosen strategy is simple_byte
  2869  000AA6  0100               	movlb	0	; () banked
  2870  000AA8  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2871  000AAA  0A00               	xorlw	0	; case 0
  2872  000AAC  B4D8               	btfsc	status,2,c
  2873  000AAE  D7A9               	goto	l8420
  2874  000AB0  0A01               	xorlw	1	; case 1
  2875  000AB2  B4D8               	btfsc	status,2,c
  2876  000AB4  D7E8               	goto	l8442
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;State_Mchn.c: 534: switch(GETxAPIxVAL(20))
  2880  000AB6  D035               	goto	l8474
  2881  000AB8                     l8448:
  2882                           
  2883                           ; BSR set to: 0
  2884  000AB8  0E00               	movlw	0
  2885  000ABA  D026               	goto	L10
  2886  000ABC                     l8450:
  2887  000ABC  0E07               	movlw	7
  2888  000ABE  ECBB  F016         	call	_GETxAPIxVAL
  2889  000AC2  0100               	movlb	0	; () banked
  2890  000AC4  29F9               	incf	?_GETxAPIxVAL& (0+255),w,b
  2891  000AC6  0E03               	movlw	3
  2892  000AC8  0100               	movlb	0	; () banked
  2893  000ACA  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  2894  000ACC  B0D8               	btfsc	status,0,c
  2895  000ACE  D003               	goto	l327
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;State_Mchn.c: 542: {
  2899                           ;State_Mchn.c: 543: INCRxAPIxVAL(7);
  2900  000AD0  0E07               	movlw	7
  2901  000AD2  EC8F  F016         	call	_INCRxAPIxVAL
  2902  000AD6                     l327:
  2903                           
  2904                           ;State_Mchn.c: 544: }
  2905                           ;State_Mchn.c: 545: if(GETxAPIxVAL(8) >= 1)
  2906  000AD6  0E08               	movlw	8
  2907  000AD8  ECBB  F016         	call	_GETxAPIxVAL
  2908  000ADC  0100               	movlb	0	; () banked
  2909  000ADE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2910  000AE0  0100               	movlb	0	; () banked
  2911  000AE2  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2912  000AE4  B4D8               	btfsc	status,2,c
  2913  000AE6  D003               	goto	l8456
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;State_Mchn.c: 546: {
  2917                           ;State_Mchn.c: 547: DECRxAPIxVAL(8);
  2918  000AE8  0E08               	movlw	8
  2919  000AEA  EC61  F016         	call	_DECRxAPIxVAL
  2920  000AEE                     l8456:
  2921                           
  2922                           ;State_Mchn.c: 548: }
  2923                           ;State_Mchn.c: 549: Switch_Adjust_LF = 1;
  2924  000AEE  0E01               	movlw	1
  2925  000AF0  D00B               	goto	L10
  2926  000AF2                     l8458:
  2927  000AF2  5002               	movf	_Adjust_Counter+1,w,c
  2928  000AF4  E104               	bnz	u7450
  2929  000AF6  0E14               	movlw	20
  2930  000AF8  5C01               	subwf	_Adjust_Counter,w,c
  2931  000AFA  A0D8               	btfss	status,0,c
  2932  000AFC  D007               	goto	l8464
  2933  000AFE                     u7450:
  2934                           
  2935                           ;State_Mchn.c: 553: {
  2936                           ;State_Mchn.c: 554: Adjust_Counter = 0;
  2937  000AFE  0E00               	movlw	0
  2938  000B00  6E02               	movwf	_Adjust_Counter+1,c
  2939  000B02  0E00               	movlw	0
  2940  000B04  6E01               	movwf	_Adjust_Counter,c
  2941  000B06  D7D8               	goto	l8448
  2942  000B08                     L10:
  2943  000B08  6E1C               	movwf	_Switch_Adjust_LF,c
  2944                           
  2945                           ;State_Mchn.c: 557: }
  2946                           
  2947                           ;State_Mchn.c: 556: break;
  2948  000B0A  D046               	goto	l8500
  2949  000B0C                     l8464:
  2950                           
  2951                           ;State_Mchn.c: 558: else {Adjust_Counter++;}
  2952  000B0C  4A01               	infsnz	_Adjust_Counter,f,c
  2953  000B0E  2A02               	incf	_Adjust_Counter+1,f,c
  2954                           
  2955                           ;State_Mchn.c: 559: break;
  2956  000B10  D043               	goto	l8500
  2957  000B12                     l8470:
  2958  000B12  501C               	movf	_Switch_Adjust_LF,w,c
  2959                           
  2960                           ; Switch size 1, requested type "space"
  2961                           ; Number of cases is 2, Range of values is 0 to 1
  2962                           ; switch strategies available:
  2963                           ; Name         Instructions Cycles
  2964                           ; simple_byte            7     4 (average)
  2965                           ;	Chosen strategy is simple_byte
  2966  000B14  0A00               	xorlw	0	; case 0
  2967  000B16  B4D8               	btfsc	status,2,c
  2968  000B18  D7D1               	goto	l8450
  2969  000B1A  0A01               	xorlw	1	; case 1
  2970  000B1C  B4D8               	btfsc	status,2,c
  2971  000B1E  D7E9               	goto	l8458
  2972  000B20  D7CB               	goto	l8448
  2973  000B22                     l8474:
  2974  000B22  0E14               	movlw	20
  2975  000B24  ECBB  F016         	call	_GETxAPIxVAL
  2976                           
  2977                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2978                           ; Switch size 1, requested type "space"
  2979                           ; Number of cases is 1, Range of values is 0 to 0
  2980                           ; switch strategies available:
  2981                           ; Name         Instructions Cycles
  2982                           ; simple_byte            4     3 (average)
  2983                           ;	Chosen strategy is simple_byte
  2984  000B28  0100               	movlb	0	; () banked
  2985  000B2A  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2986  000B2C  0A00               	xorlw	0	; case 0
  2987  000B2E  A4D8               	btfss	status,2,c
  2988  000B30  D033               	goto	l8500
  2989                           
  2990                           ; BSR set to: 0
  2991                           ; Switch size 1, requested type "space"
  2992                           ; Number of cases is 2, Range of values is 0 to 1
  2993                           ; switch strategies available:
  2994                           ; Name         Instructions Cycles
  2995                           ; simple_byte            7     4 (average)
  2996                           ;	Chosen strategy is simple_byte
  2997  000B32  0100               	movlb	0	; () banked
  2998  000B34  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  2999  000B36  0A00               	xorlw	0	; case 0
  3000  000B38  B4D8               	btfsc	status,2,c
  3001  000B3A  D7BE               	goto	l8448
  3002  000B3C  0A01               	xorlw	1	; case 1
  3003  000B3E  B4D8               	btfsc	status,2,c
  3004  000B40  D7E8               	goto	l8470
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;State_Mchn.c: 569: switch(GETxAPIxVAL(21))
  3008  000B42  D02A               	goto	l8500
  3009  000B44                     l8476:
  3010                           
  3011                           ; BSR set to: 0
  3012  000B44  0E00               	movlw	0
  3013  000B46  D01B               	goto	L12
  3014  000B48                     l8478:
  3015  000B48  0E09               	movlw	9
  3016  000B4A  ECBB  F016         	call	_GETxAPIxVAL
  3017  000B4E  0100               	movlb	0	; () banked
  3018  000B50  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3019  000B52  E108               	bnz	l8482
  3020  000B54  0EFB               	movlw	251
  3021  000B56  0100               	movlb	0	; () banked
  3022  000B58  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  3023  000B5A  B0D8               	btfsc	status,0,c
  3024  000B5C  D003               	goto	l8482
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;State_Mchn.c: 577: {
  3028                           ;State_Mchn.c: 578: INCRxAPIxVAL(9);
  3029  000B5E  0E09               	movlw	9
  3030  000B60  EC8F  F016         	call	_INCRxAPIxVAL
  3031  000B64                     l8482:
  3032                           
  3033                           ;State_Mchn.c: 579: }
  3034                           ;State_Mchn.c: 580: Switch_Adjust_RB = 1;
  3035  000B64  0E01               	movlw	1
  3036  000B66  D00B               	goto	L12
  3037  000B68                     l8484:
  3038  000B68  5002               	movf	_Adjust_Counter+1,w,c
  3039  000B6A  E104               	bnz	u7470
  3040  000B6C  0E14               	movlw	20
  3041  000B6E  5C01               	subwf	_Adjust_Counter,w,c
  3042  000B70  A0D8               	btfss	status,0,c
  3043  000B72  D007               	goto	l8490
  3044  000B74                     u7470:
  3045                           
  3046                           ;State_Mchn.c: 584: {
  3047                           ;State_Mchn.c: 585: Adjust_Counter = 0;
  3048  000B74  0E00               	movlw	0
  3049  000B76  6E02               	movwf	_Adjust_Counter+1,c
  3050  000B78  0E00               	movlw	0
  3051  000B7A  6E01               	movwf	_Adjust_Counter,c
  3052  000B7C  D7E3               	goto	l8476
  3053  000B7E                     L12:
  3054  000B7E  6E1D               	movwf	_Switch_Adjust_RB,c
  3055                           
  3056                           ;State_Mchn.c: 588: }
  3057                           
  3058                           ;State_Mchn.c: 587: break;
  3059  000B80  D044               	goto	l8526
  3060  000B82                     l8490:
  3061                           
  3062                           ;State_Mchn.c: 589: else {Adjust_Counter++;}
  3063  000B82  4A01               	infsnz	_Adjust_Counter,f,c
  3064  000B84  2A02               	incf	_Adjust_Counter+1,f,c
  3065                           
  3066                           ;State_Mchn.c: 590: break;
  3067  000B86  D041               	goto	l8526
  3068  000B88                     l8496:
  3069  000B88  501D               	movf	_Switch_Adjust_RB,w,c
  3070                           
  3071                           ; Switch size 1, requested type "space"
  3072                           ; Number of cases is 2, Range of values is 0 to 1
  3073                           ; switch strategies available:
  3074                           ; Name         Instructions Cycles
  3075                           ; simple_byte            7     4 (average)
  3076                           ;	Chosen strategy is simple_byte
  3077  000B8A  0A00               	xorlw	0	; case 0
  3078  000B8C  B4D8               	btfsc	status,2,c
  3079  000B8E  D7DC               	goto	l8478
  3080  000B90  0A01               	xorlw	1	; case 1
  3081  000B92  B4D8               	btfsc	status,2,c
  3082  000B94  D7E9               	goto	l8484
  3083  000B96  D7D6               	goto	l8476
  3084  000B98                     l8500:
  3085  000B98  0E15               	movlw	21
  3086  000B9A  ECBB  F016         	call	_GETxAPIxVAL
  3087                           
  3088                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3089                           ; Switch size 1, requested type "space"
  3090                           ; Number of cases is 1, Range of values is 0 to 0
  3091                           ; switch strategies available:
  3092                           ; Name         Instructions Cycles
  3093                           ; simple_byte            4     3 (average)
  3094                           ;	Chosen strategy is simple_byte
  3095  000B9E  0100               	movlb	0	; () banked
  3096  000BA0  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3097  000BA2  0A00               	xorlw	0	; case 0
  3098  000BA4  A4D8               	btfss	status,2,c
  3099  000BA6  D031               	goto	l8526
  3100                           
  3101                           ; BSR set to: 0
  3102                           ; Switch size 1, requested type "space"
  3103                           ; Number of cases is 2, Range of values is 0 to 1
  3104                           ; switch strategies available:
  3105                           ; Name         Instructions Cycles
  3106                           ; simple_byte            7     4 (average)
  3107                           ;	Chosen strategy is simple_byte
  3108  000BA8  0100               	movlb	0	; () banked
  3109  000BAA  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3110  000BAC  0A00               	xorlw	0	; case 0
  3111  000BAE  B4D8               	btfsc	status,2,c
  3112  000BB0  D7C9               	goto	l8476
  3113  000BB2  0A01               	xorlw	1	; case 1
  3114  000BB4  B4D8               	btfsc	status,2,c
  3115  000BB6  D7E8               	goto	l8496
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;State_Mchn.c: 601: switch(GETxAPIxVAL(22))
  3119  000BB8  D028               	goto	l8526
  3120  000BBA                     l8502:
  3121                           
  3122                           ; BSR set to: 0
  3123  000BBA  0E00               	movlw	0
  3124  000BBC  D019               	goto	L14
  3125  000BBE                     l8504:
  3126  000BBE  0E09               	movlw	9
  3127  000BC0  ECBB  F016         	call	_GETxAPIxVAL
  3128  000BC4  0100               	movlb	0	; () banked
  3129  000BC6  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3130  000BC8  0100               	movlb	0	; () banked
  3131  000BCA  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3132  000BCC  B4D8               	btfsc	status,2,c
  3133  000BCE  D003               	goto	l8508
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;State_Mchn.c: 609: {
  3137                           ;State_Mchn.c: 610: DECRxAPIxVAL(9);
  3138  000BD0  0E09               	movlw	9
  3139  000BD2  EC61  F016         	call	_DECRxAPIxVAL
  3140  000BD6                     l8508:
  3141                           
  3142                           ;State_Mchn.c: 611: } Switch_Adjust_RF = 1;
  3143  000BD6  0E01               	movlw	1
  3144  000BD8  D00B               	goto	L14
  3145  000BDA                     l8510:
  3146  000BDA  5002               	movf	_Adjust_Counter+1,w,c
  3147  000BDC  E104               	bnz	u7490
  3148  000BDE  0E14               	movlw	20
  3149  000BE0  5C01               	subwf	_Adjust_Counter,w,c
  3150  000BE2  A0D8               	btfss	status,0,c
  3151  000BE4  D007               	goto	l8516
  3152  000BE6                     u7490:
  3153                           
  3154                           ;State_Mchn.c: 615: {
  3155                           ;State_Mchn.c: 616: Adjust_Counter = 0;
  3156  000BE6  0E00               	movlw	0
  3157  000BE8  6E02               	movwf	_Adjust_Counter+1,c
  3158  000BEA  0E00               	movlw	0
  3159  000BEC  6E01               	movwf	_Adjust_Counter,c
  3160  000BEE  D7E5               	goto	l8502
  3161  000BF0                     L14:
  3162  000BF0  6E1E               	movwf	_Switch_Adjust_RF,c
  3163                           
  3164                           ;State_Mchn.c: 619: }
  3165                           
  3166                           ;State_Mchn.c: 618: break;
  3167  000BF2  D01B               	goto	l8528
  3168  000BF4                     l8516:
  3169                           
  3170                           ;State_Mchn.c: 620: else {Adjust_Counter++;}
  3171  000BF4  4A01               	infsnz	_Adjust_Counter,f,c
  3172  000BF6  2A02               	incf	_Adjust_Counter+1,f,c
  3173                           
  3174                           ;State_Mchn.c: 621: break;
  3175  000BF8  D018               	goto	l8528
  3176  000BFA                     l8522:
  3177  000BFA  501E               	movf	_Switch_Adjust_RF,w,c
  3178                           
  3179                           ; Switch size 1, requested type "space"
  3180                           ; Number of cases is 2, Range of values is 0 to 1
  3181                           ; switch strategies available:
  3182                           ; Name         Instructions Cycles
  3183                           ; simple_byte            7     4 (average)
  3184                           ;	Chosen strategy is simple_byte
  3185  000BFC  0A00               	xorlw	0	; case 0
  3186  000BFE  B4D8               	btfsc	status,2,c
  3187  000C00  D7DE               	goto	l8504
  3188  000C02  0A01               	xorlw	1	; case 1
  3189  000C04  B4D8               	btfsc	status,2,c
  3190  000C06  D7E9               	goto	l8510
  3191  000C08  D7D8               	goto	l8502
  3192  000C0A                     l8526:
  3193  000C0A  0E16               	movlw	22
  3194  000C0C  ECBB  F016         	call	_GETxAPIxVAL
  3195                           
  3196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3197                           ; Switch size 1, requested type "space"
  3198                           ; Number of cases is 1, Range of values is 0 to 0
  3199                           ; switch strategies available:
  3200                           ; Name         Instructions Cycles
  3201                           ; simple_byte            4     3 (average)
  3202                           ;	Chosen strategy is simple_byte
  3203  000C10  0100               	movlb	0	; () banked
  3204  000C12  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3205  000C14  0A00               	xorlw	0	; case 0
  3206  000C16  A4D8               	btfss	status,2,c
  3207  000C18  D008               	goto	l8528
  3208                           
  3209                           ; BSR set to: 0
  3210                           ; Switch size 1, requested type "space"
  3211                           ; Number of cases is 2, Range of values is 0 to 1
  3212                           ; switch strategies available:
  3213                           ; Name         Instructions Cycles
  3214                           ; simple_byte            7     4 (average)
  3215                           ;	Chosen strategy is simple_byte
  3216  000C1A  0100               	movlb	0	; () banked
  3217  000C1C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3218  000C1E  0A00               	xorlw	0	; case 0
  3219  000C20  B4D8               	btfsc	status,2,c
  3220  000C22  D7CB               	goto	l8502
  3221  000C24  0A01               	xorlw	1	; case 1
  3222  000C26  B4D8               	btfsc	status,2,c
  3223  000C28  D7E8               	goto	l8522
  3224  000C2A                     l8528:
  3225                           
  3226                           ;State_Mchn.c: 630: if(Activate_Controls_Counter <= 1)
  3227  000C2A  0100               	movlb	0	; () banked
  3228  000C2C  51E9               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  3229  000C2E  E11C               	bnz	l8542
  3230  000C30  0E02               	movlw	2
  3231  000C32  0100               	movlb	0	; () banked
  3232  000C34  5DE8               	subwf	_Activate_Controls_Counter& (0+255),w,b
  3233  000C36  B0D8               	btfsc	status,0,c
  3234  000C38  D017               	goto	l8542
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;State_Mchn.c: 631: {
  3238                           ;State_Mchn.c: 632: Switch_Activate_Controls = 0;
  3239  000C3A  0E00               	movlw	0
  3240  000C3C  6E1A               	movwf	_Switch_Activate_Controls,c
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;State_Mchn.c: 633: Red_Led(0);
  3244  000C3E  0E00               	movlw	0
  3245  000C40  ECCC  F014         	call	_Red_Led
  3246                           
  3247                           ;State_Mchn.c: 634: }
  3248                           ;State_Mchn.c: 635: break;
  3249  000C44  D011               	goto	l8542
  3250  000C46                     l8534:
  3251  000C46  0E00               	movlw	0
  3252  000C48  6E1A               	movwf	_Switch_Activate_Controls,c
  3253                           
  3254                           ;State_Mchn.c: 638: Red_Led(0);
  3255  000C4A  0E00               	movlw	0
  3256  000C4C  ECCC  F014         	call	_Red_Led
  3257                           
  3258                           ;State_Mchn.c: 640: }
  3259                           
  3260                           ;State_Mchn.c: 639: break;
  3261  000C50  D00B               	goto	l8542
  3262  000C52                     l8540:
  3263  000C52  501A               	movf	_Switch_Activate_Controls,w,c
  3264                           
  3265                           ; Switch size 1, requested type "space"
  3266                           ; Number of cases is 3, Range of values is 0 to 2
  3267                           ; switch strategies available:
  3268                           ; Name         Instructions Cycles
  3269                           ; simple_byte           10     6 (average)
  3270                           ;	Chosen strategy is simple_byte
  3271  000C54  0A00               	xorlw	0	; case 0
  3272  000C56  B4D8               	btfsc	status,2,c
  3273  000C58  D661               	goto	l8380
  3274  000C5A  0A01               	xorlw	1	; case 1
  3275  000C5C  B4D8               	btfsc	status,2,c
  3276  000C5E  D67C               	goto	l8392
  3277  000C60  0A03               	xorlw	3	; case 2
  3278  000C62  B4D8               	btfsc	status,2,c
  3279  000C64  D69C               	goto	l8406
  3280  000C66  D7EF               	goto	l8534
  3281  000C68                     l8542:
  3282                           
  3283                           ;State_Mchn.c: 642: if(GETxAPIxVAL(17))
  3284  000C68  0E11               	movlw	17
  3285  000C6A  ECBB  F016         	call	_GETxAPIxVAL
  3286  000C6E  0100               	movlb	0	; () banked
  3287  000C70  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3288  000C72  0100               	movlb	0	; () banked
  3289  000C74  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3290  000C76  B4D8               	btfsc	status,2,c
  3291  000C78  D002               	goto	l8546
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;State_Mchn.c: 643: {
  3295                           ;State_Mchn.c: 644: Stop_Program = 1;
  3296  000C7A  0E01               	movlw	1
  3297  000C7C  6E19               	movwf	_Stop_Program,c
  3298  000C7E                     l8546:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;State_Mchn.c: 645: }
  3302                           ;State_Mchn.c: 647: if(Stop_Program == 1)
  3303  000C7E  0419               	decf	_Stop_Program,w,c
  3304  000C80  A4D8               	btfss	status,2,c
  3305  000C82  D003               	goto	l364
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;State_Mchn.c: 648: {
  3309                           ;State_Mchn.c: 649: Red_Led(2);
  3310  000C84  0E02               	movlw	2
  3311  000C86  ECCC  F014         	call	_Red_Led
  3312  000C8A                     l364:
  3313                           
  3314                           ;State_Mchn.c: 650: }
  3315                           ;State_Mchn.c: 652: Green_Led(1);
  3316  000C8A  0E01               	movlw	1
  3317  000C8C  EC0E  F015         	call	_Green_Led
  3318                           
  3319                           ;State_Mchn.c: 654: break;
  3320  000C90  0012               	return	
  3321  000C92                     l8550:
  3322  000C92  0E00               	movlw	0
  3323  000C94  0101               	movlb	1	; () banked
  3324  000C96  6FFF               	movwf	Train_Path@To& (0+255),b
  3325  000C98  0E02               	movlw	2
  3326  000C9A  EC94  F00B         	call	_Train_Path
  3327  000C9E  0900               	iorlw	0
  3328  000CA0  A4D8               	btfss	status,2,c
  3329  000CA2  D1DD               	goto	l8754
  3330                           
  3331                           ;State_Mchn.c: 660: {
  3332                           ;State_Mchn.c: 661: Switch_Program = 1;
  3333  000CA4  0E01               	movlw	1
  3334  000CA6  6E22               	movwf	_Switch_Program,c
  3335                           
  3336                           ;State_Mchn.c: 662: Eeprom_Store();
  3337  000CA8  EC55  F013         	call	_Eeprom_Store	;wreg free
  3338  000CAC                     l8556:
  3339                           
  3340                           ;State_Mchn.c: 663: if(Stop_Program == 1)
  3341  000CAC  0419               	decf	_Stop_Program,w,c
  3342  000CAE  A4D8               	btfss	status,2,c
  3343  000CB0  D1D6               	goto	l8754
  3344                           
  3345                           ;State_Mchn.c: 664: {
  3346                           ;State_Mchn.c: 665: Switch_Main = 0;
  3347  000CB2  0E00               	movlw	0
  3348  000CB4  6E20               	movwf	_Switch_Main,c
  3349                           
  3350                           ;State_Mchn.c: 667: }
  3351                           ;State_Mchn.c: 668: }
  3352                           ;State_Mchn.c: 669: break;
  3353  000CB6  D1D3               	goto	l8754
  3354  000CB8                     l8560:
  3355  000CB8  0E03               	movlw	3
  3356  000CBA  0101               	movlb	1	; () banked
  3357  000CBC  6FFF               	movwf	Train_Path@To& (0+255),b
  3358  000CBE  0E00               	movlw	0
  3359  000CC0  EC94  F00B         	call	_Train_Path
  3360  000CC4  0900               	iorlw	0
  3361  000CC6  A4D8               	btfss	status,2,c
  3362  000CC8  D1CA               	goto	l8754
  3363                           
  3364                           ;State_Mchn.c: 672: {
  3365                           ;State_Mchn.c: 673: Switch_Program = 2;
  3366  000CCA  0E02               	movlw	2
  3367  000CCC  6E22               	movwf	_Switch_Program,c
  3368                           
  3369                           ;State_Mchn.c: 674: Eeprom_Store();
  3370  000CCE  EC55  F013         	call	_Eeprom_Store	;wreg free
  3371  000CD2  D7EC               	goto	l8556
  3372  000CD4                     l8570:
  3373  000CD4  0E01               	movlw	1
  3374  000CD6  0101               	movlb	1	; () banked
  3375  000CD8  6FFF               	movwf	Train_Path@To& (0+255),b
  3376  000CDA  0E03               	movlw	3
  3377  000CDC  EC94  F00B         	call	_Train_Path
  3378  000CE0  0900               	iorlw	0
  3379  000CE2  A4D8               	btfss	status,2,c
  3380  000CE4  D1BC               	goto	l8754
  3381                           
  3382                           ;State_Mchn.c: 684: {
  3383                           ;State_Mchn.c: 685: Switch_Program = 3;
  3384  000CE6  0E03               	movlw	3
  3385  000CE8  6E22               	movwf	_Switch_Program,c
  3386                           
  3387                           ;State_Mchn.c: 686: Eeprom_Store();
  3388  000CEA  EC55  F013         	call	_Eeprom_Store	;wreg free
  3389  000CEE  D7DE               	goto	l8556
  3390  000CF0                     l8580:
  3391  000CF0  0E02               	movlw	2
  3392  000CF2  0101               	movlb	1	; () banked
  3393  000CF4  6FFF               	movwf	Train_Path@To& (0+255),b
  3394  000CF6  0E01               	movlw	1
  3395  000CF8  EC94  F00B         	call	_Train_Path
  3396  000CFC  0900               	iorlw	0
  3397  000CFE  A4D8               	btfss	status,2,c
  3398  000D00  D1AE               	goto	l8754
  3399                           
  3400                           ;State_Mchn.c: 696: {
  3401                           ;State_Mchn.c: 697: Switch_Program = 0;
  3402  000D02  0E00               	movlw	0
  3403  000D04  6E22               	movwf	_Switch_Program,c
  3404                           
  3405                           ;State_Mchn.c: 698: Eeprom_Store();
  3406  000D06  EC55  F013         	call	_Eeprom_Store	;wreg free
  3407  000D0A  D7D0               	goto	l8556
  3408  000D0C                     l8592:
  3409  000D0C  5022               	movf	_Switch_Program,w,c
  3410                           
  3411                           ; Switch size 1, requested type "space"
  3412                           ; Number of cases is 4, Range of values is 0 to 3
  3413                           ; switch strategies available:
  3414                           ; Name         Instructions Cycles
  3415                           ; simple_byte           13     7 (average)
  3416                           ;	Chosen strategy is simple_byte
  3417  000D0E  0A00               	xorlw	0	; case 0
  3418  000D10  B4D8               	btfsc	status,2,c
  3419  000D12  D7BF               	goto	l8550
  3420  000D14  0A01               	xorlw	1	; case 1
  3421  000D16  B4D8               	btfsc	status,2,c
  3422  000D18  D7CF               	goto	l8560
  3423  000D1A  0A03               	xorlw	3	; case 2
  3424  000D1C  B4D8               	btfsc	status,2,c
  3425  000D1E  D7DA               	goto	l8570
  3426  000D20  0A01               	xorlw	1	; case 3
  3427  000D22  B4D8               	btfsc	status,2,c
  3428  000D24  D7E5               	goto	l8580
  3429                           
  3430                           ;State_Mchn.c: 710: switch(Switch_Activate_Controls)
  3431  000D26  D19B               	goto	l8754
  3432  000D28                     l8594:
  3433  000D28  0E14               	movlw	20
  3434  000D2A  ECBB  F016         	call	_GETxAPIxVAL
  3435  000D2E  0100               	movlb	0	; () banked
  3436  000D30  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3437  000D32  0100               	movlb	0	; () banked
  3438  000D34  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3439  000D36  B4D8               	btfsc	status,2,c
  3440  000D38  D00F               	goto	l8602
  3441                           
  3442                           ; BSR set to: 0
  3443  000D3A  0E16               	movlw	22
  3444  000D3C  ECBB  F016         	call	_GETxAPIxVAL
  3445  000D40  0100               	movlb	0	; () banked
  3446  000D42  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3447  000D44  0100               	movlb	0	; () banked
  3448  000D46  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3449  000D48  B4D8               	btfsc	status,2,c
  3450  000D4A  D006               	goto	l8602
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;State_Mchn.c: 713: {
  3454                           ;State_Mchn.c: 714: Switch_Activate_Controls = 1;
  3455  000D4C  0E01               	movlw	1
  3456  000D4E  6E1A               	movwf	_Switch_Activate_Controls,c
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;State_Mchn.c: 715: Red_Led(3);
  3460  000D50  0E03               	movlw	3
  3461  000D52  ECCC  F014         	call	_Red_Led
  3462                           
  3463                           ;State_Mchn.c: 716: }
  3464  000D56  0012               	return	
  3465  000D58                     l8602:
  3466                           
  3467                           ;State_Mchn.c: 717: else
  3468                           ;State_Mchn.c: 718: {
  3469                           ;State_Mchn.c: 719: Switch_Activate_Controls = 0;
  3470  000D58  0E00               	movlw	0
  3471  000D5A  6E1A               	movwf	_Switch_Activate_Controls,c
  3472                           
  3473                           ;State_Mchn.c: 720: Red_Led(0);
  3474  000D5C  0E00               	movlw	0
  3475  000D5E  ECCC  F014         	call	_Red_Led
  3476                           
  3477                           ;State_Mchn.c: 721: }
  3478                           ;State_Mchn.c: 722: break;
  3479  000D62  0012               	return	
  3480  000D64                     l8606:
  3481  000D64  0E14               	movlw	20
  3482  000D66  ECBB  F016         	call	_GETxAPIxVAL
  3483  000D6A  0100               	movlb	0	; () banked
  3484  000D6C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3485  000D6E  0100               	movlb	0	; () banked
  3486  000D70  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3487  000D72  A4D8               	btfss	status,2,c
  3488  000D74  D00F               	goto	l8614
  3489                           
  3490                           ; BSR set to: 0
  3491  000D76  0E16               	movlw	22
  3492  000D78  ECBB  F016         	call	_GETxAPIxVAL
  3493  000D7C  0100               	movlb	0	; () banked
  3494  000D7E  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3495  000D80  0100               	movlb	0	; () banked
  3496  000D82  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3497  000D84  A4D8               	btfss	status,2,c
  3498  000D86  D006               	goto	l8614
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;State_Mchn.c: 725: {
  3502                           ;State_Mchn.c: 726: Switch_Activate_Controls = 2;
  3503  000D88  0E02               	movlw	2
  3504  000D8A  6E1A               	movwf	_Switch_Activate_Controls,c
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;State_Mchn.c: 727: Red_Led(3);
  3508  000D8C  0E03               	movlw	3
  3509  000D8E  ECCC  F014         	call	_Red_Led
  3510                           
  3511                           ;State_Mchn.c: 728: }
  3512  000D92  D005               	goto	l8618
  3513  000D94                     l8614:
  3514                           
  3515                           ;State_Mchn.c: 729: else
  3516                           ;State_Mchn.c: 730: {
  3517                           ;State_Mchn.c: 731: Switch_Activate_Controls = 1;
  3518  000D94  0E01               	movlw	1
  3519  000D96  6E1A               	movwf	_Switch_Activate_Controls,c
  3520                           
  3521                           ;State_Mchn.c: 732: Red_Led(3);
  3522  000D98  0E03               	movlw	3
  3523  000D9A  ECCC  F014         	call	_Red_Led
  3524  000D9E                     l8618:
  3525                           
  3526                           ;State_Mchn.c: 733: }
  3527                           ;State_Mchn.c: 734: Activate_Controls_Counter = 10000;
  3528  000D9E  0E27               	movlw	39
  3529  000DA0  0100               	movlb	0	; () banked
  3530  000DA2  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3531  000DA4  0E10               	movlw	16
  3532  000DA6  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  3533                           
  3534                           ;State_Mchn.c: 735: break;
  3535  000DA8  0012               	return	
  3536  000DAA                     l8620:
  3537  000DAA  0E14               	movlw	20
  3538  000DAC  ECBB  F016         	call	_GETxAPIxVAL
  3539  000DB0  0100               	movlb	0	; () banked
  3540  000DB2  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3541  000DB4  0100               	movlb	0	; () banked
  3542  000DB6  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3543  000DB8  A4D8               	btfss	status,2,c
  3544  000DBA  D020               	goto	l8630
  3545                           
  3546                           ; BSR set to: 0
  3547  000DBC  0E16               	movlw	22
  3548  000DBE  ECBB  F016         	call	_GETxAPIxVAL
  3549  000DC2  0100               	movlb	0	; () banked
  3550  000DC4  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3551  000DC6  0100               	movlb	0	; () banked
  3552  000DC8  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3553  000DCA  A4D8               	btfss	status,2,c
  3554  000DCC  D017               	goto	l8630
  3555                           
  3556                           ; BSR set to: 0
  3557  000DCE  0E15               	movlw	21
  3558  000DD0  ECBB  F016         	call	_GETxAPIxVAL
  3559  000DD4  0100               	movlb	0	; () banked
  3560  000DD6  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3561  000DD8  0100               	movlb	0	; () banked
  3562  000DDA  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3563  000DDC  A4D8               	btfss	status,2,c
  3564  000DDE  D00E               	goto	l8630
  3565                           
  3566                           ; BSR set to: 0
  3567  000DE0  0E13               	movlw	19
  3568  000DE2  ECBB  F016         	call	_GETxAPIxVAL
  3569  000DE6  0100               	movlb	0	; () banked
  3570  000DE8  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3571  000DEA  0100               	movlb	0	; () banked
  3572  000DEC  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3573  000DEE  A4D8               	btfss	status,2,c
  3574  000DF0  D005               	goto	l8630
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;State_Mchn.c: 738: {
  3578                           ;State_Mchn.c: 739: Activate_Controls_Counter--;
  3579  000DF2  0100               	movlb	0	; () banked
  3580  000DF4  07E8               	decf	_Activate_Controls_Counter& (0+255),f,b
  3581  000DF6  A0D8               	btfss	status,0,c
  3582  000DF8  07E9               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  3583                           
  3584                           ;State_Mchn.c: 740: }
  3585  000DFA  D005               	goto	l8632
  3586  000DFC                     l8630:
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;State_Mchn.c: 741: else
  3590                           ;State_Mchn.c: 742: {
  3591                           ;State_Mchn.c: 743: Activate_Controls_Counter = 10000;
  3592  000DFC  0E27               	movlw	39
  3593  000DFE  0100               	movlb	0	; () banked
  3594  000E00  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3595  000E02  0E10               	movlw	16
  3596  000E04  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  3597  000E06                     l8632:
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;State_Mchn.c: 744: }
  3601                           ;State_Mchn.c: 746: Red_Led(3);
  3602  000E06  0E03               	movlw	3
  3603  000E08  ECCC  F014         	call	_Red_Led
  3604                           
  3605                           ;State_Mchn.c: 748: switch(GETxAPIxVAL(19))
  3606  000E0C  D04A               	goto	l8660
  3607  000E0E                     l8634:
  3608  000E0E  0E00               	movlw	0
  3609  000E10  D03B               	goto	L16
  3610  000E12                     l8636:
  3611  000E12  0E07               	movlw	7
  3612  000E14  ECBB  F016         	call	_GETxAPIxVAL
  3613  000E18  C0F9  F283         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3614  000E1C  C0FA  F284         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3615  000E20  0E06               	movlw	6
  3616  000E22  ECBB  F016         	call	_GETxAPIxVAL
  3617  000E26  0100               	movlb	0	; () banked
  3618  000E28  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3619  000E2A  0102               	movlb	2	; () banked
  3620  000E2C  5D83               	subwf	??_Update_StateMchn& (0+255),w,b
  3621  000E2E  0100               	movlb	0	; () banked
  3622  000E30  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3623  000E32  0102               	movlb	2	; () banked
  3624  000E34  5984               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  3625  000E36  A0D8               	btfss	status,0,c
  3626  000E38  D003               	goto	l398
  3627                           
  3628                           ; BSR set to: 2
  3629                           ;State_Mchn.c: 756: {
  3630                           ;State_Mchn.c: 757: DECRxAPIxVAL(7);
  3631  000E3A  0E07               	movlw	7
  3632  000E3C  EC61  F016         	call	_DECRxAPIxVAL
  3633  000E40                     l398:
  3634                           
  3635                           ;State_Mchn.c: 758: }
  3636                           ;State_Mchn.c: 759: if(GETxAPIxVAL(8) <= GETxAPIxVAL(5))
  3637  000E40  0E05               	movlw	5
  3638  000E42  ECBB  F016         	call	_GETxAPIxVAL
  3639  000E46  C0F9  F283         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3640  000E4A  C0FA  F284         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3641  000E4E  0E08               	movlw	8
  3642  000E50  ECBB  F016         	call	_GETxAPIxVAL
  3643  000E54  0100               	movlb	0	; () banked
  3644  000E56  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3645  000E58  0102               	movlb	2	; () banked
  3646  000E5A  5D83               	subwf	??_Update_StateMchn& (0+255),w,b
  3647  000E5C  0100               	movlb	0	; () banked
  3648  000E5E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3649  000E60  0102               	movlb	2	; () banked
  3650  000E62  5984               	subwfb	(??_Update_StateMchn+1)& (0+255),w,b
  3651  000E64  A0D8               	btfss	status,0,c
  3652  000E66  D003               	goto	l8642
  3653                           
  3654                           ; BSR set to: 2
  3655                           ;State_Mchn.c: 760: {
  3656                           ;State_Mchn.c: 761: INCRxAPIxVAL(8);
  3657  000E68  0E08               	movlw	8
  3658  000E6A  EC8F  F016         	call	_INCRxAPIxVAL
  3659  000E6E                     l8642:
  3660                           
  3661                           ;State_Mchn.c: 762: }
  3662                           ;State_Mchn.c: 763: Switch_Adjust_LB = 1;
  3663  000E6E  0E01               	movlw	1
  3664  000E70  D00B               	goto	L16
  3665  000E72                     l8644:
  3666  000E72  5002               	movf	_Adjust_Counter+1,w,c
  3667  000E74  E104               	bnz	u7710
  3668  000E76  0E14               	movlw	20
  3669  000E78  5C01               	subwf	_Adjust_Counter,w,c
  3670  000E7A  A0D8               	btfss	status,0,c
  3671  000E7C  D007               	goto	l8650
  3672  000E7E                     u7710:
  3673                           
  3674                           ;State_Mchn.c: 767: {
  3675                           ;State_Mchn.c: 768: Adjust_Counter = 0;
  3676  000E7E  0E00               	movlw	0
  3677  000E80  6E02               	movwf	_Adjust_Counter+1,c
  3678  000E82  0E00               	movlw	0
  3679  000E84  6E01               	movwf	_Adjust_Counter,c
  3680  000E86  D7C3               	goto	l8634
  3681  000E88                     L16:
  3682  000E88  6E1B               	movwf	_Switch_Adjust_LB,c
  3683                           
  3684                           ;State_Mchn.c: 771: }
  3685                           
  3686                           ;State_Mchn.c: 770: break;
  3687  000E8A  D051               	goto	l8688
  3688  000E8C                     l8650:
  3689                           
  3690                           ;State_Mchn.c: 772: else {Adjust_Counter++;}
  3691  000E8C  4A01               	infsnz	_Adjust_Counter,f,c
  3692  000E8E  2A02               	incf	_Adjust_Counter+1,f,c
  3693                           
  3694                           ;State_Mchn.c: 773: break;
  3695  000E90  D04E               	goto	l8688
  3696  000E92                     l8656:
  3697  000E92  501B               	movf	_Switch_Adjust_LB,w,c
  3698                           
  3699                           ; Switch size 1, requested type "space"
  3700                           ; Number of cases is 2, Range of values is 0 to 1
  3701                           ; switch strategies available:
  3702                           ; Name         Instructions Cycles
  3703                           ; simple_byte            7     4 (average)
  3704                           ;	Chosen strategy is simple_byte
  3705  000E94  0A00               	xorlw	0	; case 0
  3706  000E96  B4D8               	btfsc	status,2,c
  3707  000E98  D7BC               	goto	l8636
  3708  000E9A  0A01               	xorlw	1	; case 1
  3709  000E9C  B4D8               	btfsc	status,2,c
  3710  000E9E  D7E9               	goto	l8644
  3711  000EA0  D7B6               	goto	l8634
  3712  000EA2                     l8660:
  3713  000EA2  0E13               	movlw	19
  3714  000EA4  ECBB  F016         	call	_GETxAPIxVAL
  3715                           
  3716                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3717                           ; Switch size 1, requested type "space"
  3718                           ; Number of cases is 1, Range of values is 0 to 0
  3719                           ; switch strategies available:
  3720                           ; Name         Instructions Cycles
  3721                           ; simple_byte            4     3 (average)
  3722                           ;	Chosen strategy is simple_byte
  3723  000EA8  0100               	movlb	0	; () banked
  3724  000EAA  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3725  000EAC  0A00               	xorlw	0	; case 0
  3726  000EAE  A4D8               	btfss	status,2,c
  3727  000EB0  D03E               	goto	l8688
  3728                           
  3729                           ; BSR set to: 0
  3730                           ; Switch size 1, requested type "space"
  3731                           ; Number of cases is 2, Range of values is 0 to 1
  3732                           ; switch strategies available:
  3733                           ; Name         Instructions Cycles
  3734                           ; simple_byte            7     4 (average)
  3735                           ;	Chosen strategy is simple_byte
  3736  000EB2  0100               	movlb	0	; () banked
  3737  000EB4  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3738  000EB6  0A00               	xorlw	0	; case 0
  3739  000EB8  B4D8               	btfsc	status,2,c
  3740  000EBA  D7A9               	goto	l8634
  3741  000EBC  0A01               	xorlw	1	; case 1
  3742  000EBE  B4D8               	btfsc	status,2,c
  3743  000EC0  D7E8               	goto	l8656
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;State_Mchn.c: 784: switch(GETxAPIxVAL(20))
  3747  000EC2  D035               	goto	l8688
  3748  000EC4                     l8662:
  3749                           
  3750                           ; BSR set to: 0
  3751  000EC4  0E00               	movlw	0
  3752  000EC6  D026               	goto	L18
  3753  000EC8                     l8664:
  3754  000EC8  0E07               	movlw	7
  3755  000ECA  ECBB  F016         	call	_GETxAPIxVAL
  3756  000ECE  0100               	movlb	0	; () banked
  3757  000ED0  29F9               	incf	?_GETxAPIxVAL& (0+255),w,b
  3758  000ED2  0E03               	movlw	3
  3759  000ED4  0100               	movlb	0	; () banked
  3760  000ED6  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  3761  000ED8  B0D8               	btfsc	status,0,c
  3762  000EDA  D003               	goto	l412
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;State_Mchn.c: 792: {
  3766                           ;State_Mchn.c: 793: INCRxAPIxVAL(7);
  3767  000EDC  0E07               	movlw	7
  3768  000EDE  EC8F  F016         	call	_INCRxAPIxVAL
  3769  000EE2                     l412:
  3770                           
  3771                           ;State_Mchn.c: 794: }
  3772                           ;State_Mchn.c: 795: if(GETxAPIxVAL(8) >= 1)
  3773  000EE2  0E08               	movlw	8
  3774  000EE4  ECBB  F016         	call	_GETxAPIxVAL
  3775  000EE8  0100               	movlb	0	; () banked
  3776  000EEA  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3777  000EEC  0100               	movlb	0	; () banked
  3778  000EEE  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3779  000EF0  B4D8               	btfsc	status,2,c
  3780  000EF2  D003               	goto	l8670
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;State_Mchn.c: 796: {
  3784                           ;State_Mchn.c: 797: DECRxAPIxVAL(8);
  3785  000EF4  0E08               	movlw	8
  3786  000EF6  EC61  F016         	call	_DECRxAPIxVAL
  3787  000EFA                     l8670:
  3788                           
  3789                           ;State_Mchn.c: 798: }
  3790                           ;State_Mchn.c: 799: Switch_Adjust_LF = 1;
  3791  000EFA  0E01               	movlw	1
  3792  000EFC  D00B               	goto	L18
  3793  000EFE                     l8672:
  3794  000EFE  5002               	movf	_Adjust_Counter+1,w,c
  3795  000F00  E104               	bnz	u7740
  3796  000F02  0E14               	movlw	20
  3797  000F04  5C01               	subwf	_Adjust_Counter,w,c
  3798  000F06  A0D8               	btfss	status,0,c
  3799  000F08  D007               	goto	l8678
  3800  000F0A                     u7740:
  3801                           
  3802                           ;State_Mchn.c: 803: {
  3803                           ;State_Mchn.c: 804: Adjust_Counter = 0;
  3804  000F0A  0E00               	movlw	0
  3805  000F0C  6E02               	movwf	_Adjust_Counter+1,c
  3806  000F0E  0E00               	movlw	0
  3807  000F10  6E01               	movwf	_Adjust_Counter,c
  3808  000F12  D7D8               	goto	l8662
  3809  000F14                     L18:
  3810  000F14  6E1C               	movwf	_Switch_Adjust_LF,c
  3811                           
  3812                           ;State_Mchn.c: 807: }
  3813                           
  3814                           ;State_Mchn.c: 806: break;
  3815  000F16  D046               	goto	l8714
  3816  000F18                     l8678:
  3817                           
  3818                           ;State_Mchn.c: 808: else {Adjust_Counter++;}
  3819  000F18  4A01               	infsnz	_Adjust_Counter,f,c
  3820  000F1A  2A02               	incf	_Adjust_Counter+1,f,c
  3821                           
  3822                           ;State_Mchn.c: 809: break;
  3823  000F1C  D043               	goto	l8714
  3824  000F1E                     l8684:
  3825  000F1E  501C               	movf	_Switch_Adjust_LF,w,c
  3826                           
  3827                           ; Switch size 1, requested type "space"
  3828                           ; Number of cases is 2, Range of values is 0 to 1
  3829                           ; switch strategies available:
  3830                           ; Name         Instructions Cycles
  3831                           ; simple_byte            7     4 (average)
  3832                           ;	Chosen strategy is simple_byte
  3833  000F20  0A00               	xorlw	0	; case 0
  3834  000F22  B4D8               	btfsc	status,2,c
  3835  000F24  D7D1               	goto	l8664
  3836  000F26  0A01               	xorlw	1	; case 1
  3837  000F28  B4D8               	btfsc	status,2,c
  3838  000F2A  D7E9               	goto	l8672
  3839  000F2C  D7CB               	goto	l8662
  3840  000F2E                     l8688:
  3841  000F2E  0E14               	movlw	20
  3842  000F30  ECBB  F016         	call	_GETxAPIxVAL
  3843                           
  3844                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3845                           ; Switch size 1, requested type "space"
  3846                           ; Number of cases is 1, Range of values is 0 to 0
  3847                           ; switch strategies available:
  3848                           ; Name         Instructions Cycles
  3849                           ; simple_byte            4     3 (average)
  3850                           ;	Chosen strategy is simple_byte
  3851  000F34  0100               	movlb	0	; () banked
  3852  000F36  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3853  000F38  0A00               	xorlw	0	; case 0
  3854  000F3A  A4D8               	btfss	status,2,c
  3855  000F3C  D033               	goto	l8714
  3856                           
  3857                           ; BSR set to: 0
  3858                           ; Switch size 1, requested type "space"
  3859                           ; Number of cases is 2, Range of values is 0 to 1
  3860                           ; switch strategies available:
  3861                           ; Name         Instructions Cycles
  3862                           ; simple_byte            7     4 (average)
  3863                           ;	Chosen strategy is simple_byte
  3864  000F3E  0100               	movlb	0	; () banked
  3865  000F40  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3866  000F42  0A00               	xorlw	0	; case 0
  3867  000F44  B4D8               	btfsc	status,2,c
  3868  000F46  D7BE               	goto	l8662
  3869  000F48  0A01               	xorlw	1	; case 1
  3870  000F4A  B4D8               	btfsc	status,2,c
  3871  000F4C  D7E8               	goto	l8684
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;State_Mchn.c: 819: switch(GETxAPIxVAL(21))
  3875  000F4E  D02A               	goto	l8714
  3876  000F50                     l8690:
  3877                           
  3878                           ; BSR set to: 0
  3879  000F50  0E00               	movlw	0
  3880  000F52  D01B               	goto	L20
  3881  000F54                     l8692:
  3882  000F54  0E09               	movlw	9
  3883  000F56  ECBB  F016         	call	_GETxAPIxVAL
  3884  000F5A  0100               	movlb	0	; () banked
  3885  000F5C  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3886  000F5E  E108               	bnz	l8696
  3887  000F60  0EFB               	movlw	251
  3888  000F62  0100               	movlb	0	; () banked
  3889  000F64  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  3890  000F66  B0D8               	btfsc	status,0,c
  3891  000F68  D003               	goto	l8696
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;State_Mchn.c: 827: {
  3895                           ;State_Mchn.c: 828: INCRxAPIxVAL(9);
  3896  000F6A  0E09               	movlw	9
  3897  000F6C  EC8F  F016         	call	_INCRxAPIxVAL
  3898  000F70                     l8696:
  3899                           
  3900                           ;State_Mchn.c: 829: }
  3901                           ;State_Mchn.c: 830: Switch_Adjust_RB = 1;
  3902  000F70  0E01               	movlw	1
  3903  000F72  D00B               	goto	L20
  3904  000F74                     l8698:
  3905  000F74  5002               	movf	_Adjust_Counter+1,w,c
  3906  000F76  E104               	bnz	u7760
  3907  000F78  0E14               	movlw	20
  3908  000F7A  5C01               	subwf	_Adjust_Counter,w,c
  3909  000F7C  A0D8               	btfss	status,0,c
  3910  000F7E  D007               	goto	l8704
  3911  000F80                     u7760:
  3912                           
  3913                           ;State_Mchn.c: 834: {
  3914                           ;State_Mchn.c: 835: Adjust_Counter = 0;
  3915  000F80  0E00               	movlw	0
  3916  000F82  6E02               	movwf	_Adjust_Counter+1,c
  3917  000F84  0E00               	movlw	0
  3918  000F86  6E01               	movwf	_Adjust_Counter,c
  3919  000F88  D7E3               	goto	l8690
  3920  000F8A                     L20:
  3921  000F8A  6E1D               	movwf	_Switch_Adjust_RB,c
  3922                           
  3923                           ;State_Mchn.c: 838: }
  3924                           
  3925                           ;State_Mchn.c: 837: break;
  3926  000F8C  D044               	goto	l8740
  3927  000F8E                     l8704:
  3928                           
  3929                           ;State_Mchn.c: 839: else {Adjust_Counter++;}
  3930  000F8E  4A01               	infsnz	_Adjust_Counter,f,c
  3931  000F90  2A02               	incf	_Adjust_Counter+1,f,c
  3932                           
  3933                           ;State_Mchn.c: 840: break;
  3934  000F92  D041               	goto	l8740
  3935  000F94                     l8710:
  3936  000F94  501D               	movf	_Switch_Adjust_RB,w,c
  3937                           
  3938                           ; Switch size 1, requested type "space"
  3939                           ; Number of cases is 2, Range of values is 0 to 1
  3940                           ; switch strategies available:
  3941                           ; Name         Instructions Cycles
  3942                           ; simple_byte            7     4 (average)
  3943                           ;	Chosen strategy is simple_byte
  3944  000F96  0A00               	xorlw	0	; case 0
  3945  000F98  B4D8               	btfsc	status,2,c
  3946  000F9A  D7DC               	goto	l8692
  3947  000F9C  0A01               	xorlw	1	; case 1
  3948  000F9E  B4D8               	btfsc	status,2,c
  3949  000FA0  D7E9               	goto	l8698
  3950  000FA2  D7D6               	goto	l8690
  3951  000FA4                     l8714:
  3952  000FA4  0E15               	movlw	21
  3953  000FA6  ECBB  F016         	call	_GETxAPIxVAL
  3954                           
  3955                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3956                           ; Switch size 1, requested type "space"
  3957                           ; Number of cases is 1, Range of values is 0 to 0
  3958                           ; switch strategies available:
  3959                           ; Name         Instructions Cycles
  3960                           ; simple_byte            4     3 (average)
  3961                           ;	Chosen strategy is simple_byte
  3962  000FAA  0100               	movlb	0	; () banked
  3963  000FAC  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3964  000FAE  0A00               	xorlw	0	; case 0
  3965  000FB0  A4D8               	btfss	status,2,c
  3966  000FB2  D031               	goto	l8740
  3967                           
  3968                           ; BSR set to: 0
  3969                           ; Switch size 1, requested type "space"
  3970                           ; Number of cases is 2, Range of values is 0 to 1
  3971                           ; switch strategies available:
  3972                           ; Name         Instructions Cycles
  3973                           ; simple_byte            7     4 (average)
  3974                           ;	Chosen strategy is simple_byte
  3975  000FB4  0100               	movlb	0	; () banked
  3976  000FB6  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3977  000FB8  0A00               	xorlw	0	; case 0
  3978  000FBA  B4D8               	btfsc	status,2,c
  3979  000FBC  D7C9               	goto	l8690
  3980  000FBE  0A01               	xorlw	1	; case 1
  3981  000FC0  B4D8               	btfsc	status,2,c
  3982  000FC2  D7E8               	goto	l8710
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;State_Mchn.c: 851: switch(GETxAPIxVAL(22))
  3986  000FC4  D028               	goto	l8740
  3987  000FC6                     l8716:
  3988                           
  3989                           ; BSR set to: 0
  3990  000FC6  0E00               	movlw	0
  3991  000FC8  D019               	goto	L22
  3992  000FCA                     l8718:
  3993  000FCA  0E09               	movlw	9
  3994  000FCC  ECBB  F016         	call	_GETxAPIxVAL
  3995  000FD0  0100               	movlb	0	; () banked
  3996  000FD2  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  3997  000FD4  0100               	movlb	0	; () banked
  3998  000FD6  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3999  000FD8  B4D8               	btfsc	status,2,c
  4000  000FDA  D003               	goto	l8722
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;State_Mchn.c: 859: {
  4004                           ;State_Mchn.c: 860: DECRxAPIxVAL(9);
  4005  000FDC  0E09               	movlw	9
  4006  000FDE  EC61  F016         	call	_DECRxAPIxVAL
  4007  000FE2                     l8722:
  4008                           
  4009                           ;State_Mchn.c: 861: }
  4010                           ;State_Mchn.c: 862: Switch_Adjust_RF = 1;
  4011  000FE2  0E01               	movlw	1
  4012  000FE4  D00B               	goto	L22
  4013  000FE6                     l8724:
  4014  000FE6  5002               	movf	_Adjust_Counter+1,w,c
  4015  000FE8  E104               	bnz	u7780
  4016  000FEA  0E14               	movlw	20
  4017  000FEC  5C01               	subwf	_Adjust_Counter,w,c
  4018  000FEE  A0D8               	btfss	status,0,c
  4019  000FF0  D007               	goto	l8730
  4020  000FF2                     u7780:
  4021                           
  4022                           ;State_Mchn.c: 866: {
  4023                           ;State_Mchn.c: 867: Adjust_Counter = 0;
  4024  000FF2  0E00               	movlw	0
  4025  000FF4  6E02               	movwf	_Adjust_Counter+1,c
  4026  000FF6  0E00               	movlw	0
  4027  000FF8  6E01               	movwf	_Adjust_Counter,c
  4028  000FFA  D7E5               	goto	l8716
  4029  000FFC                     L22:
  4030  000FFC  6E1E               	movwf	_Switch_Adjust_RF,c
  4031                           
  4032                           ;State_Mchn.c: 870: }
  4033                           
  4034                           ;State_Mchn.c: 869: break;
  4035  000FFE  D01B               	goto	l8742
  4036  001000                     l8730:
  4037                           
  4038                           ;State_Mchn.c: 871: else {Adjust_Counter++;}
  4039  001000  4A01               	infsnz	_Adjust_Counter,f,c
  4040  001002  2A02               	incf	_Adjust_Counter+1,f,c
  4041                           
  4042                           ;State_Mchn.c: 872: break;
  4043  001004  D018               	goto	l8742
  4044  001006                     l8736:
  4045  001006  501E               	movf	_Switch_Adjust_RF,w,c
  4046                           
  4047                           ; Switch size 1, requested type "space"
  4048                           ; Number of cases is 2, Range of values is 0 to 1
  4049                           ; switch strategies available:
  4050                           ; Name         Instructions Cycles
  4051                           ; simple_byte            7     4 (average)
  4052                           ;	Chosen strategy is simple_byte
  4053  001008  0A00               	xorlw	0	; case 0
  4054  00100A  B4D8               	btfsc	status,2,c
  4055  00100C  D7DE               	goto	l8718
  4056  00100E  0A01               	xorlw	1	; case 1
  4057  001010  B4D8               	btfsc	status,2,c
  4058  001012  D7E9               	goto	l8724
  4059  001014  D7D8               	goto	l8716
  4060  001016                     l8740:
  4061  001016  0E16               	movlw	22
  4062  001018  ECBB  F016         	call	_GETxAPIxVAL
  4063                           
  4064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4065                           ; Switch size 1, requested type "space"
  4066                           ; Number of cases is 1, Range of values is 0 to 0
  4067                           ; switch strategies available:
  4068                           ; Name         Instructions Cycles
  4069                           ; simple_byte            4     3 (average)
  4070                           ;	Chosen strategy is simple_byte
  4071  00101C  0100               	movlb	0	; () banked
  4072  00101E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4073  001020  0A00               	xorlw	0	; case 0
  4074  001022  A4D8               	btfss	status,2,c
  4075  001024  D008               	goto	l8742
  4076                           
  4077                           ; BSR set to: 0
  4078                           ; Switch size 1, requested type "space"
  4079                           ; Number of cases is 2, Range of values is 0 to 1
  4080                           ; switch strategies available:
  4081                           ; Name         Instructions Cycles
  4082                           ; simple_byte            7     4 (average)
  4083                           ;	Chosen strategy is simple_byte
  4084  001026  0100               	movlb	0	; () banked
  4085  001028  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  4086  00102A  0A00               	xorlw	0	; case 0
  4087  00102C  B4D8               	btfsc	status,2,c
  4088  00102E  D7CB               	goto	l8716
  4089  001030  0A01               	xorlw	1	; case 1
  4090  001032  B4D8               	btfsc	status,2,c
  4091  001034  D7E8               	goto	l8736
  4092  001036                     l8742:
  4093                           
  4094                           ;State_Mchn.c: 881: if(Activate_Controls_Counter <= 1)
  4095  001036  0100               	movlb	0	; () banked
  4096  001038  51E9               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  4097  00103A  E128               	bnz	l449
  4098  00103C  0E02               	movlw	2
  4099  00103E  0100               	movlb	0	; () banked
  4100  001040  5DE8               	subwf	_Activate_Controls_Counter& (0+255),w,b
  4101  001042  B0D8               	btfsc	status,0,c
  4102  001044  0012               	return	
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;State_Mchn.c: 882: {
  4106                           ;State_Mchn.c: 883: Switch_Activate_Controls = 0;
  4107  001046  0E00               	movlw	0
  4108  001048  6E1A               	movwf	_Switch_Activate_Controls,c
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;State_Mchn.c: 884: Red_Led(0);
  4112  00104A  0E00               	movlw	0
  4113  00104C  ECCC  F014         	call	_Red_Led
  4114                           
  4115                           ;State_Mchn.c: 885: }
  4116                           ;State_Mchn.c: 886: break;
  4117  001050  0012               	return	
  4118  001052                     l8748:
  4119  001052  0E00               	movlw	0
  4120  001054  6E1A               	movwf	_Switch_Activate_Controls,c
  4121                           
  4122                           ;State_Mchn.c: 889: Red_Led(0);
  4123  001056  0E00               	movlw	0
  4124  001058  ECCC  F014         	call	_Red_Led
  4125                           
  4126                           ;State_Mchn.c: 891: }
  4127                           
  4128                           ;State_Mchn.c: 890: break;
  4129  00105C  0012               	return	
  4130  00105E                     l8754:
  4131  00105E  501A               	movf	_Switch_Activate_Controls,w,c
  4132                           
  4133                           ; Switch size 1, requested type "space"
  4134                           ; Number of cases is 3, Range of values is 0 to 2
  4135                           ; switch strategies available:
  4136                           ; Name         Instructions Cycles
  4137                           ; simple_byte           10     6 (average)
  4138                           ;	Chosen strategy is simple_byte
  4139  001060  0A00               	xorlw	0	; case 0
  4140  001062  B4D8               	btfsc	status,2,c
  4141  001064  D661               	goto	l8594
  4142  001066  0A01               	xorlw	1	; case 1
  4143  001068  B4D8               	btfsc	status,2,c
  4144  00106A  D67C               	goto	l8606
  4145  00106C  0A03               	xorlw	3	; case 2
  4146  00106E  B4D8               	btfsc	status,2,c
  4147  001070  D69C               	goto	l8620
  4148  001072  D7EF               	goto	l8748
  4149  001074                     l8758:
  4150  001074  5020               	movf	_Switch_Main,w,c
  4151                           
  4152                           ; Switch size 1, requested type "space"
  4153                           ; Number of cases is 3, Range of values is 0 to 2
  4154                           ; switch strategies available:
  4155                           ; Name         Instructions Cycles
  4156                           ; simple_byte           10     6 (average)
  4157                           ;	Chosen strategy is simple_byte
  4158  001076  0A00               	xorlw	0	; case 0
  4159  001078  B4D8               	btfsc	status,2,c
  4160  00107A  EFD9  F003         	goto	l8294
  4161  00107E  0A01               	xorlw	1	; case 1
  4162  001080  B4D8               	btfsc	status,2,c
  4163  001082  D432               	goto	l8378
  4164  001084  0A03               	xorlw	3	; case 2
  4165  001086  A4D8               	btfss	status,2,c
  4166  001088  0012               	return	
  4167  00108A  D640               	goto	l8592
  4168  00108C                     l449:
  4169  00108C  0012               	return		;funcret
  4170  00108E                     __end_of_Update_StateMchn:
  4171                           	opt stack 0
  4172                           tblptru	equ	0xFF8
  4173                           tblptrh	equ	0xFF7
  4174                           tblptrl	equ	0xFF6
  4175                           tablat	equ	0xFF5
  4176                           postinc0	equ	0xFEE
  4177                           wreg	equ	0xFE8
  4178                           postdec1	equ	0xFE5
  4179                           fsr1l	equ	0xFE1
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function _Train_Path *****************
  4183 ;; Defined at:
  4184 ;;		line 912 in file "../State_Mchn.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  From            1    wreg     unsigned char 
  4187 ;;  To              1    3[BANK1 ] unsigned char 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  From            1    4[BANK2 ] unsigned char 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      unsigned char 
  4192 ;; Registers used:
  4193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4199 ;;      Params:         0       0       1       0       0       0       0       0       0
  4200 ;;      Locals:         0       0       0       1       0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4202 ;;      Totals:         0       0       1       1       0       0       0       0       0
  4203 ;;Total ram usage:        2 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    7
  4206 ;; This function calls:
  4207 ;;		_GETxAPIxVAL
  4208 ;;		_Junction
  4209 ;;		_Left_Mountain_From_The_Left
  4210 ;;		_Left_Mountain_From_The_Right
  4211 ;;		_Right_Mountain_From_The_Left
  4212 ;;		_Right_Mountain_From_The_Right
  4213 ;;		_Train_Move_Left_Brake
  4214 ;;		_Train_Move_Left_Start
  4215 ;;		_Train_Move_Right_Brake
  4216 ;;		_Train_Move_Right_Start
  4217 ;; This function is called by:
  4218 ;;		_Update_StateMchn
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text2
  4223  001728                     __ptext2:
  4224                           	opt stack 0
  4225  001728                     _Train_Path:
  4226                           	opt stack 22
  4227                           
  4228                           ;incstack = 0
  4229                           ;Train_Path@From stored from wreg
  4230  001728  0102               	movlb	2	; () banked
  4231  00172A  6F82               	movwf	Train_Path@From& (0+255),b
  4232                           
  4233                           ;State_Mchn.c: 914: static char Return_Val = 1;
  4234                           ;State_Mchn.c: 916: switch(Switch_Train_Path)
  4235  00172C  D19B               	goto	l7882
  4236  00172E                     l7674:
  4237  00172E  0E00               	movlw	0
  4238  001730  0100               	movlb	0	; () banked
  4239  001732  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4240  001734  0E01               	movlw	1
  4241  001736  ECBE  F013         	call	_Junction
  4242  00173A  0900               	iorlw	0
  4243  00173C  B4D8               	btfsc	status,2,c
  4244  00173E  D01A               	goto	l7688
  4245  001740                     l458:
  4246                           
  4247                           ;State_Mchn.c: 924: }
  4248                           ;State_Mchn.c: 925: Return_Val = 1;
  4249  001740  0E01               	movlw	1
  4250  001742                     L39:
  4251  001742  6E4C               	movwf	Train_Path@Return_Val,c
  4252                           
  4253                           ;State_Mchn.c: 926: break;
  4254  001744  D1B8               	goto	l7884
  4255  001746                     l7678:
  4256  001746  0E01               	movlw	1
  4257  001748  0100               	movlb	0	; () banked
  4258  00174A  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4259  00174C  0E01               	movlw	1
  4260  00174E  ECBE  F013         	call	_Junction
  4261  001752  D7F3               	goto	L58
  4262  001754                     l7682:
  4263  001754  0E01               	movlw	1
  4264  001756  0100               	movlb	0	; () banked
  4265  001758  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4266  00175A  0E00               	movlw	0
  4267  00175C  ECBE  F013         	call	_Junction
  4268  001760  D7EC               	goto	L58
  4269  001762                     l7686:
  4270  001762  0E00               	movlw	0
  4271  001764  0100               	movlb	0	; () banked
  4272  001766  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4273  001768  0E00               	movlw	0
  4274  00176A  ECBE  F013         	call	_Junction
  4275  00176E  0900               	iorlw	0
  4276  001770  A4D8               	btfss	status,2,c
  4277  001772  D7E6               	goto	l458
  4278  001774                     l7688:
  4279                           
  4280                           ;State_Mchn.c: 942: {
  4281                           ;State_Mchn.c: 943: Switch_Train_Path = 1;
  4282  001774  0E01               	movlw	1
  4283  001776  D016               	goto	L40
  4284  001778                     l7692:
  4285  001778  0102               	movlb	2	; () banked
  4286  00177A  5182               	movf	Train_Path@From& (0+255),w,b
  4287                           
  4288                           ; Switch size 1, requested type "space"
  4289                           ; Number of cases is 4, Range of values is 0 to 3
  4290                           ; switch strategies available:
  4291                           ; Name         Instructions Cycles
  4292                           ; simple_byte           13     7 (average)
  4293                           ;	Chosen strategy is simple_byte
  4294  00177C  0A00               	xorlw	0	; case 0
  4295  00177E  B4D8               	btfsc	status,2,c
  4296  001780  D7E9               	goto	l7682
  4297  001782  0A01               	xorlw	1	; case 1
  4298  001784  B4D8               	btfsc	status,2,c
  4299  001786  D7ED               	goto	l7686
  4300  001788  0A03               	xorlw	3	; case 2
  4301  00178A  B4D8               	btfsc	status,2,c
  4302  00178C  D7D0               	goto	l7674
  4303  00178E  0A01               	xorlw	1	; case 3
  4304  001790  B4D8               	btfsc	status,2,c
  4305  001792  D7D9               	goto	l7678
  4306                           
  4307                           ; BSR set to: 2
  4308                           ;State_Mchn.c: 950: break;
  4309  001794  D190               	goto	l7884
  4310  001796                     l7694:
  4311  001796  0E00               	movlw	0
  4312  001798  0100               	movlb	0	; () banked
  4313  00179A  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4314  00179C  0E01               	movlw	1
  4315  00179E  ECBE  F013         	call	_Junction
  4316  0017A2  D018               	goto	L45
  4317  0017A4                     L40:
  4318  0017A4  6E24               	movwf	_Switch_Train_Path,c
  4319                           
  4320                           ;State_Mchn.c: 957: Return_Val = 1;
  4321  0017A6  0E01               	movlw	1
  4322  0017A8  6E4C               	movwf	Train_Path@Return_Val,c
  4323  0017AA  D7CA               	goto	l458
  4324  0017AC                     l7698:
  4325  0017AC  0E01               	movlw	1
  4326  0017AE  0100               	movlb	0	; () banked
  4327  0017B0  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4328  0017B2  0E01               	movlw	1
  4329  0017B4  ECBE  F013         	call	_Junction
  4330  0017B8  D00D               	goto	L45
  4331  0017BA                     l7702:
  4332  0017BA  0E01               	movlw	1
  4333  0017BC  0100               	movlb	0	; () banked
  4334  0017BE  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4335  0017C0  0E00               	movlw	0
  4336  0017C2  ECBE  F013         	call	_Junction
  4337  0017C6  D006               	goto	L45
  4338  0017C8                     l7706:
  4339  0017C8  0E00               	movlw	0
  4340  0017CA  0100               	movlb	0	; () banked
  4341  0017CC  6FFC               	movwf	Junction@Straight_Bend& (0+255),b
  4342  0017CE  0E00               	movlw	0
  4343  0017D0  ECBE  F013         	call	_Junction
  4344  0017D4                     L45:
  4345  0017D4  0900               	iorlw	0
  4346  0017D6  A4D8               	btfss	status,2,c
  4347  0017D8  D7B3               	goto	l458
  4348                           
  4349                           ;State_Mchn.c: 976: {
  4350                           ;State_Mchn.c: 977: Switch_Train_Path = 2;
  4351  0017DA  0E02               	movlw	2
  4352  0017DC  D7E3               	goto	L40
  4353  0017DE                     l7712:
  4354  0017DE  0101               	movlb	1	; () banked
  4355  0017E0  51FF               	movf	Train_Path@To& (0+255),w,b
  4356                           
  4357                           ; Switch size 1, requested type "space"
  4358                           ; Number of cases is 4, Range of values is 0 to 3
  4359                           ; switch strategies available:
  4360                           ; Name         Instructions Cycles
  4361                           ; simple_byte           13     7 (average)
  4362                           ;	Chosen strategy is simple_byte
  4363  0017E2  0A00               	xorlw	0	; case 0
  4364  0017E4  B4D8               	btfsc	status,2,c
  4365  0017E6  D7E9               	goto	l7702
  4366  0017E8  0A01               	xorlw	1	; case 1
  4367  0017EA  B4D8               	btfsc	status,2,c
  4368  0017EC  D7ED               	goto	l7706
  4369  0017EE  0A03               	xorlw	3	; case 2
  4370  0017F0  B4D8               	btfsc	status,2,c
  4371  0017F2  D7D1               	goto	l7694
  4372  0017F4  0A01               	xorlw	1	; case 3
  4373  0017F6  B4D8               	btfsc	status,2,c
  4374  0017F8  D7D9               	goto	l7698
  4375                           
  4376                           ; BSR set to: 1
  4377                           ;State_Mchn.c: 984: break;
  4378  0017FA  D15D               	goto	l7884
  4379  0017FC                     l7714:
  4380                           
  4381                           ; BSR set to: 1
  4382  0017FC  EC2E  F011         	call	_Train_Move_Right_Start	;wreg free
  4383  001800  D008               	goto	L48
  4384  001802                     l7718:
  4385  001802  EC2E  F011         	call	_Train_Move_Right_Start	;wreg free
  4386  001806  D005               	goto	L48
  4387  001808                     l7722:
  4388  001808  EC43  F012         	call	_Train_Move_Left_Start	;wreg free
  4389  00180C  D002               	goto	L48
  4390  00180E                     l7726:
  4391  00180E  EC43  F012         	call	_Train_Move_Left_Start	;wreg free
  4392  001812                     L48:
  4393  001812  0900               	iorlw	0
  4394  001814  A4D8               	btfss	status,2,c
  4395  001816  D794               	goto	l458
  4396                           
  4397                           ;State_Mchn.c: 1010: {
  4398                           ;State_Mchn.c: 1011: Switch_Train_Path = 3;
  4399  001818  0E03               	movlw	3
  4400  00181A  D7C4               	goto	L40
  4401  00181C                     l7732:
  4402  00181C  0101               	movlb	1	; () banked
  4403  00181E  51FF               	movf	Train_Path@To& (0+255),w,b
  4404                           
  4405                           ; Switch size 1, requested type "space"
  4406                           ; Number of cases is 4, Range of values is 0 to 3
  4407                           ; switch strategies available:
  4408                           ; Name         Instructions Cycles
  4409                           ; simple_byte           13     7 (average)
  4410                           ;	Chosen strategy is simple_byte
  4411  001820  0A00               	xorlw	0	; case 0
  4412  001822  B4D8               	btfsc	status,2,c
  4413  001824  D7F1               	goto	l7722
  4414  001826  0A01               	xorlw	1	; case 1
  4415  001828  B4D8               	btfsc	status,2,c
  4416  00182A  D7F1               	goto	l7726
  4417  00182C  0A03               	xorlw	3	; case 2
  4418  00182E  B4D8               	btfsc	status,2,c
  4419  001830  D7E5               	goto	l7714
  4420  001832  0A01               	xorlw	1	; case 3
  4421  001834  B4D8               	btfsc	status,2,c
  4422  001836  D7E5               	goto	l7718
  4423                           
  4424                           ; BSR set to: 1
  4425                           ;State_Mchn.c: 1018: break;
  4426  001838  D13E               	goto	l7884
  4427  00183A                     l7734:
  4428                           
  4429                           ; BSR set to: 1
  4430  00183A  0E0C               	movlw	12
  4431  00183C  ECBB  F016         	call	_GETxAPIxVAL
  4432  001840  0100               	movlb	0	; () banked
  4433  001842  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4434  001844  0100               	movlb	0	; () banked
  4435  001846  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4436  001848  B4D8               	btfsc	status,2,c
  4437  00184A  D087               	goto	l7796
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;State_Mchn.c: 1025: else if(GETxAPIxVAL(25) == 1){
  4441                           
  4442                           ; BSR set to: 0
  4443                           
  4444                           ;State_Mchn.c: 1024: }
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;State_Mchn.c: 1023: Switch_Train_Path = 4;
  4448  00184C  0E19               	movlw	25
  4449  00184E  ECBB  F016         	call	_GETxAPIxVAL
  4450  001852  0100               	movlb	0	; () banked
  4451  001854  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4452  001856  0100               	movlb	0	; () banked
  4453  001858  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4454  00185A  A4D8               	btfss	status,2,c
  4455  00185C  D002               	goto	l7742
  4456  00185E                     
  4457                           ; BSR set to: 0
  4458                           ;State_Mchn.c: 1026: Switch_Train_Path = 5;
  4459  00185E  0E05               	movlw	5
  4460  001860  D049               	goto	L30
  4461  001862                     l7742:
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;State_Mchn.c: 1028: else if(GETxAPIxVAL(26) == 1){
  4465  001862  0E1A               	movlw	26
  4466  001864  ECBB  F016         	call	_GETxAPIxVAL
  4467  001868  0100               	movlb	0	; () banked
  4468  00186A  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4469  00186C  0100               	movlb	0	; () banked
  4470  00186E  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4471  001870  A4D8               	btfss	status,2,c
  4472  001872  D002               	goto	l7746
  4473  001874                     
  4474                           ; BSR set to: 0
  4475                           ;State_Mchn.c: 1029: Switch_Train_Path = 6;
  4476  001874  0E06               	movlw	6
  4477  001876  D03E               	goto	L30
  4478  001878                     l7746:
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;State_Mchn.c: 1031: else if(GETxAPIxVAL(28) == 1){
  4482  001878  0E1C               	movlw	28
  4483  00187A  ECBB  F016         	call	_GETxAPIxVAL
  4484  00187E  0100               	movlb	0	; () banked
  4485  001880  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4486  001882  0100               	movlb	0	; () banked
  4487  001884  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4488  001886  A4D8               	btfss	status,2,c
  4489  001888  D002               	goto	l7750
  4490  00188A                     
  4491                           ; BSR set to: 0
  4492                           ;State_Mchn.c: 1032: Switch_Train_Path = 7;
  4493  00188A  0E07               	movlw	7
  4494  00188C  D033               	goto	L30
  4495  00188E                     l7750:
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;State_Mchn.c: 1034: else if(GETxAPIxVAL(27) == 1){
  4499  00188E  0E1B               	movlw	27
  4500  001890  ECBB  F016         	call	_GETxAPIxVAL
  4501  001894  0100               	movlb	0	; () banked
  4502  001896  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4503  001898  0100               	movlb	0	; () banked
  4504  00189A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4505  00189C  A4D8               	btfss	status,2,c
  4506  00189E  D750               	goto	l458
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;State_Mchn.c: 1035: Switch_Train_Path = 8;
  4510  0018A0  0E08               	movlw	8
  4511  0018A2  D028               	goto	L30
  4512  0018A4                     l7754:
  4513  0018A4  0E0D               	movlw	13
  4514  0018A6  ECBB  F016         	call	_GETxAPIxVAL
  4515  0018AA  0100               	movlb	0	; () banked
  4516  0018AC  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4517  0018AE  0100               	movlb	0	; () banked
  4518  0018B0  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4519  0018B2  B4D8               	btfsc	status,2,c
  4520  0018B4  D052               	goto	l7796
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;State_Mchn.c: 1042: else if(GETxAPIxVAL(25) == 1){
  4524                           
  4525                           ; BSR set to: 0
  4526                           
  4527                           ;State_Mchn.c: 1041: }
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;State_Mchn.c: 1040: Switch_Train_Path = 4;
  4531  0018B6  0E19               	movlw	25
  4532  0018B8  ECBB  F016         	call	_GETxAPIxVAL
  4533  0018BC  0100               	movlb	0	; () banked
  4534  0018BE  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4535  0018C0  0100               	movlb	0	; () banked
  4536  0018C2  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4537  0018C4  B4D8               	btfsc	status,2,c
  4538  0018C6  D7CB               	goto	L82
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;State_Mchn.c: 1045: else if(GETxAPIxVAL(26) == 1){
  4542                           
  4543                           ; BSR set to: 0
  4544                           
  4545                           ;State_Mchn.c: 1044: }
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;State_Mchn.c: 1043: Switch_Train_Path = 5;
  4549  0018C8  0E1A               	movlw	26
  4550  0018CA  ECBB  F016         	call	_GETxAPIxVAL
  4551  0018CE  0100               	movlb	0	; () banked
  4552  0018D0  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4553  0018D2  0100               	movlb	0	; () banked
  4554  0018D4  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4555  0018D6  B4D8               	btfsc	status,2,c
  4556  0018D8  D7CD               	goto	L83
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;State_Mchn.c: 1048: else if(GETxAPIxVAL(28) == 1){
  4560                           
  4561                           ; BSR set to: 0
  4562                           
  4563                           ;State_Mchn.c: 1047: }
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;State_Mchn.c: 1046: Switch_Train_Path = 6;
  4567  0018DA  0E1C               	movlw	28
  4568  0018DC  ECBB  F016         	call	_GETxAPIxVAL
  4569  0018E0  0100               	movlb	0	; () banked
  4570  0018E2  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4571  0018E4  0100               	movlb	0	; () banked
  4572  0018E6  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4573  0018E8  B4D8               	btfsc	status,2,c
  4574  0018EA  D7CF               	goto	L84
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;State_Mchn.c: 1051: else if(GETxAPIxVAL(27) == 1){
  4578                           
  4579                           ; BSR set to: 0
  4580                           
  4581                           ;State_Mchn.c: 1050: }
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;State_Mchn.c: 1049: Switch_Train_Path = 7;
  4585  0018EC  0E1B               	movlw	27
  4586  0018EE  ECBB  F016         	call	_GETxAPIxVAL
  4587  0018F2  D7D0               	goto	L41
  4588  0018F4                     L30:
  4589  0018F4  6E24               	movwf	_Switch_Train_Path,c
  4590                           
  4591                           ; BSR set to: 0
  4592                           
  4593                           ; BSR set to: 0
  4594                           
  4595                           ; BSR set to: 0
  4596  0018F6  D724               	goto	l458
  4597  0018F8                     l7774:
  4598  0018F8  0E0E               	movlw	14
  4599  0018FA  ECBB  F016         	call	_GETxAPIxVAL
  4600  0018FE  0100               	movlb	0	; () banked
  4601  001900  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4602  001902  0100               	movlb	0	; () banked
  4603  001904  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4604  001906  B4D8               	btfsc	status,2,c
  4605  001908  D028               	goto	l7796
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;State_Mchn.c: 1060: else if(GETxAPIxVAL(25) == 1){
  4609                           
  4610                           ; BSR set to: 0
  4611                           
  4612                           ;State_Mchn.c: 1059: }
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;State_Mchn.c: 1057: {
  4616                           ;State_Mchn.c: 1058: Switch_Train_Path = 4;
  4617  00190A  0E19               	movlw	25
  4618  00190C  ECBB  F016         	call	_GETxAPIxVAL
  4619  001910  0100               	movlb	0	; () banked
  4620  001912  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4621  001914  0100               	movlb	0	; () banked
  4622  001916  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4623  001918  B4D8               	btfsc	status,2,c
  4624  00191A  D02A               	goto	l7800
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;State_Mchn.c: 1063: else if(GETxAPIxVAL(26) == 1){
  4628                           
  4629                           ; BSR set to: 0
  4630                           
  4631                           ;State_Mchn.c: 1062: }
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;State_Mchn.c: 1061: Switch_Train_Path = 9;
  4635  00191C  0E1A               	movlw	26
  4636  00191E  ECBB  F016         	call	_GETxAPIxVAL
  4637  001922  0100               	movlb	0	; () banked
  4638  001924  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4639  001926  0100               	movlb	0	; () banked
  4640  001928  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4641  00192A  B4D8               	btfsc	status,2,c
  4642  00192C  D02C               	goto	l7804
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;State_Mchn.c: 1066: else if(GETxAPIxVAL(28) == 1){
  4646                           
  4647                           ; BSR set to: 0
  4648                           
  4649                           ;State_Mchn.c: 1065: }
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;State_Mchn.c: 1064: Switch_Train_Path = 10;
  4653  00192E  0E1C               	movlw	28
  4654  001930  ECBB  F016         	call	_GETxAPIxVAL
  4655  001934  0100               	movlb	0	; () banked
  4656  001936  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4657  001938  0100               	movlb	0	; () banked
  4658  00193A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4659  00193C  B4D8               	btfsc	status,2,c
  4660  00193E  D02E               	goto	l7808
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;State_Mchn.c: 1069: else if(GETxAPIxVAL(27) == 1){
  4664                           
  4665                           ; BSR set to: 0
  4666                           
  4667                           ;State_Mchn.c: 1068: }
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;State_Mchn.c: 1067: Switch_Train_Path = 11;
  4671  001940  0E1B               	movlw	27
  4672  001942  ECBB  F016         	call	_GETxAPIxVAL
  4673  001946  D02F               	goto	L49
  4674  001948                     l7794:
  4675  001948  0E0F               	movlw	15
  4676  00194A  ECBB  F016         	call	_GETxAPIxVAL
  4677  00194E  0100               	movlb	0	; () banked
  4678  001950  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4679  001952  0100               	movlb	0	; () banked
  4680  001954  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4681  001956  A4D8               	btfss	status,2,c
  4682  001958  D002               	goto	l7798
  4683  00195A                     l7796:
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;State_Mchn.c: 1075: {
  4687                           ;State_Mchn.c: 1076: Switch_Train_Path = 4;
  4688  00195A  0E04               	movlw	4
  4689  00195C  D7CB               	goto	L30
  4690  00195E                     l7798:
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;State_Mchn.c: 1078: else if(GETxAPIxVAL(25) == 1){
  4694  00195E  0E19               	movlw	25
  4695  001960  ECBB  F016         	call	_GETxAPIxVAL
  4696  001964  0100               	movlb	0	; () banked
  4697  001966  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4698  001968  0100               	movlb	0	; () banked
  4699  00196A  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4700  00196C  A4D8               	btfss	status,2,c
  4701  00196E  D002               	goto	l7802
  4702  001970                     l7800:
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;State_Mchn.c: 1079: Switch_Train_Path = 9;
  4706  001970  0E09               	movlw	9
  4707  001972  D7C0               	goto	L30
  4708  001974                     l7802:
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;State_Mchn.c: 1081: else if(GETxAPIxVAL(26) == 1){
  4712  001974  0E1A               	movlw	26
  4713  001976  ECBB  F016         	call	_GETxAPIxVAL
  4714  00197A  0100               	movlb	0	; () banked
  4715  00197C  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4716  00197E  0100               	movlb	0	; () banked
  4717  001980  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4718  001982  A4D8               	btfss	status,2,c
  4719  001984  D002               	goto	l7806
  4720  001986                     l7804:
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;State_Mchn.c: 1082: Switch_Train_Path = 10;
  4724  001986  0E0A               	movlw	10
  4725  001988  D7B5               	goto	L30
  4726  00198A                     l7806:
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;State_Mchn.c: 1084: else if(GETxAPIxVAL(28) == 1){
  4730  00198A  0E1C               	movlw	28
  4731  00198C  ECBB  F016         	call	_GETxAPIxVAL
  4732  001990  0100               	movlb	0	; () banked
  4733  001992  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4734  001994  0100               	movlb	0	; () banked
  4735  001996  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4736  001998  A4D8               	btfss	status,2,c
  4737  00199A  D002               	goto	l7810
  4738  00199C                     l7808:
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;State_Mchn.c: 1085: Switch_Train_Path = 11;
  4742  00199C  0E0B               	movlw	11
  4743  00199E  D7AA               	goto	L30
  4744  0019A0                     l7810:
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;State_Mchn.c: 1087: else if(GETxAPIxVAL(27) == 1){
  4748  0019A0  0E1B               	movlw	27
  4749  0019A2  ECBB  F016         	call	_GETxAPIxVAL
  4750  0019A6                     L49:
  4751  0019A6  0100               	movlb	0	; () banked
  4752  0019A8  05F9               	decf	?_GETxAPIxVAL& (0+255),w,b
  4753  0019AA  0100               	movlb	0	; () banked
  4754  0019AC  11FA               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4755  0019AE  A4D8               	btfss	status,2,c
  4756  0019B0  D6C7               	goto	l458
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;State_Mchn.c: 1088: Switch_Train_Path = 12;
  4760  0019B2  0E0C               	movlw	12
  4761  0019B4  D79F               	goto	L30
  4762  0019B6                     l7816:
  4763  0019B6  0101               	movlb	1	; () banked
  4764  0019B8  51FF               	movf	Train_Path@To& (0+255),w,b
  4765                           
  4766                           ; Switch size 1, requested type "space"
  4767                           ; Number of cases is 4, Range of values is 0 to 3
  4768                           ; switch strategies available:
  4769                           ; Name         Instructions Cycles
  4770                           ; simple_byte           13     7 (average)
  4771                           ;	Chosen strategy is simple_byte
  4772  0019BA  0A00               	xorlw	0	; case 0
  4773  0019BC  B4D8               	btfsc	status,2,c
  4774  0019BE  D79C               	goto	l7774
  4775  0019C0  0A01               	xorlw	1	; case 1
  4776  0019C2  B4D8               	btfsc	status,2,c
  4777  0019C4  D7C1               	goto	l7794
  4778  0019C6  0A03               	xorlw	3	; case 2
  4779  0019C8  B4D8               	btfsc	status,2,c
  4780  0019CA  D737               	goto	l7734
  4781  0019CC  0A01               	xorlw	1	; case 3
  4782  0019CE  B4D8               	btfsc	status,2,c
  4783  0019D0  D769               	goto	l7754
  4784                           
  4785                           ; BSR set to: 1
  4786                           ;State_Mchn.c: 1094: break;
  4787  0019D2  D071               	goto	l7884
  4788  0019D4                     l7818:
  4789                           
  4790                           ; BSR set to: 1
  4791  0019D4  EC86  F00F         	call	_Train_Move_Right_Brake	;wreg free
  4792  0019D8  D008               	goto	L80
  4793  0019DA                     l7824:
  4794  0019DA  EC86  F00F         	call	_Train_Move_Right_Brake	;wreg free
  4795  0019DE  D005               	goto	L80
  4796  0019E0                     l7830:
  4797  0019E0  ECF5  F00E         	call	_Train_Move_Left_Brake	;wreg free
  4798  0019E4  D002               	goto	L80
  4799  0019E6                     l7836:
  4800  0019E6  ECF5  F00E         	call	_Train_Move_Left_Brake	;wreg free
  4801  0019EA                     L80:
  4802  0019EA  0900               	iorlw	0
  4803  0019EC  A4D8               	btfss	status,2,c
  4804  0019EE  D6A8               	goto	l458
  4805                           
  4806                           ;State_Mchn.c: 1123: {
  4807                           ;State_Mchn.c: 1124: Switch_Train_Path = 0;
  4808  0019F0  0E00               	movlw	0
  4809  0019F2  6E24               	movwf	_Switch_Train_Path,c
  4810                           
  4811                           ;State_Mchn.c: 1125: Return_Val = 0;
  4812  0019F4  0E00               	movlw	0
  4813  0019F6  D6A5               	goto	L39
  4814  0019F8                     l7844:
  4815  0019F8  0101               	movlb	1	; () banked
  4816  0019FA  51FF               	movf	Train_Path@To& (0+255),w,b
  4817                           
  4818                           ; Switch size 1, requested type "space"
  4819                           ; Number of cases is 4, Range of values is 0 to 3
  4820                           ; switch strategies available:
  4821                           ; Name         Instructions Cycles
  4822                           ; simple_byte           13     7 (average)
  4823                           ;	Chosen strategy is simple_byte
  4824  0019FC  0A00               	xorlw	0	; case 0
  4825  0019FE  B4D8               	btfsc	status,2,c
  4826  001A00  D7EF               	goto	l7830
  4827  001A02  0A01               	xorlw	1	; case 1
  4828  001A04  B4D8               	btfsc	status,2,c
  4829  001A06  D7EF               	goto	l7836
  4830  001A08  0A03               	xorlw	3	; case 2
  4831  001A0A  B4D8               	btfsc	status,2,c
  4832  001A0C  D7E3               	goto	l7818
  4833  001A0E  0A01               	xorlw	1	; case 3
  4834  001A10  B4D8               	btfsc	status,2,c
  4835  001A12  D7E3               	goto	l7824
  4836                           
  4837                           ; BSR set to: 1
  4838                           ;State_Mchn.c: 1132: break;
  4839  001A14  D050               	goto	l7884
  4840  001A16                     l7846:
  4841                           
  4842                           ;State_Mchn.c: 1135: if(Left_Mountain_From_The_Left(1) == 0){
  4843  001A16  0E01               	movlw	1
  4844  001A18  ECB9  F011         	call	_Left_Mountain_From_The_Left
  4845  001A1C  D01B               	goto	L81
  4846  001A1E                     l7850:
  4847                           
  4848                           ;State_Mchn.c: 1142: if(Left_Mountain_From_The_Left(2) == 0){
  4849  001A1E  0E02               	movlw	2
  4850  001A20  ECB9  F011         	call	_Left_Mountain_From_The_Left
  4851  001A24  D017               	goto	L81
  4852  001A26                     l7854:
  4853                           
  4854                           ;State_Mchn.c: 1149: if(Right_Mountain_From_The_Left(3) == 0){
  4855  001A26  0E03               	movlw	3
  4856  001A28  ECA1  F010         	call	_Right_Mountain_From_The_Left
  4857  001A2C  D013               	goto	L81
  4858  001A2E                     l7858:
  4859                           
  4860                           ;State_Mchn.c: 1156: if(Right_Mountain_From_The_Left(4) == 0){
  4861  001A2E  0E04               	movlw	4
  4862  001A30  ECA1  F010         	call	_Right_Mountain_From_The_Left
  4863  001A34  D00F               	goto	L81
  4864  001A36                     l7862:
  4865                           
  4866                           ;State_Mchn.c: 1163: if(Right_Mountain_From_The_Right(4) == 0){
  4867  001A36  0E04               	movlw	4
  4868  001A38  EC14  F010         	call	_Right_Mountain_From_The_Right
  4869  001A3C  D00B               	goto	L81
  4870  001A3E                     l7866:
  4871                           
  4872                           ;State_Mchn.c: 1170: if(Right_Mountain_From_The_Right(3) == 0){
  4873  001A3E  0E03               	movlw	3
  4874  001A40  EC14  F010         	call	_Right_Mountain_From_The_Right
  4875  001A44  D007               	goto	L81
  4876  001A46                     l7870:
  4877                           
  4878                           ;State_Mchn.c: 1177: if(Left_Mountain_From_The_Right(2) == 0){
  4879  001A46  0E02               	movlw	2
  4880  001A48  ECCC  F012         	call	_Left_Mountain_From_The_Right
  4881  001A4C  D003               	goto	L81
  4882  001A4E                     l7874:
  4883                           
  4884                           ;State_Mchn.c: 1184: if(Left_Mountain_From_The_Right(1) == 0){
  4885  001A4E  0E01               	movlw	1
  4886  001A50  ECCC  F012         	call	_Left_Mountain_From_The_Right
  4887  001A54                     L81:
  4888  001A54  0900               	iorlw	0
  4889  001A56  A4D8               	btfss	status,2,c
  4890  001A58  D673               	goto	l458
  4891                           
  4892                           ;State_Mchn.c: 1185: Switch_Train_Path = 3;
  4893  001A5A  0E03               	movlw	3
  4894  001A5C  D001               	goto	L42
  4895  001A5E                     l7878:
  4896  001A5E  0E00               	movlw	0
  4897  001A60                     L42:
  4898  001A60  6E24               	movwf	_Switch_Train_Path,c
  4899  001A62  D66E               	goto	l458
  4900  001A64                     l7882:
  4901  001A64  5024               	movf	_Switch_Train_Path,w,c
  4902                           
  4903                           ; Switch size 1, requested type "space"
  4904                           ; Number of cases is 13, Range of values is 0 to 12
  4905                           ; switch strategies available:
  4906                           ; Name         Instructions Cycles
  4907                           ; simple_byte           40    21 (average)
  4908                           ;	Chosen strategy is simple_byte
  4909  001A66  0A00               	xorlw	0	; case 0
  4910  001A68  B4D8               	btfsc	status,2,c
  4911  001A6A  D686               	goto	l7692
  4912  001A6C  0A01               	xorlw	1	; case 1
  4913  001A6E  B4D8               	btfsc	status,2,c
  4914  001A70  D6B6               	goto	l7712
  4915  001A72  0A03               	xorlw	3	; case 2
  4916  001A74  B4D8               	btfsc	status,2,c
  4917  001A76  D6D2               	goto	l7732
  4918  001A78  0A01               	xorlw	1	; case 3
  4919  001A7A  B4D8               	btfsc	status,2,c
  4920  001A7C  D79C               	goto	l7816
  4921  001A7E  0A07               	xorlw	7	; case 4
  4922  001A80  B4D8               	btfsc	status,2,c
  4923  001A82  D7BA               	goto	l7844
  4924  001A84  0A01               	xorlw	1	; case 5
  4925  001A86  B4D8               	btfsc	status,2,c
  4926  001A88  D7C6               	goto	l7846
  4927  001A8A  0A03               	xorlw	3	; case 6
  4928  001A8C  B4D8               	btfsc	status,2,c
  4929  001A8E  D7C7               	goto	l7850
  4930  001A90  0A01               	xorlw	1	; case 7
  4931  001A92  B4D8               	btfsc	status,2,c
  4932  001A94  D7C8               	goto	l7854
  4933  001A96  0A0F               	xorlw	15	; case 8
  4934  001A98  B4D8               	btfsc	status,2,c
  4935  001A9A  D7C9               	goto	l7858
  4936  001A9C  0A01               	xorlw	1	; case 9
  4937  001A9E  B4D8               	btfsc	status,2,c
  4938  001AA0  D7CA               	goto	l7862
  4939  001AA2  0A03               	xorlw	3	; case 10
  4940  001AA4  B4D8               	btfsc	status,2,c
  4941  001AA6  D7CB               	goto	l7866
  4942  001AA8  0A01               	xorlw	1	; case 11
  4943  001AAA  B4D8               	btfsc	status,2,c
  4944  001AAC  D7CC               	goto	l7870
  4945  001AAE  0A07               	xorlw	7	; case 12
  4946  001AB0  B4D8               	btfsc	status,2,c
  4947  001AB2  D7CD               	goto	l7874
  4948  001AB4  D7D4               	goto	l7878
  4949  001AB6                     l7884:
  4950                           
  4951                           ;State_Mchn.c: 1193: return(Return_Val);
  4952  001AB6  504C               	movf	Train_Path@Return_Val,w,c
  4953  001AB8  0012               	return	
  4954  001ABA                     __end_of_Train_Path:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           postinc0	equ	0xFEE
  4961                           wreg	equ	0xFE8
  4962                           postdec1	equ	0xFE5
  4963                           fsr1l	equ	0xFE1
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _Train_Move_Right_Start *****************
  4967 ;; Defined at:
  4968 ;;		line 27 in file "../train_move_right.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      unsigned char 
  4975 ;; Registers used:
  4976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4985 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4986 ;;Total ram usage:        0 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    6
  4989 ;; This function calls:
  4990 ;;		_GETxAPIxVAL
  4991 ;;		_SETxPWM
  4992 ;; This function is called by:
  4993 ;;		_Train_Path
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text3
  4998  00225C                     __ptext3:
  4999                           	opt stack 0
  5000  00225C                     _Train_Move_Right_Start:
  5001                           	opt stack 22
  5002                           
  5003                           ;train_move_right.c: 29: static char Return_Val = 1;
  5004                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5005                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  5006                           
  5007                           ;incstack = 0
  5008  00225C  D07A               	goto	l6976
  5009  00225E                     l6932:
  5010  00225E  0E04               	movlw	4
  5011  002260  ECBB  F016         	call	_GETxAPIxVAL
  5012  002264  0100               	movlb	0	; () banked
  5013  002266  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5014  002268  0100               	movlb	0	; () banked
  5015  00226A  5DE6               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  5016  00226C  0100               	movlb	0	; () banked
  5017  00226E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5018  002270  0100               	movlb	0	; () banked
  5019  002272  59E7               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5020  002274  A0D8               	btfss	status,0,c
  5021  002276  D002               	goto	l6936
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;train_move_right.c: 37: {
  5025                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  5026  002278  0E01               	movlw	1
  5027  00227A  D02C               	goto	L62
  5028  00227C                     l6936:
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;train_move_right.c: 42: }
  5032                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  5033  00227C  0100               	movlb	0	; () banked
  5034  00227E  4BE6               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  5035  002280  2BE7               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  5039  002282  0E00               	movlw	0
  5040  002284  6E23               	movwf	_Switch_Train_Move,c
  5041  002286  D061               	goto	L63
  5042  002288                     l6942:
  5043  002288  0E06               	movlw	6
  5044  00228A  ECBB  F016         	call	_GETxAPIxVAL
  5045  00228E  C0F9  F1FC         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5046  002292  C0FA  F1FD         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5047  002296  0E01               	movlw	1
  5048  002298  0101               	movlb	1	; () banked
  5049  00229A  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5050  00229C  EC88  F014         	call	_SETxPWM	;wreg free
  5051                           
  5052                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(6);
  5053  0022A0  0E06               	movlw	6
  5054  0022A2  ECBB  F016         	call	_GETxAPIxVAL
  5055  0022A6  C0F9  F009         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5056  0022AA  C0FA  F00A         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5057                           
  5058                           ;train_move_right.c: 50: PORTCbits.RC0 = 0;
  5059  0022AE  9082               	bcf	3970,0,c	;volatile
  5060                           
  5061                           ;train_move_right.c: 51: Return_Val = 1;
  5062  0022B0  0E01               	movlw	1
  5063  0022B2  0100               	movlb	0	; () banked
  5064  0022B4  6FF8               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5065  0022B6  D01B               	goto	l6958
  5066  0022B8                     l6950:
  5067  0022B8  0E02               	movlw	2
  5068  0022BA  ECBB  F016         	call	_GETxAPIxVAL
  5069  0022BE  0100               	movlb	0	; () banked
  5070  0022C0  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5071  0022C2  0100               	movlb	0	; () banked
  5072  0022C4  5DE6               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  5073  0022C6  0100               	movlb	0	; () banked
  5074  0022C8  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5075  0022CA  0100               	movlb	0	; () banked
  5076  0022CC  59E7               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5077  0022CE  A0D8               	btfss	status,0,c
  5078  0022D0  D008               	goto	l6954
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;train_move_right.c: 56: {
  5082                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  5083  0022D2  0E03               	movlw	3
  5084  0022D4                     L62:
  5085  0022D4  6E23               	movwf	_Switch_Train_Move,c
  5086                           
  5087                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  5088  0022D6  0E00               	movlw	0
  5089  0022D8  0100               	movlb	0	; () banked
  5090  0022DA  6FE7               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  5091  0022DC  0E00               	movlw	0
  5092  0022DE  6FE6               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  5093  0022E0  D034               	goto	L63
  5094  0022E2                     l6954:
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;train_move_right.c: 61: }
  5098                           ;train_move_right.c: 62: Return_Val = 1;
  5099  0022E2  0E01               	movlw	1
  5100  0022E4  0100               	movlb	0	; () banked
  5101  0022E6  6FF8               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  5105  0022E8  0100               	movlb	0	; () banked
  5106  0022EA  4BE6               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  5107  0022EC  2BE7               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5108  0022EE                     l6958:
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  5112  0022EE  0E02               	movlw	2
  5113  0022F0  6E23               	movwf	_Switch_Train_Move,c
  5114                           
  5115                           ;train_move_right.c: 65: break;
  5116  0022F2  D03C               	goto	l6978
  5117  0022F4                     l6960:
  5118  0022F4  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5119  0022F8  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5120  0022FC  0E01               	movlw	1
  5121  0022FE  0101               	movlb	1	; () banked
  5122  002300  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5123  002302  EC88  F014         	call	_SETxPWM	;wreg free
  5124                           
  5125                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count <= GETxAPIxVAL(7))
  5126  002306  0E07               	movlw	7
  5127  002308  ECBB  F016         	call	_GETxAPIxVAL
  5128  00230C  5009               	movf	_Train_Move_Pwm_Count,w,c
  5129  00230E  0100               	movlb	0	; () banked
  5130  002310  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5131  002312  500A               	movf	_Train_Move_Pwm_Count+1,w,c
  5132  002314  0100               	movlb	0	; () banked
  5133  002316  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5134  002318  A0D8               	btfss	status,0,c
  5135  00231A  D004               	goto	l6966
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;train_move_right.c: 69: {
  5139                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  5140  00231C  0E00               	movlw	0
  5141  00231E  6E23               	movwf	_Switch_Train_Move,c
  5142                           
  5143                           ;train_move_right.c: 71: Return_Val = 0;
  5144  002320  0E00               	movlw	0
  5145  002322  D014               	goto	L61
  5146  002324                     l6966:
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;train_move_right.c: 73: }
  5150                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  5151  002324  0E0A               	movlw	10
  5152  002326  ECBB  F016         	call	_GETxAPIxVAL
  5153  00232A  0100               	movlb	0	; () banked
  5154  00232C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5155  00232E  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5156  002330  0100               	movlb	0	; () banked
  5157  002332  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5158  002334  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5159  002336  A0D8               	btfss	status,0,c
  5160  002338  D006               	goto	l6972
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;train_move_right.c: 75: {
  5164                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  5165  00233A  4A09               	infsnz	_Train_Move_Pwm_Count,f,c
  5166  00233C  2A0A               	incf	_Train_Move_Pwm_Count+1,f,c
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  5170  00233E  0E00               	movlw	0
  5171  002340  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5172  002342  0E00               	movlw	0
  5173  002344  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  5174  002346                     l6972:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;train_move_right.c: 78: }
  5178                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  5179  002346  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5180  002348  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5181  00234A                     L63:
  5182                           
  5183                           ;train_move_right.c: 80: Return_Val = 1;
  5184  00234A  0E01               	movlw	1
  5185  00234C                     L61:
  5186  00234C  0100               	movlb	0	; () banked
  5187  00234E  6FF8               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;train_move_right.c: 84: }
  5191                           
  5192                           ; BSR set to: 0
  5193                           
  5194                           ;train_move_right.c: 83: default : break;
  5195                           
  5196                           ;train_move_right.c: 81: break;
  5197  002350  D00D               	goto	l6978
  5198  002352                     l6976:
  5199  002352  5023               	movf	_Switch_Train_Move,w,c
  5200                           
  5201                           ; Switch size 1, requested type "space"
  5202                           ; Number of cases is 4, Range of values is 0 to 3
  5203                           ; switch strategies available:
  5204                           ; Name         Instructions Cycles
  5205                           ; simple_byte           13     7 (average)
  5206                           ;	Chosen strategy is simple_byte
  5207  002354  0A00               	xorlw	0	; case 0
  5208  002356  B4D8               	btfsc	status,2,c
  5209  002358  D782               	goto	l6932
  5210  00235A  0A01               	xorlw	1	; case 1
  5211  00235C  B4D8               	btfsc	status,2,c
  5212  00235E  D794               	goto	l6942
  5213  002360  0A03               	xorlw	3	; case 2
  5214  002362  B4D8               	btfsc	status,2,c
  5215  002364  D7A9               	goto	l6950
  5216  002366  0A01               	xorlw	1	; case 3
  5217  002368  B4D8               	btfsc	status,2,c
  5218  00236A  D7C4               	goto	l6960
  5219  00236C                     l6978:
  5220                           
  5221                           ;train_move_right.c: 86: return(Return_Val);
  5222  00236C  0100               	movlb	0	; () banked
  5223  00236E  51F8               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  5224  002370  0012               	return	
  5225  002372                     __end_of_Train_Move_Right_Start:
  5226                           	opt stack 0
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           postinc0	equ	0xFEE
  5232                           wreg	equ	0xFE8
  5233                           postdec1	equ	0xFE5
  5234                           fsr1l	equ	0xFE1
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _Train_Move_Right_Brake *****************
  5238 ;; Defined at:
  5239 ;;		line 246 in file "../train_move_right.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;		None
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;		None
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      unsigned char 
  5246 ;; Registers used:
  5247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5253 ;;      Params:         0       0       0       0       0       0       0       0       0
  5254 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5256 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5257 ;;Total ram usage:        0 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    6
  5260 ;; This function calls:
  5261 ;;		_GETxAPIxVAL
  5262 ;;		_SETxPWM
  5263 ;; This function is called by:
  5264 ;;		_Train_Path
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text4
  5269  001F0C                     __ptext4:
  5270                           	opt stack 0
  5271  001F0C                     _Train_Move_Right_Brake:
  5272                           	opt stack 22
  5273                           
  5274                           ;train_move_right.c: 248: static char Return_Val = 1;
  5275                           ;train_move_right.c: 249: static unsigned int Train_Move_Wait_Time = 0;
  5276                           ;train_move_right.c: 251: switch(Switch_Train_Move)
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;incstack = 0
  5280  001F0C  D07D               	goto	l7082
  5281  001F0E                     l7038:
  5282  001F0E  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5283  001F12  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5284  001F16  0E01               	movlw	1
  5285  001F18  0101               	movlb	1	; () banked
  5286  001F1A  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5287  001F1C  EC88  F014         	call	_SETxPWM	;wreg free
  5288                           
  5289                           ;train_move_right.c: 254: if (Train_Move_Pwm_Count >= GETxAPIxVAL(6))
  5290  001F20  0E06               	movlw	6
  5291  001F22  ECBB  F016         	call	_GETxAPIxVAL
  5292  001F26  0100               	movlb	0	; () banked
  5293  001F28  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5294  001F2A  5C09               	subwf	_Train_Move_Pwm_Count,w,c
  5295  001F2C  0100               	movlb	0	; () banked
  5296  001F2E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5297  001F30  580A               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5298  001F32  A0D8               	btfss	status,0,c
  5299  001F34  D002               	goto	l7044
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;train_move_right.c: 255: {
  5303                           ;train_move_right.c: 256: Switch_Train_Move = 1;
  5304  001F36  0E01               	movlw	1
  5305  001F38  D062               	goto	L69
  5306  001F3A                     l7044:
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;train_move_right.c: 259: }
  5310                           ;train_move_right.c: 260: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(9))
  5311  001F3A  0E09               	movlw	9
  5312  001F3C  ECBB  F016         	call	_GETxAPIxVAL
  5313  001F40  0100               	movlb	0	; () banked
  5314  001F42  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5315  001F44  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5316  001F46  0100               	movlb	0	; () banked
  5317  001F48  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5318  001F4A  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5319  001F4C  A0D8               	btfss	status,0,c
  5320  001F4E  D007               	goto	l7050
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;train_move_right.c: 261: {
  5324                           ;train_move_right.c: 262: Train_Move_Pwm_Count--;
  5325  001F50  0609               	decf	_Train_Move_Pwm_Count,f,c
  5326  001F52  A0D8               	btfss	status,0,c
  5327  001F54  060A               	decf	_Train_Move_Pwm_Count+1,f,c
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;train_move_right.c: 263: Train_Move_Pwm_Fast_Count = 0;
  5331  001F56  0E00               	movlw	0
  5332  001F58  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5333  001F5A  0E00               	movlw	0
  5334  001F5C  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  5335  001F5E                     l7050:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;train_move_right.c: 264: }
  5339                           ;train_move_right.c: 265: Train_Move_Pwm_Fast_Count++;
  5340  001F5E  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5341  001F60  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5342  001F62  D04E               	goto	l7078
  5343  001F64                     l7052:
  5344  001F64  0E02               	movlw	2
  5345  001F66  ECBB  F016         	call	_GETxAPIxVAL
  5346  001F6A  0100               	movlb	0	; () banked
  5347  001F6C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5348  001F6E  0100               	movlb	0	; () banked
  5349  001F70  5DE4               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5350  001F72  0100               	movlb	0	; () banked
  5351  001F74  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5352  001F76  0100               	movlb	0	; () banked
  5353  001F78  59E5               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5354  001F7A  A0D8               	btfss	status,0,c
  5355  001F7C  D008               	goto	l7056
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;train_move_right.c: 270: {
  5359                           ;train_move_right.c: 271: Switch_Train_Move = 2;
  5360  001F7E  0E02               	movlw	2
  5361  001F80  6E23               	movwf	_Switch_Train_Move,c
  5362                           
  5363                           ;train_move_right.c: 272: Train_Move_Wait_Time = 0;
  5364  001F82  0E00               	movlw	0
  5365  001F84  0100               	movlb	0	; () banked
  5366  001F86  6FE5               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5367  001F88  0E00               	movlw	0
  5368  001F8A  6FE4               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5369  001F8C  D039               	goto	l7078
  5370  001F8E                     l7056:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;train_move_right.c: 275: }
  5374                           ;train_move_right.c: 276: Return_Val = 1;
  5375  001F8E  0E01               	movlw	1
  5376  001F90  0100               	movlb	0	; () banked
  5377  001F92  6FF7               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;train_move_right.c: 277: Train_Move_Wait_Time++;
  5381  001F94  0100               	movlb	0	; () banked
  5382  001F96  4BE4               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5383  001F98  2BE5               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;train_move_right.c: 278: Switch_Train_Move = 1;
  5387  001F9A  0E01               	movlw	1
  5388  001F9C  6E23               	movwf	_Switch_Train_Move,c
  5389                           
  5390                           ;train_move_right.c: 279: break;
  5391  001F9E  D041               	goto	l7084
  5392  001FA0                     l7062:
  5393  001FA0  0E06               	movlw	6
  5394  001FA2  ECBB  F016         	call	_GETxAPIxVAL
  5395  001FA6  C0F9  F1FC         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5396  001FAA  C0FA  F1FD         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5397  001FAE  0E01               	movlw	1
  5398  001FB0  0101               	movlb	1	; () banked
  5399  001FB2  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5400  001FB4  EC88  F014         	call	_SETxPWM	;wreg free
  5401                           
  5402                           ;train_move_right.c: 282: PORTCbits.RC0 = 1;
  5403  001FB8  8082               	bsf	3970,0,c	;volatile
  5404                           
  5405                           ;train_move_right.c: 283: Train_Move_Pwm_Count = GETxAPIxVAL(6);
  5406  001FBA  0E06               	movlw	6
  5407  001FBC  ECBB  F016         	call	_GETxAPIxVAL
  5408  001FC0  C0F9  F009         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5409  001FC4  C0FA  F00A         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5410  001FC8  D019               	goto	l7076
  5411  001FCA                     l7070:
  5412  001FCA  0E04               	movlw	4
  5413  001FCC  ECBB  F016         	call	_GETxAPIxVAL
  5414  001FD0  0100               	movlb	0	; () banked
  5415  001FD2  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5416  001FD4  0100               	movlb	0	; () banked
  5417  001FD6  5DE4               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5418  001FD8  0100               	movlb	0	; () banked
  5419  001FDA  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5420  001FDC  0100               	movlb	0	; () banked
  5421  001FDE  59E5               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5422  001FE0  A0D8               	btfss	status,0,c
  5423  001FE2  D009               	goto	l7074
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;train_move_right.c: 289: {
  5427                           ;train_move_right.c: 290: Switch_Train_Move = 0;
  5428  001FE4  0E00               	movlw	0
  5429  001FE6  6E23               	movwf	_Switch_Train_Move,c
  5430                           
  5431                           ;train_move_right.c: 291: Train_Move_Wait_Time = 0;
  5432  001FE8  0E00               	movlw	0
  5433  001FEA  0100               	movlb	0	; () banked
  5434  001FEC  6FE5               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5435  001FEE  0E00               	movlw	0
  5436  001FF0  6FE4               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5437                           
  5438                           ;train_move_right.c: 292: Return_Val = 0;
  5439  001FF2  0E00               	movlw	0
  5440  001FF4  D006               	goto	L67
  5441  001FF6                     l7074:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;train_move_right.c: 294: }
  5445                           ;train_move_right.c: 295: Train_Move_Wait_Time++;
  5446  001FF6  0100               	movlb	0	; () banked
  5447  001FF8  4BE4               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5448  001FFA  2BE5               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5449  001FFC                     l7076:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;train_move_right.c: 296: Switch_Train_Move = 3;
  5453  001FFC  0E03               	movlw	3
  5454  001FFE                     L69:
  5455  001FFE  6E23               	movwf	_Switch_Train_Move,c
  5456  002000                     l7078:
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;train_move_right.c: 297: Return_Val = 1;
  5460  002000  0E01               	movlw	1
  5461  002002                     L67:
  5462  002002  0100               	movlb	0	; () banked
  5463  002004  6FF7               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;train_move_right.c: 301: }
  5467                           
  5468                           ; BSR set to: 0
  5469                           
  5470                           ;train_move_right.c: 300: default : break;
  5471                           
  5472                           ;train_move_right.c: 298: break;
  5473  002006  D00D               	goto	l7084
  5474  002008                     l7082:
  5475  002008  5023               	movf	_Switch_Train_Move,w,c
  5476                           
  5477                           ; Switch size 1, requested type "space"
  5478                           ; Number of cases is 4, Range of values is 0 to 3
  5479                           ; switch strategies available:
  5480                           ; Name         Instructions Cycles
  5481                           ; simple_byte           13     7 (average)
  5482                           ;	Chosen strategy is simple_byte
  5483  00200A  0A00               	xorlw	0	; case 0
  5484  00200C  B4D8               	btfsc	status,2,c
  5485  00200E  D77F               	goto	l7038
  5486  002010  0A01               	xorlw	1	; case 1
  5487  002012  B4D8               	btfsc	status,2,c
  5488  002014  D7A7               	goto	l7052
  5489  002016  0A03               	xorlw	3	; case 2
  5490  002018  B4D8               	btfsc	status,2,c
  5491  00201A  D7C2               	goto	l7062
  5492  00201C  0A01               	xorlw	1	; case 3
  5493  00201E  B4D8               	btfsc	status,2,c
  5494  002020  D7D4               	goto	l7070
  5495  002022                     l7084:
  5496                           
  5497                           ;train_move_right.c: 303: return(Return_Val);
  5498  002022  0100               	movlb	0	; () banked
  5499  002024  51F7               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5500  002026  0012               	return	
  5501  002028                     __end_of_Train_Move_Right_Brake:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           postinc0	equ	0xFEE
  5508                           wreg	equ	0xFE8
  5509                           postdec1	equ	0xFE5
  5510                           fsr1l	equ	0xFE1
  5511                           status	equ	0xFD8
  5512                           
  5513 ;; *************** function _Train_Move_Left_Start *****************
  5514 ;; Defined at:
  5515 ;;		line 27 in file "../train_move_left.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      unsigned char 
  5522 ;; Registers used:
  5523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5529 ;;      Params:         0       0       0       0       0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5531 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5532 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5533 ;;Total ram usage:        0 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    6
  5536 ;; This function calls:
  5537 ;;		_GETxAPIxVAL
  5538 ;;		_SETxPWM
  5539 ;; This function is called by:
  5540 ;;		_Train_Path
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           	psect	text5
  5545  002486                     __ptext5:
  5546                           	opt stack 0
  5547  002486                     _Train_Move_Left_Start:
  5548                           	opt stack 22
  5549                           
  5550                           ;train_move_left.c: 29: static char Return_Val = 1;
  5551                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5552                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;incstack = 0
  5556  002486  D078               	goto	l7030
  5557  002488                     l6984:
  5558  002488  0E04               	movlw	4
  5559  00248A  ECBB  F016         	call	_GETxAPIxVAL
  5560  00248E  0100               	movlb	0	; () banked
  5561  002490  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5562  002492  0100               	movlb	0	; () banked
  5563  002494  5DE2               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5564  002496  0100               	movlb	0	; () banked
  5565  002498  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5566  00249A  0100               	movlb	0	; () banked
  5567  00249C  59E3               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5568  00249E  A0D8               	btfss	status,0,c
  5569  0024A0  D002               	goto	l6988
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;train_move_left.c: 37: {
  5573                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5574  0024A2  0E01               	movlw	1
  5575  0024A4  D02E               	goto	L72
  5576  0024A6                     l6988:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;train_move_left.c: 42: }
  5580                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5581  0024A6  0100               	movlb	0	; () banked
  5582  0024A8  4BE2               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5583  0024AA  2BE3               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5587  0024AC  0E00               	movlw	0
  5588  0024AE  D019               	goto	L70
  5589  0024B0                     l6992:
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;train_move_left.c: 45: Return_Val = 1;
  5593  0024B0  0E01               	movlw	1
  5594  0024B2  0100               	movlb	0	; () banked
  5595  0024B4  6FF6               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5596                           
  5597                           ;train_move_left.c: 46: break;
  5598  0024B6  D06D               	goto	l7032
  5599  0024B8                     l6994:
  5600  0024B8  0E05               	movlw	5
  5601  0024BA  ECBB  F016         	call	_GETxAPIxVAL
  5602  0024BE  C0F9  F1FC         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5603  0024C2  C0FA  F1FD         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5604  0024C6  0E00               	movlw	0
  5605  0024C8  0101               	movlb	1	; () banked
  5606  0024CA  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5607  0024CC  EC88  F014         	call	_SETxPWM	;wreg free
  5608                           
  5609                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(5);
  5610  0024D0  0E05               	movlw	5
  5611  0024D2  ECBB  F016         	call	_GETxAPIxVAL
  5612  0024D6  C0F9  F009         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5613  0024DA  C0FA  F00A         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5614                           
  5615                           ;train_move_left.c: 50: PORTCbits.RC0 = 0;
  5616  0024DE  9082               	bcf	3970,0,c	;volatile
  5617  0024E0  D01A               	goto	l7008
  5618  0024E2                     L70:
  5619  0024E2  6E23               	movwf	_Switch_Train_Move,c
  5620  0024E4  D7E5               	goto	l6992
  5621  0024E6                     l7002:
  5622  0024E6  0E02               	movlw	2
  5623  0024E8  ECBB  F016         	call	_GETxAPIxVAL
  5624  0024EC  0100               	movlb	0	; () banked
  5625  0024EE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5626  0024F0  0100               	movlb	0	; () banked
  5627  0024F2  5DE2               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5628  0024F4  0100               	movlb	0	; () banked
  5629  0024F6  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5630  0024F8  0100               	movlb	0	; () banked
  5631  0024FA  59E3               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5632  0024FC  A0D8               	btfss	status,0,c
  5633  0024FE  D008               	goto	l7006
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;train_move_left.c: 56: {
  5637                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5638  002500  0E03               	movlw	3
  5639  002502                     L72:
  5640  002502  6E23               	movwf	_Switch_Train_Move,c
  5641                           
  5642                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5643  002504  0E00               	movlw	0
  5644  002506  0100               	movlb	0	; () banked
  5645  002508  6FE3               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5646  00250A  0E00               	movlw	0
  5647  00250C  6FE2               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5648  00250E  D7D0               	goto	l6992
  5649  002510                     l7006:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;train_move_left.c: 61: }
  5653                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5654  002510  0100               	movlb	0	; () banked
  5655  002512  4BE2               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5656  002514  2BE3               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5657  002516                     l7008:
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5661  002516  0E02               	movlw	2
  5662  002518  D7E4               	goto	L70
  5663  00251A                     l7012:
  5664  00251A  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5665  00251E  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5666  002522  0E00               	movlw	0
  5667  002524  0101               	movlb	1	; () banked
  5668  002526  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5669  002528  EC88  F014         	call	_SETxPWM	;wreg free
  5670                           
  5671                           ;train_move_left.c: 68: Return_Val = 1;
  5672  00252C  0E01               	movlw	1
  5673  00252E  0100               	movlb	0	; () banked
  5674  002530  6FF6               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count <= GETxAPIxVAL(8))
  5678  002532  0E08               	movlw	8
  5679  002534  ECBB  F016         	call	_GETxAPIxVAL
  5680  002538  5009               	movf	_Train_Move_Pwm_Count,w,c
  5681  00253A  0100               	movlb	0	; () banked
  5682  00253C  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5683  00253E  500A               	movf	_Train_Move_Pwm_Count+1,w,c
  5684  002540  0100               	movlb	0	; () banked
  5685  002542  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5686  002544  A0D8               	btfss	status,0,c
  5687  002546  D004               	goto	l7020
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;train_move_left.c: 70: {
  5691                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5692  002548  0E00               	movlw	0
  5693  00254A  6E23               	movwf	_Switch_Train_Move,c
  5694                           
  5695                           ;train_move_left.c: 72: Return_Val = 0;
  5696  00254C  0E00               	movlw	0
  5697  00254E  D7B1               	goto	L71
  5698  002550                     l7020:
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;train_move_left.c: 74: }
  5702                           ;train_move_left.c: 75: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  5703  002550  0E0A               	movlw	10
  5704  002552  ECBB  F016         	call	_GETxAPIxVAL
  5705  002556  0100               	movlb	0	; () banked
  5706  002558  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5707  00255A  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5708  00255C  0100               	movlb	0	; () banked
  5709  00255E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5710  002560  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5711  002562  A0D8               	btfss	status,0,c
  5712  002564  D006               	goto	l7026
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;train_move_left.c: 76: {
  5716                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5717  002566  4A09               	infsnz	_Train_Move_Pwm_Count,f,c
  5718  002568  2A0A               	incf	_Train_Move_Pwm_Count+1,f,c
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5722  00256A  0E00               	movlw	0
  5723  00256C  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5724  00256E  0E00               	movlw	0
  5725  002570  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  5726  002572                     l7026:
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;train_move_left.c: 79: }
  5730                           ;train_move_left.c: 80: Train_Move_Pwm_Fast_Count++;
  5731  002572  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5732  002574  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;train_move_left.c: 83: }
  5736                           
  5737                           ; BSR set to: 0
  5738                           
  5739                           ;train_move_left.c: 82: default : break;
  5740                           
  5741                           ;train_move_left.c: 81: break;
  5742  002576  D00D               	goto	l7032
  5743  002578                     l7030:
  5744  002578  5023               	movf	_Switch_Train_Move,w,c
  5745                           
  5746                           ; Switch size 1, requested type "space"
  5747                           ; Number of cases is 4, Range of values is 0 to 3
  5748                           ; switch strategies available:
  5749                           ; Name         Instructions Cycles
  5750                           ; simple_byte           13     7 (average)
  5751                           ;	Chosen strategy is simple_byte
  5752  00257A  0A00               	xorlw	0	; case 0
  5753  00257C  B4D8               	btfsc	status,2,c
  5754  00257E  D784               	goto	l6984
  5755  002580  0A01               	xorlw	1	; case 1
  5756  002582  B4D8               	btfsc	status,2,c
  5757  002584  D799               	goto	l6994
  5758  002586  0A03               	xorlw	3	; case 2
  5759  002588  B4D8               	btfsc	status,2,c
  5760  00258A  D7AD               	goto	l7002
  5761  00258C  0A01               	xorlw	1	; case 3
  5762  00258E  B4D8               	btfsc	status,2,c
  5763  002590  D7C4               	goto	l7012
  5764  002592                     l7032:
  5765                           
  5766                           ;train_move_left.c: 85: return(Return_Val);
  5767  002592  0100               	movlb	0	; () banked
  5768  002594  51F6               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5769  002596  0012               	return	
  5770  002598                     __end_of_Train_Move_Left_Start:
  5771                           	opt stack 0
  5772                           tblptru	equ	0xFF8
  5773                           tblptrh	equ	0xFF7
  5774                           tblptrl	equ	0xFF6
  5775                           tablat	equ	0xFF5
  5776                           postinc0	equ	0xFEE
  5777                           wreg	equ	0xFE8
  5778                           postdec1	equ	0xFE5
  5779                           fsr1l	equ	0xFE1
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function _Train_Move_Left_Brake *****************
  5783 ;; Defined at:
  5784 ;;		line 246 in file "../train_move_left.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;		None
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;		None
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      unsigned char 
  5791 ;; Registers used:
  5792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5798 ;;      Params:         0       0       0       0       0       0       0       0       0
  5799 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5800 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5801 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5802 ;;Total ram usage:        0 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    6
  5805 ;; This function calls:
  5806 ;;		_GETxAPIxVAL
  5807 ;;		_SETxPWM
  5808 ;; This function is called by:
  5809 ;;		_Train_Path
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text6
  5814  001DEA                     __ptext6:
  5815                           	opt stack 0
  5816  001DEA                     _Train_Move_Left_Brake:
  5817                           	opt stack 22
  5818                           
  5819                           ;train_move_left.c: 248: static char Return_Val = 1;
  5820                           ;train_move_left.c: 249: static unsigned int Train_Move_Wait_Time = 0;
  5821                           ;train_move_left.c: 251: switch(Switch_Train_Move)
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;incstack = 0
  5825  001DEA  D080               	goto	l7136
  5826  001DEC                     l7090:
  5827  001DEC  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5828  001DF0  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5829  001DF4  0E00               	movlw	0
  5830  001DF6  0101               	movlb	1	; () banked
  5831  001DF8  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5832  001DFA  EC88  F014         	call	_SETxPWM	;wreg free
  5833                           
  5834                           ;train_move_left.c: 254: Return_Val = 1;
  5835  001DFE  0E01               	movlw	1
  5836  001E00  0100               	movlb	0	; () banked
  5837  001E02  6FF5               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;train_move_left.c: 255: if (Train_Move_Pwm_Count >= GETxAPIxVAL(5))
  5841  001E04  0E05               	movlw	5
  5842  001E06  ECBB  F016         	call	_GETxAPIxVAL
  5843  001E0A  0100               	movlb	0	; () banked
  5844  001E0C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5845  001E0E  5C09               	subwf	_Train_Move_Pwm_Count,w,c
  5846  001E10  0100               	movlb	0	; () banked
  5847  001E12  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5848  001E14  580A               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5849  001E16  A0D8               	btfss	status,0,c
  5850  001E18  D002               	goto	l7098
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;train_move_left.c: 256: {
  5854                           ;train_move_left.c: 257: Switch_Train_Move = 1;
  5855  001E1A  0E01               	movlw	1
  5856  001E1C  D062               	goto	L85
  5857  001E1E                     l7098:
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;train_move_left.c: 260: }
  5861                           ;train_move_left.c: 261: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(9))
  5862  001E1E  0E09               	movlw	9
  5863  001E20  ECBB  F016         	call	_GETxAPIxVAL
  5864  001E24  0100               	movlb	0	; () banked
  5865  001E26  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5866  001E28  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5867  001E2A  0100               	movlb	0	; () banked
  5868  001E2C  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5869  001E2E  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5870  001E30  A0D8               	btfss	status,0,c
  5871  001E32  D007               	goto	l7104
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;train_move_left.c: 262: {
  5875                           ;train_move_left.c: 263: Train_Move_Pwm_Count--;
  5876  001E34  0609               	decf	_Train_Move_Pwm_Count,f,c
  5877  001E36  A0D8               	btfss	status,0,c
  5878  001E38  060A               	decf	_Train_Move_Pwm_Count+1,f,c
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;train_move_left.c: 264: Train_Move_Pwm_Fast_Count = 0;
  5882  001E3A  0E00               	movlw	0
  5883  001E3C  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5884  001E3E  0E00               	movlw	0
  5885  001E40  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  5886  001E42                     l7104:
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;train_move_left.c: 265: }
  5890                           ;train_move_left.c: 266: Train_Move_Pwm_Fast_Count++;
  5891  001E42  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5892  001E44  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5893                           
  5894                           ;train_move_left.c: 267: break;
  5895  001E46  D05F               	goto	l7138
  5896  001E48                     l7106:
  5897  001E48  0E02               	movlw	2
  5898  001E4A  ECBB  F016         	call	_GETxAPIxVAL
  5899  001E4E  0100               	movlb	0	; () banked
  5900  001E50  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5901  001E52  0100               	movlb	0	; () banked
  5902  001E54  5DE0               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5903  001E56  0100               	movlb	0	; () banked
  5904  001E58  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5905  001E5A  0100               	movlb	0	; () banked
  5906  001E5C  59E1               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5907  001E5E  A0D8               	btfss	status,0,c
  5908  001E60  D008               	goto	l7110
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;train_move_left.c: 270: {
  5912                           ;train_move_left.c: 271: Switch_Train_Move = 2;
  5913  001E62  0E02               	movlw	2
  5914  001E64  6E23               	movwf	_Switch_Train_Move,c
  5915                           
  5916                           ;train_move_left.c: 272: Train_Move_Wait_Time = 0;
  5917  001E66  0E00               	movlw	0
  5918  001E68  0100               	movlb	0	; () banked
  5919  001E6A  6FE1               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5920  001E6C  0E00               	movlw	0
  5921  001E6E  6FE0               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5922  001E70  D039               	goto	l7132
  5923  001E72                     l7110:
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;train_move_left.c: 275: }
  5927                           ;train_move_left.c: 276: Return_Val = 1;
  5928  001E72  0E01               	movlw	1
  5929  001E74  0100               	movlb	0	; () banked
  5930  001E76  6FF5               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;train_move_left.c: 277: Train_Move_Wait_Time++;
  5934  001E78  0100               	movlb	0	; () banked
  5935  001E7A  4BE0               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5936  001E7C  2BE1               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;train_move_left.c: 278: Switch_Train_Move = 1;
  5940  001E7E  0E01               	movlw	1
  5941  001E80  6E23               	movwf	_Switch_Train_Move,c
  5942                           
  5943                           ;train_move_left.c: 279: break;
  5944  001E82  D041               	goto	l7138
  5945  001E84                     l7116:
  5946  001E84  0E05               	movlw	5
  5947  001E86  ECBB  F016         	call	_GETxAPIxVAL
  5948  001E8A  C0F9  F1FC         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5949  001E8E  C0FA  F1FD         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5950  001E92  0E00               	movlw	0
  5951  001E94  0101               	movlb	1	; () banked
  5952  001E96  6FFE               	movwf	SETxPWM@direction& (0+255),b
  5953  001E98  EC88  F014         	call	_SETxPWM	;wreg free
  5954                           
  5955                           ;train_move_left.c: 282: PORTCbits.RC0 = 1;
  5956  001E9C  8082               	bsf	3970,0,c	;volatile
  5957                           
  5958                           ;train_move_left.c: 283: Train_Move_Pwm_Count = GETxAPIxVAL(5);
  5959  001E9E  0E05               	movlw	5
  5960  001EA0  ECBB  F016         	call	_GETxAPIxVAL
  5961  001EA4  C0F9  F009         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5962  001EA8  C0FA  F00A         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5963  001EAC  D019               	goto	L86
  5964  001EAE                     l7124:
  5965  001EAE  0E04               	movlw	4
  5966  001EB0  ECBB  F016         	call	_GETxAPIxVAL
  5967  001EB4  0100               	movlb	0	; () banked
  5968  001EB6  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  5969  001EB8  0100               	movlb	0	; () banked
  5970  001EBA  5DE0               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5971  001EBC  0100               	movlb	0	; () banked
  5972  001EBE  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5973  001EC0  0100               	movlb	0	; () banked
  5974  001EC2  59E1               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5975  001EC4  A0D8               	btfss	status,0,c
  5976  001EC6  D009               	goto	l7128
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;train_move_left.c: 289: {
  5980                           ;train_move_left.c: 290: Switch_Train_Move = 0;
  5981  001EC8  0E00               	movlw	0
  5982  001ECA  6E23               	movwf	_Switch_Train_Move,c
  5983                           
  5984                           ;train_move_left.c: 291: Train_Move_Wait_Time = 0;
  5985  001ECC  0E00               	movlw	0
  5986  001ECE  0100               	movlb	0	; () banked
  5987  001ED0  6FE1               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5988  001ED2  0E00               	movlw	0
  5989  001ED4  6FE0               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5990                           
  5991                           ;train_move_left.c: 292: Return_Val = 0;
  5992  001ED6  0E00               	movlw	0
  5993  001ED8  D006               	goto	L75
  5994  001EDA                     l7128:
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;train_move_left.c: 294: }
  5998                           ;train_move_left.c: 295: Train_Move_Wait_Time++;
  5999  001EDA  0100               	movlb	0	; () banked
  6000  001EDC  4BE0               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  6001  001EDE  2BE1               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  6002  001EE0                     L86:
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;train_move_left.c: 296: Switch_Train_Move = 3;
  6006  001EE0  0E03               	movlw	3
  6007  001EE2                     L85:
  6008  001EE2  6E23               	movwf	_Switch_Train_Move,c
  6009  001EE4                     l7132:
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;train_move_left.c: 297: Return_Val = 1;
  6013  001EE4  0E01               	movlw	1
  6014  001EE6                     L75:
  6015  001EE6  0100               	movlb	0	; () banked
  6016  001EE8  6FF5               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;train_move_left.c: 301: }
  6020                           
  6021                           ; BSR set to: 0
  6022                           
  6023                           ;train_move_left.c: 300: default : break;
  6024                           
  6025                           ;train_move_left.c: 298: break;
  6026  001EEA  D00D               	goto	l7138
  6027  001EEC                     l7136:
  6028  001EEC  5023               	movf	_Switch_Train_Move,w,c
  6029                           
  6030                           ; Switch size 1, requested type "space"
  6031                           ; Number of cases is 4, Range of values is 0 to 3
  6032                           ; switch strategies available:
  6033                           ; Name         Instructions Cycles
  6034                           ; simple_byte           13     7 (average)
  6035                           ;	Chosen strategy is simple_byte
  6036  001EEE  0A00               	xorlw	0	; case 0
  6037  001EF0  B4D8               	btfsc	status,2,c
  6038  001EF2  D77C               	goto	l7090
  6039  001EF4  0A01               	xorlw	1	; case 1
  6040  001EF6  B4D8               	btfsc	status,2,c
  6041  001EF8  D7A7               	goto	l7106
  6042  001EFA  0A03               	xorlw	3	; case 2
  6043  001EFC  B4D8               	btfsc	status,2,c
  6044  001EFE  D7C2               	goto	l7116
  6045  001F00  0A01               	xorlw	1	; case 3
  6046  001F02  B4D8               	btfsc	status,2,c
  6047  001F04  D7D4               	goto	l7124
  6048  001F06                     l7138:
  6049                           
  6050                           ;train_move_left.c: 303: return(Return_Val);
  6051  001F06  0100               	movlb	0	; () banked
  6052  001F08  51F5               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  6053  001F0A  0012               	return	
  6054  001F0C                     __end_of_Train_Move_Left_Brake:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           postinc0	equ	0xFEE
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1l	equ	0xFE1
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _Right_Mountain_From_The_Right *****************
  6067 ;; Defined at:
  6068 ;;		line 103 in file "../train_move_left.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  rc              1    wreg     unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  rc              1    6[BANK0 ] unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      unsigned char 
  6075 ;; Registers used:
  6076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0
  6083 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6085 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6086 ;;Total ram usage:        1 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    6
  6089 ;; This function calls:
  6090 ;;		_GETxAPIxVAL
  6091 ;;		_SETxPWM
  6092 ;; This function is called by:
  6093 ;;		_Train_Path
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text7
  6098  002028                     __ptext7:
  6099                           	opt stack 0
  6100  002028                     _Right_Mountain_From_The_Right:
  6101                           	opt stack 22
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;incstack = 0
  6105                           ;Right_Mountain_From_The_Right@rc stored from wreg
  6106  002028  0100               	movlb	0	; () banked
  6107  00202A  6FFF               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  6108                           
  6109                           ;train_move_left.c: 105: static char Return_Val = 1;
  6110                           ;train_move_left.c: 107: switch (Switch_Moutain){
  6111  00202C  D080               	goto	l7292
  6112  00202E                     l7248:
  6113  00202E  0E03               	movlw	3
  6114  002030  0100               	movlb	0	; () banked
  6115  002032  19FF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6116  002034  A4D8               	btfss	status,2,c
  6117  002036  D002               	goto	l7252
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;train_move_left.c: 109: Switch_Moutain = 1;
  6121  002038  0E01               	movlw	1
  6122  00203A  D00C               	goto	L77
  6123  00203C                     l7252:
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(37)){
  6127  00203C  0E25               	movlw	37
  6128  00203E  ECBB  F016         	call	_GETxAPIxVAL
  6129  002042  0100               	movlb	0	; () banked
  6130  002044  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6131  002046  5C05               	subwf	_Mountain_Delay_Counter,w,c
  6132  002048  0100               	movlb	0	; () banked
  6133  00204A  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6134  00204C  5806               	subwfb	_Mountain_Delay_Counter+1,w,c
  6135  00204E  A0D8               	btfss	status,0,c
  6136  002050  D007               	goto	l7256
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;train_move_left.c: 113: Switch_Moutain = 0;
  6140  002052  0E00               	movlw	0
  6141  002054                     L77:
  6142  002054  6E21               	movwf	_Switch_Moutain,c
  6143                           
  6144                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  6145  002056  0E00               	movlw	0
  6146  002058  6E06               	movwf	_Mountain_Delay_Counter+1,c
  6147  00205A  0E00               	movlw	0
  6148  00205C  6E05               	movwf	_Mountain_Delay_Counter,c
  6149                           
  6150                           ;train_move_left.c: 115: }
  6151  00205E  D06E               	goto	l7294
  6152  002060                     l7256:
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;train_move_left.c: 116: else{
  6156                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  6157  002060  4A05               	infsnz	_Mountain_Delay_Counter,f,c
  6158  002062  2A06               	incf	_Mountain_Delay_Counter+1,f,c
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;train_move_left.c: 118: }
  6162                           ;train_move_left.c: 119: break;
  6163                           
  6164                           ; BSR set to: 0
  6165  002064  D06B               	goto	l7294
  6166  002066                     l7258:
  6167  002066  0E04               	movlw	4
  6168  002068  0100               	movlb	0	; () banked
  6169  00206A  19FF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6170  00206C  A4D8               	btfss	status,2,c
  6171  00206E  D02E               	goto	l7274
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;train_move_left.c: 122: SETxPWM(Train_Move_Pwm_Count, 0);
  6175  002070  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6176  002074  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6177  002078  0E00               	movlw	0
  6178  00207A  0101               	movlb	1	; () banked
  6179  00207C  6FFE               	movwf	SETxPWM@direction& (0+255),b
  6180  00207E  EC88  F014         	call	_SETxPWM	;wreg free
  6181                           
  6182                           ;train_move_left.c: 123: if (Train_Move_Pwm_Count <= GETxAPIxVAL(30))
  6183  002082  0E1E               	movlw	30
  6184  002084  ECBB  F016         	call	_GETxAPIxVAL
  6185  002088  5009               	movf	_Train_Move_Pwm_Count,w,c
  6186  00208A  0100               	movlb	0	; () banked
  6187  00208C  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6188  00208E  500A               	movf	_Train_Move_Pwm_Count+1,w,c
  6189  002090  0100               	movlb	0	; () banked
  6190  002092  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6191  002094  A0D8               	btfss	status,0,c
  6192  002096  D007               	goto	l7266
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;train_move_left.c: 124: {
  6196                           ;train_move_left.c: 125: Switch_Train_Move = 0;
  6197  002098  0E00               	movlw	0
  6198  00209A  6E23               	movwf	_Switch_Train_Move,c
  6199                           
  6200                           ;train_move_left.c: 126: Switch_Moutain = 0;
  6201  00209C  0E00               	movlw	0
  6202  00209E  6E21               	movwf	_Switch_Moutain,c
  6203                           
  6204                           ;train_move_left.c: 127: Return_Val = 0;
  6205  0020A0  0E00               	movlw	0
  6206  0020A2  0100               	movlb	0	; () banked
  6207  0020A4  6FF4               	movwf	Right_Mountain_From_The_Right@Return_Val& (0+255),b
  6208  0020A6                     l7266:
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;train_move_left.c: 128: }
  6212                           ;train_move_left.c: 129: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6213  0020A6  0E0A               	movlw	10
  6214  0020A8  ECBB  F016         	call	_GETxAPIxVAL
  6215  0020AC  0100               	movlb	0	; () banked
  6216  0020AE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6217  0020B0  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6218  0020B2  0100               	movlb	0	; () banked
  6219  0020B4  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6220  0020B6  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6221  0020B8  A0D8               	btfss	status,0,c
  6222  0020BA  D036               	goto	l7288
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;train_move_left.c: 130: {
  6226                           ;train_move_left.c: 131: Train_Move_Pwm_Count--;
  6227  0020BC  0609               	decf	_Train_Move_Pwm_Count,f,c
  6228  0020BE  A0D8               	btfss	status,0,c
  6229  0020C0  060A               	decf	_Train_Move_Pwm_Count+1,f,c
  6230  0020C2                     l7270:
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;train_move_left.c: 132: Train_Move_Pwm_Fast_Count = 0;
  6234  0020C2  0E00               	movlw	0
  6235  0020C4  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6236  0020C6  0E00               	movlw	0
  6237  0020C8  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  6238  0020CA  D02E               	goto	l7288
  6239  0020CC                     l7274:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;train_move_left.c: 136: else if (rc == 3){
  6243  0020CC  0E03               	movlw	3
  6244  0020CE  0100               	movlb	0	; () banked
  6245  0020D0  19FF               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6246  0020D2  A4D8               	btfss	status,2,c
  6247  0020D4  D033               	goto	l7294
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;train_move_left.c: 137: SETxPWM(Train_Move_Pwm_Count, 0);
  6251  0020D6  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6252  0020DA  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6253  0020DE  0E00               	movlw	0
  6254  0020E0  0101               	movlb	1	; () banked
  6255  0020E2  6FFE               	movwf	SETxPWM@direction& (0+255),b
  6256  0020E4  EC88  F014         	call	_SETxPWM	;wreg free
  6257                           
  6258                           ;train_move_left.c: 138: if (Train_Move_Pwm_Count <= GETxAPIxVAL(8))
  6259  0020E8  0E08               	movlw	8
  6260  0020EA  ECBB  F016         	call	_GETxAPIxVAL
  6261  0020EE  5009               	movf	_Train_Move_Pwm_Count,w,c
  6262  0020F0  0100               	movlb	0	; () banked
  6263  0020F2  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6264  0020F4  500A               	movf	_Train_Move_Pwm_Count+1,w,c
  6265  0020F6  0100               	movlb	0	; () banked
  6266  0020F8  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6267  0020FA  A0D8               	btfss	status,0,c
  6268  0020FC  D007               	goto	l7282
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;train_move_left.c: 139: {
  6272                           ;train_move_left.c: 140: Switch_Train_Move = 0;
  6273  0020FE  0E00               	movlw	0
  6274  002100  6E23               	movwf	_Switch_Train_Move,c
  6275                           
  6276                           ;train_move_left.c: 141: Switch_Moutain = 0;
  6277  002102  0E00               	movlw	0
  6278  002104  6E21               	movwf	_Switch_Moutain,c
  6279                           
  6280                           ;train_move_left.c: 142: Return_Val = 0;
  6281  002106  0E00               	movlw	0
  6282  002108  0100               	movlb	0	; () banked
  6283  00210A  6FF4               	movwf	Right_Mountain_From_The_Right@Return_Val& (0+255),b
  6284  00210C                     l7282:
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;train_move_left.c: 143: }
  6288                           ;train_move_left.c: 144: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6289  00210C  0E0A               	movlw	10
  6290  00210E  ECBB  F016         	call	_GETxAPIxVAL
  6291  002112  0100               	movlb	0	; () banked
  6292  002114  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6293  002116  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6294  002118  0100               	movlb	0	; () banked
  6295  00211A  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6296  00211C  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6297  00211E  A0D8               	btfss	status,0,c
  6298  002120  D003               	goto	l7288
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;train_move_left.c: 145: {
  6302                           ;train_move_left.c: 146: Train_Move_Pwm_Count++;
  6303  002122  4A09               	infsnz	_Train_Move_Pwm_Count,f,c
  6304  002124  2A0A               	incf	_Train_Move_Pwm_Count+1,f,c
  6305  002126  D7CD               	goto	l7270
  6306  002128                     l7288:
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;train_move_left.c: 148: }
  6310                           ;train_move_left.c: 149: Train_Move_Pwm_Fast_Count++;
  6311  002128  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6312  00212A  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;train_move_left.c: 155: }
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;train_move_left.c: 154: break;
  6319                           
  6320                           ;train_move_left.c: 153: default:
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;train_move_left.c: 150: }
  6324                           ;train_move_left.c: 151: break;
  6325                           
  6326                           ; BSR set to: 0
  6327  00212C  D007               	goto	l7294
  6328  00212E                     l7292:
  6329  00212E  5021               	movf	_Switch_Moutain,w,c
  6330                           
  6331                           ; Switch size 1, requested type "space"
  6332                           ; Number of cases is 2, Range of values is 0 to 1
  6333                           ; switch strategies available:
  6334                           ; Name         Instructions Cycles
  6335                           ; simple_byte            7     4 (average)
  6336                           ;	Chosen strategy is simple_byte
  6337  002130  0A00               	xorlw	0	; case 0
  6338  002132  B4D8               	btfsc	status,2,c
  6339  002134  D77C               	goto	l7248
  6340  002136  0A01               	xorlw	1	; case 1
  6341  002138  B4D8               	btfsc	status,2,c
  6342  00213A  D795               	goto	l7258
  6343  00213C                     l7294:
  6344                           
  6345                           ;train_move_left.c: 157: return(Return_Val);
  6346  00213C  0100               	movlb	0	; () banked
  6347  00213E  51F4               	movf	Right_Mountain_From_The_Right@Return_Val& (0+255),w,b
  6348  002140  0012               	return	
  6349  002142                     __end_of_Right_Mountain_From_The_Right:
  6350                           	opt stack 0
  6351                           tblptru	equ	0xFF8
  6352                           tblptrh	equ	0xFF7
  6353                           tblptrl	equ	0xFF6
  6354                           tablat	equ	0xFF5
  6355                           postinc0	equ	0xFEE
  6356                           wreg	equ	0xFE8
  6357                           postdec1	equ	0xFE5
  6358                           fsr1l	equ	0xFE1
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _Right_Mountain_From_The_Left *****************
  6362 ;; Defined at:
  6363 ;;		line 175 in file "../train_move_right.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  rc              1    wreg     unsigned char 
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;  rc              1    6[BANK0 ] unsigned char 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      unsigned char 
  6370 ;; Registers used:
  6371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0
  6378 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6380 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6381 ;;Total ram usage:        1 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    6
  6384 ;; This function calls:
  6385 ;;		_GETxAPIxVAL
  6386 ;;		_SETxPWM
  6387 ;; This function is called by:
  6388 ;;		_Train_Path
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text8
  6393  002142                     __ptext8:
  6394                           	opt stack 0
  6395  002142                     _Right_Mountain_From_The_Left:
  6396                           	opt stack 22
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;incstack = 0
  6400                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6401  002142  0100               	movlb	0	; () banked
  6402  002144  6FFF               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6403                           
  6404                           ;train_move_right.c: 177: static char Return_Val = 1;
  6405                           ;train_move_right.c: 179: switch (Switch_Moutain){
  6406  002146  D080               	goto	l7240
  6407  002148                     l7196:
  6408  002148  0E04               	movlw	4
  6409  00214A  0100               	movlb	0	; () banked
  6410  00214C  19FF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6411  00214E  A4D8               	btfss	status,2,c
  6412  002150  D002               	goto	l7200
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;train_move_right.c: 181: Switch_Moutain = 1;
  6416  002152  0E01               	movlw	1
  6417  002154  D00C               	goto	L78
  6418  002156                     l7200:
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;train_move_right.c: 184: else if(Mountain_Delay_Counter >= GETxAPIxVAL(40)){
  6422  002156  0E28               	movlw	40
  6423  002158  ECBB  F016         	call	_GETxAPIxVAL
  6424  00215C  0100               	movlb	0	; () banked
  6425  00215E  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6426  002160  5C05               	subwf	_Mountain_Delay_Counter,w,c
  6427  002162  0100               	movlb	0	; () banked
  6428  002164  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6429  002166  5806               	subwfb	_Mountain_Delay_Counter+1,w,c
  6430  002168  A0D8               	btfss	status,0,c
  6431  00216A  D007               	goto	l7204
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;train_move_right.c: 185: Switch_Moutain = 0;
  6435  00216C  0E00               	movlw	0
  6436  00216E                     L78:
  6437  00216E  6E21               	movwf	_Switch_Moutain,c
  6438                           
  6439                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6440  002170  0E00               	movlw	0
  6441  002172  6E06               	movwf	_Mountain_Delay_Counter+1,c
  6442  002174  0E00               	movlw	0
  6443  002176  6E05               	movwf	_Mountain_Delay_Counter,c
  6444                           
  6445                           ;train_move_right.c: 187: }
  6446  002178  D06E               	goto	l7242
  6447  00217A                     l7204:
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;train_move_right.c: 188: else{
  6451                           ;train_move_right.c: 189: Mountain_Delay_Counter++;
  6452  00217A  4A05               	infsnz	_Mountain_Delay_Counter,f,c
  6453  00217C  2A06               	incf	_Mountain_Delay_Counter+1,f,c
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;train_move_right.c: 190: }
  6457                           ;train_move_right.c: 191: break;
  6458                           
  6459                           ; BSR set to: 0
  6460  00217E  D06B               	goto	l7242
  6461  002180                     l7206:
  6462  002180  0E03               	movlw	3
  6463  002182  0100               	movlb	0	; () banked
  6464  002184  19FF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6465  002186  A4D8               	btfss	status,2,c
  6466  002188  D02D               	goto	l7222
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;train_move_right.c: 194: SETxPWM(Train_Move_Pwm_Count, 1);
  6470  00218A  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6471  00218E  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6472  002192  0E01               	movlw	1
  6473  002194  0101               	movlb	1	; () banked
  6474  002196  6FFE               	movwf	SETxPWM@direction& (0+255),b
  6475  002198  EC88  F014         	call	_SETxPWM	;wreg free
  6476                           
  6477                           ;train_move_right.c: 195: if (Train_Move_Pwm_Count >= GETxAPIxVAL(31))
  6478  00219C  0E1F               	movlw	31
  6479  00219E  ECBB  F016         	call	_GETxAPIxVAL
  6480  0021A2  0100               	movlb	0	; () banked
  6481  0021A4  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6482  0021A6  5C09               	subwf	_Train_Move_Pwm_Count,w,c
  6483  0021A8  0100               	movlb	0	; () banked
  6484  0021AA  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6485  0021AC  580A               	subwfb	_Train_Move_Pwm_Count+1,w,c
  6486  0021AE  A0D8               	btfss	status,0,c
  6487  0021B0  D007               	goto	l7214
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;train_move_right.c: 196: {
  6491                           ;train_move_right.c: 197: Switch_Train_Move = 0;
  6492  0021B2  0E00               	movlw	0
  6493  0021B4  6E23               	movwf	_Switch_Train_Move,c
  6494                           
  6495                           ;train_move_right.c: 198: Switch_Moutain = 0;
  6496  0021B6  0E00               	movlw	0
  6497  0021B8  6E21               	movwf	_Switch_Moutain,c
  6498                           
  6499                           ;train_move_right.c: 199: Return_Val = 0;
  6500  0021BA  0E00               	movlw	0
  6501  0021BC  0100               	movlb	0	; () banked
  6502  0021BE  6FF3               	movwf	Right_Mountain_From_The_Left@Return_Val& (0+255),b
  6503  0021C0                     l7214:
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;train_move_right.c: 200: }
  6507                           ;train_move_right.c: 201: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6508  0021C0  0E0A               	movlw	10
  6509  0021C2  ECBB  F016         	call	_GETxAPIxVAL
  6510  0021C6  0100               	movlb	0	; () banked
  6511  0021C8  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6512  0021CA  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6513  0021CC  0100               	movlb	0	; () banked
  6514  0021CE  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6515  0021D0  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6516  0021D2  A0D8               	btfss	status,0,c
  6517  0021D4  D036               	goto	l7236
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;train_move_right.c: 202: {
  6521                           ;train_move_right.c: 203: Train_Move_Pwm_Count++;
  6522  0021D6  4A09               	infsnz	_Train_Move_Pwm_Count,f,c
  6523  0021D8  2A0A               	incf	_Train_Move_Pwm_Count+1,f,c
  6524  0021DA                     l7218:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;train_move_right.c: 204: Train_Move_Pwm_Fast_Count = 0;
  6528  0021DA  0E00               	movlw	0
  6529  0021DC  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6530  0021DE  0E00               	movlw	0
  6531  0021E0  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  6532  0021E2  D02F               	goto	l7236
  6533  0021E4                     l7222:
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;train_move_right.c: 208: else if (rc == 4){
  6537  0021E4  0E04               	movlw	4
  6538  0021E6  0100               	movlb	0	; () banked
  6539  0021E8  19FF               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6540  0021EA  A4D8               	btfss	status,2,c
  6541  0021EC  D034               	goto	l7242
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;train_move_right.c: 209: SETxPWM(Train_Move_Pwm_Count, 1);
  6545  0021EE  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6546  0021F2  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6547  0021F6  0E01               	movlw	1
  6548  0021F8  0101               	movlb	1	; () banked
  6549  0021FA  6FFE               	movwf	SETxPWM@direction& (0+255),b
  6550  0021FC  EC88  F014         	call	_SETxPWM	;wreg free
  6551                           
  6552                           ;train_move_right.c: 210: if (Train_Move_Pwm_Count >= GETxAPIxVAL(7))
  6553  002200  0E07               	movlw	7
  6554  002202  ECBB  F016         	call	_GETxAPIxVAL
  6555  002206  0100               	movlb	0	; () banked
  6556  002208  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6557  00220A  5C09               	subwf	_Train_Move_Pwm_Count,w,c
  6558  00220C  0100               	movlb	0	; () banked
  6559  00220E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6560  002210  580A               	subwfb	_Train_Move_Pwm_Count+1,w,c
  6561  002212  A0D8               	btfss	status,0,c
  6562  002214  D007               	goto	l7230
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;train_move_right.c: 211: {
  6566                           ;train_move_right.c: 212: Switch_Train_Move = 0;
  6567  002216  0E00               	movlw	0
  6568  002218  6E23               	movwf	_Switch_Train_Move,c
  6569                           
  6570                           ;train_move_right.c: 213: Switch_Moutain = 0;
  6571  00221A  0E00               	movlw	0
  6572  00221C  6E21               	movwf	_Switch_Moutain,c
  6573                           
  6574                           ;train_move_right.c: 214: Return_Val = 0;
  6575  00221E  0E00               	movlw	0
  6576  002220  0100               	movlb	0	; () banked
  6577  002222  6FF3               	movwf	Right_Mountain_From_The_Left@Return_Val& (0+255),b
  6578  002224                     l7230:
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;train_move_right.c: 215: }
  6582                           ;train_move_right.c: 216: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6583  002224  0E0A               	movlw	10
  6584  002226  ECBB  F016         	call	_GETxAPIxVAL
  6585  00222A  0100               	movlb	0	; () banked
  6586  00222C  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6587  00222E  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6588  002230  0100               	movlb	0	; () banked
  6589  002232  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6590  002234  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6591  002236  A0D8               	btfss	status,0,c
  6592  002238  D004               	goto	l7236
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;train_move_right.c: 217: {
  6596                           ;train_move_right.c: 218: Train_Move_Pwm_Count--;
  6597  00223A  0609               	decf	_Train_Move_Pwm_Count,f,c
  6598  00223C  A0D8               	btfss	status,0,c
  6599  00223E  060A               	decf	_Train_Move_Pwm_Count+1,f,c
  6600  002240  D7CC               	goto	l7218
  6601  002242                     l7236:
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;train_move_right.c: 220: }
  6605                           ;train_move_right.c: 221: Train_Move_Pwm_Fast_Count++;
  6606  002242  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6607  002244  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;train_move_right.c: 227: }
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;train_move_right.c: 226: break;
  6614                           
  6615                           ;train_move_right.c: 225: default:
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;train_move_right.c: 222: }
  6619                           ;train_move_right.c: 223: break;
  6620                           
  6621                           ; BSR set to: 0
  6622  002246  D007               	goto	l7242
  6623  002248                     l7240:
  6624  002248  5021               	movf	_Switch_Moutain,w,c
  6625                           
  6626                           ; Switch size 1, requested type "space"
  6627                           ; Number of cases is 2, Range of values is 0 to 1
  6628                           ; switch strategies available:
  6629                           ; Name         Instructions Cycles
  6630                           ; simple_byte            7     4 (average)
  6631                           ;	Chosen strategy is simple_byte
  6632  00224A  0A00               	xorlw	0	; case 0
  6633  00224C  B4D8               	btfsc	status,2,c
  6634  00224E  D77C               	goto	l7196
  6635  002250  0A01               	xorlw	1	; case 1
  6636  002252  B4D8               	btfsc	status,2,c
  6637  002254  D795               	goto	l7206
  6638  002256                     l7242:
  6639                           
  6640                           ;train_move_right.c: 229: return(Return_Val);
  6641  002256  0100               	movlb	0	; () banked
  6642  002258  51F3               	movf	Right_Mountain_From_The_Left@Return_Val& (0+255),w,b
  6643  00225A  0012               	return	
  6644  00225C                     __end_of_Right_Mountain_From_The_Left:
  6645                           	opt stack 0
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           postinc0	equ	0xFEE
  6651                           wreg	equ	0xFE8
  6652                           postdec1	equ	0xFE5
  6653                           fsr1l	equ	0xFE1
  6654                           status	equ	0xFD8
  6655                           
  6656 ;; *************** function _Left_Mountain_From_The_Right *****************
  6657 ;; Defined at:
  6658 ;;		line 174 in file "../train_move_left.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  rc              1    wreg     unsigned char 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  rc              1    6[BANK0 ] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      unsigned char 
  6665 ;; Registers used:
  6666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0
  6673 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6675 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6676 ;;Total ram usage:        1 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    6
  6679 ;; This function calls:
  6680 ;;		_GETxAPIxVAL
  6681 ;;		_SETxPWM
  6682 ;; This function is called by:
  6683 ;;		_Train_Path
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           	psect	text9
  6688  002598                     __ptext9:
  6689                           	opt stack 0
  6690  002598                     _Left_Mountain_From_The_Right:
  6691                           	opt stack 22
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;incstack = 0
  6695                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6696  002598  0100               	movlb	0	; () banked
  6697  00259A  6FFF               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6698                           
  6699                           ;train_move_left.c: 176: static char Return_Val = 1;
  6700                           ;train_move_left.c: 178: switch (Switch_Moutain){
  6701  00259C  D07C               	goto	l7344
  6702  00259E                     l7300:
  6703  00259E  0100               	movlb	0	; () banked
  6704  0025A0  05FF               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6705  0025A2  B4D8               	btfsc	status,2,c
  6706  0025A4  D00B               	goto	l7306
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;train_move_left.c: 183: else if(Mountain_Delay_Counter >= GETxAPIxVAL(42)){
  6710                           
  6711                           ; BSR set to: 0
  6712                           
  6713                           ;train_move_left.c: 182: }
  6714                           
  6715                           ;train_move_left.c: 181: Mountain_Delay_Counter = 0;
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;train_move_left.c: 180: Switch_Moutain = 1;
  6719  0025A6  0E2A               	movlw	42
  6720  0025A8  ECBB  F016         	call	_GETxAPIxVAL
  6721  0025AC  0100               	movlb	0	; () banked
  6722  0025AE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6723  0025B0  5C05               	subwf	_Mountain_Delay_Counter,w,c
  6724  0025B2  0100               	movlb	0	; () banked
  6725  0025B4  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6726  0025B6  5806               	subwfb	_Mountain_Delay_Counter+1,w,c
  6727  0025B8  A0D8               	btfss	status,0,c
  6728  0025BA  D007               	goto	l7308
  6729  0025BC                     l7306:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;train_move_left.c: 184: Switch_Moutain = 1;
  6733  0025BC  0E01               	movlw	1
  6734  0025BE  6E21               	movwf	_Switch_Moutain,c
  6735                           
  6736                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  6737  0025C0  0E00               	movlw	0
  6738  0025C2  6E06               	movwf	_Mountain_Delay_Counter+1,c
  6739  0025C4  0E00               	movlw	0
  6740  0025C6  6E05               	movwf	_Mountain_Delay_Counter,c
  6741                           
  6742                           ;train_move_left.c: 186: }
  6743  0025C8  D06D               	goto	l7346
  6744  0025CA                     l7308:
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;train_move_left.c: 187: else{
  6748                           ;train_move_left.c: 188: Mountain_Delay_Counter++;
  6749  0025CA  4A05               	infsnz	_Mountain_Delay_Counter,f,c
  6750  0025CC  2A06               	incf	_Mountain_Delay_Counter+1,f,c
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;train_move_left.c: 189: }
  6754                           ;train_move_left.c: 190: break;
  6755                           
  6756                           ; BSR set to: 0
  6757  0025CE  D06A               	goto	l7346
  6758  0025D0                     l7310:
  6759  0025D0  0E02               	movlw	2
  6760  0025D2  0100               	movlb	0	; () banked
  6761  0025D4  19FF               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6762  0025D6  A4D8               	btfss	status,2,c
  6763  0025D8  D02D               	goto	l7326
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;train_move_left.c: 193: SETxPWM(Train_Move_Pwm_Count, 0);
  6767  0025DA  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6768  0025DE  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6769  0025E2  0E00               	movlw	0
  6770  0025E4  0101               	movlb	1	; () banked
  6771  0025E6  6FFE               	movwf	SETxPWM@direction& (0+255),b
  6772  0025E8  EC88  F014         	call	_SETxPWM	;wreg free
  6773                           
  6774                           ;train_move_left.c: 194: if (Train_Move_Pwm_Count >= GETxAPIxVAL(36))
  6775  0025EC  0E24               	movlw	36
  6776  0025EE  ECBB  F016         	call	_GETxAPIxVAL
  6777  0025F2  0100               	movlb	0	; () banked
  6778  0025F4  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6779  0025F6  5C09               	subwf	_Train_Move_Pwm_Count,w,c
  6780  0025F8  0100               	movlb	0	; () banked
  6781  0025FA  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6782  0025FC  580A               	subwfb	_Train_Move_Pwm_Count+1,w,c
  6783  0025FE  A0D8               	btfss	status,0,c
  6784  002600  D007               	goto	l7318
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;train_move_left.c: 195: {
  6788                           ;train_move_left.c: 196: Switch_Train_Move = 0;
  6789  002602  0E00               	movlw	0
  6790  002604  6E23               	movwf	_Switch_Train_Move,c
  6791                           
  6792                           ;train_move_left.c: 197: Switch_Moutain = 0;
  6793  002606  0E00               	movlw	0
  6794  002608  6E21               	movwf	_Switch_Moutain,c
  6795                           
  6796                           ;train_move_left.c: 198: Return_Val = 0;
  6797  00260A  0E00               	movlw	0
  6798  00260C  0100               	movlb	0	; () banked
  6799  00260E  6FF2               	movwf	Left_Mountain_From_The_Right@Return_Val& (0+255),b
  6800  002610                     l7318:
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;train_move_left.c: 199: }
  6804                           ;train_move_left.c: 200: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6805  002610  0E0A               	movlw	10
  6806  002612  ECBB  F016         	call	_GETxAPIxVAL
  6807  002616  0100               	movlb	0	; () banked
  6808  002618  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6809  00261A  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6810  00261C  0100               	movlb	0	; () banked
  6811  00261E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6812  002620  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6813  002622  A0D8               	btfss	status,0,c
  6814  002624  D035               	goto	l7340
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;train_move_left.c: 201: {
  6818                           ;train_move_left.c: 202: Train_Move_Pwm_Count++;
  6819  002626  4A09               	infsnz	_Train_Move_Pwm_Count,f,c
  6820  002628  2A0A               	incf	_Train_Move_Pwm_Count+1,f,c
  6821  00262A                     l7322:
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;train_move_left.c: 203: Train_Move_Pwm_Fast_Count = 0;
  6825  00262A  0E00               	movlw	0
  6826  00262C  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6827  00262E  0E00               	movlw	0
  6828  002630  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  6829  002632  D02E               	goto	l7340
  6830  002634                     l7326:
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;train_move_left.c: 207: else if (rc == 1){
  6834  002634  0100               	movlb	0	; () banked
  6835  002636  05FF               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6836  002638  A4D8               	btfss	status,2,c
  6837  00263A  D034               	goto	l7346
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;train_move_left.c: 208: SETxPWM(Train_Move_Pwm_Count, 0);
  6841  00263C  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6842  002640  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6843  002644  0E00               	movlw	0
  6844  002646  0101               	movlb	1	; () banked
  6845  002648  6FFE               	movwf	SETxPWM@direction& (0+255),b
  6846  00264A  EC88  F014         	call	_SETxPWM	;wreg free
  6847                           
  6848                           ;train_move_left.c: 209: if (Train_Move_Pwm_Count <= GETxAPIxVAL(8))
  6849  00264E  0E08               	movlw	8
  6850  002650  ECBB  F016         	call	_GETxAPIxVAL
  6851  002654  5009               	movf	_Train_Move_Pwm_Count,w,c
  6852  002656  0100               	movlb	0	; () banked
  6853  002658  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6854  00265A  500A               	movf	_Train_Move_Pwm_Count+1,w,c
  6855  00265C  0100               	movlb	0	; () banked
  6856  00265E  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6857  002660  A0D8               	btfss	status,0,c
  6858  002662  D007               	goto	l7334
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;train_move_left.c: 210: {
  6862                           ;train_move_left.c: 211: Switch_Train_Move = 0;
  6863  002664  0E00               	movlw	0
  6864  002666  6E23               	movwf	_Switch_Train_Move,c
  6865                           
  6866                           ;train_move_left.c: 212: Switch_Moutain = 0;
  6867  002668  0E00               	movlw	0
  6868  00266A  6E21               	movwf	_Switch_Moutain,c
  6869                           
  6870                           ;train_move_left.c: 213: Return_Val = 0;
  6871  00266C  0E00               	movlw	0
  6872  00266E  0100               	movlb	0	; () banked
  6873  002670  6FF2               	movwf	Left_Mountain_From_The_Right@Return_Val& (0+255),b
  6874  002672                     l7334:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;train_move_left.c: 214: }
  6878                           ;train_move_left.c: 215: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  6879  002672  0E0A               	movlw	10
  6880  002674  ECBB  F016         	call	_GETxAPIxVAL
  6881  002678  0100               	movlb	0	; () banked
  6882  00267A  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  6883  00267C  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6884  00267E  0100               	movlb	0	; () banked
  6885  002680  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6886  002682  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6887  002684  A0D8               	btfss	status,0,c
  6888  002686  D004               	goto	l7340
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;train_move_left.c: 216: {
  6892                           ;train_move_left.c: 217: Train_Move_Pwm_Count--;
  6893  002688  0609               	decf	_Train_Move_Pwm_Count,f,c
  6894  00268A  A0D8               	btfss	status,0,c
  6895  00268C  060A               	decf	_Train_Move_Pwm_Count+1,f,c
  6896  00268E  D7CD               	goto	l7322
  6897  002690                     l7340:
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;train_move_left.c: 219: }
  6901                           ;train_move_left.c: 220: Train_Move_Pwm_Fast_Count++;
  6902  002690  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6903  002692  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;train_move_left.c: 226: }
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;train_move_left.c: 225: break;
  6910                           
  6911                           ;train_move_left.c: 224: default:
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;train_move_left.c: 221: }
  6915                           ;train_move_left.c: 222: break;
  6916                           
  6917                           ; BSR set to: 0
  6918  002694  D007               	goto	l7346
  6919  002696                     l7344:
  6920  002696  5021               	movf	_Switch_Moutain,w,c
  6921                           
  6922                           ; Switch size 1, requested type "space"
  6923                           ; Number of cases is 2, Range of values is 0 to 1
  6924                           ; switch strategies available:
  6925                           ; Name         Instructions Cycles
  6926                           ; simple_byte            7     4 (average)
  6927                           ;	Chosen strategy is simple_byte
  6928  002698  0A00               	xorlw	0	; case 0
  6929  00269A  B4D8               	btfsc	status,2,c
  6930  00269C  D780               	goto	l7300
  6931  00269E  0A01               	xorlw	1	; case 1
  6932  0026A0  B4D8               	btfsc	status,2,c
  6933  0026A2  D796               	goto	l7310
  6934  0026A4                     l7346:
  6935                           
  6936                           ;train_move_left.c: 228: return(Return_Val);
  6937  0026A4  0100               	movlb	0	; () banked
  6938  0026A6  51F2               	movf	Left_Mountain_From_The_Right@Return_Val& (0+255),w,b
  6939  0026A8  0012               	return	
  6940  0026AA                     __end_of_Left_Mountain_From_The_Right:
  6941                           	opt stack 0
  6942                           tblptru	equ	0xFF8
  6943                           tblptrh	equ	0xFF7
  6944                           tblptrl	equ	0xFF6
  6945                           tablat	equ	0xFF5
  6946                           postinc0	equ	0xFEE
  6947                           wreg	equ	0xFE8
  6948                           postdec1	equ	0xFE5
  6949                           fsr1l	equ	0xFE1
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function _Left_Mountain_From_The_Left *****************
  6953 ;; Defined at:
  6954 ;;		line 104 in file "../train_move_right.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;  rc              1    wreg     unsigned char 
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  rc              1    6[BANK0 ] unsigned char 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      unsigned char 
  6961 ;; Registers used:
  6962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6968 ;;      Params:         0       0       0       0       0       0       0       0       0
  6969 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6971 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6972 ;;Total ram usage:        1 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    6
  6975 ;; This function calls:
  6976 ;;		_GETxAPIxVAL
  6977 ;;		_SETxPWM
  6978 ;; This function is called by:
  6979 ;;		_Train_Path
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text10
  6984  002372                     __ptext10:
  6985                           	opt stack 0
  6986  002372                     _Left_Mountain_From_The_Left:
  6987                           	opt stack 22
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;incstack = 0
  6991                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6992  002372  0100               	movlb	0	; () banked
  6993  002374  6FFF               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6994                           
  6995                           ;train_move_right.c: 106: static char Return_Val = 1;
  6996                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6997  002376  D07D               	goto	l7188
  6998  002378                     l7144:
  6999  002378  0E02               	movlw	2
  7000  00237A  0100               	movlb	0	; () banked
  7001  00237C  19FF               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7002  00237E  B4D8               	btfsc	status,2,c
  7003  002380  D00B               	goto	l7150
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(43)){
  7007                           
  7008                           ; BSR set to: 0
  7009                           
  7010                           ;train_move_right.c: 112: }
  7011                           
  7012                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;train_move_right.c: 110: Switch_Moutain = 1;
  7016  002382  0E2B               	movlw	43
  7017  002384  ECBB  F016         	call	_GETxAPIxVAL
  7018  002388  0100               	movlb	0	; () banked
  7019  00238A  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  7020  00238C  5C05               	subwf	_Mountain_Delay_Counter,w,c
  7021  00238E  0100               	movlb	0	; () banked
  7022  002390  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7023  002392  5806               	subwfb	_Mountain_Delay_Counter+1,w,c
  7024  002394  A0D8               	btfss	status,0,c
  7025  002396  D007               	goto	l7152
  7026  002398                     l7150:
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;train_move_right.c: 114: Switch_Moutain = 1;
  7030  002398  0E01               	movlw	1
  7031  00239A  6E21               	movwf	_Switch_Moutain,c
  7032                           
  7033                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  7034  00239C  0E00               	movlw	0
  7035  00239E  6E06               	movwf	_Mountain_Delay_Counter+1,c
  7036  0023A0  0E00               	movlw	0
  7037  0023A2  6E05               	movwf	_Mountain_Delay_Counter,c
  7038                           
  7039                           ;train_move_right.c: 116: }
  7040  0023A4  D06D               	goto	l7190
  7041  0023A6                     l7152:
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;train_move_right.c: 117: else{
  7045                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  7046  0023A6  4A05               	infsnz	_Mountain_Delay_Counter,f,c
  7047  0023A8  2A06               	incf	_Mountain_Delay_Counter+1,f,c
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;train_move_right.c: 119: }
  7051                           ;train_move_right.c: 120: break;
  7052                           
  7053                           ; BSR set to: 0
  7054  0023AA  D06A               	goto	l7190
  7055  0023AC                     l7154:
  7056  0023AC  0100               	movlb	0	; () banked
  7057  0023AE  05FF               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7058  0023B0  A4D8               	btfss	status,2,c
  7059  0023B2  D02E               	goto	l7170
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;train_move_right.c: 123: SETxPWM(Train_Move_Pwm_Count, 1);
  7063  0023B4  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7064  0023B8  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7065  0023BC  0E01               	movlw	1
  7066  0023BE  0101               	movlb	1	; () banked
  7067  0023C0  6FFE               	movwf	SETxPWM@direction& (0+255),b
  7068  0023C2  EC88  F014         	call	_SETxPWM	;wreg free
  7069                           
  7070                           ;train_move_right.c: 124: if (Train_Move_Pwm_Count >= GETxAPIxVAL(33))
  7071  0023C6  0E21               	movlw	33
  7072  0023C8  ECBB  F016         	call	_GETxAPIxVAL
  7073  0023CC  0100               	movlb	0	; () banked
  7074  0023CE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  7075  0023D0  5C09               	subwf	_Train_Move_Pwm_Count,w,c
  7076  0023D2  0100               	movlb	0	; () banked
  7077  0023D4  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7078  0023D6  580A               	subwfb	_Train_Move_Pwm_Count+1,w,c
  7079  0023D8  A0D8               	btfss	status,0,c
  7080  0023DA  D007               	goto	l7162
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;train_move_right.c: 125: {
  7084                           ;train_move_right.c: 126: Switch_Train_Move = 0;
  7085  0023DC  0E00               	movlw	0
  7086  0023DE  6E23               	movwf	_Switch_Train_Move,c
  7087                           
  7088                           ;train_move_right.c: 127: Switch_Moutain = 0;
  7089  0023E0  0E00               	movlw	0
  7090  0023E2  6E21               	movwf	_Switch_Moutain,c
  7091                           
  7092                           ;train_move_right.c: 128: Return_Val = 0;
  7093  0023E4  0E00               	movlw	0
  7094  0023E6  0100               	movlb	0	; () banked
  7095  0023E8  6FF1               	movwf	Left_Mountain_From_The_Left@Return_Val& (0+255),b
  7096  0023EA                     l7162:
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;train_move_right.c: 129: }
  7100                           ;train_move_right.c: 130: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  7101  0023EA  0E0A               	movlw	10
  7102  0023EC  ECBB  F016         	call	_GETxAPIxVAL
  7103  0023F0  0100               	movlb	0	; () banked
  7104  0023F2  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  7105  0023F4  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  7106  0023F6  0100               	movlb	0	; () banked
  7107  0023F8  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7108  0023FA  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  7109  0023FC  A0D8               	btfss	status,0,c
  7110  0023FE  D036               	goto	l7184
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;train_move_right.c: 131: {
  7114                           ;train_move_right.c: 132: Train_Move_Pwm_Count--;
  7115  002400  0609               	decf	_Train_Move_Pwm_Count,f,c
  7116  002402  A0D8               	btfss	status,0,c
  7117  002404  060A               	decf	_Train_Move_Pwm_Count+1,f,c
  7118  002406                     l7166:
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;train_move_right.c: 133: Train_Move_Pwm_Fast_Count = 0;
  7122  002406  0E00               	movlw	0
  7123  002408  6E0C               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  7124  00240A  0E00               	movlw	0
  7125  00240C  6E0B               	movwf	_Train_Move_Pwm_Fast_Count,c
  7126  00240E  D02E               	goto	l7184
  7127  002410                     l7170:
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;train_move_right.c: 137: else if (rc == 2){
  7131  002410  0E02               	movlw	2
  7132  002412  0100               	movlb	0	; () banked
  7133  002414  19FF               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7134  002416  A4D8               	btfss	status,2,c
  7135  002418  D033               	goto	l7190
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;train_move_right.c: 138: SETxPWM(Train_Move_Pwm_Count, 1);
  7139  00241A  C009  F1FC         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7140  00241E  C00A  F1FD         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7141  002422  0E01               	movlw	1
  7142  002424  0101               	movlb	1	; () banked
  7143  002426  6FFE               	movwf	SETxPWM@direction& (0+255),b
  7144  002428  EC88  F014         	call	_SETxPWM	;wreg free
  7145                           
  7146                           ;train_move_right.c: 139: if (Train_Move_Pwm_Count <= GETxAPIxVAL(7))
  7147  00242C  0E07               	movlw	7
  7148  00242E  ECBB  F016         	call	_GETxAPIxVAL
  7149  002432  5009               	movf	_Train_Move_Pwm_Count,w,c
  7150  002434  0100               	movlb	0	; () banked
  7151  002436  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7152  002438  500A               	movf	_Train_Move_Pwm_Count+1,w,c
  7153  00243A  0100               	movlb	0	; () banked
  7154  00243C  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7155  00243E  A0D8               	btfss	status,0,c
  7156  002440  D007               	goto	l7178
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;train_move_right.c: 140: {
  7160                           ;train_move_right.c: 141: Switch_Train_Move = 0;
  7161  002442  0E00               	movlw	0
  7162  002444  6E23               	movwf	_Switch_Train_Move,c
  7163                           
  7164                           ;train_move_right.c: 142: Switch_Moutain = 0;
  7165  002446  0E00               	movlw	0
  7166  002448  6E21               	movwf	_Switch_Moutain,c
  7167                           
  7168                           ;train_move_right.c: 143: Return_Val = 0;
  7169  00244A  0E00               	movlw	0
  7170  00244C  0100               	movlb	0	; () banked
  7171  00244E  6FF1               	movwf	Left_Mountain_From_The_Left@Return_Val& (0+255),b
  7172  002450                     l7178:
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;train_move_right.c: 144: }
  7176                           ;train_move_right.c: 145: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  7177  002450  0E0A               	movlw	10
  7178  002452  ECBB  F016         	call	_GETxAPIxVAL
  7179  002456  0100               	movlb	0	; () banked
  7180  002458  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  7181  00245A  5C0B               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  7182  00245C  0100               	movlb	0	; () banked
  7183  00245E  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7184  002460  580C               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  7185  002462  A0D8               	btfss	status,0,c
  7186  002464  D003               	goto	l7184
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;train_move_right.c: 146: {
  7190                           ;train_move_right.c: 147: Train_Move_Pwm_Count++;
  7191  002466  4A09               	infsnz	_Train_Move_Pwm_Count,f,c
  7192  002468  2A0A               	incf	_Train_Move_Pwm_Count+1,f,c
  7193  00246A  D7CD               	goto	l7166
  7194  00246C                     l7184:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;train_move_right.c: 149: }
  7198                           ;train_move_right.c: 150: Train_Move_Pwm_Fast_Count++;
  7199  00246C  4A0B               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  7200  00246E  2A0C               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;train_move_right.c: 156: }
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;train_move_right.c: 155: break;
  7207                           
  7208                           ;train_move_right.c: 154: default:
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;train_move_right.c: 151: }
  7212                           ;train_move_right.c: 152: break;
  7213                           
  7214                           ; BSR set to: 0
  7215  002470  D007               	goto	l7190
  7216  002472                     l7188:
  7217  002472  5021               	movf	_Switch_Moutain,w,c
  7218                           
  7219                           ; Switch size 1, requested type "space"
  7220                           ; Number of cases is 2, Range of values is 0 to 1
  7221                           ; switch strategies available:
  7222                           ; Name         Instructions Cycles
  7223                           ; simple_byte            7     4 (average)
  7224                           ;	Chosen strategy is simple_byte
  7225  002474  0A00               	xorlw	0	; case 0
  7226  002476  B4D8               	btfsc	status,2,c
  7227  002478  D77F               	goto	l7144
  7228  00247A  0A01               	xorlw	1	; case 1
  7229  00247C  B4D8               	btfsc	status,2,c
  7230  00247E  D796               	goto	l7154
  7231  002480                     l7190:
  7232                           
  7233                           ;train_move_right.c: 158: return(Return_Val);
  7234  002480  0100               	movlb	0	; () banked
  7235  002482  51F1               	movf	Left_Mountain_From_The_Left@Return_Val& (0+255),w,b
  7236  002484  0012               	return	
  7237  002486                     __end_of_Left_Mountain_From_The_Left:
  7238                           	opt stack 0
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           postinc0	equ	0xFEE
  7244                           wreg	equ	0xFE8
  7245                           postdec1	equ	0xFE5
  7246                           fsr1l	equ	0xFE1
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _SETxPWM *****************
  7250 ;; Defined at:
  7251 ;;		line 20 in file "../set_pwm.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  speed           2    0[BANK1 ] unsigned int 
  7254 ;;  direction       1    2[BANK1 ] unsigned char 
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  pwm_speed       2    2[BANK2 ] unsigned int 
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      void 
  7259 ;; Registers used:
  7260 ;;		wreg, status,2, status,0, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7266 ;;      Params:         0       0       3       0       0       0       0       0       0
  7267 ;;      Locals:         0       0       0       2       0       0       0       0       0
  7268 ;;      Temps:          0       0       0       2       0       0       0       0       0
  7269 ;;      Totals:         0       0       3       4       0       0       0       0       0
  7270 ;;Total ram usage:        7 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    5
  7273 ;; This function calls:
  7274 ;;		_SetDCPWM1
  7275 ;; This function is called by:
  7276 ;;		_Train_Move_Left_Start
  7277 ;;		_Right_Mountain_From_The_Right
  7278 ;;		_Left_Mountain_From_The_Right
  7279 ;;		_Train_Move_Left_Brake
  7280 ;;		_Train_Move_Right_Start
  7281 ;;		_Left_Mountain_From_The_Left
  7282 ;;		_Right_Mountain_From_The_Left
  7283 ;;		_Train_Move_Right_Brake
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text11
  7288  002910                     __ptext11:
  7289                           	opt stack 0
  7290  002910                     _SETxPWM:
  7291                           	opt stack 22
  7292                           
  7293                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;incstack = 0
  7297  002910  0E01               	movlw	1
  7298  002912  0102               	movlb	2	; () banked
  7299  002914  6F81               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7300  002916  6980               	setf	SETxPWM@pwm_speed& (0+255),b
  7301                           
  7302                           ;set_pwm.c: 24: if (direction == 0){
  7303  002918  0101               	movlb	1	; () banked
  7304  00291A  51FE               	movf	SETxPWM@direction& (0+255),w,b
  7305  00291C  0101               	movlb	1	; () banked
  7306  00291E  A4D8               	btfss	status,2,c
  7307  002920  D01E               	goto	l6884
  7308                           
  7309                           ; BSR set to: 1
  7310                           ;set_pwm.c: 25: pwm_speed = 511 - (speed * 2);
  7311  002922  C1FC  F27E         	movff	SETxPWM@speed,??_SETxPWM
  7312  002926  C1FD  F27F         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7313  00292A  90D8               	bcf	status,0,c
  7314  00292C  0102               	movlb	2	; () banked
  7315  00292E  377E               	rlcf	??_SETxPWM& (0+255),f,b
  7316  002930  377F               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  7317  002932  0102               	movlb	2	; () banked
  7318  002934  1F7E               	comf	??_SETxPWM& (0+255),f,b
  7319  002936  1F7F               	comf	(??_SETxPWM+1)& (0+255),f,b
  7320  002938  4B7E               	infsnz	??_SETxPWM& (0+255),f,b
  7321  00293A  2B7F               	incf	(??_SETxPWM+1)& (0+255),f,b
  7322  00293C  0EFF               	movlw	255
  7323  00293E  0102               	movlb	2	; () banked
  7324  002940  257E               	addwf	??_SETxPWM& (0+255),w,b
  7325  002942  0102               	movlb	2	; () banked
  7326  002944  6F80               	movwf	SETxPWM@pwm_speed& (0+255),b
  7327  002946  0E01               	movlw	1
  7328  002948  0102               	movlb	2	; () banked
  7329  00294A  217F               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  7330  00294C  0102               	movlb	2	; () banked
  7331  00294E  6F81               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7332                           
  7333                           ; BSR set to: 2
  7334                           ;set_pwm.c: 26: SetDCPWM1(pwm_speed);
  7335  002950  C280  F0F9         	movff	SETxPWM@pwm_speed,SetDCPWM1@dutycycle
  7336  002954  C281  F0FA         	movff	SETxPWM@pwm_speed+1,SetDCPWM1@dutycycle+1
  7337  002958  ECE6  F015         	call	_SetDCPWM1	;wreg free
  7338                           
  7339                           ;set_pwm.c: 27: }
  7340  00295C  0012               	return	
  7341  00295E                     l6884:
  7342                           
  7343                           ;set_pwm.c: 28: else if (direction == 1){
  7344  00295E  0101               	movlb	1	; () banked
  7345  002960  05FE               	decf	SETxPWM@direction& (0+255),w,b
  7346  002962  A4D8               	btfss	status,2,c
  7347  002964  0012               	return	
  7348                           
  7349                           ; BSR set to: 1
  7350                           ;set_pwm.c: 29: pwm_speed = 511 + (speed * 2);
  7351  002966  C1FC  F27E         	movff	SETxPWM@speed,??_SETxPWM
  7352  00296A  C1FD  F27F         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7353  00296E  90D8               	bcf	status,0,c
  7354  002970  0102               	movlb	2	; () banked
  7355  002972  377E               	rlcf	??_SETxPWM& (0+255),f,b
  7356  002974  377F               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  7357  002976  0EFF               	movlw	255
  7358  002978  0102               	movlb	2	; () banked
  7359  00297A  257E               	addwf	??_SETxPWM& (0+255),w,b
  7360  00297C  0102               	movlb	2	; () banked
  7361  00297E  6F80               	movwf	SETxPWM@pwm_speed& (0+255),b
  7362  002980  0E01               	movlw	1
  7363  002982  0102               	movlb	2	; () banked
  7364  002984  217F               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  7365  002986  0102               	movlb	2	; () banked
  7366  002988  6F81               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  7367                           
  7368                           ; BSR set to: 2
  7369                           ;set_pwm.c: 30: SetDCPWM1(pwm_speed);
  7370  00298A  C280  F0F9         	movff	SETxPWM@pwm_speed,SetDCPWM1@dutycycle
  7371  00298E  C281  F0FA         	movff	SETxPWM@pwm_speed+1,SetDCPWM1@dutycycle+1
  7372  002992  ECE6  F015         	call	_SetDCPWM1	;wreg free
  7373  002996  0012               	return	
  7374  002998                     __end_of_SETxPWM:
  7375                           	opt stack 0
  7376                           tblptru	equ	0xFF8
  7377                           tblptrh	equ	0xFF7
  7378                           tblptrl	equ	0xFF6
  7379                           tablat	equ	0xFF5
  7380                           postinc0	equ	0xFEE
  7381                           wreg	equ	0xFE8
  7382                           postdec1	equ	0xFE5
  7383                           fsr1l	equ	0xFE1
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function _SetDCPWM1 *****************
  7387 ;; Defined at:
  7388 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic18\plib\PWM\pw1setdc.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  1    wreg      void 
  7395 ;; Registers used:
  7396 ;;		wreg, status,2, status,0
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7402 ;;      Params:         0       2       0       0       0       0       0       0       0
  7403 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7404 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7405 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7406 ;;Total ram usage:        6 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    4
  7409 ;; This function calls:
  7410 ;;		Nothing
  7411 ;; This function is called by:
  7412 ;;		_SETxPWM
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text12
  7417  002BCC                     __ptext12:
  7418                           	opt stack 0
  7419  002BCC                     _SetDCPWM1:
  7420                           	opt stack 22
  7421                           
  7422                           ;incstack = 0
  7423  002BCC  C0F9  F0FB         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  7424  002BD0  C0FA  F0FC         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  7425  002BD4  0E06               	movlw	6
  7426  002BD6                     u5315:
  7427  002BD6  90D8               	bcf	status,0,c
  7428  002BD8  0100               	movlb	0	; () banked
  7429  002BDA  37FB               	rlcf	??_SetDCPWM1& (0+255),f,b
  7430  002BDC  37FC               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  7431  002BDE  2EE8               	decfsz	wreg,f,c
  7432  002BE0  D7FA               	goto	u5315
  7433  002BE2  C0FB  F0FD         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  7434  002BE6  C0FC  F0FE         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  7435                           
  7436                           ; BSR set to: 0
  7437  002BEA  C0FE  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  7438  002BEE  C0FD  F0FB         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  7439  002BF2  0100               	movlb	0	; () banked
  7440  002BF4  90D8               	bcf	status,0,c
  7441  002BF6  33FB               	rrcf	??_SetDCPWM1& (0+255),f,b
  7442  002BF8  0100               	movlb	0	; () banked
  7443  002BFA  90D8               	bcf	status,0,c
  7444  002BFC  33FB               	rrcf	??_SetDCPWM1& (0+255),f,b
  7445  002BFE  0E30               	movlw	48
  7446  002C00  0100               	movlb	0	; () banked
  7447  002C02  17FB               	andwf	??_SetDCPWM1& (0+255),f,b
  7448  002C04  50BD               	movf	4029,w,c	;volatile
  7449  002C06  0BCF               	andlw	207
  7450  002C08  0100               	movlb	0	; () banked
  7451  002C0A  11FB               	iorwf	??_SetDCPWM1& (0+255),w,b
  7452  002C0C  6EBD               	movwf	4029,c	;volatile
  7453                           
  7454                           ; BSR set to: 0
  7455  002C0E  0012               	return		;funcret
  7456  002C10                     __end_of_SetDCPWM1:
  7457                           	opt stack 0
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           postinc0	equ	0xFEE
  7463                           wreg	equ	0xFE8
  7464                           postdec1	equ	0xFE5
  7465                           fsr1l	equ	0xFE1
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _Junction *****************
  7469 ;; Defined at:
  7470 ;;		line 23 in file "../junction.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  Junction_Lef    1    wreg     unsigned char 
  7473 ;;  Straight_Ben    1    3[BANK0 ] unsigned char 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  Junction_Lef    1    4[BANK0 ] unsigned char 
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  1    wreg      unsigned char 
  7478 ;; Registers used:
  7479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7485 ;;      Params:         0       1       0       0       0       0       0       0       0
  7486 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7488 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7489 ;;Total ram usage:        2 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    5
  7492 ;; This function calls:
  7493 ;;		_GETxAPIxVAL
  7494 ;; This function is called by:
  7495 ;;		_Train_Path
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           	psect	text13
  7500  00277C                     __ptext13:
  7501                           	opt stack 0
  7502  00277C                     _Junction:
  7503                           	opt stack 23
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;incstack = 0
  7507                           ;Junction@Junction_Left_Right stored from wreg
  7508  00277C  0100               	movlb	0	; () banked
  7509  00277E  6FFD               	movwf	Junction@Junction_Left_Right& (0+255),b
  7510                           
  7511                           ;junction.c: 25: static char Return_Val = 1;
  7512                           ;junction.c: 26: static unsigned int Junction_Switch_Time = 0;
  7513                           ;junction.c: 28: switch (Switch_Junction)
  7514  002780  D056               	goto	l6924
  7515  002782                     l6896:
  7516  002782  0E01               	movlw	1
  7517  002784  0100               	movlb	0	; () banked
  7518  002786  6FF0               	movwf	Junction@Return_Val& (0+255),b
  7519                           
  7520                           ;junction.c: 31: switch (Junction_Left_Right)
  7521  002788  D01A               	goto	l6908
  7522  00278A                     l906:
  7523                           
  7524                           ; BSR set to: 0
  7525  00278A  8680               	bsf	3968,3,c	;volatile
  7526  00278C  D020               	goto	l6910
  7527  00278E                     l908:
  7528                           
  7529                           ; BSR set to: 0
  7530  00278E  8480               	bsf	3968,2,c	;volatile
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;junction.c: 38: }
  7534                           
  7535                           ; BSR set to: 0
  7536                           
  7537                           ;junction.c: 37: default : break;
  7538  002790  D01E               	goto	l6910
  7539  002792                     l6900:
  7540                           
  7541                           ; BSR set to: 0
  7542  002792  0100               	movlb	0	; () banked
  7543  002794  51FC               	movf	Junction@Straight_Bend& (0+255),w,b
  7544                           
  7545                           ; Switch size 1, requested type "space"
  7546                           ; Number of cases is 2, Range of values is 0 to 1
  7547                           ; switch strategies available:
  7548                           ; Name         Instructions Cycles
  7549                           ; simple_byte            7     4 (average)
  7550                           ;	Chosen strategy is simple_byte
  7551  002796  0A00               	xorlw	0	; case 0
  7552  002798  B4D8               	btfsc	status,2,c
  7553  00279A  D7F7               	goto	l906
  7554  00279C  0A01               	xorlw	1	; case 1
  7555  00279E  B4D8               	btfsc	status,2,c
  7556  0027A0  D7F6               	goto	l908
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;junction.c: 39: break;
  7560  0027A2  D015               	goto	l6910
  7561  0027A4                     l913:
  7562                           
  7563                           ; BSR set to: 0
  7564  0027A4  8280               	bsf	3968,1,c	;volatile
  7565  0027A6  D013               	goto	l6910
  7566  0027A8                     l915:
  7567                           
  7568                           ; BSR set to: 0
  7569  0027A8  8080               	bsf	3968,0,c	;volatile
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;junction.c: 46: }
  7573                           
  7574                           ; BSR set to: 0
  7575                           
  7576                           ;junction.c: 45: default : break;
  7577  0027AA  D011               	goto	l6910
  7578  0027AC                     l6904:
  7579                           
  7580                           ; BSR set to: 0
  7581  0027AC  0100               	movlb	0	; () banked
  7582  0027AE  51FC               	movf	Junction@Straight_Bend& (0+255),w,b
  7583                           
  7584                           ; Switch size 1, requested type "space"
  7585                           ; Number of cases is 2, Range of values is 0 to 1
  7586                           ; switch strategies available:
  7587                           ; Name         Instructions Cycles
  7588                           ; simple_byte            7     4 (average)
  7589                           ;	Chosen strategy is simple_byte
  7590  0027B0  0A00               	xorlw	0	; case 0
  7591  0027B2  B4D8               	btfsc	status,2,c
  7592  0027B4  D7F7               	goto	l913
  7593  0027B6  0A01               	xorlw	1	; case 1
  7594  0027B8  B4D8               	btfsc	status,2,c
  7595  0027BA  D7F6               	goto	l915
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;junction.c: 50: }
  7599                           
  7600                           ; BSR set to: 0
  7601                           
  7602                           ;junction.c: 49: default : break;
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;junction.c: 47: break;
  7606  0027BC  D008               	goto	l6910
  7607  0027BE                     l6908:
  7608                           
  7609                           ; BSR set to: 0
  7610  0027BE  0100               	movlb	0	; () banked
  7611  0027C0  51FD               	movf	Junction@Junction_Left_Right& (0+255),w,b
  7612                           
  7613                           ; Switch size 1, requested type "space"
  7614                           ; Number of cases is 2, Range of values is 0 to 1
  7615                           ; switch strategies available:
  7616                           ; Name         Instructions Cycles
  7617                           ; simple_byte            7     4 (average)
  7618                           ;	Chosen strategy is simple_byte
  7619  0027C2  0A00               	xorlw	0	; case 0
  7620  0027C4  B4D8               	btfsc	status,2,c
  7621  0027C6  D7E5               	goto	l6900
  7622  0027C8  0A01               	xorlw	1	; case 1
  7623  0027CA  B4D8               	btfsc	status,2,c
  7624  0027CC  D7EF               	goto	l6904
  7625  0027CE                     l6910:
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;junction.c: 51: Switch_Junction = 1;
  7629  0027CE  0E01               	movlw	1
  7630  0027D0  0100               	movlb	0	; () banked
  7631  0027D2  6FEF               	movwf	_Switch_Junction& (0+255),b
  7632                           
  7633                           ;junction.c: 52: break;
  7634  0027D4  D037               	goto	l6926
  7635  0027D6                     l6912:
  7636                           
  7637                           ; BSR set to: 0
  7638  0027D6  0E03               	movlw	3
  7639  0027D8  ECBB  F016         	call	_GETxAPIxVAL
  7640  0027DC  0100               	movlb	0	; () banked
  7641  0027DE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  7642  0027E0  0100               	movlb	0	; () banked
  7643  0027E2  5DDE               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7644  0027E4  0100               	movlb	0	; () banked
  7645  0027E6  51FA               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  7646  0027E8  0100               	movlb	0	; () banked
  7647  0027EA  59DF               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7648  0027EC  A0D8               	btfss	status,0,c
  7649  0027EE  D00A               	goto	l6916
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;junction.c: 55: {
  7653                           ;junction.c: 56: Switch_Junction = 2;
  7654  0027F0  0E02               	movlw	2
  7655  0027F2  0100               	movlb	0	; () banked
  7656  0027F4  6FEF               	movwf	_Switch_Junction& (0+255),b
  7657                           
  7658                           ;junction.c: 57: Junction_Switch_Time = 0;
  7659  0027F6  0E00               	movlw	0
  7660  0027F8  0100               	movlb	0	; () banked
  7661  0027FA  6FDF               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7662  0027FC  0E00               	movlw	0
  7663  0027FE  6FDE               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7664                           
  7665                           ;junction.c: 58: Return_Val = 1;
  7666  002800  0E01               	movlw	1
  7667  002802  D012               	goto	L79
  7668  002804                     l6916:
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;junction.c: 60: }
  7672                           ;junction.c: 61: Return_Val = 1;
  7673  002804  0E01               	movlw	1
  7674  002806  0100               	movlb	0	; () banked
  7675  002808  6FF0               	movwf	Junction@Return_Val& (0+255),b
  7676                           
  7677                           ;junction.c: 62: Switch_Junction = 1;
  7678  00280A  0E01               	movlw	1
  7679  00280C  0100               	movlb	0	; () banked
  7680  00280E  6FEF               	movwf	_Switch_Junction& (0+255),b
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;junction.c: 63: Junction_Switch_Time++;
  7684  002810  0100               	movlb	0	; () banked
  7685  002812  4BDE               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7686  002814  2BDF               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7687                           
  7688                           ;junction.c: 64: break;
  7689  002816  D016               	goto	l6926
  7690  002818                     l921:
  7691                           
  7692                           ; BSR set to: 0
  7693  002818  9680               	bcf	3968,3,c	;volatile
  7694                           
  7695                           ;junction.c: 67: PORTAbits.RA2 = 0;
  7696  00281A  9480               	bcf	3968,2,c	;volatile
  7697                           
  7698                           ;junction.c: 68: PORTAbits.RA1 = 0;
  7699  00281C  9280               	bcf	3968,1,c	;volatile
  7700                           
  7701                           ;junction.c: 69: PORTAbits.RA0 = 0;
  7702  00281E  9080               	bcf	3968,0,c	;volatile
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;junction.c: 70: Switch_Junction = 0;
  7706  002820  0E00               	movlw	0
  7707  002822  0100               	movlb	0	; () banked
  7708  002824  6FEF               	movwf	_Switch_Junction& (0+255),b
  7709                           
  7710                           ;junction.c: 71: Return_Val = 0;
  7711  002826  0E00               	movlw	0
  7712  002828                     L79:
  7713  002828  0100               	movlb	0	; () banked
  7714  00282A  6FF0               	movwf	Junction@Return_Val& (0+255),b
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;junction.c: 75: }
  7718                           
  7719                           ; BSR set to: 0
  7720                           
  7721                           ;junction.c: 74: default : break;
  7722                           
  7723                           ;junction.c: 72: break;
  7724  00282C  D00B               	goto	l6926
  7725  00282E                     l6924:
  7726  00282E  0100               	movlb	0	; () banked
  7727  002830  51EF               	movf	_Switch_Junction& (0+255),w,b
  7728                           
  7729                           ; Switch size 1, requested type "space"
  7730                           ; Number of cases is 3, Range of values is 0 to 2
  7731                           ; switch strategies available:
  7732                           ; Name         Instructions Cycles
  7733                           ; simple_byte           10     6 (average)
  7734                           ;	Chosen strategy is simple_byte
  7735  002832  0A00               	xorlw	0	; case 0
  7736  002834  B4D8               	btfsc	status,2,c
  7737  002836  D7A5               	goto	l6896
  7738  002838  0A01               	xorlw	1	; case 1
  7739  00283A  B4D8               	btfsc	status,2,c
  7740  00283C  D7CC               	goto	l6912
  7741  00283E  0A03               	xorlw	3	; case 2
  7742  002840  B4D8               	btfsc	status,2,c
  7743  002842  D7EA               	goto	l921
  7744  002844                     l6926:
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;junction.c: 77: return (Return_Val);
  7748  002844  0100               	movlb	0	; () banked
  7749  002846  51F0               	movf	Junction@Return_Val& (0+255),w,b
  7750  002848  0012               	return	
  7751  00284A                     __end_of_Junction:
  7752                           	opt stack 0
  7753                           tblptru	equ	0xFF8
  7754                           tblptrh	equ	0xFF7
  7755                           tblptrl	equ	0xFF6
  7756                           tablat	equ	0xFF5
  7757                           postinc0	equ	0xFEE
  7758                           wreg	equ	0xFE8
  7759                           postdec1	equ	0xFE5
  7760                           fsr1l	equ	0xFE1
  7761                           status	equ	0xFD8
  7762                           
  7763 ;; *************** function _Red_Led *****************
  7764 ;; Defined at:
  7765 ;;		line 97 in file "../io.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  Operation       1    wreg     unsigned char 
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;  Operation       1    0[BANK0 ] unsigned char 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  1    wreg      void 
  7772 ;; Registers used:
  7773 ;;		wreg, status,2, status,0
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7779 ;;      Params:         0       0       0       0       0       0       0       0       0
  7780 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7781 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7782 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7783 ;;Total ram usage:        1 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; Hardware stack levels required when called:    4
  7786 ;; This function calls:
  7787 ;;		Nothing
  7788 ;; This function is called by:
  7789 ;;		_Update_StateMchn
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           	psect	text14
  7794  002998                     __ptext14:
  7795                           	opt stack 0
  7796  002998                     _Red_Led:
  7797                           	opt stack 25
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;incstack = 0
  7801                           ;Red_Led@Operation stored from wreg
  7802  002998  0100               	movlb	0	; () banked
  7803  00299A  6FF9               	movwf	Red_Led@Operation& (0+255),b
  7804                           
  7805                           ;io.c: 99: switch(Operation)
  7806  00299C  D030               	goto	l7670
  7807  00299E                     l766:
  7808                           
  7809                           ; BSR set to: 0
  7810  00299E  9A83               	bcf	3971,5,c	;volatile
  7811  0029A0  0012               	return	
  7812  0029A2                     l768:
  7813                           
  7814                           ; BSR set to: 0
  7815  0029A2  8A83               	bsf	3971,5,c	;volatile
  7816  0029A4  0012               	return	
  7817  0029A6                     l7648:
  7818                           
  7819                           ; BSR set to: 0
  7820  0029A6  4A07               	infsnz	_Red_Led_Counter,f,c
  7821  0029A8  2A08               	incf	_Red_Led_Counter+1,f,c
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  7825  0029AA  0EB8               	movlw	184
  7826  0029AC  5C07               	subwf	_Red_Led_Counter,w,c
  7827  0029AE  0E0B               	movlw	11
  7828  0029B0  5808               	subwfb	_Red_Led_Counter+1,w,c
  7829  0029B2  A0D8               	btfss	status,0,c
  7830  0029B4  D004               	goto	l7654
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;io.c: 107: {
  7834                           ;io.c: 108: Red_Led_Counter = 0;
  7835  0029B6  0E00               	movlw	0
  7836  0029B8  6E08               	movwf	_Red_Led_Counter+1,c
  7837  0029BA  0E00               	movlw	0
  7838  0029BC  6E07               	movwf	_Red_Led_Counter,c
  7839  0029BE                     l7654:
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;io.c: 109: }
  7843                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  7844  0029BE  0EDC               	movlw	220
  7845  0029C0  5C07               	subwf	_Red_Led_Counter,w,c
  7846  0029C2  0E05               	movlw	5
  7847  0029C4  5808               	subwfb	_Red_Led_Counter+1,w,c
  7848  0029C6  A0D8               	btfss	status,0,c
  7849  0029C8  D002               	goto	l771
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;io.c: 111: {
  7853                           ;io.c: 112: PORTDbits.RD5 = 1;
  7854  0029CA  8A83               	bsf	3971,5,c	;volatile
  7855                           
  7856                           ;io.c: 113: }
  7857  0029CC  0012               	return	
  7858  0029CE                     l771:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  7862  0029CE  9A83               	bcf	3971,5,c	;volatile
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;io.c: 115: break;
  7866  0029D0  0012               	return	
  7867  0029D2                     l7658:
  7868                           
  7869                           ; BSR set to: 0
  7870  0029D2  4A07               	infsnz	_Red_Led_Counter,f,c
  7871  0029D4  2A08               	incf	_Red_Led_Counter+1,f,c
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  7875  0029D6  0EE8               	movlw	232
  7876  0029D8  5C07               	subwf	_Red_Led_Counter,w,c
  7877  0029DA  0E03               	movlw	3
  7878  0029DC  5808               	subwfb	_Red_Led_Counter+1,w,c
  7879  0029DE  A0D8               	btfss	status,0,c
  7880  0029E0  D004               	goto	l7664
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;io.c: 119: {
  7884                           ;io.c: 120: Red_Led_Counter = 0;
  7885  0029E2  0E00               	movlw	0
  7886  0029E4  6E08               	movwf	_Red_Led_Counter+1,c
  7887  0029E6  0E00               	movlw	0
  7888  0029E8  6E07               	movwf	_Red_Led_Counter,c
  7889  0029EA                     l7664:
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;io.c: 121: }
  7893                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7894  0029EA  0EF4               	movlw	244
  7895  0029EC  5C07               	subwf	_Red_Led_Counter,w,c
  7896  0029EE  0E01               	movlw	1
  7897  0029F0  5808               	subwfb	_Red_Led_Counter+1,w,c
  7898  0029F2  A0D8               	btfss	status,0,c
  7899  0029F4  D002               	goto	l775
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;io.c: 123: {
  7903                           ;io.c: 124: PORTDbits.RD5 = 1;
  7904  0029F6  8A83               	bsf	3971,5,c	;volatile
  7905                           
  7906                           ;io.c: 125: }
  7907  0029F8  0012               	return	
  7908  0029FA                     l775:
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7912  0029FA  9A83               	bcf	3971,5,c	;volatile
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;io.c: 130: }
  7916                           
  7917                           ; BSR set to: 0
  7918                           
  7919                           ;io.c: 129: default : break;
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;io.c: 127: break;
  7923  0029FC  0012               	return	
  7924  0029FE                     l7670:
  7925  0029FE  0100               	movlb	0	; () banked
  7926  002A00  51F9               	movf	Red_Led@Operation& (0+255),w,b
  7927                           
  7928                           ; Switch size 1, requested type "space"
  7929                           ; Number of cases is 4, Range of values is 0 to 3
  7930                           ; switch strategies available:
  7931                           ; Name         Instructions Cycles
  7932                           ; simple_byte           13     7 (average)
  7933                           ;	Chosen strategy is simple_byte
  7934  002A02  0A00               	xorlw	0	; case 0
  7935  002A04  B4D8               	btfsc	status,2,c
  7936  002A06  D7CB               	goto	l766
  7937  002A08  0A01               	xorlw	1	; case 1
  7938  002A0A  B4D8               	btfsc	status,2,c
  7939  002A0C  D7CA               	goto	l768
  7940  002A0E  0A03               	xorlw	3	; case 2
  7941  002A10  B4D8               	btfsc	status,2,c
  7942  002A12  D7C9               	goto	l7648
  7943  002A14  0A01               	xorlw	1	; case 3
  7944  002A16  A4D8               	btfss	status,2,c
  7945  002A18  0012               	return	
  7946  002A1A  D7DB               	goto	l7658
  7947  002A1C                     __end_of_Red_Led:
  7948                           	opt stack 0
  7949                           tblptru	equ	0xFF8
  7950                           tblptrh	equ	0xFF7
  7951                           tblptrl	equ	0xFF6
  7952                           tablat	equ	0xFF5
  7953                           postinc0	equ	0xFEE
  7954                           wreg	equ	0xFE8
  7955                           postdec1	equ	0xFE5
  7956                           fsr1l	equ	0xFE1
  7957                           status	equ	0xFD8
  7958                           
  7959 ;; *************** function _INCRxAPIxVAL *****************
  7960 ;; Defined at:
  7961 ;;		line 144 in file "../api.c"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;  index           1    wreg     unsigned char 
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;  index           1    2[BANK1 ] unsigned char 
  7966 ;;  value           2    0[BANK1 ] unsigned int 
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  1    wreg      void 
  7969 ;; Registers used:
  7970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7971 ;; Tracked objects:
  7972 ;;		On entry : 0/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7976 ;;      Params:         0       0       0       0       0       0       0       0       0
  7977 ;;      Locals:         0       0       3       0       0       0       0       0       0
  7978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7979 ;;      Totals:         0       0       3       0       0       0       0       0       0
  7980 ;;Total ram usage:        3 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    5
  7983 ;; This function calls:
  7984 ;;		_GETxAPIxVAL
  7985 ;;		_SETxAPIxVAL
  7986 ;; This function is called by:
  7987 ;;		_Update_StateMchn
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	text15
  7992  002D1E                     __ptext15:
  7993                           	opt stack 0
  7994  002D1E                     _INCRxAPIxVAL:
  7995                           	opt stack 24
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;incstack = 0
  7999                           ;INCRxAPIxVAL@index stored from wreg
  8000  002D1E  0101               	movlb	1	; () banked
  8001  002D20  6FFE               	movwf	INCRxAPIxVAL@index& (0+255),b
  8002                           
  8003                           ;api.c: 145: unsigned int value;
  8004                           ;api.c: 146: value = GETxAPIxVAL(index);
  8005  002D22  0101               	movlb	1	; () banked
  8006  002D24  51FE               	movf	INCRxAPIxVAL@index& (0+255),w,b
  8007  002D26  ECBB  F016         	call	_GETxAPIxVAL
  8008  002D2A  C0F9  F1FC         	movff	?_GETxAPIxVAL,INCRxAPIxVAL@value
  8009  002D2E  C0FA  F1FD         	movff	?_GETxAPIxVAL+1,INCRxAPIxVAL@value+1
  8010                           
  8011                           ;api.c: 147: value++;
  8012  002D32  0101               	movlb	1	; () banked
  8013  002D34  4BFC               	infsnz	INCRxAPIxVAL@value& (0+255),f,b
  8014  002D36  2BFD               	incf	(INCRxAPIxVAL@value+1)& (0+255),f,b
  8015                           
  8016                           ; BSR set to: 1
  8017                           ;api.c: 148: SETxAPIxVAL(index, value);
  8018  002D38  C1FC  F0F9         	movff	INCRxAPIxVAL@value,SETxAPIxVAL@value
  8019  002D3C  C1FD  F0FA         	movff	INCRxAPIxVAL@value+1,SETxAPIxVAL@value+1
  8020  002D40  0101               	movlb	1	; () banked
  8021  002D42  51FE               	movf	INCRxAPIxVAL@index& (0+255),w,b
  8022  002D44  EC08  F016         	call	_SETxAPIxVAL
  8023  002D48  0012               	return		;funcret
  8024  002D4A                     __end_of_INCRxAPIxVAL:
  8025                           	opt stack 0
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           postdec1	equ	0xFE5
  8033                           fsr1l	equ	0xFE1
  8034                           status	equ	0xFD8
  8035                           
  8036 ;; *************** function _Green_Led *****************
  8037 ;; Defined at:
  8038 ;;		line 47 in file "../io.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;  Operation       1    wreg     unsigned char 
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;  Operation       1    0[BANK0 ] unsigned char 
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      void 
  8045 ;; Registers used:
  8046 ;;		wreg, status,2, status,0
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8052 ;;      Params:         0       0       0       0       0       0       0       0       0
  8053 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8054 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8055 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8056 ;;Total ram usage:        1 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    4
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		_Update_StateMchn
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           	psect	text16
  8067  002A1C                     __ptext16:
  8068                           	opt stack 0
  8069  002A1C                     _Green_Led:
  8070                           	opt stack 25
  8071                           
  8072                           ;incstack = 0
  8073                           ;Green_Led@Operation stored from wreg
  8074  002A1C  0100               	movlb	0	; () banked
  8075  002A1E  6FF9               	movwf	Green_Led@Operation& (0+255),b
  8076                           
  8077                           ;io.c: 49: switch(Operation)
  8078  002A20  D030               	goto	l7644
  8079  002A22                     l750:
  8080                           
  8081                           ; BSR set to: 0
  8082  002A22  9C83               	bcf	3971,6,c	;volatile
  8083  002A24  0012               	return	
  8084  002A26                     l752:
  8085                           
  8086                           ; BSR set to: 0
  8087  002A26  8C83               	bsf	3971,6,c	;volatile
  8088  002A28  0012               	return	
  8089  002A2A                     l7622:
  8090                           
  8091                           ; BSR set to: 0
  8092  002A2A  4A03               	infsnz	_Green_Led_Counter,f,c
  8093  002A2C  2A04               	incf	_Green_Led_Counter+1,f,c
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  8097  002A2E  0EB8               	movlw	184
  8098  002A30  5C03               	subwf	_Green_Led_Counter,w,c
  8099  002A32  0E0B               	movlw	11
  8100  002A34  5804               	subwfb	_Green_Led_Counter+1,w,c
  8101  002A36  A0D8               	btfss	status,0,c
  8102  002A38  D004               	goto	l7628
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;io.c: 57: {
  8106                           ;io.c: 58: Green_Led_Counter = 0;
  8107  002A3A  0E00               	movlw	0
  8108  002A3C  6E04               	movwf	_Green_Led_Counter+1,c
  8109  002A3E  0E00               	movlw	0
  8110  002A40  6E03               	movwf	_Green_Led_Counter,c
  8111  002A42                     l7628:
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;io.c: 59: }
  8115                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  8116  002A42  0EDC               	movlw	220
  8117  002A44  5C03               	subwf	_Green_Led_Counter,w,c
  8118  002A46  0E05               	movlw	5
  8119  002A48  5804               	subwfb	_Green_Led_Counter+1,w,c
  8120  002A4A  A0D8               	btfss	status,0,c
  8121  002A4C  D002               	goto	l755
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;io.c: 61: {
  8125                           ;io.c: 62: PORTDbits.RD6 = 1;
  8126  002A4E  8C83               	bsf	3971,6,c	;volatile
  8127                           
  8128                           ;io.c: 63: }
  8129  002A50  0012               	return	
  8130  002A52                     l755:
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  8134  002A52  9C83               	bcf	3971,6,c	;volatile
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;io.c: 65: break;
  8138  002A54  0012               	return	
  8139  002A56                     l7632:
  8140                           
  8141                           ; BSR set to: 0
  8142  002A56  4A03               	infsnz	_Green_Led_Counter,f,c
  8143  002A58  2A04               	incf	_Green_Led_Counter+1,f,c
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  8147  002A5A  0EE8               	movlw	232
  8148  002A5C  5C03               	subwf	_Green_Led_Counter,w,c
  8149  002A5E  0E03               	movlw	3
  8150  002A60  5804               	subwfb	_Green_Led_Counter+1,w,c
  8151  002A62  A0D8               	btfss	status,0,c
  8152  002A64  D004               	goto	l7638
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;io.c: 69: {
  8156                           ;io.c: 70: Green_Led_Counter = 0;
  8157  002A66  0E00               	movlw	0
  8158  002A68  6E04               	movwf	_Green_Led_Counter+1,c
  8159  002A6A  0E00               	movlw	0
  8160  002A6C  6E03               	movwf	_Green_Led_Counter,c
  8161  002A6E                     l7638:
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;io.c: 71: }
  8165                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  8166  002A6E  0EF4               	movlw	244
  8167  002A70  5C03               	subwf	_Green_Led_Counter,w,c
  8168  002A72  0E01               	movlw	1
  8169  002A74  5804               	subwfb	_Green_Led_Counter+1,w,c
  8170  002A76  A0D8               	btfss	status,0,c
  8171  002A78  D002               	goto	l759
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;io.c: 73: {
  8175                           ;io.c: 74: PORTDbits.RD6 = 1;
  8176  002A7A  8C83               	bsf	3971,6,c	;volatile
  8177                           
  8178                           ;io.c: 75: }
  8179  002A7C  0012               	return	
  8180  002A7E                     l759:
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  8184  002A7E  9C83               	bcf	3971,6,c	;volatile
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;io.c: 80: }
  8188                           
  8189                           ; BSR set to: 0
  8190                           
  8191                           ;io.c: 79: default : break;
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;io.c: 77: break;
  8195  002A80  0012               	return	
  8196  002A82                     l7644:
  8197  002A82  0100               	movlb	0	; () banked
  8198  002A84  51F9               	movf	Green_Led@Operation& (0+255),w,b
  8199                           
  8200                           ; Switch size 1, requested type "space"
  8201                           ; Number of cases is 4, Range of values is 0 to 3
  8202                           ; switch strategies available:
  8203                           ; Name         Instructions Cycles
  8204                           ; simple_byte           13     7 (average)
  8205                           ;	Chosen strategy is simple_byte
  8206  002A86  0A00               	xorlw	0	; case 0
  8207  002A88  B4D8               	btfsc	status,2,c
  8208  002A8A  D7CB               	goto	l750
  8209  002A8C  0A01               	xorlw	1	; case 1
  8210  002A8E  B4D8               	btfsc	status,2,c
  8211  002A90  D7CA               	goto	l752
  8212  002A92  0A03               	xorlw	3	; case 2
  8213  002A94  B4D8               	btfsc	status,2,c
  8214  002A96  D7C9               	goto	l7622
  8215  002A98  0A01               	xorlw	1	; case 3
  8216  002A9A  A4D8               	btfss	status,2,c
  8217  002A9C  0012               	return	
  8218  002A9E  D7DB               	goto	l7632
  8219  002AA0                     __end_of_Green_Led:
  8220                           	opt stack 0
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           postinc0	equ	0xFEE
  8226                           wreg	equ	0xFE8
  8227                           postdec1	equ	0xFE5
  8228                           fsr1l	equ	0xFE1
  8229                           status	equ	0xFD8
  8230                           
  8231 ;; *************** function _Eeprom_Store *****************
  8232 ;; Defined at:
  8233 ;;		line 21 in file "../eeprom_settings.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;		None
  8236 ;; Auto vars:     Size  Location     Type
  8237 ;;		None
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  1    wreg      void 
  8240 ;; Registers used:
  8241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8247 ;;      Params:         0       0       0       0       0       0       0       0       0
  8248 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8250 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8251 ;;Total ram usage:        0 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    5
  8254 ;; This function calls:
  8255 ;;		_GETxAPIxVAL
  8256 ;; This function is called by:
  8257 ;;		_Update_StateMchn
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           	psect	text17
  8262  0026AA                     __ptext17:
  8263                           	opt stack 0
  8264  0026AA                     _Eeprom_Store:
  8265                           	opt stack 24
  8266                           
  8267                           ;eeprom_settings.c: 23: INTCON = 0x00;
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;incstack = 0
  8271  0026AA  0E00               	movlw	0
  8272  0026AC  6EF2               	movwf	intcon,c	;volatile
  8273                           
  8274                           ;eeprom_settings.c: 25: EECON1bits.EEPGD = 0;
  8275  0026AE  9EA6               	bcf	4006,7,c	;volatile
  8276                           
  8277                           ;eeprom_settings.c: 26: EECON1bits.WREN = 1;
  8278  0026B0  84A6               	bsf	4006,2,c	;volatile
  8279                           
  8280                           ;eeprom_settings.c: 27: EEADR = 0x01;
  8281  0026B2  0E01               	movlw	1
  8282  0026B4  6EA9               	movwf	4009,c	;volatile
  8283                           
  8284                           ;eeprom_settings.c: 28: EEDATA = GETxAPIxVAL(7);
  8285  0026B6  0E07               	movlw	7
  8286  0026B8  ECBB  F016         	call	_GETxAPIxVAL
  8287  0026BC  0100               	movlb	0	; () banked
  8288  0026BE  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  8289  0026C0  6EA8               	movwf	4008,c	;volatile
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;eeprom_settings.c: 29: EECON2 = 0x55;
  8293  0026C2  0E55               	movlw	85
  8294  0026C4  6EA7               	movwf	4007,c	;volatile
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;eeprom_settings.c: 30: EECON2 = 0xaa;
  8298  0026C6  0EAA               	movlw	170
  8299  0026C8  6EA7               	movwf	4007,c	;volatile
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;eeprom_settings.c: 31: EECON1bits.WR = 1;
  8303  0026CA  82A6               	bsf	4006,1,c	;volatile
  8304  0026CC                     l683:
  8305  0026CC  A8A1               	btfss	4001,4,c	;volatile
  8306  0026CE  D7FE               	goto	l683
  8307                           
  8308                           ;eeprom_settings.c: 33: PIR2bits.EEIF = 0;
  8309  0026D0  98A1               	bcf	4001,4,c	;volatile
  8310                           
  8311                           ;eeprom_settings.c: 35: EECON1bits.EEPGD = 0;
  8312  0026D2  9EA6               	bcf	4006,7,c	;volatile
  8313                           
  8314                           ;eeprom_settings.c: 36: EECON1bits.WREN = 1;
  8315  0026D4  84A6               	bsf	4006,2,c	;volatile
  8316                           
  8317                           ;eeprom_settings.c: 37: EEADR = 0x00;
  8318  0026D6  0E00               	movlw	0
  8319  0026D8  6EA9               	movwf	4009,c	;volatile
  8320                           
  8321                           ;eeprom_settings.c: 38: EEDATA = GETxAPIxVAL(7)>>8;
  8322  0026DA  0E07               	movlw	7
  8323  0026DC  ECBB  F016         	call	_GETxAPIxVAL
  8324  0026E0  0100               	movlb	0	; () banked
  8325  0026E2  C0FA  F0F9         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  8326  0026E6  0100               	movlb	0	; () banked
  8327  0026E8  6BFA               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  8328  0026EA  0100               	movlb	0	; () banked
  8329  0026EC  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  8330  0026EE  6EA8               	movwf	4008,c	;volatile
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;eeprom_settings.c: 39: EECON2 = 0x55;
  8334  0026F0  0E55               	movlw	85
  8335  0026F2  6EA7               	movwf	4007,c	;volatile
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;eeprom_settings.c: 40: EECON2 = 0xaa;
  8339  0026F4  0EAA               	movlw	170
  8340  0026F6  6EA7               	movwf	4007,c	;volatile
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;eeprom_settings.c: 41: EECON1bits.WR = 1;
  8344  0026F8  82A6               	bsf	4006,1,c	;volatile
  8345  0026FA                     l686:
  8346  0026FA  A8A1               	btfss	4001,4,c	;volatile
  8347  0026FC  D7FE               	goto	l686
  8348                           
  8349                           ;eeprom_settings.c: 43: PIR2bits.EEIF = 0;
  8350  0026FE  98A1               	bcf	4001,4,c	;volatile
  8351                           
  8352                           ;eeprom_settings.c: 45: EECON1bits.EEPGD = 0;
  8353  002700  9EA6               	bcf	4006,7,c	;volatile
  8354                           
  8355                           ;eeprom_settings.c: 46: EECON1bits.WREN = 1;
  8356  002702  84A6               	bsf	4006,2,c	;volatile
  8357                           
  8358                           ;eeprom_settings.c: 47: EEADR = 0x03;
  8359  002704  0E03               	movlw	3
  8360  002706  6EA9               	movwf	4009,c	;volatile
  8361                           
  8362                           ;eeprom_settings.c: 48: EEDATA = GETxAPIxVAL(8);
  8363  002708  0E08               	movlw	8
  8364  00270A  ECBB  F016         	call	_GETxAPIxVAL
  8365  00270E  0100               	movlb	0	; () banked
  8366  002710  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  8367  002712  6EA8               	movwf	4008,c	;volatile
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;eeprom_settings.c: 49: EECON2 = 0x55;
  8371  002714  0E55               	movlw	85
  8372  002716  6EA7               	movwf	4007,c	;volatile
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;eeprom_settings.c: 50: EECON2 = 0xaa;
  8376  002718  0EAA               	movlw	170
  8377  00271A  6EA7               	movwf	4007,c	;volatile
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;eeprom_settings.c: 51: EECON1bits.WR = 1;
  8381  00271C  82A6               	bsf	4006,1,c	;volatile
  8382  00271E                     l689:
  8383  00271E  A8A1               	btfss	4001,4,c	;volatile
  8384  002720  D7FE               	goto	l689
  8385                           
  8386                           ;eeprom_settings.c: 53: PIR2bits.EEIF = 0;
  8387  002722  98A1               	bcf	4001,4,c	;volatile
  8388                           
  8389                           ;eeprom_settings.c: 55: EECON1bits.EEPGD = 0;
  8390  002724  9EA6               	bcf	4006,7,c	;volatile
  8391                           
  8392                           ;eeprom_settings.c: 56: EECON1bits.WREN = 1;
  8393  002726  84A6               	bsf	4006,2,c	;volatile
  8394                           
  8395                           ;eeprom_settings.c: 57: EEADR = 0x02;
  8396  002728  0E02               	movlw	2
  8397  00272A  6EA9               	movwf	4009,c	;volatile
  8398                           
  8399                           ;eeprom_settings.c: 58: EEDATA = GETxAPIxVAL(8)>>8;
  8400  00272C  0E08               	movlw	8
  8401  00272E  ECBB  F016         	call	_GETxAPIxVAL
  8402  002732  0100               	movlb	0	; () banked
  8403  002734  C0FA  F0F9         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  8404  002738  0100               	movlb	0	; () banked
  8405  00273A  6BFA               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  8406  00273C  0100               	movlb	0	; () banked
  8407  00273E  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  8408  002740  6EA8               	movwf	4008,c	;volatile
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;eeprom_settings.c: 59: EECON2 = 0x55;
  8412  002742  0E55               	movlw	85
  8413  002744  6EA7               	movwf	4007,c	;volatile
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;eeprom_settings.c: 60: EECON2 = 0xaa;
  8417  002746  0EAA               	movlw	170
  8418  002748  6EA7               	movwf	4007,c	;volatile
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;eeprom_settings.c: 61: EECON1bits.WR = 1;
  8422  00274A  82A6               	bsf	4006,1,c	;volatile
  8423  00274C                     l692:
  8424  00274C  A8A1               	btfss	4001,4,c	;volatile
  8425  00274E  D7FE               	goto	l692
  8426                           
  8427                           ;eeprom_settings.c: 63: PIR2bits.EEIF = 0;
  8428  002750  98A1               	bcf	4001,4,c	;volatile
  8429                           
  8430                           ;eeprom_settings.c: 65: EECON1bits.EEPGD = 0;
  8431  002752  9EA6               	bcf	4006,7,c	;volatile
  8432                           
  8433                           ;eeprom_settings.c: 66: EECON1bits.WREN = 1;
  8434  002754  84A6               	bsf	4006,2,c	;volatile
  8435                           
  8436                           ;eeprom_settings.c: 67: EEADR = 0x04;
  8437  002756  0E04               	movlw	4
  8438  002758  6EA9               	movwf	4009,c	;volatile
  8439                           
  8440                           ;eeprom_settings.c: 68: EEDATA = GETxAPIxVAL(9);
  8441  00275A  0E09               	movlw	9
  8442  00275C  ECBB  F016         	call	_GETxAPIxVAL
  8443  002760  0100               	movlb	0	; () banked
  8444  002762  51F9               	movf	?_GETxAPIxVAL& (0+255),w,b
  8445  002764  6EA8               	movwf	4008,c	;volatile
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;eeprom_settings.c: 69: EECON2 = 0x55;
  8449  002766  0E55               	movlw	85
  8450  002768  6EA7               	movwf	4007,c	;volatile
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;eeprom_settings.c: 70: EECON2 = 0xaa;
  8454  00276A  0EAA               	movlw	170
  8455  00276C  6EA7               	movwf	4007,c	;volatile
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;eeprom_settings.c: 71: EECON1bits.WR = 1;
  8459  00276E  82A6               	bsf	4006,1,c	;volatile
  8460  002770                     l695:
  8461  002770  A8A1               	btfss	4001,4,c	;volatile
  8462  002772  D7FE               	goto	l695
  8463                           
  8464                           ;eeprom_settings.c: 73: PIR2bits.EEIF = 0;
  8465  002774  98A1               	bcf	4001,4,c	;volatile
  8466                           
  8467                           ;eeprom_settings.c: 76: INTCON = 0xA0;
  8468  002776  0EA0               	movlw	160
  8469  002778  6EF2               	movwf	intcon,c	;volatile
  8470  00277A  0012               	return		;funcret
  8471  00277C                     __end_of_Eeprom_Store:
  8472                           	opt stack 0
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           intcon	equ	0xFF2
  8478                           postinc0	equ	0xFEE
  8479                           wreg	equ	0xFE8
  8480                           postdec1	equ	0xFE5
  8481                           fsr1l	equ	0xFE1
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _Debounce_Inputs *****************
  8485 ;; Defined at:
  8486 ;;		line 148 in file "../io.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;		None
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;		None
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  1    wreg      void 
  8493 ;; Registers used:
  8494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8500 ;;      Params:         0       0       0       0       0       0       0       0       0
  8501 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8502 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8503 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8504 ;;Total ram usage:        2 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    5
  8507 ;; This function calls:
  8508 ;;		_GETxAPIxVAL
  8509 ;;		_SETxAPIxVAL
  8510 ;; This function is called by:
  8511 ;;		_Update_StateMchn
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           	psect	text18
  8516  00108E                     __ptext18:
  8517                           	opt stack 0
  8518  00108E                     _Debounce_Inputs:
  8519                           	opt stack 24
  8520                           
  8521                           ;io.c: 150: switch(PORTDbits.RD1)
  8522                           
  8523                           ;incstack = 0
  8524  00108E  D027               	goto	l7366
  8525  001090                     l7352:
  8526  001090  0E00               	movlw	0
  8527  001092  6E12               	movwf	_Reed_Contact_LF_Counter,c
  8528                           
  8529                           ;io.c: 153: SETxAPIxVAL(15, 0);
  8530  001094  0E00               	movlw	0
  8531  001096  0100               	movlb	0	; () banked
  8532  001098  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8533  00109A  0E00               	movlw	0
  8534  00109C  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8535  00109E  0E0F               	movlw	15
  8536  0010A0  EC08  F016         	call	_SETxAPIxVAL
  8537                           
  8538                           ;io.c: 154: break;
  8539  0010A4  D04F               	goto	l7382
  8540  0010A6                     l7356:
  8541  0010A6  5012               	movf	_Reed_Contact_LF_Counter,w,c
  8542  0010A8  0100               	movlb	0	; () banked
  8543  0010AA  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  8544  0010AC  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8545  0010AE  0E0B               	movlw	11
  8546  0010B0  ECBB  F016         	call	_GETxAPIxVAL
  8547  0010B4  0100               	movlb	0	; () banked
  8548  0010B6  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  8549  0010B8  0100               	movlb	0	; () banked
  8550  0010BA  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8551  0010BC  0100               	movlb	0	; () banked
  8552  0010BE  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8553  0010C0  0100               	movlb	0	; () banked
  8554  0010C2  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8555  0010C4  A0D8               	btfss	status,0,c
  8556  0010C6  D002               	goto	l7362
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;io.c: 157: {
  8560                           ;io.c: 158: Reed_Contact_LF_Counter++;
  8561  0010C8  2A12               	incf	_Reed_Contact_LF_Counter,f,c
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;io.c: 160: }
  8565                           
  8566                           ;io.c: 159: break;
  8567  0010CA  D03C               	goto	l7382
  8568  0010CC                     l7362:
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;io.c: 161: else {SETxAPIxVAL(15, 1);}
  8572  0010CC  0E00               	movlw	0
  8573  0010CE  0100               	movlb	0	; () banked
  8574  0010D0  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8575  0010D2  0E01               	movlw	1
  8576  0010D4  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8577  0010D6  0E0F               	movlw	15
  8578  0010D8  EC08  F016         	call	_SETxAPIxVAL
  8579                           
  8580                           ;io.c: 165: }
  8581                           
  8582                           ;io.c: 164: default : break;
  8583                           
  8584                           ;io.c: 162: break;
  8585  0010DC  D033               	goto	l7382
  8586  0010DE                     l7366:
  8587  0010DE  A283               	btfss	3971,1,c	;volatile
  8588  0010E0  D002               	goto	u5850
  8589  0010E2  0E01               	movlw	1
  8590  0010E4  D001               	goto	u5856
  8591  0010E6                     u5850:
  8592  0010E6  0E00               	movlw	0
  8593  0010E8                     u5856:
  8594                           
  8595                           ; Switch size 1, requested type "space"
  8596                           ; Number of cases is 2, Range of values is 0 to 1
  8597                           ; switch strategies available:
  8598                           ; Name         Instructions Cycles
  8599                           ; simple_byte            7     4 (average)
  8600                           ;	Chosen strategy is simple_byte
  8601  0010E8  0A00               	xorlw	0	; case 0
  8602  0010EA  B4D8               	btfsc	status,2,c
  8603  0010EC  D7DC               	goto	l7356
  8604  0010EE  0A01               	xorlw	1	; case 1
  8605  0010F0  B4D8               	btfsc	status,2,c
  8606  0010F2  D7CE               	goto	l7352
  8607                           
  8608                           ;io.c: 168: switch(PORTDbits.RD0)
  8609  0010F4  D027               	goto	l7382
  8610  0010F6                     l7368:
  8611  0010F6  0E00               	movlw	0
  8612  0010F8  6E11               	movwf	_Reed_Contact_LB_Counter,c
  8613                           
  8614                           ;io.c: 171: SETxAPIxVAL(14, 0);
  8615  0010FA  0E00               	movlw	0
  8616  0010FC  0100               	movlb	0	; () banked
  8617  0010FE  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8618  001100  0E00               	movlw	0
  8619  001102  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8620  001104  0E0E               	movlw	14
  8621  001106  EC08  F016         	call	_SETxAPIxVAL
  8622                           
  8623                           ;io.c: 172: break;
  8624  00110A  D04F               	goto	l7398
  8625  00110C                     l7372:
  8626  00110C  5011               	movf	_Reed_Contact_LB_Counter,w,c
  8627  00110E  0100               	movlb	0	; () banked
  8628  001110  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  8629  001112  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8630  001114  0E0B               	movlw	11
  8631  001116  ECBB  F016         	call	_GETxAPIxVAL
  8632  00111A  0100               	movlb	0	; () banked
  8633  00111C  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  8634  00111E  0100               	movlb	0	; () banked
  8635  001120  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8636  001122  0100               	movlb	0	; () banked
  8637  001124  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8638  001126  0100               	movlb	0	; () banked
  8639  001128  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8640  00112A  A0D8               	btfss	status,0,c
  8641  00112C  D002               	goto	l7378
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;io.c: 175: {
  8645                           ;io.c: 176: Reed_Contact_LB_Counter++;
  8646  00112E  2A11               	incf	_Reed_Contact_LB_Counter,f,c
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;io.c: 178: }
  8650                           
  8651                           ;io.c: 177: break;
  8652  001130  D03C               	goto	l7398
  8653  001132                     l7378:
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;io.c: 179: else {SETxAPIxVAL(14, 1);}
  8657  001132  0E00               	movlw	0
  8658  001134  0100               	movlb	0	; () banked
  8659  001136  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8660  001138  0E01               	movlw	1
  8661  00113A  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8662  00113C  0E0E               	movlw	14
  8663  00113E  EC08  F016         	call	_SETxAPIxVAL
  8664                           
  8665                           ;io.c: 183: }
  8666                           
  8667                           ;io.c: 182: default : break;
  8668                           
  8669                           ;io.c: 180: break;
  8670  001142  D033               	goto	l7398
  8671  001144                     l7382:
  8672  001144  A083               	btfss	3971,0,c	;volatile
  8673  001146  D002               	goto	u5870
  8674  001148  0E01               	movlw	1
  8675  00114A  D001               	goto	u5876
  8676  00114C                     u5870:
  8677  00114C  0E00               	movlw	0
  8678  00114E                     u5876:
  8679                           
  8680                           ; Switch size 1, requested type "space"
  8681                           ; Number of cases is 2, Range of values is 0 to 1
  8682                           ; switch strategies available:
  8683                           ; Name         Instructions Cycles
  8684                           ; simple_byte            7     4 (average)
  8685                           ;	Chosen strategy is simple_byte
  8686  00114E  0A00               	xorlw	0	; case 0
  8687  001150  B4D8               	btfsc	status,2,c
  8688  001152  D7DC               	goto	l7372
  8689  001154  0A01               	xorlw	1	; case 1
  8690  001156  B4D8               	btfsc	status,2,c
  8691  001158  D7CE               	goto	l7368
  8692                           
  8693                           ;io.c: 186: switch(PORTDbits.RD3)
  8694  00115A  D027               	goto	l7398
  8695  00115C                     l7384:
  8696  00115C  0E00               	movlw	0
  8697  00115E  6E16               	movwf	_Reed_Contact_RF_Counter,c
  8698                           
  8699                           ;io.c: 189: SETxAPIxVAL(13, 0);
  8700  001160  0E00               	movlw	0
  8701  001162  0100               	movlb	0	; () banked
  8702  001164  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8703  001166  0E00               	movlw	0
  8704  001168  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8705  00116A  0E0D               	movlw	13
  8706  00116C  EC08  F016         	call	_SETxAPIxVAL
  8707                           
  8708                           ;io.c: 190: break;
  8709  001170  D04F               	goto	l7414
  8710  001172                     l7388:
  8711  001172  5016               	movf	_Reed_Contact_RF_Counter,w,c
  8712  001174  0100               	movlb	0	; () banked
  8713  001176  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  8714  001178  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8715  00117A  0E0B               	movlw	11
  8716  00117C  ECBB  F016         	call	_GETxAPIxVAL
  8717  001180  0100               	movlb	0	; () banked
  8718  001182  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  8719  001184  0100               	movlb	0	; () banked
  8720  001186  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8721  001188  0100               	movlb	0	; () banked
  8722  00118A  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8723  00118C  0100               	movlb	0	; () banked
  8724  00118E  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8725  001190  A0D8               	btfss	status,0,c
  8726  001192  D002               	goto	l7394
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;io.c: 193: {
  8730                           ;io.c: 194: Reed_Contact_RF_Counter++;
  8731  001194  2A16               	incf	_Reed_Contact_RF_Counter,f,c
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;io.c: 196: }
  8735                           
  8736                           ;io.c: 195: break;
  8737  001196  D03C               	goto	l7414
  8738  001198                     l7394:
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;io.c: 197: else {SETxAPIxVAL(13, 1);}
  8742  001198  0E00               	movlw	0
  8743  00119A  0100               	movlb	0	; () banked
  8744  00119C  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8745  00119E  0E01               	movlw	1
  8746  0011A0  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8747  0011A2  0E0D               	movlw	13
  8748  0011A4  EC08  F016         	call	_SETxAPIxVAL
  8749                           
  8750                           ;io.c: 201: }
  8751                           
  8752                           ;io.c: 200: default : break;
  8753                           
  8754                           ;io.c: 198: break;
  8755  0011A8  D033               	goto	l7414
  8756  0011AA                     l7398:
  8757  0011AA  A683               	btfss	3971,3,c	;volatile
  8758  0011AC  D002               	goto	u5890
  8759  0011AE  0E01               	movlw	1
  8760  0011B0  D001               	goto	u5896
  8761  0011B2                     u5890:
  8762  0011B2  0E00               	movlw	0
  8763  0011B4                     u5896:
  8764                           
  8765                           ; Switch size 1, requested type "space"
  8766                           ; Number of cases is 2, Range of values is 0 to 1
  8767                           ; switch strategies available:
  8768                           ; Name         Instructions Cycles
  8769                           ; simple_byte            7     4 (average)
  8770                           ;	Chosen strategy is simple_byte
  8771  0011B4  0A00               	xorlw	0	; case 0
  8772  0011B6  B4D8               	btfsc	status,2,c
  8773  0011B8  D7DC               	goto	l7388
  8774  0011BA  0A01               	xorlw	1	; case 1
  8775  0011BC  B4D8               	btfsc	status,2,c
  8776  0011BE  D7CE               	goto	l7384
  8777                           
  8778                           ;io.c: 204: switch(PORTDbits.RD2)
  8779  0011C0  D027               	goto	l7414
  8780  0011C2                     l7400:
  8781  0011C2  0E00               	movlw	0
  8782  0011C4  6E15               	movwf	_Reed_Contact_RB_Counter,c
  8783                           
  8784                           ;io.c: 207: SETxAPIxVAL(12, 0);
  8785  0011C6  0E00               	movlw	0
  8786  0011C8  0100               	movlb	0	; () banked
  8787  0011CA  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8788  0011CC  0E00               	movlw	0
  8789  0011CE  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8790  0011D0  0E0C               	movlw	12
  8791  0011D2  EC08  F016         	call	_SETxAPIxVAL
  8792                           
  8793                           ;io.c: 208: break;
  8794  0011D6  D04F               	goto	l7430
  8795  0011D8                     l7404:
  8796  0011D8  5015               	movf	_Reed_Contact_RB_Counter,w,c
  8797  0011DA  0100               	movlb	0	; () banked
  8798  0011DC  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  8799  0011DE  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8800  0011E0  0E0B               	movlw	11
  8801  0011E2  ECBB  F016         	call	_GETxAPIxVAL
  8802  0011E6  0100               	movlb	0	; () banked
  8803  0011E8  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  8804  0011EA  0100               	movlb	0	; () banked
  8805  0011EC  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8806  0011EE  0100               	movlb	0	; () banked
  8807  0011F0  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8808  0011F2  0100               	movlb	0	; () banked
  8809  0011F4  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8810  0011F6  A0D8               	btfss	status,0,c
  8811  0011F8  D002               	goto	l7410
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;io.c: 211: {
  8815                           ;io.c: 212: Reed_Contact_RB_Counter++;
  8816  0011FA  2A15               	incf	_Reed_Contact_RB_Counter,f,c
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;io.c: 214: }
  8820                           
  8821                           ;io.c: 213: break;
  8822  0011FC  D03C               	goto	l7430
  8823  0011FE                     l7410:
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;io.c: 215: else {SETxAPIxVAL(12, 1);}
  8827  0011FE  0E00               	movlw	0
  8828  001200  0100               	movlb	0	; () banked
  8829  001202  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8830  001204  0E01               	movlw	1
  8831  001206  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8832  001208  0E0C               	movlw	12
  8833  00120A  EC08  F016         	call	_SETxAPIxVAL
  8834                           
  8835                           ;io.c: 219: }
  8836                           
  8837                           ;io.c: 218: default : break;
  8838                           
  8839                           ;io.c: 216: break;
  8840  00120E  D033               	goto	l7430
  8841  001210                     l7414:
  8842  001210  A483               	btfss	3971,2,c	;volatile
  8843  001212  D002               	goto	u5910
  8844  001214  0E01               	movlw	1
  8845  001216  D001               	goto	u5916
  8846  001218                     u5910:
  8847  001218  0E00               	movlw	0
  8848  00121A                     u5916:
  8849                           
  8850                           ; Switch size 1, requested type "space"
  8851                           ; Number of cases is 2, Range of values is 0 to 1
  8852                           ; switch strategies available:
  8853                           ; Name         Instructions Cycles
  8854                           ; simple_byte            7     4 (average)
  8855                           ;	Chosen strategy is simple_byte
  8856  00121A  0A00               	xorlw	0	; case 0
  8857  00121C  B4D8               	btfsc	status,2,c
  8858  00121E  D7DC               	goto	l7404
  8859  001220  0A01               	xorlw	1	; case 1
  8860  001222  B4D8               	btfsc	status,2,c
  8861  001224  D7CE               	goto	l7400
  8862                           
  8863                           ;io.c: 222: switch(!PORTBbits.RB0)
  8864  001226  D027               	goto	l7430
  8865  001228                     l7416:
  8866  001228  500F               	movf	_Button_Contact_Counter_Start,w,c
  8867  00122A  0100               	movlb	0	; () banked
  8868  00122C  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  8869  00122E  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8870  001230  0E0B               	movlw	11
  8871  001232  ECBB  F016         	call	_GETxAPIxVAL
  8872  001236  0100               	movlb	0	; () banked
  8873  001238  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  8874  00123A  0100               	movlb	0	; () banked
  8875  00123C  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8876  00123E  0100               	movlb	0	; () banked
  8877  001240  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8878  001242  0100               	movlb	0	; () banked
  8879  001244  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8880  001246  A0D8               	btfss	status,0,c
  8881  001248  D002               	goto	l7422
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;io.c: 225: {
  8885                           ;io.c: 226: Button_Contact_Counter_Start++;
  8886  00124A  2A0F               	incf	_Button_Contact_Counter_Start,f,c
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;io.c: 228: }
  8890                           
  8891                           ;io.c: 227: break;
  8892  00124C  D051               	goto	l7446
  8893  00124E                     l7422:
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;io.c: 229: else {SETxAPIxVAL(16, 1); }
  8897  00124E  0E00               	movlw	0
  8898  001250  0100               	movlb	0	; () banked
  8899  001252  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8900  001254  0E01               	movlw	1
  8901  001256  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8902  001258  0E10               	movlw	16
  8903  00125A  EC08  F016         	call	_SETxAPIxVAL
  8904                           
  8905                           ;io.c: 230: break;
  8906  00125E  D048               	goto	l7446
  8907  001260                     l7424:
  8908  001260  0E00               	movlw	0
  8909  001262  6E0F               	movwf	_Button_Contact_Counter_Start,c
  8910                           
  8911                           ;io.c: 233: SETxAPIxVAL(16, 0);
  8912  001264  0E00               	movlw	0
  8913  001266  0100               	movlb	0	; () banked
  8914  001268  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8915  00126A  0E00               	movlw	0
  8916  00126C  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  8917  00126E  0E10               	movlw	16
  8918  001270  EC08  F016         	call	_SETxAPIxVAL
  8919                           
  8920                           ;io.c: 237: }
  8921                           
  8922                           ;io.c: 236: default : break;
  8923                           
  8924                           ;io.c: 234: break;
  8925  001274  D03D               	goto	l7446
  8926  001276                     l7430:
  8927  001276  B081               	btfsc	3969,0,c	;volatile
  8928  001278  D002               	goto	u5930
  8929  00127A  0E01               	movlw	1
  8930  00127C  D001               	goto	u5940
  8931  00127E                     u5930:
  8932  00127E  0E00               	movlw	0
  8933  001280                     u5940:
  8934  001280  0100               	movlb	0	; () banked
  8935  001282  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  8936  001284  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8937                           
  8938                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8939                           ; Switch size 1, requested type "space"
  8940                           ; Number of cases is 1, Range of values is 0 to 0
  8941                           ; switch strategies available:
  8942                           ; Name         Instructions Cycles
  8943                           ; simple_byte            4     3 (average)
  8944                           ;	Chosen strategy is simple_byte
  8945  001286  0100               	movlb	0	; () banked
  8946  001288  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8947  00128A  0A00               	xorlw	0	; case 0
  8948  00128C  A4D8               	btfss	status,2,c
  8949  00128E  D030               	goto	l7446
  8950                           
  8951                           ; BSR set to: 0
  8952                           ; Switch size 1, requested type "space"
  8953                           ; Number of cases is 2, Range of values is 0 to 1
  8954                           ; switch strategies available:
  8955                           ; Name         Instructions Cycles
  8956                           ; simple_byte            7     4 (average)
  8957                           ;	Chosen strategy is simple_byte
  8958  001290  0100               	movlb	0	; () banked
  8959  001292  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  8960  001294  0A00               	xorlw	0	; case 0
  8961  001296  B4D8               	btfsc	status,2,c
  8962  001298  D7E3               	goto	l7424
  8963  00129A  0A01               	xorlw	1	; case 1
  8964  00129C  B4D8               	btfsc	status,2,c
  8965  00129E  D7C4               	goto	l7416
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;io.c: 240: switch(!PORTDbits.RD7)
  8969  0012A0  D027               	goto	l7446
  8970  0012A2                     l7432:
  8971                           
  8972                           ; BSR set to: 0
  8973  0012A2  5010               	movf	_Button_Contact_Counter_Stop,w,c
  8974  0012A4  0100               	movlb	0	; () banked
  8975  0012A6  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  8976  0012A8  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8977  0012AA  0E0B               	movlw	11
  8978  0012AC  ECBB  F016         	call	_GETxAPIxVAL
  8979  0012B0  0100               	movlb	0	; () banked
  8980  0012B2  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  8981  0012B4  0100               	movlb	0	; () banked
  8982  0012B6  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8983  0012B8  0100               	movlb	0	; () banked
  8984  0012BA  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8985  0012BC  0100               	movlb	0	; () banked
  8986  0012BE  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8987  0012C0  A0D8               	btfss	status,0,c
  8988  0012C2  D002               	goto	l7438
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;io.c: 243: {
  8992                           ;io.c: 244: Button_Contact_Counter_Stop++;
  8993  0012C4  2A10               	incf	_Button_Contact_Counter_Stop,f,c
  8994                           
  8995                           ; BSR set to: 0
  8996                           ;io.c: 246: }
  8997                           
  8998                           ;io.c: 245: break;
  8999  0012C6  D051               	goto	l7462
  9000  0012C8                     l7438:
  9001                           
  9002                           ; BSR set to: 0
  9003                           ;io.c: 247: else {SETxAPIxVAL(17, 1); }
  9004  0012C8  0E00               	movlw	0
  9005  0012CA  0100               	movlb	0	; () banked
  9006  0012CC  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9007  0012CE  0E01               	movlw	1
  9008  0012D0  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9009  0012D2  0E11               	movlw	17
  9010  0012D4  EC08  F016         	call	_SETxAPIxVAL
  9011                           
  9012                           ;io.c: 248: break;
  9013  0012D8  D048               	goto	l7462
  9014  0012DA                     l7440:
  9015  0012DA  0E00               	movlw	0
  9016  0012DC  6E10               	movwf	_Button_Contact_Counter_Stop,c
  9017                           
  9018                           ;io.c: 251: SETxAPIxVAL(17, 0);
  9019  0012DE  0E00               	movlw	0
  9020  0012E0  0100               	movlb	0	; () banked
  9021  0012E2  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9022  0012E4  0E00               	movlw	0
  9023  0012E6  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9024  0012E8  0E11               	movlw	17
  9025  0012EA  EC08  F016         	call	_SETxAPIxVAL
  9026                           
  9027                           ;io.c: 255: }
  9028                           
  9029                           ;io.c: 254: default : break;
  9030                           
  9031                           ;io.c: 252: break;
  9032  0012EE  D03D               	goto	l7462
  9033  0012F0                     l7446:
  9034  0012F0  BE83               	btfsc	3971,7,c	;volatile
  9035  0012F2  D002               	goto	u5960
  9036  0012F4  0E01               	movlw	1
  9037  0012F6  D001               	goto	u5970
  9038  0012F8                     u5960:
  9039  0012F8  0E00               	movlw	0
  9040  0012FA                     u5970:
  9041  0012FA  0100               	movlb	0	; () banked
  9042  0012FC  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9043  0012FE  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9044                           
  9045                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9046                           ; Switch size 1, requested type "space"
  9047                           ; Number of cases is 1, Range of values is 0 to 0
  9048                           ; switch strategies available:
  9049                           ; Name         Instructions Cycles
  9050                           ; simple_byte            4     3 (average)
  9051                           ;	Chosen strategy is simple_byte
  9052  001300  0100               	movlb	0	; () banked
  9053  001302  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9054  001304  0A00               	xorlw	0	; case 0
  9055  001306  A4D8               	btfss	status,2,c
  9056  001308  D030               	goto	l7462
  9057                           
  9058                           ; BSR set to: 0
  9059                           ; Switch size 1, requested type "space"
  9060                           ; Number of cases is 2, Range of values is 0 to 1
  9061                           ; switch strategies available:
  9062                           ; Name         Instructions Cycles
  9063                           ; simple_byte            7     4 (average)
  9064                           ;	Chosen strategy is simple_byte
  9065  00130A  0100               	movlb	0	; () banked
  9066  00130C  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9067  00130E  0A00               	xorlw	0	; case 0
  9068  001310  B4D8               	btfsc	status,2,c
  9069  001312  D7E3               	goto	l7440
  9070  001314  0A01               	xorlw	1	; case 1
  9071  001316  B4D8               	btfsc	status,2,c
  9072  001318  D7C4               	goto	l7432
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;io.c: 258: switch(!PORTBbits.RB1)
  9076  00131A  D027               	goto	l7462
  9077  00131C                     l7448:
  9078                           
  9079                           ; BSR set to: 0
  9080  00131C  500E               	movf	_Button_Contact_Counter_Middle,w,c
  9081  00131E  0100               	movlb	0	; () banked
  9082  001320  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9083  001322  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9084  001324  0E0B               	movlw	11
  9085  001326  ECBB  F016         	call	_GETxAPIxVAL
  9086  00132A  0100               	movlb	0	; () banked
  9087  00132C  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9088  00132E  0100               	movlb	0	; () banked
  9089  001330  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9090  001332  0100               	movlb	0	; () banked
  9091  001334  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9092  001336  0100               	movlb	0	; () banked
  9093  001338  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9094  00133A  A0D8               	btfss	status,0,c
  9095  00133C  D002               	goto	l7454
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;io.c: 261: {
  9099                           ;io.c: 262: Button_Contact_Counter_Middle++;
  9100  00133E  2A0E               	incf	_Button_Contact_Counter_Middle,f,c
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;io.c: 264: }
  9104                           
  9105                           ;io.c: 263: break;
  9106  001340  D051               	goto	l7478
  9107  001342                     l7454:
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;io.c: 265: else {SETxAPIxVAL(18, 1); }
  9111  001342  0E00               	movlw	0
  9112  001344  0100               	movlb	0	; () banked
  9113  001346  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9114  001348  0E01               	movlw	1
  9115  00134A  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9116  00134C  0E12               	movlw	18
  9117  00134E  EC08  F016         	call	_SETxAPIxVAL
  9118                           
  9119                           ;io.c: 266: break;
  9120  001352  D048               	goto	l7478
  9121  001354                     l7456:
  9122  001354  0E00               	movlw	0
  9123  001356  6E0E               	movwf	_Button_Contact_Counter_Middle,c
  9124                           
  9125                           ;io.c: 269: SETxAPIxVAL(18, 0);
  9126  001358  0E00               	movlw	0
  9127  00135A  0100               	movlb	0	; () banked
  9128  00135C  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9129  00135E  0E00               	movlw	0
  9130  001360  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9131  001362  0E12               	movlw	18
  9132  001364  EC08  F016         	call	_SETxAPIxVAL
  9133                           
  9134                           ;io.c: 273: }
  9135                           
  9136                           ;io.c: 272: default : break;
  9137                           
  9138                           ;io.c: 270: break;
  9139  001368  D03D               	goto	l7478
  9140  00136A                     l7462:
  9141  00136A  B281               	btfsc	3969,1,c	;volatile
  9142  00136C  D002               	goto	u5990
  9143  00136E  0E01               	movlw	1
  9144  001370  D001               	goto	u6000
  9145  001372                     u5990:
  9146  001372  0E00               	movlw	0
  9147  001374                     u6000:
  9148  001374  0100               	movlb	0	; () banked
  9149  001376  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9150  001378  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9151                           
  9152                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9153                           ; Switch size 1, requested type "space"
  9154                           ; Number of cases is 1, Range of values is 0 to 0
  9155                           ; switch strategies available:
  9156                           ; Name         Instructions Cycles
  9157                           ; simple_byte            4     3 (average)
  9158                           ;	Chosen strategy is simple_byte
  9159  00137A  0100               	movlb	0	; () banked
  9160  00137C  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9161  00137E  0A00               	xorlw	0	; case 0
  9162  001380  A4D8               	btfss	status,2,c
  9163  001382  D030               	goto	l7478
  9164                           
  9165                           ; BSR set to: 0
  9166                           ; Switch size 1, requested type "space"
  9167                           ; Number of cases is 2, Range of values is 0 to 1
  9168                           ; switch strategies available:
  9169                           ; Name         Instructions Cycles
  9170                           ; simple_byte            7     4 (average)
  9171                           ;	Chosen strategy is simple_byte
  9172  001384  0100               	movlb	0	; () banked
  9173  001386  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9174  001388  0A00               	xorlw	0	; case 0
  9175  00138A  B4D8               	btfsc	status,2,c
  9176  00138C  D7E3               	goto	l7456
  9177  00138E  0A01               	xorlw	1	; case 1
  9178  001390  B4D8               	btfsc	status,2,c
  9179  001392  D7C4               	goto	l7448
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;io.c: 276: switch(!PORTBbits.RB5)
  9183  001394  D027               	goto	l7478
  9184  001396                     l7464:
  9185                           
  9186                           ; BSR set to: 0
  9187  001396  500D               	movf	_Button_Contact_Counter_LB,w,c
  9188  001398  0100               	movlb	0	; () banked
  9189  00139A  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9190  00139C  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9191  00139E  0E0B               	movlw	11
  9192  0013A0  ECBB  F016         	call	_GETxAPIxVAL
  9193  0013A4  0100               	movlb	0	; () banked
  9194  0013A6  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9195  0013A8  0100               	movlb	0	; () banked
  9196  0013AA  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9197  0013AC  0100               	movlb	0	; () banked
  9198  0013AE  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9199  0013B0  0100               	movlb	0	; () banked
  9200  0013B2  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9201  0013B4  A0D8               	btfss	status,0,c
  9202  0013B6  D002               	goto	l7470
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;io.c: 279: {
  9206                           ;io.c: 280: Button_Contact_Counter_LB++;
  9207  0013B8  2A0D               	incf	_Button_Contact_Counter_LB,f,c
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;io.c: 282: }
  9211                           
  9212                           ;io.c: 281: break;
  9213  0013BA  D054               	goto	l7494
  9214  0013BC                     l7470:
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;io.c: 283: else {SETxAPIxVAL(19, 1); }
  9218  0013BC  0E00               	movlw	0
  9219  0013BE  0100               	movlb	0	; () banked
  9220  0013C0  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9221  0013C2  0E01               	movlw	1
  9222  0013C4  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9223  0013C6  0E13               	movlw	19
  9224  0013C8  EC08  F016         	call	_SETxAPIxVAL
  9225                           
  9226                           ;io.c: 284: break;
  9227  0013CC  D04B               	goto	l7494
  9228  0013CE                     l7472:
  9229  0013CE  0E00               	movlw	0
  9230  0013D0  6E0D               	movwf	_Button_Contact_Counter_LB,c
  9231                           
  9232                           ;io.c: 287: SETxAPIxVAL(19, 0);
  9233  0013D2  0E00               	movlw	0
  9234  0013D4  0100               	movlb	0	; () banked
  9235  0013D6  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9236  0013D8  0E00               	movlw	0
  9237  0013DA  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9238  0013DC  0E13               	movlw	19
  9239  0013DE  EC08  F016         	call	_SETxAPIxVAL
  9240                           
  9241                           ;io.c: 291: }
  9242                           
  9243                           ;io.c: 290: default : break;
  9244                           
  9245                           ;io.c: 288: break;
  9246  0013E2  D040               	goto	l7494
  9247  0013E4                     l7478:
  9248  0013E4  BA81               	btfsc	3969,5,c	;volatile
  9249  0013E6  D002               	goto	u6020
  9250  0013E8  0E01               	movlw	1
  9251  0013EA  D001               	goto	u6030
  9252  0013EC                     u6020:
  9253  0013EC  0E00               	movlw	0
  9254  0013EE                     u6030:
  9255  0013EE  0100               	movlb	0	; () banked
  9256  0013F0  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9257  0013F2  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9258                           
  9259                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9260                           ; Switch size 1, requested type "space"
  9261                           ; Number of cases is 1, Range of values is 0 to 0
  9262                           ; switch strategies available:
  9263                           ; Name         Instructions Cycles
  9264                           ; simple_byte            4     3 (average)
  9265                           ;	Chosen strategy is simple_byte
  9266  0013F4  0100               	movlb	0	; () banked
  9267  0013F6  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9268  0013F8  0A00               	xorlw	0	; case 0
  9269  0013FA  A4D8               	btfss	status,2,c
  9270  0013FC  D033               	goto	l7494
  9271                           
  9272                           ; BSR set to: 0
  9273                           ; Switch size 1, requested type "space"
  9274                           ; Number of cases is 2, Range of values is 0 to 1
  9275                           ; switch strategies available:
  9276                           ; Name         Instructions Cycles
  9277                           ; simple_byte            7     4 (average)
  9278                           ;	Chosen strategy is simple_byte
  9279  0013FE  0100               	movlb	0	; () banked
  9280  001400  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9281  001402  0A00               	xorlw	0	; case 0
  9282  001404  B4D8               	btfsc	status,2,c
  9283  001406  D7E3               	goto	l7472
  9284  001408  0A01               	xorlw	1	; case 1
  9285  00140A  B4D8               	btfsc	status,2,c
  9286  00140C  D7C4               	goto	l7464
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;io.c: 294: switch(!PORTBbits.RB4)
  9290  00140E  D02A               	goto	l7494
  9291  001410                     l7480:
  9292                           
  9293                           ; BSR set to: 0
  9294  001410  0100               	movlb	0	; () banked
  9295  001412  51EC               	movf	_Button_Contact_Counter_LF& (0+255),w,b
  9296  001414  0100               	movlb	0	; () banked
  9297  001416  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9298  001418  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9299  00141A  0E0B               	movlw	11
  9300  00141C  ECBB  F016         	call	_GETxAPIxVAL
  9301  001420  0100               	movlb	0	; () banked
  9302  001422  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9303  001424  0100               	movlb	0	; () banked
  9304  001426  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9305  001428  0100               	movlb	0	; () banked
  9306  00142A  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9307  00142C  0100               	movlb	0	; () banked
  9308  00142E  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9309  001430  A0D8               	btfss	status,0,c
  9310  001432  D003               	goto	l7486
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;io.c: 297: {
  9314                           ;io.c: 298: Button_Contact_Counter_LF++;
  9315  001434  0100               	movlb	0	; () banked
  9316  001436  2BEC               	incf	_Button_Contact_Counter_LF& (0+255),f,b
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;io.c: 300: }
  9320                           
  9321                           ;io.c: 299: break;
  9322  001438  D055               	goto	l7510
  9323  00143A                     l7486:
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;io.c: 301: else {SETxAPIxVAL(20, 1); }
  9327  00143A  0E00               	movlw	0
  9328  00143C  0100               	movlb	0	; () banked
  9329  00143E  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9330  001440  0E01               	movlw	1
  9331  001442  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9332  001444  0E14               	movlw	20
  9333  001446  EC08  F016         	call	_SETxAPIxVAL
  9334                           
  9335                           ;io.c: 302: break;
  9336  00144A  D04C               	goto	l7510
  9337  00144C                     l7488:
  9338  00144C  0E00               	movlw	0
  9339  00144E  0100               	movlb	0	; () banked
  9340  001450  6FEC               	movwf	_Button_Contact_Counter_LF& (0+255),b
  9341                           
  9342                           ; BSR set to: 0
  9343                           ;io.c: 305: SETxAPIxVAL(20, 0);
  9344  001452  0E00               	movlw	0
  9345  001454  0100               	movlb	0	; () banked
  9346  001456  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9347  001458  0E00               	movlw	0
  9348  00145A  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9349  00145C  0E14               	movlw	20
  9350  00145E  EC08  F016         	call	_SETxAPIxVAL
  9351                           
  9352                           ;io.c: 309: }
  9353                           
  9354                           ;io.c: 308: default : break;
  9355                           
  9356                           ;io.c: 306: break;
  9357  001462  D040               	goto	l7510
  9358  001464                     l7494:
  9359  001464  B881               	btfsc	3969,4,c	;volatile
  9360  001466  D002               	goto	u6050
  9361  001468  0E01               	movlw	1
  9362  00146A  D001               	goto	u6060
  9363  00146C                     u6050:
  9364  00146C  0E00               	movlw	0
  9365  00146E                     u6060:
  9366  00146E  0100               	movlb	0	; () banked
  9367  001470  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9368  001472  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9369                           
  9370                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9371                           ; Switch size 1, requested type "space"
  9372                           ; Number of cases is 1, Range of values is 0 to 0
  9373                           ; switch strategies available:
  9374                           ; Name         Instructions Cycles
  9375                           ; simple_byte            4     3 (average)
  9376                           ;	Chosen strategy is simple_byte
  9377  001474  0100               	movlb	0	; () banked
  9378  001476  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9379  001478  0A00               	xorlw	0	; case 0
  9380  00147A  A4D8               	btfss	status,2,c
  9381  00147C  D033               	goto	l7510
  9382                           
  9383                           ; BSR set to: 0
  9384                           ; Switch size 1, requested type "space"
  9385                           ; Number of cases is 2, Range of values is 0 to 1
  9386                           ; switch strategies available:
  9387                           ; Name         Instructions Cycles
  9388                           ; simple_byte            7     4 (average)
  9389                           ;	Chosen strategy is simple_byte
  9390  00147E  0100               	movlb	0	; () banked
  9391  001480  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9392  001482  0A00               	xorlw	0	; case 0
  9393  001484  B4D8               	btfsc	status,2,c
  9394  001486  D7E2               	goto	l7488
  9395  001488  0A01               	xorlw	1	; case 1
  9396  00148A  B4D8               	btfsc	status,2,c
  9397  00148C  D7C1               	goto	l7480
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;io.c: 312: switch(!PORTBbits.RB3)
  9401  00148E  D02A               	goto	l7510
  9402  001490                     l7496:
  9403                           
  9404                           ; BSR set to: 0
  9405  001490  0100               	movlb	0	; () banked
  9406  001492  51ED               	movf	_Button_Contact_Counter_RB& (0+255),w,b
  9407  001494  0100               	movlb	0	; () banked
  9408  001496  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9409  001498  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9410  00149A  0E0B               	movlw	11
  9411  00149C  ECBB  F016         	call	_GETxAPIxVAL
  9412  0014A0  0100               	movlb	0	; () banked
  9413  0014A2  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9414  0014A4  0100               	movlb	0	; () banked
  9415  0014A6  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9416  0014A8  0100               	movlb	0	; () banked
  9417  0014AA  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9418  0014AC  0100               	movlb	0	; () banked
  9419  0014AE  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9420  0014B0  A0D8               	btfss	status,0,c
  9421  0014B2  D003               	goto	l7502
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;io.c: 315: {
  9425                           ;io.c: 316: Button_Contact_Counter_RB++;
  9426  0014B4  0100               	movlb	0	; () banked
  9427  0014B6  2BED               	incf	_Button_Contact_Counter_RB& (0+255),f,b
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;io.c: 318: }
  9431                           
  9432                           ;io.c: 317: break;
  9433  0014B8  D055               	goto	l7526
  9434  0014BA                     l7502:
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;io.c: 319: else {SETxAPIxVAL(21, 1); }
  9438  0014BA  0E00               	movlw	0
  9439  0014BC  0100               	movlb	0	; () banked
  9440  0014BE  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9441  0014C0  0E01               	movlw	1
  9442  0014C2  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9443  0014C4  0E15               	movlw	21
  9444  0014C6  EC08  F016         	call	_SETxAPIxVAL
  9445                           
  9446                           ;io.c: 320: break;
  9447  0014CA  D04C               	goto	l7526
  9448  0014CC                     l7504:
  9449  0014CC  0E00               	movlw	0
  9450  0014CE  0100               	movlb	0	; () banked
  9451  0014D0  6FED               	movwf	_Button_Contact_Counter_RB& (0+255),b
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;io.c: 323: SETxAPIxVAL(21, 0);
  9455  0014D2  0E00               	movlw	0
  9456  0014D4  0100               	movlb	0	; () banked
  9457  0014D6  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9458  0014D8  0E00               	movlw	0
  9459  0014DA  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9460  0014DC  0E15               	movlw	21
  9461  0014DE  EC08  F016         	call	_SETxAPIxVAL
  9462                           
  9463                           ;io.c: 327: }
  9464                           
  9465                           ;io.c: 326: default : break;
  9466                           
  9467                           ;io.c: 324: break;
  9468  0014E2  D040               	goto	l7526
  9469  0014E4                     l7510:
  9470  0014E4  B681               	btfsc	3969,3,c	;volatile
  9471  0014E6  D002               	goto	u6080
  9472  0014E8  0E01               	movlw	1
  9473  0014EA  D001               	goto	u6090
  9474  0014EC                     u6080:
  9475  0014EC  0E00               	movlw	0
  9476  0014EE                     u6090:
  9477  0014EE  0100               	movlb	0	; () banked
  9478  0014F0  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9479  0014F2  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9480                           
  9481                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9482                           ; Switch size 1, requested type "space"
  9483                           ; Number of cases is 1, Range of values is 0 to 0
  9484                           ; switch strategies available:
  9485                           ; Name         Instructions Cycles
  9486                           ; simple_byte            4     3 (average)
  9487                           ;	Chosen strategy is simple_byte
  9488  0014F4  0100               	movlb	0	; () banked
  9489  0014F6  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9490  0014F8  0A00               	xorlw	0	; case 0
  9491  0014FA  A4D8               	btfss	status,2,c
  9492  0014FC  D033               	goto	l7526
  9493                           
  9494                           ; BSR set to: 0
  9495                           ; Switch size 1, requested type "space"
  9496                           ; Number of cases is 2, Range of values is 0 to 1
  9497                           ; switch strategies available:
  9498                           ; Name         Instructions Cycles
  9499                           ; simple_byte            7     4 (average)
  9500                           ;	Chosen strategy is simple_byte
  9501  0014FE  0100               	movlb	0	; () banked
  9502  001500  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9503  001502  0A00               	xorlw	0	; case 0
  9504  001504  B4D8               	btfsc	status,2,c
  9505  001506  D7E2               	goto	l7504
  9506  001508  0A01               	xorlw	1	; case 1
  9507  00150A  B4D8               	btfsc	status,2,c
  9508  00150C  D7C1               	goto	l7496
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;io.c: 330: switch(!PORTBbits.RB2)
  9512  00150E  D02A               	goto	l7526
  9513  001510                     l7512:
  9514                           
  9515                           ; BSR set to: 0
  9516  001510  0100               	movlb	0	; () banked
  9517  001512  51EE               	movf	_Button_Contact_Counter_RF& (0+255),w,b
  9518  001514  0100               	movlb	0	; () banked
  9519  001516  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9520  001518  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9521  00151A  0E0B               	movlw	11
  9522  00151C  ECBB  F016         	call	_GETxAPIxVAL
  9523  001520  0100               	movlb	0	; () banked
  9524  001522  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9525  001524  0100               	movlb	0	; () banked
  9526  001526  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9527  001528  0100               	movlb	0	; () banked
  9528  00152A  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9529  00152C  0100               	movlb	0	; () banked
  9530  00152E  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9531  001530  A0D8               	btfss	status,0,c
  9532  001532  D003               	goto	l7518
  9533                           
  9534                           ; BSR set to: 0
  9535                           ;io.c: 333: {
  9536                           ;io.c: 334: Button_Contact_Counter_RF++;
  9537  001534  0100               	movlb	0	; () banked
  9538  001536  2BEE               	incf	_Button_Contact_Counter_RF& (0+255),f,b
  9539                           
  9540                           ; BSR set to: 0
  9541                           ;io.c: 336: }
  9542                           
  9543                           ;io.c: 335: break;
  9544  001538  D052               	goto	l7542
  9545  00153A                     l7518:
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;io.c: 337: else {SETxAPIxVAL(22, 1); }
  9549  00153A  0E00               	movlw	0
  9550  00153C  0100               	movlb	0	; () banked
  9551  00153E  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9552  001540  0E01               	movlw	1
  9553  001542  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9554  001544  0E16               	movlw	22
  9555  001546  EC08  F016         	call	_SETxAPIxVAL
  9556                           
  9557                           ;io.c: 338: break;
  9558  00154A  D049               	goto	l7542
  9559  00154C                     l7520:
  9560  00154C  0E00               	movlw	0
  9561  00154E  0100               	movlb	0	; () banked
  9562  001550  6FEE               	movwf	_Button_Contact_Counter_RF& (0+255),b
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;io.c: 341: SETxAPIxVAL(22, 0);
  9566  001552  0E00               	movlw	0
  9567  001554  0100               	movlb	0	; () banked
  9568  001556  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9569  001558  0E00               	movlw	0
  9570  00155A  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9571  00155C  0E16               	movlw	22
  9572  00155E  EC08  F016         	call	_SETxAPIxVAL
  9573                           
  9574                           ;io.c: 345: }
  9575                           
  9576                           ;io.c: 344: default : break;
  9577                           
  9578                           ;io.c: 342: break;
  9579  001562  D03D               	goto	l7542
  9580  001564                     l7526:
  9581  001564  B481               	btfsc	3969,2,c	;volatile
  9582  001566  D002               	goto	u6110
  9583  001568  0E01               	movlw	1
  9584  00156A  D001               	goto	u6120
  9585  00156C                     u6110:
  9586  00156C  0E00               	movlw	0
  9587  00156E                     u6120:
  9588  00156E  0100               	movlb	0	; () banked
  9589  001570  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9590  001572  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9591                           
  9592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9593                           ; Switch size 1, requested type "space"
  9594                           ; Number of cases is 1, Range of values is 0 to 0
  9595                           ; switch strategies available:
  9596                           ; Name         Instructions Cycles
  9597                           ; simple_byte            4     3 (average)
  9598                           ;	Chosen strategy is simple_byte
  9599  001574  0100               	movlb	0	; () banked
  9600  001576  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9601  001578  0A00               	xorlw	0	; case 0
  9602  00157A  A4D8               	btfss	status,2,c
  9603  00157C  D030               	goto	l7542
  9604                           
  9605                           ; BSR set to: 0
  9606                           ; Switch size 1, requested type "space"
  9607                           ; Number of cases is 2, Range of values is 0 to 1
  9608                           ; switch strategies available:
  9609                           ; Name         Instructions Cycles
  9610                           ; simple_byte            7     4 (average)
  9611                           ;	Chosen strategy is simple_byte
  9612  00157E  0100               	movlb	0	; () banked
  9613  001580  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9614  001582  0A00               	xorlw	0	; case 0
  9615  001584  B4D8               	btfsc	status,2,c
  9616  001586  D7E2               	goto	l7520
  9617  001588  0A01               	xorlw	1	; case 1
  9618  00158A  B4D8               	btfsc	status,2,c
  9619  00158C  D7C1               	goto	l7512
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;io.c: 348: switch(PORTCbits.RC1)
  9623  00158E  D027               	goto	l7542
  9624  001590                     l7528:
  9625  001590  5014               	movf	_Reed_Contact_LMU_Counter,w,c
  9626  001592  0100               	movlb	0	; () banked
  9627  001594  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9628  001596  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9629  001598  0E0B               	movlw	11
  9630  00159A  ECBB  F016         	call	_GETxAPIxVAL
  9631  00159E  0100               	movlb	0	; () banked
  9632  0015A0  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9633  0015A2  0100               	movlb	0	; () banked
  9634  0015A4  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9635  0015A6  0100               	movlb	0	; () banked
  9636  0015A8  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9637  0015AA  0100               	movlb	0	; () banked
  9638  0015AC  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9639  0015AE  A0D8               	btfss	status,0,c
  9640  0015B0  D002               	goto	l7534
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;io.c: 351: {
  9644                           ;io.c: 352: Reed_Contact_LMU_Counter++;
  9645  0015B2  2A14               	incf	_Reed_Contact_LMU_Counter,f,c
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;io.c: 354: }
  9649                           
  9650                           ;io.c: 353: break;
  9651  0015B4  D047               	goto	l7558
  9652  0015B6                     l7534:
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;io.c: 355: else {SETxAPIxVAL(25, 1); }
  9656  0015B6  0E00               	movlw	0
  9657  0015B8  0100               	movlb	0	; () banked
  9658  0015BA  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9659  0015BC  0E01               	movlw	1
  9660  0015BE  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9661  0015C0  0E19               	movlw	25
  9662  0015C2  EC08  F016         	call	_SETxAPIxVAL
  9663                           
  9664                           ;io.c: 356: break;
  9665  0015C6  D03E               	goto	l7558
  9666  0015C8                     l7536:
  9667  0015C8  0E00               	movlw	0
  9668  0015CA  6E14               	movwf	_Reed_Contact_LMU_Counter,c
  9669                           
  9670                           ;io.c: 359: SETxAPIxVAL(25, 0);
  9671  0015CC  0E00               	movlw	0
  9672  0015CE  0100               	movlb	0	; () banked
  9673  0015D0  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9674  0015D2  0E00               	movlw	0
  9675  0015D4  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9676  0015D6  0E19               	movlw	25
  9677  0015D8  EC08  F016         	call	_SETxAPIxVAL
  9678                           
  9679                           ;io.c: 363: }
  9680                           
  9681                           ;io.c: 362: default : break;
  9682                           
  9683                           ;io.c: 360: break;
  9684  0015DC  D033               	goto	l7558
  9685  0015DE                     l7542:
  9686  0015DE  A282               	btfss	3970,1,c	;volatile
  9687  0015E0  D002               	goto	u6140
  9688  0015E2  0E01               	movlw	1
  9689  0015E4  D001               	goto	u6146
  9690  0015E6                     u6140:
  9691  0015E6  0E00               	movlw	0
  9692  0015E8                     u6146:
  9693                           
  9694                           ; Switch size 1, requested type "space"
  9695                           ; Number of cases is 2, Range of values is 0 to 1
  9696                           ; switch strategies available:
  9697                           ; Name         Instructions Cycles
  9698                           ; simple_byte            7     4 (average)
  9699                           ;	Chosen strategy is simple_byte
  9700  0015E8  0A00               	xorlw	0	; case 0
  9701  0015EA  B4D8               	btfsc	status,2,c
  9702  0015EC  D7ED               	goto	l7536
  9703  0015EE  0A01               	xorlw	1	; case 1
  9704  0015F0  B4D8               	btfsc	status,2,c
  9705  0015F2  D7CE               	goto	l7528
  9706                           
  9707                           ;io.c: 366: switch(PORTDbits.RD4)
  9708  0015F4  D027               	goto	l7558
  9709  0015F6                     l7544:
  9710  0015F6  5013               	movf	_Reed_Contact_LMD_Counter,w,c
  9711  0015F8  0100               	movlb	0	; () banked
  9712  0015FA  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9713  0015FC  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9714  0015FE  0E0B               	movlw	11
  9715  001600  ECBB  F016         	call	_GETxAPIxVAL
  9716  001604  0100               	movlb	0	; () banked
  9717  001606  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9718  001608  0100               	movlb	0	; () banked
  9719  00160A  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9720  00160C  0100               	movlb	0	; () banked
  9721  00160E  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9722  001610  0100               	movlb	0	; () banked
  9723  001612  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9724  001614  A0D8               	btfss	status,0,c
  9725  001616  D002               	goto	l7550
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;io.c: 369: {
  9729                           ;io.c: 370: Reed_Contact_LMD_Counter++;
  9730  001618  2A13               	incf	_Reed_Contact_LMD_Counter,f,c
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;io.c: 372: }
  9734                           
  9735                           ;io.c: 371: break;
  9736  00161A  D047               	goto	l7574
  9737  00161C                     l7550:
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;io.c: 373: else {SETxAPIxVAL(26, 1); }
  9741  00161C  0E00               	movlw	0
  9742  00161E  0100               	movlb	0	; () banked
  9743  001620  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9744  001622  0E01               	movlw	1
  9745  001624  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9746  001626  0E1A               	movlw	26
  9747  001628  EC08  F016         	call	_SETxAPIxVAL
  9748                           
  9749                           ;io.c: 374: break;
  9750  00162C  D03E               	goto	l7574
  9751  00162E                     l7552:
  9752  00162E  0E00               	movlw	0
  9753  001630  6E13               	movwf	_Reed_Contact_LMD_Counter,c
  9754                           
  9755                           ;io.c: 377: SETxAPIxVAL(26, 0);
  9756  001632  0E00               	movlw	0
  9757  001634  0100               	movlb	0	; () banked
  9758  001636  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9759  001638  0E00               	movlw	0
  9760  00163A  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9761  00163C  0E1A               	movlw	26
  9762  00163E  EC08  F016         	call	_SETxAPIxVAL
  9763                           
  9764                           ;io.c: 381: }
  9765                           
  9766                           ;io.c: 380: default : break;
  9767                           
  9768                           ;io.c: 378: break;
  9769  001642  D033               	goto	l7574
  9770  001644                     l7558:
  9771  001644  A883               	btfss	3971,4,c	;volatile
  9772  001646  D002               	goto	u6160
  9773  001648  0E01               	movlw	1
  9774  00164A  D001               	goto	u6166
  9775  00164C                     u6160:
  9776  00164C  0E00               	movlw	0
  9777  00164E                     u6166:
  9778                           
  9779                           ; Switch size 1, requested type "space"
  9780                           ; Number of cases is 2, Range of values is 0 to 1
  9781                           ; switch strategies available:
  9782                           ; Name         Instructions Cycles
  9783                           ; simple_byte            7     4 (average)
  9784                           ;	Chosen strategy is simple_byte
  9785  00164E  0A00               	xorlw	0	; case 0
  9786  001650  B4D8               	btfsc	status,2,c
  9787  001652  D7ED               	goto	l7552
  9788  001654  0A01               	xorlw	1	; case 1
  9789  001656  B4D8               	btfsc	status,2,c
  9790  001658  D7CE               	goto	l7544
  9791                           
  9792                           ;io.c: 384: switch(PORTEbits.RE0)
  9793  00165A  D027               	goto	l7574
  9794  00165C                     l7560:
  9795  00165C  5018               	movf	_Reed_Contact_RMU_Counter,w,c
  9796  00165E  0100               	movlb	0	; () banked
  9797  001660  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9798  001662  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9799  001664  0E0B               	movlw	11
  9800  001666  ECBB  F016         	call	_GETxAPIxVAL
  9801  00166A  0100               	movlb	0	; () banked
  9802  00166C  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9803  00166E  0100               	movlb	0	; () banked
  9804  001670  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9805  001672  0100               	movlb	0	; () banked
  9806  001674  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9807  001676  0100               	movlb	0	; () banked
  9808  001678  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9809  00167A  A0D8               	btfss	status,0,c
  9810  00167C  D002               	goto	l7566
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;io.c: 387: {
  9814                           ;io.c: 388: Reed_Contact_RMU_Counter++;
  9815  00167E  2A18               	incf	_Reed_Contact_RMU_Counter,f,c
  9816                           
  9817                           ; BSR set to: 0
  9818                           ;io.c: 390: }
  9819                           
  9820                           ;io.c: 389: break;
  9821  001680  D047               	goto	l7590
  9822  001682                     l7566:
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;io.c: 391: else {SETxAPIxVAL(27, 1); }
  9826  001682  0E00               	movlw	0
  9827  001684  0100               	movlb	0	; () banked
  9828  001686  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9829  001688  0E01               	movlw	1
  9830  00168A  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9831  00168C  0E1B               	movlw	27
  9832  00168E  EC08  F016         	call	_SETxAPIxVAL
  9833                           
  9834                           ;io.c: 392: break;
  9835  001692  D03E               	goto	l7590
  9836  001694                     l7568:
  9837  001694  0E00               	movlw	0
  9838  001696  6E18               	movwf	_Reed_Contact_RMU_Counter,c
  9839                           
  9840                           ;io.c: 395: SETxAPIxVAL(27, 0);
  9841  001698  0E00               	movlw	0
  9842  00169A  0100               	movlb	0	; () banked
  9843  00169C  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9844  00169E  0E00               	movlw	0
  9845  0016A0  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9846  0016A2  0E1B               	movlw	27
  9847  0016A4  EC08  F016         	call	_SETxAPIxVAL
  9848                           
  9849                           ;io.c: 399: }
  9850                           
  9851                           ;io.c: 398: default : break;
  9852                           
  9853                           ;io.c: 396: break;
  9854  0016A8  D033               	goto	l7590
  9855  0016AA                     l7574:
  9856  0016AA  A084               	btfss	3972,0,c	;volatile
  9857  0016AC  D002               	goto	u6180
  9858  0016AE  0E01               	movlw	1
  9859  0016B0  D001               	goto	u6186
  9860  0016B2                     u6180:
  9861  0016B2  0E00               	movlw	0
  9862  0016B4                     u6186:
  9863                           
  9864                           ; Switch size 1, requested type "space"
  9865                           ; Number of cases is 2, Range of values is 0 to 1
  9866                           ; switch strategies available:
  9867                           ; Name         Instructions Cycles
  9868                           ; simple_byte            7     4 (average)
  9869                           ;	Chosen strategy is simple_byte
  9870  0016B4  0A00               	xorlw	0	; case 0
  9871  0016B6  B4D8               	btfsc	status,2,c
  9872  0016B8  D7ED               	goto	l7568
  9873  0016BA  0A01               	xorlw	1	; case 1
  9874  0016BC  B4D8               	btfsc	status,2,c
  9875  0016BE  D7CE               	goto	l7560
  9876                           
  9877                           ;io.c: 402: switch(PORTEbits.RE1)
  9878  0016C0  D027               	goto	l7590
  9879  0016C2                     l7576:
  9880  0016C2  5017               	movf	_Reed_Contact_RMD_Counter,w,c
  9881  0016C4  0100               	movlb	0	; () banked
  9882  0016C6  6FFE               	movwf	??_Debounce_Inputs& (0+255),b
  9883  0016C8  6BFF               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9884  0016CA  0E0B               	movlw	11
  9885  0016CC  ECBB  F016         	call	_GETxAPIxVAL
  9886  0016D0  0100               	movlb	0	; () banked
  9887  0016D2  51FE               	movf	??_Debounce_Inputs& (0+255),w,b
  9888  0016D4  0100               	movlb	0	; () banked
  9889  0016D6  5DF9               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9890  0016D8  0100               	movlb	0	; () banked
  9891  0016DA  51FF               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9892  0016DC  0100               	movlb	0	; () banked
  9893  0016DE  59FA               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9894  0016E0  A0D8               	btfss	status,0,c
  9895  0016E2  D002               	goto	l7582
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;io.c: 405: {
  9899                           ;io.c: 406: Reed_Contact_RMD_Counter++;
  9900  0016E4  2A17               	incf	_Reed_Contact_RMD_Counter,f,c
  9901                           
  9902                           ; BSR set to: 0
  9903                           ;io.c: 408: }
  9904                           
  9905                           ;io.c: 407: break;
  9906  0016E6  0012               	return	
  9907  0016E8                     l7582:
  9908                           
  9909                           ; BSR set to: 0
  9910                           ;io.c: 409: else {SETxAPIxVAL(28, 1); }
  9911  0016E8  0E00               	movlw	0
  9912  0016EA  0100               	movlb	0	; () banked
  9913  0016EC  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9914  0016EE  0E01               	movlw	1
  9915  0016F0  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9916  0016F2  0E1C               	movlw	28
  9917  0016F4  EC08  F016         	call	_SETxAPIxVAL
  9918                           
  9919                           ;io.c: 410: break;
  9920  0016F8  0012               	return	
  9921  0016FA                     l7584:
  9922  0016FA  0E00               	movlw	0
  9923  0016FC  6E17               	movwf	_Reed_Contact_RMD_Counter,c
  9924                           
  9925                           ;io.c: 413: SETxAPIxVAL(28, 0);
  9926  0016FE  0E00               	movlw	0
  9927  001700  0100               	movlb	0	; () banked
  9928  001702  6FFA               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9929  001704  0E00               	movlw	0
  9930  001706  6FF9               	movwf	SETxAPIxVAL@value& (0+255),b
  9931  001708  0E1C               	movlw	28
  9932  00170A  EC08  F016         	call	_SETxAPIxVAL
  9933                           
  9934                           ;io.c: 417: }
  9935                           
  9936                           ;io.c: 416: default : break;
  9937                           
  9938                           ;io.c: 414: break;
  9939  00170E  0012               	return	
  9940  001710                     l7590:
  9941  001710  A284               	btfss	3972,1,c	;volatile
  9942  001712  D002               	goto	u6200
  9943  001714  0E01               	movlw	1
  9944  001716  D001               	goto	u6206
  9945  001718                     u6200:
  9946  001718  0E00               	movlw	0
  9947  00171A                     u6206:
  9948                           
  9949                           ; Switch size 1, requested type "space"
  9950                           ; Number of cases is 2, Range of values is 0 to 1
  9951                           ; switch strategies available:
  9952                           ; Name         Instructions Cycles
  9953                           ; simple_byte            7     4 (average)
  9954                           ;	Chosen strategy is simple_byte
  9955  00171A  0A00               	xorlw	0	; case 0
  9956  00171C  B4D8               	btfsc	status,2,c
  9957  00171E  D7ED               	goto	l7584
  9958  001720  0A01               	xorlw	1	; case 1
  9959  001722  A4D8               	btfss	status,2,c
  9960  001724  0012               	return	
  9961  001726  D7CD               	goto	l7576
  9962  001728                     __end_of_Debounce_Inputs:
  9963                           	opt stack 0
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           intcon	equ	0xFF2
  9969                           postinc0	equ	0xFEE
  9970                           wreg	equ	0xFE8
  9971                           postdec1	equ	0xFE5
  9972                           fsr1l	equ	0xFE1
  9973                           status	equ	0xFD8
  9974                           
  9975 ;; *************** function _DECRxAPIxVAL *****************
  9976 ;; Defined at:
  9977 ;;		line 151 in file "../api.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;  index           1    wreg     unsigned char 
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;  index           1    2[BANK1 ] unsigned char 
  9982 ;;  value           2    0[BANK1 ] unsigned int 
  9983 ;; Return value:  Size  Location     Type
  9984 ;;                  1    wreg      void 
  9985 ;; Registers used:
  9986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9987 ;; Tracked objects:
  9988 ;;		On entry : 0/0
  9989 ;;		On exit  : 0/0
  9990 ;;		Unchanged: 0/0
  9991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9992 ;;      Params:         0       0       0       0       0       0       0       0       0
  9993 ;;      Locals:         0       0       3       0       0       0       0       0       0
  9994 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9995 ;;      Totals:         0       0       3       0       0       0       0       0       0
  9996 ;;Total ram usage:        3 bytes
  9997 ;; Hardware stack levels used:    1
  9998 ;; Hardware stack levels required when called:    5
  9999 ;; This function calls:
 10000 ;;		_GETxAPIxVAL
 10001 ;;		_SETxAPIxVAL
 10002 ;; This function is called by:
 10003 ;;		_Update_StateMchn
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           	psect	text19
 10008  002CC2                     __ptext19:
 10009                           	opt stack 0
 10010  002CC2                     _DECRxAPIxVAL:
 10011                           	opt stack 24
 10012                           
 10013                           ;incstack = 0
 10014                           ;DECRxAPIxVAL@index stored from wreg
 10015  002CC2  0101               	movlb	1	; () banked
 10016  002CC4  6FFE               	movwf	DECRxAPIxVAL@index& (0+255),b
 10017                           
 10018                           ;api.c: 152: unsigned int value;
 10019                           ;api.c: 153: value = GETxAPIxVAL(index);
 10020  002CC6  0101               	movlb	1	; () banked
 10021  002CC8  51FE               	movf	DECRxAPIxVAL@index& (0+255),w,b
 10022  002CCA  ECBB  F016         	call	_GETxAPIxVAL
 10023  002CCE  C0F9  F1FC         	movff	?_GETxAPIxVAL,DECRxAPIxVAL@value
 10024  002CD2  C0FA  F1FD         	movff	?_GETxAPIxVAL+1,DECRxAPIxVAL@value+1
 10025                           
 10026                           ;api.c: 154: value--;
 10027  002CD6  0101               	movlb	1	; () banked
 10028  002CD8  07FC               	decf	DECRxAPIxVAL@value& (0+255),f,b
 10029  002CDA  A0D8               	btfss	status,0,c
 10030  002CDC  07FD               	decf	(DECRxAPIxVAL@value+1)& (0+255),f,b
 10031                           
 10032                           ; BSR set to: 1
 10033                           ;api.c: 155: SETxAPIxVAL(index, value);
 10034  002CDE  C1FC  F0F9         	movff	DECRxAPIxVAL@value,SETxAPIxVAL@value
 10035  002CE2  C1FD  F0FA         	movff	DECRxAPIxVAL@value+1,SETxAPIxVAL@value+1
 10036  002CE6  0101               	movlb	1	; () banked
 10037  002CE8  51FE               	movf	DECRxAPIxVAL@index& (0+255),w,b
 10038  002CEA  EC08  F016         	call	_SETxAPIxVAL
 10039  002CEE  0012               	return		;funcret
 10040  002CF0                     __end_of_DECRxAPIxVAL:
 10041                           	opt stack 0
 10042                           tblptru	equ	0xFF8
 10043                           tblptrh	equ	0xFF7
 10044                           tblptrl	equ	0xFF6
 10045                           tablat	equ	0xFF5
 10046                           intcon	equ	0xFF2
 10047                           postinc0	equ	0xFEE
 10048                           wreg	equ	0xFE8
 10049                           postdec1	equ	0xFE5
 10050                           fsr1l	equ	0xFE1
 10051                           status	equ	0xFD8
 10052                           
 10053 ;; *************** function _SETxAPIxVAL *****************
 10054 ;; Defined at:
 10055 ;;		line 135 in file "../api.c"
 10056 ;; Parameters:    Size  Location     Type
 10057 ;;  index           1    wreg     unsigned char 
 10058 ;;  value           2    0[BANK0 ] unsigned int 
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;  index           1    4[BANK0 ] unsigned char 
 10061 ;; Return value:  Size  Location     Type
 10062 ;;                  1    wreg      void 
 10063 ;; Registers used:
 10064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10065 ;; Tracked objects:
 10066 ;;		On entry : 0/0
 10067 ;;		On exit  : 0/0
 10068 ;;		Unchanged: 0/0
 10069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10070 ;;      Params:         0       2       0       0       0       0       0       0       0
 10071 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10072 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10073 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10074 ;;Total ram usage:        5 bytes
 10075 ;; Hardware stack levels used:    1
 10076 ;; Hardware stack levels required when called:    4
 10077 ;; This function calls:
 10078 ;;		Nothing
 10079 ;; This function is called by:
 10080 ;;		_Update_StateMchn
 10081 ;;		_INCRxAPIxVAL
 10082 ;;		_DECRxAPIxVAL
 10083 ;;		_Debounce_Inputs
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           	psect	text20
 10088  002C10                     __ptext20:
 10089                           	opt stack 0
 10090  002C10                     _SETxAPIxVAL:
 10091                           	opt stack 25
 10092                           
 10093                           ;incstack = 0
 10094                           ;SETxAPIxVAL@index stored from wreg
 10095  002C10  0100               	movlb	0	; () banked
 10096  002C12  6FFD               	movwf	SETxAPIxVAL@index& (0+255),b
 10097                           
 10098                           ;api.c: 136: if(API[index] != value){
 10099  002C14  0100               	movlb	0	; () banked
 10100  002C16  51FD               	movf	SETxAPIxVAL@index& (0+255),w,b
 10101  002C18  0D02               	mullw	2
 10102  002C1A  0E60               	movlw	low _API
 10103  002C1C  24F3               	addwf	prodl,w,c
 10104  002C1E  6ED9               	movwf	fsr2l,c
 10105  002C20  0E00               	movlw	high _API
 10106  002C22  20F4               	addwfc	prodh,w,c
 10107  002C24  6EDA               	movwf	fsr2h,c
 10108  002C26  0100               	movlb	0	; () banked
 10109  002C28  51F9               	movf	SETxAPIxVAL@value& (0+255),w,b
 10110  002C2A  18DE               	xorwf	postinc2,w,c
 10111  002C2C  E105               	bnz	u5340
 10112  002C2E  0100               	movlb	0	; () banked
 10113  002C30  51FA               	movf	(SETxAPIxVAL@value+1)& (0+255),w,b
 10114  002C32  18DE               	xorwf	postinc2,w,c
 10115  002C34  B4D8               	btfsc	status,2,c
 10116  002C36  0012               	return	
 10117  002C38                     u5340:
 10118                           
 10119                           ; BSR set to: 0
 10120                           ;api.c: 137: API[index] = value;
 10121  002C38  0100               	movlb	0	; () banked
 10122  002C3A  51FD               	movf	SETxAPIxVAL@index& (0+255),w,b
 10123  002C3C  0D02               	mullw	2
 10124  002C3E  0E60               	movlw	low _API
 10125  002C40  24F3               	addwf	prodl,w,c
 10126  002C42  6ED9               	movwf	fsr2l,c
 10127  002C44  0E00               	movlw	high _API
 10128  002C46  20F4               	addwfc	prodh,w,c
 10129  002C48  6EDA               	movwf	fsr2h,c
 10130  002C4A  C0F9  FFDE         	movff	SETxAPIxVAL@value,postinc2
 10131  002C4E  C0FA  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 10132  002C52  0012               	return	
 10133  002C54                     __end_of_SETxAPIxVAL:
 10134                           	opt stack 0
 10135                           tblptru	equ	0xFF8
 10136                           tblptrh	equ	0xFF7
 10137                           tblptrl	equ	0xFF6
 10138                           tablat	equ	0xFF5
 10139                           prodh	equ	0xFF4
 10140                           prodl	equ	0xFF3
 10141                           intcon	equ	0xFF2
 10142                           postinc0	equ	0xFEE
 10143                           wreg	equ	0xFE8
 10144                           postdec1	equ	0xFE5
 10145                           fsr1l	equ	0xFE1
 10146                           postinc2	equ	0xFDE
 10147                           postdec2	equ	0xFDD
 10148                           fsr2h	equ	0xFDA
 10149                           fsr2l	equ	0xFD9
 10150                           status	equ	0xFD8
 10151                           
 10152 ;; *************** function _GETxAPIxVAL *****************
 10153 ;; Defined at:
 10154 ;;		line 140 in file "../api.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;  index           1    wreg     unsigned char 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  index           1    2[BANK0 ] unsigned char 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  2    0[BANK0 ] unsigned int 
 10161 ;; Registers used:
 10162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10168 ;;      Params:         0       2       0       0       0       0       0       0       0
 10169 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10171 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10172 ;;Total ram usage:        3 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    4
 10175 ;; This function calls:
 10176 ;;		Nothing
 10177 ;; This function is called by:
 10178 ;;		_Update_StateMchn
 10179 ;;		_Train_Path
 10180 ;;		_INCRxAPIxVAL
 10181 ;;		_DECRxAPIxVAL
 10182 ;;		_Eeprom_Store
 10183 ;;		_Debounce_Inputs
 10184 ;;		_Junction
 10185 ;;		_Train_Move_Left_Start
 10186 ;;		_Right_Mountain_From_The_Right
 10187 ;;		_Left_Mountain_From_The_Right
 10188 ;;		_Train_Move_Left_Brake
 10189 ;;		_Train_Move_Right_Start
 10190 ;;		_Left_Mountain_From_The_Left
 10191 ;;		_Right_Mountain_From_The_Left
 10192 ;;		_Train_Move_Right_Brake
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text21
 10197  002D76                     __ptext21:
 10198                           	opt stack 0
 10199  002D76                     _GETxAPIxVAL:
 10200                           	opt stack 23
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;incstack = 0
 10204                           ;GETxAPIxVAL@index stored from wreg
 10205  002D76  0100               	movlb	0	; () banked
 10206  002D78  6FFB               	movwf	GETxAPIxVAL@index& (0+255),b
 10207                           
 10208                           ;api.c: 141: return API[index];
 10209  002D7A  0100               	movlb	0	; () banked
 10210  002D7C  51FB               	movf	GETxAPIxVAL@index& (0+255),w,b
 10211  002D7E  0D02               	mullw	2
 10212  002D80  0E60               	movlw	low _API
 10213  002D82  24F3               	addwf	prodl,w,c
 10214  002D84  6ED9               	movwf	fsr2l,c
 10215  002D86  0E00               	movlw	high _API
 10216  002D88  20F4               	addwfc	prodh,w,c
 10217  002D8A  6EDA               	movwf	fsr2h,c
 10218  002D8C  CFDE F0F9          	movff	postinc2,?_GETxAPIxVAL
 10219  002D90  CFDD F0FA          	movff	postdec2,?_GETxAPIxVAL+1
 10220  002D94  0012               	return	
 10221  002D96                     __end_of_GETxAPIxVAL:
 10222                           	opt stack 0
 10223                           tblptru	equ	0xFF8
 10224                           tblptrh	equ	0xFF7
 10225                           tblptrl	equ	0xFF6
 10226                           tablat	equ	0xFF5
 10227                           prodh	equ	0xFF4
 10228                           prodl	equ	0xFF3
 10229                           intcon	equ	0xFF2
 10230                           postinc0	equ	0xFEE
 10231                           wreg	equ	0xFE8
 10232                           postdec1	equ	0xFE5
 10233                           fsr1l	equ	0xFE1
 10234                           postinc2	equ	0xFDE
 10235                           postdec2	equ	0xFDD
 10236                           fsr2h	equ	0xFDA
 10237                           fsr2l	equ	0xFD9
 10238                           status	equ	0xFD8
 10239                           
 10240 ;; *************** function _Init_Timers *****************
 10241 ;; Defined at:
 10242 ;;		line 181 in file "../Main.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;		None
 10247 ;; Return value:  Size  Location     Type
 10248 ;;                  1    wreg      void 
 10249 ;; Registers used:
 10250 ;;		wreg, status,2
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10256 ;;      Params:         0       0       0       0       0       0       0       0       0
 10257 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10259 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10260 ;;Total ram usage:        0 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    4
 10263 ;; This function calls:
 10264 ;;		Nothing
 10265 ;; This function is called by:
 10266 ;;		_main
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           	psect	text22
 10271  002D96                     __ptext22:
 10272                           	opt stack 0
 10273  002D96                     _Init_Timers:
 10274                           	opt stack 26
 10275                           
 10276                           ;Main.c: 183: RCONbits.IPEN = 1;
 10277                           
 10278                           ; BSR set to: 0
 10279                           ;incstack = 0
 10280  002D96  8ED0               	bsf	4048,7,c	;volatile
 10281                           
 10282                           ;Main.c: 184: INTCON = 0xA0;
 10283  002D98  0EA0               	movlw	160
 10284  002D9A  6EF2               	movwf	intcon,c	;volatile
 10285                           
 10286                           ;Main.c: 185: INTCON2 = 0x84;
 10287  002D9C  0E84               	movlw	132
 10288  002D9E  6EF1               	movwf	intcon2,c	;volatile
 10289                           
 10290                           ;Main.c: 186: TMR0H = 0x0;
 10291  002DA0  0E00               	movlw	0
 10292  002DA2  6ED7               	movwf	4055,c	;volatile
 10293                           
 10294                           ;Main.c: 187: TMR0L = 0x0;
 10295  002DA4  0E00               	movlw	0
 10296  002DA6  6ED6               	movwf	4054,c	;volatile
 10297                           
 10298                           ;Main.c: 188: T0CON = 0xC3;
 10299  002DA8  0EC3               	movlw	195
 10300  002DAA  6ED5               	movwf	4053,c	;volatile
 10301  002DAC  0012               	return		;funcret
 10302  002DAE                     __end_of_Init_Timers:
 10303                           	opt stack 0
 10304                           tblptru	equ	0xFF8
 10305                           tblptrh	equ	0xFF7
 10306                           tblptrl	equ	0xFF6
 10307                           tablat	equ	0xFF5
 10308                           prodh	equ	0xFF4
 10309                           prodl	equ	0xFF3
 10310                           intcon	equ	0xFF2
 10311                           intcon2	equ	0xFF1
 10312                           postinc0	equ	0xFEE
 10313                           wreg	equ	0xFE8
 10314                           postdec1	equ	0xFE5
 10315                           fsr1l	equ	0xFE1
 10316                           postinc2	equ	0xFDE
 10317                           postdec2	equ	0xFDD
 10318                           fsr2h	equ	0xFDA
 10319                           fsr2l	equ	0xFD9
 10320                           status	equ	0xFD8
 10321                           
 10322 ;; *************** function _Init_Pwm *****************
 10323 ;; Defined at:
 10324 ;;		line 194 in file "../Main.c"
 10325 ;; Parameters:    Size  Location     Type
 10326 ;;		None
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;		None
 10329 ;; Return value:  Size  Location     Type
 10330 ;;                  1    wreg      void 
 10331 ;; Registers used:
 10332 ;;		wreg, status,2
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10338 ;;      Params:         0       0       0       0       0       0       0       0       0
 10339 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10340 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10341 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10342 ;;Total ram usage:        0 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    4
 10345 ;; This function calls:
 10346 ;;		Nothing
 10347 ;; This function is called by:
 10348 ;;		_main
 10349 ;; This function uses a non-reentrant model
 10350 ;;
 10351                           
 10352                           	psect	text23
 10353  002DAE                     __ptext23:
 10354                           	opt stack 0
 10355  002DAE                     _Init_Pwm:
 10356                           	opt stack 26
 10357                           
 10358                           ;Main.c: 197: PORTCbits.RC0 = 1;
 10359                           
 10360                           ;incstack = 0
 10361  002DAE  8082               	bsf	3970,0,c	;volatile
 10362                           
 10363                           ;Main.c: 198: PR2=0xFF;
 10364  002DB0  68CB               	setf	4043,c	;volatile
 10365                           
 10366                           ;Main.c: 199: CCPR1L = 0x7F;
 10367  002DB2  0E7F               	movlw	127
 10368  002DB4  6EBE               	movwf	4030,c	;volatile
 10369                           
 10370                           ;Main.c: 200: CCP1CON = 0x0F;
 10371  002DB6  0E0F               	movlw	15
 10372  002DB8  6EBD               	movwf	4029,c	;volatile
 10373                           
 10374                           ;Main.c: 201: T2CON = 0x04;
 10375  002DBA  0E04               	movlw	4
 10376  002DBC  6ECA               	movwf	4042,c	;volatile
 10377                           
 10378                           ;Main.c: 202: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 10379  002DBE  9494               	bcf	3988,2,c	;volatile
 10380  002DC0  9094               	bcf	3988,0,c	;volatile
 10381  002DC2  0012               	return		;funcret
 10382  002DC4                     __end_of_Init_Pwm:
 10383                           	opt stack 0
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           intcon	equ	0xFF2
 10391                           intcon2	equ	0xFF1
 10392                           postinc0	equ	0xFEE
 10393                           wreg	equ	0xFE8
 10394                           postdec1	equ	0xFE5
 10395                           fsr1l	equ	0xFE1
 10396                           postinc2	equ	0xFDE
 10397                           postdec2	equ	0xFDD
 10398                           fsr2h	equ	0xFDA
 10399                           fsr2l	equ	0xFD9
 10400                           status	equ	0xFD8
 10401                           
 10402 ;; *************** function _INIT_TERMINAL *****************
 10403 ;; Defined at:
 10404 ;;		line 12 in file "../terminal.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;		None
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;  i               2    0[BANK0 ] int 
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  1    wreg      void 
 10411 ;; Registers used:
 10412 ;;		wreg, status,2, status,0
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0
 10419 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10420 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10421 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10422 ;;Total ram usage:        2 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    4
 10425 ;; This function calls:
 10426 ;;		Nothing
 10427 ;; This function is called by:
 10428 ;;		_main
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           	psect	text24
 10433  002C8E                     __ptext24:
 10434                           	opt stack 0
 10435  002C8E                     _INIT_TERMINAL:
 10436                           	opt stack 26
 10437                           
 10438                           ;terminal.c: 13: int i = 0;
 10439                           
 10440                           ;incstack = 0
 10441  002C8E  0E00               	movlw	0
 10442  002C90  0100               	movlb	0	; () banked
 10443  002C92  6FFA               	movwf	(INIT_TERMINAL@i+1)& (0+255),b
 10444  002C94  0E00               	movlw	0
 10445  002C96  6FF9               	movwf	INIT_TERMINAL@i& (0+255),b
 10446                           
 10447                           ;terminal.c: 14: for (i=0; i<22; i++){
 10448  002C98  0E00               	movlw	0
 10449  002C9A  0100               	movlb	0	; () banked
 10450  002C9C  6FFA               	movwf	(INIT_TERMINAL@i+1)& (0+255),b
 10451  002C9E  0E00               	movlw	0
 10452  002CA0  6FF9               	movwf	INIT_TERMINAL@i& (0+255),b
 10453  002CA2                     l7992:
 10454                           
 10455                           ; BSR set to: 0
 10456  002CA2  0100               	movlb	0	; () banked
 10457  002CA4  BFFA               	btfsc	(INIT_TERMINAL@i+1)& (0+255),7,b
 10458  002CA6  D008               	goto	l7996
 10459  002CA8  0100               	movlb	0	; () banked
 10460  002CAA  51FA               	movf	(INIT_TERMINAL@i+1)& (0+255),w,b
 10461  002CAC  E109               	bnz	l636
 10462  002CAE  0E16               	movlw	22
 10463  002CB0  0100               	movlb	0	; () banked
 10464  002CB2  5DF9               	subwf	INIT_TERMINAL@i& (0+255),w,b
 10465  002CB4  B0D8               	btfsc	status,0,c
 10466  002CB6  0012               	return	
 10467  002CB8                     l7996:
 10468                           
 10469                           ; BSR set to: 0
 10470  002CB8  0100               	movlb	0	; () banked
 10471  002CBA  4BF9               	infsnz	INIT_TERMINAL@i& (0+255),f,b
 10472  002CBC  2BFA               	incf	(INIT_TERMINAL@i+1)& (0+255),f,b
 10473  002CBE  D7F1               	goto	l7992
 10474  002CC0                     l636:
 10475                           
 10476                           ; BSR set to: 0
 10477  002CC0  0012               	return		;funcret
 10478  002CC2                     __end_of_INIT_TERMINAL:
 10479                           	opt stack 0
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           intcon	equ	0xFF2
 10487                           intcon2	equ	0xFF1
 10488                           postinc0	equ	0xFEE
 10489                           wreg	equ	0xFE8
 10490                           postdec1	equ	0xFE5
 10491                           fsr1l	equ	0xFE1
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           fsr2h	equ	0xFDA
 10495                           fsr2l	equ	0xFD9
 10496                           status	equ	0xFD8
 10497                           
 10498 ;; *************** function _EUSART1_Initialize *****************
 10499 ;; Defined at:
 10500 ;;		line 77 in file "../eusart1.c"
 10501 ;; Parameters:    Size  Location     Type
 10502 ;;		None
 10503 ;; Auto vars:     Size  Location     Type
 10504 ;;  baud_rate       2    0[BANK0 ] unsigned int 
 10505 ;; Return value:  Size  Location     Type
 10506 ;;                  1    wreg      void 
 10507 ;; Registers used:
 10508 ;;		wreg, status,2
 10509 ;; Tracked objects:
 10510 ;;		On entry : 0/0
 10511 ;;		On exit  : 0/0
 10512 ;;		Unchanged: 0/0
 10513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10514 ;;      Params:         0       0       0       0       0       0       0       0       0
 10515 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10516 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10517 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10518 ;;Total ram usage:        2 bytes
 10519 ;; Hardware stack levels used:    1
 10520 ;; Hardware stack levels required when called:    4
 10521 ;; This function calls:
 10522 ;;		Nothing
 10523 ;; This function is called by:
 10524 ;;		_main
 10525 ;; This function uses a non-reentrant model
 10526 ;;
 10527                           
 10528                           	psect	text25
 10529  002B80                     __ptext25:
 10530                           	opt stack 0
 10531  002B80                     _EUSART1_Initialize:
 10532                           	opt stack 26
 10533                           
 10534                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;incstack = 0
 10538  002B80  9A9D               	bcf	3997,5,c	;volatile
 10539                           
 10540                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 10541  002B82  989D               	bcf	3997,4,c	;volatile
 10542                           
 10543                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 10544  002B84  86B8               	bsf	4024,3,c	;volatile
 10545                           
 10546                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 10547  002B86  8EAB               	bsf	4011,7,c	;volatile
 10548                           
 10549                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 10550  002B88  9CAB               	bcf	4011,6,c	;volatile
 10551                           
 10552                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 10553  002B8A  88AB               	bsf	4011,4,c	;volatile
 10554                           
 10555                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 10556  002B8C  96AB               	bcf	4011,3,c	;volatile
 10557                           
 10558                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 10559  002B8E  9CAC               	bcf	4012,6,c	;volatile
 10560                           
 10561                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 10562  002B90  8AAC               	bsf	4012,5,c	;volatile
 10563                           
 10564                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 10565  002B92  98AC               	bcf	4012,4,c	;volatile
 10566                           
 10567                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 10568  002B94  96AC               	bcf	4012,3,c	;volatile
 10569                           
 10570                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 10571  002B96  84AC               	bsf	4012,2,c	;volatile
 10572                           
 10573                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 10574  002B98  82AC               	bsf	4012,1,c	;volatile
 10575                           
 10576                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 10577  002B9A  90AC               	bcf	4012,0,c	;volatile
 10578                           
 10579                           ;eusart1.c: 99: unsigned int baud_rate;
 10580                           ;eusart1.c: 101: baud_rate = 417;
 10581  002B9C  0E01               	movlw	1
 10582  002B9E  0100               	movlb	0	; () banked
 10583  002BA0  6FFA               	movwf	(EUSART1_Initialize@baud_rate+1)& (0+255),b
 10584  002BA2  0EA1               	movlw	161
 10585  002BA4  6FF9               	movwf	EUSART1_Initialize@baud_rate& (0+255),b
 10586                           
 10587                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 10588  002BA6  0100               	movlb	0	; () banked
 10589  002BA8  51FA               	movf	(EUSART1_Initialize@baud_rate+1)& (0+255),w,b
 10590  002BAA  6EB0               	movwf	4016,c	;volatile
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;eusart1.c: 104: SPBRG = baud_rate;
 10594  002BAC  C0F9  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 10595                           
 10596                           ;eusart1.c: 108: eusart1TxHead = 0;
 10597  002BB0  0E00               	movlw	0
 10598  002BB2  6E2A               	movwf	_eusart1TxHead,c
 10599                           
 10600                           ;eusart1.c: 109: eusart1TxTail = 0;
 10601  002BB4  0E00               	movlw	0
 10602  002BB6  6E2B               	movwf	_eusart1TxTail,c
 10603                           
 10604                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 10605  002BB8  0E7E               	movlw	126
 10606  002BBA  6E29               	movwf	_eusart1TxBufferRemaining,c	;volatile
 10607                           
 10608                           ;eusart1.c: 112: eusart1RxHead = 0;
 10609  002BBC  0E00               	movlw	0
 10610  002BBE  6E27               	movwf	_eusart1RxHead,c
 10611                           
 10612                           ;eusart1.c: 113: eusart1RxTail = 0;
 10613  002BC0  0E00               	movlw	0
 10614  002BC2  6E28               	movwf	_eusart1RxTail,c
 10615                           
 10616                           ;eusart1.c: 114: eusart1RxCount = 0;
 10617  002BC4  0E00               	movlw	0
 10618  002BC6  6E26               	movwf	_eusart1RxCount,c	;volatile
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 10622  002BC8  8A9D               	bsf	3997,5,c	;volatile
 10623                           
 10624                           ; BSR set to: 0
 10625  002BCA  0012               	return		;funcret
 10626  002BCC                     __end_of_EUSART1_Initialize:
 10627                           	opt stack 0
 10628                           tblptru	equ	0xFF8
 10629                           tblptrh	equ	0xFF7
 10630                           tblptrl	equ	0xFF6
 10631                           tablat	equ	0xFF5
 10632                           prodh	equ	0xFF4
 10633                           prodl	equ	0xFF3
 10634                           intcon	equ	0xFF2
 10635                           intcon2	equ	0xFF1
 10636                           postinc0	equ	0xFEE
 10637                           wreg	equ	0xFE8
 10638                           postdec1	equ	0xFE5
 10639                           fsr1l	equ	0xFE1
 10640                           postinc2	equ	0xFDE
 10641                           postdec2	equ	0xFDD
 10642                           fsr2h	equ	0xFDA
 10643                           fsr2l	equ	0xFD9
 10644                           status	equ	0xFD8
 10645                           
 10646 ;; *************** function _APIxInitialize *****************
 10647 ;; Defined at:
 10648 ;;		line 30 in file "../api.c"
 10649 ;; Parameters:    Size  Location     Type
 10650 ;;		None
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;  i               2    0[BANK0 ] unsigned int 
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10662 ;;      Params:         0       0       0       0       0       0       0       0       0
 10663 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10664 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10665 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10666 ;;Total ram usage:        2 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:    4
 10669 ;; This function calls:
 10670 ;;		Nothing
 10671 ;; This function is called by:
 10672 ;;		_main
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           	psect	text26
 10677  001ABA                     __ptext26:
 10678                           	opt stack 0
 10679  001ABA                     _APIxInitialize:
 10680                           	opt stack 26
 10681                           
 10682                           ;api.c: 32: unsigned int i;
 10683                           ;api.c: 33: for(i = 0; i < (63 + 1); i++ )
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;incstack = 0
 10687  001ABA  0E00               	movlw	0
 10688  001ABC  0100               	movlb	0	; () banked
 10689  001ABE  6FFA               	movwf	(APIxInitialize@i+1)& (0+255),b
 10690  001AC0  0E00               	movlw	0
 10691  001AC2  6FF9               	movwf	APIxInitialize@i& (0+255),b
 10692  001AC4                     l7958:
 10693                           
 10694                           ; BSR set to: 0
 10695  001AC4  0100               	movlb	0	; () banked
 10696  001AC6  51FA               	movf	(APIxInitialize@i+1)& (0+255),w,b
 10697  001AC8  E127               	bnz	l7968
 10698  001ACA  0E40               	movlw	64
 10699  001ACC  0100               	movlb	0	; () banked
 10700  001ACE  5DF9               	subwf	APIxInitialize@i& (0+255),w,b
 10701  001AD0  B0D8               	btfsc	status,0,c
 10702  001AD2  D022               	goto	l7968
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;api.c: 34: {
 10706                           ;api.c: 35: API_RW[i] = 0;
 10707                           
 10708                           ; BSR set to: 0
 10709                           
 10710                           ; BSR set to: 0
 10711  001AD4  90D8               	bcf	status,0,c
 10712  001AD6  0100               	movlb	0	; () banked
 10713  001AD8  35F9               	rlcf	APIxInitialize@i& (0+255),w,b
 10714  001ADA  6ED9               	movwf	fsr2l,c
 10715  001ADC  0100               	movlb	0	; () banked
 10716  001ADE  35FA               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 10717  001AE0  6EDA               	movwf	fsr2h,c
 10718  001AE2  0E00               	movlw	low _API_RW
 10719  001AE4  26D9               	addwf	fsr2l,f,c
 10720  001AE6  0E01               	movlw	high _API_RW
 10721  001AE8  22DA               	addwfc	fsr2h,f,c
 10722  001AEA  0E00               	movlw	0
 10723  001AEC  6EDE               	movwf	postinc2,c
 10724  001AEE  0E00               	movlw	0
 10725  001AF0  6EDD               	movwf	postdec2,c
 10726                           
 10727                           ;api.c: 36: API[i] = 0;
 10728  001AF2  90D8               	bcf	status,0,c
 10729  001AF4  0100               	movlb	0	; () banked
 10730  001AF6  35F9               	rlcf	APIxInitialize@i& (0+255),w,b
 10731  001AF8  6ED9               	movwf	fsr2l,c
 10732  001AFA  0100               	movlb	0	; () banked
 10733  001AFC  35FA               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 10734  001AFE  6EDA               	movwf	fsr2h,c
 10735  001B00  0E60               	movlw	low _API
 10736  001B02  26D9               	addwf	fsr2l,f,c
 10737  001B04  0E00               	movlw	high _API
 10738  001B06  22DA               	addwfc	fsr2h,f,c
 10739  001B08  0E00               	movlw	0
 10740  001B0A  6EDE               	movwf	postinc2,c
 10741  001B0C  0E00               	movlw	0
 10742  001B0E  6EDD               	movwf	postdec2,c
 10743                           
 10744                           ; BSR set to: 0
 10745  001B10  0100               	movlb	0	; () banked
 10746  001B12  4BF9               	infsnz	APIxInitialize@i& (0+255),f,b
 10747  001B14  2BFA               	incf	(APIxInitialize@i+1)& (0+255),f,b
 10748  001B16  D7D6               	goto	l7958
 10749  001B18                     l7968:
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;api.c: 37: }
 10753                           ;api.c: 40: API_RW[0] = 0;
 10754  001B18  0E00               	movlw	0
 10755  001B1A  0101               	movlb	1	; () banked
 10756  001B1C  6F01               	movwf	(_API_RW+1)& (0+255),b
 10757  001B1E  0E00               	movlw	0
 10758  001B20  6F00               	movwf	_API_RW& (0+255),b
 10759                           
 10760                           ;api.c: 41: API_RW[2] = 1;
 10761  001B22  0E00               	movlw	0
 10762  001B24  0101               	movlb	1	; () banked
 10763  001B26  6F05               	movwf	(_API_RW+5)& (0+255),b
 10764  001B28  0E01               	movlw	1
 10765  001B2A  6F04               	movwf	(_API_RW+4)& (0+255),b
 10766                           
 10767                           ;api.c: 42: API_RW[3] = 1;
 10768  001B2C  0E00               	movlw	0
 10769  001B2E  0101               	movlb	1	; () banked
 10770  001B30  6F07               	movwf	(_API_RW+7)& (0+255),b
 10771  001B32  0E01               	movlw	1
 10772  001B34  6F06               	movwf	(_API_RW+6)& (0+255),b
 10773                           
 10774                           ;api.c: 43: API_RW[4] = 1;
 10775  001B36  0E00               	movlw	0
 10776  001B38  0101               	movlb	1	; () banked
 10777  001B3A  6F09               	movwf	(_API_RW+9)& (0+255),b
 10778  001B3C  0E01               	movlw	1
 10779  001B3E  6F08               	movwf	(_API_RW+8)& (0+255),b
 10780                           
 10781                           ;api.c: 44: API_RW[5] = 1;
 10782  001B40  0E00               	movlw	0
 10783  001B42  0101               	movlb	1	; () banked
 10784  001B44  6F0B               	movwf	(_API_RW+11)& (0+255),b
 10785  001B46  0E01               	movlw	1
 10786  001B48  6F0A               	movwf	(_API_RW+10)& (0+255),b
 10787                           
 10788                           ;api.c: 45: API_RW[6] = 1;
 10789  001B4A  0E00               	movlw	0
 10790  001B4C  0101               	movlb	1	; () banked
 10791  001B4E  6F0D               	movwf	(_API_RW+13)& (0+255),b
 10792  001B50  0E01               	movlw	1
 10793  001B52  6F0C               	movwf	(_API_RW+12)& (0+255),b
 10794                           
 10795                           ;api.c: 46: API_RW[7] = 1;
 10796  001B54  0E00               	movlw	0
 10797  001B56  0101               	movlb	1	; () banked
 10798  001B58  6F0F               	movwf	(_API_RW+15)& (0+255),b
 10799  001B5A  0E01               	movlw	1
 10800  001B5C  6F0E               	movwf	(_API_RW+14)& (0+255),b
 10801                           
 10802                           ;api.c: 47: API_RW[8] = 1;
 10803  001B5E  0E00               	movlw	0
 10804  001B60  0101               	movlb	1	; () banked
 10805  001B62  6F11               	movwf	(_API_RW+17)& (0+255),b
 10806  001B64  0E01               	movlw	1
 10807  001B66  6F10               	movwf	(_API_RW+16)& (0+255),b
 10808                           
 10809                           ;api.c: 48: API_RW[9] = 1;
 10810  001B68  0E00               	movlw	0
 10811  001B6A  0101               	movlb	1	; () banked
 10812  001B6C  6F13               	movwf	(_API_RW+19)& (0+255),b
 10813  001B6E  0E01               	movlw	1
 10814  001B70  6F12               	movwf	(_API_RW+18)& (0+255),b
 10815                           
 10816                           ;api.c: 49: API_RW[10] = 1;
 10817  001B72  0E00               	movlw	0
 10818  001B74  0101               	movlb	1	; () banked
 10819  001B76  6F15               	movwf	(_API_RW+21)& (0+255),b
 10820  001B78  0E01               	movlw	1
 10821  001B7A  6F14               	movwf	(_API_RW+20)& (0+255),b
 10822                           
 10823                           ;api.c: 50: API_RW[11] = 1;
 10824  001B7C  0E00               	movlw	0
 10825  001B7E  0101               	movlb	1	; () banked
 10826  001B80  6F17               	movwf	(_API_RW+23)& (0+255),b
 10827  001B82  0E01               	movlw	1
 10828  001B84  6F16               	movwf	(_API_RW+22)& (0+255),b
 10829                           
 10830                           ;api.c: 51: API_RW[12] = 0;
 10831  001B86  0E00               	movlw	0
 10832  001B88  0101               	movlb	1	; () banked
 10833  001B8A  6F19               	movwf	(_API_RW+25)& (0+255),b
 10834  001B8C  0E00               	movlw	0
 10835  001B8E  6F18               	movwf	(_API_RW+24)& (0+255),b
 10836                           
 10837                           ;api.c: 52: API_RW[13] = 0;
 10838  001B90  0E00               	movlw	0
 10839  001B92  0101               	movlb	1	; () banked
 10840  001B94  6F1B               	movwf	(_API_RW+27)& (0+255),b
 10841  001B96  0E00               	movlw	0
 10842  001B98  6F1A               	movwf	(_API_RW+26)& (0+255),b
 10843                           
 10844                           ;api.c: 53: API_RW[14] = 0;
 10845  001B9A  0E00               	movlw	0
 10846  001B9C  0101               	movlb	1	; () banked
 10847  001B9E  6F1D               	movwf	(_API_RW+29)& (0+255),b
 10848  001BA0  0E00               	movlw	0
 10849  001BA2  6F1C               	movwf	(_API_RW+28)& (0+255),b
 10850                           
 10851                           ;api.c: 54: API_RW[15] = 0;
 10852  001BA4  0E00               	movlw	0
 10853  001BA6  0101               	movlb	1	; () banked
 10854  001BA8  6F1F               	movwf	(_API_RW+31)& (0+255),b
 10855  001BAA  0E00               	movlw	0
 10856  001BAC  6F1E               	movwf	(_API_RW+30)& (0+255),b
 10857                           
 10858                           ;api.c: 55: API_RW[16] = 0;
 10859  001BAE  0E00               	movlw	0
 10860  001BB0  0101               	movlb	1	; () banked
 10861  001BB2  6F21               	movwf	(_API_RW+33)& (0+255),b
 10862  001BB4  0E00               	movlw	0
 10863  001BB6  6F20               	movwf	(_API_RW+32)& (0+255),b
 10864                           
 10865                           ;api.c: 56: API_RW[17] = 0;
 10866  001BB8  0E00               	movlw	0
 10867  001BBA  0101               	movlb	1	; () banked
 10868  001BBC  6F23               	movwf	(_API_RW+35)& (0+255),b
 10869  001BBE  0E00               	movlw	0
 10870  001BC0  6F22               	movwf	(_API_RW+34)& (0+255),b
 10871                           
 10872                           ;api.c: 57: API_RW[18] = 0;
 10873  001BC2  0E00               	movlw	0
 10874  001BC4  0101               	movlb	1	; () banked
 10875  001BC6  6F25               	movwf	(_API_RW+37)& (0+255),b
 10876  001BC8  0E00               	movlw	0
 10877  001BCA  6F24               	movwf	(_API_RW+36)& (0+255),b
 10878                           
 10879                           ;api.c: 58: API_RW[19] = 0;
 10880  001BCC  0E00               	movlw	0
 10881  001BCE  0101               	movlb	1	; () banked
 10882  001BD0  6F27               	movwf	(_API_RW+39)& (0+255),b
 10883  001BD2  0E00               	movlw	0
 10884  001BD4  6F26               	movwf	(_API_RW+38)& (0+255),b
 10885                           
 10886                           ;api.c: 59: API_RW[20] = 0;
 10887  001BD6  0E00               	movlw	0
 10888  001BD8  0101               	movlb	1	; () banked
 10889  001BDA  6F29               	movwf	(_API_RW+41)& (0+255),b
 10890  001BDC  0E00               	movlw	0
 10891  001BDE  6F28               	movwf	(_API_RW+40)& (0+255),b
 10892                           
 10893                           ;api.c: 60: API_RW[21] = 0;
 10894  001BE0  0E00               	movlw	0
 10895  001BE2  0101               	movlb	1	; () banked
 10896  001BE4  6F2B               	movwf	(_API_RW+43)& (0+255),b
 10897  001BE6  0E00               	movlw	0
 10898  001BE8  6F2A               	movwf	(_API_RW+42)& (0+255),b
 10899                           
 10900                           ;api.c: 61: API_RW[22] = 0;
 10901  001BEA  0E00               	movlw	0
 10902  001BEC  0101               	movlb	1	; () banked
 10903  001BEE  6F2D               	movwf	(_API_RW+45)& (0+255),b
 10904  001BF0  0E00               	movlw	0
 10905  001BF2  6F2C               	movwf	(_API_RW+44)& (0+255),b
 10906                           
 10907                           ;api.c: 62: API_RW[23] = 1;
 10908  001BF4  0E00               	movlw	0
 10909  001BF6  0101               	movlb	1	; () banked
 10910  001BF8  6F2F               	movwf	(_API_RW+47)& (0+255),b
 10911  001BFA  0E01               	movlw	1
 10912  001BFC  6F2E               	movwf	(_API_RW+46)& (0+255),b
 10913                           
 10914                           ;api.c: 63: API_RW[24] = 1;
 10915  001BFE  0E00               	movlw	0
 10916  001C00  0101               	movlb	1	; () banked
 10917  001C02  6F31               	movwf	(_API_RW+49)& (0+255),b
 10918  001C04  0E01               	movlw	1
 10919  001C06  6F30               	movwf	(_API_RW+48)& (0+255),b
 10920                           
 10921                           ;api.c: 64: API_RW[25] = 0;
 10922  001C08  0E00               	movlw	0
 10923  001C0A  0101               	movlb	1	; () banked
 10924  001C0C  6F33               	movwf	(_API_RW+51)& (0+255),b
 10925  001C0E  0E00               	movlw	0
 10926  001C10  6F32               	movwf	(_API_RW+50)& (0+255),b
 10927                           
 10928                           ;api.c: 65: API_RW[26] = 0;
 10929  001C12  0E00               	movlw	0
 10930  001C14  0101               	movlb	1	; () banked
 10931  001C16  6F35               	movwf	(_API_RW+53)& (0+255),b
 10932  001C18  0E00               	movlw	0
 10933  001C1A  6F34               	movwf	(_API_RW+52)& (0+255),b
 10934                           
 10935                           ;api.c: 66: API_RW[27] = 0;
 10936  001C1C  0E00               	movlw	0
 10937  001C1E  0101               	movlb	1	; () banked
 10938  001C20  6F37               	movwf	(_API_RW+55)& (0+255),b
 10939  001C22  0E00               	movlw	0
 10940  001C24  6F36               	movwf	(_API_RW+54)& (0+255),b
 10941                           
 10942                           ;api.c: 67: API_RW[28] = 0;
 10943  001C26  0E00               	movlw	0
 10944  001C28  0101               	movlb	1	; () banked
 10945  001C2A  6F39               	movwf	(_API_RW+57)& (0+255),b
 10946  001C2C  0E00               	movlw	0
 10947  001C2E  6F38               	movwf	(_API_RW+56)& (0+255),b
 10948                           
 10949                           ;api.c: 71: API[0] = 63;
 10950  001C30  0E00               	movlw	0
 10951  001C32  0100               	movlb	0	; () banked
 10952  001C34  6F61               	movwf	(_API+1)& (0+255),b
 10953  001C36  0E3F               	movlw	63
 10954  001C38  6F60               	movwf	_API& (0+255),b
 10955                           
 10956                           ;api.c: 72: API[2] = 10000;
 10957  001C3A  0E27               	movlw	39
 10958  001C3C  0100               	movlb	0	; () banked
 10959  001C3E  6F65               	movwf	(_API+5)& (0+255),b
 10960  001C40  0E10               	movlw	16
 10961  001C42  6F64               	movwf	(_API+4)& (0+255),b
 10962                           
 10963                           ;api.c: 73: API[3] = 800;
 10964  001C44  0E03               	movlw	3
 10965  001C46  0100               	movlb	0	; () banked
 10966  001C48  6F67               	movwf	(_API+7)& (0+255),b
 10967  001C4A  0E20               	movlw	32
 10968  001C4C  6F66               	movwf	(_API+6)& (0+255),b
 10969                           
 10970                           ;api.c: 74: API[4] = 5000;
 10971  001C4E  0E13               	movlw	19
 10972  001C50  0100               	movlb	0	; () banked
 10973  001C52  6F69               	movwf	(_API+9)& (0+255),b
 10974  001C54  0E88               	movlw	136
 10975  001C56  6F68               	movwf	(_API+8)& (0+255),b
 10976                           
 10977                           ;api.c: 75: API[5] = 20;
 10978  001C58  0E00               	movlw	0
 10979  001C5A  0100               	movlb	0	; () banked
 10980  001C5C  6F6B               	movwf	(_API+11)& (0+255),b
 10981  001C5E  0E14               	movlw	20
 10982  001C60  6F6A               	movwf	(_API+10)& (0+255),b
 10983                           
 10984                           ;api.c: 76: API[6] = 20;
 10985  001C62  0E00               	movlw	0
 10986  001C64  0100               	movlb	0	; () banked
 10987  001C66  6F6D               	movwf	(_API+13)& (0+255),b
 10988  001C68  0E14               	movlw	20
 10989  001C6A  6F6C               	movwf	(_API+12)& (0+255),b
 10990                           
 10991                           ;api.c: 77: API[7] = 107;
 10992  001C6C  0E00               	movlw	0
 10993  001C6E  0100               	movlb	0	; () banked
 10994  001C70  6F6F               	movwf	(_API+15)& (0+255),b
 10995  001C72  0E6B               	movlw	107
 10996  001C74  6F6E               	movwf	(_API+14)& (0+255),b
 10997                           
 10998                           ;api.c: 78: API[8] = 107;
 10999  001C76  0E00               	movlw	0
 11000  001C78  0100               	movlb	0	; () banked
 11001  001C7A  6F71               	movwf	(_API+17)& (0+255),b
 11002  001C7C  0E6B               	movlw	107
 11003  001C7E  6F70               	movwf	(_API+16)& (0+255),b
 11004                           
 11005                           ;api.c: 79: API[9] = 80;
 11006  001C80  0E00               	movlw	0
 11007  001C82  0100               	movlb	0	; () banked
 11008  001C84  6F73               	movwf	(_API+19)& (0+255),b
 11009  001C86  0E50               	movlw	80
 11010  001C88  6F72               	movwf	(_API+18)& (0+255),b
 11011                           
 11012                           ;api.c: 80: API[10] = 45;
 11013  001C8A  0E00               	movlw	0
 11014  001C8C  0100               	movlb	0	; () banked
 11015  001C8E  6F75               	movwf	(_API+21)& (0+255),b
 11016  001C90  0E2D               	movlw	45
 11017  001C92  6F74               	movwf	(_API+20)& (0+255),b
 11018                           
 11019                           ;api.c: 81: API[11] = 20;
 11020  001C94  0E00               	movlw	0
 11021  001C96  0100               	movlb	0	; () banked
 11022  001C98  6F77               	movwf	(_API+23)& (0+255),b
 11023  001C9A  0E14               	movlw	20
 11024  001C9C  6F76               	movwf	(_API+22)& (0+255),b
 11025                           
 11026                           ;api.c: 82: API[12] = 0;
 11027  001C9E  0E00               	movlw	0
 11028  001CA0  0100               	movlb	0	; () banked
 11029  001CA2  6F79               	movwf	(_API+25)& (0+255),b
 11030  001CA4  0E00               	movlw	0
 11031  001CA6  6F78               	movwf	(_API+24)& (0+255),b
 11032                           
 11033                           ;api.c: 83: API[13] = 0;
 11034  001CA8  0E00               	movlw	0
 11035  001CAA  0100               	movlb	0	; () banked
 11036  001CAC  6F7B               	movwf	(_API+27)& (0+255),b
 11037  001CAE  0E00               	movlw	0
 11038  001CB0  6F7A               	movwf	(_API+26)& (0+255),b
 11039                           
 11040                           ;api.c: 84: API[14] = 0;
 11041  001CB2  0E00               	movlw	0
 11042  001CB4  0100               	movlb	0	; () banked
 11043  001CB6  6F7D               	movwf	(_API+29)& (0+255),b
 11044  001CB8  0E00               	movlw	0
 11045  001CBA  6F7C               	movwf	(_API+28)& (0+255),b
 11046                           
 11047                           ;api.c: 85: API[15] = 0;
 11048  001CBC  0E00               	movlw	0
 11049  001CBE  0100               	movlb	0	; () banked
 11050  001CC0  6F7F               	movwf	(_API+31)& (0+255),b
 11051  001CC2  0E00               	movlw	0
 11052  001CC4  6F7E               	movwf	(_API+30)& (0+255),b
 11053                           
 11054                           ;api.c: 86: API[16] = 0;
 11055  001CC6  0E00               	movlw	0
 11056  001CC8  0100               	movlb	0	; () banked
 11057  001CCA  6F81               	movwf	(_API+33)& (0+255),b
 11058  001CCC  0E00               	movlw	0
 11059  001CCE  6F80               	movwf	(_API+32)& (0+255),b
 11060                           
 11061                           ;api.c: 87: API[17] = 0;
 11062  001CD0  0E00               	movlw	0
 11063  001CD2  0100               	movlb	0	; () banked
 11064  001CD4  6F83               	movwf	(_API+35)& (0+255),b
 11065  001CD6  0E00               	movlw	0
 11066  001CD8  6F82               	movwf	(_API+34)& (0+255),b
 11067                           
 11068                           ;api.c: 88: API[18] = 0;
 11069  001CDA  0E00               	movlw	0
 11070  001CDC  0100               	movlb	0	; () banked
 11071  001CDE  6F85               	movwf	(_API+37)& (0+255),b
 11072  001CE0  0E00               	movlw	0
 11073  001CE2  6F84               	movwf	(_API+36)& (0+255),b
 11074                           
 11075                           ;api.c: 89: API[19] = 0;
 11076  001CE4  0E00               	movlw	0
 11077  001CE6  0100               	movlb	0	; () banked
 11078  001CE8  6F87               	movwf	(_API+39)& (0+255),b
 11079  001CEA  0E00               	movlw	0
 11080  001CEC  6F86               	movwf	(_API+38)& (0+255),b
 11081                           
 11082                           ;api.c: 90: API[20] = 0;
 11083  001CEE  0E00               	movlw	0
 11084  001CF0  0100               	movlb	0	; () banked
 11085  001CF2  6F89               	movwf	(_API+41)& (0+255),b
 11086  001CF4  0E00               	movlw	0
 11087  001CF6  6F88               	movwf	(_API+40)& (0+255),b
 11088                           
 11089                           ;api.c: 91: API[21] = 0;
 11090  001CF8  0E00               	movlw	0
 11091  001CFA  0100               	movlb	0	; () banked
 11092  001CFC  6F8B               	movwf	(_API+43)& (0+255),b
 11093  001CFE  0E00               	movlw	0
 11094  001D00  6F8A               	movwf	(_API+42)& (0+255),b
 11095                           
 11096                           ;api.c: 92: API[22] = 0;
 11097  001D02  0E00               	movlw	0
 11098  001D04  0100               	movlb	0	; () banked
 11099  001D06  6F8D               	movwf	(_API+45)& (0+255),b
 11100  001D08  0E00               	movlw	0
 11101  001D0A  6F8C               	movwf	(_API+44)& (0+255),b
 11102                           
 11103                           ;api.c: 93: API[23] = 9;
 11104  001D0C  0E00               	movlw	0
 11105  001D0E  0100               	movlb	0	; () banked
 11106  001D10  6F8F               	movwf	(_API+47)& (0+255),b
 11107  001D12  0E09               	movlw	9
 11108  001D14  6F8E               	movwf	(_API+46)& (0+255),b
 11109                           
 11110                           ;api.c: 94: API[24] = 9;
 11111  001D16  0E00               	movlw	0
 11112  001D18  0100               	movlb	0	; () banked
 11113  001D1A  6F91               	movwf	(_API+49)& (0+255),b
 11114  001D1C  0E09               	movlw	9
 11115  001D1E  6F90               	movwf	(_API+48)& (0+255),b
 11116                           
 11117                           ;api.c: 95: API[25] = 0;
 11118  001D20  0E00               	movlw	0
 11119  001D22  0100               	movlb	0	; () banked
 11120  001D24  6F93               	movwf	(_API+51)& (0+255),b
 11121  001D26  0E00               	movlw	0
 11122  001D28  6F92               	movwf	(_API+50)& (0+255),b
 11123                           
 11124                           ;api.c: 96: API[26] = 0;
 11125  001D2A  0E00               	movlw	0
 11126  001D2C  0100               	movlb	0	; () banked
 11127  001D2E  6F95               	movwf	(_API+53)& (0+255),b
 11128  001D30  0E00               	movlw	0
 11129  001D32  6F94               	movwf	(_API+52)& (0+255),b
 11130                           
 11131                           ;api.c: 97: API[27] = 0;
 11132  001D34  0E00               	movlw	0
 11133  001D36  0100               	movlb	0	; () banked
 11134  001D38  6F97               	movwf	(_API+55)& (0+255),b
 11135  001D3A  0E00               	movlw	0
 11136  001D3C  6F96               	movwf	(_API+54)& (0+255),b
 11137                           
 11138                           ;api.c: 98: API[28] = 0;
 11139  001D3E  0E00               	movlw	0
 11140  001D40  0100               	movlb	0	; () banked
 11141  001D42  6F99               	movwf	(_API+57)& (0+255),b
 11142  001D44  0E00               	movlw	0
 11143  001D46  6F98               	movwf	(_API+56)& (0+255),b
 11144                           
 11145                           ;api.c: 99: API[29] = 107;
 11146  001D48  0E00               	movlw	0
 11147  001D4A  0100               	movlb	0	; () banked
 11148  001D4C  6F9B               	movwf	(_API+59)& (0+255),b
 11149  001D4E  0E6B               	movlw	107
 11150  001D50  6F9A               	movwf	(_API+58)& (0+255),b
 11151                           
 11152                           ;api.c: 100: API[30] = 107;
 11153  001D52  0E00               	movlw	0
 11154  001D54  0100               	movlb	0	; () banked
 11155  001D56  6F9D               	movwf	(_API+61)& (0+255),b
 11156  001D58  0E6B               	movlw	107
 11157  001D5A  6F9C               	movwf	(_API+60)& (0+255),b
 11158                           
 11159                           ;api.c: 101: API[31] = 107;
 11160  001D5C  0E00               	movlw	0
 11161  001D5E  0100               	movlb	0	; () banked
 11162  001D60  6F9F               	movwf	(_API+63)& (0+255),b
 11163  001D62  0E6B               	movlw	107
 11164  001D64  6F9E               	movwf	(_API+62)& (0+255),b
 11165                           
 11166                           ;api.c: 102: API[32] = 107;
 11167  001D66  0E00               	movlw	0
 11168  001D68  0100               	movlb	0	; () banked
 11169  001D6A  6FA1               	movwf	(_API+65)& (0+255),b
 11170  001D6C  0E6B               	movlw	107
 11171  001D6E  6FA0               	movwf	(_API+64)& (0+255),b
 11172                           
 11173                           ;api.c: 103: API[33] = 107;
 11174  001D70  0E00               	movlw	0
 11175  001D72  0100               	movlb	0	; () banked
 11176  001D74  6FA3               	movwf	(_API+67)& (0+255),b
 11177  001D76  0E6B               	movlw	107
 11178  001D78  6FA2               	movwf	(_API+66)& (0+255),b
 11179                           
 11180                           ;api.c: 104: API[34] = 107;
 11181  001D7A  0E00               	movlw	0
 11182  001D7C  0100               	movlb	0	; () banked
 11183  001D7E  6FA5               	movwf	(_API+69)& (0+255),b
 11184  001D80  0E6B               	movlw	107
 11185  001D82  6FA4               	movwf	(_API+68)& (0+255),b
 11186                           
 11187                           ;api.c: 105: API[35] = 107;
 11188  001D84  0E00               	movlw	0
 11189  001D86  0100               	movlb	0	; () banked
 11190  001D88  6FA7               	movwf	(_API+71)& (0+255),b
 11191  001D8A  0E6B               	movlw	107
 11192  001D8C  6FA6               	movwf	(_API+70)& (0+255),b
 11193                           
 11194                           ;api.c: 106: API[36] = 107;
 11195  001D8E  0E00               	movlw	0
 11196  001D90  0100               	movlb	0	; () banked
 11197  001D92  6FA9               	movwf	(_API+73)& (0+255),b
 11198  001D94  0E6B               	movlw	107
 11199  001D96  6FA8               	movwf	(_API+72)& (0+255),b
 11200                           
 11201                           ;api.c: 107: API[37] = 100;
 11202  001D98  0E00               	movlw	0
 11203  001D9A  0100               	movlb	0	; () banked
 11204  001D9C  6FAB               	movwf	(_API+75)& (0+255),b
 11205  001D9E  0E64               	movlw	100
 11206  001DA0  6FAA               	movwf	(_API+74)& (0+255),b
 11207                           
 11208                           ;api.c: 108: API[38] = 100;
 11209  001DA2  0E00               	movlw	0
 11210  001DA4  0100               	movlb	0	; () banked
 11211  001DA6  6FAD               	movwf	(_API+77)& (0+255),b
 11212  001DA8  0E64               	movlw	100
 11213  001DAA  6FAC               	movwf	(_API+76)& (0+255),b
 11214                           
 11215                           ;api.c: 109: API[39] = 100;
 11216  001DAC  0E00               	movlw	0
 11217  001DAE  0100               	movlb	0	; () banked
 11218  001DB0  6FAF               	movwf	(_API+79)& (0+255),b
 11219  001DB2  0E64               	movlw	100
 11220  001DB4  6FAE               	movwf	(_API+78)& (0+255),b
 11221                           
 11222                           ;api.c: 110: API[40] = 100;
 11223  001DB6  0E00               	movlw	0
 11224  001DB8  0100               	movlb	0	; () banked
 11225  001DBA  6FB1               	movwf	(_API+81)& (0+255),b
 11226  001DBC  0E64               	movlw	100
 11227  001DBE  6FB0               	movwf	(_API+80)& (0+255),b
 11228                           
 11229                           ;api.c: 111: API[41] = 100;
 11230  001DC0  0E00               	movlw	0
 11231  001DC2  0100               	movlb	0	; () banked
 11232  001DC4  6FB3               	movwf	(_API+83)& (0+255),b
 11233  001DC6  0E64               	movlw	100
 11234  001DC8  6FB2               	movwf	(_API+82)& (0+255),b
 11235                           
 11236                           ;api.c: 112: API[42] = 100;
 11237  001DCA  0E00               	movlw	0
 11238  001DCC  0100               	movlb	0	; () banked
 11239  001DCE  6FB5               	movwf	(_API+85)& (0+255),b
 11240  001DD0  0E64               	movlw	100
 11241  001DD2  6FB4               	movwf	(_API+84)& (0+255),b
 11242                           
 11243                           ;api.c: 113: API[43] = 100;
 11244  001DD4  0E00               	movlw	0
 11245  001DD6  0100               	movlb	0	; () banked
 11246  001DD8  6FB7               	movwf	(_API+87)& (0+255),b
 11247  001DDA  0E64               	movlw	100
 11248  001DDC  6FB6               	movwf	(_API+86)& (0+255),b
 11249                           
 11250                           ;api.c: 114: API[44] = 100;
 11251  001DDE  0E00               	movlw	0
 11252  001DE0  0100               	movlb	0	; () banked
 11253  001DE2  6FB9               	movwf	(_API+89)& (0+255),b
 11254  001DE4  0E64               	movlw	100
 11255  001DE6  6FB8               	movwf	(_API+88)& (0+255),b
 11256                           
 11257                           ; BSR set to: 0
 11258  001DE8  0012               	return		;funcret
 11259  001DEA                     __end_of_APIxInitialize:
 11260                           	opt stack 0
 11261                           tblptru	equ	0xFF8
 11262                           tblptrh	equ	0xFF7
 11263                           tblptrl	equ	0xFF6
 11264                           tablat	equ	0xFF5
 11265                           prodh	equ	0xFF4
 11266                           prodl	equ	0xFF3
 11267                           intcon	equ	0xFF2
 11268                           intcon2	equ	0xFF1
 11269                           postinc0	equ	0xFEE
 11270                           wreg	equ	0xFE8
 11271                           postdec1	equ	0xFE5
 11272                           fsr1l	equ	0xFE1
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           fsr2h	equ	0xFDA
 11276                           fsr2l	equ	0xFD9
 11277                           status	equ	0xFD8
 11278                           
 11279 ;; *************** function _tc_low *****************
 11280 ;; Defined at:
 11281 ;;		line 145 in file "../Main.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;		None
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;		None
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  1    wreg      void 
 11288 ;; Registers used:
 11289 ;;		None
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11295 ;;      Params:         0       0       0       0       0       0       0       0       0
 11296 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11297 ;;      Temps:         17       0       0       0       0       0       0       0       0
 11298 ;;      Totals:        17       0       0       0       0       0       0       0       0
 11299 ;;Total ram usage:       17 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    3
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		Interrupt level 1
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	intcodelo
 11310  000018                     __pintcodelo:
 11311                           	opt stack 0
 11312  000018                     _tc_low:
 11313                           	opt stack 22
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;incstack = 0
 11317  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 11318  00001A  CFD8 F03B          	movff	status,??_tc_low
 11319  00001E  CFE8 F03C          	movff	wreg,??_tc_low+1
 11320  000022  CFE0 F03D          	movff	bsr,??_tc_low+2
 11321  000026  CFFA F03E          	movff	pclath,??_tc_low+3
 11322  00002A  CFFB F03F          	movff	pclatu,??_tc_low+4
 11323  00002E  CFE9 F040          	movff	fsr0l,??_tc_low+5
 11324  000032  CFEA F041          	movff	fsr0h,??_tc_low+6
 11325  000036  CFE1 F042          	movff	fsr1l,??_tc_low+7
 11326  00003A  CFE2 F043          	movff	fsr1h,??_tc_low+8
 11327  00003E  CFD9 F044          	movff	fsr2l,??_tc_low+9
 11328  000042  CFDA F045          	movff	fsr2h,??_tc_low+10
 11329  000046  CFF3 F046          	movff	prodl,??_tc_low+11
 11330  00004A  CFF4 F047          	movff	prodh,??_tc_low+12
 11331  00004E  CFF6 F048          	movff	tblptrl,??_tc_low+13
 11332  000052  CFF7 F049          	movff	tblptrh,??_tc_low+14
 11333  000056  CFF8 F04A          	movff	tblptru,??_tc_low+15
 11334  00005A  CFF5 F04B          	movff	tablat,??_tc_low+16
 11335  00005E  C04B  FFF5         	movff	??_tc_low+16,tablat
 11336  000062  C04A  FFF8         	movff	??_tc_low+15,tblptru
 11337  000066  C049  FFF7         	movff	??_tc_low+14,tblptrh
 11338  00006A  C048  FFF6         	movff	??_tc_low+13,tblptrl
 11339  00006E  C047  FFF4         	movff	??_tc_low+12,prodh
 11340  000072  C046  FFF3         	movff	??_tc_low+11,prodl
 11341  000076  C045  FFDA         	movff	??_tc_low+10,fsr2h
 11342  00007A  C044  FFD9         	movff	??_tc_low+9,fsr2l
 11343  00007E  C043  FFE2         	movff	??_tc_low+8,fsr1h
 11344  000082  C042  FFE1         	movff	??_tc_low+7,fsr1l
 11345  000086  C041  FFEA         	movff	??_tc_low+6,fsr0h
 11346  00008A  C040  FFE9         	movff	??_tc_low+5,fsr0l
 11347  00008E  C03F  FFFB         	movff	??_tc_low+4,pclatu
 11348  000092  C03E  FFFA         	movff	??_tc_low+3,pclath
 11349  000096  C03D  FFE0         	movff	??_tc_low+2,bsr
 11350  00009A  C03C  FFE8         	movff	??_tc_low+1,wreg
 11351  00009E  C03B  FFD8         	movff	??_tc_low,status
 11352  0000A2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 11353  0000A4  0010               	retfie	
 11354  0000A6                     __end_of_tc_low:
 11355                           	opt stack 0
 11356                           pclatu	equ	0xFFB
 11357                           pclath	equ	0xFFA
 11358                           tblptru	equ	0xFF8
 11359                           tblptrh	equ	0xFF7
 11360                           tblptrl	equ	0xFF6
 11361                           tablat	equ	0xFF5
 11362                           prodh	equ	0xFF4
 11363                           prodl	equ	0xFF3
 11364                           intcon	equ	0xFF2
 11365                           intcon2	equ	0xFF1
 11366                           postinc0	equ	0xFEE
 11367                           fsr0h	equ	0xFEA
 11368                           fsr0l	equ	0xFE9
 11369                           wreg	equ	0xFE8
 11370                           postdec1	equ	0xFE5
 11371                           fsr1h	equ	0xFE2
 11372                           fsr1l	equ	0xFE1
 11373                           bsr	equ	0xFE0
 11374                           postinc2	equ	0xFDE
 11375                           postdec2	equ	0xFDD
 11376                           fsr2h	equ	0xFDA
 11377                           fsr2l	equ	0xFD9
 11378                           status	equ	0xFD8
 11379                           
 11380 ;; *************** function _tc_high *****************
 11381 ;; Defined at:
 11382 ;;		line 149 in file "../Main.c"
 11383 ;; Parameters:    Size  Location     Type
 11384 ;;		None
 11385 ;; Auto vars:     Size  Location     Type
 11386 ;;		None
 11387 ;; Return value:  Size  Location     Type
 11388 ;;                  1    wreg      void 
 11389 ;; Registers used:
 11390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11391 ;; Tracked objects:
 11392 ;;		On entry : 0/0
 11393 ;;		On exit  : 0/0
 11394 ;;		Unchanged: 0/0
 11395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11396 ;;      Params:         0       0       0       0       0       0       0       0       0
 11397 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11398 ;;      Temps:         14       0       0       0       0       0       0       0       0
 11399 ;;      Totals:        14       0       0       0       0       0       0       0       0
 11400 ;;Total ram usage:       14 bytes
 11401 ;; Hardware stack levels used:    1
 11402 ;; Hardware stack levels required when called:    2
 11403 ;; This function calls:
 11404 ;;		_EUSART1_Receive_ISR
 11405 ;;		_EUSART1_Transmit_ISR
 11406 ;;		_UPDATExTERMINAL
 11407 ;; This function is called by:
 11408 ;;		Interrupt level 2
 11409 ;; This function uses a non-reentrant model
 11410 ;;
 11411                           
 11412                           	psect	intcode
 11413  000008                     __pintcode:
 11414                           	opt stack 0
 11415  000008                     _tc_high:
 11416                           	opt stack 22
 11417                           
 11418                           ;incstack = 0
 11419  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11420  00000A  CFFA F02D          	movff	pclath,??_tc_high
 11421  00000E  CFFB F02E          	movff	pclatu,??_tc_high+1
 11422  000012  ED25  F014         	call	int_func,f	;refresh shadow registers
 11423                           pclatu	equ	0xFFB
 11424                           pclath	equ	0xFFA
 11425                           tblptru	equ	0xFF8
 11426                           tblptrh	equ	0xFF7
 11427                           tblptrl	equ	0xFF6
 11428                           tablat	equ	0xFF5
 11429                           prodh	equ	0xFF4
 11430                           prodl	equ	0xFF3
 11431                           intcon	equ	0xFF2
 11432                           intcon2	equ	0xFF1
 11433                           postinc0	equ	0xFEE
 11434                           fsr0h	equ	0xFEA
 11435                           fsr0l	equ	0xFE9
 11436                           wreg	equ	0xFE8
 11437                           postdec1	equ	0xFE5
 11438                           fsr1h	equ	0xFE2
 11439                           fsr1l	equ	0xFE1
 11440                           bsr	equ	0xFE0
 11441                           postinc2	equ	0xFDE
 11442                           postdec2	equ	0xFDD
 11443                           fsr2h	equ	0xFDA
 11444                           fsr2l	equ	0xFD9
 11445                           status	equ	0xFD8
 11446                           
 11447                           	psect	intcode_body
 11448  00284A                     __pintcode_body:
 11449                           	opt stack 22
 11450  00284A                     int_func:
 11451                           	opt stack 22
 11452  00284A  0006               	pop		; remove dummy address from shadow register refresh
 11453  00284C  CFE9 F02F          	movff	fsr0l,??_tc_high+2
 11454  002850  CFEA F030          	movff	fsr0h,??_tc_high+3
 11455  002854  CFE1 F031          	movff	fsr1l,??_tc_high+4
 11456  002858  CFE2 F032          	movff	fsr1h,??_tc_high+5
 11457  00285C  CFD9 F033          	movff	fsr2l,??_tc_high+6
 11458  002860  CFDA F034          	movff	fsr2h,??_tc_high+7
 11459  002864  CFF3 F035          	movff	prodl,??_tc_high+8
 11460  002868  CFF4 F036          	movff	prodh,??_tc_high+9
 11461  00286C  CFF6 F037          	movff	tblptrl,??_tc_high+10
 11462  002870  CFF7 F038          	movff	tblptrh,??_tc_high+11
 11463  002874  CFF8 F039          	movff	tblptru,??_tc_high+12
 11464  002878  CFF5 F03A          	movff	tablat,??_tc_high+13
 11465                           
 11466                           ;Main.c: 151: if (INTCONbits.TMR0IF)
 11467  00287C  A4F2               	btfss	intcon,2,c	;volatile
 11468  00287E  D020               	goto	i2l6380
 11469                           
 11470                           ;Main.c: 152: {
 11471                           ;Main.c: 153: if(Led1_Counter <= 100)
 11472  002880  0100               	movlb	0	; () banked
 11473  002882  51EB               	movf	(_Led1_Counter+1)& (0+255),w,b
 11474  002884  E107               	bnz	i2l94
 11475  002886  0E65               	movlw	101
 11476  002888  0100               	movlb	0	; () banked
 11477  00288A  5DEA               	subwf	_Led1_Counter& (0+255),w,b
 11478  00288C  B0D8               	btfsc	status,0,c
 11479  00288E  D002               	goto	i2l94
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;Main.c: 154: {
 11483                           ;Main.c: 155: PORTAbits.RA4 = 1;
 11484  002890  8880               	bsf	3968,4,c	;volatile
 11485                           
 11486                           ;Main.c: 156: }
 11487  002892  D001               	goto	i2l6368
 11488  002894                     i2l94:
 11489                           
 11490                           ; BSR set to: 0
 11491                           ;Main.c: 157: else
 11492                           ;Main.c: 158: {
 11493                           ;Main.c: 159: PORTAbits.RA4 = 0;
 11494  002894  9880               	bcf	3968,4,c	;volatile
 11495  002896                     i2l6368:
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;Main.c: 160: }
 11499                           ;Main.c: 161: if(Led1_Counter >= 700)
 11500  002896  0EBC               	movlw	188
 11501  002898  0100               	movlb	0	; () banked
 11502  00289A  5DEA               	subwf	_Led1_Counter& (0+255),w,b
 11503  00289C  0E02               	movlw	2
 11504  00289E  0100               	movlb	0	; () banked
 11505  0028A0  59EB               	subwfb	(_Led1_Counter+1)& (0+255),w,b
 11506  0028A2  A0D8               	btfss	status,0,c
 11507  0028A4  D007               	goto	i2l6374
 11508                           
 11509                           ; BSR set to: 0
 11510                           ;Main.c: 162: {
 11511                           ;Main.c: 163: Led1_Counter = 0;
 11512  0028A6  0E00               	movlw	0
 11513  0028A8  0100               	movlb	0	; () banked
 11514  0028AA  6FEB               	movwf	(_Led1_Counter+1)& (0+255),b
 11515  0028AC  0E00               	movlw	0
 11516  0028AE  6FEA               	movwf	_Led1_Counter& (0+255),b
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;Main.c: 164: UPDATExTERMINAL();
 11520  0028B0  ECE7  F016         	call	_UPDATExTERMINAL	;wreg free
 11521  0028B4                     i2l6374:
 11522                           
 11523                           ;Main.c: 165: }
 11524                           ;Main.c: 166: Led1_Counter++;
 11525  0028B4  0100               	movlb	0	; () banked
 11526  0028B6  4BEA               	infsnz	_Led1_Counter& (0+255),f,b
 11527  0028B8  2BEB               	incf	(_Led1_Counter+1)& (0+255),f,b
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;Main.c: 167: Update_State_Machine = 1;
 11531  0028BA  0E01               	movlw	1
 11532  0028BC  6E25               	movwf	_Update_State_Machine,c
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;Main.c: 168: INTCONbits.TMR0IF = 0;
 11536  0028BE  94F2               	bcf	intcon,2,c	;volatile
 11537  0028C0                     i2l6380:
 11538                           
 11539                           ;Main.c: 169: }
 11540                           ;Main.c: 171: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 11541  0028C0  BA9D               	btfsc	3997,5,c	;volatile
 11542  0028C2  AA9E               	btfss	3998,5,c	;volatile
 11543  0028C4  D002               	goto	i2l6386
 11544                           
 11545                           ;Main.c: 172: EUSART1_Receive_ISR();
 11546  0028C6  ECA5  F016         	call	_EUSART1_Receive_ISR	;wreg free
 11547  0028CA                     i2l6386:
 11548                           
 11549                           ;Main.c: 173: }
 11550                           ;Main.c: 174: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 11551  0028CA  B89D               	btfsc	3997,4,c	;volatile
 11552  0028CC  A89E               	btfss	3998,4,c	;volatile
 11553  0028CE  D002               	goto	i2l99
 11554                           
 11555                           ;Main.c: 175: EUSART1_Transmit_ISR();
 11556  0028D0  EC78  F016         	call	_EUSART1_Transmit_ISR	;wreg free
 11557  0028D4                     i2l99:
 11558  0028D4  C03A  FFF5         	movff	??_tc_high+13,tablat
 11559  0028D8  C039  FFF8         	movff	??_tc_high+12,tblptru
 11560  0028DC  C038  FFF7         	movff	??_tc_high+11,tblptrh
 11561  0028E0  C037  FFF6         	movff	??_tc_high+10,tblptrl
 11562  0028E4  C036  FFF4         	movff	??_tc_high+9,prodh
 11563  0028E8  C035  FFF3         	movff	??_tc_high+8,prodl
 11564  0028EC  C034  FFDA         	movff	??_tc_high+7,fsr2h
 11565  0028F0  C033  FFD9         	movff	??_tc_high+6,fsr2l
 11566  0028F4  C032  FFE2         	movff	??_tc_high+5,fsr1h
 11567  0028F8  C031  FFE1         	movff	??_tc_high+4,fsr1l
 11568  0028FC  C030  FFEA         	movff	??_tc_high+3,fsr0h
 11569  002900  C02F  FFE9         	movff	??_tc_high+2,fsr0l
 11570  002904  C02E  FFFB         	movff	??_tc_high+1,pclatu
 11571  002908  C02D  FFFA         	movff	??_tc_high,pclath
 11572  00290C  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11573  00290E  0011               	retfie		f
 11574  002910                     __end_of_tc_high:
 11575                           	opt stack 0
 11576                           pclatu	equ	0xFFB
 11577                           pclath	equ	0xFFA
 11578                           tblptru	equ	0xFF8
 11579                           tblptrh	equ	0xFF7
 11580                           tblptrl	equ	0xFF6
 11581                           tablat	equ	0xFF5
 11582                           prodh	equ	0xFF4
 11583                           prodl	equ	0xFF3
 11584                           intcon	equ	0xFF2
 11585                           intcon2	equ	0xFF1
 11586                           postinc0	equ	0xFEE
 11587                           fsr0h	equ	0xFEA
 11588                           fsr0l	equ	0xFE9
 11589                           wreg	equ	0xFE8
 11590                           postdec1	equ	0xFE5
 11591                           fsr1h	equ	0xFE2
 11592                           fsr1l	equ	0xFE1
 11593                           bsr	equ	0xFE0
 11594                           postinc2	equ	0xFDE
 11595                           postdec2	equ	0xFDD
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function _UPDATExTERMINAL *****************
 11601 ;; Defined at:
 11602 ;;		line 21 in file "../terminal.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;		None
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;		None
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      void 
 11609 ;; Registers used:
 11610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11611 ;; Tracked objects:
 11612 ;;		On entry : 0/0
 11613 ;;		On exit  : 0/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11616 ;;      Params:         0       0       0       0       0       0       0       0       0
 11617 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11618 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11619 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11620 ;;Total ram usage:        0 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:    1
 11623 ;; This function calls:
 11624 ;;		_EUSART1_Write
 11625 ;; This function is called by:
 11626 ;;		_tc_high
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text29
 11631  002DCE                     __ptext29:
 11632                           	opt stack 0
 11633  002DCE                     _UPDATExTERMINAL:
 11634                           	opt stack 22
 11635                           
 11636                           ;terminal.c: 22: EUSART1_Write('A');
 11637                           
 11638                           ;incstack = 0
 11639  002DCE  0E41               	movlw	65
 11640  002DD0  EC2A  F016         	call	_EUSART1_Write
 11641  002DD4  0012               	return		;funcret
 11642  002DD6                     __end_of_UPDATExTERMINAL:
 11643                           	opt stack 0
 11644                           pclatu	equ	0xFFB
 11645                           pclath	equ	0xFFA
 11646                           tblptru	equ	0xFF8
 11647                           tblptrh	equ	0xFF7
 11648                           tblptrl	equ	0xFF6
 11649                           tablat	equ	0xFF5
 11650                           prodh	equ	0xFF4
 11651                           prodl	equ	0xFF3
 11652                           intcon	equ	0xFF2
 11653                           intcon2	equ	0xFF1
 11654                           postinc0	equ	0xFEE
 11655                           fsr0h	equ	0xFEA
 11656                           fsr0l	equ	0xFE9
 11657                           wreg	equ	0xFE8
 11658                           postdec1	equ	0xFE5
 11659                           fsr1h	equ	0xFE2
 11660                           fsr1l	equ	0xFE1
 11661                           bsr	equ	0xFE0
 11662                           postinc2	equ	0xFDE
 11663                           postdec2	equ	0xFDD
 11664                           fsr2h	equ	0xFDA
 11665                           fsr2l	equ	0xFD9
 11666                           status	equ	0xFD8
 11667                           
 11668 ;; *************** function _EUSART1_Write *****************
 11669 ;; Defined at:
 11670 ;;		line 160 in file "../eusart1.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;  txData          1    wreg     unsigned char 
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;  txData          1    0[COMRAM] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      void 
 11677 ;; Registers used:
 11678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11684 ;;      Params:         0       0       0       0       0       0       0       0       0
 11685 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11686 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11687 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11688 ;;Total ram usage:        1 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; This function calls:
 11691 ;;		Nothing
 11692 ;; This function is called by:
 11693 ;;		_UPDATExTERMINAL
 11694 ;; This function uses a non-reentrant model
 11695 ;;
 11696                           
 11697                           	psect	text30
 11698  002C54                     __ptext30:
 11699                           	opt stack 0
 11700  002C54                     _EUSART1_Write:
 11701                           	opt stack 22
 11702                           
 11703                           ;incstack = 0
 11704                           ;EUSART1_Write@txData stored from wreg
 11705  002C54  6E2C               	movwf	EUSART1_Write@txData,c
 11706  002C56                     i2l5402:
 11707  002C56  5029               	movf	_eusart1TxBufferRemaining,w,c	;volatile
 11708  002C58  B4D8               	btfsc	status,2,c
 11709  002C5A  D7FD               	goto	i2l5402
 11710                           
 11711                           ;eusart1.c: 162: }
 11712                           ;eusart1.c: 164: if (0 == PIE1bits.TX1IE) {
 11713  002C5C  B89D               	btfsc	3997,4,c	;volatile
 11714  002C5E  D003               	goto	i2l615
 11715                           
 11716                           ;eusart1.c: 165: TXREG1 = txData;
 11717  002C60  C02C  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 11718                           
 11719                           ;eusart1.c: 166: } else {
 11720  002C64  D012               	goto	i2l5416
 11721  002C66                     i2l615:
 11722                           
 11723                           ;eusart1.c: 167: PIE1bits.TX1IE = 0;
 11724  002C66  989D               	bcf	3997,4,c	;volatile
 11725                           
 11726                           ;eusart1.c: 168: eusart1TxBuffer[eusart1TxHead++] = txData;
 11727  002C68  502A               	movf	_eusart1TxHead,w,c
 11728  002C6A  0D01               	mullw	1
 11729  002C6C  0E7E               	movlw	low _eusart1TxBuffer
 11730  002C6E  24F3               	addwf	prodl,w,c
 11731  002C70  6ED9               	movwf	fsr2l,c
 11732  002C72  0E01               	movlw	high _eusart1TxBuffer
 11733  002C74  20F4               	addwfc	prodh,w,c
 11734  002C76  6EDA               	movwf	fsr2h,c
 11735  002C78  C02C  FFDF         	movff	EUSART1_Write@txData,indf2
 11736  002C7C  2A2A               	incf	_eusart1TxHead,f,c
 11737                           
 11738                           ;eusart1.c: 169: if (sizeof (eusart1TxBuffer) <= eusart1TxHead) {
 11739  002C7E  0E7D               	movlw	125
 11740  002C80  642A               	cpfsgt	_eusart1TxHead,c
 11741  002C82  D002               	goto	i2l5414
 11742                           
 11743                           ;eusart1.c: 170: eusart1TxHead = 0;
 11744  002C84  0E00               	movlw	0
 11745  002C86  6E2A               	movwf	_eusart1TxHead,c
 11746  002C88                     i2l5414:
 11747                           
 11748                           ;eusart1.c: 171: }
 11749                           ;eusart1.c: 172: eusart1TxBufferRemaining--;
 11750  002C88  0629               	decf	_eusart1TxBufferRemaining,f,c	;volatile
 11751  002C8A                     i2l5416:
 11752                           
 11753                           ;eusart1.c: 173: }
 11754                           ;eusart1.c: 174: PIE1bits.TX1IE = 1;
 11755  002C8A  889D               	bsf	3997,4,c	;volatile
 11756  002C8C  0012               	return		;funcret
 11757  002C8E                     __end_of_EUSART1_Write:
 11758                           	opt stack 0
 11759                           pclatu	equ	0xFFB
 11760                           pclath	equ	0xFFA
 11761                           tblptru	equ	0xFF8
 11762                           tblptrh	equ	0xFF7
 11763                           tblptrl	equ	0xFF6
 11764                           tablat	equ	0xFF5
 11765                           prodh	equ	0xFF4
 11766                           prodl	equ	0xFF3
 11767                           intcon	equ	0xFF2
 11768                           intcon2	equ	0xFF1
 11769                           postinc0	equ	0xFEE
 11770                           fsr0h	equ	0xFEA
 11771                           fsr0l	equ	0xFE9
 11772                           wreg	equ	0xFE8
 11773                           postdec1	equ	0xFE5
 11774                           fsr1h	equ	0xFE2
 11775                           fsr1l	equ	0xFE1
 11776                           bsr	equ	0xFE0
 11777                           indf2	equ	0xFDF
 11778                           postinc2	equ	0xFDE
 11779                           postdec2	equ	0xFDD
 11780                           fsr2h	equ	0xFDA
 11781                           fsr2l	equ	0xFD9
 11782                           status	equ	0xFD8
 11783                           
 11784 ;; *************** function _EUSART1_Transmit_ISR *****************
 11785 ;; Defined at:
 11786 ;;		line 177 in file "../eusart1.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;		None
 11789 ;; Auto vars:     Size  Location     Type
 11790 ;;		None
 11791 ;; Return value:  Size  Location     Type
 11792 ;;                  1    wreg      void 
 11793 ;; Registers used:
 11794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11795 ;; Tracked objects:
 11796 ;;		On entry : 0/0
 11797 ;;		On exit  : 0/0
 11798 ;;		Unchanged: 0/0
 11799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11800 ;;      Params:         0       0       0       0       0       0       0       0       0
 11801 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11802 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11803 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11804 ;;Total ram usage:        0 bytes
 11805 ;; Hardware stack levels used:    1
 11806 ;; This function calls:
 11807 ;;		Nothing
 11808 ;; This function is called by:
 11809 ;;		_tc_high
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           	psect	text31
 11814  002CF0                     __ptext31:
 11815                           	opt stack 0
 11816  002CF0                     _EUSART1_Transmit_ISR:
 11817                           	opt stack 23
 11818                           
 11819                           ;eusart1.c: 180: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 11820                           
 11821                           ;incstack = 0
 11822  002CF0  0E7E               	movlw	126
 11823  002CF2  6029               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 11824  002CF4  D012               	goto	i2l621
 11825                           
 11826                           ;eusart1.c: 181: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 11827  002CF6  502B               	movf	_eusart1TxTail,w,c
 11828  002CF8  0D01               	mullw	1
 11829  002CFA  0E7E               	movlw	low _eusart1TxBuffer
 11830  002CFC  24F3               	addwf	prodl,w,c
 11831  002CFE  6ED9               	movwf	fsr2l,c
 11832  002D00  0E01               	movlw	high _eusart1TxBuffer
 11833  002D02  20F4               	addwfc	prodh,w,c
 11834  002D04  6EDA               	movwf	fsr2h,c
 11835  002D06  50DF               	movf	indf2,w,c
 11836  002D08  6EAD               	movwf	4013,c	;volatile
 11837  002D0A  2A2B               	incf	_eusart1TxTail,f,c
 11838                           
 11839                           ;eusart1.c: 182: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 11840  002D0C  0E7D               	movlw	125
 11841  002D0E  642B               	cpfsgt	_eusart1TxTail,c
 11842  002D10  D002               	goto	i2l6282
 11843                           
 11844                           ;eusart1.c: 183: eusart1TxTail = 0;
 11845  002D12  0E00               	movlw	0
 11846  002D14  6E2B               	movwf	_eusart1TxTail,c
 11847  002D16                     i2l6282:
 11848                           
 11849                           ;eusart1.c: 184: }
 11850                           ;eusart1.c: 185: eusart1TxBufferRemaining++;
 11851  002D16  2A29               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 11852                           
 11853                           ;eusart1.c: 186: } else {
 11854  002D18  0012               	return	
 11855  002D1A                     i2l621:
 11856                           
 11857                           ;eusart1.c: 187: PIE1bits.TX1IE = 0;
 11858  002D1A  989D               	bcf	3997,4,c	;volatile
 11859  002D1C  0012               	return	
 11860  002D1E                     __end_of_EUSART1_Transmit_ISR:
 11861                           	opt stack 0
 11862                           pclatu	equ	0xFFB
 11863                           pclath	equ	0xFFA
 11864                           tblptru	equ	0xFF8
 11865                           tblptrh	equ	0xFF7
 11866                           tblptrl	equ	0xFF6
 11867                           tablat	equ	0xFF5
 11868                           prodh	equ	0xFF4
 11869                           prodl	equ	0xFF3
 11870                           intcon	equ	0xFF2
 11871                           intcon2	equ	0xFF1
 11872                           postinc0	equ	0xFEE
 11873                           fsr0h	equ	0xFEA
 11874                           fsr0l	equ	0xFE9
 11875                           wreg	equ	0xFE8
 11876                           postdec1	equ	0xFE5
 11877                           fsr1h	equ	0xFE2
 11878                           fsr1l	equ	0xFE1
 11879                           bsr	equ	0xFE0
 11880                           indf2	equ	0xFDF
 11881                           postinc2	equ	0xFDE
 11882                           postdec2	equ	0xFDD
 11883                           fsr2h	equ	0xFDA
 11884                           fsr2l	equ	0xFD9
 11885                           status	equ	0xFD8
 11886                           
 11887 ;; *************** function _EUSART1_Receive_ISR *****************
 11888 ;; Defined at:
 11889 ;;		line 191 in file "../eusart1.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;		None
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;		None
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  1    wreg      void 
 11896 ;; Registers used:
 11897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11903 ;;      Params:         0       0       0       0       0       0       0       0       0
 11904 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11906 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11907 ;;Total ram usage:        0 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; This function calls:
 11910 ;;		Nothing
 11911 ;; This function is called by:
 11912 ;;		_tc_high
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           	psect	text32
 11917  002D4A                     __ptext32:
 11918                           	opt stack 0
 11919  002D4A                     _EUSART1_Receive_ISR:
 11920                           	opt stack 23
 11921                           
 11922                           ;eusart1.c: 192: if (1 == RCSTA1bits.OERR) {
 11923                           
 11924                           ;incstack = 0
 11925  002D4A  A2AB               	btfss	4011,1,c	;volatile
 11926  002D4C  D002               	goto	i2l6262
 11927                           
 11928                           ;eusart1.c: 195: RCSTA1bits.CREN = 0;
 11929  002D4E  98AB               	bcf	4011,4,c	;volatile
 11930                           
 11931                           ;eusart1.c: 196: RCSTA1bits.CREN = 1;
 11932  002D50  88AB               	bsf	4011,4,c	;volatile
 11933  002D52                     i2l6262:
 11934                           
 11935                           ;eusart1.c: 197: }
 11936                           ;eusart1.c: 200: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 11937  002D52  5027               	movf	_eusart1RxHead,w,c
 11938  002D54  0D01               	mullw	1
 11939  002D56  0E00               	movlw	low _eusart1RxBuffer
 11940  002D58  24F3               	addwf	prodl,w,c
 11941  002D5A  6ED9               	movwf	fsr2l,c
 11942  002D5C  0E02               	movlw	high _eusart1RxBuffer
 11943  002D5E  20F4               	addwfc	prodh,w,c
 11944  002D60  6EDA               	movwf	fsr2h,c
 11945  002D62  CFAE FFDF          	movff	4014,indf2	;volatile
 11946  002D66  2A27               	incf	_eusart1RxHead,f,c
 11947                           
 11948                           ;eusart1.c: 201: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 11949  002D68  0E7D               	movlw	125
 11950  002D6A  6427               	cpfsgt	_eusart1RxHead,c
 11951  002D6C  D002               	goto	i2l6270
 11952                           
 11953                           ;eusart1.c: 202: eusart1RxHead = 0;
 11954  002D6E  0E00               	movlw	0
 11955  002D70  6E27               	movwf	_eusart1RxHead,c
 11956  002D72                     i2l6270:
 11957                           
 11958                           ;eusart1.c: 203: }
 11959                           ;eusart1.c: 204: eusart1RxCount++;
 11960  002D72  2A26               	incf	_eusart1RxCount,f,c	;volatile
 11961  002D74  0012               	return		;funcret
 11962  002D76                     __end_of_EUSART1_Receive_ISR:
 11963                           	opt stack 0
 11964  0000                     pclatu	equ	0xFFB
 11965                           pclath	equ	0xFFA
 11966                           tblptru	equ	0xFF8
 11967                           tblptrh	equ	0xFF7
 11968                           tblptrl	equ	0xFF6
 11969                           tablat	equ	0xFF5
 11970                           prodh	equ	0xFF4
 11971                           prodl	equ	0xFF3
 11972                           intcon	equ	0xFF2
 11973                           intcon2	equ	0xFF1
 11974                           postinc0	equ	0xFEE
 11975                           fsr0h	equ	0xFEA
 11976                           fsr0l	equ	0xFE9
 11977                           wreg	equ	0xFE8
 11978                           postdec1	equ	0xFE5
 11979                           fsr1h	equ	0xFE2
 11980                           fsr1l	equ	0xFE1
 11981                           bsr	equ	0xFE0
 11982                           indf2	equ	0xFDF
 11983                           postinc2	equ	0xFDE
 11984                           postdec2	equ	0xFDD
 11985                           fsr2h	equ	0xFDA
 11986                           fsr2l	equ	0xFD9
 11987                           status	equ	0xFD8
 11988                           pclatu	equ	0xFFB
 11989                           pclath	equ	0xFFA
 11990                           tblptru	equ	0xFF8
 11991                           tblptrh	equ	0xFF7
 11992                           tblptrl	equ	0xFF6
 11993                           tablat	equ	0xFF5
 11994                           prodh	equ	0xFF4
 11995                           prodl	equ	0xFF3
 11996                           intcon	equ	0xFF2
 11997                           intcon2	equ	0xFF1
 11998                           postinc0	equ	0xFEE
 11999                           fsr0h	equ	0xFEA
 12000                           fsr0l	equ	0xFE9
 12001                           wreg	equ	0xFE8
 12002                           postdec1	equ	0xFE5
 12003                           fsr1h	equ	0xFE2
 12004                           fsr1l	equ	0xFE1
 12005                           bsr	equ	0xFE0
 12006                           indf2	equ	0xFDF
 12007                           postinc2	equ	0xFDE
 12008                           postdec2	equ	0xFDD
 12009                           fsr2h	equ	0xFDA
 12010                           fsr2l	equ	0xFD9
 12011                           status	equ	0xFD8
 12012                           
 12013                           	psect	rparam
 12014  0000                     pclatu	equ	0xFFB
 12015                           pclath	equ	0xFFA
 12016                           tblptru	equ	0xFF8
 12017                           tblptrh	equ	0xFF7
 12018                           tblptrl	equ	0xFF6
 12019                           tablat	equ	0xFF5
 12020                           prodh	equ	0xFF4
 12021                           prodl	equ	0xFF3
 12022                           intcon	equ	0xFF2
 12023                           intcon2	equ	0xFF1
 12024                           postinc0	equ	0xFEE
 12025                           fsr0h	equ	0xFEA
 12026                           fsr0l	equ	0xFE9
 12027                           wreg	equ	0xFE8
 12028                           postdec1	equ	0xFE5
 12029                           fsr1h	equ	0xFE2
 12030                           fsr1l	equ	0xFE1
 12031                           bsr	equ	0xFE0
 12032                           indf2	equ	0xFDF
 12033                           postinc2	equ	0xFDE
 12034                           postdec2	equ	0xFDD
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039                           	psect	temp
 12040  00004D                     btemp:
 12041                           	opt stack 0
 12042  00004D                     	ds	1
 12043  0000                     int$flags	set	btemp
 12044                           pclatu	equ	0xFFB
 12045                           pclath	equ	0xFFA
 12046                           tblptru	equ	0xFF8
 12047                           tblptrh	equ	0xFF7
 12048                           tblptrl	equ	0xFF6
 12049                           tablat	equ	0xFF5
 12050                           prodh	equ	0xFF4
 12051                           prodl	equ	0xFF3
 12052                           intcon	equ	0xFF2
 12053                           intcon2	equ	0xFF1
 12054                           postinc0	equ	0xFEE
 12055                           fsr0h	equ	0xFEA
 12056                           fsr0l	equ	0xFE9
 12057                           wreg	equ	0xFE8
 12058                           postdec1	equ	0xFE5
 12059                           fsr1h	equ	0xFE2
 12060                           fsr1l	equ	0xFE1
 12061                           bsr	equ	0xFE0
 12062                           indf2	equ	0xFDF
 12063                           postinc2	equ	0xFDE
 12064                           postdec2	equ	0xFDD
 12065                           fsr2h	equ	0xFDA
 12066                           fsr2l	equ	0xFD9
 12067                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         565
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      76
    BANK0           160      7     160
    BANK1           256      4     256
    BANK2           256      7     133
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    _UPDATExTERMINAL->_EUSART1_Write

Critical Paths under _main in BANK0

    _Update_StateMchn->_Debounce_Inputs
    _Train_Path->_Left_Mountain_From_The_Left
    _Train_Path->_Left_Mountain_From_The_Right
    _Train_Path->_Right_Mountain_From_The_Left
    _Train_Path->_Right_Mountain_From_The_Right
    _SETxPWM->_SetDCPWM1
    _Junction->_GETxAPIxVAL
    _INCRxAPIxVAL->_SETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_SETxAPIxVAL
    _DECRxAPIxVAL->_SETxAPIxVAL

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    _Update_StateMchn->_Train_Path
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Update_StateMchn
    _Update_StateMchn->_Train_Path
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29471
                     _APIxInitialize
                 _EUSART1_Initialize
                      _INIT_TERMINAL
                           _Init_Pwm
                        _Init_Timers
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     2     2      0   29249
                                              5 BANK2      2     2      0
                       _DECRxAPIxVAL
                    _Debounce_Inputs
                       _Eeprom_Store
                        _GETxAPIxVAL
                          _Green_Led
                       _INCRxAPIxVAL
                            _Red_Led
                        _SETxAPIxVAL
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1   19050
                                              3 BANK1      1     0      1
                                              4 BANK2      1     1      0
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               0     0      0    2161
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               0     0      0    2161
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                0     0      0    2161
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                0     0      0    2161
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0    2254
                                              6 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0    2254
                                              6 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0    2254
                                              6 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0    2254
                                              6 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3    2130
                                              0 BANK1      3     0      3
                                              0 BANK2      4     4      0
                        _GETxAPIxVAL (ARG)
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (5) _SetDCPWM1                                            6     4      2     207
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1     556
                                              3 BANK0      2     1      1
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _INCRxAPIxVAL                                         3     3      0    2576
                                              0 BANK1      3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Store                                         0     0      0      31
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0    2477
                                              5 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _DECRxAPIxVAL                                         3     3      0    2576
                                              0 BANK1      3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVAL                                          5     3      2    2446
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _GETxAPIxVAL                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INIT_TERMINAL                                        2     2      0      47
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _tc_low                                              17    17      0       0
                                             15 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_high                                             14    14      0      44
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                    _UPDATExTERMINAL
 ---------------------------------------------------------------------------------
 (8) _UPDATExTERMINAL                                      0     0      0      44
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _EUSART1_Initialize
   _INIT_TERMINAL
   _Init_Pwm
   _Init_Timers
   _Update_StateMchn
     _DECRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
     _Eeprom_Store
       _GETxAPIxVAL
     _GETxAPIxVAL
     _Green_Led
     _INCRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
     _Red_Led
     _SETxAPIxVAL
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SetDCPWM1 (ARG)

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _UPDATExTERMINAL
     _EUSART1_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      7      85       9       52.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      7      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4C       1       80.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     271      20        0.0%
DATA                 0      0     271       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Oct 11 21:50:57 2017

                  _eusart1TxBufferRemaining 0029                                          bsr 000FE0  
                               __CFG_BORV$3 000000                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l313 0A34  
                                       l412 0EE2                                         l327 0AD6  
                                       l364 0C8A                                         l449 108C  
                                       l458 1740                                         l636 2CC0  
                                       l750 2A22                                         l398 0E40  
                                       l752 2A26                                         l921 2818  
                                       l913 27A4                                         l906 278A  
                                       l683 26CC                                         l755 2A52  
                                       l771 29CE                                         l915 27A8  
                                       l692 274C                                         l908 278E  
                                       l686 26FA                                         l766 299E  
                                       l695 2770                                         l759 2A7E  
                                       l775 29FA                                         l768 29A2  
                                       l689 271E                                         _API 0060  
                              __CFG_CPB$OFF 000000                                _Stop_Program 0019  
                                       _PR2 000FCB                                __CFG_CPD$OFF 000000  
                              __CFG_BOR$OFF 000000                                         prod 000FF3  
                                       wreg 000FE8                      __size_of_INIT_TERMINAL 0034  
          Train_Move_Right_Start@Return_Val 00F8                                ?_GETxAPIxVAL 00F9  
                           APIxInitialize@i 00F9                                __CFG_LVP$OFF 000000  
       __end_of_Left_Mountain_From_The_Left 2486                 _Left_Mountain_From_The_Left 2372  
                              __CFG_WDT$OFF 000000       __end_of_Right_Mountain_From_The_Right 2142  
    __size_of_Right_Mountain_From_The_Right 011A               _Right_Mountain_From_The_Right 2028  
                                      l7002 24E6                                        l7020 2550  
                                      l7012 251A                                        l7110 1E72  
                                      l7006 2510                                        l7030 2578  
                                      l7200 2156                                        l7104 1E42  
                                      l7008 2516                                        l7032 2592  
                                      l7106 1E48                                        l7026 2572  
                                      l7050 1F5E                                        l8002 00B2  
                                      l7300 259E                                        l7204 217A  
                                      l7132 1EE4                                        l7124 1EAE  
                                      l7116 1E84                                        l7052 1F64  
                                      l7044 1F3A                                        l8012 00EC  
                                      l7150 2398                                        l7310 25D0  
                                      l7230 2224                                        l7214 21C0  
                                      l7222 21E4                                        l7206 2180  
                                      l7070 1FCA                                        l7062 1FA0  
                                      l7038 1F0E                                        l8030 0164  
                                      l8006 00C4                                        l7400 11C2  
                                      l7152 23A6                                        l7144 2378  
                                      l7240 2248                                        l7128 1EDA  
                                      l7136 1EEC                                        l7056 1F8E  
                                      l8200 0572                                        l8120 03E0  
                                      l8040 0198                                        l8024 013C  
                                      l7410 11FE                                        l7162 23EA  
                                      l7170 2410                                        l7154 23AC  
                                      l7322 262A                                        l7306 25BC  
                                      l7218 21DA                                        l7242 2256  
                                      l7138 1F06                                        l7090 1DEC  
                                      l7074 1FF6                                        l7082 2008  
                                      l8210 05C4                                        l8202 05A0  
                                      l8130 041A                                        l8122 03E8  
                                      l8018 0114                                        l7404 11D8  
                                      l7340 2690                                        l7308 25CA  
                                      l7236 2242                                        l7252 203C  
                                      l7076 1FFC                                        l7084 2022  
                                      l8220 0608                                        l8204 05AA  
                                      l8140 044C                                        l8132 0420  
                                      l8116 03B2                                        l8036 018C  
                                      l7502 14BA                                        l7510 14E4  
                                      l7422 124E                                        l7430 1276  
                                      l7414 1210                                        l7166 2406  
                                      l7190 2480                                        l7334 2672  
                                      l7318 2610                                        l7326 2634  
                                      l7270 20C2                                        l7078 2000  
                                      l8302 0818                                        l8222 0612  
                                      l8206 05B0                                        l8150 046E  
                                      l8126 0400                                        l8070 0266  
                                      l8054 0208                                        l7520 154C  
                                      l7512 1510                                        l7504 14CC  
                                      l7440 12DA                                        l7432 12A2  
                                      l7424 1260                                        l7416 1228  
                                      l7352 1090                                        l7184 246C  
                                      l7344 2696                                        l7256 2060  
                                      l7248 202E                                        l8400 0988  
                                      l8240 067A                                        l8224 0618  
                                      l8232 062E                                        l8208 05BA  
                                      l8216 05D0                                        l8152 0478  
                                      l8144 0462                                        l8160 04B2  
                                      l8136 043E                                        l8064 023E  
                                      l7362 10CC                                        l7178 2450  
                                      l7346 26A4                                        l7282 210C  
                                      l7266 20A6                                        l7274 20CC  
                                      l7258 2066                                        l7098 1E1E  
                                      l8306 0824                                        l8250 06BA  
                                      l8242 0680                                        l8234 065C  
                                      l8226 0622                                        l8218 05FE  
                                      l8170 04D4                                        l8146 0466  
                                      l8082 02B6                                        l8058 0216  
                                      l7372 110C                                        l7356 10A6  
                                      l6900 2792                                        l7188 2472  
                                      l7196 2148                                        l7292 212E  
                                      l8500 0B98                                        l8420 0A02  
                                      l8404 0992                                        l8316 0840  
                                      l8260 06FA                                        l8236 0666  
                                      l8172 04DE                                        l8164 04C8  
                                      l8180 0518                                        l8148 046A  
                                      l8076 028E                                        l7550 161C  
                                      l7534 15B6                                        l7542 15DE  
                                      l7518 153A                                        l7526 1564  
                                      l7470 13BC                                        l7454 1342  
                                      l7462 136A                                        l7438 12C8  
                                      l7446 12F0                                        l7382 1144  
                                      l7366 10DE                                        l7622 2A2A  
                                      l6910 27CE                                        l7294 213C  
                                      l7702 17BA                                        l8510 0BDA  
                                      l8502 0BBA                                        l8430 0A66  
                                      l8422 0A06                                        l8406 099E  
                                      l8326 085C                                        l8238 0670  
                                      l8190 0552                                        l8166 04CC  
                                      l8158 0484                                        l8094 0306  
                                      l7560 165C                                        l7552 162E  
                                      l7544 15F6                                        l7536 15C8  
                                      l7528 1590                                        l7480 1410  
                                      l7472 13CE                                        l7464 1396  
                                      l7456 1354                                        l7448 131C  
                                      l7384 115C                                        l7368 10F6  
                                      l7632 2A56                                        l6912 27D6  
                                      l6904 27AC                                        l7288 2128  
                                      l7800 1970                                        l7712 17DE  
                                      l8504 0BBE                                        l8416 09F0  
                                      l8336 0878                                        l8280 076C  
                                      l8272 0744                                        l8264 0718  
                                      l8248 068C                                        l8192 055C  
                                      l8256 06C6                                        l8168 04D0  
                                      l8088 02DE                                        l7394 1198  
                                      l7378 1132                                        l7810 19A0  
                                      l7802 1974                                        l7722 1808  
                                      l7714 17FC                                        l7706 17C8  
                                      l8602 0D58                                        l8522 0BFA  
                                      l8450 0ABC                                        l8442 0A86  
                                      l8418 09FA                                        l8346 0894  
                                      l8274 074E                                        l8258 06F4  
                                      l8194 0566                                        l8186 0542  
                                      l8178 04EA                                        l8098 0312  
                                      l7388 1172                                        l7628 2A42  
                                      l7644 2A82                                        l6916 2804  
                                      l6908 27BE                                        l6924 282E  
                                      l6932 225E                                        l7804 1986  
                                      l7732 181C                                        l8620 0DAA  
                                      l8516 0BF4                                        l8508 0BD6  
                                      l8436 0A80                                        l8428 0A62  
                                      l8380 091C                                        l8356 08B0  
                                      l8540 0C52                                        l8276 0758  
                                      l8268 0726                                        l8188 0548  
                                      l7582 16E8                                        l7590 1710  
                                      l7566 1682                                        l7574 16AA  
                                      l7558 1644                                        l7486 143A  
                                      l7494 1464                                        l7478 13E4  
                                      l7398 11AA                                        l7638 2A6E  
                                      l7654 29BE                                        l7670 29FE  
                                      l6926 2844                                        l6950 22B8  
                                      l6942 2288                                        l7830 19E0  
                                      l7806 198A                                        l7750 188E  
                                      l7742 1862                                        l7734 183A  
                                      l7726 180E                                        l7718 1802  
                                      l8710 0F94                                        l8630 0DFC  
                                      l8614 0D94                                        l8606 0D64  
                                      l8550 0C92                                        l8534 0C46  
                                      l8526 0C0A                                        l8470 0B12  
                                      l8446 0A96                                        l8542 0C68  
                                      l8366 08CC                                        l8278 0762  
                                      l8286 0778                                        l8294 07B2  
                                      l7584 16FA                                        l7576 16C2  
                                      l7568 1694                                        l7496 1490  
                                      l7488 144C                                        l7664 29EA  
                                      l7648 29A6                                        l6960 22F4  
                                      l6936 227C                                        l7824 19DA  
                                      l7808 199C                                        l7816 19B6  
                                      l8704 0F8E                                        l8632 0E06  
                                      l8560 0CB8                                        l8528 0C2A  
                                      l8464 0B0C                                        l8456 0AEE  
                                      l8448 0AB8                                        l8392 0958  
                                      l8296 07FE                                        l8288 07A6  
                                      l7658 29D2                                        l6954 22E2  
                                      l7850 1A1E                                        l7818 19D4  
                                      l7754 18A4                                        l7746 1878  
                                      l7682 1754                                        l7674 172E  
                                      l8730 1000                                        l8722 0FE2  
                                      l8714 0FA4                                        l8650 0E8C  
                                      l8642 0E6E                                        l8634 0E0E  
                                      l8618 0D9E                                        l8570 0CD4  
                                      l8546 0C7E                                        l8490 0B82  
                                      l8482 0B64                                        l8458 0AF2  
                                      l8474 0B22                                        l8378 08E8  
                                      l6884 295E                                        l6972 2346  
                                      l7836 19E6                                        l7844 19F8  
                                      l7692 1778                                        l8724 0FE6  
                                      l8716 0FC6                                        l8740 1016  
                                      l8644 0E72                                        l8636 0E12  
                                      l8660 0EA2                                        l8580 0CF0  
                                      l8556 0CAC                                        l8484 0B68  
                                      l8476 0B44                                        l8388 094C  
                                      l6966 2324                                        l6958 22EE  
                                      l7870 1A46                                        l7862 1A36  
                                      l7854 1A26                                        l7846 1A16  
                                      l7774 18F8                                        l7694 1796  
                                      l7686 1762                                        l7678 1746  
                                      l8718 0FCA                                        l8742 1036  
                                      l8670 0EFA                                        l8662 0EC4  
                                      l8478 0B48                                        l6896 2782  
                                      l6992 24B0                                        l6984 2488  
                                      l6976 2352                                        l7688 1774  
                                      l8736 1006                                        l8672 0EFE  
                                      l8664 0EC8                                        l8656 0E92  
                                      l8592 0D0C                                        l8496 0B88  
                                      l6994 24B8                                        l6978 236C  
                                      l7874 1A4E                                        l7866 1A3E  
                                      l7858 1A2E                                        l7794 1948  
                                      l7698 17AC                                        l7882 1A64  
                                      l8690 0F50                                        l8594 0D28  
                                      l8754 105E                                        l6988 24A6  
                                      l7796 195A                                        l7884 1AB6  
                                      l8748 1052                                        l8692 0F54  
                                      l8684 0F1E                                        l7958 1AC4  
                                      l7878 1A5E                                        l7798 195E  
                                      l8678 0F18                                        l8758 1074  
                                      l7968 1B18                                        l7992 2CA2  
                                      l8696 0F70                                        l8688 0F2E  
                                      l8928 2B70                                        l8698 0F74  
                                      l7996 2CB8              Right_Mountain_From_The_Left@rc 00FF  
                                      u6000 1374                                        u6020 13EC  
                                      u6110 156C                                        u6030 13EE  
                                      u6200 1718                                        u6120 156E  
                                      u6050 146C                                        u5315 2BD6  
                                      u5340 2C38                                        u6140 15E6  
                                      u6060 146E                                        u6206 171A  
                                      u6160 164C                                        u6080 14EC  
                                      u6146 15E8                                        u6090 14EE  
                                      u6180 16B2                                        u7060 03DC  
                                      u6166 164E                                        u6186 16B4  
                                      u7420 0A72                                        u5910 1218  
                                      u5930 127E                                        u5850 10E6  
                                      u7450 0AFE                                        u5940 1280  
                                      u5916 121A                                        i2l94 2894  
                                      u5870 114C                                        u7710 0E7E  
                                      u7470 0B74                                        u5960 12F8  
                                      u5856 10E8                                        u5970 12FA  
                                      u5890 11B2                                        u7490 0BE6  
                                      i2l99 28D4                                        u5876 114E  
                                      u7740 0F0A                                        u5990 1372  
                                      u5896 11B4                                        u7760 0F80  
                                      u7780 0FF2                                __CFG_WDTPS$1 000000  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 1DEA  
            __size_of_Train_Move_Left_Brake 0122                               _EUSART1_Write 2C54  
             __end_of_Train_Move_Left_Brake 1F0C                                        _main 2B10  
            __size_of_Train_Move_Left_Start 0112                             __end_of_SETxPWM 2998  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                                        btemp 004D  
             __end_of_Train_Move_Left_Start 2598                                        pclat 000FFA  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 00A6                               __CFG_IESO$OFF 000000  
               EUSART1_Initialize@baud_rate 00F9                          Green_Led@Operation 00F9  
                            INIT_TERMINAL@i 00F9                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000010                               ??_Init_Timers 00F9  
                           __end_of_Red_Led 2A1C                               __CFG_PLLDIV$5 000000  
                             ?_INCRxAPIxVAL 002C                              __CFG_CCP2MX$ON 000000  
                   __end_of_UPDATExTERMINAL 2DD6                                       ?_main 002C  
                                     _EEADR 000FA9                                       _CMCON 000FB4  
                          Red_Led@Operation 00F9                                       _T0CON 000FD5  
                                     _T2CON 000FCA                                SETxPWM@speed 01FC  
                                     i2l621 2D1A                                       i2l615 2C66  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 2CF0  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                            __CFG_EBTRB$OFF 000000                             __end_of_tc_high 2910  
                            ?_EUSART1_Write 002C                                       tablat 000FF5  
                           ?_APIxInitialize 002C                                       status 000FD8  
 Train_Move_Left_Brake@Train_Move_Wait_Time 00E0                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 277C                               _INIT_TERMINAL 2C8E  
                           __initialization 2AA0                  __end_of_EUSART1_Initialize 2BCC  
                              __end_of_main 2B80                              ??_INCRxAPIxVAL 00FE  
                          __end_of_Init_Pwm 2DC4                                      ??_main 0100  
                       __end_of_Init_Timers 2DAE                               __activetblptr 000002  
                          __end_of_Junction 284A                                _Led1_Counter 00EA  
                         _Green_Led_Counter 0003                       ?_EUSART1_Transmit_ISR 002C  
                         ?_Update_StateMchn 002C                          ??_Update_StateMchn 0283  
                                    _ADCON1 000FC1                                      _EEDATA 000FA8  
                                    _CCPR1L 000FBE                                   ??_SETxPWM 027E  
                                    _EECON2 000FA7                                      _API_RW 0100  
                        __size_of_Green_Led 0084                       __size_of_DECRxAPIxVAL 002E  
                                    i2l5402 2C56                                      i2l5414 2C88  
                                    i2l5416 2C8A                                      i2l6270 2D72  
                                    i2l6262 2D52                                      _INTCON 000FF2  
                                    i2l6282 2D16                                      i2l6380 28C0  
                                    i2l6374 28B4                                      i2l6368 2896  
                                    i2l6386 28CA                     ?_Train_Move_Right_Brake 002C  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 0044                     ?_Train_Move_Right_Start 002C  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 002C  
                                 ??_Red_Led 00F9                              ?_INIT_TERMINAL 002C  
                            __CFG_XINST$OFF 000000             Train_Move_Left_Brake@Return_Val 00F5  
                            __CFG_STVREN$ON 000000                                      clear_0 2AA6  
                                    clear_1 2AB2                                      clear_2 2ABE  
                                    clear_3 2ACA                                      _tc_low 0018  
                          ?_UPDATExTERMINAL 002C                              _Switch_Moutain 0021  
                                _Train_Path 1728     Right_Mountain_From_The_Right@Return_Val 00F4  
    Left_Mountain_From_The_Right@Return_Val 00F2                                __pdataCOMRAM 004C  
                            _Switch_Program 0022                                _DECRxAPIxVAL 2CC2  
                                 ??_tc_high 002D                   _Activate_Controls_Counter 00E8  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                ?_SETxAPIxVAL 00F9  
                           ??_EUSART1_Write 002C                   _Button_Contact_Counter_LB 000D  
                 _Button_Contact_Counter_LF 00EC                   _Button_Contact_Counter_RB 00ED  
                 _Button_Contact_Counter_RF 00EE              __end_of_Train_Move_Right_Brake 2028  
                           _eusart1RxBuffer 0200                        __size_of_GETxAPIxVAL 0020  
                           _eusart1TxBuffer 017E              __end_of_Train_Move_Right_Start 2372  
                      _Train_Move_Pwm_Count 0009                                  __accesstop 0060  
                   __end_of__initialization 2B02                             __CFG_PBADEN$OFF 000000  
                             ___rparam_used 000001                              __pcstackCOMRAM 002C  
                              __pidataBANK0 2DC4                                 _Init_Timers 2D96  
                         __end_of_Green_Led 2AA0                           __end_of_SetDCPWM1 2C10  
                           _Red_Led_Counter 0007                      ??_EUSART1_Transmit_ISR 002C  
Train_Move_Right_Start@Train_Move_Wait_Time 00E6                    __size_of_Debounce_Inputs 069A  
               __end_of_EUSART1_Receive_ISR 2D76            Train_Move_Right_Brake@Return_Val 00F7  
                             _eusart1RxHead 0027                               _eusart1TxHead 002A  
                     __size_of_Eeprom_Store 00D2                 Junction@Junction_Left_Right 00FD  
                             _eusart1RxTail 0028                                  __pbssBANK0 0060  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                             _eusart1TxTail 002B                        __end_of_INCRxAPIxVAL 2D4A  
                                 ?_Init_Pwm 002C                             ??_INIT_TERMINAL 00F9  
                          GETxAPIxVAL@index 00FB                            SETxAPIxVAL@index 00FD  
                                 ?_Junction 00FC                            SETxAPIxVAL@value 00F9  
      __size_of_Left_Mountain_From_The_Left 0114                                     _CCP1CON 000FBD  
                                   ?_tc_low 002C                                 ?_Train_Path 01FF  
                              _Eeprom_Store 26AA                                     _INTCON2 000FF1  
 Train_Move_Left_Start@Train_Move_Wait_Time 00E2                            ??_APIxInitialize 00F9  
                                   _SETxPWM 2910                            SETxPWM@direction 01FE  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 00F9  
                                   _Red_Led 2998                       _Train_Move_Left_Brake 1DEA  
                                ??_Junction 00FD                                     __Hparam 0000  
                     _Train_Move_Left_Start 2486                                     __Lparam 0000  
                                   __pcinit 2AA0                                     __ramtop 0800  
                           __size_of_tc_low 008E                                     __ptext0 2B10  
                                   __ptext1 00AA                                     __ptext2 1728  
                                   __ptext3 225C                                     __ptext4 1F0C  
                                   __ptext5 2486                                     __ptext6 1DEA  
                                   __ptext7 2028                                     __ptext8 2142  
                                   __ptext9 2598                        Train_Path@Return_Val 004C  
                                   _tc_high 0008                          _EUSART1_Initialize 2B80  
                 _Train_Move_Pwm_Fast_Count 000B                              __pintcode_body 284A  
                      end_of_initialization 2B02                             _Switch_Junction 00EF  
                         ??_Debounce_Inputs 00FE                         ?_EUSART1_Initialize 002C  
                      __size_of_SETxAPIxVAL 0044                               __Lmediumconst 0000  
                                   int_func 284A                            SETxPWM@pwm_speed 0280  
                         INCRxAPIxVAL@index 01FE                   __size_of_Update_StateMchn 0FE4  
                         INCRxAPIxVAL@value 01FC                         __size_of_Train_Path 0392  
                                 _RCSTAbits 000FAB                                     postdec1 000FE5  
                                   postdec2 000FDD                                     postinc0 000FEE  
                                   postinc2 000FDE              Left_Mountain_From_The_Right@rc 00FF  
                      ??_EUSART1_Initialize 00F9                                   _PORTAbits 000F80  
                                 _PORTBbits 000F81                                   _PORTCbits 000F82  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                                 _TRISEbits 000F96                       __size_of_INCRxAPIxVAL 002C  
              Junction@Junction_Switch_Time 00DE                         EUSART1_Write@txData 002C  
                    ?_Train_Move_Left_Brake 002C                                   _TXSTAbits 000FAC  
                    ?_Train_Move_Left_Start 002C                                 _Switch_Main 0020  
                               _Switch_Init 001F                                ?_Init_Timers 002C  
                        Junction@Return_Val 00F0                                 _BAUDCONbits 000FB8  
                             __pidataCOMRAM 2DD6                                _INCRxAPIxVAL 2D1E  
                      _Update_State_Machine 0025                              __end_of_tc_low 00A6  
               _Button_Contact_Counter_Stop 0010                                   _Green_Led 2A1C  
                       start_initialization 2AA0                               ??_GETxAPIxVAL 00FB  
                                 _SetDCPWM1 2BCC                             SetDCPWM1@DCycle 00FD  
                  __size_of_UPDATExTERMINAL 0008                      _Mountain_Delay_Counter 0005  
                     __end_of_EUSART1_Write 2C8E                ?_Left_Mountain_From_The_Left 002C  
                         __size_of_Init_Pwm 0016                           __size_of_Junction 00CE  
                               __pdataBANK0 00F0                            __CFG_LPT1OSC$OFF 000000  
                                  ??_tc_low 003B                              _eusart1RxCount 0026  
                              ??_Train_Path 0100                                  ?_Green_Led 002C  
                               __pbssCOMRAM 0001               __size_of_EUSART1_Transmit_ISR 002E  
                             __pcstackBANK0 00F9                               __pcstackBANK1 01FC  
                             __pcstackBANK2 027E                                  ?_SetDCPWM1 00F9  
Train_Move_Right_Brake@Train_Move_Wait_Time 00E4                                    ?_SETxPWM 01FC  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 2D96  
             ??_Left_Mountain_From_The_Left 00FF                                    ?_Red_Led 002C  
                          _Update_StateMchn 00AA                       __end_of_INIT_TERMINAL 2CC2  
    Right_Mountain_From_The_Left@Return_Val 00F3       Left_Mountain_From_The_Left@Return_Val 00F1  
                        __end_of_Train_Path 1ABA                                   __pintcode 0008  
      __end_of_Left_Mountain_From_The_Right 26AA       __size_of_Left_Mountain_From_The_Right 0112  
              _Left_Mountain_From_The_Right 2598                                 __pintcodelo 0018  
                           _Debounce_Inputs 108E                    ??_Train_Move_Right_Brake 00FF  
                                  ?_tc_high 002C             Right_Mountain_From_The_Right@rc 00FF  
                  ??_Train_Move_Right_Start 00FF                       Junction@Straight_Bend 00FC  
              _Button_Contact_Counter_Start 000F                    _Reed_Contact_LMD_Counter 0013  
                         ??_UPDATExTERMINAL 002D        __end_of_Right_Mountain_From_The_Left 225C  
     __size_of_Right_Mountain_From_The_Left 011A                _Right_Mountain_From_The_Left 2142  
                                  _PIE1bits 000F9D                              _Adjust_Counter 0001  
             Left_Mountain_From_The_Left@rc 00FF                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1                                    _RCONbits 000FD0  
                            Train_Path@From 0282                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 002C                                 ??_Green_Led 00F9  
                             ?_DECRxAPIxVAL 002C                                 ??_SetDCPWM1 00FB  
                               _GETxAPIxVAL 2D76                               ??_SETxAPIxVAL 00FB  
                                 copy_data0 2AE4                     ??_Train_Move_Left_Brake 00FF  
                  _Reed_Contact_LMU_Counter 0014                            __size_of_SETxPWM 0088  
                   ??_Train_Move_Left_Start 00FF                          SetDCPWM1@dutycycle 00F9  
                                  _Init_Pwm 2DAE                                  _EECON1bits 000FA6  
                   __size_of_APIxInitialize 0330                                    __Hrparam 0000  
                                  _Junction 277C                            __size_of_Red_Led 0084  
             ?_Right_Mountain_From_The_Left 002C                                    __Lrparam 0000  
                  _Reed_Contact_RMD_Counter 0017                     __end_of_Debounce_Inputs 1728  
               __size_of_EUSART1_Initialize 004C                           _Switch_Train_Path 0024  
                         _Switch_Train_Move 0023                            _Switch_Adjust_LB 001B  
                          _Switch_Adjust_LF 001C                            _Switch_Adjust_RB 001D  
                          _Switch_Adjust_RF 001E                              ??_DECRxAPIxVAL 00FE  
           __size_of_Train_Move_Right_Brake 011C                            __size_of_tc_high 2908  
           __size_of_Train_Move_Right_Start 0116                                    __ptext10 2372  
                                  __ptext11 2910                                    __ptext20 2C10  
                                  __ptext12 2BCC                                    __ptext21 2D76  
                                  __ptext13 277C                                    __ptext30 2C54  
                                  __ptext22 2D96                                    __ptext14 2998  
                                  __ptext31 2CF0                                    __ptext23 2DAE  
                                  __ptext15 2D1E                                    __ptext32 2D4A  
                                  __ptext24 2C8E                                    __ptext16 2A1C  
                                  __ptext25 2B80                                    __ptext17 26AA  
                                  __ptext26 1ABA                                    __ptext18 108E  
                                  __ptext19 2CC2                                    __ptext29 2DCE  
                             __size_of_main 0070                         __end_of_SETxAPIxVAL 2C54  
                   _Reed_Contact_LB_Counter 0011                                    int$flags 004D  
                   _Reed_Contact_LF_Counter 0012                           DECRxAPIxVAL@index 01FE  
                         DECRxAPIxVAL@value 01FC                    _Reed_Contact_RMU_Counter 0018  
                       _EUSART1_Receive_ISR 2D4A                       __CFG_CPUDIV$OSC2_PLL3 000000  
                             ?_Eeprom_Store 002C                    __end_of_Update_StateMchn 108E  
                                _INTCONbits 000FF2             ??_Right_Mountain_From_The_Right 00FF  
            ??_Left_Mountain_From_The_Right 00FF                     _Reed_Contact_RB_Counter 0015  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 002C                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 0016                      _Train_Move_Right_Brake 1F0C  
              __end_of_EUSART1_Transmit_ISR 2D1E                      _Train_Move_Right_Start 225C  
           Train_Move_Left_Start@Return_Val 00F6                                Train_Path@To 01FF  
                          ?_Debounce_Inputs 002C                    _Switch_Activate_Controls 001A  
            ??_Right_Mountain_From_The_Left 00FF                      __size_of_EUSART1_Write 003A  
                            ??_Eeprom_Store 00FC                             _UPDATExTERMINAL 2DCE  
                               _SETxAPIxVAL 2C10                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 002C                              _APIxInitialize 1ABA  
             _Button_Contact_Counter_Middle 000E                        __end_of_DECRxAPIxVAL 2CF0  
